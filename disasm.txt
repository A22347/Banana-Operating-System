
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 e8 7a 00 00       	call   c0007b08 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 a4 2f 02 c0       	mov    eax,0xc0022fa4
c0000025:	3d a4 2f 02 c0       	cmp    eax,0xc0022fa4
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 a4 2f 02 c0       	push   0xc0022fa4
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 a4 2f 02 c0       	mov    eax,0xc0022fa4
c0000051:	2d a4 2f 02 c0       	sub    eax,0xc0022fa4
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 a4 2f 02 c0       	push   0xc0022fa4
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 50 02 c0 00 	cmp    BYTE PTR ds:0xc00250c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb dc f6 01 c0       	mov    ebx,0xc001f6dc
c0000097:	81 eb d8 f6 01 c0    	sub    ebx,0xc001f6d8
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be d8 f6 01 c0       	mov    esi,0xc001f6d8
c00000a6:	a1 c4 50 02 c0       	mov    eax,ds:0xc00250c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 50 02 c0       	mov    ds:0xc00250c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 50 02 c0       	mov    eax,ds:0xc00250c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 a4 2f 02 c0       	push   0xc0022fa4
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 50 02 c0 01 	mov    BYTE PTR ds:0xc00250c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 50 02 c0       	push   0xc00250c8
c0000108:	68 a4 2f 02 c0       	push   0xc0022fa4
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 93 49 01 00       	call   c0014c40 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 fc a3 00 00       	call   c000a6c1 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 71 49 01 00       	call   c0014c40 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 7e 4e 01 00       	call   c001516c <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 3d 55 01 00       	call   c0015834 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 5e 02 c0 	lgdtd  ds:0xc0025ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 07 08 01 00       	jmp    c0010b86 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 e0 50 02 c0       	mov    ds:0xc00250e0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 e0 50 02 c0    	mov    DWORD PTR ds:0xc00250e0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d e0 50 02 c0    	mov    ebx,DWORD PTR ds:0xc00250e0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 e0 f6 01 c0 02 	test   BYTE PTR [edx-0x3ffe0920],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 e0 f6 01 c0 01 	test   BYTE PTR [edx-0x3ffe0920],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 e0 f6 01 c0 08 	test   BYTE PTR [edx-0x3ffe0920],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 e0 f6 01 c0 04 	test   BYTE PTR [ecx-0x3ffe0920],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 e0 f6 01 c0 01 	test   BYTE PTR [edx-0x3ffe0920],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <largebin_index>:
c0000be8:	89 c2                	mov    edx,eax
c0000bea:	c1 ea 08             	shr    edx,0x8
c0000bed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000bf3:	77 10                	ja     c0000c05 <largebin_index+0x1d>
c0000bf5:	0f bd d2             	bsr    edx,edx
c0000bf8:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000bfb:	d3 e8                	shr    eax,cl
c0000bfd:	83 e0 03             	and    eax,0x3
c0000c00:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c04:	c3                   	ret    
c0000c05:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c0a:	c3                   	ret    

c0000c0b <malloc_init_state>:
c0000c0b:	53                   	push   ebx
c0000c0c:	8d 50 34             	lea    edx,[eax+0x34]
c0000c0f:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c15:	89 d1                	mov    ecx,edx
c0000c17:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c1a:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c1d:	83 c2 08             	add    edx,0x8
c0000c20:	39 da                	cmp    edx,ebx
c0000c22:	75 f3                	jne    c0000c17 <malloc_init_state+0xc>
c0000c24:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c26:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c30:	83 e2 03             	and    edx,0x3
c0000c33:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c3d:	83 ca 48             	or     edx,0x48
c0000c40:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c4a:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c54:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c5b:	89 10                	mov    DWORD PTR [eax],edx
c0000c5d:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c60:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c6a:	5b                   	pop    ebx
c0000c6b:	c3                   	ret    

c0000c6c <malloc_consolidate>:
c0000c6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c6e:	85 d2                	test   edx,edx
c0000c70:	0f 84 d8 00 00 00    	je     c0000d4e <malloc_consolidate+0xe2>
c0000c76:	55                   	push   ebp
c0000c77:	83 e2 fd             	and    edx,0xfffffffd
c0000c7a:	57                   	push   edi
c0000c7b:	89 c5                	mov    ebp,eax
c0000c7d:	56                   	push   esi
c0000c7e:	8d 78 34             	lea    edi,[eax+0x34]
c0000c81:	53                   	push   ebx
c0000c82:	83 ec 10             	sub    esp,0x10
c0000c85:	89 10                	mov    DWORD PTR [eax],edx
c0000c87:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c8b:	c1 ea 03             	shr    edx,0x3
c0000c8e:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c96:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c99:	85 d2                	test   edx,edx
c0000c9b:	0f 84 98 00 00 00    	je     c0000d39 <malloc_consolidate+0xcd>
c0000ca1:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ca8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cab:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cb2:	89 f9                	mov    ecx,edi
c0000cb4:	83 e1 fe             	and    ecx,0xfffffffe
c0000cb7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cba:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cbd:	83 e3 fc             	and    ebx,0xfffffffc
c0000cc0:	83 e7 01             	and    edi,0x1
c0000cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cc6:	75 14                	jne    c0000cdc <malloc_consolidate+0x70>
c0000cc8:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cca:	29 fa                	sub    edx,edi
c0000ccc:	01 f9                	add    ecx,edi
c0000cce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cd1:	89 fb                	mov    ebx,edi
c0000cd3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000cd6:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000cd9:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000cdc:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000cdf:	74 40                	je     c0000d21 <malloc_consolidate+0xb5>
c0000ce1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ce4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ce7:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ceb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000cee:	83 e7 01             	and    edi,0x1
c0000cf1:	75 0e                	jne    c0000d01 <malloc_consolidate+0x95>
c0000cf3:	01 d9                	add    ecx,ebx
c0000cf5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000cf8:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000cfb:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000cfe:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d01:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d04:	89 ce                	mov    esi,ecx
c0000d06:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d09:	83 ce 01             	or     esi,0x1
c0000d0c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d0f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d12:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d15:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d19:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d1c:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d1f:	eb 0c                	jmp    c0000d2d <malloc_consolidate+0xc1>
c0000d21:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d24:	83 c9 01             	or     ecx,0x1
c0000d27:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d2a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d31:	85 d2                	test   edx,edx
c0000d33:	0f 85 6f ff ff ff    	jne    c0000ca8 <malloc_consolidate+0x3c>
c0000d39:	83 c5 04             	add    ebp,0x4
c0000d3c:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d40:	0f 85 50 ff ff ff    	jne    c0000c96 <malloc_consolidate+0x2a>
c0000d46:	83 c4 10             	add    esp,0x10
c0000d49:	5b                   	pop    ebx
c0000d4a:	5e                   	pop    esi
c0000d4b:	5f                   	pop    edi
c0000d4c:	5d                   	pop    ebp
c0000d4d:	c3                   	ret    
c0000d4e:	e9 b8 fe ff ff       	jmp    c0000c0b <malloc_init_state>

c0000d53 <dlfree>:
c0000d53:	57                   	push   edi
c0000d54:	56                   	push   esi
c0000d55:	53                   	push   ebx
c0000d56:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d5a:	85 db                	test   ebx,ebx
c0000d5c:	0f 84 e2 00 00 00    	je     c0000e44 <dlfree+0xf1>
c0000d62:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d65:	8b 0d 00 51 02 c0    	mov    ecx,DWORD PTR ds:0xc0025100
c0000d6b:	89 f0                	mov    eax,esi
c0000d6d:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d70:	83 e0 fc             	and    eax,0xfffffffc
c0000d73:	39 c1                	cmp    ecx,eax
c0000d75:	72 24                	jb     c0000d9b <dlfree+0x48>
c0000d77:	83 c9 03             	or     ecx,0x3
c0000d7a:	c1 e8 03             	shr    eax,0x3
c0000d7d:	89 0d 00 51 02 c0    	mov    DWORD PTR ds:0xc0025100,ecx
c0000d83:	83 e8 02             	sub    eax,0x2
c0000d86:	8b 0c 85 04 51 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdaefc]
c0000d8d:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d8f:	89 14 85 04 51 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaefc],edx
c0000d96:	e9 a9 00 00 00       	jmp    c0000e44 <dlfree+0xf1>
c0000d9b:	83 e6 02             	and    esi,0x2
c0000d9e:	0f 85 a0 00 00 00    	jne    c0000e44 <dlfree+0xf1>
c0000da4:	83 c9 01             	or     ecx,0x1
c0000da7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000daa:	89 0d 00 51 02 c0    	mov    DWORD PTR ds:0xc0025100,ecx
c0000db0:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000db3:	83 e1 fc             	and    ecx,0xfffffffc
c0000db6:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dba:	75 13                	jne    c0000dcf <dlfree+0x7c>
c0000dbc:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000dbf:	29 da                	sub    edx,ebx
c0000dc1:	01 d8                	add    eax,ebx
c0000dc3:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dc6:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dc9:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dcc:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000dcf:	39 35 2c 51 02 c0    	cmp    DWORD PTR ds:0xc002512c,esi
c0000dd5:	74 40                	je     c0000e17 <dlfree+0xc4>
c0000dd7:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000ddb:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000dde:	80 e3 01             	and    bl,0x1
c0000de1:	75 0e                	jne    c0000df1 <dlfree+0x9e>
c0000de3:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000de6:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000de9:	01 c8                	add    eax,ecx
c0000deb:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dee:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000df1:	8b 0d 3c 51 02 c0    	mov    ecx,DWORD PTR ds:0xc002513c
c0000df7:	c7 42 0c 34 51 02 c0 	mov    DWORD PTR [edx+0xc],0xc0025134
c0000dfe:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e01:	89 15 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,edx
c0000e07:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e0a:	89 c1                	mov    ecx,eax
c0000e0c:	83 c9 01             	or     ecx,0x1
c0000e0f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e12:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e15:	eb 10                	jmp    c0000e27 <dlfree+0xd4>
c0000e17:	01 c8                	add    eax,ecx
c0000e19:	89 c1                	mov    ecx,eax
c0000e1b:	83 c9 01             	or     ecx,0x1
c0000e1e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e21:	89 15 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,edx
c0000e27:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e2c:	76 16                	jbe    c0000e44 <dlfree+0xf1>
c0000e2e:	f6 05 00 51 02 c0 02 	test   BYTE PTR ds:0xc0025100,0x2
c0000e35:	74 0d                	je     c0000e44 <dlfree+0xf1>
c0000e37:	5b                   	pop    ebx
c0000e38:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0000e3d:	5e                   	pop    esi
c0000e3e:	5f                   	pop    edi
c0000e3f:	e9 28 fe ff ff       	jmp    c0000c6c <malloc_consolidate>
c0000e44:	5b                   	pop    ebx
c0000e45:	5e                   	pop    esi
c0000e46:	5f                   	pop    edi
c0000e47:	c3                   	ret    

c0000e48 <sYSMALLOc>:
c0000e48:	55                   	push   ebp
c0000e49:	57                   	push   edi
c0000e4a:	56                   	push   esi
c0000e4b:	53                   	push   ebx
c0000e4c:	89 d3                	mov    ebx,edx
c0000e4e:	83 ec 2c             	sub    esp,0x2c
c0000e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e55:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e5b:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e5e:	8d 42 ff             	lea    eax,[edx-0x1]
c0000e61:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000e65:	74 1f                	je     c0000e86 <sYSMALLOc+0x3e>
c0000e67:	89 d8                	mov    eax,ebx
c0000e69:	e8 fe fd ff ff       	call   c0000c6c <malloc_consolidate>
c0000e6e:	83 ec 0c             	sub    esp,0xc
c0000e71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000e75:	83 e8 07             	sub    eax,0x7
c0000e78:	50                   	push   eax
c0000e79:	e8 2d 02 00 00       	call   c00010ab <dlmalloc>
c0000e7e:	83 c4 10             	add    esp,0x10
c0000e81:	e9 1d 02 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000e86:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000e89:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e8f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e92:	83 e0 fc             	and    eax,0xfffffffc
c0000e95:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e9d:	83 c0 10             	add    eax,0x10
c0000ea0:	01 c1                	add    ecx,eax
c0000ea2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0000ea6:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000ead:	74 04                	je     c0000eb3 <sYSMALLOc+0x6b>
c0000eaf:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000eb3:	f7 da                	neg    edx
c0000eb5:	03 4c 24 14          	add    ecx,DWORD PTR [esp+0x14]
c0000eb9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0000ebd:	21 d1                	and    ecx,edx
c0000ebf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000ec3:	7f 07                	jg     c0000ecc <sYSMALLOc+0x84>
c0000ec5:	31 c0                	xor    eax,eax
c0000ec7:	e9 d7 01 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000ecc:	83 ec 0c             	sub    esp,0xc
c0000ecf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000ed3:	e8 a8 6a 00 00       	call   c0007980 <sbrk>
c0000ed8:	83 c4 10             	add    esp,0x10
c0000edb:	89 c6                	mov    esi,eax
c0000edd:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee0:	74 e3                	je     c0000ec5 <sYSMALLOc+0x7d>
c0000ee2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000ee6:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000ee9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eed:	03 83 68 03 00 00    	add    eax,DWORD PTR [ebx+0x368]
c0000ef3:	39 f1                	cmp    ecx,esi
c0000ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ef9:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000eff:	75 13                	jne    c0000f14 <sYSMALLOc+0xcc>
c0000f01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f05:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f09:	83 c8 01             	or     eax,0x1
c0000f0c:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f0f:	e9 37 01 00 00       	jmp    c000104b <sYSMALLOc+0x203>
c0000f14:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f1a:	89 d5                	mov    ebp,edx
c0000f1c:	83 e5 01             	and    ebp,0x1
c0000f1f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f24:	0f 95 c0             	setne  al
c0000f27:	21 e8                	and    eax,ebp
c0000f29:	39 f1                	cmp    ecx,esi
c0000f2b:	76 12                	jbe    c0000f3f <sYSMALLOc+0xf7>
c0000f2d:	85 c0                	test   eax,eax
c0000f2f:	74 0e                	je     c0000f3f <sYSMALLOc+0xf7>
c0000f31:	83 e2 fe             	and    edx,0xfffffffe
c0000f34:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f3a:	e9 82 00 00 00       	jmp    c0000fc1 <sYSMALLOc+0x179>
c0000f3f:	85 ed                	test   ebp,ebp
c0000f41:	74 7e                	je     c0000fc1 <sYSMALLOc+0x179>
c0000f43:	85 c0                	test   eax,eax
c0000f45:	74 0e                	je     c0000f55 <sYSMALLOc+0x10d>
c0000f47:	89 f0                	mov    eax,esi
c0000f49:	29 c8                	sub    eax,ecx
c0000f4b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0000f4f:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f55:	89 f2                	mov    edx,esi
c0000f57:	83 e2 07             	and    edx,0x7
c0000f5a:	74 0c                	je     c0000f68 <sYSMALLOc+0x120>
c0000f5c:	b8 08 00 00 00       	mov    eax,0x8
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000f66:	eb 04                	jmp    c0000f6c <sYSMALLOc+0x124>
c0000f68:	89 f5                	mov    ebp,esi
c0000f6a:	31 c0                	xor    eax,eax
c0000f6c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f70:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f74:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0000f78:	01 c1                	add    ecx,eax
c0000f7a:	83 ec 0c             	sub    esp,0xc
c0000f7d:	01 f1                	add    ecx,esi
c0000f7f:	01 ca                	add    edx,ecx
c0000f81:	29 c8                	sub    eax,ecx
c0000f83:	23 54 24 24          	and    edx,DWORD PTR [esp+0x24]
c0000f87:	01 c2                	add    edx,eax
c0000f89:	52                   	push   edx
c0000f8a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f8e:	e8 ed 69 00 00       	call   c0007980 <sbrk>
c0000f93:	83 c4 10             	add    esp,0x10
c0000f96:	83 f8 ff             	cmp    eax,0xffffffff
c0000f99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f9d:	75 0f                	jne    c0000fae <sYSMALLOc+0x166>
c0000f9f:	83 ec 0c             	sub    esp,0xc
c0000fa2:	6a 00                	push   0x0
c0000fa4:	e8 d7 69 00 00       	call   c0007980 <sbrk>
c0000fa9:	83 c4 10             	add    esp,0x10
c0000fac:	eb 30                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fae:	39 c6                	cmp    esi,eax
c0000fb0:	76 33                	jbe    c0000fe5 <sYSMALLOc+0x19d>
c0000fb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fb6:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000fbd:	01 f0                	add    eax,esi
c0000fbf:	eb 1d                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fc1:	83 ec 0c             	sub    esp,0xc
c0000fc4:	89 f5                	mov    ebp,esi
c0000fc6:	6a 00                	push   0x0
c0000fc8:	e8 b3 69 00 00       	call   c0007980 <sbrk>
c0000fcd:	89 c2                	mov    edx,eax
c0000fcf:	29 f2                	sub    edx,esi
c0000fd1:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000fd5:	83 c4 10             	add    esp,0x10
c0000fd8:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000fde:	31 d2                	xor    edx,edx
c0000fe0:	83 f8 ff             	cmp    eax,0xffffffff
c0000fe3:	74 66                	je     c000104b <sYSMALLOc+0x203>
c0000fe5:	29 e8                	sub    eax,ebp
c0000fe7:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000fea:	01 d0                	add    eax,edx
c0000fec:	83 c8 01             	or     eax,0x1
c0000fef:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000ff2:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000ff8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000ffd:	74 4c                	je     c000104b <sYSMALLOc+0x203>
c0000fff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001003:	83 e8 0c             	sub    eax,0xc
c0001006:	83 e0 f8             	and    eax,0xfffffff8
c0001009:	89 c2                	mov    edx,eax
c000100b:	83 ca 01             	or     edx,0x1
c000100e:	83 f8 0f             	cmp    eax,0xf
c0001011:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001014:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c000101c:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001024:	76 25                	jbe    c000104b <sYSMALLOc+0x203>
c0001026:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c000102c:	83 ec 0c             	sub    esp,0xc
c000102f:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0001039:	83 c7 08             	add    edi,0x8
c000103c:	57                   	push   edi
c000103d:	e8 11 fd ff ff       	call   c0000d53 <dlfree>
c0001042:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0001048:	83 c4 10             	add    esp,0x10
c000104b:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001051:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001057:	73 06                	jae    c000105f <sYSMALLOc+0x217>
c0001059:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c000105f:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0001065:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c000106b:	73 06                	jae    c0001073 <sYSMALLOc+0x22b>
c000106d:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0001073:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001076:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001079:	83 e2 fc             	and    edx,0xfffffffc
c000107c:	3b 54 24 1c          	cmp    edx,DWORD PTR [esp+0x1c]
c0001080:	0f 82 3f fe ff ff    	jb     c0000ec5 <sYSMALLOc+0x7d>
c0001086:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000108a:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000108d:	29 fa                	sub    edx,edi
c000108f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001092:	83 ca 01             	or     edx,0x1
c0001095:	89 fb                	mov    ebx,edi
c0001097:	83 c0 08             	add    eax,0x8
c000109a:	83 cb 01             	or     ebx,0x1
c000109d:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010a0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010a3:	83 c4 2c             	add    esp,0x2c
c00010a6:	5b                   	pop    ebx
c00010a7:	5e                   	pop    esi
c00010a8:	5f                   	pop    edi
c00010a9:	5d                   	pop    ebp
c00010aa:	c3                   	ret    

c00010ab <dlmalloc>:
c00010ab:	55                   	push   ebp
c00010ac:	57                   	push   edi
c00010ad:	56                   	push   esi
c00010ae:	53                   	push   ebx
c00010af:	83 ec 1c             	sub    esp,0x1c
c00010b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010b6:	83 f8 df             	cmp    eax,0xffffffdf
c00010b9:	0f 87 70 03 00 00    	ja     c000142f <dlmalloc+0x384>
c00010bf:	83 c0 0b             	add    eax,0xb
c00010c2:	be 10 00 00 00       	mov    esi,0x10
c00010c7:	83 f8 0f             	cmp    eax,0xf
c00010ca:	76 05                	jbe    c00010d1 <dlmalloc+0x26>
c00010cc:	83 e0 f8             	and    eax,0xfffffff8
c00010cf:	89 c6                	mov    esi,eax
c00010d1:	8b 3d 00 51 02 c0    	mov    edi,DWORD PTR ds:0xc0025100
c00010d7:	f7 c7 01 00 00 00    	test   edi,0x1
c00010dd:	75 17                	jne    c00010f6 <dlmalloc+0x4b>
c00010df:	85 ff                	test   edi,edi
c00010e1:	0f 85 05 03 00 00    	jne    c00013ec <dlmalloc+0x341>
c00010e7:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00010ec:	e8 7b fb ff ff       	call   c0000c6c <malloc_consolidate>
c00010f1:	e9 f6 02 00 00       	jmp    c00013ec <dlmalloc+0x341>
c00010f6:	39 f7                	cmp    edi,esi
c00010f8:	72 1f                	jb     c0001119 <dlmalloc+0x6e>
c00010fa:	89 f2                	mov    edx,esi
c00010fc:	c1 ea 03             	shr    edx,0x3
c00010ff:	83 ea 02             	sub    edx,0x2
c0001102:	8b 04 95 04 51 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdaefc]
c0001109:	85 c0                	test   eax,eax
c000110b:	74 0c                	je     c0001119 <dlmalloc+0x6e>
c000110d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001110:	89 0c 95 04 51 02 c0 	mov    DWORD PTR [edx*4-0x3ffdaefc],ecx
c0001117:	eb 30                	jmp    c0001149 <dlmalloc+0x9e>
c0001119:	89 f0                	mov    eax,esi
c000111b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001121:	77 2e                	ja     c0001151 <dlmalloc+0xa6>
c0001123:	c1 e8 03             	shr    eax,0x3
c0001126:	8d 14 c5 34 51 02 c0 	lea    edx,[eax*8-0x3ffdaecc]
c000112d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001131:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001134:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001137:	39 c3                	cmp    ebx,eax
c0001139:	74 2e                	je     c0001169 <dlmalloc+0xbe>
c000113b:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000113e:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001143:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0001146:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001149:	83 c0 08             	add    eax,0x8
c000114c:	e9 e0 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001151:	e8 92 fa ff ff       	call   c0000be8 <largebin_index>
c0001156:	83 e7 02             	and    edi,0x2
c0001159:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000115d:	74 0a                	je     c0001169 <dlmalloc+0xbe>
c000115f:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001164:	e8 03 fb ff ff       	call   c0000c6c <malloc_consolidate>
c0001169:	8d 46 10             	lea    eax,[esi+0x10]
c000116c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001170:	8b 1d 40 51 02 c0    	mov    ebx,DWORD PTR ds:0xc0025140
c0001176:	81 fb 34 51 02 c0    	cmp    ebx,0xc0025134
c000117c:	0f 84 13 01 00 00    	je     c0001295 <dlmalloc+0x1ea>
c0001182:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001185:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001188:	83 e7 fc             	and    edi,0xfffffffc
c000118b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001191:	77 4c                	ja     c00011df <dlmalloc+0x134>
c0001193:	3d 34 51 02 c0       	cmp    eax,0xc0025134
c0001198:	75 45                	jne    c00011df <dlmalloc+0x134>
c000119a:	39 1d 30 51 02 c0    	cmp    DWORD PTR ds:0xc0025130,ebx
c00011a0:	75 3d                	jne    c00011df <dlmalloc+0x134>
c00011a2:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011a6:	73 37                	jae    c00011df <dlmalloc+0x134>
c00011a8:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ab:	89 fa                	mov    edx,edi
c00011ad:	a3 3c 51 02 c0       	mov    ds:0xc002513c,eax
c00011b2:	a3 40 51 02 c0       	mov    ds:0xc0025140,eax
c00011b7:	a3 30 51 02 c0       	mov    ds:0xc0025130,eax
c00011bc:	29 f2                	sub    edx,esi
c00011be:	c7 40 08 34 51 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025134
c00011c5:	c7 40 0c 34 51 02 c0 	mov    DWORD PTR [eax+0xc],0xc0025134
c00011cc:	83 ce 01             	or     esi,0x1
c00011cf:	89 d1                	mov    ecx,edx
c00011d1:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c00011d4:	83 c9 01             	or     ecx,0x1
c00011d7:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00011da:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c00011dd:	eb 15                	jmp    c00011f4 <dlmalloc+0x149>
c00011df:	a3 40 51 02 c0       	mov    ds:0xc0025140,eax
c00011e4:	39 fe                	cmp    esi,edi
c00011e6:	c7 40 08 34 51 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025134
c00011ed:	75 0d                	jne    c00011fc <dlmalloc+0x151>
c00011ef:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c00011f4:	8d 43 08             	lea    eax,[ebx+0x8]
c00011f7:	e9 35 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00011fc:	89 f8                	mov    eax,edi
c00011fe:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001204:	77 19                	ja     c000121f <dlmalloc+0x174>
c0001206:	c1 e8 03             	shr    eax,0x3
c0001209:	8d 14 00             	lea    edx,[eax+eax*1]
c000120c:	83 c2 0d             	add    edx,0xd
c000120f:	8d 2c 95 f8 50 02 c0 	lea    ebp,[edx*4-0x3ffdaf08]
c0001216:	8b 14 95 00 51 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdaf00]
c000121d:	eb 46                	jmp    c0001265 <dlmalloc+0x1ba>
c000121f:	e8 c4 f9 ff ff       	call   c0000be8 <largebin_index>
c0001224:	8d 14 00             	lea    edx,[eax+eax*1]
c0001227:	83 c2 0d             	add    edx,0xd
c000122a:	8d 0c 95 00 51 02 c0 	lea    ecx,[edx*4-0x3ffdaf00]
c0001231:	8b 14 95 00 51 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdaf00]
c0001238:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000123b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000123f:	89 d5                	mov    ebp,edx
c0001241:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001245:	74 1e                	je     c0001265 <dlmalloc+0x1ba>
c0001247:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000124a:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c000124d:	77 12                	ja     c0001261 <dlmalloc+0x1b6>
c000124f:	83 cf 01             	or     edi,0x1
c0001252:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001255:	76 05                	jbe    c000125c <dlmalloc+0x1b1>
c0001257:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000125a:	eb f6                	jmp    c0001252 <dlmalloc+0x1a7>
c000125c:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c000125f:	eb 04                	jmp    c0001265 <dlmalloc+0x1ba>
c0001261:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001265:	89 c7                	mov    edi,eax
c0001267:	88 c1                	mov    cl,al
c0001269:	c1 ff 05             	sar    edi,0x5
c000126c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001270:	bf 01 00 00 00       	mov    edi,0x1
c0001275:	d3 e7                	shl    edi,cl
c0001277:	89 f8                	mov    eax,edi
c0001279:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000127d:	09 04 bd 34 54 02 c0 	or     DWORD PTR [edi*4-0x3ffdabcc],eax
c0001284:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001287:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000128a:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000128d:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001290:	e9 db fe ff ff       	jmp    c0001170 <dlmalloc+0xc5>
c0001295:	81 fe ff 00 00 00    	cmp    esi,0xff
c000129b:	76 78                	jbe    c0001315 <dlmalloc+0x26a>
c000129d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012a1:	8d 04 c5 34 51 02 c0 	lea    eax,[eax*8-0x3ffdaecc]
c00012a8:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ab:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012ae:	39 ca                	cmp    edx,ecx
c00012b0:	74 63                	je     c0001315 <dlmalloc+0x26a>
c00012b2:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012b5:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012b8:	83 e3 fc             	and    ebx,0xfffffffc
c00012bb:	39 de                	cmp    esi,ebx
c00012bd:	77 52                	ja     c0001311 <dlmalloc+0x266>
c00012bf:	89 df                	mov    edi,ebx
c00012c1:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012c4:	29 f7                	sub    edi,esi
c00012c6:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00012c9:	01 d3                	add    ebx,edx
c00012cb:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00012ce:	83 ff 0f             	cmp    edi,0xf
c00012d1:	8d 42 08             	lea    eax,[edx+0x8]
c00012d4:	77 09                	ja     c00012df <dlmalloc+0x234>
c00012d6:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00012da:	e9 52 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00012df:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00012e2:	83 ce 01             	or     esi,0x1
c00012e5:	89 0d 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,ecx
c00012eb:	89 0d 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,ecx
c00012f1:	c7 41 08 34 51 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0025134
c00012f8:	c7 41 0c 34 51 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0025134
c00012ff:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001302:	89 fa                	mov    edx,edi
c0001304:	83 ca 01             	or     edx,0x1
c0001307:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000130a:	89 3b                	mov    DWORD PTR [ebx],edi
c000130c:	e9 20 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001311:	89 c2                	mov    edx,eax
c0001313:	eb 99                	jmp    c00012ae <dlmalloc+0x203>
c0001315:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001319:	b8 01 00 00 00       	mov    eax,0x1
c000131e:	41                   	inc    ecx
c000131f:	89 cb                	mov    ebx,ecx
c0001321:	8d 14 cd 2c 51 02 c0 	lea    edx,[ecx*8-0x3ffdaed4]
c0001328:	c1 eb 05             	shr    ebx,0x5
c000132b:	d3 e0                	shl    eax,cl
c000132d:	8b 3c 9d 34 54 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdabcc]
c0001334:	39 f8                	cmp    eax,edi
c0001336:	77 04                	ja     c000133c <dlmalloc+0x291>
c0001338:	85 c0                	test   eax,eax
c000133a:	75 26                	jne    c0001362 <dlmalloc+0x2b7>
c000133c:	43                   	inc    ebx
c000133d:	83 fb 02             	cmp    ebx,0x2
c0001340:	0f 87 a6 00 00 00    	ja     c00013ec <dlmalloc+0x341>
c0001346:	8b 3c 9d 34 54 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdabcc]
c000134d:	85 ff                	test   edi,edi
c000134f:	74 eb                	je     c000133c <dlmalloc+0x291>
c0001351:	89 d8                	mov    eax,ebx
c0001353:	c1 e0 06             	shl    eax,0x6
c0001356:	8d 14 85 2c 51 02 c0 	lea    edx,[eax*4-0x3ffdaed4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	85 f8                	test   eax,edi
c0001364:	75 07                	jne    c000136d <dlmalloc+0x2c2>
c0001366:	83 c2 08             	add    edx,0x8
c0001369:	01 c0                	add    eax,eax
c000136b:	eb f5                	jmp    c0001362 <dlmalloc+0x2b7>
c000136d:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001370:	39 ca                	cmp    edx,ecx
c0001372:	75 14                	jne    c0001388 <dlmalloc+0x2dd>
c0001374:	89 c1                	mov    ecx,eax
c0001376:	83 c2 08             	add    edx,0x8
c0001379:	f7 d1                	not    ecx
c000137b:	01 c0                	add    eax,eax
c000137d:	21 cf                	and    edi,ecx
c000137f:	89 3c 9d 34 54 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdabcc],edi
c0001386:	eb ac                	jmp    c0001334 <dlmalloc+0x289>
c0001388:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000138b:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000138e:	83 e0 fc             	and    eax,0xfffffffc
c0001391:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001394:	89 c3                	mov    ebx,eax
c0001396:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001399:	29 f3                	sub    ebx,esi
c000139b:	8d 14 01             	lea    edx,[ecx+eax*1]
c000139e:	83 fb 0f             	cmp    ebx,0xf
c00013a1:	8d 41 08             	lea    eax,[ecx+0x8]
c00013a4:	77 09                	ja     c00013af <dlmalloc+0x304>
c00013a6:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013aa:	e9 82 00 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00013af:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013b2:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013b8:	89 3d 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,edi
c00013be:	89 3d 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,edi
c00013c4:	c7 47 08 34 51 02 c0 	mov    DWORD PTR [edi+0x8],0xc0025134
c00013cb:	c7 47 0c 34 51 02 c0 	mov    DWORD PTR [edi+0xc],0xc0025134
c00013d2:	77 06                	ja     c00013da <dlmalloc+0x32f>
c00013d4:	89 3d 30 51 02 c0    	mov    DWORD PTR ds:0xc0025130,edi
c00013da:	83 ce 01             	or     esi,0x1
c00013dd:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00013e0:	89 d9                	mov    ecx,ebx
c00013e2:	83 c9 01             	or     ecx,0x1
c00013e5:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c00013e8:	89 1a                	mov    DWORD PTR [edx],ebx
c00013ea:	eb 45                	jmp    c0001431 <dlmalloc+0x386>
c00013ec:	a1 2c 51 02 c0       	mov    eax,ds:0xc002512c
c00013f1:	8d 4e 10             	lea    ecx,[esi+0x10]
c00013f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00013f7:	83 e2 fc             	and    edx,0xfffffffc
c00013fa:	39 d1                	cmp    ecx,edx
c00013fc:	77 1e                	ja     c000141c <dlmalloc+0x371>
c00013fe:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001401:	89 f3                	mov    ebx,esi
c0001403:	89 0d 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,ecx
c0001409:	83 cb 01             	or     ebx,0x1
c000140c:	29 f2                	sub    edx,esi
c000140e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001411:	83 ca 01             	or     edx,0x1
c0001414:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001417:	e9 2d fd ff ff       	jmp    c0001149 <dlmalloc+0x9e>
c000141c:	83 c4 1c             	add    esp,0x1c
c000141f:	89 f0                	mov    eax,esi
c0001421:	5b                   	pop    ebx
c0001422:	ba 00 51 02 c0       	mov    edx,0xc0025100
c0001427:	5e                   	pop    esi
c0001428:	5f                   	pop    edi
c0001429:	5d                   	pop    ebp
c000142a:	e9 19 fa ff ff       	jmp    c0000e48 <sYSMALLOc>
c000142f:	31 c0                	xor    eax,eax
c0001431:	83 c4 1c             	add    esp,0x1c
c0001434:	5b                   	pop    ebx
c0001435:	5e                   	pop    esi
c0001436:	5f                   	pop    edi
c0001437:	5d                   	pop    ebp
c0001438:	c3                   	ret    

c0001439 <iALLOc>:
c0001439:	55                   	push   ebp
c000143a:	89 c5                	mov    ebp,eax
c000143c:	57                   	push   edi
c000143d:	56                   	push   esi
c000143e:	53                   	push   ebx
c000143f:	83 ec 2c             	sub    esp,0x2c
c0001442:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001446:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000144a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000144e:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c0001455:	75 12                	jne    c0001469 <iALLOc+0x30>
c0001457:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000145b:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001460:	e8 07 f8 ff ff       	call   c0000c6c <malloc_consolidate>
c0001465:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001469:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000146e:	74 12                	je     c0001482 <iALLOc+0x49>
c0001470:	85 ed                	test   ebp,ebp
c0001472:	0f 84 64 01 00 00    	je     c00015dc <iALLOc+0x1a3>
c0001478:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001480:	eb 33                	jmp    c00014b5 <iALLOc+0x7c>
c0001482:	85 ed                	test   ebp,ebp
c0001484:	75 14                	jne    c000149a <iALLOc+0x61>
c0001486:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000148e:	83 c4 2c             	add    esp,0x2c
c0001491:	5b                   	pop    ebx
c0001492:	5e                   	pop    esi
c0001493:	5f                   	pop    edi
c0001494:	5d                   	pop    ebp
c0001495:	e9 11 fc ff ff       	jmp    c00010ab <dlmalloc>
c000149a:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014a1:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014a9:	83 f8 0f             	cmp    eax,0xf
c00014ac:	76 07                	jbe    c00014b5 <iALLOc+0x7c>
c00014ae:	83 e0 f8             	and    eax,0xfffffff8
c00014b1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014b5:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014ba:	75 09                	jne    c00014c5 <iALLOc+0x8c>
c00014bc:	89 d0                	mov    eax,edx
c00014be:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014c1:	31 f6                	xor    esi,esi
c00014c3:	eb 3b                	jmp    c0001500 <iALLOc+0xc7>
c00014c5:	8b 02                	mov    eax,DWORD PTR [edx]
c00014c7:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00014cf:	83 c0 0b             	add    eax,0xb
c00014d2:	83 f8 0f             	cmp    eax,0xf
c00014d5:	76 07                	jbe    c00014de <iALLOc+0xa5>
c00014d7:	83 e0 f8             	and    eax,0xfffffff8
c00014da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00014de:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00014e2:	0f af f5             	imul   esi,ebp
c00014e5:	eb 25                	jmp    c000150c <iALLOc+0xd3>
c00014e7:	8b 18                	mov    ebx,DWORD PTR [eax]
c00014e9:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c00014ec:	bb 10 00 00 00       	mov    ebx,0x10
c00014f1:	83 f9 0f             	cmp    ecx,0xf
c00014f4:	76 05                	jbe    c00014fb <iALLOc+0xc2>
c00014f6:	83 e1 f8             	and    ecx,0xfffffff8
c00014f9:	89 cb                	mov    ebx,ecx
c00014fb:	01 de                	add    esi,ebx
c00014fd:	83 c0 04             	add    eax,0x4
c0001500:	39 c7                	cmp    edi,eax
c0001502:	75 e3                	jne    c00014e7 <iALLOc+0xae>
c0001504:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000150c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001510:	8b 1d 54 54 02 c0    	mov    ebx,DWORD PTR ds:0xc0025454
c0001516:	83 ec 0c             	sub    esp,0xc
c0001519:	c7 05 54 54 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025454,0x0
c0001523:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001527:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000152b:	50                   	push   eax
c000152c:	e8 7a fb ff ff       	call   c00010ab <dlmalloc>
c0001531:	83 c4 10             	add    esp,0x10
c0001534:	89 1d 54 54 02 c0    	mov    DWORD PTR ds:0xc0025454,ebx
c000153a:	85 c0                	test   eax,eax
c000153c:	0f 84 92 00 00 00    	je     c00015d4 <iALLOc+0x19b>
c0001542:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001545:	8d 78 f8             	lea    edi,[eax-0x8]
c0001548:	83 e3 fc             	and    ebx,0xfffffffc
c000154b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000154f:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001554:	74 1e                	je     c0001574 <iALLOc+0x13b>
c0001556:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000155a:	89 d9                	mov    ecx,ebx
c000155c:	52                   	push   edx
c000155d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0001561:	83 e9 04             	sub    ecx,0x4
c0001564:	51                   	push   ecx
c0001565:	6a 00                	push   0x0
c0001567:	50                   	push   eax
c0001568:	e8 83 ef ff ff       	call   c00004f0 <memset>
c000156d:	83 c4 10             	add    esp,0x10
c0001570:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001574:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001579:	75 14                	jne    c000158f <iALLOc+0x156>
c000157b:	8d 04 37             	lea    eax,[edi+esi*1]
c000157e:	29 f3                	sub    ebx,esi
c0001580:	8d 48 08             	lea    ecx,[eax+0x8]
c0001583:	83 cb 01             	or     ebx,0x1
c0001586:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000158a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000158d:	89 f3                	mov    ebx,esi
c000158f:	31 c0                	xor    eax,eax
c0001591:	4d                   	dec    ebp
c0001592:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001595:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001599:	39 c5                	cmp    ebp,eax
c000159b:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000159e:	74 2c                	je     c00015cc <iALLOc+0x193>
c00015a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015a4:	85 c9                	test   ecx,ecx
c00015a6:	75 15                	jne    c00015bd <iALLOc+0x184>
c00015a8:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ab:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015ae:	b9 10 00 00 00       	mov    ecx,0x10
c00015b3:	83 fe 0f             	cmp    esi,0xf
c00015b6:	76 05                	jbe    c00015bd <iALLOc+0x184>
c00015b8:	83 e6 f8             	and    esi,0xfffffff8
c00015bb:	89 f1                	mov    ecx,esi
c00015bd:	89 ce                	mov    esi,ecx
c00015bf:	29 cb                	sub    ebx,ecx
c00015c1:	83 ce 01             	or     esi,0x1
c00015c4:	40                   	inc    eax
c00015c5:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00015c8:	01 cf                	add    edi,ecx
c00015ca:	eb c6                	jmp    c0001592 <iALLOc+0x159>
c00015cc:	83 cb 01             	or     ebx,0x1
c00015cf:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00015d2:	eb 08                	jmp    c00015dc <iALLOc+0x1a3>
c00015d4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00015dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015e0:	83 c4 2c             	add    esp,0x2c
c00015e3:	5b                   	pop    ebx
c00015e4:	5e                   	pop    esi
c00015e5:	5f                   	pop    edi
c00015e6:	5d                   	pop    ebp
c00015e7:	c3                   	ret    

c00015e8 <dlrealloc>:
c00015e8:	55                   	push   ebp
c00015e9:	57                   	push   edi
c00015ea:	56                   	push   esi
c00015eb:	53                   	push   ebx
c00015ec:	83 ec 1c             	sub    esp,0x1c
c00015ef:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00015f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00015f7:	85 db                	test   ebx,ebx
c00015f9:	75 10                	jne    c000160b <dlrealloc+0x23>
c00015fb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00015ff:	83 c4 1c             	add    esp,0x1c
c0001602:	5b                   	pop    ebx
c0001603:	5e                   	pop    esi
c0001604:	5f                   	pop    edi
c0001605:	5d                   	pop    ebp
c0001606:	e9 a0 fa ff ff       	jmp    c00010ab <dlmalloc>
c000160b:	83 f8 df             	cmp    eax,0xffffffdf
c000160e:	76 07                	jbe    c0001617 <dlrealloc+0x2f>
c0001610:	31 db                	xor    ebx,ebx
c0001612:	e9 6a 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001617:	83 c0 0b             	add    eax,0xb
c000161a:	bd 10 00 00 00       	mov    ebp,0x10
c000161f:	83 f8 0f             	cmp    eax,0xf
c0001622:	76 05                	jbe    c0001629 <dlrealloc+0x41>
c0001624:	83 e0 f8             	and    eax,0xfffffff8
c0001627:	89 c5                	mov    ebp,eax
c0001629:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000162c:	8d 7b f8             	lea    edi,[ebx-0x8]
c000162f:	89 c6                	mov    esi,eax
c0001631:	83 e6 fc             	and    esi,0xfffffffc
c0001634:	a8 02                	test   al,0x2
c0001636:	75 d8                	jne    c0001610 <dlrealloc+0x28>
c0001638:	39 f5                	cmp    ebp,esi
c000163a:	0f 86 04 01 00 00    	jbe    c0001744 <dlrealloc+0x15c>
c0001640:	8d 14 37             	lea    edx,[edi+esi*1]
c0001643:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001646:	39 15 2c 51 02 c0    	cmp    DWORD PTR ds:0xc002512c,edx
c000164c:	75 33                	jne    c0001681 <dlrealloc+0x99>
c000164e:	83 e1 fc             	and    ecx,0xfffffffc
c0001651:	01 f1                	add    ecx,esi
c0001653:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001657:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000165a:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000165e:	77 49                	ja     c00016a9 <dlrealloc+0xc1>
c0001660:	01 ef                	add    edi,ebp
c0001662:	83 e0 01             	and    eax,0x1
c0001665:	09 e8                	or     eax,ebp
c0001667:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c000166a:	89 3d 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,edi
c0001670:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001674:	29 e8                	sub    eax,ebp
c0001676:	83 c8 01             	or     eax,0x1
c0001679:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000167c:	e9 00 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001681:	89 c8                	mov    eax,ecx
c0001683:	83 e0 fe             	and    eax,0xfffffffe
c0001686:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c000168b:	75 1c                	jne    c00016a9 <dlrealloc+0xc1>
c000168d:	83 e1 fc             	and    ecx,0xfffffffc
c0001690:	01 f1                	add    ecx,esi
c0001692:	39 cd                	cmp    ebp,ecx
c0001694:	77 13                	ja     c00016a9 <dlrealloc+0xc1>
c0001696:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001699:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000169c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000169f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016a2:	89 ce                	mov    esi,ecx
c00016a4:	e9 9b 00 00 00       	jmp    c0001744 <dlrealloc+0x15c>
c00016a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016ad:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016b0:	83 ec 0c             	sub    esp,0xc
c00016b3:	50                   	push   eax
c00016b4:	e8 f2 f9 ff ff       	call   c00010ab <dlmalloc>
c00016b9:	83 c4 10             	add    esp,0x10
c00016bc:	85 c0                	test   eax,eax
c00016be:	0f 84 4c ff ff ff    	je     c0001610 <dlrealloc+0x28>
c00016c4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00016c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00016cb:	39 ca                	cmp    edx,ecx
c00016cd:	75 0a                	jne    c00016d9 <dlrealloc+0xf1>
c00016cf:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c00016d2:	83 e0 fc             	and    eax,0xfffffffc
c00016d5:	01 c6                	add    esi,eax
c00016d7:	eb 6b                	jmp    c0001744 <dlrealloc+0x15c>
c00016d9:	8d 4e fc             	lea    ecx,[esi-0x4]
c00016dc:	83 f9 27             	cmp    ecx,0x27
c00016df:	76 08                	jbe    c00016e9 <dlrealloc+0x101>
c00016e1:	89 de                	mov    esi,ebx
c00016e3:	89 c7                	mov    edi,eax
c00016e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00016e7:	eb 43                	jmp    c000172c <dlrealloc+0x144>
c00016e9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00016eb:	83 f9 13             	cmp    ecx,0x13
c00016ee:	89 10                	mov    DWORD PTR [eax],edx
c00016f0:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00016f3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00016f6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00016f9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00016fc:	76 2e                	jbe    c000172c <dlrealloc+0x144>
c00016fe:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001701:	83 f9 1b             	cmp    ecx,0x1b
c0001704:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001707:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000170a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000170d:	76 1d                	jbe    c000172c <dlrealloc+0x144>
c000170f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001712:	83 f9 23             	cmp    ecx,0x23
c0001715:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001718:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000171b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000171e:	76 0c                	jbe    c000172c <dlrealloc+0x144>
c0001720:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001723:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001726:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001729:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000172c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001730:	83 ec 0c             	sub    esp,0xc
c0001733:	53                   	push   ebx
c0001734:	e8 1a f6 ff ff       	call   c0000d53 <dlfree>
c0001739:	83 c4 10             	add    esp,0x10
c000173c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001740:	89 c3                	mov    ebx,eax
c0001742:	eb 3d                	jmp    c0001781 <dlrealloc+0x199>
c0001744:	89 f2                	mov    edx,esi
c0001746:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001749:	29 ea                	sub    edx,ebp
c000174b:	83 e1 01             	and    ecx,0x1
c000174e:	8d 04 37             	lea    eax,[edi+esi*1]
c0001751:	83 fa 0f             	cmp    edx,0xf
c0001754:	77 0b                	ja     c0001761 <dlrealloc+0x179>
c0001756:	09 ce                	or     esi,ecx
c0001758:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000175b:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000175f:	eb 20                	jmp    c0001781 <dlrealloc+0x199>
c0001761:	01 ef                	add    edi,ebp
c0001763:	83 ec 0c             	sub    esp,0xc
c0001766:	09 cd                	or     ebp,ecx
c0001768:	83 ca 01             	or     edx,0x1
c000176b:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000176e:	83 c7 08             	add    edi,0x8
c0001771:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001774:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001778:	57                   	push   edi
c0001779:	e8 d5 f5 ff ff       	call   c0000d53 <dlfree>
c000177e:	83 c4 10             	add    esp,0x10
c0001781:	83 c4 1c             	add    esp,0x1c
c0001784:	89 d8                	mov    eax,ebx
c0001786:	5b                   	pop    ebx
c0001787:	5e                   	pop    esi
c0001788:	5f                   	pop    edi
c0001789:	5d                   	pop    ebp
c000178a:	c3                   	ret    

c000178b <dlmemalign>:
c000178b:	55                   	push   ebp
c000178c:	57                   	push   edi
c000178d:	56                   	push   esi
c000178e:	53                   	push   ebx
c000178f:	83 ec 0c             	sub    esp,0xc
c0001792:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001796:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000179a:	83 fa 08             	cmp    edx,0x8
c000179d:	77 10                	ja     c00017af <dlmemalign+0x24>
c000179f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017a3:	83 c4 0c             	add    esp,0xc
c00017a6:	5b                   	pop    ebx
c00017a7:	5e                   	pop    esi
c00017a8:	5f                   	pop    edi
c00017a9:	5d                   	pop    ebp
c00017aa:	e9 fc f8 ff ff       	jmp    c00010ab <dlmalloc>
c00017af:	bf 10 00 00 00       	mov    edi,0x10
c00017b4:	83 fa 0f             	cmp    edx,0xf
c00017b7:	76 13                	jbe    c00017cc <dlmemalign+0x41>
c00017b9:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017bc:	85 d1                	test   ecx,edx
c00017be:	75 04                	jne    c00017c4 <dlmemalign+0x39>
c00017c0:	89 d7                	mov    edi,edx
c00017c2:	eb 08                	jmp    c00017cc <dlmemalign+0x41>
c00017c4:	39 d7                	cmp    edi,edx
c00017c6:	73 04                	jae    c00017cc <dlmemalign+0x41>
c00017c8:	01 ff                	add    edi,edi
c00017ca:	eb f8                	jmp    c00017c4 <dlmemalign+0x39>
c00017cc:	83 f8 df             	cmp    eax,0xffffffdf
c00017cf:	76 07                	jbe    c00017d8 <dlmemalign+0x4d>
c00017d1:	31 c0                	xor    eax,eax
c00017d3:	e9 ce 00 00 00       	jmp    c00018a6 <dlmemalign+0x11b>
c00017d8:	83 c0 0b             	add    eax,0xb
c00017db:	bd 10 00 00 00       	mov    ebp,0x10
c00017e0:	83 f8 0f             	cmp    eax,0xf
c00017e3:	76 05                	jbe    c00017ea <dlmemalign+0x5f>
c00017e5:	83 e0 f8             	and    eax,0xfffffff8
c00017e8:	89 c5                	mov    ebp,eax
c00017ea:	83 ec 0c             	sub    esp,0xc
c00017ed:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00017f1:	50                   	push   eax
c00017f2:	e8 b4 f8 ff ff       	call   c00010ab <dlmalloc>
c00017f7:	83 c4 10             	add    esp,0x10
c00017fa:	89 c1                	mov    ecx,eax
c00017fc:	85 c0                	test   eax,eax
c00017fe:	74 d1                	je     c00017d1 <dlmemalign+0x46>
c0001800:	31 d2                	xor    edx,edx
c0001802:	8d 70 f8             	lea    esi,[eax-0x8]
c0001805:	f7 f7                	div    edi
c0001807:	85 d2                	test   edx,edx
c0001809:	74 62                	je     c000186d <dlmemalign+0xe2>
c000180b:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000180f:	89 f8                	mov    eax,edi
c0001811:	f7 d8                	neg    eax
c0001813:	21 c3                	and    ebx,eax
c0001815:	83 eb 08             	sub    ebx,0x8
c0001818:	89 d8                	mov    eax,ebx
c000181a:	29 f0                	sub    eax,esi
c000181c:	83 f8 0f             	cmp    eax,0xf
c000181f:	77 02                	ja     c0001823 <dlmemalign+0x98>
c0001821:	01 fb                	add    ebx,edi
c0001823:	89 d8                	mov    eax,ebx
c0001825:	29 f0                	sub    eax,esi
c0001827:	89 c6                	mov    esi,eax
c0001829:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000182c:	89 c2                	mov    edx,eax
c000182e:	83 e2 fc             	and    edx,0xfffffffc
c0001831:	29 f2                	sub    edx,esi
c0001833:	a8 02                	test   al,0x2
c0001835:	74 10                	je     c0001847 <dlmemalign+0xbc>
c0001837:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000183a:	83 ca 02             	or     edx,0x2
c000183d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001840:	89 33                	mov    DWORD PTR [ebx],esi
c0001842:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001845:	eb 5f                	jmp    c00018a6 <dlmemalign+0x11b>
c0001847:	83 ec 0c             	sub    esp,0xc
c000184a:	89 d0                	mov    eax,edx
c000184c:	83 c8 01             	or     eax,0x1
c000184f:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001852:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001857:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000185a:	83 e0 01             	and    eax,0x1
c000185d:	09 f0                	or     eax,esi
c000185f:	89 de                	mov    esi,ebx
c0001861:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001864:	51                   	push   ecx
c0001865:	e8 e9 f4 ff ff       	call   c0000d53 <dlfree>
c000186a:	83 c4 10             	add    esp,0x10
c000186d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001870:	a8 02                	test   al,0x2
c0001872:	75 2f                	jne    c00018a3 <dlmemalign+0x118>
c0001874:	83 e0 fc             	and    eax,0xfffffffc
c0001877:	8d 55 10             	lea    edx,[ebp+0x10]
c000187a:	39 c2                	cmp    edx,eax
c000187c:	73 25                	jae    c00018a3 <dlmemalign+0x118>
c000187e:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001881:	83 ec 0c             	sub    esp,0xc
c0001884:	29 e8                	sub    eax,ebp
c0001886:	83 c2 08             	add    edx,0x8
c0001889:	83 c8 01             	or     eax,0x1
c000188c:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000188f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001892:	83 e0 01             	and    eax,0x1
c0001895:	09 c5                	or     ebp,eax
c0001897:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c000189a:	52                   	push   edx
c000189b:	e8 b3 f4 ff ff       	call   c0000d53 <dlfree>
c00018a0:	83 c4 10             	add    esp,0x10
c00018a3:	8d 46 08             	lea    eax,[esi+0x8]
c00018a6:	83 c4 0c             	add    esp,0xc
c00018a9:	5b                   	pop    ebx
c00018aa:	5e                   	pop    esi
c00018ab:	5f                   	pop    edi
c00018ac:	5d                   	pop    ebp
c00018ad:	c3                   	ret    

c00018ae <dlcalloc>:
c00018ae:	53                   	push   ebx
c00018af:	83 ec 14             	sub    esp,0x14
c00018b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018b6:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018bb:	50                   	push   eax
c00018bc:	e8 ea f7 ff ff       	call   c00010ab <dlmalloc>
c00018c1:	83 c4 10             	add    esp,0x10
c00018c4:	89 c3                	mov    ebx,eax
c00018c6:	85 c0                	test   eax,eax
c00018c8:	74 77                	je     c0001941 <dlcalloc+0x93>
c00018ca:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00018cd:	89 d0                	mov    eax,edx
c00018cf:	83 e0 fc             	and    eax,0xfffffffc
c00018d2:	80 e2 02             	and    dl,0x2
c00018d5:	75 5a                	jne    c0001931 <dlcalloc+0x83>
c00018d7:	83 e8 04             	sub    eax,0x4
c00018da:	83 f8 27             	cmp    eax,0x27
c00018dd:	76 03                	jbe    c00018e2 <dlcalloc+0x34>
c00018df:	51                   	push   ecx
c00018e0:	eb 53                	jmp    c0001935 <dlcalloc+0x87>
c00018e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00018e8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00018ef:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00018f6:	83 f8 13             	cmp    eax,0x13
c00018f9:	76 46                	jbe    c0001941 <dlcalloc+0x93>
c00018fb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001902:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001909:	83 f8 1b             	cmp    eax,0x1b
c000190c:	76 33                	jbe    c0001941 <dlcalloc+0x93>
c000190e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001915:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000191c:	83 f8 23             	cmp    eax,0x23
c000191f:	76 20                	jbe    c0001941 <dlcalloc+0x93>
c0001921:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001928:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000192f:	eb 10                	jmp    c0001941 <dlcalloc+0x93>
c0001931:	83 e8 08             	sub    eax,0x8
c0001934:	52                   	push   edx
c0001935:	50                   	push   eax
c0001936:	6a 00                	push   0x0
c0001938:	53                   	push   ebx
c0001939:	e8 b2 eb ff ff       	call   c00004f0 <memset>
c000193e:	83 c4 10             	add    esp,0x10
c0001941:	89 d8                	mov    eax,ebx
c0001943:	83 c4 08             	add    esp,0x8
c0001946:	5b                   	pop    ebx
c0001947:	c3                   	ret    

c0001948 <dlcfree>:
c0001948:	e9 06 f4 ff ff       	jmp    c0000d53 <dlfree>

c000194d <dlindependent_calloc>:
c000194d:	83 ec 28             	sub    esp,0x28
c0001950:	b9 03 00 00 00       	mov    ecx,0x3
c0001955:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001959:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000195d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001961:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001965:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001969:	e8 cb fa ff ff       	call   c0001439 <iALLOc>
c000196e:	83 c4 2c             	add    esp,0x2c
c0001971:	c3                   	ret    

c0001972 <dlindependent_comalloc>:
c0001972:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001976:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000197a:	31 c9                	xor    ecx,ecx
c000197c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001980:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001984:	e9 b0 fa ff ff       	jmp    c0001439 <iALLOc>

c0001989 <dlvalloc>:
c0001989:	83 ec 0c             	sub    esp,0xc
c000198c:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c0001993:	75 0a                	jne    c000199f <dlvalloc+0x16>
c0001995:	b8 00 51 02 c0       	mov    eax,0xc0025100
c000199a:	e8 cd f2 ff ff       	call   c0000c6c <malloc_consolidate>
c000199f:	50                   	push   eax
c00019a0:	50                   	push   eax
c00019a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019a5:	ff 35 5c 54 02 c0    	push   DWORD PTR ds:0xc002545c
c00019ab:	e8 db fd ff ff       	call   c000178b <dlmemalign>
c00019b0:	83 c4 1c             	add    esp,0x1c
c00019b3:	c3                   	ret    

c00019b4 <dlpvalloc>:
c00019b4:	83 ec 0c             	sub    esp,0xc
c00019b7:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c00019be:	75 0a                	jne    c00019ca <dlpvalloc+0x16>
c00019c0:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00019c5:	e8 a2 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019ca:	a1 5c 54 02 c0       	mov    eax,ds:0xc002545c
c00019cf:	89 c1                	mov    ecx,eax
c00019d1:	52                   	push   edx
c00019d2:	f7 d9                	neg    ecx
c00019d4:	52                   	push   edx
c00019d5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00019d9:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c00019dd:	21 ca                	and    edx,ecx
c00019df:	52                   	push   edx
c00019e0:	50                   	push   eax
c00019e1:	e8 a5 fd ff ff       	call   c000178b <dlmemalign>
c00019e6:	83 c4 1c             	add    esp,0x1c
c00019e9:	c3                   	ret    

c00019ea <dlmalloc_trim>:
c00019ea:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00019ef:	e8 78 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019f4:	31 c0                	xor    eax,eax
c00019f6:	c3                   	ret    

c00019f7 <dlmalloc_usable_size>:
c00019f7:	53                   	push   ebx
c00019f8:	31 c0                	xor    eax,eax
c00019fa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00019fe:	85 c9                	test   ecx,ecx
c0001a00:	74 24                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a02:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a05:	f6 c2 02             	test   dl,0x2
c0001a08:	74 08                	je     c0001a12 <dlmalloc_usable_size+0x1b>
c0001a0a:	83 e2 fc             	and    edx,0xfffffffc
c0001a0d:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a10:	eb 14                	jmp    c0001a26 <dlmalloc_usable_size+0x2f>
c0001a12:	89 d3                	mov    ebx,edx
c0001a14:	31 c0                	xor    eax,eax
c0001a16:	83 e3 fe             	and    ebx,0xfffffffe
c0001a19:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a1e:	74 06                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a20:	83 e2 fc             	and    edx,0xfffffffc
c0001a23:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a26:	5b                   	pop    ebx
c0001a27:	c3                   	ret    

c0001a28 <dlmallinfo>:
c0001a28:	55                   	push   ebp
c0001a29:	57                   	push   edi
c0001a2a:	56                   	push   esi
c0001a2b:	53                   	push   ebx
c0001a2c:	83 ec 08             	sub    esp,0x8
c0001a2f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a33:	83 3d 2c 51 02 c0 00 	cmp    DWORD PTR ds:0xc002512c,0x0
c0001a3a:	75 0a                	jne    c0001a46 <dlmallinfo+0x1e>
c0001a3c:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001a41:	e8 26 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c0001a46:	a1 2c 51 02 c0       	mov    eax,ds:0xc002512c
c0001a4b:	31 ed                	xor    ebp,ebp
c0001a4d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a50:	31 c9                	xor    ecx,ecx
c0001a52:	83 e0 fc             	and    eax,0xfffffffc
c0001a55:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a59:	31 c0                	xor    eax,eax
c0001a5b:	8b 14 85 04 51 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaefc]
c0001a62:	85 d2                	test   edx,edx
c0001a64:	74 0e                	je     c0001a74 <dlmallinfo+0x4c>
c0001a66:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001a69:	45                   	inc    ebp
c0001a6a:	83 e6 fc             	and    esi,0xfffffffc
c0001a6d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001a70:	01 f1                	add    ecx,esi
c0001a72:	eb ee                	jmp    c0001a62 <dlmallinfo+0x3a>
c0001a74:	40                   	inc    eax
c0001a75:	83 f8 0a             	cmp    eax,0xa
c0001a78:	75 e1                	jne    c0001a5b <dlmallinfo+0x33>
c0001a7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a7e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001a85:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a88:	b8 34 51 02 c0       	mov    eax,0xc0025134
c0001a8d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a90:	39 f0                	cmp    eax,esi
c0001a92:	74 10                	je     c0001aa4 <dlmallinfo+0x7c>
c0001a94:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a97:	ff 04 24             	inc    DWORD PTR [esp]
c0001a9a:	83 e7 fc             	and    edi,0xfffffffc
c0001a9d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001aa0:	01 fa                	add    edx,edi
c0001aa2:	eb ec                	jmp    c0001a90 <dlmallinfo+0x68>
c0001aa4:	83 c0 08             	add    eax,0x8
c0001aa7:	3d 2c 54 02 c0       	cmp    eax,0xc002542c
c0001aac:	75 df                	jne    c0001a8d <dlmallinfo+0x65>
c0001aae:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001ab1:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001ab4:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001ab7:	a1 68 54 02 c0       	mov    eax,ds:0xc0025468
c0001abc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001abf:	89 03                	mov    DWORD PTR [ebx],eax
c0001ac1:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001ac4:	8b 35 50 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025450
c0001aca:	29 d0                	sub    eax,edx
c0001acc:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001acf:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001ad2:	8b 35 64 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025464
c0001ad8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001adc:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001adf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001ae2:	8b 35 74 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025474
c0001ae8:	89 d8                	mov    eax,ebx
c0001aea:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001aed:	83 c4 08             	add    esp,0x8
c0001af0:	5b                   	pop    ebx
c0001af1:	5e                   	pop    esi
c0001af2:	5f                   	pop    edi
c0001af3:	5d                   	pop    ebp
c0001af4:	c2 04 00             	ret    0x4

c0001af7 <dlmalloc_stats>:
c0001af7:	83 ec 30             	sub    esp,0x30
c0001afa:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001afe:	50                   	push   eax
c0001aff:	e8 24 ff ff ff       	call   c0001a28 <dlmallinfo>
c0001b04:	83 c4 30             	add    esp,0x30
c0001b07:	c3                   	ret    

c0001b08 <dlmallopt>:
c0001b08:	56                   	push   esi
c0001b09:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001b0e:	53                   	push   ebx
c0001b0f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b13:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b17:	e8 50 f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b1c:	8d 46 04             	lea    eax,[esi+0x4]
c0001b1f:	83 f8 05             	cmp    eax,0x5
c0001b22:	77 67                	ja     c0001b8b <dlmallopt+0x83>
c0001b24:	ff 24 85 e4 f7 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe081c]
c0001b2b:	83 fb 50             	cmp    ebx,0x50
c0001b2e:	77 5b                	ja     c0001b8b <dlmallopt+0x83>
c0001b30:	ba 08 00 00 00       	mov    edx,0x8
c0001b35:	85 db                	test   ebx,ebx
c0001b37:	74 12                	je     c0001b4b <dlmallopt+0x43>
c0001b39:	83 c3 0b             	add    ebx,0xb
c0001b3c:	ba 10 00 00 00       	mov    edx,0x10
c0001b41:	83 fb 0f             	cmp    ebx,0xf
c0001b44:	76 05                	jbe    c0001b4b <dlmallopt+0x43>
c0001b46:	89 da                	mov    edx,ebx
c0001b48:	83 e2 f8             	and    edx,0xfffffff8
c0001b4b:	a1 00 51 02 c0       	mov    eax,ds:0xc0025100
c0001b50:	83 e0 03             	and    eax,0x3
c0001b53:	09 d0                	or     eax,edx
c0001b55:	a3 00 51 02 c0       	mov    ds:0xc0025100,eax
c0001b5a:	eb 31                	jmp    c0001b8d <dlmallopt+0x85>
c0001b5c:	89 1d 44 54 02 c0    	mov    DWORD PTR ds:0xc0025444,ebx
c0001b62:	eb 06                	jmp    c0001b6a <dlmallopt+0x62>
c0001b64:	89 1d 48 54 02 c0    	mov    DWORD PTR ds:0xc0025448,ebx
c0001b6a:	be 01 00 00 00       	mov    esi,0x1
c0001b6f:	eb 1c                	jmp    c0001b8d <dlmallopt+0x85>
c0001b71:	89 1d 4c 54 02 c0    	mov    DWORD PTR ds:0xc002544c,ebx
c0001b77:	eb f1                	jmp    c0001b6a <dlmallopt+0x62>
c0001b79:	31 f6                	xor    esi,esi
c0001b7b:	85 db                	test   ebx,ebx
c0001b7d:	75 0e                	jne    c0001b8d <dlmallopt+0x85>
c0001b7f:	c7 05 54 54 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025454,0x0
c0001b89:	eb df                	jmp    c0001b6a <dlmallopt+0x62>
c0001b8b:	31 f6                	xor    esi,esi
c0001b8d:	89 f0                	mov    eax,esi
c0001b8f:	5b                   	pop    ebx
c0001b90:	5e                   	pop    esi
c0001b91:	c3                   	ret    
c0001b92:	66 90                	xchg   ax,ax

c0001b94 <isblank>:
c0001b94:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b99:	74 09                	je     c0001ba4 <isblank+0x10>
c0001b9b:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ba0:	75 0a                	jne    c0001bac <isblank+0x18>
c0001ba2:	66 90                	xchg   ax,ax
c0001ba4:	b8 01 00 00 00       	mov    eax,0x1
c0001ba9:	c3                   	ret    
c0001baa:	66 90                	xchg   ax,ax
c0001bac:	b8 00 00 00 00       	mov    eax,0x0
c0001bb1:	c3                   	ret    
c0001bb2:	66 90                	xchg   ax,ax

c0001bb4 <iscntrl>:
c0001bb4:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bb9:	7e 09                	jle    c0001bc4 <iscntrl+0x10>
c0001bbb:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bc0:	75 0a                	jne    c0001bcc <iscntrl+0x18>
c0001bc2:	66 90                	xchg   ax,ax
c0001bc4:	b8 01 00 00 00       	mov    eax,0x1
c0001bc9:	c3                   	ret    
c0001bca:	66 90                	xchg   ax,ax
c0001bcc:	b8 00 00 00 00       	mov    eax,0x0
c0001bd1:	c3                   	ret    
c0001bd2:	66 90                	xchg   ax,ax

c0001bd4 <isdigit>:
c0001bd4:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001bd9:	7e 0d                	jle    c0001be8 <isdigit+0x14>
c0001bdb:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001be0:	7f 06                	jg     c0001be8 <isdigit+0x14>
c0001be2:	b8 01 00 00 00       	mov    eax,0x1
c0001be7:	c3                   	ret    
c0001be8:	b8 00 00 00 00       	mov    eax,0x0
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax

c0001bf0 <islower>:
c0001bf0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001bf5:	7e 0d                	jle    c0001c04 <islower+0x14>
c0001bf7:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001bfc:	7f 06                	jg     c0001c04 <islower+0x14>
c0001bfe:	b8 01 00 00 00       	mov    eax,0x1
c0001c03:	c3                   	ret    
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isspace>:
c0001c0c:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c11:	7c 19                	jl     c0001c2c <isspace+0x20>
c0001c13:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c18:	7e 0a                	jle    c0001c24 <isspace+0x18>
c0001c1a:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c1f:	75 0b                	jne    c0001c2c <isspace+0x20>
c0001c21:	8d 76 00             	lea    esi,[esi+0x0]
c0001c24:	b8 01 00 00 00       	mov    eax,0x1
c0001c29:	c3                   	ret    
c0001c2a:	66 90                	xchg   ax,ax
c0001c2c:	b8 00 00 00 00       	mov    eax,0x0
c0001c31:	c3                   	ret    
c0001c32:	66 90                	xchg   ax,ax

c0001c34 <isupper>:
c0001c34:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c39:	7e 0d                	jle    c0001c48 <isupper+0x14>
c0001c3b:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c40:	7f 06                	jg     c0001c48 <isupper+0x14>
c0001c42:	b8 01 00 00 00       	mov    eax,0x1
c0001c47:	c3                   	ret    
c0001c48:	b8 00 00 00 00       	mov    eax,0x0
c0001c4d:	c3                   	ret    
c0001c4e:	66 90                	xchg   ax,ax

c0001c50 <isalpha>:
c0001c50:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c54:	e8 db ff ff ff       	call   c0001c34 <isupper>
c0001c59:	83 c4 04             	add    esp,0x4
c0001c5c:	85 c0                	test   eax,eax
c0001c5e:	75 10                	jne    c0001c70 <isalpha+0x20>
c0001c60:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c64:	e8 87 ff ff ff       	call   c0001bf0 <islower>
c0001c69:	83 c4 04             	add    esp,0x4
c0001c6c:	85 c0                	test   eax,eax
c0001c6e:	74 08                	je     c0001c78 <isalpha+0x28>
c0001c70:	b8 01 00 00 00       	mov    eax,0x1
c0001c75:	c3                   	ret    
c0001c76:	66 90                	xchg   ax,ax
c0001c78:	b8 00 00 00 00       	mov    eax,0x0
c0001c7d:	c3                   	ret    
c0001c7e:	66 90                	xchg   ax,ax

c0001c80 <isalnum>:
c0001c80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c84:	e8 c7 ff ff ff       	call   c0001c50 <isalpha>
c0001c89:	83 c4 04             	add    esp,0x4
c0001c8c:	85 c0                	test   eax,eax
c0001c8e:	75 10                	jne    c0001ca0 <isalnum+0x20>
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 3b ff ff ff       	call   c0001bd4 <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	74 08                	je     c0001ca8 <isalnum+0x28>
c0001ca0:	b8 01 00 00 00       	mov    eax,0x1
c0001ca5:	c3                   	ret    
c0001ca6:	66 90                	xchg   ax,ax
c0001ca8:	b8 00 00 00 00       	mov    eax,0x0
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax

c0001cb0 <ispunct>:
c0001cb0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cb4:	e8 c7 ff ff ff       	call   c0001c80 <isalnum>
c0001cb9:	83 c4 04             	add    esp,0x4
c0001cbc:	85 c0                	test   eax,eax
c0001cbe:	75 28                	jne    c0001ce8 <ispunct+0x38>
c0001cc0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cc4:	e8 43 ff ff ff       	call   c0001c0c <isspace>
c0001cc9:	83 c4 04             	add    esp,0x4
c0001ccc:	85 c0                	test   eax,eax
c0001cce:	75 18                	jne    c0001ce8 <ispunct+0x38>
c0001cd0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cd4:	e8 db fe ff ff       	call   c0001bb4 <iscntrl>
c0001cd9:	83 c4 04             	add    esp,0x4
c0001cdc:	85 c0                	test   eax,eax
c0001cde:	75 08                	jne    c0001ce8 <ispunct+0x38>
c0001ce0:	b8 01 00 00 00       	mov    eax,0x1
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax
c0001ce8:	b8 00 00 00 00       	mov    eax,0x0
c0001ced:	c3                   	ret    
c0001cee:	66 90                	xchg   ax,ax

c0001cf0 <isgraph>:
c0001cf0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cf4:	e8 87 ff ff ff       	call   c0001c80 <isalnum>
c0001cf9:	83 c4 04             	add    esp,0x4
c0001cfc:	85 c0                	test   eax,eax
c0001cfe:	75 10                	jne    c0001d10 <isgraph+0x20>
c0001d00:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d04:	e8 a7 ff ff ff       	call   c0001cb0 <ispunct>
c0001d09:	83 c4 04             	add    esp,0x4
c0001d0c:	85 c0                	test   eax,eax
c0001d0e:	74 08                	je     c0001d18 <isgraph+0x28>
c0001d10:	b8 01 00 00 00       	mov    eax,0x1
c0001d15:	c3                   	ret    
c0001d16:	66 90                	xchg   ax,ax
c0001d18:	b8 00 00 00 00       	mov    eax,0x0
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax

c0001d20 <isprint>:
c0001d20:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d24:	e8 c7 ff ff ff       	call   c0001cf0 <isgraph>
c0001d29:	83 c4 04             	add    esp,0x4
c0001d2c:	85 c0                	test   eax,eax
c0001d2e:	75 08                	jne    c0001d38 <isprint+0x18>
c0001d30:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d35:	75 09                	jne    c0001d40 <isprint+0x20>
c0001d37:	90                   	nop
c0001d38:	b8 01 00 00 00       	mov    eax,0x1
c0001d3d:	c3                   	ret    
c0001d3e:	66 90                	xchg   ax,ax
c0001d40:	b8 00 00 00 00       	mov    eax,0x0
c0001d45:	c3                   	ret    
c0001d46:	66 90                	xchg   ax,ax

c0001d48 <isxdigit>:
c0001d48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d4c:	e8 83 fe ff ff       	call   c0001bd4 <isdigit>
c0001d51:	83 c4 04             	add    esp,0x4
c0001d54:	85 c0                	test   eax,eax
c0001d56:	75 20                	jne    c0001d78 <isxdigit+0x30>
c0001d58:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d5d:	7e 09                	jle    c0001d68 <isxdigit+0x20>
c0001d5f:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d64:	7e 12                	jle    c0001d78 <isxdigit+0x30>
c0001d66:	66 90                	xchg   ax,ax
c0001d68:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d6d:	7e 11                	jle    c0001d80 <isxdigit+0x38>
c0001d6f:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001d74:	7f 0a                	jg     c0001d80 <isxdigit+0x38>
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 01 00 00 00       	mov    eax,0x1
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax
c0001d80:	b8 00 00 00 00       	mov    eax,0x0
c0001d85:	c3                   	ret    

c0001d86 <disk_status>:
c0001d86:	31 c0                	xor    eax,eax
c0001d88:	c3                   	ret    

c0001d89 <disk_initialize>:
c0001d89:	31 c0                	xor    eax,eax
c0001d8b:	c3                   	ret    

c0001d8c <disk_read>:
c0001d8c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d91:	0f b6 04 85 c0 92 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd6d40]
c0001d99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d9d:	e9 ce 6f 01 00       	jmp    c0018d70 <fatWrapperReadDisk>

c0001da2 <disk_write>:
c0001da2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001da7:	0f b6 04 85 c0 92 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd6d40]
c0001daf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001db3:	e9 f8 6f 01 00       	jmp    c0018db0 <fatWrapperWriteDisk>

c0001db8 <disk_ioctl>:
c0001db8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001dbd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001dc1:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc6:	0f b6 04 85 c0 92 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd6d40]
c0001dce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd2:	e9 19 70 01 00       	jmp    c0018df0 <fatWrapperIoctl>

c0001dd7 <ld_word>:
c0001dd7:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ddb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001dde:	c1 e2 08             	shl    edx,0x8
c0001de1:	09 d0                	or     eax,edx
c0001de3:	c3                   	ret    

c0001de4 <ld_dword>:
c0001de4:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001de8:	89 d1                	mov    ecx,edx
c0001dea:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001dee:	c1 e1 08             	shl    ecx,0x8
c0001df1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001df4:	09 ca                	or     edx,ecx
c0001df6:	c1 e2 08             	shl    edx,0x8
c0001df9:	09 d0                	or     eax,edx
c0001dfb:	c3                   	ret    

c0001dfc <st_word>:
c0001dfc:	66 89 10             	mov    WORD PTR [eax],dx
c0001dff:	c3                   	ret    

c0001e00 <st_dword>:
c0001e00:	89 10                	mov    DWORD PTR [eax],edx
c0001e02:	c3                   	ret    

c0001e03 <mem_cpy>:
c0001e03:	85 c9                	test   ecx,ecx
c0001e05:	74 10                	je     c0001e17 <mem_cpy+0x14>
c0001e07:	57                   	push   edi
c0001e08:	01 c1                	add    ecx,eax
c0001e0a:	56                   	push   esi
c0001e0b:	89 c7                	mov    edi,eax
c0001e0d:	89 d6                	mov    esi,edx
c0001e0f:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e10:	39 f9                	cmp    ecx,edi
c0001e12:	75 fb                	jne    c0001e0f <mem_cpy+0xc>
c0001e14:	5e                   	pop    esi
c0001e15:	5f                   	pop    edi
c0001e16:	c3                   	ret    
c0001e17:	c3                   	ret    

c0001e18 <mem_set>:
c0001e18:	01 c1                	add    ecx,eax
c0001e1a:	40                   	inc    eax
c0001e1b:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001e1e:	39 c8                	cmp    eax,ecx
c0001e20:	75 f8                	jne    c0001e1a <mem_set+0x2>
c0001e22:	c3                   	ret    

c0001e23 <mem_cmp>:
c0001e23:	57                   	push   edi
c0001e24:	56                   	push   esi
c0001e25:	89 c6                	mov    esi,eax
c0001e27:	53                   	push   ebx
c0001e28:	46                   	inc    esi
c0001e29:	42                   	inc    edx
c0001e2a:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e2e:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e32:	29 fb                	sub    ebx,edi
c0001e34:	89 cf                	mov    edi,ecx
c0001e36:	29 f7                	sub    edi,esi
c0001e38:	01 c7                	add    edi,eax
c0001e3a:	74 04                	je     c0001e40 <mem_cmp+0x1d>
c0001e3c:	85 db                	test   ebx,ebx
c0001e3e:	74 e8                	je     c0001e28 <mem_cmp+0x5>
c0001e40:	89 d8                	mov    eax,ebx
c0001e42:	5b                   	pop    ebx
c0001e43:	5e                   	pop    esi
c0001e44:	5f                   	pop    edi
c0001e45:	c3                   	ret    

c0001e46 <chk_chr>:
c0001e46:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e49:	85 c9                	test   ecx,ecx
c0001e4b:	74 07                	je     c0001e54 <chk_chr+0xe>
c0001e4d:	39 d1                	cmp    ecx,edx
c0001e4f:	74 03                	je     c0001e54 <chk_chr+0xe>
c0001e51:	40                   	inc    eax
c0001e52:	eb f2                	jmp    c0001e46 <chk_chr>
c0001e54:	89 c8                	mov    eax,ecx
c0001e56:	c3                   	ret    

c0001e57 <dbc_1st>:
c0001e57:	31 c0                	xor    eax,eax
c0001e59:	c3                   	ret    

c0001e5a <dbc_2nd>:
c0001e5a:	31 c0                	xor    eax,eax
c0001e5c:	c3                   	ret    

c0001e5d <tchar2uni>:
c0001e5d:	57                   	push   edi
c0001e5e:	56                   	push   esi
c0001e5f:	53                   	push   ebx
c0001e60:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e62:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e64:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e67:	f6 c1 80             	test   cl,0x80
c0001e6a:	75 0a                	jne    c0001e76 <tchar2uni+0x19>
c0001e6c:	0f b6 d1             	movzx  edx,cl
c0001e6f:	89 f3                	mov    ebx,esi
c0001e71:	e9 b2 00 00 00       	jmp    c0001f28 <tchar2uni+0xcb>
c0001e76:	89 ca                	mov    edx,ecx
c0001e78:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001e7e:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001e84:	89 ca                	mov    edx,ecx
c0001e86:	75 0a                	jne    c0001e92 <tchar2uni+0x35>
c0001e88:	83 e2 1f             	and    edx,0x1f
c0001e8b:	b9 01 00 00 00       	mov    ecx,0x1
c0001e90:	eb 37                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001e92:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001e98:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001e9e:	75 0c                	jne    c0001eac <tchar2uni+0x4f>
c0001ea0:	89 ca                	mov    edx,ecx
c0001ea2:	b9 02 00 00 00       	mov    ecx,0x2
c0001ea7:	83 e2 0f             	and    edx,0xf
c0001eaa:	eb 1d                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001eac:	89 cf                	mov    edi,ecx
c0001eae:	83 ca ff             	or     edx,0xffffffff
c0001eb1:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eb7:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ebd:	75 70                	jne    c0001f2f <tchar2uni+0xd2>
c0001ebf:	89 ca                	mov    edx,ecx
c0001ec1:	b9 03 00 00 00       	mov    ecx,0x3
c0001ec6:	83 e2 07             	and    edx,0x7
c0001ec9:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001ecd:	46                   	inc    esi
c0001ece:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001ed1:	89 cf                	mov    edi,ecx
c0001ed3:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001ed9:	83 c7 80             	add    edi,0xffffff80
c0001edc:	75 4e                	jne    c0001f2c <tchar2uni+0xcf>
c0001ede:	c1 e2 06             	shl    edx,0x6
c0001ee1:	83 e1 3f             	and    ecx,0x3f
c0001ee4:	09 ca                	or     edx,ecx
c0001ee6:	39 de                	cmp    esi,ebx
c0001ee8:	75 e3                	jne    c0001ecd <tchar2uni+0x70>
c0001eea:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001eed:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001ef3:	77 37                	ja     c0001f2c <tchar2uni+0xcf>
c0001ef5:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001efb:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f01:	76 29                	jbe    c0001f2c <tchar2uni+0xcf>
c0001f03:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f09:	76 1d                	jbe    c0001f28 <tchar2uni+0xcb>
c0001f0b:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f11:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f17:	c1 e1 06             	shl    ecx,0x6
c0001f1a:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f20:	09 ca                	or     edx,ecx
c0001f22:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f28:	89 18                	mov    DWORD PTR [eax],ebx
c0001f2a:	eb 03                	jmp    c0001f2f <tchar2uni+0xd2>
c0001f2c:	83 ca ff             	or     edx,0xffffffff
c0001f2f:	5b                   	pop    ebx
c0001f30:	89 d0                	mov    eax,edx
c0001f32:	5e                   	pop    esi
c0001f33:	5f                   	pop    edi
c0001f34:	c3                   	ret    

c0001f35 <put_utf>:
c0001f35:	53                   	push   ebx
c0001f36:	83 f8 7f             	cmp    eax,0x7f
c0001f39:	89 c3                	mov    ebx,eax
c0001f3b:	b0 00                	mov    al,0x0
c0001f3d:	77 11                	ja     c0001f50 <put_utf+0x1b>
c0001f3f:	85 c9                	test   ecx,ecx
c0001f41:	0f 84 e5 00 00 00    	je     c000202c <put_utf+0xf7>
c0001f47:	88 1a                	mov    BYTE PTR [edx],bl
c0001f49:	b0 01                	mov    al,0x1
c0001f4b:	e9 dc 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f50:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f56:	77 23                	ja     c0001f7b <put_utf+0x46>
c0001f58:	83 f9 01             	cmp    ecx,0x1
c0001f5b:	0f 86 cb 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f61:	89 d8                	mov    eax,ebx
c0001f63:	83 e3 3f             	and    ebx,0x3f
c0001f66:	c1 e8 06             	shr    eax,0x6
c0001f69:	83 cb 80             	or     ebx,0xffffff80
c0001f6c:	83 c8 c0             	or     eax,0xffffffc0
c0001f6f:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001f72:	88 02                	mov    BYTE PTR [edx],al
c0001f74:	b0 02                	mov    al,0x2
c0001f76:	e9 b1 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f7b:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001f81:	77 40                	ja     c0001fc3 <put_utf+0x8e>
c0001f83:	83 f9 02             	cmp    ecx,0x2
c0001f86:	0f 86 a0 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f8c:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001f92:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f98:	0f 86 8e 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f9e:	89 d8                	mov    eax,ebx
c0001fa0:	c1 e8 0c             	shr    eax,0xc
c0001fa3:	83 c8 e0             	or     eax,0xffffffe0
c0001fa6:	88 02                	mov    BYTE PTR [edx],al
c0001fa8:	89 d8                	mov    eax,ebx
c0001faa:	83 e3 3f             	and    ebx,0x3f
c0001fad:	c1 e8 06             	shr    eax,0x6
c0001fb0:	83 cb 80             	or     ebx,0xffffff80
c0001fb3:	83 e0 3f             	and    eax,0x3f
c0001fb6:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fb9:	83 c8 80             	or     eax,0xffffff80
c0001fbc:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001fbf:	b0 03                	mov    al,0x3
c0001fc1:	eb 69                	jmp    c000202c <put_utf+0xf7>
c0001fc3:	83 f9 03             	cmp    ecx,0x3
c0001fc6:	76 64                	jbe    c000202c <put_utf+0xf7>
c0001fc8:	89 d9                	mov    ecx,ebx
c0001fca:	0f b7 c3             	movzx  eax,bx
c0001fcd:	66 31 c9             	xor    cx,cx
c0001fd0:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001fd6:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001fdc:	c1 e9 06             	shr    ecx,0x6
c0001fdf:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001fe5:	77 43                	ja     c000202a <put_utf+0xf5>
c0001fe7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001fed:	77 3b                	ja     c000202a <put_utf+0xf5>
c0001fef:	09 cb                	or     ebx,ecx
c0001ff1:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ff7:	89 d8                	mov    eax,ebx
c0001ff9:	c1 e8 12             	shr    eax,0x12
c0001ffc:	83 c8 f0             	or     eax,0xfffffff0
c0001fff:	88 02                	mov    BYTE PTR [edx],al
c0002001:	89 d8                	mov    eax,ebx
c0002003:	c1 e8 0c             	shr    eax,0xc
c0002006:	83 e0 3f             	and    eax,0x3f
c0002009:	83 c8 80             	or     eax,0xffffff80
c000200c:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c000200f:	89 d8                	mov    eax,ebx
c0002011:	83 e3 3f             	and    ebx,0x3f
c0002014:	c1 e8 06             	shr    eax,0x6
c0002017:	83 cb 80             	or     ebx,0xffffff80
c000201a:	83 e0 3f             	and    eax,0x3f
c000201d:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002020:	83 c8 80             	or     eax,0xffffff80
c0002023:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0002026:	b0 04                	mov    al,0x4
c0002028:	eb 02                	jmp    c000202c <put_utf+0xf7>
c000202a:	31 c0                	xor    eax,eax
c000202c:	5b                   	pop    ebx
c000202d:	c3                   	ret    

c000202e <clst2sect>:
c000202e:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002031:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0002034:	83 ea 02             	sub    edx,0x2
c0002037:	39 ca                	cmp    edx,ecx
c0002039:	76 0d                	jbe    c0002048 <clst2sect+0x1a>
c000203b:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000203f:	0f af d1             	imul   edx,ecx
c0002042:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0002045:	89 d0                	mov    eax,edx
c0002047:	c3                   	ret    
c0002048:	31 c0                	xor    eax,eax
c000204a:	c3                   	ret    

c000204b <pick_lfn>:
c000204b:	55                   	push   ebp
c000204c:	57                   	push   edi
c000204d:	89 c7                	mov    edi,eax
c000204f:	56                   	push   esi
c0002050:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002053:	53                   	push   ebx
c0002054:	89 d3                	mov    ebx,edx
c0002056:	e8 7c fd ff ff       	call   c0001dd7 <ld_word>
c000205b:	66 85 c0             	test   ax,ax
c000205e:	74 04                	je     c0002064 <pick_lfn+0x19>
c0002060:	31 c0                	xor    eax,eax
c0002062:	eb 62                	jmp    c00020c6 <pick_lfn+0x7b>
c0002064:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002067:	bd 01 00 00 00       	mov    ebp,0x1
c000206c:	83 e1 bf             	and    ecx,0xffffffbf
c000206f:	31 f6                	xor    esi,esi
c0002071:	49                   	dec    ecx
c0002072:	6b c9 0d             	imul   ecx,ecx,0xd
c0002075:	0f b6 86 40 f9 01 c0 	movzx  eax,BYTE PTR [esi-0x3ffe06c0]
c000207c:	01 d8                	add    eax,ebx
c000207e:	e8 54 fd ff ff       	call   c0001dd7 <ld_word>
c0002083:	66 85 ed             	test   bp,bp
c0002086:	74 11                	je     c0002099 <pick_lfn+0x4e>
c0002088:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c000208e:	77 d0                	ja     c0002060 <pick_lfn+0x15>
c0002090:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c0002094:	89 c5                	mov    ebp,eax
c0002096:	41                   	inc    ecx
c0002097:	eb 0a                	jmp    c00020a3 <pick_lfn+0x58>
c0002099:	0f b7 c0             	movzx  eax,ax
c000209c:	3d ff ff 00 00       	cmp    eax,0xffff
c00020a1:	75 bd                	jne    c0002060 <pick_lfn+0x15>
c00020a3:	46                   	inc    esi
c00020a4:	83 fe 0d             	cmp    esi,0xd
c00020a7:	75 cc                	jne    c0002075 <pick_lfn+0x2a>
c00020a9:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020ac:	74 13                	je     c00020c1 <pick_lfn+0x76>
c00020ae:	66 85 ed             	test   bp,bp
c00020b1:	74 0e                	je     c00020c1 <pick_lfn+0x76>
c00020b3:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020b9:	77 a5                	ja     c0002060 <pick_lfn+0x15>
c00020bb:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020c1:	b8 01 00 00 00       	mov    eax,0x1
c00020c6:	5b                   	pop    ebx
c00020c7:	5e                   	pop    esi
c00020c8:	5f                   	pop    edi
c00020c9:	5d                   	pop    ebp
c00020ca:	c3                   	ret    

c00020cb <put_lfn>:
c00020cb:	55                   	push   ebp
c00020cc:	57                   	push   edi
c00020cd:	89 d7                	mov    edi,edx
c00020cf:	56                   	push   esi
c00020d0:	31 f6                	xor    esi,esi
c00020d2:	53                   	push   ebx
c00020d3:	83 ec 0c             	sub    esp,0xc
c00020d6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00020da:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00020de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00020e2:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00020e8:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00020eb:	8d 42 1a             	lea    eax,[edx+0x1a]
c00020ee:	31 d2                	xor    edx,edx
c00020f0:	e8 07 fd ff ff       	call   c0001dfc <st_word>
c00020f5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00020fc:	0f b6 d9             	movzx  ebx,cl
c00020ff:	4b                   	dec    ebx
c0002100:	6b db 0d             	imul   ebx,ebx,0xd
c0002103:	0f b7 c6             	movzx  eax,si
c0002106:	3d ff ff 00 00       	cmp    eax,0xffff
c000210b:	74 09                	je     c0002116 <put_lfn+0x4b>
c000210d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002111:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c0002115:	43                   	inc    ebx
c0002116:	0f b7 ee             	movzx  ebp,si
c0002119:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000211c:	89 ea                	mov    edx,ebp
c000211e:	0f b6 80 40 f9 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe06c0]
c0002125:	01 f8                	add    eax,edi
c0002127:	e8 d0 fc ff ff       	call   c0001dfc <st_word>
c000212c:	85 ed                	test   ebp,ebp
c000212e:	75 05                	jne    c0002135 <put_lfn+0x6a>
c0002130:	be ff ff 00 00       	mov    esi,0xffff
c0002135:	ff 04 24             	inc    DWORD PTR [esp]
c0002138:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c000213c:	75 c5                	jne    c0002103 <put_lfn+0x38>
c000213e:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002144:	74 0b                	je     c0002151 <put_lfn+0x86>
c0002146:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000214a:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000214f:	75 07                	jne    c0002158 <put_lfn+0x8d>
c0002151:	83 c9 40             	or     ecx,0x40
c0002154:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002158:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000215c:	88 07                	mov    BYTE PTR [edi],al
c000215e:	83 c4 0c             	add    esp,0xc
c0002161:	5b                   	pop    ebx
c0002162:	5e                   	pop    esi
c0002163:	5f                   	pop    edi
c0002164:	5d                   	pop    ebp
c0002165:	c3                   	ret    

c0002166 <gen_numname>:
c0002166:	57                   	push   edi
c0002167:	89 cf                	mov    edi,ecx
c0002169:	56                   	push   esi
c000216a:	b9 0b 00 00 00       	mov    ecx,0xb
c000216f:	53                   	push   ebx
c0002170:	89 c6                	mov    esi,eax
c0002172:	83 ec 10             	sub    esp,0x10
c0002175:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002179:	e8 85 fc ff ff       	call   c0001e03 <mem_cpy>
c000217e:	83 fb 05             	cmp    ebx,0x5
c0002181:	76 30                	jbe    c00021b3 <gen_numname+0x4d>
c0002183:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002186:	66 85 c0             	test   ax,ax
c0002189:	74 28                	je     c00021b3 <gen_numname+0x4d>
c000218b:	83 c7 02             	add    edi,0x2
c000218e:	ba 10 00 00 00       	mov    edx,0x10
c0002193:	01 db                	add    ebx,ebx
c0002195:	89 c1                	mov    ecx,eax
c0002197:	c1 e0 10             	shl    eax,0x10
c000219a:	83 e1 01             	and    ecx,0x1
c000219d:	c1 e8 11             	shr    eax,0x11
c00021a0:	01 cb                	add    ebx,ecx
c00021a2:	0f ba e3 10          	bt     ebx,0x10
c00021a6:	73 06                	jae    c00021ae <gen_numname+0x48>
c00021a8:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021ae:	4a                   	dec    edx
c00021af:	75 e2                	jne    c0002193 <gen_numname+0x2d>
c00021b1:	eb d0                	jmp    c0002183 <gen_numname+0x1d>
c00021b3:	b8 07 00 00 00       	mov    eax,0x7
c00021b8:	89 d9                	mov    ecx,ebx
c00021ba:	83 e1 0f             	and    ecx,0xf
c00021bd:	8d 79 30             	lea    edi,[ecx+0x30]
c00021c0:	89 fa                	mov    edx,edi
c00021c2:	83 ff 39             	cmp    edi,0x39
c00021c5:	76 03                	jbe    c00021ca <gen_numname+0x64>
c00021c7:	8d 51 37             	lea    edx,[ecx+0x37]
c00021ca:	8d 48 ff             	lea    ecx,[eax-0x1]
c00021cd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00021d1:	89 da                	mov    edx,ebx
c00021d3:	c1 ea 04             	shr    edx,0x4
c00021d6:	83 fb 0f             	cmp    ebx,0xf
c00021d9:	76 06                	jbe    c00021e1 <gen_numname+0x7b>
c00021db:	89 c8                	mov    eax,ecx
c00021dd:	89 d3                	mov    ebx,edx
c00021df:	eb d7                	jmp    c00021b8 <gen_numname+0x52>
c00021e1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00021e6:	31 d2                	xor    edx,edx
c00021e8:	8d 58 fe             	lea    ebx,[eax-0x2]
c00021eb:	8d 04 16             	lea    eax,[esi+edx*1]
c00021ee:	39 ca                	cmp    edx,ecx
c00021f0:	73 19                	jae    c000220b <gen_numname+0xa5>
c00021f2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00021f5:	83 f8 20             	cmp    eax,0x20
c00021f8:	74 11                	je     c000220b <gen_numname+0xa5>
c00021fa:	e8 58 fc ff ff       	call   c0001e57 <dbc_1st>
c00021ff:	85 c0                	test   eax,eax
c0002201:	74 05                	je     c0002208 <gen_numname+0xa2>
c0002203:	39 d3                	cmp    ebx,edx
c0002205:	74 04                	je     c000220b <gen_numname+0xa5>
c0002207:	42                   	inc    edx
c0002208:	42                   	inc    edx
c0002209:	eb e0                	jmp    c00021eb <gen_numname+0x85>
c000220b:	b0 20                	mov    al,0x20
c000220d:	83 f9 07             	cmp    ecx,0x7
c0002210:	77 05                	ja     c0002217 <gen_numname+0xb1>
c0002212:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002216:	41                   	inc    ecx
c0002217:	42                   	inc    edx
c0002218:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000221c:	83 fa 07             	cmp    edx,0x7
c000221f:	76 ea                	jbe    c000220b <gen_numname+0xa5>
c0002221:	83 c4 10             	add    esp,0x10
c0002224:	5b                   	pop    ebx
c0002225:	5e                   	pop    esi
c0002226:	5f                   	pop    edi
c0002227:	c3                   	ret    

c0002228 <sum_sfn>:
c0002228:	53                   	push   ebx
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	31 db                	xor    ebx,ebx
c000222d:	0f b6 d1             	movzx  edx,cl
c0002230:	c1 e1 07             	shl    ecx,0x7
c0002233:	d1 ea                	shr    edx,1
c0002235:	09 ca                	or     edx,ecx
c0002237:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c000223a:	43                   	inc    ebx
c000223b:	01 ca                	add    edx,ecx
c000223d:	83 fb 0b             	cmp    ebx,0xb
c0002240:	88 d1                	mov    cl,dl
c0002242:	75 e9                	jne    c000222d <sum_sfn+0x5>
c0002244:	88 d0                	mov    al,dl
c0002246:	5b                   	pop    ebx
c0002247:	c3                   	ret    

c0002248 <get_ldnumber>:
c0002248:	8b 10                	mov    edx,DWORD PTR [eax]
c000224a:	85 d2                	test   edx,edx
c000224c:	74 14                	je     c0002262 <get_ldnumber+0x1a>
c000224e:	56                   	push   esi
c000224f:	53                   	push   ebx
c0002250:	89 d3                	mov    ebx,edx
c0002252:	43                   	inc    ebx
c0002253:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002256:	80 f9 1f             	cmp    cl,0x1f
c0002259:	76 0d                	jbe    c0002268 <get_ldnumber+0x20>
c000225b:	80 f9 3a             	cmp    cl,0x3a
c000225e:	75 f2                	jne    c0002252 <get_ldnumber+0xa>
c0002260:	eb 0a                	jmp    c000226c <get_ldnumber+0x24>
c0002262:	83 c9 ff             	or     ecx,0xffffffff
c0002265:	89 c8                	mov    eax,ecx
c0002267:	c3                   	ret    
c0002268:	31 c9                	xor    ecx,ecx
c000226a:	eb 24                	jmp    c0002290 <get_ldnumber+0x48>
c000226c:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226f:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002272:	80 f9 09             	cmp    cl,0x9
c0002275:	77 16                	ja     c000228d <get_ldnumber+0x45>
c0002277:	83 c2 02             	add    edx,0x2
c000227a:	83 c9 ff             	or     ecx,0xffffffff
c000227d:	39 d3                	cmp    ebx,edx
c000227f:	75 0f                	jne    c0002290 <get_ldnumber+0x48>
c0002281:	89 f2                	mov    edx,esi
c0002283:	89 18                	mov    DWORD PTR [eax],ebx
c0002285:	0f be ca             	movsx  ecx,dl
c0002288:	83 e9 30             	sub    ecx,0x30
c000228b:	eb 03                	jmp    c0002290 <get_ldnumber+0x48>
c000228d:	83 c9 ff             	or     ecx,0xffffffff
c0002290:	89 c8                	mov    eax,ecx
c0002292:	5b                   	pop    ebx
c0002293:	5e                   	pop    esi
c0002294:	c3                   	ret    

c0002295 <validate>:
c0002295:	56                   	push   esi
c0002296:	53                   	push   ebx
c0002297:	89 d6                	mov    esi,edx
c0002299:	51                   	push   ecx
c000229a:	85 c0                	test   eax,eax
c000229c:	75 09                	jne    c00022a7 <validate+0x12>
c000229e:	b8 09 00 00 00       	mov    eax,0x9
c00022a3:	31 c9                	xor    ecx,ecx
c00022a5:	eb 2e                	jmp    c00022d5 <validate+0x40>
c00022a7:	89 c3                	mov    ebx,eax
c00022a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00022ab:	85 c0                	test   eax,eax
c00022ad:	74 ef                	je     c000229e <validate+0x9>
c00022af:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022b2:	74 ea                	je     c000229e <validate+0x9>
c00022b4:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022b7:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022bb:	75 e1                	jne    c000229e <validate+0x9>
c00022bd:	83 ec 0c             	sub    esp,0xc
c00022c0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c4:	50                   	push   eax
c00022c5:	e8 bc fa ff ff       	call   c0001d86 <disk_status>
c00022ca:	83 c4 10             	add    esp,0x10
c00022cd:	a8 01                	test   al,0x1
c00022cf:	75 cd                	jne    c000229e <validate+0x9>
c00022d1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00022d3:	31 c0                	xor    eax,eax
c00022d5:	89 0e                	mov    DWORD PTR [esi],ecx
c00022d7:	5a                   	pop    edx
c00022d8:	5b                   	pop    ebx
c00022d9:	5e                   	pop    esi
c00022da:	c3                   	ret    

c00022db <sync_window>:
c00022db:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022df:	74 58                	je     c0002339 <sync_window+0x5e>
c00022e1:	56                   	push   esi
c00022e2:	53                   	push   ebx
c00022e3:	8d 70 34             	lea    esi,[eax+0x34]
c00022e6:	51                   	push   ecx
c00022e7:	89 c3                	mov    ebx,eax
c00022e9:	6a 01                	push   0x1
c00022eb:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00022ee:	56                   	push   esi
c00022ef:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f3:	50                   	push   eax
c00022f4:	e8 a9 fa ff ff       	call   c0001da2 <disk_write>
c00022f9:	83 c4 10             	add    esp,0x10
c00022fc:	ba 01 00 00 00       	mov    edx,0x1
c0002301:	85 c0                	test   eax,eax
c0002303:	75 2e                	jne    c0002333 <sync_window+0x58>
c0002305:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002308:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000230b:	89 c1                	mov    ecx,eax
c000230d:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002311:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c0002314:	39 d1                	cmp    ecx,edx
c0002316:	73 19                	jae    c0002331 <sync_window+0x56>
c0002318:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000231c:	75 13                	jne    c0002331 <sync_window+0x56>
c000231e:	6a 01                	push   0x1
c0002320:	01 d0                	add    eax,edx
c0002322:	50                   	push   eax
c0002323:	56                   	push   esi
c0002324:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002328:	50                   	push   eax
c0002329:	e8 74 fa ff ff       	call   c0001da2 <disk_write>
c000232e:	83 c4 10             	add    esp,0x10
c0002331:	31 d2                	xor    edx,edx
c0002333:	89 d0                	mov    eax,edx
c0002335:	5a                   	pop    edx
c0002336:	5b                   	pop    ebx
c0002337:	5e                   	pop    esi
c0002338:	c3                   	ret    
c0002339:	31 d2                	xor    edx,edx
c000233b:	89 d0                	mov    eax,edx
c000233d:	c3                   	ret    

c000233e <move_window>:
c000233e:	57                   	push   edi
c000233f:	56                   	push   esi
c0002340:	31 f6                	xor    esi,esi
c0002342:	53                   	push   ebx
c0002343:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002346:	74 32                	je     c000237a <move_window+0x3c>
c0002348:	89 c3                	mov    ebx,eax
c000234a:	89 d7                	mov    edi,edx
c000234c:	e8 8a ff ff ff       	call   c00022db <sync_window>
c0002351:	89 c6                	mov    esi,eax
c0002353:	85 c0                	test   eax,eax
c0002355:	75 23                	jne    c000237a <move_window+0x3c>
c0002357:	6a 01                	push   0x1
c0002359:	8d 43 34             	lea    eax,[ebx+0x34]
c000235c:	57                   	push   edi
c000235d:	50                   	push   eax
c000235e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002362:	50                   	push   eax
c0002363:	e8 24 fa ff ff       	call   c0001d8c <disk_read>
c0002368:	83 c4 10             	add    esp,0x10
c000236b:	85 c0                	test   eax,eax
c000236d:	74 08                	je     c0002377 <move_window+0x39>
c000236f:	be 01 00 00 00       	mov    esi,0x1
c0002374:	83 cf ff             	or     edi,0xffffffff
c0002377:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c000237a:	89 f0                	mov    eax,esi
c000237c:	5b                   	pop    ebx
c000237d:	5e                   	pop    esi
c000237e:	5f                   	pop    edi
c000237f:	c3                   	ret    

c0002380 <check_fs>:
c0002380:	53                   	push   ebx
c0002381:	89 c3                	mov    ebx,eax
c0002383:	83 ec 08             	sub    esp,0x8
c0002386:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000238a:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002391:	e8 a8 ff ff ff       	call   c000233e <move_window>
c0002396:	ba 04 00 00 00       	mov    edx,0x4
c000239b:	85 c0                	test   eax,eax
c000239d:	75 68                	jne    c0002407 <check_fs+0x87>
c000239f:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023a5:	e8 2d fa ff ff       	call   c0001dd7 <ld_word>
c00023aa:	ba 03 00 00 00       	mov    edx,0x3
c00023af:	66 3d 55 aa          	cmp    ax,0xaa55
c00023b3:	75 52                	jne    c0002407 <check_fs+0x87>
c00023b5:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023b8:	8d 50 18             	lea    edx,[eax+0x18]
c00023bb:	80 fa 01             	cmp    dl,0x1
c00023be:	76 09                	jbe    c00023c9 <check_fs+0x49>
c00023c0:	ba 02 00 00 00       	mov    edx,0x2
c00023c5:	3c eb                	cmp    al,0xeb
c00023c7:	75 3e                	jne    c0002407 <check_fs+0x87>
c00023c9:	ba c0 1f 02 c0       	mov    edx,0xc0021fc0
c00023ce:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00023d1:	b9 03 00 00 00       	mov    ecx,0x3
c00023d6:	e8 48 fa ff ff       	call   c0001e23 <mem_cmp>
c00023db:	31 d2                	xor    edx,edx
c00023dd:	85 c0                	test   eax,eax
c00023df:	74 26                	je     c0002407 <check_fs+0x87>
c00023e1:	ba fc f7 01 c0       	mov    edx,0xc001f7fc
c00023e6:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00023ec:	b9 05 00 00 00       	mov    ecx,0x5
c00023f1:	e8 2d fa ff ff       	call   c0001e23 <mem_cmp>
c00023f6:	31 d2                	xor    edx,edx
c00023f8:	85 c0                	test   eax,eax
c00023fa:	74 0b                	je     c0002407 <check_fs+0x87>
c00023fc:	31 d2                	xor    edx,edx
c00023fe:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002402:	0f 95 c2             	setne  dl
c0002405:	01 d2                	add    edx,edx
c0002407:	89 d0                	mov    eax,edx
c0002409:	83 c4 08             	add    esp,0x8
c000240c:	5b                   	pop    ebx
c000240d:	c3                   	ret    

c000240e <find_volume>:
c000240e:	55                   	push   ebp
c000240f:	57                   	push   edi
c0002410:	56                   	push   esi
c0002411:	89 c6                	mov    esi,eax
c0002413:	53                   	push   ebx
c0002414:	89 d3                	mov    ebx,edx
c0002416:	83 ec 2c             	sub    esp,0x2c
c0002419:	31 d2                	xor    edx,edx
c000241b:	e8 60 ff ff ff       	call   c0002380 <check_fs>
c0002420:	83 f8 02             	cmp    eax,0x2
c0002423:	74 06                	je     c000242b <find_volume+0x1d>
c0002425:	77 62                	ja     c0002489 <find_volume+0x7b>
c0002427:	85 db                	test   ebx,ebx
c0002429:	74 5e                	je     c0002489 <find_volume+0x7b>
c000242b:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c000242f:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002435:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c000243b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000243f:	89 cf                	mov    edi,ecx
c0002441:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002445:	89 e8                	mov    eax,ebp
c0002447:	83 c5 10             	add    ebp,0x10
c000244a:	e8 95 f9 ff ff       	call   c0001de4 <ld_dword>
c000244f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002453:	89 01                	mov    DWORD PTR [ecx],eax
c0002455:	83 c1 04             	add    ecx,0x4
c0002458:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000245c:	75 e3                	jne    c0002441 <find_volume+0x33>
c000245e:	31 ed                	xor    ebp,ebp
c0002460:	85 db                	test   ebx,ebx
c0002462:	74 03                	je     c0002467 <find_volume+0x59>
c0002464:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0002467:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c000246a:	b8 03 00 00 00       	mov    eax,0x3
c000246f:	85 d2                	test   edx,edx
c0002471:	74 0c                	je     c000247f <find_volume+0x71>
c0002473:	89 f0                	mov    eax,esi
c0002475:	e8 06 ff ff ff       	call   c0002380 <check_fs>
c000247a:	83 f8 01             	cmp    eax,0x1
c000247d:	76 0a                	jbe    c0002489 <find_volume+0x7b>
c000247f:	85 db                	test   ebx,ebx
c0002481:	75 06                	jne    c0002489 <find_volume+0x7b>
c0002483:	45                   	inc    ebp
c0002484:	83 fd 03             	cmp    ebp,0x3
c0002487:	76 de                	jbe    c0002467 <find_volume+0x59>
c0002489:	83 c4 2c             	add    esp,0x2c
c000248c:	5b                   	pop    ebx
c000248d:	5e                   	pop    esi
c000248e:	5f                   	pop    edi
c000248f:	5d                   	pop    ebp
c0002490:	c3                   	ret    

c0002491 <mount_volume>:
c0002491:	55                   	push   ebp
c0002492:	89 d5                	mov    ebp,edx
c0002494:	57                   	push   edi
c0002495:	89 cf                	mov    edi,ecx
c0002497:	56                   	push   esi
c0002498:	53                   	push   ebx
c0002499:	bb 0b 00 00 00       	mov    ebx,0xb
c000249e:	83 ec 1c             	sub    esp,0x1c
c00024a1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024a7:	e8 9c fd ff ff       	call   c0002248 <get_ldnumber>
c00024ac:	85 c0                	test   eax,eax
c00024ae:	0f 88 c4 02 00 00    	js     c0002778 <mount_volume+0x2e7>
c00024b4:	8b 34 85 a0 54 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdab60]
c00024bb:	89 c2                	mov    edx,eax
c00024bd:	bb 0c 00 00 00       	mov    ebx,0xc
c00024c2:	85 f6                	test   esi,esi
c00024c4:	0f 84 ae 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024ca:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00024cd:	83 e7 fe             	and    edi,0xfffffffe
c00024d0:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00024d3:	74 3a                	je     c000250f <mount_volume+0x7e>
c00024d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00024d8:	83 ec 0c             	sub    esp,0xc
c00024db:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00024df:	50                   	push   eax
c00024e0:	e8 a1 f8 ff ff       	call   c0001d86 <disk_status>
c00024e5:	83 c4 10             	add    esp,0x10
c00024e8:	a8 01                	test   al,0x1
c00024ea:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00024ed:	75 20                	jne    c000250f <mount_volume+0x7e>
c00024ef:	31 db                	xor    ebx,ebx
c00024f1:	81 e7 fe 00 00 00    	and    edi,0xfe
c00024f7:	0f 84 7b 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024fd:	a8 04                	test   al,0x4
c00024ff:	0f 84 73 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002505:	bb 0a 00 00 00       	mov    ebx,0xa
c000250a:	e9 69 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c000250f:	83 ec 0c             	sub    esp,0xc
c0002512:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002515:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002518:	0f b6 c2             	movzx  eax,dl
c000251b:	bb 03 00 00 00       	mov    ebx,0x3
c0002520:	50                   	push   eax
c0002521:	e8 63 f8 ff ff       	call   c0001d89 <disk_initialize>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	a8 01                	test   al,0x1
c000252b:	0f 85 47 02 00 00    	jne    c0002778 <mount_volume+0x2e7>
c0002531:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002537:	74 04                	je     c000253d <mount_volume+0xac>
c0002539:	a8 04                	test   al,0x4
c000253b:	75 c8                	jne    c0002505 <mount_volume+0x74>
c000253d:	31 d2                	xor    edx,edx
c000253f:	89 f0                	mov    eax,esi
c0002541:	bb 01 00 00 00       	mov    ebx,0x1
c0002546:	e8 c3 fe ff ff       	call   c000240e <find_volume>
c000254b:	83 f8 04             	cmp    eax,0x4
c000254e:	0f 84 24 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002554:	83 f8 01             	cmp    eax,0x1
c0002557:	76 0a                	jbe    c0002563 <mount_volume+0xd2>
c0002559:	bb 0d 00 00 00       	mov    ebx,0xd
c000255e:	e9 15 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c0002563:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002566:	e8 6c f8 ff ff       	call   c0001dd7 <ld_word>
c000256b:	66 3d 00 02          	cmp    ax,0x200
c000256f:	75 e8                	jne    c0002559 <mount_volume+0xc8>
c0002571:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002574:	e8 5e f8 ff ff       	call   c0001dd7 <ld_word>
c0002579:	0f b7 c0             	movzx  eax,ax
c000257c:	89 04 24             	mov    DWORD PTR [esp],eax
c000257f:	85 c0                	test   eax,eax
c0002581:	75 0b                	jne    c000258e <mount_volume+0xfd>
c0002583:	8d 46 58             	lea    eax,[esi+0x58]
c0002586:	e8 59 f8 ff ff       	call   c0001de4 <ld_dword>
c000258b:	89 04 24             	mov    DWORD PTR [esp],eax
c000258e:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002591:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002595:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002598:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c000259b:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c000259e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00025a2:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00025a9:	48                   	dec    eax
c00025aa:	3c 01                	cmp    al,0x1
c00025ac:	77 ab                	ja     c0002559 <mount_volume+0xc8>
c00025ae:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025b2:	89 c3                	mov    ebx,eax
c00025b4:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025b8:	66 85 c0             	test   ax,ax
c00025bb:	74 9c                	je     c0002559 <mount_volume+0xc8>
c00025bd:	8d 40 ff             	lea    eax,[eax-0x1]
c00025c0:	85 d8                	test   eax,ebx
c00025c2:	75 95                	jne    c0002559 <mount_volume+0xc8>
c00025c4:	8d 46 45             	lea    eax,[esi+0x45]
c00025c7:	e8 0b f8 ff ff       	call   c0001dd7 <ld_word>
c00025cc:	89 c7                	mov    edi,eax
c00025ce:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00025d2:	a8 0f                	test   al,0xf
c00025d4:	75 83                	jne    c0002559 <mount_volume+0xc8>
c00025d6:	8d 46 47             	lea    eax,[esi+0x47]
c00025d9:	e8 f9 f7 ff ff       	call   c0001dd7 <ld_word>
c00025de:	0f b7 e8             	movzx  ebp,ax
c00025e1:	85 ed                	test   ebp,ebp
c00025e3:	75 0a                	jne    c00025ef <mount_volume+0x15e>
c00025e5:	8d 46 54             	lea    eax,[esi+0x54]
c00025e8:	e8 f7 f7 ff ff       	call   c0001de4 <ld_dword>
c00025ed:	89 c5                	mov    ebp,eax
c00025ef:	8d 46 42             	lea    eax,[esi+0x42]
c00025f2:	e8 e0 f7 ff ff       	call   c0001dd7 <ld_word>
c00025f7:	0f b7 c8             	movzx  ecx,ax
c00025fa:	85 c9                	test   ecx,ecx
c00025fc:	0f 84 57 ff ff ff    	je     c0002559 <mount_volume+0xc8>
c0002602:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002607:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c000260b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000260f:	0f b7 c7             	movzx  eax,di
c0002612:	c1 e8 04             	shr    eax,0x4
c0002615:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002619:	01 c8                	add    eax,ecx
c000261b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000261f:	39 c5                	cmp    ebp,eax
c0002621:	0f 82 32 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002627:	29 c5                	sub    ebp,eax
c0002629:	31 d2                	xor    edx,edx
c000262b:	89 e8                	mov    eax,ebp
c000262d:	f7 f3                	div    ebx
c000262f:	39 dd                	cmp    ebp,ebx
c0002631:	0f 82 22 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002637:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000263c:	0f 87 17 ff ff ff    	ja     c0002559 <mount_volume+0xc8>
c0002642:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002647:	0f 86 1c 01 00 00    	jbe    c0002769 <mount_volume+0x2d8>
c000264d:	bb 03 00 00 00       	mov    ebx,0x3
c0002652:	8d 68 02             	lea    ebp,[eax+0x2]
c0002655:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002659:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000265d:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c0002661:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002664:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002667:	01 c8                	add    eax,ecx
c0002669:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c000266c:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000266f:	83 fb 03             	cmp    ebx,0x3
c0002672:	75 23                	jne    c0002697 <mount_volume+0x206>
c0002674:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002677:	e8 5b f7 ff ff       	call   c0001dd7 <ld_word>
c000267c:	09 c7                	or     edi,eax
c000267e:	66 85 ff             	test   di,di
c0002681:	0f 85 d2 fe ff ff    	jne    c0002559 <mount_volume+0xc8>
c0002687:	8d 46 60             	lea    eax,[esi+0x60]
c000268a:	c1 e5 02             	shl    ebp,0x2
c000268d:	e8 52 f7 ff ff       	call   c0001de4 <ld_dword>
c0002692:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002695:	eb 24                	jmp    c00026bb <mount_volume+0x22a>
c0002697:	66 85 ff             	test   di,di
c000269a:	0f 84 b9 fe ff ff    	je     c0002559 <mount_volume+0xc8>
c00026a0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00026a4:	83 fb 02             	cmp    ebx,0x2
c00026a7:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026aa:	75 04                	jne    c00026b0 <mount_volume+0x21f>
c00026ac:	01 ed                	add    ebp,ebp
c00026ae:	eb 0b                	jmp    c00026bb <mount_volume+0x22a>
c00026b0:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00026b4:	83 e5 01             	and    ebp,0x1
c00026b7:	d1 e8                	shr    eax,1
c00026b9:	01 c5                	add    ebp,eax
c00026bb:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00026c1:	c1 ed 09             	shr    ebp,0x9
c00026c4:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00026c7:	0f 87 8c fe ff ff    	ja     c0002559 <mount_volume+0xc8>
c00026cd:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00026d4:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00026db:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00026df:	83 fb 03             	cmp    ebx,0x3
c00026e2:	75 6e                	jne    c0002752 <mount_volume+0x2c1>
c00026e4:	8d 46 64             	lea    eax,[esi+0x64]
c00026e7:	e8 eb f6 ff ff       	call   c0001dd7 <ld_word>
c00026ec:	66 48                	dec    ax
c00026ee:	75 62                	jne    c0002752 <mount_volume+0x2c1>
c00026f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00026f4:	89 f0                	mov    eax,esi
c00026f6:	42                   	inc    edx
c00026f7:	e8 42 fc ff ff       	call   c000233e <move_window>
c00026fc:	85 c0                	test   eax,eax
c00026fe:	75 52                	jne    c0002752 <mount_volume+0x2c1>
c0002700:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002704:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c000270a:	e8 c8 f6 ff ff       	call   c0001dd7 <ld_word>
c000270f:	66 3d 55 aa          	cmp    ax,0xaa55
c0002713:	75 3d                	jne    c0002752 <mount_volume+0x2c1>
c0002715:	8d 46 34             	lea    eax,[esi+0x34]
c0002718:	e8 c7 f6 ff ff       	call   c0001de4 <ld_dword>
c000271d:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002722:	75 2e                	jne    c0002752 <mount_volume+0x2c1>
c0002724:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c000272a:	e8 b5 f6 ff ff       	call   c0001de4 <ld_dword>
c000272f:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002734:	75 1c                	jne    c0002752 <mount_volume+0x2c1>
c0002736:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c000273c:	e8 a3 f6 ff ff       	call   c0001de4 <ld_dword>
c0002741:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002744:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c000274a:	e8 95 f6 ff ff       	call   c0001de4 <ld_dword>
c000274f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002752:	66 a1 80 54 02 c0    	mov    ax,ds:0xc0025480
c0002758:	88 1e                	mov    BYTE PTR [esi],bl
c000275a:	40                   	inc    eax
c000275b:	31 db                	xor    ebx,ebx
c000275d:	66 a3 80 54 02 c0    	mov    ds:0xc0025480,ax
c0002763:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002767:	eb 0f                	jmp    c0002778 <mount_volume+0x2e7>
c0002769:	3d f6 0f 00 00       	cmp    eax,0xff6
c000276e:	19 db                	sbb    ebx,ebx
c0002770:	83 c3 02             	add    ebx,0x2
c0002773:	e9 da fe ff ff       	jmp    c0002652 <mount_volume+0x1c1>
c0002778:	83 c4 1c             	add    esp,0x1c
c000277b:	89 d8                	mov    eax,ebx
c000277d:	5b                   	pop    ebx
c000277e:	5e                   	pop    esi
c000277f:	5f                   	pop    edi
c0002780:	5d                   	pop    ebp
c0002781:	c3                   	ret    

c0002782 <put_fat>:
c0002782:	55                   	push   ebp
c0002783:	bd 02 00 00 00       	mov    ebp,0x2
c0002788:	57                   	push   edi
c0002789:	56                   	push   esi
c000278a:	53                   	push   ebx
c000278b:	83 ec 1c             	sub    esp,0x1c
c000278e:	83 fa 01             	cmp    edx,0x1
c0002791:	0f 86 38 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c0002797:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c000279a:	0f 86 2f 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c00027a0:	89 c6                	mov    esi,eax
c00027a2:	89 cf                	mov    edi,ecx
c00027a4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027a7:	89 d3                	mov    ebx,edx
c00027a9:	83 f8 02             	cmp    eax,0x2
c00027ac:	0f 84 b1 00 00 00    	je     c0002863 <put_fat+0xe1>
c00027b2:	83 f8 03             	cmp    eax,0x3
c00027b5:	0f 84 d5 00 00 00    	je     c0002890 <put_fat+0x10e>
c00027bb:	48                   	dec    eax
c00027bc:	0f 85 0d 01 00 00    	jne    c00028cf <put_fat+0x14d>
c00027c2:	89 d1                	mov    ecx,edx
c00027c4:	89 f0                	mov    eax,esi
c00027c6:	d1 e9                	shr    ecx,1
c00027c8:	01 d1                	add    ecx,edx
c00027ca:	89 ca                	mov    edx,ecx
c00027cc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00027d0:	c1 ea 09             	shr    edx,0x9
c00027d3:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027d6:	e8 63 fb ff ff       	call   c000233e <move_window>
c00027db:	89 c5                	mov    ebp,eax
c00027dd:	85 c0                	test   eax,eax
c00027df:	0f 85 ea 00 00 00    	jne    c00028cf <put_fat+0x14d>
c00027e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027e9:	8d 46 34             	lea    eax,[esi+0x34]
c00027ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027f0:	8d 41 01             	lea    eax,[ecx+0x1]
c00027f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00027f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027fd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002801:	89 f8                	mov    eax,edi
c0002803:	83 e3 01             	and    ebx,0x1
c0002806:	74 11                	je     c0002819 <put_fat+0x97>
c0002808:	8a 11                	mov    dl,BYTE PTR [ecx]
c000280a:	89 f8                	mov    eax,edi
c000280c:	83 e2 0f             	and    edx,0xf
c000280f:	c1 e0 04             	shl    eax,0x4
c0002812:	25 f0 0f 00 00       	and    eax,0xff0
c0002817:	09 d0                	or     eax,edx
c0002819:	88 01                	mov    BYTE PTR [ecx],al
c000281b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000281f:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002823:	c1 ea 09             	shr    edx,0x9
c0002826:	89 f0                	mov    eax,esi
c0002828:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000282b:	e8 0e fb ff ff       	call   c000233e <move_window>
c0002830:	89 c5                	mov    ebp,eax
c0002832:	85 c0                	test   eax,eax
c0002834:	0f 85 95 00 00 00    	jne    c00028cf <put_fat+0x14d>
c000283a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000283e:	25 ff 01 00 00       	and    eax,0x1ff
c0002843:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002847:	85 db                	test   ebx,ebx
c0002849:	74 07                	je     c0002852 <put_fat+0xd0>
c000284b:	c1 ef 04             	shr    edi,0x4
c000284e:	89 f9                	mov    ecx,edi
c0002850:	eb 0d                	jmp    c000285f <put_fat+0xdd>
c0002852:	8a 08                	mov    cl,BYTE PTR [eax]
c0002854:	c1 ef 08             	shr    edi,0x8
c0002857:	83 e1 f0             	and    ecx,0xfffffff0
c000285a:	83 e7 0f             	and    edi,0xf
c000285d:	09 f9                	or     ecx,edi
c000285f:	88 08                	mov    BYTE PTR [eax],cl
c0002861:	eb 27                	jmp    c000288a <put_fat+0x108>
c0002863:	c1 ea 08             	shr    edx,0x8
c0002866:	89 f0                	mov    eax,esi
c0002868:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000286b:	e8 ce fa ff ff       	call   c000233e <move_window>
c0002870:	89 c5                	mov    ebp,eax
c0002872:	85 c0                	test   eax,eax
c0002874:	75 59                	jne    c00028cf <put_fat+0x14d>
c0002876:	01 db                	add    ebx,ebx
c0002878:	0f b7 d7             	movzx  edx,di
c000287b:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002881:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002885:	e8 72 f5 ff ff       	call   c0001dfc <st_word>
c000288a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c000288e:	eb 3f                	jmp    c00028cf <put_fat+0x14d>
c0002890:	c1 ea 07             	shr    edx,0x7
c0002893:	89 f0                	mov    eax,esi
c0002895:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002898:	e8 a1 fa ff ff       	call   c000233e <move_window>
c000289d:	89 c5                	mov    ebp,eax
c000289f:	85 c0                	test   eax,eax
c00028a1:	75 2c                	jne    c00028cf <put_fat+0x14d>
c00028a3:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028a9:	c1 e3 02             	shl    ebx,0x2
c00028ac:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028b2:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00028b6:	89 d8                	mov    eax,ebx
c00028b8:	e8 27 f5 ff ff       	call   c0001de4 <ld_dword>
c00028bd:	25 00 00 00 f0       	and    eax,0xf0000000
c00028c2:	09 f8                	or     eax,edi
c00028c4:	89 c2                	mov    edx,eax
c00028c6:	89 d8                	mov    eax,ebx
c00028c8:	e8 33 f5 ff ff       	call   c0001e00 <st_dword>
c00028cd:	eb bb                	jmp    c000288a <put_fat+0x108>
c00028cf:	83 c4 1c             	add    esp,0x1c
c00028d2:	89 e8                	mov    eax,ebp
c00028d4:	5b                   	pop    ebx
c00028d5:	5e                   	pop    esi
c00028d6:	5f                   	pop    edi
c00028d7:	5d                   	pop    ebp
c00028d8:	c3                   	ret    

c00028d9 <dir_clear>:
c00028d9:	55                   	push   ebp
c00028da:	57                   	push   edi
c00028db:	56                   	push   esi
c00028dc:	89 c6                	mov    esi,eax
c00028de:	53                   	push   ebx
c00028df:	83 ec 1c             	sub    esp,0x1c
c00028e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00028e6:	e8 f0 f9 ff ff       	call   c00022db <sync_window>
c00028eb:	85 c0                	test   eax,eax
c00028ed:	0f 85 c0 00 00 00    	jne    c00029b3 <dir_clear+0xda>
c00028f3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028f7:	89 f0                	mov    eax,esi
c00028f9:	e8 30 f7 ff ff       	call   c000202e <clst2sect>
c00028fe:	31 d2                	xor    edx,edx
c0002900:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002903:	89 c5                	mov    ebp,eax
c0002905:	b9 00 02 00 00       	mov    ecx,0x200
c000290a:	8d 46 34             	lea    eax,[esi+0x34]
c000290d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002911:	e8 02 f5 ff ff       	call   c0001e18 <mem_set>
c0002916:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000291a:	c1 e3 09             	shl    ebx,0x9
c000291d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002923:	76 1b                	jbe    c0002940 <dir_clear+0x67>
c0002925:	bb 00 80 00 00       	mov    ebx,0x8000
c000292a:	eb 14                	jmp    c0002940 <dir_clear+0x67>
c000292c:	83 ec 0c             	sub    esp,0xc
c000292f:	53                   	push   ebx
c0002930:	e8 eb 32 00 00       	call   c0005c20 <ff_memalloc>
c0002935:	83 c4 10             	add    esp,0x10
c0002938:	89 c7                	mov    edi,eax
c000293a:	85 c0                	test   eax,eax
c000293c:	75 7c                	jne    c00029ba <dir_clear+0xe1>
c000293e:	d1 eb                	shr    ebx,1
c0002940:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002946:	77 e4                	ja     c000292c <dir_clear+0x53>
c0002948:	31 db                	xor    ebx,ebx
c000294a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000294e:	39 d8                	cmp    eax,ebx
c0002950:	76 53                	jbe    c00029a5 <dir_clear+0xcc>
c0002952:	6a 01                	push   0x1
c0002954:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002957:	50                   	push   eax
c0002958:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000295c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002960:	50                   	push   eax
c0002961:	e8 3c f4 ff ff       	call   c0001da2 <disk_write>
c0002966:	83 c4 10             	add    esp,0x10
c0002969:	85 c0                	test   eax,eax
c000296b:	75 38                	jne    c00029a5 <dir_clear+0xcc>
c000296d:	43                   	inc    ebx
c000296e:	eb da                	jmp    c000294a <dir_clear+0x71>
c0002970:	52                   	push   edx
c0002971:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002974:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002978:	50                   	push   eax
c0002979:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000297d:	57                   	push   edi
c000297e:	50                   	push   eax
c000297f:	e8 1e f4 ff ff       	call   c0001da2 <disk_write>
c0002984:	83 c4 10             	add    esp,0x10
c0002987:	85 c0                	test   eax,eax
c0002989:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000298d:	75 0a                	jne    c0002999 <dir_clear+0xc0>
c000298f:	01 d3                	add    ebx,edx
c0002991:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002995:	39 d8                	cmp    eax,ebx
c0002997:	77 d7                	ja     c0002970 <dir_clear+0x97>
c0002999:	83 ec 0c             	sub    esp,0xc
c000299c:	57                   	push   edi
c000299d:	e8 96 32 00 00       	call   c0005c38 <ff_memfree>
c00029a2:	83 c4 10             	add    esp,0x10
c00029a5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029a9:	39 d8                	cmp    eax,ebx
c00029ab:	0f 95 c0             	setne  al
c00029ae:	0f b6 c0             	movzx  eax,al
c00029b1:	eb 19                	jmp    c00029cc <dir_clear+0xf3>
c00029b3:	b8 01 00 00 00       	mov    eax,0x1
c00029b8:	eb 12                	jmp    c00029cc <dir_clear+0xf3>
c00029ba:	89 d9                	mov    ecx,ebx
c00029bc:	31 d2                	xor    edx,edx
c00029be:	e8 55 f4 ff ff       	call   c0001e18 <mem_set>
c00029c3:	89 da                	mov    edx,ebx
c00029c5:	31 db                	xor    ebx,ebx
c00029c7:	c1 ea 09             	shr    edx,0x9
c00029ca:	eb c5                	jmp    c0002991 <dir_clear+0xb8>
c00029cc:	83 c4 1c             	add    esp,0x1c
c00029cf:	5b                   	pop    ebx
c00029d0:	5e                   	pop    esi
c00029d1:	5f                   	pop    edi
c00029d2:	5d                   	pop    ebp
c00029d3:	c3                   	ret    

c00029d4 <create_name>:
c00029d4:	55                   	push   ebp
c00029d5:	57                   	push   edi
c00029d6:	89 d7                	mov    edi,edx
c00029d8:	56                   	push   esi
c00029d9:	31 f6                	xor    esi,esi
c00029db:	53                   	push   ebx
c00029dc:	83 ec 3c             	sub    esp,0x3c
c00029df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029e3:	8b 02                	mov    eax,DWORD PTR [edx]
c00029e5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00029e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00029ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00029f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029f6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00029fa:	e8 5e f4 ff ff       	call   c0001e5d <tchar2uni>
c00029ff:	89 c3                	mov    ebx,eax
c0002a01:	83 f8 ff             	cmp    eax,0xffffffff
c0002a04:	75 0a                	jne    c0002a10 <create_name+0x3c>
c0002a06:	b8 06 00 00 00       	mov    eax,0x6
c0002a0b:	e9 93 02 00 00       	jmp    c0002ca3 <create_name+0x2cf>
c0002a10:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a15:	76 0c                	jbe    c0002a23 <create_name+0x4f>
c0002a17:	c1 e8 10             	shr    eax,0x10
c0002a1a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a1e:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002a22:	46                   	inc    esi
c0002a23:	0f b7 d3             	movzx  edx,bx
c0002a26:	83 fa 1f             	cmp    edx,0x1f
c0002a29:	76 4a                	jbe    c0002a75 <create_name+0xa1>
c0002a2b:	83 fa 5c             	cmp    edx,0x5c
c0002a2e:	74 30                	je     c0002a60 <create_name+0x8c>
c0002a30:	83 fa 2f             	cmp    edx,0x2f
c0002a33:	74 2b                	je     c0002a60 <create_name+0x8c>
c0002a35:	83 fa 7f             	cmp    edx,0x7f
c0002a38:	77 0e                	ja     c0002a48 <create_name+0x74>
c0002a3a:	b8 02 f8 01 c0       	mov    eax,0xc001f802
c0002a3f:	e8 02 f4 ff ff       	call   c0001e46 <chk_chr>
c0002a44:	85 c0                	test   eax,eax
c0002a46:	75 be                	jne    c0002a06 <create_name+0x32>
c0002a48:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a4e:	77 b6                	ja     c0002a06 <create_name+0x32>
c0002a50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a54:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002a58:	46                   	inc    esi
c0002a59:	eb 9b                	jmp    c00029f6 <create_name+0x22>
c0002a5b:	40                   	inc    eax
c0002a5c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a64:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002a67:	83 fa 2f             	cmp    edx,0x2f
c0002a6a:	74 ef                	je     c0002a5b <create_name+0x87>
c0002a6c:	83 fa 5c             	cmp    edx,0x5c
c0002a6f:	74 ea                	je     c0002a5b <create_name+0x87>
c0002a71:	31 db                	xor    ebx,ebx
c0002a73:	eb 02                	jmp    c0002a77 <create_name+0xa3>
c0002a75:	b3 04                	mov    bl,0x4
c0002a77:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a7b:	89 07                	mov    DWORD PTR [edi],eax
c0002a7d:	85 f6                	test   esi,esi
c0002a7f:	74 16                	je     c0002a97 <create_name+0xc3>
c0002a81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a85:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002a8a:	83 f8 20             	cmp    eax,0x20
c0002a8d:	74 05                	je     c0002a94 <create_name+0xc0>
c0002a8f:	83 f8 2e             	cmp    eax,0x2e
c0002a92:	75 03                	jne    c0002a97 <create_name+0xc3>
c0002a94:	4e                   	dec    esi
c0002a95:	eb e6                	jmp    c0002a7d <create_name+0xa9>
c0002a97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9b:	31 ff                	xor    edi,edi
c0002a9d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002aa3:	85 f6                	test   esi,esi
c0002aa5:	0f 84 5b ff ff ff    	je     c0002a06 <create_name+0x32>
c0002aab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aaf:	8d 57 01             	lea    edx,[edi+0x1]
c0002ab2:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002ab6:	83 f8 20             	cmp    eax,0x20
c0002ab9:	75 04                	jne    c0002abf <create_name+0xeb>
c0002abb:	89 d7                	mov    edi,edx
c0002abd:	eb ec                	jmp    c0002aab <create_name+0xd7>
c0002abf:	85 ff                	test   edi,edi
c0002ac1:	75 05                	jne    c0002ac8 <create_name+0xf4>
c0002ac3:	83 f8 2e             	cmp    eax,0x2e
c0002ac6:	75 08                	jne    c0002ad0 <create_name+0xfc>
c0002ac8:	83 cb 03             	or     ebx,0x3
c0002acb:	eb 03                	jmp    c0002ad0 <create_name+0xfc>
c0002acd:	4e                   	dec    esi
c0002ace:	74 0c                	je     c0002adc <create_name+0x108>
c0002ad0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad4:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002ada:	75 f1                	jne    c0002acd <create_name+0xf9>
c0002adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002ae0:	b9 0b 00 00 00       	mov    ecx,0xb
c0002ae5:	83 c0 20             	add    eax,0x20
c0002ae8:	ba 20 00 00 00       	mov    edx,0x20
c0002aed:	31 ed                	xor    ebp,ebp
c0002aef:	e8 24 f3 ff ff       	call   c0001e18 <mem_set>
c0002af4:	b9 08 00 00 00       	mov    ecx,0x8
c0002af9:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002afe:	8d 47 01             	lea    eax,[edi+0x1]
c0002b01:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002b05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b09:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b0d:	89 c7                	mov    edi,eax
c0002b0f:	85 c0                	test   eax,eax
c0002b11:	0f 84 25 01 00 00    	je     c0002c3c <create_name+0x268>
c0002b17:	83 f8 20             	cmp    eax,0x20
c0002b1a:	74 0f                	je     c0002b2b <create_name+0x157>
c0002b1c:	83 f8 2e             	cmp    eax,0x2e
c0002b1f:	75 13                	jne    c0002b34 <create_name+0x160>
c0002b21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b25:	0f 84 6a 01 00 00    	je     c0002c95 <create_name+0x2c1>
c0002b2b:	83 cb 03             	or     ebx,0x3
c0002b2e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002b32:	eb ca                	jmp    c0002afe <create_name+0x12a>
c0002b34:	39 cd                	cmp    ebp,ecx
c0002b36:	73 0b                	jae    c0002b43 <create_name+0x16f>
c0002b38:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b3c:	75 3f                	jne    c0002b7d <create_name+0x1a9>
c0002b3e:	e9 52 01 00 00       	jmp    c0002c95 <create_name+0x2c1>
c0002b43:	83 f9 0b             	cmp    ecx,0xb
c0002b46:	75 0d                	jne    c0002b55 <create_name+0x181>
c0002b48:	83 cb 03             	or     ebx,0x3
c0002b4b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b50:	e9 e7 00 00 00       	jmp    c0002c3c <create_name+0x268>
c0002b55:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b59:	74 0d                	je     c0002b68 <create_name+0x194>
c0002b5b:	83 cb 03             	or     ebx,0x3
c0002b5e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b62:	0f 87 d4 00 00 00    	ja     c0002c3c <create_name+0x268>
c0002b68:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002b6d:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002b71:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b76:	bd 08 00 00 00       	mov    ebp,0x8
c0002b7b:	eb b1                	jmp    c0002b2e <create_name+0x15a>
c0002b7d:	83 f8 7f             	cmp    eax,0x7f
c0002b80:	76 66                	jbe    c0002be8 <create_name+0x214>
c0002b82:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002b86:	89 d9                	mov    ecx,ebx
c0002b88:	83 c9 02             	or     ecx,0x2
c0002b8b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b8f:	52                   	push   edx
c0002b90:	52                   	push   edx
c0002b91:	68 b5 01 00 00       	push   0x1b5
c0002b96:	50                   	push   eax
c0002b97:	e8 b4 30 00 00       	call   c0005c50 <ff_uni2oem>
c0002b9c:	83 c4 10             	add    esp,0x10
c0002b9f:	89 c7                	mov    edi,eax
c0002ba1:	a8 80                	test   al,0x80
c0002ba3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002ba7:	74 0c                	je     c0002bb5 <create_name+0x1e1>
c0002ba9:	83 e7 7f             	and    edi,0x7f
c0002bac:	0f b6 bf c0 f8 01 c0 	movzx  edi,BYTE PTR [edi-0x3ffe0740]
c0002bb3:	eb 2a                	jmp    c0002bdf <create_name+0x20b>
c0002bb5:	0f b7 c0             	movzx  eax,ax
c0002bb8:	3d ff 00 00 00       	cmp    eax,0xff
c0002bbd:	76 20                	jbe    c0002bdf <create_name+0x20b>
c0002bbf:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002bc2:	39 ea                	cmp    edx,ebp
c0002bc4:	77 0a                	ja     c0002bd0 <create_name+0x1fc>
c0002bc6:	83 cb 03             	or     ebx,0x3
c0002bc9:	89 cd                	mov    ebp,ecx
c0002bcb:	e9 5e ff ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002bd0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002bd4:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002bd8:	45                   	inc    ebp
c0002bd9:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002bdd:	eb 4d                	jmp    c0002c2c <create_name+0x258>
c0002bdf:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002be3:	66 85 ff             	test   di,di
c0002be6:	74 19                	je     c0002c01 <create_name+0x22d>
c0002be8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bec:	0f b7 d7             	movzx  edx,di
c0002bef:	b8 0b f8 01 c0       	mov    eax,0xc001f80b
c0002bf4:	e8 4d f2 ff ff       	call   c0001e46 <chk_chr>
c0002bf9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002bfd:	85 c0                	test   eax,eax
c0002bff:	74 0a                	je     c0002c0b <create_name+0x237>
c0002c01:	83 cb 03             	or     ebx,0x3
c0002c04:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c09:	eb 21                	jmp    c0002c2c <create_name+0x258>
c0002c0b:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c0e:	66 83 f8 19          	cmp    ax,0x19
c0002c12:	77 07                	ja     c0002c1b <create_name+0x247>
c0002c14:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c19:	eb 11                	jmp    c0002c2c <create_name+0x258>
c0002c1b:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c1e:	66 83 f8 19          	cmp    ax,0x19
c0002c22:	77 08                	ja     c0002c2c <create_name+0x258>
c0002c24:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c29:	83 ef 20             	sub    edi,0x20
c0002c2c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002c30:	89 f8                	mov    eax,edi
c0002c32:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002c36:	45                   	inc    ebp
c0002c37:	e9 f2 fe ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002c3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c40:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002c44:	75 04                	jne    c0002c4a <create_name+0x276>
c0002c46:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002c4a:	83 f9 08             	cmp    ecx,0x8
c0002c4d:	75 05                	jne    c0002c54 <create_name+0x280>
c0002c4f:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c58:	83 e0 0c             	and    eax,0xc
c0002c5b:	83 f8 0c             	cmp    eax,0xc
c0002c5e:	74 0c                	je     c0002c6c <create_name+0x298>
c0002c60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c64:	83 e0 03             	and    eax,0x3
c0002c67:	83 f8 03             	cmp    eax,0x3
c0002c6a:	75 05                	jne    c0002c71 <create_name+0x29d>
c0002c6c:	83 cb 02             	or     ebx,0x2
c0002c6f:	eb 19                	jmp    c0002c8a <create_name+0x2b6>
c0002c71:	f6 c3 02             	test   bl,0x2
c0002c74:	75 14                	jne    c0002c8a <create_name+0x2b6>
c0002c76:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002c7b:	74 03                	je     c0002c80 <create_name+0x2ac>
c0002c7d:	83 cb 10             	or     ebx,0x10
c0002c80:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002c85:	74 03                	je     c0002c8a <create_name+0x2b6>
c0002c87:	83 cb 08             	or     ebx,0x8
c0002c8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c8e:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002c91:	31 c0                	xor    eax,eax
c0002c93:	eb 0e                	jmp    c0002ca3 <create_name+0x2cf>
c0002c95:	83 f9 0b             	cmp    ecx,0xb
c0002c98:	0f 85 ca fe ff ff    	jne    c0002b68 <create_name+0x194>
c0002c9e:	e9 a5 fe ff ff       	jmp    c0002b48 <create_name+0x174>
c0002ca3:	83 c4 3c             	add    esp,0x3c
c0002ca6:	5b                   	pop    ebx
c0002ca7:	5e                   	pop    esi
c0002ca8:	5f                   	pop    edi
c0002ca9:	5d                   	pop    ebp
c0002caa:	c3                   	ret    

c0002cab <cmp_lfn>:
c0002cab:	55                   	push   ebp
c0002cac:	57                   	push   edi
c0002cad:	89 d7                	mov    edi,edx
c0002caf:	56                   	push   esi
c0002cb0:	53                   	push   ebx
c0002cb1:	83 ec 1c             	sub    esp,0x1c
c0002cb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cb8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cbb:	e8 17 f1 ff ff       	call   c0001dd7 <ld_word>
c0002cc0:	66 85 c0             	test   ax,ax
c0002cc3:	74 07                	je     c0002ccc <cmp_lfn+0x21>
c0002cc5:	31 c0                	xor    eax,eax
c0002cc7:	e9 a1 00 00 00       	jmp    c0002d6d <cmp_lfn+0xc2>
c0002ccc:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cce:	bd 01 00 00 00       	mov    ebp,0x1
c0002cd3:	83 e3 3f             	and    ebx,0x3f
c0002cd6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002cde:	4b                   	dec    ebx
c0002cdf:	6b db 0d             	imul   ebx,ebx,0xd
c0002ce2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ce6:	0f b6 80 40 f9 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe06c0]
c0002ced:	01 f8                	add    eax,edi
c0002cef:	e8 e3 f0 ff ff       	call   c0001dd7 <ld_word>
c0002cf4:	66 85 ed             	test   bp,bp
c0002cf7:	89 c6                	mov    esi,eax
c0002cf9:	74 3c                	je     c0002d37 <cmp_lfn+0x8c>
c0002cfb:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d01:	77 c2                	ja     c0002cc5 <cmp_lfn+0x1a>
c0002d03:	83 ec 0c             	sub    esp,0xc
c0002d06:	0f b7 c0             	movzx  eax,ax
c0002d09:	50                   	push   eax
c0002d0a:	e8 59 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d0f:	89 c5                	mov    ebp,eax
c0002d11:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d14:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002d18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002d1c:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d20:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d23:	e8 40 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d28:	83 c4 10             	add    esp,0x10
c0002d2b:	39 c5                	cmp    ebp,eax
c0002d2d:	75 96                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d2f:	89 f5                	mov    ebp,esi
c0002d31:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002d35:	eb 0b                	jmp    c0002d42 <cmp_lfn+0x97>
c0002d37:	0f b7 c8             	movzx  ecx,ax
c0002d3a:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002d40:	75 83                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d42:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002d46:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002d4b:	75 95                	jne    c0002ce2 <cmp_lfn+0x37>
c0002d4d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d50:	74 16                	je     c0002d68 <cmp_lfn+0xbd>
c0002d52:	66 85 ed             	test   bp,bp
c0002d55:	74 11                	je     c0002d68 <cmp_lfn+0xbd>
c0002d57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d5b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d60:	0f 94 c0             	sete   al
c0002d63:	0f b6 c0             	movzx  eax,al
c0002d66:	eb 05                	jmp    c0002d6d <cmp_lfn+0xc2>
c0002d68:	b8 01 00 00 00       	mov    eax,0x1
c0002d6d:	83 c4 1c             	add    esp,0x1c
c0002d70:	5b                   	pop    ebx
c0002d71:	5e                   	pop    esi
c0002d72:	5f                   	pop    edi
c0002d73:	5d                   	pop    ebp
c0002d74:	c3                   	ret    

c0002d75 <sync_fs>:
c0002d75:	56                   	push   esi
c0002d76:	53                   	push   ebx
c0002d77:	53                   	push   ebx
c0002d78:	89 c3                	mov    ebx,eax
c0002d7a:	e8 5c f5 ff ff       	call   c00022db <sync_window>
c0002d7f:	85 c0                	test   eax,eax
c0002d81:	0f 85 9a 00 00 00    	jne    c0002e21 <sync_fs+0xac>
c0002d87:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002d8a:	75 7b                	jne    c0002e07 <sync_fs+0x92>
c0002d8c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002d90:	75 75                	jne    c0002e07 <sync_fs+0x92>
c0002d92:	b9 00 02 00 00       	mov    ecx,0x200
c0002d97:	8d 73 34             	lea    esi,[ebx+0x34]
c0002d9a:	31 d2                	xor    edx,edx
c0002d9c:	89 f0                	mov    eax,esi
c0002d9e:	e8 75 f0 ff ff       	call   c0001e18 <mem_set>
c0002da3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002da9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002dae:	e8 49 f0 ff ff       	call   c0001dfc <st_word>
c0002db3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002db8:	89 f0                	mov    eax,esi
c0002dba:	e8 41 f0 ff ff       	call   c0001e00 <st_dword>
c0002dbf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002dc5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dca:	e8 31 f0 ff ff       	call   c0001e00 <st_dword>
c0002dcf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002dd2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002dd8:	e8 23 f0 ff ff       	call   c0001e00 <st_dword>
c0002ddd:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002de0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002de6:	e8 15 f0 ff ff       	call   c0001e00 <st_dword>
c0002deb:	6a 01                	push   0x1
c0002ded:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002df0:	40                   	inc    eax
c0002df1:	50                   	push   eax
c0002df2:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002df5:	56                   	push   esi
c0002df6:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002dfa:	50                   	push   eax
c0002dfb:	e8 a2 ef ff ff       	call   c0001da2 <disk_write>
c0002e00:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e04:	83 c4 10             	add    esp,0x10
c0002e07:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e0b:	51                   	push   ecx
c0002e0c:	6a 00                	push   0x0
c0002e0e:	6a 00                	push   0x0
c0002e10:	50                   	push   eax
c0002e11:	e8 a2 ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e16:	83 c4 10             	add    esp,0x10
c0002e19:	85 c0                	test   eax,eax
c0002e1b:	0f 95 c0             	setne  al
c0002e1e:	0f b6 c0             	movzx  eax,al
c0002e21:	5a                   	pop    edx
c0002e22:	5b                   	pop    ebx
c0002e23:	5e                   	pop    esi
c0002e24:	c3                   	ret    

c0002e25 <create_partition>:
c0002e25:	55                   	push   ebp
c0002e26:	0f b6 c0             	movzx  eax,al
c0002e29:	57                   	push   edi
c0002e2a:	56                   	push   esi
c0002e2b:	53                   	push   ebx
c0002e2c:	83 ec 40             	sub    esp,0x40
c0002e2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e33:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e37:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e3b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e3f:	50                   	push   eax
c0002e40:	6a 01                	push   0x1
c0002e42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e46:	e8 6d ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e4b:	83 c4 10             	add    esp,0x10
c0002e4e:	85 c0                	test   eax,eax
c0002e50:	0f 85 6a 01 00 00    	jne    c0002fc0 <create_partition+0x19b>
c0002e56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002e5a:	b9 05 00 00 00       	mov    ecx,0x5
c0002e5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002e63:	be 08 00 00 00       	mov    esi,0x8
c0002e68:	89 f0                	mov    eax,esi
c0002e6a:	31 d2                	xor    edx,edx
c0002e6c:	0f b6 d8             	movzx  ebx,al
c0002e6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e73:	f7 f3                	div    ebx
c0002e75:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002e7a:	76 0a                	jbe    c0002e86 <create_partition+0x61>
c0002e7c:	d1 e6                	shl    esi,1
c0002e7e:	49                   	dec    ecx
c0002e7f:	75 e7                	jne    c0002e68 <create_partition+0x43>
c0002e81:	be ff ff ff ff       	mov    esi,0xffffffff
c0002e86:	b9 00 02 00 00       	mov    ecx,0x200
c0002e8b:	31 d2                	xor    edx,edx
c0002e8d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002e91:	e8 82 ef ff ff       	call   c0001e18 <mem_set>
c0002e96:	b9 64 00 00 00       	mov    ecx,0x64
c0002e9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ea9:	f7 f1                	div    ecx
c0002eab:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002eb0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002ebe:	89 f0                	mov    eax,esi
c0002ec0:	0f b6 c0             	movzx  eax,al
c0002ec3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ec7:	85 c9                	test   ecx,ecx
c0002ec9:	75 34                	jne    c0002eff <create_partition+0xda>
c0002ecb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ecf:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ed4:	05 fe 01 00 00       	add    eax,0x1fe
c0002ed9:	e8 1e ef ff ff       	call   c0001dfc <st_word>
c0002ede:	6a 01                	push   0x1
c0002ee0:	6a 00                	push   0x0
c0002ee2:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002ee6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002eea:	e8 b3 ee ff ff       	call   c0001da2 <disk_write>
c0002eef:	83 c4 10             	add    esp,0x10
c0002ef2:	85 c0                	test   eax,eax
c0002ef4:	0f 95 c0             	setne  al
c0002ef7:	0f b6 c0             	movzx  eax,al
c0002efa:	e9 c6 00 00 00       	jmp    c0002fc5 <create_partition+0x1a0>
c0002eff:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002f03:	76 c6                	jbe    c0002ecb <create_partition+0xa6>
c0002f05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f09:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f0d:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f10:	83 fe 64             	cmp    esi,0x64
c0002f13:	77 0d                	ja     c0002f22 <create_partition+0xfd>
c0002f15:	74 07                	je     c0002f1e <create_partition+0xf9>
c0002f17:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f1c:	eb 04                	jmp    c0002f22 <create_partition+0xfd>
c0002f1e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f22:	31 c0                	xor    eax,eax
c0002f24:	89 f2                	mov    edx,esi
c0002f26:	01 ca                	add    edx,ecx
c0002f28:	0f 92 c0             	setb   al
c0002f2b:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002f2f:	77 04                	ja     c0002f35 <create_partition+0x110>
c0002f31:	85 c0                	test   eax,eax
c0002f33:	74 08                	je     c0002f3d <create_partition+0x118>
c0002f35:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f39:	29 ce                	sub    esi,ecx
c0002f3b:	eb 04                	jmp    c0002f41 <create_partition+0x11c>
c0002f3d:	85 f6                	test   esi,esi
c0002f3f:	74 8a                	je     c0002ecb <create_partition+0xa6>
c0002f41:	89 ca                	mov    edx,ecx
c0002f43:	89 d8                	mov    eax,ebx
c0002f45:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f4a:	e8 b1 ee ff ff       	call   c0001e00 <st_dword>
c0002f4f:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f52:	89 f2                	mov    edx,esi
c0002f54:	83 c3 10             	add    ebx,0x10
c0002f57:	e8 a4 ee ff ff       	call   c0001e00 <st_dword>
c0002f5c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f60:	31 d2                	xor    edx,edx
c0002f62:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f65:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f69:	89 c8                	mov    eax,ecx
c0002f6b:	01 f1                	add    ecx,esi
c0002f6d:	f7 f7                	div    edi
c0002f6f:	89 d5                	mov    ebp,edx
c0002f71:	31 d2                	xor    edx,edx
c0002f73:	45                   	inc    ebp
c0002f74:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f78:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f7b:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f7e:	89 c2                	mov    edx,eax
c0002f80:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f83:	c1 ea 02             	shr    edx,0x2
c0002f86:	83 e2 c0             	and    edx,0xffffffc0
c0002f89:	09 ea                	or     edx,ebp
c0002f8b:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f8e:	31 d2                	xor    edx,edx
c0002f90:	f7 f7                	div    edi
c0002f92:	89 d6                	mov    esi,edx
c0002f94:	31 d2                	xor    edx,edx
c0002f96:	46                   	inc    esi
c0002f97:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f9b:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002f9e:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002fa1:	89 c7                	mov    edi,eax
c0002fa3:	c1 ef 02             	shr    edi,0x2
c0002fa6:	83 e7 c0             	and    edi,0xffffffc0
c0002fa9:	09 fe                	or     esi,edi
c0002fab:	89 f2                	mov    edx,esi
c0002fad:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fb0:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c0002fb5:	0f 85 0c ff ff ff    	jne    c0002ec7 <create_partition+0xa2>
c0002fbb:	e9 0b ff ff ff       	jmp    c0002ecb <create_partition+0xa6>
c0002fc0:	b8 01 00 00 00       	mov    eax,0x1
c0002fc5:	83 c4 3c             	add    esp,0x3c
c0002fc8:	5b                   	pop    ebx
c0002fc9:	5e                   	pop    esi
c0002fca:	5f                   	pop    edi
c0002fcb:	5d                   	pop    ebp
c0002fcc:	c3                   	ret    

c0002fcd <get_fileinfo>:
c0002fcd:	55                   	push   ebp
c0002fce:	57                   	push   edi
c0002fcf:	56                   	push   esi
c0002fd0:	53                   	push   ebx
c0002fd1:	83 ec 1c             	sub    esp,0x1c
c0002fd4:	8b 30                	mov    esi,DWORD PTR [eax]
c0002fd6:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002fda:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002fde:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002fe2:	0f 84 d3 01 00 00    	je     c00031bb <get_fileinfo+0x1ee>
c0002fe8:	89 d3                	mov    ebx,edx
c0002fea:	89 c6                	mov    esi,eax
c0002fec:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002ff0:	74 72                	je     c0003064 <get_fileinfo+0x97>
c0002ff2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002ffa:	31 ed                	xor    ebp,ebp
c0002ffc:	31 ff                	xor    edi,edi
c0002ffe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003002:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0003006:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003009:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c000300d:	89 c2                	mov    edx,eax
c000300f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003013:	85 c0                	test   eax,eax
c0003015:	74 41                	je     c0003058 <get_fileinfo+0x8b>
c0003017:	0f b7 c5             	movzx  eax,bp
c000301a:	85 c0                	test   eax,eax
c000301c:	75 0d                	jne    c000302b <get_fileinfo+0x5e>
c000301e:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003024:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003029:	76 22                	jbe    c000304d <get_fileinfo+0x80>
c000302b:	c1 e0 10             	shl    eax,0x10
c000302e:	b9 ff 00 00 00       	mov    ecx,0xff
c0003033:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003037:	29 f9                	sub    ecx,edi
c0003039:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c000303d:	e8 f3 ee ff ff       	call   c0001f35 <put_utf>
c0003042:	0f b6 c0             	movzx  eax,al
c0003045:	85 c0                	test   eax,eax
c0003047:	74 0d                	je     c0003056 <get_fileinfo+0x89>
c0003049:	01 c7                	add    edi,eax
c000304b:	31 d2                	xor    edx,edx
c000304d:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c0003052:	89 d5                	mov    ebp,edx
c0003054:	eb a8                	jmp    c0002ffe <get_fileinfo+0x31>
c0003056:	31 ff                	xor    edi,edi
c0003058:	66 85 ed             	test   bp,bp
c000305b:	74 02                	je     c000305f <get_fileinfo+0x92>
c000305d:	31 ff                	xor    edi,edi
c000305f:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003064:	31 ff                	xor    edi,edi
c0003066:	31 c9                	xor    ecx,ecx
c0003068:	83 f9 0a             	cmp    ecx,0xa
c000306b:	0f 87 ac 00 00 00    	ja     c000311d <get_fileinfo+0x150>
c0003071:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003074:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003077:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c000307b:	89 c2                	mov    edx,eax
c000307d:	83 f8 20             	cmp    eax,0x20
c0003080:	0f 84 90 00 00 00    	je     c0003116 <get_fileinfo+0x149>
c0003086:	83 f8 05             	cmp    eax,0x5
c0003089:	75 05                	jne    c0003090 <get_fileinfo+0xc3>
c000308b:	ba e5 00 00 00       	mov    edx,0xe5
c0003090:	83 ff 0b             	cmp    edi,0xb
c0003093:	77 0b                	ja     c00030a0 <get_fileinfo+0xd3>
c0003095:	83 fd 09             	cmp    ebp,0x9
c0003098:	75 06                	jne    c00030a0 <get_fileinfo+0xd3>
c000309a:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c000309f:	47                   	inc    edi
c00030a0:	0f b7 c2             	movzx  eax,dx
c00030a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030a7:	e8 ab ed ff ff       	call   c0001e57 <dbc_1st>
c00030ac:	85 c0                	test   eax,eax
c00030ae:	74 2f                	je     c00030df <get_fileinfo+0x112>
c00030b0:	83 fd 08             	cmp    ebp,0x8
c00030b3:	74 2a                	je     c00030df <get_fileinfo+0x112>
c00030b5:	83 fd 0b             	cmp    ebp,0xb
c00030b8:	74 25                	je     c00030df <get_fileinfo+0x112>
c00030ba:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030bd:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030c1:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00030c5:	e8 90 ed ff ff       	call   c0001e5a <dbc_2nd>
c00030ca:	85 c0                	test   eax,eax
c00030cc:	74 11                	je     c00030df <get_fileinfo+0x112>
c00030ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00030d2:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00030d7:	c1 e0 08             	shl    eax,0x8
c00030da:	8d 69 02             	lea    ebp,[ecx+0x2]
c00030dd:	09 c2                	or     edx,eax
c00030df:	0f b7 d2             	movzx  edx,dx
c00030e2:	50                   	push   eax
c00030e3:	50                   	push   eax
c00030e4:	68 b5 01 00 00       	push   0x1b5
c00030e9:	52                   	push   edx
c00030ea:	e8 01 2c 00 00       	call   c0005cf0 <ff_oem2uni>
c00030ef:	83 c4 10             	add    esp,0x10
c00030f2:	0f b7 c0             	movzx  eax,ax
c00030f5:	85 c0                	test   eax,eax
c00030f7:	75 04                	jne    c00030fd <get_fileinfo+0x130>
c00030f9:	31 ff                	xor    edi,edi
c00030fb:	eb 20                	jmp    c000311d <get_fileinfo+0x150>
c00030fd:	b9 0c 00 00 00       	mov    ecx,0xc
c0003102:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0003106:	29 f9                	sub    ecx,edi
c0003108:	e8 28 ee ff ff       	call   c0001f35 <put_utf>
c000310d:	0f b6 c0             	movzx  eax,al
c0003110:	85 c0                	test   eax,eax
c0003112:	74 e5                	je     c00030f9 <get_fileinfo+0x12c>
c0003114:	01 c7                	add    edi,eax
c0003116:	89 e9                	mov    ecx,ebp
c0003118:	e9 4b ff ff ff       	jmp    c0003068 <get_fileinfo+0x9b>
c000311d:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003122:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003126:	75 5f                	jne    c0003187 <get_fileinfo+0x1ba>
c0003128:	85 ff                	test   edi,edi
c000312a:	75 0b                	jne    c0003137 <get_fileinfo+0x16a>
c000312c:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003130:	ba 01 00 00 00       	mov    edx,0x1
c0003135:	eb 3e                	jmp    c0003175 <get_fileinfo+0x1a8>
c0003137:	bf 08 00 00 00       	mov    edi,0x8
c000313c:	31 d2                	xor    edx,edx
c000313e:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003144:	84 c0                	test   al,al
c0003146:	74 2d                	je     c0003175 <get_fileinfo+0x1a8>
c0003148:	66 83 f8 2e          	cmp    ax,0x2e
c000314c:	74 1b                	je     c0003169 <get_fileinfo+0x19c>
c000314e:	8d 48 bf             	lea    ecx,[eax-0x41]
c0003151:	66 83 f9 19          	cmp    cx,0x19
c0003155:	77 17                	ja     c000316e <get_fileinfo+0x1a1>
c0003157:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000315a:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000315d:	21 f9                	and    ecx,edi
c000315f:	80 e1 18             	and    cl,0x18
c0003162:	74 0a                	je     c000316e <get_fileinfo+0x1a1>
c0003164:	83 c0 20             	add    eax,0x20
c0003167:	eb 05                	jmp    c000316e <get_fileinfo+0x1a1>
c0003169:	bf 10 00 00 00       	mov    edi,0x10
c000316e:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003172:	42                   	inc    edx
c0003173:	eb c9                	jmp    c000313e <get_fileinfo+0x171>
c0003175:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c000317a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000317d:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0003181:	75 04                	jne    c0003187 <get_fileinfo+0x1ba>
c0003183:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003187:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000318a:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000318d:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003190:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003193:	83 c0 1c             	add    eax,0x1c
c0003196:	e8 49 ec ff ff       	call   c0001de4 <ld_dword>
c000319b:	89 03                	mov    DWORD PTR [ebx],eax
c000319d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031a0:	83 c0 16             	add    eax,0x16
c00031a3:	e8 2f ec ff ff       	call   c0001dd7 <ld_word>
c00031a8:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031ac:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031af:	83 c0 18             	add    eax,0x18
c00031b2:	e8 20 ec ff ff       	call   c0001dd7 <ld_word>
c00031b7:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031bb:	83 c4 1c             	add    esp,0x1c
c00031be:	5b                   	pop    ebx
c00031bf:	5e                   	pop    esi
c00031c0:	5f                   	pop    edi
c00031c1:	5d                   	pop    ebp
c00031c2:	c3                   	ret    

c00031c3 <ld_clust.isra.0>:
c00031c3:	56                   	push   esi
c00031c4:	89 c6                	mov    esi,eax
c00031c6:	53                   	push   ebx
c00031c7:	8d 42 1a             	lea    eax,[edx+0x1a]
c00031ca:	89 d3                	mov    ebx,edx
c00031cc:	e8 06 ec ff ff       	call   c0001dd7 <ld_word>
c00031d1:	0f b7 c8             	movzx  ecx,ax
c00031d4:	89 f0                	mov    eax,esi
c00031d6:	3c 03                	cmp    al,0x3
c00031d8:	75 0d                	jne    c00031e7 <ld_clust.isra.0+0x24>
c00031da:	8d 43 14             	lea    eax,[ebx+0x14]
c00031dd:	e8 f5 eb ff ff       	call   c0001dd7 <ld_word>
c00031e2:	c1 e0 10             	shl    eax,0x10
c00031e5:	09 c1                	or     ecx,eax
c00031e7:	89 c8                	mov    eax,ecx
c00031e9:	5b                   	pop    ebx
c00031ea:	5e                   	pop    esi
c00031eb:	c3                   	ret    

c00031ec <st_clust.isra.1>:
c00031ec:	56                   	push   esi
c00031ed:	89 c6                	mov    esi,eax
c00031ef:	53                   	push   ebx
c00031f0:	89 d3                	mov    ebx,edx
c00031f2:	0f b7 d1             	movzx  edx,cx
c00031f5:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00031f8:	e8 ff eb ff ff       	call   c0001dfc <st_word>
c00031fd:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0003200:	75 0f                	jne    c0003211 <st_clust.isra.1+0x25>
c0003202:	c1 e9 10             	shr    ecx,0x10
c0003205:	8d 43 14             	lea    eax,[ebx+0x14]
c0003208:	89 ca                	mov    edx,ecx
c000320a:	5b                   	pop    ebx
c000320b:	5e                   	pop    esi
c000320c:	e9 eb eb ff ff       	jmp    c0001dfc <st_word>
c0003211:	5b                   	pop    ebx
c0003212:	5e                   	pop    esi
c0003213:	c3                   	ret    

c0003214 <get_fat.isra.2>:
c0003214:	b9 01 00 00 00       	mov    ecx,0x1
c0003219:	83 fa 01             	cmp    edx,0x1
c000321c:	0f 86 f3 00 00 00    	jbe    c0003315 <get_fat.isra.2+0x101>
c0003222:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003225:	0f 83 ea 00 00 00    	jae    c0003315 <get_fat.isra.2+0x101>
c000322b:	55                   	push   ebp
c000322c:	57                   	push   edi
c000322d:	89 c7                	mov    edi,eax
c000322f:	56                   	push   esi
c0003230:	89 d6                	mov    esi,edx
c0003232:	53                   	push   ebx
c0003233:	83 ec 0c             	sub    esp,0xc
c0003236:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003239:	83 f8 02             	cmp    eax,0x2
c000323c:	74 78                	je     c00032b6 <get_fat.isra.2+0xa2>
c000323e:	83 f8 03             	cmp    eax,0x3
c0003241:	0f 84 96 00 00 00    	je     c00032dd <get_fat.isra.2+0xc9>
c0003247:	48                   	dec    eax
c0003248:	0f 85 bd 00 00 00    	jne    c000330b <get_fat.isra.2+0xf7>
c000324e:	89 d3                	mov    ebx,edx
c0003250:	89 f8                	mov    eax,edi
c0003252:	d1 eb                	shr    ebx,1
c0003254:	01 d3                	add    ebx,edx
c0003256:	89 da                	mov    edx,ebx
c0003258:	c1 ea 09             	shr    edx,0x9
c000325b:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000325e:	e8 db f0 ff ff       	call   c000233e <move_window>
c0003263:	85 c0                	test   eax,eax
c0003265:	74 08                	je     c000326f <get_fat.isra.2+0x5b>
c0003267:	83 c9 ff             	or     ecx,0xffffffff
c000326a:	e9 9c 00 00 00       	jmp    c000330b <get_fat.isra.2+0xf7>
c000326f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003272:	89 f8                	mov    eax,edi
c0003274:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000327a:	89 ea                	mov    edx,ebp
c000327c:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003280:	c1 ea 09             	shr    edx,0x9
c0003283:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003286:	e8 b3 f0 ff ff       	call   c000233e <move_window>
c000328b:	85 c0                	test   eax,eax
c000328d:	75 d8                	jne    c0003267 <get_fat.isra.2+0x53>
c000328f:	0f b6 c3             	movzx  eax,bl
c0003292:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003298:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c000329d:	c1 e3 08             	shl    ebx,0x8
c00032a0:	09 c3                	or     ebx,eax
c00032a2:	89 d9                	mov    ecx,ebx
c00032a4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032aa:	83 e6 01             	and    esi,0x1
c00032ad:	74 5c                	je     c000330b <get_fat.isra.2+0xf7>
c00032af:	89 d9                	mov    ecx,ebx
c00032b1:	c1 e9 04             	shr    ecx,0x4
c00032b4:	eb 55                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032b6:	c1 ea 08             	shr    edx,0x8
c00032b9:	89 f8                	mov    eax,edi
c00032bb:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032be:	e8 7b f0 ff ff       	call   c000233e <move_window>
c00032c3:	85 c0                	test   eax,eax
c00032c5:	75 a0                	jne    c0003267 <get_fat.isra.2+0x53>
c00032c7:	01 f6                	add    esi,esi
c00032c9:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00032cf:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032d3:	e8 ff ea ff ff       	call   c0001dd7 <ld_word>
c00032d8:	0f b7 c8             	movzx  ecx,ax
c00032db:	eb 2e                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032dd:	c1 ea 07             	shr    edx,0x7
c00032e0:	89 f8                	mov    eax,edi
c00032e2:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032e5:	e8 54 f0 ff ff       	call   c000233e <move_window>
c00032ea:	85 c0                	test   eax,eax
c00032ec:	0f 85 75 ff ff ff    	jne    c0003267 <get_fat.isra.2+0x53>
c00032f2:	c1 e6 02             	shl    esi,0x2
c00032f5:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00032fb:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032ff:	e8 e0 ea ff ff       	call   c0001de4 <ld_dword>
c0003304:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003309:	89 c1                	mov    ecx,eax
c000330b:	83 c4 0c             	add    esp,0xc
c000330e:	89 c8                	mov    eax,ecx
c0003310:	5b                   	pop    ebx
c0003311:	5e                   	pop    esi
c0003312:	5f                   	pop    edi
c0003313:	5d                   	pop    ebp
c0003314:	c3                   	ret    
c0003315:	89 c8                	mov    eax,ecx
c0003317:	c3                   	ret    

c0003318 <dir_sdi>:
c0003318:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000331e:	0f 87 b6 00 00 00    	ja     c00033da <dir_sdi+0xc2>
c0003324:	55                   	push   ebp
c0003325:	57                   	push   edi
c0003326:	56                   	push   esi
c0003327:	53                   	push   ebx
c0003328:	89 d3                	mov    ebx,edx
c000332a:	83 ec 1c             	sub    esp,0x1c
c000332d:	f6 c2 1f             	test   dl,0x1f
c0003330:	74 0a                	je     c000333c <dir_sdi+0x24>
c0003332:	b8 02 00 00 00       	mov    eax,0x2
c0003337:	e9 96 00 00 00       	jmp    c00033d2 <dir_sdi+0xba>
c000333c:	89 c6                	mov    esi,eax
c000333e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003340:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003343:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003346:	85 c9                	test   ecx,ecx
c0003348:	75 23                	jne    c000336d <dir_sdi+0x55>
c000334a:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000334d:	76 07                	jbe    c0003356 <dir_sdi+0x3e>
c000334f:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003352:	85 c0                	test   eax,eax
c0003354:	75 15                	jne    c000336b <dir_sdi+0x53>
c0003356:	89 da                	mov    edx,ebx
c0003358:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c000335c:	c1 ea 05             	shr    edx,0x5
c000335f:	39 c2                	cmp    edx,eax
c0003361:	73 cf                	jae    c0003332 <dir_sdi+0x1a>
c0003363:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003366:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003369:	eb 3d                	jmp    c00033a8 <dir_sdi+0x90>
c000336b:	89 c1                	mov    ecx,eax
c000336d:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003371:	c1 e5 09             	shl    ebp,0x9
c0003374:	89 ca                	mov    edx,ecx
c0003376:	39 eb                	cmp    ebx,ebp
c0003378:	72 1c                	jb     c0003396 <dir_sdi+0x7e>
c000337a:	8b 06                	mov    eax,DWORD PTR [esi]
c000337c:	e8 93 fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003381:	89 c1                	mov    ecx,eax
c0003383:	83 f8 ff             	cmp    eax,0xffffffff
c0003386:	74 45                	je     c00033cd <dir_sdi+0xb5>
c0003388:	83 f8 01             	cmp    eax,0x1
c000338b:	76 a5                	jbe    c0003332 <dir_sdi+0x1a>
c000338d:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003390:	76 a0                	jbe    c0003332 <dir_sdi+0x1a>
c0003392:	29 eb                	sub    ebx,ebp
c0003394:	eb de                	jmp    c0003374 <dir_sdi+0x5c>
c0003396:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000339a:	89 f8                	mov    eax,edi
c000339c:	e8 8d ec ff ff       	call   c000202e <clst2sect>
c00033a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033a5:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033a8:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ab:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00033ae:	85 d2                	test   edx,edx
c00033b0:	74 80                	je     c0003332 <dir_sdi+0x1a>
c00033b2:	89 d8                	mov    eax,ebx
c00033b4:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033ba:	c1 e8 09             	shr    eax,0x9
c00033bd:	01 d0                	add    eax,edx
c00033bf:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033c2:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00033c6:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00033c9:	31 c0                	xor    eax,eax
c00033cb:	eb 05                	jmp    c00033d2 <dir_sdi+0xba>
c00033cd:	b8 01 00 00 00       	mov    eax,0x1
c00033d2:	83 c4 1c             	add    esp,0x1c
c00033d5:	5b                   	pop    ebx
c00033d6:	5e                   	pop    esi
c00033d7:	5f                   	pop    edi
c00033d8:	5d                   	pop    ebp
c00033d9:	c3                   	ret    
c00033da:	b8 02 00 00 00       	mov    eax,0x2
c00033df:	c3                   	ret    

c00033e0 <create_chain>:
c00033e0:	55                   	push   ebp
c00033e1:	89 c5                	mov    ebp,eax
c00033e3:	57                   	push   edi
c00033e4:	89 d7                	mov    edi,edx
c00033e6:	56                   	push   esi
c00033e7:	53                   	push   ebx
c00033e8:	83 ec 1c             	sub    esp,0x1c
c00033eb:	85 d2                	test   edx,edx
c00033ed:	8b 30                	mov    esi,DWORD PTR [eax]
c00033ef:	75 0e                	jne    c00033ff <create_chain+0x1f>
c00033f1:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00033f4:	85 c9                	test   ecx,ecx
c00033f6:	74 34                	je     c000342c <create_chain+0x4c>
c00033f8:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00033fb:	77 34                	ja     c0003431 <create_chain+0x51>
c00033fd:	eb 2d                	jmp    c000342c <create_chain+0x4c>
c00033ff:	89 f0                	mov    eax,esi
c0003401:	e8 0e fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003406:	89 c3                	mov    ebx,eax
c0003408:	83 f8 01             	cmp    eax,0x1
c000340b:	77 0a                	ja     c0003417 <create_chain+0x37>
c000340d:	bb 01 00 00 00       	mov    ebx,0x1
c0003412:	e9 fe 00 00 00       	jmp    c0003515 <create_chain+0x135>
c0003417:	83 f8 ff             	cmp    eax,0xffffffff
c000341a:	0f 84 f2 00 00 00    	je     c0003512 <create_chain+0x132>
c0003420:	89 f9                	mov    ecx,edi
c0003422:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003425:	76 0a                	jbe    c0003431 <create_chain+0x51>
c0003427:	e9 e9 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000342c:	b9 01 00 00 00       	mov    ecx,0x1
c0003431:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003435:	75 07                	jne    c000343e <create_chain+0x5e>
c0003437:	31 db                	xor    ebx,ebx
c0003439:	e9 d7 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000343e:	39 f9                	cmp    ecx,edi
c0003440:	75 46                	jne    c0003488 <create_chain+0xa8>
c0003442:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003445:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003448:	77 05                	ja     c000344f <create_chain+0x6f>
c000344a:	bb 02 00 00 00       	mov    ebx,0x2
c000344f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003453:	89 da                	mov    edx,ebx
c0003455:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003458:	e8 b7 fd ff ff       	call   c0003214 <get_fat.isra.2>
c000345d:	83 f8 01             	cmp    eax,0x1
c0003460:	74 ab                	je     c000340d <create_chain+0x2d>
c0003462:	83 f8 ff             	cmp    eax,0xffffffff
c0003465:	0f 84 a7 00 00 00    	je     c0003512 <create_chain+0x132>
c000346b:	85 c0                	test   eax,eax
c000346d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003471:	74 11                	je     c0003484 <create_chain+0xa4>
c0003473:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003476:	83 f8 01             	cmp    eax,0x1
c0003479:	76 0d                	jbe    c0003488 <create_chain+0xa8>
c000347b:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c000347e:	73 08                	jae    c0003488 <create_chain+0xa8>
c0003480:	89 c1                	mov    ecx,eax
c0003482:	eb 04                	jmp    c0003488 <create_chain+0xa8>
c0003484:	85 db                	test   ebx,ebx
c0003486:	75 3d                	jne    c00034c5 <create_chain+0xe5>
c0003488:	89 cb                	mov    ebx,ecx
c000348a:	43                   	inc    ebx
c000348b:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c000348e:	77 0a                	ja     c000349a <create_chain+0xba>
c0003490:	83 f9 01             	cmp    ecx,0x1
c0003493:	76 a2                	jbe    c0003437 <create_chain+0x57>
c0003495:	bb 02 00 00 00       	mov    ebx,0x2
c000349a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000349e:	89 da                	mov    edx,ebx
c00034a0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034a3:	e8 6c fd ff ff       	call   c0003214 <get_fat.isra.2>
c00034a8:	85 c0                	test   eax,eax
c00034aa:	74 19                	je     c00034c5 <create_chain+0xe5>
c00034ac:	83 f8 01             	cmp    eax,0x1
c00034af:	0f 84 58 ff ff ff    	je     c000340d <create_chain+0x2d>
c00034b5:	40                   	inc    eax
c00034b6:	74 5a                	je     c0003512 <create_chain+0x132>
c00034b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034bc:	39 cb                	cmp    ebx,ecx
c00034be:	75 ca                	jne    c000348a <create_chain+0xaa>
c00034c0:	e9 72 ff ff ff       	jmp    c0003437 <create_chain+0x57>
c00034c5:	83 c9 ff             	or     ecx,0xffffffff
c00034c8:	89 da                	mov    edx,ebx
c00034ca:	89 f0                	mov    eax,esi
c00034cc:	e8 b1 f2 ff ff       	call   c0002782 <put_fat>
c00034d1:	85 c0                	test   eax,eax
c00034d3:	75 36                	jne    c000350b <create_chain+0x12b>
c00034d5:	85 ff                	test   edi,edi
c00034d7:	75 16                	jne    c00034ef <create_chain+0x10f>
c00034d9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00034dc:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00034df:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00034e2:	8d 57 fe             	lea    edx,[edi-0x2]
c00034e5:	39 d0                	cmp    eax,edx
c00034e7:	77 17                	ja     c0003500 <create_chain+0x120>
c00034e9:	48                   	dec    eax
c00034ea:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00034ed:	eb 11                	jmp    c0003500 <create_chain+0x120>
c00034ef:	89 d9                	mov    ecx,ebx
c00034f1:	89 fa                	mov    edx,edi
c00034f3:	89 f0                	mov    eax,esi
c00034f5:	e8 88 f2 ff ff       	call   c0002782 <put_fat>
c00034fa:	85 c0                	test   eax,eax
c00034fc:	74 db                	je     c00034d9 <create_chain+0xf9>
c00034fe:	eb 0b                	jmp    c000350b <create_chain+0x12b>
c0003500:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c0003503:	83 c8 01             	or     eax,0x1
c0003506:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0003509:	eb 0a                	jmp    c0003515 <create_chain+0x135>
c000350b:	48                   	dec    eax
c000350c:	0f 85 fb fe ff ff    	jne    c000340d <create_chain+0x2d>
c0003512:	83 cb ff             	or     ebx,0xffffffff
c0003515:	83 c4 1c             	add    esp,0x1c
c0003518:	89 d8                	mov    eax,ebx
c000351a:	5b                   	pop    ebx
c000351b:	5e                   	pop    esi
c000351c:	5f                   	pop    edi
c000351d:	5d                   	pop    ebp
c000351e:	c3                   	ret    

c000351f <remove_chain>:
c000351f:	55                   	push   ebp
c0003520:	57                   	push   edi
c0003521:	56                   	push   esi
c0003522:	89 d6                	mov    esi,edx
c0003524:	53                   	push   ebx
c0003525:	83 ec 0c             	sub    esp,0xc
c0003528:	83 fa 01             	cmp    edx,0x1
c000352b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000352d:	76 6a                	jbe    c0003599 <remove_chain+0x7a>
c000352f:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003532:	76 65                	jbe    c0003599 <remove_chain+0x7a>
c0003534:	89 c5                	mov    ebp,eax
c0003536:	89 ca                	mov    edx,ecx
c0003538:	85 c9                	test   ecx,ecx
c000353a:	74 0e                	je     c000354a <remove_chain+0x2b>
c000353c:	83 c9 ff             	or     ecx,0xffffffff
c000353f:	89 d8                	mov    eax,ebx
c0003541:	e8 3c f2 ff ff       	call   c0002782 <put_fat>
c0003546:	85 c0                	test   eax,eax
c0003548:	75 5b                	jne    c00035a5 <remove_chain+0x86>
c000354a:	89 f2                	mov    edx,esi
c000354c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000354f:	e8 c0 fc ff ff       	call   c0003214 <get_fat.isra.2>
c0003554:	89 c7                	mov    edi,eax
c0003556:	85 c0                	test   eax,eax
c0003558:	75 04                	jne    c000355e <remove_chain+0x3f>
c000355a:	31 c0                	xor    eax,eax
c000355c:	eb 47                	jmp    c00035a5 <remove_chain+0x86>
c000355e:	83 f8 01             	cmp    eax,0x1
c0003561:	74 36                	je     c0003599 <remove_chain+0x7a>
c0003563:	83 f8 ff             	cmp    eax,0xffffffff
c0003566:	74 38                	je     c00035a0 <remove_chain+0x81>
c0003568:	31 c9                	xor    ecx,ecx
c000356a:	89 f2                	mov    edx,esi
c000356c:	89 d8                	mov    eax,ebx
c000356e:	e8 0f f2 ff ff       	call   c0002782 <put_fat>
c0003573:	85 c0                	test   eax,eax
c0003575:	75 2e                	jne    c00035a5 <remove_chain+0x86>
c0003577:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000357a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000357d:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003580:	39 c8                	cmp    eax,ecx
c0003582:	73 0d                	jae    c0003591 <remove_chain+0x72>
c0003584:	40                   	inc    eax
c0003585:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003588:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000358b:	83 c8 01             	or     eax,0x1
c000358e:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003591:	89 fe                	mov    esi,edi
c0003593:	39 fa                	cmp    edx,edi
c0003595:	77 b3                	ja     c000354a <remove_chain+0x2b>
c0003597:	eb c1                	jmp    c000355a <remove_chain+0x3b>
c0003599:	b8 02 00 00 00       	mov    eax,0x2
c000359e:	eb 05                	jmp    c00035a5 <remove_chain+0x86>
c00035a0:	b8 01 00 00 00       	mov    eax,0x1
c00035a5:	83 c4 0c             	add    esp,0xc
c00035a8:	5b                   	pop    ebx
c00035a9:	5e                   	pop    esi
c00035aa:	5f                   	pop    edi
c00035ab:	5d                   	pop    ebp
c00035ac:	c3                   	ret    

c00035ad <dir_next>:
c00035ad:	55                   	push   ebp
c00035ae:	57                   	push   edi
c00035af:	56                   	push   esi
c00035b0:	53                   	push   ebx
c00035b1:	83 ec 1c             	sub    esp,0x1c
c00035b4:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035b7:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035b9:	83 c7 20             	add    edi,0x20
c00035bc:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035c2:	76 07                	jbe    c00035cb <dir_next+0x1e>
c00035c4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00035cb:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00035ce:	b9 04 00 00 00       	mov    ecx,0x4
c00035d3:	85 f6                	test   esi,esi
c00035d5:	0f 84 cd 00 00 00    	je     c00036a8 <dir_next+0xfb>
c00035db:	89 c3                	mov    ebx,eax
c00035dd:	89 d1                	mov    ecx,edx
c00035df:	89 f8                	mov    eax,edi
c00035e1:	25 ff 01 00 00       	and    eax,0x1ff
c00035e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035ea:	0f 85 a8 00 00 00    	jne    c0003698 <dir_next+0xeb>
c00035f0:	46                   	inc    esi
c00035f1:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00035f4:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00035f7:	85 d2                	test   edx,edx
c00035f9:	75 22                	jne    c000361d <dir_next+0x70>
c00035fb:	89 fa                	mov    edx,edi
c00035fd:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003601:	c1 ea 05             	shr    edx,0x5
c0003604:	39 c2                	cmp    edx,eax
c0003606:	0f 82 8c 00 00 00    	jb     c0003698 <dir_next+0xeb>
c000360c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003613:	b9 04 00 00 00       	mov    ecx,0x4
c0003618:	e9 8b 00 00 00       	jmp    c00036a8 <dir_next+0xfb>
c000361d:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003621:	89 fe                	mov    esi,edi
c0003623:	48                   	dec    eax
c0003624:	c1 ee 09             	shr    esi,0x9
c0003627:	85 f0                	test   eax,esi
c0003629:	75 6d                	jne    c0003698 <dir_next+0xeb>
c000362b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000362f:	89 e8                	mov    eax,ebp
c0003631:	e8 de fb ff ff       	call   c0003214 <get_fat.isra.2>
c0003636:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000363a:	89 c6                	mov    esi,eax
c000363c:	83 f8 01             	cmp    eax,0x1
c000363f:	77 07                	ja     c0003648 <dir_next+0x9b>
c0003641:	b9 02 00 00 00       	mov    ecx,0x2
c0003646:	eb 60                	jmp    c00036a8 <dir_next+0xfb>
c0003648:	83 f8 ff             	cmp    eax,0xffffffff
c000364b:	75 07                	jne    c0003654 <dir_next+0xa7>
c000364d:	b9 01 00 00 00       	mov    ecx,0x1
c0003652:	eb 54                	jmp    c00036a8 <dir_next+0xfb>
c0003654:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003657:	77 30                	ja     c0003689 <dir_next+0xdc>
c0003659:	85 c9                	test   ecx,ecx
c000365b:	74 af                	je     c000360c <dir_next+0x5f>
c000365d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003660:	89 d8                	mov    eax,ebx
c0003662:	e8 79 fd ff ff       	call   c00033e0 <create_chain>
c0003667:	b9 07 00 00 00       	mov    ecx,0x7
c000366c:	89 c6                	mov    esi,eax
c000366e:	85 c0                	test   eax,eax
c0003670:	74 36                	je     c00036a8 <dir_next+0xfb>
c0003672:	83 f8 01             	cmp    eax,0x1
c0003675:	74 ca                	je     c0003641 <dir_next+0x94>
c0003677:	83 f8 ff             	cmp    eax,0xffffffff
c000367a:	74 d1                	je     c000364d <dir_next+0xa0>
c000367c:	89 c2                	mov    edx,eax
c000367e:	89 e8                	mov    eax,ebp
c0003680:	e8 54 f2 ff ff       	call   c00028d9 <dir_clear>
c0003685:	85 c0                	test   eax,eax
c0003687:	75 c4                	jne    c000364d <dir_next+0xa0>
c0003689:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000368c:	89 f2                	mov    edx,esi
c000368e:	89 e8                	mov    eax,ebp
c0003690:	e8 99 e9 ff ff       	call   c000202e <clst2sect>
c0003695:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000369c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000369f:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036a3:	31 c9                	xor    ecx,ecx
c00036a5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036a8:	83 c4 1c             	add    esp,0x1c
c00036ab:	89 c8                	mov    eax,ecx
c00036ad:	5b                   	pop    ebx
c00036ae:	5e                   	pop    esi
c00036af:	5f                   	pop    edi
c00036b0:	5d                   	pop    ebp
c00036b1:	c3                   	ret    

c00036b2 <dir_alloc>:
c00036b2:	55                   	push   ebp
c00036b3:	89 c5                	mov    ebp,eax
c00036b5:	57                   	push   edi
c00036b6:	89 d7                	mov    edi,edx
c00036b8:	56                   	push   esi
c00036b9:	31 d2                	xor    edx,edx
c00036bb:	53                   	push   ebx
c00036bc:	83 ec 0c             	sub    esp,0xc
c00036bf:	8b 30                	mov    esi,DWORD PTR [eax]
c00036c1:	e8 52 fc ff ff       	call   c0003318 <dir_sdi>
c00036c6:	85 c0                	test   eax,eax
c00036c8:	75 3b                	jne    c0003705 <dir_alloc+0x53>
c00036ca:	31 db                	xor    ebx,ebx
c00036cc:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00036cf:	89 f0                	mov    eax,esi
c00036d1:	e8 68 ec ff ff       	call   c000233e <move_window>
c00036d6:	85 c0                	test   eax,eax
c00036d8:	75 2b                	jne    c0003705 <dir_alloc+0x53>
c00036da:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00036dd:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00036e0:	85 d2                	test   edx,edx
c00036e2:	74 08                	je     c00036ec <dir_alloc+0x3a>
c00036e4:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00036ea:	75 07                	jne    c00036f3 <dir_alloc+0x41>
c00036ec:	43                   	inc    ebx
c00036ed:	39 fb                	cmp    ebx,edi
c00036ef:	75 04                	jne    c00036f5 <dir_alloc+0x43>
c00036f1:	eb 1c                	jmp    c000370f <dir_alloc+0x5d>
c00036f3:	31 db                	xor    ebx,ebx
c00036f5:	ba 01 00 00 00       	mov    edx,0x1
c00036fa:	89 e8                	mov    eax,ebp
c00036fc:	e8 ac fe ff ff       	call   c00035ad <dir_next>
c0003701:	85 c0                	test   eax,eax
c0003703:	74 c7                	je     c00036cc <dir_alloc+0x1a>
c0003705:	83 f8 04             	cmp    eax,0x4
c0003708:	75 05                	jne    c000370f <dir_alloc+0x5d>
c000370a:	b8 07 00 00 00       	mov    eax,0x7
c000370f:	83 c4 0c             	add    esp,0xc
c0003712:	5b                   	pop    ebx
c0003713:	5e                   	pop    esi
c0003714:	5f                   	pop    edi
c0003715:	5d                   	pop    ebp
c0003716:	c3                   	ret    

c0003717 <dir_read>:
c0003717:	55                   	push   ebp
c0003718:	57                   	push   edi
c0003719:	bf ff ff ff ff       	mov    edi,0xffffffff
c000371e:	56                   	push   esi
c000371f:	be 04 00 00 00       	mov    esi,0x4
c0003724:	53                   	push   ebx
c0003725:	89 c3                	mov    ebx,eax
c0003727:	83 ec 1c             	sub    esp,0x1c
c000372a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000372e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003730:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003735:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003738:	85 d2                	test   edx,edx
c000373a:	0f 84 e3 00 00 00    	je     c0003823 <dir_read+0x10c>
c0003740:	89 e8                	mov    eax,ebp
c0003742:	e8 f7 eb ff ff       	call   c000233e <move_window>
c0003747:	89 c6                	mov    esi,eax
c0003749:	85 c0                	test   eax,eax
c000374b:	0f 85 dd 00 00 00    	jne    c000382e <dir_read+0x117>
c0003751:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003754:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003757:	88 04 24             	mov    BYTE PTR [esp],al
c000375a:	85 c0                	test   eax,eax
c000375c:	0f 84 c7 00 00 00    	je     c0003829 <dir_read+0x112>
c0003762:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c0003765:	83 e1 3f             	and    ecx,0x3f
c0003768:	83 f8 2e             	cmp    eax,0x2e
c000376b:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c000376e:	0f 84 95 00 00 00    	je     c0003809 <dir_read+0xf2>
c0003774:	3d e5 00 00 00       	cmp    eax,0xe5
c0003779:	0f 84 8a 00 00 00    	je     c0003809 <dir_read+0xf2>
c000377f:	0f b6 c9             	movzx  ecx,cl
c0003782:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003786:	83 e1 df             	and    ecx,0xffffffdf
c0003789:	83 f9 08             	cmp    ecx,0x8
c000378c:	0f 94 c1             	sete   cl
c000378f:	0f b6 c9             	movzx  ecx,cl
c0003792:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0003796:	75 71                	jne    c0003809 <dir_read+0xf2>
c0003798:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c000379d:	75 4a                	jne    c00037e9 <dir_read+0xd2>
c000379f:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037a3:	74 16                	je     c00037bb <dir_read+0xa4>
c00037a5:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037a8:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037af:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037b6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037b9:	eb 0e                	jmp    c00037c9 <dir_read+0xb2>
c00037bb:	89 f9                	mov    ecx,edi
c00037bd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037c2:	0f b6 c9             	movzx  ecx,cl
c00037c5:	39 c1                	cmp    ecx,eax
c00037c7:	75 45                	jne    c000380e <dir_read+0xf7>
c00037c9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00037cd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037d2:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00037d5:	75 37                	jne    c000380e <dir_read+0xf7>
c00037d7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00037da:	e8 6c e8 ff ff       	call   c000204b <pick_lfn>
c00037df:	85 c0                	test   eax,eax
c00037e1:	74 2b                	je     c000380e <dir_read+0xf7>
c00037e3:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00037e6:	4f                   	dec    edi
c00037e7:	eb 25                	jmp    c000380e <dir_read+0xf7>
c00037e9:	89 f8                	mov    eax,edi
c00037eb:	84 c0                	test   al,al
c00037ed:	75 11                	jne    c0003800 <dir_read+0xe9>
c00037ef:	89 d0                	mov    eax,edx
c00037f1:	e8 32 ea ff ff       	call   c0002228 <sum_sfn>
c00037f6:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00037fa:	75 04                	jne    c0003800 <dir_read+0xe9>
c00037fc:	31 f6                	xor    esi,esi
c00037fe:	eb 35                	jmp    c0003835 <dir_read+0x11e>
c0003800:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003807:	eb 2c                	jmp    c0003835 <dir_read+0x11e>
c0003809:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380e:	31 d2                	xor    edx,edx
c0003810:	89 d8                	mov    eax,ebx
c0003812:	e8 96 fd ff ff       	call   c00035ad <dir_next>
c0003817:	89 c6                	mov    esi,eax
c0003819:	85 c0                	test   eax,eax
c000381b:	0f 84 14 ff ff ff    	je     c0003735 <dir_read+0x1e>
c0003821:	eb 0b                	jmp    c000382e <dir_read+0x117>
c0003823:	85 f6                	test   esi,esi
c0003825:	74 d5                	je     c00037fc <dir_read+0xe5>
c0003827:	eb 05                	jmp    c000382e <dir_read+0x117>
c0003829:	be 04 00 00 00       	mov    esi,0x4
c000382e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003835:	83 c4 1c             	add    esp,0x1c
c0003838:	89 f0                	mov    eax,esi
c000383a:	5b                   	pop    ebx
c000383b:	5e                   	pop    esi
c000383c:	5f                   	pop    edi
c000383d:	5d                   	pop    ebp
c000383e:	c3                   	ret    

c000383f <dir_remove>:
c000383f:	57                   	push   edi
c0003840:	56                   	push   esi
c0003841:	53                   	push   ebx
c0003842:	89 c3                	mov    ebx,eax
c0003844:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003847:	8b 30                	mov    esi,DWORD PTR [eax]
c0003849:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000384c:	83 fa ff             	cmp    edx,0xffffffff
c000384f:	74 09                	je     c000385a <dir_remove+0x1b>
c0003851:	e8 c2 fa ff ff       	call   c0003318 <dir_sdi>
c0003856:	85 c0                	test   eax,eax
c0003858:	75 34                	jne    c000388e <dir_remove+0x4f>
c000385a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000385d:	89 f0                	mov    eax,esi
c000385f:	e8 da ea ff ff       	call   c000233e <move_window>
c0003864:	85 c0                	test   eax,eax
c0003866:	75 1c                	jne    c0003884 <dir_remove+0x45>
c0003868:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000386b:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c000386e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003872:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003875:	73 17                	jae    c000388e <dir_remove+0x4f>
c0003877:	31 d2                	xor    edx,edx
c0003879:	89 d8                	mov    eax,ebx
c000387b:	e8 2d fd ff ff       	call   c00035ad <dir_next>
c0003880:	85 c0                	test   eax,eax
c0003882:	74 d6                	je     c000385a <dir_remove+0x1b>
c0003884:	83 f8 04             	cmp    eax,0x4
c0003887:	75 05                	jne    c000388e <dir_remove+0x4f>
c0003889:	b8 02 00 00 00       	mov    eax,0x2
c000388e:	5b                   	pop    ebx
c000388f:	5e                   	pop    esi
c0003890:	5f                   	pop    edi
c0003891:	c3                   	ret    

c0003892 <dir_find>:
c0003892:	55                   	push   ebp
c0003893:	31 d2                	xor    edx,edx
c0003895:	57                   	push   edi
c0003896:	56                   	push   esi
c0003897:	53                   	push   ebx
c0003898:	89 c3                	mov    ebx,eax
c000389a:	83 ec 1c             	sub    esp,0x1c
c000389d:	8b 00                	mov    eax,DWORD PTR [eax]
c000389f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038a3:	89 d8                	mov    eax,ebx
c00038a5:	e8 6e fa ff ff       	call   c0003318 <dir_sdi>
c00038aa:	89 c6                	mov    esi,eax
c00038ac:	85 c0                	test   eax,eax
c00038ae:	0f 85 1d 01 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038b4:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038bb:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c00038c0:	bf ff ff ff ff       	mov    edi,0xffffffff
c00038c5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00038c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038cc:	e8 6d ea ff ff       	call   c000233e <move_window>
c00038d1:	89 c6                	mov    esi,eax
c00038d3:	85 c0                	test   eax,eax
c00038d5:	0f 85 f6 00 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038db:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00038de:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c00038e2:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c00038e6:	85 c9                	test   ecx,ecx
c00038e8:	0f 84 de 00 00 00    	je     c00039cc <dir_find+0x13a>
c00038ee:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00038f1:	89 d0                	mov    eax,edx
c00038f3:	83 e0 3f             	and    eax,0x3f
c00038f6:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c00038fc:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00038ff:	0f 84 a6 00 00 00    	je     c00039ab <dir_find+0x119>
c0003905:	80 e2 08             	and    dl,0x8
c0003908:	0f b6 c0             	movzx  eax,al
c000390b:	74 0b                	je     c0003918 <dir_find+0x86>
c000390d:	83 f8 0f             	cmp    eax,0xf
c0003910:	0f 85 95 00 00 00    	jne    c00039ab <dir_find+0x119>
c0003916:	eb 05                	jmp    c000391d <dir_find+0x8b>
c0003918:	83 f8 0f             	cmp    eax,0xf
c000391b:	75 62                	jne    c000397f <dir_find+0xed>
c000391d:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003921:	0f 85 90 00 00 00    	jne    c00039b7 <dir_find+0x125>
c0003927:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c000392c:	74 17                	je     c0003945 <dir_find+0xb3>
c000392e:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003931:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003939:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000393d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003940:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003943:	eb 13                	jmp    c0003958 <dir_find+0xc6>
c0003945:	89 f8                	mov    eax,edi
c0003947:	bf ff ff ff ff       	mov    edi,0xffffffff
c000394c:	0f b6 d0             	movzx  edx,al
c000394f:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003954:	39 c2                	cmp    edx,eax
c0003956:	75 5f                	jne    c00039b7 <dir_find+0x125>
c0003958:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000395c:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003961:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003964:	75 51                	jne    c00039b7 <dir_find+0x125>
c0003966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000396a:	89 ea                	mov    edx,ebp
c000396c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000396f:	e8 37 f3 ff ff       	call   c0002cab <cmp_lfn>
c0003974:	85 c0                	test   eax,eax
c0003976:	74 3f                	je     c00039b7 <dir_find+0x125>
c0003978:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000397c:	4f                   	dec    edi
c000397d:	eb 38                	jmp    c00039b7 <dir_find+0x125>
c000397f:	89 f8                	mov    eax,edi
c0003981:	84 c0                	test   al,al
c0003983:	75 0d                	jne    c0003992 <dir_find+0x100>
c0003985:	89 e8                	mov    eax,ebp
c0003987:	e8 9c e8 ff ff       	call   c0002228 <sum_sfn>
c000398c:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003990:	74 3f                	je     c00039d1 <dir_find+0x13f>
c0003992:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003996:	75 13                	jne    c00039ab <dir_find+0x119>
c0003998:	8d 53 20             	lea    edx,[ebx+0x20]
c000399b:	b9 0b 00 00 00       	mov    ecx,0xb
c00039a0:	89 e8                	mov    eax,ebp
c00039a2:	e8 7c e4 ff ff       	call   c0001e23 <mem_cmp>
c00039a7:	85 c0                	test   eax,eax
c00039a9:	74 26                	je     c00039d1 <dir_find+0x13f>
c00039ab:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039b2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039b7:	31 d2                	xor    edx,edx
c00039b9:	89 d8                	mov    eax,ebx
c00039bb:	e8 ed fb ff ff       	call   c00035ad <dir_next>
c00039c0:	89 c6                	mov    esi,eax
c00039c2:	85 c0                	test   eax,eax
c00039c4:	0f 84 fb fe ff ff    	je     c00038c5 <dir_find+0x33>
c00039ca:	eb 05                	jmp    c00039d1 <dir_find+0x13f>
c00039cc:	be 04 00 00 00       	mov    esi,0x4
c00039d1:	83 c4 1c             	add    esp,0x1c
c00039d4:	89 f0                	mov    eax,esi
c00039d6:	5b                   	pop    ebx
c00039d7:	5e                   	pop    esi
c00039d8:	5f                   	pop    edi
c00039d9:	5d                   	pop    ebp
c00039da:	c3                   	ret    

c00039db <follow_path>:
c00039db:	56                   	push   esi
c00039dc:	53                   	push   ebx
c00039dd:	89 c3                	mov    ebx,eax
c00039df:	83 ec 14             	sub    esp,0x14
c00039e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e6:	8b 30                	mov    esi,DWORD PTR [eax]
c00039e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039ec:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00039ef:	83 fa 5c             	cmp    edx,0x5c
c00039f2:	75 07                	jne    c00039fb <follow_path+0x20>
c00039f4:	40                   	inc    eax
c00039f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00039f9:	eb ed                	jmp    c00039e8 <follow_path+0xd>
c00039fb:	83 fa 2f             	cmp    edx,0x2f
c00039fe:	74 f4                	je     c00039f4 <follow_path+0x19>
c0003a00:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a07:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a0a:	77 3e                	ja     c0003a4a <follow_path+0x6f>
c0003a0c:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a10:	31 d2                	xor    edx,edx
c0003a12:	89 d8                	mov    eax,ebx
c0003a14:	e8 ff f8 ff ff       	call   c0003318 <dir_sdi>
c0003a19:	eb 4f                	jmp    c0003a6a <follow_path+0x8f>
c0003a1b:	89 d8                	mov    eax,ebx
c0003a1d:	e8 70 fe ff ff       	call   c0003892 <dir_find>
c0003a22:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a25:	85 c0                	test   eax,eax
c0003a27:	75 32                	jne    c0003a5b <follow_path+0x80>
c0003a29:	80 e2 04             	and    dl,0x4
c0003a2c:	75 3c                	jne    c0003a6a <follow_path+0x8f>
c0003a2e:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a32:	74 31                	je     c0003a65 <follow_path+0x8a>
c0003a34:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a37:	25 ff 01 00 00       	and    eax,0x1ff
c0003a3c:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a40:	8a 06                	mov    al,BYTE PTR [esi]
c0003a42:	e8 7c f7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003a47:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a4a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a4e:	89 d8                	mov    eax,ebx
c0003a50:	e8 7f ef ff ff       	call   c00029d4 <create_name>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	74 c2                	je     c0003a1b <follow_path+0x40>
c0003a59:	eb 0f                	jmp    c0003a6a <follow_path+0x8f>
c0003a5b:	83 f8 04             	cmp    eax,0x4
c0003a5e:	75 0a                	jne    c0003a6a <follow_path+0x8f>
c0003a60:	80 e2 04             	and    dl,0x4
c0003a63:	75 05                	jne    c0003a6a <follow_path+0x8f>
c0003a65:	b8 05 00 00 00       	mov    eax,0x5
c0003a6a:	83 c4 14             	add    esp,0x14
c0003a6d:	5b                   	pop    ebx
c0003a6e:	5e                   	pop    esi
c0003a6f:	c3                   	ret    

c0003a70 <dir_register>:
c0003a70:	55                   	push   ebp
c0003a71:	57                   	push   edi
c0003a72:	56                   	push   esi
c0003a73:	be 06 00 00 00       	mov    esi,0x6
c0003a78:	53                   	push   ebx
c0003a79:	83 ec 2c             	sub    esp,0x2c
c0003a7c:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003a7f:	80 e2 a0             	and    dl,0xa0
c0003a82:	0f 85 66 01 00 00    	jne    c0003bee <dir_register+0x17e>
c0003a88:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a8a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003a92:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003a95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003a99:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003a9e:	74 06                	je     c0003aa6 <dir_register+0x36>
c0003aa0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aa4:	eb ef                	jmp    c0003a95 <dir_register+0x25>
c0003aa6:	89 c3                	mov    ebx,eax
c0003aa8:	b9 0c 00 00 00       	mov    ecx,0xc
c0003aad:	8d 40 20             	lea    eax,[eax+0x20]
c0003ab0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003ab4:	89 c2                	mov    edx,eax
c0003ab6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003aba:	e8 44 e3 ff ff       	call   c0001e03 <mem_cpy>
c0003abf:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003ac4:	74 48                	je     c0003b0e <dir_register+0x9e>
c0003ac6:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003aca:	bd 01 00 00 00       	mov    ebp,0x1
c0003acf:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003ad2:	55                   	push   ebp
c0003ad3:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003ad7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003adb:	e8 86 e6 ff ff       	call   c0002166 <gen_numname>
c0003ae0:	58                   	pop    eax
c0003ae1:	89 d8                	mov    eax,ebx
c0003ae3:	e8 aa fd ff ff       	call   c0003892 <dir_find>
c0003ae8:	89 c6                	mov    esi,eax
c0003aea:	85 c0                	test   eax,eax
c0003aec:	75 10                	jne    c0003afe <dir_register+0x8e>
c0003aee:	45                   	inc    ebp
c0003aef:	83 fd 64             	cmp    ebp,0x64
c0003af2:	75 db                	jne    c0003acf <dir_register+0x5f>
c0003af4:	be 07 00 00 00       	mov    esi,0x7
c0003af9:	e9 f0 00 00 00       	jmp    c0003bee <dir_register+0x17e>
c0003afe:	83 f8 04             	cmp    eax,0x4
c0003b01:	0f 85 e7 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b07:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b0b:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b0e:	bd 01 00 00 00       	mov    ebp,0x1
c0003b13:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b18:	74 13                	je     c0003b2d <dir_register+0xbd>
c0003b1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1e:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b23:	83 c0 0c             	add    eax,0xc
c0003b26:	31 d2                	xor    edx,edx
c0003b28:	f7 f1                	div    ecx
c0003b2a:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b2d:	89 ea                	mov    edx,ebp
c0003b2f:	89 d8                	mov    eax,ebx
c0003b31:	e8 7c fb ff ff       	call   c00036b2 <dir_alloc>
c0003b36:	89 c6                	mov    esi,eax
c0003b38:	85 c0                	test   eax,eax
c0003b3a:	0f 85 ae 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b40:	4d                   	dec    ebp
c0003b41:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003b45:	74 67                	je     c0003bae <dir_register+0x13e>
c0003b47:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b4a:	89 e8                	mov    eax,ebp
c0003b4c:	c1 e0 05             	shl    eax,0x5
c0003b4f:	29 c2                	sub    edx,eax
c0003b51:	89 d8                	mov    eax,ebx
c0003b53:	e8 c0 f7 ff ff       	call   c0003318 <dir_sdi>
c0003b58:	89 c6                	mov    esi,eax
c0003b5a:	85 c0                	test   eax,eax
c0003b5c:	0f 85 8c 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b66:	e8 bd e6 ff ff       	call   c0002228 <sum_sfn>
c0003b6b:	0f b6 e8             	movzx  ebp,al
c0003b6e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003b71:	89 f8                	mov    eax,edi
c0003b73:	e8 c6 e7 ff ff       	call   c000233e <move_window>
c0003b78:	89 c6                	mov    esi,eax
c0003b7a:	85 c0                	test   eax,eax
c0003b7c:	75 70                	jne    c0003bee <dir_register+0x17e>
c0003b7e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003b83:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003b86:	83 ec 0c             	sub    esp,0xc
c0003b89:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003b8c:	55                   	push   ebp
c0003b8d:	e8 39 e5 ff ff       	call   c00020cb <put_lfn>
c0003b92:	31 d2                	xor    edx,edx
c0003b94:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003b98:	89 d8                	mov    eax,ebx
c0003b9a:	e8 0e fa ff ff       	call   c00035ad <dir_next>
c0003b9f:	83 c4 10             	add    esp,0x10
c0003ba2:	89 c6                	mov    esi,eax
c0003ba4:	85 c0                	test   eax,eax
c0003ba6:	75 46                	jne    c0003bee <dir_register+0x17e>
c0003ba8:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003bac:	75 c0                	jne    c0003b6e <dir_register+0xfe>
c0003bae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb1:	89 f8                	mov    eax,edi
c0003bb3:	e8 86 e7 ff ff       	call   c000233e <move_window>
c0003bb8:	89 c6                	mov    esi,eax
c0003bba:	85 c0                	test   eax,eax
c0003bbc:	75 30                	jne    c0003bee <dir_register+0x17e>
c0003bbe:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bc1:	b9 20 00 00 00       	mov    ecx,0x20
c0003bc6:	31 d2                	xor    edx,edx
c0003bc8:	e8 4b e2 ff ff       	call   c0001e18 <mem_set>
c0003bcd:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bd0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003bd4:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bd9:	e8 25 e2 ff ff       	call   c0001e03 <mem_cpy>
c0003bde:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003be1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003be4:	83 e0 18             	and    eax,0x18
c0003be7:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003bea:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003bee:	83 c4 2c             	add    esp,0x2c
c0003bf1:	89 f0                	mov    eax,esi
c0003bf3:	5b                   	pop    ebx
c0003bf4:	5e                   	pop    esi
c0003bf5:	5f                   	pop    edi
c0003bf6:	5d                   	pop    ebp
c0003bf7:	c3                   	ret    

c0003bf8 <f_mount>:
c0003bf8:	53                   	push   ebx
c0003bf9:	83 ec 18             	sub    esp,0x18
c0003bfc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c00:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c08:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c0c:	e8 37 e6 ff ff       	call   c0002248 <get_ldnumber>
c0003c11:	89 c2                	mov    edx,eax
c0003c13:	b8 0b 00 00 00       	mov    eax,0xb
c0003c18:	85 d2                	test   edx,edx
c0003c1a:	78 39                	js     c0003c55 <f_mount+0x5d>
c0003c1c:	8b 04 95 a0 54 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdab60]
c0003c23:	85 c0                	test   eax,eax
c0003c25:	74 03                	je     c0003c2a <f_mount+0x32>
c0003c27:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c2e:	85 c0                	test   eax,eax
c0003c30:	74 03                	je     c0003c35 <f_mount+0x3d>
c0003c32:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c39:	89 04 95 a0 54 02 c0 	mov    DWORD PTR [edx*4-0x3ffdab60],eax
c0003c40:	31 c0                	xor    eax,eax
c0003c42:	84 db                	test   bl,bl
c0003c44:	74 0f                	je     c0003c55 <f_mount+0x5d>
c0003c46:	31 c9                	xor    ecx,ecx
c0003c48:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c50:	e8 3c e8 ff ff       	call   c0002491 <mount_volume>
c0003c55:	83 c4 18             	add    esp,0x18
c0003c58:	5b                   	pop    ebx
c0003c59:	c3                   	ret    

c0003c5a <f_open>:
c0003c5a:	55                   	push   ebp
c0003c5b:	b8 09 00 00 00       	mov    eax,0x9
c0003c60:	57                   	push   edi
c0003c61:	56                   	push   esi
c0003c62:	53                   	push   ebx
c0003c63:	83 ec 5c             	sub    esp,0x5c
c0003c66:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003c6a:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003c6e:	85 db                	test   ebx,ebx
c0003c70:	0f 84 9f 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003c76:	89 fd                	mov    ebp,edi
c0003c78:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003c7c:	83 e5 3f             	and    ebp,0x3f
c0003c7f:	89 e8                	mov    eax,ebp
c0003c81:	89 ee                	mov    esi,ebp
c0003c83:	0f b6 c8             	movzx  ecx,al
c0003c86:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003c8a:	e8 02 e8 ff ff       	call   c0002491 <mount_volume>
c0003c8f:	85 c0                	test   eax,eax
c0003c91:	0f 85 78 02 00 00    	jne    c0003f0f <f_open+0x2b5>
c0003c97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c9b:	83 ec 0c             	sub    esp,0xc
c0003c9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ca2:	68 00 02 00 00       	push   0x200
c0003ca7:	e8 74 1f 00 00       	call   c0005c20 <ff_memalloc>
c0003cac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cb0:	83 c4 10             	add    esp,0x10
c0003cb3:	b8 11 00 00 00       	mov    eax,0x11
c0003cb8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003cbd:	0f 84 52 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003cc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003cc7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ccb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ccf:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003cd2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003cd6:	e8 00 fd ff ff       	call   c00039db <follow_path>
c0003cdb:	85 c0                	test   eax,eax
c0003cdd:	75 0c                	jne    c0003ceb <f_open+0x91>
c0003cdf:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ce4:	74 05                	je     c0003ceb <f_open+0x91>
c0003ce6:	b8 06 00 00 00       	mov    eax,0x6
c0003ceb:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003cf1:	0f 84 d5 00 00 00    	je     c0003dcc <f_open+0x172>
c0003cf7:	85 c0                	test   eax,eax
c0003cf9:	74 21                	je     c0003d1c <f_open+0xc2>
c0003cfb:	83 f8 04             	cmp    eax,0x4
c0003cfe:	0f 85 f0 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d04:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d08:	e8 63 fd ff ff       	call   c0003a70 <dir_register>
c0003d0d:	85 c0                	test   eax,eax
c0003d0f:	0f 85 df 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d15:	83 cd 08             	or     ebp,0x8
c0003d18:	89 ee                	mov    esi,ebp
c0003d1a:	eb 2c                	jmp    c0003d48 <f_open+0xee>
c0003d1c:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d20:	b8 07 00 00 00       	mov    eax,0x7
c0003d25:	80 e2 11             	and    dl,0x11
c0003d28:	0f 85 c6 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d2e:	b8 08 00 00 00       	mov    eax,0x8
c0003d33:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d39:	0f 85 b5 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d3f:	83 e7 08             	and    edi,0x8
c0003d42:	0f 84 b1 00 00 00    	je     c0003df9 <f_open+0x19f>
c0003d48:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d4c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d50:	89 ea                	mov    edx,ebp
c0003d52:	8a 00                	mov    al,BYTE PTR [eax]
c0003d54:	e8 6a f4 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003d59:	ba 00 00 21 50       	mov    edx,0x50210000
c0003d5e:	89 c7                	mov    edi,eax
c0003d60:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003d63:	e8 98 e0 ff ff       	call   c0001e00 <st_dword>
c0003d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d6c:	31 c9                	xor    ecx,ecx
c0003d6e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003d72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d76:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003d7a:	e8 6d f4 ff ff       	call   c00031ec <st_clust.isra.1>
c0003d7f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d83:	31 d2                	xor    edx,edx
c0003d85:	83 c0 1c             	add    eax,0x1c
c0003d88:	e8 73 e0 ff ff       	call   c0001e00 <st_dword>
c0003d8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d91:	85 ff                	test   edi,edi
c0003d93:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003d97:	74 60                	je     c0003df9 <f_open+0x19f>
c0003d99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d9d:	31 c9                	xor    ecx,ecx
c0003d9f:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003da2:	89 fa                	mov    edx,edi
c0003da4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003da8:	e8 72 f7 ff ff       	call   c000351f <remove_chain>
c0003dad:	85 c0                	test   eax,eax
c0003daf:	0f 85 3f 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003db5:	89 ea                	mov    edx,ebp
c0003db7:	4f                   	dec    edi
c0003db8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbc:	e8 7d e5 ff ff       	call   c000233e <move_window>
c0003dc1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003dc5:	85 c0                	test   eax,eax
c0003dc7:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003dca:	eb 27                	jmp    c0003df3 <f_open+0x199>
c0003dcc:	85 c0                	test   eax,eax
c0003dce:	0f 85 20 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003dd4:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003dd8:	b8 04 00 00 00       	mov    eax,0x4
c0003ddd:	f6 c2 10             	test   dl,0x10
c0003de0:	0f 85 0e 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003de6:	83 e7 02             	and    edi,0x2
c0003de9:	74 0e                	je     c0003df9 <f_open+0x19f>
c0003deb:	b8 07 00 00 00       	mov    eax,0x7
c0003df0:	80 e2 01             	and    dl,0x1
c0003df3:	0f 85 fb 00 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003df9:	f7 c6 08 00 00 00    	test   esi,0x8
c0003dff:	74 03                	je     c0003e04 <f_open+0x1aa>
c0003e01:	83 ce 40             	or     esi,0x40
c0003e04:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e08:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e0c:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e0f:	89 fa                	mov    edx,edi
c0003e11:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e14:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e17:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e1a:	e8 a4 f3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003e1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e22:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e25:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e28:	e8 b7 df ff ff       	call   c0001de4 <ld_dword>
c0003e2d:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e2f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e32:	31 d2                	xor    edx,edx
c0003e34:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e38:	b9 00 02 00 00       	mov    ecx,0x200
c0003e3d:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e41:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e45:	89 f0                	mov    eax,esi
c0003e47:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e4e:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e51:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e58:	89 f8                	mov    eax,edi
c0003e5a:	e8 b9 df ff ff       	call   c0001e18 <mem_set>
c0003e5f:	83 e6 20             	and    esi,0x20
c0003e62:	75 07                	jne    c0003e6b <f_open+0x211>
c0003e64:	31 c0                	xor    eax,eax
c0003e66:	e9 89 00 00 00       	jmp    c0003ef4 <f_open+0x29a>
c0003e6b:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0003e6e:	85 ed                	test   ebp,ebp
c0003e70:	74 f2                	je     c0003e64 <f_open+0x20a>
c0003e72:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c0003e75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e79:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003e7c:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003e80:	c1 e6 09             	shl    esi,0x9
c0003e83:	39 ee                	cmp    esi,ebp
c0003e85:	73 1c                	jae    c0003ea3 <f_open+0x249>
c0003e87:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003e89:	29 f5                	sub    ebp,esi
c0003e8b:	e8 84 f3 ff ff       	call   c0003214 <get_fat.isra.2>
c0003e90:	89 c2                	mov    edx,eax
c0003e92:	83 f8 01             	cmp    eax,0x1
c0003e95:	76 10                	jbe    c0003ea7 <f_open+0x24d>
c0003e97:	83 f8 ff             	cmp    eax,0xffffffff
c0003e9a:	75 e7                	jne    c0003e83 <f_open+0x229>
c0003e9c:	b8 01 00 00 00       	mov    eax,0x1
c0003ea1:	eb 09                	jmp    c0003eac <f_open+0x252>
c0003ea3:	31 c0                	xor    eax,eax
c0003ea5:	eb 05                	jmp    c0003eac <f_open+0x252>
c0003ea7:	b8 02 00 00 00       	mov    eax,0x2
c0003eac:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003eaf:	85 c0                	test   eax,eax
c0003eb1:	75 41                	jne    c0003ef4 <f_open+0x29a>
c0003eb3:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c0003eb9:	74 a9                	je     c0003e64 <f_open+0x20a>
c0003ebb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003ebf:	89 f0                	mov    eax,esi
c0003ec1:	e8 68 e1 ff ff       	call   c000202e <clst2sect>
c0003ec6:	89 c2                	mov    edx,eax
c0003ec8:	b8 02 00 00 00       	mov    eax,0x2
c0003ecd:	85 d2                	test   edx,edx
c0003ecf:	74 23                	je     c0003ef4 <f_open+0x29a>
c0003ed1:	c1 ed 09             	shr    ebp,0x9
c0003ed4:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c0003ed8:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003edb:	6a 01                	push   0x1
c0003edd:	50                   	push   eax
c0003ede:	57                   	push   edi
c0003edf:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003ee3:	50                   	push   eax
c0003ee4:	e8 a3 de ff ff       	call   c0001d8c <disk_read>
c0003ee9:	83 c4 10             	add    esp,0x10
c0003eec:	85 c0                	test   eax,eax
c0003eee:	0f 95 c0             	setne  al
c0003ef1:	0f b6 c0             	movzx  eax,al
c0003ef4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003ef8:	83 ec 0c             	sub    esp,0xc
c0003efb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003eff:	e8 34 1d 00 00       	call   c0005c38 <ff_memfree>
c0003f04:	83 c4 10             	add    esp,0x10
c0003f07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f0b:	85 c0                	test   eax,eax
c0003f0d:	74 06                	je     c0003f15 <f_open+0x2bb>
c0003f0f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f15:	83 c4 5c             	add    esp,0x5c
c0003f18:	5b                   	pop    ebx
c0003f19:	5e                   	pop    esi
c0003f1a:	5f                   	pop    edi
c0003f1b:	5d                   	pop    ebp
c0003f1c:	c3                   	ret    

c0003f1d <f_read>:
c0003f1d:	55                   	push   ebp
c0003f1e:	57                   	push   edi
c0003f1f:	56                   	push   esi
c0003f20:	53                   	push   ebx
c0003f21:	83 ec 2c             	sub    esp,0x2c
c0003f24:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f28:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f2c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f32:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003f36:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f3a:	89 d8                	mov    eax,ebx
c0003f3c:	e8 54 e3 ff ff       	call   c0002295 <validate>
c0003f41:	89 c5                	mov    ebp,eax
c0003f43:	85 c0                	test   eax,eax
c0003f45:	0f 85 c7 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f4b:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003f4f:	85 ed                	test   ebp,ebp
c0003f51:	0f 85 bb 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f57:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003f5b:	0f 84 ac 01 00 00    	je     c000410d <f_read+0x1f0>
c0003f61:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003f64:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003f67:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f6b:	39 f0                	cmp    eax,esi
c0003f6d:	0f 86 b0 00 00 00    	jbe    c0004023 <f_read+0x106>
c0003f73:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0003f77:	e9 a7 00 00 00       	jmp    c0004023 <f_read+0x106>
c0003f7c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003f7f:	a9 ff 01 00 00       	test   eax,0x1ff
c0003f84:	0f 85 56 01 00 00    	jne    c00040e0 <f_read+0x1c3>
c0003f8a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003f8e:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c0003f92:	89 c2                	mov    edx,eax
c0003f94:	4f                   	dec    edi
c0003f95:	c1 ea 09             	shr    edx,0x9
c0003f98:	21 d7                	and    edi,edx
c0003f9a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0003f9e:	0f 84 8f 00 00 00    	je     c0004033 <f_read+0x116>
c0003fa4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003fa8:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003fab:	89 c8                	mov    eax,ecx
c0003fad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003fb1:	e8 78 e0 ff ff       	call   c000202e <clst2sect>
c0003fb6:	85 c0                	test   eax,eax
c0003fb8:	0f 84 8d 00 00 00    	je     c000404b <f_read+0x12e>
c0003fbe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003fc2:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c0003fca:	8d 3c 01             	lea    edi,[ecx+eax*1]
c0003fcd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003fd1:	0f 86 bf 00 00 00    	jbe    c0004096 <f_read+0x179>
c0003fd7:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003fdb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003fdf:	c1 ee 09             	shr    esi,0x9
c0003fe2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fe6:	01 f2                	add    edx,esi
c0003fe8:	39 c2                	cmp    edx,eax
c0003fea:	76 06                	jbe    c0003ff2 <f_read+0xd5>
c0003fec:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ff0:	89 c6                	mov    esi,eax
c0003ff2:	56                   	push   esi
c0003ff3:	57                   	push   edi
c0003ff4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ff8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ffc:	50                   	push   eax
c0003ffd:	e8 8a dd ff ff       	call   c0001d8c <disk_read>
c0004002:	83 c4 10             	add    esp,0x10
c0004005:	85 c0                	test   eax,eax
c0004007:	75 55                	jne    c000405e <f_read+0x141>
c0004009:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000400d:	75 65                	jne    c0004074 <f_read+0x157>
c000400f:	c1 e6 09             	shl    esi,0x9
c0004012:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004016:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c000401a:	01 30                	add    DWORD PTR [eax],esi
c000401c:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004020:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004023:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004028:	0f 85 4e ff ff ff    	jne    c0003f7c <f_read+0x5f>
c000402e:	e9 df 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004033:	85 c0                	test   eax,eax
c0004035:	75 05                	jne    c000403c <f_read+0x11f>
c0004037:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000403a:	eb 0a                	jmp    c0004046 <f_read+0x129>
c000403c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000403f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004041:	e8 ce f1 ff ff       	call   c0003214 <get_fat.isra.2>
c0004046:	83 f8 01             	cmp    eax,0x1
c0004049:	77 0e                	ja     c0004059 <f_read+0x13c>
c000404b:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000404f:	bd 02 00 00 00       	mov    ebp,0x2
c0004054:	e9 b9 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004059:	83 f8 ff             	cmp    eax,0xffffffff
c000405c:	75 0e                	jne    c000406c <f_read+0x14f>
c000405e:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004062:	bd 01 00 00 00       	mov    ebp,0x1
c0004067:	e9 a6 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c000406c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000406f:	e9 30 ff ff ff       	jmp    c0003fa4 <f_read+0x87>
c0004074:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004077:	29 f8                	sub    eax,edi
c0004079:	39 f0                	cmp    eax,esi
c000407b:	73 92                	jae    c000400f <f_read+0xf2>
c000407d:	c1 e0 09             	shl    eax,0x9
c0004080:	8d 53 28             	lea    edx,[ebx+0x28]
c0004083:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004087:	b9 00 02 00 00       	mov    ecx,0x200
c000408c:	e8 72 dd ff ff       	call   c0001e03 <mem_cpy>
c0004091:	e9 79 ff ff ff       	jmp    c000400f <f_read+0xf2>
c0004096:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004099:	39 f8                	cmp    eax,edi
c000409b:	74 40                	je     c00040dd <f_read+0x1c0>
c000409d:	8d 73 28             	lea    esi,[ebx+0x28]
c00040a0:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040a4:	74 1e                	je     c00040c4 <f_read+0x1a7>
c00040a6:	6a 01                	push   0x1
c00040a8:	50                   	push   eax
c00040a9:	56                   	push   esi
c00040aa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040ae:	50                   	push   eax
c00040af:	e8 ee dc ff ff       	call   c0001da2 <disk_write>
c00040b4:	83 c4 10             	add    esp,0x10
c00040b7:	85 c0                	test   eax,eax
c00040b9:	75 a3                	jne    c000405e <f_read+0x141>
c00040bb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040be:	83 e0 7f             	and    eax,0x7f
c00040c1:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040c4:	6a 01                	push   0x1
c00040c6:	57                   	push   edi
c00040c7:	56                   	push   esi
c00040c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040cc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040d0:	50                   	push   eax
c00040d1:	e8 b6 dc ff ff       	call   c0001d8c <disk_read>
c00040d6:	83 c4 10             	add    esp,0x10
c00040d9:	85 c0                	test   eax,eax
c00040db:	75 81                	jne    c000405e <f_read+0x141>
c00040dd:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00040e0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040e3:	ba 00 02 00 00       	mov    edx,0x200
c00040e8:	25 ff 01 00 00       	and    eax,0x1ff
c00040ed:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00040f1:	29 c2                	sub    edx,eax
c00040f3:	39 d6                	cmp    esi,edx
c00040f5:	76 02                	jbe    c00040f9 <f_read+0x1dc>
c00040f7:	89 d6                	mov    esi,edx
c00040f9:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00040fd:	89 f1                	mov    ecx,esi
c00040ff:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004103:	e8 fb dc ff ff       	call   c0001e03 <mem_cpy>
c0004108:	e9 05 ff ff ff       	jmp    c0004012 <f_read+0xf5>
c000410d:	bd 07 00 00 00       	mov    ebp,0x7
c0004112:	83 c4 2c             	add    esp,0x2c
c0004115:	89 e8                	mov    eax,ebp
c0004117:	5b                   	pop    ebx
c0004118:	5e                   	pop    esi
c0004119:	5f                   	pop    edi
c000411a:	5d                   	pop    ebp
c000411b:	c3                   	ret    

c000411c <f_write>:
c000411c:	55                   	push   ebp
c000411d:	57                   	push   edi
c000411e:	56                   	push   esi
c000411f:	53                   	push   ebx
c0004120:	83 ec 2c             	sub    esp,0x2c
c0004123:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004127:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000412b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004131:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004135:	89 d8                	mov    eax,ebx
c0004137:	e8 59 e1 ff ff       	call   c0002295 <validate>
c000413c:	89 c5                	mov    ebp,eax
c000413e:	85 c0                	test   eax,eax
c0004140:	0f 85 14 02 00 00    	jne    c000435a <f_write+0x23e>
c0004146:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c000414a:	85 ed                	test   ebp,ebp
c000414c:	0f 85 08 02 00 00    	jne    c000435a <f_write+0x23e>
c0004152:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004156:	0f 84 f9 01 00 00    	je     c0004355 <f_write+0x239>
c000415c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000415f:	89 c7                	mov    edi,eax
c0004161:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004165:	0f 83 ef 00 00 00    	jae    c000425a <f_write+0x13e>
c000416b:	f7 d0                	not    eax
c000416d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004171:	e9 e4 00 00 00       	jmp    c000425a <f_write+0x13e>
c0004176:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004179:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000417f:	0f 85 9a 01 00 00    	jne    c000431f <f_write+0x203>
c0004185:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004189:	89 d1                	mov    ecx,edx
c000418b:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000418f:	c1 e9 09             	shr    ecx,0x9
c0004192:	48                   	dec    eax
c0004193:	21 c8                	and    eax,ecx
c0004195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004199:	0f 84 c8 00 00 00    	je     c0004267 <f_write+0x14b>
c000419f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041a3:	0f 85 22 01 00 00    	jne    c00042cb <f_write+0x1af>
c00041a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041ad:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041b0:	89 c8                	mov    eax,ecx
c00041b2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041b6:	e8 73 de ff ff       	call   c000202e <clst2sect>
c00041bb:	85 c0                	test   eax,eax
c00041bd:	0f 84 d2 00 00 00    	je     c0004295 <f_write+0x179>
c00041c3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00041c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041cb:	01 c7                	add    edi,eax
c00041cd:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041d5:	0f 86 1c 01 00 00    	jbe    c00042f7 <f_write+0x1db>
c00041db:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041df:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00041e3:	c1 ee 09             	shr    esi,0x9
c00041e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00041ea:	01 f2                	add    edx,esi
c00041ec:	39 c2                	cmp    edx,eax
c00041ee:	76 06                	jbe    c00041f6 <f_write+0xda>
c00041f0:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041f4:	89 c6                	mov    esi,eax
c00041f6:	56                   	push   esi
c00041f7:	57                   	push   edi
c00041f8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041fc:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004200:	50                   	push   eax
c0004201:	e8 9c db ff ff       	call   c0001da2 <disk_write>
c0004206:	83 c4 10             	add    esp,0x10
c0004209:	85 c0                	test   eax,eax
c000420b:	0f 85 97 00 00 00    	jne    c00042a8 <f_write+0x18c>
c0004211:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004214:	29 fa                	sub    edx,edi
c0004216:	39 f2                	cmp    edx,esi
c0004218:	73 1d                	jae    c0004237 <f_write+0x11b>
c000421a:	8d 43 28             	lea    eax,[ebx+0x28]
c000421d:	c1 e2 09             	shl    edx,0x9
c0004220:	b9 00 02 00 00       	mov    ecx,0x200
c0004225:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004229:	e8 d5 db ff ff       	call   c0001e03 <mem_cpy>
c000422e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004231:	83 e0 7f             	and    eax,0x7f
c0004234:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004237:	c1 e6 09             	shl    esi,0x9
c000423a:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000423e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004242:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004246:	01 30                	add    DWORD PTR [eax],esi
c0004248:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000424b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000424e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004251:	39 f0                	cmp    eax,esi
c0004253:	73 02                	jae    c0004257 <f_write+0x13b>
c0004255:	89 f0                	mov    eax,esi
c0004257:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000425a:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000425f:	0f 85 11 ff ff ff    	jne    c0004176 <f_write+0x5a>
c0004265:	eb 1b                	jmp    c0004282 <f_write+0x166>
c0004267:	85 d2                	test   edx,edx
c0004269:	75 09                	jne    c0004274 <f_write+0x158>
c000426b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000426e:	85 c0                	test   eax,eax
c0004270:	75 1e                	jne    c0004290 <f_write+0x174>
c0004272:	eb 03                	jmp    c0004277 <f_write+0x15b>
c0004274:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004277:	89 d8                	mov    eax,ebx
c0004279:	e8 62 f1 ff ff       	call   c00033e0 <create_chain>
c000427e:	85 c0                	test   eax,eax
c0004280:	75 0e                	jne    c0004290 <f_write+0x174>
c0004282:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004285:	83 c8 40             	or     eax,0x40
c0004288:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000428b:	e9 ca 00 00 00       	jmp    c000435a <f_write+0x23e>
c0004290:	83 f8 01             	cmp    eax,0x1
c0004293:	75 0e                	jne    c00042a3 <f_write+0x187>
c0004295:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004299:	bd 02 00 00 00       	mov    ebp,0x2
c000429e:	e9 b7 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042a3:	83 f8 ff             	cmp    eax,0xffffffff
c00042a6:	75 0e                	jne    c00042b6 <f_write+0x19a>
c00042a8:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042ac:	bd 01 00 00 00       	mov    ebp,0x1
c00042b1:	e9 a4 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042b6:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042b9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042bd:	0f 85 dc fe ff ff    	jne    c000419f <f_write+0x83>
c00042c3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042c6:	e9 d4 fe ff ff       	jmp    c000419f <f_write+0x83>
c00042cb:	6a 01                	push   0x1
c00042cd:	8d 43 28             	lea    eax,[ebx+0x28]
c00042d0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042d3:	50                   	push   eax
c00042d4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042dc:	50                   	push   eax
c00042dd:	e8 c0 da ff ff       	call   c0001da2 <disk_write>
c00042e2:	83 c4 10             	add    esp,0x10
c00042e5:	85 c0                	test   eax,eax
c00042e7:	75 bf                	jne    c00042a8 <f_write+0x18c>
c00042e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ec:	83 e0 7f             	and    eax,0x7f
c00042ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042f2:	e9 b2 fe ff ff       	jmp    c00041a9 <f_write+0x8d>
c00042f7:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00042fa:	74 20                	je     c000431c <f_write+0x200>
c00042fc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042ff:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0004302:	76 18                	jbe    c000431c <f_write+0x200>
c0004304:	6a 01                	push   0x1
c0004306:	8d 43 28             	lea    eax,[ebx+0x28]
c0004309:	57                   	push   edi
c000430a:	50                   	push   eax
c000430b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000430f:	50                   	push   eax
c0004310:	e8 77 da ff ff       	call   c0001d8c <disk_read>
c0004315:	83 c4 10             	add    esp,0x10
c0004318:	85 c0                	test   eax,eax
c000431a:	75 8c                	jne    c00042a8 <f_write+0x18c>
c000431c:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c000431f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004322:	ba 00 02 00 00       	mov    edx,0x200
c0004327:	25 ff 01 00 00       	and    eax,0x1ff
c000432c:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004330:	29 c2                	sub    edx,eax
c0004332:	39 d6                	cmp    esi,edx
c0004334:	76 02                	jbe    c0004338 <f_write+0x21c>
c0004336:	89 d6                	mov    esi,edx
c0004338:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c000433c:	89 f1                	mov    ecx,esi
c000433e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004342:	e8 bc da ff ff       	call   c0001e03 <mem_cpy>
c0004347:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000434a:	83 c8 80             	or     eax,0xffffff80
c000434d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004350:	e9 e5 fe ff ff       	jmp    c000423a <f_write+0x11e>
c0004355:	bd 07 00 00 00       	mov    ebp,0x7
c000435a:	83 c4 2c             	add    esp,0x2c
c000435d:	89 e8                	mov    eax,ebp
c000435f:	5b                   	pop    ebx
c0004360:	5e                   	pop    esi
c0004361:	5f                   	pop    edi
c0004362:	5d                   	pop    ebp
c0004363:	c3                   	ret    

c0004364 <f_sync>:
c0004364:	56                   	push   esi
c0004365:	53                   	push   ebx
c0004366:	83 ec 14             	sub    esp,0x14
c0004369:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000436d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004371:	89 d8                	mov    eax,ebx
c0004373:	e8 1d df ff ff       	call   c0002295 <validate>
c0004378:	85 c0                	test   eax,eax
c000437a:	0f 85 a3 00 00 00    	jne    c0004423 <f_sync+0xbf>
c0004380:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004383:	f6 c2 40             	test   dl,0x40
c0004386:	0f 84 97 00 00 00    	je     c0004423 <f_sync+0xbf>
c000438c:	80 e2 80             	and    dl,0x80
c000438f:	74 2e                	je     c00043bf <f_sync+0x5b>
c0004391:	6a 01                	push   0x1
c0004393:	8d 43 28             	lea    eax,[ebx+0x28]
c0004396:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004399:	50                   	push   eax
c000439a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000439e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043a2:	50                   	push   eax
c00043a3:	e8 fa d9 ff ff       	call   c0001da2 <disk_write>
c00043a8:	83 c4 10             	add    esp,0x10
c00043ab:	89 c2                	mov    edx,eax
c00043ad:	b8 01 00 00 00       	mov    eax,0x1
c00043b2:	85 d2                	test   edx,edx
c00043b4:	75 6d                	jne    c0004423 <f_sync+0xbf>
c00043b6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043b9:	83 e0 7f             	and    eax,0x7f
c00043bc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043bf:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043c6:	e8 73 df ff ff       	call   c000233e <move_window>
c00043cb:	85 c0                	test   eax,eax
c00043cd:	75 54                	jne    c0004423 <f_sync+0xbf>
c00043cf:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043d2:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043d5:	89 f2                	mov    edx,esi
c00043d7:	83 c8 20             	or     eax,0x20
c00043da:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00043dd:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00043e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043e2:	e8 05 ee ff ff       	call   c00031ec <st_clust.isra.1>
c00043e7:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043ea:	8d 46 1c             	lea    eax,[esi+0x1c]
c00043ed:	e8 0e da ff ff       	call   c0001e00 <st_dword>
c00043f2:	8d 46 16             	lea    eax,[esi+0x16]
c00043f5:	ba 00 00 21 50       	mov    edx,0x50210000
c00043fa:	e8 01 da ff ff       	call   c0001e00 <st_dword>
c00043ff:	31 d2                	xor    edx,edx
c0004401:	8d 46 12             	lea    eax,[esi+0x12]
c0004404:	e8 f3 d9 ff ff       	call   c0001dfc <st_word>
c0004409:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000440d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004411:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004415:	e8 5b e9 ff ff       	call   c0002d75 <sync_fs>
c000441a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000441d:	83 e2 bf             	and    edx,0xffffffbf
c0004420:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004423:	83 c4 14             	add    esp,0x14
c0004426:	5b                   	pop    ebx
c0004427:	5e                   	pop    esi
c0004428:	c3                   	ret    

c0004429 <f_close>:
c0004429:	53                   	push   ebx
c000442a:	83 ec 24             	sub    esp,0x24
c000442d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004431:	53                   	push   ebx
c0004432:	e8 2d ff ff ff       	call   c0004364 <f_sync>
c0004437:	83 c4 10             	add    esp,0x10
c000443a:	85 c0                	test   eax,eax
c000443c:	75 15                	jne    c0004453 <f_close+0x2a>
c000443e:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004442:	89 d8                	mov    eax,ebx
c0004444:	e8 4c de ff ff       	call   c0002295 <validate>
c0004449:	85 c0                	test   eax,eax
c000444b:	75 06                	jne    c0004453 <f_close+0x2a>
c000444d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004453:	83 c4 18             	add    esp,0x18
c0004456:	5b                   	pop    ebx
c0004457:	c3                   	ret    

c0004458 <f_lseek>:
c0004458:	55                   	push   ebp
c0004459:	57                   	push   edi
c000445a:	56                   	push   esi
c000445b:	53                   	push   ebx
c000445c:	83 ec 2c             	sub    esp,0x2c
c000445f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004463:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004467:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000446b:	89 d8                	mov    eax,ebx
c000446d:	e8 23 de ff ff       	call   c0002295 <validate>
c0004472:	89 c5                	mov    ebp,eax
c0004474:	85 c0                	test   eax,eax
c0004476:	0f 85 83 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c000447c:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004480:	85 ed                	test   ebp,ebp
c0004482:	0f 85 77 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c0004488:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000448b:	39 f0                	cmp    eax,esi
c000448d:	73 08                	jae    c0004497 <f_lseek+0x3f>
c000448f:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004493:	75 02                	jne    c0004497 <f_lseek+0x3f>
c0004495:	89 c6                	mov    esi,eax
c0004497:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000449a:	85 f6                	test   esi,esi
c000449c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044a3:	75 07                	jne    c00044ac <f_lseek+0x54>
c00044a5:	31 f6                	xor    esi,esi
c00044a7:	e9 e2 00 00 00       	jmp    c000458e <f_lseek+0x136>
c00044ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044b0:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044b4:	c1 e7 09             	shl    edi,0x9
c00044b7:	85 c9                	test   ecx,ecx
c00044b9:	74 28                	je     c00044e3 <f_lseek+0x8b>
c00044bb:	49                   	dec    ecx
c00044bc:	31 d2                	xor    edx,edx
c00044be:	8d 46 ff             	lea    eax,[esi-0x1]
c00044c1:	f7 f7                	div    edi
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044c9:	89 c8                	mov    eax,ecx
c00044cb:	f7 f7                	div    edi
c00044cd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044d1:	72 10                	jb     c00044e3 <f_lseek+0x8b>
c00044d3:	89 f8                	mov    eax,edi
c00044d5:	f7 d8                	neg    eax
c00044d7:	21 c1                	and    ecx,eax
c00044d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00044dc:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00044df:	29 ce                	sub    esi,ecx
c00044e1:	eb 3c                	jmp    c000451f <f_lseek+0xc7>
c00044e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00044e6:	85 c0                	test   eax,eax
c00044e8:	75 32                	jne    c000451c <f_lseek+0xc4>
c00044ea:	31 d2                	xor    edx,edx
c00044ec:	89 d8                	mov    eax,ebx
c00044ee:	e8 ed ee ff ff       	call   c00033e0 <create_chain>
c00044f3:	83 f8 01             	cmp    eax,0x1
c00044f6:	75 0e                	jne    c0004506 <f_lseek+0xae>
c00044f8:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00044fc:	bd 02 00 00 00       	mov    ebp,0x2
c0004501:	e9 f9 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004506:	83 f8 ff             	cmp    eax,0xffffffff
c0004509:	75 0e                	jne    c0004519 <f_lseek+0xc1>
c000450b:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000450f:	bd 01 00 00 00       	mov    ebp,0x1
c0004514:	e9 e6 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004519:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000451c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000451f:	85 c0                	test   eax,eax
c0004521:	74 82                	je     c00044a5 <f_lseek+0x4d>
c0004523:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004526:	39 fe                	cmp    esi,edi
c0004528:	76 3d                	jbe    c0004567 <f_lseek+0x10f>
c000452a:	01 fa                	add    edx,edi
c000452c:	29 fe                	sub    esi,edi
c000452e:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c0004531:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004535:	89 c2                	mov    edx,eax
c0004537:	74 0d                	je     c0004546 <f_lseek+0xee>
c0004539:	89 d8                	mov    eax,ebx
c000453b:	e8 a0 ee ff ff       	call   c00033e0 <create_chain>
c0004540:	85 c0                	test   eax,eax
c0004542:	75 09                	jne    c000454d <f_lseek+0xf5>
c0004544:	eb 1f                	jmp    c0004565 <f_lseek+0x10d>
c0004546:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004548:	e8 c7 ec ff ff       	call   c0003214 <get_fat.isra.2>
c000454d:	83 f8 ff             	cmp    eax,0xffffffff
c0004550:	74 b9                	je     c000450b <f_lseek+0xb3>
c0004552:	83 f8 01             	cmp    eax,0x1
c0004555:	76 a1                	jbe    c00044f8 <f_lseek+0xa0>
c0004557:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000455b:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c000455e:	76 98                	jbe    c00044f8 <f_lseek+0xa0>
c0004560:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004563:	eb be                	jmp    c0004523 <f_lseek+0xcb>
c0004565:	31 f6                	xor    esi,esi
c0004567:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000456a:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004570:	0f 84 2f ff ff ff    	je     c00044a5 <f_lseek+0x4d>
c0004576:	89 c2                	mov    edx,eax
c0004578:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000457c:	e8 ad da ff ff       	call   c000202e <clst2sect>
c0004581:	85 c0                	test   eax,eax
c0004583:	0f 84 6f ff ff ff    	je     c00044f8 <f_lseek+0xa0>
c0004589:	c1 ee 09             	shr    esi,0x9
c000458c:	01 c6                	add    esi,eax
c000458e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004591:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004594:	76 0c                	jbe    c00045a2 <f_lseek+0x14a>
c0004596:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004599:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000459c:	83 ca 40             	or     edx,0x40
c000459f:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045a2:	a9 ff 01 00 00       	test   eax,0x1ff
c00045a7:	74 56                	je     c00045ff <f_lseek+0x1a7>
c00045a9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045ac:	39 f0                	cmp    eax,esi
c00045ae:	74 4f                	je     c00045ff <f_lseek+0x1a7>
c00045b0:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045b3:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045b7:	74 26                	je     c00045df <f_lseek+0x187>
c00045b9:	6a 01                	push   0x1
c00045bb:	50                   	push   eax
c00045bc:	57                   	push   edi
c00045bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045c5:	50                   	push   eax
c00045c6:	e8 d7 d7 ff ff       	call   c0001da2 <disk_write>
c00045cb:	83 c4 10             	add    esp,0x10
c00045ce:	85 c0                	test   eax,eax
c00045d0:	0f 85 35 ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045d6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045d9:	83 e0 7f             	and    eax,0x7f
c00045dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045df:	6a 01                	push   0x1
c00045e1:	56                   	push   esi
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 9b d7 ff ff       	call   c0001d8c <disk_read>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 0f ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045fc:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00045ff:	83 c4 2c             	add    esp,0x2c
c0004602:	89 e8                	mov    eax,ebp
c0004604:	5b                   	pop    ebx
c0004605:	5e                   	pop    esi
c0004606:	5f                   	pop    edi
c0004607:	5d                   	pop    ebp
c0004608:	c3                   	ret    

c0004609 <f_opendir>:
c0004609:	56                   	push   esi
c000460a:	b8 09 00 00 00       	mov    eax,0x9
c000460f:	53                   	push   ebx
c0004610:	83 ec 24             	sub    esp,0x24
c0004613:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004617:	85 db                	test   ebx,ebx
c0004619:	0f 84 af 00 00 00    	je     c00046ce <f_opendir+0xc5>
c000461f:	31 c9                	xor    ecx,ecx
c0004621:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004625:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004629:	e8 63 de ff ff       	call   c0002491 <mount_volume>
c000462e:	85 c0                	test   eax,eax
c0004630:	0f 85 92 00 00 00    	jne    c00046c8 <f_opendir+0xbf>
c0004636:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000463a:	83 ec 0c             	sub    esp,0xc
c000463d:	89 03                	mov    DWORD PTR [ebx],eax
c000463f:	68 00 02 00 00       	push   0x200
c0004644:	e8 d7 15 00 00       	call   c0005c20 <ff_memalloc>
c0004649:	83 c4 10             	add    esp,0x10
c000464c:	89 c6                	mov    esi,eax
c000464e:	b8 11 00 00 00       	mov    eax,0x11
c0004653:	85 f6                	test   esi,esi
c0004655:	74 77                	je     c00046ce <f_opendir+0xc5>
c0004657:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000465b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000465f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004662:	89 d8                	mov    eax,ebx
c0004664:	e8 72 f3 ff ff       	call   c00039db <follow_path>
c0004669:	85 c0                	test   eax,eax
c000466b:	75 37                	jne    c00046a4 <f_opendir+0x9b>
c000466d:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004671:	75 1c                	jne    c000468f <f_opendir+0x86>
c0004673:	b8 05 00 00 00       	mov    eax,0x5
c0004678:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000467c:	74 26                	je     c00046a4 <f_opendir+0x9b>
c000467e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004681:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004685:	8a 00                	mov    al,BYTE PTR [eax]
c0004687:	e8 37 eb ff ff       	call   c00031c3 <ld_clust.isra.0>
c000468c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000468f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004693:	31 d2                	xor    edx,edx
c0004695:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004699:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000469d:	89 d8                	mov    eax,ebx
c000469f:	e8 74 ec ff ff       	call   c0003318 <dir_sdi>
c00046a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046a8:	83 ec 0c             	sub    esp,0xc
c00046ab:	56                   	push   esi
c00046ac:	e8 87 15 00 00       	call   c0005c38 <ff_memfree>
c00046b1:	83 c4 10             	add    esp,0x10
c00046b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046b8:	83 f8 04             	cmp    eax,0x4
c00046bb:	74 06                	je     c00046c3 <f_opendir+0xba>
c00046bd:	85 c0                	test   eax,eax
c00046bf:	74 0d                	je     c00046ce <f_opendir+0xc5>
c00046c1:	eb 05                	jmp    c00046c8 <f_opendir+0xbf>
c00046c3:	b8 05 00 00 00       	mov    eax,0x5
c00046c8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046ce:	83 c4 24             	add    esp,0x24
c00046d1:	5b                   	pop    ebx
c00046d2:	5e                   	pop    esi
c00046d3:	c3                   	ret    

c00046d4 <f_closedir>:
c00046d4:	53                   	push   ebx
c00046d5:	83 ec 18             	sub    esp,0x18
c00046d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00046dc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00046e0:	89 d8                	mov    eax,ebx
c00046e2:	e8 ae db ff ff       	call   c0002295 <validate>
c00046e7:	85 c0                	test   eax,eax
c00046e9:	75 06                	jne    c00046f1 <f_closedir+0x1d>
c00046eb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f1:	83 c4 18             	add    esp,0x18
c00046f4:	5b                   	pop    ebx
c00046f5:	c3                   	ret    

c00046f6 <f_readdir>:
c00046f6:	57                   	push   edi
c00046f7:	56                   	push   esi
c00046f8:	53                   	push   ebx
c00046f9:	83 ec 20             	sub    esp,0x20
c00046fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004700:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0004704:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004708:	89 d8                	mov    eax,ebx
c000470a:	e8 86 db ff ff       	call   c0002295 <validate>
c000470f:	85 c0                	test   eax,eax
c0004711:	75 6e                	jne    c0004781 <f_readdir+0x8b>
c0004713:	85 ff                	test   edi,edi
c0004715:	75 0b                	jne    c0004722 <f_readdir+0x2c>
c0004717:	31 d2                	xor    edx,edx
c0004719:	89 d8                	mov    eax,ebx
c000471b:	e8 f8 eb ff ff       	call   c0003318 <dir_sdi>
c0004720:	eb 5f                	jmp    c0004781 <f_readdir+0x8b>
c0004722:	83 ec 0c             	sub    esp,0xc
c0004725:	68 00 02 00 00       	push   0x200
c000472a:	e8 f1 14 00 00       	call   c0005c20 <ff_memalloc>
c000472f:	83 c4 10             	add    esp,0x10
c0004732:	89 c6                	mov    esi,eax
c0004734:	b8 11 00 00 00       	mov    eax,0x11
c0004739:	85 f6                	test   esi,esi
c000473b:	74 44                	je     c0004781 <f_readdir+0x8b>
c000473d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004741:	31 d2                	xor    edx,edx
c0004743:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004746:	89 d8                	mov    eax,ebx
c0004748:	e8 ca ef ff ff       	call   c0003717 <dir_read>
c000474d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004752:	75 19                	jne    c000476d <f_readdir+0x77>
c0004754:	89 fa                	mov    edx,edi
c0004756:	89 d8                	mov    eax,ebx
c0004758:	e8 70 e8 ff ff       	call   c0002fcd <get_fileinfo>
c000475d:	31 d2                	xor    edx,edx
c000475f:	89 d8                	mov    eax,ebx
c0004761:	e8 47 ee ff ff       	call   c00035ad <dir_next>
c0004766:	83 f8 04             	cmp    eax,0x4
c0004769:	75 02                	jne    c000476d <f_readdir+0x77>
c000476b:	31 c0                	xor    eax,eax
c000476d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004771:	83 ec 0c             	sub    esp,0xc
c0004774:	56                   	push   esi
c0004775:	e8 be 14 00 00       	call   c0005c38 <ff_memfree>
c000477a:	83 c4 10             	add    esp,0x10
c000477d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004781:	83 c4 20             	add    esp,0x20
c0004784:	5b                   	pop    ebx
c0004785:	5e                   	pop    esi
c0004786:	5f                   	pop    edi
c0004787:	c3                   	ret    

c0004788 <f_stat>:
c0004788:	57                   	push   edi
c0004789:	31 c9                	xor    ecx,ecx
c000478b:	56                   	push   esi
c000478c:	53                   	push   ebx
c000478d:	83 ec 30             	sub    esp,0x30
c0004790:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004794:	89 e2                	mov    edx,esp
c0004796:	8d 44 24 40          	lea    eax,[esp+0x40]
c000479a:	e8 f2 dc ff ff       	call   c0002491 <mount_volume>
c000479f:	89 c3                	mov    ebx,eax
c00047a1:	85 c0                	test   eax,eax
c00047a3:	75 59                	jne    c00047fe <f_stat+0x76>
c00047a5:	83 ec 0c             	sub    esp,0xc
c00047a8:	bb 11 00 00 00       	mov    ebx,0x11
c00047ad:	68 00 02 00 00       	push   0x200
c00047b2:	e8 69 14 00 00       	call   c0005c20 <ff_memalloc>
c00047b7:	83 c4 10             	add    esp,0x10
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	74 3e                	je     c00047fe <f_stat+0x76>
c00047c0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047c3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047c7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047ca:	89 e0                	mov    eax,esp
c00047cc:	e8 0a f2 ff ff       	call   c00039db <follow_path>
c00047d1:	89 c3                	mov    ebx,eax
c00047d3:	85 c0                	test   eax,eax
c00047d5:	75 1b                	jne    c00047f2 <f_stat+0x6a>
c00047d7:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00047dc:	75 0f                	jne    c00047ed <f_stat+0x65>
c00047de:	85 ff                	test   edi,edi
c00047e0:	74 10                	je     c00047f2 <f_stat+0x6a>
c00047e2:	89 fa                	mov    edx,edi
c00047e4:	89 e0                	mov    eax,esp
c00047e6:	e8 e2 e7 ff ff       	call   c0002fcd <get_fileinfo>
c00047eb:	eb 05                	jmp    c00047f2 <f_stat+0x6a>
c00047ed:	bb 06 00 00 00       	mov    ebx,0x6
c00047f2:	83 ec 0c             	sub    esp,0xc
c00047f5:	56                   	push   esi
c00047f6:	e8 3d 14 00 00       	call   c0005c38 <ff_memfree>
c00047fb:	83 c4 10             	add    esp,0x10
c00047fe:	83 c4 30             	add    esp,0x30
c0004801:	89 d8                	mov    eax,ebx
c0004803:	5b                   	pop    ebx
c0004804:	5e                   	pop    esi
c0004805:	5f                   	pop    edi
c0004806:	c3                   	ret    

c0004807 <f_getfree>:
c0004807:	55                   	push   ebp
c0004808:	31 c9                	xor    ecx,ecx
c000480a:	57                   	push   edi
c000480b:	56                   	push   esi
c000480c:	53                   	push   ebx
c000480d:	83 ec 2c             	sub    esp,0x2c
c0004810:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004814:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004818:	e8 74 dc ff ff       	call   c0002491 <mount_volume>
c000481d:	89 c7                	mov    edi,eax
c000481f:	85 c0                	test   eax,eax
c0004821:	0f 85 df 00 00 00    	jne    c0004906 <f_getfree+0xff>
c0004827:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000482b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000482f:	89 30                	mov    DWORD PTR [eax],esi
c0004831:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004834:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004837:	8d 55 fe             	lea    edx,[ebp-0x2]
c000483a:	39 d0                	cmp    eax,edx
c000483c:	77 0b                	ja     c0004849 <f_getfree+0x42>
c000483e:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004842:	89 01                	mov    DWORD PTR [ecx],eax
c0004844:	e9 bd 00 00 00       	jmp    c0004906 <f_getfree+0xff>
c0004849:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c000484c:	75 29                	jne    c0004877 <f_getfree+0x70>
c000484e:	bd 02 00 00 00       	mov    ebp,0x2
c0004853:	31 db                	xor    ebx,ebx
c0004855:	89 ea                	mov    edx,ebp
c0004857:	89 f0                	mov    eax,esi
c0004859:	e8 b6 e9 ff ff       	call   c0003214 <get_fat.isra.2>
c000485e:	83 f8 ff             	cmp    eax,0xffffffff
c0004861:	74 7d                	je     c00048e0 <f_getfree+0xd9>
c0004863:	83 f8 01             	cmp    eax,0x1
c0004866:	74 7f                	je     c00048e7 <f_getfree+0xe0>
c0004868:	83 d3 00             	adc    ebx,0x0
c000486b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000486f:	45                   	inc    ebp
c0004870:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004873:	77 e0                	ja     c0004855 <f_getfree+0x4e>
c0004875:	eb 79                	jmp    c00048f0 <f_getfree+0xe9>
c0004877:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c000487a:	31 db                	xor    ebx,ebx
c000487c:	31 f6                	xor    esi,esi
c000487e:	85 f6                	test   esi,esi
c0004880:	75 18                	jne    c000489a <f_getfree+0x93>
c0004882:	8d 42 01             	lea    eax,[edx+0x1]
c0004885:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004889:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000488d:	e8 ac da ff ff       	call   c000233e <move_window>
c0004892:	85 c0                	test   eax,eax
c0004894:	75 58                	jne    c00048ee <f_getfree+0xe7>
c0004896:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000489a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000489e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048a2:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c00048a6:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048a9:	75 13                	jne    c00048be <f_getfree+0xb7>
c00048ab:	e8 27 d5 ff ff       	call   c0001dd7 <ld_word>
c00048b0:	0f b7 c0             	movzx  eax,ax
c00048b3:	83 f8 01             	cmp    eax,0x1
c00048b6:	83 d3 00             	adc    ebx,0x0
c00048b9:	83 c6 02             	add    esi,0x2
c00048bc:	eb 13                	jmp    c00048d1 <f_getfree+0xca>
c00048be:	e8 21 d5 ff ff       	call   c0001de4 <ld_dword>
c00048c3:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048c8:	83 f8 01             	cmp    eax,0x1
c00048cb:	83 d3 00             	adc    ebx,0x0
c00048ce:	83 c6 04             	add    esi,0x4
c00048d1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00048d7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048db:	4d                   	dec    ebp
c00048dc:	75 a0                	jne    c000487e <f_getfree+0x77>
c00048de:	eb 10                	jmp    c00048f0 <f_getfree+0xe9>
c00048e0:	bf 01 00 00 00       	mov    edi,0x1
c00048e5:	eb 09                	jmp    c00048f0 <f_getfree+0xe9>
c00048e7:	bf 02 00 00 00       	mov    edi,0x2
c00048ec:	eb 02                	jmp    c00048f0 <f_getfree+0xe9>
c00048ee:	89 c7                	mov    edi,eax
c00048f0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00048f4:	89 18                	mov    DWORD PTR [eax],ebx
c00048f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048fa:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c00048fd:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004900:	83 ca 01             	or     edx,0x1
c0004903:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004906:	83 c4 2c             	add    esp,0x2c
c0004909:	89 f8                	mov    eax,edi
c000490b:	5b                   	pop    ebx
c000490c:	5e                   	pop    esi
c000490d:	5f                   	pop    edi
c000490e:	5d                   	pop    ebp
c000490f:	c3                   	ret    

c0004910 <f_truncate>:
c0004910:	56                   	push   esi
c0004911:	53                   	push   ebx
c0004912:	83 ec 14             	sub    esp,0x14
c0004915:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004919:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000491d:	89 d8                	mov    eax,ebx
c000491f:	e8 71 d9 ff ff       	call   c0002295 <validate>
c0004924:	89 c6                	mov    esi,eax
c0004926:	85 c0                	test   eax,eax
c0004928:	0f 85 c4 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000492e:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004932:	85 f6                	test   esi,esi
c0004934:	0f 85 b8 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000493a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000493e:	0f 84 a9 00 00 00    	je     c00049ed <f_truncate+0xdd>
c0004944:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004947:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000494a:	0f 83 a2 00 00 00    	jae    c00049f2 <f_truncate+0xe2>
c0004950:	85 c0                	test   eax,eax
c0004952:	75 15                	jne    c0004969 <f_truncate+0x59>
c0004954:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004957:	31 c9                	xor    ecx,ecx
c0004959:	89 d8                	mov    eax,ebx
c000495b:	e8 bf eb ff ff       	call   c000351f <remove_chain>
c0004960:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004967:	eb 35                	jmp    c000499e <f_truncate+0x8e>
c0004969:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000496c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000496e:	e8 a1 e8 ff ff       	call   c0003214 <get_fat.isra.2>
c0004973:	89 c2                	mov    edx,eax
c0004975:	b8 01 00 00 00       	mov    eax,0x1
c000497a:	83 fa ff             	cmp    edx,0xffffffff
c000497d:	74 1f                	je     c000499e <f_truncate+0x8e>
c000497f:	b8 02 00 00 00       	mov    eax,0x2
c0004984:	83 fa 01             	cmp    edx,0x1
c0004987:	74 15                	je     c000499e <f_truncate+0x8e>
c0004989:	31 c0                	xor    eax,eax
c000498b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000498f:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004992:	76 0a                	jbe    c000499e <f_truncate+0x8e>
c0004994:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004997:	89 d8                	mov    eax,ebx
c0004999:	e8 81 eb ff ff       	call   c000351f <remove_chain>
c000499e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049a1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049a4:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049a7:	83 ca 40             	or     edx,0x40
c00049aa:	85 c0                	test   eax,eax
c00049ac:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049af:	75 35                	jne    c00049e6 <f_truncate+0xd6>
c00049b1:	80 e2 80             	and    dl,0x80
c00049b4:	74 3c                	je     c00049f2 <f_truncate+0xe2>
c00049b6:	6a 01                	push   0x1
c00049b8:	8d 43 28             	lea    eax,[ebx+0x28]
c00049bb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049be:	50                   	push   eax
c00049bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049c3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049c7:	50                   	push   eax
c00049c8:	e8 d5 d3 ff ff       	call   c0001da2 <disk_write>
c00049cd:	83 c4 10             	add    esp,0x10
c00049d0:	85 c0                	test   eax,eax
c00049d2:	75 0d                	jne    c00049e1 <f_truncate+0xd1>
c00049d4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049d7:	31 f6                	xor    esi,esi
c00049d9:	83 e0 7f             	and    eax,0x7f
c00049dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00049df:	eb 11                	jmp    c00049f2 <f_truncate+0xe2>
c00049e1:	b8 01 00 00 00       	mov    eax,0x1
c00049e6:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c00049e9:	89 c6                	mov    esi,eax
c00049eb:	eb 05                	jmp    c00049f2 <f_truncate+0xe2>
c00049ed:	be 07 00 00 00       	mov    esi,0x7
c00049f2:	89 f0                	mov    eax,esi
c00049f4:	83 c4 14             	add    esp,0x14
c00049f7:	5b                   	pop    ebx
c00049f8:	5e                   	pop    esi
c00049f9:	c3                   	ret    

c00049fa <f_unlink>:
c00049fa:	55                   	push   ebp
c00049fb:	b9 02 00 00 00       	mov    ecx,0x2
c0004a00:	57                   	push   edi
c0004a01:	56                   	push   esi
c0004a02:	53                   	push   ebx
c0004a03:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a09:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a0d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a14:	e8 78 da ff ff       	call   c0002491 <mount_volume>
c0004a19:	85 c0                	test   eax,eax
c0004a1b:	0f 85 f0 00 00 00    	jne    c0004b11 <f_unlink+0x117>
c0004a21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a25:	83 ec 0c             	sub    esp,0xc
c0004a28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a2c:	68 00 02 00 00       	push   0x200
c0004a31:	e8 ea 11 00 00       	call   c0005c20 <ff_memalloc>
c0004a36:	83 c4 10             	add    esp,0x10
c0004a39:	89 c3                	mov    ebx,eax
c0004a3b:	b8 11 00 00 00       	mov    eax,0x11
c0004a40:	85 db                	test   ebx,ebx
c0004a42:	0f 84 c9 00 00 00    	je     c0004b11 <f_unlink+0x117>
c0004a48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4c:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a53:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a56:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a5a:	e8 7c ef ff ff       	call   c00039db <follow_path>
c0004a5f:	85 c0                	test   eax,eax
c0004a61:	0f 85 96 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a67:	b8 06 00 00 00       	mov    eax,0x6
c0004a6c:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a71:	0f 85 86 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a77:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004a7c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004a82:	74 07                	je     c0004a8b <f_unlink+0x91>
c0004a84:	b8 07 00 00 00       	mov    eax,0x7
c0004a89:	eb 72                	jmp    c0004afd <f_unlink+0x103>
c0004a8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004a8f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004a93:	8a 07                	mov    al,BYTE PTR [edi]
c0004a95:	e8 29 e7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004a9a:	83 e5 10             	and    ebp,0x10
c0004a9d:	89 c6                	mov    esi,eax
c0004a9f:	75 0f                	jne    c0004ab0 <f_unlink+0xb6>
c0004aa1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aa5:	e8 95 ed ff ff       	call   c000383f <dir_remove>
c0004aaa:	85 c0                	test   eax,eax
c0004aac:	74 2f                	je     c0004add <f_unlink+0xe3>
c0004aae:	eb 4d                	jmp    c0004afd <f_unlink+0x103>
c0004ab0:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ab4:	31 d2                	xor    edx,edx
c0004ab6:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004aba:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004abe:	e8 55 e8 ff ff       	call   c0003318 <dir_sdi>
c0004ac3:	85 c0                	test   eax,eax
c0004ac5:	75 36                	jne    c0004afd <f_unlink+0x103>
c0004ac7:	31 d2                	xor    edx,edx
c0004ac9:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004acd:	e8 45 ec ff ff       	call   c0003717 <dir_read>
c0004ad2:	85 c0                	test   eax,eax
c0004ad4:	74 ae                	je     c0004a84 <f_unlink+0x8a>
c0004ad6:	83 f8 04             	cmp    eax,0x4
c0004ad9:	75 22                	jne    c0004afd <f_unlink+0x103>
c0004adb:	eb c4                	jmp    c0004aa1 <f_unlink+0xa7>
c0004add:	85 f6                	test   esi,esi
c0004adf:	75 0b                	jne    c0004aec <f_unlink+0xf2>
c0004ae1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ae5:	e8 8b e2 ff ff       	call   c0002d75 <sync_fs>
c0004aea:	eb 11                	jmp    c0004afd <f_unlink+0x103>
c0004aec:	31 c9                	xor    ecx,ecx
c0004aee:	89 f2                	mov    edx,esi
c0004af0:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004af4:	e8 26 ea ff ff       	call   c000351f <remove_chain>
c0004af9:	85 c0                	test   eax,eax
c0004afb:	74 e4                	je     c0004ae1 <f_unlink+0xe7>
c0004afd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b01:	83 ec 0c             	sub    esp,0xc
c0004b04:	53                   	push   ebx
c0004b05:	e8 2e 11 00 00       	call   c0005c38 <ff_memfree>
c0004b0a:	83 c4 10             	add    esp,0x10
c0004b0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b11:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b17:	5b                   	pop    ebx
c0004b18:	5e                   	pop    esi
c0004b19:	5f                   	pop    edi
c0004b1a:	5d                   	pop    ebp
c0004b1b:	c3                   	ret    

c0004b1c <f_mkdir>:
c0004b1c:	57                   	push   edi
c0004b1d:	b9 02 00 00 00       	mov    ecx,0x2
c0004b22:	56                   	push   esi
c0004b23:	53                   	push   ebx
c0004b24:	83 ec 50             	sub    esp,0x50
c0004b27:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b2b:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b2f:	e8 5d d9 ff ff       	call   c0002491 <mount_volume>
c0004b34:	89 c3                	mov    ebx,eax
c0004b36:	85 c0                	test   eax,eax
c0004b38:	0f 85 70 01 00 00    	jne    c0004cae <f_mkdir+0x192>
c0004b3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b42:	bb 11 00 00 00       	mov    ebx,0x11
c0004b47:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004b4b:	83 ec 0c             	sub    esp,0xc
c0004b4e:	68 00 02 00 00       	push   0x200
c0004b53:	e8 c8 10 00 00       	call   c0005c20 <ff_memalloc>
c0004b58:	83 c4 10             	add    esp,0x10
c0004b5b:	89 c7                	mov    edi,eax
c0004b5d:	85 c0                	test   eax,eax
c0004b5f:	0f 84 49 01 00 00    	je     c0004cae <f_mkdir+0x192>
c0004b65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b6d:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b74:	e8 62 ee ff ff       	call   c00039db <follow_path>
c0004b79:	89 c3                	mov    ebx,eax
c0004b7b:	85 c0                	test   eax,eax
c0004b7d:	74 3e                	je     c0004bbd <f_mkdir+0xa1>
c0004b7f:	83 f8 04             	cmp    eax,0x4
c0004b82:	75 3e                	jne    c0004bc2 <f_mkdir+0xa6>
c0004b84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b88:	31 d2                	xor    edx,edx
c0004b8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004b8e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004b92:	e8 49 e8 ff ff       	call   c00033e0 <create_chain>
c0004b97:	89 c6                	mov    esi,eax
c0004b99:	85 c0                	test   eax,eax
c0004b9b:	74 0c                	je     c0004ba9 <f_mkdir+0x8d>
c0004b9d:	bb 02 00 00 00       	mov    ebx,0x2
c0004ba2:	83 f8 01             	cmp    eax,0x1
c0004ba5:	74 07                	je     c0004bae <f_mkdir+0x92>
c0004ba7:	eb 2a                	jmp    c0004bd3 <f_mkdir+0xb7>
c0004ba9:	bb 07 00 00 00       	mov    ebx,0x7
c0004bae:	31 c9                	xor    ecx,ecx
c0004bb0:	89 f2                	mov    edx,esi
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 64 e9 ff ff       	call   c000351f <remove_chain>
c0004bbb:	eb 05                	jmp    c0004bc2 <f_mkdir+0xa6>
c0004bbd:	bb 08 00 00 00       	mov    ebx,0x8
c0004bc2:	83 ec 0c             	sub    esp,0xc
c0004bc5:	57                   	push   edi
c0004bc6:	e8 6d 10 00 00       	call   c0005c38 <ff_memfree>
c0004bcb:	83 c4 10             	add    esp,0x10
c0004bce:	e9 db 00 00 00       	jmp    c0004cae <f_mkdir+0x192>
c0004bd3:	bb 01 00 00 00       	mov    ebx,0x1
c0004bd8:	83 f8 ff             	cmp    eax,0xffffffff
c0004bdb:	74 d1                	je     c0004bae <f_mkdir+0x92>
c0004bdd:	89 f2                	mov    edx,esi
c0004bdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004be3:	e8 f1 dc ff ff       	call   c00028d9 <dir_clear>
c0004be8:	89 c3                	mov    ebx,eax
c0004bea:	85 c0                	test   eax,eax
c0004bec:	75 c0                	jne    c0004bae <f_mkdir+0x92>
c0004bee:	b9 0b 00 00 00       	mov    ecx,0xb
c0004bf3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bf7:	ba 20 00 00 00       	mov    edx,0x20
c0004bfc:	83 c0 34             	add    eax,0x34
c0004bff:	e8 14 d2 ff ff       	call   c0001e18 <mem_set>
c0004c04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c08:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c0d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c11:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004c15:	83 c0 4a             	add    eax,0x4a
c0004c18:	e8 e3 d1 ff ff       	call   c0001e00 <st_dword>
c0004c1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c21:	89 f1                	mov    ecx,esi
c0004c23:	8d 50 34             	lea    edx,[eax+0x34]
c0004c26:	e8 c1 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2f:	b9 20 00 00 00       	mov    ecx,0x20
c0004c34:	8d 50 34             	lea    edx,[eax+0x34]
c0004c37:	83 c0 54             	add    eax,0x54
c0004c3a:	e8 c4 d1 ff ff       	call   c0001e03 <mem_cpy>
c0004c3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c43:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c47:	8d 50 54             	lea    edx,[eax+0x54]
c0004c4a:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c4e:	e8 99 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c57:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c5b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c5f:	e8 0c ee ff ff       	call   c0003a70 <dir_register>
c0004c64:	89 c3                	mov    ebx,eax
c0004c66:	85 c0                	test   eax,eax
c0004c68:	0f 85 40 ff ff ff    	jne    c0004bae <f_mkdir+0x92>
c0004c6e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c72:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c77:	83 c0 16             	add    eax,0x16
c0004c7a:	e8 81 d1 ff ff       	call   c0001e00 <st_dword>
c0004c7f:	89 f1                	mov    ecx,esi
c0004c81:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c89:	e8 5e e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c8e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c92:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004c96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c9a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ca2:	e8 ce e0 ff ff       	call   c0002d75 <sync_fs>
c0004ca7:	89 c3                	mov    ebx,eax
c0004ca9:	e9 14 ff ff ff       	jmp    c0004bc2 <f_mkdir+0xa6>
c0004cae:	83 c4 50             	add    esp,0x50
c0004cb1:	89 d8                	mov    eax,ebx
c0004cb3:	5b                   	pop    ebx
c0004cb4:	5e                   	pop    esi
c0004cb5:	5f                   	pop    edi
c0004cb6:	c3                   	ret    

c0004cb7 <f_rename>:
c0004cb7:	57                   	push   edi
c0004cb8:	56                   	push   esi
c0004cb9:	53                   	push   ebx
c0004cba:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004cc0:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004cc7:	e8 7c d5 ff ff       	call   c0002248 <get_ldnumber>
c0004ccc:	b9 02 00 00 00       	mov    ecx,0x2
c0004cd1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cd5:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004cdc:	e8 b0 d7 ff ff       	call   c0002491 <mount_volume>
c0004ce1:	85 c0                	test   eax,eax
c0004ce3:	0f 85 7c 01 00 00    	jne    c0004e65 <f_rename+0x1ae>
c0004ce9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ced:	83 ec 0c             	sub    esp,0xc
c0004cf0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004cf4:	68 00 02 00 00       	push   0x200
c0004cf9:	e8 22 0f 00 00       	call   c0005c20 <ff_memalloc>
c0004cfe:	83 c4 10             	add    esp,0x10
c0004d01:	89 c6                	mov    esi,eax
c0004d03:	b8 11 00 00 00       	mov    eax,0x11
c0004d08:	85 f6                	test   esi,esi
c0004d0a:	0f 84 55 01 00 00    	je     c0004e65 <f_rename+0x1ae>
c0004d10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d14:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d1b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d1e:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d22:	e8 b4 ec ff ff       	call   c00039db <follow_path>
c0004d27:	85 c0                	test   eax,eax
c0004d29:	0f 85 22 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d2f:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d33:	b8 06 00 00 00       	mov    eax,0x6
c0004d38:	80 e2 a0             	and    dl,0xa0
c0004d3b:	0f 85 10 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d41:	b9 20 00 00 00       	mov    ecx,0x20
c0004d46:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d4a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d4e:	e8 b0 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d53:	b9 30 00 00 00       	mov    ecx,0x30
c0004d58:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d5c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d60:	e8 9e d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d65:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d70:	e8 66 ec ff ff       	call   c00039db <follow_path>
c0004d75:	85 c0                	test   eax,eax
c0004d77:	75 20                	jne    c0004d99 <f_rename+0xe2>
c0004d79:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004d7d:	b8 08 00 00 00       	mov    eax,0x8
c0004d82:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004d86:	0f 85 c5 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d8c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004d90:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004d97:	eb 03                	jmp    c0004d9c <f_rename+0xe5>
c0004d99:	83 f8 04             	cmp    eax,0x4
c0004d9c:	0f 85 af 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004da2:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004da6:	e8 c5 ec ff ff       	call   c0003a70 <dir_register>
c0004dab:	85 c0                	test   eax,eax
c0004dad:	0f 85 9e 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004db3:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dba:	b9 13 00 00 00       	mov    ecx,0x13
c0004dbf:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dc2:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004dc6:	e8 38 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004dcb:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004dcf:	a8 10                	test   al,0x10
c0004dd1:	75 03                	jne    c0004dd6 <f_rename+0x11f>
c0004dd3:	83 c8 20             	or     eax,0x20
c0004dd6:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dd9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ddd:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004de1:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004de5:	74 54                	je     c0004e3b <f_rename+0x184>
c0004de7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004deb:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004def:	74 4a                	je     c0004e3b <f_rename+0x184>
c0004df1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004df5:	89 da                	mov    edx,ebx
c0004df7:	8a 07                	mov    al,BYTE PTR [edi]
c0004df9:	e8 c5 e3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004dfe:	89 c2                	mov    edx,eax
c0004e00:	89 f8                	mov    eax,edi
c0004e02:	e8 27 d2 ff ff       	call   c000202e <clst2sect>
c0004e07:	89 c2                	mov    edx,eax
c0004e09:	b8 02 00 00 00       	mov    eax,0x2
c0004e0e:	85 d2                	test   edx,edx
c0004e10:	74 3f                	je     c0004e51 <f_rename+0x19a>
c0004e12:	89 f8                	mov    eax,edi
c0004e14:	e8 25 d5 ff ff       	call   c000233e <move_window>
c0004e19:	85 c0                	test   eax,eax
c0004e1b:	75 34                	jne    c0004e51 <f_rename+0x19a>
c0004e1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e21:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e25:	75 14                	jne    c0004e3b <f_rename+0x184>
c0004e27:	8d 50 54             	lea    edx,[eax+0x54]
c0004e2a:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e2e:	e8 b9 e3 ff ff       	call   c00031ec <st_clust.isra.1>
c0004e33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e37:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e3b:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e3f:	e8 fb e9 ff ff       	call   c000383f <dir_remove>
c0004e44:	85 c0                	test   eax,eax
c0004e46:	75 09                	jne    c0004e51 <f_rename+0x19a>
c0004e48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e4c:	e8 24 df ff ff       	call   c0002d75 <sync_fs>
c0004e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e55:	83 ec 0c             	sub    esp,0xc
c0004e58:	56                   	push   esi
c0004e59:	e8 da 0d 00 00       	call   c0005c38 <ff_memfree>
c0004e5e:	83 c4 10             	add    esp,0x10
c0004e61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e65:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e6b:	5b                   	pop    ebx
c0004e6c:	5e                   	pop    esi
c0004e6d:	5f                   	pop    edi
c0004e6e:	c3                   	ret    

c0004e6f <f_chmod>:
c0004e6f:	57                   	push   edi
c0004e70:	b9 02 00 00 00       	mov    ecx,0x2
c0004e75:	56                   	push   esi
c0004e76:	53                   	push   ebx
c0004e77:	83 ec 50             	sub    esp,0x50
c0004e7a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004e7e:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004e82:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e86:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004e8a:	e8 02 d6 ff ff       	call   c0002491 <mount_volume>
c0004e8f:	85 c0                	test   eax,eax
c0004e91:	0f 85 81 00 00 00    	jne    c0004f18 <f_chmod+0xa9>
c0004e97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e9b:	83 ec 0c             	sub    esp,0xc
c0004e9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ea2:	68 00 02 00 00       	push   0x200
c0004ea7:	e8 74 0d 00 00       	call   c0005c20 <ff_memalloc>
c0004eac:	83 c4 10             	add    esp,0x10
c0004eaf:	89 c6                	mov    esi,eax
c0004eb1:	b8 11 00 00 00       	mov    eax,0x11
c0004eb6:	85 f6                	test   esi,esi
c0004eb8:	74 5e                	je     c0004f18 <f_chmod+0xa9>
c0004eba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebe:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ec2:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ec5:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ec9:	e8 0d eb ff ff       	call   c00039db <follow_path>
c0004ece:	85 c0                	test   eax,eax
c0004ed0:	75 32                	jne    c0004f04 <f_chmod+0x95>
c0004ed2:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004ed6:	b8 06 00 00 00       	mov    eax,0x6
c0004edb:	80 e2 a0             	and    dl,0xa0
c0004ede:	75 24                	jne    c0004f04 <f_chmod+0x95>
c0004ee0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004ee4:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004ee7:	31 d7                	xor    edi,edx
c0004ee9:	21 fb                	and    ebx,edi
c0004eeb:	83 e3 27             	and    ebx,0x27
c0004eee:	31 d3                	xor    ebx,edx
c0004ef0:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004ef3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004efb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004eff:	e8 71 de ff ff       	call   c0002d75 <sync_fs>
c0004f04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f08:	83 ec 0c             	sub    esp,0xc
c0004f0b:	56                   	push   esi
c0004f0c:	e8 27 0d 00 00       	call   c0005c38 <ff_memfree>
c0004f11:	83 c4 10             	add    esp,0x10
c0004f14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f18:	83 c4 50             	add    esp,0x50
c0004f1b:	5b                   	pop    ebx
c0004f1c:	5e                   	pop    esi
c0004f1d:	5f                   	pop    edi
c0004f1e:	c3                   	ret    

c0004f1f <f_utime>:
c0004f1f:	56                   	push   esi
c0004f20:	b9 02 00 00 00       	mov    ecx,0x2
c0004f25:	53                   	push   ebx
c0004f26:	83 ec 54             	sub    esp,0x54
c0004f29:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f2d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f31:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f35:	e8 57 d5 ff ff       	call   c0002491 <mount_volume>
c0004f3a:	85 c0                	test   eax,eax
c0004f3c:	0f 85 87 00 00 00    	jne    c0004fc9 <f_utime+0xaa>
c0004f42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f46:	83 ec 0c             	sub    esp,0xc
c0004f49:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f4d:	68 00 02 00 00       	push   0x200
c0004f52:	e8 c9 0c 00 00       	call   c0005c20 <ff_memalloc>
c0004f57:	83 c4 10             	add    esp,0x10
c0004f5a:	89 c3                	mov    ebx,eax
c0004f5c:	b8 11 00 00 00       	mov    eax,0x11
c0004f61:	85 db                	test   ebx,ebx
c0004f63:	74 64                	je     c0004fc9 <f_utime+0xaa>
c0004f65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f6d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f74:	e8 62 ea ff ff       	call   c00039db <follow_path>
c0004f79:	85 c0                	test   eax,eax
c0004f7b:	75 38                	jne    c0004fb5 <f_utime+0x96>
c0004f7d:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004f81:	b8 06 00 00 00       	mov    eax,0x6
c0004f86:	80 e2 a0             	and    dl,0xa0
c0004f89:	75 2a                	jne    c0004fb5 <f_utime+0x96>
c0004f8b:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004f8f:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004f93:	c1 e2 10             	shl    edx,0x10
c0004f96:	09 c2                	or     edx,eax
c0004f98:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f9c:	83 c0 16             	add    eax,0x16
c0004f9f:	e8 5c ce ff ff       	call   c0001e00 <st_dword>
c0004fa4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fa8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fb0:	e8 c0 dd ff ff       	call   c0002d75 <sync_fs>
c0004fb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fb9:	83 ec 0c             	sub    esp,0xc
c0004fbc:	53                   	push   ebx
c0004fbd:	e8 76 0c 00 00       	call   c0005c38 <ff_memfree>
c0004fc2:	83 c4 10             	add    esp,0x10
c0004fc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fc9:	83 c4 54             	add    esp,0x54
c0004fcc:	5b                   	pop    ebx
c0004fcd:	5e                   	pop    esi
c0004fce:	c3                   	ret    

c0004fcf <f_getlabel>:
c0004fcf:	55                   	push   ebp
c0004fd0:	31 c9                	xor    ecx,ecx
c0004fd2:	57                   	push   edi
c0004fd3:	56                   	push   esi
c0004fd4:	53                   	push   ebx
c0004fd5:	83 ec 5c             	sub    esp,0x5c
c0004fd8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004fdc:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fe0:	e8 ac d4 ff ff       	call   c0002491 <mount_volume>
c0004fe5:	89 c6                	mov    esi,eax
c0004fe7:	85 c0                	test   eax,eax
c0004fe9:	0f 85 27 01 00 00    	jne    c0005116 <f_getlabel+0x147>
c0004fef:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004ff4:	0f 84 d0 00 00 00    	je     c00050ca <f_getlabel+0xfb>
c0004ffa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ffe:	31 d2                	xor    edx,edx
c0005000:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005004:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000500c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005010:	e8 03 e3 ff ff       	call   c0003318 <dir_sdi>
c0005015:	85 c0                	test   eax,eax
c0005017:	0f 85 a1 00 00 00    	jne    c00050be <f_getlabel+0xef>
c000501d:	ba 01 00 00 00       	mov    edx,0x1
c0005022:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005026:	e8 ec e6 ff ff       	call   c0003717 <dir_read>
c000502b:	85 c0                	test   eax,eax
c000502d:	0f 85 8b 00 00 00    	jne    c00050be <f_getlabel+0xef>
c0005033:	31 db                	xor    ebx,ebx
c0005035:	31 c9                	xor    ecx,ecx
c0005037:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000503b:	8d 79 01             	lea    edi,[ecx+0x1]
c000503e:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0005043:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005048:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000504c:	e8 06 ce ff ff       	call   c0001e57 <dbc_1st>
c0005051:	85 c0                	test   eax,eax
c0005053:	74 16                	je     c000506b <f_getlabel+0x9c>
c0005055:	83 ff 0b             	cmp    edi,0xb
c0005058:	74 11                	je     c000506b <f_getlabel+0x9c>
c000505a:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c000505f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005063:	8d 79 02             	lea    edi,[ecx+0x2]
c0005066:	c1 e0 08             	shl    eax,0x8
c0005069:	09 c2                	or     edx,eax
c000506b:	0f b7 d2             	movzx  edx,dx
c000506e:	50                   	push   eax
c000506f:	50                   	push   eax
c0005070:	68 b5 01 00 00       	push   0x1b5
c0005075:	52                   	push   edx
c0005076:	e8 75 0c 00 00       	call   c0005cf0 <ff_oem2uni>
c000507b:	83 c4 10             	add    esp,0x10
c000507e:	0f b7 c0             	movzx  eax,ax
c0005081:	85 c0                	test   eax,eax
c0005083:	74 22                	je     c00050a7 <f_getlabel+0xd8>
c0005085:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005089:	b9 04 00 00 00       	mov    ecx,0x4
c000508e:	01 da                	add    edx,ebx
c0005090:	e8 a0 ce ff ff       	call   c0001f35 <put_utf>
c0005095:	0f b6 c0             	movzx  eax,al
c0005098:	85 c0                	test   eax,eax
c000509a:	74 0b                	je     c00050a7 <f_getlabel+0xd8>
c000509c:	01 c3                	add    ebx,eax
c000509e:	83 ff 0b             	cmp    edi,0xb
c00050a1:	74 06                	je     c00050a9 <f_getlabel+0xda>
c00050a3:	89 f9                	mov    ecx,edi
c00050a5:	eb 90                	jmp    c0005037 <f_getlabel+0x68>
c00050a7:	31 db                	xor    ebx,ebx
c00050a9:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c00050ad:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00050b0:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c00050b4:	74 14                	je     c00050ca <f_getlabel+0xfb>
c00050b6:	4b                   	dec    ebx
c00050b7:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c00050ba:	74 f1                	je     c00050ad <f_getlabel+0xde>
c00050bc:	eb 0c                	jmp    c00050ca <f_getlabel+0xfb>
c00050be:	83 f8 04             	cmp    eax,0x4
c00050c1:	75 51                	jne    c0005114 <f_getlabel+0x145>
c00050c3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00050c7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00050ca:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050cf:	74 45                	je     c0005116 <f_getlabel+0x147>
c00050d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050d5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00050d8:	e8 61 d2 ff ff       	call   c000233e <move_window>
c00050dd:	89 c6                	mov    esi,eax
c00050df:	85 c0                	test   eax,eax
c00050e1:	75 33                	jne    c0005116 <f_getlabel+0x147>
c00050e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00050e7:	b8 43 00 00 00       	mov    eax,0x43
c00050ec:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00050ef:	83 f9 03             	cmp    ecx,0x3
c00050f2:	74 0f                	je     c0005103 <f_getlabel+0x134>
c00050f4:	31 c0                	xor    eax,eax
c00050f6:	83 f9 04             	cmp    ecx,0x4
c00050f9:	0f 94 c0             	sete   al
c00050fc:	48                   	dec    eax
c00050fd:	83 e0 c3             	and    eax,0xffffffc3
c0005100:	83 c0 64             	add    eax,0x64
c0005103:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005107:	e8 d8 cc ff ff       	call   c0001de4 <ld_dword>
c000510c:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0005110:	89 07                	mov    DWORD PTR [edi],eax
c0005112:	eb 02                	jmp    c0005116 <f_getlabel+0x147>
c0005114:	89 c6                	mov    esi,eax
c0005116:	83 c4 5c             	add    esp,0x5c
c0005119:	89 f0                	mov    eax,esi
c000511b:	5b                   	pop    ebx
c000511c:	5e                   	pop    esi
c000511d:	5f                   	pop    edi
c000511e:	5d                   	pop    ebp
c000511f:	c3                   	ret    

c0005120 <f_setlabel>:
c0005120:	57                   	push   edi
c0005121:	b9 02 00 00 00       	mov    ecx,0x2
c0005126:	56                   	push   esi
c0005127:	53                   	push   ebx
c0005128:	83 ec 50             	sub    esp,0x50
c000512b:	8d 54 24 04          	lea    edx,[esp+0x4]
c000512f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005133:	e8 59 d3 ff ff       	call   c0002491 <mount_volume>
c0005138:	89 c6                	mov    esi,eax
c000513a:	85 c0                	test   eax,eax
c000513c:	0f 85 65 01 00 00    	jne    c00052a7 <f_setlabel+0x187>
c0005142:	b9 0b 00 00 00       	mov    ecx,0xb
c0005147:	ba 20 00 00 00       	mov    edx,0x20
c000514c:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005150:	31 db                	xor    ebx,ebx
c0005152:	e8 c1 cc ff ff       	call   c0001e18 <mem_set>
c0005157:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000515b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c000515e:	76 5d                	jbe    c00051bd <f_setlabel+0x9d>
c0005160:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005164:	e8 f4 cc ff ff       	call   c0001e5d <tchar2uni>
c0005169:	3d ff ff 00 00       	cmp    eax,0xffff
c000516e:	76 0a                	jbe    c000517a <f_setlabel+0x5a>
c0005170:	be 06 00 00 00       	mov    esi,0x6
c0005175:	e9 2d 01 00 00       	jmp    c00052a7 <f_setlabel+0x187>
c000517a:	83 ec 0c             	sub    esp,0xc
c000517d:	50                   	push   eax
c000517e:	e8 e5 0b 00 00       	call   c0005d68 <ff_wtoupper>
c0005183:	5a                   	pop    edx
c0005184:	59                   	pop    ecx
c0005185:	68 b5 01 00 00       	push   0x1b5
c000518a:	50                   	push   eax
c000518b:	e8 c0 0a 00 00       	call   c0005c50 <ff_uni2oem>
c0005190:	83 c4 10             	add    esp,0x10
c0005193:	0f b7 f0             	movzx  esi,ax
c0005196:	89 f7                	mov    edi,esi
c0005198:	85 f6                	test   esi,esi
c000519a:	74 d4                	je     c0005170 <f_setlabel+0x50>
c000519c:	89 f2                	mov    edx,esi
c000519e:	b8 90 f8 01 c0       	mov    eax,0xc001f890
c00051a3:	e8 9e cc ff ff       	call   c0001e46 <chk_chr>
c00051a8:	85 c0                	test   eax,eax
c00051aa:	75 c4                	jne    c0005170 <f_setlabel+0x50>
c00051ac:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051b2:	0f 87 c9 00 00 00    	ja     c0005281 <f_setlabel+0x161>
c00051b8:	e9 e0 00 00 00       	jmp    c000529d <f_setlabel+0x17d>
c00051bd:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051c2:	74 ac                	je     c0005170 <f_setlabel+0x50>
c00051c4:	85 db                	test   ebx,ebx
c00051c6:	74 0e                	je     c00051d6 <f_setlabel+0xb6>
c00051c8:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051cb:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051d0:	75 04                	jne    c00051d6 <f_setlabel+0xb6>
c00051d2:	89 c3                	mov    ebx,eax
c00051d4:	eb ee                	jmp    c00051c4 <f_setlabel+0xa4>
c00051d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00051da:	31 d2                	xor    edx,edx
c00051dc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051e0:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051e8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051ec:	e8 27 e1 ff ff       	call   c0003318 <dir_sdi>
c00051f1:	89 c6                	mov    esi,eax
c00051f3:	85 c0                	test   eax,eax
c00051f5:	0f 85 ac 00 00 00    	jne    c00052a7 <f_setlabel+0x187>
c00051fb:	ba 01 00 00 00       	mov    edx,0x1
c0005200:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005204:	e8 0e e5 ff ff       	call   c0003717 <dir_read>
c0005209:	85 c0                	test   eax,eax
c000520b:	75 18                	jne    c0005225 <f_setlabel+0x105>
c000520d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005211:	85 db                	test   ebx,ebx
c0005213:	74 0b                	je     c0005220 <f_setlabel+0x100>
c0005215:	b9 0b 00 00 00       	mov    ecx,0xb
c000521a:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000521e:	eb 47                	jmp    c0005267 <f_setlabel+0x147>
c0005220:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0005223:	eb 47                	jmp    c000526c <f_setlabel+0x14c>
c0005225:	83 f8 04             	cmp    eax,0x4
c0005228:	75 53                	jne    c000527d <f_setlabel+0x15d>
c000522a:	85 db                	test   ebx,ebx
c000522c:	74 79                	je     c00052a7 <f_setlabel+0x187>
c000522e:	ba 01 00 00 00       	mov    edx,0x1
c0005233:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005237:	e8 76 e4 ff ff       	call   c00036b2 <dir_alloc>
c000523c:	89 c6                	mov    esi,eax
c000523e:	85 c0                	test   eax,eax
c0005240:	75 65                	jne    c00052a7 <f_setlabel+0x187>
c0005242:	b9 20 00 00 00       	mov    ecx,0x20
c0005247:	31 d2                	xor    edx,edx
c0005249:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000524d:	e8 c6 cb ff ff       	call   c0001e18 <mem_set>
c0005252:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005256:	b9 0b 00 00 00       	mov    ecx,0xb
c000525b:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000525f:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005263:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005267:	e8 97 cb ff ff       	call   c0001e03 <mem_cpy>
c000526c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005270:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005274:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005278:	e8 f8 da ff ff       	call   c0002d75 <sync_fs>
c000527d:	89 c6                	mov    esi,eax
c000527f:	eb 26                	jmp    c00052a7 <f_setlabel+0x187>
c0005281:	83 fb 09             	cmp    ebx,0x9
c0005284:	0f 87 e6 fe ff ff    	ja     c0005170 <f_setlabel+0x50>
c000528a:	89 f0                	mov    eax,esi
c000528c:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005290:	43                   	inc    ebx
c0005291:	89 f8                	mov    eax,edi
c0005293:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005297:	43                   	inc    ebx
c0005298:	e9 ba fe ff ff       	jmp    c0005157 <f_setlabel+0x37>
c000529d:	83 fb 0a             	cmp    ebx,0xa
c00052a0:	76 ef                	jbe    c0005291 <f_setlabel+0x171>
c00052a2:	e9 c9 fe ff ff       	jmp    c0005170 <f_setlabel+0x50>
c00052a7:	83 c4 50             	add    esp,0x50
c00052aa:	89 f0                	mov    eax,esi
c00052ac:	5b                   	pop    ebx
c00052ad:	5e                   	pop    esi
c00052ae:	5f                   	pop    edi
c00052af:	c3                   	ret    

c00052b0 <f_expand>:
c00052b0:	55                   	push   ebp
c00052b1:	57                   	push   edi
c00052b2:	56                   	push   esi
c00052b3:	53                   	push   ebx
c00052b4:	83 ec 2c             	sub    esp,0x2c
c00052b7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052bb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052c7:	89 d8                	mov    eax,ebx
c00052c9:	e8 c7 cf ff ff       	call   c0002295 <validate>
c00052ce:	89 c6                	mov    esi,eax
c00052d0:	85 c0                	test   eax,eax
c00052d2:	0f 85 3b 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052d8:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00052dc:	85 f6                	test   esi,esi
c00052de:	0f 85 2f 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052e4:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00052e9:	75 0a                	jne    c00052f5 <f_expand+0x45>
c00052eb:	be 07 00 00 00       	mov    esi,0x7
c00052f0:	e9 1e 01 00 00       	jmp    c0005413 <f_expand+0x163>
c00052f5:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00052f9:	75 f0                	jne    c00052eb <f_expand+0x3b>
c00052fb:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00052ff:	74 ea                	je     c00052eb <f_expand+0x3b>
c0005301:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0005305:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c0005309:	c1 e1 09             	shl    ecx,0x9
c000530c:	8d 41 ff             	lea    eax,[ecx-0x1]
c000530f:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005313:	0f 95 c0             	setne  al
c0005316:	31 d2                	xor    edx,edx
c0005318:	0f b6 c0             	movzx  eax,al
c000531b:	89 c7                	mov    edi,eax
c000531d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005321:	f7 f1                	div    ecx
c0005323:	01 f8                	add    eax,edi
c0005325:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005328:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000532c:	83 ff 01             	cmp    edi,0x1
c000532f:	76 05                	jbe    c0005336 <f_expand+0x86>
c0005331:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c0005334:	77 05                	ja     c000533b <f_expand+0x8b>
c0005336:	bf 02 00 00 00       	mov    edi,0x2
c000533b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000533e:	89 fd                	mov    ebp,edi
c0005340:	31 c9                	xor    ecx,ecx
c0005342:	89 ea                	mov    edx,ebp
c0005344:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005348:	8b 03                	mov    eax,DWORD PTR [ebx]
c000534a:	45                   	inc    ebp
c000534b:	e8 c4 de ff ff       	call   c0003214 <get_fat.isra.2>
c0005350:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005354:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005358:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c000535b:	77 05                	ja     c0005362 <f_expand+0xb2>
c000535d:	bd 02 00 00 00       	mov    ebp,0x2
c0005362:	83 f8 01             	cmp    eax,0x1
c0005365:	74 20                	je     c0005387 <f_expand+0xd7>
c0005367:	83 f8 ff             	cmp    eax,0xffffffff
c000536a:	74 25                	je     c0005391 <f_expand+0xe1>
c000536c:	85 c0                	test   eax,eax
c000536e:	75 09                	jne    c0005379 <f_expand+0xc9>
c0005370:	41                   	inc    ecx
c0005371:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0005375:	75 07                	jne    c000537e <f_expand+0xce>
c0005377:	eb 1f                	jmp    c0005398 <f_expand+0xe8>
c0005379:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000537c:	31 c9                	xor    ecx,ecx
c000537e:	39 fd                	cmp    ebp,edi
c0005380:	75 c0                	jne    c0005342 <f_expand+0x92>
c0005382:	e9 64 ff ff ff       	jmp    c00052eb <f_expand+0x3b>
c0005387:	be 02 00 00 00       	mov    esi,0x2
c000538c:	e9 82 00 00 00       	jmp    c0005413 <f_expand+0x163>
c0005391:	be 01 00 00 00       	mov    esi,0x1
c0005396:	eb 7b                	jmp    c0005413 <f_expand+0x163>
c0005398:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000539d:	74 2b                	je     c00053ca <f_expand+0x11a>
c000539f:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053a2:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053a6:	85 ed                	test   ebp,ebp
c00053a8:	74 24                	je     c00053ce <f_expand+0x11e>
c00053aa:	83 c9 ff             	or     ecx,0xffffffff
c00053ad:	83 fd 01             	cmp    ebp,0x1
c00053b0:	74 03                	je     c00053b5 <f_expand+0x105>
c00053b2:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053b5:	89 fa                	mov    edx,edi
c00053b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053bb:	e8 c2 d3 ff ff       	call   c0002782 <put_fat>
c00053c0:	85 c0                	test   eax,eax
c00053c2:	75 4d                	jne    c0005411 <f_expand+0x161>
c00053c4:	89 f8                	mov    eax,edi
c00053c6:	4d                   	dec    ebp
c00053c7:	47                   	inc    edi
c00053c8:	eb dc                	jmp    c00053a6 <f_expand+0xf6>
c00053ca:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053cd:	48                   	dec    eax
c00053ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053d2:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053d7:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00053da:	74 37                	je     c0005413 <f_expand+0x163>
c00053dc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053df:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00053e2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053e6:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00053e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00053ec:	83 c8 40             	or     eax,0x40
c00053ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00053f2:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00053f5:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00053f8:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00053fb:	39 c8                	cmp    eax,ecx
c00053fd:	77 14                	ja     c0005413 <f_expand+0x163>
c00053ff:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005403:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005406:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005409:	83 c8 01             	or     eax,0x1
c000540c:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c000540f:	eb 02                	jmp    c0005413 <f_expand+0x163>
c0005411:	89 c6                	mov    esi,eax
c0005413:	83 c4 2c             	add    esp,0x2c
c0005416:	89 f0                	mov    eax,esi
c0005418:	5b                   	pop    ebx
c0005419:	5e                   	pop    esi
c000541a:	5f                   	pop    edi
c000541b:	5d                   	pop    ebp
c000541c:	c3                   	ret    

c000541d <f_mkfs>:
c000541d:	55                   	push   ebp
c000541e:	57                   	push   edi
c000541f:	56                   	push   esi
c0005420:	be 0b 00 00 00       	mov    esi,0xb
c0005425:	53                   	push   ebx
c0005426:	83 ec 5c             	sub    esp,0x5c
c0005429:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000542d:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c0005431:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005435:	e8 0e ce ff ff       	call   c0002248 <get_ldnumber>
c000543a:	85 c0                	test   eax,eax
c000543c:	0f 88 d1 07 00 00    	js     c0005c13 <f_mkfs+0x7f6>
c0005442:	8b 14 85 a0 54 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdab60]
c0005449:	85 d2                	test   edx,edx
c000544b:	74 03                	je     c0005450 <f_mkfs+0x33>
c000544d:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005450:	85 db                	test   ebx,ebx
c0005452:	75 05                	jne    c0005459 <f_mkfs+0x3c>
c0005454:	bb 80 f8 01 c0       	mov    ebx,0xc001f880
c0005459:	83 ec 0c             	sub    esp,0xc
c000545c:	0f b6 c0             	movzx  eax,al
c000545f:	be 03 00 00 00       	mov    esi,0x3
c0005464:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005468:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000546c:	e8 18 c9 ff ff       	call   c0001d89 <disk_initialize>
c0005471:	83 c4 10             	add    esp,0x10
c0005474:	a8 01                	test   al,0x1
c0005476:	0f 85 97 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c000547c:	be 0a 00 00 00       	mov    esi,0xa
c0005481:	a8 04                	test   al,0x4
c0005483:	0f 85 8a 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c0005489:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000548c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005490:	85 c0                	test   eax,eax
c0005492:	75 20                	jne    c00054b4 <f_mkfs+0x97>
c0005494:	51                   	push   ecx
c0005495:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005499:	50                   	push   eax
c000549a:	6a 03                	push   0x3
c000549c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054a0:	e8 13 c9 ff ff       	call   c0001db8 <disk_ioctl>
c00054a5:	83 c4 10             	add    esp,0x10
c00054a8:	85 c0                	test   eax,eax
c00054aa:	74 08                	je     c00054b4 <f_mkfs+0x97>
c00054ac:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054b4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054b8:	8d 42 ff             	lea    eax,[edx-0x1]
c00054bb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054c0:	77 04                	ja     c00054c6 <f_mkfs+0xa9>
c00054c2:	85 c2                	test   edx,eax
c00054c4:	74 08                	je     c00054ce <f_mkfs+0xb1>
c00054c6:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054ce:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054d1:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00054d9:	48                   	dec    eax
c00054da:	3c 01                	cmp    al,0x1
c00054dc:	76 05                	jbe    c00054e3 <f_mkfs+0xc6>
c00054de:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00054e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054e6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00054ea:	48                   	dec    eax
c00054eb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054f0:	77 07                	ja     c00054f9 <f_mkfs+0xdc>
c00054f2:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00054f7:	74 08                	je     c0005501 <f_mkfs+0xe4>
c00054f9:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c0005501:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005504:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000550a:	77 07                	ja     c0005513 <f_mkfs+0xf6>
c000550c:	8d 47 ff             	lea    eax,[edi-0x1]
c000550f:	85 f8                	test   eax,edi
c0005511:	74 02                	je     c0005515 <f_mkfs+0xf8>
c0005513:	31 ff                	xor    edi,edi
c0005515:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000551d:	77 0a                	ja     c0005529 <f_mkfs+0x10c>
c000551f:	be 11 00 00 00       	mov    esi,0x11
c0005524:	e9 ea 06 00 00       	jmp    c0005c13 <f_mkfs+0x7f6>
c0005529:	8b 33                	mov    esi,DWORD PTR [ebx]
c000552b:	85 ed                	test   ebp,ebp
c000552d:	89 eb                	mov    ebx,ebp
c000552f:	75 1e                	jne    c000554f <f_mkfs+0x132>
c0005531:	83 ec 0c             	sub    esp,0xc
c0005534:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c000553b:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005540:	50                   	push   eax
c0005541:	e8 da 06 00 00       	call   c0005c20 <ff_memalloc>
c0005546:	83 c4 10             	add    esp,0x10
c0005549:	89 c3                	mov    ebx,eax
c000554b:	85 c0                	test   eax,eax
c000554d:	74 d0                	je     c000551f <f_mkfs+0x102>
c000554f:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005557:	52                   	push   edx
c0005558:	8d 44 24 48          	lea    eax,[esp+0x48]
c000555c:	50                   	push   eax
c000555d:	6a 01                	push   0x1
c000555f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005563:	e8 50 c8 ff ff       	call   c0001db8 <disk_ioctl>
c0005568:	83 c4 10             	add    esp,0x10
c000556b:	85 c0                	test   eax,eax
c000556d:	0f 85 49 06 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005573:	89 f0                	mov    eax,esi
c0005575:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000557d:	83 e0 08             	and    eax,0x8
c0005580:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0005584:	75 18                	jne    c000559e <f_mkfs+0x181>
c0005586:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000558a:	83 f8 3f             	cmp    eax,0x3f
c000558d:	76 0f                	jbe    c000559e <f_mkfs+0x181>
c000558f:	83 e8 3f             	sub    eax,0x3f
c0005592:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c000559a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000559e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055a2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055a6:	83 f8 7f             	cmp    eax,0x7f
c00055a9:	0f 86 5b 02 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c00055af:	b9 80 00 00 00       	mov    ecx,0x80
c00055b4:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055ba:	77 05                	ja     c00055c1 <f_mkfs+0x1a4>
c00055bc:	c1 ef 09             	shr    edi,0x9
c00055bf:	89 f9                	mov    ecx,edi
c00055c1:	89 f0                	mov    eax,esi
c00055c3:	89 f7                	mov    edi,esi
c00055c5:	83 e0 01             	and    eax,0x1
c00055c8:	83 e7 02             	and    edi,0x2
c00055cb:	0f b6 c0             	movzx  eax,al
c00055ce:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00055d2:	74 0a                	je     c00055de <f_mkfs+0x1c1>
c00055d4:	85 c0                	test   eax,eax
c00055d6:	0f 84 4f 01 00 00    	je     c000572b <f_mkfs+0x30e>
c00055dc:	eb 37                	jmp    c0005615 <f_mkfs+0x1f8>
c00055de:	be 13 00 00 00       	mov    esi,0x13
c00055e3:	85 c0                	test   eax,eax
c00055e5:	75 2e                	jne    c0005615 <f_mkfs+0x1f8>
c00055e7:	e9 e7 05 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c00055ec:	83 f8 02             	cmp    eax,0x2
c00055ef:	0f 85 0d 02 00 00    	jne    c0005802 <f_mkfs+0x3e5>
c00055f5:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00055fb:	0f 86 e4 01 00 00    	jbe    c00057e5 <f_mkfs+0x3c8>
c0005601:	85 c9                	test   ecx,ecx
c0005603:	0f 85 dc 05 00 00    	jne    c0005be5 <f_mkfs+0x7c8>
c0005609:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000560c:	83 f9 40             	cmp    ecx,0x40
c000560f:	0f 87 e0 05 00 00    	ja     c0005bf5 <f_mkfs+0x7d8>
c0005615:	89 cf                	mov    edi,ecx
c0005617:	85 c9                	test   ecx,ecx
c0005619:	75 1c                	jne    c0005637 <f_mkfs+0x21a>
c000561b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000561f:	b8 60 f8 01 c0       	mov    eax,0xc001f860
c0005624:	c1 ee 0c             	shr    esi,0xc
c0005627:	bf 01 00 00 00       	mov    edi,0x1
c000562c:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000562f:	85 d2                	test   edx,edx
c0005631:	0f 85 63 01 00 00    	jne    c000579a <f_mkfs+0x37d>
c0005637:	31 d2                	xor    edx,edx
c0005639:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000563d:	f7 f7                	div    edi
c000563f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005644:	0f 86 62 01 00 00    	jbe    c00057ac <f_mkfs+0x38f>
c000564a:	83 c0 02             	add    eax,0x2
c000564d:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c0005652:	01 c0                	add    eax,eax
c0005654:	05 ff 01 00 00       	add    eax,0x1ff
c0005659:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005661:	c1 e8 09             	shr    eax,0x9
c0005664:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005668:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000566c:	c1 e0 05             	shl    eax,0x5
c000566f:	c1 e8 09             	shr    eax,0x9
c0005672:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005676:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000567b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000567f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005683:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005687:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000568b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000568f:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005694:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005698:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c000569c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056a0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056a4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056a8:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056ac:	f7 d8                	neg    eax
c00056ae:	21 c6                	and    esi,eax
c00056b0:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056b5:	29 d6                	sub    esi,edx
c00056b7:	83 f8 03             	cmp    eax,0x3
c00056ba:	0f 85 ff 00 00 00    	jne    c00057bf <f_mkfs+0x3a2>
c00056c0:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00056c4:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00056c8:	89 f8                	mov    eax,edi
c00056ca:	c1 e0 04             	shl    eax,0x4
c00056cd:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00056d1:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00056d5:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00056d9:	0f 82 2b 01 00 00    	jb     c000580a <f_mkfs+0x3ed>
c00056df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00056e7:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00056eb:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00056f0:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00056f4:	29 d0                	sub    eax,edx
c00056f6:	31 d2                	xor    edx,edx
c00056f8:	f7 f7                	div    edi
c00056fa:	89 c6                	mov    esi,eax
c00056fc:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005701:	83 f8 03             	cmp    eax,0x3
c0005704:	0f 85 e2 fe ff ff    	jne    c00055ec <f_mkfs+0x1cf>
c000570a:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005710:	0f 87 03 01 00 00    	ja     c0005819 <f_mkfs+0x3fc>
c0005716:	85 c9                	test   ecx,ecx
c0005718:	0f 85 ec 00 00 00    	jne    c000580a <f_mkfs+0x3ed>
c000571e:	83 ff 01             	cmp    edi,0x1
c0005721:	0f 86 e3 00 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c0005727:	d1 ef                	shr    edi,1
c0005729:	89 f9                	mov    ecx,edi
c000572b:	89 ce                	mov    esi,ecx
c000572d:	85 c9                	test   ecx,ecx
c000572f:	75 25                	jne    c0005756 <f_mkfs+0x339>
c0005731:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005735:	b8 70 f8 01 c0       	mov    eax,0xc001f870
c000573a:	c1 ee 11             	shr    esi,0x11
c000573d:	b9 01 00 00 00       	mov    ecx,0x1
c0005742:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005745:	85 d2                	test   edx,edx
c0005747:	74 0b                	je     c0005754 <f_mkfs+0x337>
c0005749:	83 c0 02             	add    eax,0x2
c000574c:	39 f2                	cmp    edx,esi
c000574e:	77 04                	ja     c0005754 <f_mkfs+0x337>
c0005750:	01 c9                	add    ecx,ecx
c0005752:	eb ee                	jmp    c0005742 <f_mkfs+0x325>
c0005754:	31 f6                	xor    esi,esi
c0005756:	31 d2                	xor    edx,edx
c0005758:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000575c:	f7 f1                	div    ecx
c000575e:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005765:	2d f6 ff 00 00       	sub    eax,0xfff6
c000576a:	c1 ea 09             	shr    edx,0x9
c000576d:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005772:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005776:	0f 87 8e 00 00 00    	ja     c000580a <f_mkfs+0x3ed>
c000577c:	89 cf                	mov    edi,ecx
c000577e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c0005786:	89 f1                	mov    ecx,esi
c0005788:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005790:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c0005795:	e9 dc fe ff ff       	jmp    c0005676 <f_mkfs+0x259>
c000579a:	83 c0 02             	add    eax,0x2
c000579d:	39 f2                	cmp    edx,esi
c000579f:	0f 87 92 fe ff ff    	ja     c0005637 <f_mkfs+0x21a>
c00057a5:	01 ff                	add    edi,edi
c00057a7:	e9 80 fe ff ff       	jmp    c000562c <f_mkfs+0x20f>
c00057ac:	8d 04 40             	lea    eax,[eax+eax*2]
c00057af:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057b4:	40                   	inc    eax
c00057b5:	d1 e8                	shr    eax,1
c00057b7:	83 c0 03             	add    eax,0x3
c00057ba:	e9 95 fe ff ff       	jmp    c0005654 <f_mkfs+0x237>
c00057bf:	31 d2                	xor    edx,edx
c00057c1:	89 f0                	mov    eax,esi
c00057c3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057c7:	85 d2                	test   edx,edx
c00057c9:	74 09                	je     c00057d4 <f_mkfs+0x3b7>
c00057cb:	4e                   	dec    esi
c00057cc:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00057d0:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00057d4:	89 f0                	mov    eax,esi
c00057d6:	31 d2                	xor    edx,edx
c00057d8:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057dc:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00057e0:	e9 e3 fe ff ff       	jmp    c00056c8 <f_mkfs+0x2ab>
c00057e5:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00057eb:	77 2c                	ja     c0005819 <f_mkfs+0x3fc>
c00057ed:	85 c9                	test   ecx,ecx
c00057ef:	75 19                	jne    c000580a <f_mkfs+0x3ed>
c00057f1:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057f4:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00057fa:	0f 86 15 fe ff ff    	jbe    c0005615 <f_mkfs+0x1f8>
c0005800:	eb 08                	jmp    c000580a <f_mkfs+0x3ed>
c0005802:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005808:	76 0a                	jbe    c0005814 <f_mkfs+0x3f7>
c000580a:	be 0e 00 00 00       	mov    esi,0xe
c000580f:	e9 bf 03 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c0005814:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005819:	31 d2                	xor    edx,edx
c000581b:	b9 00 02 00 00       	mov    ecx,0x200
c0005820:	89 d8                	mov    eax,ebx
c0005822:	e8 f1 c5 ff ff       	call   c0001e18 <mem_set>
c0005827:	b9 0b 00 00 00       	mov    ecx,0xb
c000582c:	ba 12 f8 01 c0       	mov    edx,0xc001f812
c0005831:	89 d8                	mov    eax,ebx
c0005833:	e8 cb c5 ff ff       	call   c0001e03 <mem_cpy>
c0005838:	8d 43 0b             	lea    eax,[ebx+0xb]
c000583b:	ba 00 02 00 00       	mov    edx,0x200
c0005840:	e8 b7 c5 ff ff       	call   c0001dfc <st_word>
c0005845:	89 f8                	mov    eax,edi
c0005847:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000584c:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c000584f:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005852:	e8 a5 c5 ff ff       	call   c0001dfc <st_word>
c0005857:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000585b:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000585e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005863:	83 f8 03             	cmp    eax,0x3
c0005866:	75 08                	jne    c0005870 <f_mkfs+0x453>
c0005868:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005870:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005874:	8d 43 11             	lea    eax,[ebx+0x11]
c0005877:	e8 80 c5 ff ff       	call   c0001dfc <st_word>
c000587c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005880:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005886:	77 0a                	ja     c0005892 <f_mkfs+0x475>
c0005888:	8d 43 13             	lea    eax,[ebx+0x13]
c000588b:	e8 6c c5 ff ff       	call   c0001dfc <st_word>
c0005890:	eb 08                	jmp    c000589a <f_mkfs+0x47d>
c0005892:	8d 43 20             	lea    eax,[ebx+0x20]
c0005895:	e8 66 c5 ff ff       	call   c0001e00 <st_dword>
c000589a:	8d 43 18             	lea    eax,[ebx+0x18]
c000589d:	ba 3f 00 00 00       	mov    edx,0x3f
c00058a2:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058a6:	e8 51 c5 ff ff       	call   c0001dfc <st_word>
c00058ab:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058ae:	ba ff 00 00 00       	mov    edx,0xff
c00058b3:	e8 44 c5 ff ff       	call   c0001dfc <st_word>
c00058b8:	8d 43 1c             	lea    eax,[ebx+0x1c]
c00058bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bf:	e8 3c c5 ff ff       	call   c0001e00 <st_dword>
c00058c4:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058c9:	83 f8 03             	cmp    eax,0x3
c00058cc:	75 57                	jne    c0005925 <f_mkfs+0x508>
c00058ce:	8d 43 43             	lea    eax,[ebx+0x43]
c00058d1:	ba 00 00 21 50       	mov    edx,0x50210000
c00058d6:	e8 25 c5 ff ff       	call   c0001e00 <st_dword>
c00058db:	8d 43 24             	lea    eax,[ebx+0x24]
c00058de:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00058e2:	e8 19 c5 ff ff       	call   c0001e00 <st_dword>
c00058e7:	8d 43 2c             	lea    eax,[ebx+0x2c]
c00058ea:	ba 02 00 00 00       	mov    edx,0x2
c00058ef:	e8 0c c5 ff ff       	call   c0001e00 <st_dword>
c00058f4:	8d 43 30             	lea    eax,[ebx+0x30]
c00058f7:	ba 01 00 00 00       	mov    edx,0x1
c00058fc:	e8 fb c4 ff ff       	call   c0001dfc <st_word>
c0005901:	8d 43 32             	lea    eax,[ebx+0x32]
c0005904:	ba 06 00 00 00       	mov    edx,0x6
c0005909:	e8 ee c4 ff ff       	call   c0001dfc <st_word>
c000590e:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005912:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005916:	8d 43 47             	lea    eax,[ebx+0x47]
c0005919:	b9 13 00 00 00       	mov    ecx,0x13
c000591e:	ba 1e f8 01 c0       	mov    edx,0xc001f81e
c0005923:	eb 2f                	jmp    c0005954 <f_mkfs+0x537>
c0005925:	8d 43 27             	lea    eax,[ebx+0x27]
c0005928:	ba 00 00 21 50       	mov    edx,0x50210000
c000592d:	e8 ce c4 ff ff       	call   c0001e00 <st_dword>
c0005932:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005937:	8d 43 16             	lea    eax,[ebx+0x16]
c000593a:	e8 bd c4 ff ff       	call   c0001dfc <st_word>
c000593f:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005943:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005947:	8d 43 2b             	lea    eax,[ebx+0x2b]
c000594a:	b9 13 00 00 00       	mov    ecx,0x13
c000594f:	ba 32 f8 01 c0       	mov    edx,0xc001f832
c0005954:	e8 aa c4 ff ff       	call   c0001e03 <mem_cpy>
c0005959:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000595f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005964:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005968:	e8 8f c4 ff ff       	call   c0001dfc <st_word>
c000596d:	6a 01                	push   0x1
c000596f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005973:	53                   	push   ebx
c0005974:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005978:	e8 25 c4 ff ff       	call   c0001da2 <disk_write>
c000597d:	83 c4 10             	add    esp,0x10
c0005980:	85 c0                	test   eax,eax
c0005982:	0f 85 34 02 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005988:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000598d:	83 f8 03             	cmp    eax,0x3
c0005990:	0f 85 98 00 00 00    	jne    c0005a2e <f_mkfs+0x611>
c0005996:	6a 01                	push   0x1
c0005998:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000599c:	83 c0 06             	add    eax,0x6
c000599f:	50                   	push   eax
c00059a0:	53                   	push   ebx
c00059a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059a5:	e8 f8 c3 ff ff       	call   c0001da2 <disk_write>
c00059aa:	b9 00 02 00 00       	mov    ecx,0x200
c00059af:	31 d2                	xor    edx,edx
c00059b1:	89 d8                	mov    eax,ebx
c00059b3:	e8 60 c4 ff ff       	call   c0001e18 <mem_set>
c00059b8:	ba 52 52 61 41       	mov    edx,0x41615252
c00059bd:	89 d8                	mov    eax,ebx
c00059bf:	e8 3c c4 ff ff       	call   c0001e00 <st_dword>
c00059c4:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c00059ca:	ba 72 72 41 61       	mov    edx,0x61417272
c00059cf:	e8 2c c4 ff ff       	call   c0001e00 <st_dword>
c00059d4:	8d 56 ff             	lea    edx,[esi-0x1]
c00059d7:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c00059dd:	e8 1e c4 ff ff       	call   c0001e00 <st_dword>
c00059e2:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c00059e8:	ba 02 00 00 00       	mov    edx,0x2
c00059ed:	e8 0e c4 ff ff       	call   c0001e00 <st_dword>
c00059f2:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059f7:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059fd:	e8 fa c3 ff ff       	call   c0001dfc <st_word>
c0005a02:	6a 01                	push   0x1
c0005a04:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005a08:	83 c0 07             	add    eax,0x7
c0005a0b:	50                   	push   eax
c0005a0c:	53                   	push   ebx
c0005a0d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a11:	e8 8c c3 ff ff       	call   c0001da2 <disk_write>
c0005a16:	83 c4 20             	add    esp,0x20
c0005a19:	6a 01                	push   0x1
c0005a1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005a1f:	40                   	inc    eax
c0005a20:	50                   	push   eax
c0005a21:	53                   	push   ebx
c0005a22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a26:	e8 77 c3 ff ff       	call   c0001da2 <disk_write>
c0005a2b:	83 c4 10             	add    esp,0x10
c0005a2e:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a32:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a36:	c1 e8 09             	shr    eax,0x9
c0005a39:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a43:	31 d2                	xor    edx,edx
c0005a45:	89 d8                	mov    eax,ebx
c0005a47:	e8 cc c3 ff ff       	call   c0001e18 <mem_set>
c0005a4c:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a51:	31 c9                	xor    ecx,ecx
c0005a53:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005a5b:	83 f8 01             	cmp    eax,0x1
c0005a5e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005a62:	0f 94 c1             	sete   cl
c0005a65:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005a69:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005a6d:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005a75:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005a7d:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005a82:	75 21                	jne    c0005aa5 <f_mkfs+0x688>
c0005a84:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005a89:	89 d8                	mov    eax,ebx
c0005a8b:	e8 70 c3 ff ff       	call   c0001e00 <st_dword>
c0005a90:	8d 43 04             	lea    eax,[ebx+0x4]
c0005a93:	83 ca ff             	or     edx,0xffffffff
c0005a96:	e8 65 c3 ff ff       	call   c0001e00 <st_dword>
c0005a9b:	8d 43 08             	lea    eax,[ebx+0x8]
c0005a9e:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005aa3:	eb 06                	jmp    c0005aab <f_mkfs+0x68e>
c0005aa5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005aa9:	89 d8                	mov    eax,ebx
c0005aab:	e8 50 c3 ff ff       	call   c0001e00 <st_dword>
c0005ab0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ab4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ab8:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005abc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac0:	39 ce                	cmp    esi,ecx
c0005ac2:	76 02                	jbe    c0005ac6 <f_mkfs+0x6a9>
c0005ac4:	89 ce                	mov    esi,ecx
c0005ac6:	56                   	push   esi
c0005ac7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005acb:	53                   	push   ebx
c0005acc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ad0:	e8 cd c2 ff ff       	call   c0001da2 <disk_write>
c0005ad5:	83 c4 10             	add    esp,0x10
c0005ad8:	85 c0                	test   eax,eax
c0005ada:	0f 85 dc 00 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005ae0:	31 d2                	xor    edx,edx
c0005ae2:	b9 00 02 00 00       	mov    ecx,0x200
c0005ae7:	89 d8                	mov    eax,ebx
c0005ae9:	e8 2a c3 ff ff       	call   c0001e18 <mem_set>
c0005aee:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005af2:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005af6:	75 c0                	jne    c0005ab8 <f_mkfs+0x69b>
c0005af8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005afc:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005b04:	40                   	inc    eax
c0005b05:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b09:	0f 87 6e ff ff ff    	ja     c0005a7d <f_mkfs+0x660>
c0005b0f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b14:	83 f8 03             	cmp    eax,0x3
c0005b17:	74 04                	je     c0005b1d <f_mkfs+0x700>
c0005b19:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005b1d:	89 fe                	mov    esi,edi
c0005b1f:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b23:	76 04                	jbe    c0005b29 <f_mkfs+0x70c>
c0005b25:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b29:	56                   	push   esi
c0005b2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b2e:	53                   	push   ebx
c0005b2f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b33:	e8 6a c2 ff ff       	call   c0001da2 <disk_write>
c0005b38:	83 c4 10             	add    esp,0x10
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	75 7d                	jne    c0005bbc <f_mkfs+0x79f>
c0005b3f:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b43:	29 f7                	sub    edi,esi
c0005b45:	75 d6                	jne    c0005b1d <f_mkfs+0x700>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b51:	83 f8 03             	cmp    eax,0x3
c0005b54:	74 1e                	je     c0005b74 <f_mkfs+0x757>
c0005b56:	b9 06 00 00 00       	mov    ecx,0x6
c0005b5b:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b63:	77 0f                	ja     c0005b74 <f_mkfs+0x757>
c0005b65:	b9 04 00 00 00       	mov    ecx,0x4
c0005b6a:	83 f8 02             	cmp    eax,0x2
c0005b6d:	74 05                	je     c0005b74 <f_mkfs+0x757>
c0005b6f:	b9 01 00 00 00       	mov    ecx,0x1
c0005b74:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005b79:	75 2a                	jne    c0005ba5 <f_mkfs+0x788>
c0005b7b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005b7f:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005b87:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005b8b:	83 ec 0c             	sub    esp,0xc
c0005b8e:	53                   	push   ebx
c0005b8f:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005b93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b97:	e8 89 d2 ff ff       	call   c0002e25 <create_partition>
c0005b9c:	83 c4 10             	add    esp,0x10
c0005b9f:	89 c6                	mov    esi,eax
c0005ba1:	85 c0                	test   eax,eax
c0005ba3:	75 2e                	jne    c0005bd3 <f_mkfs+0x7b6>
c0005ba5:	31 f6                	xor    esi,esi
c0005ba7:	50                   	push   eax
c0005ba8:	6a 00                	push   0x0
c0005baa:	6a 00                	push   0x0
c0005bac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bb0:	e8 03 c2 ff ff       	call   c0001db8 <disk_ioctl>
c0005bb5:	83 c4 10             	add    esp,0x10
c0005bb8:	85 c0                	test   eax,eax
c0005bba:	74 17                	je     c0005bd3 <f_mkfs+0x7b6>
c0005bbc:	85 ed                	test   ebp,ebp
c0005bbe:	75 0c                	jne    c0005bcc <f_mkfs+0x7af>
c0005bc0:	83 ec 0c             	sub    esp,0xc
c0005bc3:	53                   	push   ebx
c0005bc4:	e8 6f 00 00 00       	call   c0005c38 <ff_memfree>
c0005bc9:	83 c4 10             	add    esp,0x10
c0005bcc:	be 01 00 00 00       	mov    esi,0x1
c0005bd1:	eb 40                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005bd3:	85 ed                	test   ebp,ebp
c0005bd5:	75 3c                	jne    c0005c13 <f_mkfs+0x7f6>
c0005bd7:	83 ec 0c             	sub    esp,0xc
c0005bda:	53                   	push   ebx
c0005bdb:	e8 58 00 00 00       	call   c0005c38 <ff_memfree>
c0005be0:	83 c4 10             	add    esp,0x10
c0005be3:	eb 2e                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005be5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bea:	0f 85 3b fb ff ff    	jne    c000572b <f_mkfs+0x30e>
c0005bf0:	e9 15 fc ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005bf5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bfa:	0f 85 31 fb ff ff    	jne    c0005731 <f_mkfs+0x314>
c0005c00:	89 cf                	mov    edi,ecx
c0005c02:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c08:	0f 86 29 fa ff ff    	jbe    c0005637 <f_mkfs+0x21a>
c0005c0e:	e9 f7 fb ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005c13:	83 c4 5c             	add    esp,0x5c
c0005c16:	89 f0                	mov    eax,esi
c0005c18:	5b                   	pop    ebx
c0005c19:	5e                   	pop    esi
c0005c1a:	5f                   	pop    edi
c0005c1b:	5d                   	pop    ebp
c0005c1c:	c3                   	ret    
c0005c1d:	66 90                	xchg   ax,ax
c0005c1f:	90                   	nop

c0005c20 <ff_memalloc>:
c0005c20:	83 ec 0c             	sub    esp,0xc
c0005c23:	83 ec 0c             	sub    esp,0xc
c0005c26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c2a:	e8 7f 1e 00 00       	call   c0007aae <malloc>
c0005c2f:	83 c4 10             	add    esp,0x10
c0005c32:	83 c4 0c             	add    esp,0xc
c0005c35:	c3                   	ret    
c0005c36:	66 90                	xchg   ax,ax

c0005c38 <ff_memfree>:
c0005c38:	83 ec 0c             	sub    esp,0xc
c0005c3b:	83 ec 0c             	sub    esp,0xc
c0005c3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c42:	e8 77 1e 00 00       	call   c0007abe <free>
c0005c47:	83 c4 10             	add    esp,0x10
c0005c4a:	90                   	nop
c0005c4b:	83 c4 0c             	add    esp,0xc
c0005c4e:	c3                   	ret    
c0005c4f:	90                   	nop

c0005c50 <ff_uni2oem>:
c0005c50:	83 ec 14             	sub    esp,0x14
c0005c53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c57:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c5b:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c62:	c7 44 24 0c 60 fc 01 c0 	mov    DWORD PTR [esp+0xc],0xc001fc60
c0005c6a:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005c6f:	77 0b                	ja     c0005c7c <ff_uni2oem+0x2c>
c0005c71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c75:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005c7a:	eb 68                	jmp    c0005ce4 <ff_uni2oem+0x94>
c0005c7c:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005c84:	77 5e                	ja     c0005ce4 <ff_uni2oem+0x94>
c0005c86:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005c8a:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005c8f:	75 53                	jne    c0005ce4 <ff_uni2oem+0x94>
c0005c91:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c98:	eb 12                	jmp    c0005cac <ff_uni2oem+0x5c>
c0005c9a:	66 90                	xchg   ax,ax
c0005c9c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ca1:	83 c0 01             	add    eax,0x1
c0005ca4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0005cac:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cb1:	83 f8 7f             	cmp    eax,0x7f
c0005cb4:	77 1e                	ja     c0005cd4 <ff_uni2oem+0x84>
c0005cb6:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cbb:	01 c0                	add    eax,eax
c0005cbd:	89 c2                	mov    edx,eax
c0005cbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cc3:	01 d0                	add    eax,edx
c0005cc5:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cc8:	0f b7 c0             	movzx  eax,ax
c0005ccb:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005ccf:	75 cb                	jne    c0005c9c <ff_uni2oem+0x4c>
c0005cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0005cd4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd9:	83 e8 80             	sub    eax,0xffffff80
c0005cdc:	0f b6 c0             	movzx  eax,al
c0005cdf:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ce4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ce9:	83 c4 14             	add    esp,0x14
c0005cec:	c3                   	ret    
c0005ced:	8d 76 00             	lea    esi,[esi+0x0]

c0005cf0 <ff_oem2uni>:
c0005cf0:	83 ec 18             	sub    esp,0x18
c0005cf3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005cf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005cfb:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d00:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d04:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d0b:	c7 44 24 10 60 fc 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fc60
c0005d13:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d18:	83 f8 7f             	cmp    eax,0x7f
c0005d1b:	77 0b                	ja     c0005d28 <ff_oem2uni+0x38>
c0005d1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d21:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d26:	eb 34                	jmp    c0005d5c <ff_oem2uni+0x6c>
c0005d28:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d2c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d31:	75 29                	jne    c0005d5c <ff_oem2uni+0x6c>
c0005d33:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d38:	3d ff 00 00 00       	cmp    eax,0xff
c0005d3d:	77 1d                	ja     c0005d5c <ff_oem2uni+0x6c>
c0005d3f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d44:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d49:	01 c0                	add    eax,eax
c0005d4b:	89 c2                	mov    edx,eax
c0005d4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d51:	01 d0                	add    eax,edx
c0005d53:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d56:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d5b:	90                   	nop
c0005d5c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d61:	83 c4 18             	add    esp,0x18
c0005d64:	c3                   	ret    
c0005d65:	8d 76 00             	lea    esi,[esi+0x0]

c0005d68 <ff_wtoupper>:
c0005d68:	83 ec 10             	sub    esp,0x10
c0005d6b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005d73:	0f 87 ab 01 00 00    	ja     c0005f24 <ff_wtoupper+0x1bc>
c0005d79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d7d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005d82:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005d87:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005d8c:	77 0a                	ja     c0005d98 <ff_wtoupper+0x30>
c0005d8e:	b8 60 fa 01 c0       	mov    eax,0xc001fa60
c0005d93:	eb 0b                	jmp    c0005da0 <ff_wtoupper+0x38>
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]
c0005d98:	b8 a0 f9 01 c0       	mov    eax,0xc001f9a0
c0005d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0005da0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005da4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005da8:	8d 50 02             	lea    edx,[eax+0x2]
c0005dab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005daf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005db2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005db7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dbc:	85 c0                	test   eax,eax
c0005dbe:	0f 84 54 01 00 00    	je     c0005f18 <ff_wtoupper+0x1b0>
c0005dc4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005dc9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dce:	39 c2                	cmp    edx,eax
c0005dd0:	0f 82 42 01 00 00    	jb     c0005f18 <ff_wtoupper+0x1b0>
c0005dd6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dda:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005de1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de4:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005de9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005dee:	c1 e8 08             	shr    eax,0x8
c0005df1:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005df6:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005dfb:	0f b6 c0             	movzx  eax,al
c0005dfe:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e03:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e08:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e0d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e12:	01 ca                	add    edx,ecx
c0005e14:	39 d0                	cmp    eax,edx
c0005e16:	0f 8d d8 00 00 00    	jge    c0005ef4 <ff_wtoupper+0x18c>
c0005e1c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e21:	83 f8 08             	cmp    eax,0x8
c0005e24:	0f 87 ea 00 00 00    	ja     c0005f14 <ff_wtoupper+0x1ac>
c0005e2a:	8b 04 85 60 f9 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe06a0]
c0005e31:	ff e0                	jmp    eax
c0005e33:	90                   	nop
c0005e34:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e39:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e3e:	29 c2                	sub    edx,eax
c0005e40:	89 d0                	mov    eax,edx
c0005e42:	01 c0                	add    eax,eax
c0005e44:	89 c2                	mov    edx,eax
c0005e46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e4a:	01 d0                	add    eax,edx
c0005e4c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e4f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e54:	e9 97 00 00 00       	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e59:	8d 76 00             	lea    esi,[esi+0x0]
c0005e5c:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e65:	89 d1                	mov    ecx,edx
c0005e67:	29 c1                	sub    ecx,eax
c0005e69:	89 c8                	mov    eax,ecx
c0005e6b:	83 e0 01             	and    eax,0x1
c0005e6e:	89 c2                	mov    edx,eax
c0005e70:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e75:	29 d0                	sub    eax,edx
c0005e77:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e7c:	eb 72                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e7e:	66 90                	xchg   ax,ax
c0005e80:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e85:	83 e8 10             	sub    eax,0x10
c0005e88:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e8d:	eb 61                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e8f:	90                   	nop
c0005e90:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e95:	83 e8 20             	sub    eax,0x20
c0005e98:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e9d:	eb 51                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e9f:	90                   	nop
c0005ea0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea5:	83 e8 30             	sub    eax,0x30
c0005ea8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ead:	eb 41                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005eaf:	90                   	nop
c0005eb0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb5:	83 e8 1a             	sub    eax,0x1a
c0005eb8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ebd:	eb 31                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ebf:	90                   	nop
c0005ec0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec5:	83 c0 08             	add    eax,0x8
c0005ec8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ecd:	eb 21                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ecf:	90                   	nop
c0005ed0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed5:	83 e8 50             	sub    eax,0x50
c0005ed8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005edd:	eb 11                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005edf:	90                   	nop
c0005ee0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee5:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005eea:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eef:	90                   	nop
c0005ef0:	eb 22                	jmp    c0005f14 <ff_wtoupper+0x1ac>
c0005ef2:	66 90                	xchg   ax,ax
c0005ef4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005ef9:	85 c0                	test   eax,eax
c0005efb:	0f 85 a3 fe ff ff    	jne    c0005da4 <ff_wtoupper+0x3c>
c0005f01:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f06:	01 c0                	add    eax,eax
c0005f08:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f0c:	e9 93 fe ff ff       	jmp    c0005da4 <ff_wtoupper+0x3c>
c0005f11:	8d 76 00             	lea    esi,[esi+0x0]
c0005f14:	90                   	nop
c0005f15:	8d 76 00             	lea    esi,[esi+0x0]
c0005f18:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f1d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f21:	8d 76 00             	lea    esi,[esi+0x0]
c0005f24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f28:	83 c4 10             	add    esp,0x10
c0005f2b:	c3                   	ret    

c0005f2c <utf2ucs>:
c0005f2c:	57                   	push   edi
c0005f2d:	31 c9                	xor    ecx,ecx
c0005f2f:	56                   	push   esi
c0005f30:	89 d7                	mov    edi,edx
c0005f32:	53                   	push   ebx
c0005f33:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f37:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f3b:	89 de                	mov    esi,ebx
c0005f3d:	c1 fe 08             	sar    esi,0x8
c0005f40:	89 f2                	mov    edx,esi
c0005f42:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f45:	41                   	inc    ecx
c0005f46:	85 db                	test   ebx,ebx
c0005f48:	75 e9                	jne    c0005f33 <utf2ucs+0x7>
c0005f4a:	5b                   	pop    ebx
c0005f4b:	5e                   	pop    esi
c0005f4c:	5f                   	pop    edi
c0005f4d:	c3                   	ret    

c0005f4e <ucs2utfn>:
c0005f4e:	83 e1 fe             	and    ecx,0xfffffffe
c0005f51:	01 d1                	add    ecx,edx
c0005f53:	39 d1                	cmp    ecx,edx
c0005f55:	75 04                	jne    c0005f5b <ucs2utfn+0xd>
c0005f57:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f5a:	c3                   	ret    
c0005f5b:	57                   	push   edi
c0005f5c:	56                   	push   esi
c0005f5d:	53                   	push   ebx
c0005f5e:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f61:	83 c2 02             	add    edx,0x2
c0005f64:	89 de                	mov    esi,ebx
c0005f66:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f6a:	c1 e6 08             	shl    esi,0x8
c0005f6d:	09 f3                	or     ebx,esi
c0005f6f:	83 fb 3b             	cmp    ebx,0x3b
c0005f72:	74 50                	je     c0005fc4 <ucs2utfn+0x76>
c0005f74:	83 fb 7f             	cmp    ebx,0x7f
c0005f77:	7f 05                	jg     c0005f7e <ucs2utfn+0x30>
c0005f79:	88 18                	mov    BYTE PTR [eax],bl
c0005f7b:	40                   	inc    eax
c0005f7c:	eb 42                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005f7e:	89 de                	mov    esi,ebx
c0005f80:	89 df                	mov    edi,ebx
c0005f82:	c1 fe 06             	sar    esi,0x6
c0005f85:	83 e7 3f             	and    edi,0x3f
c0005f88:	83 cf 80             	or     edi,0xffffff80
c0005f8b:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005f91:	7f 12                	jg     c0005fa5 <ucs2utfn+0x57>
c0005f93:	83 ce c0             	or     esi,0xffffffc0
c0005f96:	83 c0 02             	add    eax,0x2
c0005f99:	89 f3                	mov    ebx,esi
c0005f9b:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005f9e:	89 fb                	mov    ebx,edi
c0005fa0:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fa3:	eb 1b                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005fa5:	c1 fb 0c             	sar    ebx,0xc
c0005fa8:	83 e6 3f             	and    esi,0x3f
c0005fab:	83 cb e0             	or     ebx,0xffffffe0
c0005fae:	83 ce 80             	or     esi,0xffffff80
c0005fb1:	88 18                	mov    BYTE PTR [eax],bl
c0005fb3:	89 f3                	mov    ebx,esi
c0005fb5:	83 c0 03             	add    eax,0x3
c0005fb8:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fbb:	89 fb                	mov    ebx,edi
c0005fbd:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fc0:	39 d1                	cmp    ecx,edx
c0005fc2:	75 9a                	jne    c0005f5e <ucs2utfn+0x10>
c0005fc4:	5b                   	pop    ebx
c0005fc5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005fc8:	5e                   	pop    esi
c0005fc9:	5f                   	pop    edi
c0005fca:	c3                   	ret    

c0005fcb <isjoliet>:
c0005fcb:	31 d2                	xor    edx,edx
c0005fcd:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005fd0:	75 26                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd2:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005fd6:	75 20                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd8:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0005fdc:	ba 02 00 00 00       	mov    edx,0x2
c0005fe1:	83 f8 43             	cmp    eax,0x43
c0005fe4:	74 12                	je     c0005ff8 <isjoliet+0x2d>
c0005fe6:	ba 03 00 00 00       	mov    edx,0x3
c0005feb:	83 f8 45             	cmp    eax,0x45
c0005fee:	74 08                	je     c0005ff8 <isjoliet+0x2d>
c0005ff0:	31 d2                	xor    edx,edx
c0005ff2:	83 f8 40             	cmp    eax,0x40
c0005ff5:	0f 94 c2             	sete   dl
c0005ff8:	89 d0                	mov    eax,edx
c0005ffa:	c3                   	ret    

c0005ffb <htohl_32>:
c0005ffb:	8b 00                	mov    eax,DWORD PTR [eax]
c0005ffd:	c3                   	ret    

c0005ffe <iso_733>:
c0005ffe:	eb fb                	jmp    c0005ffb <htohl_32>

c0006000 <bgrad_cache>:
c0006000:	83 fa 0e             	cmp    edx,0xe
c0006003:	77 16                	ja     c000601b <bgrad_cache+0x1b>
c0006005:	53                   	push   ebx
c0006006:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006009:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c000600d:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0006010:	42                   	inc    edx
c0006011:	83 fa 0f             	cmp    edx,0xf
c0006014:	75 f3                	jne    c0006009 <bgrad_cache+0x9>
c0006016:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006019:	5b                   	pop    ebx
c000601a:	c3                   	ret    
c000601b:	c3                   	ret    

c000601c <ucscompare>:
c000601c:	55                   	push   ebp
c000601d:	57                   	push   edi
c000601e:	89 c7                	mov    edi,eax
c0006020:	56                   	push   esi
c0006021:	89 d6                	mov    esi,edx
c0006023:	53                   	push   ebx
c0006024:	31 d2                	xor    edx,edx
c0006026:	83 ec 1c             	sub    esp,0x1c
c0006029:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c000602d:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0006032:	c1 e3 08             	shl    ebx,0x8
c0006035:	09 c3                	or     ebx,eax
c0006037:	39 ca                	cmp    edx,ecx
c0006039:	7d 42                	jge    c000607d <ucscompare+0x61>
c000603b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000603f:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006044:	c1 e0 08             	shl    eax,0x8
c0006047:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000604b:	09 e8                	or     eax,ebp
c000604d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006051:	83 f8 3b             	cmp    eax,0x3b
c0006054:	74 27                	je     c000607d <ucscompare+0x61>
c0006056:	83 ec 0c             	sub    esp,0xc
c0006059:	50                   	push   eax
c000605a:	e8 f1 a8 ff ff       	call   c0000950 <tolower>
c000605f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006062:	89 c5                	mov    ebp,eax
c0006064:	e8 e7 a8 ff ff       	call   c0000950 <tolower>
c0006069:	83 c4 10             	add    esp,0x10
c000606c:	39 c5                	cmp    ebp,eax
c000606e:	75 20                	jne    c0006090 <ucscompare+0x74>
c0006070:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006074:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006078:	83 c2 02             	add    edx,0x2
c000607b:	eb ac                	jmp    c0006029 <ucscompare+0xd>
c000607d:	85 db                	test   ebx,ebx
c000607f:	0f 95 c2             	setne  dl
c0006082:	31 c0                	xor    eax,eax
c0006084:	83 fb 2f             	cmp    ebx,0x2f
c0006087:	0f 95 c0             	setne  al
c000608a:	21 d0                	and    eax,edx
c000608c:	f7 d8                	neg    eax
c000608e:	eb 03                	jmp    c0006093 <ucscompare+0x77>
c0006090:	83 c8 ff             	or     eax,0xffffffff
c0006093:	83 c4 1c             	add    esp,0x1c
c0006096:	5b                   	pop    ebx
c0006097:	5e                   	pop    esi
c0006098:	5f                   	pop    edi
c0006099:	5d                   	pop    ebp
c000609a:	c3                   	ret    

c000609b <fncompare>:
c000609b:	55                   	push   ebp
c000609c:	57                   	push   edi
c000609d:	89 c7                	mov    edi,eax
c000609f:	56                   	push   esi
c00060a0:	89 ce                	mov    esi,ecx
c00060a2:	53                   	push   ebx
c00060a3:	31 db                	xor    ebx,ebx
c00060a5:	83 ec 1c             	sub    esp,0x1c
c00060a8:	39 d3                	cmp    ebx,edx
c00060aa:	7d 45                	jge    c00060f1 <fncompare+0x56>
c00060ac:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060b0:	83 f8 3b             	cmp    eax,0x3b
c00060b3:	74 3c                	je     c00060f1 <fncompare+0x56>
c00060b5:	83 f8 2e             	cmp    eax,0x2e
c00060b8:	75 0e                	jne    c00060c8 <fncompare+0x2d>
c00060ba:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060bd:	39 d9                	cmp    ecx,ebx
c00060bf:	74 30                	je     c00060f1 <fncompare+0x56>
c00060c1:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060c6:	74 29                	je     c00060f1 <fncompare+0x56>
c00060c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060cc:	83 ec 0c             	sub    esp,0xc
c00060cf:	50                   	push   eax
c00060d0:	e8 7b a8 ff ff       	call   c0000950 <tolower>
c00060d5:	89 c5                	mov    ebp,eax
c00060d7:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00060db:	89 04 24             	mov    DWORD PTR [esp],eax
c00060de:	e8 6d a8 ff ff       	call   c0000950 <tolower>
c00060e3:	83 c4 10             	add    esp,0x10
c00060e6:	39 c5                	cmp    ebp,eax
c00060e8:	75 1e                	jne    c0006108 <fncompare+0x6d>
c00060ea:	43                   	inc    ebx
c00060eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00060ef:	eb b7                	jmp    c00060a8 <fncompare+0xd>
c00060f1:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00060f5:	85 d2                	test   edx,edx
c00060f7:	0f 95 c1             	setne  cl
c00060fa:	31 c0                	xor    eax,eax
c00060fc:	83 fa 2f             	cmp    edx,0x2f
c00060ff:	0f 95 c0             	setne  al
c0006102:	21 c8                	and    eax,ecx
c0006104:	f7 d8                	neg    eax
c0006106:	eb 03                	jmp    c000610b <fncompare+0x70>
c0006108:	83 c8 ff             	or     eax,0xffffffff
c000610b:	83 c4 1c             	add    esp,0x1c
c000610e:	5b                   	pop    ebx
c000610f:	5e                   	pop    esi
c0006110:	5f                   	pop    edi
c0006111:	5d                   	pop    ebp
c0006112:	c3                   	ret    

c0006113 <bclear_cache>:
c0006113:	83 ec 18             	sub    esp,0x18
c0006116:	68 60 fd 01 c0       	push   0xc001fd60
c000611b:	e8 ec 35 01 00       	call   c001970c <iso_kprintf>
c0006120:	83 c4 10             	add    esp,0x10
c0006123:	31 c0                	xor    eax,eax
c0006125:	8b 14 85 20 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdafe0]
c000612c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006132:	8b 14 85 80 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaf80]
c0006139:	40                   	inc    eax
c000613a:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006140:	83 f8 10             	cmp    eax,0x10
c0006143:	75 e0                	jne    c0006125 <bclear_cache+0x12>
c0006145:	83 c4 0c             	add    esp,0xc
c0006148:	c3                   	ret    

c0006149 <bclear>:
c0006149:	eb c8                	jmp    c0006113 <bclear_cache>

c000614b <iso_break_all>:
c000614b:	83 ec 18             	sub    esp,0x18
c000614e:	68 6e fd 01 c0       	push   0xc001fd6e
c0006153:	e8 b4 35 01 00       	call   c001970c <iso_kprintf>
c0006158:	83 c4 10             	add    esp,0x10
c000615b:	31 c0                	xor    eax,eax
c000615d:	c7 80 d0 55 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdaa30],0x1
c0006167:	05 94 00 00 00       	add    eax,0x94
c000616c:	3d 40 09 00 00       	cmp    eax,0x940
c0006171:	75 ea                	jne    c000615d <iso_break_all+0x12>
c0006173:	83 c4 0c             	add    esp,0xc
c0006176:	c3                   	ret    

c0006177 <isoReadDiscSector>:
c0006177:	83 ec 0c             	sub    esp,0xc
c000617a:	0f be 05 60 50 02 c0 	movsx  eax,BYTE PTR ds:0xc0025060
c0006181:	50                   	push   eax
c0006182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618e:	e8 1d 35 01 00       	call   c00196b0 <isoReadDiscSectorHelper>
c0006193:	83 c4 1c             	add    esp,0x1c
c0006196:	c3                   	ret    

c0006197 <bread_cache>:
c0006197:	55                   	push   ebp
c0006198:	57                   	push   edi
c0006199:	89 d7                	mov    edi,edx
c000619b:	56                   	push   esi
c000619c:	ba 0f 00 00 00       	mov    edx,0xf
c00061a1:	53                   	push   ebx
c00061a2:	89 c6                	mov    esi,eax
c00061a4:	83 ec 0c             	sub    esp,0xc
c00061a7:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061aa:	39 38                	cmp    DWORD PTR [eax],edi
c00061ac:	74 3c                	je     c00061ea <bread_cache+0x53>
c00061ae:	4a                   	dec    edx
c00061af:	83 fa ff             	cmp    edx,0xffffffff
c00061b2:	75 f3                	jne    c00061a7 <bread_cache+0x10>
c00061b4:	31 db                	xor    ebx,ebx
c00061b6:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061b9:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061bc:	74 08                	je     c00061c6 <bread_cache+0x2f>
c00061be:	43                   	inc    ebx
c00061bf:	83 fb 10             	cmp    ebx,0x10
c00061c2:	75 f2                	jne    c00061b6 <bread_cache+0x1f>
c00061c4:	31 db                	xor    ebx,ebx
c00061c6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061c9:	50                   	push   eax
c00061ca:	6a 01                	push   0x1
c00061cc:	57                   	push   edi
c00061cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061d0:	83 c0 04             	add    eax,0x4
c00061d3:	50                   	push   eax
c00061d4:	e8 9e ff ff ff       	call   c0006177 <isoReadDiscSector>
c00061d9:	83 c4 10             	add    esp,0x10
c00061dc:	83 c9 ff             	or     ecx,0xffffffff
c00061df:	85 c0                	test   eax,eax
c00061e1:	78 13                	js     c00061f6 <bread_cache+0x5f>
c00061e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061e6:	89 da                	mov    edx,ebx
c00061e8:	89 38                	mov    DWORD PTR [eax],edi
c00061ea:	89 f0                	mov    eax,esi
c00061ec:	e8 0f fe ff ff       	call   c0006000 <bgrad_cache>
c00061f1:	b9 0f 00 00 00       	mov    ecx,0xf
c00061f6:	83 c4 0c             	add    esp,0xc
c00061f9:	89 c8                	mov    eax,ecx
c00061fb:	5b                   	pop    ebx
c00061fc:	5e                   	pop    esi
c00061fd:	5f                   	pop    edi
c00061fe:	5d                   	pop    ebp
c00061ff:	c3                   	ret    

c0006200 <biread>:
c0006200:	89 c2                	mov    edx,eax
c0006202:	b8 80 50 02 c0       	mov    eax,0xc0025080
c0006207:	eb 8e                	jmp    c0006197 <bread_cache>

c0006209 <bdread>:
c0006209:	89 c2                	mov    edx,eax
c000620b:	b8 20 50 02 c0       	mov    eax,0xc0025020
c0006210:	eb 85                	jmp    c0006197 <bread_cache>

c0006212 <strnicmp>:
c0006212:	55                   	push   ebp
c0006213:	57                   	push   edi
c0006214:	31 ff                	xor    edi,edi
c0006216:	56                   	push   esi
c0006217:	53                   	push   ebx
c0006218:	83 ec 0c             	sub    esp,0xc
c000621b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000621f:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c0006223:	74 43                	je     c0006268 <strnicmp+0x56>
c0006225:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006229:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c000622d:	85 c0                	test   eax,eax
c000622f:	74 37                	je     c0006268 <strnicmp+0x56>
c0006231:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006235:	85 d2                	test   edx,edx
c0006237:	74 2f                	je     c0006268 <strnicmp+0x56>
c0006239:	39 d0                	cmp    eax,edx
c000623b:	8d 6f 01             	lea    ebp,[edi+0x1]
c000623e:	75 04                	jne    c0006244 <strnicmp+0x32>
c0006240:	89 ef                	mov    edi,ebp
c0006242:	eb db                	jmp    c000621f <strnicmp+0xd>
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	50                   	push   eax
c0006248:	e8 03 a7 ff ff       	call   c0000950 <tolower>
c000624d:	89 c3                	mov    ebx,eax
c000624f:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c0006253:	89 ef                	mov    edi,ebp
c0006255:	89 04 24             	mov    DWORD PTR [esp],eax
c0006258:	e8 f3 a6 ff ff       	call   c0000950 <tolower>
c000625d:	83 c4 10             	add    esp,0x10
c0006260:	29 c3                	sub    ebx,eax
c0006262:	89 d8                	mov    eax,ebx
c0006264:	74 b9                	je     c000621f <strnicmp+0xd>
c0006266:	eb 02                	jmp    c000626a <strnicmp+0x58>
c0006268:	31 c0                	xor    eax,eax
c000626a:	83 c4 0c             	add    esp,0xc
c000626d:	5b                   	pop    ebx
c000626e:	5e                   	pop    esi
c000626f:	5f                   	pop    edi
c0006270:	5d                   	pop    ebp
c0006271:	c3                   	ret    

c0006272 <find_object>:
c0006272:	55                   	push   ebp
c0006273:	57                   	push   edi
c0006274:	89 c7                	mov    edi,eax
c0006276:	56                   	push   esi
c0006277:	53                   	push   ebx
c0006278:	89 d3                	mov    ebx,edx
c000627a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006280:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006287:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000628b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000628f:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006296:	74 0b                	je     c00062a3 <find_object+0x31>
c0006298:	89 fa                	mov    edx,edi
c000629a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000629e:	e8 89 fc ff ff       	call   c0005f2c <utf2ucs>
c00062a3:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062aa:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00062af:	7e 11                	jle    c00062c2 <find_object+0x50>
c00062b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b5:	e8 46 ff ff ff       	call   c0006200 <biread>
c00062ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00062be:	85 c0                	test   eax,eax
c00062c0:	79 07                	jns    c00062c9 <find_object+0x57>
c00062c2:	31 db                	xor    ebx,ebx
c00062c4:	e9 56 01 00 00       	jmp    c000641f <find_object+0x1ad>
c00062c9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00062d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062d5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00062d9:	8b 04 85 80 50 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaf80]
c00062e0:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00062e4:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00062e7:	85 f6                	test   esi,esi
c00062e9:	75 0e                	jne    c00062f9 <find_object+0x87>
c00062eb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00062ef:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00062f7:	eb b1                	jmp    c00062aa <find_object+0x38>
c00062f9:	8b 2d b4 5e 02 c0    	mov    ebp,DWORD PTR ds:0xc0025eb4
c00062ff:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c0006303:	85 ed                	test   ebp,ebp
c0006305:	89 c8                	mov    eax,ecx
c0006307:	74 2b                	je     c0006334 <find_object+0xc2>
c0006309:	8d 43 21             	lea    eax,[ebx+0x21]
c000630c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006310:	e8 07 fd ff ff       	call   c000601c <ucscompare>
c0006315:	85 c0                	test   eax,eax
c0006317:	0f 84 bf 00 00 00    	je     c00063dc <find_object+0x16a>
c000631d:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006320:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c0006324:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c000632c:	0f 8e da 00 00 00    	jle    c000640c <find_object+0x19a>
c0006332:	eb b7                	jmp    c00062eb <find_object+0x79>
c0006334:	29 ce                	sub    esi,ecx
c0006336:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c000633a:	a8 01                	test   al,0x1
c000633c:	74 05                	je     c0006343 <find_object+0xd1>
c000633e:	83 ee 21             	sub    esi,0x21
c0006341:	eb 5a                	jmp    c000639d <find_object+0x12b>
c0006343:	42                   	inc    edx
c0006344:	83 ee 22             	sub    esi,0x22
c0006347:	eb 54                	jmp    c000639d <find_object+0x12b>
c0006349:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000634c:	48                   	dec    eax
c000634d:	3c 01                	cmp    al,0x1
c000634f:	77 51                	ja     c00063a2 <find_object+0x130>
c0006351:	50                   	push   eax
c0006352:	6a 02                	push   0x2
c0006354:	68 7d fd 01 c0       	push   0xc001fd7d
c0006359:	52                   	push   edx
c000635a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000635e:	e8 7d a4 ff ff       	call   c00007e0 <strncmp>
c0006363:	83 c4 10             	add    esp,0x10
c0006366:	85 c0                	test   eax,eax
c0006368:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000636c:	75 27                	jne    c0006395 <find_object+0x123>
c000636e:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006372:	8d 68 fb             	lea    ebp,[eax-0x5]
c0006375:	50                   	push   eax
c0006376:	8d 42 05             	lea    eax,[edx+0x5]
c0006379:	55                   	push   ebp
c000637a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000637e:	50                   	push   eax
c000637f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006383:	50                   	push   eax
c0006384:	e8 f7 a2 ff ff       	call   c0000680 <strncpy>
c0006389:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c000638e:	83 c4 10             	add    esp,0x10
c0006391:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006395:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006399:	29 c6                	sub    esi,eax
c000639b:	01 c2                	add    edx,eax
c000639d:	83 fe 03             	cmp    esi,0x3
c00063a0:	7f a7                	jg     c0006349 <find_object+0xd7>
c00063a2:	85 ed                	test   ebp,ebp
c00063a4:	7e 40                	jle    c00063e6 <find_object+0x174>
c00063a6:	51                   	push   ecx
c00063a7:	51                   	push   ecx
c00063a8:	6a 2f                	push   0x2f
c00063aa:	57                   	push   edi
c00063ab:	e8 f0 a3 ff ff       	call   c00007a0 <strchr>
c00063b0:	83 c4 10             	add    esp,0x10
c00063b3:	85 c0                	test   eax,eax
c00063b5:	74 04                	je     c00063bb <find_object+0x149>
c00063b7:	29 f8                	sub    eax,edi
c00063b9:	eb 0c                	jmp    c00063c7 <find_object+0x155>
c00063bb:	83 ec 0c             	sub    esp,0xc
c00063be:	57                   	push   edi
c00063bf:	e8 ac a1 ff ff       	call   c0000570 <strlen>
c00063c4:	83 c4 10             	add    esp,0x10
c00063c7:	52                   	push   edx
c00063c8:	50                   	push   eax
c00063c9:	57                   	push   edi
c00063ca:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063ce:	50                   	push   eax
c00063cf:	e8 3e fe ff ff       	call   c0006212 <strnicmp>
c00063d4:	83 c4 10             	add    esp,0x10
c00063d7:	e9 39 ff ff ff       	jmp    c0006315 <find_object+0xa3>
c00063dc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00063e0:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00063e4:	eb 1e                	jmp    c0006404 <find_object+0x192>
c00063e6:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00063ea:	8d 43 21             	lea    eax,[ebx+0x21]
c00063ed:	89 f9                	mov    ecx,edi
c00063ef:	e8 a7 fc ff ff       	call   c000609b <fncompare>
c00063f4:	85 c0                	test   eax,eax
c00063f6:	0f 85 21 ff ff ff    	jne    c000631d <find_object+0xab>
c00063fc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006400:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0006404:	0f 85 13 ff ff ff    	jne    c000631d <find_object+0xab>
c000640a:	eb 13                	jmp    c000641f <find_object+0x1ad>
c000640c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006410:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0006414:	0f 8f b7 fe ff ff    	jg     c00062d1 <find_object+0x5f>
c000641a:	e9 cc fe ff ff       	jmp    c00062eb <find_object+0x79>
c000641f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006425:	89 d8                	mov    eax,ebx
c0006427:	5b                   	pop    ebx
c0006428:	5e                   	pop    esi
c0006429:	5f                   	pop    edi
c000642a:	5d                   	pop    ebp
c000642b:	c3                   	ret    

c000642c <find_object_path>:
c000642c:	55                   	push   ebp
c000642d:	57                   	push   edi
c000642e:	89 d7                	mov    edi,edx
c0006430:	56                   	push   esi
c0006431:	89 c6                	mov    esi,eax
c0006433:	53                   	push   ebx
c0006434:	89 cb                	mov    ebx,ecx
c0006436:	83 ec 0c             	sub    esp,0xc
c0006439:	50                   	push   eax
c000643a:	50                   	push   eax
c000643b:	6a 2f                	push   0x2f
c000643d:	56                   	push   esi
c000643e:	e8 5d a3 ff ff       	call   c00007a0 <strchr>
c0006443:	83 c4 10             	add    esp,0x10
c0006446:	89 c5                	mov    ebp,eax
c0006448:	85 c0                	test   eax,eax
c000644a:	74 3a                	je     c0006486 <find_object_path+0x5a>
c000644c:	39 ee                	cmp    esi,ebp
c000644e:	74 31                	je     c0006481 <find_object_path+0x55>
c0006450:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006453:	e8 a6 fb ff ff       	call   c0005ffe <iso_733>
c0006458:	89 c2                	mov    edx,eax
c000645a:	8d 43 02             	lea    eax,[ebx+0x2]
c000645d:	e8 9c fb ff ff       	call   c0005ffe <iso_733>
c0006462:	83 ec 0c             	sub    esp,0xc
c0006465:	89 c1                	mov    ecx,eax
c0006467:	52                   	push   edx
c0006468:	89 f0                	mov    eax,esi
c000646a:	ba 01 00 00 00       	mov    edx,0x1
c000646f:	e8 fe fd ff ff       	call   c0006272 <find_object>
c0006474:	83 c4 10             	add    esp,0x10
c0006477:	89 c3                	mov    ebx,eax
c0006479:	85 c0                	test   eax,eax
c000647b:	75 04                	jne    c0006481 <find_object_path+0x55>
c000647d:	31 db                	xor    ebx,ebx
c000647f:	eb 36                	jmp    c00064b7 <find_object_path+0x8b>
c0006481:	8d 75 01             	lea    esi,[ebp+0x1]
c0006484:	eb b3                	jmp    c0006439 <find_object_path+0xd>
c0006486:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006489:	74 28                	je     c00064b3 <find_object_path+0x87>
c000648b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000648e:	e8 6b fb ff ff       	call   c0005ffe <iso_733>
c0006493:	89 c2                	mov    edx,eax
c0006495:	8d 43 02             	lea    eax,[ebx+0x2]
c0006498:	e8 61 fb ff ff       	call   c0005ffe <iso_733>
c000649d:	83 ec 0c             	sub    esp,0xc
c00064a0:	89 c1                	mov    ecx,eax
c00064a2:	52                   	push   edx
c00064a3:	89 f0                	mov    eax,esi
c00064a5:	89 fa                	mov    edx,edi
c00064a7:	e8 c6 fd ff ff       	call   c0006272 <find_object>
c00064ac:	83 c4 10             	add    esp,0x10
c00064af:	89 c3                	mov    ebx,eax
c00064b1:	eb 04                	jmp    c00064b7 <find_object_path+0x8b>
c00064b3:	85 ff                	test   edi,edi
c00064b5:	74 c6                	je     c000647d <find_object_path+0x51>
c00064b7:	83 c4 0c             	add    esp,0xc
c00064ba:	89 d8                	mov    eax,ebx
c00064bc:	5b                   	pop    ebx
c00064bd:	5e                   	pop    esi
c00064be:	5f                   	pop    edi
c00064bf:	5d                   	pop    ebp
c00064c0:	c3                   	ret    

c00064c1 <stricmp>:
c00064c1:	57                   	push   edi
c00064c2:	56                   	push   esi
c00064c3:	31 f6                	xor    esi,esi
c00064c5:	53                   	push   ebx
c00064c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064ca:	83 ec 0c             	sub    esp,0xc
c00064cd:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064d5:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064d9:	50                   	push   eax
c00064da:	e8 51 a4 ff ff       	call   c0000930 <toupper>
c00064df:	89 04 24             	mov    DWORD PTR [esp],eax
c00064e2:	e8 69 a4 ff ff       	call   c0000950 <tolower>
c00064e7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00064ea:	89 c3                	mov    ebx,eax
c00064ec:	e8 3f a4 ff ff       	call   c0000930 <toupper>
c00064f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00064f4:	e8 57 a4 ff ff       	call   c0000950 <tolower>
c00064f9:	83 c4 10             	add    esp,0x10
c00064fc:	39 c3                	cmp    ebx,eax
c00064fe:	75 05                	jne    c0006505 <stricmp+0x44>
c0006500:	46                   	inc    esi
c0006501:	85 db                	test   ebx,ebx
c0006503:	75 c1                	jne    c00064c6 <stricmp+0x5>
c0006505:	29 c3                	sub    ebx,eax
c0006507:	89 d8                	mov    eax,ebx
c0006509:	5b                   	pop    ebx
c000650a:	5e                   	pop    esi
c000650b:	5f                   	pop    edi
c000650c:	c3                   	ret    

c000650d <iso_open>:
c000650d:	57                   	push   edi
c000650e:	31 c0                	xor    eax,eax
c0006510:	56                   	push   esi
c0006511:	b9 80 5e 02 c0       	mov    ecx,0xc0025e80
c0006516:	53                   	push   ebx
c0006517:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000651c:	0f 95 c0             	setne  al
c000651f:	89 c2                	mov    edx,eax
c0006521:	89 c6                	mov    esi,eax
c0006523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006527:	e8 00 ff ff ff       	call   c000642c <find_object_path>
c000652c:	83 ca ff             	or     edx,0xffffffff
c000652f:	85 c0                	test   eax,eax
c0006531:	74 5e                	je     c0006591 <iso_open+0x84>
c0006533:	89 c1                	mov    ecx,eax
c0006535:	31 d2                	xor    edx,edx
c0006537:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000653d:	83 bf 40 55 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdaac0],0x0
c0006544:	75 42                	jne    c0006588 <iso_open+0x7b>
c0006546:	8d 41 02             	lea    eax,[ecx+0x2]
c0006549:	c7 87 40 55 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdaac0],0xffffffff
c0006553:	e8 a6 fa ff ff       	call   c0005ffe <iso_733>
c0006558:	89 b7 44 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaabc],esi
c000655e:	89 87 40 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaac0],eax
c0006564:	c7 87 48 55 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdaab8],0x0
c000656e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006571:	e8 88 fa ff ff       	call   c0005ffe <iso_733>
c0006576:	c7 87 d0 55 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdaa30],0x0
c0006580:	89 87 4c 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaab4],eax
c0006586:	eb 09                	jmp    c0006591 <iso_open+0x84>
c0006588:	42                   	inc    edx
c0006589:	83 fa 10             	cmp    edx,0x10
c000658c:	75 a9                	jne    c0006537 <iso_open+0x2a>
c000658e:	83 ca ff             	or     edx,0xffffffff
c0006591:	5b                   	pop    ebx
c0006592:	89 d0                	mov    eax,edx
c0006594:	5e                   	pop    esi
c0006595:	5f                   	pop    edi
c0006596:	c3                   	ret    

c0006597 <iso_close>:
c0006597:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000659b:	83 f8 0f             	cmp    eax,0xf
c000659e:	7f 10                	jg     c00065b0 <iso_close+0x19>
c00065a0:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065a6:	c7 80 40 55 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdaac0],0x0
c00065b0:	e9 5e fb ff ff       	jmp    c0006113 <bclear_cache>

c00065b5 <iso_read>:
c00065b5:	55                   	push   ebp
c00065b6:	57                   	push   edi
c00065b7:	56                   	push   esi
c00065b8:	53                   	push   ebx
c00065b9:	83 ec 1c             	sub    esp,0x1c
c00065bc:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065c0:	83 fd 0f             	cmp    ebp,0xf
c00065c3:	7e 0a                	jle    c00065cf <iso_read+0x1a>
c00065c5:	83 c8 ff             	or     eax,0xffffffff
c00065c8:	89 c2                	mov    edx,eax
c00065ca:	e9 f4 00 00 00       	jmp    c00066c3 <iso_read+0x10e>
c00065cf:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065d5:	83 bd 40 55 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdaac0],0x0
c00065dc:	74 e7                	je     c00065c5 <iso_read+0x10>
c00065de:	8b 95 d0 55 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdaa30]
c00065e4:	85 d2                	test   edx,edx
c00065e6:	75 dd                	jne    c00065c5 <iso_read+0x10>
c00065e8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00065ed:	0f 84 cd 00 00 00    	je     c00066c0 <iso_read+0x10b>
c00065f3:	8b 85 48 55 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdaab8]
c00065f9:	8b 8d 4c 55 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffdaab4]
c00065ff:	29 c1                	sub    ecx,eax
c0006601:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c0006605:	76 04                	jbe    c000660b <iso_read+0x56>
c0006607:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000660b:	85 c9                	test   ecx,ecx
c000660d:	0f 84 ad 00 00 00    	je     c00066c0 <iso_read+0x10b>
c0006613:	89 c6                	mov    esi,eax
c0006615:	bb 00 08 00 00       	mov    ebx,0x800
c000661a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006620:	c1 e8 0b             	shr    eax,0xb
c0006623:	29 f3                	sub    ebx,esi
c0006625:	03 85 40 55 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdaac0]
c000662b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006631:	7e 3f                	jle    c0006672 <iso_read+0xbd>
c0006633:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006639:	75 37                	jne    c0006672 <iso_read+0xbd>
c000663b:	be 20 00 00 00       	mov    esi,0x20
c0006640:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006646:	7f 05                	jg     c000664d <iso_read+0x98>
c0006648:	89 ce                	mov    esi,ecx
c000664a:	c1 fe 0b             	sar    esi,0xb
c000664d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006651:	89 f3                	mov    ebx,esi
c0006653:	c1 e3 0b             	shl    ebx,0xb
c0006656:	52                   	push   edx
c0006657:	56                   	push   esi
c0006658:	50                   	push   eax
c0006659:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000665d:	e8 15 fb ff ff       	call   c0006177 <isoReadDiscSector>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	85 c0                	test   eax,eax
c0006667:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000666b:	7f 3e                	jg     c00066ab <iso_read+0xf6>
c000666d:	e9 53 ff ff ff       	jmp    c00065c5 <iso_read+0x10>
c0006672:	39 cb                	cmp    ebx,ecx
c0006674:	7e 02                	jle    c0006678 <iso_read+0xc3>
c0006676:	89 cb                	mov    ebx,ecx
c0006678:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000667c:	e8 88 fb ff ff       	call   c0006209 <bdread>
c0006681:	85 c0                	test   eax,eax
c0006683:	0f 88 3c ff ff ff    	js     c00065c5 <iso_read+0x10>
c0006689:	8b 0c 85 20 50 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdafe0]
c0006690:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006694:	8b 85 48 55 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdaab8]
c000669a:	25 ff 07 00 00       	and    eax,0x7ff
c000669f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066a3:	89 d9                	mov    ecx,ebx
c00066a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066ab:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066af:	01 9d 48 55 02 c0    	add    DWORD PTR [ebp-0x3ffdaab8],ebx
c00066b5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066b9:	01 da                	add    edx,ebx
c00066bb:	e9 28 ff ff ff       	jmp    c00065e8 <iso_read+0x33>
c00066c0:	89 d0                	mov    eax,edx
c00066c2:	99                   	cdq    
c00066c3:	83 c4 1c             	add    esp,0x1c
c00066c6:	5b                   	pop    ebx
c00066c7:	5e                   	pop    esi
c00066c8:	5f                   	pop    edi
c00066c9:	5d                   	pop    ebp
c00066ca:	c3                   	ret    

c00066cb <iso_seek>:
c00066cb:	55                   	push   ebp
c00066cc:	83 c8 ff             	or     eax,0xffffffff
c00066cf:	57                   	push   edi
c00066d0:	89 c2                	mov    edx,eax
c00066d2:	56                   	push   esi
c00066d3:	53                   	push   ebx
c00066d4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066d8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066e0:	83 fe 0f             	cmp    esi,0xf
c00066e3:	7f 65                	jg     c000674a <iso_seek+0x7f>
c00066e5:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00066eb:	8d 8d 40 55 02 c0    	lea    ecx,[ebp-0x3ffdaac0]
c00066f1:	83 bd 40 55 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdaac0],0x0
c00066f8:	74 50                	je     c000674a <iso_seek+0x7f>
c00066fa:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c0006701:	75 47                	jne    c000674a <iso_seek+0x7f>
c0006703:	83 fb 01             	cmp    ebx,0x1
c0006706:	74 0e                	je     c0006716 <iso_seek+0x4b>
c0006708:	83 fb 02             	cmp    ebx,0x2
c000670b:	74 0e                	je     c000671b <iso_seek+0x50>
c000670d:	85 db                	test   ebx,ebx
c000670f:	75 39                	jne    c000674a <iso_seek+0x7f>
c0006711:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006714:	eb 0d                	jmp    c0006723 <iso_seek+0x58>
c0006716:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006719:	eb 08                	jmp    c0006723 <iso_seek+0x58>
c000671b:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000671e:	01 f8                	add    eax,edi
c0006720:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006723:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006729:	8b 88 4c 55 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdaab4]
c000672f:	05 40 55 02 c0       	add    eax,0xc0025540
c0006734:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006737:	76 03                	jbe    c000673c <iso_seek+0x71>
c0006739:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000673c:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006742:	8b 82 48 55 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdaab8]
c0006748:	31 d2                	xor    edx,edx
c000674a:	5b                   	pop    ebx
c000674b:	5e                   	pop    esi
c000674c:	5f                   	pop    edi
c000674d:	5d                   	pop    ebp
c000674e:	c3                   	ret    

c000674f <iso_tell>:
c000674f:	83 c8 ff             	or     eax,0xffffffff
c0006752:	53                   	push   ebx
c0006753:	89 c2                	mov    edx,eax
c0006755:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006759:	83 f9 0f             	cmp    ecx,0xf
c000675c:	7f 20                	jg     c000677e <iso_tell+0x2f>
c000675e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006764:	83 bb 40 55 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdaac0],0x0
c000676b:	74 11                	je     c000677e <iso_tell+0x2f>
c000676d:	83 bb d0 55 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdaa30],0x0
c0006774:	75 08                	jne    c000677e <iso_tell+0x2f>
c0006776:	8b 83 48 55 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdaab8]
c000677c:	31 d2                	xor    edx,edx
c000677e:	5b                   	pop    ebx
c000677f:	c3                   	ret    

c0006780 <iso_total>:
c0006780:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006784:	83 c8 ff             	or     eax,0xffffffff
c0006787:	83 fa 0f             	cmp    edx,0xf
c000678a:	7f 1e                	jg     c00067aa <iso_total+0x2a>
c000678c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006792:	83 ba 40 55 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdaac0],0x0
c0006799:	74 0f                	je     c00067aa <iso_total+0x2a>
c000679b:	83 ba d0 55 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdaa30],0x0
c00067a2:	75 06                	jne    c00067aa <iso_total+0x2a>
c00067a4:	8b 82 4c 55 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdaab4]
c00067aa:	c3                   	ret    

c00067ab <fn_postprocess>:
c00067ab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067af:	89 d0                	mov    eax,edx
c00067b1:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067b4:	83 f9 3b             	cmp    ecx,0x3b
c00067b7:	74 07                	je     c00067c0 <fn_postprocess+0x15>
c00067b9:	85 c9                	test   ecx,ecx
c00067bb:	74 03                	je     c00067c0 <fn_postprocess+0x15>
c00067bd:	40                   	inc    eax
c00067be:	eb f1                	jmp    c00067b1 <fn_postprocess+0x6>
c00067c0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067c3:	39 d0                	cmp    eax,edx
c00067c5:	76 0a                	jbe    c00067d1 <fn_postprocess+0x26>
c00067c7:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067cb:	75 04                	jne    c00067d1 <fn_postprocess+0x26>
c00067cd:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067d1:	c3                   	ret    

c00067d2 <iso_readdir>:
c00067d2:	55                   	push   ebp
c00067d3:	57                   	push   edi
c00067d4:	56                   	push   esi
c00067d5:	53                   	push   ebx
c00067d6:	83 ec 1c             	sub    esp,0x1c
c00067d9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067dd:	83 fb 0f             	cmp    ebx,0xf
c00067e0:	7f 28                	jg     c000680a <iso_readdir+0x38>
c00067e2:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00067e8:	8d b8 40 55 02 c0    	lea    edi,[eax-0x3ffdaac0]
c00067ee:	83 b8 40 55 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdaac0],0x0
c00067f5:	74 13                	je     c000680a <iso_readdir+0x38>
c00067f7:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00067fb:	74 0d                	je     c000680a <iso_readdir+0x38>
c00067fd:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006804:	0f 84 b1 00 00 00    	je     c00068bb <iso_readdir+0xe9>
c000680a:	83 ec 0c             	sub    esp,0xc
c000680d:	68 80 fd 01 c0       	push   0xc001fd80
c0006812:	e8 f5 2e 01 00       	call   c001970c <iso_kprintf>
c0006817:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000681a:	e8 09 2f 01 00       	call   c0019728 <iso_kprintfd>
c000681f:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006825:	c7 04 24 85 fd 01 c0 	mov    DWORD PTR [esp],0xc001fd85
c000682c:	e8 db 2e 01 00       	call   c001970c <iso_kprintf>
c0006831:	5d                   	pop    ebp
c0006832:	ff b3 40 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaac0]
c0006838:	e8 eb 2e 01 00       	call   c0019728 <iso_kprintfd>
c000683d:	c7 04 24 8b fd 01 c0 	mov    DWORD PTR [esp],0xc001fd8b
c0006844:	e8 c3 2e 01 00       	call   c001970c <iso_kprintf>
c0006849:	58                   	pop    eax
c000684a:	ff b3 44 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaabc]
c0006850:	e8 d3 2e 01 00       	call   c0019728 <iso_kprintfd>
c0006855:	c7 04 24 91 fd 01 c0 	mov    DWORD PTR [esp],0xc001fd91
c000685c:	e8 ab 2e 01 00       	call   c001970c <iso_kprintf>
c0006861:	58                   	pop    eax
c0006862:	ff b3 d0 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaa30]
c0006868:	e8 bb 2e 01 00       	call   c0019728 <iso_kprintfd>
c000686d:	83 c4 10             	add    esp,0x10
c0006870:	eb 42                	jmp    c00068b4 <iso_readdir+0xe2>
c0006872:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006875:	8b 34 85 80 50 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdaf80]
c000687c:	89 d1                	mov    ecx,edx
c000687e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006884:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006888:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000688b:	75 35                	jne    c00068c2 <iso_readdir+0xf0>
c000688d:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006893:	81 c2 00 08 00 00    	add    edx,0x800
c0006899:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000689c:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000689f:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068a2:	73 1e                	jae    c00068c2 <iso_readdir+0xf0>
c00068a4:	c1 ea 0b             	shr    edx,0xb
c00068a7:	8b 07                	mov    eax,DWORD PTR [edi]
c00068a9:	01 d0                	add    eax,edx
c00068ab:	e8 50 f9 ff ff       	call   c0006200 <biread>
c00068b0:	85 c0                	test   eax,eax
c00068b2:	79 be                	jns    c0006872 <iso_readdir+0xa0>
c00068b4:	31 c0                	xor    eax,eax
c00068b6:	e9 66 01 00 00       	jmp    c0006a21 <iso_readdir+0x24f>
c00068bb:	31 f6                	xor    esi,esi
c00068bd:	83 c8 ff             	or     eax,0xffffffff
c00068c0:	eb da                	jmp    c000689c <iso_readdir+0xca>
c00068c2:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068c8:	8b ba 48 55 02 c0    	mov    edi,DWORD PTR [edx-0x3ffdaab8]
c00068ce:	81 c2 40 55 02 c0    	add    edx,0xc0025540
c00068d4:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068d7:	73 db                	jae    c00068b4 <iso_readdir+0xe2>
c00068d9:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068dd:	75 34                	jne    c0006913 <iso_readdir+0x141>
c00068df:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c00068e3:	75 2e                	jne    c0006913 <iso_readdir+0x141>
c00068e5:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c00068e8:	8b 34 85 80 50 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdaf80]
c00068ef:	01 f9                	add    ecx,edi
c00068f1:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00068f4:	89 c8                	mov    eax,ecx
c00068f6:	25 ff 07 00 00       	and    eax,0x7ff
c00068fb:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006900:	01 c8                	add    eax,ecx
c0006902:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006905:	25 ff 07 00 00       	and    eax,0x7ff
c000690a:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000690e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006911:	74 a1                	je     c00068b4 <iso_readdir+0xe2>
c0006913:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006919:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000691d:	8d 56 21             	lea    edx,[esi+0x21]
c0006920:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006924:	8d a8 58 55 02 c0    	lea    ebp,[eax-0x3ffdaaa8]
c000692a:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006931:	74 0c                	je     c000693f <iso_readdir+0x16d>
c0006933:	89 e8                	mov    eax,ebp
c0006935:	e8 14 f6 ff ff       	call   c0005f4e <ucs2utfn>
c000693a:	e9 a6 00 00 00       	jmp    c00069e5 <iso_readdir+0x213>
c000693f:	57                   	push   edi
c0006940:	51                   	push   ecx
c0006941:	52                   	push   edx
c0006942:	55                   	push   ebp
c0006943:	e8 38 9d ff ff       	call   c0000680 <strncpy>
c0006948:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c000694c:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006952:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006955:	c6 84 01 58 55 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffdaaa8],0x0
c000695d:	e8 49 fe ff ff       	call   c00067ab <fn_postprocess>
c0006962:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006966:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006969:	83 c4 10             	add    esp,0x10
c000696c:	29 d0                	sub    eax,edx
c000696e:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006972:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006976:	74 05                	je     c000697d <iso_readdir+0x1ab>
c0006978:	83 e8 21             	sub    eax,0x21
c000697b:	eb 04                	jmp    c0006981 <iso_readdir+0x1af>
c000697d:	47                   	inc    edi
c000697e:	83 e8 22             	sub    eax,0x22
c0006981:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006985:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000698b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000698f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006994:	7e 4f                	jle    c00069e5 <iso_readdir+0x213>
c0006996:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006999:	48                   	dec    eax
c000699a:	3c 01                	cmp    al,0x1
c000699c:	77 47                	ja     c00069e5 <iso_readdir+0x213>
c000699e:	52                   	push   edx
c000699f:	6a 02                	push   0x2
c00069a1:	68 7d fd 01 c0       	push   0xc001fd7d
c00069a6:	57                   	push   edi
c00069a7:	e8 34 9e ff ff       	call   c00007e0 <strncmp>
c00069ac:	83 c4 10             	add    esp,0x10
c00069af:	85 c0                	test   eax,eax
c00069b1:	75 26                	jne    c00069d9 <iso_readdir+0x207>
c00069b3:	50                   	push   eax
c00069b4:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069b8:	83 e8 05             	sub    eax,0x5
c00069bb:	50                   	push   eax
c00069bc:	8d 47 05             	lea    eax,[edi+0x5]
c00069bf:	50                   	push   eax
c00069c0:	55                   	push   ebp
c00069c1:	e8 ba 9c ff ff       	call   c0000680 <strncpy>
c00069c6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00069ca:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069ce:	83 c4 10             	add    esp,0x10
c00069d1:	c6 84 08 53 55 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdaaad],0x0
c00069d9:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069dd:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c00069e1:	01 c7                	add    edi,eax
c00069e3:	eb aa                	jmp    c000698f <iso_readdir+0x1bd>
c00069e5:	83 c8 ff             	or     eax,0xffffffff
c00069e8:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c00069ec:	89 c2                	mov    edx,eax
c00069ee:	75 0a                	jne    c00069fa <iso_readdir+0x228>
c00069f0:	8d 46 0a             	lea    eax,[esi+0xa]
c00069f3:	e8 06 f6 ff ff       	call   c0005ffe <iso_733>
c00069f8:	31 d2                	xor    edx,edx
c00069fa:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a00:	89 83 50 55 02 c0    	mov    DWORD PTR [ebx-0x3ffdaab0],eax
c0006a06:	89 93 54 55 02 c0    	mov    DWORD PTR [ebx-0x3ffdaaac],edx
c0006a0c:	81 c3 40 55 02 c0    	add    ebx,0xc0025540
c0006a12:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a15:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006a1c:	05 50 55 02 c0       	add    eax,0xc0025550
c0006a21:	83 c4 1c             	add    esp,0x1c
c0006a24:	5b                   	pop    ebx
c0006a25:	5e                   	pop    esi
c0006a26:	5f                   	pop    edi
c0006a27:	5d                   	pop    ebp
c0006a28:	c3                   	ret    

c0006a29 <iso_reset>:
c0006a29:	83 ec 18             	sub    esp,0x18
c0006a2c:	68 9a fd 01 c0       	push   0xc001fd9a
c0006a31:	e8 d6 2c 01 00       	call   c001970c <iso_kprintf>
c0006a36:	e8 10 f7 ff ff       	call   c000614b <iso_break_all>
c0006a3b:	e8 09 f7 ff ff       	call   c0006149 <bclear>
c0006a40:	31 c0                	xor    eax,eax
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	c3                   	ret    

c0006a46 <init_percd>:
c0006a46:	57                   	push   edi
c0006a47:	56                   	push   esi
c0006a48:	53                   	push   ebx
c0006a49:	bb 01 00 00 00       	mov    ebx,0x1
c0006a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a52:	a2 60 50 02 c0       	mov    ds:0xc0025060,al
c0006a57:	e8 cd ff ff ff       	call   c0006a29 <iso_reset>
c0006a5c:	c7 05 b4 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025eb4,0x0
c0006a66:	a1 ac 5e 02 c0       	mov    eax,ds:0xc0025eac
c0006a6b:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a6f:	e8 8c f7 ff ff       	call   c0006200 <biread>
c0006a74:	89 c6                	mov    esi,eax
c0006a76:	85 c0                	test   eax,eax
c0006a78:	0f 88 ba 00 00 00    	js     c0006b38 <init_percd+0xf2>
c0006a7e:	8b 04 85 80 50 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaf80]
c0006a85:	83 c0 04             	add    eax,0x4
c0006a88:	52                   	push   edx
c0006a89:	6a 06                	push   0x6
c0006a8b:	68 a5 fd 01 c0       	push   0xc001fda5
c0006a90:	50                   	push   eax
c0006a91:	e8 ea 98 ff ff       	call   c0000380 <memcmp>
c0006a96:	83 c4 10             	add    esp,0x10
c0006a99:	85 c0                	test   eax,eax
c0006a9b:	74 08                	je     c0006aa5 <init_percd+0x5f>
c0006a9d:	43                   	inc    ebx
c0006a9e:	83 fb 04             	cmp    ebx,0x4
c0006aa1:	75 c3                	jne    c0006a66 <init_percd+0x20>
c0006aa3:	eb 1a                	jmp    c0006abf <init_percd+0x79>
c0006aa5:	8b 04 b5 80 50 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdaf80]
c0006aac:	83 c0 5c             	add    eax,0x5c
c0006aaf:	e8 17 f5 ff ff       	call   c0005fcb <isjoliet>
c0006ab4:	a3 b4 5e 02 c0       	mov    ds:0xc0025eb4,eax
c0006ab9:	85 c0                	test   eax,eax
c0006abb:	74 e0                	je     c0006a9d <init_percd+0x57>
c0006abd:	eb 3e                	jmp    c0006afd <init_percd+0xb7>
c0006abf:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006ac6:	75 35                	jne    c0006afd <init_percd+0xb7>
c0006ac8:	a1 ac 5e 02 c0       	mov    eax,ds:0xc0025eac
c0006acd:	83 c0 10             	add    eax,0x10
c0006ad0:	e8 2b f7 ff ff       	call   c0006200 <biread>
c0006ad5:	89 c6                	mov    esi,eax
c0006ad7:	85 c0                	test   eax,eax
c0006ad9:	78 5f                	js     c0006b3a <init_percd+0xf4>
c0006adb:	83 cb ff             	or     ebx,0xffffffff
c0006ade:	50                   	push   eax
c0006adf:	8b 04 b5 80 50 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdaf80]
c0006ae6:	6a 06                	push   0x6
c0006ae8:	83 c0 04             	add    eax,0x4
c0006aeb:	68 ac fd 01 c0       	push   0xc001fdac
c0006af0:	50                   	push   eax
c0006af1:	e8 8a 98 ff ff       	call   c0000380 <memcmp>
c0006af6:	83 c4 10             	add    esp,0x10
c0006af9:	85 c0                	test   eax,eax
c0006afb:	75 3d                	jne    c0006b3a <init_percd+0xf4>
c0006afd:	8b 34 b5 80 50 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdaf80]
c0006b04:	bf 80 5e 02 c0       	mov    edi,0xc0025e80
c0006b09:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b0f:	b9 22 00 00 00       	mov    ecx,0x22
c0006b14:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b16:	b8 82 5e 02 c0       	mov    eax,0xc0025e82
c0006b1b:	31 db                	xor    ebx,ebx
c0006b1d:	e8 dc f4 ff ff       	call   c0005ffe <iso_733>
c0006b22:	a3 a8 5e 02 c0       	mov    ds:0xc0025ea8,eax
c0006b27:	b8 8a 5e 02 c0       	mov    eax,0xc0025e8a
c0006b2c:	e8 cd f4 ff ff       	call   c0005ffe <iso_733>
c0006b31:	a3 a4 5e 02 c0       	mov    ds:0xc0025ea4,eax
c0006b36:	eb 02                	jmp    c0006b3a <init_percd+0xf4>
c0006b38:	89 c3                	mov    ebx,eax
c0006b3a:	89 d8                	mov    eax,ebx
c0006b3c:	5b                   	pop    ebx
c0006b3d:	5e                   	pop    esi
c0006b3e:	5f                   	pop    edi
c0006b3f:	c3                   	ret    

c0006b40 <iso_ioctl>:
c0006b40:	83 ec 18             	sub    esp,0x18
c0006b43:	68 b3 fd 01 c0       	push   0xc001fdb3
c0006b48:	e8 bf 2b 01 00       	call   c001970c <iso_kprintf>
c0006b4d:	e8 d7 fe ff ff       	call   c0006a29 <iso_reset>
c0006b52:	31 c0                	xor    eax,eax
c0006b54:	83 c4 1c             	add    esp,0x1c
c0006b57:	c3                   	ret    

c0006b58 <fs_iso9660_init>:
c0006b58:	53                   	push   ebx
c0006b59:	31 db                	xor    ebx,ebx
c0006b5b:	83 ec 14             	sub    esp,0x14
c0006b5e:	68 be fd 01 c0       	push   0xc001fdbe
c0006b63:	e8 a4 2b 01 00       	call   c001970c <iso_kprintf>
c0006b68:	83 c4 0c             	add    esp,0xc
c0006b6b:	68 40 09 00 00       	push   0x940
c0006b70:	6a 00                	push   0x0
c0006b72:	68 40 55 02 c0       	push   0xc0025540
c0006b77:	e8 74 99 ff ff       	call   c00004f0 <memset>
c0006b7c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b83:	c7 05 40 55 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0025540,0xffffffff
c0006b8d:	e8 1c 0f 00 00       	call   c0007aae <malloc>
c0006b92:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b99:	a3 b0 5e 02 c0       	mov    ds:0xc0025eb0,eax
c0006b9e:	e8 0b 0f 00 00       	call   c0007aae <malloc>
c0006ba3:	83 c4 10             	add    esp,0x10
c0006ba6:	a3 20 55 02 c0       	mov    ds:0xc0025520,eax
c0006bab:	83 ec 0c             	sub    esp,0xc
c0006bae:	68 04 08 00 00       	push   0x804
c0006bb3:	e8 f6 0e 00 00       	call   c0007aae <malloc>
c0006bb8:	89 04 9d 80 50 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdaf80],eax
c0006bbf:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006bc5:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bcc:	e8 dd 0e 00 00       	call   c0007aae <malloc>
c0006bd1:	83 c4 10             	add    esp,0x10
c0006bd4:	89 04 9d 20 50 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdafe0],eax
c0006bdb:	43                   	inc    ebx
c0006bdc:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be2:	83 fb 10             	cmp    ebx,0x10
c0006be5:	75 c4                	jne    c0006bab <fs_iso9660_init+0x53>
c0006be7:	31 c0                	xor    eax,eax
c0006be9:	83 c4 08             	add    esp,0x8
c0006bec:	5b                   	pop    ebx
c0006bed:	c3                   	ret    

c0006bee <fs_iso9660_shutdown>:
c0006bee:	53                   	push   ebx
c0006bef:	31 db                	xor    ebx,ebx
c0006bf1:	83 ec 08             	sub    esp,0x8
c0006bf4:	83 ec 0c             	sub    esp,0xc
c0006bf7:	ff 34 9d 80 50 02 c0 	push   DWORD PTR [ebx*4-0x3ffdaf80]
c0006bfe:	e8 bb 0e 00 00       	call   c0007abe <free>
c0006c03:	58                   	pop    eax
c0006c04:	ff 34 9d 20 50 02 c0 	push   DWORD PTR [ebx*4-0x3ffdafe0]
c0006c0b:	43                   	inc    ebx
c0006c0c:	e8 ad 0e 00 00       	call   c0007abe <free>
c0006c11:	83 c4 10             	add    esp,0x10
c0006c14:	83 fb 10             	cmp    ebx,0x10
c0006c17:	75 db                	jne    c0006bf4 <fs_iso9660_shutdown+0x6>
c0006c19:	a1 b0 5e 02 c0       	mov    eax,ds:0xc0025eb0
c0006c1e:	85 c0                	test   eax,eax
c0006c20:	74 0c                	je     c0006c2e <fs_iso9660_shutdown+0x40>
c0006c22:	83 ec 0c             	sub    esp,0xc
c0006c25:	50                   	push   eax
c0006c26:	e8 93 0e 00 00       	call   c0007abe <free>
c0006c2b:	83 c4 10             	add    esp,0x10
c0006c2e:	a1 20 55 02 c0       	mov    eax,ds:0xc0025520
c0006c33:	85 c0                	test   eax,eax
c0006c35:	74 0c                	je     c0006c43 <fs_iso9660_shutdown+0x55>
c0006c37:	83 ec 0c             	sub    esp,0xc
c0006c3a:	50                   	push   eax
c0006c3b:	e8 7e 0e 00 00       	call   c0007abe <free>
c0006c40:	83 c4 10             	add    esp,0x10
c0006c43:	c7 05 20 55 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025520,0x0
c0006c4d:	c7 05 b0 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025eb0,0x0
c0006c57:	31 c0                	xor    eax,eax
c0006c59:	83 c4 08             	add    esp,0x8
c0006c5c:	5b                   	pop    ebx
c0006c5d:	c3                   	ret    

c0006c5e <Computer::close(int, int, void*)>:
c0006c5e:	57                   	push   edi
c0006c5f:	56                   	push   esi
c0006c60:	53                   	push   ebx
c0006c61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c65:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006c69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006c6d:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c73:	83 ec 0c             	sub    esp,0xc
c0006c76:	50                   	push   eax
c0006c77:	e8 e4 54 00 00       	call   c000c160 <Device::closeAll()>
c0006c7c:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c82:	83 c4 10             	add    esp,0x10
c0006c85:	8b 10                	mov    edx,DWORD PTR [eax]
c0006c87:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006c8b:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006c93:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006c97:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006c9b:	5b                   	pop    ebx
c0006c9c:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006c9f:	5e                   	pop    esi
c0006ca0:	5f                   	pop    edi
c0006ca1:	ff e0                	jmp    eax

c0006ca3 <Krnl::firstTask()>:
c0006ca3:	53                   	push   ebx
c0006ca4:	83 ec 14             	sub    esp,0x14
c0006ca7:	fb                   	sti    
c0006ca8:	68 cf fd 01 c0       	push   0xc001fdcf
c0006cad:	e8 33 98 00 00       	call   c00104e5 <KeSetBootMessage(char const*)>
c0006cb2:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006cb9:	e8 f0 0d 00 00       	call   c0007aae <malloc>
c0006cbe:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006cc5:	89 c3                	mov    ebx,eax
c0006cc7:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0006ccc:	50                   	push   eax
c0006ccd:	68 e8 fd 01 c0       	push   0xc001fde8
c0006cd2:	6a 01                	push   0x1
c0006cd4:	53                   	push   ebx
c0006cd5:	e8 be e2 00 00       	call   c0014f98 <Process::Process(bool, char const*, Process*, char**)>
c0006cda:	83 c4 20             	add    esp,0x20
c0006cdd:	68 ff 00 00 00       	push   0xff
c0006ce2:	6a 00                	push   0x0
c0006ce4:	68 f5 74 00 c0       	push   0xc00074f5
c0006ce9:	53                   	push   ebx
c0006cea:	e8 cd e4 00 00       	call   c00151bc <Process::createThread(void (*)(void*), void*, int)>
c0006cef:	8b 15 90 91 02 c0    	mov    edx,DWORD PTR ds:0xc0029190
c0006cf5:	6a 7a                	push   0x7a
c0006cf7:	6a 00                	push   0x0
c0006cf9:	68 a4 5c 01 c0       	push   0xc0015ca4
c0006cfe:	52                   	push   edx
c0006cff:	e8 b8 e4 00 00       	call   c00151bc <Process::createThread(void (*)(void*), void*, int)>
c0006d04:	83 c4 20             	add    esp,0x20
c0006d07:	a3 48 91 02 c0       	mov    ds:0xc0029148,eax
c0006d0c:	c6 05 bd 5e 02 c0 01 	mov    BYTE PTR ds:0xc0025ebd,0x1
c0006d13:	e8 3c a0 00 00       	call   c0010d54 <KeInitRand()>
c0006d18:	83 ec 0c             	sub    esp,0xc
c0006d1b:	68 e4 fe 01 c0       	push   0xc001fee4
c0006d20:	e8 c0 97 00 00       	call   c00104e5 <KeSetBootMessage(char const*)>
c0006d25:	e8 9d f3 00 00       	call   c00160c7 <Vm::initialise8086()>
c0006d2a:	e8 81 42 00 00       	call   c000afb0 <Fs::initVFS()>
c0006d2f:	c7 04 24 f5 fd 01 c0 	mov    DWORD PTR [esp],0xc001fdf5
c0006d36:	e8 aa 97 00 00       	call   c00104e5 <KeSetBootMessage(char const*)>
c0006d3b:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0006d40:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d46:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d48:	6a 00                	push   0x0
c0006d4a:	6a 00                	push   0x0
c0006d4c:	6a 00                	push   0x0
c0006d4e:	50                   	push   eax
c0006d4f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d52:	83 c4 14             	add    esp,0x14
c0006d55:	68 e4 fe 01 c0       	push   0xc001fee4
c0006d5a:	e8 86 97 00 00       	call   c00104e5 <KeSetBootMessage(char const*)>
c0006d5f:	e8 9a 9c 00 00       	call   c00109fe <KeLoadSystemEnv()>
c0006d64:	e8 f7 9e 00 00       	call   c0010c60 <KeSetupPowerManager()>
c0006d69:	83 c4 0c             	add    esp,0xc
c0006d6c:	6a 3a                	push   0x3a
c0006d6e:	68 0f fe 01 c0       	push   0xc001fe0f
c0006d73:	68 18 fe 01 c0       	push   0xc001fe18
c0006d78:	e8 b7 c4 00 00       	call   c0013234 <Reg::readIntWithDefault(char*, char*, int)>
c0006d7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0006d80:	e8 3b 4d 00 00       	call   c000bac0 <User::loadClockSettings(int)>
c0006d85:	c7 04 24 08 ff 01 c0 	mov    DWORD PTR [esp],0xc001ff08
c0006d8c:	e8 54 97 00 00       	call   c00104e5 <KeSetBootMessage(char const*)>
c0006d91:	59                   	pop    ecx
c0006d92:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0006d97:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006d9d:	53                   	push   ebx
c0006d9e:	e8 bb 53 00 00       	call   c000c15e <Device::loadDriversForAll()>
c0006da3:	c7 04 24 20 fe 01 c0 	mov    DWORD PTR [esp],0xc001fe20
c0006daa:	e8 36 97 00 00       	call   c00104e5 <KeSetBootMessage(char const*)>
c0006daf:	58                   	pop    eax
c0006db0:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c0006db6:	5a                   	pop    edx
c0006db7:	6a 01                	push   0x1
c0006db9:	68 31 fe 01 c0       	push   0xc001fe31
c0006dbe:	e8 e8 db 00 00       	call   c00149ab <Thr::loadDLL(char const*, bool)>
c0006dc3:	59                   	pop    ecx
c0006dc4:	5a                   	pop    edx
c0006dc5:	53                   	push   ebx
c0006dc6:	50                   	push   eax
c0006dc7:	e8 10 de 00 00       	call   c0014bdc <Thr::executeDLL(unsigned long, void*)>
c0006dcc:	83 c4 10             	add    esp,0x10
c0006dcf:	83 ec 0c             	sub    esp,0xc
c0006dd2:	6a 02                	push   0x2
c0006dd4:	e8 47 e8 00 00       	call   c0015620 <blockTask(TaskState)>
c0006dd9:	83 c4 10             	add    esp,0x10
c0006ddc:	eb f1                	jmp    c0006dcf <Krnl::firstTask()+0x12c>

c0006dde <Computer::Computer()>:
c0006dde:	83 ec 0c             	sub    esp,0xc
c0006de1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006de5:	83 ec 08             	sub    esp,0x8
c0006de8:	68 4d fe 01 c0       	push   0xc001fe4d
c0006ded:	50                   	push   eax
c0006dee:	e8 e7 53 00 00       	call   c000c1da <Device::Device(char const*)>
c0006df3:	83 c4 10             	add    esp,0x10
c0006df6:	ba 54 ff 01 c0       	mov    edx,0xc001ff54
c0006dfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006dff:	89 10                	mov    DWORD PTR [eax],edx
c0006e01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e05:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e13:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e21:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e27:	83 ca 04             	or     edx,0x4
c0006e2a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e34:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e3a:	0f b6 d0             	movzx  edx,al
c0006e3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e41:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e4c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e52:	0f b6 d0             	movzx  edx,al
c0006e55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e59:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e62:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e68:	8d 50 01             	lea    edx,[eax+0x1]
c0006e6b:	88 d1                	mov    cl,dl
c0006e6d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e71:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006e77:	0f b6 d0             	movzx  edx,al
c0006e7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e7e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006e82:	83 e1 3f             	and    ecx,0x3f
c0006e85:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006e89:	90                   	nop
c0006e8a:	83 c4 0c             	add    esp,0xc
c0006e8d:	c3                   	ret    

c0006e8e <Computer::setBootMessage(char const*)>:
c0006e8e:	c3                   	ret    
c0006e8f:	90                   	nop

c0006e90 <Computer::detectFeatures()>:
c0006e90:	55                   	push   ebp
c0006e91:	57                   	push   edi
c0006e92:	56                   	push   esi
c0006e93:	53                   	push   ebx
c0006e94:	83 ec 1c             	sub    esp,0x1c
c0006e97:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006e9b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ea1:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006ea7:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006ead:	e8 47 93 ff ff       	call   c00001f9 <detectCPUID>
c0006eb2:	31 d2                	xor    edx,edx
c0006eb4:	85 c0                	test   eax,eax
c0006eb6:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ebc:	0f 95 c2             	setne  dl
c0006ebf:	83 e0 fd             	and    eax,0xfffffffd
c0006ec2:	d1 e2                	shl    edx,1
c0006ec4:	09 d0                	or     eax,edx
c0006ec6:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ecc:	a8 02                	test   al,0x2
c0006ece:	75 51                	jne    c0006f21 <Computer::detectFeatures()+0x91>
c0006ed0:	f6 05 d1 5e 02 c0 04 	test   BYTE PTR ds:0xc0025ed1,0x4
c0006ed7:	74 0f                	je     c0006ee8 <Computer::detectFeatures()+0x58>
c0006ed9:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006edf:	83 e0 fb             	and    eax,0xfffffffb
c0006ee2:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ee8:	e8 e9 77 01 00       	call   c001e6d6 <x87Detect>
c0006eed:	83 e0 01             	and    eax,0x1
c0006ef0:	c1 e0 04             	shl    eax,0x4
c0006ef3:	89 c2                	mov    edx,eax
c0006ef5:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006efb:	83 e0 ef             	and    eax,0xffffffef
c0006efe:	09 d0                	or     eax,edx
c0006f00:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f06:	88 c2                	mov    dl,al
c0006f08:	a8 10                	test   al,0x10
c0006f0a:	0f 85 33 01 00 00    	jne    c0007043 <Computer::detectFeatures()+0x1b3>
c0006f10:	80 e2 80             	and    dl,0x80
c0006f13:	0f 85 4c 01 00 00    	jne    c0007065 <Computer::detectFeatures()+0x1d5>
c0006f19:	83 c4 1c             	add    esp,0x1c
c0006f1c:	5b                   	pop    ebx
c0006f1d:	5e                   	pop    esi
c0006f1e:	5f                   	pop    edi
c0006f1f:	5d                   	pop    ebp
c0006f20:	c3                   	ret    
c0006f21:	83 ec 0c             	sub    esp,0xc
c0006f24:	6a 20                	push   0x20
c0006f26:	e8 a9 8a 00 00       	call   c000f9d4 <CPU::cpuidCheckEDX(unsigned int)>
c0006f2b:	83 e0 01             	and    eax,0x1
c0006f2e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f35:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f3b:	83 e0 f7             	and    eax,0xfffffff7
c0006f3e:	09 d0                	or     eax,edx
c0006f40:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f46:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f4d:	e8 82 8a 00 00       	call   c000f9d4 <CPU::cpuidCheckEDX(unsigned int)>
c0006f52:	89 c2                	mov    edx,eax
c0006f54:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f5a:	83 e2 01             	and    edx,0x1
c0006f5d:	83 e0 fe             	and    eax,0xfffffffe
c0006f60:	09 d0                	or     eax,edx
c0006f62:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f68:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f6f:	e8 60 8a 00 00       	call   c000f9d4 <CPU::cpuidCheckEDX(unsigned int)>
c0006f74:	89 c2                	mov    edx,eax
c0006f76:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f7c:	c1 e2 07             	shl    edx,0x7
c0006f7f:	83 e0 7f             	and    eax,0x7f
c0006f82:	09 d0                	or     eax,edx
c0006f84:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f8a:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006f91:	e8 3e 8a 00 00       	call   c000f9d4 <CPU::cpuidCheckEDX(unsigned int)>
c0006f96:	83 c4 10             	add    esp,0x10
c0006f99:	83 e0 01             	and    eax,0x1
c0006f9c:	c1 e0 05             	shl    eax,0x5
c0006f9f:	89 c2                	mov    edx,eax
c0006fa1:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fa7:	83 e0 df             	and    eax,0xffffffdf
c0006faa:	09 d0                	or     eax,edx
c0006fac:	f7 05 d0 5e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0025ed0,0x401
c0006fb6:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fbc:	0f 84 c9 00 00 00    	je     c000708b <Computer::detectFeatures()+0x1fb>
c0006fc2:	83 e0 fe             	and    eax,0xfffffffe
c0006fc5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fcb:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fd1:	89 c2                	mov    edx,eax
c0006fd3:	83 e2 09             	and    edx,0x9
c0006fd6:	83 fa 01             	cmp    edx,0x1
c0006fd9:	75 09                	jne    c0006fe4 <Computer::detectFeatures()+0x154>
c0006fdb:	83 e0 fe             	and    eax,0xfffffffe
c0006fde:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fe4:	83 ec 0c             	sub    esp,0xc
c0006fe7:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006feb:	50                   	push   eax
c0006fec:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006ff0:	55                   	push   ebp
c0006ff1:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006ff5:	57                   	push   edi
c0006ff6:	8d 74 24 18          	lea    esi,[esp+0x18]
c0006ffa:	56                   	push   esi
c0006ffb:	68 00 00 00 80       	push   0x80000000
c0007000:	e8 4b 89 00 00       	call   c000f950 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007005:	83 c4 20             	add    esp,0x20
c0007008:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000700f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0007013:	0f 86 b7 fe ff ff    	jbe    c0006ed0 <Computer::detectFeatures()+0x40>
c0007019:	83 ec 0c             	sub    esp,0xc
c000701c:	50                   	push   eax
c000701d:	55                   	push   ebp
c000701e:	57                   	push   edi
c000701f:	56                   	push   esi
c0007020:	68 01 00 00 80       	push   0x80000001
c0007025:	e8 26 89 00 00       	call   c000f950 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000702a:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0007030:	83 c4 20             	add    esp,0x20
c0007033:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0007038:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000703e:	e9 8d fe ff ff       	jmp    c0006ed0 <Computer::detectFeatures()+0x40>
c0007043:	e8 48 76 01 00       	call   c001e690 <absolutelyNoChanceInHell>
c0007048:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c000704e:	c1 e0 07             	shl    eax,0x7
c0007051:	83 e2 7f             	and    edx,0x7f
c0007054:	09 c2                	or     edx,eax
c0007056:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c000705c:	80 e2 80             	and    dl,0x80
c000705f:	0f 84 b4 fe ff ff    	je     c0006f19 <Computer::detectFeatures()+0x89>
c0007065:	e8 96 72 01 00       	call   c001e300 <avxDetect>
c000706a:	83 e0 01             	and    eax,0x1
c000706d:	c1 e0 05             	shl    eax,0x5
c0007070:	89 c2                	mov    edx,eax
c0007072:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0007078:	83 e0 df             	and    eax,0xffffffdf
c000707b:	09 d0                	or     eax,edx
c000707d:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0007083:	83 c4 1c             	add    esp,0x1c
c0007086:	5b                   	pop    ebx
c0007087:	5e                   	pop    esi
c0007088:	5f                   	pop    edi
c0007089:	5d                   	pop    ebp
c000708a:	c3                   	ret    
c000708b:	83 ec 0c             	sub    esp,0xc
c000708e:	68 00 02 00 00       	push   0x200
c0007093:	e8 3c 89 00 00       	call   c000f9d4 <CPU::cpuidCheckEDX(unsigned int)>
c0007098:	83 c4 10             	add    esp,0x10
c000709b:	89 c2                	mov    edx,eax
c000709d:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070a3:	83 e2 01             	and    edx,0x1
c00070a6:	83 e0 fe             	and    eax,0xfffffffe
c00070a9:	09 d0                	or     eax,edx
c00070ab:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070b1:	e9 15 ff ff ff       	jmp    c0006fcb <Computer::detectFeatures()+0x13b>

c00070b6 <Computer::displayFeatures()>:
c00070b6:	c3                   	ret    
c00070b7:	90                   	nop

c00070b8 <Computer::rdmsr(unsigned int)>:
c00070b8:	83 ec 0c             	sub    esp,0xc
c00070bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070bf:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070c6:	74 0a                	je     c00070d2 <Computer::rdmsr(unsigned int)+0x1a>
c00070c8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070cc:	0f 32                	rdmsr  
c00070ce:	83 c4 0c             	add    esp,0xc
c00070d1:	c3                   	ret    
c00070d2:	83 ec 0c             	sub    esp,0xc
c00070d5:	68 56 fe 01 c0       	push   0xc001fe56
c00070da:	e8 bc 9a 00 00       	call   c0010b9b <KePanic(char const*)>
c00070df:	83 c4 10             	add    esp,0x10
c00070e2:	eb e4                	jmp    c00070c8 <Computer::rdmsr(unsigned int)+0x10>

c00070e4 <Computer::wrmsr(unsigned int, unsigned long long)>:
c00070e4:	57                   	push   edi
c00070e5:	56                   	push   esi
c00070e6:	83 ec 04             	sub    esp,0x4
c00070e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070ed:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00070f1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00070f5:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070fc:	74 10                	je     c000710e <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c00070fe:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007102:	89 f0                	mov    eax,esi
c0007104:	89 fa                	mov    edx,edi
c0007106:	0f 30                	wrmsr  
c0007108:	83 c4 04             	add    esp,0x4
c000710b:	5e                   	pop    esi
c000710c:	5f                   	pop    edi
c000710d:	c3                   	ret    
c000710e:	83 ec 0c             	sub    esp,0xc
c0007111:	68 5c fe 01 c0       	push   0xc001fe5c
c0007116:	e8 80 9a 00 00       	call   c0010b9b <KePanic(char const*)>
c000711b:	83 c4 10             	add    esp,0x10
c000711e:	eb de                	jmp    c00070fe <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c0007120 <Computer::shutdown()>:
c0007120:	83 ec 0c             	sub    esp,0xc
c0007123:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007127:	8b 10                	mov    edx,DWORD PTR [eax]
c0007129:	6a 00                	push   0x0
c000712b:	6a 00                	push   0x0
c000712d:	6a 00                	push   0x0
c000712f:	50                   	push   eax
c0007130:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007133:	83 c4 1c             	add    esp,0x1c
c0007136:	c3                   	ret    
c0007137:	90                   	nop

c0007138 <Computer::restart()>:
c0007138:	83 ec 0c             	sub    esp,0xc
c000713b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000713f:	8b 10                	mov    edx,DWORD PTR [eax]
c0007141:	6a 00                	push   0x0
c0007143:	6a 00                	push   0x0
c0007145:	6a 01                	push   0x1
c0007147:	50                   	push   eax
c0007148:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000714b:	83 c4 1c             	add    esp,0x1c
c000714e:	c3                   	ret    
c000714f:	90                   	nop

c0007150 <Computer::sleep()>:
c0007150:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007154:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000715a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000715e:	e9 89 82 00 00       	jmp    c000f3ec <ACPI::sleep()>
c0007163:	90                   	nop

c0007164 <Computer::nmiEnabled()>:
c0007164:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007168:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000716e:	c3                   	ret    
c000716f:	90                   	nop

c0007170 <Computer::readCMOS(unsigned char)>:
c0007170:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007174:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007178:	80 ba 58 01 00 00 00 	cmp    BYTE PTR [edx+0x158],0x0
c000717f:	75 09                	jne    c000718a <Computer::readCMOS(unsigned char)+0x1a>
c0007181:	b2 80                	mov    dl,0x80
c0007183:	09 d0                	or     eax,edx
c0007185:	e6 70                	out    0x70,al
c0007187:	e4 71                	in     al,0x71
c0007189:	c3                   	ret    
c000718a:	31 d2                	xor    edx,edx
c000718c:	eb f5                	jmp    c0007183 <Computer::readCMOS(unsigned char)+0x13>

c000718e <Computer::enableNMI(bool)>:
c000718e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007192:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007196:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000719c:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071a4:	eb ca                	jmp    c0007170 <Computer::readCMOS(unsigned char)>

c00071a6 <Computer::open(int, int, void*)>:
c00071a6:	56                   	push   esi
c00071a7:	53                   	push   ebx
c00071a8:	83 ec 10             	sub    esp,0x10
c00071ab:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071af:	f6 05 d0 5e 02 c0 04 	test   BYTE PTR ds:0xc0025ed0,0x4
c00071b6:	68 62 fe 01 c0       	push   0xc001fe62
c00071bb:	0f 94 05 00 28 02 c0 	sete   BYTE PTR ds:0xc0022800
c00071c2:	e8 1e 93 00 00       	call   c00104e5 <KeSetBootMessage(char const*)>
c00071c7:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071ce:	e8 db 08 00 00       	call   c0007aae <malloc>
c00071d3:	89 04 24             	mov    DWORD PTR [esp],eax
c00071d6:	89 c6                	mov    esi,eax
c00071d8:	e8 83 7d 00 00       	call   c000ef60 <ACPI::ACPI()>
c00071dd:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c00071e3:	58                   	pop    eax
c00071e4:	5a                   	pop    edx
c00071e5:	56                   	push   esi
c00071e6:	53                   	push   ebx
c00071e7:	e8 56 4e 00 00       	call   c000c042 <Device::addChild(Device*)>
c00071ec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00071ef:	e8 9c fc ff ff       	call   c0006e90 <Computer::detectFeatures()>
c00071f4:	59                   	pop    ecx
c00071f5:	5e                   	pop    esi
c00071f6:	6a 01                	push   0x1
c00071f8:	53                   	push   ebx
c00071f9:	e8 90 ff ff ff       	call   c000718e <Computer::enableNMI(bool)>
c00071fe:	c7 04 24 7a fe 01 c0 	mov    DWORD PTR [esp],0xc001fe7a
c0007205:	e8 db 92 00 00       	call   c00104e5 <KeSetBootMessage(char const*)>
c000720a:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007211:	e8 98 08 00 00       	call   c0007aae <malloc>
c0007216:	89 04 24             	mov    DWORD PTR [esp],eax
c0007219:	89 c6                	mov    esi,eax
c000721b:	e8 6c 88 00 00       	call   c000fa8c <CPU::CPU()>
c0007220:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0007226:	58                   	pop    eax
c0007227:	5a                   	pop    edx
c0007228:	56                   	push   esi
c0007229:	53                   	push   ebx
c000722a:	e8 13 4e 00 00       	call   c000c042 <Device::addChild(Device*)>
c000722f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0007235:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007239:	8b 10                	mov    edx,DWORD PTR [eax]
c000723b:	51                   	push   ecx
c000723c:	6a 00                	push   0x0
c000723e:	6a 00                	push   0x0
c0007240:	50                   	push   eax
c0007241:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0007244:	83 c4 14             	add    esp,0x14
c0007247:	68 28 ff 01 c0       	push   0xc001ff28
c000724c:	e8 94 92 00 00       	call   c00104e5 <KeSetBootMessage(char const*)>
c0007251:	e8 ae 00 01 00       	call   c0017304 <HalInitialiseCoprocessor()>
c0007256:	c7 04 24 94 fe 01 c0 	mov    DWORD PTR [esp],0xc001fe94
c000725d:	e8 83 92 00 00       	call   c00104e5 <KeSetBootMessage(char const*)>
c0007262:	c7 04 24 a3 6c 00 c0 	mov    DWORD PTR [esp],0xc0006ca3
c0007269:	e8 7a e0 00 00       	call   c00152e8 <setupMultitasking(void (*)())>
c000726e:	83 c4 14             	add    esp,0x14
c0007271:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007276:	5b                   	pop    ebx
c0007277:	5e                   	pop    esi
c0007278:	c3                   	ret    
c0007279:	90                   	nop

c000727a <Computer::disableNMI()>:
c000727a:	6a 00                	push   0x0
c000727c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007280:	50                   	push   eax
c0007281:	e8 08 ff ff ff       	call   c000718e <Computer::enableNMI(bool)>
c0007286:	5a                   	pop    edx
c0007287:	59                   	pop    ecx
c0007288:	c3                   	ret    
c0007289:	90                   	nop

c000728a <Computer::writeCMOS(unsigned char, unsigned char)>:
c000728a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000728e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007292:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007296:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c000729d:	75 0b                	jne    c00072aa <Computer::writeCMOS(unsigned char, unsigned char)+0x20>
c000729f:	b1 80                	mov    cl,0x80
c00072a1:	09 c8                	or     eax,ecx
c00072a3:	e6 70                	out    0x70,al
c00072a5:	88 d0                	mov    al,dl
c00072a7:	e6 71                	out    0x71,al
c00072a9:	c3                   	ret    
c00072aa:	31 c9                	xor    ecx,ecx
c00072ac:	eb f3                	jmp    c00072a1 <Computer::writeCMOS(unsigned char, unsigned char)+0x17>

c00072ae <Computer::handleNMI()>:
c00072ae:	56                   	push   esi
c00072af:	53                   	push   ebx
c00072b0:	83 ec 10             	sub    esp,0x10
c00072b3:	e4 92                	in     al,0x92
c00072b5:	89 c6                	mov    esi,eax
c00072b7:	e4 61                	in     al,0x61
c00072b9:	68 af fe 01 c0       	push   0xc001feaf
c00072be:	88 c3                	mov    bl,al
c00072c0:	e8 74 36 00 00       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c00072c5:	83 c4 10             	add    esp,0x10
c00072c8:	83 e6 10             	and    esi,0x10
c00072cb:	75 10                	jne    c00072dd <Computer::handleNMI()+0x2f>
c00072cd:	f6 c3 40             	test   bl,0x40
c00072d0:	75 20                	jne    c00072f2 <Computer::handleNMI()+0x44>
c00072d2:	80 e3 80             	and    bl,0x80
c00072d5:	75 30                	jne    c0007307 <Computer::handleNMI()+0x59>
c00072d7:	83 c4 04             	add    esp,0x4
c00072da:	5b                   	pop    ebx
c00072db:	5e                   	pop    esi
c00072dc:	c3                   	ret    
c00072dd:	83 ec 0c             	sub    esp,0xc
c00072e0:	68 c0 fe 01 c0       	push   0xc001fec0
c00072e5:	e8 b1 98 00 00       	call   c0010b9b <KePanic(char const*)>
c00072ea:	83 c4 10             	add    esp,0x10
c00072ed:	f6 c3 40             	test   bl,0x40
c00072f0:	74 e0                	je     c00072d2 <Computer::handleNMI()+0x24>
c00072f2:	83 ec 0c             	sub    esp,0xc
c00072f5:	68 cd fe 01 c0       	push   0xc001fecd
c00072fa:	e8 9c 98 00 00       	call   c0010b9b <KePanic(char const*)>
c00072ff:	83 c4 10             	add    esp,0x10
c0007302:	80 e3 80             	and    bl,0x80
c0007305:	74 d0                	je     c00072d7 <Computer::handleNMI()+0x29>
c0007307:	c7 44 24 10 d7 fe 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fed7
c000730f:	83 c4 04             	add    esp,0x4
c0007312:	5b                   	pop    ebx
c0007313:	5e                   	pop    esi
c0007314:	e9 82 98 00 00       	jmp    c0010b9b <KePanic(char const*)>
c0007319:	90                   	nop

c000731a <GDTEntry::setBase(unsigned int)>:
c000731a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000731e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007322:	89 c1                	mov    ecx,eax
c0007324:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007328:	c1 e9 10             	shr    ecx,0x10
c000732b:	c1 e8 18             	shr    eax,0x18
c000732e:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007331:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0007334:	c3                   	ret    
c0007335:	90                   	nop

c0007336 <GDTEntry::setLimit(unsigned int)>:
c0007336:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000733a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000733e:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007341:	66 89 01             	mov    WORD PTR [ecx],ax
c0007344:	83 e2 f0             	and    edx,0xfffffff0
c0007347:	c1 e8 10             	shr    eax,0x10
c000734a:	83 e0 0f             	and    eax,0xf
c000734d:	09 d0                	or     eax,edx
c000734f:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0007352:	c3                   	ret    
c0007353:	90                   	nop

c0007354 <GDT::GDT()>:
c0007354:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007358:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000735e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007362:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007368:	90                   	nop
c0007369:	c3                   	ret    

c000736a <GDT::addEntry(GDTEntry)>:
c000736a:	53                   	push   ebx
c000736b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000736f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007373:	8b 02                	mov    eax,DWORD PTR [edx]
c0007375:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007379:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000737d:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0007381:	8d 48 01             	lea    ecx,[eax+0x1]
c0007384:	c1 e0 03             	shl    eax,0x3
c0007387:	89 0a                	mov    DWORD PTR [edx],ecx
c0007389:	5b                   	pop    ebx
c000738a:	c3                   	ret    
c000738b:	90                   	nop

c000738c <GDT::getNumberOfEntries()>:
c000738c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007390:	8b 00                	mov    eax,DWORD PTR [eax]
c0007392:	c3                   	ret    
c0007393:	90                   	nop

c0007394 <GDT::flush()>:
c0007394:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007398:	8b 10                	mov    edx,DWORD PTR [eax]
c000739a:	83 c0 04             	add    eax,0x4
c000739d:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073a4:	a3 c2 5e 02 c0       	mov    ds:0xc0025ec2,eax
c00073a9:	66 89 15 c0 5e 02 c0 	mov    WORD PTR ds:0xc0025ec0,dx
c00073b0:	e9 a5 8f ff ff       	jmp    c000035a <loadGDT>
c00073b5:	90                   	nop

c00073b6 <GDT::setup()>:
c00073b6:	57                   	push   edi
c00073b7:	56                   	push   esi
c00073b8:	53                   	push   ebx
c00073b9:	83 ec 30             	sub    esp,0x30
c00073bc:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073c0:	6a 00                	push   0x0
c00073c2:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073c6:	56                   	push   esi
c00073c7:	e8 4e ff ff ff       	call   c000731a <GDTEntry::setBase(unsigned int)>
c00073cc:	6a 00                	push   0x0
c00073ce:	56                   	push   esi
c00073cf:	e8 62 ff ff ff       	call   c0007336 <GDTEntry::setLimit(unsigned int)>
c00073d4:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00073dc:	6a 00                	push   0x0
c00073de:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00073e2:	56                   	push   esi
c00073e3:	e8 32 ff ff ff       	call   c000731a <GDTEntry::setBase(unsigned int)>
c00073e8:	68 ff ff ff 00       	push   0xffffff
c00073ed:	56                   	push   esi
c00073ee:	e8 43 ff ff ff       	call   c0007336 <GDTEntry::setLimit(unsigned int)>
c00073f3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00073f7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00073fb:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00073ff:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007403:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007408:	0d 00 9a c0 00       	or     eax,0xc09a00
c000740d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007411:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0007415:	89 f8                	mov    eax,edi
c0007417:	89 fa                	mov    edx,edi
c0007419:	80 e4 f7             	and    ah,0xf7
c000741c:	80 ce 60             	or     dh,0x60
c000741f:	89 c7                	mov    edi,eax
c0007421:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0007425:	80 cc 60             	or     ah,0x60
c0007428:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000742c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007430:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007434:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007438:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000743c:	83 c4 20             	add    esp,0x20
c000743f:	6a 00                	push   0x0
c0007441:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007445:	50                   	push   eax
c0007446:	e8 cf fe ff ff       	call   c000731a <GDTEntry::setBase(unsigned int)>
c000744b:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000744f:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0007453:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007457:	83 e0 3f             	and    eax,0x3f
c000745a:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000745e:	6a 00                	push   0x0
c0007460:	8d 44 24 34          	lea    eax,[esp+0x34]
c0007464:	50                   	push   eax
c0007465:	e8 b0 fe ff ff       	call   c000731a <GDTEntry::setBase(unsigned int)>
c000746a:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000746e:	83 e0 3f             	and    eax,0x3f
c0007471:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c0007475:	83 c4 0c             	add    esp,0xc
c0007478:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000747c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007480:	53                   	push   ebx
c0007481:	e8 e4 fe ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c0007486:	83 c4 0c             	add    esp,0xc
c0007489:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000748d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007491:	53                   	push   ebx
c0007492:	e8 d3 fe ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c0007497:	83 c4 0c             	add    esp,0xc
c000749a:	57                   	push   edi
c000749b:	56                   	push   esi
c000749c:	53                   	push   ebx
c000749d:	e8 c8 fe ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c00074a2:	83 c4 0c             	add    esp,0xc
c00074a5:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074a9:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074ad:	53                   	push   ebx
c00074ae:	e8 b7 fe ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c00074b3:	83 c4 0c             	add    esp,0xc
c00074b6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074ba:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074be:	53                   	push   ebx
c00074bf:	e8 a6 fe ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c00074c4:	83 c4 0c             	add    esp,0xc
c00074c7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074cb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074cf:	53                   	push   ebx
c00074d0:	e8 95 fe ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c00074d5:	83 c4 0c             	add    esp,0xc
c00074d8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074dc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074e0:	53                   	push   ebx
c00074e1:	e8 84 fe ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c00074e6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00074e9:	e8 a6 fe ff ff       	call   c0007394 <GDT::flush()>
c00074ee:	83 c4 40             	add    esp,0x40
c00074f1:	5b                   	pop    ebx
c00074f2:	5e                   	pop    esi
c00074f3:	5f                   	pop    edi
c00074f4:	c3                   	ret    

c00074f5 <idleFunction(void*)>:
c00074f5:	83 ec 0c             	sub    esp,0xc
c00074f8:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c00074fd:	48                   	dec    eax
c00074fe:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0007503:	75 01                	jne    c0007506 <idleFunction(void*)+0x11>
c0007505:	fb                   	sti    
c0007506:	e8 c5 fa 00 00       	call   c0016fd0 <HalSystemIdle()>
c000750b:	e8 82 77 01 00       	call   c001ec92 <idleCommon()>
c0007510:	eb f4                	jmp    c0007506 <idleFunction(void*)+0x11>
c0007512:	66 90                	xchg   ax,ax

c0007514 <IDTEntry::IDTEntry(bool)>:
c0007514:	53                   	push   ebx
c0007515:	83 ec 04             	sub    esp,0x4
c0007518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000751c:	88 04 24             	mov    BYTE PTR [esp],al
c000751f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007523:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007529:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000752d:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007531:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007535:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007538:	83 e2 f0             	and    edx,0xfffffff0
c000753b:	83 ca 0e             	or     edx,0xe
c000753e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007541:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007545:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007548:	83 e2 ef             	and    edx,0xffffffef
c000754b:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000754e:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0007552:	85 c0                	test   eax,eax
c0007554:	74 06                	je     c000755c <IDTEntry::IDTEntry(bool)+0x48>
c0007556:	b2 03                	mov    dl,0x3
c0007558:	eb 06                	jmp    c0007560 <IDTEntry::IDTEntry(bool)+0x4c>
c000755a:	66 90                	xchg   ax,ax
c000755c:	b2 00                	mov    dl,0x0
c000755e:	66 90                	xchg   ax,ax
c0007560:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007564:	83 e2 03             	and    edx,0x3
c0007567:	89 d3                	mov    ebx,edx
c0007569:	c1 e3 05             	shl    ebx,0x5
c000756c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000756f:	83 e2 9f             	and    edx,0xffffff9f
c0007572:	88 d1                	mov    cl,dl
c0007574:	88 da                	mov    dl,bl
c0007576:	09 ca                	or     edx,ecx
c0007578:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000757b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000757f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007582:	83 ca 80             	or     edx,0xffffff80
c0007585:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007588:	90                   	nop
c0007589:	83 c4 04             	add    esp,0x4
c000758c:	5b                   	pop    ebx
c000758d:	c3                   	ret    

c000758e <IDTEntry::setOffset(unsigned int)>:
c000758e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007592:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007596:	66 89 02             	mov    WORD PTR [edx],ax
c0007599:	c1 e8 10             	shr    eax,0x10
c000759c:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075a0:	c3                   	ret    
c00075a1:	90                   	nop
c00075a2:	66 90                	xchg   ax,ax

c00075a4 <IDT::IDT()>:
c00075a4:	90                   	nop
c00075a5:	c3                   	ret    

c00075a6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075aa:	83 c0 30             	add    eax,0x30
c00075ad:	c3                   	ret    

c00075ae <IDT::addEntry(IDTEntry, int)>:
c00075ae:	53                   	push   ebx
c00075af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075b3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075b7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075bf:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075c2:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075c6:	5b                   	pop    ebx
c00075c7:	c3                   	ret    

c00075c8 <IDT::addEntry(int, void (*)(), bool)>:
c00075c8:	53                   	push   ebx
c00075c9:	83 ec 10             	sub    esp,0x10
c00075cc:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075d1:	50                   	push   eax
c00075d2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075d6:	53                   	push   ebx
c00075d7:	e8 38 ff ff ff       	call   c0007514 <IDTEntry::IDTEntry(bool)>
c00075dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00075e0:	53                   	push   ebx
c00075e1:	e8 a8 ff ff ff       	call   c000758e <IDTEntry::setOffset(unsigned int)>
c00075e6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00075ea:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075ee:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075f2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00075f6:	e8 b3 ff ff ff       	call   c00075ae <IDT::addEntry(IDTEntry, int)>
c00075fb:	83 c4 30             	add    esp,0x30
c00075fe:	5b                   	pop    ebx
c00075ff:	c3                   	ret    

c0007600 <IDT::flush()>:
c0007600:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007604:	66 c7 05 c8 5e 02 c0 ff 07 	mov    WORD PTR ds:0xc0025ec8,0x7ff
c000760d:	a3 ca 5e 02 c0       	mov    ds:0xc0025eca,eax
c0007612:	0f 01 1d c8 5e 02 c0 	lidtd  ds:0xc0025ec8
c0007619:	c3                   	ret    

c000761a <IDT::setup()>:
c000761a:	57                   	push   edi
c000761b:	56                   	push   esi
c000761c:	53                   	push   ebx
c000761d:	83 ec 10             	sub    esp,0x10
c0007620:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007624:	6a 00                	push   0x0
c0007626:	68 90 e3 01 c0       	push   0xc001e390
c000762b:	6a 00                	push   0x0
c000762d:	53                   	push   ebx
c000762e:	e8 95 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007633:	6a 00                	push   0x0
c0007635:	68 a0 e3 01 c0       	push   0xc001e3a0
c000763a:	6a 01                	push   0x1
c000763c:	53                   	push   ebx
c000763d:	e8 86 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007642:	83 c4 20             	add    esp,0x20
c0007645:	6a 00                	push   0x0
c0007647:	68 aa e3 01 c0       	push   0xc001e3aa
c000764c:	6a 02                	push   0x2
c000764e:	53                   	push   ebx
c000764f:	e8 74 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007654:	6a 00                	push   0x0
c0007656:	68 b4 e3 01 c0       	push   0xc001e3b4
c000765b:	6a 03                	push   0x3
c000765d:	53                   	push   ebx
c000765e:	e8 65 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007663:	83 c4 20             	add    esp,0x20
c0007666:	6a 00                	push   0x0
c0007668:	68 be e3 01 c0       	push   0xc001e3be
c000766d:	6a 04                	push   0x4
c000766f:	53                   	push   ebx
c0007670:	e8 53 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007675:	6a 00                	push   0x0
c0007677:	68 c8 e3 01 c0       	push   0xc001e3c8
c000767c:	6a 05                	push   0x5
c000767e:	53                   	push   ebx
c000767f:	e8 44 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007684:	83 c4 20             	add    esp,0x20
c0007687:	6a 00                	push   0x0
c0007689:	68 d2 e3 01 c0       	push   0xc001e3d2
c000768e:	6a 06                	push   0x6
c0007690:	53                   	push   ebx
c0007691:	e8 32 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007696:	6a 00                	push   0x0
c0007698:	68 dc e3 01 c0       	push   0xc001e3dc
c000769d:	6a 07                	push   0x7
c000769f:	53                   	push   ebx
c00076a0:	e8 23 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00076a5:	83 c4 20             	add    esp,0x20
c00076a8:	6a 00                	push   0x0
c00076aa:	68 e6 e3 01 c0       	push   0xc001e3e6
c00076af:	6a 08                	push   0x8
c00076b1:	53                   	push   ebx
c00076b2:	e8 11 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00076b7:	6a 00                	push   0x0
c00076b9:	68 ee e3 01 c0       	push   0xc001e3ee
c00076be:	6a 09                	push   0x9
c00076c0:	53                   	push   ebx
c00076c1:	e8 02 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00076c6:	83 c4 20             	add    esp,0x20
c00076c9:	6a 00                	push   0x0
c00076cb:	68 f8 e3 01 c0       	push   0xc001e3f8
c00076d0:	6a 0a                	push   0xa
c00076d2:	53                   	push   ebx
c00076d3:	e8 f0 fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00076d8:	6a 00                	push   0x0
c00076da:	68 00 e4 01 c0       	push   0xc001e400
c00076df:	6a 0b                	push   0xb
c00076e1:	53                   	push   ebx
c00076e2:	e8 e1 fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00076e7:	83 c4 20             	add    esp,0x20
c00076ea:	6a 00                	push   0x0
c00076ec:	68 08 e4 01 c0       	push   0xc001e408
c00076f1:	6a 0c                	push   0xc
c00076f3:	53                   	push   ebx
c00076f4:	e8 cf fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00076f9:	6a 00                	push   0x0
c00076fb:	68 10 e4 01 c0       	push   0xc001e410
c0007700:	6a 0d                	push   0xd
c0007702:	53                   	push   ebx
c0007703:	e8 c0 fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007708:	83 c4 20             	add    esp,0x20
c000770b:	6a 00                	push   0x0
c000770d:	68 2a e4 01 c0       	push   0xc001e42a
c0007712:	6a 0e                	push   0xe
c0007714:	53                   	push   ebx
c0007715:	e8 ae fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000771a:	6a 00                	push   0x0
c000771c:	68 32 e4 01 c0       	push   0xc001e432
c0007721:	6a 0f                	push   0xf
c0007723:	53                   	push   ebx
c0007724:	e8 9f fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007729:	83 c4 20             	add    esp,0x20
c000772c:	6a 00                	push   0x0
c000772e:	68 3c e4 01 c0       	push   0xc001e43c
c0007733:	6a 10                	push   0x10
c0007735:	53                   	push   ebx
c0007736:	e8 8d fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000773b:	6a 00                	push   0x0
c000773d:	68 46 e4 01 c0       	push   0xc001e446
c0007742:	6a 11                	push   0x11
c0007744:	53                   	push   ebx
c0007745:	e8 7e fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000774a:	83 c4 20             	add    esp,0x20
c000774d:	6a 00                	push   0x0
c000774f:	68 50 e4 01 c0       	push   0xc001e450
c0007754:	6a 12                	push   0x12
c0007756:	53                   	push   ebx
c0007757:	e8 6c fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000775c:	6a 01                	push   0x1
c000775e:	68 ea e4 01 c0       	push   0xc001e4ea
c0007763:	6a 60                	push   0x60
c0007765:	53                   	push   ebx
c0007766:	e8 5d fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000776b:	83 c4 20             	add    esp,0x20
c000776e:	6a 00                	push   0x0
c0007770:	68 f1 e4 01 c0       	push   0xc001e4f1
c0007775:	6a 20                	push   0x20
c0007777:	53                   	push   ebx
c0007778:	e8 4b fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000777d:	6a 00                	push   0x0
c000777f:	68 dc e4 01 c0       	push   0xc001e4dc
c0007784:	6a 21                	push   0x21
c0007786:	53                   	push   ebx
c0007787:	e8 3c fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000778c:	83 c4 20             	add    esp,0x20
c000778f:	6a 00                	push   0x0
c0007791:	68 e3 e4 01 c0       	push   0xc001e4e3
c0007796:	6a 22                	push   0x22
c0007798:	53                   	push   ebx
c0007799:	e8 2a fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000779e:	6a 00                	push   0x0
c00077a0:	68 5a e4 01 c0       	push   0xc001e45a
c00077a5:	6a 23                	push   0x23
c00077a7:	53                   	push   ebx
c00077a8:	e8 1b fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00077ad:	83 c4 20             	add    esp,0x20
c00077b0:	6a 00                	push   0x0
c00077b2:	68 64 e4 01 c0       	push   0xc001e464
c00077b7:	6a 24                	push   0x24
c00077b9:	53                   	push   ebx
c00077ba:	e8 09 fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00077bf:	6a 00                	push   0x0
c00077c1:	68 6e e4 01 c0       	push   0xc001e46e
c00077c6:	6a 25                	push   0x25
c00077c8:	53                   	push   ebx
c00077c9:	e8 fa fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00077ce:	83 c4 20             	add    esp,0x20
c00077d1:	6a 00                	push   0x0
c00077d3:	68 78 e4 01 c0       	push   0xc001e478
c00077d8:	6a 26                	push   0x26
c00077da:	53                   	push   ebx
c00077db:	e8 e8 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00077e0:	6a 00                	push   0x0
c00077e2:	68 82 e4 01 c0       	push   0xc001e482
c00077e7:	6a 27                	push   0x27
c00077e9:	53                   	push   ebx
c00077ea:	e8 d9 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00077ef:	83 c4 20             	add    esp,0x20
c00077f2:	6a 00                	push   0x0
c00077f4:	68 8c e4 01 c0       	push   0xc001e48c
c00077f9:	6a 28                	push   0x28
c00077fb:	53                   	push   ebx
c00077fc:	e8 c7 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007801:	6a 00                	push   0x0
c0007803:	68 96 e4 01 c0       	push   0xc001e496
c0007808:	6a 29                	push   0x29
c000780a:	53                   	push   ebx
c000780b:	e8 b8 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007810:	83 c4 20             	add    esp,0x20
c0007813:	6a 00                	push   0x0
c0007815:	68 a0 e4 01 c0       	push   0xc001e4a0
c000781a:	6a 2a                	push   0x2a
c000781c:	53                   	push   ebx
c000781d:	e8 a6 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007822:	6a 00                	push   0x0
c0007824:	68 aa e4 01 c0       	push   0xc001e4aa
c0007829:	6a 2b                	push   0x2b
c000782b:	53                   	push   ebx
c000782c:	e8 97 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007831:	83 c4 20             	add    esp,0x20
c0007834:	6a 00                	push   0x0
c0007836:	68 b4 e4 01 c0       	push   0xc001e4b4
c000783b:	6a 2c                	push   0x2c
c000783d:	53                   	push   ebx
c000783e:	e8 85 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007843:	6a 00                	push   0x0
c0007845:	68 be e4 01 c0       	push   0xc001e4be
c000784a:	6a 2d                	push   0x2d
c000784c:	53                   	push   ebx
c000784d:	e8 76 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007852:	83 c4 20             	add    esp,0x20
c0007855:	6a 00                	push   0x0
c0007857:	68 c8 e4 01 c0       	push   0xc001e4c8
c000785c:	6a 2e                	push   0x2e
c000785e:	53                   	push   ebx
c000785f:	e8 64 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007864:	6a 00                	push   0x0
c0007866:	68 d2 e4 01 c0       	push   0xc001e4d2
c000786b:	6a 2f                	push   0x2f
c000786d:	53                   	push   ebx
c000786e:	e8 55 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007873:	83 c4 20             	add    esp,0x20
c0007876:	6a 00                	push   0x0
c0007878:	68 2c e6 01 c0       	push   0xc001e62c
c000787d:	6a 30                	push   0x30
c000787f:	53                   	push   ebx
c0007880:	e8 43 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007885:	6a 00                	push   0x0
c0007887:	68 36 e6 01 c0       	push   0xc001e636
c000788c:	6a 31                	push   0x31
c000788e:	53                   	push   ebx
c000788f:	e8 34 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007894:	83 c4 20             	add    esp,0x20
c0007897:	6a 00                	push   0x0
c0007899:	68 40 e6 01 c0       	push   0xc001e640
c000789e:	6a 32                	push   0x32
c00078a0:	53                   	push   ebx
c00078a1:	e8 22 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00078a6:	6a 00                	push   0x0
c00078a8:	68 4a e6 01 c0       	push   0xc001e64a
c00078ad:	6a 33                	push   0x33
c00078af:	53                   	push   ebx
c00078b0:	e8 13 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00078b5:	83 c4 20             	add    esp,0x20
c00078b8:	6a 00                	push   0x0
c00078ba:	68 54 e6 01 c0       	push   0xc001e654
c00078bf:	6a 34                	push   0x34
c00078c1:	53                   	push   ebx
c00078c2:	e8 01 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00078c7:	6a 00                	push   0x0
c00078c9:	68 5e e6 01 c0       	push   0xc001e65e
c00078ce:	6a 35                	push   0x35
c00078d0:	53                   	push   ebx
c00078d1:	e8 f2 fc ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00078d6:	83 c4 20             	add    esp,0x20
c00078d9:	6a 00                	push   0x0
c00078db:	68 68 e6 01 c0       	push   0xc001e668
c00078e0:	6a 36                	push   0x36
c00078e2:	53                   	push   ebx
c00078e3:	e8 e0 fc ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00078e8:	6a 00                	push   0x0
c00078ea:	68 72 e6 01 c0       	push   0xc001e672
c00078ef:	6a 37                	push   0x37
c00078f1:	53                   	push   ebx
c00078f2:	e8 d1 fc ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00078f7:	83 c4 1c             	add    esp,0x1c
c00078fa:	6a 03                	push   0x3
c00078fc:	6a 02                	push   0x2
c00078fe:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0007904:	e8 0f 25 00 00       	call   c0009e18 <VAS::allocatePages(int, int)>
c0007909:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007910:	89 c6                	mov    esi,eax
c0007912:	e8 97 01 00 00       	call   c0007aae <malloc>
c0007917:	81 c6 00 20 00 00    	add    esi,0x2000
c000791d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007920:	89 c7                	mov    edi,eax
c0007922:	e8 11 16 00 00       	call   c0008f38 <TSS::TSS()>
c0007927:	83 c4 0c             	add    esp,0xc
c000792a:	68 e6 e3 01 c0       	push   0xc001e3e6
c000792f:	56                   	push   esi
c0007930:	57                   	push   edi
c0007931:	e8 46 16 00 00       	call   c0008f7c <TSS::setup(unsigned long, unsigned long)>
c0007936:	89 c6                	mov    esi,eax
c0007938:	58                   	pop    eax
c0007939:	5a                   	pop    edx
c000793a:	6a 00                	push   0x0
c000793c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007940:	50                   	push   eax
c0007941:	e8 ce fb ff ff       	call   c0007514 <IDTEntry::IDTEntry(bool)>
c0007946:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000794a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000794f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007956:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000795c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007960:	80 ce 05             	or     dh,0x5
c0007963:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007966:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000796a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000796e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007971:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007974:	e8 87 fc ff ff       	call   c0007600 <IDT::flush()>
c0007979:	83 c4 20             	add    esp,0x20
c000797c:	5b                   	pop    ebx
c000797d:	5e                   	pop    esi
c000797e:	5f                   	pop    edi
c000797f:	c3                   	ret    

c0007980 <sbrk>:
c0007980:	55                   	push   ebp
c0007981:	57                   	push   edi
c0007982:	56                   	push   esi
c0007983:	53                   	push   ebx
c0007984:	83 ec 1c             	sub    esp,0x1c
c0007987:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000798b:	85 c0                	test   eax,eax
c000798d:	74 61                	je     c00079f0 <sbrk+0x70>
c000798f:	78 66                	js     c00079f7 <sbrk+0x77>
c0007991:	8b 15 e8 27 02 c0    	mov    edx,DWORD PTR ds:0xc00227e8
c0007997:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000799b:	05 ff 0f 00 00       	add    eax,0xfff
c00079a0:	89 c5                	mov    ebp,eax
c00079a2:	78 6b                	js     c0007a0f <sbrk+0x8f>
c00079a4:	c1 fd 0c             	sar    ebp,0xc
c00079a7:	bb 00 00 00 00       	mov    ebx,0x0
c00079ac:	8b 35 b0 5f 02 c0    	mov    esi,DWORD PTR ds:0xc0025fb0
c00079b2:	8b 3d e8 27 02 c0    	mov    edi,DWORD PTR ds:0xc00227e8
c00079b8:	e8 f5 03 00 00       	call   c0007db2 <Phys::allocatePage()>
c00079bd:	68 01 04 00 00       	push   0x401
c00079c2:	57                   	push   edi
c00079c3:	50                   	push   eax
c00079c4:	56                   	push   esi
c00079c5:	e8 4a 23 00 00       	call   c0009d14 <VAS::mapPage(unsigned long, unsigned long, int)>
c00079ca:	81 05 e8 27 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc00227e8,0x1000
c00079d4:	83 c3 01             	add    ebx,0x1
c00079d7:	83 c4 10             	add    esp,0x10
c00079da:	39 dd                	cmp    ebp,ebx
c00079dc:	75 ce                	jne    c00079ac <sbrk+0x2c>
c00079de:	0f 20 d8             	mov    eax,cr3
c00079e1:	0f 22 d8             	mov    cr3,eax
c00079e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079e8:	83 c4 1c             	add    esp,0x1c
c00079eb:	5b                   	pop    ebx
c00079ec:	5e                   	pop    esi
c00079ed:	5f                   	pop    edi
c00079ee:	5d                   	pop    ebp
c00079ef:	c3                   	ret    
c00079f0:	a1 e8 27 02 c0       	mov    eax,ds:0xc00227e8
c00079f5:	eb f1                	jmp    c00079e8 <sbrk+0x68>
c00079f7:	83 ec 08             	sub    esp,0x8
c00079fa:	50                   	push   eax
c00079fb:	68 78 ff 01 c0       	push   0xc001ff78
c0007a00:	e8 34 2f 00 00       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0007a05:	83 c4 10             	add    esp,0x10
c0007a08:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a0d:	eb d9                	jmp    c00079e8 <sbrk+0x68>
c0007a0f:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007a15:	eb 8d                	jmp    c00079a4 <sbrk+0x24>

c0007a17 <mmap>:
c0007a17:	83 ec 18             	sub    esp,0x18
c0007a1a:	68 a8 ff 01 c0       	push   0xc001ffa8
c0007a1f:	e8 77 91 00 00       	call   c0010b9b <KePanic(char const*)>
c0007a24:	b8 00 00 00 00       	mov    eax,0x0
c0007a29:	83 c4 1c             	add    esp,0x1c
c0007a2c:	c3                   	ret    

c0007a2d <munmap>:
c0007a2d:	83 ec 18             	sub    esp,0x18
c0007a30:	68 ad ff 01 c0       	push   0xc001ffad
c0007a35:	e8 61 91 00 00       	call   c0010b9b <KePanic(char const*)>
c0007a3a:	b8 00 00 00 00       	mov    eax,0x0
c0007a3f:	83 c4 1c             	add    esp,0x1c
c0007a42:	c3                   	ret    

c0007a43 <liballoc_lock()>:
c0007a43:	fa                   	cli    
c0007a44:	83 05 68 91 02 c0 01 	add    DWORD PTR ds:0xc0029168,0x1
c0007a4b:	b8 00 00 00 00       	mov    eax,0x0
c0007a50:	c3                   	ret    

c0007a51 <liballoc_unlock()>:
c0007a51:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0007a56:	83 e8 01             	sub    eax,0x1
c0007a59:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0007a5e:	75 01                	jne    c0007a61 <liballoc_unlock()+0x10>
c0007a60:	fb                   	sti    
c0007a61:	b8 00 00 00 00       	mov    eax,0x0
c0007a66:	c3                   	ret    

c0007a67 <liballoc_alloc(int)>:
c0007a67:	83 ec 10             	sub    esp,0x10
c0007a6a:	6a 01                	push   0x1
c0007a6c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a70:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0007a76:	e8 9d 23 00 00       	call   c0009e18 <VAS::allocatePages(int, int)>
c0007a7b:	83 c4 1c             	add    esp,0x1c
c0007a7e:	c3                   	ret    

c0007a7f <liballoc_free(void*, int)>:
c0007a7f:	83 ec 14             	sub    esp,0x14
c0007a82:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a86:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0007a8c:	e8 cb 1f 00 00       	call   c0009a5c <VAS::freeAllocatedPages(unsigned long)>
c0007a91:	b8 00 00 00 00       	mov    eax,0x0
c0007a96:	83 c4 1c             	add    esp,0x1c
c0007a99:	c3                   	ret    

c0007a9a <realloc>:
c0007a9a:	83 ec 14             	sub    esp,0x14
c0007a9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aa1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aa5:	e8 3e 9b ff ff       	call   c00015e8 <dlrealloc>
c0007aaa:	83 c4 1c             	add    esp,0x1c
c0007aad:	c3                   	ret    

c0007aae <malloc>:
c0007aae:	83 ec 18             	sub    esp,0x18
c0007ab1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ab5:	e8 f1 95 ff ff       	call   c00010ab <dlmalloc>
c0007aba:	83 c4 1c             	add    esp,0x1c
c0007abd:	c3                   	ret    

c0007abe <free>:
c0007abe:	83 ec 18             	sub    esp,0x18
c0007ac1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ac5:	e8 89 92 ff ff       	call   c0000d53 <dlfree>
c0007aca:	83 c4 1c             	add    esp,0x1c
c0007acd:	c3                   	ret    

c0007ace <rfree>:
c0007ace:	83 ec 18             	sub    esp,0x18
c0007ad1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ad5:	e8 79 92 ff ff       	call   c0000d53 <dlfree>
c0007ada:	83 c4 1c             	add    esp,0x1c
c0007add:	c3                   	ret    

c0007ade <calloc>:
c0007ade:	56                   	push   esi
c0007adf:	53                   	push   ebx
c0007ae0:	83 ec 10             	sub    esp,0x10
c0007ae3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007ae7:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007aec:	53                   	push   ebx
c0007aed:	e8 bc ff ff ff       	call   c0007aae <malloc>
c0007af2:	89 c6                	mov    esi,eax
c0007af4:	83 c4 0c             	add    esp,0xc
c0007af7:	53                   	push   ebx
c0007af8:	6a 00                	push   0x0
c0007afa:	50                   	push   eax
c0007afb:	e8 f0 89 ff ff       	call   c00004f0 <memset>
c0007b00:	89 f0                	mov    eax,esi
c0007b02:	83 c4 14             	add    esp,0x14
c0007b05:	5b                   	pop    ebx
c0007b06:	5e                   	pop    esi
c0007b07:	c3                   	ret    

c0007b08 <KeEntryPoint>:
c0007b08:	57                   	push   edi
c0007b09:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b0e:	56                   	push   esi
c0007b0f:	89 fa                	mov    edx,edi
c0007b11:	53                   	push   ebx
c0007b12:	31 f6                	xor    esi,esi
c0007b14:	83 ec 2c             	sub    esp,0x2c
c0007b17:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b1c:	a3 d0 5e 02 c0       	mov    ds:0xc0025ed0,eax
c0007b21:	89 f0                	mov    eax,esi
c0007b23:	ee                   	out    dx,al
c0007b24:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b29:	b0 80                	mov    al,0x80
c0007b2b:	89 da                	mov    edx,ebx
c0007b2d:	ee                   	out    dx,al
c0007b2e:	b1 03                	mov    cl,0x3
c0007b30:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b35:	88 c8                	mov    al,cl
c0007b37:	ee                   	out    dx,al
c0007b38:	89 f0                	mov    eax,esi
c0007b3a:	89 fa                	mov    edx,edi
c0007b3c:	ee                   	out    dx,al
c0007b3d:	88 c8                	mov    al,cl
c0007b3f:	89 da                	mov    edx,ebx
c0007b41:	ee                   	out    dx,al
c0007b42:	b0 c7                	mov    al,0xc7
c0007b44:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b49:	ee                   	out    dx,al
c0007b4a:	b0 0b                	mov    al,0xb
c0007b4c:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b51:	ee                   	out    dx,al
c0007b52:	68 b4 ff 01 c0       	push   0xc001ffb4
c0007b57:	e8 dd 2d 00 00       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0007b5c:	e8 08 89 00 00       	call   c0010469 <KeDisplaySplashScreen()>
c0007b61:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b66:	05 ff 0f 00 00       	add    eax,0xfff
c0007b6b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b70:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b73:	e8 a8 03 00 00       	call   c0007f20 <Phys::physicalMemorySetup(unsigned int)>
c0007b78:	e8 62 1c 00 00       	call   c00097df <Virt::virtualMemorySetup()>
c0007b7d:	58                   	pop    eax
c0007b7e:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007b82:	53                   	push   ebx
c0007b83:	e8 54 1f 00 00       	call   c0009adc <VAS::VAS()>
c0007b88:	89 1d b0 5f 02 c0    	mov    DWORD PTR ds:0xc0025fb0,ebx
c0007b8e:	e8 97 70 01 00       	call   c001ec2a <_init>
c0007b93:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007b9a:	e8 0f ff ff ff       	call   c0007aae <malloc>
c0007b9f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007ba2:	89 c6                	mov    esi,eax
c0007ba4:	e8 35 f2 ff ff       	call   c0006dde <Computer::Computer()>
c0007ba9:	53                   	push   ebx
c0007baa:	89 35 b8 5e 02 c0    	mov    DWORD PTR ds:0xc0025eb8,esi
c0007bb0:	6a 00                	push   0x0
c0007bb2:	6a 00                	push   0x0
c0007bb4:	56                   	push   esi
c0007bb5:	e8 ec f5 ff ff       	call   c00071a6 <Computer::open(int, int, void*)>
c0007bba:	83 c4 14             	add    esp,0x14
c0007bbd:	53                   	push   ebx
c0007bbe:	e8 e3 1f 00 00       	call   c0009ba6 <VAS::~VAS()>
c0007bc3:	83 c4 30             	add    esp,0x30
c0007bc6:	5b                   	pop    ebx
c0007bc7:	5e                   	pop    esi
c0007bc8:	5f                   	pop    edi
c0007bc9:	c3                   	ret    

c0007bca <Phys::allocateDMA(unsigned long)>:
c0007bca:	55                   	push   ebp
c0007bcb:	31 ed                	xor    ebp,ebp
c0007bcd:	57                   	push   edi
c0007bce:	56                   	push   esi
c0007bcf:	53                   	push   ebx
c0007bd0:	31 db                	xor    ebx,ebx
c0007bd2:	83 ec 1c             	sub    esp,0x1c
c0007bd5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007bd9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0007be1:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0007be7:	31 c0                	xor    eax,eax
c0007be9:	c1 ef 0c             	shr    edi,0xc
c0007bec:	eb 1b                	jmp    c0007c09 <Phys::allocateDMA(unsigned long)+0x3f>
c0007bee:	85 c0                	test   eax,eax
c0007bf0:	75 06                	jne    c0007bf8 <Phys::allocateDMA(unsigned long)+0x2e>
c0007bf2:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007bf6:	89 dd                	mov    ebp,ebx
c0007bf8:	8d 70 01             	lea    esi,[eax+0x1]
c0007bfb:	39 f7                	cmp    edi,esi
c0007bfd:	74 37                	je     c0007c36 <Phys::allocateDMA(unsigned long)+0x6c>
c0007bff:	89 f0                	mov    eax,esi
c0007c01:	83 c3 01             	add    ebx,0x1
c0007c04:	83 fb 0f             	cmp    ebx,0xf
c0007c07:	7f 13                	jg     c0007c1c <Phys::allocateDMA(unsigned long)+0x52>
c0007c09:	80 bb ec 5e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffda114],0x0
c0007c10:	74 dc                	je     c0007bee <Phys::allocateDMA(unsigned long)+0x24>
c0007c12:	31 c0                	xor    eax,eax
c0007c14:	83 c3 01             	add    ebx,0x1
c0007c17:	83 fb 0f             	cmp    ebx,0xf
c0007c1a:	7e ed                	jle    c0007c09 <Phys::allocateDMA(unsigned long)+0x3f>
c0007c1c:	83 ec 0c             	sub    esp,0xc
c0007c1f:	68 cc ff 01 c0       	push   0xc001ffcc
c0007c24:	e8 72 8f 00 00       	call   c0010b9b <KePanic(char const*)>
c0007c29:	83 c4 10             	add    esp,0x10
c0007c2c:	31 c0                	xor    eax,eax
c0007c2e:	83 c4 1c             	add    esp,0x1c
c0007c31:	5b                   	pop    ebx
c0007c32:	5e                   	pop    esi
c0007c33:	5f                   	pop    edi
c0007c34:	5d                   	pop    ebp
c0007c35:	c3                   	ret    
c0007c36:	89 e9                	mov    ecx,ebp
c0007c38:	c1 f9 04             	sar    ecx,0x4
c0007c3b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007c3f:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0007c43:	89 ca                	mov    edx,ecx
c0007c45:	83 ea 01             	sub    edx,0x1
c0007c48:	79 03                	jns    c0007c4d <Phys::allocateDMA(unsigned long)+0x83>
c0007c4a:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c4d:	c1 fa 04             	sar    edx,0x4
c0007c50:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0007c54:	74 08                	je     c0007c5e <Phys::allocateDMA(unsigned long)+0x94>
c0007c56:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007c5a:	31 c0                	xor    eax,eax
c0007c5c:	eb b6                	jmp    c0007c14 <Phys::allocateDMA(unsigned long)+0x4a>
c0007c5e:	85 f6                	test   esi,esi
c0007c60:	74 17                	je     c0007c79 <Phys::allocateDMA(unsigned long)+0xaf>
c0007c62:	8d 95 ec 5e 02 c0    	lea    edx,[ebp-0x3ffda114]
c0007c68:	8d 84 05 ed 5e 02 c0 	lea    eax,[ebp+eax*1-0x3ffda113]
c0007c6f:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c72:	83 c2 01             	add    edx,0x1
c0007c75:	39 d0                	cmp    eax,edx
c0007c77:	75 f6                	jne    c0007c6f <Phys::allocateDMA(unsigned long)+0xa5>
c0007c79:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007c7e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007c82:	01 f8                	add    eax,edi
c0007c84:	85 d2                	test   edx,edx
c0007c86:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007c8b:	74 17                	je     c0007ca4 <Phys::allocateDMA(unsigned long)+0xda>
c0007c8d:	83 ec 0c             	sub    esp,0xc
c0007c90:	68 cc ff 01 c0       	push   0xc001ffcc
c0007c95:	e8 01 8f 00 00       	call   c0010b9b <KePanic(char const*)>
c0007c9a:	83 c4 10             	add    esp,0x10
c0007c9d:	89 f0                	mov    eax,esi
c0007c9f:	e9 5d ff ff ff       	jmp    c0007c01 <Phys::allocateDMA(unsigned long)+0x37>
c0007ca4:	c1 e5 0c             	shl    ebp,0xc
c0007ca7:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0007cad:	e9 7c ff ff ff       	jmp    c0007c2e <Phys::allocateDMA(unsigned long)+0x64>

c0007cb2 <Phys::freeDMA(unsigned long, unsigned long)>:
c0007cb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cb6:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007cbc:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007cc1:	c1 ea 0c             	shr    edx,0xc
c0007cc4:	29 d0                	sub    eax,edx
c0007cc6:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007ccb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007ccf:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007cd4:	c1 e8 0c             	shr    eax,0xc
c0007cd7:	85 d2                	test   edx,edx
c0007cd9:	74 11                	je     c0007cec <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007cdb:	05 ec 5e 02 c0       	add    eax,0xc0025eec
c0007ce0:	01 c2                	add    edx,eax
c0007ce2:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007ce5:	83 c0 01             	add    eax,0x1
c0007ce8:	39 d0                	cmp    eax,edx
c0007cea:	75 f6                	jne    c0007ce2 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007cec:	c3                   	ret    

c0007ced <Phys::setPageState(unsigned long, bool)>:
c0007ced:	57                   	push   edi
c0007cee:	56                   	push   esi
c0007cef:	8b 35 ec 27 02 c0    	mov    esi,DWORD PTR ds:0xc00227ec
c0007cf5:	53                   	push   ebx
c0007cf6:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007cfb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007cff:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d03:	0f b6 c0             	movzx  eax,al
c0007d06:	89 ca                	mov    edx,ecx
c0007d08:	83 e1 07             	and    ecx,0x7
c0007d0b:	c1 ea 03             	shr    edx,0x3
c0007d0e:	d3 c3                	rol    ebx,cl
c0007d10:	01 d6                	add    esi,edx
c0007d12:	d3 e0                	shl    eax,cl
c0007d14:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d17:	21 fb                	and    ebx,edi
c0007d19:	88 1e                	mov    BYTE PTR [esi],bl
c0007d1b:	8b 1d ec 27 02 c0    	mov    ebx,DWORD PTR ds:0xc00227ec
c0007d21:	01 da                	add    edx,ebx
c0007d23:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d25:	09 c8                	or     eax,ecx
c0007d27:	88 02                	mov    BYTE PTR [edx],al
c0007d29:	5b                   	pop    ebx
c0007d2a:	5e                   	pop    esi
c0007d2b:	5f                   	pop    edi
c0007d2c:	c3                   	ret    

c0007d2d <Phys::getPageState(unsigned long)>:
c0007d2d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d31:	8b 15 ec 27 02 c0    	mov    edx,DWORD PTR ds:0xc00227ec
c0007d37:	89 c8                	mov    eax,ecx
c0007d39:	83 e1 07             	and    ecx,0x7
c0007d3c:	c1 e8 03             	shr    eax,0x3
c0007d3f:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d43:	d3 f8                	sar    eax,cl
c0007d45:	83 e0 01             	and    eax,0x1
c0007d48:	c3                   	ret    

c0007d49 <Phys::freePage(unsigned long)>:
c0007d49:	53                   	push   ebx
c0007d4a:	83 ec 08             	sub    esp,0x8
c0007d4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d51:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d57:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d5d:	76 41                	jbe    c0007da0 <Phys::freePage(unsigned long)+0x57>
c0007d5f:	c1 e8 0c             	shr    eax,0xc
c0007d62:	50                   	push   eax
c0007d63:	89 c3                	mov    ebx,eax
c0007d65:	e8 c3 ff ff ff       	call   c0007d2d <Phys::getPageState(unsigned long)>
c0007d6a:	5a                   	pop    edx
c0007d6b:	84 c0                	test   al,al
c0007d6d:	74 20                	je     c0007d8f <Phys::freePage(unsigned long)+0x46>
c0007d6f:	83 ec 08             	sub    esp,0x8
c0007d72:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007d77:	6a 00                	push   0x0
c0007d79:	83 e8 01             	sub    eax,0x1
c0007d7c:	53                   	push   ebx
c0007d7d:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007d82:	e8 66 ff ff ff       	call   c0007ced <Phys::setPageState(unsigned long, bool)>
c0007d87:	83 c4 10             	add    esp,0x10
c0007d8a:	83 c4 08             	add    esp,0x8
c0007d8d:	5b                   	pop    ebx
c0007d8e:	c3                   	ret    
c0007d8f:	c7 44 24 10 71 00 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020071
c0007d97:	83 c4 08             	add    esp,0x8
c0007d9a:	5b                   	pop    ebx
c0007d9b:	e9 fb 8d 00 00       	jmp    c0010b9b <KePanic(char const*)>
c0007da0:	68 00 10 00 00       	push   0x1000
c0007da5:	50                   	push   eax
c0007da6:	e8 07 ff ff ff       	call   c0007cb2 <Phys::freeDMA(unsigned long, unsigned long)>
c0007dab:	59                   	pop    ecx
c0007dac:	5b                   	pop    ebx
c0007dad:	83 c4 08             	add    esp,0x8
c0007db0:	5b                   	pop    ebx
c0007db1:	c3                   	ret    

c0007db2 <Phys::allocatePage()>:
c0007db2:	56                   	push   esi
c0007db3:	53                   	push   ebx
c0007db4:	83 ec 14             	sub    esp,0x14
c0007db7:	8b 35 d8 5e 02 c0    	mov    esi,DWORD PTR ds:0xc0025ed8
c0007dbd:	89 f3                	mov    ebx,esi
c0007dbf:	eb 0a                	jmp    c0007dcb <Phys::allocatePage()+0x19>
c0007dc1:	89 1d d8 5e 02 c0    	mov    DWORD PTR ds:0xc0025ed8,ebx
c0007dc7:	39 de                	cmp    esi,ebx
c0007dc9:	74 26                	je     c0007df1 <Phys::allocatePage()+0x3f>
c0007dcb:	53                   	push   ebx
c0007dcc:	e8 5c ff ff ff       	call   c0007d2d <Phys::getPageState(unsigned long)>
c0007dd1:	5a                   	pop    edx
c0007dd2:	84 c0                	test   al,al
c0007dd4:	74 67                	je     c0007e3d <Phys::allocatePage()+0x8b>
c0007dd6:	83 c3 01             	add    ebx,0x1
c0007dd9:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007ddf:	75 e0                	jne    c0007dc1 <Phys::allocatePage()+0xf>
c0007de1:	31 db                	xor    ebx,ebx
c0007de3:	c7 05 d8 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025ed8,0x0
c0007ded:	39 de                	cmp    esi,ebx
c0007def:	75 da                	jne    c0007dcb <Phys::allocatePage()+0x19>
c0007df1:	83 ec 0c             	sub    esp,0xc
c0007df4:	a0 fc 5e 02 c0       	mov    al,ds:0xc0025efc
c0007df9:	83 f0 01             	xor    eax,0x1
c0007dfc:	a2 fc 5e 02 c0       	mov    ds:0xc0025efc,al
c0007e01:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e06:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e09:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e0f:	50                   	push   eax
c0007e10:	e8 a9 27 00 00       	call   c000a5be <VAS::scanForEviction()>
c0007e15:	83 c4 10             	add    esp,0x10
c0007e18:	85 c0                	test   eax,eax
c0007e1a:	75 48                	jne    c0007e64 <Phys::allocatePage()+0xb2>
c0007e1c:	83 ec 0c             	sub    esp,0xc
c0007e1f:	68 f4 ff 01 c0       	push   0xc001fff4
c0007e24:	e8 72 8d 00 00       	call   c0010b9b <KePanic(char const*)>
c0007e29:	83 c4 10             	add    esp,0x10
c0007e2c:	8b 1d d8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025ed8
c0007e32:	53                   	push   ebx
c0007e33:	e8 f5 fe ff ff       	call   c0007d2d <Phys::getPageState(unsigned long)>
c0007e38:	5a                   	pop    edx
c0007e39:	84 c0                	test   al,al
c0007e3b:	75 99                	jne    c0007dd6 <Phys::allocatePage()+0x24>
c0007e3d:	6a 01                	push   0x1
c0007e3f:	53                   	push   ebx
c0007e40:	e8 a8 fe ff ff       	call   c0007ced <Phys::setPageState(unsigned long, bool)>
c0007e45:	8b 15 e4 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025ee4
c0007e4b:	a1 d8 5e 02 c0       	mov    eax,ds:0xc0025ed8
c0007e50:	83 c2 01             	add    edx,0x1
c0007e53:	59                   	pop    ecx
c0007e54:	89 15 e4 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee4,edx
c0007e5a:	c1 e0 0c             	shl    eax,0xc
c0007e5d:	5b                   	pop    ebx
c0007e5e:	83 c4 14             	add    esp,0x14
c0007e61:	5b                   	pop    ebx
c0007e62:	5e                   	pop    esi
c0007e63:	c3                   	ret    
c0007e64:	83 ec 08             	sub    esp,0x8
c0007e67:	89 c2                	mov    edx,eax
c0007e69:	6a 01                	push   0x1
c0007e6b:	c1 ea 0c             	shr    edx,0xc
c0007e6e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007e72:	52                   	push   edx
c0007e73:	e8 75 fe ff ff       	call   c0007ced <Phys::setPageState(unsigned long, bool)>
c0007e78:	83 c4 10             	add    esp,0x10
c0007e7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007e7f:	eb dd                	jmp    c0007e5e <Phys::allocatePage()+0xac>

c0007e81 <Phys::allocateContiguousPages(int)>:
c0007e81:	57                   	push   edi
c0007e82:	56                   	push   esi
c0007e83:	53                   	push   ebx
c0007e84:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007e88:	fa                   	cli    
c0007e89:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0007e8e:	31 db                	xor    ebx,ebx
c0007e90:	83 c0 01             	add    eax,0x1
c0007e93:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0007e98:	85 db                	test   ebx,ebx
c0007e9a:	75 11                	jne    c0007ead <Phys::allocateContiguousPages(int)+0x2c>
c0007e9c:	e8 11 ff ff ff       	call   c0007db2 <Phys::allocatePage()>
c0007ea1:	83 fe 01             	cmp    esi,0x1
c0007ea4:	89 c7                	mov    edi,eax
c0007ea6:	74 21                	je     c0007ec9 <Phys::allocateContiguousPages(int)+0x48>
c0007ea8:	bb 01 00 00 00       	mov    ebx,0x1
c0007ead:	e8 00 ff ff ff       	call   c0007db2 <Phys::allocatePage()>
c0007eb2:	89 da                	mov    edx,ebx
c0007eb4:	c1 e2 0c             	shl    edx,0xc
c0007eb7:	01 fa                	add    edx,edi
c0007eb9:	39 c2                	cmp    edx,eax
c0007ebb:	74 22                	je     c0007edf <Phys::allocateContiguousPages(int)+0x5e>
c0007ebd:	bb 01 00 00 00       	mov    ebx,0x1
c0007ec2:	89 c7                	mov    edi,eax
c0007ec4:	83 fe 01             	cmp    esi,0x1
c0007ec7:	75 e4                	jne    c0007ead <Phys::allocateContiguousPages(int)+0x2c>
c0007ec9:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0007ece:	83 e8 01             	sub    eax,0x1
c0007ed1:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0007ed6:	75 01                	jne    c0007ed9 <Phys::allocateContiguousPages(int)+0x58>
c0007ed8:	fb                   	sti    
c0007ed9:	89 f8                	mov    eax,edi
c0007edb:	5b                   	pop    ebx
c0007edc:	5e                   	pop    esi
c0007edd:	5f                   	pop    edi
c0007ede:	c3                   	ret    
c0007edf:	83 c3 01             	add    ebx,0x1
c0007ee2:	39 f3                	cmp    ebx,esi
c0007ee4:	75 b2                	jne    c0007e98 <Phys::allocateContiguousPages(int)+0x17>
c0007ee6:	eb e1                	jmp    c0007ec9 <Phys::allocateContiguousPages(int)+0x48>

c0007ee8 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007ee8:	56                   	push   esi
c0007ee9:	53                   	push   ebx
c0007eea:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007eee:	39 1d dc 5e 02 c0    	cmp    DWORD PTR ds:0xc0025edc,ebx
c0007ef4:	73 06                	jae    c0007efc <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007ef6:	89 1d dc 5e 02 c0    	mov    DWORD PTR ds:0xc0025edc,ebx
c0007efc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f00:	c1 eb 0c             	shr    ebx,0xc
c0007f03:	c1 e8 0c             	shr    eax,0xc
c0007f06:	39 d8                	cmp    eax,ebx
c0007f08:	73 13                	jae    c0007f1d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f0a:	6a 00                	push   0x0
c0007f0c:	8d 70 01             	lea    esi,[eax+0x1]
c0007f0f:	50                   	push   eax
c0007f10:	e8 d8 fd ff ff       	call   c0007ced <Phys::setPageState(unsigned long, bool)>
c0007f15:	5a                   	pop    edx
c0007f16:	89 f0                	mov    eax,esi
c0007f18:	59                   	pop    ecx
c0007f19:	39 f3                	cmp    ebx,esi
c0007f1b:	75 ed                	jne    c0007f0a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f1d:	5b                   	pop    ebx
c0007f1e:	5e                   	pop    esi
c0007f1f:	c3                   	ret    

c0007f20 <Phys::physicalMemorySetup(unsigned int)>:
c0007f20:	55                   	push   ebp
c0007f21:	57                   	push   edi
c0007f22:	56                   	push   esi
c0007f23:	53                   	push   ebx
c0007f24:	83 ec 40             	sub    esp,0x40
c0007f27:	6a 10                	push   0x10
c0007f29:	6a 00                	push   0x0
c0007f2b:	68 ec 5e 02 c0       	push   0xc0025eec
c0007f30:	e8 bb 85 ff ff       	call   c00004f0 <memset>
c0007f35:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f39:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f3e:	05 00 10 00 00       	add    eax,0x1000
c0007f43:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007f47:	5b                   	pop    ebx
c0007f48:	31 db                	xor    ebx,ebx
c0007f4a:	5e                   	pop    esi
c0007f4b:	50                   	push   eax
c0007f4c:	68 87 00 02 c0       	push   0xc0020087
c0007f51:	e8 e3 29 00 00       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0007f56:	83 c4 10             	add    esp,0x10
c0007f59:	83 ec 08             	sub    esp,0x8
c0007f5c:	6a 01                	push   0x1
c0007f5e:	53                   	push   ebx
c0007f5f:	83 c3 01             	add    ebx,0x1
c0007f62:	e8 86 fd ff ff       	call   c0007ced <Phys::setPageState(unsigned long, bool)>
c0007f67:	83 c4 10             	add    esp,0x10
c0007f6a:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007f70:	75 e7                	jne    c0007f59 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007f72:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0007f79:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0007f80:	c1 e0 08             	shl    eax,0x8
c0007f83:	09 c2                	or     edx,eax
c0007f85:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0007f89:	0f 84 98 01 00 00    	je     c0008127 <Phys::physicalMemorySetup(unsigned int)+0x207>
c0007f8f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007f93:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007f9b:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fa0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007fa4:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007fac:	eb 1c                	jmp    c0007fca <Phys::physicalMemorySetup(unsigned int)+0xaa>
c0007fae:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0007fb2:	83 c3 18             	add    ebx,0x18
c0007fb5:	83 c6 01             	add    esi,0x1
c0007fb8:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0007fbc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007fc0:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007fc4:	0f 84 6d 01 00 00    	je     c0008137 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0007fca:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007fcd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007fd0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007fd3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007fd7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007fdb:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007fdd:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007fe0:	01 f0                	add    eax,esi
c0007fe2:	55                   	push   ebp
c0007fe3:	11 fa                	adc    edx,edi
c0007fe5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007fe9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007fed:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007ff1:	51                   	push   ecx
c0007ff2:	56                   	push   esi
c0007ff3:	68 24 00 02 c0       	push   0xc0020024
c0007ff8:	e8 3c 29 00 00       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0007ffd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008001:	83 c4 10             	add    esp,0x10
c0008004:	09 f8                	or     eax,edi
c0008006:	0f 85 2b 01 00 00    	jne    c0008137 <Phys::physicalMemorySetup(unsigned int)+0x217>
c000800c:	83 fd 01             	cmp    ebp,0x1
c000800f:	75 9d                	jne    c0007fae <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0008011:	ba 00 00 08 00       	mov    edx,0x80000
c0008016:	89 c1                	mov    ecx,eax
c0008018:	39 f2                	cmp    edx,esi
c000801a:	19 f9                	sbb    ecx,edi
c000801c:	0f 82 ab 00 00 00    	jb     c00080cd <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c0008022:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0008026:	89 c1                	mov    ecx,eax
c0008028:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000802c:	0f 83 9b 00 00 00    	jae    c00080cd <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c0008032:	ba 00 00 0a 00       	mov    edx,0xa0000
c0008037:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000803b:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000803f:	39 fa                	cmp    edx,edi
c0008041:	19 e8                	sbb    eax,ebp
c0008043:	0f 82 b0 01 00 00    	jb     c00081f9 <Phys::physicalMemorySetup(unsigned int)+0x2d9>
c0008049:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000804d:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0008051:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0008057:	ba ff 1f 00 00       	mov    edx,0x1fff
c000805c:	83 d5 ff             	adc    ebp,0xffffffff
c000805f:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0008063:	31 c0                	xor    eax,eax
c0008065:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0008069:	39 fa                	cmp    edx,edi
c000806b:	89 c1                	mov    ecx,eax
c000806d:	19 e9                	sbb    ecx,ebp
c000806f:	0f 83 39 ff ff ff    	jae    c0007fae <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0008075:	be 00 00 08 00       	mov    esi,0x80000
c000807a:	83 ec 04             	sub    esp,0x4
c000807d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0008081:	57                   	push   edi
c0008082:	56                   	push   esi
c0008083:	68 48 00 02 c0       	push   0xc0020048
c0008088:	e8 ac 28 00 00       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000808d:	5d                   	pop    ebp
c000808e:	58                   	pop    eax
c000808f:	57                   	push   edi
c0008090:	56                   	push   esi
c0008091:	e8 52 fe ff ff       	call   c0007ee8 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0008096:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000809a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000809e:	83 c4 0c             	add    esp,0xc
c00080a1:	0f ac d0 0c          	shrd   eax,edx,0xc
c00080a5:	8b 15 e8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025ee8
c00080ab:	01 d0                	add    eax,edx
c00080ad:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00080b4:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c00080b9:	52                   	push   edx
c00080ba:	50                   	push   eax
c00080bb:	68 ad 00 02 c0       	push   0xc00200ad
c00080c0:	e8 74 28 00 00       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c00080c5:	83 c4 10             	add    esp,0x10
c00080c8:	e9 e1 fe ff ff       	jmp    c0007fae <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00080cd:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00080d1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00080d5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080d9:	39 ea                	cmp    edx,ebp
c00080db:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00080df:	0f 82 c9 fe ff ff    	jb     c0007fae <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00080e5:	ba ff 1f 00 00       	mov    edx,0x1fff
c00080ea:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00080ee:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00080f2:	0f 83 b6 fe ff ff    	jae    c0007fae <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00080f8:	39 ee                	cmp    esi,ebp
c00080fa:	89 f8                	mov    eax,edi
c00080fc:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0008100:	0f 83 74 ff ff ff    	jae    c000807a <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0008106:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000810a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000810e:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0008112:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008116:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000811a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000811e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008122:	e9 53 ff ff ff       	jmp    c000807a <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0008127:	83 ec 0c             	sub    esp,0xc
c000812a:	68 9f 00 02 c0       	push   0xc002009f
c000812f:	e8 67 8a 00 00       	call   c0010b9b <KePanic(char const*)>
c0008134:	83 c4 10             	add    esp,0x10
c0008137:	83 ec 08             	sub    esp,0x8
c000813a:	bb 60 00 00 00       	mov    ebx,0x60
c000813f:	6a 00                	push   0x0
c0008141:	6a 06                	push   0x6
c0008143:	e8 a5 fb ff ff       	call   c0007ced <Phys::setPageState(unsigned long, bool)>
c0008148:	58                   	pop    eax
c0008149:	5a                   	pop    edx
c000814a:	6a 00                	push   0x0
c000814c:	6a 07                	push   0x7
c000814e:	e8 9a fb ff ff       	call   c0007ced <Phys::setPageState(unsigned long, bool)>
c0008153:	8b 0d e8 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ee8
c0008159:	83 c4 10             	add    esp,0x10
c000815c:	83 c1 02             	add    ecx,0x2
c000815f:	89 0d e8 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee8,ecx
c0008165:	83 ec 08             	sub    esp,0x8
c0008168:	6a 00                	push   0x0
c000816a:	53                   	push   ebx
c000816b:	83 c3 01             	add    ebx,0x1
c000816e:	e8 7a fb ff ff       	call   c0007ced <Phys::setPageState(unsigned long, bool)>
c0008173:	83 c4 10             	add    esp,0x10
c0008176:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000817c:	75 e7                	jne    c0008165 <Phys::physicalMemorySetup(unsigned int)+0x245>
c000817e:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c0008183:	bb 40 01 00 00       	mov    ebx,0x140
c0008188:	83 c0 20             	add    eax,0x20
c000818b:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c0008190:	eb 26                	jmp    c00081b8 <Phys::physicalMemorySetup(unsigned int)+0x298>
c0008192:	83 ec 08             	sub    esp,0x8
c0008195:	6a 00                	push   0x0
c0008197:	53                   	push   ebx
c0008198:	83 c3 01             	add    ebx,0x1
c000819b:	e8 4d fb ff ff       	call   c0007ced <Phys::setPageState(unsigned long, bool)>
c00081a0:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c00081a5:	83 c4 10             	add    esp,0x10
c00081a8:	83 c0 01             	add    eax,0x1
c00081ab:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00081b1:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c00081b6:	74 07                	je     c00081bf <Phys::physicalMemorySetup(unsigned int)+0x29f>
c00081b8:	3d ff 03 00 00       	cmp    eax,0x3ff
c00081bd:	7e d3                	jle    c0008192 <Phys::physicalMemorySetup(unsigned int)+0x272>
c00081bf:	bb d0 01 00 00       	mov    ebx,0x1d0
c00081c4:	3d ff 07 00 00       	cmp    eax,0x7ff
c00081c9:	7f 26                	jg     c00081f1 <Phys::physicalMemorySetup(unsigned int)+0x2d1>
c00081cb:	83 ec 08             	sub    esp,0x8
c00081ce:	6a 00                	push   0x0
c00081d0:	53                   	push   ebx
c00081d1:	83 c3 01             	add    ebx,0x1
c00081d4:	e8 14 fb ff ff       	call   c0007ced <Phys::setPageState(unsigned long, bool)>
c00081d9:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c00081de:	83 c4 10             	add    esp,0x10
c00081e1:	83 c0 01             	add    eax,0x1
c00081e4:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081ea:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c00081ef:	75 d3                	jne    c00081c4 <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c00081f1:	83 c4 3c             	add    esp,0x3c
c00081f4:	5b                   	pop    ebx
c00081f5:	5e                   	pop    esi
c00081f6:	5f                   	pop    edi
c00081f7:	5d                   	pop    ebp
c00081f8:	c3                   	ret    
c00081f9:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0008201:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0008209:	e9 3b fe ff ff       	jmp    c0008049 <Phys::physicalMemorySetup(unsigned int)+0x129>

c000820e <Pipe::isAtty()>:
c000820e:	31 c0                	xor    eax,eax
c0008210:	c3                   	ret    
c0008211:	90                   	nop

c0008212 <Pipe::~Pipe()>:
c0008212:	83 ec 0c             	sub    esp,0xc
c0008215:	ba 0c 01 02 c0       	mov    edx,0xc002010c
c000821a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000821e:	89 10                	mov    DWORD PTR [eax],edx
c0008220:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008224:	83 ec 0c             	sub    esp,0xc
c0008227:	50                   	push   eax
c0008228:	e8 6b 11 00 00       	call   c0009398 <UnixFile::~UnixFile()>
c000822d:	83 c4 10             	add    esp,0x10
c0008230:	90                   	nop
c0008231:	83 c4 0c             	add    esp,0xc
c0008234:	c3                   	ret    
c0008235:	90                   	nop

c0008236 <Pipe::~Pipe()>:
c0008236:	83 ec 0c             	sub    esp,0xc
c0008239:	83 ec 0c             	sub    esp,0xc
c000823c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008240:	e8 cd ff ff ff       	call   c0008212 <Pipe::~Pipe()>
c0008245:	83 c4 10             	add    esp,0x10
c0008248:	83 ec 08             	sub    esp,0x8
c000824b:	6a 20                	push   0x20
c000824d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008251:	e8 b6 25 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0008256:	83 c4 10             	add    esp,0x10
c0008259:	83 c4 0c             	add    esp,0xc
c000825c:	c3                   	ret    
c000825d:	90                   	nop

c000825e <Pipe::write(unsigned long long, void*, int*)>:
c000825e:	55                   	push   ebp
c000825f:	57                   	push   edi
c0008260:	56                   	push   esi
c0008261:	53                   	push   ebx
c0008262:	83 ec 1c             	sub    esp,0x1c
c0008265:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008269:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000826d:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0008270:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008274:	89 04 24             	mov    DWORD PTR [esp],eax
c0008277:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000827b:	89 d8                	mov    eax,ebx
c000827d:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0008280:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0008284:	89 d6                	mov    esi,edx
c0008286:	89 d7                	mov    edi,edx
c0008288:	c1 ff 1f             	sar    edi,0x1f
c000828b:	03 34 24             	add    esi,DWORD PTR [esp]
c000828e:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0008292:	c1 f8 1f             	sar    eax,0x1f
c0008295:	39 f3                	cmp    ebx,esi
c0008297:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000829b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000829f:	19 f8                	sbb    eax,edi
c00082a1:	b8 01 00 00 00       	mov    eax,0x1
c00082a6:	72 6e                	jb     c0008316 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00082a8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082ab:	01 d0                	add    eax,edx
c00082ad:	99                   	cdq    
c00082ae:	f7 fb                	idiv   ebx
c00082b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082b4:	29 d3                	sub    ebx,edx
c00082b6:	89 d7                	mov    edi,edx
c00082b8:	89 de                	mov    esi,ebx
c00082ba:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082bd:	c1 fb 1f             	sar    ebx,0x1f
c00082c0:	39 f2                	cmp    edx,esi
c00082c2:	19 d8                	sbb    eax,ebx
c00082c4:	b8 00 00 00 00       	mov    eax,0x0
c00082c9:	72 04                	jb     c00082cf <Pipe::write(unsigned long long, void*, int*)+0x71>
c00082cb:	89 d0                	mov    eax,edx
c00082cd:	29 f0                	sub    eax,esi
c00082cf:	89 d3                	mov    ebx,edx
c00082d1:	29 c3                	sub    ebx,eax
c00082d3:	74 0b                	je     c00082e0 <Pipe::write(unsigned long long, void*, int*)+0x82>
c00082d5:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00082d8:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00082dc:	89 d9                	mov    ecx,ebx
c00082de:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082e0:	85 c0                	test   eax,eax
c00082e2:	74 0d                	je     c00082f1 <Pipe::write(unsigned long long, void*, int*)+0x93>
c00082e4:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00082e8:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00082eb:	89 de                	mov    esi,ebx
c00082ed:	89 c1                	mov    ecx,eax
c00082ef:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082f1:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c00082f4:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00082f9:	75 10                	jne    c000830b <Pipe::write(unsigned long long, void*, int*)+0xad>
c00082fb:	83 ec 0c             	sub    esp,0xc
c00082fe:	68 c9 00 02 c0       	push   0xc00200c9
c0008303:	e8 93 88 00 00       	call   c0010b9b <KePanic(char const*)>
c0008308:	83 c4 10             	add    esp,0x10
c000830b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000830f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008312:	89 08                	mov    DWORD PTR [eax],ecx
c0008314:	31 c0                	xor    eax,eax
c0008316:	83 c4 1c             	add    esp,0x1c
c0008319:	5b                   	pop    ebx
c000831a:	5e                   	pop    esi
c000831b:	5f                   	pop    edi
c000831c:	5d                   	pop    ebp
c000831d:	c3                   	ret    

c000831e <Pipe::read(unsigned long long, void*, int*)>:
c000831e:	55                   	push   ebp
c000831f:	57                   	push   edi
c0008320:	56                   	push   esi
c0008321:	53                   	push   ebx
c0008322:	83 ec 1c             	sub    esp,0x1c
c0008325:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008329:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000832d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0008331:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008334:	89 c8                	mov    eax,ecx
c0008336:	99                   	cdq    
c0008337:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000833b:	74 24                	je     c0008361 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000833d:	39 f9                	cmp    ecx,edi
c000833f:	89 d1                	mov    ecx,edx
c0008341:	19 f1                	sbb    ecx,esi
c0008343:	73 1c                	jae    c0008361 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008345:	fa                   	cli    
c0008346:	ff 05 68 91 02 c0    	inc    DWORD PTR ds:0xc0029168
c000834c:	e8 bb d0 00 00       	call   c001540c <schedule()>
c0008351:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0008356:	48                   	dec    eax
c0008357:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c000835c:	75 d3                	jne    c0008331 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000835e:	fb                   	sti    
c000835f:	eb d0                	jmp    c0008331 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008361:	39 f8                	cmp    eax,edi
c0008363:	89 d1                	mov    ecx,edx
c0008365:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008368:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000836c:	19 f1                	sbb    ecx,esi
c000836e:	73 07                	jae    c0008377 <Pipe::read(unsigned long long, void*, int*)+0x59>
c0008370:	89 04 24             	mov    DWORD PTR [esp],eax
c0008373:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008377:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000837a:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000837d:	29 f7                	sub    edi,esi
c000837f:	89 f8                	mov    eax,edi
c0008381:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0008385:	99                   	cdq    
c0008386:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0008389:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000838d:	19 d0                	sbb    eax,edx
c000838f:	73 07                	jae    c0008398 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c0008391:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008394:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008398:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000839b:	89 ea                	mov    edx,ebp
c000839d:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00083a1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00083a6:	74 0d                	je     c00083b5 <Pipe::read(unsigned long long, void*, int*)+0x97>
c00083a8:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083ab:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00083b3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083b5:	85 d2                	test   edx,edx
c00083b7:	74 11                	je     c00083ca <Pipe::read(unsigned long long, void*, int*)+0xac>
c00083b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083bd:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083c0:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083c4:	89 d1                	mov    ecx,edx
c00083c6:	89 c7                	mov    edi,eax
c00083c8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083ca:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083cd:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083d0:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083d3:	99                   	cdq    
c00083d4:	89 f7                	mov    edi,esi
c00083d6:	03 04 24             	add    eax,DWORD PTR [esp]
c00083d9:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c00083dd:	c1 ff 1f             	sar    edi,0x1f
c00083e0:	57                   	push   edi
c00083e1:	56                   	push   esi
c00083e2:	52                   	push   edx
c00083e3:	50                   	push   eax
c00083e4:	e8 27 67 01 00       	call   c001eb10 <__umoddi3>
c00083e9:	83 c4 10             	add    esp,0x10
c00083ec:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00083ef:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00083f4:	75 10                	jne    c0008406 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c00083f6:	83 ec 0c             	sub    esp,0xc
c00083f9:	68 e6 00 02 c0       	push   0xc00200e6
c00083fe:	e8 98 87 00 00       	call   c0010b9b <KePanic(char const*)>
c0008403:	83 c4 10             	add    esp,0x10
c0008406:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000840a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000840d:	89 10                	mov    DWORD PTR [eax],edx
c000840f:	83 c4 1c             	add    esp,0x1c
c0008412:	31 c0                	xor    eax,eax
c0008414:	5b                   	pop    ebx
c0008415:	5e                   	pop    esi
c0008416:	5f                   	pop    edi
c0008417:	5d                   	pop    ebp
c0008418:	c3                   	ret    
c0008419:	90                   	nop

c000841a <Pipe::Pipe(int)>:
c000841a:	83 ec 0c             	sub    esp,0xc
c000841d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008421:	83 ec 08             	sub    esp,0x8
c0008424:	6a 00                	push   0x0
c0008426:	50                   	push   eax
c0008427:	e8 86 0d 00 00       	call   c00091b2 <UnixFile::UnixFile(int)>
c000842c:	83 c4 10             	add    esp,0x10
c000842f:	ba 0c 01 02 c0       	mov    edx,0xc002010c
c0008434:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008438:	89 10                	mov    DWORD PTR [eax],edx
c000843a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000843e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008442:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008445:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008449:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0008450:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008454:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000845b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000845f:	83 ec 0c             	sub    esp,0xc
c0008462:	50                   	push   eax
c0008463:	e8 46 f6 ff ff       	call   c0007aae <malloc>
c0008468:	83 c4 10             	add    esp,0x10
c000846b:	89 c2                	mov    edx,eax
c000846d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008471:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008478:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000847c:	90                   	nop
c000847d:	83 c4 0c             	add    esp,0xc
c0008480:	c3                   	ret    
c0008481:	90                   	nop

c0008482 <VgaText::isAtty()>:
c0008482:	b0 01                	mov    al,0x1
c0008484:	c3                   	ret    
c0008485:	90                   	nop

c0008486 <VgaText::~VgaText()>:
c0008486:	83 ec 0c             	sub    esp,0xc
c0008489:	ba 54 01 02 c0       	mov    edx,0xc0020154
c000848e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008492:	89 10                	mov    DWORD PTR [eax],edx
c0008494:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008498:	83 ec 0c             	sub    esp,0xc
c000849b:	50                   	push   eax
c000849c:	e8 f7 0e 00 00       	call   c0009398 <UnixFile::~UnixFile()>
c00084a1:	83 c4 10             	add    esp,0x10
c00084a4:	90                   	nop
c00084a5:	83 c4 0c             	add    esp,0xc
c00084a8:	c3                   	ret    
c00084a9:	90                   	nop

c00084aa <VgaText::~VgaText()>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	83 ec 0c             	sub    esp,0xc
c00084b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084b4:	e8 cd ff ff ff       	call   c0008486 <VgaText::~VgaText()>
c00084b9:	83 c4 10             	add    esp,0x10
c00084bc:	83 ec 08             	sub    esp,0x8
c00084bf:	68 84 01 00 00       	push   0x184
c00084c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084c8:	e8 3f 23 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c00084cd:	83 c4 10             	add    esp,0x10
c00084d0:	83 c4 0c             	add    esp,0xc
c00084d3:	c3                   	ret    

c00084d4 <VgaText::read(unsigned long long, void*, int*)>:
c00084d4:	83 ec 10             	sub    esp,0x10
c00084d7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084db:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00084df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084e3:	e8 34 4a 00 00       	call   c000cf1c <readKeyboard(VgaText*, char*, unsigned long)>
c00084e8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00084ec:	89 02                	mov    DWORD PTR [edx],eax
c00084ee:	31 c0                	xor    eax,eax
c00084f0:	83 c4 1c             	add    esp,0x1c
c00084f3:	c3                   	ret    

c00084f4 <setTerminalScrollLock(bool)>:
c00084f4:	c3                   	ret    

c00084f5 <doTerminalCycle()>:
c00084f5:	c3                   	ret    

c00084f6 <addToTerminalCycle(VgaText*)>:
c00084f6:	c3                   	ret    

c00084f7 <scrollTerminalScrollLock(int)>:
c00084f7:	c3                   	ret    

c00084f8 <VgaText::updateTitle()>:
c00084f8:	c3                   	ret    
c00084f9:	90                   	nop

c00084fa <VgaText::load()>:
c00084fa:	c3                   	ret    
c00084fb:	90                   	nop

c00084fc <VgaText::updateCursor()>:
c00084fc:	83 ec 14             	sub    esp,0x14
c00084ff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008503:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008506:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008509:	e8 b6 fc 00 00       	call   c00181c4 <HalConsoleCursorUpdate(int, int)>
c000850e:	83 c4 1c             	add    esp,0x1c
c0008511:	c3                   	ret    

c0008512 <VgaText::doANSI_SGR(int)>:
c0008512:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008516:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000851a:	85 d2                	test   edx,edx
c000851c:	75 0b                	jne    c0008529 <VgaText::doANSI_SGR(int)+0x17>
c000851e:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0008521:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008524:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0008527:	eb 59                	jmp    c0008582 <VgaText::doANSI_SGR(int)+0x70>
c0008529:	83 fa 07             	cmp    edx,0x7
c000852c:	75 0b                	jne    c0008539 <VgaText::doANSI_SGR(int)+0x27>
c000852e:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0008531:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008534:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0008537:	eb 49                	jmp    c0008582 <VgaText::doANSI_SGR(int)+0x70>
c0008539:	83 fa 1b             	cmp    edx,0x1b
c000853c:	74 e0                	je     c000851e <VgaText::doANSI_SGR(int)+0xc>
c000853e:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0008541:	83 f9 07             	cmp    ecx,0x7
c0008544:	77 09                	ja     c000854f <VgaText::doANSI_SGR(int)+0x3d>
c0008546:	8b 14 8d 20 28 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdd7e0]
c000854d:	eb 20                	jmp    c000856f <VgaText::doANSI_SGR(int)+0x5d>
c000854f:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008552:	83 f9 07             	cmp    ecx,0x7
c0008555:	77 09                	ja     c0008560 <VgaText::doANSI_SGR(int)+0x4e>
c0008557:	8b 14 8d 20 28 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdd7e0]
c000855e:	eb 22                	jmp    c0008582 <VgaText::doANSI_SGR(int)+0x70>
c0008560:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008563:	83 f9 07             	cmp    ecx,0x7
c0008566:	77 0b                	ja     c0008573 <VgaText::doANSI_SGR(int)+0x61>
c0008568:	8b 14 95 d8 26 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd928]
c000856f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008572:	c3                   	ret    
c0008573:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0008576:	83 f9 07             	cmp    ecx,0x7
c0008579:	77 0a                	ja     c0008585 <VgaText::doANSI_SGR(int)+0x73>
c000857b:	8b 14 95 b0 26 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd950]
c0008582:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008585:	c3                   	ret    

c0008586 <VgaText::setDefaultBgColour(VgaColour)>:
c0008586:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000858a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000858e:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0008591:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008594:	c3                   	ret    
c0008595:	90                   	nop

c0008596 <VgaText::setDefaultFgColour(VgaColour)>:
c0008596:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000859a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000859e:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085a1:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085a4:	c3                   	ret    
c00085a5:	90                   	nop

c00085a6 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085a6:	53                   	push   ebx
c00085a7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085af:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085b3:	51                   	push   ecx
c00085b4:	e8 cd ff ff ff       	call   c0008586 <VgaText::setDefaultBgColour(VgaColour)>
c00085b9:	58                   	pop    eax
c00085ba:	5a                   	pop    edx
c00085bb:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085bf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085c3:	5b                   	pop    ebx
c00085c4:	eb d0                	jmp    c0008596 <VgaText::setDefaultFgColour(VgaColour)>

c00085c6 <VgaText::setTitleTextColour(VgaColour)>:
c00085c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085ce:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085d1:	c3                   	ret    

c00085d2 <VgaText::setTitleColour(VgaColour)>:
c00085d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085da:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00085dd:	c3                   	ret    

c00085de <VgaText::setTitle(char*)>:
c00085de:	c3                   	ret    
c00085df:	90                   	nop

c00085e0 <VgaText::combineColours(unsigned char, unsigned char)>:
c00085e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085e4:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00085e9:	83 e0 0f             	and    eax,0xf
c00085ec:	c1 e2 04             	shl    edx,0x4
c00085ef:	09 d0                	or     eax,edx
c00085f1:	c3                   	ret    

c00085f2 <VgaText::scrollScreen()>:
c00085f2:	55                   	push   ebp
c00085f3:	57                   	push   edi
c00085f4:	56                   	push   esi
c00085f5:	be 01 00 00 00       	mov    esi,0x1
c00085fa:	53                   	push   ebx
c00085fb:	83 ec 0c             	sub    esp,0xc
c00085fe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008602:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008605:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000860b:	31 ff                	xor    edi,edi
c000860d:	01 e9                	add    ecx,ebp
c000860f:	8a 01                	mov    al,BYTE PTR [ecx]
c0008611:	83 fe 18             	cmp    esi,0x18
c0008614:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c000861a:	75 20                	jne    c000863c <VgaText::scrollScreen()+0x4a>
c000861c:	f7 c7 01 00 00 00    	test   edi,0x1
c0008622:	74 15                	je     c0008639 <VgaText::scrollScreen()+0x47>
c0008624:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008628:	50                   	push   eax
c0008629:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000862d:	50                   	push   eax
c000862e:	e8 ad ff ff ff       	call   c00085e0 <VgaText::combineColours(unsigned char, unsigned char)>
c0008633:	5a                   	pop    edx
c0008634:	5a                   	pop    edx
c0008635:	88 01                	mov    BYTE PTR [ecx],al
c0008637:	eb 03                	jmp    c000863c <VgaText::scrollScreen()+0x4a>
c0008639:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c000863c:	47                   	inc    edi
c000863d:	41                   	inc    ecx
c000863e:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008644:	75 c9                	jne    c000860f <VgaText::scrollScreen()+0x1d>
c0008646:	46                   	inc    esi
c0008647:	83 fe 19             	cmp    esi,0x19
c000864a:	75 b9                	jne    c0008605 <VgaText::scrollScreen()+0x13>
c000864c:	39 1d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebx
c0008652:	75 1f                	jne    c0008673 <VgaText::scrollScreen()+0x81>
c0008654:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008658:	74 05                	je     c000865f <VgaText::scrollScreen()+0x6d>
c000865a:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000865d:	eb 14                	jmp    c0008673 <VgaText::scrollScreen()+0x81>
c000865f:	50                   	push   eax
c0008660:	50                   	push   eax
c0008661:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008665:	50                   	push   eax
c0008666:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000866a:	50                   	push   eax
c000866b:	e8 e8 f9 00 00       	call   c0018058 <HalConsoleScroll(int, int)>
c0008670:	83 c4 10             	add    esp,0x10
c0008673:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008677:	83 c4 0c             	add    esp,0xc
c000867a:	5b                   	pop    ebx
c000867b:	5e                   	pop    esi
c000867c:	5f                   	pop    edi
c000867d:	5d                   	pop    ebp
c000867e:	e9 79 fe ff ff       	jmp    c00084fc <VgaText::updateCursor()>
c0008683:	90                   	nop

c0008684 <VgaText::combineCharAndColour(char, unsigned char)>:
c0008684:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008689:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000868e:	c1 e0 08             	shl    eax,0x8
c0008691:	09 d0                	or     eax,edx
c0008693:	c3                   	ret    

c0008694 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0008694:	55                   	push   ebp
c0008695:	57                   	push   edi
c0008696:	56                   	push   esi
c0008697:	53                   	push   ebx
c0008698:	83 ec 1c             	sub    esp,0x1c
c000869b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000869f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086a3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086ab:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086af:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086b3:	0f b6 c3             	movzx  eax,bl
c00086b6:	50                   	push   eax
c00086b7:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086bc:	50                   	push   eax
c00086bd:	e8 1e ff ff ff       	call   c00085e0 <VgaText::combineColours(unsigned char, unsigned char)>
c00086c2:	5a                   	pop    edx
c00086c3:	0f b6 c0             	movzx  eax,al
c00086c6:	59                   	pop    ecx
c00086c7:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086cc:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086d0:	50                   	push   eax
c00086d1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086d5:	e8 aa ff ff ff       	call   c0008684 <VgaText::combineCharAndColour(char, unsigned char)>
c00086da:	5a                   	pop    edx
c00086db:	6b d7 50             	imul   edx,edi,0x50
c00086de:	59                   	pop    ecx
c00086df:	01 f2                	add    edx,esi
c00086e1:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00086e4:	0f b7 d2             	movzx  edx,dx
c00086e7:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c00086eb:	39 2d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebp
c00086f1:	75 28                	jne    c000871b <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c00086f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00086f7:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00086fb:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c00086ff:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008703:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008707:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000870b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000870f:	83 c4 1c             	add    esp,0x1c
c0008712:	5b                   	pop    ebx
c0008713:	5e                   	pop    esi
c0008714:	5f                   	pop    edi
c0008715:	5d                   	pop    ebp
c0008716:	e9 45 fa 00 00       	jmp    c0018160 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000871b:	83 c4 1c             	add    esp,0x1c
c000871e:	5b                   	pop    ebx
c000871f:	5e                   	pop    esi
c0008720:	5f                   	pop    edi
c0008721:	5d                   	pop    ebp
c0008722:	c3                   	ret    
c0008723:	90                   	nop

c0008724 <VgaText::getCursorX()>:
c0008724:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008728:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000872b:	c3                   	ret    

c000872c <VgaText::getCursorY()>:
c000872c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008730:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008733:	c3                   	ret    

c0008734 <VgaText::setCursor(int, int)>:
c0008734:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008738:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000873c:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000873f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008743:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008746:	e9 b1 fd ff ff       	jmp    c00084fc <VgaText::updateCursor()>

c000874b <setActiveTerminal(VgaText*)>:
c000874b:	53                   	push   ebx
c000874c:	83 ec 08             	sub    esp,0x8
c000874f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008753:	85 db                	test   ebx,ebx
c0008755:	75 11                	jne    c0008768 <setActiveTerminal(VgaText*)+0x1d>
c0008757:	c7 44 24 10 20 01 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020120
c000875f:	83 c4 08             	add    esp,0x8
c0008762:	5b                   	pop    ebx
c0008763:	e9 33 84 00 00       	jmp    c0010b9b <KePanic(char const*)>
c0008768:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c000876d:	85 c0                	test   eax,eax
c000876f:	74 0c                	je     c000877d <setActiveTerminal(VgaText*)+0x32>
c0008771:	83 ec 0c             	sub    esp,0xc
c0008774:	50                   	push   eax
c0008775:	e8 82 fd ff ff       	call   c00084fc <VgaText::updateCursor()>
c000877a:	83 c4 10             	add    esp,0x10
c000877d:	89 1d 04 5f 02 c0    	mov    DWORD PTR ds:0xc0025f04,ebx
c0008783:	50                   	push   eax
c0008784:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008787:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000878a:	53                   	push   ebx
c000878b:	e8 a4 ff ff ff       	call   c0008734 <VgaText::setCursor(int, int)>
c0008790:	83 c4 18             	add    esp,0x18
c0008793:	5b                   	pop    ebx
c0008794:	c3                   	ret    
c0008795:	90                   	nop

c0008796 <VgaText::clearScreen()>:
c0008796:	57                   	push   edi
c0008797:	56                   	push   esi
c0008798:	31 f6                	xor    esi,esi
c000879a:	53                   	push   ebx
c000879b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000879f:	52                   	push   edx
c00087a0:	6a 00                	push   0x0
c00087a2:	6a 00                	push   0x0
c00087a4:	53                   	push   ebx
c00087a5:	e8 8a ff ff ff       	call   c0008734 <VgaText::setCursor(int, int)>
c00087aa:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087b1:	83 c4 10             	add    esp,0x10
c00087b4:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087b7:	7e 20                	jle    c00087d9 <VgaText::clearScreen()+0x43>
c00087b9:	31 ff                	xor    edi,edi
c00087bb:	50                   	push   eax
c00087bc:	50                   	push   eax
c00087bd:	56                   	push   esi
c00087be:	57                   	push   edi
c00087bf:	47                   	inc    edi
c00087c0:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087c3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087c6:	6a 20                	push   0x20
c00087c8:	53                   	push   ebx
c00087c9:	e8 c6 fe ff ff       	call   c0008694 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087ce:	83 c4 20             	add    esp,0x20
c00087d1:	83 ff 50             	cmp    edi,0x50
c00087d4:	75 e5                	jne    c00087bb <VgaText::clearScreen()+0x25>
c00087d6:	46                   	inc    esi
c00087d7:	eb db                	jmp    c00087b4 <VgaText::clearScreen()+0x1e>
c00087d9:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00087e0:	5b                   	pop    ebx
c00087e1:	5e                   	pop    esi
c00087e2:	5f                   	pop    edi
c00087e3:	c3                   	ret    

c00087e4 <VgaText::setCursorX(int)>:
c00087e4:	83 ec 10             	sub    esp,0x10
c00087e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00087eb:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00087ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00087f2:	50                   	push   eax
c00087f3:	e8 3c ff ff ff       	call   c0008734 <VgaText::setCursor(int, int)>
c00087f8:	83 c4 1c             	add    esp,0x1c
c00087fb:	c3                   	ret    

c00087fc <VgaText::setCursorY(int)>:
c00087fc:	83 ec 10             	sub    esp,0x10
c00087ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008803:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008807:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000880a:	50                   	push   eax
c000880b:	e8 24 ff ff ff       	call   c0008734 <VgaText::setCursor(int, int)>
c0008810:	83 c4 1c             	add    esp,0x1c
c0008813:	c3                   	ret    

c0008814 <VgaText::incrementCursor(bool)>:
c0008814:	56                   	push   esi
c0008815:	53                   	push   ebx
c0008816:	51                   	push   ecx
c0008817:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000881b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000881f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008822:	40                   	inc    eax
c0008823:	83 f8 50             	cmp    eax,0x50
c0008826:	74 05                	je     c000882d <VgaText::incrementCursor(bool)+0x19>
c0008828:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000882b:	eb 24                	jmp    c0008851 <VgaText::incrementCursor(bool)+0x3d>
c000882d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008830:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008837:	8d 50 01             	lea    edx,[eax+0x1]
c000883a:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000883d:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008840:	75 0f                	jne    c0008851 <VgaText::incrementCursor(bool)+0x3d>
c0008842:	83 ec 0c             	sub    esp,0xc
c0008845:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008848:	53                   	push   ebx
c0008849:	e8 a4 fd ff ff       	call   c00085f2 <VgaText::scrollScreen()>
c000884e:	83 c4 10             	add    esp,0x10
c0008851:	89 f0                	mov    eax,esi
c0008853:	84 c0                	test   al,al
c0008855:	74 0c                	je     c0008863 <VgaText::incrementCursor(bool)+0x4f>
c0008857:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000885b:	5a                   	pop    edx
c000885c:	5b                   	pop    ebx
c000885d:	5e                   	pop    esi
c000885e:	e9 99 fc ff ff       	jmp    c00084fc <VgaText::updateCursor()>
c0008863:	58                   	pop    eax
c0008864:	5b                   	pop    ebx
c0008865:	5e                   	pop    esi
c0008866:	c3                   	ret    
c0008867:	90                   	nop

c0008868 <VgaText::decrementCursor(bool)>:
c0008868:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000886c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008870:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008873:	85 c0                	test   eax,eax
c0008875:	74 04                	je     c000887b <VgaText::decrementCursor(bool)+0x13>
c0008877:	48                   	dec    eax
c0008878:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000887b:	84 c9                	test   cl,cl
c000887d:	74 09                	je     c0008888 <VgaText::decrementCursor(bool)+0x20>
c000887f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008883:	e9 74 fc ff ff       	jmp    c00084fc <VgaText::updateCursor()>
c0008888:	c3                   	ret    
c0008889:	90                   	nop

c000888a <VgaText::putchar(char, VgaColour, VgaColour)>:
c000888a:	53                   	push   ebx
c000888b:	83 ec 08             	sub    esp,0x8
c000888e:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c0008893:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008897:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000889b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000889f:	83 f8 07             	cmp    eax,0x7
c00088a2:	75 21                	jne    c00088c5 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00088a4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088ac:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088b4:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088bc:	83 c4 08             	add    esp,0x8
c00088bf:	5b                   	pop    ebx
c00088c0:	e9 a2 31 00 00       	jmp    c000ba67 <Krnl::beep(int, int, bool)>
c00088c5:	83 f8 0d             	cmp    eax,0xd
c00088c8:	75 09                	jne    c00088d3 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088ca:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088d1:	eb 2d                	jmp    c0008900 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088d3:	83 f8 0a             	cmp    eax,0xa
c00088d6:	75 31                	jne    c0008909 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088d8:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00088db:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088e2:	8d 50 01             	lea    edx,[eax+0x1]
c00088e5:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00088e8:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00088eb:	75 0f                	jne    c00088fc <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00088ed:	83 ec 0c             	sub    esp,0xc
c00088f0:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00088f3:	53                   	push   ebx
c00088f4:	e8 f9 fc ff ff       	call   c00085f2 <VgaText::scrollScreen()>
c00088f9:	83 c4 10             	add    esp,0x10
c00088fc:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008900:	83 c4 08             	add    esp,0x8
c0008903:	5b                   	pop    ebx
c0008904:	e9 f3 fb ff ff       	jmp    c00084fc <VgaText::updateCursor()>
c0008909:	83 f8 08             	cmp    eax,0x8
c000890c:	75 25                	jne    c0008933 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c000890e:	50                   	push   eax
c000890f:	50                   	push   eax
c0008910:	6a 01                	push   0x1
c0008912:	53                   	push   ebx
c0008913:	e8 50 ff ff ff       	call   c0008868 <VgaText::decrementCursor(bool)>
c0008918:	5a                   	pop    edx
c0008919:	59                   	pop    ecx
c000891a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000891d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008920:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008923:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008926:	6a 20                	push   0x20
c0008928:	53                   	push   ebx
c0008929:	e8 66 fd ff ff       	call   c0008694 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000892e:	83 c4 28             	add    esp,0x28
c0008931:	5b                   	pop    ebx
c0008932:	c3                   	ret    
c0008933:	83 ec 08             	sub    esp,0x8
c0008936:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008939:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000893c:	51                   	push   ecx
c000893d:	52                   	push   edx
c000893e:	50                   	push   eax
c000893f:	53                   	push   ebx
c0008940:	e8 4f fd ff ff       	call   c0008694 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008945:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0008949:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008951:	83 c4 28             	add    esp,0x28
c0008954:	5b                   	pop    ebx
c0008955:	e9 ba fe ff ff       	jmp    c0008814 <VgaText::incrementCursor(bool)>

c000895a <VgaText::putchar(char)>:
c000895a:	57                   	push   edi
c000895b:	56                   	push   esi
c000895c:	53                   	push   ebx
c000895d:	83 ec 10             	sub    esp,0x10
c0008960:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008964:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008968:	89 f8                	mov    eax,edi
c000896a:	0f be c0             	movsx  eax,al
c000896d:	83 f8 5b             	cmp    eax,0x5b
c0008970:	75 18                	jne    c000898a <VgaText::putchar(char)+0x30>
c0008972:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008976:	74 20                	je     c0008998 <VgaText::putchar(char)+0x3e>
c0008978:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000897e:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008985:	e9 c1 00 00 00       	jmp    c0008a4b <VgaText::putchar(char)+0xf1>
c000898a:	83 f8 1b             	cmp    eax,0x1b
c000898d:	75 09                	jne    c0008998 <VgaText::putchar(char)+0x3e>
c000898f:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0008993:	e9 b3 00 00 00       	jmp    c0008a4b <VgaText::putchar(char)+0xf1>
c0008998:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000899b:	84 c9                	test   cl,cl
c000899d:	0f 84 98 00 00 00    	je     c0008a3b <VgaText::putchar(char)+0xe1>
c00089a3:	8d 77 c0             	lea    esi,[edi-0x40]
c00089a6:	89 f2                	mov    edx,esi
c00089a8:	80 fa 3e             	cmp    dl,0x3e
c00089ab:	77 78                	ja     c0008a25 <VgaText::putchar(char)+0xcb>
c00089ad:	83 f8 6d             	cmp    eax,0x6d
c00089b0:	75 47                	jne    c00089f9 <VgaText::putchar(char)+0x9f>
c00089b2:	31 f6                	xor    esi,esi
c00089b4:	31 d2                	xor    edx,edx
c00089b6:	31 c0                	xor    eax,eax
c00089b8:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089bb:	7e 2d                	jle    c00089ea <VgaText::putchar(char)+0x90>
c00089bd:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089c2:	83 fa 3b             	cmp    edx,0x3b
c00089c5:	75 17                	jne    c00089de <VgaText::putchar(char)+0x84>
c00089c7:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00089cb:	50                   	push   eax
c00089cc:	53                   	push   ebx
c00089cd:	e8 40 fb ff ff       	call   c0008512 <VgaText::doANSI_SGR(int)>
c00089d2:	59                   	pop    ecx
c00089d3:	31 d2                	xor    edx,edx
c00089d5:	5f                   	pop    edi
c00089d6:	31 c0                	xor    eax,eax
c00089d8:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00089dc:	eb 09                	jmp    c00089e7 <VgaText::putchar(char)+0x8d>
c00089de:	6b c0 0a             	imul   eax,eax,0xa
c00089e1:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089e5:	88 ca                	mov    dl,cl
c00089e7:	46                   	inc    esi
c00089e8:	eb ce                	jmp    c00089b8 <VgaText::putchar(char)+0x5e>
c00089ea:	84 d2                	test   dl,dl
c00089ec:	74 2f                	je     c0008a1d <VgaText::putchar(char)+0xc3>
c00089ee:	50                   	push   eax
c00089ef:	53                   	push   ebx
c00089f0:	e8 1d fb ff ff       	call   c0008512 <VgaText::doANSI_SGR(int)>
c00089f5:	58                   	pop    eax
c00089f6:	5a                   	pop    edx
c00089f7:	eb 24                	jmp    c0008a1d <VgaText::putchar(char)+0xc3>
c00089f9:	83 f8 4a             	cmp    eax,0x4a
c00089fc:	75 1f                	jne    c0008a1d <VgaText::putchar(char)+0xc3>
c00089fe:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a02:	75 19                	jne    c0008a1d <VgaText::putchar(char)+0xc3>
c0008a04:	83 ec 0c             	sub    esp,0xc
c0008a07:	53                   	push   ebx
c0008a08:	e8 89 fd ff ff       	call   c0008796 <VgaText::clearScreen()>
c0008a0d:	83 c4 0c             	add    esp,0xc
c0008a10:	6a 00                	push   0x0
c0008a12:	6a 00                	push   0x0
c0008a14:	53                   	push   ebx
c0008a15:	e8 1a fd ff ff       	call   c0008734 <VgaText::setCursor(int, int)>
c0008a1a:	83 c4 10             	add    esp,0x10
c0008a1d:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a23:	eb 26                	jmp    c0008a4b <VgaText::putchar(char)+0xf1>
c0008a25:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a28:	83 f8 0e             	cmp    eax,0xe
c0008a2b:	7f 1e                	jg     c0008a4b <VgaText::putchar(char)+0xf1>
c0008a2d:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a30:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a33:	89 f9                	mov    ecx,edi
c0008a35:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c0008a39:	eb 10                	jmp    c0008a4b <VgaText::putchar(char)+0xf1>
c0008a3b:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a3e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a41:	50                   	push   eax
c0008a42:	53                   	push   ebx
c0008a43:	e8 42 fe ff ff       	call   c000888a <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a48:	83 c4 10             	add    esp,0x10
c0008a4b:	83 c4 10             	add    esp,0x10
c0008a4e:	5b                   	pop    ebx
c0008a4f:	5e                   	pop    esi
c0008a50:	5f                   	pop    edi
c0008a51:	c3                   	ret    

c0008a52 <VgaText::putx(unsigned int)>:
c0008a52:	57                   	push   edi
c0008a53:	b9 11 00 00 00       	mov    ecx,0x11
c0008a58:	56                   	push   esi
c0008a59:	be 2e 01 02 c0       	mov    esi,0xc002012e
c0008a5e:	53                   	push   ebx
c0008a5f:	83 ec 20             	sub    esp,0x20
c0008a62:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a66:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a6a:	fc                   	cld    
c0008a6b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a6d:	be 08 00 00 00       	mov    esi,0x8
c0008a72:	50                   	push   eax
c0008a73:	50                   	push   eax
c0008a74:	89 d8                	mov    eax,ebx
c0008a76:	c1 e3 04             	shl    ebx,0x4
c0008a79:	c1 e8 1c             	shr    eax,0x1c
c0008a7c:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a81:	50                   	push   eax
c0008a82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a86:	e8 cf fe ff ff       	call   c000895a <VgaText::putchar(char)>
c0008a8b:	83 c4 10             	add    esp,0x10
c0008a8e:	4e                   	dec    esi
c0008a8f:	75 e1                	jne    c0008a72 <VgaText::putx(unsigned int)+0x20>
c0008a91:	83 c4 20             	add    esp,0x20
c0008a94:	5b                   	pop    ebx
c0008a95:	5e                   	pop    esi
c0008a96:	5f                   	pop    edi
c0008a97:	c3                   	ret    

c0008a98 <VgaText::puts(char const*)>:
c0008a98:	53                   	push   ebx
c0008a99:	83 ec 08             	sub    esp,0x8
c0008a9c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008aa0:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008aa3:	85 c0                	test   eax,eax
c0008aa5:	74 12                	je     c0008ab9 <VgaText::puts(char const*)+0x21>
c0008aa7:	43                   	inc    ebx
c0008aa8:	51                   	push   ecx
c0008aa9:	51                   	push   ecx
c0008aaa:	50                   	push   eax
c0008aab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008aaf:	e8 a6 fe ff ff       	call   c000895a <VgaText::putchar(char)>
c0008ab4:	83 c4 10             	add    esp,0x10
c0008ab7:	eb e7                	jmp    c0008aa0 <VgaText::puts(char const*)+0x8>
c0008ab9:	83 c4 08             	add    esp,0x8
c0008abc:	5b                   	pop    ebx
c0008abd:	c3                   	ret    

c0008abe <VgaText::write(unsigned long long, void*, int*)>:
c0008abe:	55                   	push   ebp
c0008abf:	57                   	push   edi
c0008ac0:	56                   	push   esi
c0008ac1:	53                   	push   ebx
c0008ac2:	83 ec 0c             	sub    esp,0xc
c0008ac5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008ac9:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008acd:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008ad1:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008ad8:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008adb:	39 eb                	cmp    ebx,ebp
c0008add:	74 13                	je     c0008af2 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008adf:	43                   	inc    ebx
c0008ae0:	50                   	push   eax
c0008ae1:	50                   	push   eax
c0008ae2:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008ae6:	50                   	push   eax
c0008ae7:	56                   	push   esi
c0008ae8:	e8 6d fe ff ff       	call   c000895a <VgaText::putchar(char)>
c0008aed:	83 c4 10             	add    esp,0x10
c0008af0:	eb e9                	jmp    c0008adb <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008af2:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008af9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008afd:	89 38                	mov    DWORD PTR [eax],edi
c0008aff:	83 c4 0c             	add    esp,0xc
c0008b02:	31 c0                	xor    eax,eax
c0008b04:	5b                   	pop    ebx
c0008b05:	5e                   	pop    esi
c0008b06:	5f                   	pop    edi
c0008b07:	5d                   	pop    ebp
c0008b08:	c3                   	ret    
c0008b09:	90                   	nop

c0008b0a <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b0a:	55                   	push   ebp
c0008b0b:	57                   	push   edi
c0008b0c:	56                   	push   esi
c0008b0d:	53                   	push   ebx
c0008b0e:	83 ec 0c             	sub    esp,0xc
c0008b11:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008b15:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b1a:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008b21:	50                   	push   eax
c0008b22:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b27:	50                   	push   eax
c0008b28:	e8 b3 fa ff ff       	call   c00085e0 <VgaText::combineColours(unsigned char, unsigned char)>
c0008b2d:	5a                   	pop    edx
c0008b2e:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008b32:	59                   	pop    ecx
c0008b33:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008b36:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008b3a:	0f b7 f6             	movzx  esi,si
c0008b3d:	0f b6 e8             	movzx  ebp,al
c0008b40:	01 f6                	add    esi,esi
c0008b42:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008b45:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008b48:	85 c0                	test   eax,eax
c0008b4a:	0f 84 ef 00 00 00    	je     c0008c3f <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b50:	83 f8 0d             	cmp    eax,0xd
c0008b53:	75 0c                	jne    c0008b61 <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b55:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b5c:	e9 d8 00 00 00       	jmp    c0008c39 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b61:	83 f8 0a             	cmp    eax,0xa
c0008b64:	75 44                	jne    c0008baa <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b66:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008b69:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b70:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b73:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008b76:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008b79:	75 0f                	jne    c0008b8a <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b7b:	83 ec 0c             	sub    esp,0xc
c0008b7e:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008b81:	53                   	push   ebx
c0008b82:	e8 6b fa ff ff       	call   c00085f2 <VgaText::scrollScreen()>
c0008b87:	83 c4 10             	add    esp,0x10
c0008b8a:	83 ec 0c             	sub    esp,0xc
c0008b8d:	53                   	push   ebx
c0008b8e:	e8 69 f9 ff ff       	call   c00084fc <VgaText::updateCursor()>
c0008b93:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008b97:	83 c4 10             	add    esp,0x10
c0008b9a:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008b9d:	0f b7 f6             	movzx  esi,si
c0008ba0:	01 f6                	add    esi,esi
c0008ba2:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008ba5:	e9 8f 00 00 00       	jmp    c0008c39 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008baa:	83 f8 08             	cmp    eax,0x8
c0008bad:	75 34                	jne    c0008be3 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008baf:	51                   	push   ecx
c0008bb0:	51                   	push   ecx
c0008bb1:	6a 01                	push   0x1
c0008bb3:	53                   	push   ebx
c0008bb4:	e8 af fc ff ff       	call   c0008868 <VgaText::decrementCursor(bool)>
c0008bb9:	5e                   	pop    esi
c0008bba:	58                   	pop    eax
c0008bbb:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008bbe:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008bc1:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008bc4:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008bc7:	6a 20                	push   0x20
c0008bc9:	53                   	push   ebx
c0008bca:	e8 c5 fa ff ff       	call   c0008694 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008bcf:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008bd3:	83 c4 20             	add    esp,0x20
c0008bd6:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008bd9:	0f b7 f6             	movzx  esi,si
c0008bdc:	01 f6                	add    esi,esi
c0008bde:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008be1:	eb 56                	jmp    c0008c39 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008be3:	52                   	push   edx
c0008be4:	52                   	push   edx
c0008be5:	55                   	push   ebp
c0008be6:	50                   	push   eax
c0008be7:	e8 98 fa ff ff       	call   c0008684 <VgaText::combineCharAndColour(char, unsigned char)>
c0008bec:	83 c4 10             	add    esp,0x10
c0008bef:	66 89 06             	mov    WORD PTR [esi],ax
c0008bf2:	39 1d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebx
c0008bf8:	75 1d                	jne    c0008c17 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008bfa:	83 ec 0c             	sub    esp,0xc
c0008bfd:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008c00:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008c03:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c07:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c0b:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008c0e:	50                   	push   eax
c0008c0f:	e8 4c f5 00 00       	call   c0018160 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c14:	83 c4 20             	add    esp,0x20
c0008c17:	83 c6 02             	add    esi,0x2
c0008c1a:	50                   	push   eax
c0008c1b:	50                   	push   eax
c0008c1c:	6a 00                	push   0x0
c0008c1e:	53                   	push   ebx
c0008c1f:	e8 f0 fb ff ff       	call   c0008814 <VgaText::incrementCursor(bool)>
c0008c24:	83 c4 10             	add    esp,0x10
c0008c27:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0008c2b:	75 0c                	jne    c0008c39 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c2d:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008c31:	0f b7 f6             	movzx  esi,si
c0008c34:	01 f6                	add    esi,esi
c0008c36:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008c39:	47                   	inc    edi
c0008c3a:	e9 06 ff ff ff       	jmp    c0008b45 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c3f:	83 ec 0c             	sub    esp,0xc
c0008c42:	53                   	push   ebx
c0008c43:	e8 b4 f8 ff ff       	call   c00084fc <VgaText::updateCursor()>
c0008c48:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008c4f:	83 c4 1c             	add    esp,0x1c
c0008c52:	5b                   	pop    ebx
c0008c53:	5e                   	pop    esi
c0008c54:	5f                   	pop    edi
c0008c55:	5d                   	pop    ebp
c0008c56:	c3                   	ret    
c0008c57:	90                   	nop

c0008c58 <VgaText::VgaText(char const*)>:
c0008c58:	56                   	push   esi
c0008c59:	53                   	push   ebx
c0008c5a:	83 ec 04             	sub    esp,0x4
c0008c5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c61:	83 ec 08             	sub    esp,0x8
c0008c64:	6a 00                	push   0x0
c0008c66:	50                   	push   eax
c0008c67:	e8 46 05 00 00       	call   c00091b2 <UnixFile::UnixFile(int)>
c0008c6c:	83 c4 10             	add    esp,0x10
c0008c6f:	ba 54 01 02 c0       	mov    edx,0xc0020154
c0008c74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c78:	89 10                	mov    DWORD PTR [eax],edx
c0008c7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c7e:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c89:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008c90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c94:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008c98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c9c:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008ca0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca4:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008cab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008caf:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cba:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008cc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc5:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008ccc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd0:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008cd7:	83 ec 0c             	sub    esp,0xc
c0008cda:	6a 01                	push   0x1
c0008cdc:	e8 20 09 00 00       	call   c0009601 <Virt::allocateKernelVirtualPages(int)>
c0008ce1:	83 c4 10             	add    esp,0x10
c0008ce4:	89 c2                	mov    edx,eax
c0008ce6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cea:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008ced:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c0008cf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cf7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008cfa:	89 c6                	mov    esi,eax
c0008cfc:	e8 b1 f0 ff ff       	call   c0007db2 <Phys::allocatePage()>
c0008d01:	68 05 0c 00 00       	push   0xc05
c0008d06:	56                   	push   esi
c0008d07:	50                   	push   eax
c0008d08:	53                   	push   ebx
c0008d09:	e8 06 10 00 00       	call   c0009d14 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d0e:	83 c4 10             	add    esp,0x10
c0008d11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d15:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d18:	83 ec 04             	sub    esp,0x4
c0008d1b:	68 a0 0f 00 00       	push   0xfa0
c0008d20:	6a 00                	push   0x0
c0008d22:	50                   	push   eax
c0008d23:	e8 c8 77 ff ff       	call   c00004f0 <memset>
c0008d28:	83 c4 10             	add    esp,0x10
c0008d2b:	83 ec 04             	sub    esp,0x4
c0008d2e:	6a 00                	push   0x0
c0008d30:	6a 07                	push   0x7
c0008d32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d36:	e8 6b f8 ff ff       	call   c00085a6 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d3b:	83 c4 10             	add    esp,0x10
c0008d3e:	83 ec 04             	sub    esp,0x4
c0008d41:	6a 00                	push   0x0
c0008d43:	6a 00                	push   0x0
c0008d45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d49:	e8 e6 f9 ff ff       	call   c0008734 <VgaText::setCursor(int, int)>
c0008d4e:	83 c4 10             	add    esp,0x10
c0008d51:	83 ec 0c             	sub    esp,0xc
c0008d54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d58:	e8 39 fa ff ff       	call   c0008796 <VgaText::clearScreen()>
c0008d5d:	83 c4 10             	add    esp,0x10
c0008d60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d64:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d6c:	05 82 00 00 00       	add    eax,0x82
c0008d71:	83 ec 04             	sub    esp,0x4
c0008d74:	68 80 00 00 00       	push   0x80
c0008d79:	6a 00                	push   0x0
c0008d7b:	50                   	push   eax
c0008d7c:	e8 6f 77 ff ff       	call   c00004f0 <memset>
c0008d81:	83 c4 10             	add    esp,0x10
c0008d84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d88:	05 02 01 00 00       	add    eax,0x102
c0008d8d:	83 ec 04             	sub    esp,0x4
c0008d90:	68 80 00 00 00       	push   0x80
c0008d95:	6a 00                	push   0x0
c0008d97:	50                   	push   eax
c0008d98:	e8 53 77 ff ff       	call   c00004f0 <memset>
c0008d9d:	83 c4 10             	add    esp,0x10
c0008da0:	90                   	nop
c0008da1:	83 c4 04             	add    esp,0x4
c0008da4:	5b                   	pop    ebx
c0008da5:	5e                   	pop    esi
c0008da6:	c3                   	ret    
c0008da7:	90                   	nop

c0008da8 <VgaText::receiveKey(unsigned char)>:
c0008da8:	55                   	push   ebp
c0008da9:	57                   	push   edi
c0008daa:	56                   	push   esi
c0008dab:	53                   	push   ebx
c0008dac:	83 ec 2c             	sub    esp,0x2c
c0008daf:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0008db3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008db7:	89 ef                	mov    edi,ebp
c0008db9:	81 e7 ff 00 00 00    	and    edi,0xff
c0008dbf:	0f 84 66 01 00 00    	je     c0008f2b <VgaText::receiveKey(unsigned char)+0x183>
c0008dc5:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008dcb:	83 ff 08             	cmp    edi,0x8
c0008dce:	75 73                	jne    c0008e43 <VgaText::receiveKey(unsigned char)+0x9b>
c0008dd0:	83 ec 0c             	sub    esp,0xc
c0008dd3:	56                   	push   esi
c0008dd4:	e8 97 77 ff ff       	call   c0000570 <strlen>
c0008dd9:	83 c4 10             	add    esp,0x10
c0008ddc:	85 c0                	test   eax,eax
c0008dde:	0f 84 02 01 00 00    	je     c0008ee6 <VgaText::receiveKey(unsigned char)+0x13e>
c0008de4:	50                   	push   eax
c0008de5:	50                   	push   eax
c0008de6:	6a 08                	push   0x8
c0008de8:	53                   	push   ebx
c0008de9:	e8 6c fb ff ff       	call   c000895a <VgaText::putchar(char)>
c0008dee:	89 34 24             	mov    DWORD PTR [esp],esi
c0008df1:	e8 7a 77 ff ff       	call   c0000570 <strlen>
c0008df6:	83 c4 10             	add    esp,0x10
c0008df9:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008e01:	83 fa 0d             	cmp    edx,0xd
c0008e04:	89 d0                	mov    eax,edx
c0008e06:	0f 95 c1             	setne  cl
c0008e09:	83 fa 1f             	cmp    edx,0x1f
c0008e0c:	0f 9e c2             	setle  dl
c0008e0f:	0f b6 d2             	movzx  edx,dl
c0008e12:	85 ca                	test   edx,ecx
c0008e14:	74 17                	je     c0008e2d <VgaText::receiveKey(unsigned char)+0x85>
c0008e16:	83 e8 08             	sub    eax,0x8
c0008e19:	3c 02                	cmp    al,0x2
c0008e1b:	76 10                	jbe    c0008e2d <VgaText::receiveKey(unsigned char)+0x85>
c0008e1d:	55                   	push   ebp
c0008e1e:	55                   	push   ebp
c0008e1f:	68 3f 01 02 c0       	push   0xc002013f
c0008e24:	53                   	push   ebx
c0008e25:	e8 6e fc ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c0008e2a:	83 c4 10             	add    esp,0x10
c0008e2d:	83 ec 0c             	sub    esp,0xc
c0008e30:	56                   	push   esi
c0008e31:	e8 3a 77 ff ff       	call   c0000570 <strlen>
c0008e36:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e3e:	e9 a0 00 00 00       	jmp    c0008ee3 <VgaText::receiveKey(unsigned char)+0x13b>
c0008e43:	83 ec 0c             	sub    esp,0xc
c0008e46:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e4c:	50                   	push   eax
c0008e4d:	e8 1e 77 ff ff       	call   c0000570 <strlen>
c0008e52:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e55:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e59:	e8 12 77 ff ff       	call   c0000570 <strlen>
c0008e5e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e62:	83 c4 10             	add    esp,0x10
c0008e65:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e69:	3d 80 00 00 00       	cmp    eax,0x80
c0008e6e:	0f 87 b7 00 00 00    	ja     c0008f2b <VgaText::receiveKey(unsigned char)+0x183>
c0008e74:	8d 45 ff             	lea    eax,[ebp-0x1]
c0008e77:	8d 55 f7             	lea    edx,[ebp-0x9]
c0008e7a:	3c 1e                	cmp    al,0x1e
c0008e7c:	0f 96 c0             	setbe  al
c0008e7f:	80 fa 01             	cmp    dl,0x1
c0008e82:	0f 97 c2             	seta   dl
c0008e85:	0f b6 d2             	movzx  edx,dl
c0008e88:	85 c2                	test   edx,eax
c0008e8a:	74 2e                	je     c0008eba <VgaText::receiveKey(unsigned char)+0x112>
c0008e8c:	83 ff 0d             	cmp    edi,0xd
c0008e8f:	74 29                	je     c0008eba <VgaText::receiveKey(unsigned char)+0x112>
c0008e91:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e94:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008e97:	68 45 01 02 c0       	push   0xc0020145
c0008e9c:	53                   	push   ebx
c0008e9d:	e8 68 fc ff ff       	call   c0008b0a <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008ea2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ea5:	8d 45 40             	lea    eax,[ebp+0x40]
c0008ea8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008eab:	0f b6 c0             	movzx  eax,al
c0008eae:	50                   	push   eax
c0008eaf:	53                   	push   ebx
c0008eb0:	e8 d5 f9 ff ff       	call   c000888a <VgaText::putchar(char, VgaColour, VgaColour)>
c0008eb5:	83 c4 20             	add    esp,0x20
c0008eb8:	eb 11                	jmp    c0008ecb <VgaText::receiveKey(unsigned char)+0x123>
c0008eba:	89 e8                	mov    eax,ebp
c0008ebc:	51                   	push   ecx
c0008ebd:	0f be c0             	movsx  eax,al
c0008ec0:	51                   	push   ecx
c0008ec1:	50                   	push   eax
c0008ec2:	53                   	push   ebx
c0008ec3:	e8 92 fa ff ff       	call   c000895a <VgaText::putchar(char)>
c0008ec8:	83 c4 10             	add    esp,0x10
c0008ecb:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ed0:	89 e8                	mov    eax,ebp
c0008ed2:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ed6:	52                   	push   edx
c0008ed7:	52                   	push   edx
c0008ed8:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008edc:	50                   	push   eax
c0008edd:	56                   	push   esi
c0008ede:	e8 5d 79 ff ff       	call   c0000840 <strcat>
c0008ee3:	83 c4 10             	add    esp,0x10
c0008ee6:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c0008eec:	b0 01                	mov    al,0x1
c0008eee:	83 ff 1c             	cmp    edi,0x1c
c0008ef1:	77 0e                	ja     c0008f01 <VgaText::receiveKey(unsigned char)+0x159>
c0008ef3:	b8 08 04 00 10       	mov    eax,0x10000408
c0008ef8:	89 f9                	mov    ecx,edi
c0008efa:	d3 e8                	shr    eax,cl
c0008efc:	f7 d0                	not    eax
c0008efe:	83 e0 01             	and    eax,0x1
c0008f01:	84 c0                	test   al,al
c0008f03:	74 04                	je     c0008f09 <VgaText::receiveKey(unsigned char)+0x161>
c0008f05:	84 d2                	test   dl,dl
c0008f07:	74 22                	je     c0008f2b <VgaText::receiveKey(unsigned char)+0x183>
c0008f09:	81 c3 02 01 00 00    	add    ebx,0x102
c0008f0f:	50                   	push   eax
c0008f10:	50                   	push   eax
c0008f11:	56                   	push   esi
c0008f12:	53                   	push   ebx
c0008f13:	e8 28 79 ff ff       	call   c0000840 <strcat>
c0008f18:	83 c4 0c             	add    esp,0xc
c0008f1b:	68 80 00 00 00       	push   0x80
c0008f20:	6a 00                	push   0x0
c0008f22:	56                   	push   esi
c0008f23:	e8 c8 75 ff ff       	call   c00004f0 <memset>
c0008f28:	83 c4 10             	add    esp,0x10
c0008f2b:	83 c4 2c             	add    esp,0x2c
c0008f2e:	5b                   	pop    ebx
c0008f2f:	5e                   	pop    esi
c0008f30:	5f                   	pop    edi
c0008f31:	5d                   	pop    ebp
c0008f32:	c3                   	ret    
c0008f33:	90                   	nop

c0008f34 <VgaText::doUpdate()>:
c0008f34:	c3                   	ret    
c0008f35:	66 90                	xchg   ax,ax
c0008f37:	90                   	nop

c0008f38 <TSS::TSS()>:
c0008f38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f3c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f43:	90                   	nop
c0008f44:	c3                   	ret    
c0008f45:	90                   	nop
c0008f46:	66 90                	xchg   ax,ax

c0008f48 <TSS::setESP(unsigned long)>:
c0008f48:	55                   	push   ebp
c0008f49:	89 e5                	mov    ebp,esp
c0008f4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f51:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f54:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f57:	90                   	nop
c0008f58:	5d                   	pop    ebp
c0008f59:	c3                   	ret    
c0008f5a:	66 90                	xchg   ax,ax

c0008f5c <TSS::flush()>:
c0008f5c:	55                   	push   ebp
c0008f5d:	89 e5                	mov    ebp,esp
c0008f5f:	83 ec 10             	sub    esp,0x10
c0008f62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f65:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f67:	83 c8 03             	or     eax,0x3
c0008f6a:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f6e:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f72:	66 89 d0             	mov    ax,dx
c0008f75:	0f 00 d8             	ltr    ax
c0008f78:	90                   	nop
c0008f79:	c9                   	leave  
c0008f7a:	c3                   	ret    
c0008f7b:	90                   	nop

c0008f7c <TSS::setup(unsigned long, unsigned long)>:
c0008f7c:	55                   	push   ebp
c0008f7d:	89 e5                	mov    ebp,esp
c0008f7f:	83 ec 18             	sub    esp,0x18
c0008f82:	83 ec 0c             	sub    esp,0xc
c0008f85:	6a 68                	push   0x68
c0008f87:	e8 22 eb ff ff       	call   c0007aae <malloc>
c0008f8c:	83 c4 10             	add    esp,0x10
c0008f8f:	89 c2                	mov    edx,eax
c0008f91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f94:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f9a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f9d:	83 ec 04             	sub    esp,0x4
c0008fa0:	6a 68                	push   0x68
c0008fa2:	6a 00                	push   0x0
c0008fa4:	50                   	push   eax
c0008fa5:	e8 46 75 ff ff       	call   c00004f0 <memset>
c0008faa:	83 c4 10             	add    esp,0x10
c0008fad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fb0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fb3:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fbf:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fcb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fce:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fd7:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe3:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fef:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ffb:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0009001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009004:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009007:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c000900d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009010:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009013:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0009019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000901c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000901f:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0009022:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009028:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000902e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0009031:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009034:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009037:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000903e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009041:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009044:	0f 20 da             	mov    edx,cr3
c0009047:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000904a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000904d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0009050:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009053:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009056:	83 ec 08             	sub    esp,0x8
c0009059:	50                   	push   eax
c000905a:	8d 45 ec             	lea    eax,[ebp-0x14]
c000905d:	50                   	push   eax
c000905e:	e8 b7 e2 ff ff       	call   c000731a <GDTEntry::setBase(unsigned int)>
c0009063:	83 c4 10             	add    esp,0x10
c0009066:	83 ec 08             	sub    esp,0x8
c0009069:	6a 68                	push   0x68
c000906b:	8d 45 ec             	lea    eax,[ebp-0x14]
c000906e:	50                   	push   eax
c000906f:	e8 c2 e2 ff ff       	call   c0007336 <GDTEntry::setLimit(unsigned int)>
c0009074:	83 c4 10             	add    esp,0x10
c0009077:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000907b:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000907e:	83 e0 0f             	and    eax,0xf
c0009081:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009084:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009087:	83 c8 40             	or     eax,0x40
c000908a:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000908d:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009092:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009098:	05 78 01 00 00       	add    eax,0x178
c000909d:	83 ec 04             	sub    esp,0x4
c00090a0:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00090a3:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00090a6:	50                   	push   eax
c00090a7:	e8 be e2 ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c00090ac:	83 c4 10             	add    esp,0x10
c00090af:	89 c2                	mov    edx,eax
c00090b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090b4:	89 10                	mov    DWORD PTR [eax],edx
c00090b6:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00090bb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090c1:	05 78 01 00 00       	add    eax,0x178
c00090c6:	83 ec 0c             	sub    esp,0xc
c00090c9:	50                   	push   eax
c00090ca:	e8 c5 e2 ff ff       	call   c0007394 <GDT::flush()>
c00090cf:	83 c4 10             	add    esp,0x10
c00090d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00090d7:	c9                   	leave  
c00090d8:	c3                   	ret    
c00090d9:	90                   	nop

c00090da <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090de:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090e5:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00090ea:	75 08                	jne    c00090f4 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00090ec:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00090f2:	eb 38                	jmp    c000912c <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00090f4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00090f9:	75 17                	jne    c0009112 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00090fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009100:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009103:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009109:	8b 10                	mov    edx,DWORD PTR [eax]
c000910b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000910f:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0009112:	89 c1                	mov    ecx,eax
c0009114:	83 e1 fd             	and    ecx,0xfffffffd
c0009117:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c000911d:	74 cd                	je     c00090ec <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000911f:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009124:	83 e0 ef             	and    eax,0xffffffef
c0009127:	83 f8 08             	cmp    eax,0x8
c000912a:	76 c0                	jbe    c00090ec <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000912c:	31 c0                	xor    eax,eax
c000912e:	c3                   	ret    
c000912f:	90                   	nop

c0009130 <ReservedFilename::isAtty()>:
c0009130:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009134:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009137:	31 c0                	xor    eax,eax
c0009139:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000913f:	74 09                	je     c000914a <ReservedFilename::isAtty()+0x1a>
c0009141:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0009147:	0f 94 c0             	sete   al
c000914a:	c3                   	ret    
c000914b:	90                   	nop

c000914c <ReservedFilename::write(unsigned long long, void*, int*)>:
c000914c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009150:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009154:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009157:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000915b:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009160:	75 08                	jne    c000916a <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0009162:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0009168:	eb 3d                	jmp    c00091a7 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000916a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000916f:	75 17                	jne    c0009188 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0009171:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009176:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009179:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000917f:	8b 10                	mov    edx,DWORD PTR [eax]
c0009181:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009185:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0009188:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000918d:	75 04                	jne    c0009193 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000918f:	89 0a                	mov    DWORD PTR [edx],ecx
c0009191:	eb 14                	jmp    c00091a7 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009193:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0009198:	74 c8                	je     c0009162 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000919a:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000919f:	83 e0 ef             	and    eax,0xffffffef
c00091a2:	83 f8 08             	cmp    eax,0x8
c00091a5:	76 bb                	jbe    c0009162 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091a7:	31 c0                	xor    eax,eax
c00091a9:	c3                   	ret    

c00091aa <UnixFile::getFileDescriptor()>:
c00091aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091b1:	c3                   	ret    

c00091b2 <UnixFile::UnixFile(int)>:
c00091b2:	53                   	push   ebx
c00091b3:	83 ec 28             	sub    esp,0x28
c00091b6:	ba 1c 02 02 c0       	mov    edx,0xc002021c
c00091bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091bf:	89 10                	mov    DWORD PTR [eax],edx
c00091c1:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091c9:	0f 8f 90 01 00 00    	jg     c000935f <UnixFile::UnixFile(int)+0x1ad>
c00091cf:	a1 60 28 02 c0       	mov    eax,ds:0xc0022860
c00091d4:	8d 50 01             	lea    edx,[eax+0x1]
c00091d7:	89 15 60 28 02 c0    	mov    DWORD PTR ds:0xc0022860,edx
c00091dd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091e1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00091e4:	83 ec 08             	sub    esp,0x8
c00091e7:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00091eb:	68 98 5f 02 c0       	push   0xc0025f98
c00091f0:	e8 03 5b 01 00       	call   c001ecf8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00091f5:	83 c4 10             	add    esp,0x10
c00091f8:	a0 94 5f 02 c0       	mov    al,ds:0xc0025f94
c00091fd:	83 f0 01             	xor    eax,0x1
c0009200:	0f b6 c0             	movzx  eax,al
c0009203:	85 c0                	test   eax,eax
c0009205:	0f 84 55 01 00 00    	je     c0009360 <UnixFile::UnixFile(int)+0x1ae>
c000920b:	c6 05 94 5f 02 c0 01 	mov    BYTE PTR ds:0xc0025f94,0x1
c0009212:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000921a:	83 ec 0c             	sub    esp,0xc
c000921d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009221:	e8 88 e8 ff ff       	call   c0007aae <malloc>
c0009226:	83 c4 10             	add    esp,0x10
c0009229:	89 c3                	mov    ebx,eax
c000922b:	83 ec 08             	sub    esp,0x8
c000922e:	68 03 ff ff 0f       	push   0xfffff03
c0009233:	53                   	push   ebx
c0009234:	e8 2d 01 00 00       	call   c0009366 <ReservedFilename::ReservedFilename(int)>
c0009239:	83 c4 10             	add    esp,0x10
c000923c:	89 1d 8c 5f 02 c0    	mov    DWORD PTR ds:0xc0025f8c,ebx
c0009242:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000924a:	83 ec 0c             	sub    esp,0xc
c000924d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009251:	e8 58 e8 ff ff       	call   c0007aae <malloc>
c0009256:	83 c4 10             	add    esp,0x10
c0009259:	89 c3                	mov    ebx,eax
c000925b:	83 ec 08             	sub    esp,0x8
c000925e:	68 01 ff ff 0f       	push   0xfffff01
c0009263:	53                   	push   ebx
c0009264:	e8 fd 00 00 00       	call   c0009366 <ReservedFilename::ReservedFilename(int)>
c0009269:	83 c4 10             	add    esp,0x10
c000926c:	89 1d 90 5f 02 c0    	mov    DWORD PTR ds:0xc0025f90,ebx
c0009272:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000927a:	83 ec 0c             	sub    esp,0xc
c000927d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009281:	e8 28 e8 ff ff       	call   c0007aae <malloc>
c0009286:	83 c4 10             	add    esp,0x10
c0009289:	89 c3                	mov    ebx,eax
c000928b:	83 ec 08             	sub    esp,0x8
c000928e:	68 00 ff ff 0f       	push   0xfffff00
c0009293:	53                   	push   ebx
c0009294:	e8 cd 00 00 00       	call   c0009366 <ReservedFilename::ReservedFilename(int)>
c0009299:	83 c4 10             	add    esp,0x10
c000929c:	89 1d 84 5f 02 c0    	mov    DWORD PTR ds:0xc0025f84,ebx
c00092a2:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00092aa:	83 ec 0c             	sub    esp,0xc
c00092ad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092b1:	e8 f8 e7 ff ff       	call   c0007aae <malloc>
c00092b6:	83 c4 10             	add    esp,0x10
c00092b9:	89 c3                	mov    ebx,eax
c00092bb:	83 ec 08             	sub    esp,0x8
c00092be:	68 02 ff ff 0f       	push   0xfffff02
c00092c3:	53                   	push   ebx
c00092c4:	e8 9d 00 00 00       	call   c0009366 <ReservedFilename::ReservedFilename(int)>
c00092c9:	83 c4 10             	add    esp,0x10
c00092cc:	89 1d 88 5f 02 c0    	mov    DWORD PTR ds:0xc0025f88,ebx
c00092d2:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092da:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092df:	7f 7f                	jg     c0009360 <UnixFile::UnixFile(int)+0x1ae>
c00092e1:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00092e9:	83 ec 0c             	sub    esp,0xc
c00092ec:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00092f0:	e8 b9 e7 ff ff       	call   c0007aae <malloc>
c00092f5:	83 c4 10             	add    esp,0x10
c00092f8:	89 c3                	mov    ebx,eax
c00092fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00092fe:	05 10 ff ff 0f       	add    eax,0xfffff10
c0009303:	83 ec 08             	sub    esp,0x8
c0009306:	50                   	push   eax
c0009307:	53                   	push   ebx
c0009308:	e8 59 00 00 00       	call   c0009366 <ReservedFilename::ReservedFilename(int)>
c000930d:	83 c4 10             	add    esp,0x10
c0009310:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009314:	89 1c 85 60 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda0a0],ebx
c000931b:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0009323:	83 ec 0c             	sub    esp,0xc
c0009326:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000932a:	e8 7f e7 ff ff       	call   c0007aae <malloc>
c000932f:	83 c4 10             	add    esp,0x10
c0009332:	89 c3                	mov    ebx,eax
c0009334:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009338:	05 20 ff ff 0f       	add    eax,0xfffff20
c000933d:	83 ec 08             	sub    esp,0x8
c0009340:	50                   	push   eax
c0009341:	53                   	push   ebx
c0009342:	e8 1f 00 00 00       	call   c0009366 <ReservedFilename::ReservedFilename(int)>
c0009347:	83 c4 10             	add    esp,0x10
c000934a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000934e:	89 1c 85 20 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda0e0],ebx
c0009355:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000935a:	e9 7b ff ff ff       	jmp    c00092da <UnixFile::UnixFile(int)+0x128>
c000935f:	90                   	nop
c0009360:	83 c4 28             	add    esp,0x28
c0009363:	5b                   	pop    ebx
c0009364:	c3                   	ret    
c0009365:	90                   	nop

c0009366 <ReservedFilename::ReservedFilename(int)>:
c0009366:	83 ec 0c             	sub    esp,0xc
c0009369:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000936d:	83 ec 08             	sub    esp,0x8
c0009370:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009374:	50                   	push   eax
c0009375:	e8 38 fe ff ff       	call   c00091b2 <UnixFile::UnixFile(int)>
c000937a:	83 c4 10             	add    esp,0x10
c000937d:	ba 38 02 02 c0       	mov    edx,0xc0020238
c0009382:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009386:	89 10                	mov    DWORD PTR [eax],edx
c0009388:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000938c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009390:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009393:	90                   	nop
c0009394:	83 c4 0c             	add    esp,0xc
c0009397:	c3                   	ret    

c0009398 <UnixFile::~UnixFile()>:
c0009398:	83 ec 1c             	sub    esp,0x1c
c000939b:	ba 1c 02 02 c0       	mov    edx,0xc002021c
c00093a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093a4:	89 10                	mov    DWORD PTR [eax],edx
c00093a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093ad:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093b2:	7f 76                	jg     c000942a <UnixFile::~UnixFile()+0x92>
c00093b4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093bc:	83 ec 0c             	sub    esp,0xc
c00093bf:	68 98 5f 02 c0       	push   0xc0025f98
c00093c4:	e8 03 5a 01 00       	call   c001edcc <LinkedList<UnixFile>::getFirstElement()>
c00093c9:	83 c4 10             	add    esp,0x10
c00093cc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093d0:	83 ec 0c             	sub    esp,0xc
c00093d3:	68 98 5f 02 c0       	push   0xc0025f98
c00093d8:	e8 f7 59 01 00       	call   c001edd4 <LinkedList<UnixFile>::removeFirst()>
c00093dd:	83 c4 10             	add    esp,0x10
c00093e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093e4:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00093e8:	74 43                	je     c000942d <UnixFile::~UnixFile()+0x95>
c00093ea:	83 ec 08             	sub    esp,0x8
c00093ed:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00093f1:	68 98 5f 02 c0       	push   0xc0025f98
c00093f6:	e8 fd 58 01 00       	call   c001ecf8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00093fb:	83 c4 10             	add    esp,0x10
c00093fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009402:	8d 50 01             	lea    edx,[eax+0x1]
c0009405:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009409:	3d 20 a1 07 00       	cmp    eax,0x7a120
c000940e:	0f 94 c0             	sete   al
c0009411:	0f b6 c0             	movzx  eax,al
c0009414:	85 c0                	test   eax,eax
c0009416:	74 a4                	je     c00093bc <UnixFile::~UnixFile()+0x24>
c0009418:	83 ec 0c             	sub    esp,0xc
c000941b:	68 f4 01 02 c0       	push   0xc00201f4
c0009420:	e8 76 77 00 00       	call   c0010b9b <KePanic(char const*)>
c0009425:	83 c4 10             	add    esp,0x10
c0009428:	eb 92                	jmp    c00093bc <UnixFile::~UnixFile()+0x24>
c000942a:	90                   	nop
c000942b:	eb 01                	jmp    c000942e <UnixFile::~UnixFile()+0x96>
c000942d:	90                   	nop
c000942e:	90                   	nop
c000942f:	83 c4 1c             	add    esp,0x1c
c0009432:	c3                   	ret    
c0009433:	90                   	nop

c0009434 <UnixFile::~UnixFile()>:
c0009434:	83 ec 0c             	sub    esp,0xc
c0009437:	83 ec 0c             	sub    esp,0xc
c000943a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000943e:	e8 55 ff ff ff       	call   c0009398 <UnixFile::~UnixFile()>
c0009443:	83 c4 10             	add    esp,0x10
c0009446:	83 ec 08             	sub    esp,0x8
c0009449:	6a 0c                	push   0xc
c000944b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000944f:	e8 b8 13 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0009454:	83 c4 10             	add    esp,0x10
c0009457:	83 c4 0c             	add    esp,0xc
c000945a:	c3                   	ret    
c000945b:	90                   	nop

c000945c <ReservedFilename::~ReservedFilename()>:
c000945c:	83 ec 0c             	sub    esp,0xc
c000945f:	ba 38 02 02 c0       	mov    edx,0xc0020238
c0009464:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009468:	89 10                	mov    DWORD PTR [eax],edx
c000946a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000946e:	83 ec 0c             	sub    esp,0xc
c0009471:	50                   	push   eax
c0009472:	e8 21 ff ff ff       	call   c0009398 <UnixFile::~UnixFile()>
c0009477:	83 c4 10             	add    esp,0x10
c000947a:	90                   	nop
c000947b:	83 c4 0c             	add    esp,0xc
c000947e:	c3                   	ret    
c000947f:	90                   	nop

c0009480 <ReservedFilename::~ReservedFilename()>:
c0009480:	83 ec 0c             	sub    esp,0xc
c0009483:	83 ec 0c             	sub    esp,0xc
c0009486:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000948a:	e8 cd ff ff ff       	call   c000945c <ReservedFilename::~ReservedFilename()>
c000948f:	83 c4 10             	add    esp,0x10
c0009492:	83 ec 08             	sub    esp,0x8
c0009495:	6a 0c                	push   0xc
c0009497:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000949b:	e8 6c 13 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c00094a0:	83 c4 10             	add    esp,0x10
c00094a3:	83 c4 0c             	add    esp,0xc
c00094a6:	c3                   	ret    

c00094a7 <KeGetFileFromDescriptor(int)>:
c00094a7:	53                   	push   ebx
c00094a8:	83 ec 08             	sub    esp,0x8
c00094ab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094af:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094b5:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094bb:	7f 2c                	jg     c00094e9 <KeGetFileFromDescriptor(int)+0x42>
c00094bd:	83 ec 0c             	sub    esp,0xc
c00094c0:	68 98 5f 02 c0       	push   0xc0025f98
c00094c5:	e8 02 59 01 00       	call   c001edcc <LinkedList<UnixFile>::getFirstElement()>
c00094ca:	83 c4 10             	add    esp,0x10
c00094cd:	85 c0                	test   eax,eax
c00094cf:	75 04                	jne    c00094d5 <KeGetFileFromDescriptor(int)+0x2e>
c00094d1:	31 c0                	xor    eax,eax
c00094d3:	eb 6e                	jmp    c0009543 <KeGetFileFromDescriptor(int)+0x9c>
c00094d5:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094d8:	74 69                	je     c0009543 <KeGetFileFromDescriptor(int)+0x9c>
c00094da:	52                   	push   edx
c00094db:	52                   	push   edx
c00094dc:	50                   	push   eax
c00094dd:	68 98 5f 02 c0       	push   0xc0025f98
c00094e2:	e8 8f 59 01 00       	call   c001ee76 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094e7:	eb e1                	jmp    c00094ca <KeGetFileFromDescriptor(int)+0x23>
c00094e9:	a1 8c 5f 02 c0       	mov    eax,ds:0xc0025f8c
c00094ee:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00094f4:	74 4d                	je     c0009543 <KeGetFileFromDescriptor(int)+0x9c>
c00094f6:	a1 90 5f 02 c0       	mov    eax,ds:0xc0025f90
c00094fb:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0009501:	74 40                	je     c0009543 <KeGetFileFromDescriptor(int)+0x9c>
c0009503:	a1 88 5f 02 c0       	mov    eax,ds:0xc0025f88
c0009508:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000950e:	74 33                	je     c0009543 <KeGetFileFromDescriptor(int)+0x9c>
c0009510:	a1 84 5f 02 c0       	mov    eax,ds:0xc0025f84
c0009515:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000951b:	74 26                	je     c0009543 <KeGetFileFromDescriptor(int)+0x9c>
c000951d:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0009523:	83 f8 08             	cmp    eax,0x8
c0009526:	77 09                	ja     c0009531 <KeGetFileFromDescriptor(int)+0x8a>
c0009528:	8b 04 85 60 5f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda0a0]
c000952f:	eb 12                	jmp    c0009543 <KeGetFileFromDescriptor(int)+0x9c>
c0009531:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0009537:	83 fb 08             	cmp    ebx,0x8
c000953a:	77 95                	ja     c00094d1 <KeGetFileFromDescriptor(int)+0x2a>
c000953c:	8b 04 9d 20 5f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffda0e0]
c0009543:	83 c4 08             	add    esp,0x8
c0009546:	5b                   	pop    ebx
c0009547:	c3                   	ret    

c0009548 <__static_initialization_and_destruction_0(int, int)>:
c0009548:	83 ec 0c             	sub    esp,0xc
c000954b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0009550:	75 34                	jne    c0009586 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009552:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000955a:	75 2a                	jne    c0009586 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000955c:	83 ec 0c             	sub    esp,0xc
c000955f:	68 98 5f 02 c0       	push   0xc0025f98
c0009564:	e8 4d 57 01 00       	call   c001ecb6 <LinkedList<UnixFile>::LinkedList()>
c0009569:	83 c4 10             	add    esp,0x10
c000956c:	83 ec 04             	sub    esp,0x4
c000956f:	68 e4 27 02 c0       	push   0xc00227e4
c0009574:	68 98 5f 02 c0       	push   0xc0025f98
c0009579:	68 b4 ec 01 c0       	push   0xc001ecb4
c000957e:	e8 39 12 00 00       	call   c000a7bc <__cxa_atexit>
c0009583:	83 c4 10             	add    esp,0x10
c0009586:	90                   	nop
c0009587:	83 c4 0c             	add    esp,0xc
c000958a:	c3                   	ret    

c000958b <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000958b:	83 ec 0c             	sub    esp,0xc
c000958e:	83 ec 08             	sub    esp,0x8
c0009591:	68 ff ff 00 00       	push   0xffff
c0009596:	6a 01                	push   0x1
c0009598:	e8 ab ff ff ff       	call   c0009548 <__static_initialization_and_destruction_0(int, int)>
c000959d:	83 c4 10             	add    esp,0x10
c00095a0:	83 c4 0c             	add    esp,0xc
c00095a3:	c3                   	ret    

c00095a4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00095a4:	53                   	push   ebx
c00095a5:	8b 15 68 28 02 c0    	mov    edx,DWORD PTR ds:0xc0022868
c00095ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095b3:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095b9:	89 d8                	mov    eax,ebx
c00095bb:	d1 e8                	shr    eax,1
c00095bd:	01 d0                	add    eax,edx
c00095bf:	80 e3 01             	and    bl,0x1
c00095c2:	8a 10                	mov    dl,BYTE PTR [eax]
c00095c4:	75 09                	jne    c00095cf <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095c6:	83 e2 f0             	and    edx,0xfffffff0
c00095c9:	09 ca                	or     edx,ecx
c00095cb:	88 10                	mov    BYTE PTR [eax],dl
c00095cd:	5b                   	pop    ebx
c00095ce:	c3                   	ret    
c00095cf:	83 e2 0f             	and    edx,0xf
c00095d2:	0f b6 c9             	movzx  ecx,cl
c00095d5:	c1 e1 04             	shl    ecx,0x4
c00095d8:	09 ca                	or     edx,ecx
c00095da:	88 10                	mov    BYTE PTR [eax],dl
c00095dc:	5b                   	pop    ebx
c00095dd:	c3                   	ret    

c00095de <Virt::getPageState(unsigned long)>:
c00095de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095e2:	8b 0d 68 28 02 c0    	mov    ecx,DWORD PTR ds:0xc0022868
c00095e8:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00095ee:	89 d0                	mov    eax,edx
c00095f0:	d1 e8                	shr    eax,1
c00095f2:	80 e2 01             	and    dl,0x1
c00095f5:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00095f8:	74 03                	je     c00095fd <Virt::getPageState(unsigned long)+0x1f>
c00095fa:	c1 e8 04             	shr    eax,0x4
c00095fd:	83 e0 0f             	and    eax,0xf
c0009600:	c3                   	ret    

c0009601 <Virt::allocateKernelVirtualPages(int)>:
c0009601:	55                   	push   ebp
c0009602:	31 ed                	xor    ebp,ebp
c0009604:	57                   	push   edi
c0009605:	31 ff                	xor    edi,edi
c0009607:	56                   	push   esi
c0009608:	53                   	push   ebx
c0009609:	31 db                	xor    ebx,ebx
c000960b:	83 ec 0c             	sub    esp,0xc
c000960e:	8b 35 64 28 02 c0    	mov    esi,DWORD PTR ds:0xc0022864
c0009614:	56                   	push   esi
c0009615:	e8 c4 ff ff ff       	call   c00095de <Virt::getPageState(unsigned long)>
c000961a:	5a                   	pop    edx
c000961b:	84 c0                	test   al,al
c000961d:	75 41                	jne    c0009660 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000961f:	85 db                	test   ebx,ebx
c0009621:	75 02                	jne    c0009625 <Virt::allocateKernelVirtualPages(int)+0x24>
c0009623:	89 f5                	mov    ebp,esi
c0009625:	83 c3 01             	add    ebx,0x1
c0009628:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c000962c:	74 5f                	je     c000968d <Virt::allocateKernelVirtualPages(int)+0x8c>
c000962e:	83 c6 01             	add    esi,0x1
c0009631:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009637:	76 34                	jbe    c000966d <Virt::allocateKernelVirtualPages(int)+0x6c>
c0009639:	c7 05 64 28 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0022864,0xc8000
c0009643:	f7 c7 01 00 00 00    	test   edi,0x1
c0009649:	75 2a                	jne    c0009675 <Virt::allocateKernelVirtualPages(int)+0x74>
c000964b:	be 00 80 0c 00       	mov    esi,0xc8000
c0009650:	bf 01 00 00 00       	mov    edi,0x1
c0009655:	56                   	push   esi
c0009656:	e8 83 ff ff ff       	call   c00095de <Virt::getPageState(unsigned long)>
c000965b:	5a                   	pop    edx
c000965c:	84 c0                	test   al,al
c000965e:	74 bf                	je     c000961f <Virt::allocateKernelVirtualPages(int)+0x1e>
c0009660:	31 db                	xor    ebx,ebx
c0009662:	83 c6 01             	add    esi,0x1
c0009665:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c000966b:	77 cc                	ja     c0009639 <Virt::allocateKernelVirtualPages(int)+0x38>
c000966d:	89 35 64 28 02 c0    	mov    DWORD PTR ds:0xc0022864,esi
c0009673:	eb 9f                	jmp    c0009614 <Virt::allocateKernelVirtualPages(int)+0x13>
c0009675:	83 ec 0c             	sub    esp,0xc
c0009678:	68 4c 02 02 c0       	push   0xc002024c
c000967d:	e8 19 75 00 00       	call   c0010b9b <KePanic(char const*)>
c0009682:	8b 35 64 28 02 c0    	mov    esi,DWORD PTR ds:0xc0022864
c0009688:	83 c4 10             	add    esp,0x10
c000968b:	eb 87                	jmp    c0009614 <Virt::allocateKernelVirtualPages(int)+0x13>
c000968d:	89 2d 64 28 02 c0    	mov    DWORD PTR ds:0xc0022864,ebp
c0009693:	83 fb 01             	cmp    ebx,0x1
c0009696:	74 6f                	je     c0009707 <Virt::allocateKernelVirtualPages(int)+0x106>
c0009698:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000969c:	85 c9                	test   ecx,ecx
c000969e:	74 49                	je     c00096e9 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096a0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096a4:	89 e8                	mov    eax,ebp
c00096a6:	31 db                	xor    ebx,ebx
c00096a8:	8d 79 ff             	lea    edi,[ecx-0x1]
c00096ab:	eb 18                	jmp    c00096c5 <Virt::allocateKernelVirtualPages(int)+0xc4>
c00096ad:	6a 01                	push   0x1
c00096af:	83 c3 01             	add    ebx,0x1
c00096b2:	50                   	push   eax
c00096b3:	e8 ec fe ff ff       	call   c00095a4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096b8:	58                   	pop    eax
c00096b9:	5a                   	pop    edx
c00096ba:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096be:	74 29                	je     c00096e9 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096c0:	a1 64 28 02 c0       	mov    eax,ds:0xc0022864
c00096c5:	8d 50 01             	lea    edx,[eax+0x1]
c00096c8:	85 db                	test   ebx,ebx
c00096ca:	89 15 64 28 02 c0    	mov    DWORD PTR ds:0xc0022864,edx
c00096d0:	74 24                	je     c00096f6 <Virt::allocateKernelVirtualPages(int)+0xf5>
c00096d2:	39 df                	cmp    edi,ebx
c00096d4:	75 d7                	jne    c00096ad <Virt::allocateKernelVirtualPages(int)+0xac>
c00096d6:	6a 03                	push   0x3
c00096d8:	83 c3 01             	add    ebx,0x1
c00096db:	50                   	push   eax
c00096dc:	e8 c3 fe ff ff       	call   c00095a4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096e1:	59                   	pop    ecx
c00096e2:	5e                   	pop    esi
c00096e3:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096e7:	75 d7                	jne    c00096c0 <Virt::allocateKernelVirtualPages(int)+0xbf>
c00096e9:	83 c4 0c             	add    esp,0xc
c00096ec:	89 e8                	mov    eax,ebp
c00096ee:	5b                   	pop    ebx
c00096ef:	c1 e0 0c             	shl    eax,0xc
c00096f2:	5e                   	pop    esi
c00096f3:	5f                   	pop    edi
c00096f4:	5d                   	pop    ebp
c00096f5:	c3                   	ret    
c00096f6:	6a 02                	push   0x2
c00096f8:	bb 01 00 00 00       	mov    ebx,0x1
c00096fd:	50                   	push   eax
c00096fe:	e8 a1 fe ff ff       	call   c00095a4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009703:	58                   	pop    eax
c0009704:	5a                   	pop    edx
c0009705:	eb b9                	jmp    c00096c0 <Virt::allocateKernelVirtualPages(int)+0xbf>
c0009707:	6a 04                	push   0x4
c0009709:	8d 45 01             	lea    eax,[ebp+0x1]
c000970c:	55                   	push   ebp
c000970d:	a3 64 28 02 c0       	mov    ds:0xc0022864,eax
c0009712:	e8 8d fe ff ff       	call   c00095a4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009717:	5b                   	pop    ebx
c0009718:	89 e8                	mov    eax,ebp
c000971a:	5e                   	pop    esi
c000971b:	c1 e0 0c             	shl    eax,0xc
c000971e:	83 c4 0c             	add    esp,0xc
c0009721:	5b                   	pop    ebx
c0009722:	5e                   	pop    esi
c0009723:	5f                   	pop    edi
c0009724:	5d                   	pop    ebp
c0009725:	c3                   	ret    

c0009726 <Virt::freeSwapfilePage(unsigned long)>:
c0009726:	53                   	push   ebx
c0009727:	8b 15 ac 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025fac
c000972d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009731:	b8 01 00 00 00       	mov    eax,0x1
c0009736:	89 cb                	mov    ebx,ecx
c0009738:	d3 e0                	shl    eax,cl
c000973a:	c1 eb 05             	shr    ebx,0x5
c000973d:	f7 d0                	not    eax
c000973f:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c0009742:	21 c1                	and    ecx,eax
c0009744:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009747:	5b                   	pop    ebx
c0009748:	c3                   	ret    

c0009749 <Virt::swapIDToSector(unsigned long)>:
c0009749:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000974d:	8b 15 6c 28 02 c0    	mov    edx,DWORD PTR ds:0xc002286c
c0009753:	8b 0d 74 28 02 c0    	mov    ecx,DWORD PTR ds:0xc0022874
c0009759:	0f af c2             	imul   eax,edx
c000975c:	01 c8                	add    eax,ecx
c000975e:	c3                   	ret    

c000975f <Virt::allocateSwapfilePage()>:
c000975f:	55                   	push   ebp
c0009760:	31 d2                	xor    edx,edx
c0009762:	57                   	push   edi
c0009763:	56                   	push   esi
c0009764:	53                   	push   ebx
c0009765:	83 ec 0c             	sub    esp,0xc
c0009768:	8b 0d 6c 28 02 c0    	mov    ecx,DWORD PTR ds:0xc002286c
c000976e:	a1 70 28 02 c0       	mov    eax,ds:0xc0022870
c0009773:	f7 f1                	div    ecx
c0009775:	39 0d 70 28 02 c0    	cmp    DWORD PTR ds:0xc0022870,ecx
c000977b:	72 2f                	jb     c00097ac <Virt::allocateSwapfilePage()+0x4d>
c000977d:	8b 35 ac 5f 02 c0    	mov    esi,DWORD PTR ds:0xc0025fac
c0009783:	8b 16                	mov    edx,DWORD PTR [esi]
c0009785:	f6 c2 01             	test   dl,0x1
c0009788:	74 3e                	je     c00097c8 <Virt::allocateSwapfilePage()+0x69>
c000978a:	31 c9                	xor    ecx,ecx
c000978c:	bf 01 00 00 00       	mov    edi,0x1
c0009791:	eb 12                	jmp    c00097a5 <Virt::allocateSwapfilePage()+0x46>
c0009793:	89 fd                	mov    ebp,edi
c0009795:	89 ca                	mov    edx,ecx
c0009797:	d3 e5                	shl    ebp,cl
c0009799:	c1 ea 05             	shr    edx,0x5
c000979c:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000979f:	8b 13                	mov    edx,DWORD PTR [ebx]
c00097a1:	85 ea                	test   edx,ebp
c00097a3:	74 2c                	je     c00097d1 <Virt::allocateSwapfilePage()+0x72>
c00097a5:	83 c1 01             	add    ecx,0x1
c00097a8:	39 c8                	cmp    eax,ecx
c00097aa:	77 e7                	ja     c0009793 <Virt::allocateSwapfilePage()+0x34>
c00097ac:	83 ec 0c             	sub    esp,0xc
c00097af:	68 e0 04 02 c0       	push   0xc00204e0
c00097b4:	e8 e2 73 00 00       	call   c0010b9b <KePanic(char const*)>
c00097b9:	83 c4 10             	add    esp,0x10
c00097bc:	31 c9                	xor    ecx,ecx
c00097be:	83 c4 0c             	add    esp,0xc
c00097c1:	89 c8                	mov    eax,ecx
c00097c3:	5b                   	pop    ebx
c00097c4:	5e                   	pop    esi
c00097c5:	5f                   	pop    edi
c00097c6:	5d                   	pop    ebp
c00097c7:	c3                   	ret    
c00097c8:	89 f3                	mov    ebx,esi
c00097ca:	bd 01 00 00 00       	mov    ebp,0x1
c00097cf:	31 c9                	xor    ecx,ecx
c00097d1:	09 ea                	or     edx,ebp
c00097d3:	89 c8                	mov    eax,ecx
c00097d5:	89 13                	mov    DWORD PTR [ebx],edx
c00097d7:	83 c4 0c             	add    esp,0xc
c00097da:	5b                   	pop    ebx
c00097db:	5e                   	pop    esi
c00097dc:	5f                   	pop    edi
c00097dd:	5d                   	pop    ebp
c00097de:	c3                   	ret    

c00097df <Virt::virtualMemorySetup()>:
c00097df:	53                   	push   ebx
c00097e0:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097e5:	6a 0f                	push   0xf
c00097e7:	53                   	push   ebx
c00097e8:	83 c3 01             	add    ebx,0x1
c00097eb:	e8 b4 fd ff ff       	call   c00095a4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097f0:	58                   	pop    eax
c00097f1:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097f7:	5a                   	pop    edx
c00097f8:	75 eb                	jne    c00097e5 <Virt::virtualMemorySetup()+0x6>
c00097fa:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097ff:	6a 00                	push   0x0
c0009801:	53                   	push   ebx
c0009802:	83 c3 01             	add    ebx,0x1
c0009805:	e8 9a fd ff ff       	call   c00095a4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000980a:	59                   	pop    ecx
c000980b:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009811:	58                   	pop    eax
c0009812:	75 eb                	jne    c00097ff <Virt::virtualMemorySetup()+0x20>
c0009814:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009819:	6a 0f                	push   0xf
c000981b:	53                   	push   ebx
c000981c:	83 c3 01             	add    ebx,0x1
c000981f:	e8 80 fd ff ff       	call   c00095a4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009824:	58                   	pop    eax
c0009825:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000982b:	5a                   	pop    edx
c000982c:	75 eb                	jne    c0009819 <Virt::virtualMemorySetup()+0x3a>
c000982e:	5b                   	pop    ebx
c000982f:	c3                   	ret    

c0009830 <Virt::setupPageSwapping(int)>:
c0009830:	53                   	push   ebx
c0009831:	83 ec 0c             	sub    esp,0xc
c0009834:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009838:	a1 28 84 02 c0       	mov    eax,ds:0xc0028428
c000983d:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0009843:	8b 10                	mov    edx,DWORD PTR [eax]
c0009845:	53                   	push   ebx
c0009846:	c1 e3 0b             	shl    ebx,0xb
c0009849:	68 f7 04 02 c0       	push   0xc00204f7
c000984e:	50                   	push   eax
c000984f:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0009852:	89 1d 70 28 02 c0    	mov    DWORD PTR ds:0xc0022870,ebx
c0009858:	c6 05 78 28 02 c0 43 	mov    BYTE PTR ds:0xc0022878,0x43
c000985f:	c1 eb 08             	shr    ebx,0x8
c0009862:	a3 74 28 02 c0       	mov    ds:0xc0022874,eax
c0009867:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000986a:	c7 05 6c 28 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002286c,0x8
c0009874:	e8 35 e2 ff ff       	call   c0007aae <malloc>
c0009879:	83 c4 0c             	add    esp,0xc
c000987c:	89 c1                	mov    ecx,eax
c000987e:	a3 ac 5f 02 c0       	mov    ds:0xc0025fac,eax
c0009883:	31 d2                	xor    edx,edx
c0009885:	a1 70 28 02 c0       	mov    eax,ds:0xc0022870
c000988a:	f7 35 6c 28 02 c0    	div    DWORD PTR ds:0xc002286c
c0009890:	c1 e8 05             	shr    eax,0x5
c0009893:	50                   	push   eax
c0009894:	6a 00                	push   0x0
c0009896:	51                   	push   ecx
c0009897:	e8 54 6c ff ff       	call   c00004f0 <memset>
c000989c:	83 c4 18             	add    esp,0x18
c000989f:	5b                   	pop    ebx
c00098a0:	c3                   	ret    
c00098a1:	90                   	nop

c00098a2 <VAS::setCPUSpecific(unsigned long)>:
c00098a2:	c3                   	ret    
c00098a3:	90                   	nop

c00098a4 <VAS::VAS(VAS*)>:
c00098a4:	83 ec 0c             	sub    esp,0xc
c00098a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098ab:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00098b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098b6:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098bd:	83 ec 0c             	sub    esp,0xc
c00098c0:	68 6c 02 02 c0       	push   0xc002026c
c00098c5:	e8 d1 72 00 00       	call   c0010b9b <KePanic(char const*)>
c00098ca:	83 c4 10             	add    esp,0x10
c00098cd:	90                   	nop
c00098ce:	83 c4 0c             	add    esp,0xc
c00098d1:	c3                   	ret    

c00098d2 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098d6:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098db:	89 c2                	mov    edx,eax
c00098dd:	c1 e8 0a             	shr    eax,0xa
c00098e0:	c1 ea 16             	shr    edx,0x16
c00098e3:	83 f9 01             	cmp    ecx,0x1
c00098e6:	19 c9                	sbb    ecx,ecx
c00098e8:	c1 e2 0c             	shl    edx,0xc
c00098eb:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00098f1:	25 fc 0f 00 00       	and    eax,0xffc
c00098f6:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00098fd:	01 d0                	add    eax,edx
c00098ff:	c3                   	ret    

c0009900 <VAS::getPageTableEntry(unsigned long)>:
c0009900:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009904:	89 ca                	mov    edx,ecx
c0009906:	c1 e9 0a             	shr    ecx,0xa
c0009909:	c1 ea 16             	shr    edx,0x16
c000990c:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009912:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009918:	c1 e0 0c             	shl    eax,0xc
c000991b:	8d 04 08             	lea    eax,[eax+ecx*1]
c000991e:	c3                   	ret    

c000991f <Virt::freeKernelVirtualPages(unsigned long)>:
c000991f:	55                   	push   ebp
c0009920:	57                   	push   edi
c0009921:	bf 01 00 00 00       	mov    edi,0x1
c0009926:	56                   	push   esi
c0009927:	53                   	push   ebx
c0009928:	83 ec 1c             	sub    esp,0x1c
c000992b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000992f:	c1 ee 0c             	shr    esi,0xc
c0009932:	eb 48                	jmp    c000997c <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0009934:	83 ec 08             	sub    esp,0x8
c0009937:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c000993c:	55                   	push   ebp
c000993d:	50                   	push   eax
c000993e:	e8 bd ff ff ff       	call   c0009900 <VAS::getPageTableEntry(unsigned long)>
c0009943:	83 c4 10             	add    esp,0x10
c0009946:	8b 10                	mov    edx,DWORD PTR [eax]
c0009948:	f6 c6 04             	test   dh,0x4
c000994b:	75 70                	jne    c00099bd <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c000994d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009953:	83 fb 04             	cmp    ebx,0x4
c0009956:	0f 84 8a 00 00 00    	je     c00099e6 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000995c:	83 fb 02             	cmp    ebx,0x2
c000995f:	0f 84 9a 00 00 00    	je     c00099ff <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0009965:	83 fb 03             	cmp    ebx,0x3
c0009968:	0f 84 be 00 00 00    	je     c0009a2c <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c000996e:	83 fb 01             	cmp    ebx,0x1
c0009971:	0f 84 a2 00 00 00    	je     c0009a19 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009977:	83 c6 01             	add    esi,0x1
c000997a:	31 ff                	xor    edi,edi
c000997c:	56                   	push   esi
c000997d:	89 f5                	mov    ebp,esi
c000997f:	e8 5a fc ff ff       	call   c00095de <Virt::getPageState(unsigned long)>
c0009984:	c1 e5 0c             	shl    ebp,0xc
c0009987:	0f b6 d8             	movzx  ebx,al
c000998a:	5a                   	pop    edx
c000998b:	85 db                	test   ebx,ebx
c000998d:	75 a5                	jne    c0009934 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c000998f:	83 ec 0c             	sub    esp,0xc
c0009992:	68 0e 05 02 c0       	push   0xc002050e
c0009997:	e8 ff 71 00 00       	call   c0010b9b <KePanic(char const*)>
c000999c:	5a                   	pop    edx
c000999d:	59                   	pop    ecx
c000999e:	55                   	push   ebp
c000999f:	8b 2d b0 5f 02 c0    	mov    ebp,DWORD PTR ds:0xc0025fb0
c00099a5:	55                   	push   ebp
c00099a6:	e8 55 ff ff ff       	call   c0009900 <VAS::getPageTableEntry(unsigned long)>
c00099ab:	83 c4 10             	add    esp,0x10
c00099ae:	8b 10                	mov    edx,DWORD PTR [eax]
c00099b0:	f6 c6 04             	test   dh,0x4
c00099b3:	75 08                	jne    c00099bd <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00099b5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099bb:	eb ba                	jmp    c0009977 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00099bd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099c1:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00099c7:	83 ec 0c             	sub    esp,0xc
c00099ca:	52                   	push   edx
c00099cb:	e8 79 e3 ff ff       	call   c0007d49 <Phys::freePage(unsigned long)>
c00099d0:	83 c4 10             	add    esp,0x10
c00099d3:	83 fb 04             	cmp    ebx,0x4
c00099d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099da:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099e0:	0f 85 76 ff ff ff    	jne    c000995c <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00099e6:	83 e7 01             	and    edi,0x1
c00099e9:	75 46                	jne    c0009a31 <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00099eb:	c7 44 24 30 90 02 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020290
c00099f3:	83 c4 1c             	add    esp,0x1c
c00099f6:	5b                   	pop    ebx
c00099f7:	5e                   	pop    esi
c00099f8:	5f                   	pop    edi
c00099f9:	5d                   	pop    ebp
c00099fa:	e9 9c 71 00 00       	jmp    c0010b9b <KePanic(char const*)>
c00099ff:	83 e7 01             	and    edi,0x1
c0009a02:	75 15                	jne    c0009a19 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009a04:	83 ec 0c             	sub    esp,0xc
c0009a07:	68 2a 05 02 c0       	push   0xc002052a
c0009a0c:	e8 8a 71 00 00       	call   c0010b9b <KePanic(char const*)>
c0009a11:	83 c4 10             	add    esp,0x10
c0009a14:	e9 5e ff ff ff       	jmp    c0009977 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a19:	83 ec 08             	sub    esp,0x8
c0009a1c:	6a 00                	push   0x0
c0009a1e:	56                   	push   esi
c0009a1f:	e8 80 fb ff ff       	call   c00095a4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a24:	83 c4 10             	add    esp,0x10
c0009a27:	e9 4b ff ff ff       	jmp    c0009977 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a2c:	83 e7 01             	and    edi,0x1
c0009a2f:	75 16                	jne    c0009a47 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0009a31:	83 ec 08             	sub    esp,0x8
c0009a34:	6a 00                	push   0x0
c0009a36:	56                   	push   esi
c0009a37:	e8 68 fb ff ff       	call   c00095a4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a3c:	83 c4 10             	add    esp,0x10
c0009a3f:	83 c4 1c             	add    esp,0x1c
c0009a42:	5b                   	pop    ebx
c0009a43:	5e                   	pop    esi
c0009a44:	5f                   	pop    edi
c0009a45:	5d                   	pop    ebp
c0009a46:	c3                   	ret    
c0009a47:	c7 44 24 30 46 05 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020546
c0009a4f:	83 c4 1c             	add    esp,0x1c
c0009a52:	5b                   	pop    ebx
c0009a53:	5e                   	pop    esi
c0009a54:	5f                   	pop    edi
c0009a55:	5d                   	pop    ebp
c0009a56:	e9 40 71 00 00       	jmp    c0010b9b <KePanic(char const*)>
c0009a5b:	90                   	nop

c0009a5c <VAS::freeAllocatedPages(unsigned long)>:
c0009a5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a60:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a64:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a68:	74 09                	je     c0009a73 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a6a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a6e:	e9 ac fe ff ff       	jmp    c000991f <Virt::freeKernelVirtualPages(unsigned long)>
c0009a73:	c7 44 24 04 b4 02 02 c0 	mov    DWORD PTR [esp+0x4],0xc00202b4
c0009a7b:	e9 b9 0e 00 00       	jmp    c000a939 <Dbg::kprintf(char const*, ...)>

c0009a80 <VAS::virtualToPhysical(unsigned long)>:
c0009a80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a84:	50                   	push   eax
c0009a85:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a89:	52                   	push   edx
c0009a8a:	e8 71 fe ff ff       	call   c0009900 <VAS::getPageTableEntry(unsigned long)>
c0009a8f:	59                   	pop    ecx
c0009a90:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a92:	5a                   	pop    edx
c0009a93:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009a98:	c3                   	ret    
c0009a99:	90                   	nop

c0009a9a <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0009a9a:	55                   	push   ebp
c0009a9b:	57                   	push   edi
c0009a9c:	56                   	push   esi
c0009a9d:	53                   	push   ebx
c0009a9e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009aa2:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009aa6:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009aaa:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009aae:	85 db                	test   ebx,ebx
c0009ab0:	7e 24                	jle    c0009ad6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0009ab2:	c1 e3 0c             	shl    ebx,0xc
c0009ab5:	01 f3                	add    ebx,esi
c0009ab7:	56                   	push   esi
c0009ab8:	81 c6 00 10 00 00    	add    esi,0x1000
c0009abe:	55                   	push   ebp
c0009abf:	e8 3c fe ff ff       	call   c0009900 <VAS::getPageTableEntry(unsigned long)>
c0009ac4:	5a                   	pop    edx
c0009ac5:	59                   	pop    ecx
c0009ac6:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009ac8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009acc:	21 f9                	and    ecx,edi
c0009ace:	09 d1                	or     ecx,edx
c0009ad0:	39 f3                	cmp    ebx,esi
c0009ad2:	89 08                	mov    DWORD PTR [eax],ecx
c0009ad4:	75 e1                	jne    c0009ab7 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0009ad6:	5b                   	pop    ebx
c0009ad7:	5e                   	pop    esi
c0009ad8:	5f                   	pop    edi
c0009ad9:	5d                   	pop    ebp
c0009ada:	c3                   	ret    
c0009adb:	90                   	nop

c0009adc <VAS::VAS()>:
c0009adc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ae0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ae7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aeb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009af2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af6:	a3 b0 5f 02 c0       	mov    ds:0xc0025fb0,eax
c0009afb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aff:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009b03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b07:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009b0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b0e:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009b15:	ba 7d 40 02 c0       	mov    edx,0xc002407d
c0009b1a:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0009b1f:	29 c2                	sub    edx,eax
c0009b21:	89 d0                	mov    eax,edx
c0009b23:	05 ff 0f 00 00       	add    eax,0xfff
c0009b28:	c1 e8 0c             	shr    eax,0xc
c0009b2b:	89 c2                	mov    edx,eax
c0009b2d:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0009b32:	6a 04                	push   0x4
c0009b34:	6a ff                	push   0xffffffff
c0009b36:	52                   	push   edx
c0009b37:	50                   	push   eax
c0009b38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b3c:	e8 59 ff ff ff       	call   c0009a9a <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b41:	83 c4 14             	add    esp,0x14
c0009b44:	90                   	nop
c0009b45:	c3                   	ret    

c0009b46 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b46:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009b4b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b51:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b58:	75 01                	jne    c0009b5b <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b5a:	c3                   	ret    
c0009b5b:	68 80 00 00 00       	push   0x80
c0009b60:	6a ff                	push   0xffffffff
c0009b62:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b66:	50                   	push   eax
c0009b67:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b6b:	52                   	push   edx
c0009b6c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b70:	51                   	push   ecx
c0009b71:	e8 24 ff ff ff       	call   c0009a9a <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b76:	83 c4 14             	add    esp,0x14
c0009b79:	c3                   	ret    

c0009b7a <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b7a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b7e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b85:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b88:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b8d:	83 f8 01             	cmp    eax,0x1
c0009b90:	19 c0                	sbb    eax,eax
c0009b92:	83 ca 03             	or     edx,0x3
c0009b95:	83 e0 fc             	and    eax,0xfffffffc
c0009b98:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009b9f:	0f 20 d8             	mov    eax,cr3
c0009ba2:	0f 22 d8             	mov    cr3,eax
c0009ba5:	c3                   	ret    

c0009ba6 <VAS::~VAS()>:
c0009ba6:	83 ec 2c             	sub    esp,0x2c
c0009ba9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009bb1:	fa                   	cli    
c0009bb2:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0009bb7:	83 c0 01             	add    eax,0x1
c0009bba:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0009bbf:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009bc4:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bc6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009bc9:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bcf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009bd3:	6a 01                	push   0x1
c0009bd5:	50                   	push   eax
c0009bd6:	e8 9f ff ff ff       	call   c0009b7a <VAS::mapOtherVASIn(bool, VAS*)>
c0009bdb:	83 c4 0c             	add    esp,0xc
c0009bde:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009be6:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bee:	0f 8f d8 00 00 00    	jg     c0009ccc <VAS::~VAS()+0x126>
c0009bf4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009bf8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009bfb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009bff:	c1 e2 02             	shl    edx,0x2
c0009c02:	01 d0                	add    eax,edx
c0009c04:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c06:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c0e:	83 e0 01             	and    eax,0x1
c0009c11:	0f 84 ab 00 00 00    	je     c0009cc2 <VAS::~VAS()+0x11c>
c0009c17:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c1f:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c27:	7f 74                	jg     c0009c9d <VAS::~VAS()+0xf7>
c0009c29:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c2d:	c1 e0 0a             	shl    eax,0xa
c0009c30:	89 c2                	mov    edx,eax
c0009c32:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c36:	01 d0                	add    eax,edx
c0009c38:	c1 e0 0c             	shl    eax,0xc
c0009c3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c3f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c44:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c46:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c49:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c4f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c53:	6a 01                	push   0x1
c0009c55:	50                   	push   eax
c0009c56:	e8 77 fc ff ff       	call   c00098d2 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c5b:	83 c4 0c             	add    esp,0xc
c0009c5e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c66:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c68:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c70:	25 01 04 00 00       	and    eax,0x401
c0009c75:	3d 01 04 00 00       	cmp    eax,0x401
c0009c7a:	75 1a                	jne    c0009c96 <VAS::~VAS()+0xf0>
c0009c7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c80:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c85:	83 ec 0c             	sub    esp,0xc
c0009c88:	50                   	push   eax
c0009c89:	e8 bb e0 ff ff       	call   c0007d49 <Phys::freePage(unsigned long)>
c0009c8e:	83 c4 10             	add    esp,0x10
c0009c91:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009c96:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009c9b:	eb 82                	jmp    c0009c1f <VAS::~VAS()+0x79>
c0009c9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ca1:	25 00 04 00 00       	and    eax,0x400
c0009ca6:	74 1a                	je     c0009cc2 <VAS::~VAS()+0x11c>
c0009ca8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cac:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009cb1:	83 ec 0c             	sub    esp,0xc
c0009cb4:	50                   	push   eax
c0009cb5:	e8 8f e0 ff ff       	call   c0007d49 <Phys::freePage(unsigned long)>
c0009cba:	83 c4 10             	add    esp,0x10
c0009cbd:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cc2:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009cc7:	e9 1a ff ff ff       	jmp    c0009be6 <VAS::~VAS()+0x40>
c0009ccc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cd0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009cd3:	83 ec 0c             	sub    esp,0xc
c0009cd6:	50                   	push   eax
c0009cd7:	e8 43 fc ff ff       	call   c000991f <Virt::freeKernelVirtualPages(unsigned long)>
c0009cdc:	83 c4 10             	add    esp,0x10
c0009cdf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ce3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009ce6:	83 ec 0c             	sub    esp,0xc
c0009ce9:	50                   	push   eax
c0009cea:	e8 5a e0 ff ff       	call   c0007d49 <Phys::freePage(unsigned long)>
c0009cef:	83 c4 10             	add    esp,0x10
c0009cf2:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cf7:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0009cfc:	83 e8 01             	sub    eax,0x1
c0009cff:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0009d04:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0009d09:	85 c0                	test   eax,eax
c0009d0b:	75 01                	jne    c0009d0e <VAS::~VAS()+0x168>
c0009d0d:	fb                   	sti    
c0009d0e:	90                   	nop
c0009d0f:	83 c4 2c             	add    esp,0x2c
c0009d12:	c3                   	ret    
c0009d13:	90                   	nop

c0009d14 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009d14:	55                   	push   ebp
c0009d15:	57                   	push   edi
c0009d16:	56                   	push   esi
c0009d17:	53                   	push   ebx
c0009d18:	83 ec 1c             	sub    esp,0x1c
c0009d1b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009d1f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009d23:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d29:	77 08                	ja     c0009d33 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0009d2b:	0f 20 d8             	mov    eax,cr3
c0009d2e:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009d31:	75 49                	jne    c0009d7c <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c0009d33:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d37:	09 d8                	or     eax,ebx
c0009d39:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d3e:	75 59                	jne    c0009d99 <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c0009d40:	89 de                	mov    esi,ebx
c0009d42:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009d45:	c1 ee 16             	shr    esi,0x16
c0009d48:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d4f:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d53:	74 56                	je     c0009dab <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c0009d55:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d59:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009d5d:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d63:	c1 eb 0a             	shr    ebx,0xa
c0009d66:	c1 e6 0c             	shl    esi,0xc
c0009d69:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d6f:	09 d0                	or     eax,edx
c0009d71:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009d74:	83 c4 1c             	add    esp,0x1c
c0009d77:	5b                   	pop    ebx
c0009d78:	5e                   	pop    esi
c0009d79:	5f                   	pop    edi
c0009d7a:	5d                   	pop    ebp
c0009d7b:	c3                   	ret    
c0009d7c:	83 ec 0c             	sub    esp,0xc
c0009d7f:	68 d8 02 02 c0       	push   0xc00202d8
c0009d84:	e8 b0 0b 00 00       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0009d89:	83 c4 10             	add    esp,0x10
c0009d8c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d90:	09 d8                	or     eax,ebx
c0009d92:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d97:	74 a7                	je     c0009d40 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0009d99:	83 ec 0c             	sub    esp,0xc
c0009d9c:	68 40 03 02 c0       	push   0xc0020340
c0009da1:	e8 f5 6d 00 00       	call   c0010b9b <KePanic(char const*)>
c0009da6:	83 c4 10             	add    esp,0x10
c0009da9:	eb 95                	jmp    c0009d40 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0009dab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009daf:	e8 fe df ff ff       	call   c0007db2 <Phys::allocatePage()>
c0009db4:	83 ec 0c             	sub    esp,0xc
c0009db7:	89 c5                	mov    ebp,eax
c0009db9:	8b 0d b0 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fb0
c0009dbf:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009dc3:	6a 01                	push   0x1
c0009dc5:	e8 37 f8 ff ff       	call   c0009601 <Virt::allocateKernelVirtualPages(int)>
c0009dca:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009dd1:	6a 01                	push   0x1
c0009dd3:	50                   	push   eax
c0009dd4:	55                   	push   ebp
c0009dd5:	81 cd 07 04 00 00    	or     ebp,0x407
c0009ddb:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009ddf:	51                   	push   ecx
c0009de0:	e8 29 01 00 00       	call   c0009f0e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009de5:	83 c4 1c             	add    esp,0x1c
c0009de8:	68 00 10 00 00       	push   0x1000
c0009ded:	6a 00                	push   0x0
c0009def:	50                   	push   eax
c0009df0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009df4:	e8 f7 66 ff ff       	call   c00004f0 <memset>
c0009df9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009dfd:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e00:	e8 1a fb ff ff       	call   c000991f <Virt::freeKernelVirtualPages(unsigned long)>
c0009e05:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009e09:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009e0c:	83 c4 10             	add    esp,0x10
c0009e0f:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009e12:	e9 3e ff ff ff       	jmp    c0009d55 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0009e17:	90                   	nop

c0009e18 <VAS::allocatePages(int, int)>:
c0009e18:	55                   	push   ebp
c0009e19:	57                   	push   edi
c0009e1a:	56                   	push   esi
c0009e1b:	53                   	push   ebx
c0009e1c:	83 ec 1c             	sub    esp,0x1c
c0009e1f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009e23:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0009e27:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0009e2b:	75 71                	jne    c0009e9e <VAS::allocatePages(int, int)+0x86>
c0009e2d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e30:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e34:	85 c0                	test   eax,eax
c0009e36:	74 4d                	je     c0009e85 <VAS::allocatePages(int, int)+0x6d>
c0009e38:	89 dd                	mov    ebp,ebx
c0009e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e3e:	c1 e5 0c             	shl    ebp,0xc
c0009e41:	01 c5                	add    ebp,eax
c0009e43:	85 db                	test   ebx,ebx
c0009e45:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0009e48:	7e 29                	jle    c0009e73 <VAS::allocatePages(int, int)+0x5b>
c0009e4a:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009e4e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009e52:	81 cf 00 04 00 00    	or     edi,0x400
c0009e58:	e8 55 df ff ff       	call   c0007db2 <Phys::allocatePage()>
c0009e5d:	57                   	push   edi
c0009e5e:	53                   	push   ebx
c0009e5f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e65:	50                   	push   eax
c0009e66:	56                   	push   esi
c0009e67:	e8 a8 fe ff ff       	call   c0009d14 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e6c:	83 c4 10             	add    esp,0x10
c0009e6f:	39 dd                	cmp    ebp,ebx
c0009e71:	75 e5                	jne    c0009e58 <VAS::allocatePages(int, int)+0x40>
c0009e73:	0f 20 d8             	mov    eax,cr3
c0009e76:	0f 22 d8             	mov    cr3,eax
c0009e79:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e7d:	83 c4 1c             	add    esp,0x1c
c0009e80:	5b                   	pop    ebx
c0009e81:	5e                   	pop    esi
c0009e82:	5f                   	pop    edi
c0009e83:	5d                   	pop    ebp
c0009e84:	c3                   	ret    
c0009e85:	83 ec 0c             	sub    esp,0xc
c0009e88:	68 64 03 02 c0       	push   0xc0020364
c0009e8d:	e8 09 6d 00 00       	call   c0010b9b <KePanic(char const*)>
c0009e92:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e95:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009e99:	83 c4 10             	add    esp,0x10
c0009e9c:	eb 9a                	jmp    c0009e38 <VAS::allocatePages(int, int)+0x20>
c0009e9e:	83 ec 0c             	sub    esp,0xc
c0009ea1:	53                   	push   ebx
c0009ea2:	e8 5a f7 ff ff       	call   c0009601 <Virt::allocateKernelVirtualPages(int)>
c0009ea7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009eab:	83 c4 10             	add    esp,0x10
c0009eae:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009eb3:	77 37                	ja     c0009eec <VAS::allocatePages(int, int)+0xd4>
c0009eb5:	85 db                	test   ebx,ebx
c0009eb7:	7e ba                	jle    c0009e73 <VAS::allocatePages(int, int)+0x5b>
c0009eb9:	c1 e3 0c             	shl    ebx,0xc
c0009ebc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ec0:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009ec4:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c0009ec7:	81 cf 00 04 00 00    	or     edi,0x400
c0009ecd:	89 c3                	mov    ebx,eax
c0009ecf:	e8 de de ff ff       	call   c0007db2 <Phys::allocatePage()>
c0009ed4:	57                   	push   edi
c0009ed5:	53                   	push   ebx
c0009ed6:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009edc:	50                   	push   eax
c0009edd:	56                   	push   esi
c0009ede:	e8 31 fe ff ff       	call   c0009d14 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009ee3:	83 c4 10             	add    esp,0x10
c0009ee6:	39 dd                	cmp    ebp,ebx
c0009ee8:	75 e5                	jne    c0009ecf <VAS::allocatePages(int, int)+0xb7>
c0009eea:	eb 87                	jmp    c0009e73 <VAS::allocatePages(int, int)+0x5b>
c0009eec:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009ef1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009ef7:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009efe:	74 b5                	je     c0009eb5 <VAS::allocatePages(int, int)+0x9d>
c0009f00:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0009f04:	80 ce 01             	or     dh,0x1
c0009f07:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009f0b:	eb a8                	jmp    c0009eb5 <VAS::allocatePages(int, int)+0x9d>
c0009f0d:	90                   	nop

c0009f0e <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009f0e:	55                   	push   ebp
c0009f0f:	57                   	push   edi
c0009f10:	56                   	push   esi
c0009f11:	53                   	push   ebx
c0009f12:	83 ec 0c             	sub    esp,0xc
c0009f15:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0009f19:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009f1d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009f21:	85 db                	test   ebx,ebx
c0009f23:	7e 2f                	jle    c0009f54 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c0009f25:	c1 e3 0c             	shl    ebx,0xc
c0009f28:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009f2c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0009f30:	01 d3                	add    ebx,edx
c0009f32:	55                   	push   ebp
c0009f33:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0009f37:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f3b:	29 c2                	sub    edx,eax
c0009f3d:	01 f2                	add    edx,esi
c0009f3f:	52                   	push   edx
c0009f40:	56                   	push   esi
c0009f41:	81 c6 00 10 00 00    	add    esi,0x1000
c0009f47:	57                   	push   edi
c0009f48:	e8 c7 fd ff ff       	call   c0009d14 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f4d:	83 c4 10             	add    esp,0x10
c0009f50:	39 de                	cmp    esi,ebx
c0009f52:	75 de                	jne    c0009f32 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c0009f54:	0f 20 d8             	mov    eax,cr3
c0009f57:	0f 22 d8             	mov    cr3,eax
c0009f5a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f5e:	83 c4 0c             	add    esp,0xc
c0009f61:	5b                   	pop    ebx
c0009f62:	5e                   	pop    esi
c0009f63:	5f                   	pop    edi
c0009f64:	5d                   	pop    ebp
c0009f65:	c3                   	ret    

c0009f66 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009f66:	55                   	push   ebp
c0009f67:	57                   	push   edi
c0009f68:	56                   	push   esi
c0009f69:	53                   	push   ebx
c0009f6a:	83 ec 1c             	sub    esp,0x1c
c0009f6d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009f71:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0009f75:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009f79:	09 f8                	or     eax,edi
c0009f7b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009f7f:	a9 ff 0f 00 00       	test   eax,0xfff
c0009f84:	75 4f                	jne    c0009fd5 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0009f86:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009f8a:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0009f8d:	c1 eb 16             	shr    ebx,0x16
c0009f90:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c0009f97:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c0009f9b:	74 52                	je     c0009fef <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c0009f9d:	0f b6 f2             	movzx  esi,dl
c0009fa0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009fa4:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009fa8:	c1 e8 0a             	shr    eax,0xa
c0009fab:	83 fe 01             	cmp    esi,0x1
c0009fae:	19 d2                	sbb    edx,edx
c0009fb0:	c1 e3 0c             	shl    ebx,0xc
c0009fb3:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009fb9:	25 fc 0f 00 00       	and    eax,0xffc
c0009fbe:	01 d8                	add    eax,ebx
c0009fc0:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009fc4:	09 d9                	or     ecx,ebx
c0009fc6:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009fcd:	83 c4 1c             	add    esp,0x1c
c0009fd0:	5b                   	pop    ebx
c0009fd1:	5e                   	pop    esi
c0009fd2:	5f                   	pop    edi
c0009fd3:	5d                   	pop    ebp
c0009fd4:	c3                   	ret    
c0009fd5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009fd9:	83 ec 0c             	sub    esp,0xc
c0009fdc:	68 90 03 02 c0       	push   0xc0020390
c0009fe1:	e8 b5 6b 00 00       	call   c0010b9b <KePanic(char const*)>
c0009fe6:	83 c4 10             	add    esp,0x10
c0009fe9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009fed:	eb 97                	jmp    c0009f86 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c0009fef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ff3:	e8 ba dd ff ff       	call   c0007db2 <Phys::allocatePage()>
c0009ff8:	83 ec 0c             	sub    esp,0xc
c0009ffb:	89 c5                	mov    ebp,eax
c0009ffd:	8b 0d b0 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fb0
c000a003:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a007:	6a 01                	push   0x1
c000a009:	e8 f3 f5 ff ff       	call   c0009601 <Virt::allocateKernelVirtualPages(int)>
c000a00e:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a015:	6a 01                	push   0x1
c000a017:	50                   	push   eax
c000a018:	55                   	push   ebp
c000a019:	81 cd 07 04 00 00    	or     ebp,0x407
c000a01f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a023:	51                   	push   ecx
c000a024:	e8 e5 fe ff ff       	call   c0009f0e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a029:	83 c4 1c             	add    esp,0x1c
c000a02c:	68 00 10 00 00       	push   0x1000
c000a031:	6a 00                	push   0x0
c000a033:	50                   	push   eax
c000a034:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a038:	e8 b3 64 ff ff       	call   c00004f0 <memset>
c000a03d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a041:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a044:	e8 d6 f8 ff ff       	call   c000991f <Virt::freeKernelVirtualPages(unsigned long)>
c000a049:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a04c:	83 c4 10             	add    esp,0x10
c000a04f:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c000a052:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a056:	e9 42 ff ff ff       	jmp    c0009f9d <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c000a05b:	90                   	nop

c000a05c <VAS::VAS(bool)>:
c000a05c:	53                   	push   ebx
c000a05d:	83 ec 28             	sub    esp,0x28
c000a060:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a064:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a068:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a06c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a073:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a077:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a07e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a082:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a086:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a089:	e8 24 dd ff ff       	call   c0007db2 <Phys::allocatePage()>
c000a08e:	89 c2                	mov    edx,eax
c000a090:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a094:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a097:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000a09d:	83 ec 0c             	sub    esp,0xc
c000a0a0:	6a 01                	push   0x1
c000a0a2:	e8 5a f5 ff ff       	call   c0009601 <Virt::allocateKernelVirtualPages(int)>
c000a0a7:	83 c4 10             	add    esp,0x10
c000a0aa:	89 c2                	mov    edx,eax
c000a0ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0b0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0b3:	83 ec 0c             	sub    esp,0xc
c000a0b6:	6a 03                	push   0x3
c000a0b8:	6a 01                	push   0x1
c000a0ba:	52                   	push   edx
c000a0bb:	50                   	push   eax
c000a0bc:	53                   	push   ebx
c000a0bd:	e8 4c fe ff ff       	call   c0009f0e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0c2:	83 c4 20             	add    esp,0x20
c000a0c5:	89 c2                	mov    edx,eax
c000a0c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0cb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a0ce:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a0d6:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a0de:	7f 1d                	jg     c000a0fd <VAS::VAS(bool)+0xa1>
c000a0e0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0e4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a0e7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a0eb:	c1 e2 02             	shl    edx,0x2
c000a0ee:	01 d0                	add    eax,edx
c000a0f0:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a0f6:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a0fb:	eb d9                	jmp    c000a0d6 <VAS::VAS(bool)+0x7a>
c000a0fd:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a105:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a10d:	7f 7e                	jg     c000a18d <VAS::VAS(bool)+0x131>
c000a10f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a113:	2d 00 02 00 00       	sub    eax,0x200
c000a118:	c1 e0 0c             	shl    eax,0xc
c000a11b:	83 c8 05             	or     eax,0x5
c000a11e:	89 c2                	mov    edx,eax
c000a120:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a125:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a12b:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a131:	83 e0 10             	and    eax,0x10
c000a134:	0f b6 c0             	movzx  eax,al
c000a137:	85 c0                	test   eax,eax
c000a139:	74 07                	je     c000a142 <VAS::VAS(bool)+0xe6>
c000a13b:	b8 00 01 00 00       	mov    eax,0x100
c000a140:	eb 05                	jmp    c000a147 <VAS::VAS(bool)+0xeb>
c000a142:	b8 00 00 00 00       	mov    eax,0x0
c000a147:	09 d0                	or     eax,edx
c000a149:	89 c1                	mov    ecx,eax
c000a14b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a14f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a152:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a156:	c1 e2 02             	shl    edx,0x2
c000a159:	01 d0                	add    eax,edx
c000a15b:	89 ca                	mov    edx,ecx
c000a15d:	89 10                	mov    DWORD PTR [eax],edx
c000a15f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a163:	2d 40 03 00 00       	sub    eax,0x340
c000a168:	83 f8 7f             	cmp    eax,0x7f
c000a16b:	77 16                	ja     c000a183 <VAS::VAS(bool)+0x127>
c000a16d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a171:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a174:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a178:	c1 e2 02             	shl    edx,0x2
c000a17b:	01 d0                	add    eax,edx
c000a17d:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a183:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a188:	e9 78 ff ff ff       	jmp    c000a105 <VAS::VAS(bool)+0xa9>
c000a18d:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a192:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a198:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a19e:	83 e0 10             	and    eax,0x10
c000a1a1:	0f b6 c0             	movzx  eax,al
c000a1a4:	85 c0                	test   eax,eax
c000a1a6:	74 07                	je     c000a1af <VAS::VAS(bool)+0x153>
c000a1a8:	b8 03 41 00 00       	mov    eax,0x4103
c000a1ad:	eb 05                	jmp    c000a1b4 <VAS::VAS(bool)+0x158>
c000a1af:	b8 03 40 00 00       	mov    eax,0x4003
c000a1b4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a1b8:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a1bb:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a1c1:	89 02                	mov    DWORD PTR [edx],eax
c000a1c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1c7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a1ca:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a1cf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1d5:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1db:	83 e0 10             	and    eax,0x10
c000a1de:	0f b6 c0             	movzx  eax,al
c000a1e1:	85 c0                	test   eax,eax
c000a1e3:	74 07                	je     c000a1ec <VAS::VAS(bool)+0x190>
c000a1e5:	b8 00 01 00 00       	mov    eax,0x100
c000a1ea:	eb 05                	jmp    c000a1f1 <VAS::VAS(bool)+0x195>
c000a1ec:	b8 00 00 00 00       	mov    eax,0x0
c000a1f1:	09 c2                	or     edx,eax
c000a1f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1f7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a1fa:	05 fc 0f 00 00       	add    eax,0xffc
c000a1ff:	83 ca 03             	or     edx,0x3
c000a202:	89 10                	mov    DWORD PTR [eax],edx
c000a204:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a209:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a20f:	83 ec 0c             	sub    esp,0xc
c000a212:	50                   	push   eax
c000a213:	e8 be 20 00 00       	call   c000c2d6 <Device::getName()>
c000a218:	83 c4 10             	add    esp,0x10
c000a21b:	83 ec 08             	sub    esp,0x8
c000a21e:	68 60 05 02 c0       	push   0xc0020560
c000a223:	50                   	push   eax
c000a224:	e8 27 65 ff ff       	call   c0000750 <strcmp>
c000a229:	83 c4 10             	add    esp,0x10
c000a22c:	85 c0                	test   eax,eax
c000a22e:	0f 94 c0             	sete   al
c000a231:	0f b6 c0             	movzx  eax,al
c000a234:	85 c0                	test   eax,eax
c000a236:	74 68                	je     c000a2a0 <VAS::VAS(bool)+0x244>
c000a238:	fa                   	cli    
c000a239:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a23e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a244:	05 7c 09 00 00       	add    eax,0x97c
c000a249:	83 ec 0c             	sub    esp,0xc
c000a24c:	50                   	push   eax
c000a24d:	e8 54 d3 ff ff       	call   c00075a6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a252:	83 c4 10             	add    esp,0x10
c000a255:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a25a:	89 c3                	mov    ebx,eax
c000a25c:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a261:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a267:	05 7c 09 00 00       	add    eax,0x97c
c000a26c:	83 ec 0c             	sub    esp,0xc
c000a26f:	50                   	push   eax
c000a270:	e8 31 d3 ff ff       	call   c00075a6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a275:	83 c4 10             	add    esp,0x10
c000a278:	83 ec 08             	sub    esp,0x8
c000a27b:	50                   	push   eax
c000a27c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a280:	e8 7b f6 ff ff       	call   c0009900 <VAS::getPageTableEntry(unsigned long)>
c000a285:	83 c4 10             	add    esp,0x10
c000a288:	8b 00                	mov    eax,DWORD PTR [eax]
c000a28a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a28f:	6a 11                	push   0x11
c000a291:	53                   	push   ebx
c000a292:	50                   	push   eax
c000a293:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a297:	e8 78 fa ff ff       	call   c0009d14 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a29c:	83 c4 10             	add    esp,0x10
c000a29f:	fb                   	sti    
c000a2a0:	90                   	nop
c000a2a1:	83 c4 28             	add    esp,0x28
c000a2a4:	5b                   	pop    ebx
c000a2a5:	c3                   	ret    

c000a2a6 <VAS::evict(unsigned long)>:
c000a2a6:	55                   	push   ebp
c000a2a7:	57                   	push   edi
c000a2a8:	56                   	push   esi
c000a2a9:	53                   	push   ebx
c000a2aa:	83 ec 1c             	sub    esp,0x1c
c000a2ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2b1:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a2b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2b9:	e8 a1 f4 ff ff       	call   c000975f <Virt::allocateSwapfilePage()>
c000a2be:	89 c7                	mov    edi,eax
c000a2c0:	a1 6c 28 02 c0       	mov    eax,ds:0xc002286c
c000a2c5:	85 c0                	test   eax,eax
c000a2c7:	7e 40                	jle    c000a309 <VAS::evict(unsigned long)+0x63>
c000a2c9:	89 ee                	mov    esi,ebp
c000a2cb:	31 db                	xor    ebx,ebx
c000a2cd:	83 ec 0c             	sub    esp,0xc
c000a2d0:	57                   	push   edi
c000a2d1:	e8 73 f4 ff ff       	call   c0009749 <Virt::swapIDToSector(unsigned long)>
c000a2d6:	89 34 24             	mov    DWORD PTR [esp],esi
c000a2d9:	01 d8                	add    eax,ebx
c000a2db:	6a 01                	push   0x1
c000a2dd:	31 d2                	xor    edx,edx
c000a2df:	83 c3 01             	add    ebx,0x1
c000a2e2:	52                   	push   edx
c000a2e3:	81 c6 00 02 00 00    	add    esi,0x200
c000a2e9:	50                   	push   eax
c000a2ea:	0f be 05 78 28 02 c0 	movsx  eax,BYTE PTR ds:0xc0022878
c000a2f1:	8b 04 85 1c 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7ce4]
c000a2f8:	50                   	push   eax
c000a2f9:	e8 92 31 00 00       	call   c000d490 <LogicalDisk::write(unsigned long long, int, void*)>
c000a2fe:	83 c4 20             	add    esp,0x20
c000a301:	39 1d 6c 28 02 c0    	cmp    DWORD PTR ds:0xc002286c,ebx
c000a307:	7f c4                	jg     c000a2cd <VAS::evict(unsigned long)+0x27>
c000a309:	83 ec 08             	sub    esp,0x8
c000a30c:	c1 e7 0c             	shl    edi,0xc
c000a30f:	55                   	push   ebp
c000a310:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a314:	50                   	push   eax
c000a315:	e8 e6 f5 ff ff       	call   c0009900 <VAS::getPageTableEntry(unsigned long)>
c000a31a:	8b 10                	mov    edx,DWORD PTR [eax]
c000a31c:	89 d3                	mov    ebx,edx
c000a31e:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a324:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a32a:	09 d7                	or     edi,edx
c000a32c:	89 38                	mov    DWORD PTR [eax],edi
c000a32e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a331:	8b 15 a8 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025fa8
c000a337:	83 c2 01             	add    edx,0x1
c000a33a:	89 15 a8 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa8,edx
c000a340:	e8 04 da ff ff       	call   c0007d49 <Phys::freePage(unsigned long)>
c000a345:	0f 20 d8             	mov    eax,cr3
c000a348:	0f 22 d8             	mov    cr3,eax
c000a34b:	8b 0d a8 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fa8
c000a351:	51                   	push   ecx
c000a352:	55                   	push   ebp
c000a353:	53                   	push   ebx
c000a354:	68 b4 03 02 c0       	push   0xc00203b4
c000a359:	e8 db 05 00 00       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000a35e:	a1 a4 5f 02 c0       	mov    eax,ds:0xc0025fa4
c000a363:	c7 44 24 50 6e 05 02 c0 	mov    DWORD PTR [esp+0x50],0xc002056e
c000a36b:	8d 50 01             	lea    edx,[eax+0x1]
c000a36e:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a372:	89 15 a4 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa4,edx
c000a378:	83 c4 3c             	add    esp,0x3c
c000a37b:	5b                   	pop    ebx
c000a37c:	5e                   	pop    esi
c000a37d:	5f                   	pop    edi
c000a37e:	5d                   	pop    ebp
c000a37f:	e9 b5 05 00 00       	jmp    c000a939 <Dbg::kprintf(char const*, ...)>

c000a384 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a384:	55                   	push   ebp
c000a385:	57                   	push   edi
c000a386:	56                   	push   esi
c000a387:	53                   	push   ebx
c000a388:	81 ec 1c 10 00 00    	sub    esp,0x101c
c000a38e:	8b b4 24 34 10 00 00 	mov    esi,DWORD PTR [esp+0x1034]
c000a395:	89 f3                	mov    ebx,esi
c000a397:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a39d:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c000a3a3:	77 22                	ja     c000a3c7 <VAS::tryLoadBackOffDisk(unsigned long)+0x43>
c000a3a5:	83 ec 08             	sub    esp,0x8
c000a3a8:	56                   	push   esi
c000a3a9:	68 91 05 02 c0       	push   0xc0020591
c000a3ae:	e8 86 05 00 00       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000a3b3:	83 c4 10             	add    esp,0x10
c000a3b6:	85 db                	test   ebx,ebx
c000a3b8:	75 2a                	jne    c000a3e4 <VAS::tryLoadBackOffDisk(unsigned long)+0x60>
c000a3ba:	31 c0                	xor    eax,eax
c000a3bc:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a3c2:	5b                   	pop    ebx
c000a3c3:	5e                   	pop    esi
c000a3c4:	5f                   	pop    edi
c000a3c5:	5d                   	pop    ebp
c000a3c6:	c3                   	ret    
c000a3c7:	83 ec 0c             	sub    esp,0xc
c000a3ca:	68 7f 05 02 c0       	push   0xc002057f
c000a3cf:	e8 c7 67 00 00       	call   c0010b9b <KePanic(char const*)>
c000a3d4:	5f                   	pop    edi
c000a3d5:	5d                   	pop    ebp
c000a3d6:	56                   	push   esi
c000a3d7:	68 91 05 02 c0       	push   0xc0020591
c000a3dc:	e8 58 05 00 00       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000a3e1:	83 c4 10             	add    esp,0x10
c000a3e4:	83 ec 08             	sub    esp,0x8
c000a3e7:	53                   	push   ebx
c000a3e8:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c000a3ef:	51                   	push   ecx
c000a3f0:	e8 0b f5 ff ff       	call   c0009900 <VAS::getPageTableEntry(unsigned long)>
c000a3f5:	83 c4 10             	add    esp,0x10
c000a3f8:	89 c2                	mov    edx,eax
c000a3fa:	85 c0                	test   eax,eax
c000a3fc:	74 bc                	je     c000a3ba <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c000a3fe:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a400:	f7 c5 00 02 00 00    	test   ebp,0x200
c000a406:	0f 85 c0 00 00 00    	jne    c000a4cc <VAS::tryLoadBackOffDisk(unsigned long)+0x148>
c000a40c:	89 e8                	mov    eax,ebp
c000a40e:	25 01 04 00 00       	and    eax,0x401
c000a413:	3d 00 04 00 00       	cmp    eax,0x400
c000a418:	75 a0                	jne    c000a3ba <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c000a41a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a41e:	c1 ed 0c             	shr    ebp,0xc
c000a421:	e8 8c d9 ff ff       	call   c0007db2 <Phys::allocatePage()>
c000a426:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a42a:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000a42c:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000a432:	09 c1                	or     ecx,eax
c000a434:	81 c9 01 08 00 00    	or     ecx,0x801
c000a43a:	89 0a                	mov    DWORD PTR [edx],ecx
c000a43c:	8b 15 6c 28 02 c0    	mov    edx,DWORD PTR ds:0xc002286c
c000a442:	85 d2                	test   edx,edx
c000a444:	7e 40                	jle    c000a486 <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c000a446:	89 df                	mov    edi,ebx
c000a448:	31 f6                	xor    esi,esi
c000a44a:	83 ec 0c             	sub    esp,0xc
c000a44d:	55                   	push   ebp
c000a44e:	e8 f6 f2 ff ff       	call   c0009749 <Virt::swapIDToSector(unsigned long)>
c000a453:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a456:	01 f0                	add    eax,esi
c000a458:	6a 01                	push   0x1
c000a45a:	31 d2                	xor    edx,edx
c000a45c:	83 c6 01             	add    esi,0x1
c000a45f:	52                   	push   edx
c000a460:	81 c7 00 02 00 00    	add    edi,0x200
c000a466:	50                   	push   eax
c000a467:	0f be 05 78 28 02 c0 	movsx  eax,BYTE PTR ds:0xc0022878
c000a46e:	8b 04 85 1c 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7ce4]
c000a475:	50                   	push   eax
c000a476:	e8 a9 2f 00 00       	call   c000d424 <LogicalDisk::read(unsigned long long, int, void*)>
c000a47b:	83 c4 20             	add    esp,0x20
c000a47e:	39 35 6c 28 02 c0    	cmp    DWORD PTR ds:0xc002286c,esi
c000a484:	7f c4                	jg     c000a44a <VAS::tryLoadBackOffDisk(unsigned long)+0xc6>
c000a486:	83 ec 04             	sub    esp,0x4
c000a489:	a1 a8 5f 02 c0       	mov    eax,ds:0xc0025fa8
c000a48e:	83 e8 01             	sub    eax,0x1
c000a491:	50                   	push   eax
c000a492:	a3 a8 5f 02 c0       	mov    ds:0xc0025fa8,eax
c000a497:	53                   	push   ebx
c000a498:	68 a4 05 02 c0       	push   0xc00205a4
c000a49d:	e8 97 04 00 00       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000a4a2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a4a5:	e8 7c f2 ff ff       	call   c0009726 <Virt::freeSwapfilePage(unsigned long)>
c000a4aa:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c000a4af:	83 c4 10             	add    esp,0x10
c000a4b2:	83 e8 01             	sub    eax,0x1
c000a4b5:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c000a4ba:	85 c0                	test   eax,eax
c000a4bc:	75 01                	jne    c000a4bf <VAS::tryLoadBackOffDisk(unsigned long)+0x13b>
c000a4be:	fb                   	sti    
c000a4bf:	0f 20 d8             	mov    eax,cr3
c000a4c2:	0f 22 d8             	mov    cr3,eax
c000a4c5:	b0 01                	mov    al,0x1
c000a4c7:	e9 f0 fe ff ff       	jmp    c000a3bc <VAS::tryLoadBackOffDisk(unsigned long)+0x38>
c000a4cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a4d0:	bd 00 10 00 00       	mov    ebp,0x1000
c000a4d5:	83 ec 0c             	sub    esp,0xc
c000a4d8:	89 de                	mov    esi,ebx
c000a4da:	68 e4 03 02 c0       	push   0xc00203e4
c000a4df:	e8 55 04 00 00       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000a4e4:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000a4e8:	e8 c5 d8 ff ff       	call   c0007db2 <Phys::allocatePage()>
c000a4ed:	89 e9                	mov    ecx,ebp
c000a4ef:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a4f1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a4f5:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000a4f7:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c000a4fd:	09 c8                	or     eax,ecx
c000a4ff:	83 c8 02             	or     eax,0x2
c000a502:	89 02                	mov    DWORD PTR [edx],eax
c000a504:	0f 20 d8             	mov    eax,cr3
c000a507:	0f 22 d8             	mov    cr3,eax
c000a50a:	8d 74 24 20          	lea    esi,[esp+0x20]
c000a50e:	89 df                	mov    edi,ebx
c000a510:	89 e9                	mov    ecx,ebp
c000a512:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a514:	b0 01                	mov    al,0x1
c000a516:	83 c4 10             	add    esp,0x10
c000a519:	e9 9e fe ff ff       	jmp    c000a3bc <VAS::tryLoadBackOffDisk(unsigned long)+0x38>

c000a51e <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c000a51e:	55                   	push   ebp
c000a51f:	57                   	push   edi
c000a520:	56                   	push   esi
c000a521:	53                   	push   ebx
c000a522:	83 ec 28             	sub    esp,0x28
c000a525:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a529:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a52d:	50                   	push   eax
c000a52e:	e8 ce f0 ff ff       	call   c0009601 <Virt::allocateKernelVirtualPages(int)>
c000a533:	83 c4 0c             	add    esp,0xc
c000a536:	89 c5                	mov    ebp,eax
c000a538:	6a 07                	push   0x7
c000a53a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a53e:	52                   	push   edx
c000a53f:	56                   	push   esi
c000a540:	e8 d3 f8 ff ff       	call   c0009e18 <VAS::allocatePages(int, int)>
c000a545:	83 c4 10             	add    esp,0x10
c000a548:	89 c7                	mov    edi,eax
c000a54a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000a54e:	85 c9                	test   ecx,ecx
c000a550:	74 2f                	je     c000a581 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c000a552:	31 db                	xor    ebx,ebx
c000a554:	e8 59 d8 ff ff       	call   c0007db2 <Phys::allocatePage()>
c000a559:	83 c3 01             	add    ebx,0x1
c000a55c:	6a 03                	push   0x3
c000a55e:	55                   	push   ebp
c000a55f:	50                   	push   eax
c000a560:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a564:	56                   	push   esi
c000a565:	e8 aa f7 ff ff       	call   c0009d14 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a56a:	6a 07                	push   0x7
c000a56c:	57                   	push   edi
c000a56d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a571:	50                   	push   eax
c000a572:	56                   	push   esi
c000a573:	e8 9c f7 ff ff       	call   c0009d14 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a578:	83 c4 20             	add    esp,0x20
c000a57b:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c000a57f:	75 d3                	jne    c000a554 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c000a581:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a585:	89 28                	mov    DWORD PTR [eax],ebp
c000a587:	83 c4 1c             	add    esp,0x1c
c000a58a:	89 f8                	mov    eax,edi
c000a58c:	5b                   	pop    ebx
c000a58d:	5e                   	pop    esi
c000a58e:	5f                   	pop    edi
c000a58f:	5d                   	pop    ebp
c000a590:	c3                   	ret    
c000a591:	90                   	nop

c000a592 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c000a592:	53                   	push   ebx
c000a593:	83 ec 14             	sub    esp,0x14
c000a596:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000a59a:	68 04 04 02 c0       	push   0xc0020404
c000a59f:	e8 95 03 00 00       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000a5a4:	c7 04 24 64 04 02 c0 	mov    DWORD PTR [esp],0xc0020464
c000a5ab:	e8 89 03 00 00       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000a5b0:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a5b4:	83 c4 18             	add    esp,0x18
c000a5b7:	5b                   	pop    ebx
c000a5b8:	e9 62 f3 ff ff       	jmp    c000991f <Virt::freeKernelVirtualPages(unsigned long)>
c000a5bd:	90                   	nop

c000a5be <VAS::scanForEviction()>:
c000a5be:	57                   	push   edi
c000a5bf:	56                   	push   esi
c000a5c0:	31 f6                	xor    esi,esi
c000a5c2:	53                   	push   ebx
c000a5c3:	83 ec 10             	sub    esp,0x10
c000a5c6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000a5ca:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a5cd:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a5d3:	75 0e                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a5d5:	89 da                	mov    edx,ebx
c000a5d7:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a5da:	c1 ea 16             	shr    edx,0x16
c000a5dd:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a5e1:	74 57                	je     c000a63a <VAS::scanForEviction()+0x7c>
c000a5e3:	53                   	push   ebx
c000a5e4:	57                   	push   edi
c000a5e5:	e8 16 f3 ff ff       	call   c0009900 <VAS::getPageTableEntry(unsigned long)>
c000a5ea:	5a                   	pop    edx
c000a5eb:	8b 10                	mov    edx,DWORD PTR [eax]
c000a5ed:	59                   	pop    ecx
c000a5ee:	89 d1                	mov    ecx,edx
c000a5f0:	c1 e9 0c             	shr    ecx,0xc
c000a5f3:	74 10                	je     c000a605 <VAS::scanForEviction()+0x47>
c000a5f5:	89 d1                	mov    ecx,edx
c000a5f7:	81 e1 01 08 00 00    	and    ecx,0x801
c000a5fd:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a603:	74 40                	je     c000a645 <VAS::scanForEviction()+0x87>
c000a605:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a60b:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a611:	76 2d                	jbe    c000a640 <VAS::scanForEviction()+0x82>
c000a613:	83 c6 01             	add    esi,0x1
c000a616:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c000a61d:	83 fe 03             	cmp    esi,0x3
c000a620:	74 32                	je     c000a654 <VAS::scanForEviction()+0x96>
c000a622:	31 db                	xor    ebx,ebx
c000a624:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a62a:	75 b7                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a62c:	89 da                	mov    edx,ebx
c000a62e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a631:	c1 ea 16             	shr    edx,0x16
c000a634:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a638:	75 a9                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a63a:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a640:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c000a643:	eb 88                	jmp    c000a5cd <VAS::scanForEviction()+0xf>
c000a645:	f6 c2 20             	test   dl,0x20
c000a648:	74 13                	je     c000a65d <VAS::scanForEviction()+0x9f>
c000a64a:	83 e2 df             	and    edx,0xffffffdf
c000a64d:	89 10                	mov    DWORD PTR [eax],edx
c000a64f:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a652:	eb b1                	jmp    c000a605 <VAS::scanForEviction()+0x47>
c000a654:	83 c4 10             	add    esp,0x10
c000a657:	31 c0                	xor    eax,eax
c000a659:	5b                   	pop    ebx
c000a65a:	5e                   	pop    esi
c000a65b:	5f                   	pop    edi
c000a65c:	c3                   	ret    
c000a65d:	83 ec 08             	sub    esp,0x8
c000a660:	89 d0                	mov    eax,edx
c000a662:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a667:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a66b:	53                   	push   ebx
c000a66c:	68 b9 05 02 c0       	push   0xc00205b9
c000a671:	e8 c3 02 00 00       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000a676:	58                   	pop    eax
c000a677:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a67a:	5a                   	pop    edx
c000a67b:	51                   	push   ecx
c000a67c:	57                   	push   edi
c000a67d:	e8 24 fc ff ff       	call   c000a2a6 <VAS::evict(unsigned long)>
c000a682:	5b                   	pop    ebx
c000a683:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000a686:	5e                   	pop    esi
c000a687:	50                   	push   eax
c000a688:	68 cd 05 02 c0       	push   0xc00205cd
c000a68d:	e8 a7 02 00 00       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000a692:	58                   	pop    eax
c000a693:	5a                   	pop    edx
c000a694:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a698:	50                   	push   eax
c000a699:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a69d:	68 e0 05 02 c0       	push   0xc00205e0
c000a6a2:	e8 92 02 00 00       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000a6a7:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6aa:	83 c4 10             	add    esp,0x10
c000a6ad:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a6b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6b7:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c000a6ba:	83 c4 10             	add    esp,0x10
c000a6bd:	5b                   	pop    ebx
c000a6be:	5e                   	pop    esi
c000a6bf:	5f                   	pop    edi
c000a6c0:	c3                   	ret    

c000a6c1 <mapVASFirstTime>:
c000a6c1:	55                   	push   ebp
c000a6c2:	57                   	push   edi
c000a6c3:	56                   	push   esi
c000a6c4:	53                   	push   ebx
c000a6c5:	83 ec 0c             	sub    esp,0xc
c000a6c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a6cd:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a6d0:	83 fa 01             	cmp    edx,0x1
c000a6d3:	0f 84 cb 00 00 00    	je     c000a7a4 <mapVASFirstTime+0xe3>
c000a6d9:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a6dc:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a6df:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a6e4:	c1 e5 15             	shl    ebp,0x15
c000a6e7:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a6ec:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a6f2:	29 eb                	sub    ebx,ebp
c000a6f4:	29 ef                	sub    edi,ebp
c000a6f6:	e8 b7 d6 ff ff       	call   c0007db2 <Phys::allocatePage()>
c000a6fb:	83 ec 0c             	sub    esp,0xc
c000a6fe:	68 03 04 00 00       	push   0x403
c000a703:	6a 01                	push   0x1
c000a705:	53                   	push   ebx
c000a706:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a70c:	50                   	push   eax
c000a70d:	56                   	push   esi
c000a70e:	e8 fb f7 ff ff       	call   c0009f0e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a713:	83 c4 20             	add    esp,0x20
c000a716:	39 fb                	cmp    ebx,edi
c000a718:	75 dc                	jne    c000a6f6 <mapVASFirstTime+0x35>
c000a71a:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a71f:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a724:	29 eb                	sub    ebx,ebp
c000a726:	29 ef                	sub    edi,ebp
c000a728:	e8 85 d6 ff ff       	call   c0007db2 <Phys::allocatePage()>
c000a72d:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a731:	83 fa 01             	cmp    edx,0x1
c000a734:	19 d2                	sbb    edx,edx
c000a736:	83 ec 0c             	sub    esp,0xc
c000a739:	83 e2 04             	and    edx,0x4
c000a73c:	81 c2 03 04 00 00    	add    edx,0x403
c000a742:	52                   	push   edx
c000a743:	6a 01                	push   0x1
c000a745:	53                   	push   ebx
c000a746:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a74c:	50                   	push   eax
c000a74d:	56                   	push   esi
c000a74e:	e8 bb f7 ff ff       	call   c0009f0e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a753:	83 c4 20             	add    esp,0x20
c000a756:	39 df                	cmp    edi,ebx
c000a758:	75 ce                	jne    c000a728 <mapVASFirstTime+0x67>
c000a75a:	83 ec 0c             	sub    esp,0xc
c000a75d:	bb 7c 50 02 c0       	mov    ebx,0xc002507c
c000a762:	6a 04                	push   0x4
c000a764:	81 eb 00 40 02 c0    	sub    ebx,0xc0024000
c000a76a:	6a ff                	push   0xffffffff
c000a76c:	c1 eb 0c             	shr    ebx,0xc
c000a76f:	53                   	push   ebx
c000a770:	68 00 40 02 c0       	push   0xc0024000
c000a775:	56                   	push   esi
c000a776:	e8 1f f3 ff ff       	call   c0009a9a <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a77b:	83 c4 14             	add    esp,0x14
c000a77e:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c000a783:	6a 04                	push   0x4
c000a785:	6a ff                	push   0xffffffff
c000a787:	53                   	push   ebx
c000a788:	68 00 40 02 c0       	push   0xc0024000
c000a78d:	50                   	push   eax
c000a78e:	e8 07 f3 ff ff       	call   c0009a9a <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a793:	0f 20 d8             	mov    eax,cr3
c000a796:	0f 22 d8             	mov    cr3,eax
c000a799:	83 c4 20             	add    esp,0x20
c000a79c:	83 c4 0c             	add    esp,0xc
c000a79f:	5b                   	pop    ebx
c000a7a0:	5e                   	pop    esi
c000a7a1:	5f                   	pop    edi
c000a7a2:	5d                   	pop    ebp
c000a7a3:	c3                   	ret    
c000a7a4:	83 ec 0c             	sub    esp,0xc
c000a7a7:	68 ed 05 02 c0       	push   0xc00205ed
c000a7ac:	e8 88 01 00 00       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000a7b1:	83 c4 10             	add    esp,0x10
c000a7b4:	83 c4 0c             	add    esp,0xc
c000a7b7:	5b                   	pop    ebx
c000a7b8:	5e                   	pop    esi
c000a7b9:	5f                   	pop    edi
c000a7ba:	5d                   	pop    ebp
c000a7bb:	c3                   	ret    

c000a7bc <__cxa_atexit>:
c000a7bc:	31 c0                	xor    eax,eax
c000a7be:	c3                   	ret    

c000a7bf <__cxa_finalize>:
c000a7bf:	c3                   	ret    

c000a7c0 <__stack_chk_fail>:
c000a7c0:	55                   	push   ebp
c000a7c1:	89 e5                	mov    ebp,esp
c000a7c3:	83 ec 10             	sub    esp,0x10
c000a7c6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a7c9:	68 06 06 02 c0       	push   0xc0020606
c000a7ce:	e8 66 01 00 00       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000a7d3:	58                   	pop    eax
c000a7d4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a7d7:	5a                   	pop    edx
c000a7d8:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a7db:	68 06 06 02 c0       	push   0xc0020606
c000a7e0:	e8 54 01 00 00       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000a7e5:	c7 04 24 0e 06 02 c0 	mov    DWORD PTR [esp],0xc002060e
c000a7ec:	e8 aa 63 00 00       	call   c0010b9b <KePanic(char const*)>
c000a7f1:	83 c4 10             	add    esp,0x10
c000a7f4:	c9                   	leave  
c000a7f5:	c3                   	ret    

c000a7f6 <__cxa_pure_virtual>:
c000a7f6:	83 ec 18             	sub    esp,0x18
c000a7f9:	68 26 06 02 c0       	push   0xc0020626
c000a7fe:	e8 98 63 00 00       	call   c0010b9b <KePanic(char const*)>
c000a803:	83 c4 1c             	add    esp,0x1c
c000a806:	c3                   	ret    

c000a807 <operator new[](unsigned long)>:
c000a807:	e9 a2 d2 ff ff       	jmp    c0007aae <malloc>

c000a80c <operator delete(void*, unsigned long)>:
c000a80c:	e9 bd d2 ff ff       	jmp    c0007ace <rfree>

c000a811 <operator delete[](void*)>:
c000a811:	e9 b8 d2 ff ff       	jmp    c0007ace <rfree>

c000a816 <operator delete[](void*, unsigned long)>:
c000a816:	e9 b3 d2 ff ff       	jmp    c0007ace <rfree>

c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a81b:	55                   	push   ebp
c000a81c:	57                   	push   edi
c000a81d:	56                   	push   esi
c000a81e:	be 2f 01 02 c0       	mov    esi,0xc002012f
c000a823:	53                   	push   ebx
c000a824:	83 ec 20             	sub    esp,0x20
c000a827:	a0 2e 01 02 c0       	mov    al,ds:0xc002012e
c000a82c:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a830:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000a834:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a838:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a83c:	b8 10 00 00 00       	mov    eax,0x10
c000a841:	f7 c7 02 00 00 00    	test   edi,0x2
c000a847:	75 60                	jne    c000a8a9 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c000a849:	89 c1                	mov    ecx,eax
c000a84b:	c1 e9 02             	shr    ecx,0x2
c000a84e:	fc                   	cld    
c000a84f:	31 d2                	xor    edx,edx
c000a851:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a853:	a8 02                	test   al,0x2
c000a855:	74 0b                	je     c000a862 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c000a857:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a85a:	66 89 17             	mov    WORD PTR [edi],dx
c000a85d:	ba 02 00 00 00       	mov    edx,0x2
c000a862:	a8 01                	test   al,0x1
c000a864:	74 06                	je     c000a86c <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c000a866:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c000a869:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c000a86c:	89 ee                	mov    esi,ebp
c000a86e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a872:	eb 02                	jmp    c000a876 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c000a874:	89 c6                	mov    esi,eax
c000a876:	31 d2                	xor    edx,edx
c000a878:	83 c1 01             	add    ecx,0x1
c000a87b:	89 f0                	mov    eax,esi
c000a87d:	f7 f3                	div    ebx
c000a87f:	39 de                	cmp    esi,ebx
c000a881:	73 f1                	jae    c000a874 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c000a883:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a886:	eb 02                	jmp    c000a88a <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c000a888:	89 c5                	mov    ebp,eax
c000a88a:	31 d2                	xor    edx,edx
c000a88c:	83 e9 01             	sub    ecx,0x1
c000a88f:	89 e8                	mov    eax,ebp
c000a891:	f7 f3                	div    ebx
c000a893:	39 dd                	cmp    ebp,ebx
c000a895:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a899:	88 11                	mov    BYTE PTR [ecx],dl
c000a89b:	73 eb                	jae    c000a888 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c000a89d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a8a1:	83 c4 20             	add    esp,0x20
c000a8a4:	5b                   	pop    ebx
c000a8a5:	5e                   	pop    esi
c000a8a6:	5f                   	pop    edi
c000a8a7:	5d                   	pop    ebp
c000a8a8:	c3                   	ret    
c000a8a9:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a8ac:	83 c7 02             	add    edi,0x2
c000a8af:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c000a8b3:	83 c6 02             	add    esi,0x2
c000a8b6:	83 e8 02             	sub    eax,0x2
c000a8b9:	eb 8e                	jmp    c000a849 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c000a8bb <Dbg::logc(char)>:
c000a8bb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a8bf:	f6 05 d0 5e 02 c0 10 	test   BYTE PTR ds:0xc0025ed0,0x10
c000a8c6:	75 12                	jne    c000a8da <Dbg::logc(char)+0x1f>
c000a8c8:	ba fd 03 00 00       	mov    edx,0x3fd
c000a8cd:	ec                   	in     al,dx
c000a8ce:	a8 20                	test   al,0x20
c000a8d0:	74 fb                	je     c000a8cd <Dbg::logc(char)+0x12>
c000a8d2:	ba f8 03 00 00       	mov    edx,0x3f8
c000a8d7:	88 c8                	mov    al,cl
c000a8d9:	ee                   	out    dx,al
c000a8da:	c3                   	ret    

c000a8db <Dbg::logs(char*)>:
c000a8db:	53                   	push   ebx
c000a8dc:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a8e0:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8e3:	85 c0                	test   eax,eax
c000a8e5:	74 11                	je     c000a8f8 <Dbg::logs(char*)+0x1d>
c000a8e7:	83 c3 01             	add    ebx,0x1
c000a8ea:	50                   	push   eax
c000a8eb:	e8 cb ff ff ff       	call   c000a8bb <Dbg::logc(char)>
c000a8f0:	58                   	pop    eax
c000a8f1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8f4:	85 c0                	test   eax,eax
c000a8f6:	75 ef                	jne    c000a8e7 <Dbg::logs(char*)+0xc>
c000a8f8:	5b                   	pop    ebx
c000a8f9:	c3                   	ret    

c000a8fa <Dbg::logWriteInt(unsigned int)>:
c000a8fa:	83 ec 10             	sub    esp,0x10
c000a8fd:	6a 0a                	push   0xa
c000a8ff:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a903:	50                   	push   eax
c000a904:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a908:	50                   	push   eax
c000a909:	e8 0d ff ff ff       	call   c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a90e:	50                   	push   eax
c000a90f:	e8 c7 ff ff ff       	call   c000a8db <Dbg::logs(char*)>
c000a914:	83 c4 20             	add    esp,0x20
c000a917:	c3                   	ret    

c000a918 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a918:	83 ec 10             	sub    esp,0x10
c000a91b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a91f:	50                   	push   eax
c000a920:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a924:	50                   	push   eax
c000a925:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a929:	52                   	push   edx
c000a92a:	e8 ec fe ff ff       	call   c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a92f:	50                   	push   eax
c000a930:	e8 a6 ff ff ff       	call   c000a8db <Dbg::logs(char*)>
c000a935:	83 c4 20             	add    esp,0x20
c000a938:	c3                   	ret    

c000a939 <Dbg::kprintf(char const*, ...)>:
c000a939:	55                   	push   ebp
c000a93a:	57                   	push   edi
c000a93b:	56                   	push   esi
c000a93c:	53                   	push   ebx
c000a93d:	83 ec 0c             	sub    esp,0xc
c000a940:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a944:	f6 05 d0 5e 02 c0 10 	test   BYTE PTR ds:0xc0025ed0,0x10
c000a94b:	74 08                	je     c000a955 <Dbg::kprintf(char const*, ...)+0x1c>
c000a94d:	83 c4 0c             	add    esp,0xc
c000a950:	5b                   	pop    ebx
c000a951:	5e                   	pop    esi
c000a952:	5f                   	pop    edi
c000a953:	5d                   	pop    ebp
c000a954:	c3                   	ret    
c000a955:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a959:	31 ff                	xor    edi,edi
c000a95b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a95f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a962:	85 c0                	test   eax,eax
c000a964:	74 e7                	je     c000a94d <Dbg::kprintf(char const*, ...)+0x14>
c000a966:	8d 77 01             	lea    esi,[edi+0x1]
c000a969:	83 f8 25             	cmp    eax,0x25
c000a96c:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a96f:	75 47                	jne    c000a9b8 <Dbg::kprintf(char const*, ...)+0x7f>
c000a971:	83 c7 02             	add    edi,0x2
c000a974:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a977:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a97a:	83 e8 25             	sub    eax,0x25
c000a97d:	0f b6 c0             	movzx  eax,al
c000a980:	83 f8 53             	cmp    eax,0x53
c000a983:	0f 87 ce 00 00 00    	ja     c000aa57 <Dbg::kprintf(char const*, ...)+0x11e>
c000a989:	ff 24 85 3c 06 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf9c4]
c000a990:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a994:	89 c8                	mov    eax,ecx
c000a996:	83 c1 04             	add    ecx,0x4
c000a999:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a99d:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a99f:	55                   	push   ebp
c000a9a0:	e8 55 ff ff ff       	call   c000a8fa <Dbg::logWriteInt(unsigned int)>
c000a9a5:	58                   	pop    eax
c000a9a6:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a9a9:	85 c0                	test   eax,eax
c000a9ab:	74 a0                	je     c000a94d <Dbg::kprintf(char const*, ...)+0x14>
c000a9ad:	8d 77 01             	lea    esi,[edi+0x1]
c000a9b0:	83 f8 25             	cmp    eax,0x25
c000a9b3:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a9b6:	74 b9                	je     c000a971 <Dbg::kprintf(char const*, ...)+0x38>
c000a9b8:	50                   	push   eax
c000a9b9:	89 f7                	mov    edi,esi
c000a9bb:	e8 fb fe ff ff       	call   c000a8bb <Dbg::logc(char)>
c000a9c0:	89 ee                	mov    esi,ebp
c000a9c2:	58                   	pop    eax
c000a9c3:	eb e1                	jmp    c000a9a6 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9c5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9c9:	89 c8                	mov    eax,ecx
c000a9cb:	83 c1 04             	add    ecx,0x4
c000a9ce:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9d0:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9d4:	50                   	push   eax
c000a9d5:	e8 01 ff ff ff       	call   c000a8db <Dbg::logs(char*)>
c000a9da:	58                   	pop    eax
c000a9db:	eb c9                	jmp    c000a9a6 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9dd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9e1:	89 d0                	mov    eax,edx
c000a9e3:	83 c2 04             	add    edx,0x4
c000a9e6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9ea:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9ec:	50                   	push   eax
c000a9ed:	e8 08 ff ff ff       	call   c000a8fa <Dbg::logWriteInt(unsigned int)>
c000a9f2:	58                   	pop    eax
c000a9f3:	eb b1                	jmp    c000a9a6 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9f5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9f9:	89 d0                	mov    eax,edx
c000a9fb:	83 c2 04             	add    edx,0x4
c000a9fe:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000aa01:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa05:	50                   	push   eax
c000aa06:	e8 b0 fe ff ff       	call   c000a8bb <Dbg::logc(char)>
c000aa0b:	58                   	pop    eax
c000aa0c:	eb 98                	jmp    c000a9a6 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa0e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa12:	89 c8                	mov    eax,ecx
c000aa14:	83 c1 04             	add    ecx,0x4
c000aa17:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa1b:	6a 10                	push   0x10
c000aa1d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aa1f:	51                   	push   ecx
c000aa20:	e8 f3 fe ff ff       	call   c000a918 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa25:	5d                   	pop    ebp
c000aa26:	58                   	pop    eax
c000aa27:	e9 7a ff ff ff       	jmp    c000a9a6 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa2c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa30:	89 d0                	mov    eax,edx
c000aa32:	83 c2 08             	add    edx,0x8
c000aa35:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa39:	6a 10                	push   0x10
c000aa3b:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa3d:	50                   	push   eax
c000aa3e:	e8 d5 fe ff ff       	call   c000a918 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa43:	58                   	pop    eax
c000aa44:	5a                   	pop    edx
c000aa45:	e9 5c ff ff ff       	jmp    c000a9a6 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa4a:	6a 25                	push   0x25
c000aa4c:	e8 6a fe ff ff       	call   c000a8bb <Dbg::logc(char)>
c000aa51:	5a                   	pop    edx
c000aa52:	e9 4f ff ff ff       	jmp    c000a9a6 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa57:	6a 25                	push   0x25
c000aa59:	e8 5d fe ff ff       	call   c000a8bb <Dbg::logc(char)>
c000aa5e:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa62:	50                   	push   eax
c000aa63:	e8 53 fe ff ff       	call   c000a8bb <Dbg::logc(char)>
c000aa68:	5a                   	pop    edx
c000aa69:	59                   	pop    ecx
c000aa6a:	e9 37 ff ff ff       	jmp    c000a9a6 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa6f:	90                   	nop

c000aa70 <KiUbsanPrintDetails(char const*, void*)>:
c000aa70:	83 ec 1c             	sub    esp,0x1c
c000aa73:	83 ec 08             	sub    esp,0x8
c000aa76:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aa7a:	68 8c 07 02 c0       	push   0xc002078c
c000aa7f:	e8 b5 fe ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000aa84:	83 c4 10             	add    esp,0x10
c000aa87:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa8f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa93:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa95:	83 ec 08             	sub    esp,0x8
c000aa98:	50                   	push   eax
c000aa99:	68 a0 07 02 c0       	push   0xc00207a0
c000aa9e:	e8 96 fe ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000aaa3:	83 c4 10             	add    esp,0x10
c000aaa6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aaaa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aaad:	83 ec 08             	sub    esp,0x8
c000aab0:	50                   	push   eax
c000aab1:	68 aa 07 02 c0       	push   0xc00207aa
c000aab6:	e8 7e fe ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000aabb:	83 c4 10             	add    esp,0x10
c000aabe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aac2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000aac5:	83 ec 08             	sub    esp,0x8
c000aac8:	50                   	push   eax
c000aac9:	68 b4 07 02 c0       	push   0xc00207b4
c000aace:	e8 66 fe ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000aad3:	83 c4 10             	add    esp,0x10
c000aad6:	90                   	nop
c000aad7:	83 c4 1c             	add    esp,0x1c
c000aada:	c3                   	ret    
c000aadb:	90                   	nop

c000aadc <__ubsan_handle_type_mismatch_v1>:
c000aadc:	83 ec 0c             	sub    esp,0xc
c000aadf:	83 ec 08             	sub    esp,0x8
c000aae2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aae6:	68 f8 08 02 c0       	push   0xc00208f8
c000aaeb:	e8 80 ff ff ff       	call   c000aa70 <KiUbsanPrintDetails(char const*, void*)>
c000aaf0:	83 c4 10             	add    esp,0x10
c000aaf3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000aaf8:	75 16                	jne    c000ab10 <__ubsan_handle_type_mismatch_v1+0x34>
c000aafa:	83 ec 0c             	sub    esp,0xc
c000aafd:	68 be 07 02 c0       	push   0xc00207be
c000ab02:	e8 32 fe ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000ab07:	83 c4 10             	add    esp,0x10
c000ab0a:	e9 91 00 00 00       	jmp    c000aba0 <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab0f:	90                   	nop
c000ab10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab14:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab17:	85 c0                	test   eax,eax
c000ab19:	74 29                	je     c000ab44 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab1f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab22:	83 e8 01             	sub    eax,0x1
c000ab25:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000ab29:	75 19                	jne    c000ab44 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab2b:	83 ec 08             	sub    esp,0x8
c000ab2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab32:	68 18 09 02 c0       	push   0xc0020918
c000ab37:	e8 fd fd ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000ab3c:	83 c4 10             	add    esp,0x10
c000ab3f:	eb 5f                	jmp    c000aba0 <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab41:	8d 76 00             	lea    esi,[esi+0x0]
c000ab44:	83 ec 0c             	sub    esp,0xc
c000ab47:	68 d3 07 02 c0       	push   0xc00207d3
c000ab4c:	e8 e8 fd ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000ab51:	83 c4 10             	add    esp,0x10
c000ab54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab58:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab5b:	0f b6 c0             	movzx  eax,al
c000ab5e:	83 ec 08             	sub    esp,0x8
c000ab61:	50                   	push   eax
c000ab62:	68 ed 07 02 c0       	push   0xc00207ed
c000ab67:	e8 cd fd ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000ab6c:	83 c4 10             	add    esp,0x10
c000ab6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab73:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab76:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000ab79:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab81:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab84:	0f b6 c0             	movzx  eax,al
c000ab87:	8b 04 85 80 28 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd780]
c000ab8e:	51                   	push   ecx
c000ab8f:	52                   	push   edx
c000ab90:	50                   	push   eax
c000ab91:	68 40 09 02 c0       	push   0xc0020940
c000ab96:	e8 9e fd ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000ab9b:	83 c4 10             	add    esp,0x10
c000ab9e:	66 90                	xchg   ax,ax
c000aba0:	83 ec 0c             	sub    esp,0xc
c000aba3:	68 f8 08 02 c0       	push   0xc00208f8
c000aba8:	e8 ee 5f 00 00       	call   c0010b9b <KePanic(char const*)>
c000abad:	83 c4 10             	add    esp,0x10
c000abb0:	90                   	nop
c000abb1:	83 c4 0c             	add    esp,0xc
c000abb4:	c3                   	ret    
c000abb5:	8d 76 00             	lea    esi,[esi+0x0]

c000abb8 <__ubsan_handle_pointer_overflow>:
c000abb8:	83 ec 0c             	sub    esp,0xc
c000abbb:	83 ec 08             	sub    esp,0x8
c000abbe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abc2:	68 88 09 02 c0       	push   0xc0020988
c000abc7:	e8 a4 fe ff ff       	call   c000aa70 <KiUbsanPrintDetails(char const*, void*)>
c000abcc:	83 c4 10             	add    esp,0x10
c000abcf:	83 ec 0c             	sub    esp,0xc
c000abd2:	68 88 09 02 c0       	push   0xc0020988
c000abd7:	e8 bf 5f 00 00       	call   c0010b9b <KePanic(char const*)>
c000abdc:	83 c4 10             	add    esp,0x10
c000abdf:	90                   	nop
c000abe0:	83 c4 0c             	add    esp,0xc
c000abe3:	c3                   	ret    

c000abe4 <__ubsan_handle_out_of_bounds>:
c000abe4:	83 ec 0c             	sub    esp,0xc
c000abe7:	83 ec 08             	sub    esp,0x8
c000abea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abee:	68 f8 07 02 c0       	push   0xc00207f8
c000abf3:	e8 78 fe ff ff       	call   c000aa70 <KiUbsanPrintDetails(char const*, void*)>
c000abf8:	83 c4 10             	add    esp,0x10
c000abfb:	83 ec 0c             	sub    esp,0xc
c000abfe:	68 f8 07 02 c0       	push   0xc00207f8
c000ac03:	e8 93 5f 00 00       	call   c0010b9b <KePanic(char const*)>
c000ac08:	83 c4 10             	add    esp,0x10
c000ac0b:	90                   	nop
c000ac0c:	83 c4 0c             	add    esp,0xc
c000ac0f:	c3                   	ret    

c000ac10 <__ubsan_handle_add_overflow>:
c000ac10:	83 ec 0c             	sub    esp,0xc
c000ac13:	83 ec 08             	sub    esp,0x8
c000ac16:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac1a:	68 15 08 02 c0       	push   0xc0020815
c000ac1f:	e8 4c fe ff ff       	call   c000aa70 <KiUbsanPrintDetails(char const*, void*)>
c000ac24:	83 c4 10             	add    esp,0x10
c000ac27:	83 ec 0c             	sub    esp,0xc
c000ac2a:	68 15 08 02 c0       	push   0xc0020815
c000ac2f:	e8 67 5f 00 00       	call   c0010b9b <KePanic(char const*)>
c000ac34:	83 c4 10             	add    esp,0x10
c000ac37:	90                   	nop
c000ac38:	83 c4 0c             	add    esp,0xc
c000ac3b:	c3                   	ret    

c000ac3c <__ubsan_handle_load_invalid_value>:
c000ac3c:	83 ec 0c             	sub    esp,0xc
c000ac3f:	83 ec 08             	sub    esp,0x8
c000ac42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac46:	68 a8 09 02 c0       	push   0xc00209a8
c000ac4b:	e8 20 fe ff ff       	call   c000aa70 <KiUbsanPrintDetails(char const*, void*)>
c000ac50:	83 c4 10             	add    esp,0x10
c000ac53:	83 ec 0c             	sub    esp,0xc
c000ac56:	68 a8 09 02 c0       	push   0xc00209a8
c000ac5b:	e8 3b 5f 00 00       	call   c0010b9b <KePanic(char const*)>
c000ac60:	83 c4 10             	add    esp,0x10
c000ac63:	90                   	nop
c000ac64:	83 c4 0c             	add    esp,0xc
c000ac67:	c3                   	ret    

c000ac68 <__ubsan_handle_divrem_overflow>:
c000ac68:	83 ec 0c             	sub    esp,0xc
c000ac6b:	83 ec 08             	sub    esp,0x8
c000ac6e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac72:	68 cc 09 02 c0       	push   0xc00209cc
c000ac77:	e8 f4 fd ff ff       	call   c000aa70 <KiUbsanPrintDetails(char const*, void*)>
c000ac7c:	83 c4 10             	add    esp,0x10
c000ac7f:	83 ec 0c             	sub    esp,0xc
c000ac82:	68 cc 09 02 c0       	push   0xc00209cc
c000ac87:	e8 0f 5f 00 00       	call   c0010b9b <KePanic(char const*)>
c000ac8c:	83 c4 10             	add    esp,0x10
c000ac8f:	90                   	nop
c000ac90:	83 c4 0c             	add    esp,0xc
c000ac93:	c3                   	ret    

c000ac94 <__ubsan_handle_mul_overflow>:
c000ac94:	83 ec 0c             	sub    esp,0xc
c000ac97:	83 ec 08             	sub    esp,0x8
c000ac9a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac9e:	68 31 08 02 c0       	push   0xc0020831
c000aca3:	e8 c8 fd ff ff       	call   c000aa70 <KiUbsanPrintDetails(char const*, void*)>
c000aca8:	83 c4 10             	add    esp,0x10
c000acab:	83 ec 0c             	sub    esp,0xc
c000acae:	68 31 08 02 c0       	push   0xc0020831
c000acb3:	e8 e3 5e 00 00       	call   c0010b9b <KePanic(char const*)>
c000acb8:	83 c4 10             	add    esp,0x10
c000acbb:	90                   	nop
c000acbc:	83 c4 0c             	add    esp,0xc
c000acbf:	c3                   	ret    

c000acc0 <__ubsan_handle_sub_overflow>:
c000acc0:	83 ec 0c             	sub    esp,0xc
c000acc3:	83 ec 08             	sub    esp,0x8
c000acc6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acca:	68 4d 08 02 c0       	push   0xc002084d
c000accf:	e8 9c fd ff ff       	call   c000aa70 <KiUbsanPrintDetails(char const*, void*)>
c000acd4:	83 c4 10             	add    esp,0x10
c000acd7:	83 ec 0c             	sub    esp,0xc
c000acda:	68 4d 08 02 c0       	push   0xc002084d
c000acdf:	e8 b7 5e 00 00       	call   c0010b9b <KePanic(char const*)>
c000ace4:	83 c4 10             	add    esp,0x10
c000ace7:	90                   	nop
c000ace8:	83 c4 0c             	add    esp,0xc
c000aceb:	c3                   	ret    

c000acec <__ubsan_handle_shift_out_of_bounds>:
c000acec:	83 ec 0c             	sub    esp,0xc
c000acef:	83 ec 08             	sub    esp,0x8
c000acf2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acf6:	68 ec 09 02 c0       	push   0xc00209ec
c000acfb:	e8 70 fd ff ff       	call   c000aa70 <KiUbsanPrintDetails(char const*, void*)>
c000ad00:	83 c4 10             	add    esp,0x10
c000ad03:	83 ec 0c             	sub    esp,0xc
c000ad06:	68 ec 09 02 c0       	push   0xc00209ec
c000ad0b:	e8 8b 5e 00 00       	call   c0010b9b <KePanic(char const*)>
c000ad10:	83 c4 10             	add    esp,0x10
c000ad13:	90                   	nop
c000ad14:	83 c4 0c             	add    esp,0xc
c000ad17:	c3                   	ret    

c000ad18 <__ubsan_handle_negate_overflow>:
c000ad18:	83 ec 0c             	sub    esp,0xc
c000ad1b:	83 ec 08             	sub    esp,0x8
c000ad1e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad22:	68 10 0a 02 c0       	push   0xc0020a10
c000ad27:	e8 44 fd ff ff       	call   c000aa70 <KiUbsanPrintDetails(char const*, void*)>
c000ad2c:	83 c4 10             	add    esp,0x10
c000ad2f:	83 ec 0c             	sub    esp,0xc
c000ad32:	68 10 0a 02 c0       	push   0xc0020a10
c000ad37:	e8 5f 5e 00 00       	call   c0010b9b <KePanic(char const*)>
c000ad3c:	83 c4 10             	add    esp,0x10
c000ad3f:	90                   	nop
c000ad40:	83 c4 0c             	add    esp,0xc
c000ad43:	c3                   	ret    

c000ad44 <File::read(unsigned long long, void*, int*)>:
c000ad44:	53                   	push   ebx
c000ad45:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ad49:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ad4d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ad54:	83 f8 19             	cmp    eax,0x19
c000ad57:	77 35                	ja     c000ad8e <File::read(unsigned long long, void*, int*)+0x4a>
c000ad59:	8b 04 85 20 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7be0]
c000ad60:	85 c0                	test   eax,eax
c000ad62:	74 2a                	je     c000ad8e <File::read(unsigned long long, void*, int*)+0x4a>
c000ad64:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ad6a:	85 c0                	test   eax,eax
c000ad6c:	74 20                	je     c000ad8e <File::read(unsigned long long, void*, int*)+0x4a>
c000ad6e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ad72:	74 21                	je     c000ad95 <File::read(unsigned long long, void*, int*)+0x51>
c000ad74:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ad76:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ad7a:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ad80:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ad84:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad88:	5b                   	pop    ebx
c000ad89:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000ad8c:	ff e0                	jmp    eax
c000ad8e:	b8 0b 00 00 00       	mov    eax,0xb
c000ad93:	eb 05                	jmp    c000ad9a <File::read(unsigned long long, void*, int*)+0x56>
c000ad95:	b8 05 00 00 00       	mov    eax,0x5
c000ad9a:	5b                   	pop    ebx
c000ad9b:	c3                   	ret    

c000ad9c <File::write(unsigned long long, void*, int*)>:
c000ad9c:	53                   	push   ebx
c000ad9d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ada1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ada5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000adac:	83 f8 19             	cmp    eax,0x19
c000adaf:	77 35                	ja     c000ade6 <File::write(unsigned long long, void*, int*)+0x4a>
c000adb1:	8b 04 85 20 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7be0]
c000adb8:	85 c0                	test   eax,eax
c000adba:	74 2a                	je     c000ade6 <File::write(unsigned long long, void*, int*)+0x4a>
c000adbc:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000adc2:	85 c0                	test   eax,eax
c000adc4:	74 20                	je     c000ade6 <File::write(unsigned long long, void*, int*)+0x4a>
c000adc6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000adca:	74 21                	je     c000aded <File::write(unsigned long long, void*, int*)+0x51>
c000adcc:	8b 08                	mov    ecx,DWORD PTR [eax]
c000adce:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000add2:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000add8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000addc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ade0:	5b                   	pop    ebx
c000ade1:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000ade4:	ff e0                	jmp    eax
c000ade6:	b8 0b 00 00 00       	mov    eax,0xb
c000adeb:	eb 05                	jmp    c000adf2 <File::write(unsigned long long, void*, int*)+0x56>
c000aded:	b8 05 00 00 00       	mov    eax,0x5
c000adf2:	5b                   	pop    ebx
c000adf3:	c3                   	ret    

c000adf4 <Directory::read(unsigned long long, void*, int*)>:
c000adf4:	53                   	push   ebx
c000adf5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000adf9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000adfd:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ae04:	83 f8 19             	cmp    eax,0x19
c000ae07:	77 35                	ja     c000ae3e <Directory::read(unsigned long long, void*, int*)+0x4a>
c000ae09:	8b 04 85 20 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7be0]
c000ae10:	85 c0                	test   eax,eax
c000ae12:	74 2a                	je     c000ae3e <Directory::read(unsigned long long, void*, int*)+0x4a>
c000ae14:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ae1a:	85 c0                	test   eax,eax
c000ae1c:	74 20                	je     c000ae3e <Directory::read(unsigned long long, void*, int*)+0x4a>
c000ae1e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ae22:	74 21                	je     c000ae45 <Directory::read(unsigned long long, void*, int*)+0x51>
c000ae24:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ae26:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ae2a:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ae30:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ae34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ae38:	5b                   	pop    ebx
c000ae39:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000ae3c:	ff e0                	jmp    eax
c000ae3e:	b8 0b 00 00 00       	mov    eax,0xb
c000ae43:	eb 05                	jmp    c000ae4a <Directory::read(unsigned long long, void*, int*)+0x56>
c000ae45:	b8 05 00 00 00       	mov    eax,0x5
c000ae4a:	5b                   	pop    ebx
c000ae4b:	c3                   	ret    

c000ae4c <Directory::write(unsigned long long, void*, int*)>:
c000ae4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ae50:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000ae57:	b8 0b 00 00 00       	mov    eax,0xb
c000ae5c:	83 fa 19             	cmp    edx,0x19
c000ae5f:	77 18                	ja     c000ae79 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ae61:	8b 14 95 20 84 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7be0]
c000ae68:	85 d2                	test   edx,edx
c000ae6a:	74 0d                	je     c000ae79 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ae6c:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000ae73:	19 c0                	sbb    eax,eax
c000ae75:	83 e0 0a             	and    eax,0xa
c000ae78:	40                   	inc    eax
c000ae79:	c3                   	ret    

c000ae7a <File::isAtty()>:
c000ae7a:	31 c0                	xor    eax,eax
c000ae7c:	c3                   	ret    
c000ae7d:	90                   	nop

c000ae7e <Directory::isAtty()>:
c000ae7e:	31 c0                	xor    eax,eax
c000ae80:	c3                   	ret    
c000ae81:	90                   	nop

c000ae82 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000ae82:	b8 0a 00 00 00       	mov    eax,0xa
c000ae87:	c3                   	ret    

c000ae88 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000ae88:	b8 0a 00 00 00       	mov    eax,0xa
c000ae8d:	c3                   	ret    

c000ae8e <Filesystem::allocateSwapfile(char const*, int)>:
c000ae8e:	31 c0                	xor    eax,eax
c000ae90:	31 d2                	xor    edx,edx
c000ae92:	c3                   	ret    
c000ae93:	90                   	nop

c000ae94 <File::~File()>:
c000ae94:	83 ec 0c             	sub    esp,0xc
c000ae97:	ba a0 0a 02 c0       	mov    edx,0xc0020aa0
c000ae9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aea0:	89 10                	mov    DWORD PTR [eax],edx
c000aea2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aea6:	83 ec 0c             	sub    esp,0xc
c000aea9:	50                   	push   eax
c000aeaa:	e8 e9 e4 ff ff       	call   c0009398 <UnixFile::~UnixFile()>
c000aeaf:	83 c4 10             	add    esp,0x10
c000aeb2:	90                   	nop
c000aeb3:	83 c4 0c             	add    esp,0xc
c000aeb6:	c3                   	ret    
c000aeb7:	90                   	nop

c000aeb8 <File::~File()>:
c000aeb8:	83 ec 0c             	sub    esp,0xc
c000aebb:	83 ec 0c             	sub    esp,0xc
c000aebe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aec2:	e8 cd ff ff ff       	call   c000ae94 <File::~File()>
c000aec7:	83 c4 10             	add    esp,0x10
c000aeca:	83 ec 08             	sub    esp,0x8
c000aecd:	68 14 01 00 00       	push   0x114
c000aed2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aed6:	e8 31 f9 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000aedb:	83 c4 10             	add    esp,0x10
c000aede:	83 c4 0c             	add    esp,0xc
c000aee1:	c3                   	ret    

c000aee2 <Directory::~Directory()>:
c000aee2:	83 ec 0c             	sub    esp,0xc
c000aee5:	ba bc 0a 02 c0       	mov    edx,0xc0020abc
c000aeea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeee:	89 10                	mov    DWORD PTR [eax],edx
c000aef0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aef4:	83 ec 0c             	sub    esp,0xc
c000aef7:	50                   	push   eax
c000aef8:	e8 9b e4 ff ff       	call   c0009398 <UnixFile::~UnixFile()>
c000aefd:	83 c4 10             	add    esp,0x10
c000af00:	90                   	nop
c000af01:	83 c4 0c             	add    esp,0xc
c000af04:	c3                   	ret    
c000af05:	90                   	nop

c000af06 <Directory::~Directory()>:
c000af06:	83 ec 0c             	sub    esp,0xc
c000af09:	83 ec 0c             	sub    esp,0xc
c000af0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af10:	e8 cd ff ff ff       	call   c000aee2 <Directory::~Directory()>
c000af15:	83 c4 10             	add    esp,0x10
c000af18:	83 ec 08             	sub    esp,0x8
c000af1b:	68 14 01 00 00       	push   0x114
c000af20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af24:	e8 e3 f8 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000af29:	83 c4 10             	add    esp,0x10
c000af2c:	83 c4 0c             	add    esp,0xc
c000af2f:	c3                   	ret    

c000af30 <Filesystem::Filesystem()>:
c000af30:	ba 38 0a 02 c0       	mov    edx,0xc0020a38
c000af35:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af39:	89 10                	mov    DWORD PTR [eax],edx
c000af3b:	8b 15 b4 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025fb4
c000af41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af45:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000af48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af4c:	a3 b4 5f 02 c0       	mov    ds:0xc0025fb4,eax
c000af51:	90                   	nop
c000af52:	c3                   	ret    
c000af53:	90                   	nop

c000af54 <Filesystem::~Filesystem()>:
c000af54:	ba 38 0a 02 c0       	mov    edx,0xc0020a38
c000af59:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af5d:	89 10                	mov    DWORD PTR [eax],edx
c000af5f:	90                   	nop
c000af60:	c3                   	ret    
c000af61:	90                   	nop

c000af62 <Filesystem::~Filesystem()>:
c000af62:	83 ec 0c             	sub    esp,0xc
c000af65:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000af69:	e8 e6 ff ff ff       	call   c000af54 <Filesystem::~Filesystem()>
c000af6e:	83 c4 04             	add    esp,0x4
c000af71:	83 ec 08             	sub    esp,0x8
c000af74:	6a 08                	push   0x8
c000af76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af7a:	e8 8d f8 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000af7f:	83 c4 10             	add    esp,0x10
c000af82:	83 c4 0c             	add    esp,0xc
c000af85:	c3                   	ret    

c000af86 <Fs::getcwd(Process*, char*, int)>:
c000af86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000af8a:	31 c0                	xor    eax,eax
c000af8c:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000af8f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000af93:	7d 15                	jge    c000afaa <Fs::getcwd(Process*, char*, int)+0x24>
c000af95:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000af99:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000afa0:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000afa3:	84 c9                	test   cl,cl
c000afa5:	74 06                	je     c000afad <Fs::getcwd(Process*, char*, int)+0x27>
c000afa7:	40                   	inc    eax
c000afa8:	eb e2                	jmp    c000af8c <Fs::getcwd(Process*, char*, int)+0x6>
c000afaa:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000afad:	31 c0                	xor    eax,eax
c000afaf:	c3                   	ret    

c000afb0 <Fs::initVFS()>:
c000afb0:	83 ec 18             	sub    esp,0x18
c000afb3:	6a 08                	push   0x8
c000afb5:	e8 f4 ca ff ff       	call   c0007aae <malloc>
c000afba:	89 04 24             	mov    DWORD PTR [esp],eax
c000afbd:	e8 4a df 00 00       	call   c0018f0c <FAT::FAT()>
c000afc2:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000afc9:	e8 e0 ca ff ff       	call   c0007aae <malloc>
c000afce:	89 04 24             	mov    DWORD PTR [esp],eax
c000afd1:	e8 5c ee 00 00       	call   c0019e32 <ISO9660::ISO9660()>
c000afd6:	83 c4 1c             	add    esp,0x1c
c000afd9:	c3                   	ret    

c000afda <Fs::standardiseFiles(char*, char const*, char const*)>:
c000afda:	55                   	push   ebp
c000afdb:	57                   	push   edi
c000afdc:	56                   	push   esi
c000afdd:	53                   	push   ebx
c000afde:	81 ec 10 04 00 00    	sub    esp,0x410
c000afe4:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000afeb:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000aff2:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000aff9:	68 00 04 00 00       	push   0x400
c000affe:	6a 00                	push   0x0
c000b000:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000b004:	56                   	push   esi
c000b005:	e8 e6 54 ff ff       	call   c00004f0 <memset>
c000b00a:	83 c4 10             	add    esp,0x10
c000b00d:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000b011:	75 0b                	jne    c000b01e <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000b013:	50                   	push   eax
c000b014:	50                   	push   eax
c000b015:	57                   	push   edi
c000b016:	56                   	push   esi
c000b017:	e8 24 56 ff ff       	call   c0000640 <strcpy>
c000b01c:	eb 44                	jmp    c000b062 <Fs::standardiseFiles(char*, char const*, char const*)+0x88>
c000b01e:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000b021:	83 f8 5c             	cmp    eax,0x5c
c000b024:	74 05                	je     c000b02b <Fs::standardiseFiles(char*, char const*, char const*)+0x51>
c000b026:	83 f8 2f             	cmp    eax,0x2f
c000b029:	75 18                	jne    c000b043 <Fs::standardiseFiles(char*, char const*, char const*)+0x69>
c000b02b:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000b02e:	3c 60                	cmp    al,0x60
c000b030:	7e 03                	jle    c000b035 <Fs::standardiseFiles(char*, char const*, char const*)+0x5b>
c000b032:	83 e8 20             	sub    eax,0x20
c000b035:	88 04 24             	mov    BYTE PTR [esp],al
c000b038:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b03f:	50                   	push   eax
c000b040:	50                   	push   eax
c000b041:	eb 18                	jmp    c000b05b <Fs::standardiseFiles(char*, char const*, char const*)+0x81>
c000b043:	50                   	push   eax
c000b044:	50                   	push   eax
c000b045:	55                   	push   ebp
c000b046:	56                   	push   esi
c000b047:	e8 f4 55 ff ff       	call   c0000640 <strcpy>
c000b04c:	5a                   	pop    edx
c000b04d:	59                   	pop    ecx
c000b04e:	68 de 1a 02 c0       	push   0xc0021ade
c000b053:	56                   	push   esi
c000b054:	e8 e7 57 ff ff       	call   c0000840 <strcat>
c000b059:	5d                   	pop    ebp
c000b05a:	58                   	pop    eax
c000b05b:	57                   	push   edi
c000b05c:	56                   	push   esi
c000b05d:	e8 de 57 ff ff       	call   c0000840 <strcat>
c000b062:	83 c4 10             	add    esp,0x10
c000b065:	8a 04 24             	mov    al,BYTE PTR [esp]
c000b068:	3c 60                	cmp    al,0x60
c000b06a:	7e 03                	jle    c000b06f <Fs::standardiseFiles(char*, char const*, char const*)+0x95>
c000b06c:	83 e8 20             	sub    eax,0x20
c000b06f:	88 04 24             	mov    BYTE PTR [esp],al
c000b072:	88 03                	mov    BYTE PTR [ebx],al
c000b074:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b07b:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000b081:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000b085:	bf 03 00 00 00       	mov    edi,0x3
c000b08a:	b8 03 00 00 00       	mov    eax,0x3
c000b08f:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c000b093:	89 ea                	mov    edx,ebp
c000b095:	85 ed                	test   ebp,ebp
c000b097:	0f 84 97 00 00 00    	je     c000b134 <Fs::standardiseFiles(char*, char const*, char const*)+0x15a>
c000b09d:	8d 4f 01             	lea    ecx,[edi+0x1]
c000b0a0:	83 fd 5c             	cmp    ebp,0x5c
c000b0a3:	74 05                	je     c000b0aa <Fs::standardiseFiles(char*, char const*, char const*)+0xd0>
c000b0a5:	83 fd 2f             	cmp    ebp,0x2f
c000b0a8:	75 12                	jne    c000b0bc <Fs::standardiseFiles(char*, char const*, char const*)+0xe2>
c000b0aa:	89 c5                	mov    ebp,eax
c000b0ac:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b0b1:	74 09                	je     c000b0bc <Fs::standardiseFiles(char*, char const*, char const*)+0xe2>
c000b0b3:	40                   	inc    eax
c000b0b4:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000b0b8:	89 cf                	mov    edi,ecx
c000b0ba:	eb d3                	jmp    c000b08f <Fs::standardiseFiles(char*, char const*, char const*)+0xb5>
c000b0bc:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000b0c1:	0f be ea             	movsx  ebp,dl
c000b0c4:	75 5e                	jne    c000b124 <Fs::standardiseFiles(char*, char const*, char const*)+0x14a>
c000b0c6:	83 fd 2e             	cmp    ebp,0x2e
c000b0c9:	75 59                	jne    c000b124 <Fs::standardiseFiles(char*, char const*, char const*)+0x14a>
c000b0cb:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000b0cf:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c000b0d4:	74 18                	je     c000b0ee <Fs::standardiseFiles(char*, char const*, char const*)+0x114>
c000b0d6:	83 fd 2e             	cmp    ebp,0x2e
c000b0d9:	74 53                	je     c000b12e <Fs::standardiseFiles(char*, char const*, char const*)+0x154>
c000b0db:	89 f9                	mov    ecx,edi
c000b0dd:	41                   	inc    ecx
c000b0de:	0f be 14 0e          	movsx  edx,BYTE PTR [esi+ecx*1]
c000b0e2:	83 fa 2f             	cmp    edx,0x2f
c000b0e5:	74 f6                	je     c000b0dd <Fs::standardiseFiles(char*, char const*, char const*)+0x103>
c000b0e7:	83 fa 5c             	cmp    edx,0x5c
c000b0ea:	74 f1                	je     c000b0dd <Fs::standardiseFiles(char*, char const*, char const*)+0x103>
c000b0ec:	eb ca                	jmp    c000b0b8 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000b0ee:	83 fd 2e             	cmp    ebp,0x2e
c000b0f1:	74 3b                	je     c000b12e <Fs::standardiseFiles(char*, char const*, char const*)+0x154>
c000b0f3:	83 f8 03             	cmp    eax,0x3
c000b0f6:	74 c0                	je     c000b0b8 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000b0f8:	41                   	inc    ecx
c000b0f9:	0f be 14 0e          	movsx  edx,BYTE PTR [esi+ecx*1]
c000b0fd:	83 fa 2f             	cmp    edx,0x2f
c000b100:	74 f6                	je     c000b0f8 <Fs::standardiseFiles(char*, char const*, char const*)+0x11e>
c000b102:	83 fa 5c             	cmp    edx,0x5c
c000b105:	74 f1                	je     c000b0f8 <Fs::standardiseFiles(char*, char const*, char const*)+0x11e>
c000b107:	48                   	dec    eax
c000b108:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b10c:	75 06                	jne    c000b114 <Fs::standardiseFiles(char*, char const*, char const*)+0x13a>
c000b10e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b112:	eb f3                	jmp    c000b107 <Fs::standardiseFiles(char*, char const*, char const*)+0x12d>
c000b114:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b118:	74 07                	je     c000b121 <Fs::standardiseFiles(char*, char const*, char const*)+0x147>
c000b11a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b11e:	48                   	dec    eax
c000b11f:	eb f3                	jmp    c000b114 <Fs::standardiseFiles(char*, char const*, char const*)+0x13a>
c000b121:	40                   	inc    eax
c000b122:	eb 94                	jmp    c000b0b8 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000b124:	83 fd 2f             	cmp    ebp,0x2f
c000b127:	74 8f                	je     c000b0b8 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000b129:	83 fd 5c             	cmp    ebp,0x5c
c000b12c:	74 8a                	je     c000b0b8 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000b12e:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000b131:	40                   	inc    eax
c000b132:	eb 84                	jmp    c000b0b8 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000b134:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b138:	83 ec 0c             	sub    esp,0xc
c000b13b:	53                   	push   ebx
c000b13c:	e8 2f 54 ff ff       	call   c0000570 <strlen>
c000b141:	83 c4 10             	add    esp,0x10
c000b144:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000b149:	75 26                	jne    c000b171 <Fs::standardiseFiles(char*, char const*, char const*)+0x197>
c000b14b:	83 ec 0c             	sub    esp,0xc
c000b14e:	53                   	push   ebx
c000b14f:	e8 1c 54 ff ff       	call   c0000570 <strlen>
c000b154:	83 c4 10             	add    esp,0x10
c000b157:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000b15c:	74 26                	je     c000b184 <Fs::standardiseFiles(char*, char const*, char const*)+0x1aa>
c000b15e:	83 ec 0c             	sub    esp,0xc
c000b161:	53                   	push   ebx
c000b162:	e8 09 54 ff ff       	call   c0000570 <strlen>
c000b167:	83 c4 10             	add    esp,0x10
c000b16a:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000b16f:	eb c7                	jmp    c000b138 <Fs::standardiseFiles(char*, char const*, char const*)+0x15e>
c000b171:	83 ec 0c             	sub    esp,0xc
c000b174:	53                   	push   ebx
c000b175:	e8 f6 53 ff ff       	call   c0000570 <strlen>
c000b17a:	83 c4 10             	add    esp,0x10
c000b17d:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b182:	74 c7                	je     c000b14b <Fs::standardiseFiles(char*, char const*, char const*)+0x171>
c000b184:	81 c4 0c 04 00 00    	add    esp,0x40c
c000b18a:	5b                   	pop    ebx
c000b18b:	5e                   	pop    esi
c000b18c:	5f                   	pop    edi
c000b18d:	5d                   	pop    ebp
c000b18e:	c3                   	ret    
c000b18f:	90                   	nop

c000b190 <File::File(char const*, Process*)>:
c000b190:	83 ec 0c             	sub    esp,0xc
c000b193:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b197:	83 ec 08             	sub    esp,0x8
c000b19a:	6a 00                	push   0x0
c000b19c:	50                   	push   eax
c000b19d:	e8 10 e0 ff ff       	call   c00091b2 <UnixFile::UnixFile(int)>
c000b1a2:	83 c4 10             	add    esp,0x10
c000b1a5:	ba a0 0a 02 c0       	mov    edx,0xc0020aa0
c000b1aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1ae:	89 10                	mov    DWORD PTR [eax],edx
c000b1b0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b1b4:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b1ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1be:	83 c0 0d             	add    eax,0xd
c000b1c1:	83 ec 04             	sub    esp,0x4
c000b1c4:	52                   	push   edx
c000b1c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b1c9:	50                   	push   eax
c000b1ca:	e8 0b fe ff ff       	call   c000afda <Fs::standardiseFiles(char*, char const*, char const*)>
c000b1cf:	83 c4 10             	add    esp,0x10
c000b1d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1d6:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b1d9:	83 e8 41             	sub    eax,0x41
c000b1dc:	88 c2                	mov    dl,al
c000b1de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1e2:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b1e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1ec:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b1f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1f4:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b1fa:	0f b6 c0             	movzx  eax,al
c000b1fd:	8b 04 85 20 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7be0]
c000b204:	85 c0                	test   eax,eax
c000b206:	74 3e                	je     c000b246 <File::File(char const*, Process*)+0xb6>
c000b208:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b20c:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b212:	0f b6 c0             	movzx  eax,al
c000b215:	8b 04 85 20 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7be0]
c000b21c:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b222:	85 c0                	test   eax,eax
c000b224:	75 20                	jne    c000b246 <File::File(char const*, Process*)+0xb6>
c000b226:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b22a:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b230:	0f b6 c0             	movzx  eax,al
c000b233:	8b 04 85 20 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7be0]
c000b23a:	83 ec 0c             	sub    esp,0xc
c000b23d:	50                   	push   eax
c000b23e:	e8 1f 21 00 00       	call   c000d362 <LogicalDisk::mount()>
c000b243:	83 c4 10             	add    esp,0x10
c000b246:	90                   	nop
c000b247:	83 c4 0c             	add    esp,0xc
c000b24a:	c3                   	ret    
c000b24b:	90                   	nop

c000b24c <File::open(FileOpenMode)>:
c000b24c:	53                   	push   ebx
c000b24d:	b8 0b 00 00 00       	mov    eax,0xb
c000b252:	83 ec 08             	sub    esp,0x8
c000b255:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b259:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b260:	83 fa 19             	cmp    edx,0x19
c000b263:	77 40                	ja     c000b2a5 <File::open(FileOpenMode)+0x59>
c000b265:	8b 14 95 20 84 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7be0]
c000b26c:	85 d2                	test   edx,edx
c000b26e:	74 35                	je     c000b2a5 <File::open(FileOpenMode)+0x59>
c000b270:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b276:	85 d2                	test   edx,edx
c000b278:	74 2b                	je     c000b2a5 <File::open(FileOpenMode)+0x59>
c000b27a:	b8 06 00 00 00       	mov    eax,0x6
c000b27f:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b283:	75 20                	jne    c000b2a5 <File::open(FileOpenMode)+0x59>
c000b285:	8b 02                	mov    eax,DWORD PTR [edx]
c000b287:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b28d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b291:	51                   	push   ecx
c000b292:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b295:	51                   	push   ecx
c000b296:	52                   	push   edx
c000b297:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b29a:	83 c4 10             	add    esp,0x10
c000b29d:	85 c0                	test   eax,eax
c000b29f:	75 04                	jne    c000b2a5 <File::open(FileOpenMode)+0x59>
c000b2a1:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b2a5:	83 c4 08             	add    esp,0x8
c000b2a8:	5b                   	pop    ebx
c000b2a9:	c3                   	ret    

c000b2aa <File::close()>:
c000b2aa:	53                   	push   ebx
c000b2ab:	b8 0b 00 00 00       	mov    eax,0xb
c000b2b0:	83 ec 08             	sub    esp,0x8
c000b2b3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b2b7:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b2be:	83 f9 19             	cmp    ecx,0x19
c000b2c1:	77 41                	ja     c000b304 <File::close()+0x5a>
c000b2c3:	8b 1c 8d 20 84 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd7be0]
c000b2ca:	85 db                	test   ebx,ebx
c000b2cc:	74 36                	je     c000b304 <File::close()+0x5a>
c000b2ce:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b2d5:	74 2d                	je     c000b304 <File::close()+0x5a>
c000b2d7:	b8 05 00 00 00       	mov    eax,0x5
c000b2dc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b2e0:	74 22                	je     c000b304 <File::close()+0x5a>
c000b2e2:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b2e6:	8b 04 8d 20 84 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd7be0]
c000b2ed:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b2f3:	53                   	push   ebx
c000b2f4:	53                   	push   ebx
c000b2f5:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b2f7:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b2fd:	50                   	push   eax
c000b2fe:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000b301:	83 c4 10             	add    esp,0x10
c000b304:	83 c4 08             	add    esp,0x8
c000b307:	5b                   	pop    ebx
c000b308:	c3                   	ret    
c000b309:	90                   	nop

c000b30a <File::seek(unsigned long long)>:
c000b30a:	56                   	push   esi
c000b30b:	53                   	push   ebx
c000b30c:	b8 0b 00 00 00       	mov    eax,0xb
c000b311:	51                   	push   ecx
c000b312:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b316:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b31a:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b321:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b325:	83 fa 19             	cmp    edx,0x19
c000b328:	77 31                	ja     c000b35b <File::seek(unsigned long long)+0x51>
c000b32a:	8b 14 95 20 84 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7be0]
c000b331:	85 d2                	test   edx,edx
c000b333:	74 26                	je     c000b35b <File::seek(unsigned long long)+0x51>
c000b335:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b33b:	85 d2                	test   edx,edx
c000b33d:	74 1c                	je     c000b35b <File::seek(unsigned long long)+0x51>
c000b33f:	b8 05 00 00 00       	mov    eax,0x5
c000b344:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b348:	74 11                	je     c000b35b <File::seek(unsigned long long)+0x51>
c000b34a:	8b 02                	mov    eax,DWORD PTR [edx]
c000b34c:	53                   	push   ebx
c000b34d:	51                   	push   ecx
c000b34e:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b354:	52                   	push   edx
c000b355:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b358:	83 c4 10             	add    esp,0x10
c000b35b:	5a                   	pop    edx
c000b35c:	5b                   	pop    ebx
c000b35d:	5e                   	pop    esi
c000b35e:	c3                   	ret    
c000b35f:	90                   	nop

c000b360 <File::tell(unsigned long long*)>:
c000b360:	83 ec 0c             	sub    esp,0xc
c000b363:	b8 0b 00 00 00       	mov    eax,0xb
c000b368:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b36c:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b373:	83 fa 19             	cmp    edx,0x19
c000b376:	77 34                	ja     c000b3ac <File::tell(unsigned long long*)+0x4c>
c000b378:	8b 14 95 20 84 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7be0]
c000b37f:	85 d2                	test   edx,edx
c000b381:	74 29                	je     c000b3ac <File::tell(unsigned long long*)+0x4c>
c000b383:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b389:	85 d2                	test   edx,edx
c000b38b:	74 1f                	je     c000b3ac <File::tell(unsigned long long*)+0x4c>
c000b38d:	b8 05 00 00 00       	mov    eax,0x5
c000b392:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b396:	74 14                	je     c000b3ac <File::tell(unsigned long long*)+0x4c>
c000b398:	50                   	push   eax
c000b399:	8b 02                	mov    eax,DWORD PTR [edx]
c000b39b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b39f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b3a5:	52                   	push   edx
c000b3a6:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000b3a9:	83 c4 10             	add    esp,0x10
c000b3ac:	83 c4 0c             	add    esp,0xc
c000b3af:	c3                   	ret    

c000b3b0 <File::rewind()>:
c000b3b0:	83 ec 10             	sub    esp,0x10
c000b3b3:	6a 00                	push   0x0
c000b3b5:	6a 00                	push   0x0
c000b3b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3bb:	e8 4a ff ff ff       	call   c000b30a <File::seek(unsigned long long)>
c000b3c0:	83 c4 1c             	add    esp,0x1c
c000b3c3:	c3                   	ret    

c000b3c4 <File::unlink()>:
c000b3c4:	83 ec 0c             	sub    esp,0xc
c000b3c7:	b8 0b 00 00 00       	mov    eax,0xb
c000b3cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b3d0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b3d7:	83 f9 19             	cmp    ecx,0x19
c000b3da:	77 2f                	ja     c000b40b <File::unlink()+0x47>
c000b3dc:	8b 0c 8d 20 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7be0]
c000b3e3:	85 c9                	test   ecx,ecx
c000b3e5:	74 24                	je     c000b40b <File::unlink()+0x47>
c000b3e7:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b3ed:	85 c9                	test   ecx,ecx
c000b3ef:	74 1a                	je     c000b40b <File::unlink()+0x47>
c000b3f1:	b8 06 00 00 00       	mov    eax,0x6
c000b3f6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b3fa:	75 0f                	jne    c000b40b <File::unlink()+0x47>
c000b3fc:	83 c2 0d             	add    edx,0xd
c000b3ff:	50                   	push   eax
c000b400:	50                   	push   eax
c000b401:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b403:	52                   	push   edx
c000b404:	51                   	push   ecx
c000b405:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b408:	83 c4 10             	add    esp,0x10
c000b40b:	83 c4 0c             	add    esp,0xc
c000b40e:	c3                   	ret    
c000b40f:	90                   	nop

c000b410 <File::rename(char const*)>:
c000b410:	83 ec 0c             	sub    esp,0xc
c000b413:	b8 0b 00 00 00       	mov    eax,0xb
c000b418:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b41c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b423:	83 f9 19             	cmp    ecx,0x19
c000b426:	77 32                	ja     c000b45a <File::rename(char const*)+0x4a>
c000b428:	8b 0c 8d 20 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7be0]
c000b42f:	85 c9                	test   ecx,ecx
c000b431:	74 27                	je     c000b45a <File::rename(char const*)+0x4a>
c000b433:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b439:	85 c9                	test   ecx,ecx
c000b43b:	74 1d                	je     c000b45a <File::rename(char const*)+0x4a>
c000b43d:	b8 06 00 00 00       	mov    eax,0x6
c000b442:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b446:	75 12                	jne    c000b45a <File::rename(char const*)+0x4a>
c000b448:	83 c2 0d             	add    edx,0xd
c000b44b:	50                   	push   eax
c000b44c:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b44e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b452:	52                   	push   edx
c000b453:	51                   	push   ecx
c000b454:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b457:	83 c4 10             	add    esp,0x10
c000b45a:	83 c4 0c             	add    esp,0xc
c000b45d:	c3                   	ret    

c000b45e <File::chfatattr(unsigned char, unsigned char)>:
c000b45e:	57                   	push   edi
c000b45f:	b8 0b 00 00 00       	mov    eax,0xb
c000b464:	56                   	push   esi
c000b465:	53                   	push   ebx
c000b466:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b46a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b46e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b475:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b479:	83 f9 19             	cmp    ecx,0x19
c000b47c:	77 37                	ja     c000b4b5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b47e:	8b 0c 8d 20 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7be0]
c000b485:	85 c9                	test   ecx,ecx
c000b487:	74 2c                	je     c000b4b5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b489:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b48f:	85 c9                	test   ecx,ecx
c000b491:	74 22                	je     c000b4b5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b493:	b8 06 00 00 00       	mov    eax,0x6
c000b498:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b49c:	75 17                	jne    c000b4b5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b49e:	8b 39                	mov    edi,DWORD PTR [ecx]
c000b4a0:	89 f0                	mov    eax,esi
c000b4a2:	83 c2 0d             	add    edx,0xd
c000b4a5:	0f b6 f0             	movzx  esi,al
c000b4a8:	0f b6 db             	movzx  ebx,bl
c000b4ab:	56                   	push   esi
c000b4ac:	53                   	push   ebx
c000b4ad:	52                   	push   edx
c000b4ae:	51                   	push   ecx
c000b4af:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000b4b2:	83 c4 10             	add    esp,0x10
c000b4b5:	5b                   	pop    ebx
c000b4b6:	5e                   	pop    esi
c000b4b7:	5f                   	pop    edi
c000b4b8:	c3                   	ret    
c000b4b9:	90                   	nop

c000b4ba <File::exists()>:
c000b4ba:	83 ec 0c             	sub    esp,0xc
c000b4bd:	31 c0                	xor    eax,eax
c000b4bf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b4c3:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b4ca:	83 f9 19             	cmp    ecx,0x19
c000b4cd:	77 24                	ja     c000b4f3 <File::exists()+0x39>
c000b4cf:	8b 0c 8d 20 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7be0]
c000b4d6:	85 c9                	test   ecx,ecx
c000b4d8:	74 19                	je     c000b4f3 <File::exists()+0x39>
c000b4da:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b4e0:	85 c9                	test   ecx,ecx
c000b4e2:	74 0f                	je     c000b4f3 <File::exists()+0x39>
c000b4e4:	83 c2 0d             	add    edx,0xd
c000b4e7:	50                   	push   eax
c000b4e8:	50                   	push   eax
c000b4e9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b4eb:	52                   	push   edx
c000b4ec:	51                   	push   ecx
c000b4ed:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b4f0:	83 c4 10             	add    esp,0x10
c000b4f3:	83 c4 0c             	add    esp,0xc
c000b4f6:	c3                   	ret    
c000b4f7:	90                   	nop

c000b4f8 <File::stat(unsigned long long*, bool*)>:
c000b4f8:	56                   	push   esi
c000b4f9:	53                   	push   ebx
c000b4fa:	50                   	push   eax
c000b4fb:	b8 0b 00 00 00       	mov    eax,0xb
c000b500:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b504:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b508:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b50f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b513:	83 f9 19             	cmp    ecx,0x19
c000b516:	77 3d                	ja     c000b555 <File::stat(unsigned long long*, bool*)+0x5d>
c000b518:	8b 0c 8d 20 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7be0]
c000b51f:	85 c9                	test   ecx,ecx
c000b521:	74 32                	je     c000b555 <File::stat(unsigned long long*, bool*)+0x5d>
c000b523:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b529:	85 c9                	test   ecx,ecx
c000b52b:	74 28                	je     c000b555 <File::stat(unsigned long long*, bool*)+0x5d>
c000b52d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b52f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b533:	74 13                	je     c000b548 <File::stat(unsigned long long*, bool*)+0x50>
c000b535:	83 ec 04             	sub    esp,0x4
c000b538:	56                   	push   esi
c000b539:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b53f:	51                   	push   ecx
c000b540:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000b543:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000b546:	eb 0a                	jmp    c000b552 <File::stat(unsigned long long*, bool*)+0x5a>
c000b548:	53                   	push   ebx
c000b549:	83 c2 0d             	add    edx,0xd
c000b54c:	56                   	push   esi
c000b54d:	52                   	push   edx
c000b54e:	51                   	push   ecx
c000b54f:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000b552:	83 c4 10             	add    esp,0x10
c000b555:	5a                   	pop    edx
c000b556:	5b                   	pop    ebx
c000b557:	5e                   	pop    esi
c000b558:	c3                   	ret    

c000b559 <Fs::setcwd(Process*, char*)>:
c000b559:	55                   	push   ebp
c000b55a:	57                   	push   edi
c000b55b:	56                   	push   esi
c000b55c:	53                   	push   ebx
c000b55d:	81 ec 20 02 00 00    	sub    esp,0x220
c000b563:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000b56a:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000b570:	57                   	push   edi
c000b571:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000b578:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000b57c:	56                   	push   esi
c000b57d:	e8 58 fa ff ff       	call   c000afda <Fs::standardiseFiles(char*, char const*, char const*)>
c000b582:	89 34 24             	mov    DWORD PTR [esp],esi
c000b585:	e8 e6 4f ff ff       	call   c0000570 <strlen>
c000b58a:	83 c4 10             	add    esp,0x10
c000b58d:	83 f8 02             	cmp    eax,0x2
c000b590:	77 15                	ja     c000b5a7 <Fs::setcwd(Process*, char*)+0x4e>
c000b592:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000b597:	83 eb 41             	sub    ebx,0x41
c000b59a:	8b 04 9d 20 84 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd7be0]
c000b5a1:	85 c0                	test   eax,eax
c000b5a3:	75 1c                	jne    c000b5c1 <Fs::setcwd(Process*, char*)+0x68>
c000b5a5:	eb 2f                	jmp    c000b5d6 <Fs::setcwd(Process*, char*)+0x7d>
c000b5a7:	83 ec 0c             	sub    esp,0xc
c000b5aa:	56                   	push   esi
c000b5ab:	e8 c0 4f ff ff       	call   c0000570 <strlen>
c000b5b0:	83 c4 10             	add    esp,0x10
c000b5b3:	83 f8 03             	cmp    eax,0x3
c000b5b6:	75 57                	jne    c000b60f <Fs::setcwd(Process*, char*)+0xb6>
c000b5b8:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000b5bd:	75 50                	jne    c000b60f <Fs::setcwd(Process*, char*)+0xb6>
c000b5bf:	eb d1                	jmp    c000b592 <Fs::setcwd(Process*, char*)+0x39>
c000b5c1:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000b5c8:	75 0c                	jne    c000b5d6 <Fs::setcwd(Process*, char*)+0x7d>
c000b5ca:	83 ec 0c             	sub    esp,0xc
c000b5cd:	50                   	push   eax
c000b5ce:	e8 8f 1d 00 00       	call   c000d362 <LogicalDisk::mount()>
c000b5d3:	83 c4 10             	add    esp,0x10
c000b5d6:	b8 03 00 00 00       	mov    eax,0x3
c000b5db:	83 fb 19             	cmp    ebx,0x19
c000b5de:	0f 87 c6 00 00 00    	ja     c000b6aa <Fs::setcwd(Process*, char*)+0x151>
c000b5e4:	8b 14 9d 20 84 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd7be0]
c000b5eb:	b8 05 00 00 00       	mov    eax,0x5
c000b5f0:	85 d2                	test   edx,edx
c000b5f2:	0f 84 b2 00 00 00    	je     c000b6aa <Fs::setcwd(Process*, char*)+0x151>
c000b5f8:	b8 06 00 00 00       	mov    eax,0x6
c000b5fd:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000b604:	0f 85 92 00 00 00    	jne    c000b69c <Fs::setcwd(Process*, char*)+0x143>
c000b60a:	e9 9b 00 00 00       	jmp    c000b6aa <Fs::setcwd(Process*, char*)+0x151>
c000b60f:	83 ec 0c             	sub    esp,0xc
c000b612:	68 14 01 00 00       	push   0x114
c000b617:	e8 92 c4 ff ff       	call   c0007aae <malloc>
c000b61c:	83 c4 0c             	add    esp,0xc
c000b61f:	89 c3                	mov    ebx,eax
c000b621:	55                   	push   ebp
c000b622:	56                   	push   esi
c000b623:	50                   	push   eax
c000b624:	e8 67 fb ff ff       	call   c000b190 <File::File(char const*, Process*)>
c000b629:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000b62e:	83 c4 0c             	add    esp,0xc
c000b631:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000b635:	50                   	push   eax
c000b636:	8d 44 24 10          	lea    eax,[esp+0x10]
c000b63a:	50                   	push   eax
c000b63b:	53                   	push   ebx
c000b63c:	e8 b7 fe ff ff       	call   c000b4f8 <File::stat(unsigned long long*, bool*)>
c000b641:	83 c4 10             	add    esp,0x10
c000b644:	83 f8 02             	cmp    eax,0x2
c000b647:	74 27                	je     c000b670 <Fs::setcwd(Process*, char*)+0x117>
c000b649:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b64e:	75 1c                	jne    c000b66c <Fs::setcwd(Process*, char*)+0x113>
c000b650:	b8 02 00 00 00       	mov    eax,0x2
c000b655:	85 db                	test   ebx,ebx
c000b657:	74 51                	je     c000b6aa <Fs::setcwd(Process*, char*)+0x151>
c000b659:	83 ec 0c             	sub    esp,0xc
c000b65c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b65e:	53                   	push   ebx
c000b65f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b662:	83 c4 10             	add    esp,0x10
c000b665:	b8 02 00 00 00       	mov    eax,0x2
c000b66a:	eb 3e                	jmp    c000b6aa <Fs::setcwd(Process*, char*)+0x151>
c000b66c:	85 c0                	test   eax,eax
c000b66e:	74 1c                	je     c000b68c <Fs::setcwd(Process*, char*)+0x133>
c000b670:	b8 01 00 00 00       	mov    eax,0x1
c000b675:	85 db                	test   ebx,ebx
c000b677:	74 31                	je     c000b6aa <Fs::setcwd(Process*, char*)+0x151>
c000b679:	83 ec 0c             	sub    esp,0xc
c000b67c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b67e:	53                   	push   ebx
c000b67f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b682:	83 c4 10             	add    esp,0x10
c000b685:	b8 01 00 00 00       	mov    eax,0x1
c000b68a:	eb 1e                	jmp    c000b6aa <Fs::setcwd(Process*, char*)+0x151>
c000b68c:	85 db                	test   ebx,ebx
c000b68e:	74 0c                	je     c000b69c <Fs::setcwd(Process*, char*)+0x143>
c000b690:	83 ec 0c             	sub    esp,0xc
c000b693:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b695:	53                   	push   ebx
c000b696:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b699:	83 c4 10             	add    esp,0x10
c000b69c:	50                   	push   eax
c000b69d:	50                   	push   eax
c000b69e:	56                   	push   esi
c000b69f:	57                   	push   edi
c000b6a0:	e8 9b 4f ff ff       	call   c0000640 <strcpy>
c000b6a5:	83 c4 10             	add    esp,0x10
c000b6a8:	31 c0                	xor    eax,eax
c000b6aa:	81 c4 1c 02 00 00    	add    esp,0x21c
c000b6b0:	5b                   	pop    ebx
c000b6b1:	5e                   	pop    esi
c000b6b2:	5f                   	pop    edi
c000b6b3:	5d                   	pop    ebp
c000b6b4:	c3                   	ret    
c000b6b5:	90                   	nop

c000b6b6 <Directory::Directory(char const*, Process*)>:
c000b6b6:	83 ec 0c             	sub    esp,0xc
c000b6b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6bd:	83 ec 08             	sub    esp,0x8
c000b6c0:	6a 00                	push   0x0
c000b6c2:	50                   	push   eax
c000b6c3:	e8 ea da ff ff       	call   c00091b2 <UnixFile::UnixFile(int)>
c000b6c8:	83 c4 10             	add    esp,0x10
c000b6cb:	ba bc 0a 02 c0       	mov    edx,0xc0020abc
c000b6d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6d4:	89 10                	mov    DWORD PTR [eax],edx
c000b6d6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b6da:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b6e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6e4:	83 c0 0d             	add    eax,0xd
c000b6e7:	83 ec 04             	sub    esp,0x4
c000b6ea:	52                   	push   edx
c000b6eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6ef:	50                   	push   eax
c000b6f0:	e8 e5 f8 ff ff       	call   c000afda <Fs::standardiseFiles(char*, char const*, char const*)>
c000b6f5:	83 c4 10             	add    esp,0x10
c000b6f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6fc:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b6ff:	83 e8 41             	sub    eax,0x41
c000b702:	88 c2                	mov    dl,al
c000b704:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b708:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b70e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b712:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b71a:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b720:	0f b6 c0             	movzx  eax,al
c000b723:	8b 04 85 20 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7be0]
c000b72a:	85 c0                	test   eax,eax
c000b72c:	74 3e                	je     c000b76c <Directory::Directory(char const*, Process*)+0xb6>
c000b72e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b732:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b738:	0f b6 c0             	movzx  eax,al
c000b73b:	8b 04 85 20 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7be0]
c000b742:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b748:	85 c0                	test   eax,eax
c000b74a:	75 20                	jne    c000b76c <Directory::Directory(char const*, Process*)+0xb6>
c000b74c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b750:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b756:	0f b6 c0             	movzx  eax,al
c000b759:	8b 04 85 20 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7be0]
c000b760:	83 ec 0c             	sub    esp,0xc
c000b763:	50                   	push   eax
c000b764:	e8 f9 1b 00 00       	call   c000d362 <LogicalDisk::mount()>
c000b769:	83 c4 10             	add    esp,0x10
c000b76c:	90                   	nop
c000b76d:	83 c4 0c             	add    esp,0xc
c000b770:	c3                   	ret    
c000b771:	90                   	nop

c000b772 <Directory::open()>:
c000b772:	53                   	push   ebx
c000b773:	b8 0b 00 00 00       	mov    eax,0xb
c000b778:	83 ec 08             	sub    esp,0x8
c000b77b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b77f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b786:	83 fa 19             	cmp    edx,0x19
c000b789:	77 3d                	ja     c000b7c8 <Directory::open()+0x56>
c000b78b:	8b 14 95 20 84 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7be0]
c000b792:	85 d2                	test   edx,edx
c000b794:	74 32                	je     c000b7c8 <Directory::open()+0x56>
c000b796:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b79c:	85 d2                	test   edx,edx
c000b79e:	74 28                	je     c000b7c8 <Directory::open()+0x56>
c000b7a0:	b8 06 00 00 00       	mov    eax,0x6
c000b7a5:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b7a9:	75 1d                	jne    c000b7c8 <Directory::open()+0x56>
c000b7ab:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b7b1:	50                   	push   eax
c000b7b2:	8b 02                	mov    eax,DWORD PTR [edx]
c000b7b4:	51                   	push   ecx
c000b7b5:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b7b8:	51                   	push   ecx
c000b7b9:	52                   	push   edx
c000b7ba:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b7bd:	83 c4 10             	add    esp,0x10
c000b7c0:	85 c0                	test   eax,eax
c000b7c2:	75 04                	jne    c000b7c8 <Directory::open()+0x56>
c000b7c4:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b7c8:	83 c4 08             	add    esp,0x8
c000b7cb:	5b                   	pop    ebx
c000b7cc:	c3                   	ret    
c000b7cd:	90                   	nop

c000b7ce <Directory::close()>:
c000b7ce:	53                   	push   ebx
c000b7cf:	b8 0b 00 00 00       	mov    eax,0xb
c000b7d4:	83 ec 08             	sub    esp,0x8
c000b7d7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b7db:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b7e2:	83 f9 19             	cmp    ecx,0x19
c000b7e5:	77 41                	ja     c000b828 <Directory::close()+0x5a>
c000b7e7:	8b 1c 8d 20 84 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd7be0]
c000b7ee:	85 db                	test   ebx,ebx
c000b7f0:	74 36                	je     c000b828 <Directory::close()+0x5a>
c000b7f2:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b7f9:	74 2d                	je     c000b828 <Directory::close()+0x5a>
c000b7fb:	b8 05 00 00 00       	mov    eax,0x5
c000b800:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b804:	74 22                	je     c000b828 <Directory::close()+0x5a>
c000b806:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b80a:	8b 04 8d 20 84 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd7be0]
c000b811:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b817:	53                   	push   ebx
c000b818:	53                   	push   ebx
c000b819:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b81b:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b821:	50                   	push   eax
c000b822:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000b825:	83 c4 10             	add    esp,0x10
c000b828:	83 c4 08             	add    esp,0x8
c000b82b:	5b                   	pop    ebx
c000b82c:	c3                   	ret    
c000b82d:	90                   	nop

c000b82e <Directory::unlink()>:
c000b82e:	83 ec 0c             	sub    esp,0xc
c000b831:	b8 0b 00 00 00       	mov    eax,0xb
c000b836:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b83a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b841:	83 f9 19             	cmp    ecx,0x19
c000b844:	77 2f                	ja     c000b875 <Directory::unlink()+0x47>
c000b846:	8b 0c 8d 20 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7be0]
c000b84d:	85 c9                	test   ecx,ecx
c000b84f:	74 24                	je     c000b875 <Directory::unlink()+0x47>
c000b851:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b857:	85 c9                	test   ecx,ecx
c000b859:	74 1a                	je     c000b875 <Directory::unlink()+0x47>
c000b85b:	b8 06 00 00 00       	mov    eax,0x6
c000b860:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b864:	75 0f                	jne    c000b875 <Directory::unlink()+0x47>
c000b866:	83 c2 0d             	add    edx,0xd
c000b869:	50                   	push   eax
c000b86a:	50                   	push   eax
c000b86b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b86d:	52                   	push   edx
c000b86e:	51                   	push   ecx
c000b86f:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b872:	83 c4 10             	add    esp,0x10
c000b875:	83 c4 0c             	add    esp,0xc
c000b878:	c3                   	ret    
c000b879:	90                   	nop

c000b87a <Directory::rename(char const*)>:
c000b87a:	83 ec 0c             	sub    esp,0xc
c000b87d:	b8 0b 00 00 00       	mov    eax,0xb
c000b882:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b886:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b88d:	83 f9 19             	cmp    ecx,0x19
c000b890:	77 32                	ja     c000b8c4 <Directory::rename(char const*)+0x4a>
c000b892:	8b 0c 8d 20 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7be0]
c000b899:	85 c9                	test   ecx,ecx
c000b89b:	74 27                	je     c000b8c4 <Directory::rename(char const*)+0x4a>
c000b89d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b8a3:	85 c9                	test   ecx,ecx
c000b8a5:	74 1d                	je     c000b8c4 <Directory::rename(char const*)+0x4a>
c000b8a7:	b8 06 00 00 00       	mov    eax,0x6
c000b8ac:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b8b0:	75 12                	jne    c000b8c4 <Directory::rename(char const*)+0x4a>
c000b8b2:	83 c2 0d             	add    edx,0xd
c000b8b5:	50                   	push   eax
c000b8b6:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b8b8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b8bc:	52                   	push   edx
c000b8bd:	51                   	push   ecx
c000b8be:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b8c1:	83 c4 10             	add    esp,0x10
c000b8c4:	83 c4 0c             	add    esp,0xc
c000b8c7:	c3                   	ret    

c000b8c8 <Directory::exists()>:
c000b8c8:	83 ec 0c             	sub    esp,0xc
c000b8cb:	31 c0                	xor    eax,eax
c000b8cd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b8d1:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b8d8:	83 f9 19             	cmp    ecx,0x19
c000b8db:	77 24                	ja     c000b901 <Directory::exists()+0x39>
c000b8dd:	8b 0c 8d 20 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7be0]
c000b8e4:	85 c9                	test   ecx,ecx
c000b8e6:	74 19                	je     c000b901 <Directory::exists()+0x39>
c000b8e8:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b8ee:	85 c9                	test   ecx,ecx
c000b8f0:	74 0f                	je     c000b901 <Directory::exists()+0x39>
c000b8f2:	83 c2 0d             	add    edx,0xd
c000b8f5:	50                   	push   eax
c000b8f6:	50                   	push   eax
c000b8f7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b8f9:	52                   	push   edx
c000b8fa:	51                   	push   ecx
c000b8fb:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b8fe:	83 c4 10             	add    esp,0x10
c000b901:	83 c4 0c             	add    esp,0xc
c000b904:	c3                   	ret    
c000b905:	90                   	nop

c000b906 <Directory::read(dirent*)>:
c000b906:	83 ec 1c             	sub    esp,0x1c
c000b909:	b8 0b 00 00 00       	mov    eax,0xb
c000b90e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b912:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b919:	83 f9 19             	cmp    ecx,0x19
c000b91c:	77 30                	ja     c000b94e <Directory::read(dirent*)+0x48>
c000b91e:	8b 0c 8d 20 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7be0]
c000b925:	85 c9                	test   ecx,ecx
c000b927:	74 25                	je     c000b94e <Directory::read(dirent*)+0x48>
c000b929:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000b930:	74 1c                	je     c000b94e <Directory::read(dirent*)+0x48>
c000b932:	83 ec 0c             	sub    esp,0xc
c000b935:	8b 02                	mov    eax,DWORD PTR [edx]
c000b937:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000b93b:	51                   	push   ecx
c000b93c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b940:	6a 00                	push   0x0
c000b942:	68 10 01 00 00       	push   0x110
c000b947:	52                   	push   edx
c000b948:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b94b:	83 c4 20             	add    esp,0x20
c000b94e:	83 c4 1c             	add    esp,0x1c
c000b951:	c3                   	ret    

c000b952 <Directory::create()>:
c000b952:	83 ec 0c             	sub    esp,0xc
c000b955:	b8 0b 00 00 00       	mov    eax,0xb
c000b95a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b95e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b965:	83 f9 19             	cmp    ecx,0x19
c000b968:	77 2f                	ja     c000b999 <Directory::create()+0x47>
c000b96a:	8b 0c 8d 20 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7be0]
c000b971:	85 c9                	test   ecx,ecx
c000b973:	74 24                	je     c000b999 <Directory::create()+0x47>
c000b975:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b97b:	85 c9                	test   ecx,ecx
c000b97d:	74 1a                	je     c000b999 <Directory::create()+0x47>
c000b97f:	b8 06 00 00 00       	mov    eax,0x6
c000b984:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b988:	75 0f                	jne    c000b999 <Directory::create()+0x47>
c000b98a:	83 c2 0d             	add    edx,0xd
c000b98d:	50                   	push   eax
c000b98e:	50                   	push   eax
c000b98f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b991:	52                   	push   edx
c000b992:	51                   	push   ecx
c000b993:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b996:	83 c4 10             	add    esp,0x10
c000b999:	83 c4 0c             	add    esp,0xc
c000b99c:	c3                   	ret    
c000b99d:	90                   	nop

c000b99e <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b99e:	b8 0a 00 00 00       	mov    eax,0xa
c000b9a3:	c3                   	ret    

c000b9a4 <Bus::Bus(char const*)>:
c000b9a4:	83 ec 0c             	sub    esp,0xc
c000b9a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9ab:	83 ec 08             	sub    esp,0x8
c000b9ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9b2:	50                   	push   eax
c000b9b3:	e8 22 08 00 00       	call   c000c1da <Device::Device(char const*)>
c000b9b8:	83 c4 10             	add    esp,0x10
c000b9bb:	ba d8 0a 02 c0       	mov    edx,0xc0020ad8
c000b9c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9c4:	89 10                	mov    DWORD PTR [eax],edx
c000b9c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9ca:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b9d4:	90                   	nop
c000b9d5:	83 c4 0c             	add    esp,0xc
c000b9d8:	c3                   	ret    
c000b9d9:	90                   	nop
c000b9da:	66 90                	xchg   ax,ax

c000b9dc <Bus::~Bus()>:
c000b9dc:	83 ec 0c             	sub    esp,0xc
c000b9df:	ba d8 0a 02 c0       	mov    edx,0xc0020ad8
c000b9e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9e8:	89 10                	mov    DWORD PTR [eax],edx
c000b9ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9ee:	83 ec 0c             	sub    esp,0xc
c000b9f1:	50                   	push   eax
c000b9f2:	e8 4d 05 00 00       	call   c000bf44 <Device::~Device()>
c000b9f7:	83 c4 10             	add    esp,0x10
c000b9fa:	90                   	nop
c000b9fb:	83 c4 0c             	add    esp,0xc
c000b9fe:	c3                   	ret    
c000b9ff:	90                   	nop

c000ba00 <Bus::~Bus()>:
c000ba00:	83 ec 0c             	sub    esp,0xc
c000ba03:	83 ec 0c             	sub    esp,0xc
c000ba06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba0a:	e8 cd ff ff ff       	call   c000b9dc <Bus::~Bus()>
c000ba0f:	83 c4 10             	add    esp,0x10
c000ba12:	83 ec 08             	sub    esp,0x8
c000ba15:	68 58 01 00 00       	push   0x158
c000ba1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba1e:	e8 e9 ed ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000ba23:	83 c4 10             	add    esp,0x10
c000ba26:	83 c4 0c             	add    esp,0xc
c000ba29:	c3                   	ret    

c000ba2a <beepThread(void*)>:
c000ba2a:	83 ec 0c             	sub    esp,0xc
c000ba2d:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c000ba32:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ba36:	48                   	dec    eax
c000ba37:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c000ba3c:	75 01                	jne    c000ba3f <beepThread(void*)+0x15>
c000ba3e:	fb                   	sti    
c000ba3f:	83 ec 0c             	sub    esp,0xc
c000ba42:	6b c2 0a             	imul   eax,edx,0xa
c000ba45:	50                   	push   eax
c000ba46:	e8 f1 9c 00 00       	call   c001573c <milliTenthSleep(unsigned int)>
c000ba4b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000ba52:	e8 40 bc 00 00       	call   c0017697 <HalMakeBeep(int)>
c000ba57:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000ba5f:	83 c4 1c             	add    esp,0x1c
c000ba62:	e9 b9 9b 00 00       	jmp    c0015620 <blockTask(TaskState)>

c000ba67 <Krnl::beep(int, int, bool)>:
c000ba67:	56                   	push   esi
c000ba68:	53                   	push   ebx
c000ba69:	83 ec 10             	sub    esp,0x10
c000ba6c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000ba70:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ba74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba78:	e8 1a bc 00 00       	call   c0017697 <HalMakeBeep(int)>
c000ba7d:	83 c4 10             	add    esp,0x10
c000ba80:	89 f0                	mov    eax,esi
c000ba82:	84 c0                	test   al,al
c000ba84:	74 1e                	je     c000baa4 <Krnl::beep(int, int, bool)+0x3d>
c000ba86:	83 ec 0c             	sub    esp,0xc
c000ba89:	6b db 0a             	imul   ebx,ebx,0xa
c000ba8c:	53                   	push   ebx
c000ba8d:	e8 aa 9c 00 00       	call   c001573c <milliTenthSleep(unsigned int)>
c000ba92:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000ba9a:	83 c4 14             	add    esp,0x14
c000ba9d:	5b                   	pop    ebx
c000ba9e:	5e                   	pop    esi
c000ba9f:	e9 f3 bb 00 00       	jmp    c0017697 <HalMakeBeep(int)>
c000baa4:	68 e6 00 00 00       	push   0xe6
c000baa9:	53                   	push   ebx
c000baaa:	68 2a ba 00 c0       	push   0xc000ba2a
c000baaf:	ff 35 90 91 02 c0    	push   DWORD PTR ds:0xc0029190
c000bab5:	e8 02 97 00 00       	call   c00151bc <Process::createThread(void (*)(void*), void*, int)>
c000baba:	83 c4 14             	add    esp,0x14
c000babd:	5b                   	pop    ebx
c000babe:	5e                   	pop    esi
c000babf:	c3                   	ret    

c000bac0 <User::loadClockSettings(int)>:
c000bac0:	53                   	push   ebx
c000bac1:	83 ec 14             	sub    esp,0x14
c000bac4:	68 14 01 00 00       	push   0x114
c000bac9:	e8 e0 bf ff ff       	call   c0007aae <malloc>
c000bace:	83 c4 0c             	add    esp,0xc
c000bad1:	89 c3                	mov    ebx,eax
c000bad3:	ff 35 90 91 02 c0    	push   DWORD PTR ds:0xc0029190
c000bad9:	68 fc 0a 02 c0       	push   0xc0020afc
c000bade:	50                   	push   eax
c000badf:	e8 ac f6 ff ff       	call   c000b190 <File::File(char const*, Process*)>
c000bae4:	58                   	pop    eax
c000bae5:	5a                   	pop    edx
c000bae6:	6a 01                	push   0x1
c000bae8:	53                   	push   ebx
c000bae9:	e8 5e f7 ff ff       	call   c000b24c <File::open(FileOpenMode)>
c000baee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000baf1:	e8 b4 f7 ff ff       	call   c000b2aa <File::close()>
c000baf6:	83 c4 10             	add    esp,0x10
c000baf9:	85 db                	test   ebx,ebx
c000bafb:	74 0f                	je     c000bb0c <User::loadClockSettings(int)+0x4c>
c000bafd:	8b 03                	mov    eax,DWORD PTR [ebx]
c000baff:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000bb03:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000bb06:	83 c4 08             	add    esp,0x8
c000bb09:	5b                   	pop    ebx
c000bb0a:	ff e0                	jmp    eax
c000bb0c:	83 c4 08             	add    esp,0x8
c000bb0f:	5b                   	pop    ebx
c000bb10:	c3                   	ret    
c000bb11:	90                   	nop

c000bb12 <Clock::Clock(char const*)>:
c000bb12:	83 ec 0c             	sub    esp,0xc
c000bb15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb19:	83 ec 08             	sub    esp,0x8
c000bb1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb20:	50                   	push   eax
c000bb21:	e8 b4 06 00 00       	call   c000c1da <Device::Device(char const*)>
c000bb26:	83 c4 10             	add    esp,0x10
c000bb29:	ba 24 0b 02 c0       	mov    edx,0xc0020b24
c000bb2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb32:	89 10                	mov    DWORD PTR [eax],edx
c000bb34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb38:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000bb42:	90                   	nop
c000bb43:	83 c4 0c             	add    esp,0xc
c000bb46:	c3                   	ret    
c000bb47:	90                   	nop

c000bb48 <Clock::~Clock()>:
c000bb48:	83 ec 0c             	sub    esp,0xc
c000bb4b:	ba 24 0b 02 c0       	mov    edx,0xc0020b24
c000bb50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb54:	89 10                	mov    DWORD PTR [eax],edx
c000bb56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb5a:	83 ec 0c             	sub    esp,0xc
c000bb5d:	50                   	push   eax
c000bb5e:	e8 e1 03 00 00       	call   c000bf44 <Device::~Device()>
c000bb63:	83 c4 10             	add    esp,0x10
c000bb66:	90                   	nop
c000bb67:	83 c4 0c             	add    esp,0xc
c000bb6a:	c3                   	ret    
c000bb6b:	90                   	nop

c000bb6c <Clock::~Clock()>:
c000bb6c:	83 ec 0c             	sub    esp,0xc
c000bb6f:	83 ec 0c             	sub    esp,0xc
c000bb72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb76:	e8 cd ff ff ff       	call   c000bb48 <Clock::~Clock()>
c000bb7b:	83 c4 10             	add    esp,0x10
c000bb7e:	83 ec 08             	sub    esp,0x8
c000bb81:	68 58 01 00 00       	push   0x158
c000bb86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb8a:	e8 7d ec ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000bb8f:	83 c4 10             	add    esp,0x10
c000bb92:	83 c4 0c             	add    esp,0xc
c000bb95:	c3                   	ret    

c000bb96 <Clock::timeInSecondsLocal()>:
c000bb96:	53                   	push   ebx
c000bb97:	83 ec 14             	sub    esp,0x14
c000bb9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000bb9e:	8b 10                	mov    edx,DWORD PTR [eax]
c000bba0:	50                   	push   eax
c000bba1:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000bba4:	0f b6 0d b8 5f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0025fb8
c000bbab:	03 0d bc 5f 02 c0    	add    ecx,DWORD PTR ds:0xc0025fbc
c000bbb1:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000bbb7:	89 cb                	mov    ebx,ecx
c000bbb9:	c1 fb 1f             	sar    ebx,0x1f
c000bbbc:	01 c8                	add    eax,ecx
c000bbbe:	11 da                	adc    edx,ebx
c000bbc0:	83 c4 10             	add    esp,0x10
c000bbc3:	31 c9                	xor    ecx,ecx
c000bbc5:	80 3d b9 5f 02 c0 00 	cmp    BYTE PTR ds:0xc0025fb9,0x0
c000bbcc:	74 05                	je     c000bbd3 <Clock::timeInSecondsLocal()+0x3d>
c000bbce:	b9 08 07 00 00       	mov    ecx,0x708
c000bbd3:	31 db                	xor    ebx,ebx
c000bbd5:	01 c8                	add    eax,ecx
c000bbd7:	11 da                	adc    edx,ebx
c000bbd9:	83 c4 08             	add    esp,0x8
c000bbdc:	5b                   	pop    ebx
c000bbdd:	c3                   	ret    

c000bbde <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000bbde:	57                   	push   edi
c000bbdf:	56                   	push   esi
c000bbe0:	53                   	push   ebx
c000bbe1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bbe5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bbe9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bbeb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bbef:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000bbf2:	0f b6 05 b8 5f 02 c0 	movzx  eax,BYTE PTR ds:0xc0025fb8
c000bbf9:	03 05 bc 5f 02 c0    	add    eax,DWORD PTR ds:0xc0025fbc
c000bbff:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000bc05:	99                   	cdq    
c000bc06:	29 c6                	sub    esi,eax
c000bc08:	19 d7                	sbb    edi,edx
c000bc0a:	89 f0                	mov    eax,esi
c000bc0c:	89 fa                	mov    edx,edi
c000bc0e:	31 f6                	xor    esi,esi
c000bc10:	80 3d b9 5f 02 c0 00 	cmp    BYTE PTR ds:0xc0025fb9,0x0
c000bc17:	74 05                	je     c000bc1e <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000bc19:	be 08 07 00 00       	mov    esi,0x708
c000bc1e:	31 ff                	xor    edi,edi
c000bc20:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000bc24:	29 f0                	sub    eax,esi
c000bc26:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bc2a:	19 fa                	sbb    edx,edi
c000bc2c:	89 d8                	mov    eax,ebx
c000bc2e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bc32:	5b                   	pop    ebx
c000bc33:	5e                   	pop    esi
c000bc34:	5f                   	pop    edi
c000bc35:	ff e0                	jmp    eax

c000bc37 <datetimeToSeconds(datetime_t)>:
c000bc37:	55                   	push   ebp
c000bc38:	57                   	push   edi
c000bc39:	56                   	push   esi
c000bc3a:	53                   	push   ebx
c000bc3b:	83 ec 0c             	sub    esp,0xc
c000bc3e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bc42:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000bc46:	89 d6                	mov    esi,edx
c000bc48:	0f b6 c7             	movzx  eax,bh
c000bc4b:	c1 ee 10             	shr    esi,0x10
c000bc4e:	6b e8 3c             	imul   ebp,eax,0x3c
c000bc51:	81 ee 6c 07 00 00    	sub    esi,0x76c
c000bc57:	0f b6 ce             	movzx  ecx,dh
c000bc5a:	89 df                	mov    edi,ebx
c000bc5c:	49                   	dec    ecx
c000bc5d:	c1 ef 10             	shr    edi,0x10
c000bc60:	0f b6 db             	movzx  ebx,bl
c000bc63:	89 f8                	mov    eax,edi
c000bc65:	69 db 10 0e 00 00    	imul   ebx,ebx,0xe10
c000bc6b:	0f b6 f8             	movzx  edi,al
c000bc6e:	0f b6 d2             	movzx  edx,dl
c000bc71:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000bc75:	01 d8                	add    eax,ebx
c000bc77:	0f b7 de             	movzx  ebx,si
c000bc7a:	89 04 24             	mov    DWORD PTR [esp],eax
c000bc7d:	c1 f8 1f             	sar    eax,0x1f
c000bc80:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bc84:	0f b6 c1             	movzx  eax,cl
c000bc87:	8b 0c 85 60 0b 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdf4a0]
c000bc8e:	83 f8 01             	cmp    eax,0x1
c000bc91:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000bc95:	76 27                	jbe    c000bcbe <datetimeToSeconds(datetime_t)+0x87>
c000bc97:	83 e6 03             	and    esi,0x3
c000bc9a:	75 22                	jne    c000bcbe <datetimeToSeconds(datetime_t)+0x87>
c000bc9c:	31 d2                	xor    edx,edx
c000bc9e:	be 64 00 00 00       	mov    esi,0x64
c000bca3:	89 d8                	mov    eax,ebx
c000bca5:	f7 f6                	div    esi
c000bca7:	85 d2                	test   edx,edx
c000bca9:	75 12                	jne    c000bcbd <datetimeToSeconds(datetime_t)+0x86>
c000bcab:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000bcb1:	be 90 01 00 00       	mov    esi,0x190
c000bcb6:	99                   	cdq    
c000bcb7:	f7 fe                	idiv   esi
c000bcb9:	85 d2                	test   edx,edx
c000bcbb:	75 01                	jne    c000bcbe <datetimeToSeconds(datetime_t)+0x87>
c000bcbd:	41                   	inc    ecx
c000bcbe:	83 fb 46             	cmp    ebx,0x46
c000bcc1:	76 48                	jbe    c000bd0b <datetimeToSeconds(datetime_t)+0xd4>
c000bcc3:	be 46 00 00 00       	mov    esi,0x46
c000bcc8:	bf 64 00 00 00       	mov    edi,0x64
c000bccd:	bd 90 01 00 00       	mov    ebp,0x190
c000bcd2:	b8 6d 01 00 00       	mov    eax,0x16d
c000bcd7:	f7 c6 03 00 00 00    	test   esi,0x3
c000bcdd:	75 23                	jne    c000bd02 <datetimeToSeconds(datetime_t)+0xcb>
c000bcdf:	89 f0                	mov    eax,esi
c000bce1:	99                   	cdq    
c000bce2:	f7 ff                	idiv   edi
c000bce4:	b8 6e 01 00 00       	mov    eax,0x16e
c000bce9:	85 d2                	test   edx,edx
c000bceb:	75 15                	jne    c000bd02 <datetimeToSeconds(datetime_t)+0xcb>
c000bced:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000bcf3:	99                   	cdq    
c000bcf4:	f7 fd                	idiv   ebp
c000bcf6:	83 fa 01             	cmp    edx,0x1
c000bcf9:	19 c0                	sbb    eax,eax
c000bcfb:	f7 d0                	not    eax
c000bcfd:	05 6e 01 00 00       	add    eax,0x16e
c000bd02:	01 c1                	add    ecx,eax
c000bd04:	46                   	inc    esi
c000bd05:	39 de                	cmp    esi,ebx
c000bd07:	7c c9                	jl     c000bcd2 <datetimeToSeconds(datetime_t)+0x9b>
c000bd09:	eb 34                	jmp    c000bd3f <datetimeToSeconds(datetime_t)+0x108>
c000bd0b:	74 32                	je     c000bd3f <datetimeToSeconds(datetime_t)+0x108>
c000bd0d:	b8 45 00 00 00       	mov    eax,0x45
c000bd12:	89 c2                	mov    edx,eax
c000bd14:	83 e2 03             	and    edx,0x3
c000bd17:	39 d8                	cmp    eax,ebx
c000bd19:	7e 0f                	jle    c000bd2a <datetimeToSeconds(datetime_t)+0xf3>
c000bd1b:	83 fa 01             	cmp    edx,0x1
c000bd1e:	19 d2                	sbb    edx,edx
c000bd20:	48                   	dec    eax
c000bd21:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000bd28:	eb e8                	jmp    c000bd12 <datetimeToSeconds(datetime_t)+0xdb>
c000bd2a:	b8 6d 01 00 00       	mov    eax,0x16d
c000bd2f:	85 d2                	test   edx,edx
c000bd31:	75 0a                	jne    c000bd3d <datetimeToSeconds(datetime_t)+0x106>
c000bd33:	83 fb 01             	cmp    ebx,0x1
c000bd36:	19 c0                	sbb    eax,eax
c000bd38:	05 6e 01 00 00       	add    eax,0x16e
c000bd3d:	29 c1                	sub    ecx,eax
c000bd3f:	b8 80 51 01 00       	mov    eax,0x15180
c000bd44:	f7 e9                	imul   ecx
c000bd46:	03 04 24             	add    eax,DWORD PTR [esp]
c000bd49:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000bd4d:	83 c4 0c             	add    esp,0xc
c000bd50:	5b                   	pop    ebx
c000bd51:	5e                   	pop    esi
c000bd52:	5f                   	pop    edi
c000bd53:	5d                   	pop    ebp
c000bd54:	c3                   	ret    
c000bd55:	90                   	nop

c000bd56 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000bd56:	57                   	push   edi
c000bd57:	56                   	push   esi
c000bd58:	53                   	push   ebx
c000bd59:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bd5d:	8b 06                	mov    eax,DWORD PTR [esi]
c000bd5f:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000bd62:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd66:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd6a:	e8 c8 fe ff ff       	call   c000bc37 <datetimeToSeconds(datetime_t)>
c000bd6f:	59                   	pop    ecx
c000bd70:	0f b6 0d b8 5f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0025fb8
c000bd77:	5b                   	pop    ebx
c000bd78:	03 0d bc 5f 02 c0    	add    ecx,DWORD PTR ds:0xc0025fbc
c000bd7e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000bd84:	89 cb                	mov    ebx,ecx
c000bd86:	c1 fb 1f             	sar    ebx,0x1f
c000bd89:	29 c8                	sub    eax,ecx
c000bd8b:	19 da                	sbb    edx,ebx
c000bd8d:	31 c9                	xor    ecx,ecx
c000bd8f:	80 3d b9 5f 02 c0 00 	cmp    BYTE PTR ds:0xc0025fb9,0x0
c000bd96:	74 05                	je     c000bd9d <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000bd98:	b9 08 07 00 00       	mov    ecx,0x708
c000bd9d:	31 db                	xor    ebx,ebx
c000bd9f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000bda3:	29 c8                	sub    eax,ecx
c000bda5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bda9:	19 da                	sbb    edx,ebx
c000bdab:	89 f8                	mov    eax,edi
c000bdad:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bdb1:	5b                   	pop    ebx
c000bdb2:	5e                   	pop    esi
c000bdb3:	5f                   	pop    edi
c000bdb4:	ff e0                	jmp    eax

c000bdb6 <secondsToDatetime(unsigned long long)>:
c000bdb6:	55                   	push   ebp
c000bdb7:	57                   	push   edi
c000bdb8:	56                   	push   esi
c000bdb9:	53                   	push   ebx
c000bdba:	83 ec 1c             	sub    esp,0x1c
c000bdbd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000bdc1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000bdc5:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000bdc9:	6a 00                	push   0x0
c000bdcb:	68 80 51 01 00       	push   0x15180
c000bdd0:	55                   	push   ebp
c000bdd1:	57                   	push   edi
c000bdd2:	e8 39 2c 01 00       	call   c001ea10 <__udivdi3>
c000bdd7:	83 c4 10             	add    esp,0x10
c000bdda:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000bde0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bde4:	6a 00                	push   0x0
c000bde6:	68 80 51 01 00       	push   0x15180
c000bdeb:	55                   	push   ebp
c000bdec:	57                   	push   edi
c000bded:	bf 10 0e 00 00       	mov    edi,0xe10
c000bdf2:	e8 19 2d 01 00       	call   c001eb10 <__umoddi3>
c000bdf7:	83 c4 10             	add    esp,0x10
c000bdfa:	99                   	cdq    
c000bdfb:	f7 ff                	idiv   edi
c000bdfd:	bf 3c 00 00 00       	mov    edi,0x3c
c000be02:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000be05:	89 d0                	mov    eax,edx
c000be07:	99                   	cdq    
c000be08:	f7 ff                	idiv   edi
c000be0a:	85 db                	test   ebx,ebx
c000be0c:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000be0f:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000be12:	79 11                	jns    c000be25 <secondsToDatetime(unsigned long long)+0x6f>
c000be14:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000be18:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000be1e:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000be23:	eb 07                	jmp    c000be2c <secondsToDatetime(unsigned long long)+0x76>
c000be25:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000be2a:	89 d8                	mov    eax,ebx
c000be2c:	bf b4 05 00 00       	mov    edi,0x5b4
c000be31:	99                   	cdq    
c000be32:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000be37:	f7 f9                	idiv   ecx
c000be39:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000be3e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be42:	31 d2                	xor    edx,edx
c000be44:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000be4c:	01 c3                	add    ebx,eax
c000be4e:	89 d8                	mov    eax,ebx
c000be50:	f7 f1                	div    ecx
c000be52:	31 d2                	xor    edx,edx
c000be54:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000be57:	89 d8                	mov    eax,ebx
c000be59:	f7 f7                	div    edi
c000be5b:	31 d2                	xor    edx,edx
c000be5d:	29 c1                	sub    ecx,eax
c000be5f:	89 d8                	mov    eax,ebx
c000be61:	f7 f5                	div    ebp
c000be63:	bd 6d 01 00 00       	mov    ebp,0x16d
c000be68:	29 c1                	sub    ecx,eax
c000be6a:	31 d2                	xor    edx,edx
c000be6c:	89 c8                	mov    eax,ecx
c000be6e:	f7 f5                	div    ebp
c000be70:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000be75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000be79:	31 d2                	xor    edx,edx
c000be7b:	89 c8                	mov    eax,ecx
c000be7d:	f7 f5                	div    ebp
c000be7f:	31 d2                	xor    edx,edx
c000be81:	01 c3                	add    ebx,eax
c000be83:	89 c8                	mov    eax,ecx
c000be85:	f7 f7                	div    edi
c000be87:	bf 99 00 00 00       	mov    edi,0x99
c000be8c:	29 c3                	sub    ebx,eax
c000be8e:	31 d2                	xor    edx,edx
c000be90:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000be98:	29 c3                	sub    ebx,eax
c000be9a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000be9d:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000bea0:	bb 05 00 00 00       	mov    ebx,0x5
c000bea5:	83 c1 02             	add    ecx,0x2
c000bea8:	89 c8                	mov    eax,ecx
c000beaa:	f7 f7                	div    edi
c000beac:	31 d2                	xor    edx,edx
c000beae:	89 c7                	mov    edi,eax
c000beb0:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000beb6:	83 c0 02             	add    eax,0x2
c000beb9:	f7 f3                	div    ebx
c000bebb:	89 eb                	mov    ebx,ebp
c000bebd:	29 c3                	sub    ebx,eax
c000bebf:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000bec5:	88 1e                	mov    BYTE PTR [esi],bl
c000bec7:	19 c0                	sbb    eax,eax
c000bec9:	31 d2                	xor    edx,edx
c000becb:	83 e0 0c             	and    eax,0xc
c000bece:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000bed2:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000beda:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000bede:	83 f9 01             	cmp    ecx,0x1
c000bee1:	0f 96 c2             	setbe  dl
c000bee4:	41                   	inc    ecx
c000bee5:	01 d0                	add    eax,edx
c000bee7:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000beea:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000beee:	83 c4 1c             	add    esp,0x1c
c000bef1:	89 f0                	mov    eax,esi
c000bef3:	5b                   	pop    ebx
c000bef4:	5e                   	pop    esi
c000bef5:	5f                   	pop    edi
c000bef6:	5d                   	pop    ebp
c000bef7:	c2 04 00             	ret    0x4

c000befa <Clock::timeInDatetimeLocal()>:
c000befa:	53                   	push   ebx
c000befb:	83 ec 14             	sub    esp,0x14
c000befe:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bf02:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bf06:	e8 8b fc ff ff       	call   c000bb96 <Clock::timeInSecondsLocal()>
c000bf0b:	83 c4 0c             	add    esp,0xc
c000bf0e:	52                   	push   edx
c000bf0f:	50                   	push   eax
c000bf10:	53                   	push   ebx
c000bf11:	e8 a0 fe ff ff       	call   c000bdb6 <secondsToDatetime(unsigned long long)>
c000bf16:	89 d8                	mov    eax,ebx
c000bf18:	83 c4 14             	add    esp,0x14
c000bf1b:	5b                   	pop    ebx
c000bf1c:	c2 04 00             	ret    0x4
c000bf1f:	90                   	nop

c000bf20 <Device::hibernate()>:
c000bf20:	c3                   	ret    
c000bf21:	90                   	nop

c000bf22 <Device::wake()>:
c000bf22:	c3                   	ret    
c000bf23:	90                   	nop

c000bf24 <Device::detect()>:
c000bf24:	c3                   	ret    
c000bf25:	90                   	nop

c000bf26 <Device::disableLegacy()>:
c000bf26:	c3                   	ret    
c000bf27:	90                   	nop

c000bf28 <Device::powerSaving(PowerSavingLevel)>:
c000bf28:	c3                   	ret    
c000bf29:	90                   	nop

c000bf2a <DriverlessDevice::close(int, int, void*)>:
c000bf2a:	31 c0                	xor    eax,eax
c000bf2c:	c3                   	ret    
c000bf2d:	90                   	nop

c000bf2e <DriverlessDevice::detect()>:
c000bf2e:	c3                   	ret    
c000bf2f:	90                   	nop

c000bf30 <DriverlessDevice::open(int, int, void*)>:
c000bf30:	83 ec 18             	sub    esp,0x18
c000bf33:	68 90 0b 02 c0       	push   0xc0020b90
c000bf38:	e8 5e 4c 00 00       	call   c0010b9b <KePanic(char const*)>
c000bf3d:	83 c8 ff             	or     eax,0xffffffff
c000bf40:	83 c4 1c             	add    esp,0x1c
c000bf43:	c3                   	ret    

c000bf44 <Device::~Device()>:
c000bf44:	ba f0 0b 02 c0       	mov    edx,0xc0020bf0
c000bf49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bf4d:	89 10                	mov    DWORD PTR [eax],edx
c000bf4f:	90                   	nop
c000bf50:	c3                   	ret    
c000bf51:	90                   	nop

c000bf52 <Device::~Device()>:
c000bf52:	83 ec 0c             	sub    esp,0xc
c000bf55:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bf59:	e8 e6 ff ff ff       	call   c000bf44 <Device::~Device()>
c000bf5e:	83 c4 04             	add    esp,0x4
c000bf61:	83 ec 08             	sub    esp,0x8
c000bf64:	68 58 01 00 00       	push   0x158
c000bf69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf6d:	e8 9a e8 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000bf72:	83 c4 10             	add    esp,0x10
c000bf75:	83 c4 0c             	add    esp,0xc
c000bf78:	c3                   	ret    
c000bf79:	90                   	nop

c000bf7a <Device::findAndLoadDriver()>:
c000bf7a:	c7 44 24 04 ae 0b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020bae
c000bf82:	e9 b2 e9 ff ff       	jmp    c000a939 <Dbg::kprintf(char const*, ...)>
c000bf87:	90                   	nop

c000bf88 <Device::preOpenPCI(PCIDeviceInfo)>:
c000bf88:	57                   	push   edi
c000bf89:	b9 09 00 00 00       	mov    ecx,0x9
c000bf8e:	56                   	push   esi
c000bf8f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000bf93:	8d 74 24 10          	lea    esi,[esp+0x10]
c000bf97:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000bfa1:	81 c7 18 01 00 00    	add    edi,0x118
c000bfa7:	fc                   	cld    
c000bfa8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000bfaa:	5e                   	pop    esi
c000bfab:	5f                   	pop    edi
c000bfac:	c3                   	ret    
c000bfad:	90                   	nop

c000bfae <Device::preOpenACPI(void*, char*, char*)>:
c000bfae:	57                   	push   edi
c000bfaf:	b9 1e 00 00 00       	mov    ecx,0x1e
c000bfb4:	56                   	push   esi
c000bfb5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bfb9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bfbd:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000bfc7:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000bfcd:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000bfd3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bfd7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bfd9:	b9 0e 00 00 00       	mov    ecx,0xe
c000bfde:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000bfe4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bfe8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bfea:	5e                   	pop    esi
c000bfeb:	5f                   	pop    edi
c000bfec:	c3                   	ret    
c000bfed:	90                   	nop

c000bfee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000bfee:	53                   	push   ebx
c000bfef:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bff3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bff7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bffb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bfff:	0f b6 c0             	movzx  eax,al
c000c002:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000c006:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c00a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c00e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c012:	5b                   	pop    ebx
c000c013:	e9 a8 05 00 00       	jmp    c000c5c0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000c018 <Device::getParent()>:
c000c018:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c01c:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000c022:	c3                   	ret    
c000c023:	90                   	nop

c000c024 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c024:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c028:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c02c:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000c031:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c035:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c039:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c03d:	e9 e6 06 00 00       	jmp    c000c728 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000c042 <Device::addChild(Device*)>:
c000c042:	53                   	push   ebx
c000c043:	83 ec 08             	sub    esp,0x8
c000c046:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c04a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c04e:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000c054:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000c05a:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c05c:	85 d2                	test   edx,edx
c000c05e:	74 04                	je     c000c064 <Device::addChild(Device*)+0x22>
c000c060:	89 d3                	mov    ebx,edx
c000c062:	eb f6                	jmp    c000c05a <Device::addChild(Device*)+0x18>
c000c064:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000c067:	83 ec 0c             	sub    esp,0xc
c000c06a:	6a 08                	push   0x8
c000c06c:	e8 3d ba ff ff       	call   c0007aae <malloc>
c000c071:	89 03                	mov    DWORD PTR [ebx],eax
c000c073:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c079:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c080:	83 c4 18             	add    esp,0x18
c000c083:	5b                   	pop    ebx
c000c084:	c3                   	ret    
c000c085:	90                   	nop

c000c086 <Device::removeAllChildren()>:
c000c086:	56                   	push   esi
c000c087:	53                   	push   ebx
c000c088:	52                   	push   edx
c000c089:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c08d:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000c093:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c096:	74 17                	je     c000c0af <Device::removeAllChildren()+0x29>
c000c098:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c09b:	85 c0                	test   eax,eax
c000c09d:	74 0c                	je     c000c0ab <Device::removeAllChildren()+0x25>
c000c09f:	83 ec 0c             	sub    esp,0xc
c000c0a2:	8b 10                	mov    edx,DWORD PTR [eax]
c000c0a4:	50                   	push   eax
c000c0a5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000c0a8:	83 c4 10             	add    esp,0x10
c000c0ab:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c0ad:	eb e4                	jmp    c000c093 <Device::removeAllChildren()+0xd>
c000c0af:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c0b5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c0bb:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c0c1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c0c8:	58                   	pop    eax
c000c0c9:	5b                   	pop    ebx
c000c0ca:	5e                   	pop    esi
c000c0cb:	c3                   	ret    

c000c0cc <Device::hibernateAll()>:
c000c0cc:	53                   	push   ebx
c000c0cd:	83 ec 14             	sub    esp,0x14
c000c0d0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c0d4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c0d6:	53                   	push   ebx
c000c0d7:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000c0da:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c0e0:	83 c4 10             	add    esp,0x10
c000c0e3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c0e6:	74 0f                	je     c000c0f7 <Device::hibernateAll()+0x2b>
c000c0e8:	83 ec 0c             	sub    esp,0xc
c000c0eb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c0ee:	e8 d9 ff ff ff       	call   c000c0cc <Device::hibernateAll()>
c000c0f3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c0f5:	eb e9                	jmp    c000c0e0 <Device::hibernateAll()+0x14>
c000c0f7:	83 c4 08             	add    esp,0x8
c000c0fa:	5b                   	pop    ebx
c000c0fb:	c3                   	ret    

c000c0fc <Device::wakeAll()>:
c000c0fc:	53                   	push   ebx
c000c0fd:	83 ec 14             	sub    esp,0x14
c000c100:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c104:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c106:	53                   	push   ebx
c000c107:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000c10a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c110:	83 c4 10             	add    esp,0x10
c000c113:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c116:	74 0f                	je     c000c127 <Device::wakeAll()+0x2b>
c000c118:	83 ec 0c             	sub    esp,0xc
c000c11b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c11e:	e8 d9 ff ff ff       	call   c000c0fc <Device::wakeAll()>
c000c123:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c125:	eb e9                	jmp    c000c110 <Device::wakeAll()+0x14>
c000c127:	83 c4 08             	add    esp,0x8
c000c12a:	5b                   	pop    ebx
c000c12b:	c3                   	ret    

c000c12c <Device::detectAll()>:
c000c12c:	53                   	push   ebx
c000c12d:	83 ec 14             	sub    esp,0x14
c000c130:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c134:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c136:	53                   	push   ebx
c000c137:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000c13a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c140:	83 c4 10             	add    esp,0x10
c000c143:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c146:	74 0f                	je     c000c157 <Device::detectAll()+0x2b>
c000c148:	83 ec 0c             	sub    esp,0xc
c000c14b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c14e:	e8 d9 ff ff ff       	call   c000c12c <Device::detectAll()>
c000c153:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c155:	eb e9                	jmp    c000c140 <Device::detectAll()+0x14>
c000c157:	83 c4 08             	add    esp,0x8
c000c15a:	5b                   	pop    ebx
c000c15b:	c3                   	ret    

c000c15c <Device::disableLegacyAll()>:
c000c15c:	c3                   	ret    
c000c15d:	90                   	nop

c000c15e <Device::loadDriversForAll()>:
c000c15e:	c3                   	ret    
c000c15f:	90                   	nop

c000c160 <Device::closeAll()>:
c000c160:	53                   	push   ebx
c000c161:	83 ec 08             	sub    esp,0x8
c000c164:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c168:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c16a:	6a 00                	push   0x0
c000c16c:	6a 00                	push   0x0
c000c16e:	6a 00                	push   0x0
c000c170:	53                   	push   ebx
c000c171:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c174:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c17a:	83 c4 10             	add    esp,0x10
c000c17d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c180:	74 0f                	je     c000c191 <Device::closeAll()+0x31>
c000c182:	83 ec 0c             	sub    esp,0xc
c000c185:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c188:	e8 d3 ff ff ff       	call   c000c160 <Device::closeAll()>
c000c18d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c18f:	eb e9                	jmp    c000c17a <Device::closeAll()+0x1a>
c000c191:	83 c4 08             	add    esp,0x8
c000c194:	5b                   	pop    ebx
c000c195:	c3                   	ret    

c000c196 <Device::powerSavingAll(PowerSavingLevel)>:
c000c196:	56                   	push   esi
c000c197:	53                   	push   ebx
c000c198:	83 ec 0c             	sub    esp,0xc
c000c19b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c19f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c1a3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c1a5:	56                   	push   esi
c000c1a6:	53                   	push   ebx
c000c1a7:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000c1aa:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c1b0:	83 c4 10             	add    esp,0x10
c000c1b3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c1b6:	74 0f                	je     c000c1c7 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000c1b8:	52                   	push   edx
c000c1b9:	52                   	push   edx
c000c1ba:	56                   	push   esi
c000c1bb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c1be:	e8 d3 ff ff ff       	call   c000c196 <Device::powerSavingAll(PowerSavingLevel)>
c000c1c3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c1c5:	eb e9                	jmp    c000c1b0 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000c1c7:	58                   	pop    eax
c000c1c8:	5b                   	pop    ebx
c000c1c9:	5e                   	pop    esi
c000c1ca:	c3                   	ret    
c000c1cb:	90                   	nop

c000c1cc <Device::setName(char const*)>:
c000c1cc:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000c1d4:	e9 67 44 ff ff       	jmp    c0000640 <strcpy>
c000c1d9:	90                   	nop

c000c1da <Device::Device(char const*)>:
c000c1da:	83 ec 1c             	sub    esp,0x1c
c000c1dd:	ba f0 0b 02 c0       	mov    edx,0xc0020bf0
c000c1e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1e6:	89 10                	mov    DWORD PTR [eax],edx
c000c1e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1ec:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000c1f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1fa:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c204:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c208:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c212:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c216:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c220:	83 ec 08             	sub    esp,0x8
c000c223:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c227:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c22b:	e8 9c ff ff ff       	call   c000c1cc <Device::setName(char const*)>
c000c230:	83 c4 10             	add    esp,0x10
c000c233:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000c23b:	83 ec 0c             	sub    esp,0xc
c000c23e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c242:	e8 67 b8 ff ff       	call   c0007aae <malloc>
c000c247:	83 c4 10             	add    esp,0x10
c000c24a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c250:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c257:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c25b:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000c261:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c265:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c26b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c271:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c275:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c27b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c282:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c286:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000c28d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c291:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000c298:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c29c:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c2a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c2aa:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c2b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c2b8:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c2c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c2c6:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000c2d0:	90                   	nop
c000c2d1:	83 c4 1c             	add    esp,0x1c
c000c2d4:	c3                   	ret    
c000c2d5:	90                   	nop

c000c2d6 <Device::getName()>:
c000c2d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c2da:	05 d0 00 00 00       	add    eax,0xd0
c000c2df:	c3                   	ret    

c000c2e0 <DriverlessDevice::DriverlessDevice(char const*)>:
c000c2e0:	83 ec 0c             	sub    esp,0xc
c000c2e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2e7:	83 ec 08             	sub    esp,0x8
c000c2ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2ee:	50                   	push   eax
c000c2ef:	e8 e6 fe ff ff       	call   c000c1da <Device::Device(char const*)>
c000c2f4:	83 c4 10             	add    esp,0x10
c000c2f7:	ba 1c 0c 02 c0       	mov    edx,0xc0020c1c
c000c2fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c300:	89 10                	mov    DWORD PTR [eax],edx
c000c302:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c306:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000c310:	90                   	nop
c000c311:	83 c4 0c             	add    esp,0xc
c000c314:	c3                   	ret    
c000c315:	90                   	nop

c000c316 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000c316:	57                   	push   edi
c000c317:	56                   	push   esi
c000c318:	53                   	push   ebx
c000c319:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c31d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c321:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c325:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000c32b:	75 0c                	jne    c000c339 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000c32d:	52                   	push   edx
c000c32e:	52                   	push   edx
c000c32f:	53                   	push   ebx
c000c330:	56                   	push   esi
c000c331:	e8 8c 2b 01 00       	call   c001eec2 <LinkedList<Device>::addElement(Device*)>
c000c336:	83 c4 10             	add    esp,0x10
c000c339:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c33f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c342:	74 12                	je     c000c356 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000c344:	50                   	push   eax
c000c345:	57                   	push   edi
c000c346:	56                   	push   esi
c000c347:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c34a:	e8 c7 ff ff ff       	call   c000c316 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c34f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c351:	83 c4 10             	add    esp,0x10
c000c354:	eb e9                	jmp    c000c33f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000c356:	5b                   	pop    ebx
c000c357:	5e                   	pop    esi
c000c358:	5f                   	pop    edi
c000c359:	c3                   	ret    

c000c35a <getDevicesOfType(DeviceType)>:
c000c35a:	53                   	push   ebx
c000c35b:	83 ec 14             	sub    esp,0x14
c000c35e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c362:	53                   	push   ebx
c000c363:	e8 36 2c 01 00       	call   c001ef9e <LinkedList<Device>::LinkedList()>
c000c368:	83 c4 0c             	add    esp,0xc
c000c36b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c36f:	53                   	push   ebx
c000c370:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c000c376:	e8 9b ff ff ff       	call   c000c316 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c37b:	89 d8                	mov    eax,ebx
c000c37d:	83 c4 18             	add    esp,0x18
c000c380:	5b                   	pop    ebx
c000c381:	c2 04 00             	ret    0x4

c000c384 <HardDiskController::HardDiskController(char const*)>:
c000c384:	83 ec 0c             	sub    esp,0xc
c000c387:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c38b:	83 ec 08             	sub    esp,0x8
c000c38e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c392:	50                   	push   eax
c000c393:	e8 42 fe ff ff       	call   c000c1da <Device::Device(char const*)>
c000c398:	83 c4 10             	add    esp,0x10
c000c39b:	ba 48 0c 02 c0       	mov    edx,0xc0020c48
c000c3a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3a4:	89 10                	mov    DWORD PTR [eax],edx
c000c3a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3aa:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000c3b4:	90                   	nop
c000c3b5:	83 c4 0c             	add    esp,0xc
c000c3b8:	c3                   	ret    
c000c3b9:	90                   	nop
c000c3ba:	66 90                	xchg   ax,ax

c000c3bc <HardDiskController::~HardDiskController()>:
c000c3bc:	83 ec 0c             	sub    esp,0xc
c000c3bf:	ba 48 0c 02 c0       	mov    edx,0xc0020c48
c000c3c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3c8:	89 10                	mov    DWORD PTR [eax],edx
c000c3ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3ce:	83 ec 0c             	sub    esp,0xc
c000c3d1:	50                   	push   eax
c000c3d2:	e8 6d fb ff ff       	call   c000bf44 <Device::~Device()>
c000c3d7:	83 c4 10             	add    esp,0x10
c000c3da:	90                   	nop
c000c3db:	83 c4 0c             	add    esp,0xc
c000c3de:	c3                   	ret    
c000c3df:	90                   	nop

c000c3e0 <HardDiskController::~HardDiskController()>:
c000c3e0:	83 ec 0c             	sub    esp,0xc
c000c3e3:	83 ec 0c             	sub    esp,0xc
c000c3e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3ea:	e8 cd ff ff ff       	call   c000c3bc <HardDiskController::~HardDiskController()>
c000c3ef:	83 c4 10             	add    esp,0x10
c000c3f2:	83 ec 08             	sub    esp,0x8
c000c3f5:	68 58 01 00 00       	push   0x158
c000c3fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3fe:	e8 09 e4 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c403:	83 c4 10             	add    esp,0x10
c000c406:	83 c4 0c             	add    esp,0xc
c000c409:	c3                   	ret    

c000c40a <PhysicalDisk::eject()>:
c000c40a:	83 c8 ff             	or     eax,0xffffffff
c000c40d:	c3                   	ret    

c000c40e <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000c40e:	83 ec 0c             	sub    esp,0xc
c000c411:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c415:	83 ec 08             	sub    esp,0x8
c000c418:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c41c:	50                   	push   eax
c000c41d:	e8 b8 fd ff ff       	call   c000c1da <Device::Device(char const*)>
c000c422:	83 c4 10             	add    esp,0x10
c000c425:	ba 74 0c 02 c0       	mov    edx,0xc0020c74
c000c42a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c42e:	89 10                	mov    DWORD PTR [eax],edx
c000c430:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c434:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000c43b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c43f:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000c446:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c44a:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000c454:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c458:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c45c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000c462:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c466:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000c470:	90                   	nop
c000c471:	83 c4 0c             	add    esp,0xc
c000c474:	c3                   	ret    
c000c475:	90                   	nop

c000c476 <PhysicalDisk::startCache()>:
c000c476:	56                   	push   esi
c000c477:	53                   	push   ebx
c000c478:	83 ec 10             	sub    esp,0x10
c000c47b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c47f:	6a 44                	push   0x44
c000c481:	e8 28 b6 ff ff       	call   c0007aae <malloc>
c000c486:	89 c6                	mov    esi,eax
c000c488:	58                   	pop    eax
c000c489:	5a                   	pop    edx
c000c48a:	53                   	push   ebx
c000c48b:	56                   	push   esi
c000c48c:	e8 7b 17 00 00       	call   c000dc0c <VCache::VCache(PhysicalDisk*)>
c000c491:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000c497:	83 c4 14             	add    esp,0x14
c000c49a:	5b                   	pop    ebx
c000c49b:	5e                   	pop    esi
c000c49c:	c3                   	ret    
c000c49d:	90                   	nop

c000c49e <PhysicalDisk::~PhysicalDisk()>:
c000c49e:	83 ec 0c             	sub    esp,0xc
c000c4a1:	ba 74 0c 02 c0       	mov    edx,0xc0020c74
c000c4a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4aa:	89 10                	mov    DWORD PTR [eax],edx
c000c4ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4b0:	83 ec 0c             	sub    esp,0xc
c000c4b3:	50                   	push   eax
c000c4b4:	e8 8b fa ff ff       	call   c000bf44 <Device::~Device()>
c000c4b9:	83 c4 10             	add    esp,0x10
c000c4bc:	90                   	nop
c000c4bd:	83 c4 0c             	add    esp,0xc
c000c4c0:	c3                   	ret    
c000c4c1:	90                   	nop

c000c4c2 <PhysicalDisk::~PhysicalDisk()>:
c000c4c2:	83 ec 0c             	sub    esp,0xc
c000c4c5:	83 ec 0c             	sub    esp,0xc
c000c4c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4cc:	e8 cd ff ff ff       	call   c000c49e <PhysicalDisk::~PhysicalDisk()>
c000c4d1:	83 c4 10             	add    esp,0x10
c000c4d4:	83 ec 08             	sub    esp,0x8
c000c4d7:	68 6c 01 00 00       	push   0x16c
c000c4dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4e0:	e8 27 e3 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c4e5:	83 c4 10             	add    esp,0x10
c000c4e8:	83 c4 0c             	add    esp,0xc
c000c4eb:	c3                   	ret    

c000c4ec <int_handler>:
c000c4ec:	55                   	push   ebp
c000c4ed:	57                   	push   edi
c000c4ee:	56                   	push   esi
c000c4ef:	53                   	push   ebx
c000c4f0:	83 ec 0c             	sub    esp,0xc
c000c4f3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000c4f7:	80 3d 38 89 02 c0 00 	cmp    BYTE PTR ds:0xc0028938,0x0
c000c4fe:	74 0b                	je     c000c50b <int_handler+0x1f>
c000c500:	fa                   	cli    
c000c501:	f4                   	hlt    
c000c502:	80 3d 38 89 02 c0 00 	cmp    BYTE PTR ds:0xc0028938,0x0
c000c509:	75 f5                	jne    c000c500 <int_handler+0x14>
c000c50b:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000c50e:	8d 46 e0             	lea    eax,[esi-0x20]
c000c511:	83 f8 17             	cmp    eax,0x17
c000c514:	76 40                	jbe    c000c556 <int_handler+0x6a>
c000c516:	c1 e6 04             	shl    esi,0x4
c000c519:	31 db                	xor    ebx,ebx
c000c51b:	8d ae c0 6f 02 c0    	lea    ebp,[esi-0x3ffd9040]
c000c521:	81 c6 c0 5f 02 c0    	add    esi,0xc0025fc0
c000c527:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000c52b:	85 c0                	test   eax,eax
c000c52d:	74 13                	je     c000c542 <int_handler+0x56>
c000c52f:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000c532:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000c536:	74 2c                	je     c000c564 <int_handler+0x78>
c000c538:	83 ec 08             	sub    esp,0x8
c000c53b:	52                   	push   edx
c000c53c:	57                   	push   edi
c000c53d:	ff d0                	call   eax
c000c53f:	83 c4 10             	add    esp,0x10
c000c542:	83 c3 01             	add    ebx,0x1
c000c545:	83 fb 04             	cmp    ebx,0x4
c000c548:	75 dd                	jne    c000c527 <int_handler+0x3b>
c000c54a:	83 c4 0c             	add    esp,0xc
c000c54d:	31 c0                	xor    eax,eax
c000c54f:	5b                   	pop    ebx
c000c550:	31 d2                	xor    edx,edx
c000c552:	5e                   	pop    esi
c000c553:	5f                   	pop    edi
c000c554:	5d                   	pop    ebp
c000c555:	c3                   	ret    
c000c556:	83 ec 0c             	sub    esp,0xc
c000c559:	50                   	push   eax
c000c55a:	e8 75 b1 00 00       	call   c00176d4 <HalEndOfInterrupt(int)>
c000c55f:	83 c4 10             	add    esp,0x10
c000c562:	eb b2                	jmp    c000c516 <int_handler+0x2a>
c000c564:	83 ec 08             	sub    esp,0x8
c000c567:	52                   	push   edx
c000c568:	57                   	push   edi
c000c569:	ff d0                	call   eax
c000c56b:	83 c4 10             	add    esp,0x10
c000c56e:	83 c4 0c             	add    esp,0xc
c000c571:	5b                   	pop    ebx
c000c572:	5e                   	pop    esi
c000c573:	5f                   	pop    edi
c000c574:	5d                   	pop    ebp
c000c575:	c3                   	ret    

c000c576 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000c576:	56                   	push   esi
c000c577:	31 c0                	xor    eax,eax
c000c579:	53                   	push   ebx
c000c57a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c57e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c582:	89 ca                	mov    edx,ecx
c000c584:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c588:	c1 e2 04             	shl    edx,0x4
c000c58b:	83 bc 82 c0 6f 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd9040],0x0
c000c593:	74 17                	je     c000c5ac <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000c595:	83 c0 01             	add    eax,0x1
c000c598:	83 f8 04             	cmp    eax,0x4
c000c59b:	75 ee                	jne    c000c58b <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000c59d:	c7 44 24 0c a4 0c 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020ca4
c000c5a5:	5b                   	pop    ebx
c000c5a6:	5e                   	pop    esi
c000c5a7:	e9 ef 45 00 00       	jmp    c0010b9b <KePanic(char const*)>
c000c5ac:	8d 04 88             	lea    eax,[eax+ecx*4]
c000c5af:	89 1c 85 c0 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9040],ebx
c000c5b6:	89 34 85 c0 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda040],esi
c000c5bd:	5b                   	pop    ebx
c000c5be:	5e                   	pop    esi
c000c5bf:	c3                   	ret    

c000c5c0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c5c0:	57                   	push   edi
c000c5c1:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c000c5c7:	56                   	push   esi
c000c5c8:	53                   	push   ebx
c000c5c9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c5cd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c5d1:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c5d8:	74 54                	je     c000c62e <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6e>
c000c5da:	89 c7                	mov    edi,eax
c000c5dc:	84 c0                	test   al,al
c000c5de:	74 1d                	je     c000c5fd <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000c5e0:	83 fe 0f             	cmp    esi,0xf
c000c5e3:	0f 8f d5 00 00 00    	jg     c000c6be <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xfe>
c000c5e9:	0f b6 b6 a8 28 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdd758]
c000c5f0:	0f b7 bc 36 60 87 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd78a0]
c000c5f8:	d1 ef                	shr    edi,1
c000c5fa:	83 e7 01             	and    edi,0x1
c000c5fd:	83 ec 08             	sub    esp,0x8
c000c600:	a1 60 9b 02 c0       	mov    eax,ds:0xc0029b60
c000c605:	31 db                	xor    ebx,ebx
c000c607:	50                   	push   eax
c000c608:	68 b1 0c 02 c0       	push   0xc0020cb1
c000c60d:	e8 27 e3 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000c612:	83 c4 10             	add    esp,0x10
c000c615:	a1 60 9b 02 c0       	mov    eax,ds:0xc0029b60
c000c61a:	85 c0                	test   eax,eax
c000c61c:	7f 55                	jg     c000c673 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000c61e:	83 ec 0c             	sub    esp,0xc
c000c621:	68 c8 0c 02 c0       	push   0xc0020cc8
c000c626:	e8 70 45 00 00       	call   c0010b9b <KePanic(char const*)>
c000c62b:	83 c4 10             	add    esp,0x10
c000c62e:	8d 7e 20             	lea    edi,[esi+0x20]
c000c631:	89 f8                	mov    eax,edi
c000c633:	31 d2                	xor    edx,edx
c000c635:	c1 e0 04             	shl    eax,0x4
c000c638:	8b 8c 90 c0 6f 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd9040]
c000c63f:	85 c9                	test   ecx,ecx
c000c641:	0f 84 8e 00 00 00    	je     c000c6d5 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x115>
c000c647:	83 c2 01             	add    edx,0x1
c000c64a:	83 fa 04             	cmp    edx,0x4
c000c64d:	75 e9                	jne    c000c638 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000c64f:	83 ec 0c             	sub    esp,0xc
c000c652:	68 1c 0d 02 c0       	push   0xc0020d1c
c000c657:	e8 3f 45 00 00       	call   c0010b9b <KePanic(char const*)>
c000c65c:	83 c4 10             	add    esp,0x10
c000c65f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c664:	5b                   	pop    ebx
c000c665:	5e                   	pop    esi
c000c666:	5f                   	pop    edi
c000c667:	c3                   	ret    
c000c668:	83 c3 01             	add    ebx,0x1
c000c66b:	39 1d 60 9b 02 c0    	cmp    DWORD PTR ds:0xc0029b60,ebx
c000c671:	7e ab                	jle    c000c61e <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5e>
c000c673:	83 ec 08             	sub    esp,0x8
c000c676:	8b 04 9d 80 9b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd6480]
c000c67d:	56                   	push   esi
c000c67e:	50                   	push   eax
c000c67f:	e8 6a 17 01 00       	call   c001ddee <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000c684:	83 c4 10             	add    esp,0x10
c000c687:	84 c0                	test   al,al
c000c689:	74 dd                	je     c000c668 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa8>
c000c68b:	83 ec 04             	sub    esp,0x4
c000c68e:	89 f8                	mov    eax,edi
c000c690:	8b 1c 9d 80 9b 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd6480]
c000c697:	0f b6 f8             	movzx  edi,al
c000c69a:	57                   	push   edi
c000c69b:	8d 7e 20             	lea    edi,[esi+0x20]
c000c69e:	6a 00                	push   0x0
c000c6a0:	89 f8                	mov    eax,edi
c000c6a2:	0f b6 c0             	movzx  eax,al
c000c6a5:	50                   	push   eax
c000c6a6:	89 f0                	mov    eax,esi
c000c6a8:	6a 00                	push   0x0
c000c6aa:	0f b6 c0             	movzx  eax,al
c000c6ad:	6a 00                	push   0x0
c000c6af:	50                   	push   eax
c000c6b0:	53                   	push   ebx
c000c6b1:	e8 a4 18 01 00       	call   c001df5a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000c6b6:	83 c4 20             	add    esp,0x20
c000c6b9:	e9 73 ff ff ff       	jmp    c000c631 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x71>
c000c6be:	83 ec 0c             	sub    esp,0xc
c000c6c1:	31 ff                	xor    edi,edi
c000c6c3:	68 e4 0c 02 c0       	push   0xc0020ce4
c000c6c8:	e8 ce 44 00 00       	call   c0010b9b <KePanic(char const*)>
c000c6cd:	83 c4 10             	add    esp,0x10
c000c6d0:	e9 28 ff ff ff       	jmp    c000c5fd <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000c6d5:	8d 04 ba             	lea    eax,[edx+edi*4]
c000c6d8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c6dc:	89 14 85 c0 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9040],edx
c000c6e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c6e7:	5b                   	pop    ebx
c000c6e8:	89 14 85 c0 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda040],edx
c000c6ef:	89 f0                	mov    eax,esi
c000c6f1:	5e                   	pop    esi
c000c6f2:	5f                   	pop    edi
c000c6f3:	c3                   	ret    

c000c6f4 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000c6f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c6f8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c6fc:	c1 e0 04             	shl    eax,0x4
c000c6ff:	8d 50 10             	lea    edx,[eax+0x10]
c000c702:	39 88 c0 6f 02 c0    	cmp    DWORD PTR [eax-0x3ffd9040],ecx
c000c708:	74 08                	je     c000c712 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000c70a:	83 c0 04             	add    eax,0x4
c000c70d:	39 d0                	cmp    eax,edx
c000c70f:	75 f1                	jne    c000c702 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000c711:	c3                   	ret    
c000c712:	c7 80 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9040],0x0
c000c71c:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c726:	eb e2                	jmp    c000c70a <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c728 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c728:	53                   	push   ebx
c000c729:	83 ec 08             	sub    esp,0x8
c000c72c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c730:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c735:	74 0e                	je     c000c745 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c737:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000c73c:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c743:	75 37                	jne    c000c77c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000c745:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c749:	83 c0 20             	add    eax,0x20
c000c74c:	c1 e0 04             	shl    eax,0x4
c000c74f:	8d 50 10             	lea    edx,[eax+0x10]
c000c752:	39 98 c0 6f 02 c0    	cmp    DWORD PTR [eax-0x3ffd9040],ebx
c000c758:	74 0c                	je     c000c766 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000c75a:	83 c0 04             	add    eax,0x4
c000c75d:	39 d0                	cmp    eax,edx
c000c75f:	75 f1                	jne    c000c752 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000c761:	83 c4 08             	add    esp,0x8
c000c764:	5b                   	pop    ebx
c000c765:	c3                   	ret    
c000c766:	c7 80 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9040],0x0
c000c770:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c77a:	eb de                	jmp    c000c75a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000c77c:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000c781:	7f 11                	jg     c000c794 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6c>
c000c783:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c787:	0f b6 80 a8 28 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdd758]
c000c78e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c792:	eb b1                	jmp    c000c745 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c794:	83 ec 0c             	sub    esp,0xc
c000c797:	68 d5 0c 02 c0       	push   0xc0020cd5
c000c79c:	e8 fa 43 00 00       	call   c0010b9b <KePanic(char const*)>
c000c7a1:	83 c4 10             	add    esp,0x10
c000c7a4:	eb 9f                	jmp    c000c745 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000c7a6 <setupINTS()>:
c000c7a6:	31 c0                	xor    eax,eax
c000c7a8:	c7 80 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9040],0x0
c000c7b2:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c7bc:	c7 80 c4 6f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd903c],0x0
c000c7c6:	c7 80 c4 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda03c],0x0
c000c7d0:	c7 80 c8 6f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9038],0x0
c000c7da:	c7 80 c8 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda038],0x0
c000c7e4:	c7 80 cc 6f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9034],0x0
c000c7ee:	c7 80 cc 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda034],0x0
c000c7f8:	83 c0 10             	add    eax,0x10
c000c7fb:	3d 00 10 00 00       	cmp    eax,0x1000
c000c800:	75 a6                	jne    c000c7a8 <setupINTS()+0x2>
c000c802:	c3                   	ret    

c000c803 <convertLegacyIRQNumber(int)>:
c000c803:	83 ec 0c             	sub    esp,0xc
c000c806:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c000c80c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c810:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c817:	74 0c                	je     c000c825 <convertLegacyIRQNumber(int)+0x22>
c000c819:	83 f8 0f             	cmp    eax,0xf
c000c81c:	7f 0b                	jg     c000c829 <convertLegacyIRQNumber(int)+0x26>
c000c81e:	0f b6 80 a8 28 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdd758]
c000c825:	83 c4 0c             	add    esp,0xc
c000c828:	c3                   	ret    
c000c829:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c82d:	83 ec 0c             	sub    esp,0xc
c000c830:	68 e4 0c 02 c0       	push   0xc0020ce4
c000c835:	e8 61 43 00 00       	call   c0010b9b <KePanic(char const*)>
c000c83a:	83 c4 10             	add    esp,0x10
c000c83d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c841:	83 c4 0c             	add    esp,0xc
c000c844:	c3                   	ret    
c000c845:	90                   	nop

c000c846 <startGUI(void*)>:
c000c846:	55                   	push   ebp
c000c847:	89 e5                	mov    ebp,esp
c000c849:	53                   	push   ebx
c000c84a:	83 ec 04             	sub    esp,0x4
c000c84d:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c000c852:	83 e8 01             	sub    eax,0x1
c000c855:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c000c85a:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c000c85f:	85 c0                	test   eax,eax
c000c861:	75 01                	jne    c000c864 <startGUI(void*)+0x1e>
c000c863:	fb                   	sti    
c000c864:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000c86a:	83 ec 08             	sub    esp,0x8
c000c86d:	6a 01                	push   0x1
c000c86f:	68 41 0d 02 c0       	push   0xc0020d41
c000c874:	e8 32 81 00 00       	call   c00149ab <Thr::loadDLL(char const*, bool)>
c000c879:	83 c4 10             	add    esp,0x10
c000c87c:	83 ec 08             	sub    esp,0x8
c000c87f:	53                   	push   ebx
c000c880:	50                   	push   eax
c000c881:	e8 56 83 00 00       	call   c0014bdc <Thr::executeDLL(unsigned long, void*)>
c000c886:	83 c4 10             	add    esp,0x10
c000c889:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000c88f:	83 ec 08             	sub    esp,0x8
c000c892:	6a 01                	push   0x1
c000c894:	68 5b 0d 02 c0       	push   0xc0020d5b
c000c899:	e8 0d 81 00 00       	call   c00149ab <Thr::loadDLL(char const*, bool)>
c000c89e:	83 c4 10             	add    esp,0x10
c000c8a1:	83 ec 08             	sub    esp,0x8
c000c8a4:	53                   	push   ebx
c000c8a5:	50                   	push   eax
c000c8a6:	e8 31 83 00 00       	call   c0014bdc <Thr::executeDLL(unsigned long, void*)>
c000c8ab:	83 c4 10             	add    esp,0x10
c000c8ae:	90                   	nop
c000c8af:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c8b2:	c9                   	leave  
c000c8b3:	c3                   	ret    

c000c8b4 <startGUIVESA(void*)>:
c000c8b4:	55                   	push   ebp
c000c8b5:	89 e5                	mov    ebp,esp
c000c8b7:	53                   	push   ebx
c000c8b8:	83 ec 04             	sub    esp,0x4
c000c8bb:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c000c8c0:	83 e8 01             	sub    eax,0x1
c000c8c3:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c000c8c8:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c000c8cd:	85 c0                	test   eax,eax
c000c8cf:	75 01                	jne    c000c8d2 <startGUIVESA(void*)+0x1e>
c000c8d1:	fb                   	sti    
c000c8d2:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000c8d8:	83 ec 08             	sub    esp,0x8
c000c8db:	6a 01                	push   0x1
c000c8dd:	68 79 0d 02 c0       	push   0xc0020d79
c000c8e2:	e8 c4 80 00 00       	call   c00149ab <Thr::loadDLL(char const*, bool)>
c000c8e7:	83 c4 10             	add    esp,0x10
c000c8ea:	83 ec 08             	sub    esp,0x8
c000c8ed:	53                   	push   ebx
c000c8ee:	50                   	push   eax
c000c8ef:	e8 e8 82 00 00       	call   c0014bdc <Thr::executeDLL(unsigned long, void*)>
c000c8f4:	83 c4 10             	add    esp,0x10
c000c8f7:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000c8fd:	83 ec 08             	sub    esp,0x8
c000c900:	6a 01                	push   0x1
c000c902:	68 5b 0d 02 c0       	push   0xc0020d5b
c000c907:	e8 9f 80 00 00       	call   c00149ab <Thr::loadDLL(char const*, bool)>
c000c90c:	83 c4 10             	add    esp,0x10
c000c90f:	83 ec 08             	sub    esp,0x8
c000c912:	53                   	push   ebx
c000c913:	50                   	push   eax
c000c914:	e8 c3 82 00 00       	call   c0014bdc <Thr::executeDLL(unsigned long, void*)>
c000c919:	83 c4 10             	add    esp,0x10
c000c91c:	90                   	nop
c000c91d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c920:	c9                   	leave  
c000c921:	c3                   	ret    

c000c922 <sendKeyToTerminal(unsigned char)>:
c000c922:	55                   	push   ebp
c000c923:	89 e5                	mov    ebp,esp
c000c925:	83 ec 28             	sub    esp,0x28
c000c928:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c92b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c92e:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c000c933:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000c937:	83 ec 08             	sub    esp,0x8
c000c93a:	52                   	push   edx
c000c93b:	50                   	push   eax
c000c93c:	e8 67 c4 ff ff       	call   c0008da8 <VgaText::receiveKey(unsigned char)>
c000c941:	83 c4 10             	add    esp,0x10
c000c944:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c948:	83 f8 0a             	cmp    eax,0xa
c000c94b:	74 16                	je     c000c963 <sendKeyToTerminal(unsigned char)+0x41>
c000c94d:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c951:	83 f8 03             	cmp    eax,0x3
c000c954:	74 0d                	je     c000c963 <sendKeyToTerminal(unsigned char)+0x41>
c000c956:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c95a:	83 f8 1c             	cmp    eax,0x1c
c000c95d:	0f 85 97 00 00 00    	jne    c000c9fa <sendKeyToTerminal(unsigned char)+0xd8>
c000c963:	fa                   	cli    
c000c964:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c000c969:	83 c0 01             	add    eax,0x1
c000c96c:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c000c971:	a1 64 91 02 c0       	mov    eax,ds:0xc0029164
c000c976:	83 c0 01             	add    eax,0x1
c000c979:	a3 64 91 02 c0       	mov    ds:0xc0029164,eax
c000c97e:	a1 c0 7f 02 c0       	mov    eax,ds:0xc0027fc0
c000c983:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c986:	c7 05 c0 7f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027fc0,0x0
c000c990:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c994:	74 1f                	je     c000c9b5 <sendKeyToTerminal(unsigned char)+0x93>
c000c996:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c999:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c99c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c99f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c9a2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c9a5:	83 ec 0c             	sub    esp,0xc
c000c9a8:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c9ab:	e8 74 8f 00 00       	call   c0015924 <unblockTask(ThreadControlBlock*)>
c000c9b0:	83 c4 10             	add    esp,0x10
c000c9b3:	eb db                	jmp    c000c990 <sendKeyToTerminal(unsigned char)+0x6e>
c000c9b5:	a1 64 91 02 c0       	mov    eax,ds:0xc0029164
c000c9ba:	83 e8 01             	sub    eax,0x1
c000c9bd:	a3 64 91 02 c0       	mov    ds:0xc0029164,eax
c000c9c2:	a1 64 91 02 c0       	mov    eax,ds:0xc0029164
c000c9c7:	85 c0                	test   eax,eax
c000c9c9:	75 18                	jne    c000c9e3 <sendKeyToTerminal(unsigned char)+0xc1>
c000c9cb:	a1 60 91 02 c0       	mov    eax,ds:0xc0029160
c000c9d0:	85 c0                	test   eax,eax
c000c9d2:	74 0f                	je     c000c9e3 <sendKeyToTerminal(unsigned char)+0xc1>
c000c9d4:	c7 05 60 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029160,0x0
c000c9de:	e8 29 8a 00 00       	call   c001540c <schedule()>
c000c9e3:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c000c9e8:	83 e8 01             	sub    eax,0x1
c000c9eb:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c000c9f0:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c000c9f5:	85 c0                	test   eax,eax
c000c9f7:	75 01                	jne    c000c9fa <sendKeyToTerminal(unsigned char)+0xd8>
c000c9f9:	fb                   	sti    
c000c9fa:	90                   	nop
c000c9fb:	c9                   	leave  
c000c9fc:	c3                   	ret    

c000c9fd <sendKeyboardToken(KeyboardToken)>:
c000c9fd:	55                   	push   ebp
c000c9fe:	89 e5                	mov    ebp,esp
c000ca00:	83 ec 18             	sub    esp,0x18
c000ca03:	e8 e3 41 00 00       	call   c0010beb <KeUserIOReceived()>
c000ca08:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000ca0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca0e:	0f b7 c0             	movzx  eax,ax
c000ca11:	83 f2 01             	xor    edx,0x1
c000ca14:	88 90 e0 7f 02 c0    	mov    BYTE PTR [eax-0x3ffd8020],dl
c000ca1a:	a1 c8 7f 02 c0       	mov    eax,ds:0xc0027fc8
c000ca1f:	85 c0                	test   eax,eax
c000ca21:	74 24                	je     c000ca47 <sendKeyboardToken(KeyboardToken)+0x4a>
c000ca23:	8b 0d c8 7f 02 c0    	mov    ecx,DWORD PTR ds:0xc0027fc8
c000ca29:	83 ec 04             	sub    esp,0x4
c000ca2c:	68 e0 7f 02 c0       	push   0xc0027fe0
c000ca31:	83 ec 08             	sub    esp,0x8
c000ca34:	89 e2                	mov    edx,esp
c000ca36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca39:	89 02                	mov    DWORD PTR [edx],eax
c000ca3b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000ca3e:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000ca42:	ff d1                	call   ecx
c000ca44:	83 c4 10             	add    esp,0x10
c000ca47:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000ca4b:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000ca4e:	a0 e8 83 02 c0       	mov    al,ds:0xc00283e8
c000ca53:	0f b6 d2             	movzx  edx,dl
c000ca56:	0f b6 c0             	movzx  eax,al
c000ca59:	39 c2                	cmp    edx,eax
c000ca5b:	74 1c                	je     c000ca79 <sendKeyboardToken(KeyboardToken)+0x7c>
c000ca5d:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000ca60:	a2 e8 83 02 c0       	mov    ds:0xc00283e8,al
c000ca65:	a0 e8 83 02 c0       	mov    al,ds:0xc00283e8
c000ca6a:	0f b6 c0             	movzx  eax,al
c000ca6d:	83 ec 0c             	sub    esp,0xc
c000ca70:	50                   	push   eax
c000ca71:	e8 7e ba ff ff       	call   c00084f4 <setTerminalScrollLock(bool)>
c000ca76:	83 c4 10             	add    esp,0x10
c000ca79:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000ca7c:	0f b6 c0             	movzx  eax,al
c000ca7f:	85 c0                	test   eax,eax
c000ca81:	0f 84 da 00 00 00    	je     c000cb61 <sendKeyboardToken(KeyboardToken)+0x164>
c000ca87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca8a:	0f b7 c0             	movzx  eax,ax
c000ca8d:	3d 18 03 00 00       	cmp    eax,0x318
c000ca92:	75 06                	jne    c000ca9a <sendKeyboardToken(KeyboardToken)+0x9d>
c000ca94:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000ca9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca9d:	0f b7 c0             	movzx  eax,ax
c000caa0:	3d 19 03 00 00       	cmp    eax,0x319
c000caa5:	75 06                	jne    c000caad <sendKeyboardToken(KeyboardToken)+0xb0>
c000caa7:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000caad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cab0:	0f b7 c0             	movzx  eax,ax
c000cab3:	3d 1a 03 00 00       	cmp    eax,0x31a
c000cab8:	75 06                	jne    c000cac0 <sendKeyboardToken(KeyboardToken)+0xc3>
c000caba:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000cac0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cac3:	0f b7 c0             	movzx  eax,ax
c000cac6:	3d 1b 03 00 00       	cmp    eax,0x31b
c000cacb:	75 06                	jne    c000cad3 <sendKeyboardToken(KeyboardToken)+0xd6>
c000cacd:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000cad3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cad6:	0f b7 c0             	movzx  eax,ax
c000cad9:	3d 1c 03 00 00       	cmp    eax,0x31c
c000cade:	75 06                	jne    c000cae6 <sendKeyboardToken(KeyboardToken)+0xe9>
c000cae0:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000cae6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cae9:	0f b7 c0             	movzx  eax,ax
c000caec:	3d 1d 03 00 00       	cmp    eax,0x31d
c000caf1:	75 06                	jne    c000caf9 <sendKeyboardToken(KeyboardToken)+0xfc>
c000caf3:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000caf9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cafc:	0f b7 c0             	movzx  eax,ax
c000caff:	3d 1e 03 00 00       	cmp    eax,0x31e
c000cb04:	75 06                	jne    c000cb0c <sendKeyboardToken(KeyboardToken)+0x10f>
c000cb06:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000cb0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb0f:	0f b7 c0             	movzx  eax,ax
c000cb12:	3d 1f 03 00 00       	cmp    eax,0x31f
c000cb17:	75 06                	jne    c000cb1f <sendKeyboardToken(KeyboardToken)+0x122>
c000cb19:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000cb1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb22:	0f b7 c0             	movzx  eax,ax
c000cb25:	3d 20 03 00 00       	cmp    eax,0x320
c000cb2a:	75 06                	jne    c000cb32 <sendKeyboardToken(KeyboardToken)+0x135>
c000cb2c:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000cb32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb35:	0f b7 c0             	movzx  eax,ax
c000cb38:	3d 21 03 00 00       	cmp    eax,0x321
c000cb3d:	75 06                	jne    c000cb45 <sendKeyboardToken(KeyboardToken)+0x148>
c000cb3f:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000cb45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb48:	0f b7 c0             	movzx  eax,ax
c000cb4b:	3d 22 03 00 00       	cmp    eax,0x322
c000cb50:	0f 85 f1 00 00 00    	jne    c000cc47 <sendKeyboardToken(KeyboardToken)+0x24a>
c000cb56:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000cb5c:	e9 e6 00 00 00       	jmp    c000cc47 <sendKeyboardToken(KeyboardToken)+0x24a>
c000cb61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb64:	0f b7 c0             	movzx  eax,ax
c000cb67:	3d 18 03 00 00       	cmp    eax,0x318
c000cb6c:	75 0a                	jne    c000cb78 <sendKeyboardToken(KeyboardToken)+0x17b>
c000cb6e:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000cb74:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb7b:	0f b7 c0             	movzx  eax,ax
c000cb7e:	3d 19 03 00 00       	cmp    eax,0x319
c000cb83:	75 0a                	jne    c000cb8f <sendKeyboardToken(KeyboardToken)+0x192>
c000cb85:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000cb8b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb92:	0f b7 c0             	movzx  eax,ax
c000cb95:	3d 1a 03 00 00       	cmp    eax,0x31a
c000cb9a:	75 0a                	jne    c000cba6 <sendKeyboardToken(KeyboardToken)+0x1a9>
c000cb9c:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000cba2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cba6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cba9:	0f b7 c0             	movzx  eax,ax
c000cbac:	3d 1b 03 00 00       	cmp    eax,0x31b
c000cbb1:	75 0a                	jne    c000cbbd <sendKeyboardToken(KeyboardToken)+0x1c0>
c000cbb3:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000cbb9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cbbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbc0:	0f b7 c0             	movzx  eax,ax
c000cbc3:	3d 1c 03 00 00       	cmp    eax,0x31c
c000cbc8:	75 0a                	jne    c000cbd4 <sendKeyboardToken(KeyboardToken)+0x1d7>
c000cbca:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000cbd0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cbd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbd7:	0f b7 c0             	movzx  eax,ax
c000cbda:	3d 1d 03 00 00       	cmp    eax,0x31d
c000cbdf:	75 0a                	jne    c000cbeb <sendKeyboardToken(KeyboardToken)+0x1ee>
c000cbe1:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000cbe7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cbeb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbee:	0f b7 c0             	movzx  eax,ax
c000cbf1:	3d 1e 03 00 00       	cmp    eax,0x31e
c000cbf6:	75 0a                	jne    c000cc02 <sendKeyboardToken(KeyboardToken)+0x205>
c000cbf8:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000cbfe:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cc02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc05:	0f b7 c0             	movzx  eax,ax
c000cc08:	3d 1f 03 00 00       	cmp    eax,0x31f
c000cc0d:	75 0a                	jne    c000cc19 <sendKeyboardToken(KeyboardToken)+0x21c>
c000cc0f:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000cc15:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cc19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc1c:	0f b7 c0             	movzx  eax,ax
c000cc1f:	3d 20 03 00 00       	cmp    eax,0x320
c000cc24:	75 0a                	jne    c000cc30 <sendKeyboardToken(KeyboardToken)+0x233>
c000cc26:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000cc2c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cc30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc33:	0f b7 c0             	movzx  eax,ax
c000cc36:	3d 21 03 00 00       	cmp    eax,0x321
c000cc3b:	75 0a                	jne    c000cc47 <sendKeyboardToken(KeyboardToken)+0x24a>
c000cc3d:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000cc43:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cc47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc4a:	0f b7 c0             	movzx  eax,ax
c000cc4d:	3d 00 02 00 00       	cmp    eax,0x200
c000cc52:	75 2f                	jne    c000cc83 <sendKeyboardToken(KeyboardToken)+0x286>
c000cc54:	a0 e0 83 02 c0       	mov    al,ds:0xc00283e0
c000cc59:	83 f0 01             	xor    eax,0x1
c000cc5c:	0f b6 c0             	movzx  eax,al
c000cc5f:	85 c0                	test   eax,eax
c000cc61:	74 20                	je     c000cc83 <sendKeyboardToken(KeyboardToken)+0x286>
c000cc63:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c000cc68:	6a 01                	push   0x1
c000cc6a:	6a 00                	push   0x0
c000cc6c:	68 46 c8 00 c0       	push   0xc000c846
c000cc71:	50                   	push   eax
c000cc72:	e8 45 85 00 00       	call   c00151bc <Process::createThread(void (*)(void*), void*, int)>
c000cc77:	83 c4 10             	add    esp,0x10
c000cc7a:	c6 05 e0 83 02 c0 01 	mov    BYTE PTR ds:0xc00283e0,0x1
c000cc81:	eb 3a                	jmp    c000ccbd <sendKeyboardToken(KeyboardToken)+0x2c0>
c000cc83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc86:	0f b7 c0             	movzx  eax,ax
c000cc89:	3d 01 02 00 00       	cmp    eax,0x201
c000cc8e:	75 2d                	jne    c000ccbd <sendKeyboardToken(KeyboardToken)+0x2c0>
c000cc90:	a0 e0 83 02 c0       	mov    al,ds:0xc00283e0
c000cc95:	83 f0 01             	xor    eax,0x1
c000cc98:	0f b6 c0             	movzx  eax,al
c000cc9b:	85 c0                	test   eax,eax
c000cc9d:	74 1e                	je     c000ccbd <sendKeyboardToken(KeyboardToken)+0x2c0>
c000cc9f:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c000cca4:	6a 01                	push   0x1
c000cca6:	6a 00                	push   0x0
c000cca8:	68 b4 c8 00 c0       	push   0xc000c8b4
c000ccad:	50                   	push   eax
c000ccae:	e8 09 85 00 00       	call   c00151bc <Process::createThread(void (*)(void*), void*, int)>
c000ccb3:	83 c4 10             	add    esp,0x10
c000ccb6:	c6 05 e0 83 02 c0 01 	mov    BYTE PTR ds:0xc00283e0,0x1
c000ccbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ccc0:	0f b7 c0             	movzx  eax,ax
c000ccc3:	3d 25 03 00 00       	cmp    eax,0x325
c000ccc8:	75 06                	jne    c000ccd0 <sendKeyboardToken(KeyboardToken)+0x2d3>
c000ccca:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000ccd0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ccd3:	0f b7 c0             	movzx  eax,ax
c000ccd6:	3d 24 03 00 00       	cmp    eax,0x324
c000ccdb:	75 06                	jne    c000cce3 <sendKeyboardToken(KeyboardToken)+0x2e6>
c000ccdd:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000cce3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cce6:	0f b7 c0             	movzx  eax,ax
c000cce9:	3d 23 03 00 00       	cmp    eax,0x323
c000ccee:	75 06                	jne    c000ccf6 <sendKeyboardToken(KeyboardToken)+0x2f9>
c000ccf0:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000ccf6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ccf9:	0f b7 c0             	movzx  eax,ax
c000ccfc:	3d 26 03 00 00       	cmp    eax,0x326
c000cd01:	75 06                	jne    c000cd09 <sendKeyboardToken(KeyboardToken)+0x30c>
c000cd03:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000cd09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd0c:	0f b7 c0             	movzx  eax,ax
c000cd0f:	3d 27 03 00 00       	cmp    eax,0x327
c000cd14:	75 06                	jne    c000cd1c <sendKeyboardToken(KeyboardToken)+0x31f>
c000cd16:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000cd1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd1f:	0f b7 c0             	movzx  eax,ax
c000cd22:	3d 22 03 00 00       	cmp    eax,0x322
c000cd27:	75 06                	jne    c000cd2f <sendKeyboardToken(KeyboardToken)+0x332>
c000cd29:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000cd2f:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000cd33:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cd36:	83 f0 01             	xor    eax,0x1
c000cd39:	0f b6 c0             	movzx  eax,al
c000cd3c:	85 c0                	test   eax,eax
c000cd3e:	74 7c                	je     c000cdbc <sendKeyboardToken(KeyboardToken)+0x3bf>
c000cd40:	a0 e1 80 02 c0       	mov    al,ds:0xc00280e1
c000cd45:	0f b6 c0             	movzx  eax,al
c000cd48:	85 c0                	test   eax,eax
c000cd4a:	74 43                	je     c000cd8f <sendKeyboardToken(KeyboardToken)+0x392>
c000cd4c:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cd50:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000cd54:	85 c0                	test   eax,eax
c000cd56:	74 2b                	je     c000cd83 <sendKeyboardToken(KeyboardToken)+0x386>
c000cd58:	8b 15 e4 83 02 c0    	mov    edx,DWORD PTR ds:0xc00283e4
c000cd5e:	89 d0                	mov    eax,edx
c000cd60:	c1 e0 02             	shl    eax,0x2
c000cd63:	01 d0                	add    eax,edx
c000cd65:	01 c0                	add    eax,eax
c000cd67:	a3 e4 83 02 c0       	mov    ds:0xc00283e4,eax
c000cd6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd6f:	0f b7 c0             	movzx  eax,ax
c000cd72:	8d 50 d0             	lea    edx,[eax-0x30]
c000cd75:	a1 e4 83 02 c0       	mov    eax,ds:0xc00283e4
c000cd7a:	01 d0                	add    eax,edx
c000cd7c:	a3 e4 83 02 c0       	mov    ds:0xc00283e4,eax
c000cd81:	eb 71                	jmp    c000cdf4 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cd83:	c7 05 e4 83 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00283e4,0x0
c000cd8d:	eb 65                	jmp    c000cdf4 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cd8f:	a1 e4 83 02 c0       	mov    eax,ds:0xc00283e4
c000cd94:	85 c0                	test   eax,eax
c000cd96:	74 18                	je     c000cdb0 <sendKeyboardToken(KeyboardToken)+0x3b3>
c000cd98:	a1 e4 83 02 c0       	mov    eax,ds:0xc00283e4
c000cd9d:	0f b6 c0             	movzx  eax,al
c000cda0:	83 ec 0c             	sub    esp,0xc
c000cda3:	50                   	push   eax
c000cda4:	e8 79 fb ff ff       	call   c000c922 <sendKeyToTerminal(unsigned char)>
c000cda9:	83 c4 10             	add    esp,0x10
c000cdac:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cdb0:	c7 05 e4 83 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00283e4,0x0
c000cdba:	eb 38                	jmp    c000cdf4 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cdbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cdbf:	0f b7 c0             	movzx  eax,ax
c000cdc2:	3d 01 01 00 00       	cmp    eax,0x101
c000cdc7:	75 2b                	jne    c000cdf4 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cdc9:	a1 e4 83 02 c0       	mov    eax,ds:0xc00283e4
c000cdce:	85 c0                	test   eax,eax
c000cdd0:	74 18                	je     c000cdea <sendKeyboardToken(KeyboardToken)+0x3ed>
c000cdd2:	a1 e4 83 02 c0       	mov    eax,ds:0xc00283e4
c000cdd7:	0f b6 c0             	movzx  eax,al
c000cdda:	83 ec 0c             	sub    esp,0xc
c000cddd:	50                   	push   eax
c000cdde:	e8 3f fb ff ff       	call   c000c922 <sendKeyToTerminal(unsigned char)>
c000cde3:	83 c4 10             	add    esp,0x10
c000cde6:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cdea:	c7 05 e4 83 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00283e4,0x0
c000cdf4:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000cdf7:	83 f0 01             	xor    eax,0x1
c000cdfa:	0f b6 c0             	movzx  eax,al
c000cdfd:	85 c0                	test   eax,eax
c000cdff:	74 5a                	je     c000ce5b <sendKeyboardToken(KeyboardToken)+0x45e>
c000ce01:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000ce04:	83 f0 01             	xor    eax,0x1
c000ce07:	0f b6 c0             	movzx  eax,al
c000ce0a:	85 c0                	test   eax,eax
c000ce0c:	74 4d                	je     c000ce5b <sendKeyboardToken(KeyboardToken)+0x45e>
c000ce0e:	a0 e0 80 02 c0       	mov    al,ds:0xc00280e0
c000ce13:	83 f0 01             	xor    eax,0x1
c000ce16:	0f b6 c0             	movzx  eax,al
c000ce19:	85 c0                	test   eax,eax
c000ce1b:	74 3e                	je     c000ce5b <sendKeyboardToken(KeyboardToken)+0x45e>
c000ce1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce20:	0f b7 c0             	movzx  eax,ax
c000ce23:	83 f8 1f             	cmp    eax,0x1f
c000ce26:	76 0b                	jbe    c000ce33 <sendKeyboardToken(KeyboardToken)+0x436>
c000ce28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce2b:	0f b7 c0             	movzx  eax,ax
c000ce2e:	83 f8 7e             	cmp    eax,0x7e
c000ce31:	76 16                	jbe    c000ce49 <sendKeyboardToken(KeyboardToken)+0x44c>
c000ce33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce36:	0f b7 c0             	movzx  eax,ax
c000ce39:	83 f8 0a             	cmp    eax,0xa
c000ce3c:	74 0b                	je     c000ce49 <sendKeyboardToken(KeyboardToken)+0x44c>
c000ce3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce41:	0f b7 c0             	movzx  eax,ax
c000ce44:	83 f8 08             	cmp    eax,0x8
c000ce47:	75 12                	jne    c000ce5b <sendKeyboardToken(KeyboardToken)+0x45e>
c000ce49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce4c:	0f b6 c0             	movzx  eax,al
c000ce4f:	83 ec 0c             	sub    esp,0xc
c000ce52:	50                   	push   eax
c000ce53:	e8 ca fa ff ff       	call   c000c922 <sendKeyToTerminal(unsigned char)>
c000ce58:	83 c4 10             	add    esp,0x10
c000ce5b:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000ce5e:	83 f0 01             	xor    eax,0x1
c000ce61:	0f b6 c0             	movzx  eax,al
c000ce64:	85 c0                	test   eax,eax
c000ce66:	74 5d                	je     c000cec5 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000ce68:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000ce6b:	83 f0 01             	xor    eax,0x1
c000ce6e:	0f b6 c0             	movzx  eax,al
c000ce71:	85 c0                	test   eax,eax
c000ce73:	74 50                	je     c000cec5 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000ce75:	a0 e0 80 02 c0       	mov    al,ds:0xc00280e0
c000ce7a:	0f b6 c0             	movzx  eax,al
c000ce7d:	85 c0                	test   eax,eax
c000ce7f:	74 44                	je     c000cec5 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000ce81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce84:	0f b7 c0             	movzx  eax,ax
c000ce87:	83 f8 3f             	cmp    eax,0x3f
c000ce8a:	76 39                	jbe    c000cec5 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000ce8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce8f:	0f b7 c0             	movzx  eax,ax
c000ce92:	83 f8 7f             	cmp    eax,0x7f
c000ce95:	77 2e                	ja     c000cec5 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000ce97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce9a:	88 c2                	mov    dl,al
c000ce9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce9f:	0f b7 c0             	movzx  eax,ax
c000cea2:	83 f8 5f             	cmp    eax,0x5f
c000cea5:	76 04                	jbe    c000ceab <sendKeyboardToken(KeyboardToken)+0x4ae>
c000cea7:	b0 20                	mov    al,0x20
c000cea9:	eb 02                	jmp    c000cead <sendKeyboardToken(KeyboardToken)+0x4b0>
c000ceab:	b0 00                	mov    al,0x0
c000cead:	89 d1                	mov    ecx,edx
c000ceaf:	29 c1                	sub    ecx,eax
c000ceb1:	89 c8                	mov    eax,ecx
c000ceb3:	83 e8 40             	sub    eax,0x40
c000ceb6:	0f b6 c0             	movzx  eax,al
c000ceb9:	83 ec 0c             	sub    esp,0xc
c000cebc:	50                   	push   eax
c000cebd:	e8 60 fa ff ff       	call   c000c922 <sendKeyToTerminal(unsigned char)>
c000cec2:	83 c4 10             	add    esp,0x10
c000cec5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cec8:	0f b7 c0             	movzx  eax,ax
c000cecb:	3d 00 03 00 00       	cmp    eax,0x300
c000ced0:	75 12                	jne    c000cee4 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000ced2:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000ced5:	83 f0 01             	xor    eax,0x1
c000ced8:	0f b6 c0             	movzx  eax,al
c000cedb:	85 c0                	test   eax,eax
c000cedd:	74 05                	je     c000cee4 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000cedf:	e8 11 b6 ff ff       	call   c00084f5 <doTerminalCycle()>
c000cee4:	90                   	nop
c000cee5:	c9                   	leave  
c000cee6:	c3                   	ret    

c000cee7 <clearInternalKeybuffer(VgaText*)>:
c000cee7:	55                   	push   ebp
c000cee8:	89 e5                	mov    ebp,esp
c000ceea:	83 ec 08             	sub    esp,0x8
c000ceed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cef0:	05 02 01 00 00       	add    eax,0x102
c000cef5:	83 ec 0c             	sub    esp,0xc
c000cef8:	50                   	push   eax
c000cef9:	e8 72 36 ff ff       	call   c0000570 <strlen>
c000cefe:	83 c4 10             	add    esp,0x10
c000cf01:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cf04:	81 c2 02 01 00 00    	add    edx,0x102
c000cf0a:	83 ec 04             	sub    esp,0x4
c000cf0d:	50                   	push   eax
c000cf0e:	6a 00                	push   0x0
c000cf10:	52                   	push   edx
c000cf11:	e8 da 35 ff ff       	call   c00004f0 <memset>
c000cf16:	83 c4 10             	add    esp,0x10
c000cf19:	90                   	nop
c000cf1a:	c9                   	leave  
c000cf1b:	c3                   	ret    

c000cf1c <readKeyboard(VgaText*, char*, unsigned long)>:
c000cf1c:	55                   	push   ebp
c000cf1d:	89 e5                	mov    ebp,esp
c000cf1f:	83 ec 18             	sub    esp,0x18
c000cf22:	a1 c8 7f 02 c0       	mov    eax,ds:0xc0027fc8
c000cf27:	85 c0                	test   eax,eax
c000cf29:	74 2a                	je     c000cf55 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000cf2b:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000cf31:	8b 0d c8 7f 02 c0    	mov    ecx,DWORD PTR ds:0xc0027fc8
c000cf37:	83 ec 04             	sub    esp,0x4
c000cf3a:	68 e0 7f 02 c0       	push   0xc0027fe0
c000cf3f:	83 ec 08             	sub    esp,0x8
c000cf42:	89 e2                	mov    edx,esp
c000cf44:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000cf47:	89 02                	mov    DWORD PTR [edx],eax
c000cf49:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000cf4c:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000cf50:	ff d1                	call   ecx
c000cf52:	83 c4 10             	add    esp,0x10
c000cf55:	fb                   	sti    
c000cf56:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000cf5d:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000cf61:	0f 84 0d 01 00 00    	je     c000d074 <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000cf67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cf6a:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000cf70:	0f be c0             	movsx  eax,al
c000cf73:	85 c0                	test   eax,eax
c000cf75:	75 2c                	jne    c000cfa3 <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000cf77:	fa                   	cli    
c000cf78:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c000cf7d:	83 c0 01             	add    eax,0x1
c000cf80:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c000cf85:	e8 82 84 00 00       	call   c001540c <schedule()>
c000cf8a:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c000cf8f:	83 e8 01             	sub    eax,0x1
c000cf92:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c000cf97:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c000cf9c:	85 c0                	test   eax,eax
c000cf9e:	75 c7                	jne    c000cf67 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000cfa0:	fb                   	sti    
c000cfa1:	eb c4                	jmp    c000cf67 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000cfa3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000cfa6:	8d 50 01             	lea    edx,[eax+0x1]
c000cfa9:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cfac:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cfaf:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000cfb5:	88 10                	mov    BYTE PTR [eax],dl
c000cfb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cfba:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000cfc0:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000cfc3:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000cfc7:	83 f8 03             	cmp    eax,0x3
c000cfca:	75 1e                	jne    c000cfea <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000cfcc:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000cfd1:	8b 00                	mov    eax,DWORD PTR [eax]
c000cfd3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000cfd6:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000cfdc:	83 ec 08             	sub    esp,0x8
c000cfdf:	6a 02                	push   0x2
c000cfe1:	50                   	push   eax
c000cfe2:	e8 57 40 00 00       	call   c001103e <KeRaiseSignal(SigHandlerBlock*, int)>
c000cfe7:	83 c4 10             	add    esp,0x10
c000cfea:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000cfee:	83 f8 1c             	cmp    eax,0x1c
c000cff1:	75 1e                	jne    c000d011 <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000cff3:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000cff8:	8b 00                	mov    eax,DWORD PTR [eax]
c000cffa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000cffd:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d003:	83 ec 08             	sub    esp,0x8
c000d006:	6a 09                	push   0x9
c000d008:	50                   	push   eax
c000d009:	e8 30 40 00 00       	call   c001103e <KeRaiseSignal(SigHandlerBlock*, int)>
c000d00e:	83 c4 10             	add    esp,0x10
c000d011:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d014:	05 02 01 00 00       	add    eax,0x102
c000d019:	83 ec 0c             	sub    esp,0xc
c000d01c:	50                   	push   eax
c000d01d:	e8 4e 35 ff ff       	call   c0000570 <strlen>
c000d022:	83 c4 10             	add    esp,0x10
c000d025:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d028:	81 c2 02 01 00 00    	add    edx,0x102
c000d02e:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d031:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d034:	81 c2 02 01 00 00    	add    edx,0x102
c000d03a:	83 ec 04             	sub    esp,0x4
c000d03d:	50                   	push   eax
c000d03e:	51                   	push   ecx
c000d03f:	52                   	push   edx
c000d040:	e8 8b 33 ff ff       	call   c00003d0 <memmove>
c000d045:	83 c4 10             	add    esp,0x10
c000d048:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000d04c:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000d050:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d054:	83 f8 0a             	cmp    eax,0xa
c000d057:	74 16                	je     c000d06f <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d059:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d05d:	83 f8 03             	cmp    eax,0x3
c000d060:	74 0d                	je     c000d06f <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d062:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d066:	83 f8 1c             	cmp    eax,0x1c
c000d069:	0f 85 ee fe ff ff    	jne    c000cf5d <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000d06f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d072:	eb 03                	jmp    c000d077 <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000d074:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d077:	c9                   	leave  
c000d078:	c3                   	ret    
c000d079:	90                   	nop

c000d07a <Keyboard::Keyboard(char const*)>:
c000d07a:	83 ec 0c             	sub    esp,0xc
c000d07d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d081:	83 ec 08             	sub    esp,0x8
c000d084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d088:	50                   	push   eax
c000d089:	e8 4c f1 ff ff       	call   c000c1da <Device::Device(char const*)>
c000d08e:	83 c4 10             	add    esp,0x10
c000d091:	ba 9c 0d 02 c0       	mov    edx,0xc0020d9c
c000d096:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d09a:	89 10                	mov    DWORD PTR [eax],edx
c000d09c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0a0:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000d0aa:	c6 05 c4 7f 02 c0 01 	mov    BYTE PTR ds:0xc0027fc4,0x1
c000d0b1:	90                   	nop
c000d0b2:	83 c4 0c             	add    esp,0xc
c000d0b5:	c3                   	ret    

c000d0b6 <Keyboard::~Keyboard()>:
c000d0b6:	83 ec 0c             	sub    esp,0xc
c000d0b9:	ba 9c 0d 02 c0       	mov    edx,0xc0020d9c
c000d0be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0c2:	89 10                	mov    DWORD PTR [eax],edx
c000d0c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0c8:	83 ec 0c             	sub    esp,0xc
c000d0cb:	50                   	push   eax
c000d0cc:	e8 73 ee ff ff       	call   c000bf44 <Device::~Device()>
c000d0d1:	83 c4 10             	add    esp,0x10
c000d0d4:	90                   	nop
c000d0d5:	83 c4 0c             	add    esp,0xc
c000d0d8:	c3                   	ret    
c000d0d9:	90                   	nop

c000d0da <Keyboard::~Keyboard()>:
c000d0da:	83 ec 0c             	sub    esp,0xc
c000d0dd:	83 ec 0c             	sub    esp,0xc
c000d0e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0e4:	e8 cd ff ff ff       	call   c000d0b6 <Keyboard::~Keyboard()>
c000d0e9:	83 c4 10             	add    esp,0x10
c000d0ec:	83 ec 08             	sub    esp,0x8
c000d0ef:	68 5c 01 00 00       	push   0x15c
c000d0f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f8:	e8 0f d7 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000d0fd:	83 c4 10             	add    esp,0x10
c000d100:	83 c4 0c             	add    esp,0xc
c000d103:	c3                   	ret    

c000d104 <LogicalDisk::close(int, int, void*)>:
c000d104:	83 c8 ff             	or     eax,0xffffffff
c000d107:	c3                   	ret    

c000d108 <LogicalDisk::~LogicalDisk()>:
c000d108:	83 ec 0c             	sub    esp,0xc
c000d10b:	ba 14 0e 02 c0       	mov    edx,0xc0020e14
c000d110:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d114:	89 10                	mov    DWORD PTR [eax],edx
c000d116:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d11a:	83 ec 0c             	sub    esp,0xc
c000d11d:	50                   	push   eax
c000d11e:	e8 21 ee ff ff       	call   c000bf44 <Device::~Device()>
c000d123:	83 c4 10             	add    esp,0x10
c000d126:	90                   	nop
c000d127:	83 c4 0c             	add    esp,0xc
c000d12a:	c3                   	ret    
c000d12b:	90                   	nop

c000d12c <LogicalDisk::~LogicalDisk()>:
c000d12c:	83 ec 0c             	sub    esp,0xc
c000d12f:	83 ec 0c             	sub    esp,0xc
c000d132:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d136:	e8 cd ff ff ff       	call   c000d108 <LogicalDisk::~LogicalDisk()>
c000d13b:	83 c4 10             	add    esp,0x10
c000d13e:	83 ec 08             	sub    esp,0x8
c000d141:	68 78 01 00 00       	push   0x178
c000d146:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d14a:	e8 bd d6 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000d14f:	83 c4 10             	add    esp,0x10
c000d152:	83 c4 0c             	add    esp,0xc
c000d155:	c3                   	ret    

c000d156 <LogicalDisk::open(int, int, void*)>:
c000d156:	83 ec 18             	sub    esp,0x18
c000d159:	68 c8 0d 02 c0       	push   0xc0020dc8
c000d15e:	e8 38 3a 00 00       	call   c0010b9b <KePanic(char const*)>
c000d163:	83 c8 ff             	or     eax,0xffffffff
c000d166:	83 c4 1c             	add    esp,0x1c
c000d169:	c3                   	ret    

c000d16a <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000d16a:	53                   	push   ebx
c000d16b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d16f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d173:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d177:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000d17d:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000d183:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000d189:	77 10                	ja     c000d19b <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000d18b:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000d191:	89 d3                	mov    ebx,edx
c000d193:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000d199:	72 05                	jb     c000d1a0 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000d19b:	83 c8 ff             	or     eax,0xffffffff
c000d19e:	89 c2                	mov    edx,eax
c000d1a0:	5b                   	pop    ebx
c000d1a1:	c3                   	ret    

c000d1a2 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000d1a2:	56                   	push   esi
c000d1a3:	83 c8 ff             	or     eax,0xffffffff
c000d1a6:	53                   	push   ebx
c000d1a7:	89 c2                	mov    edx,eax
c000d1a9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d1ad:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d1b1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d1b5:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d1bb:	77 27                	ja     c000d1e4 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d1bd:	89 d8                	mov    eax,ebx
c000d1bf:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000d1c5:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000d1cb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d1d0:	89 c2                	mov    edx,eax
c000d1d2:	73 10                	jae    c000d1e4 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d1d4:	89 c8                	mov    eax,ecx
c000d1d6:	89 da                	mov    edx,ebx
c000d1d8:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000d1de:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000d1e4:	5b                   	pop    ebx
c000d1e5:	5e                   	pop    esi
c000d1e6:	c3                   	ret    
c000d1e7:	90                   	nop

c000d1e8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d1e8:	83 ec 1c             	sub    esp,0x1c
c000d1eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d1ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d1f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d1f7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d1fb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d1ff:	89 04 24             	mov    DWORD PTR [esp],eax
c000d202:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d206:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d20a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d20e:	83 ec 08             	sub    esp,0x8
c000d211:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d215:	50                   	push   eax
c000d216:	e8 bf ef ff ff       	call   c000c1da <Device::Device(char const*)>
c000d21b:	83 c4 10             	add    esp,0x10
c000d21e:	ba 14 0e 02 c0       	mov    edx,0xc0020e14
c000d223:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d227:	89 10                	mov    DWORD PTR [eax],edx
c000d229:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d22d:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d234:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d238:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000d23f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d243:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d24a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d24e:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000d258:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d25c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d260:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d264:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000d26a:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000d270:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d274:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d277:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d27b:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000d281:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000d287:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d28b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d28f:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000d295:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d299:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d2a3:	90                   	nop
c000d2a4:	83 c4 1c             	add    esp,0x1c
c000d2a7:	c3                   	ret    

c000d2a8 <LogicalDisk::assignDriveLetter()>:
c000d2a8:	55                   	push   ebp
c000d2a9:	57                   	push   edi
c000d2aa:	56                   	push   esi
c000d2ab:	53                   	push   ebx
c000d2ac:	83 ec 14             	sub    esp,0x14
c000d2af:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d2b3:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000d2b9:	b0 41                	mov    al,0x41
c000d2bb:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000d2c1:	84 d2                	test   dl,dl
c000d2c3:	75 02                	jne    c000d2c7 <LogicalDisk::assignDriveLetter()+0x1f>
c000d2c5:	b0 43                	mov    al,0x43
c000d2c7:	8b 3d 00 84 02 c0    	mov    edi,DWORD PTR ds:0xc0028400
c000d2cd:	0f b6 ca             	movzx  ecx,dl
c000d2d0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000d2d4:	0f be e8             	movsx  ebp,al
c000d2d7:	8b 3d 04 84 02 c0    	mov    edi,DWORD PTR ds:0xc0028404
c000d2dd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000d2e1:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000d2e5:	3c 43                	cmp    al,0x43
c000d2e7:	75 10                	jne    c000d2f9 <LogicalDisk::assignDriveLetter()+0x51>
c000d2e9:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000d2f0:	75 5a                	jne    c000d34c <LogicalDisk::assignDriveLetter()+0xa4>
c000d2f2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000d2f7:	75 53                	jne    c000d34c <LogicalDisk::assignDriveLetter()+0xa4>
c000d2f9:	8d 75 bf             	lea    esi,[ebp-0x41]
c000d2fc:	ba 01 00 00 00       	mov    edx,0x1
c000d301:	89 34 24             	mov    DWORD PTR [esp],esi
c000d304:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000d307:	d3 e2                	shl    edx,cl
c000d309:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d30d:	89 d7                	mov    edi,edx
c000d30f:	89 d6                	mov    esi,edx
c000d311:	c1 ff 1f             	sar    edi,0x1f
c000d314:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000d318:	21 f9                	and    ecx,edi
c000d31a:	09 d1                	or     ecx,edx
c000d31c:	75 2e                	jne    c000d34c <LogicalDisk::assignDriveLetter()+0xa4>
c000d31e:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000d322:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d326:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000d32c:	09 f2                	or     edx,esi
c000d32e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000d331:	89 15 00 84 02 c0    	mov    DWORD PTR ds:0xc0028400,edx
c000d337:	89 1c b5 20 84 02 c0 	mov    DWORD PTR [esi*4-0x3ffd7be0],ebx
c000d33e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d342:	09 fa                	or     edx,edi
c000d344:	89 15 04 84 02 c0    	mov    DWORD PTR ds:0xc0028404,edx
c000d34a:	eb 0d                	jmp    c000d359 <LogicalDisk::assignDriveLetter()+0xb1>
c000d34c:	8d 50 01             	lea    edx,[eax+0x1]
c000d34f:	45                   	inc    ebp
c000d350:	88 d0                	mov    al,dl
c000d352:	80 fa 5b             	cmp    dl,0x5b
c000d355:	75 8e                	jne    c000d2e5 <LogicalDisk::assignDriveLetter()+0x3d>
c000d357:	31 c0                	xor    eax,eax
c000d359:	83 c4 14             	add    esp,0x14
c000d35c:	5b                   	pop    ebx
c000d35d:	5e                   	pop    esi
c000d35e:	5f                   	pop    edi
c000d35f:	5d                   	pop    ebp
c000d360:	c3                   	ret    
c000d361:	90                   	nop

c000d362 <LogicalDisk::mount()>:
c000d362:	56                   	push   esi
c000d363:	53                   	push   ebx
c000d364:	53                   	push   ebx
c000d365:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d369:	8b 1d b4 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb4
c000d36f:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000d379:	85 db                	test   ebx,ebx
c000d37b:	74 27                	je     c000d3a4 <LogicalDisk::mount()+0x42>
c000d37d:	51                   	push   ecx
c000d37e:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000d385:	8b 13                	mov    edx,DWORD PTR [ebx]
c000d387:	83 e8 41             	sub    eax,0x41
c000d38a:	50                   	push   eax
c000d38b:	56                   	push   esi
c000d38c:	53                   	push   ebx
c000d38d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d390:	83 c4 10             	add    esp,0x10
c000d393:	84 c0                	test   al,al
c000d395:	74 08                	je     c000d39f <LogicalDisk::mount()+0x3d>
c000d397:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000d39d:	eb 07                	jmp    c000d3a6 <LogicalDisk::mount()+0x44>
c000d39f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000d3a2:	eb d5                	jmp    c000d379 <LogicalDisk::mount()+0x17>
c000d3a4:	31 c0                	xor    eax,eax
c000d3a6:	5a                   	pop    edx
c000d3a7:	5b                   	pop    ebx
c000d3a8:	5e                   	pop    esi
c000d3a9:	c3                   	ret    

c000d3aa <LogicalDisk::unmount()>:
c000d3aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d3ae:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d3b8:	c3                   	ret    
c000d3b9:	90                   	nop

c000d3ba <LogicalDisk::eject()>:
c000d3ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d3be:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000d3c4:	8b 10                	mov    edx,DWORD PTR [eax]
c000d3c6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d3ca:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000d3cd:	90                   	nop

c000d3ce <LogicalDisk::unassignDriveLetter()>:
c000d3ce:	57                   	push   edi
c000d3cf:	56                   	push   esi
c000d3d0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d3d4:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000d3db:	85 c9                	test   ecx,ecx
c000d3dd:	75 0f                	jne    c000d3ee <LogicalDisk::unassignDriveLetter()+0x20>
c000d3df:	c7 44 24 0c ec 0d 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020dec
c000d3e7:	5e                   	pop    esi
c000d3e8:	5f                   	pop    edi
c000d3e9:	e9 ad 37 00 00       	jmp    c0010b9b <KePanic(char const*)>
c000d3ee:	83 e9 41             	sub    ecx,0x41
c000d3f1:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000d3f8:	b8 01 00 00 00       	mov    eax,0x1
c000d3fd:	c7 04 8d 20 84 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd7be0],0x0
c000d408:	d3 e0                	shl    eax,cl
c000d40a:	89 c7                	mov    edi,eax
c000d40c:	f7 d0                	not    eax
c000d40e:	c1 ff 1f             	sar    edi,0x1f
c000d411:	21 05 00 84 02 c0    	and    DWORD PTR ds:0xc0028400,eax
c000d417:	89 fe                	mov    esi,edi
c000d419:	f7 d6                	not    esi
c000d41b:	21 35 04 84 02 c0    	and    DWORD PTR ds:0xc0028404,esi
c000d421:	5e                   	pop    esi
c000d422:	5f                   	pop    edi
c000d423:	c3                   	ret    

c000d424 <LogicalDisk::read(unsigned long long, int, void*)>:
c000d424:	57                   	push   edi
c000d425:	56                   	push   esi
c000d426:	53                   	push   ebx
c000d427:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d42b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d42f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d433:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d437:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d43d:	77 41                	ja     c000d480 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000d43f:	99                   	cdq    
c000d440:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d446:	01 c8                	add    eax,ecx
c000d448:	11 da                	adc    edx,ebx
c000d44a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d450:	19 d7                	sbb    edi,edx
c000d452:	72 33                	jb     c000d487 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000d454:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d45a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d460:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d464:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d468:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d46e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d474:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d478:	5b                   	pop    ebx
c000d479:	5e                   	pop    esi
c000d47a:	5f                   	pop    edi
c000d47b:	e9 c6 0a 00 00       	jmp    c000df46 <VCache::read(unsigned long long, int, void*)>
c000d480:	b8 05 00 00 00       	mov    eax,0x5
c000d485:	eb 05                	jmp    c000d48c <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000d487:	b8 07 00 00 00       	mov    eax,0x7
c000d48c:	5b                   	pop    ebx
c000d48d:	5e                   	pop    esi
c000d48e:	5f                   	pop    edi
c000d48f:	c3                   	ret    

c000d490 <LogicalDisk::write(unsigned long long, int, void*)>:
c000d490:	57                   	push   edi
c000d491:	56                   	push   esi
c000d492:	53                   	push   ebx
c000d493:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d497:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d49b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d49f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d4a3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d4a9:	77 41                	ja     c000d4ec <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000d4ab:	99                   	cdq    
c000d4ac:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d4b2:	01 c8                	add    eax,ecx
c000d4b4:	11 da                	adc    edx,ebx
c000d4b6:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d4bc:	19 d7                	sbb    edi,edx
c000d4be:	72 33                	jb     c000d4f3 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000d4c0:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d4c6:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d4cc:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d4d0:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d4d4:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d4da:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d4e0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d4e4:	5b                   	pop    ebx
c000d4e5:	5e                   	pop    esi
c000d4e6:	5f                   	pop    edi
c000d4e7:	e9 6c 09 00 00       	jmp    c000de58 <VCache::write(unsigned long long, int, void*)>
c000d4ec:	b8 05 00 00 00       	mov    eax,0x5
c000d4f1:	eb 05                	jmp    c000d4f8 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000d4f3:	b8 07 00 00 00       	mov    eax,0x7
c000d4f8:	5b                   	pop    ebx
c000d4f9:	5e                   	pop    esi
c000d4fa:	5f                   	pop    edi
c000d4fb:	c3                   	ret    

c000d4fc <Mouse::Mouse(char const*)>:
c000d4fc:	83 ec 0c             	sub    esp,0xc
c000d4ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d503:	83 ec 08             	sub    esp,0x8
c000d506:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d50a:	50                   	push   eax
c000d50b:	e8 ca ec ff ff       	call   c000c1da <Device::Device(char const*)>
c000d510:	83 c4 10             	add    esp,0x10
c000d513:	ba 40 0e 02 c0       	mov    edx,0xc0020e40
c000d518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d51c:	89 10                	mov    DWORD PTR [eax],edx
c000d51e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d522:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000d52c:	90                   	nop
c000d52d:	83 c4 0c             	add    esp,0xc
c000d530:	c3                   	ret    
c000d531:	90                   	nop
c000d532:	66 90                	xchg   ax,ax

c000d534 <Mouse::~Mouse()>:
c000d534:	83 ec 0c             	sub    esp,0xc
c000d537:	ba 40 0e 02 c0       	mov    edx,0xc0020e40
c000d53c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d540:	89 10                	mov    DWORD PTR [eax],edx
c000d542:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d546:	83 ec 0c             	sub    esp,0xc
c000d549:	50                   	push   eax
c000d54a:	e8 f5 e9 ff ff       	call   c000bf44 <Device::~Device()>
c000d54f:	83 c4 10             	add    esp,0x10
c000d552:	90                   	nop
c000d553:	83 c4 0c             	add    esp,0xc
c000d556:	c3                   	ret    
c000d557:	90                   	nop

c000d558 <Mouse::~Mouse()>:
c000d558:	83 ec 0c             	sub    esp,0xc
c000d55b:	83 ec 0c             	sub    esp,0xc
c000d55e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d562:	e8 cd ff ff ff       	call   c000d534 <Mouse::~Mouse()>
c000d567:	83 c4 10             	add    esp,0x10
c000d56a:	83 ec 08             	sub    esp,0x8
c000d56d:	68 58 01 00 00       	push   0x158
c000d572:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d576:	e8 91 d2 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000d57b:	83 c4 10             	add    esp,0x10
c000d57e:	83 c4 0c             	add    esp,0xc
c000d581:	c3                   	ret    

c000d582 <NIC::getMAC()>:
c000d582:	31 c0                	xor    eax,eax
c000d584:	31 d2                	xor    edx,edx
c000d586:	c3                   	ret    
c000d587:	90                   	nop

c000d588 <NIC::write(int, unsigned char*, int*)>:
c000d588:	b8 01 00 00 00       	mov    eax,0x1
c000d58d:	c3                   	ret    

c000d58e <NIC::NIC(char const*)>:
c000d58e:	83 ec 0c             	sub    esp,0xc
c000d591:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d595:	83 ec 08             	sub    esp,0x8
c000d598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d59c:	50                   	push   eax
c000d59d:	e8 38 ec ff ff       	call   c000c1da <Device::Device(char const*)>
c000d5a2:	83 c4 10             	add    esp,0x10
c000d5a5:	ba 6c 0e 02 c0       	mov    edx,0xc0020e6c
c000d5aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5ae:	89 10                	mov    DWORD PTR [eax],edx
c000d5b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5b4:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000d5be:	90                   	nop
c000d5bf:	83 c4 0c             	add    esp,0xc
c000d5c2:	c3                   	ret    
c000d5c3:	90                   	nop

c000d5c4 <NIC::~NIC()>:
c000d5c4:	83 ec 0c             	sub    esp,0xc
c000d5c7:	ba 6c 0e 02 c0       	mov    edx,0xc0020e6c
c000d5cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5d0:	89 10                	mov    DWORD PTR [eax],edx
c000d5d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5d6:	83 ec 0c             	sub    esp,0xc
c000d5d9:	50                   	push   eax
c000d5da:	e8 65 e9 ff ff       	call   c000bf44 <Device::~Device()>
c000d5df:	83 c4 10             	add    esp,0x10
c000d5e2:	90                   	nop
c000d5e3:	83 c4 0c             	add    esp,0xc
c000d5e6:	c3                   	ret    
c000d5e7:	90                   	nop

c000d5e8 <NIC::~NIC()>:
c000d5e8:	83 ec 0c             	sub    esp,0xc
c000d5eb:	83 ec 0c             	sub    esp,0xc
c000d5ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5f2:	e8 cd ff ff ff       	call   c000d5c4 <NIC::~NIC()>
c000d5f7:	83 c4 10             	add    esp,0x10
c000d5fa:	83 ec 08             	sub    esp,0x8
c000d5fd:	68 58 01 00 00       	push   0x158
c000d602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d606:	e8 01 d2 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000d60b:	83 c4 10             	add    esp,0x10
c000d60e:	83 c4 0c             	add    esp,0xc
c000d611:	c3                   	ret    

c000d612 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d612:	55                   	push   ebp
c000d613:	57                   	push   edi
c000d614:	56                   	push   esi
c000d615:	53                   	push   ebx
c000d616:	81 ec 28 01 00 00    	sub    esp,0x128
c000d61c:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000d623:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000d62a:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000d631:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000d638:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d63c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d640:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d647:	e8 8a ec ff ff       	call   c000c2d6 <Device::getName()>
c000d64c:	5a                   	pop    edx
c000d64d:	59                   	pop    ecx
c000d64e:	50                   	push   eax
c000d64f:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000d653:	55                   	push   ebp
c000d654:	e8 e7 2f ff ff       	call   c0000640 <strcpy>
c000d659:	5b                   	pop    ebx
c000d65a:	58                   	pop    eax
c000d65b:	68 98 0e 02 c0       	push   0xc0020e98
c000d660:	55                   	push   ebp
c000d661:	e8 da 31 ff ff       	call   c0000840 <strcat>
c000d666:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000d66d:	e8 3c a4 ff ff       	call   c0007aae <malloc>
c000d672:	83 c4 0c             	add    esp,0xc
c000d675:	89 c3                	mov    ebx,eax
c000d677:	57                   	push   edi
c000d678:	56                   	push   esi
c000d679:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d67d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d681:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000d688:	55                   	push   ebp
c000d689:	50                   	push   eax
c000d68a:	e8 59 fb ff ff       	call   c000d1e8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000d68f:	83 c4 14             	add    esp,0x14
c000d692:	53                   	push   ebx
c000d693:	e8 10 fc ff ff       	call   c000d2a8 <LogicalDisk::assignDriveLetter()>
c000d698:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d69b:	e8 c2 fc ff ff       	call   c000d362 <LogicalDisk::mount()>
c000d6a0:	58                   	pop    eax
c000d6a1:	5a                   	pop    edx
c000d6a2:	53                   	push   ebx
c000d6a3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d6aa:	e8 93 e9 ff ff       	call   c000c042 <Device::addChild(Device*)>
c000d6af:	81 c4 2c 01 00 00    	add    esp,0x12c
c000d6b5:	5b                   	pop    ebx
c000d6b6:	5e                   	pop    esi
c000d6b7:	5f                   	pop    edi
c000d6b8:	5d                   	pop    ebp
c000d6b9:	c3                   	ret    

c000d6ba <createPartitionsForDisk(PhysicalDisk*)>:
c000d6ba:	55                   	push   ebp
c000d6bb:	57                   	push   edi
c000d6bc:	56                   	push   esi
c000d6bd:	53                   	push   ebx
c000d6be:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000d6c4:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000d6cb:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000d6d1:	3d 00 02 00 00       	cmp    eax,0x200
c000d6d6:	74 27                	je     c000d6ff <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000d6d8:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000d6de:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000d6e4:	83 ec 10             	sub    esp,0x10
c000d6e7:	0f a4 f7 0a          	shld   edi,esi,0xa
c000d6eb:	99                   	cdq    
c000d6ec:	c1 e6 0a             	shl    esi,0xa
c000d6ef:	52                   	push   edx
c000d6f0:	89 fd                	mov    ebp,edi
c000d6f2:	50                   	push   eax
c000d6f3:	55                   	push   ebp
c000d6f4:	56                   	push   esi
c000d6f5:	e8 16 13 01 00       	call   c001ea10 <__udivdi3>
c000d6fa:	e9 b9 00 00 00       	jmp    c000d7b8 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000d6ff:	83 ec 0c             	sub    esp,0xc
c000d702:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d704:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000d708:	56                   	push   esi
c000d709:	6a 01                	push   0x1
c000d70b:	6a 00                	push   0x0
c000d70d:	6a 00                	push   0x0
c000d70f:	53                   	push   ebx
c000d710:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d713:	83 c4 20             	add    esp,0x20
c000d716:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000d71e:	75 0a                	jne    c000d72a <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000d720:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000d728:	74 2c                	je     c000d756 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000d72a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d730:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d736:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d73c:	83 ec 10             	sub    esp,0x10
c000d73f:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d743:	89 f7                	mov    edi,esi
c000d745:	c1 e0 0a             	shl    eax,0xa
c000d748:	c1 ff 1f             	sar    edi,0x1f
c000d74b:	57                   	push   edi
c000d74c:	56                   	push   esi
c000d74d:	52                   	push   edx
c000d74e:	50                   	push   eax
c000d74f:	e8 bc 12 01 00       	call   c001ea10 <__udivdi3>
c000d754:	eb 62                	jmp    c000d7b8 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000d756:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000d75d:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000d764:	89 cf                	mov    edi,ecx
c000d766:	83 e2 7f             	and    edx,0x7f
c000d769:	83 e7 7f             	and    edi,0x7f
c000d76c:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000d773:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000d776:	83 e0 7f             	and    eax,0x7f
c000d779:	8d 14 01             	lea    edx,[ecx+eax*1]
c000d77c:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000d783:	83 e0 7f             	and    eax,0x7f
c000d786:	01 d0                	add    eax,edx
c000d788:	89 c5                	mov    ebp,eax
c000d78a:	84 c0                	test   al,al
c000d78c:	74 41                	je     c000d7cf <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000d78e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d794:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d79a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d7a0:	83 ec 10             	sub    esp,0x10
c000d7a3:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d7a7:	89 f7                	mov    edi,esi
c000d7a9:	c1 e0 0a             	shl    eax,0xa
c000d7ac:	c1 ff 1f             	sar    edi,0x1f
c000d7af:	57                   	push   edi
c000d7b0:	56                   	push   esi
c000d7b1:	52                   	push   edx
c000d7b2:	50                   	push   eax
c000d7b3:	e8 58 12 01 00       	call   c001ea10 <__udivdi3>
c000d7b8:	83 c4 14             	add    esp,0x14
c000d7bb:	52                   	push   edx
c000d7bc:	50                   	push   eax
c000d7bd:	6a 00                	push   0x0
c000d7bf:	6a 00                	push   0x0
c000d7c1:	53                   	push   ebx
c000d7c2:	e8 4b fe ff ff       	call   c000d612 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d7c7:	83 c4 20             	add    esp,0x20
c000d7ca:	e9 73 01 00 00       	jmp    c000d942 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000d7cf:	89 f0                	mov    eax,esi
c000d7d1:	31 c9                	xor    ecx,ecx
c000d7d3:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000d7da:	75 02                	jne    c000d7de <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000d7dc:	89 cd                	mov    ebp,ecx
c000d7de:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000d7e5:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c000d7ec:	c1 e2 08             	shl    edx,0x8
c000d7ef:	c1 e6 10             	shl    esi,0x10
c000d7f2:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000d7fa:	09 f2                	or     edx,esi
c000d7fc:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000d804:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c000d80b:	83 c0 10             	add    eax,0x10
c000d80e:	09 f2                	or     edx,esi
c000d810:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000d817:	c1 e6 18             	shl    esi,0x18
c000d81a:	09 f2                	or     edx,esi
c000d81c:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000d823:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000d827:	c1 e6 10             	shl    esi,0x10
c000d82a:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000d831:	c1 e2 08             	shl    edx,0x8
c000d834:	09 f2                	or     edx,esi
c000d836:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000d83d:	09 f2                	or     edx,esi
c000d83f:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000d846:	c1 e6 18             	shl    esi,0x18
c000d849:	09 f2                	or     edx,esi
c000d84b:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000d84f:	41                   	inc    ecx
c000d850:	83 f9 04             	cmp    ecx,0x4
c000d853:	0f 85 7a ff ff ff    	jne    c000d7d3 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000d859:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d85d:	83 f0 01             	xor    eax,0x1
c000d860:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d864:	75 4f                	jne    c000d8b5 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d866:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d86a:	83 f0 01             	xor    eax,0x1
c000d86d:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000d871:	75 42                	jne    c000d8b5 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d873:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d87b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d883:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d889:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d88f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d895:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d899:	89 f7                	mov    edi,esi
c000d89b:	c1 e0 0a             	shl    eax,0xa
c000d89e:	c1 ff 1f             	sar    edi,0x1f
c000d8a1:	57                   	push   edi
c000d8a2:	56                   	push   esi
c000d8a3:	52                   	push   edx
c000d8a4:	50                   	push   eax
c000d8a5:	e8 66 11 01 00       	call   c001ea10 <__udivdi3>
c000d8aa:	83 c4 10             	add    esp,0x10
c000d8ad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d8b1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d8b5:	89 e8                	mov    eax,ebp
c000d8b7:	0f b6 e8             	movzx  ebp,al
c000d8ba:	85 ed                	test   ebp,ebp
c000d8bc:	74 50                	je     c000d90e <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d8be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d8c2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000d8c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d8ca:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000d8ce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d8d2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d8d6:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d8da:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d8de:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d8e2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d8e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d8ea:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000d8ee:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000d8f2:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d8f6:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d8fa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d8fe:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000d902:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000d906:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000d90a:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000d90e:	31 ed                	xor    ebp,ebp
c000d910:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d914:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d918:	89 f8                	mov    eax,edi
c000d91a:	09 f0                	or     eax,esi
c000d91c:	74 1e                	je     c000d93c <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000d91e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d922:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d926:	89 d1                	mov    ecx,edx
c000d928:	09 c1                	or     ecx,eax
c000d92a:	74 10                	je     c000d93c <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000d92c:	83 ec 0c             	sub    esp,0xc
c000d92f:	57                   	push   edi
c000d930:	56                   	push   esi
c000d931:	52                   	push   edx
c000d932:	50                   	push   eax
c000d933:	53                   	push   ebx
c000d934:	e8 d9 fc ff ff       	call   c000d612 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d939:	83 c4 20             	add    esp,0x20
c000d93c:	45                   	inc    ebp
c000d93d:	83 fd 04             	cmp    ebp,0x4
c000d940:	75 ce                	jne    c000d910 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000d942:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d948:	5b                   	pop    ebx
c000d949:	5e                   	pop    esi
c000d94a:	5f                   	pop    edi
c000d94b:	5d                   	pop    ebp
c000d94c:	c3                   	ret    
c000d94d:	66 90                	xchg   ax,ax
c000d94f:	90                   	nop

c000d950 <Serial::Serial(char const*)>:
c000d950:	83 ec 0c             	sub    esp,0xc
c000d953:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d957:	83 ec 08             	sub    esp,0x8
c000d95a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d95e:	50                   	push   eax
c000d95f:	e8 76 e8 ff ff       	call   c000c1da <Device::Device(char const*)>
c000d964:	83 c4 10             	add    esp,0x10
c000d967:	ba ac 0e 02 c0       	mov    edx,0xc0020eac
c000d96c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d970:	89 10                	mov    DWORD PTR [eax],edx
c000d972:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d976:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d980:	90                   	nop
c000d981:	83 c4 0c             	add    esp,0xc
c000d984:	c3                   	ret    
c000d985:	90                   	nop
c000d986:	66 90                	xchg   ax,ax

c000d988 <Serial::~Serial()>:
c000d988:	83 ec 0c             	sub    esp,0xc
c000d98b:	ba ac 0e 02 c0       	mov    edx,0xc0020eac
c000d990:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d994:	89 10                	mov    DWORD PTR [eax],edx
c000d996:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d99a:	83 ec 0c             	sub    esp,0xc
c000d99d:	50                   	push   eax
c000d99e:	e8 a1 e5 ff ff       	call   c000bf44 <Device::~Device()>
c000d9a3:	83 c4 10             	add    esp,0x10
c000d9a6:	90                   	nop
c000d9a7:	83 c4 0c             	add    esp,0xc
c000d9aa:	c3                   	ret    
c000d9ab:	90                   	nop

c000d9ac <Serial::~Serial()>:
c000d9ac:	83 ec 0c             	sub    esp,0xc
c000d9af:	83 ec 0c             	sub    esp,0xc
c000d9b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9b6:	e8 cd ff ff ff       	call   c000d988 <Serial::~Serial()>
c000d9bb:	83 c4 10             	add    esp,0x10
c000d9be:	83 ec 08             	sub    esp,0x8
c000d9c1:	68 58 01 00 00       	push   0x158
c000d9c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9ca:	e8 3d ce ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000d9cf:	83 c4 10             	add    esp,0x10
c000d9d2:	83 c4 0c             	add    esp,0xc
c000d9d5:	c3                   	ret    
c000d9d6:	66 90                	xchg   ax,ax

c000d9d8 <Timer::Timer(char const*)>:
c000d9d8:	83 ec 0c             	sub    esp,0xc
c000d9db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9df:	83 ec 08             	sub    esp,0x8
c000d9e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9e6:	50                   	push   eax
c000d9e7:	e8 ee e7 ff ff       	call   c000c1da <Device::Device(char const*)>
c000d9ec:	83 c4 10             	add    esp,0x10
c000d9ef:	ba f0 0e 02 c0       	mov    edx,0xc0020ef0
c000d9f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9f8:	89 10                	mov    DWORD PTR [eax],edx
c000d9fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9fe:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000da08:	90                   	nop
c000da09:	83 c4 0c             	add    esp,0xc
c000da0c:	c3                   	ret    
c000da0d:	90                   	nop
c000da0e:	66 90                	xchg   ax,ax

c000da10 <Timer::~Timer()>:
c000da10:	83 ec 0c             	sub    esp,0xc
c000da13:	ba f0 0e 02 c0       	mov    edx,0xc0020ef0
c000da18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da1c:	89 10                	mov    DWORD PTR [eax],edx
c000da1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da22:	83 ec 0c             	sub    esp,0xc
c000da25:	50                   	push   eax
c000da26:	e8 19 e5 ff ff       	call   c000bf44 <Device::~Device()>
c000da2b:	83 c4 10             	add    esp,0x10
c000da2e:	90                   	nop
c000da2f:	83 c4 0c             	add    esp,0xc
c000da32:	c3                   	ret    
c000da33:	90                   	nop

c000da34 <Timer::~Timer()>:
c000da34:	83 ec 0c             	sub    esp,0xc
c000da37:	83 ec 0c             	sub    esp,0xc
c000da3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da3e:	e8 cd ff ff ff       	call   c000da10 <Timer::~Timer()>
c000da43:	83 c4 10             	add    esp,0x10
c000da46:	83 ec 08             	sub    esp,0x8
c000da49:	68 5c 01 00 00       	push   0x15c
c000da4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da52:	e8 b5 cd ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000da57:	83 c4 10             	add    esp,0x10
c000da5a:	83 c4 0c             	add    esp,0xc
c000da5d:	c3                   	ret    

c000da5e <Timer::read()>:
c000da5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000da62:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000da68:	c3                   	ret    

c000da69 <setupTimer(int)>:
c000da69:	53                   	push   ebx
c000da6a:	83 ec 14             	sub    esp,0x14
c000da6d:	68 5c 01 00 00       	push   0x15c
c000da72:	e8 37 a0 ff ff       	call   c0007aae <malloc>
c000da77:	89 04 24             	mov    DWORD PTR [esp],eax
c000da7a:	89 c3                	mov    ebx,eax
c000da7c:	e8 f7 07 01 00       	call   c001e278 <PIT::PIT()>
c000da81:	58                   	pop    eax
c000da82:	5a                   	pop    edx
c000da83:	53                   	push   ebx
c000da84:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c000da8a:	e8 b3 e5 ff ff       	call   c000c042 <Device::addChild(Device*)>
c000da8f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000da91:	6a 00                	push   0x0
c000da93:	6a 00                	push   0x0
c000da95:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000da99:	53                   	push   ebx
c000da9a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000da9d:	89 d8                	mov    eax,ebx
c000da9f:	83 c4 28             	add    esp,0x28
c000daa2:	5b                   	pop    ebx
c000daa3:	c3                   	ret    

c000daa4 <timerHandler(unsigned int)>:
c000daa4:	56                   	push   esi
c000daa5:	53                   	push   ebx
c000daa6:	51                   	push   ecx
c000daa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daab:	01 05 8c 84 02 c0    	add    DWORD PTR ds:0xc002848c,eax
c000dab1:	80 3d bd 5e 02 c0 00 	cmp    BYTE PTR ds:0xc0025ebd,0x0
c000dab8:	0f 84 4a 01 00 00    	je     c000dc08 <timerHandler(unsigned int)+0x164>
c000dabe:	fa                   	cli    
c000dabf:	ff 05 68 91 02 c0    	inc    DWORD PTR ds:0xc0029168
c000dac5:	83 ec 0c             	sub    esp,0xc
c000dac8:	ff 05 64 91 02 c0    	inc    DWORD PTR ds:0xc0029164
c000dace:	68 78 91 02 c0       	push   0xc0029178
c000dad3:	e8 08 15 01 00       	call   c001efe0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000dad8:	83 c4 10             	add    esp,0x10
c000dadb:	84 c0                	test   al,al
c000dadd:	0f 85 a1 00 00 00    	jne    c000db84 <timerHandler(unsigned int)+0xe0>
c000dae3:	83 ec 0c             	sub    esp,0xc
c000dae6:	68 78 91 02 c0       	push   0xc0029178
c000daeb:	e8 0c 15 01 00       	call   c001effc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000daf0:	83 c4 10             	add    esp,0x10
c000daf3:	89 c6                	mov    esi,eax
c000daf5:	8d 76 00             	lea    esi,[esi+0x0]
c000daf8:	83 ec 0c             	sub    esp,0xc
c000dafb:	68 78 91 02 c0       	push   0xc0029178
c000db00:	e8 f7 14 01 00       	call   c001effc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000db05:	c7 04 24 78 91 02 c0 	mov    DWORD PTR [esp],0xc0029178
c000db0c:	89 c3                	mov    ebx,eax
c000db0e:	e8 f1 14 01 00       	call   c001f004 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000db13:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000db16:	83 c4 10             	add    esp,0x10
c000db19:	3b 05 8c 84 02 c0    	cmp    eax,DWORD PTR ds:0xc002848c
c000db1f:	77 23                	ja     c000db44 <timerHandler(unsigned int)+0xa0>
c000db21:	83 ec 0c             	sub    esp,0xc
c000db24:	53                   	push   ebx
c000db25:	e8 fa 7d 00 00       	call   c0015924 <unblockTask(ThreadControlBlock*)>
c000db2a:	83 c4 10             	add    esp,0x10
c000db2d:	39 de                	cmp    esi,ebx
c000db2f:	75 27                	jne    c000db58 <timerHandler(unsigned int)+0xb4>
c000db31:	83 ec 0c             	sub    esp,0xc
c000db34:	68 78 91 02 c0       	push   0xc0029178
c000db39:	e8 be 14 01 00       	call   c001effc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000db3e:	89 c6                	mov    esi,eax
c000db40:	eb 12                	jmp    c000db54 <timerHandler(unsigned int)+0xb0>
c000db42:	66 90                	xchg   ax,ax
c000db44:	52                   	push   edx
c000db45:	52                   	push   edx
c000db46:	53                   	push   ebx
c000db47:	68 78 91 02 c0       	push   0xc0029178
c000db4c:	e8 6f 15 01 00       	call   c001f0c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000db51:	8d 76 00             	lea    esi,[esi+0x0]
c000db54:	83 c4 10             	add    esp,0x10
c000db57:	90                   	nop
c000db58:	83 ec 0c             	sub    esp,0xc
c000db5b:	68 78 91 02 c0       	push   0xc0029178
c000db60:	e8 7b 14 01 00       	call   c001efe0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000db65:	83 c4 10             	add    esp,0x10
c000db68:	84 c0                	test   al,al
c000db6a:	75 18                	jne    c000db84 <timerHandler(unsigned int)+0xe0>
c000db6c:	83 ec 0c             	sub    esp,0xc
c000db6f:	68 78 91 02 c0       	push   0xc0029178
c000db74:	e8 83 14 01 00       	call   c001effc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000db79:	83 c4 10             	add    esp,0x10
c000db7c:	39 f0                	cmp    eax,esi
c000db7e:	0f 85 74 ff ff ff    	jne    c000daf8 <timerHandler(unsigned int)+0x54>
c000db84:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000db89:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000db8d:	74 41                	je     c000dbd0 <timerHandler(unsigned int)+0x12c>
c000db8f:	80 3d bc 5e 02 c0 00 	cmp    BYTE PTR ds:0xc0025ebc,0x0
c000db96:	74 38                	je     c000dbd0 <timerHandler(unsigned int)+0x12c>
c000db98:	fa                   	cli    
c000db99:	ff 05 68 91 02 c0    	inc    DWORD PTR ds:0xc0029168
c000db9f:	a1 8c 84 02 c0       	mov    eax,ds:0xc002848c
c000dba4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000dbaa:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000dbad:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000dbb3:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000dbb6:	72 08                	jb     c000dbc0 <timerHandler(unsigned int)+0x11c>
c000dbb8:	e8 4f 78 00 00       	call   c001540c <schedule()>
c000dbbd:	8d 76 00             	lea    esi,[esi+0x0]
c000dbc0:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c000dbc5:	48                   	dec    eax
c000dbc6:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c000dbcb:	75 03                	jne    c000dbd0 <timerHandler(unsigned int)+0x12c>
c000dbcd:	fb                   	sti    
c000dbce:	66 90                	xchg   ax,ax
c000dbd0:	a1 64 91 02 c0       	mov    eax,ds:0xc0029164
c000dbd5:	48                   	dec    eax
c000dbd6:	a3 64 91 02 c0       	mov    ds:0xc0029164,eax
c000dbdb:	75 1b                	jne    c000dbf8 <timerHandler(unsigned int)+0x154>
c000dbdd:	83 3d 60 91 02 c0 00 	cmp    DWORD PTR ds:0xc0029160,0x0
c000dbe4:	74 12                	je     c000dbf8 <timerHandler(unsigned int)+0x154>
c000dbe6:	c7 05 60 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029160,0x0
c000dbf0:	e8 17 78 00 00       	call   c001540c <schedule()>
c000dbf5:	8d 76 00             	lea    esi,[esi+0x0]
c000dbf8:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c000dbfd:	48                   	dec    eax
c000dbfe:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c000dc03:	75 03                	jne    c000dc08 <timerHandler(unsigned int)+0x164>
c000dc05:	fb                   	sti    
c000dc06:	66 90                	xchg   ax,ax
c000dc08:	58                   	pop    eax
c000dc09:	5b                   	pop    ebx
c000dc0a:	5e                   	pop    esi
c000dc0b:	c3                   	ret    

c000dc0c <VCache::VCache(PhysicalDisk*)>:
c000dc0c:	53                   	push   ebx
c000dc0d:	83 ec 18             	sub    esp,0x18
c000dc10:	ba 20 0f 02 c0       	mov    edx,0xc0020f20
c000dc15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc19:	89 10                	mov    DWORD PTR [eax],edx
c000dc1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc1f:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000dc26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc2a:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000dc31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc35:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000dc3c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000dc43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc47:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000dc4e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000dc55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc59:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000dc60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc64:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000dc68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc6c:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000dc73:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000dc7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc7e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000dc82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc86:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000dc8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc8e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000dc92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc96:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000dc9d:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000dca5:	83 ec 0c             	sub    esp,0xc
c000dca8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dcac:	e8 fd 9d ff ff       	call   c0007aae <malloc>
c000dcb1:	83 c4 10             	add    esp,0x10
c000dcb4:	89 c3                	mov    ebx,eax
c000dcb6:	83 ec 0c             	sub    esp,0xc
c000dcb9:	53                   	push   ebx
c000dcba:	e8 e9 74 00 00       	call   c00151a8 <Mutex::Mutex()>
c000dcbf:	83 c4 10             	add    esp,0x10
c000dcc2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcc6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000dcc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dccd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000dcd1:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000dcd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcd8:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000dcdf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000dce3:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000dce9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dced:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000dcf0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000dcf4:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000dcfa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000dd00:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dd04:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000dd07:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000dd0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd0e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000dd12:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000dd16:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000dd1c:	05 00 02 00 00       	add    eax,0x200
c000dd21:	c1 e0 03             	shl    eax,0x3
c000dd24:	83 ec 0c             	sub    esp,0xc
c000dd27:	50                   	push   eax
c000dd28:	e8 81 9d ff ff       	call   c0007aae <malloc>
c000dd2d:	83 c4 10             	add    esp,0x10
c000dd30:	89 c2                	mov    edx,eax
c000dd32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd36:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000dd39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd3d:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000dd44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd48:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000dd4c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000dd50:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000dd56:	89 d0                	mov    eax,edx
c000dd58:	c1 e0 02             	shl    eax,0x2
c000dd5b:	01 d0                	add    eax,edx
c000dd5d:	c1 e0 04             	shl    eax,0x4
c000dd60:	83 ec 0c             	sub    esp,0xc
c000dd63:	50                   	push   eax
c000dd64:	e8 45 9d ff ff       	call   c0007aae <malloc>
c000dd69:	83 c4 10             	add    esp,0x10
c000dd6c:	89 c2                	mov    edx,eax
c000dd6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd72:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000dd75:	90                   	nop
c000dd76:	83 c4 18             	add    esp,0x18
c000dd79:	5b                   	pop    ebx
c000dd7a:	c3                   	ret    
c000dd7b:	90                   	nop

c000dd7c <VCache::invalidateReadBuffer()>:
c000dd7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd80:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000dd86:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000dd8a:	c3                   	ret    
c000dd8b:	90                   	nop

c000dd8c <VCache::writeWriteBuffer()>:
c000dd8c:	53                   	push   ebx
c000dd8d:	83 ec 08             	sub    esp,0x8
c000dd90:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dd94:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000dd98:	74 1e                	je     c000ddb8 <VCache::writeWriteBuffer()+0x2c>
c000dd9a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dd9d:	83 ec 0c             	sub    esp,0xc
c000dda0:	8b 10                	mov    edx,DWORD PTR [eax]
c000dda2:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000dda5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000dda8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000ddab:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ddae:	50                   	push   eax
c000ddaf:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000ddb2:	83 c4 20             	add    esp,0x20
c000ddb5:	8d 76 00             	lea    esi,[esi+0x0]
c000ddb8:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000ddbf:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000ddc6:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000ddca:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000ddd1:	83 c4 08             	add    esp,0x8
c000ddd4:	5b                   	pop    ebx
c000ddd5:	c3                   	ret    
c000ddd6:	66 90                	xchg   ax,ax

c000ddd8 <VCache::~VCache()>:
c000ddd8:	83 ec 0c             	sub    esp,0xc
c000dddb:	ba 20 0f 02 c0       	mov    edx,0xc0020f20
c000dde0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dde4:	89 10                	mov    DWORD PTR [eax],edx
c000dde6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ddea:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000dded:	0f b6 c0             	movzx  eax,al
c000ddf0:	85 c0                	test   eax,eax
c000ddf2:	74 10                	je     c000de04 <VCache::~VCache()+0x2c>
c000ddf4:	83 ec 0c             	sub    esp,0xc
c000ddf7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddfb:	e8 8c ff ff ff       	call   c000dd8c <VCache::writeWriteBuffer()>
c000de00:	83 c4 10             	add    esp,0x10
c000de03:	90                   	nop
c000de04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de08:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000de0b:	83 ec 0c             	sub    esp,0xc
c000de0e:	50                   	push   eax
c000de0f:	e8 aa 9c ff ff       	call   c0007abe <free>
c000de14:	83 c4 10             	add    esp,0x10
c000de17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de1b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000de1e:	83 ec 0c             	sub    esp,0xc
c000de21:	50                   	push   eax
c000de22:	e8 97 9c ff ff       	call   c0007abe <free>
c000de27:	83 c4 10             	add    esp,0x10
c000de2a:	90                   	nop
c000de2b:	83 c4 0c             	add    esp,0xc
c000de2e:	c3                   	ret    
c000de2f:	90                   	nop

c000de30 <VCache::~VCache()>:
c000de30:	83 ec 0c             	sub    esp,0xc
c000de33:	83 ec 0c             	sub    esp,0xc
c000de36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de3a:	e8 99 ff ff ff       	call   c000ddd8 <VCache::~VCache()>
c000de3f:	83 c4 10             	add    esp,0x10
c000de42:	83 ec 08             	sub    esp,0x8
c000de45:	6a 44                	push   0x44
c000de47:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de4b:	e8 bc c9 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000de50:	83 c4 10             	add    esp,0x10
c000de53:	83 c4 0c             	add    esp,0xc
c000de56:	c3                   	ret    
c000de57:	90                   	nop

c000de58 <VCache::write(unsigned long long, int, void*)>:
c000de58:	55                   	push   ebp
c000de59:	57                   	push   edi
c000de5a:	56                   	push   esi
c000de5b:	53                   	push   ebx
c000de5c:	83 ec 1c             	sub    esp,0x1c
c000de5f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000de63:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000de67:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000de6b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000de6f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000de73:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000de77:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000de7b:	74 07                	je     c000de84 <VCache::write(unsigned long long, int, void*)+0x2c>
c000de7d:	53                   	push   ebx
c000de7e:	e8 f9 fe ff ff       	call   c000dd7c <VCache::invalidateReadBuffer()>
c000de83:	58                   	pop    eax
c000de84:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000de88:	74 62                	je     c000deec <VCache::write(unsigned long long, int, void*)+0x94>
c000de8a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000de8d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000de91:	99                   	cdq    
c000de92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de96:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000de99:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000de9c:	31 c1                	xor    ecx,eax
c000de9e:	89 d0                	mov    eax,edx
c000dea0:	89 ca                	mov    edx,ecx
c000dea2:	31 e8                	xor    eax,ebp
c000dea4:	09 c2                	or     edx,eax
c000dea6:	75 38                	jne    c000dee0 <VCache::write(unsigned long long, int, void*)+0x88>
c000dea8:	83 ff 01             	cmp    edi,0x1
c000deab:	75 33                	jne    c000dee0 <VCache::write(unsigned long long, int, void*)+0x88>
c000dead:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000deb0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000deb4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000deba:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000debd:	0f af c8             	imul   ecx,eax
c000dec0:	01 cf                	add    edi,ecx
c000dec2:	89 c1                	mov    ecx,eax
c000dec4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dec6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000dec9:	40                   	inc    eax
c000deca:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000decd:	83 f8 50             	cmp    eax,0x50
c000ded0:	75 6a                	jne    c000df3c <VCache::write(unsigned long long, int, void*)+0xe4>
c000ded2:	83 ec 0c             	sub    esp,0xc
c000ded5:	53                   	push   ebx
c000ded6:	e8 b1 fe ff ff       	call   c000dd8c <VCache::writeWriteBuffer()>
c000dedb:	83 c4 10             	add    esp,0x10
c000dede:	eb 5c                	jmp    c000df3c <VCache::write(unsigned long long, int, void*)+0xe4>
c000dee0:	83 ec 0c             	sub    esp,0xc
c000dee3:	53                   	push   ebx
c000dee4:	e8 a3 fe ff ff       	call   c000dd8c <VCache::writeWriteBuffer()>
c000dee9:	83 c4 10             	add    esp,0x10
c000deec:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000deef:	83 ff 4f             	cmp    edi,0x4f
c000def2:	7f 20                	jg     c000df14 <VCache::write(unsigned long long, int, void*)+0xbc>
c000def4:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000def7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000defb:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000defe:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000df01:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000df05:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000df08:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000df0e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000df10:	eb 2a                	jmp    c000df3c <VCache::write(unsigned long long, int, void*)+0xe4>
c000df12:	66 90                	xchg   ax,ax
c000df14:	8b 10                	mov    edx,DWORD PTR [eax]
c000df16:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000df1a:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000df1e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000df22:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000df26:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000df2a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000df2e:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000df31:	83 c4 1c             	add    esp,0x1c
c000df34:	5b                   	pop    ebx
c000df35:	5e                   	pop    esi
c000df36:	5f                   	pop    edi
c000df37:	5d                   	pop    ebp
c000df38:	ff e0                	jmp    eax
c000df3a:	66 90                	xchg   ax,ax
c000df3c:	83 c4 1c             	add    esp,0x1c
c000df3f:	31 c0                	xor    eax,eax
c000df41:	5b                   	pop    ebx
c000df42:	5e                   	pop    esi
c000df43:	5f                   	pop    edi
c000df44:	5d                   	pop    ebp
c000df45:	c3                   	ret    

c000df46 <VCache::read(unsigned long long, int, void*)>:
c000df46:	55                   	push   ebp
c000df47:	57                   	push   edi
c000df48:	56                   	push   esi
c000df49:	53                   	push   ebx
c000df4a:	83 ec 1c             	sub    esp,0x1c
c000df4d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000df51:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000df55:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000df59:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000df5d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000df61:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000df65:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000df69:	74 0d                	je     c000df78 <VCache::read(unsigned long long, int, void*)+0x32>
c000df6b:	83 ec 0c             	sub    esp,0xc
c000df6e:	57                   	push   edi
c000df6f:	e8 18 fe ff ff       	call   c000dd8c <VCache::writeWriteBuffer()>
c000df74:	83 c4 10             	add    esp,0x10
c000df77:	90                   	nop
c000df78:	83 fd 01             	cmp    ebp,0x1
c000df7b:	0f 85 93 00 00 00    	jne    c000e014 <VCache::read(unsigned long long, int, void*)+0xce>
c000df81:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000df84:	89 04 24             	mov    DWORD PTR [esp],eax
c000df87:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000df8e:	0f 85 80 00 00 00    	jne    c000e014 <VCache::read(unsigned long long, int, void*)+0xce>
c000df94:	8b 6f 40             	mov    ebp,DWORD PTR [edi+0x40]
c000df97:	89 e9                	mov    ecx,ebp
c000df99:	f7 d9                	neg    ecx
c000df9b:	89 c8                	mov    eax,ecx
c000df9d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000dfa1:	c1 f8 1f             	sar    eax,0x1f
c000dfa4:	21 d9                	and    ecx,ebx
c000dfa6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dfaa:	89 c8                	mov    eax,ecx
c000dfac:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dfb0:	21 f1                	and    ecx,esi
c000dfb2:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000dfb6:	89 ca                	mov    edx,ecx
c000dfb8:	74 2e                	je     c000dfe8 <VCache::read(unsigned long long, int, void*)+0xa2>
c000dfba:	39 4f 34             	cmp    DWORD PTR [edi+0x34],ecx
c000dfbd:	75 29                	jne    c000dfe8 <VCache::read(unsigned long long, int, void*)+0xa2>
c000dfbf:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000dfc2:	75 24                	jne    c000dfe8 <VCache::read(unsigned long long, int, void*)+0xa2>
c000dfc4:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dfc7:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dfcd:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000dfd0:	8d 70 ff             	lea    esi,[eax-0x1]
c000dfd3:	21 f3                	and    ebx,esi
c000dfd5:	0f af d9             	imul   ebx,ecx
c000dfd8:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000dfdb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000dfdf:	89 de                	mov    esi,ebx
c000dfe1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dfe3:	31 c0                	xor    eax,eax
c000dfe5:	eb 61                	jmp    c000e048 <VCache::read(unsigned long long, int, void*)+0x102>
c000dfe7:	90                   	nop
c000dfe8:	83 ec 0c             	sub    esp,0xc
c000dfeb:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000dfef:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000dff3:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000dff6:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000dff9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dffb:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000dffe:	55                   	push   ebp
c000dfff:	52                   	push   edx
c000e000:	50                   	push   eax
c000e001:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e005:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000e008:	83 c4 20             	add    esp,0x20
c000e00b:	85 c0                	test   eax,eax
c000e00d:	75 39                	jne    c000e048 <VCache::read(unsigned long long, int, void*)+0x102>
c000e00f:	eb b3                	jmp    c000dfc4 <VCache::read(unsigned long long, int, void*)+0x7e>
c000e011:	8d 76 00             	lea    esi,[esi+0x0]
c000e014:	83 ec 0c             	sub    esp,0xc
c000e017:	57                   	push   edi
c000e018:	e8 5f fd ff ff       	call   c000dd7c <VCache::invalidateReadBuffer()>
c000e01d:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e020:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e024:	8b 10                	mov    edx,DWORD PTR [eax]
c000e026:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000e02a:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000e02e:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000e032:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000e036:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e03a:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000e03d:	83 c4 2c             	add    esp,0x2c
c000e040:	5b                   	pop    ebx
c000e041:	5e                   	pop    esi
c000e042:	5f                   	pop    edi
c000e043:	5d                   	pop    ebp
c000e044:	ff e0                	jmp    eax
c000e046:	66 90                	xchg   ax,ax
c000e048:	83 c4 1c             	add    esp,0x1c
c000e04b:	5b                   	pop    ebx
c000e04c:	5e                   	pop    esi
c000e04d:	5f                   	pop    edi
c000e04e:	5d                   	pop    ebp
c000e04f:	c3                   	ret    

c000e050 <Video::putrect(int, int, int, int, unsigned int)>:
c000e050:	55                   	push   ebp
c000e051:	57                   	push   edi
c000e052:	56                   	push   esi
c000e053:	53                   	push   ebx
c000e054:	83 ec 1c             	sub    esp,0x1c
c000e057:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e05b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e05f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e063:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000e067:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e06b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e06f:	01 df                	add    edi,ebx
c000e071:	39 fb                	cmp    ebx,edi
c000e073:	7d 1f                	jge    c000e094 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000e075:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e079:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000e07d:	7d 12                	jge    c000e091 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000e07f:	8b 16                	mov    edx,DWORD PTR [esi]
c000e081:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000e085:	53                   	push   ebx
c000e086:	55                   	push   ebp
c000e087:	45                   	inc    ebp
c000e088:	56                   	push   esi
c000e089:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000e08c:	83 c4 10             	add    esp,0x10
c000e08f:	eb e8                	jmp    c000e079 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000e091:	43                   	inc    ebx
c000e092:	eb dd                	jmp    c000e071 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000e094:	83 c4 1c             	add    esp,0x1c
c000e097:	5b                   	pop    ebx
c000e098:	5e                   	pop    esi
c000e099:	5f                   	pop    edi
c000e09a:	5d                   	pop    ebp
c000e09b:	c3                   	ret    

c000e09c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000e09c:	55                   	push   ebp
c000e09d:	57                   	push   edi
c000e09e:	31 ff                	xor    edi,edi
c000e0a0:	56                   	push   esi
c000e0a1:	53                   	push   ebx
c000e0a2:	83 ec 1c             	sub    esp,0x1c
c000e0a5:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000e0a9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000e0ad:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000e0b4:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000e0b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e0bd:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000e0c1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e0c5:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000e0c8:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e0cc:	01 f9                	add    ecx,edi
c000e0ce:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000e0d2:	7d 2f                	jge    c000e103 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000e0d4:	31 f6                	xor    esi,esi
c000e0d6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e0da:	01 f2                	add    edx,esi
c000e0dc:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000e0e0:	7d 1a                	jge    c000e0fc <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000e0e2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e0e5:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000e0e8:	46                   	inc    esi
c000e0e9:	51                   	push   ecx
c000e0ea:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000e0ee:	52                   	push   edx
c000e0ef:	55                   	push   ebp
c000e0f0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e0f3:	83 c4 10             	add    esp,0x10
c000e0f6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e0fa:	eb da                	jmp    c000e0d6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000e0fc:	47                   	inc    edi
c000e0fd:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000e101:	eb c5                	jmp    c000e0c8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000e103:	83 c4 1c             	add    esp,0x1c
c000e106:	5b                   	pop    ebx
c000e107:	5e                   	pop    esi
c000e108:	5f                   	pop    edi
c000e109:	5d                   	pop    ebp
c000e10a:	c3                   	ret    
c000e10b:	90                   	nop

c000e10c <Video::blit(unsigned int*, int, int, int, int)>:
c000e10c:	55                   	push   ebp
c000e10d:	57                   	push   edi
c000e10e:	56                   	push   esi
c000e10f:	53                   	push   ebx
c000e110:	83 ec 1c             	sub    esp,0x1c
c000e113:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e117:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e11b:	85 c0                	test   eax,eax
c000e11d:	79 02                	jns    c000e121 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000e11f:	31 c0                	xor    eax,eax
c000e121:	c1 e0 02             	shl    eax,0x2
c000e124:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000e128:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e12c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e130:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000e134:	39 d8                	cmp    eax,ebx
c000e136:	7e 49                	jle    c000e181 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000e138:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e13e:	7c 41                	jl     c000e181 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000e140:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000e144:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e148:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e14c:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000e150:	39 f9                	cmp    ecx,edi
c000e152:	7e 22                	jle    c000e176 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000e154:	83 c5 04             	add    ebp,0x4
c000e157:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e15d:	7c 14                	jl     c000e173 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000e15f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e161:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000e164:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e168:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e16c:	56                   	push   esi
c000e16d:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000e170:	83 c4 10             	add    esp,0x10
c000e173:	47                   	inc    edi
c000e174:	eb d2                	jmp    c000e148 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000e176:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e17a:	43                   	inc    ebx
c000e17b:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000e17f:	eb ab                	jmp    c000e12c <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000e181:	83 c4 1c             	add    esp,0x1c
c000e184:	5b                   	pop    ebx
c000e185:	5e                   	pop    esi
c000e186:	5f                   	pop    edi
c000e187:	5d                   	pop    ebp
c000e188:	c3                   	ret    
c000e189:	90                   	nop

c000e18a <Video::clearScreen(unsigned int)>:
c000e18a:	57                   	push   edi
c000e18b:	56                   	push   esi
c000e18c:	53                   	push   ebx
c000e18d:	31 db                	xor    ebx,ebx
c000e18f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e193:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e199:	7e 1f                	jle    c000e1ba <Video::clearScreen(unsigned int)+0x30>
c000e19b:	31 ff                	xor    edi,edi
c000e19d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e1a3:	7e 12                	jle    c000e1b7 <Video::clearScreen(unsigned int)+0x2d>
c000e1a5:	8b 06                	mov    eax,DWORD PTR [esi]
c000e1a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e1ab:	53                   	push   ebx
c000e1ac:	57                   	push   edi
c000e1ad:	47                   	inc    edi
c000e1ae:	56                   	push   esi
c000e1af:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e1b2:	83 c4 10             	add    esp,0x10
c000e1b5:	eb e6                	jmp    c000e19d <Video::clearScreen(unsigned int)+0x13>
c000e1b7:	43                   	inc    ebx
c000e1b8:	eb d9                	jmp    c000e193 <Video::clearScreen(unsigned int)+0x9>
c000e1ba:	5b                   	pop    ebx
c000e1bb:	5e                   	pop    esi
c000e1bc:	5f                   	pop    edi
c000e1bd:	c3                   	ret    

c000e1be <Video::putpixel(int, int, unsigned int)>:
c000e1be:	c7 44 24 04 28 0f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020f28
c000e1c6:	e9 d0 29 00 00       	jmp    c0010b9b <KePanic(char const*)>
c000e1cb:	90                   	nop

c000e1cc <Video::readPixelApprox(int, int)>:
c000e1cc:	83 ec 18             	sub    esp,0x18
c000e1cf:	68 49 0f 02 c0       	push   0xc0020f49
c000e1d4:	e8 c2 29 00 00       	call   c0010b9b <KePanic(char const*)>
c000e1d9:	31 c0                	xor    eax,eax
c000e1db:	83 c4 1c             	add    esp,0x1c
c000e1de:	c3                   	ret    
c000e1df:	90                   	nop

c000e1e0 <Video::Video(char const*)>:
c000e1e0:	83 ec 0c             	sub    esp,0xc
c000e1e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e1e7:	83 ec 08             	sub    esp,0x8
c000e1ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1ee:	50                   	push   eax
c000e1ef:	e8 e6 df ff ff       	call   c000c1da <Device::Device(char const*)>
c000e1f4:	83 c4 10             	add    esp,0x10
c000e1f7:	ba c4 0f 02 c0       	mov    edx,0xc0020fc4
c000e1fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e200:	89 10                	mov    DWORD PTR [eax],edx
c000e202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e206:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000e210:	90                   	nop
c000e211:	83 c4 0c             	add    esp,0xc
c000e214:	c3                   	ret    
c000e215:	90                   	nop

c000e216 <Video::~Video()>:
c000e216:	83 ec 0c             	sub    esp,0xc
c000e219:	ba c4 0f 02 c0       	mov    edx,0xc0020fc4
c000e21e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e222:	89 10                	mov    DWORD PTR [eax],edx
c000e224:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e228:	83 ec 0c             	sub    esp,0xc
c000e22b:	50                   	push   eax
c000e22c:	e8 13 dd ff ff       	call   c000bf44 <Device::~Device()>
c000e231:	83 c4 10             	add    esp,0x10
c000e234:	90                   	nop
c000e235:	83 c4 0c             	add    esp,0xc
c000e238:	c3                   	ret    
c000e239:	90                   	nop

c000e23a <Video::~Video()>:
c000e23a:	83 ec 0c             	sub    esp,0xc
c000e23d:	83 ec 0c             	sub    esp,0xc
c000e240:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e244:	e8 cd ff ff ff       	call   c000e216 <Video::~Video()>
c000e249:	83 c4 10             	add    esp,0x10
c000e24c:	83 ec 08             	sub    esp,0x8
c000e24f:	68 64 01 00 00       	push   0x164
c000e254:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e258:	e8 af c5 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e25d:	83 c4 10             	add    esp,0x10
c000e260:	83 c4 0c             	add    esp,0xc
c000e263:	c3                   	ret    

c000e264 <Video::isMonochrome()>:
c000e264:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e268:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000e26e:	c3                   	ret    
c000e26f:	90                   	nop

c000e270 <Video::getWidth()>:
c000e270:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e274:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e27a:	c3                   	ret    
c000e27b:	90                   	nop

c000e27c <Video::getHeight()>:
c000e27c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e280:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e286:	c3                   	ret    
c000e287:	90                   	nop

c000e288 <Video::drawCursor(int, int, unsigned int*, int)>:
c000e288:	55                   	push   ebp
c000e289:	57                   	push   edi
c000e28a:	56                   	push   esi
c000e28b:	53                   	push   ebx
c000e28c:	83 ec 2c             	sub    esp,0x2c
c000e28f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e293:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e297:	83 f8 01             	cmp    eax,0x1
c000e29a:	19 c9                	sbb    ecx,ecx
c000e29c:	31 db                	xor    ebx,ebx
c000e29e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000e2a2:	89 cd                	mov    ebp,ecx
c000e2a4:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000e2ac:	f7 d5                	not    ebp
c000e2ae:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000e2b4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e2b8:	01 d8                	add    eax,ebx
c000e2ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e2be:	56                   	push   esi
c000e2bf:	e8 b8 ff ff ff       	call   c000e27c <Video::getHeight()>
c000e2c4:	59                   	pop    ecx
c000e2c5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000e2c9:	7e 70                	jle    c000e33b <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000e2cb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e2cf:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000e2d3:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000e2d6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e2da:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e2de:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000e2e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2e9:	89 f8                	mov    eax,edi
c000e2eb:	83 c0 20             	add    eax,0x20
c000e2ee:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e2f2:	56                   	push   esi
c000e2f3:	e8 78 ff ff ff       	call   c000e270 <Video::getWidth()>
c000e2f8:	5a                   	pop    edx
c000e2f9:	39 c7                	cmp    edi,eax
c000e2fb:	7d 34                	jge    c000e331 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000e2fd:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000e302:	74 05                	je     c000e309 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000e304:	8b 06                	mov    eax,DWORD PTR [esi]
c000e306:	55                   	push   ebp
c000e307:	eb 0d                	jmp    c000e316 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000e309:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000e30e:	74 12                	je     c000e322 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000e310:	8b 06                	mov    eax,DWORD PTR [esi]
c000e312:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e316:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e31a:	57                   	push   edi
c000e31b:	56                   	push   esi
c000e31c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e31f:	83 c4 10             	add    esp,0x10
c000e322:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000e326:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000e32a:	47                   	inc    edi
c000e32b:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000e32f:	75 c1                	jne    c000e2f2 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000e331:	43                   	inc    ebx
c000e332:	83 fb 20             	cmp    ebx,0x20
c000e335:	0f 85 79 ff ff ff    	jne    c000e2b4 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000e33b:	83 c4 2c             	add    esp,0x2c
c000e33e:	5b                   	pop    ebx
c000e33f:	5e                   	pop    esi
c000e340:	5f                   	pop    edi
c000e341:	5d                   	pop    ebp
c000e342:	c3                   	ret    
c000e343:	90                   	nop

c000e344 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000e344:	55                   	push   ebp
c000e345:	57                   	push   edi
c000e346:	56                   	push   esi
c000e347:	53                   	push   ebx
c000e348:	83 ec 28             	sub    esp,0x28
c000e34b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e34f:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000e353:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000e357:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000e35b:	c1 e6 08             	shl    esi,0x8
c000e35e:	01 c6                	add    esi,eax
c000e360:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000e364:	c1 e0 08             	shl    eax,0x8
c000e367:	01 d0                	add    eax,edx
c000e369:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e36d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e371:	0f af c6             	imul   eax,esi
c000e374:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000e37b:	50                   	push   eax
c000e37c:	e8 2d 97 ff ff       	call   c0007aae <malloc>
c000e381:	83 c4 10             	add    esp,0x10
c000e384:	89 c7                	mov    edi,eax
c000e386:	85 c0                	test   eax,eax
c000e388:	75 10                	jne    c000e39a <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000e38a:	83 ec 0c             	sub    esp,0xc
c000e38d:	68 74 0f 02 c0       	push   0xc0020f74
c000e392:	e8 04 28 00 00       	call   c0010b9b <KePanic(char const*)>
c000e397:	83 c4 10             	add    esp,0x10
c000e39a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000e39e:	ba 12 00 00 00       	mov    edx,0x12
c000e3a3:	85 c0                	test   eax,eax
c000e3a5:	74 11                	je     c000e3b8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000e3a7:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000e3ab:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000e3af:	c1 fa 03             	sar    edx,0x3
c000e3b2:	0f af d1             	imul   edx,ecx
c000e3b5:	83 c2 12             	add    edx,0x12
c000e3b8:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000e3bc:	74 04                	je     c000e3c2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000e3be:	85 f6                	test   esi,esi
c000e3c0:	75 12                	jne    c000e3d4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000e3c2:	83 ec 0c             	sub    esp,0xc
c000e3c5:	68 84 0f 02 c0       	push   0xc0020f84
c000e3ca:	e8 6a c5 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000e3cf:	e9 b8 00 00 00       	jmp    c000e48c <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000e3d4:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000e3d8:	83 f9 02             	cmp    ecx,0x2
c000e3db:	0f 85 96 00 00 00    	jne    c000e477 <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000e3e1:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000e3e6:	75 0e                	jne    c000e3f6 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000e3e8:	85 c0                	test   eax,eax
c000e3ea:	75 0a                	jne    c000e3f6 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000e3ec:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000e3ef:	83 e8 18             	sub    eax,0x18
c000e3f2:	a8 f7                	test   al,0xf7
c000e3f4:	74 0a                	je     c000e400 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000e3f6:	83 ec 0c             	sub    esp,0xc
c000e3f9:	68 99 0f 02 c0       	push   0xc0020f99
c000e3fe:	eb 7f                	jmp    c000e47f <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000e400:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e408:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000e410:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000e414:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e41c:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000e420:	75 0c                	jne    c000e42e <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000e422:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000e427:	c1 e0 18             	shl    eax,0x18
c000e42a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e42e:	45                   	inc    ebp
c000e42f:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000e434:	c1 e1 10             	shl    ecx,0x10
c000e437:	89 c8                	mov    eax,ecx
c000e439:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000e43e:	c1 e1 08             	shl    ecx,0x8
c000e441:	09 c1                	or     ecx,eax
c000e443:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000e447:	09 c1                	or     ecx,eax
c000e449:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000e44d:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000e451:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000e455:	c1 f8 03             	sar    eax,0x3
c000e458:	01 c2                	add    edx,eax
c000e45a:	89 e8                	mov    eax,ebp
c000e45c:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000e460:	39 c6                	cmp    esi,eax
c000e462:	7f b0                	jg     c000e414 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000e464:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e468:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e46c:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000e46f:	7e 22                	jle    c000e493 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000e471:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000e475:	eb 99                	jmp    c000e410 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000e477:	50                   	push   eax
c000e478:	50                   	push   eax
c000e479:	51                   	push   ecx
c000e47a:	68 a7 0f 02 c0       	push   0xc0020fa7
c000e47f:	e8 b5 c4 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000e484:	89 3c 24             	mov    DWORD PTR [esp],edi
c000e487:	e8 32 96 ff ff       	call   c0007abe <free>
c000e48c:	83 c4 10             	add    esp,0x10
c000e48f:	31 ff                	xor    edi,edi
c000e491:	eb 0f                	jmp    c000e4a2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000e493:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e497:	89 30                	mov    DWORD PTR [eax],esi
c000e499:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e49d:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000e4a0:	89 30                	mov    DWORD PTR [eax],esi
c000e4a2:	83 c4 1c             	add    esp,0x1c
c000e4a5:	89 f8                	mov    eax,edi
c000e4a7:	5b                   	pop    ebx
c000e4a8:	5e                   	pop    esi
c000e4a9:	5f                   	pop    edi
c000e4aa:	5d                   	pop    ebp
c000e4ab:	c3                   	ret    

c000e4ac <Video::putTGA(int, int, unsigned char*, int)>:
c000e4ac:	55                   	push   ebp
c000e4ad:	57                   	push   edi
c000e4ae:	56                   	push   esi
c000e4af:	53                   	push   ebx
c000e4b0:	83 ec 28             	sub    esp,0x28
c000e4b3:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000e4b7:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e4bb:	50                   	push   eax
c000e4bc:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e4c0:	50                   	push   eax
c000e4c1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e4c5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e4c9:	56                   	push   esi
c000e4ca:	e8 75 fe ff ff       	call   c000e344 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000e4cf:	83 c4 20             	add    esp,0x20
c000e4d2:	85 c0                	test   eax,eax
c000e4d4:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e4d8:	74 35                	je     c000e50f <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e4da:	89 c7                	mov    edi,eax
c000e4dc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e4e0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000e4e4:	39 d8                	cmp    eax,ebx
c000e4e6:	7e 27                	jle    c000e50f <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e4e8:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e4ec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e4f0:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000e4f4:	39 e8                	cmp    eax,ebp
c000e4f6:	7e 14                	jle    c000e50c <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000e4f8:	8b 06                	mov    eax,DWORD PTR [esi]
c000e4fa:	83 c7 04             	add    edi,0x4
c000e4fd:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000e500:	53                   	push   ebx
c000e501:	55                   	push   ebp
c000e502:	45                   	inc    ebp
c000e503:	56                   	push   esi
c000e504:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e507:	83 c4 10             	add    esp,0x10
c000e50a:	eb e0                	jmp    c000e4ec <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000e50c:	43                   	inc    ebx
c000e50d:	eb cd                	jmp    c000e4dc <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000e50f:	83 c4 1c             	add    esp,0x1c
c000e512:	5b                   	pop    ebx
c000e513:	5e                   	pop    esi
c000e514:	5f                   	pop    edi
c000e515:	5d                   	pop    ebp
c000e516:	c3                   	ret    
c000e517:	90                   	nop

c000e518 <ACPI::close(int, int, void*)>:
c000e518:	83 ec 1c             	sub    esp,0x1c
c000e51b:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000e523:	74 0b                	je     c000e530 <ACPI::close(int, int, void*)+0x18>
c000e525:	b8 00 00 00 00       	mov    eax,0x0
c000e52a:	e9 99 00 00 00       	jmp    c000e5c8 <ACPI::close(int, int, void*)+0xb0>
c000e52f:	90                   	nop
c000e530:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000e535:	75 29                	jne    c000e560 <ACPI::close(int, int, void*)+0x48>
c000e537:	a1 a8 84 02 c0       	mov    eax,ds:0xc00284a8
c000e53c:	85 c0                	test   eax,eax
c000e53e:	74 08                	je     c000e548 <ACPI::close(int, int, void*)+0x30>
c000e540:	a1 a8 84 02 c0       	mov    eax,ds:0xc00284a8
c000e545:	ff d0                	call   eax
c000e547:	90                   	nop
c000e548:	83 ec 0c             	sub    esp,0xc
c000e54b:	68 08 10 02 c0       	push   0xc0021008
c000e550:	e8 46 26 00 00       	call   c0010b9b <KePanic(char const*)>
c000e555:	83 c4 10             	add    esp,0x10
c000e558:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e55d:	eb 69                	jmp    c000e5c8 <ACPI::close(int, int, void*)+0xb0>
c000e55f:	90                   	nop
c000e560:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000e565:	75 59                	jne    c000e5c0 <ACPI::close(int, int, void*)+0xa8>
c000e567:	a1 a4 84 02 c0       	mov    eax,ds:0xc00284a4
c000e56c:	85 c0                	test   eax,eax
c000e56e:	74 08                	je     c000e578 <ACPI::close(int, int, void*)+0x60>
c000e570:	a1 a4 84 02 c0       	mov    eax,ds:0xc00284a4
c000e575:	ff d0                	call   eax
c000e577:	90                   	nop
c000e578:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000e57d:	8d 76 00             	lea    esi,[esi+0x0]
c000e580:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000e585:	83 e0 02             	and    eax,0x2
c000e588:	74 1e                	je     c000e5a8 <ACPI::close(int, int, void*)+0x90>
c000e58a:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000e591:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e595:	89 c2                	mov    edx,eax
c000e597:	ec                   	in     al,dx
c000e598:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e59c:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000e5a0:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e5a4:	eb da                	jmp    c000e580 <ACPI::close(int, int, void*)+0x68>
c000e5a6:	66 90                	xchg   ax,ax
c000e5a8:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000e5af:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000e5b4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000e5b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e5bc:	ee                   	out    dx,al
c000e5bd:	8d 76 00             	lea    esi,[esi+0x0]
c000e5c0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e5c5:	8d 76 00             	lea    esi,[esi+0x0]
c000e5c8:	83 c4 1c             	add    esp,0x1c
c000e5cb:	c3                   	ret    

c000e5cc <findRSDP()>:
c000e5cc:	83 ec 1c             	sub    esp,0x1c
c000e5cf:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000e5d4:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e5da:	83 e0 04             	and    eax,0x4
c000e5dd:	0f b6 c0             	movzx  eax,al
c000e5e0:	85 c0                	test   eax,eax
c000e5e2:	75 08                	jne    c000e5ec <findRSDP()+0x20>
c000e5e4:	b8 00 00 00 00       	mov    eax,0x0
c000e5e9:	eb 75                	jmp    c000e660 <findRSDP()+0x94>
c000e5eb:	90                   	nop
c000e5ec:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c000e5f1:	3d ff 07 00 00       	cmp    eax,0x7ff
c000e5f6:	7f 1c                	jg     c000e614 <findRSDP()+0x48>
c000e5f8:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000e5fd:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e603:	83 e2 fb             	and    edx,0xfffffffb
c000e606:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e60c:	b8 00 00 00 00       	mov    eax,0x0
c000e611:	eb 4d                	jmp    c000e660 <findRSDP()+0x94>
c000e613:	90                   	nop
c000e614:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000e61c:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000e624:	77 32                	ja     c000e658 <findRSDP()+0x8c>
c000e626:	83 ec 04             	sub    esp,0x4
c000e629:	6a 08                	push   0x8
c000e62b:	68 a3 10 02 c0       	push   0xc00210a3
c000e630:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e634:	e8 47 1d ff ff       	call   c0000380 <memcmp>
c000e639:	83 c4 10             	add    esp,0x10
c000e63c:	85 c0                	test   eax,eax
c000e63e:	0f 94 c0             	sete   al
c000e641:	0f b6 c0             	movzx  eax,al
c000e644:	85 c0                	test   eax,eax
c000e646:	74 08                	je     c000e650 <findRSDP()+0x84>
c000e648:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e64c:	eb 12                	jmp    c000e660 <findRSDP()+0x94>
c000e64e:	66 90                	xchg   ax,ax
c000e650:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000e655:	eb c5                	jmp    c000e61c <findRSDP()+0x50>
c000e657:	90                   	nop
c000e658:	b8 00 00 00 00       	mov    eax,0x0
c000e65d:	8d 76 00             	lea    esi,[esi+0x0]
c000e660:	83 c4 1c             	add    esp,0x1c
c000e663:	c3                   	ret    

c000e664 <loadACPITables(unsigned char*)>:
c000e664:	57                   	push   edi
c000e665:	56                   	push   esi
c000e666:	53                   	push   ebx
c000e667:	83 ec 60             	sub    esp,0x60
c000e66a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000e66f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e675:	83 e0 04             	and    eax,0x4
c000e678:	0f b6 c0             	movzx  eax,al
c000e67b:	85 c0                	test   eax,eax
c000e67d:	0f 84 41 02 00 00    	je     c000e8c4 <loadACPITables(unsigned char*)+0x260>
c000e683:	a0 c0 86 02 c0       	mov    al,ds:0xc00286c0
c000e688:	0f b6 c0             	movzx  eax,al
c000e68b:	85 c0                	test   eax,eax
c000e68d:	74 79                	je     c000e708 <loadACPITables(unsigned char*)+0xa4>
c000e68f:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e693:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000e697:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e69b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e69e:	83 e8 24             	sub    eax,0x24
c000e6a1:	c1 e8 03             	shr    eax,0x3
c000e6a4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e6a8:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000e6b0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e6b4:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000e6b8:	0f 8d ba 00 00 00    	jge    c000e778 <loadACPITables(unsigned char*)+0x114>
c000e6be:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e6c2:	83 c0 24             	add    eax,0x24
c000e6c5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000e6c9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e6cd:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e6d1:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e6d5:	c1 e0 03             	shl    eax,0x3
c000e6d8:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000e6dc:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e6e0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e6e3:	8b 00                	mov    eax,DWORD PTR [eax]
c000e6e5:	89 c1                	mov    ecx,eax
c000e6e7:	a1 ac 84 02 c0       	mov    eax,ds:0xc00284ac
c000e6ec:	8d 50 01             	lea    edx,[eax+0x1]
c000e6ef:	89 15 ac 84 02 c0    	mov    DWORD PTR ds:0xc00284ac,edx
c000e6f5:	89 ca                	mov    edx,ecx
c000e6f7:	89 14 c5 c4 84 02 c0 	mov    DWORD PTR [eax*8-0x3ffd7b3c],edx
c000e6fe:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000e703:	eb ab                	jmp    c000e6b0 <loadACPITables(unsigned char*)+0x4c>
c000e705:	8d 76 00             	lea    esi,[esi+0x0]
c000e708:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e70c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e710:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e714:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e717:	83 e8 24             	sub    eax,0x24
c000e71a:	c1 e8 02             	shr    eax,0x2
c000e71d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e721:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000e729:	8d 76 00             	lea    esi,[esi+0x0]
c000e72c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e730:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000e734:	7d 42                	jge    c000e778 <loadACPITables(unsigned char*)+0x114>
c000e736:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e73a:	83 c0 24             	add    eax,0x24
c000e73d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e741:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e745:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000e749:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e74d:	c1 e0 02             	shl    eax,0x2
c000e750:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000e754:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e758:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e75a:	a1 ac 84 02 c0       	mov    eax,ds:0xc00284ac
c000e75f:	8d 50 01             	lea    edx,[eax+0x1]
c000e762:	89 15 ac 84 02 c0    	mov    DWORD PTR ds:0xc00284ac,edx
c000e768:	89 ca                	mov    edx,ecx
c000e76a:	89 14 c5 c4 84 02 c0 	mov    DWORD PTR [eax*8-0x3ffd7b3c],edx
c000e771:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000e776:	eb b4                	jmp    c000e72c <loadACPITables(unsigned char*)+0xc8>
c000e778:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000e780:	a1 ac 84 02 c0       	mov    eax,ds:0xc00284ac
c000e785:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000e789:	0f 8d 39 01 00 00    	jge    c000e8c8 <loadACPITables(unsigned char*)+0x264>
c000e78f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e793:	8b 04 c5 c4 84 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd7b3c]
c000e79a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e79e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e7a2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e7a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e7aa:	25 ff 0f 00 00       	and    eax,0xfff
c000e7af:	89 c6                	mov    esi,eax
c000e7b1:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000e7b7:	83 ec 0c             	sub    esp,0xc
c000e7ba:	6a 01                	push   0x1
c000e7bc:	e8 40 ae ff ff       	call   c0009601 <Virt::allocateKernelVirtualPages(int)>
c000e7c1:	83 c4 10             	add    esp,0x10
c000e7c4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e7c8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e7ce:	83 ec 0c             	sub    esp,0xc
c000e7d1:	6a 01                	push   0x1
c000e7d3:	6a 01                	push   0x1
c000e7d5:	50                   	push   eax
c000e7d6:	52                   	push   edx
c000e7d7:	53                   	push   ebx
c000e7d8:	e8 31 b7 ff ff       	call   c0009f0e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e7dd:	83 c4 20             	add    esp,0x20
c000e7e0:	09 f0                	or     eax,esi
c000e7e2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e7e6:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e7ea:	c1 e0 03             	shl    eax,0x3
c000e7ed:	05 c0 84 02 c0       	add    eax,0xc00284c0
c000e7f2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e7f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e7fa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e7fe:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000e806:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e80a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e80e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e812:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e816:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e81a:	89 c6                	mov    esi,eax
c000e81c:	89 d7                	mov    edi,edx
c000e81e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e820:	89 c8                	mov    eax,ecx
c000e822:	89 fa                	mov    edx,edi
c000e824:	89 f3                	mov    ebx,esi
c000e826:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e82a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e82e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e832:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e836:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e839:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e83d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e841:	05 00 10 00 00       	add    eax,0x1000
c000e846:	c1 e8 0c             	shr    eax,0xc
c000e849:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e84d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e851:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e855:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e859:	25 ff 0f 00 00       	and    eax,0xfff
c000e85e:	89 c6                	mov    esi,eax
c000e860:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000e866:	83 ec 0c             	sub    esp,0xc
c000e869:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e86d:	e8 8f ad ff ff       	call   c0009601 <Virt::allocateKernelVirtualPages(int)>
c000e872:	83 c4 10             	add    esp,0x10
c000e875:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e879:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e87f:	83 ec 0c             	sub    esp,0xc
c000e882:	6a 01                	push   0x1
c000e884:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e888:	50                   	push   eax
c000e889:	52                   	push   edx
c000e88a:	53                   	push   ebx
c000e88b:	e8 7e b6 ff ff       	call   c0009f0e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e890:	83 c4 20             	add    esp,0x20
c000e893:	09 f0                	or     eax,esi
c000e895:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e899:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e89d:	83 ec 0c             	sub    esp,0xc
c000e8a0:	50                   	push   eax
c000e8a1:	e8 79 b0 ff ff       	call   c000991f <Virt::freeKernelVirtualPages(unsigned long)>
c000e8a6:	83 c4 10             	add    esp,0x10
c000e8a9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e8ad:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e8b1:	89 14 c5 c4 84 02 c0 	mov    DWORD PTR [eax*8-0x3ffd7b3c],edx
c000e8b8:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000e8bd:	e9 be fe ff ff       	jmp    c000e780 <loadACPITables(unsigned char*)+0x11c>
c000e8c2:	66 90                	xchg   ax,ax
c000e8c4:	90                   	nop
c000e8c5:	8d 76 00             	lea    esi,[esi+0x0]
c000e8c8:	83 c4 60             	add    esp,0x60
c000e8cb:	5b                   	pop    ebx
c000e8cc:	5e                   	pop    esi
c000e8cd:	5f                   	pop    edi
c000e8ce:	c3                   	ret    
c000e8cf:	90                   	nop

c000e8d0 <findRSDT(unsigned char*)>:
c000e8d0:	57                   	push   edi
c000e8d1:	56                   	push   esi
c000e8d2:	53                   	push   ebx
c000e8d3:	83 ec 50             	sub    esp,0x50
c000e8d6:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000e8db:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e8e1:	83 e0 04             	and    eax,0x4
c000e8e4:	0f b6 c0             	movzx  eax,al
c000e8e7:	85 c0                	test   eax,eax
c000e8e9:	75 0d                	jne    c000e8f8 <findRSDT(unsigned char*)+0x28>
c000e8eb:	b8 00 00 00 00       	mov    eax,0x0
c000e8f0:	e9 2b 01 00 00       	jmp    c000ea20 <findRSDT(unsigned char*)+0x150>
c000e8f5:	8d 76 00             	lea    esi,[esi+0x0]
c000e8f8:	89 e0                	mov    eax,esp
c000e8fa:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e8fe:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e902:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e906:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000e90e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e912:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e916:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e91a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e91e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e922:	89 c6                	mov    esi,eax
c000e924:	89 d7                	mov    edi,edx
c000e926:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e928:	89 c8                	mov    eax,ecx
c000e92a:	89 fa                	mov    edx,edi
c000e92c:	89 f3                	mov    ebx,esi
c000e92e:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000e932:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e936:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e93a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e93e:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000e942:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000e94a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e94e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e952:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e956:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e95a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e95e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e962:	25 ff 0f 00 00       	and    eax,0xfff
c000e967:	89 c6                	mov    esi,eax
c000e969:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000e96f:	83 ec 0c             	sub    esp,0xc
c000e972:	6a 02                	push   0x2
c000e974:	e8 88 ac ff ff       	call   c0009601 <Virt::allocateKernelVirtualPages(int)>
c000e979:	83 c4 10             	add    esp,0x10
c000e97c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e980:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e986:	83 ec 0c             	sub    esp,0xc
c000e989:	6a 01                	push   0x1
c000e98b:	6a 02                	push   0x2
c000e98d:	50                   	push   eax
c000e98e:	52                   	push   edx
c000e98f:	53                   	push   ebx
c000e990:	e8 79 b5 ff ff       	call   c0009f0e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e995:	83 c4 20             	add    esp,0x20
c000e998:	09 f0                	or     eax,esi
c000e99a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e99e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e9a2:	25 ff 0f 00 00       	and    eax,0xfff
c000e9a7:	89 c6                	mov    esi,eax
c000e9a9:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000e9af:	83 ec 0c             	sub    esp,0xc
c000e9b2:	6a 02                	push   0x2
c000e9b4:	e8 48 ac ff ff       	call   c0009601 <Virt::allocateKernelVirtualPages(int)>
c000e9b9:	83 c4 10             	add    esp,0x10
c000e9bc:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e9c0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e9c6:	83 ec 0c             	sub    esp,0xc
c000e9c9:	6a 01                	push   0x1
c000e9cb:	6a 02                	push   0x2
c000e9cd:	50                   	push   eax
c000e9ce:	52                   	push   edx
c000e9cf:	53                   	push   ebx
c000e9d0:	e8 39 b5 ff ff       	call   c0009f0e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e9d5:	83 c4 20             	add    esp,0x20
c000e9d8:	09 f0                	or     eax,esi
c000e9da:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e9de:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000e9e3:	85 c0                	test   eax,eax
c000e9e5:	75 11                	jne    c000e9f8 <findRSDT(unsigned char*)+0x128>
c000e9e7:	c6 05 c0 86 02 c0 00 	mov    BYTE PTR ds:0xc00286c0,0x0
c000e9ee:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e9f2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e9f6:	eb 24                	jmp    c000ea1c <findRSDT(unsigned char*)+0x14c>
c000e9f8:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000e9fd:	83 f8 02             	cmp    eax,0x2
c000ea00:	75 12                	jne    c000ea14 <findRSDT(unsigned char*)+0x144>
c000ea02:	c6 05 c0 86 02 c0 01 	mov    BYTE PTR ds:0xc00286c0,0x1
c000ea09:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ea0d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000ea11:	eb 09                	jmp    c000ea1c <findRSDT(unsigned char*)+0x14c>
c000ea13:	90                   	nop
c000ea14:	b8 00 00 00 00       	mov    eax,0x0
c000ea19:	eb 05                	jmp    c000ea20 <findRSDT(unsigned char*)+0x150>
c000ea1b:	90                   	nop
c000ea1c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ea20:	83 c4 50             	add    esp,0x50
c000ea23:	5b                   	pop    ebx
c000ea24:	5e                   	pop    esi
c000ea25:	5f                   	pop    edi
c000ea26:	c3                   	ret    
c000ea27:	90                   	nop

c000ea28 <findDataTable(unsigned char*, char*)>:
c000ea28:	83 ec 1c             	sub    esp,0x1c
c000ea2b:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ea30:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ea36:	83 e0 04             	and    eax,0x4
c000ea39:	0f b6 c0             	movzx  eax,al
c000ea3c:	85 c0                	test   eax,eax
c000ea3e:	75 08                	jne    c000ea48 <findDataTable(unsigned char*, char*)+0x20>
c000ea40:	b8 00 00 00 00       	mov    eax,0x0
c000ea45:	eb 5d                	jmp    c000eaa4 <findDataTable(unsigned char*, char*)+0x7c>
c000ea47:	90                   	nop
c000ea48:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ea50:	a1 ac 84 02 c0       	mov    eax,ds:0xc00284ac
c000ea55:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000ea59:	7d 41                	jge    c000ea9c <findDataTable(unsigned char*, char*)+0x74>
c000ea5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea5f:	c1 e0 03             	shl    eax,0x3
c000ea62:	05 c0 84 02 c0       	add    eax,0xc00284c0
c000ea67:	83 ec 04             	sub    esp,0x4
c000ea6a:	6a 04                	push   0x4
c000ea6c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ea70:	50                   	push   eax
c000ea71:	e8 0a 19 ff ff       	call   c0000380 <memcmp>
c000ea76:	83 c4 10             	add    esp,0x10
c000ea79:	85 c0                	test   eax,eax
c000ea7b:	0f 94 c0             	sete   al
c000ea7e:	0f b6 c0             	movzx  eax,al
c000ea81:	85 c0                	test   eax,eax
c000ea83:	74 0f                	je     c000ea94 <findDataTable(unsigned char*, char*)+0x6c>
c000ea85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea89:	8b 04 c5 c4 84 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd7b3c]
c000ea90:	eb 12                	jmp    c000eaa4 <findDataTable(unsigned char*, char*)+0x7c>
c000ea92:	66 90                	xchg   ax,ax
c000ea94:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000ea99:	eb b5                	jmp    c000ea50 <findDataTable(unsigned char*, char*)+0x28>
c000ea9b:	90                   	nop
c000ea9c:	b8 00 00 00 00       	mov    eax,0x0
c000eaa1:	8d 76 00             	lea    esi,[esi+0x0]
c000eaa4:	83 c4 1c             	add    esp,0x1c
c000eaa7:	c3                   	ret    

c000eaa8 <scanMADT()>:
c000eaa8:	53                   	push   ebx
c000eaa9:	83 ec 38             	sub    esp,0x38
c000eaac:	a1 d0 5e 02 c0       	mov    eax,ds:0xc0025ed0
c000eab1:	25 00 04 00 00       	and    eax,0x400
c000eab6:	74 14                	je     c000eacc <scanMADT()+0x24>
c000eab8:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000eabd:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000eac3:	83 e2 fb             	and    edx,0xfffffffb
c000eac6:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000eacc:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ead1:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ead7:	83 e0 04             	and    eax,0x4
c000eada:	0f b6 c0             	movzx  eax,al
c000eadd:	85 c0                	test   eax,eax
c000eadf:	0f 84 6b 04 00 00    	je     c000ef50 <scanMADT()+0x4a8>
c000eae5:	e8 e2 fa ff ff       	call   c000e5cc <findRSDP()>
c000eaea:	a3 cc 86 02 c0       	mov    ds:0xc00286cc,eax
c000eaef:	a1 cc 86 02 c0       	mov    eax,ds:0xc00286cc
c000eaf4:	85 c0                	test   eax,eax
c000eaf6:	75 1c                	jne    c000eb14 <scanMADT()+0x6c>
c000eaf8:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000eafd:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000eb03:	83 e2 fb             	and    edx,0xfffffffb
c000eb06:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000eb0c:	e9 47 04 00 00       	jmp    c000ef58 <scanMADT()+0x4b0>
c000eb11:	8d 76 00             	lea    esi,[esi+0x0]
c000eb14:	a1 cc 86 02 c0       	mov    eax,ds:0xc00286cc
c000eb19:	83 ec 0c             	sub    esp,0xc
c000eb1c:	50                   	push   eax
c000eb1d:	e8 ae fd ff ff       	call   c000e8d0 <findRSDT(unsigned char*)>
c000eb22:	83 c4 10             	add    esp,0x10
c000eb25:	a3 c8 86 02 c0       	mov    ds:0xc00286c8,eax
c000eb2a:	a1 c8 86 02 c0       	mov    eax,ds:0xc00286c8
c000eb2f:	85 c0                	test   eax,eax
c000eb31:	75 19                	jne    c000eb4c <scanMADT()+0xa4>
c000eb33:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000eb38:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000eb3e:	83 e2 fb             	and    edx,0xfffffffb
c000eb41:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000eb47:	e9 0c 04 00 00       	jmp    c000ef58 <scanMADT()+0x4b0>
c000eb4c:	a1 c8 86 02 c0       	mov    eax,ds:0xc00286c8
c000eb51:	83 ec 0c             	sub    esp,0xc
c000eb54:	50                   	push   eax
c000eb55:	e8 0a fb ff ff       	call   c000e664 <loadACPITables(unsigned char*)>
c000eb5a:	83 c4 10             	add    esp,0x10
c000eb5d:	a1 c8 86 02 c0       	mov    eax,ds:0xc00286c8
c000eb62:	83 ec 08             	sub    esp,0x8
c000eb65:	68 ac 10 02 c0       	push   0xc00210ac
c000eb6a:	50                   	push   eax
c000eb6b:	e8 b8 fe ff ff       	call   c000ea28 <findDataTable(unsigned char*, char*)>
c000eb70:	83 c4 10             	add    esp,0x10
c000eb73:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000eb77:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000eb7c:	75 1a                	jne    c000eb98 <scanMADT()+0xf0>
c000eb7e:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000eb83:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000eb89:	83 e2 fe             	and    edx,0xfffffffe
c000eb8c:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000eb92:	e9 c1 03 00 00       	jmp    c000ef58 <scanMADT()+0x4b0>
c000eb97:	90                   	nop
c000eb98:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000eba0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eba4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000eba7:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000ebab:	0f 87 a7 03 00 00    	ja     c000ef58 <scanMADT()+0x4b0>
c000ebb1:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000ebb9:	0f 87 99 03 00 00    	ja     c000ef58 <scanMADT()+0x4b0>
c000ebbf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebc3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ebc7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebcb:	8d 50 01             	lea    edx,[eax+0x1]
c000ebce:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ebd2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ebd6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ebda:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000ebde:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebe2:	8d 50 01             	lea    edx,[eax+0x1]
c000ebe5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ebe9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ebed:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ebf1:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000ebf5:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000ebfa:	83 f8 02             	cmp    eax,0x2
c000ebfd:	0f 86 51 03 00 00    	jbe    c000ef54 <scanMADT()+0x4ac>
c000ec03:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ec08:	85 c0                	test   eax,eax
c000ec0a:	75 58                	jne    c000ec64 <scanMADT()+0x1bc>
c000ec0c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec10:	8d 50 01             	lea    edx,[eax+0x1]
c000ec13:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ec17:	8a 15 c0 88 02 c0    	mov    dl,BYTE PTR ds:0xc00288c0
c000ec1d:	0f b6 d2             	movzx  edx,dl
c000ec20:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ec24:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000ec28:	88 82 00 89 02 c0    	mov    BYTE PTR [edx-0x3ffd7700],al
c000ec2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec32:	8d 50 01             	lea    edx,[eax+0x1]
c000ec35:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ec39:	8a 15 c0 88 02 c0    	mov    dl,BYTE PTR ds:0xc00288c0
c000ec3f:	8d 4a 01             	lea    ecx,[edx+0x1]
c000ec42:	88 0d c0 88 02 c0    	mov    BYTE PTR ds:0xc00288c0,cl
c000ec48:	0f b6 d2             	movzx  edx,dl
c000ec4b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ec4f:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000ec53:	88 82 e0 88 02 c0    	mov    BYTE PTR [edx-0x3ffd7720],al
c000ec59:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ec5e:	e9 d9 02 00 00       	jmp    c000ef3c <scanMADT()+0x494>
c000ec63:	90                   	nop
c000ec64:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ec69:	83 f8 01             	cmp    eax,0x1
c000ec6c:	0f 85 1a 01 00 00    	jne    c000ed8c <scanMADT()+0x2e4>
c000ec72:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec76:	8d 50 01             	lea    edx,[eax+0x1]
c000ec79:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ec7d:	8a 15 80 87 02 c0    	mov    dl,BYTE PTR ds:0xc0028780
c000ec83:	0f b6 d2             	movzx  edx,dl
c000ec86:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ec8a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000ec8e:	88 82 a0 87 02 c0    	mov    BYTE PTR [edx-0x3ffd7860],al
c000ec94:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000ec99:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec9d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eca1:	01 d0                	add    eax,edx
c000eca3:	83 c0 2c             	add    eax,0x2c
c000eca6:	8a 00                	mov    al,BYTE PTR [eax]
c000eca8:	0f b6 d0             	movzx  edx,al
c000ecab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ecaf:	8d 48 01             	lea    ecx,[eax+0x1]
c000ecb2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ecb6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ecba:	0f b6 c0             	movzx  eax,al
c000ecbd:	c1 e0 08             	shl    eax,0x8
c000ecc0:	89 d1                	mov    ecx,edx
c000ecc2:	09 c1                	or     ecx,eax
c000ecc4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ecc8:	8d 50 02             	lea    edx,[eax+0x2]
c000eccb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eccf:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ecd3:	0f b6 c0             	movzx  eax,al
c000ecd6:	c1 e0 10             	shl    eax,0x10
c000ecd9:	09 c1                	or     ecx,eax
c000ecdb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ecdf:	8d 50 03             	lea    edx,[eax+0x3]
c000ece2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ece6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ecea:	0f b6 c0             	movzx  eax,al
c000eced:	c1 e0 18             	shl    eax,0x18
c000ecf0:	09 c1                	or     ecx,eax
c000ecf2:	89 ca                	mov    edx,ecx
c000ecf4:	a0 80 87 02 c0       	mov    al,ds:0xc0028780
c000ecf9:	0f b6 c0             	movzx  eax,al
c000ecfc:	89 14 85 c0 87 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7840],edx
c000ed03:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ed08:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ed0c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ed10:	01 d0                	add    eax,edx
c000ed12:	83 c0 2c             	add    eax,0x2c
c000ed15:	8a 00                	mov    al,BYTE PTR [eax]
c000ed17:	0f b6 d0             	movzx  edx,al
c000ed1a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ed1e:	8d 48 01             	lea    ecx,[eax+0x1]
c000ed21:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ed25:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ed29:	0f b6 c0             	movzx  eax,al
c000ed2c:	c1 e0 08             	shl    eax,0x8
c000ed2f:	89 d1                	mov    ecx,edx
c000ed31:	09 c1                	or     ecx,eax
c000ed33:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ed37:	8d 50 02             	lea    edx,[eax+0x2]
c000ed3a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ed3e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ed42:	0f b6 c0             	movzx  eax,al
c000ed45:	c1 e0 10             	shl    eax,0x10
c000ed48:	09 c1                	or     ecx,eax
c000ed4a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ed4e:	8d 50 03             	lea    edx,[eax+0x3]
c000ed51:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ed55:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ed59:	0f b6 c0             	movzx  eax,al
c000ed5c:	c1 e0 18             	shl    eax,0x18
c000ed5f:	09 c1                	or     ecx,eax
c000ed61:	89 ca                	mov    edx,ecx
c000ed63:	a0 80 87 02 c0       	mov    al,ds:0xc0028780
c000ed68:	0f b6 c0             	movzx  eax,al
c000ed6b:	89 14 85 40 88 02 c0 	mov    DWORD PTR [eax*4-0x3ffd77c0],edx
c000ed72:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ed77:	a0 80 87 02 c0       	mov    al,ds:0xc0028780
c000ed7c:	83 c0 01             	add    eax,0x1
c000ed7f:	a2 80 87 02 c0       	mov    ds:0xc0028780,al
c000ed84:	e9 b3 01 00 00       	jmp    c000ef3c <scanMADT()+0x494>
c000ed89:	8d 76 00             	lea    esi,[esi+0x0]
c000ed8c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ed91:	83 f8 02             	cmp    eax,0x2
c000ed94:	0f 85 ea 00 00 00    	jne    c000ee84 <scanMADT()+0x3dc>
c000ed9a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ed9e:	8d 50 01             	lea    edx,[eax+0x1]
c000eda1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000eda5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eda9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000edad:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000edb1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000edb5:	8d 50 01             	lea    edx,[eax+0x1]
c000edb8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000edbc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000edc0:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000edc4:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000edc8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000edcc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000edd0:	01 d0                	add    eax,edx
c000edd2:	83 c0 2c             	add    eax,0x2c
c000edd5:	8a 00                	mov    al,BYTE PTR [eax]
c000edd7:	0f b6 d0             	movzx  edx,al
c000edda:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000edde:	8d 48 01             	lea    ecx,[eax+0x1]
c000ede1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ede5:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ede9:	0f b6 c0             	movzx  eax,al
c000edec:	c1 e0 08             	shl    eax,0x8
c000edef:	89 d1                	mov    ecx,edx
c000edf1:	09 c1                	or     ecx,eax
c000edf3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000edf7:	8d 50 02             	lea    edx,[eax+0x2]
c000edfa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000edfe:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ee02:	0f b6 c0             	movzx  eax,al
c000ee05:	c1 e0 10             	shl    eax,0x10
c000ee08:	09 c1                	or     ecx,eax
c000ee0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ee0e:	8d 50 03             	lea    edx,[eax+0x3]
c000ee11:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ee15:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ee19:	0f b6 c0             	movzx  eax,al
c000ee1c:	c1 e0 18             	shl    eax,0x18
c000ee1f:	09 c8                	or     eax,ecx
c000ee21:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ee25:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ee2a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ee2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ee32:	01 d0                	add    eax,edx
c000ee34:	83 c0 2c             	add    eax,0x2c
c000ee37:	8a 00                	mov    al,BYTE PTR [eax]
c000ee39:	0f b6 c0             	movzx  eax,al
c000ee3c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ee40:	8d 4a 01             	lea    ecx,[edx+0x1]
c000ee43:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ee47:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000ee4b:	0f b6 d2             	movzx  edx,dl
c000ee4e:	c1 e2 08             	shl    edx,0x8
c000ee51:	09 d0                	or     eax,edx
c000ee53:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000ee58:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000ee5d:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000ee62:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ee66:	88 90 a8 28 02 c0    	mov    BYTE PTR [eax-0x3ffdd758],dl
c000ee6c:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000ee71:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000ee76:	66 89 84 12 60 87 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd78a0],ax
c000ee7e:	e9 b9 00 00 00       	jmp    c000ef3c <scanMADT()+0x494>
c000ee83:	90                   	nop
c000ee84:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ee89:	83 f8 04             	cmp    eax,0x4
c000ee8c:	0f 85 9a 00 00 00    	jne    c000ef2c <scanMADT()+0x484>
c000ee92:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ee96:	8d 50 01             	lea    edx,[eax+0x1]
c000ee99:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ee9d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eea1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000eea5:	0f b6 c0             	movzx  eax,al
c000eea8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000eeac:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eeb0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eeb4:	01 d0                	add    eax,edx
c000eeb6:	83 c0 2c             	add    eax,0x2c
c000eeb9:	8a 00                	mov    al,BYTE PTR [eax]
c000eebb:	0f b6 d0             	movzx  edx,al
c000eebe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eec2:	8d 48 01             	lea    ecx,[eax+0x1]
c000eec5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eec9:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000eecd:	0f b6 c0             	movzx  eax,al
c000eed0:	c1 e0 08             	shl    eax,0x8
c000eed3:	09 d0                	or     eax,edx
c000eed5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000eed9:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000eede:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eee2:	8d 50 01             	lea    edx,[eax+0x1]
c000eee5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000eee9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eeed:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000eef1:	0f b6 c0             	movzx  eax,al
c000eef4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000eef8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eefc:	c1 e0 08             	shl    eax,0x8
c000eeff:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000ef03:	89 c1                	mov    ecx,eax
c000ef05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef09:	c1 e0 18             	shl    eax,0x18
c000ef0c:	89 c3                	mov    ebx,eax
c000ef0e:	a1 d0 86 02 c0       	mov    eax,ds:0xc00286d0
c000ef13:	8d 50 01             	lea    edx,[eax+0x1]
c000ef16:	89 15 d0 86 02 c0    	mov    DWORD PTR ds:0xc00286d0,edx
c000ef1c:	09 d9                	or     ecx,ebx
c000ef1e:	89 ca                	mov    edx,ecx
c000ef20:	89 14 85 e0 86 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7920],edx
c000ef27:	eb 13                	jmp    c000ef3c <scanMADT()+0x494>
c000ef29:	8d 76 00             	lea    esi,[esi+0x0]
c000ef2c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ef31:	83 f8 05             	cmp    eax,0x5
c000ef34:	75 06                	jne    c000ef3c <scanMADT()+0x494>
c000ef36:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000ef3b:	90                   	nop
c000ef3c:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000ef41:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ef45:	01 d0                	add    eax,edx
c000ef47:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ef4b:	e9 50 fc ff ff       	jmp    c000eba0 <scanMADT()+0xf8>
c000ef50:	90                   	nop
c000ef51:	eb 05                	jmp    c000ef58 <scanMADT()+0x4b0>
c000ef53:	90                   	nop
c000ef54:	90                   	nop
c000ef55:	8d 76 00             	lea    esi,[esi+0x0]
c000ef58:	83 c4 38             	add    esp,0x38
c000ef5b:	5b                   	pop    ebx
c000ef5c:	c3                   	ret    
c000ef5d:	90                   	nop
c000ef5e:	66 90                	xchg   ax,ax

c000ef60 <ACPI::ACPI()>:
c000ef60:	83 ec 0c             	sub    esp,0xc
c000ef63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ef67:	83 ec 08             	sub    esp,0x8
c000ef6a:	68 b1 10 02 c0       	push   0xc00210b1
c000ef6f:	50                   	push   eax
c000ef70:	e8 65 d2 ff ff       	call   c000c1da <Device::Device(char const*)>
c000ef75:	83 c4 10             	add    esp,0x10
c000ef78:	ba 20 12 02 c0       	mov    edx,0xc0021220
c000ef7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ef81:	89 10                	mov    DWORD PTR [eax],edx
c000ef83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ef87:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000ef8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ef92:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000ef9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000efa0:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000efaa:	e8 f9 fa ff ff       	call   c000eaa8 <scanMADT()>
c000efaf:	90                   	nop
c000efb0:	83 c4 0c             	add    esp,0xc
c000efb3:	c3                   	ret    

c000efb4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000efb4:	83 ec 2c             	sub    esp,0x2c
c000efb7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000efbb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000efbf:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000efc3:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000efc7:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000efcc:	88 d0                	mov    al,dl
c000efce:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000efd2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000efd7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000efdf:	90                   	nop
c000efe0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000efe4:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000efea:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000efee:	0f 8d b0 00 00 00    	jge    c000f0a4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000eff4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000eff8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000effc:	83 c2 2a             	add    edx,0x2a
c000efff:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000f003:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000f008:	0f b7 c0             	movzx  eax,ax
c000f00b:	39 c2                	cmp    edx,eax
c000f00d:	0f 85 85 00 00 00    	jne    c000f098 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f013:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f017:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f01b:	83 c2 2a             	add    edx,0x2a
c000f01e:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000f022:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000f027:	0f b6 c0             	movzx  eax,al
c000f02a:	39 c2                	cmp    edx,eax
c000f02c:	75 6a                	jne    c000f098 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f02e:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f033:	85 c0                	test   eax,eax
c000f035:	74 3d                	je     c000f074 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000f037:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f03b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f03f:	83 c2 2a             	add    edx,0x2a
c000f042:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000f046:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f04a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f04d:	39 c2                	cmp    edx,eax
c000f04f:	74 13                	je     c000f064 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000f051:	83 ec 0c             	sub    esp,0xc
c000f054:	68 2c 10 02 c0       	push   0xc002102c
c000f059:	e8 3d 1b 00 00       	call   c0010b9b <KePanic(char const*)>
c000f05e:	83 c4 10             	add    esp,0x10
c000f061:	8d 76 00             	lea    esi,[esi+0x0]
c000f064:	83 ec 0c             	sub    esp,0xc
c000f067:	68 b6 10 02 c0       	push   0xc00210b6
c000f06c:	e8 2a 1b 00 00       	call   c0010b9b <KePanic(char const*)>
c000f071:	83 c4 10             	add    esp,0x10
c000f074:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f078:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f07c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f080:	83 c2 2a             	add    edx,0x2a
c000f083:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000f087:	8b 02                	mov    eax,DWORD PTR [edx]
c000f089:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000f08c:	89 01                	mov    DWORD PTR [ecx],eax
c000f08e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f091:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f096:	66 90                	xchg   ax,ax
c000f098:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000f09d:	e9 3e ff ff ff       	jmp    c000efe0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000f0a2:	66 90                	xchg   ax,ax
c000f0a4:	90                   	nop
c000f0a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f0a9:	83 c4 2c             	add    esp,0x2c
c000f0ac:	c2 04 00             	ret    0x4
c000f0af:	90                   	nop

c000f0b0 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000f0b0:	83 ec 1c             	sub    esp,0x1c
c000f0b3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f0b7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000f0bb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f0bf:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000f0c4:	88 c8                	mov    al,cl
c000f0c6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000f0ca:	88 d0                	mov    al,dl
c000f0cc:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f0d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f0d4:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f0da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f0de:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f0e1:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000f0e5:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000f0e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f0ed:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f0f3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000f0f7:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000f0fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f0fe:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000f103:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f107:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f10d:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000f111:	83 c0 01             	add    eax,0x1
c000f114:	88 c1                	mov    cl,al
c000f116:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f11a:	83 c2 2a             	add    edx,0x2a
c000f11d:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000f121:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f125:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f12b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f12f:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f132:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f136:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000f13a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f13e:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f144:	8d 50 01             	lea    edx,[eax+0x1]
c000f147:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f14b:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000f151:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f155:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f15b:	3d 00 02 00 00       	cmp    eax,0x200
c000f160:	75 12                	jne    c000f174 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000f162:	83 ec 0c             	sub    esp,0xc
c000f165:	68 c5 10 02 c0       	push   0xc00210c5
c000f16a:	e8 2c 1a 00 00       	call   c0010b9b <KePanic(char const*)>
c000f16f:	83 c4 10             	add    esp,0x10
c000f172:	66 90                	xchg   ax,ax
c000f174:	90                   	nop
c000f175:	83 c4 1c             	add    esp,0x1c
c000f178:	c3                   	ret    
c000f179:	90                   	nop
c000f17a:	66 90                	xchg   ax,ax

c000f17c <ACPI::setScreenBrightnessLevel(void*, int)>:
c000f17c:	b8 00 00 00 00       	mov    eax,0x0
c000f181:	c3                   	ret    
c000f182:	66 90                	xchg   ax,ax

c000f184 <ACPI::detectPCI()>:
c000f184:	53                   	push   ebx
c000f185:	83 ec 28             	sub    esp,0x28
c000f188:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f18d:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000f192:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f197:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f19d:	83 e0 04             	and    eax,0x4
c000f1a0:	0f b6 c0             	movzx  eax,al
c000f1a3:	85 c0                	test   eax,eax
c000f1a5:	74 2d                	je     c000f1d4 <ACPI::detectPCI()+0x50>
c000f1a7:	a1 c8 86 02 c0       	mov    eax,ds:0xc00286c8
c000f1ac:	83 ec 08             	sub    esp,0x8
c000f1af:	68 e2 10 02 c0       	push   0xc00210e2
c000f1b4:	50                   	push   eax
c000f1b5:	e8 6e f8 ff ff       	call   c000ea28 <findDataTable(unsigned char*, char*)>
c000f1ba:	83 c4 10             	add    esp,0x10
c000f1bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f1c1:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000f1c6:	74 0c                	je     c000f1d4 <ACPI::detectPCI()+0x50>
c000f1c8:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f1cd:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f1d2:	66 90                	xchg   ax,ax
c000f1d4:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000f1dc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f1e0:	8a 00                	mov    al,BYTE PTR [eax]
c000f1e2:	0f b6 c0             	movzx  eax,al
c000f1e5:	83 f8 01             	cmp    eax,0x1
c000f1e8:	75 0e                	jne    c000f1f8 <ACPI::detectPCI()+0x74>
c000f1ea:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f1ef:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f1f4:	eb 2e                	jmp    c000f224 <ACPI::detectPCI()+0xa0>
c000f1f6:	66 90                	xchg   ax,ax
c000f1f8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f1fc:	8a 00                	mov    al,BYTE PTR [eax]
c000f1fe:	0f b6 c0             	movzx  eax,al
c000f201:	83 f8 02             	cmp    eax,0x2
c000f204:	75 1e                	jne    c000f224 <ACPI::detectPCI()+0xa0>
c000f206:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f20b:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f210:	85 c0                	test   eax,eax
c000f212:	74 10                	je     c000f224 <ACPI::detectPCI()+0xa0>
c000f214:	83 ec 0c             	sub    esp,0xc
c000f217:	68 5c 10 02 c0       	push   0xc002105c
c000f21c:	e8 7a 19 00 00       	call   c0010b9b <KePanic(char const*)>
c000f221:	83 c4 10             	add    esp,0x10
c000f224:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000f228:	83 f0 01             	xor    eax,0x1
c000f22b:	0f b6 c0             	movzx  eax,al
c000f22e:	85 c0                	test   eax,eax
c000f230:	74 46                	je     c000f278 <ACPI::detectPCI()+0xf4>
c000f232:	e8 f9 0e ff ff       	call   c0000130 <manualPCIProbe>
c000f237:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f23b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f240:	75 0e                	jne    c000f250 <ACPI::detectPCI()+0xcc>
c000f242:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f247:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f24c:	eb 2a                	jmp    c000f278 <ACPI::detectPCI()+0xf4>
c000f24e:	66 90                	xchg   ax,ax
c000f250:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000f255:	75 21                	jne    c000f278 <ACPI::detectPCI()+0xf4>
c000f257:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f25c:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f261:	85 c0                	test   eax,eax
c000f263:	74 13                	je     c000f278 <ACPI::detectPCI()+0xf4>
c000f265:	83 ec 0c             	sub    esp,0xc
c000f268:	68 5c 10 02 c0       	push   0xc002105c
c000f26d:	e8 29 19 00 00       	call   c0010b9b <KePanic(char const*)>
c000f272:	83 c4 10             	add    esp,0x10
c000f275:	8d 76 00             	lea    esi,[esi+0x0]
c000f278:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f27d:	85 c0                	test   eax,eax
c000f27f:	0f 84 87 00 00 00    	je     c000f30c <ACPI::detectPCI()+0x188>
c000f285:	83 ec 0c             	sub    esp,0xc
c000f288:	68 e7 10 02 c0       	push   0xc00210e7
c000f28d:	e8 53 12 00 00       	call   c00104e5 <KeSetBootMessage(char const*)>
c000f292:	83 c4 10             	add    esp,0x10
c000f295:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000f29d:	83 ec 0c             	sub    esp,0xc
c000f2a0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f2a4:	e8 05 88 ff ff       	call   c0007aae <malloc>
c000f2a9:	83 c4 10             	add    esp,0x10
c000f2ac:	89 c3                	mov    ebx,eax
c000f2ae:	83 ec 0c             	sub    esp,0xc
c000f2b1:	53                   	push   ebx
c000f2b2:	e8 bd b1 00 00       	call   c001a474 <PCI::PCI()>
c000f2b7:	83 c4 10             	add    esp,0x10
c000f2ba:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f2be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f2c2:	83 ec 08             	sub    esp,0x8
c000f2c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f2c9:	50                   	push   eax
c000f2ca:	e8 73 cd ff ff       	call   c000c042 <Device::addChild(Device*)>
c000f2cf:	83 c4 10             	add    esp,0x10
c000f2d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f2d6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f2d8:	83 c0 08             	add    eax,0x8
c000f2db:	8b 00                	mov    eax,DWORD PTR [eax]
c000f2dd:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000f2e2:	85 d2                	test   edx,edx
c000f2e4:	74 0a                	je     c000f2f0 <ACPI::detectPCI()+0x16c>
c000f2e6:	ba 01 00 00 00       	mov    edx,0x1
c000f2eb:	eb 0b                	jmp    c000f2f8 <ACPI::detectPCI()+0x174>
c000f2ed:	8d 76 00             	lea    esi,[esi+0x0]
c000f2f0:	ba 02 00 00 00       	mov    edx,0x2
c000f2f5:	8d 76 00             	lea    esi,[esi+0x0]
c000f2f8:	6a 00                	push   0x0
c000f2fa:	6a 00                	push   0x0
c000f2fc:	52                   	push   edx
c000f2fd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f301:	ff d0                	call   eax
c000f303:	83 c4 10             	add    esp,0x10
c000f306:	e9 91 00 00 00       	jmp    c000f39c <ACPI::detectPCI()+0x218>
c000f30b:	90                   	nop
c000f30c:	83 ec 0c             	sub    esp,0xc
c000f30f:	68 ff 10 02 c0       	push   0xc00210ff
c000f314:	e8 cc 11 00 00       	call   c00104e5 <KeSetBootMessage(char const*)>
c000f319:	83 c4 10             	add    esp,0x10
c000f31c:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000f323:	83 ec 0c             	sub    esp,0xc
c000f326:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000f32a:	e8 7f 87 ff ff       	call   c0007aae <malloc>
c000f32f:	83 c4 10             	add    esp,0x10
c000f332:	89 c3                	mov    ebx,eax
c000f334:	83 ec 0c             	sub    esp,0xc
c000f337:	53                   	push   ebx
c000f338:	e8 d1 bc 00 00       	call   c001b00e <IDE::IDE()>
c000f33d:	83 c4 10             	add    esp,0x10
c000f340:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000f344:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f348:	83 ec 08             	sub    esp,0x8
c000f34b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f34f:	50                   	push   eax
c000f350:	e8 ed cc ff ff       	call   c000c042 <Device::addChild(Device*)>
c000f355:	83 c4 10             	add    esp,0x10
c000f358:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f35c:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000f366:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f36a:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000f373:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f377:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000f380:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f384:	8b 00                	mov    eax,DWORD PTR [eax]
c000f386:	83 c0 08             	add    eax,0x8
c000f389:	8b 00                	mov    eax,DWORD PTR [eax]
c000f38b:	6a 00                	push   0x0
c000f38d:	6a 00                	push   0x0
c000f38f:	6a 00                	push   0x0
c000f391:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f395:	ff d0                	call   eax
c000f397:	83 c4 10             	add    esp,0x10
c000f39a:	66 90                	xchg   ax,ax
c000f39c:	90                   	nop
c000f39d:	83 c4 28             	add    esp,0x28
c000f3a0:	5b                   	pop    ebx
c000f3a1:	c3                   	ret    
c000f3a2:	66 90                	xchg   ax,ax

c000f3a4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000f3a4:	83 ec 1c             	sub    esp,0x1c
c000f3a7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f3ab:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f3ae:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f3b2:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f3b7:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000f3bc:	83 ec 08             	sub    esp,0x8
c000f3bf:	52                   	push   edx
c000f3c0:	50                   	push   eax
c000f3c1:	e8 aa 7d ff ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c000f3c6:	83 c4 10             	add    esp,0x10
c000f3c9:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000f3cd:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f3d2:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000f3d7:	83 ec 04             	sub    esp,0x4
c000f3da:	6a 01                	push   0x1
c000f3dc:	52                   	push   edx
c000f3dd:	50                   	push   eax
c000f3de:	e8 a7 7e ff ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c000f3e3:	83 c4 10             	add    esp,0x10
c000f3e6:	90                   	nop
c000f3e7:	83 c4 1c             	add    esp,0x1c
c000f3ea:	c3                   	ret    
c000f3eb:	90                   	nop

c000f3ec <ACPI::sleep()>:
c000f3ec:	83 ec 0c             	sub    esp,0xc
c000f3ef:	a1 a0 84 02 c0       	mov    eax,ds:0xc00284a0
c000f3f4:	85 c0                	test   eax,eax
c000f3f6:	74 08                	je     c000f400 <ACPI::sleep()+0x14>
c000f3f8:	a1 a0 84 02 c0       	mov    eax,ds:0xc00284a0
c000f3fd:	ff d0                	call   eax
c000f3ff:	90                   	nop
c000f400:	90                   	nop
c000f401:	83 c4 0c             	add    esp,0xc
c000f404:	c3                   	ret    
c000f405:	90                   	nop
c000f406:	66 90                	xchg   ax,ax

c000f408 <ACPI::open(int, int, void*)>:
c000f408:	57                   	push   edi
c000f409:	56                   	push   esi
c000f40a:	53                   	push   ebx
c000f40b:	81 ec 70 01 00 00    	sub    esp,0x170
c000f411:	83 ec 0c             	sub    esp,0xc
c000f414:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f41b:	e8 64 fd ff ff       	call   c000f184 <ACPI::detectPCI()>
c000f420:	83 c4 10             	add    esp,0x10
c000f423:	83 ec 0c             	sub    esp,0xc
c000f426:	68 84 10 02 c0       	push   0xc0021084
c000f42b:	e8 b5 10 00 00       	call   c00104e5 <KeSetBootMessage(char const*)>
c000f430:	83 c4 10             	add    esp,0x10
c000f433:	b8 4c 05 00 00       	mov    eax,0x54c
c000f438:	8a 00                	mov    al,BYTE PTR [eax]
c000f43a:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c000f441:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000f449:	83 f8 01             	cmp    eax,0x1
c000f44c:	75 12                	jne    c000f460 <ACPI::open(int, int, void*)+0x58>
c000f44e:	83 ec 0c             	sub    esp,0xc
c000f451:	68 14 11 02 c0       	push   0xc0021114
c000f456:	e8 2d 4a 00 00       	call   c0013e88 <Thr::loadKernelSymbolTable(char const*)>
c000f45b:	83 c4 10             	add    esp,0x10
c000f45e:	eb 34                	jmp    c000f494 <ACPI::open(int, int, void*)+0x8c>
c000f460:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000f468:	3d bb 00 00 00       	cmp    eax,0xbb
c000f46d:	75 15                	jne    c000f484 <ACPI::open(int, int, void*)+0x7c>
c000f46f:	83 ec 0c             	sub    esp,0xc
c000f472:	68 32 11 02 c0       	push   0xc0021132
c000f477:	e8 0c 4a 00 00       	call   c0013e88 <Thr::loadKernelSymbolTable(char const*)>
c000f47c:	83 c4 10             	add    esp,0x10
c000f47f:	eb 13                	jmp    c000f494 <ACPI::open(int, int, void*)+0x8c>
c000f481:	8d 76 00             	lea    esi,[esi+0x0]
c000f484:	83 ec 0c             	sub    esp,0xc
c000f487:	68 50 11 02 c0       	push   0xc0021150
c000f48c:	e8 0a 17 00 00       	call   c0010b9b <KePanic(char const*)>
c000f491:	83 c4 10             	add    esp,0x10
c000f494:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000f49c:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000f4a7:	83 ec 0c             	sub    esp,0xc
c000f4aa:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000f4b1:	e8 f8 85 ff ff       	call   c0007aae <malloc>
c000f4b6:	83 c4 10             	add    esp,0x10
c000f4b9:	89 c3                	mov    ebx,eax
c000f4bb:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c000f4c0:	83 ec 04             	sub    esp,0x4
c000f4c3:	50                   	push   eax
c000f4c4:	68 6a 11 02 c0       	push   0xc002116a
c000f4c9:	53                   	push   ebx
c000f4ca:	e8 c1 bc ff ff       	call   c000b190 <File::File(char const*, Process*)>
c000f4cf:	83 c4 10             	add    esp,0x10
c000f4d2:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000f4d9:	83 ec 08             	sub    esp,0x8
c000f4dc:	6a 01                	push   0x1
c000f4de:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f4e5:	e8 62 bd ff ff       	call   c000b24c <File::open(FileOpenMode)>
c000f4ea:	83 c4 10             	add    esp,0x10
c000f4ed:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000f4f4:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000f4fc:	75 16                	jne    c000f514 <ACPI::open(int, int, void*)+0x10c>
c000f4fe:	83 ec 0c             	sub    esp,0xc
c000f501:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f508:	e8 9d bd ff ff       	call   c000b2aa <File::close()>
c000f50d:	83 c4 10             	add    esp,0x10
c000f510:	eb 0a                	jmp    c000f51c <ACPI::open(int, int, void*)+0x114>
c000f512:	66 90                	xchg   ax,ax
c000f514:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000f51c:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000f524:	74 1e                	je     c000f544 <ACPI::open(int, int, void*)+0x13c>
c000f526:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000f52d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f52f:	83 c0 08             	add    eax,0x8
c000f532:	8b 00                	mov    eax,DWORD PTR [eax]
c000f534:	83 ec 0c             	sub    esp,0xc
c000f537:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f53e:	ff d0                	call   eax
c000f540:	83 c4 10             	add    esp,0x10
c000f543:	90                   	nop
c000f544:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000f54b:	83 f0 01             	xor    eax,0x1
c000f54e:	0f b6 c0             	movzx  eax,al
c000f551:	85 c0                	test   eax,eax
c000f553:	74 43                	je     c000f598 <ACPI::open(int, int, void*)+0x190>
c000f555:	83 ec 0c             	sub    esp,0xc
c000f558:	68 88 11 02 c0       	push   0xc0021188
c000f55d:	e8 83 0f 00 00       	call   c00104e5 <KeSetBootMessage(char const*)>
c000f562:	83 c4 10             	add    esp,0x10
c000f565:	83 ec 04             	sub    esp,0x4
c000f568:	6a 0c                	push   0xc
c000f56a:	68 a3 11 02 c0       	push   0xc00211a3
c000f56f:	68 b4 11 02 c0       	push   0xc00211b4
c000f574:	e8 bb 3c 00 00       	call   c0013234 <Reg::readIntWithDefault(char*, char*, int)>
c000f579:	83 c4 10             	add    esp,0x10
c000f57c:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000f583:	83 ec 0c             	sub    esp,0xc
c000f586:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000f58d:	e8 9e a2 ff ff       	call   c0009830 <Virt::setupPageSwapping(int)>
c000f592:	83 c4 10             	add    esp,0x10
c000f595:	8d 76 00             	lea    esi,[esi+0x0]
c000f598:	83 ec 0c             	sub    esp,0xc
c000f59b:	68 f5 fd 01 c0       	push   0xc001fdf5
c000f5a0:	e8 40 0f 00 00       	call   c00104e5 <KeSetBootMessage(char const*)>
c000f5a5:	83 c4 10             	add    esp,0x10
c000f5a8:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000f5af:	83 ec 08             	sub    esp,0x8
c000f5b2:	6a 13                	push   0x13
c000f5b4:	50                   	push   eax
c000f5b5:	e8 a0 cd ff ff       	call   c000c35a <getDevicesOfType(DeviceType)>
c000f5ba:	83 c4 0c             	add    esp,0xc
c000f5bd:	8d 76 00             	lea    esi,[esi+0x0]
c000f5c0:	83 ec 0c             	sub    esp,0xc
c000f5c3:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f5ca:	50                   	push   eax
c000f5cb:	e8 20 fc 00 00       	call   c001f1f0 <LinkedList<Device>::isEmpty()>
c000f5d0:	83 c4 10             	add    esp,0x10
c000f5d3:	83 f0 01             	xor    eax,0x1
c000f5d6:	0f b6 c0             	movzx  eax,al
c000f5d9:	85 c0                	test   eax,eax
c000f5db:	0f 84 47 01 00 00    	je     c000f728 <ACPI::open(int, int, void*)+0x320>
c000f5e1:	83 ec 0c             	sub    esp,0xc
c000f5e4:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f5eb:	50                   	push   eax
c000f5ec:	e8 1b fc 00 00       	call   c001f20c <LinkedList<Device>::getFirstElement()>
c000f5f1:	83 c4 10             	add    esp,0x10
c000f5f4:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000f5fb:	83 ec 0c             	sub    esp,0xc
c000f5fe:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f605:	50                   	push   eax
c000f606:	e8 09 fc 00 00       	call   c001f214 <LinkedList<Device>::removeFirst()>
c000f60b:	83 c4 10             	add    esp,0x10
c000f60e:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000f615:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000f61c:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000f623:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f627:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000f62d:	ba 09 00 00 00       	mov    edx,0x9
c000f632:	fc                   	cld    
c000f633:	89 c7                	mov    edi,eax
c000f635:	89 de                	mov    esi,ebx
c000f637:	89 d1                	mov    ecx,edx
c000f639:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f63b:	83 ec 08             	sub    esp,0x8
c000f63e:	8d 44 24 38          	lea    eax,[esp+0x38]
c000f642:	50                   	push   eax
c000f643:	83 ec 24             	sub    esp,0x24
c000f646:	89 e0                	mov    eax,esp
c000f648:	89 c3                	mov    ebx,eax
c000f64a:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000f64e:	ba 09 00 00 00       	mov    edx,0x9
c000f653:	89 df                	mov    edi,ebx
c000f655:	89 c6                	mov    esi,eax
c000f657:	89 d1                	mov    ecx,edx
c000f659:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f65b:	e8 fe b2 00 00       	call   c001a95e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000f660:	83 c4 30             	add    esp,0x30
c000f663:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000f66a:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000f672:	0f 84 48 ff ff ff    	je     c000f5c0 <ACPI::open(int, int, void*)+0x1b8>
c000f678:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000f683:	83 ec 0c             	sub    esp,0xc
c000f686:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000f68d:	e8 1c 84 ff ff       	call   c0007aae <malloc>
c000f692:	83 c4 10             	add    esp,0x10
c000f695:	89 c3                	mov    ebx,eax
c000f697:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c000f69c:	83 ec 04             	sub    esp,0x4
c000f69f:	50                   	push   eax
c000f6a0:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f6a7:	53                   	push   ebx
c000f6a8:	e8 e3 ba ff ff       	call   c000b190 <File::File(char const*, Process*)>
c000f6ad:	83 c4 10             	add    esp,0x10
c000f6b0:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000f6b7:	83 ec 0c             	sub    esp,0xc
c000f6ba:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f6c1:	e8 f4 bd ff ff       	call   c000b4ba <File::exists()>
c000f6c6:	83 c4 10             	add    esp,0x10
c000f6c9:	0f b6 c0             	movzx  eax,al
c000f6cc:	85 c0                	test   eax,eax
c000f6ce:	74 28                	je     c000f6f8 <ACPI::open(int, int, void*)+0x2f0>
c000f6d0:	83 ec 08             	sub    esp,0x8
c000f6d3:	6a 01                	push   0x1
c000f6d5:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000f6dc:	e8 ca 52 00 00       	call   c00149ab <Thr::loadDLL(char const*, bool)>
c000f6e1:	83 c4 10             	add    esp,0x10
c000f6e4:	83 ec 08             	sub    esp,0x8
c000f6e7:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000f6ee:	50                   	push   eax
c000f6ef:	e8 e8 54 00 00       	call   c0014bdc <Thr::executeDLL(unsigned long, void*)>
c000f6f4:	83 c4 10             	add    esp,0x10
c000f6f7:	90                   	nop
c000f6f8:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000f700:	0f 84 ba fe ff ff    	je     c000f5c0 <ACPI::open(int, int, void*)+0x1b8>
c000f706:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000f70d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f70f:	83 c0 08             	add    eax,0x8
c000f712:	8b 00                	mov    eax,DWORD PTR [eax]
c000f714:	83 ec 0c             	sub    esp,0xc
c000f717:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f71e:	ff d0                	call   eax
c000f720:	83 c4 10             	add    esp,0x10
c000f723:	e9 98 fe ff ff       	jmp    c000f5c0 <ACPI::open(int, int, void*)+0x1b8>
c000f728:	83 ec 0c             	sub    esp,0xc
c000f72b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f732:	50                   	push   eax
c000f733:	e8 b4 fa 00 00       	call   c001f1ec <LinkedList<Device>::~LinkedList()>
c000f738:	83 c4 10             	add    esp,0x10
c000f73b:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000f741:	83 ec 08             	sub    esp,0x8
c000f744:	6a 01                	push   0x1
c000f746:	68 bb 11 02 c0       	push   0xc00211bb
c000f74b:	e8 5b 52 00 00       	call   c00149ab <Thr::loadDLL(char const*, bool)>
c000f750:	83 c4 10             	add    esp,0x10
c000f753:	83 ec 08             	sub    esp,0x8
c000f756:	53                   	push   ebx
c000f757:	50                   	push   eax
c000f758:	e8 7f 54 00 00       	call   c0014bdc <Thr::executeDLL(unsigned long, void*)>
c000f75d:	83 c4 10             	add    esp,0x10
c000f760:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f765:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f76b:	83 e0 04             	and    eax,0x4
c000f76e:	0f b6 c0             	movzx  eax,al
c000f771:	85 c0                	test   eax,eax
c000f773:	0f 84 1b 01 00 00    	je     c000f894 <ACPI::open(int, int, void*)+0x48c>
c000f779:	83 ec 0c             	sub    esp,0xc
c000f77c:	68 d8 11 02 c0       	push   0xc00211d8
c000f781:	e8 5f 0d 00 00       	call   c00104e5 <KeSetBootMessage(char const*)>
c000f786:	83 c4 10             	add    esp,0x10
c000f789:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000f794:	83 ec 0c             	sub    esp,0xc
c000f797:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000f79e:	e8 0b 83 ff ff       	call   c0007aae <malloc>
c000f7a3:	83 c4 10             	add    esp,0x10
c000f7a6:	89 c3                	mov    ebx,eax
c000f7a8:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c000f7ad:	83 ec 04             	sub    esp,0x4
c000f7b0:	50                   	push   eax
c000f7b1:	68 f5 11 02 c0       	push   0xc00211f5
c000f7b6:	53                   	push   ebx
c000f7b7:	e8 d4 b9 ff ff       	call   c000b190 <File::File(char const*, Process*)>
c000f7bc:	83 c4 10             	add    esp,0x10
c000f7bf:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000f7c6:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f7ce:	74 20                	je     c000f7f0 <ACPI::open(int, int, void*)+0x3e8>
c000f7d0:	83 ec 0c             	sub    esp,0xc
c000f7d3:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f7da:	e8 db bc ff ff       	call   c000b4ba <File::exists()>
c000f7df:	83 c4 10             	add    esp,0x10
c000f7e2:	0f b6 c0             	movzx  eax,al
c000f7e5:	85 c0                	test   eax,eax
c000f7e7:	74 07                	je     c000f7f0 <ACPI::open(int, int, void*)+0x3e8>
c000f7e9:	b0 01                	mov    al,0x1
c000f7eb:	eb 07                	jmp    c000f7f4 <ACPI::open(int, int, void*)+0x3ec>
c000f7ed:	8d 76 00             	lea    esi,[esi+0x0]
c000f7f0:	b0 00                	mov    al,0x0
c000f7f2:	66 90                	xchg   ax,ax
c000f7f4:	0f b6 c0             	movzx  eax,al
c000f7f7:	85 c0                	test   eax,eax
c000f7f9:	74 25                	je     c000f820 <ACPI::open(int, int, void*)+0x418>
c000f7fb:	83 ec 08             	sub    esp,0x8
c000f7fe:	6a 01                	push   0x1
c000f800:	68 f5 11 02 c0       	push   0xc00211f5
c000f805:	e8 a1 51 00 00       	call   c00149ab <Thr::loadDLL(char const*, bool)>
c000f80a:	83 c4 10             	add    esp,0x10
c000f80d:	83 ec 08             	sub    esp,0x8
c000f810:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000f817:	50                   	push   eax
c000f818:	e8 bf 53 00 00       	call   c0014bdc <Thr::executeDLL(unsigned long, void*)>
c000f81d:	83 c4 10             	add    esp,0x10
c000f820:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f828:	74 2a                	je     c000f854 <ACPI::open(int, int, void*)+0x44c>
c000f82a:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f832:	74 20                	je     c000f854 <ACPI::open(int, int, void*)+0x44c>
c000f834:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000f83b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f83d:	83 c0 08             	add    eax,0x8
c000f840:	8b 00                	mov    eax,DWORD PTR [eax]
c000f842:	83 ec 0c             	sub    esp,0xc
c000f845:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f84c:	ff d0                	call   eax
c000f84e:	83 c4 10             	add    esp,0x10
c000f851:	8d 76 00             	lea    esi,[esi+0x0]
c000f854:	a1 c8 86 02 c0       	mov    eax,ds:0xc00286c8
c000f859:	83 ec 08             	sub    esp,0x8
c000f85c:	68 12 12 02 c0       	push   0xc0021212
c000f861:	50                   	push   eax
c000f862:	e8 c1 f1 ff ff       	call   c000ea28 <findDataTable(unsigned char*, char*)>
c000f867:	83 c4 10             	add    esp,0x10
c000f86a:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000f871:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000f879:	74 19                	je     c000f894 <ACPI::open(int, int, void*)+0x48c>
c000f87b:	83 ec 08             	sub    esp,0x8
c000f87e:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000f885:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f88c:	e8 13 fb ff ff       	call   c000f3a4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000f891:	83 c4 10             	add    esp,0x10
c000f894:	b8 00 00 00 00       	mov    eax,0x0
c000f899:	81 c4 70 01 00 00    	add    esp,0x170
c000f89f:	5b                   	pop    ebx
c000f8a0:	5e                   	pop    esi
c000f8a1:	5f                   	pop    edi
c000f8a2:	c3                   	ret    
c000f8a3:	90                   	nop

c000f8a4 <CPU::close(int, int, void*)>:
c000f8a4:	31 c0                	xor    eax,eax
c000f8a6:	c3                   	ret    
c000f8a7:	90                   	nop

c000f8a8 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000f8a8:	60                   	pusha  
c000f8a9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f8ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f8b1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f8b5:	9c                   	pushf  
c000f8b6:	fa                   	cli    
c000f8b7:	0f 09                	wbinvd 
c000f8b9:	0f 30                	wrmsr  
c000f8bb:	9d                   	popf   
c000f8bc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f8c0:	89 02                	mov    DWORD PTR [edx],eax
c000f8c2:	61                   	popa   
c000f8c3:	c3                   	ret    

c000f8c4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000f8c4:	60                   	pusha  
c000f8c5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f8c9:	9c                   	pushf  
c000f8ca:	fa                   	cli    
c000f8cb:	0f 09                	wbinvd 
c000f8cd:	31 c0                	xor    eax,eax
c000f8cf:	31 d2                	xor    edx,edx
c000f8d1:	0f 32                	rdmsr  
c000f8d3:	9d                   	popf   
c000f8d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f8d8:	89 02                	mov    DWORD PTR [edx],eax
c000f8da:	61                   	popa   
c000f8db:	c3                   	ret    

c000f8dc <CPU::AMD_K6_writeback(int, int, int)>:
c000f8dc:	56                   	push   esi
c000f8dd:	53                   	push   ebx
c000f8de:	83 ec 10             	sub    esp,0x10
c000f8e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f8e5:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000f8ea:	75 5d                	jne    c000f949 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f8ec:	83 f8 08             	cmp    eax,0x8
c000f8ef:	75 09                	jne    c000f8fa <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000f8f1:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000f8f6:	7e 13                	jle    c000f90b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f8f8:	eb 30                	jmp    c000f92a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f8fa:	83 f8 06             	cmp    eax,0x6
c000f8fd:	7c 4a                	jl     c000f949 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f8ff:	83 f8 07             	cmp    eax,0x7
c000f902:	7e 07                	jle    c000f90b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f904:	83 f8 09             	cmp    eax,0x9
c000f907:	74 21                	je     c000f92a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f909:	eb 3e                	jmp    c000f949 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f90b:	89 e6                	mov    esi,esp
c000f90d:	8b 1d dc 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025edc
c000f913:	56                   	push   esi
c000f914:	c1 eb 15             	shr    ebx,0x15
c000f917:	68 82 00 00 c0       	push   0xc0000082
c000f91c:	83 e3 7e             	and    ebx,0x7e
c000f91f:	e8 a0 ff ff ff       	call   c000f8c4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f924:	56                   	push   esi
c000f925:	6a 00                	push   0x0
c000f927:	53                   	push   ebx
c000f928:	eb 12                	jmp    c000f93c <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000f92a:	89 e3                	mov    ebx,esp
c000f92c:	53                   	push   ebx
c000f92d:	68 82 00 00 c0       	push   0xc0000082
c000f932:	e8 8d ff ff ff       	call   c000f8c4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f937:	53                   	push   ebx
c000f938:	6a 00                	push   0x0
c000f93a:	6a 00                	push   0x0
c000f93c:	68 82 00 00 c0       	push   0xc0000082
c000f941:	e8 62 ff ff ff       	call   c000f8a8 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000f946:	83 c4 18             	add    esp,0x18
c000f949:	83 c4 10             	add    esp,0x10
c000f94c:	5b                   	pop    ebx
c000f94d:	5e                   	pop    esi
c000f94e:	c3                   	ret    
c000f94f:	90                   	nop

c000f950 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000f950:	55                   	push   ebp
c000f951:	57                   	push   edi
c000f952:	56                   	push   esi
c000f953:	53                   	push   ebx
c000f954:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f958:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f95c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f960:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000f964:	39 05 b8 28 02 c0    	cmp    DWORD PTR ds:0xc00228b8,eax
c000f96a:	75 23                	jne    c000f98f <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000f96c:	a1 2c 89 02 c0       	mov    eax,ds:0xc002892c
c000f971:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f975:	89 06                	mov    DWORD PTR [esi],eax
c000f977:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c000f97c:	89 07                	mov    DWORD PTR [edi],eax
c000f97e:	a1 24 89 02 c0       	mov    eax,ds:0xc0028924
c000f983:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f986:	a1 20 89 02 c0       	mov    eax,ds:0xc0028920
c000f98b:	89 02                	mov    DWORD PTR [edx],eax
c000f98d:	eb 3f                	jmp    c000f9ce <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000f98f:	31 c9                	xor    ecx,ecx
c000f991:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f995:	0f a2                	cpuid  
c000f997:	89 06                	mov    DWORD PTR [esi],eax
c000f999:	89 1f                	mov    DWORD PTR [edi],ebx
c000f99b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f99f:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000f9a2:	89 10                	mov    DWORD PTR [eax],edx
c000f9a4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f9a8:	a3 b8 28 02 c0       	mov    ds:0xc00228b8,eax
c000f9ad:	8b 06                	mov    eax,DWORD PTR [esi]
c000f9af:	a3 2c 89 02 c0       	mov    ds:0xc002892c,eax
c000f9b4:	8b 07                	mov    eax,DWORD PTR [edi]
c000f9b6:	a3 28 89 02 c0       	mov    ds:0xc0028928,eax
c000f9bb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f9be:	a3 24 89 02 c0       	mov    ds:0xc0028924,eax
c000f9c3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f9c7:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9c9:	a3 20 89 02 c0       	mov    ds:0xc0028920,eax
c000f9ce:	5b                   	pop    ebx
c000f9cf:	5e                   	pop    esi
c000f9d0:	5f                   	pop    edi
c000f9d1:	5d                   	pop    ebp
c000f9d2:	c3                   	ret    
c000f9d3:	90                   	nop

c000f9d4 <CPU::cpuidCheckEDX(unsigned int)>:
c000f9d4:	83 ec 10             	sub    esp,0x10
c000f9d7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f9db:	50                   	push   eax
c000f9dc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f9e0:	50                   	push   eax
c000f9e1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f9e5:	50                   	push   eax
c000f9e6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f9ea:	50                   	push   eax
c000f9eb:	6a 01                	push   0x1
c000f9ed:	e8 5e ff ff ff       	call   c000f950 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f9f2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f9f6:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f9fa:	0f 95 c0             	setne  al
c000f9fd:	83 c4 24             	add    esp,0x24
c000fa00:	c3                   	ret    
c000fa01:	90                   	nop

c000fa02 <CPU::cpuidCheckECX(unsigned int)>:
c000fa02:	83 ec 10             	sub    esp,0x10
c000fa05:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fa09:	50                   	push   eax
c000fa0a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fa0e:	50                   	push   eax
c000fa0f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fa13:	50                   	push   eax
c000fa14:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fa18:	50                   	push   eax
c000fa19:	6a 01                	push   0x1
c000fa1b:	e8 30 ff ff ff       	call   c000f950 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fa20:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fa24:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000fa28:	0f 95 c0             	setne  al
c000fa2b:	83 c4 24             	add    esp,0x24
c000fa2e:	c3                   	ret    
c000fa2f:	90                   	nop

c000fa30 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000fa30:	83 ec 10             	sub    esp,0x10
c000fa33:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fa37:	50                   	push   eax
c000fa38:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fa3c:	50                   	push   eax
c000fa3d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fa41:	50                   	push   eax
c000fa42:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fa46:	50                   	push   eax
c000fa47:	6a 07                	push   0x7
c000fa49:	e8 02 ff ff ff       	call   c000f950 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fa4e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fa52:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000fa56:	0f 95 c0             	setne  al
c000fa59:	83 c4 24             	add    esp,0x24
c000fa5c:	c3                   	ret    
c000fa5d:	90                   	nop

c000fa5e <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000fa5e:	83 ec 10             	sub    esp,0x10
c000fa61:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fa65:	50                   	push   eax
c000fa66:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fa6a:	50                   	push   eax
c000fa6b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fa6f:	50                   	push   eax
c000fa70:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fa74:	50                   	push   eax
c000fa75:	6a 07                	push   0x7
c000fa77:	e8 d4 fe ff ff       	call   c000f950 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fa7c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fa80:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000fa84:	0f 95 c0             	setne  al
c000fa87:	83 c4 24             	add    esp,0x24
c000fa8a:	c3                   	ret    
c000fa8b:	90                   	nop

c000fa8c <CPU::CPU()>:
c000fa8c:	83 ec 0c             	sub    esp,0xc
c000fa8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa93:	83 ec 08             	sub    esp,0x8
c000fa96:	68 35 13 02 c0       	push   0xc0021335
c000fa9b:	50                   	push   eax
c000fa9c:	e8 39 c7 ff ff       	call   c000c1da <Device::Device(char const*)>
c000faa1:	83 c4 10             	add    esp,0x10
c000faa4:	ba c8 13 02 c0       	mov    edx,0xc00213c8
c000faa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000faad:	89 10                	mov    DWORD PTR [eax],edx
c000faaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fab3:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000fabd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fac1:	05 78 01 00 00       	add    eax,0x178
c000fac6:	83 ec 0c             	sub    esp,0xc
c000fac9:	50                   	push   eax
c000faca:	e8 85 78 ff ff       	call   c0007354 <GDT::GDT()>
c000facf:	83 c4 10             	add    esp,0x10
c000fad2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fad6:	05 7c 09 00 00       	add    eax,0x97c
c000fadb:	83 ec 0c             	sub    esp,0xc
c000fade:	50                   	push   eax
c000fadf:	e8 c0 7a ff ff       	call   c00075a4 <IDT::IDT()>
c000fae4:	83 c4 10             	add    esp,0x10
c000fae7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000faeb:	05 7c 11 00 00       	add    eax,0x117c
c000faf0:	83 ec 0c             	sub    esp,0xc
c000faf3:	50                   	push   eax
c000faf4:	e8 3f 94 ff ff       	call   c0008f38 <TSS::TSS()>
c000faf9:	83 c4 10             	add    esp,0x10
c000fafc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb00:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000fb07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb0b:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c000fb15:	90                   	nop
c000fb16:	83 c4 0c             	add    esp,0xc
c000fb19:	c3                   	ret    

c000fb1a <CPU::displayFeatures()>:
c000fb1a:	c3                   	ret    
c000fb1b:	90                   	nop

c000fb1c <CPU::detectFeatures()>:
c000fb1c:	55                   	push   ebp
c000fb1d:	57                   	push   edi
c000fb1e:	56                   	push   esi
c000fb1f:	53                   	push   ebx
c000fb20:	83 ec 30             	sub    esp,0x30
c000fb23:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000fb27:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000fb31:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000fb38:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000fb3e:	6a 0d                	push   0xd
c000fb40:	6a 00                	push   0x0
c000fb42:	55                   	push   ebp
c000fb43:	e8 a8 09 ff ff       	call   c00004f0 <memset>
c000fb48:	83 c4 10             	add    esp,0x10
c000fb4b:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000fb50:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000fb57:	0f 84 db 05 00 00    	je     c0010138 <CPU::detectFeatures()+0x61c>
c000fb5d:	83 ec 0c             	sub    esp,0xc
c000fb60:	89 ef                	mov    edi,ebp
c000fb62:	6a 10                	push   0x10
c000fb64:	e8 6b fe ff ff       	call   c000f9d4 <CPU::cpuidCheckEDX(unsigned int)>
c000fb69:	83 e0 01             	and    eax,0x1
c000fb6c:	8d 14 00             	lea    edx,[eax+eax*1]
c000fb6f:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fb75:	83 e0 fd             	and    eax,0xfffffffd
c000fb78:	09 d0                	or     eax,edx
c000fb7a:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fb80:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000fb87:	e8 48 fe ff ff       	call   c000f9d4 <CPU::cpuidCheckEDX(unsigned int)>
c000fb8c:	83 e0 01             	and    eax,0x1
c000fb8f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fb96:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fb9c:	83 e0 fb             	and    eax,0xfffffffb
c000fb9f:	09 d0                	or     eax,edx
c000fba1:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fba7:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000fbae:	e8 21 fe ff ff       	call   c000f9d4 <CPU::cpuidCheckEDX(unsigned int)>
c000fbb3:	83 e0 01             	and    eax,0x1
c000fbb6:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000fbbd:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fbc3:	83 e0 f7             	and    eax,0xfffffff7
c000fbc6:	09 d0                	or     eax,edx
c000fbc8:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fbce:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000fbd5:	e8 fa fd ff ff       	call   c000f9d4 <CPU::cpuidCheckEDX(unsigned int)>
c000fbda:	83 e0 01             	and    eax,0x1
c000fbdd:	c1 e0 04             	shl    eax,0x4
c000fbe0:	89 c2                	mov    edx,eax
c000fbe2:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fbe8:	83 e0 ef             	and    eax,0xffffffef
c000fbeb:	09 d0                	or     eax,edx
c000fbed:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fbf3:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000fbfa:	e8 d5 fd ff ff       	call   c000f9d4 <CPU::cpuidCheckEDX(unsigned int)>
c000fbff:	83 e0 01             	and    eax,0x1
c000fc02:	c1 e0 05             	shl    eax,0x5
c000fc05:	89 c2                	mov    edx,eax
c000fc07:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fc0d:	83 e0 df             	and    eax,0xffffffdf
c000fc10:	09 d0                	or     eax,edx
c000fc12:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fc18:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000fc1f:	e8 b0 fd ff ff       	call   c000f9d4 <CPU::cpuidCheckEDX(unsigned int)>
c000fc24:	83 e0 01             	and    eax,0x1
c000fc27:	8d 14 00             	lea    edx,[eax+eax*1]
c000fc2a:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fc30:	83 e0 fd             	and    eax,0xfffffffd
c000fc33:	09 d0                	or     eax,edx
c000fc35:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fc3b:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000fc42:	e8 8d fd ff ff       	call   c000f9d4 <CPU::cpuidCheckEDX(unsigned int)>
c000fc47:	83 e0 01             	and    eax,0x1
c000fc4a:	c1 e0 06             	shl    eax,0x6
c000fc4d:	89 c2                	mov    edx,eax
c000fc4f:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fc55:	83 e0 bf             	and    eax,0xffffffbf
c000fc58:	09 d0                	or     eax,edx
c000fc5a:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fc60:	58                   	pop    eax
c000fc61:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fc65:	50                   	push   eax
c000fc66:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fc6a:	50                   	push   eax
c000fc6b:	8d 74 24 28          	lea    esi,[esp+0x28]
c000fc6f:	56                   	push   esi
c000fc70:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fc74:	50                   	push   eax
c000fc75:	6a 00                	push   0x0
c000fc77:	e8 d4 fc ff ff       	call   c000f950 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fc7c:	b8 04 00 00 00       	mov    eax,0x4
c000fc81:	89 c1                	mov    ecx,eax
c000fc83:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fc85:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000fc8b:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000fc8f:	89 c1                	mov    ecx,eax
c000fc91:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fc93:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000fc99:	8d 74 24 38          	lea    esi,[esp+0x38]
c000fc9d:	89 c1                	mov    ecx,eax
c000fc9f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fca1:	83 c4 18             	add    esp,0x18
c000fca4:	68 44 12 02 c0       	push   0xc0021244
c000fca9:	55                   	push   ebp
c000fcaa:	e8 a1 0a ff ff       	call   c0000750 <strcmp>
c000fcaf:	83 c4 10             	add    esp,0x10
c000fcb2:	85 c0                	test   eax,eax
c000fcb4:	75 0f                	jne    c000fcc5 <CPU::detectFeatures()+0x1a9>
c000fcb6:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000fcc0:	e9 22 02 00 00       	jmp    c000fee7 <CPU::detectFeatures()+0x3cb>
c000fcc5:	50                   	push   eax
c000fcc6:	50                   	push   eax
c000fcc7:	68 51 12 02 c0       	push   0xc0021251
c000fccc:	55                   	push   ebp
c000fccd:	e8 7e 0a ff ff       	call   c0000750 <strcmp>
c000fcd2:	83 c4 10             	add    esp,0x10
c000fcd5:	85 c0                	test   eax,eax
c000fcd7:	74 dd                	je     c000fcb6 <CPU::detectFeatures()+0x19a>
c000fcd9:	50                   	push   eax
c000fcda:	50                   	push   eax
c000fcdb:	68 5e 12 02 c0       	push   0xc002125e
c000fce0:	55                   	push   ebp
c000fce1:	e8 6a 0a ff ff       	call   c0000750 <strcmp>
c000fce6:	83 c4 10             	add    esp,0x10
c000fce9:	85 c0                	test   eax,eax
c000fceb:	74 2a                	je     c000fd17 <CPU::detectFeatures()+0x1fb>
c000fced:	50                   	push   eax
c000fcee:	50                   	push   eax
c000fcef:	68 6b 12 02 c0       	push   0xc002126b
c000fcf4:	55                   	push   ebp
c000fcf5:	e8 56 0a ff ff       	call   c0000750 <strcmp>
c000fcfa:	83 c4 10             	add    esp,0x10
c000fcfd:	85 c0                	test   eax,eax
c000fcff:	74 16                	je     c000fd17 <CPU::detectFeatures()+0x1fb>
c000fd01:	50                   	push   eax
c000fd02:	50                   	push   eax
c000fd03:	68 78 12 02 c0       	push   0xc0021278
c000fd08:	55                   	push   ebp
c000fd09:	e8 42 0a ff ff       	call   c0000750 <strcmp>
c000fd0e:	83 c4 10             	add    esp,0x10
c000fd11:	85 c0                	test   eax,eax
c000fd13:	74 48                	je     c000fd5d <CPU::detectFeatures()+0x241>
c000fd15:	eb 0f                	jmp    c000fd26 <CPU::detectFeatures()+0x20a>
c000fd17:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000fd21:	e9 c1 01 00 00       	jmp    c000fee7 <CPU::detectFeatures()+0x3cb>
c000fd26:	50                   	push   eax
c000fd27:	50                   	push   eax
c000fd28:	68 85 12 02 c0       	push   0xc0021285
c000fd2d:	55                   	push   ebp
c000fd2e:	e8 1d 0a ff ff       	call   c0000750 <strcmp>
c000fd33:	83 c4 10             	add    esp,0x10
c000fd36:	85 c0                	test   eax,eax
c000fd38:	74 23                	je     c000fd5d <CPU::detectFeatures()+0x241>
c000fd3a:	57                   	push   edi
c000fd3b:	57                   	push   edi
c000fd3c:	68 92 12 02 c0       	push   0xc0021292
c000fd41:	55                   	push   ebp
c000fd42:	e8 09 0a ff ff       	call   c0000750 <strcmp>
c000fd47:	83 c4 10             	add    esp,0x10
c000fd4a:	85 c0                	test   eax,eax
c000fd4c:	75 1e                	jne    c000fd6c <CPU::detectFeatures()+0x250>
c000fd4e:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000fd58:	e9 8a 01 00 00       	jmp    c000fee7 <CPU::detectFeatures()+0x3cb>
c000fd5d:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000fd67:	e9 7b 01 00 00       	jmp    c000fee7 <CPU::detectFeatures()+0x3cb>
c000fd6c:	56                   	push   esi
c000fd6d:	56                   	push   esi
c000fd6e:	68 9f 12 02 c0       	push   0xc002129f
c000fd73:	55                   	push   ebp
c000fd74:	e8 d7 09 ff ff       	call   c0000750 <strcmp>
c000fd79:	83 c4 10             	add    esp,0x10
c000fd7c:	85 c0                	test   eax,eax
c000fd7e:	75 0f                	jne    c000fd8f <CPU::detectFeatures()+0x273>
c000fd80:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000fd8a:	e9 58 01 00 00       	jmp    c000fee7 <CPU::detectFeatures()+0x3cb>
c000fd8f:	51                   	push   ecx
c000fd90:	51                   	push   ecx
c000fd91:	68 5e 12 02 c0       	push   0xc002125e
c000fd96:	55                   	push   ebp
c000fd97:	e8 b4 09 ff ff       	call   c0000750 <strcmp>
c000fd9c:	83 c4 10             	add    esp,0x10
c000fd9f:	85 c0                	test   eax,eax
c000fda1:	75 0f                	jne    c000fdb2 <CPU::detectFeatures()+0x296>
c000fda3:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000fdad:	e9 35 01 00 00       	jmp    c000fee7 <CPU::detectFeatures()+0x3cb>
c000fdb2:	52                   	push   edx
c000fdb3:	52                   	push   edx
c000fdb4:	68 ac 12 02 c0       	push   0xc00212ac
c000fdb9:	55                   	push   ebp
c000fdba:	e8 91 09 ff ff       	call   c0000750 <strcmp>
c000fdbf:	83 c4 10             	add    esp,0x10
c000fdc2:	85 c0                	test   eax,eax
c000fdc4:	75 0f                	jne    c000fdd5 <CPU::detectFeatures()+0x2b9>
c000fdc6:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000fdd0:	e9 12 01 00 00       	jmp    c000fee7 <CPU::detectFeatures()+0x3cb>
c000fdd5:	50                   	push   eax
c000fdd6:	50                   	push   eax
c000fdd7:	68 b9 12 02 c0       	push   0xc00212b9
c000fddc:	55                   	push   ebp
c000fddd:	e8 6e 09 ff ff       	call   c0000750 <strcmp>
c000fde2:	83 c4 10             	add    esp,0x10
c000fde5:	85 c0                	test   eax,eax
c000fde7:	75 0f                	jne    c000fdf8 <CPU::detectFeatures()+0x2dc>
c000fde9:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000fdf3:	e9 ef 00 00 00       	jmp    c000fee7 <CPU::detectFeatures()+0x3cb>
c000fdf8:	50                   	push   eax
c000fdf9:	50                   	push   eax
c000fdfa:	68 c6 12 02 c0       	push   0xc00212c6
c000fdff:	55                   	push   ebp
c000fe00:	e8 4b 09 ff ff       	call   c0000750 <strcmp>
c000fe05:	83 c4 10             	add    esp,0x10
c000fe08:	85 c0                	test   eax,eax
c000fe0a:	75 0f                	jne    c000fe1b <CPU::detectFeatures()+0x2ff>
c000fe0c:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000fe16:	e9 cc 00 00 00       	jmp    c000fee7 <CPU::detectFeatures()+0x3cb>
c000fe1b:	50                   	push   eax
c000fe1c:	50                   	push   eax
c000fe1d:	68 d3 12 02 c0       	push   0xc00212d3
c000fe22:	55                   	push   ebp
c000fe23:	e8 28 09 ff ff       	call   c0000750 <strcmp>
c000fe28:	83 c4 10             	add    esp,0x10
c000fe2b:	85 c0                	test   eax,eax
c000fe2d:	75 0f                	jne    c000fe3e <CPU::detectFeatures()+0x322>
c000fe2f:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000fe39:	e9 a9 00 00 00       	jmp    c000fee7 <CPU::detectFeatures()+0x3cb>
c000fe3e:	50                   	push   eax
c000fe3f:	50                   	push   eax
c000fe40:	68 e0 12 02 c0       	push   0xc00212e0
c000fe45:	55                   	push   ebp
c000fe46:	e8 05 09 ff ff       	call   c0000750 <strcmp>
c000fe4b:	83 c4 10             	add    esp,0x10
c000fe4e:	85 c0                	test   eax,eax
c000fe50:	75 0f                	jne    c000fe61 <CPU::detectFeatures()+0x345>
c000fe52:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000fe5c:	e9 86 00 00 00       	jmp    c000fee7 <CPU::detectFeatures()+0x3cb>
c000fe61:	50                   	push   eax
c000fe62:	50                   	push   eax
c000fe63:	68 ed 12 02 c0       	push   0xc00212ed
c000fe68:	55                   	push   ebp
c000fe69:	e8 e2 08 ff ff       	call   c0000750 <strcmp>
c000fe6e:	83 c4 10             	add    esp,0x10
c000fe71:	85 c0                	test   eax,eax
c000fe73:	75 0c                	jne    c000fe81 <CPU::detectFeatures()+0x365>
c000fe75:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000fe7f:	eb 66                	jmp    c000fee7 <CPU::detectFeatures()+0x3cb>
c000fe81:	50                   	push   eax
c000fe82:	50                   	push   eax
c000fe83:	68 fa 12 02 c0       	push   0xc00212fa
c000fe88:	55                   	push   ebp
c000fe89:	e8 c2 08 ff ff       	call   c0000750 <strcmp>
c000fe8e:	83 c4 10             	add    esp,0x10
c000fe91:	85 c0                	test   eax,eax
c000fe93:	75 0c                	jne    c000fea1 <CPU::detectFeatures()+0x385>
c000fe95:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000fe9f:	eb 46                	jmp    c000fee7 <CPU::detectFeatures()+0x3cb>
c000fea1:	57                   	push   edi
c000fea2:	57                   	push   edi
c000fea3:	68 07 13 02 c0       	push   0xc0021307
c000fea8:	55                   	push   ebp
c000fea9:	e8 a2 08 ff ff       	call   c0000750 <strcmp>
c000feae:	83 c4 10             	add    esp,0x10
c000feb1:	85 c0                	test   eax,eax
c000feb3:	74 e0                	je     c000fe95 <CPU::detectFeatures()+0x379>
c000feb5:	56                   	push   esi
c000feb6:	56                   	push   esi
c000feb7:	68 14 13 02 c0       	push   0xc0021314
c000febc:	55                   	push   ebp
c000febd:	e8 8e 08 ff ff       	call   c0000750 <strcmp>
c000fec2:	83 c4 10             	add    esp,0x10
c000fec5:	85 c0                	test   eax,eax
c000fec7:	74 cc                	je     c000fe95 <CPU::detectFeatures()+0x379>
c000fec9:	51                   	push   ecx
c000feca:	51                   	push   ecx
c000fecb:	68 21 13 02 c0       	push   0xc0021321
c000fed0:	55                   	push   ebp
c000fed1:	e8 7a 08 ff ff       	call   c0000750 <strcmp>
c000fed6:	83 c4 10             	add    esp,0x10
c000fed9:	85 c0                	test   eax,eax
c000fedb:	74 b8                	je     c000fe95 <CPU::detectFeatures()+0x379>
c000fedd:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000fee7:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000feec:	0f 86 be 00 00 00    	jbe    c000ffb0 <CPU::detectFeatures()+0x494>
c000fef2:	83 ec 0c             	sub    esp,0xc
c000fef5:	68 80 00 00 00       	push   0x80
c000fefa:	e8 31 fb ff ff       	call   c000fa30 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000feff:	83 e0 01             	and    eax,0x1
c000ff02:	c1 e0 06             	shl    eax,0x6
c000ff05:	89 c2                	mov    edx,eax
c000ff07:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000ff0d:	83 e0 bf             	and    eax,0xffffffbf
c000ff10:	09 d0                	or     eax,edx
c000ff12:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000ff18:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000ff1f:	e8 0c fb ff ff       	call   c000fa30 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000ff24:	83 e0 01             	and    eax,0x1
c000ff27:	c1 e0 04             	shl    eax,0x4
c000ff2a:	89 c2                	mov    edx,eax
c000ff2c:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000ff32:	83 e0 ef             	and    eax,0xffffffef
c000ff35:	09 d0                	or     eax,edx
c000ff37:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000ff3d:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000ff44:	e8 e7 fa ff ff       	call   c000fa30 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000ff49:	89 c2                	mov    edx,eax
c000ff4b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000ff51:	c1 e2 07             	shl    edx,0x7
c000ff54:	83 e0 7f             	and    eax,0x7f
c000ff57:	09 d0                	or     eax,edx
c000ff59:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000ff5f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000ff66:	e8 f3 fa ff ff       	call   c000fa5e <CPU::cpuidCheckExtendedECX(unsigned int)>
c000ff6b:	83 e0 01             	and    eax,0x1
c000ff6e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000ff75:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000ff7b:	83 e0 f7             	and    eax,0xfffffff7
c000ff7e:	09 d0                	or     eax,edx
c000ff80:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000ff86:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000ff8d:	e8 cc fa ff ff       	call   c000fa5e <CPU::cpuidCheckExtendedECX(unsigned int)>
c000ff92:	83 c4 10             	add    esp,0x10
c000ff95:	83 e0 01             	and    eax,0x1
c000ff98:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000ff9f:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000ffa5:	83 e0 fb             	and    eax,0xfffffffb
c000ffa8:	09 d0                	or     eax,edx
c000ffaa:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000ffb0:	83 ec 0c             	sub    esp,0xc
c000ffb3:	8d 44 24 28          	lea    eax,[esp+0x28]
c000ffb7:	50                   	push   eax
c000ffb8:	8d 44 24 28          	lea    eax,[esp+0x28]
c000ffbc:	50                   	push   eax
c000ffbd:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000ffc1:	57                   	push   edi
c000ffc2:	8d 74 24 28          	lea    esi,[esp+0x28]
c000ffc6:	56                   	push   esi
c000ffc7:	6a 01                	push   0x1
c000ffc9:	e8 82 f9 ff ff       	call   c000f950 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ffce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ffd2:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c000ffd8:	89 c1                	mov    ecx,eax
c000ffda:	83 e2 f0             	and    edx,0xfffffff0
c000ffdd:	83 e1 0f             	and    ecx,0xf
c000ffe0:	09 ca                	or     edx,ecx
c000ffe2:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000ffe8:	89 c2                	mov    edx,eax
c000ffea:	c1 ea 04             	shr    edx,0x4
c000ffed:	83 e2 0f             	and    edx,0xf
c000fff0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000fff4:	89 d1                	mov    ecx,edx
c000fff6:	83 c4 20             	add    esp,0x20
c000fff9:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c000ffff:	c1 e1 06             	shl    ecx,0x6
c0010002:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c0010008:	09 ca                	or     edx,ecx
c001000a:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0010011:	89 c2                	mov    edx,eax
c0010013:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c0010019:	c1 ea 08             	shr    edx,0x8
c001001c:	83 e1 3f             	and    ecx,0x3f
c001001f:	83 e2 0f             	and    edx,0xf
c0010022:	89 d5                	mov    ebp,edx
c0010024:	83 e5 03             	and    ebp,0x3
c0010027:	c1 e5 06             	shl    ebp,0x6
c001002a:	09 e9                	or     ecx,ebp
c001002c:	89 d5                	mov    ebp,edx
c001002e:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c0010034:	c1 ed 02             	shr    ebp,0x2
c0010037:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c001003d:	83 e1 c0             	and    ecx,0xffffffc0
c0010040:	09 e9                	or     ecx,ebp
c0010042:	89 c5                	mov    ebp,eax
c0010044:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001004a:	c1 ed 08             	shr    ebp,0x8
c001004d:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c0010053:	83 e5 30             	and    ebp,0x30
c0010056:	83 e1 cf             	and    ecx,0xffffffcf
c0010059:	09 e9                	or     ecx,ebp
c001005b:	83 fa 06             	cmp    edx,0x6
c001005e:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c0010064:	74 05                	je     c001006b <CPU::detectFeatures()+0x54f>
c0010066:	83 fa 0f             	cmp    edx,0xf
c0010069:	75 64                	jne    c00100cf <CPU::detectFeatures()+0x5b3>
c001006b:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0010071:	89 c1                	mov    ecx,eax
c0010073:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c0010079:	c1 e9 10             	shr    ecx,0x10
c001007c:	c1 e1 04             	shl    ecx,0x4
c001007f:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0010083:	0f b6 c9             	movzx  ecx,cl
c0010086:	c1 e1 06             	shl    ecx,0x6
c0010089:	09 e9                	or     ecx,ebp
c001008b:	83 fa 0f             	cmp    edx,0xf
c001008e:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c0010095:	75 38                	jne    c00100cf <CPU::detectFeatures()+0x5b3>
c0010097:	c1 e8 14             	shr    eax,0x14
c001009a:	83 c0 0f             	add    eax,0xf
c001009d:	0f b6 c0             	movzx  eax,al
c00100a0:	89 c2                	mov    edx,eax
c00100a2:	c1 e8 02             	shr    eax,0x2
c00100a5:	83 e2 03             	and    edx,0x3
c00100a8:	89 d1                	mov    ecx,edx
c00100aa:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c00100b0:	c1 e1 06             	shl    ecx,0x6
c00100b3:	83 e2 3f             	and    edx,0x3f
c00100b6:	09 ca                	or     edx,ecx
c00100b8:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00100be:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c00100c4:	83 e2 c0             	and    edx,0xffffffc0
c00100c7:	09 d0                	or     eax,edx
c00100c9:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c00100cf:	83 ec 0c             	sub    esp,0xc
c00100d2:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00100d8:	83 c8 07             	or     eax,0x7
c00100db:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00100e1:	8d 44 24 28          	lea    eax,[esp+0x28]
c00100e5:	50                   	push   eax
c00100e6:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00100ea:	55                   	push   ebp
c00100eb:	57                   	push   edi
c00100ec:	56                   	push   esi
c00100ed:	68 00 00 00 80       	push   0x80000000
c00100f2:	e8 59 f8 ff ff       	call   c000f950 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00100f7:	83 c4 20             	add    esp,0x20
c00100fa:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0010102:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0010106:	76 1e                	jbe    c0010126 <CPU::detectFeatures()+0x60a>
c0010108:	83 ec 0c             	sub    esp,0xc
c001010b:	50                   	push   eax
c001010c:	55                   	push   ebp
c001010d:	57                   	push   edi
c001010e:	56                   	push   esi
c001010f:	68 01 00 00 80       	push   0x80000001
c0010114:	e8 37 f8 ff ff       	call   c000f950 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010119:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c0010123:	83 c4 20             	add    esp,0x20
c0010126:	52                   	push   edx
c0010127:	52                   	push   edx
c0010128:	68 2d 13 02 c0       	push   0xc002132d
c001012d:	53                   	push   ebx
c001012e:	e8 99 c0 ff ff       	call   c000c1cc <Device::setName(char const*)>
c0010133:	83 c4 10             	add    esp,0x10
c0010136:	eb 69                	jmp    c00101a1 <CPU::detectFeatures()+0x685>
c0010138:	50                   	push   eax
c0010139:	50                   	push   eax
c001013a:	68 92 12 02 c0       	push   0xc0021292
c001013f:	55                   	push   ebp
c0010140:	e8 fb 04 ff ff       	call   c0000640 <strcpy>
c0010145:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001014f:	e8 6f 00 ff ff       	call   c00001c3 <is486>
c0010154:	83 c4 10             	add    esp,0x10
c0010157:	85 c0                	test   eax,eax
c0010159:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001015f:	74 1f                	je     c0010180 <CPU::detectFeatures()+0x664>
c0010161:	83 c8 07             	or     eax,0x7
c0010164:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001016a:	0f 20 c0             	mov    eax,cr0
c001016d:	83 e0 14             	and    eax,0x14
c0010170:	83 f8 04             	cmp    eax,0x4
c0010173:	75 10                	jne    c0010185 <CPU::detectFeatures()+0x669>
c0010175:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001017b:	83 e0 fd             	and    eax,0xfffffffd
c001017e:	eb 1b                	jmp    c001019b <CPU::detectFeatures()+0x67f>
c0010180:	83 e0 f8             	and    eax,0xfffffff8
c0010183:	eb df                	jmp    c0010164 <CPU::detectFeatures()+0x648>
c0010185:	e8 14 00 ff ff       	call   c000019e <hasLegacyFPU>
c001018a:	83 e0 01             	and    eax,0x1
c001018d:	8d 14 00             	lea    edx,[eax+eax*1]
c0010190:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010196:	83 e0 fd             	and    eax,0xfffffffd
c0010199:	09 d0                	or     eax,edx
c001019b:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00101a1:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c00101a8:	74 17                	je     c00101c1 <CPU::detectFeatures()+0x6a5>
c00101aa:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c00101b0:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c00101b6:	83 c8 10             	or     eax,0x10
c00101b9:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c00101bf:	eb 20                	jmp    c00101e1 <CPU::detectFeatures()+0x6c5>
c00101c1:	e8 d8 ff fe ff       	call   c000019e <hasLegacyFPU>
c00101c6:	83 e0 01             	and    eax,0x1
c00101c9:	8d 14 00             	lea    edx,[eax+eax*1]
c00101cc:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00101d2:	83 e0 fd             	and    eax,0xfffffffd
c00101d5:	09 d0                	or     eax,edx
c00101d7:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00101dd:	a8 02                	test   al,0x2
c00101df:	75 c9                	jne    c00101aa <CPU::detectFeatures()+0x68e>
c00101e1:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c00101e8:	83 c4 2c             	add    esp,0x2c
c00101eb:	5b                   	pop    ebx
c00101ec:	5e                   	pop    esi
c00101ed:	5f                   	pop    edi
c00101ee:	5d                   	pop    ebp
c00101ef:	c3                   	ret    

c00101f0 <CPU::setupSMEP()>:
c00101f0:	0f 20 e0             	mov    eax,cr4
c00101f3:	0d 00 00 10 00       	or     eax,0x100000
c00101f8:	0f 22 e0             	mov    cr4,eax
c00101fb:	c3                   	ret    

c00101fc <CPU::setupUMIP()>:
c00101fc:	0f 20 e0             	mov    eax,cr4
c00101ff:	80 cc 08             	or     ah,0x8
c0010202:	0f 22 e0             	mov    cr4,eax
c0010205:	c3                   	ret    

c0010206 <CPU::setupTSC()>:
c0010206:	0f 20 e0             	mov    eax,cr4
c0010209:	83 c8 04             	or     eax,0x4
c001020c:	0f 22 e0             	mov    cr4,eax
c001020f:	c3                   	ret    

c0010210 <CPU::setupLargePages()>:
c0010210:	0f 20 e0             	mov    eax,cr4
c0010213:	83 c8 10             	or     eax,0x10
c0010216:	0f 22 e0             	mov    cr4,eax
c0010219:	c3                   	ret    

c001021a <CPU::setupPAT()>:
c001021a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001021f:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0010226:	74 2c                	je     c0010254 <CPU::setupPAT()+0x3a>
c0010228:	53                   	push   ebx
c0010229:	83 ec 10             	sub    esp,0x10
c001022c:	68 77 02 00 00       	push   0x277
c0010231:	50                   	push   eax
c0010232:	e8 81 6e ff ff       	call   c00070b8 <Computer::rdmsr(unsigned int)>
c0010237:	83 e2 f8             	and    edx,0xfffffff8
c001023a:	83 ca 01             	or     edx,0x1
c001023d:	52                   	push   edx
c001023e:	50                   	push   eax
c001023f:	68 77 02 00 00       	push   0x277
c0010244:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001024a:	e8 95 6e ff ff       	call   c00070e4 <Computer::wrmsr(unsigned int, unsigned long long)>
c001024f:	83 c4 28             	add    esp,0x28
c0010252:	5b                   	pop    ebx
c0010253:	c3                   	ret    
c0010254:	c3                   	ret    
c0010255:	90                   	nop

c0010256 <CPU::setupMTRR()>:
c0010256:	c3                   	ret    
c0010257:	90                   	nop

c0010258 <CPU::setupGlobalPages()>:
c0010258:	0f 20 e0             	mov    eax,cr4
c001025b:	0c 80                	or     al,0x80
c001025d:	0f 22 e0             	mov    cr4,eax
c0010260:	c3                   	ret    
c0010261:	90                   	nop

c0010262 <CPU::allowUsermodeDataAccess()>:
c0010262:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010266:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c001026d:	74 03                	je     c0010272 <CPU::allowUsermodeDataAccess()+0x10>
c001026f:	0f 01 cb             	stac   
c0010272:	c3                   	ret    
c0010273:	90                   	nop

c0010274 <CPU::prohibitUsermodeDataAccess()>:
c0010274:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010278:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c001027f:	74 03                	je     c0010284 <CPU::prohibitUsermodeDataAccess()+0x10>
c0010281:	0f 01 ca             	clac   
c0010284:	c3                   	ret    
c0010285:	90                   	nop

c0010286 <CPU::setupSMAP()>:
c0010286:	0f 20 e0             	mov    eax,cr4
c0010289:	0d 00 00 20 00       	or     eax,0x200000
c001028e:	0f 22 e0             	mov    cr4,eax
c0010291:	eb e1                	jmp    c0010274 <CPU::prohibitUsermodeDataAccess()>
c0010293:	90                   	nop

c0010294 <CPU::setupFeatures()>:
c0010294:	53                   	push   ebx
c0010295:	83 ec 08             	sub    esp,0x8
c0010298:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001029c:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c00102a3:	74 18                	je     c00102bd <CPU::setupFeatures()+0x29>
c00102a5:	83 ec 0c             	sub    esp,0xc
c00102a8:	68 39 13 02 c0       	push   0xc0021339
c00102ad:	e8 87 a6 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c00102b2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00102b5:	e8 42 ff ff ff       	call   c00101fc <CPU::setupUMIP()>
c00102ba:	83 c4 10             	add    esp,0x10
c00102bd:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c00102c4:	74 18                	je     c00102de <CPU::setupFeatures()+0x4a>
c00102c6:	83 ec 0c             	sub    esp,0xc
c00102c9:	68 43 13 02 c0       	push   0xc0021343
c00102ce:	e8 66 a6 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c00102d3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00102d6:	e8 2b ff ff ff       	call   c0010206 <CPU::setupTSC()>
c00102db:	83 c4 10             	add    esp,0x10
c00102de:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c00102e5:	74 18                	je     c00102ff <CPU::setupFeatures()+0x6b>
c00102e7:	83 ec 0c             	sub    esp,0xc
c00102ea:	68 4c 13 02 c0       	push   0xc002134c
c00102ef:	e8 45 a6 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c00102f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00102f7:	e8 14 ff ff ff       	call   c0010210 <CPU::setupLargePages()>
c00102fc:	83 c4 10             	add    esp,0x10
c00102ff:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c0010306:	74 18                	je     c0010320 <CPU::setupFeatures()+0x8c>
c0010308:	83 ec 0c             	sub    esp,0xc
c001030b:	68 55 13 02 c0       	push   0xc0021355
c0010310:	e8 24 a6 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0010315:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010318:	e8 3b ff ff ff       	call   c0010258 <CPU::setupGlobalPages()>
c001031d:	83 c4 10             	add    esp,0x10
c0010320:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0010327:	74 18                	je     c0010341 <CPU::setupFeatures()+0xad>
c0010329:	83 ec 0c             	sub    esp,0xc
c001032c:	68 67 13 02 c0       	push   0xc0021367
c0010331:	e8 03 a6 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0010336:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010339:	e8 dc fe ff ff       	call   c001021a <CPU::setupPAT()>
c001033e:	83 c4 10             	add    esp,0x10
c0010341:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c0010348:	74 11                	je     c001035b <CPU::setupFeatures()+0xc7>
c001034a:	c7 44 24 10 70 13 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021370
c0010352:	83 c4 08             	add    esp,0x8
c0010355:	5b                   	pop    ebx
c0010356:	e9 de a5 ff ff       	jmp    c000a939 <Dbg::kprintf(char const*, ...)>
c001035b:	83 c4 08             	add    esp,0x8
c001035e:	5b                   	pop    ebx
c001035f:	c3                   	ret    

c0010360 <CPU::open(int, int, void*)>:
c0010360:	55                   	push   ebp
c0010361:	57                   	push   edi
c0010362:	56                   	push   esi
c0010363:	53                   	push   ebx
c0010364:	83 ec 18             	sub    esp,0x18
c0010367:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001036b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001036f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010373:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0010379:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c001037f:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c0010385:	50                   	push   eax
c0010386:	e8 2b 70 ff ff       	call   c00073b6 <GDT::setup()>
c001038b:	83 c4 0c             	add    esp,0xc
c001038e:	6a 00                	push   0x0
c0010390:	68 ef be ad de       	push   0xdeadbeef
c0010395:	55                   	push   ebp
c0010396:	e8 e1 8b ff ff       	call   c0008f7c <TSS::setup(unsigned long, unsigned long)>
c001039b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001039e:	e8 b9 8b ff ff       	call   c0008f5c <TSS::flush()>
c00103a3:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00103a9:	89 04 24             	mov    DWORD PTR [esp],eax
c00103ac:	e8 69 72 ff ff       	call   c000761a <IDT::setup()>
c00103b1:	b8 00 04 00 00       	mov    eax,0x400
c00103b6:	0f 23 f8             	mov    db7,eax
c00103b9:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00103c3:	e8 ea 79 ff ff       	call   c0007db2 <Phys::allocatePage()>
c00103c8:	83 c4 10             	add    esp,0x10
c00103cb:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00103d1:	85 f6                	test   esi,esi
c00103d3:	89 38                	mov    DWORD PTR [eax],edi
c00103d5:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00103db:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00103de:	74 10                	je     c00103f0 <CPU::open(int, int, void*)+0x90>
c00103e0:	50                   	push   eax
c00103e1:	50                   	push   eax
c00103e2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00103e8:	56                   	push   esi
c00103e9:	e8 b4 94 ff ff       	call   c00098a2 <VAS::setCPUSpecific(unsigned long)>
c00103ee:	eb 0d                	jmp    c00103fd <CPU::open(int, int, void*)+0x9d>
c00103f0:	83 ec 0c             	sub    esp,0xc
c00103f3:	68 7a 13 02 c0       	push   0xc002137a
c00103f8:	e8 9e 07 00 00       	call   c0010b9b <KePanic(char const*)>
c00103fd:	83 c4 10             	add    esp,0x10
c0010400:	83 ec 0c             	sub    esp,0xc
c0010403:	68 88 13 02 c0       	push   0xc0021388
c0010408:	e8 d8 00 00 00       	call   c00104e5 <KeSetBootMessage(char const*)>
c001040d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010410:	e8 07 f7 ff ff       	call   c000fb1c <CPU::detectFeatures()>
c0010415:	c7 04 24 ab 13 02 c0 	mov    DWORD PTR [esp],0xc00213ab
c001041c:	e8 c4 00 00 00       	call   c00104e5 <KeSetBootMessage(char const*)>
c0010421:	e8 bb 70 00 00       	call   c00174e1 <HalInitialise()>
c0010426:	a1 d0 5e 02 c0       	mov    eax,ds:0xc0025ed0
c001042b:	83 e0 10             	and    eax,0x10
c001042e:	83 f8 01             	cmp    eax,0x1
c0010431:	19 c0                	sbb    eax,eax
c0010433:	83 e0 46             	and    eax,0x46
c0010436:	83 c0 1e             	add    eax,0x1e
c0010439:	89 04 24             	mov    DWORD PTR [esp],eax
c001043c:	e8 28 d6 ff ff       	call   c000da69 <setupTimer(int)>
c0010441:	83 c4 10             	add    esp,0x10
c0010444:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c001044a:	f6 05 d0 5e 02 c0 20 	test   BYTE PTR ds:0xc0025ed0,0x20
c0010451:	74 0c                	je     c001045f <CPU::open(int, int, void*)+0xff>
c0010453:	83 ec 0c             	sub    esp,0xc
c0010456:	53                   	push   ebx
c0010457:	e8 38 fe ff ff       	call   c0010294 <CPU::setupFeatures()>
c001045c:	83 c4 10             	add    esp,0x10
c001045f:	83 c4 0c             	add    esp,0xc
c0010462:	31 c0                	xor    eax,eax
c0010464:	5b                   	pop    ebx
c0010465:	5e                   	pop    esi
c0010466:	5f                   	pop    edi
c0010467:	5d                   	pop    ebp
c0010468:	c3                   	ret    

c0010469 <KeDisplaySplashScreen()>:
c0010469:	55                   	push   ebp
c001046a:	bd 05 00 00 00       	mov    ebp,0x5
c001046f:	57                   	push   edi
c0010470:	bf 0a 00 00 00       	mov    edi,0xa
c0010475:	56                   	push   esi
c0010476:	31 f6                	xor    esi,esi
c0010478:	53                   	push   ebx
c0010479:	31 db                	xor    ebx,ebx
c001047b:	83 ec 0c             	sub    esp,0xc
c001047e:	0f b6 96 c0 28 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffdd740]
c0010485:	89 d0                	mov    eax,edx
c0010487:	85 d2                	test   edx,edx
c0010489:	74 52                	je     c00104dd <KeDisplaySplashScreen()+0x74>
c001048b:	80 bb f6 28 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdd70a],0xdb
c0010492:	75 13                	jne    c00104a7 <KeDisplaySplashScreen()+0x3e>
c0010494:	0f b6 8b f5 28 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffdd70b]
c001049b:	83 e1 fe             	and    ecx,0xfffffffe
c001049e:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c00104a4:	75 01                	jne    c00104a7 <KeDisplaySplashScreen()+0x3e>
c00104a6:	47                   	inc    edi
c00104a7:	83 fa 0d             	cmp    edx,0xd
c00104aa:	74 28                	je     c00104d4 <KeDisplaySplashScreen()+0x6b>
c00104ac:	83 fa 0a             	cmp    edx,0xa
c00104af:	75 0a                	jne    c00104bb <KeDisplaySplashScreen()+0x52>
c00104b1:	45                   	inc    ebp
c00104b2:	bf 0a 00 00 00       	mov    edi,0xa
c00104b7:	31 db                	xor    ebx,ebx
c00104b9:	eb 19                	jmp    c00104d4 <KeDisplaySplashScreen()+0x6b>
c00104bb:	83 ec 0c             	sub    esp,0xc
c00104be:	8d 14 1f             	lea    edx,[edi+ebx*1]
c00104c1:	55                   	push   ebp
c00104c2:	0f be c0             	movsx  eax,al
c00104c5:	52                   	push   edx
c00104c6:	43                   	inc    ebx
c00104c7:	6a 00                	push   0x0
c00104c9:	6a 0e                	push   0xe
c00104cb:	50                   	push   eax
c00104cc:	e8 8f 7c 00 00       	call   c0018160 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00104d1:	83 c4 20             	add    esp,0x20
c00104d4:	46                   	inc    esi
c00104d5:	81 fe 42 01 00 00    	cmp    esi,0x142
c00104db:	75 a1                	jne    c001047e <KeDisplaySplashScreen()+0x15>
c00104dd:	83 c4 0c             	add    esp,0xc
c00104e0:	5b                   	pop    ebx
c00104e1:	5e                   	pop    esi
c00104e2:	5f                   	pop    edi
c00104e3:	5d                   	pop    ebp
c00104e4:	c3                   	ret    

c00104e5 <KeSetBootMessage(char const*)>:
c00104e5:	57                   	push   edi
c00104e6:	56                   	push   esi
c00104e7:	53                   	push   ebx
c00104e8:	81 ec a4 00 00 00    	sub    esp,0xa4
c00104ee:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c00104f5:	68 9e 00 00 00       	push   0x9e
c00104fa:	6a 00                	push   0x0
c00104fc:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0010500:	56                   	push   esi
c0010501:	e8 ea ff fe ff       	call   c00004f0 <memset>
c0010506:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010509:	e8 62 00 ff ff       	call   c0000570 <strlen>
c001050e:	ba 50 00 00 00       	mov    edx,0x50
c0010513:	83 c4 10             	add    esp,0x10
c0010516:	29 c2                	sub    edx,eax
c0010518:	31 c9                	xor    ecx,ecx
c001051a:	83 e2 fe             	and    edx,0xfffffffe
c001051d:	01 f2                	add    edx,esi
c001051f:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0010524:	84 c0                	test   al,al
c0010526:	74 0a                	je     c0010532 <KeSetBootMessage(char const*)+0x4d>
c0010528:	80 cc 0f             	or     ah,0xf
c001052b:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c001052f:	41                   	inc    ecx
c0010530:	eb ed                	jmp    c001051f <KeSetBootMessage(char const*)+0x3a>
c0010532:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0010537:	b9 9e 00 00 00       	mov    ecx,0x9e
c001053c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001053e:	81 c4 a0 00 00 00    	add    esp,0xa0
c0010544:	5b                   	pop    ebx
c0010545:	5e                   	pop    esi
c0010546:	5f                   	pop    edi
c0010547:	c3                   	ret    

c0010548 <EnvVarContainer::getEnv(char const*)>:
c0010548:	57                   	push   edi
c0010549:	56                   	push   esi
c001054a:	53                   	push   ebx
c001054b:	31 db                	xor    ebx,ebx
c001054d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010551:	39 1e                	cmp    DWORD PTR [esi],ebx
c0010553:	7e 2b                	jle    c0010580 <EnvVarContainer::getEnv(char const*)+0x38>
c0010555:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001055c:	50                   	push   eax
c001055d:	50                   	push   eax
c001055e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010561:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0010564:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010568:	e8 e3 01 ff ff       	call   c0000750 <strcmp>
c001056d:	83 c4 10             	add    esp,0x10
c0010570:	85 c0                	test   eax,eax
c0010572:	75 09                	jne    c001057d <EnvVarContainer::getEnv(char const*)+0x35>
c0010574:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010577:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001057b:	eb 05                	jmp    c0010582 <EnvVarContainer::getEnv(char const*)+0x3a>
c001057d:	43                   	inc    ebx
c001057e:	eb d1                	jmp    c0010551 <EnvVarContainer::getEnv(char const*)+0x9>
c0010580:	31 c0                	xor    eax,eax
c0010582:	5b                   	pop    ebx
c0010583:	5e                   	pop    esi
c0010584:	5f                   	pop    edi
c0010585:	c3                   	ret    

c0010586 <EnvVarContainer::setEnv(char const*, char const*)>:
c0010586:	55                   	push   ebp
c0010587:	57                   	push   edi
c0010588:	56                   	push   esi
c0010589:	53                   	push   ebx
c001058a:	83 ec 28             	sub    esp,0x28
c001058d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0010591:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010595:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0010599:	56                   	push   esi
c001059a:	e8 d1 ff fe ff       	call   c0000570 <strlen>
c001059f:	40                   	inc    eax
c00105a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00105a3:	e8 06 75 ff ff       	call   c0007aae <malloc>
c00105a8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00105ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00105af:	e8 bc ff fe ff       	call   c0000570 <strlen>
c00105b4:	40                   	inc    eax
c00105b5:	89 04 24             	mov    DWORD PTR [esp],eax
c00105b8:	e8 f1 74 ff ff       	call   c0007aae <malloc>
c00105bd:	89 34 24             	mov    DWORD PTR [esp],esi
c00105c0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00105c4:	e8 a7 ff fe ff       	call   c0000570 <strlen>
c00105c9:	83 c4 0c             	add    esp,0xc
c00105cc:	40                   	inc    eax
c00105cd:	50                   	push   eax
c00105ce:	6a 00                	push   0x0
c00105d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00105d4:	e8 17 ff fe ff       	call   c00004f0 <memset>
c00105d9:	89 34 24             	mov    DWORD PTR [esp],esi
c00105dc:	e8 8f ff fe ff       	call   c0000570 <strlen>
c00105e1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00105e5:	8d 48 01             	lea    ecx,[eax+0x1]
c00105e8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00105ea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00105ed:	89 de                	mov    esi,ebx
c00105ef:	e8 7c ff fe ff       	call   c0000570 <strlen>
c00105f4:	83 c4 0c             	add    esp,0xc
c00105f7:	40                   	inc    eax
c00105f8:	50                   	push   eax
c00105f9:	6a 00                	push   0x0
c00105fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105ff:	e8 ec fe fe ff       	call   c00004f0 <memset>
c0010604:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010607:	e8 64 ff fe ff       	call   c0000570 <strlen>
c001060c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010610:	8d 48 01             	lea    ecx,[eax+0x1]
c0010613:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010615:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010618:	40                   	inc    eax
c0010619:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001061c:	c1 e0 03             	shl    eax,0x3
c001061f:	5a                   	pop    edx
c0010620:	59                   	pop    ecx
c0010621:	50                   	push   eax
c0010622:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0010625:	e8 70 74 ff ff       	call   c0007a9a <realloc>
c001062a:	8d 74 24 18          	lea    esi,[esp+0x18]
c001062e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010631:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010634:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010638:	b9 08 00 00 00       	mov    ecx,0x8
c001063d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001063f:	83 c4 2c             	add    esp,0x2c
c0010642:	5b                   	pop    ebx
c0010643:	5e                   	pop    esi
c0010644:	5f                   	pop    edi
c0010645:	5d                   	pop    ebp
c0010646:	c3                   	ret    
c0010647:	90                   	nop

c0010648 <EnvVarContainer::deleteEnv(char const*)>:
c0010648:	c3                   	ret    
c0010649:	90                   	nop

c001064a <EnvVarContainer::loadFrom(char const*, char const*)>:
c001064a:	55                   	push   ebp
c001064b:	57                   	push   edi
c001064c:	56                   	push   esi
c001064d:	53                   	push   ebx
c001064e:	81 ec 38 01 00 00    	sub    esp,0x138
c0010654:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001065b:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0010662:	68 14 01 00 00       	push   0x114
c0010667:	e8 42 74 ff ff       	call   c0007aae <malloc>
c001066c:	83 c4 0c             	add    esp,0xc
c001066f:	89 c3                	mov    ebx,eax
c0010671:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0010674:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001067b:	50                   	push   eax
c001067c:	e8 0f ab ff ff       	call   c000b190 <File::File(char const*, Process*)>
c0010681:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010684:	e8 31 ae ff ff       	call   c000b4ba <File::exists()>
c0010689:	83 c4 10             	add    esp,0x10
c001068c:	84 c0                	test   al,al
c001068e:	75 31                	jne    c00106c1 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0010690:	50                   	push   eax
c0010691:	50                   	push   eax
c0010692:	6a 12                	push   0x12
c0010694:	53                   	push   ebx
c0010695:	e8 b2 ab ff ff       	call   c000b24c <File::open(FileOpenMode)>
c001069a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001069c:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001069f:	89 34 24             	mov    DWORD PTR [esp],esi
c00106a2:	e8 c9 fe fe ff       	call   c0000570 <strlen>
c00106a7:	5a                   	pop    edx
c00106a8:	31 d2                	xor    edx,edx
c00106aa:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00106ae:	51                   	push   ecx
c00106af:	56                   	push   esi
c00106b0:	52                   	push   edx
c00106b1:	50                   	push   eax
c00106b2:	53                   	push   ebx
c00106b3:	ff d7                	call   edi
c00106b5:	83 c4 14             	add    esp,0x14
c00106b8:	53                   	push   ebx
c00106b9:	e8 ec ab ff ff       	call   c000b2aa <File::close()>
c00106be:	83 c4 10             	add    esp,0x10
c00106c1:	56                   	push   esi
c00106c2:	31 f6                	xor    esi,esi
c00106c4:	68 00 01 00 00       	push   0x100
c00106c9:	6a 00                	push   0x0
c00106cb:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00106cf:	50                   	push   eax
c00106d0:	e8 1b fe fe ff       	call   c00004f0 <memset>
c00106d5:	5f                   	pop    edi
c00106d6:	58                   	pop    eax
c00106d7:	6a 01                	push   0x1
c00106d9:	53                   	push   ebx
c00106da:	e8 6d ab ff ff       	call   c000b24c <File::open(FileOpenMode)>
c00106df:	83 c4 10             	add    esp,0x10
c00106e2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00106ea:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00106f2:	83 ec 0c             	sub    esp,0xc
c00106f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00106f7:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00106fb:	51                   	push   ecx
c00106fc:	8d 54 24 23          	lea    edx,[esp+0x23]
c0010700:	52                   	push   edx
c0010701:	6a 00                	push   0x0
c0010703:	6a 01                	push   0x1
c0010705:	53                   	push   ebx
c0010706:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010709:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c001070e:	83 c4 20             	add    esp,0x20
c0010711:	89 c2                	mov    edx,eax
c0010713:	85 c0                	test   eax,eax
c0010715:	0f 84 36 01 00 00    	je     c0010851 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c001071b:	83 f8 0d             	cmp    eax,0xd
c001071e:	0f 84 22 01 00 00    	je     c0010846 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010724:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010729:	0f 84 f0 00 00 00    	je     c001081f <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c001072f:	83 f8 0a             	cmp    eax,0xa
c0010732:	74 13                	je     c0010747 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0010734:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010739:	74 0c                	je     c0010747 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c001073b:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0010741:	0f 8e f6 00 00 00    	jle    c001083d <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c0010747:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001074b:	83 ec 0c             	sub    esp,0xc
c001074e:	8d 78 01             	lea    edi,[eax+0x1]
c0010751:	57                   	push   edi
c0010752:	e8 57 73 ff ff       	call   c0007aae <malloc>
c0010757:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c001075b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001075f:	8d 56 04             	lea    edx,[esi+0x4]
c0010762:	89 14 24             	mov    DWORD PTR [esp],edx
c0010765:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010769:	e8 40 73 ff ff       	call   c0007aae <malloc>
c001076e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0010772:	83 c4 0c             	add    esp,0xc
c0010775:	57                   	push   edi
c0010776:	6a 00                	push   0x0
c0010778:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001077c:	e8 6f fd fe ff       	call   c00004f0 <memset>
c0010781:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010785:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010789:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001078d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001078f:	83 c4 0c             	add    esp,0xc
c0010792:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010796:	52                   	push   edx
c0010797:	6a 00                	push   0x0
c0010799:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001079d:	e8 4e fd fe ff       	call   c00004f0 <memset>
c00107a2:	8d 74 24 30          	lea    esi,[esp+0x30]
c00107a6:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00107aa:	89 34 24             	mov    DWORD PTR [esp],esi
c00107ad:	e8 be fd fe ff       	call   c0000570 <strlen>
c00107b2:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c00107b6:	89 c1                	mov    ecx,eax
c00107b8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00107ba:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00107bd:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00107c0:	40                   	inc    eax
c00107c1:	83 c4 10             	add    esp,0x10
c00107c4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00107c7:	85 d2                	test   edx,edx
c00107c9:	75 0c                	jne    c00107d7 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c00107cb:	83 ec 0c             	sub    esp,0xc
c00107ce:	6a 08                	push   0x8
c00107d0:	e8 d9 72 ff ff       	call   c0007aae <malloc>
c00107d5:	eb 0c                	jmp    c00107e3 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c00107d7:	c1 e0 03             	shl    eax,0x3
c00107da:	51                   	push   ecx
c00107db:	51                   	push   ecx
c00107dc:	50                   	push   eax
c00107dd:	52                   	push   edx
c00107de:	e8 b7 72 ff ff       	call   c0007a9a <realloc>
c00107e3:	83 c4 10             	add    esp,0x10
c00107e6:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00107e9:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00107ec:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c00107ef:	8d 74 24 18          	lea    esi,[esp+0x18]
c00107f3:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00107f7:	b9 08 00 00 00       	mov    ecx,0x8
c00107fc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00107fe:	31 f6                	xor    esi,esi
c0010800:	50                   	push   eax
c0010801:	68 00 01 00 00       	push   0x100
c0010806:	6a 00                	push   0x0
c0010808:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001080c:	50                   	push   eax
c001080d:	e8 de fc fe ff       	call   c00004f0 <memset>
c0010812:	83 c4 10             	add    esp,0x10
c0010815:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001081d:	eb 27                	jmp    c0010846 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001081f:	83 f8 3d             	cmp    eax,0x3d
c0010822:	74 1e                	je     c0010842 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c0010824:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001082a:	7f 07                	jg     c0010833 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c001082c:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c0010830:	46                   	inc    esi
c0010831:	eb 13                	jmp    c0010846 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010833:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001083b:	eb 09                	jmp    c0010846 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001083d:	83 f8 3d             	cmp    eax,0x3d
c0010840:	75 ea                	jne    c001082c <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c0010842:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0010846:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001084b:	0f 85 99 fe ff ff    	jne    c00106ea <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0010851:	83 ec 0c             	sub    esp,0xc
c0010854:	53                   	push   ebx
c0010855:	e8 50 aa ff ff       	call   c000b2aa <File::close()>
c001085a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001085c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001085f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010862:	81 c4 3c 01 00 00    	add    esp,0x13c
c0010868:	5b                   	pop    ebx
c0010869:	5e                   	pop    esi
c001086a:	5f                   	pop    edi
c001086b:	5d                   	pop    ebp
c001086c:	c3                   	ret    
c001086d:	90                   	nop

c001086e <EnvVarContainer::__loadSystem()>:
c001086e:	83 ec 10             	sub    esp,0x10
c0010871:	68 20 2a 02 c0       	push   0xc0022a20
c0010876:	68 ec 13 02 c0       	push   0xc00213ec
c001087b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001087f:	e8 c6 fd ff ff       	call   c001064a <EnvVarContainer::loadFrom(char const*, char const*)>
c0010884:	83 c4 1c             	add    esp,0x1c
c0010887:	c3                   	ret    

c0010888 <EnvVarContainer::__loadUser()>:
c0010888:	c3                   	ret    
c0010889:	90                   	nop

c001088a <EnvVarContainer::EnvVarContainer(Process*)>:
c001088a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001088e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010894:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010898:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001089c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001089f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108a3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00108aa:	90                   	nop
c00108ab:	c3                   	ret    

c00108ac <EnvVarContainer::~EnvVarContainer()>:
c00108ac:	83 ec 0c             	sub    esp,0xc
c00108af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108b3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00108b6:	85 c0                	test   eax,eax
c00108b8:	74 1d                	je     c00108d7 <EnvVarContainer::~EnvVarContainer()+0x2b>
c00108ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108be:	8b 00                	mov    eax,DWORD PTR [eax]
c00108c0:	85 c0                	test   eax,eax
c00108c2:	74 13                	je     c00108d7 <EnvVarContainer::~EnvVarContainer()+0x2b>
c00108c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00108cb:	83 ec 0c             	sub    esp,0xc
c00108ce:	50                   	push   eax
c00108cf:	e8 ea 71 ff ff       	call   c0007abe <free>
c00108d4:	83 c4 10             	add    esp,0x10
c00108d7:	90                   	nop
c00108d8:	83 c4 0c             	add    esp,0xc
c00108db:	c3                   	ret    

c00108dc <KeGetEnv(Process*, char const*)>:
c00108dc:	53                   	push   ebx
c00108dd:	83 ec 08             	sub    esp,0x8
c00108e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108e4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00108e8:	39 05 90 91 02 c0    	cmp    DWORD PTR ds:0xc0029190,eax
c00108ee:	74 04                	je     c00108f4 <KeGetEnv(Process*, char const*)+0x18>
c00108f0:	85 c0                	test   eax,eax
c00108f2:	75 0b                	jne    c00108ff <KeGetEnv(Process*, char const*)+0x23>
c00108f4:	a1 30 89 02 c0       	mov    eax,ds:0xc0028930
c00108f9:	85 c0                	test   eax,eax
c00108fb:	75 19                	jne    c0010916 <KeGetEnv(Process*, char const*)+0x3a>
c00108fd:	eb 27                	jmp    c0010926 <KeGetEnv(Process*, char const*)+0x4a>
c00108ff:	52                   	push   edx
c0010900:	52                   	push   edx
c0010901:	53                   	push   ebx
c0010902:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0010908:	e8 3b fc ff ff       	call   c0010548 <EnvVarContainer::getEnv(char const*)>
c001090d:	83 c4 10             	add    esp,0x10
c0010910:	85 c0                	test   eax,eax
c0010912:	75 28                	jne    c001093c <KeGetEnv(Process*, char const*)+0x60>
c0010914:	eb de                	jmp    c00108f4 <KeGetEnv(Process*, char const*)+0x18>
c0010916:	52                   	push   edx
c0010917:	52                   	push   edx
c0010918:	53                   	push   ebx
c0010919:	50                   	push   eax
c001091a:	e8 29 fc ff ff       	call   c0010548 <EnvVarContainer::getEnv(char const*)>
c001091f:	83 c4 10             	add    esp,0x10
c0010922:	85 c0                	test   eax,eax
c0010924:	75 16                	jne    c001093c <KeGetEnv(Process*, char const*)+0x60>
c0010926:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001092a:	a1 34 89 02 c0       	mov    eax,ds:0xc0028934
c001092f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010933:	83 c4 08             	add    esp,0x8
c0010936:	5b                   	pop    ebx
c0010937:	e9 0c fc ff ff       	jmp    c0010548 <EnvVarContainer::getEnv(char const*)>
c001093c:	83 c4 08             	add    esp,0x8
c001093f:	5b                   	pop    ebx
c0010940:	c3                   	ret    

c0010941 <KeSetEnvSystem(char const*, char const*)>:
c0010941:	83 ec 10             	sub    esp,0x10
c0010944:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010948:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001094c:	ff 35 34 89 02 c0    	push   DWORD PTR ds:0xc0028934
c0010952:	e8 2f fc ff ff       	call   c0010586 <EnvVarContainer::setEnv(char const*, char const*)>
c0010957:	83 c4 1c             	add    esp,0x1c
c001095a:	c3                   	ret    

c001095b <KeSetEnvUser(char const*, char const*)>:
c001095b:	a1 30 89 02 c0       	mov    eax,ds:0xc0028930
c0010960:	85 c0                	test   eax,eax
c0010962:	74 15                	je     c0010979 <KeSetEnvUser(char const*, char const*)+0x1e>
c0010964:	83 ec 10             	sub    esp,0x10
c0010967:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001096b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001096f:	50                   	push   eax
c0010970:	e8 11 fc ff ff       	call   c0010586 <EnvVarContainer::setEnv(char const*, char const*)>
c0010975:	83 c4 1c             	add    esp,0x1c
c0010978:	c3                   	ret    
c0010979:	c3                   	ret    

c001097a <KeSetEnvProcess(Process*, char const*, char const*)>:
c001097a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001097e:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0010984:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010988:	e9 f9 fb ff ff       	jmp    c0010586 <EnvVarContainer::setEnv(char const*, char const*)>

c001098d <KeDeleteEnvSystem(char const*)>:
c001098d:	c3                   	ret    

c001098e <KeDeleteEnvUser(char const*)>:
c001098e:	c3                   	ret    

c001098f <KeDeleteEnvProcess(Process*, char const*)>:
c001098f:	c3                   	ret    

c0010990 <KeNewProcessEnv(Process*)>:
c0010990:	83 ec 28             	sub    esp,0x28
c0010993:	6a 0c                	push   0xc
c0010995:	e8 14 71 ff ff       	call   c0007aae <malloc>
c001099a:	5a                   	pop    edx
c001099b:	59                   	pop    ecx
c001099c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00109a0:	50                   	push   eax
c00109a1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00109a5:	e8 e0 fe ff ff       	call   c001088a <EnvVarContainer::EnvVarContainer(Process*)>
c00109aa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00109ae:	83 c4 2c             	add    esp,0x2c
c00109b1:	c3                   	ret    

c00109b2 <KeCopyProcessEnv(Process*, Process*)>:
c00109b2:	57                   	push   edi
c00109b3:	56                   	push   esi
c00109b4:	53                   	push   ebx
c00109b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109b9:	83 ec 0c             	sub    esp,0xc
c00109bc:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c00109c2:	6a 0c                	push   0xc
c00109c4:	e8 e5 70 ff ff       	call   c0007aae <malloc>
c00109c9:	89 c3                	mov    ebx,eax
c00109cb:	58                   	pop    eax
c00109cc:	5a                   	pop    edx
c00109cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109d1:	53                   	push   ebx
c00109d2:	e8 b3 fe ff ff       	call   c001088a <EnvVarContainer::EnvVarContainer(Process*)>
c00109d7:	8b 07                	mov    eax,DWORD PTR [edi]
c00109d9:	89 03                	mov    DWORD PTR [ebx],eax
c00109db:	c1 e0 03             	shl    eax,0x3
c00109de:	89 04 24             	mov    DWORD PTR [esp],eax
c00109e1:	e8 c8 70 ff ff       	call   c0007aae <malloc>
c00109e6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00109e9:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00109eb:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c00109ee:	c1 e1 03             	shl    ecx,0x3
c00109f1:	89 c7                	mov    edi,eax
c00109f3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00109f5:	83 c4 10             	add    esp,0x10
c00109f8:	89 d8                	mov    eax,ebx
c00109fa:	5b                   	pop    ebx
c00109fb:	5e                   	pop    esi
c00109fc:	5f                   	pop    edi
c00109fd:	c3                   	ret    

c00109fe <KeLoadSystemEnv()>:
c00109fe:	53                   	push   ebx
c00109ff:	83 ec 14             	sub    esp,0x14
c0010a02:	6a 0c                	push   0xc
c0010a04:	e8 a5 70 ff ff       	call   c0007aae <malloc>
c0010a09:	89 c3                	mov    ebx,eax
c0010a0b:	58                   	pop    eax
c0010a0c:	5a                   	pop    edx
c0010a0d:	ff 35 90 91 02 c0    	push   DWORD PTR ds:0xc0029190
c0010a13:	53                   	push   ebx
c0010a14:	e8 71 fe ff ff       	call   c001088a <EnvVarContainer::EnvVarContainer(Process*)>
c0010a19:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010a1c:	89 1d 34 89 02 c0    	mov    DWORD PTR ds:0xc0028934,ebx
c0010a22:	e8 47 fe ff ff       	call   c001086e <EnvVarContainer::__loadSystem()>
c0010a27:	83 c4 18             	add    esp,0x18
c0010a2a:	5b                   	pop    ebx
c0010a2b:	c3                   	ret    

c0010a2c <KeLoadUserEnv()>:
c0010a2c:	53                   	push   ebx
c0010a2d:	83 ec 14             	sub    esp,0x14
c0010a30:	6a 0c                	push   0xc
c0010a32:	e8 77 70 ff ff       	call   c0007aae <malloc>
c0010a37:	89 c3                	mov    ebx,eax
c0010a39:	58                   	pop    eax
c0010a3a:	5a                   	pop    edx
c0010a3b:	ff 35 90 91 02 c0    	push   DWORD PTR ds:0xc0029190
c0010a41:	53                   	push   ebx
c0010a42:	e8 43 fe ff ff       	call   c001088a <EnvVarContainer::EnvVarContainer(Process*)>
c0010a47:	89 1d 30 89 02 c0    	mov    DWORD PTR ds:0xc0028930,ebx
c0010a4d:	83 c4 18             	add    esp,0x18
c0010a50:	5b                   	pop    ebx
c0010a51:	c3                   	ret    

c0010a52 <KeFlushEnv()>:
c0010a52:	c3                   	ret    

c0010a53 <KeGetProcessTotalEnvCount(Process*)>:
c0010a53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a57:	8b 15 30 89 02 c0    	mov    edx,DWORD PTR ds:0xc0028930
c0010a5d:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010a63:	a1 34 89 02 c0       	mov    eax,ds:0xc0028934
c0010a68:	8b 00                	mov    eax,DWORD PTR [eax]
c0010a6a:	03 01                	add    eax,DWORD PTR [ecx]
c0010a6c:	85 d2                	test   edx,edx
c0010a6e:	74 02                	je     c0010a72 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c0010a70:	03 02                	add    eax,DWORD PTR [edx]
c0010a72:	c3                   	ret    

c0010a73 <KeGetProcessEnvPair(Process*, int)>:
c0010a73:	57                   	push   edi
c0010a74:	56                   	push   esi
c0010a75:	8b 35 30 89 02 c0    	mov    esi,DWORD PTR ds:0xc0028930
c0010a7b:	53                   	push   ebx
c0010a7c:	85 f6                	test   esi,esi
c0010a7e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010a82:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010a86:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010a8c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010a90:	8b 01                	mov    eax,DWORD PTR [ecx]
c0010a92:	75 16                	jne    c0010aaa <KeGetProcessEnvPair(Process*, int)+0x37>
c0010a94:	39 c2                	cmp    edx,eax
c0010a96:	7c 16                	jl     c0010aae <KeGetProcessEnvPair(Process*, int)+0x3b>
c0010a98:	8b 0d 34 89 02 c0    	mov    ecx,DWORD PTR ds:0xc0028934
c0010a9e:	8b 31                	mov    esi,DWORD PTR [ecx]
c0010aa0:	01 c6                	add    esi,eax
c0010aa2:	39 d6                	cmp    esi,edx
c0010aa4:	7e 3c                	jle    c0010ae2 <KeGetProcessEnvPair(Process*, int)+0x6f>
c0010aa6:	29 c2                	sub    edx,eax
c0010aa8:	eb 04                	jmp    c0010aae <KeGetProcessEnvPair(Process*, int)+0x3b>
c0010aaa:	39 c2                	cmp    edx,eax
c0010aac:	7d 05                	jge    c0010ab3 <KeGetProcessEnvPair(Process*, int)+0x40>
c0010aae:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0010ab1:	eb 20                	jmp    c0010ad3 <KeGetProcessEnvPair(Process*, int)+0x60>
c0010ab3:	8b 3e                	mov    edi,DWORD PTR [esi]
c0010ab5:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0010ab8:	39 d1                	cmp    ecx,edx
c0010aba:	7e 04                	jle    c0010ac0 <KeGetProcessEnvPair(Process*, int)+0x4d>
c0010abc:	29 c2                	sub    edx,eax
c0010abe:	eb 10                	jmp    c0010ad0 <KeGetProcessEnvPair(Process*, int)+0x5d>
c0010ac0:	8b 35 34 89 02 c0    	mov    esi,DWORD PTR ds:0xc0028934
c0010ac6:	03 0e                	add    ecx,DWORD PTR [esi]
c0010ac8:	39 d1                	cmp    ecx,edx
c0010aca:	7e 16                	jle    c0010ae2 <KeGetProcessEnvPair(Process*, int)+0x6f>
c0010acc:	29 c2                	sub    edx,eax
c0010ace:	29 fa                	sub    edx,edi
c0010ad0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010ad3:	8d 14 d0             	lea    edx,[eax+edx*8]
c0010ad6:	8b 02                	mov    eax,DWORD PTR [edx]
c0010ad8:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0010adb:	89 03                	mov    DWORD PTR [ebx],eax
c0010add:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0010ae0:	eb 1d                	jmp    c0010aff <KeGetProcessEnvPair(Process*, int)+0x8c>
c0010ae2:	83 ec 0c             	sub    esp,0xc
c0010ae5:	68 0e 14 02 c0       	push   0xc002140e
c0010aea:	e8 ac 00 00 00       	call   c0010b9b <KePanic(char const*)>
c0010aef:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010af5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010afc:	83 c4 10             	add    esp,0x10
c0010aff:	89 d8                	mov    eax,ebx
c0010b01:	5b                   	pop    ebx
c0010b02:	5e                   	pop    esi
c0010b03:	5f                   	pop    edi
c0010b04:	c2 04 00             	ret    0x4

c0010b07 <CPU::current()>:
c0010b07:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0010b0c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010b12:	c3                   	ret    

c0010b13 <operator new(unsigned long)>:
c0010b13:	e9 96 6f ff ff       	jmp    c0007aae <malloc>

c0010b18 <operator delete(void*)>:
c0010b18:	e9 b1 6f ff ff       	jmp    c0007ace <rfree>

c0010b1d <disableIRQs()>:
c0010b1d:	fa                   	cli    
c0010b1e:	c3                   	ret    

c0010b1f <enableIRQs()>:
c0010b1f:	fb                   	sti    
c0010b20:	c3                   	ret    

c0010b21 <lockScheduler()>:
c0010b21:	fa                   	cli    
c0010b22:	ff 05 68 91 02 c0    	inc    DWORD PTR ds:0xc0029168
c0010b28:	c3                   	ret    

c0010b29 <unlockScheduler()>:
c0010b29:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0010b2e:	48                   	dec    eax
c0010b2f:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0010b34:	75 01                	jne    c0010b37 <unlockScheduler()+0xe>
c0010b36:	fb                   	sti    
c0010b37:	c3                   	ret    

c0010b38 <lockStuff()>:
c0010b38:	fa                   	cli    
c0010b39:	ff 05 68 91 02 c0    	inc    DWORD PTR ds:0xc0029168
c0010b3f:	ff 05 64 91 02 c0    	inc    DWORD PTR ds:0xc0029164
c0010b45:	c3                   	ret    

c0010b46 <unlockStuff()>:
c0010b46:	83 ec 0c             	sub    esp,0xc
c0010b49:	a1 64 91 02 c0       	mov    eax,ds:0xc0029164
c0010b4e:	48                   	dec    eax
c0010b4f:	a3 64 91 02 c0       	mov    ds:0xc0029164,eax
c0010b54:	75 18                	jne    c0010b6e <unlockStuff()+0x28>
c0010b56:	83 3d 60 91 02 c0 00 	cmp    DWORD PTR ds:0xc0029160,0x0
c0010b5d:	74 0f                	je     c0010b6e <unlockStuff()+0x28>
c0010b5f:	c7 05 60 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029160,0x0
c0010b69:	e8 9e 48 00 00       	call   c001540c <schedule()>
c0010b6e:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0010b73:	48                   	dec    eax
c0010b74:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0010b79:	75 01                	jne    c0010b7c <unlockStuff()+0x36>
c0010b7b:	fb                   	sti    
c0010b7c:	83 c4 0c             	add    esp,0xc
c0010b7f:	c3                   	ret    

c0010b80 <Virt::getAKernelVAS()>:
c0010b80:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c0010b85:	c3                   	ret    

c0010b86 <__not_memcpy>:
c0010b86:	57                   	push   edi
c0010b87:	56                   	push   esi
c0010b88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010b8c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010b90:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010b94:	89 c7                	mov    edi,eax
c0010b96:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010b98:	5e                   	pop    esi
c0010b99:	5f                   	pop    edi
c0010b9a:	c3                   	ret    

c0010b9b <KePanic(char const*)>:
c0010b9b:	c6 05 38 89 02 c0 01 	mov    BYTE PTR ds:0xc0028938,0x1
c0010ba2:	e9 0b 68 00 00       	jmp    c00173b2 <HalPanic(char const*)>

c0010ba7 <KePowerThread(void*)>:
c0010ba7:	83 ec 0c             	sub    esp,0xc
c0010baa:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0010baf:	48                   	dec    eax
c0010bb0:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0010bb5:	75 01                	jne    c0010bb8 <KePowerThread(void*)+0x11>
c0010bb7:	fb                   	sti    
c0010bb8:	83 ec 0c             	sub    esp,0xc
c0010bbb:	c6 05 40 89 02 c0 00 	mov    BYTE PTR ds:0xc0028940,0x0
c0010bc2:	6a 0a                	push   0xa
c0010bc4:	e8 87 4b 00 00       	call   c0015750 <sleep(unsigned int)>
c0010bc9:	83 05 84 89 02 c0 0a 	add    DWORD PTR ds:0xc0028984,0xa
c0010bd0:	83 c4 10             	add    esp,0x10
c0010bd3:	eb e3                	jmp    c0010bb8 <KePowerThread(void*)+0x11>

c0010bd5 <KeChangePowerSettings(PowerSettings)>:
c0010bd5:	57                   	push   edi
c0010bd6:	b9 09 00 00 00       	mov    ecx,0x9
c0010bdb:	56                   	push   esi
c0010bdc:	bf 60 89 02 c0       	mov    edi,0xc0028960
c0010be1:	fc                   	cld    
c0010be2:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010be6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010be8:	5e                   	pop    esi
c0010be9:	5f                   	pop    edi
c0010bea:	c3                   	ret    

c0010beb <KeUserIOReceived()>:
c0010beb:	c7 05 84 89 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028984,0x0
c0010bf5:	c3                   	ret    

c0010bf6 <KeHandlePowerButton()>:
c0010bf6:	83 ec 0c             	sub    esp,0xc
c0010bf9:	a1 60 89 02 c0       	mov    eax,ds:0xc0028960
c0010bfe:	83 f8 02             	cmp    eax,0x2
c0010c01:	75 10                	jne    c0010c13 <KeHandlePowerButton()+0x1d>
c0010c03:	83 ec 0c             	sub    esp,0xc
c0010c06:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0010c0c:	e8 0f 65 ff ff       	call   c0007120 <Computer::shutdown()>
c0010c11:	eb 11                	jmp    c0010c24 <KeHandlePowerButton()+0x2e>
c0010c13:	48                   	dec    eax
c0010c14:	75 11                	jne    c0010c27 <KeHandlePowerButton()+0x31>
c0010c16:	83 ec 0c             	sub    esp,0xc
c0010c19:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0010c1f:	e8 2c 65 ff ff       	call   c0007150 <Computer::sleep()>
c0010c24:	83 c4 10             	add    esp,0x10
c0010c27:	83 c4 0c             	add    esp,0xc
c0010c2a:	c3                   	ret    

c0010c2b <KeHandleSleepButton()>:
c0010c2b:	83 ec 0c             	sub    esp,0xc
c0010c2e:	a1 64 89 02 c0       	mov    eax,ds:0xc0028964
c0010c33:	83 f8 02             	cmp    eax,0x2
c0010c36:	75 10                	jne    c0010c48 <KeHandleSleepButton()+0x1d>
c0010c38:	83 ec 0c             	sub    esp,0xc
c0010c3b:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0010c41:	e8 da 64 ff ff       	call   c0007120 <Computer::shutdown()>
c0010c46:	eb 11                	jmp    c0010c59 <KeHandleSleepButton()+0x2e>
c0010c48:	48                   	dec    eax
c0010c49:	75 11                	jne    c0010c5c <KeHandleSleepButton()+0x31>
c0010c4b:	83 ec 0c             	sub    esp,0xc
c0010c4e:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0010c54:	e8 f7 64 ff ff       	call   c0007150 <Computer::sleep()>
c0010c59:	83 c4 10             	add    esp,0x10
c0010c5c:	83 c4 0c             	add    esp,0xc
c0010c5f:	c3                   	ret    

c0010c60 <KeSetupPowerManager()>:
c0010c60:	83 ec 0c             	sub    esp,0xc
c0010c63:	c7 05 84 89 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028984,0x0
c0010c6d:	68 f0 00 00 00       	push   0xf0
c0010c72:	c6 05 40 89 02 c0 00 	mov    BYTE PTR ds:0xc0028940,0x0
c0010c79:	6a 00                	push   0x0
c0010c7b:	68 a7 0b 01 c0       	push   0xc0010ba7
c0010c80:	ff 35 90 91 02 c0    	push   DWORD PTR ds:0xc0029190
c0010c86:	e8 31 45 00 00       	call   c00151bc <Process::createThread(void (*)(void*), void*, int)>
c0010c8b:	c7 05 60 89 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0028960,0x2
c0010c95:	c7 05 64 89 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028964,0x1
c0010c9f:	c7 05 68 89 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0028968,0x3
c0010ca9:	c7 05 6c 89 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002896c,0x0
c0010cb3:	c7 05 78 89 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028978,0x0
c0010cbd:	c7 05 70 89 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028970,0x0
c0010cc7:	c7 05 7c 89 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002897c,0x0
c0010cd1:	c7 05 74 89 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028974,0x3c
c0010cdb:	c7 05 80 89 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028980,0x3c
c0010ce5:	83 c4 1c             	add    esp,0x1c
c0010ce8:	c3                   	ret    

c0010ce9 <KeRand()>:
c0010ce9:	69 05 88 89 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc0028988,0x2875
c0010cf3:	69 0d 8c 89 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002898c,0xa2e7b175
c0010cfd:	53                   	push   ebx
c0010cfe:	01 c1                	add    ecx,eax
c0010d00:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0010d05:	f7 25 88 89 02 c0    	mul    DWORD PTR ds:0xc0028988
c0010d0b:	01 ca                	add    edx,ecx
c0010d0d:	05 ef 04 b5 00       	add    eax,0xb504ef
c0010d12:	83 d2 00             	adc    edx,0x0
c0010d15:	a3 88 89 02 c0       	mov    ds:0xc0028988,eax
c0010d1a:	0f b7 da             	movzx  ebx,dx
c0010d1d:	89 da                	mov    edx,ebx
c0010d1f:	89 1d 8c 89 02 c0    	mov    DWORD PTR ds:0xc002898c,ebx
c0010d25:	0f ac d0 0e          	shrd   eax,edx,0xe
c0010d29:	5b                   	pop    ebx
c0010d2a:	c3                   	ret    

c0010d2b <KeSeedRand(unsigned int)>:
c0010d2b:	53                   	push   ebx
c0010d2c:	83 ec 08             	sub    esp,0x8
c0010d2f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d33:	e8 99 69 00 00       	call   c00176d1 <HalGetRand()>
c0010d38:	c7 05 8c 89 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002898c,0x0
c0010d42:	31 d8                	xor    eax,ebx
c0010d44:	a3 88 89 02 c0       	mov    ds:0xc0028988,eax
c0010d49:	e8 9b ff ff ff       	call   c0010ce9 <KeRand()>
c0010d4e:	83 c4 08             	add    esp,0x8
c0010d51:	5b                   	pop    ebx
c0010d52:	eb 95                	jmp    c0010ce9 <KeRand()>

c0010d54 <KeInitRand()>:
c0010d54:	83 ec 0c             	sub    esp,0xc
c0010d57:	e8 6a 67 00 00       	call   c00174c6 <HalQueryPerformanceCounter()>
c0010d5c:	0f 20 da             	mov    edx,cr3
c0010d5f:	0f 22 da             	mov    cr3,edx
c0010d62:	0f 20 da             	mov    edx,cr3
c0010d65:	0f 22 da             	mov    cr3,edx
c0010d68:	0f 20 da             	mov    edx,cr3
c0010d6b:	0f 22 da             	mov    cr3,edx
c0010d6e:	0f 20 da             	mov    edx,cr3
c0010d71:	0f 22 da             	mov    cr3,edx
c0010d74:	83 ec 0c             	sub    esp,0xc
c0010d77:	35 03 8a 95 38       	xor    eax,0x38958a03
c0010d7c:	50                   	push   eax
c0010d7d:	e8 a9 ff ff ff       	call   c0010d2b <KeSeedRand(unsigned int)>
c0010d82:	83 c4 1c             	add    esp,0x1c
c0010d85:	c3                   	ret    
c0010d86:	66 90                	xchg   ax,ax

c0010d88 <KeResolveCompatibilitySymbol(char*)>:
c0010d88:	83 ec 0c             	sub    esp,0xc
c0010d8b:	83 ec 08             	sub    esp,0x8
c0010d8e:	68 28 14 02 c0       	push   0xc0021428
c0010d93:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d97:	e8 b4 f9 fe ff       	call   c0000750 <strcmp>
c0010d9c:	83 c4 10             	add    esp,0x10
c0010d9f:	85 c0                	test   eax,eax
c0010da1:	0f 94 c0             	sete   al
c0010da4:	0f b6 c0             	movzx  eax,al
c0010da7:	85 c0                	test   eax,eax
c0010da9:	74 0d                	je     c0010db8 <KeResolveCompatibilitySymbol(char*)+0x30>
c0010dab:	b8 b8 5e 02 c0       	mov    eax,0xc0025eb8
c0010db0:	e9 8b 01 00 00       	jmp    c0010f40 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010db5:	8d 76 00             	lea    esi,[esi+0x0]
c0010db8:	83 ec 08             	sub    esp,0x8
c0010dbb:	68 31 14 02 c0       	push   0xc0021431
c0010dc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010dc4:	e8 87 f9 fe ff       	call   c0000750 <strcmp>
c0010dc9:	83 c4 10             	add    esp,0x10
c0010dcc:	85 c0                	test   eax,eax
c0010dce:	0f 94 c0             	sete   al
c0010dd1:	0f b6 c0             	movzx  eax,al
c0010dd4:	85 c0                	test   eax,eax
c0010dd6:	74 0c                	je     c0010de4 <KeResolveCompatibilitySymbol(char*)+0x5c>
c0010dd8:	b8 10 ea 01 c0       	mov    eax,0xc001ea10
c0010ddd:	e9 5e 01 00 00       	jmp    c0010f40 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010de2:	66 90                	xchg   ax,ax
c0010de4:	83 ec 08             	sub    esp,0x8
c0010de7:	68 3b 14 02 c0       	push   0xc002143b
c0010dec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010df0:	e8 5b f9 fe ff       	call   c0000750 <strcmp>
c0010df5:	83 c4 10             	add    esp,0x10
c0010df8:	85 c0                	test   eax,eax
c0010dfa:	0f 94 c0             	sete   al
c0010dfd:	0f b6 c0             	movzx  eax,al
c0010e00:	85 c0                	test   eax,eax
c0010e02:	74 0c                	je     c0010e10 <KeResolveCompatibilitySymbol(char*)+0x88>
c0010e04:	b8 44 e7 01 c0       	mov    eax,0xc001e744
c0010e09:	e9 32 01 00 00       	jmp    c0010f40 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010e0e:	66 90                	xchg   ax,ax
c0010e10:	83 ec 08             	sub    esp,0x8
c0010e13:	68 44 14 02 c0       	push   0xc0021444
c0010e18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e1c:	e8 2f f9 fe ff       	call   c0000750 <strcmp>
c0010e21:	83 c4 10             	add    esp,0x10
c0010e24:	85 c0                	test   eax,eax
c0010e26:	0f 94 c0             	sete   al
c0010e29:	0f b6 c0             	movzx  eax,al
c0010e2c:	85 c0                	test   eax,eax
c0010e2e:	74 0c                	je     c0010e3c <KeResolveCompatibilitySymbol(char*)+0xb4>
c0010e30:	b8 9b 0b 01 c0       	mov    eax,0xc0010b9b
c0010e35:	e9 06 01 00 00       	jmp    c0010f40 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010e3a:	66 90                	xchg   ax,ax
c0010e3c:	83 ec 08             	sub    esp,0x8
c0010e3f:	68 57 14 02 c0       	push   0xc0021457
c0010e44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e48:	e8 03 f9 fe ff       	call   c0000750 <strcmp>
c0010e4d:	83 c4 10             	add    esp,0x10
c0010e50:	85 c0                	test   eax,eax
c0010e52:	0f 94 c0             	sete   al
c0010e55:	0f b6 c0             	movzx  eax,al
c0010e58:	85 c0                	test   eax,eax
c0010e5a:	74 0c                	je     c0010e68 <KeResolveCompatibilitySymbol(char*)+0xe0>
c0010e5c:	b8 e5 04 01 c0       	mov    eax,0xc00104e5
c0010e61:	e9 da 00 00 00       	jmp    c0010f40 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010e66:	66 90                	xchg   ax,ax
c0010e68:	83 ec 08             	sub    esp,0x8
c0010e6b:	68 74 14 02 c0       	push   0xc0021474
c0010e70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e74:	e8 d7 f8 fe ff       	call   c0000750 <strcmp>
c0010e79:	83 c4 10             	add    esp,0x10
c0010e7c:	85 c0                	test   eax,eax
c0010e7e:	0f 94 c0             	sete   al
c0010e81:	0f b6 c0             	movzx  eax,al
c0010e84:	85 c0                	test   eax,eax
c0010e86:	74 0c                	je     c0010e94 <KeResolveCompatibilitySymbol(char*)+0x10c>
c0010e88:	b8 10 eb 01 c0       	mov    eax,0xc001eb10
c0010e8d:	e9 ae 00 00 00       	jmp    c0010f40 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010e92:	66 90                	xchg   ax,ax
c0010e94:	83 ec 08             	sub    esp,0x8
c0010e97:	68 7e 14 02 c0       	push   0xc002147e
c0010e9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ea0:	e8 ab f8 fe ff       	call   c0000750 <strcmp>
c0010ea5:	83 c4 10             	add    esp,0x10
c0010ea8:	85 c0                	test   eax,eax
c0010eaa:	0f 94 c0             	sete   al
c0010ead:	0f b6 c0             	movzx  eax,al
c0010eb0:	85 c0                	test   eax,eax
c0010eb2:	74 0c                	je     c0010ec0 <KeResolveCompatibilitySymbol(char*)+0x138>
c0010eb4:	b8 90 e8 01 c0       	mov    eax,0xc001e890
c0010eb9:	e9 82 00 00 00       	jmp    c0010f40 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010ebe:	66 90                	xchg   ax,ax
c0010ec0:	83 ec 08             	sub    esp,0x8
c0010ec3:	68 87 14 02 c0       	push   0xc0021487
c0010ec8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ecc:	e8 7f f8 fe ff       	call   c0000750 <strcmp>
c0010ed1:	83 c4 10             	add    esp,0x10
c0010ed4:	85 c0                	test   eax,eax
c0010ed6:	0f 94 c0             	sete   al
c0010ed9:	0f b6 c0             	movzx  eax,al
c0010edc:	85 c0                	test   eax,eax
c0010ede:	74 08                	je     c0010ee8 <KeResolveCompatibilitySymbol(char*)+0x160>
c0010ee0:	b8 bc 5e 02 c0       	mov    eax,0xc0025ebc
c0010ee5:	eb 59                	jmp    c0010f40 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010ee7:	90                   	nop
c0010ee8:	83 ec 08             	sub    esp,0x8
c0010eeb:	68 9f 14 02 c0       	push   0xc002149f
c0010ef0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ef4:	e8 57 f8 fe ff       	call   c0000750 <strcmp>
c0010ef9:	83 c4 10             	add    esp,0x10
c0010efc:	85 c0                	test   eax,eax
c0010efe:	0f 94 c0             	sete   al
c0010f01:	0f b6 c0             	movzx  eax,al
c0010f04:	85 c0                	test   eax,eax
c0010f06:	74 08                	je     c0010f10 <KeResolveCompatibilitySymbol(char*)+0x188>
c0010f08:	b8 bc 5e 02 c0       	mov    eax,0xc0025ebc
c0010f0d:	eb 31                	jmp    c0010f40 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010f0f:	90                   	nop
c0010f10:	83 ec 08             	sub    esp,0x8
c0010f13:	68 ac 14 02 c0       	push   0xc00214ac
c0010f18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f1c:	e8 2f f8 fe ff       	call   c0000750 <strcmp>
c0010f21:	83 c4 10             	add    esp,0x10
c0010f24:	85 c0                	test   eax,eax
c0010f26:	0f 94 c0             	sete   al
c0010f29:	0f b6 c0             	movzx  eax,al
c0010f2c:	85 c0                	test   eax,eax
c0010f2e:	74 08                	je     c0010f38 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0010f30:	b8 bd 5e 02 c0       	mov    eax,0xc0025ebd
c0010f35:	eb 09                	jmp    c0010f40 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010f37:	90                   	nop
c0010f38:	b8 00 00 00 00       	mov    eax,0x0
c0010f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0010f40:	83 c4 0c             	add    esp,0xc
c0010f43:	c3                   	ret    

c0010f44 <KiSigKill(int)>:
c0010f44:	83 ec 0c             	sub    esp,0xc
c0010f47:	6a 00                	push   0x0
c0010f49:	6a 00                	push   0x0
c0010f4b:	6a ff                	push   0xffffffff
c0010f4d:	6a 01                	push   0x1
c0010f4f:	e8 fe 30 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010f54:	83 c4 1c             	add    esp,0x1c
c0010f57:	c3                   	ret    

c0010f58 <KiDefaultSignalHandlerIgnore(int)>:
c0010f58:	c3                   	ret    

c0010f59 <KiDefaultSignalHandlerPause(int)>:
c0010f59:	57                   	push   edi
c0010f5a:	b9 07 00 00 00       	mov    ecx,0x7
c0010f5f:	56                   	push   esi
c0010f60:	be f5 14 02 c0       	mov    esi,0xc00214f5
c0010f65:	83 ec 24             	sub    esp,0x24
c0010f68:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0010f6c:	fc                   	cld    
c0010f6d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010f6f:	8d 44 24 04          	lea    eax,[esp+0x4]
c0010f73:	50                   	push   eax
c0010f74:	6a 00                	push   0x0
c0010f76:	6a 00                	push   0x0
c0010f78:	6a 27                	push   0x27
c0010f7a:	e8 d3 30 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010f7f:	83 c4 34             	add    esp,0x34
c0010f82:	5e                   	pop    esi
c0010f83:	5f                   	pop    edi
c0010f84:	c3                   	ret    

c0010f85 <KiDefaultSignalHandlerResume(int)>:
c0010f85:	57                   	push   edi
c0010f86:	b9 1d 00 00 00       	mov    ecx,0x1d
c0010f8b:	56                   	push   esi
c0010f8c:	be 11 15 02 c0       	mov    esi,0xc0021511
c0010f91:	83 ec 24             	sub    esp,0x24
c0010f94:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0010f98:	fc                   	cld    
c0010f99:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f9b:	8d 44 24 03          	lea    eax,[esp+0x3]
c0010f9f:	50                   	push   eax
c0010fa0:	6a 00                	push   0x0
c0010fa2:	6a 00                	push   0x0
c0010fa4:	6a 27                	push   0x27
c0010fa6:	e8 a7 30 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010fab:	83 c4 34             	add    esp,0x34
c0010fae:	5e                   	pop    esi
c0010faf:	5f                   	pop    edi
c0010fb0:	c3                   	ret    

c0010fb1 <KeDeinitSignals(SigHandlerBlock*)>:
c0010fb1:	e9 08 6b ff ff       	jmp    c0007abe <free>

c0010fb6 <KeInitSignals()>:
c0010fb6:	53                   	push   ebx
c0010fb7:	83 ec 14             	sub    esp,0x14
c0010fba:	68 c8 00 00 00       	push   0xc8
c0010fbf:	e8 ea 6a ff ff       	call   c0007aae <malloc>
c0010fc4:	83 c4 0c             	add    esp,0xc
c0010fc7:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0010fd1:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0010fdb:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0010fe2:	89 c3                	mov    ebx,eax
c0010fe4:	6a 20                	push   0x20
c0010fe6:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0010fec:	6a 00                	push   0x0
c0010fee:	50                   	push   eax
c0010fef:	e8 fc f4 fe ff       	call   c00004f0 <memset>
c0010ff4:	83 c4 0c             	add    esp,0xc
c0010ff7:	6a 44                	push   0x44
c0010ff9:	6a 00                	push   0x0
c0010ffb:	53                   	push   ebx
c0010ffc:	e8 ef f4 fe ff       	call   c00004f0 <memset>
c0011001:	89 d8                	mov    eax,ebx
c0011003:	83 c4 18             	add    esp,0x18
c0011006:	5b                   	pop    ebx
c0011007:	c3                   	ret    

c0011008 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0011008:	53                   	push   ebx
c0011009:	b8 01 00 00 00       	mov    eax,0x1
c001100e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011012:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011016:	83 f9 10             	cmp    ecx,0x10
c0011019:	7f 21                	jg     c001103c <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c001101b:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c001101e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011022:	89 03                	mov    DWORD PTR [ebx],eax
c0011024:	b8 01 00 00 00       	mov    eax,0x1
c0011029:	d3 e0                	shl    eax,cl
c001102b:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001102f:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0011032:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c001103a:	31 c0                	xor    eax,eax
c001103c:	5b                   	pop    ebx
c001103d:	c3                   	ret    

c001103e <KeRaiseSignal(SigHandlerBlock*, int)>:
c001103e:	55                   	push   ebp
c001103f:	57                   	push   edi
c0011040:	bf 08 00 00 00       	mov    edi,0x8
c0011045:	56                   	push   esi
c0011046:	53                   	push   ebx
c0011047:	83 ec 18             	sub    esp,0x18
c001104a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001104e:	68 2e 15 02 c0       	push   0xc002152e
c0011053:	e8 e1 98 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0011058:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c001105f:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0011065:	83 c4 10             	add    esp,0x10
c0011068:	31 c9                	xor    ecx,ecx
c001106a:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001106e:	99                   	cdq    
c001106f:	f7 ff                	idiv   edi
c0011071:	8d 42 24             	lea    eax,[edx+0x24]
c0011074:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0011078:	85 f6                	test   esi,esi
c001107a:	75 1a                	jne    c0011096 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c001107c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011080:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0011084:	50                   	push   eax
c0011085:	50                   	push   eax
c0011086:	52                   	push   edx
c0011087:	68 3f 15 02 c0       	push   0xc002153f
c001108c:	e8 a8 98 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0011091:	83 c4 10             	add    esp,0x10
c0011094:	eb 1b                	jmp    c00110b1 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0011096:	41                   	inc    ecx
c0011097:	83 f9 08             	cmp    ecx,0x8
c001109a:	75 ce                	jne    c001106a <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c001109c:	83 ec 0c             	sub    esp,0xc
c001109f:	be 01 00 00 00       	mov    esi,0x1
c00110a4:	68 60 15 02 c0       	push   0xc0021560
c00110a9:	e8 8b 98 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c00110ae:	83 c4 10             	add    esp,0x10
c00110b1:	83 c4 0c             	add    esp,0xc
c00110b4:	89 f0                	mov    eax,esi
c00110b6:	5b                   	pop    ebx
c00110b7:	5e                   	pop    esi
c00110b8:	5f                   	pop    edi
c00110b9:	5d                   	pop    ebp
c00110ba:	c3                   	ret    

c00110bb <KeCheckSignal(SigHandlerBlock*, int*)>:
c00110bb:	55                   	push   ebp
c00110bc:	57                   	push   edi
c00110bd:	56                   	push   esi
c00110be:	53                   	push   ebx
c00110bf:	51                   	push   ecx
c00110c0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00110c4:	85 db                	test   ebx,ebx
c00110c6:	0f 84 bc 00 00 00    	je     c0011188 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00110cc:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c00110d3:	0f 84 af 00 00 00    	je     c0011188 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00110d9:	31 c9                	xor    ecx,ecx
c00110db:	bf 08 00 00 00       	mov    edi,0x8
c00110e0:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c00110e6:	8d 04 0e             	lea    eax,[esi+ecx*1]
c00110e9:	99                   	cdq    
c00110ea:	f7 ff                	idiv   edi
c00110ec:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c00110f3:	85 ed                	test   ebp,ebp
c00110f5:	0f 84 9e 00 00 00    	je     c0011199 <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c00110fb:	89 e9                	mov    ecx,ebp
c00110fd:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0011103:	bf 01 00 00 00       	mov    edi,0x1
c0011108:	89 04 24             	mov    DWORD PTR [esp],eax
c001110b:	d3 e7                	shl    edi,cl
c001110d:	31 c9                	xor    ecx,ecx
c001110f:	b8 01 00 00 00       	mov    eax,0x1
c0011114:	d3 e0                	shl    eax,cl
c0011116:	85 04 24             	test   DWORD PTR [esp],eax
c0011119:	74 06                	je     c0011121 <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c001111b:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c001111f:	75 67                	jne    c0011188 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011121:	41                   	inc    ecx
c0011122:	83 f9 11             	cmp    ecx,0x11
c0011125:	75 e8                	jne    c001110f <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c0011127:	46                   	inc    esi
c0011128:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001112b:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011131:	09 f8                	or     eax,edi
c0011133:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c001113e:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0011144:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c001114b:	31 c0                	xor    eax,eax
c001114d:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0011155:	74 09                	je     c0011160 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0011157:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c001115e:	eb 06                	jmp    c0011166 <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c0011160:	40                   	inc    eax
c0011161:	83 f8 08             	cmp    eax,0x8
c0011164:	75 e7                	jne    c001114d <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c0011166:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0011169:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001116d:	83 fd 09             	cmp    ebp,0x9
c0011170:	89 2a                	mov    DWORD PTR [edx],ebp
c0011172:	75 07                	jne    c001117b <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0011174:	b8 44 0f 01 c0       	mov    eax,0xc0010f44
c0011179:	eb 31                	jmp    c00111ac <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c001117b:	83 f8 01             	cmp    eax,0x1
c001117e:	75 0c                	jne    c001118c <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c0011180:	f7 d7                	not    edi
c0011182:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0011188:	31 c0                	xor    eax,eax
c001118a:	eb 20                	jmp    c00111ac <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c001118c:	85 c0                	test   eax,eax
c001118e:	75 1c                	jne    c00111ac <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011190:	8b 04 ad 80 2a 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdd580]
c0011197:	eb 13                	jmp    c00111ac <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011199:	46                   	inc    esi
c001119a:	41                   	inc    ecx
c001119b:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c00111a1:	83 f9 08             	cmp    ecx,0x8
c00111a4:	0f 85 36 ff ff ff    	jne    c00110e0 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c00111aa:	eb dc                	jmp    c0011188 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00111ac:	5a                   	pop    edx
c00111ad:	5b                   	pop    ebx
c00111ae:	5e                   	pop    esi
c00111af:	5f                   	pop    edi
c00111b0:	5d                   	pop    ebp
c00111b1:	c3                   	ret    

c00111b2 <KiCheckSignalZ>:
c00111b2:	83 ec 10             	sub    esp,0x10
c00111b5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00111b9:	50                   	push   eax
c00111ba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00111bf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00111c2:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00111c8:	e8 ee fe ff ff       	call   c00110bb <KeCheckSignal(SigHandlerBlock*, int*)>
c00111cd:	5a                   	pop    edx
c00111ce:	31 d2                	xor    edx,edx
c00111d0:	59                   	pop    ecx
c00111d1:	85 c0                	test   eax,eax
c00111d3:	74 19                	je     c00111ee <KiCheckSignalZ+0x3c>
c00111d5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00111db:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00111de:	89 02                	mov    DWORD PTR [edx],eax
c00111e0:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c00111e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00111eb:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00111ee:	89 d0                	mov    eax,edx
c00111f0:	83 c4 10             	add    esp,0x10
c00111f3:	c3                   	ret    

c00111f4 <KeCompleteSignal(SigHandlerBlock*, int)>:
c00111f4:	56                   	push   esi
c00111f5:	53                   	push   ebx
c00111f6:	bb 01 00 00 00       	mov    ebx,0x1
c00111fb:	52                   	push   edx
c00111fc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011200:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011204:	d3 e3                	shl    ebx,cl
c0011206:	83 f9 10             	cmp    ecx,0x10
c0011209:	7f 08                	jg     c0011213 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c001120b:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0011211:	75 10                	jne    c0011223 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0011213:	83 ec 0c             	sub    esp,0xc
c0011216:	68 71 15 02 c0       	push   0xc0021571
c001121b:	e8 7b f9 ff ff       	call   c0010b9b <KePanic(char const*)>
c0011220:	83 c4 10             	add    esp,0x10
c0011223:	f7 d3                	not    ebx
c0011225:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c001122b:	58                   	pop    eax
c001122c:	5b                   	pop    ebx
c001122d:	5e                   	pop    esi
c001122e:	c3                   	ret    

c001122f <KiFinishSignalZ>:
c001122f:	53                   	push   ebx
c0011230:	83 ec 10             	sub    esp,0x10
c0011233:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011237:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c001123a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001123f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011242:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011248:	e8 a7 ff ff ff       	call   c00111f4 <KeCompleteSignal(SigHandlerBlock*, int)>
c001124d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011253:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001125a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0011261:	83 c4 18             	add    esp,0x18
c0011264:	5b                   	pop    ebx
c0011265:	c3                   	ret    

c0011266 <SysSeekDir(regs*)>:
c0011266:	31 c0                	xor    eax,eax
c0011268:	31 d2                	xor    edx,edx
c001126a:	c3                   	ret    

c001126b <SysTellDir(regs*)>:
c001126b:	31 c0                	xor    eax,eax
c001126d:	31 d2                	xor    edx,edx
c001126f:	c3                   	ret    

c0011270 <SysVerify(regs*)>:
c0011270:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011274:	31 d2                	xor    edx,edx
c0011276:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011279:	c3                   	ret    

c001127a <SysGetArgc(regs*)>:
c001127a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001127f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011282:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0011288:	89 c2                	mov    edx,eax
c001128a:	c1 fa 1f             	sar    edx,0x1f
c001128d:	c3                   	ret    

c001128e <SysTTYName(regs*)>:
c001128e:	b8 01 00 00 00       	mov    eax,0x1
c0011293:	31 d2                	xor    edx,edx
c0011295:	c3                   	ret    

c0011296 <SysFormatDisk(regs*)>:
c0011296:	56                   	push   esi
c0011297:	53                   	push   ebx
c0011298:	83 ec 04             	sub    esp,0x4
c001129b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001129f:	8b 1d b4 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb4
c00112a5:	eb 28                	jmp    c00112cf <SysFormatDisk(regs*)+0x39>
c00112a7:	83 ec 0c             	sub    esp,0xc
c00112aa:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00112ad:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c00112b0:	8b 13                	mov    edx,DWORD PTR [ebx]
c00112b2:	51                   	push   ecx
c00112b3:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c00112b6:	51                   	push   ecx
c00112b7:	50                   	push   eax
c00112b8:	8b 04 85 20 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7be0]
c00112bf:	50                   	push   eax
c00112c0:	53                   	push   ebx
c00112c1:	ff 52 48             	call   DWORD PTR [edx+0x48]
c00112c4:	83 c4 20             	add    esp,0x20
c00112c7:	83 f8 08             	cmp    eax,0x8
c00112ca:	75 14                	jne    c00112e0 <SysFormatDisk(regs*)+0x4a>
c00112cc:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00112cf:	85 db                	test   ebx,ebx
c00112d1:	75 d4                	jne    c00112a7 <SysFormatDisk(regs*)+0x11>
c00112d3:	83 c4 04             	add    esp,0x4
c00112d6:	b8 03 00 00 00       	mov    eax,0x3
c00112db:	31 d2                	xor    edx,edx
c00112dd:	5b                   	pop    ebx
c00112de:	5e                   	pop    esi
c00112df:	c3                   	ret    
c00112e0:	85 c0                	test   eax,eax
c00112e2:	74 1f                	je     c0011303 <SysFormatDisk(regs*)+0x6d>
c00112e4:	83 f8 09             	cmp    eax,0x9
c00112e7:	74 0d                	je     c00112f6 <SysFormatDisk(regs*)+0x60>
c00112e9:	83 c4 04             	add    esp,0x4
c00112ec:	b8 02 00 00 00       	mov    eax,0x2
c00112f1:	31 d2                	xor    edx,edx
c00112f3:	5b                   	pop    ebx
c00112f4:	5e                   	pop    esi
c00112f5:	c3                   	ret    
c00112f6:	83 c4 04             	add    esp,0x4
c00112f9:	b8 01 00 00 00       	mov    eax,0x1
c00112fe:	31 d2                	xor    edx,edx
c0011300:	5b                   	pop    ebx
c0011301:	5e                   	pop    esi
c0011302:	c3                   	ret    
c0011303:	83 c4 04             	add    esp,0x4
c0011306:	31 c0                	xor    eax,eax
c0011308:	31 d2                	xor    edx,edx
c001130a:	5b                   	pop    ebx
c001130b:	5e                   	pop    esi
c001130c:	c3                   	ret    

c001130d <SysSetDiskVolumeLabel(regs*)>:
c001130d:	56                   	push   esi
c001130e:	53                   	push   ebx
c001130f:	83 ec 04             	sub    esp,0x4
c0011312:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011316:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011319:	83 f8 19             	cmp    eax,0x19
c001131c:	77 33                	ja     c0011351 <SysSetDiskVolumeLabel(regs*)+0x44>
c001131e:	8b 0c 85 20 84 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7be0]
c0011325:	85 c9                	test   ecx,ecx
c0011327:	74 28                	je     c0011351 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011329:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c001132c:	85 db                	test   ebx,ebx
c001132e:	74 21                	je     c0011351 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011330:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011336:	85 d2                	test   edx,edx
c0011338:	74 17                	je     c0011351 <SysSetDiskVolumeLabel(regs*)+0x44>
c001133a:	8b 32                	mov    esi,DWORD PTR [edx]
c001133c:	53                   	push   ebx
c001133d:	50                   	push   eax
c001133e:	51                   	push   ecx
c001133f:	52                   	push   edx
c0011340:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0011343:	83 c4 10             	add    esp,0x10
c0011346:	89 c2                	mov    edx,eax
c0011348:	83 c4 04             	add    esp,0x4
c001134b:	c1 fa 1f             	sar    edx,0x1f
c001134e:	5b                   	pop    ebx
c001134f:	5e                   	pop    esi
c0011350:	c3                   	ret    
c0011351:	83 c4 04             	add    esp,0x4
c0011354:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011359:	ba ff ff ff ff       	mov    edx,0xffffffff
c001135e:	5b                   	pop    ebx
c001135f:	5e                   	pop    esi
c0011360:	c3                   	ret    

c0011361 <SysGetDiskVolumeLabel(regs*)>:
c0011361:	57                   	push   edi
c0011362:	56                   	push   esi
c0011363:	53                   	push   ebx
c0011364:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011368:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001136b:	83 fa 19             	cmp    edx,0x19
c001136e:	77 3c                	ja     c00113ac <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011370:	8b 0c 95 20 84 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd7be0]
c0011377:	85 c9                	test   ecx,ecx
c0011379:	74 31                	je     c00113ac <SysGetDiskVolumeLabel(regs*)+0x4b>
c001137b:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001137e:	85 db                	test   ebx,ebx
c0011380:	74 2a                	je     c00113ac <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011382:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011385:	85 f6                	test   esi,esi
c0011387:	74 23                	je     c00113ac <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011389:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c001138f:	85 c0                	test   eax,eax
c0011391:	74 19                	je     c00113ac <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011393:	83 ec 0c             	sub    esp,0xc
c0011396:	8b 38                	mov    edi,DWORD PTR [eax]
c0011398:	56                   	push   esi
c0011399:	53                   	push   ebx
c001139a:	52                   	push   edx
c001139b:	51                   	push   ecx
c001139c:	50                   	push   eax
c001139d:	ff 57 54             	call   DWORD PTR [edi+0x54]
c00113a0:	83 c4 20             	add    esp,0x20
c00113a3:	89 c2                	mov    edx,eax
c00113a5:	5b                   	pop    ebx
c00113a6:	c1 fa 1f             	sar    edx,0x1f
c00113a9:	5e                   	pop    esi
c00113aa:	5f                   	pop    edi
c00113ab:	c3                   	ret    
c00113ac:	5b                   	pop    ebx
c00113ad:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00113b2:	ba ff ff ff ff       	mov    edx,0xffffffff
c00113b7:	5e                   	pop    esi
c00113b8:	5f                   	pop    edi
c00113b9:	c3                   	ret    

c00113ba <SysShutdown(regs*)>:
c00113ba:	83 ec 0c             	sub    esp,0xc
c00113bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113c1:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00113c4:	85 c0                	test   eax,eax
c00113c6:	74 18                	je     c00113e0 <SysShutdown(regs*)+0x26>
c00113c8:	83 f8 01             	cmp    eax,0x1
c00113cb:	74 38                	je     c0011405 <SysShutdown(regs*)+0x4b>
c00113cd:	83 f8 02             	cmp    eax,0x2
c00113d0:	74 24                	je     c00113f6 <SysShutdown(regs*)+0x3c>
c00113d2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00113d7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00113dc:	83 c4 0c             	add    esp,0xc
c00113df:	c3                   	ret    
c00113e0:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00113e5:	8b 10                	mov    edx,DWORD PTR [eax]
c00113e7:	6a 00                	push   0x0
c00113e9:	6a 00                	push   0x0
c00113eb:	6a 00                	push   0x0
c00113ed:	50                   	push   eax
c00113ee:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00113f1:	83 c4 10             	add    esp,0x10
c00113f4:	eb dc                	jmp    c00113d2 <SysShutdown(regs*)+0x18>
c00113f6:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00113fb:	8b 10                	mov    edx,DWORD PTR [eax]
c00113fd:	6a 00                	push   0x0
c00113ff:	6a 00                	push   0x0
c0011401:	6a 01                	push   0x1
c0011403:	eb e8                	jmp    c00113ed <SysShutdown(regs*)+0x33>
c0011405:	a1 a0 84 02 c0       	mov    eax,ds:0xc00284a0
c001140a:	85 c0                	test   eax,eax
c001140c:	74 02                	je     c0011410 <SysShutdown(regs*)+0x56>
c001140e:	ff d0                	call   eax
c0011410:	31 c0                	xor    eax,eax
c0011412:	31 d2                	xor    edx,edx
c0011414:	83 c4 0c             	add    esp,0xc
c0011417:	c3                   	ret    

c0011418 <SysRealpath(regs*)>:
c0011418:	83 ec 0c             	sub    esp,0xc
c001141b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001141f:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011422:	85 d2                	test   edx,edx
c0011424:	74 07                	je     c001142d <SysRealpath(regs*)+0x15>
c0011426:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011429:	85 c0                	test   eax,eax
c001142b:	75 0b                	jne    c0011438 <SysRealpath(regs*)+0x20>
c001142d:	b8 01 00 00 00       	mov    eax,0x1
c0011432:	31 d2                	xor    edx,edx
c0011434:	83 c4 0c             	add    esp,0xc
c0011437:	c3                   	ret    
c0011438:	83 ec 04             	sub    esp,0x4
c001143b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011441:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0011444:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001144a:	51                   	push   ecx
c001144b:	52                   	push   edx
c001144c:	50                   	push   eax
c001144d:	e8 88 9b ff ff       	call   c000afda <Fs::standardiseFiles(char*, char const*, char const*)>
c0011452:	83 c4 10             	add    esp,0x10
c0011455:	31 c0                	xor    eax,eax
c0011457:	31 d2                	xor    edx,edx
c0011459:	83 c4 0c             	add    esp,0xc
c001145c:	c3                   	ret    

c001145d <SysReadDir(regs*)>:
c001145d:	53                   	push   ebx
c001145e:	83 ec 18             	sub    esp,0x18
c0011461:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011465:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011468:	83 f8 02             	cmp    eax,0x2
c001146b:	76 61                	jbe    c00114ce <SysReadDir(regs*)+0x71>
c001146d:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011474:	77 49                	ja     c00114bf <SysReadDir(regs*)+0x62>
c0011476:	83 ec 0c             	sub    esp,0xc
c0011479:	50                   	push   eax
c001147a:	e8 28 80 ff ff       	call   c00094a7 <KeGetFileFromDescriptor(int)>
c001147f:	83 c4 10             	add    esp,0x10
c0011482:	85 c0                	test   eax,eax
c0011484:	74 39                	je     c00114bf <SysReadDir(regs*)+0x62>
c0011486:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001148e:	83 ec 0c             	sub    esp,0xc
c0011491:	8b 10                	mov    edx,DWORD PTR [eax]
c0011493:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011497:	51                   	push   ecx
c0011498:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001149b:	51                   	push   ecx
c001149c:	6a 00                	push   0x0
c001149e:	68 10 01 00 00       	push   0x110
c00114a3:	50                   	push   eax
c00114a4:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00114a7:	83 c4 20             	add    esp,0x20
c00114aa:	85 c0                	test   eax,eax
c00114ac:	74 29                	je     c00114d7 <SysReadDir(regs*)+0x7a>
c00114ae:	83 f8 07             	cmp    eax,0x7
c00114b1:	74 1b                	je     c00114ce <SysReadDir(regs*)+0x71>
c00114b3:	b8 02 00 00 00       	mov    eax,0x2
c00114b8:	31 d2                	xor    edx,edx
c00114ba:	83 c4 18             	add    esp,0x18
c00114bd:	5b                   	pop    ebx
c00114be:	c3                   	ret    
c00114bf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00114c4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00114c9:	83 c4 18             	add    esp,0x18
c00114cc:	5b                   	pop    ebx
c00114cd:	c3                   	ret    
c00114ce:	b8 01 00 00 00       	mov    eax,0x1
c00114d3:	31 d2                	xor    edx,edx
c00114d5:	eb e3                	jmp    c00114ba <SysReadDir(regs*)+0x5d>
c00114d7:	31 c0                	xor    eax,eax
c00114d9:	31 d2                	xor    edx,edx
c00114db:	eb dd                	jmp    c00114ba <SysReadDir(regs*)+0x5d>

c00114dd <SysIsATTY(regs*)>:
c00114dd:	83 ec 0c             	sub    esp,0xc
c00114e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00114e4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00114e7:	83 f8 02             	cmp    eax,0x2
c00114ea:	76 07                	jbe    c00114f3 <SysIsATTY(regs*)+0x16>
c00114ec:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00114f1:	75 26                	jne    c0011519 <SysIsATTY(regs*)+0x3c>
c00114f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00114f8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00114fb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011501:	85 c0                	test   eax,eax
c0011503:	74 24                	je     c0011529 <SysIsATTY(regs*)+0x4c>
c0011505:	83 ec 0c             	sub    esp,0xc
c0011508:	8b 10                	mov    edx,DWORD PTR [eax]
c001150a:	50                   	push   eax
c001150b:	ff 12                	call   DWORD PTR [edx]
c001150d:	31 d2                	xor    edx,edx
c001150f:	0f b6 c0             	movzx  eax,al
c0011512:	83 c4 10             	add    esp,0x10
c0011515:	83 c4 0c             	add    esp,0xc
c0011518:	c3                   	ret    
c0011519:	83 ec 0c             	sub    esp,0xc
c001151c:	50                   	push   eax
c001151d:	e8 85 7f ff ff       	call   c00094a7 <KeGetFileFromDescriptor(int)>
c0011522:	83 c4 10             	add    esp,0x10
c0011525:	85 c0                	test   eax,eax
c0011527:	75 dc                	jne    c0011505 <SysIsATTY(regs*)+0x28>
c0011529:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001152e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011533:	83 c4 0c             	add    esp,0xc
c0011536:	c3                   	ret    

c0011537 <SysSeek(regs*)>:
c0011537:	53                   	push   ebx
c0011538:	83 ec 08             	sub    esp,0x8
c001153b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001153f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011542:	8d 50 fd             	lea    edx,[eax-0x3]
c0011545:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001154b:	77 32                	ja     c001157f <SysSeek(regs*)+0x48>
c001154d:	83 ec 0c             	sub    esp,0xc
c0011550:	50                   	push   eax
c0011551:	e8 51 7f ff ff       	call   c00094a7 <KeGetFileFromDescriptor(int)>
c0011556:	83 c4 0c             	add    esp,0xc
c0011559:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001155c:	31 db                	xor    ebx,ebx
c001155e:	53                   	push   ebx
c001155f:	51                   	push   ecx
c0011560:	50                   	push   eax
c0011561:	e8 a4 9d ff ff       	call   c000b30a <File::seek(unsigned long long)>
c0011566:	83 c4 10             	add    esp,0x10
c0011569:	85 c0                	test   eax,eax
c001156b:	0f 95 c0             	setne  al
c001156e:	31 d2                	xor    edx,edx
c0011570:	0f b6 c0             	movzx  eax,al
c0011573:	f7 d8                	neg    eax
c0011575:	83 d2 00             	adc    edx,0x0
c0011578:	83 c4 08             	add    esp,0x8
c001157b:	f7 da                	neg    edx
c001157d:	5b                   	pop    ebx
c001157e:	c3                   	ret    
c001157f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011584:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011589:	83 c4 08             	add    esp,0x8
c001158c:	5b                   	pop    ebx
c001158d:	c3                   	ret    

c001158e <SysTell(regs*)>:
c001158e:	53                   	push   ebx
c001158f:	83 ec 08             	sub    esp,0x8
c0011592:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011596:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011599:	83 f8 02             	cmp    eax,0x2
c001159c:	76 4e                	jbe    c00115ec <SysTell(regs*)+0x5e>
c001159e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00115a3:	76 19                	jbe    c00115be <SysTell(regs*)+0x30>
c00115a5:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00115a8:	31 d2                	xor    edx,edx
c00115aa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00115b0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00115b7:	31 c0                	xor    eax,eax
c00115b9:	83 c4 08             	add    esp,0x8
c00115bc:	5b                   	pop    ebx
c00115bd:	c3                   	ret    
c00115be:	83 ec 0c             	sub    esp,0xc
c00115c1:	50                   	push   eax
c00115c2:	e8 e0 7e ff ff       	call   c00094a7 <KeGetFileFromDescriptor(int)>
c00115c7:	5a                   	pop    edx
c00115c8:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00115cb:	59                   	pop    ecx
c00115cc:	53                   	push   ebx
c00115cd:	50                   	push   eax
c00115ce:	e8 8d 9d ff ff       	call   c000b360 <File::tell(unsigned long long*)>
c00115d3:	83 c4 10             	add    esp,0x10
c00115d6:	85 c0                	test   eax,eax
c00115d8:	0f 95 c0             	setne  al
c00115db:	31 d2                	xor    edx,edx
c00115dd:	0f b6 c0             	movzx  eax,al
c00115e0:	f7 d8                	neg    eax
c00115e2:	83 d2 00             	adc    edx,0x0
c00115e5:	83 c4 08             	add    esp,0x8
c00115e8:	f7 da                	neg    edx
c00115ea:	5b                   	pop    ebx
c00115eb:	c3                   	ret    
c00115ec:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00115f1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00115f6:	83 c4 08             	add    esp,0x8
c00115f9:	5b                   	pop    ebx
c00115fa:	c3                   	ret    

c00115fb <SysSize(regs*)>:
c00115fb:	53                   	push   ebx
c00115fc:	83 ec 18             	sub    esp,0x18
c00115ff:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011603:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011606:	83 f8 02             	cmp    eax,0x2
c0011609:	76 54                	jbe    c001165f <SysSize(regs*)+0x64>
c001160b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011610:	76 19                	jbe    c001162b <SysSize(regs*)+0x30>
c0011612:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011615:	31 d2                	xor    edx,edx
c0011617:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001161d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011624:	31 c0                	xor    eax,eax
c0011626:	83 c4 18             	add    esp,0x18
c0011629:	5b                   	pop    ebx
c001162a:	c3                   	ret    
c001162b:	83 ec 0c             	sub    esp,0xc
c001162e:	50                   	push   eax
c001162f:	e8 73 7e ff ff       	call   c00094a7 <KeGetFileFromDescriptor(int)>
c0011634:	83 c4 0c             	add    esp,0xc
c0011637:	8d 54 24 13          	lea    edx,[esp+0x13]
c001163b:	52                   	push   edx
c001163c:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001163f:	52                   	push   edx
c0011640:	50                   	push   eax
c0011641:	e8 b2 9e ff ff       	call   c000b4f8 <File::stat(unsigned long long*, bool*)>
c0011646:	83 c4 10             	add    esp,0x10
c0011649:	85 c0                	test   eax,eax
c001164b:	0f 95 c0             	setne  al
c001164e:	31 d2                	xor    edx,edx
c0011650:	0f b6 c0             	movzx  eax,al
c0011653:	f7 d8                	neg    eax
c0011655:	83 d2 00             	adc    edx,0x0
c0011658:	83 c4 18             	add    esp,0x18
c001165b:	f7 da                	neg    edx
c001165d:	5b                   	pop    ebx
c001165e:	c3                   	ret    
c001165f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011664:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011669:	83 c4 18             	add    esp,0x18
c001166c:	5b                   	pop    ebx
c001166d:	c3                   	ret    

c001166e <SysSizeFromFilename(regs*)>:
c001166e:	57                   	push   edi
c001166f:	56                   	push   esi
c0011670:	53                   	push   ebx
c0011671:	83 ec 20             	sub    esp,0x20
c0011674:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011678:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c001167b:	83 fb 02             	cmp    ebx,0x2
c001167e:	0f 86 8a 00 00 00    	jbe    c001170e <SysSizeFromFilename(regs*)+0xa0>
c0011684:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001168a:	76 1b                	jbe    c00116a7 <SysSizeFromFilename(regs*)+0x39>
c001168c:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001168f:	31 d2                	xor    edx,edx
c0011691:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011697:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001169e:	83 c4 20             	add    esp,0x20
c00116a1:	31 c0                	xor    eax,eax
c00116a3:	5b                   	pop    ebx
c00116a4:	5e                   	pop    esi
c00116a5:	5f                   	pop    edi
c00116a6:	c3                   	ret    
c00116a7:	83 ec 0c             	sub    esp,0xc
c00116aa:	68 14 01 00 00       	push   0x114
c00116af:	e8 fa 63 ff ff       	call   c0007aae <malloc>
c00116b4:	83 c4 0c             	add    esp,0xc
c00116b7:	89 c7                	mov    edi,eax
c00116b9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116be:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00116c1:	50                   	push   eax
c00116c2:	53                   	push   ebx
c00116c3:	57                   	push   edi
c00116c4:	e8 c7 9a ff ff       	call   c000b190 <File::File(char const*, Process*)>
c00116c9:	83 c4 0c             	add    esp,0xc
c00116cc:	8d 44 24 23          	lea    eax,[esp+0x23]
c00116d0:	50                   	push   eax
c00116d1:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c00116d4:	52                   	push   edx
c00116d5:	57                   	push   edi
c00116d6:	e8 1d 9e ff ff       	call   c000b4f8 <File::stat(unsigned long long*, bool*)>
c00116db:	83 c4 10             	add    esp,0x10
c00116de:	85 ff                	test   edi,edi
c00116e0:	74 14                	je     c00116f6 <SysSizeFromFilename(regs*)+0x88>
c00116e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00116e6:	8b 17                	mov    edx,DWORD PTR [edi]
c00116e8:	83 ec 0c             	sub    esp,0xc
c00116eb:	57                   	push   edi
c00116ec:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00116ef:	83 c4 10             	add    esp,0x10
c00116f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00116f6:	85 c0                	test   eax,eax
c00116f8:	0f 95 c0             	setne  al
c00116fb:	31 d2                	xor    edx,edx
c00116fd:	0f b6 c0             	movzx  eax,al
c0011700:	f7 d8                	neg    eax
c0011702:	83 d2 00             	adc    edx,0x0
c0011705:	83 c4 20             	add    esp,0x20
c0011708:	f7 da                	neg    edx
c001170a:	5b                   	pop    ebx
c001170b:	5e                   	pop    esi
c001170c:	5f                   	pop    edi
c001170d:	c3                   	ret    
c001170e:	83 c4 20             	add    esp,0x20
c0011711:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011716:	5b                   	pop    ebx
c0011717:	ba ff ff ff ff       	mov    edx,0xffffffff
c001171c:	5e                   	pop    esi
c001171d:	5f                   	pop    edi
c001171e:	c3                   	ret    

c001171f <SysClose(regs*)>:
c001171f:	53                   	push   ebx
c0011720:	83 ec 08             	sub    esp,0x8
c0011723:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011727:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001172a:	83 f8 02             	cmp    eax,0x2
c001172d:	76 41                	jbe    c0011770 <SysClose(regs*)+0x51>
c001172f:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0011735:	83 fa 01             	cmp    edx,0x1
c0011738:	76 2d                	jbe    c0011767 <SysClose(regs*)+0x48>
c001173a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001173f:	77 2f                	ja     c0011770 <SysClose(regs*)+0x51>
c0011741:	83 ec 0c             	sub    esp,0xc
c0011744:	50                   	push   eax
c0011745:	e8 5d 7d ff ff       	call   c00094a7 <KeGetFileFromDescriptor(int)>
c001174a:	89 c3                	mov    ebx,eax
c001174c:	89 04 24             	mov    DWORD PTR [esp],eax
c001174f:	e8 56 9b ff ff       	call   c000b2aa <File::close()>
c0011754:	83 c4 10             	add    esp,0x10
c0011757:	85 db                	test   ebx,ebx
c0011759:	74 0c                	je     c0011767 <SysClose(regs*)+0x48>
c001175b:	83 ec 0c             	sub    esp,0xc
c001175e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011760:	53                   	push   ebx
c0011761:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011764:	83 c4 10             	add    esp,0x10
c0011767:	31 c0                	xor    eax,eax
c0011769:	31 d2                	xor    edx,edx
c001176b:	83 c4 08             	add    esp,0x8
c001176e:	5b                   	pop    ebx
c001176f:	c3                   	ret    
c0011770:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011775:	ba ff ff ff ff       	mov    edx,0xffffffff
c001177a:	83 c4 08             	add    esp,0x8
c001177d:	5b                   	pop    ebx
c001177e:	c3                   	ret    

c001177f <SysOpenDir(regs*)>:
c001177f:	56                   	push   esi
c0011780:	53                   	push   ebx
c0011781:	83 ec 04             	sub    esp,0x4
c0011784:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011788:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001178b:	85 c9                	test   ecx,ecx
c001178d:	74 5d                	je     c00117ec <SysOpenDir(regs*)+0x6d>
c001178f:	83 ec 0c             	sub    esp,0xc
c0011792:	68 14 01 00 00       	push   0x114
c0011797:	e8 12 63 ff ff       	call   c0007aae <malloc>
c001179c:	83 c4 0c             	add    esp,0xc
c001179f:	89 c6                	mov    esi,eax
c00117a1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00117a6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00117a9:	50                   	push   eax
c00117aa:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00117ad:	52                   	push   edx
c00117ae:	56                   	push   esi
c00117af:	e8 02 9f ff ff       	call   c000b6b6 <Directory::Directory(char const*, Process*)>
c00117b4:	83 c4 10             	add    esp,0x10
c00117b7:	85 f6                	test   esi,esi
c00117b9:	74 31                	je     c00117ec <SysOpenDir(regs*)+0x6d>
c00117bb:	83 ec 0c             	sub    esp,0xc
c00117be:	56                   	push   esi
c00117bf:	e8 ae 9f ff ff       	call   c000b772 <Directory::open()>
c00117c4:	83 c4 10             	add    esp,0x10
c00117c7:	85 c0                	test   eax,eax
c00117c9:	75 21                	jne    c00117ec <SysOpenDir(regs*)+0x6d>
c00117cb:	83 ec 0c             	sub    esp,0xc
c00117ce:	56                   	push   esi
c00117cf:	e8 d6 79 ff ff       	call   c00091aa <UnixFile::getFileDescriptor()>
c00117d4:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00117d7:	83 c4 10             	add    esp,0x10
c00117da:	89 02                	mov    DWORD PTR [edx],eax
c00117dc:	c1 f8 1f             	sar    eax,0x1f
c00117df:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00117e2:	83 c4 04             	add    esp,0x4
c00117e5:	31 c0                	xor    eax,eax
c00117e7:	31 d2                	xor    edx,edx
c00117e9:	5b                   	pop    ebx
c00117ea:	5e                   	pop    esi
c00117eb:	c3                   	ret    
c00117ec:	83 c4 04             	add    esp,0x4
c00117ef:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00117f4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00117f9:	5b                   	pop    ebx
c00117fa:	5e                   	pop    esi
c00117fb:	c3                   	ret    

c00117fc <SysMakeDir(regs*)>:
c00117fc:	56                   	push   esi
c00117fd:	53                   	push   ebx
c00117fe:	83 ec 10             	sub    esp,0x10
c0011801:	68 14 01 00 00       	push   0x114
c0011806:	e8 a3 62 ff ff       	call   c0007aae <malloc>
c001180b:	83 c4 0c             	add    esp,0xc
c001180e:	89 c3                	mov    ebx,eax
c0011810:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011815:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011818:	50                   	push   eax
c0011819:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001181d:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0011820:	52                   	push   edx
c0011821:	53                   	push   ebx
c0011822:	e8 8f 9e ff ff       	call   c000b6b6 <Directory::Directory(char const*, Process*)>
c0011827:	83 c4 10             	add    esp,0x10
c001182a:	85 db                	test   ebx,ebx
c001182c:	74 2c                	je     c001185a <SysMakeDir(regs*)+0x5e>
c001182e:	83 ec 0c             	sub    esp,0xc
c0011831:	53                   	push   ebx
c0011832:	e8 1b a1 ff ff       	call   c000b952 <Directory::create()>
c0011837:	89 c6                	mov    esi,eax
c0011839:	8b 03                	mov    eax,DWORD PTR [ebx]
c001183b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001183e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011841:	83 c4 10             	add    esp,0x10
c0011844:	31 c0                	xor    eax,eax
c0011846:	85 f6                	test   esi,esi
c0011848:	0f 95 c0             	setne  al
c001184b:	31 d2                	xor    edx,edx
c001184d:	f7 d8                	neg    eax
c001184f:	83 d2 00             	adc    edx,0x0
c0011852:	83 c4 04             	add    esp,0x4
c0011855:	f7 da                	neg    edx
c0011857:	5b                   	pop    ebx
c0011858:	5e                   	pop    esi
c0011859:	c3                   	ret    
c001185a:	83 c4 04             	add    esp,0x4
c001185d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011862:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011867:	5b                   	pop    ebx
c0011868:	5e                   	pop    esi
c0011869:	c3                   	ret    

c001186a <SysCloseDir(regs*)>:
c001186a:	53                   	push   ebx
c001186b:	83 ec 08             	sub    esp,0x8
c001186e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011872:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011875:	8d 50 fd             	lea    edx,[eax-0x3]
c0011878:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001187e:	77 2f                	ja     c00118af <SysCloseDir(regs*)+0x45>
c0011880:	83 ec 0c             	sub    esp,0xc
c0011883:	50                   	push   eax
c0011884:	e8 1e 7c ff ff       	call   c00094a7 <KeGetFileFromDescriptor(int)>
c0011889:	89 c3                	mov    ebx,eax
c001188b:	89 04 24             	mov    DWORD PTR [esp],eax
c001188e:	e8 3b 9f ff ff       	call   c000b7ce <Directory::close()>
c0011893:	83 c4 10             	add    esp,0x10
c0011896:	85 db                	test   ebx,ebx
c0011898:	74 0c                	je     c00118a6 <SysCloseDir(regs*)+0x3c>
c001189a:	83 ec 0c             	sub    esp,0xc
c001189d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001189f:	53                   	push   ebx
c00118a0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00118a3:	83 c4 10             	add    esp,0x10
c00118a6:	31 c0                	xor    eax,eax
c00118a8:	31 d2                	xor    edx,edx
c00118aa:	83 c4 08             	add    esp,0x8
c00118ad:	5b                   	pop    ebx
c00118ae:	c3                   	ret    
c00118af:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00118b4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00118b9:	83 c4 08             	add    esp,0x8
c00118bc:	5b                   	pop    ebx
c00118bd:	c3                   	ret    

c00118be <SysWait(regs*)>:
c00118be:	83 ec 10             	sub    esp,0x10
c00118c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00118c5:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00118c8:	52                   	push   edx
c00118c9:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c00118cc:	51                   	push   ecx
c00118cd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00118d0:	50                   	push   eax
c00118d1:	e8 82 3d 00 00       	call   c0015658 <waitTask(int, int*, int)>
c00118d6:	83 c4 1c             	add    esp,0x1c
c00118d9:	89 c2                	mov    edx,eax
c00118db:	c1 fa 1f             	sar    edx,0x1f
c00118de:	c3                   	ret    

c00118df <SysNotImpl(regs*)>:
c00118df:	83 ec 18             	sub    esp,0x18
c00118e2:	68 82 15 02 c0       	push   0xc0021582
c00118e7:	e8 af f2 ff ff       	call   c0010b9b <KePanic(char const*)>
c00118ec:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00118f1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00118f6:	83 c4 1c             	add    esp,0x1c
c00118f9:	c3                   	ret    

c00118fa <SysPanic(regs*)>:
c00118fa:	83 ec 18             	sub    esp,0x18
c00118fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011901:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011904:	50                   	push   eax
c0011905:	e8 91 f2 ff ff       	call   c0010b9b <KePanic(char const*)>
c001190a:	b8 01 00 00 00       	mov    eax,0x1
c001190f:	31 d2                	xor    edx,edx
c0011911:	83 c4 1c             	add    esp,0x1c
c0011914:	c3                   	ret    

c0011915 <SysRmdir(regs*)>:
c0011915:	56                   	push   esi
c0011916:	53                   	push   ebx
c0011917:	83 ec 20             	sub    esp,0x20
c001191a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001191e:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011921:	68 14 01 00 00       	push   0x114
c0011926:	e8 83 61 ff ff       	call   c0007aae <malloc>
c001192b:	83 c4 0c             	add    esp,0xc
c001192e:	89 c3                	mov    ebx,eax
c0011930:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011935:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011938:	50                   	push   eax
c0011939:	56                   	push   esi
c001193a:	53                   	push   ebx
c001193b:	e8 50 98 ff ff       	call   c000b190 <File::File(char const*, Process*)>
c0011940:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011943:	e8 7c 9a ff ff       	call   c000b3c4 <File::unlink()>
c0011948:	83 c4 10             	add    esp,0x10
c001194b:	85 db                	test   ebx,ebx
c001194d:	74 14                	je     c0011963 <SysRmdir(regs*)+0x4e>
c001194f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011953:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011955:	83 ec 0c             	sub    esp,0xc
c0011958:	53                   	push   ebx
c0011959:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001195c:	83 c4 10             	add    esp,0x10
c001195f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011963:	85 c0                	test   eax,eax
c0011965:	0f 95 c0             	setne  al
c0011968:	31 d2                	xor    edx,edx
c001196a:	0f b6 c0             	movzx  eax,al
c001196d:	f7 d8                	neg    eax
c001196f:	83 d2 00             	adc    edx,0x0
c0011972:	83 c4 14             	add    esp,0x14
c0011975:	f7 da                	neg    edx
c0011977:	5b                   	pop    ebx
c0011978:	5e                   	pop    esi
c0011979:	c3                   	ret    

c001197a <SysUnlink(regs*)>:
c001197a:	56                   	push   esi
c001197b:	53                   	push   ebx
c001197c:	83 ec 20             	sub    esp,0x20
c001197f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011983:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011986:	68 14 01 00 00       	push   0x114
c001198b:	e8 1e 61 ff ff       	call   c0007aae <malloc>
c0011990:	83 c4 0c             	add    esp,0xc
c0011993:	89 c3                	mov    ebx,eax
c0011995:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001199a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001199d:	50                   	push   eax
c001199e:	56                   	push   esi
c001199f:	53                   	push   ebx
c00119a0:	e8 eb 97 ff ff       	call   c000b190 <File::File(char const*, Process*)>
c00119a5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00119a8:	e8 17 9a ff ff       	call   c000b3c4 <File::unlink()>
c00119ad:	83 c4 10             	add    esp,0x10
c00119b0:	85 db                	test   ebx,ebx
c00119b2:	74 14                	je     c00119c8 <SysUnlink(regs*)+0x4e>
c00119b4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00119b8:	8b 13                	mov    edx,DWORD PTR [ebx]
c00119ba:	83 ec 0c             	sub    esp,0xc
c00119bd:	53                   	push   ebx
c00119be:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00119c1:	83 c4 10             	add    esp,0x10
c00119c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119c8:	85 c0                	test   eax,eax
c00119ca:	0f 95 c0             	setne  al
c00119cd:	31 d2                	xor    edx,edx
c00119cf:	0f b6 c0             	movzx  eax,al
c00119d2:	f7 d8                	neg    eax
c00119d4:	83 d2 00             	adc    edx,0x0
c00119d7:	83 c4 14             	add    esp,0x14
c00119da:	f7 da                	neg    edx
c00119dc:	5b                   	pop    ebx
c00119dd:	5e                   	pop    esi
c00119de:	c3                   	ret    

c00119df <SysGetArgv(regs*)>:
c00119df:	83 ec 0c             	sub    esp,0xc
c00119e2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00119e6:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00119e9:	85 c0                	test   eax,eax
c00119eb:	78 2c                	js     c0011a19 <SysGetArgv(regs*)+0x3a>
c00119ed:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00119f3:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00119f6:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c00119fc:	7d 1b                	jge    c0011a19 <SysGetArgv(regs*)+0x3a>
c00119fe:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0011a05:	85 c0                	test   eax,eax
c0011a07:	74 18                	je     c0011a21 <SysGetArgv(regs*)+0x42>
c0011a09:	83 ec 08             	sub    esp,0x8
c0011a0c:	50                   	push   eax
c0011a0d:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0011a10:	50                   	push   eax
c0011a11:	e8 2a ec fe ff       	call   c0000640 <strcpy>
c0011a16:	83 c4 10             	add    esp,0x10
c0011a19:	31 c0                	xor    eax,eax
c0011a1b:	31 d2                	xor    edx,edx
c0011a1d:	83 c4 0c             	add    esp,0xc
c0011a20:	c3                   	ret    
c0011a21:	b8 01 00 00 00       	mov    eax,0x1
c0011a26:	31 d2                	xor    edx,edx
c0011a28:	83 c4 0c             	add    esp,0xc
c0011a2b:	c3                   	ret    

c0011a2c <SysUSleep(regs*)>:
c0011a2c:	83 ec 1c             	sub    esp,0x1c
c0011a2f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011a33:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0011a36:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0011a39:	6a 00                	push   0x0
c0011a3b:	6a 64                	push   0x64
c0011a3d:	52                   	push   edx
c0011a3e:	50                   	push   eax
c0011a3f:	e8 cc cf 00 00       	call   c001ea10 <__udivdi3>
c0011a44:	83 c4 14             	add    esp,0x14
c0011a47:	50                   	push   eax
c0011a48:	e8 ef 3c 00 00       	call   c001573c <milliTenthSleep(unsigned int)>
c0011a4d:	31 c0                	xor    eax,eax
c0011a4f:	31 d2                	xor    edx,edx
c0011a51:	83 c4 1c             	add    esp,0x1c
c0011a54:	c3                   	ret    

c0011a55 <SysSpawn(regs*)>:
c0011a55:	56                   	push   esi
c0011a56:	53                   	push   ebx
c0011a57:	83 ec 04             	sub    esp,0x4
c0011a5a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011a5e:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011a61:	85 f6                	test   esi,esi
c0011a63:	75 0a                	jne    c0011a6f <SysSpawn(regs*)+0x1a>
c0011a65:	83 c4 04             	add    esp,0x4
c0011a68:	31 c0                	xor    eax,eax
c0011a6a:	31 d2                	xor    edx,edx
c0011a6c:	5b                   	pop    ebx
c0011a6d:	5e                   	pop    esi
c0011a6e:	c3                   	ret    
c0011a6f:	83 ec 0c             	sub    esp,0xc
c0011a72:	68 24 07 00 00       	push   0x724
c0011a77:	e8 32 60 ff ff       	call   c0007aae <malloc>
c0011a7c:	83 c4 10             	add    esp,0x10
c0011a7f:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011a82:	89 c6                	mov    esi,eax
c0011a84:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011a87:	85 c9                	test   ecx,ecx
c0011a89:	75 39                	jne    c0011ac4 <SysSpawn(regs*)+0x6f>
c0011a8b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a90:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a93:	52                   	push   edx
c0011a94:	50                   	push   eax
c0011a95:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011a98:	50                   	push   eax
c0011a99:	56                   	push   esi
c0011a9a:	e8 ed 32 00 00       	call   c0014d8c <Process::Process(char const*, Process*, char**)>
c0011a9f:	83 c4 10             	add    esp,0x10
c0011aa2:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0011aa9:	75 ba                	jne    c0011a65 <SysSpawn(regs*)+0x10>
c0011aab:	83 ec 0c             	sub    esp,0xc
c0011aae:	56                   	push   esi
c0011aaf:	e8 14 38 00 00       	call   c00152c8 <Process::createUserThread()>
c0011ab4:	8b 06                	mov    eax,DWORD PTR [esi]
c0011ab6:	83 c4 10             	add    esp,0x10
c0011ab9:	89 c2                	mov    edx,eax
c0011abb:	83 c4 04             	add    esp,0x4
c0011abe:	c1 fa 1f             	sar    edx,0x1f
c0011ac1:	5b                   	pop    ebx
c0011ac2:	5e                   	pop    esi
c0011ac3:	c3                   	ret    
c0011ac4:	31 c0                	xor    eax,eax
c0011ac6:	eb cb                	jmp    c0011a93 <SysSpawn(regs*)+0x3e>

c0011ac8 <SysGetEnv(regs*)>:
c0011ac8:	57                   	push   edi
c0011ac9:	56                   	push   esi
c0011aca:	53                   	push   ebx
c0011acb:	83 ec 1c             	sub    esp,0x1c
c0011ace:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011ad2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ad7:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011ada:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011add:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0011ae0:	51                   	push   ecx
c0011ae1:	e8 6d ef ff ff       	call   c0010a53 <KeGetProcessTotalEnvCount(Process*)>
c0011ae6:	83 c4 10             	add    esp,0x10
c0011ae9:	39 c7                	cmp    edi,eax
c0011aeb:	7c 14                	jl     c0011b01 <SysGetEnv(regs*)+0x39>
c0011aed:	85 f6                	test   esi,esi
c0011aef:	75 0b                	jne    c0011afc <SysGetEnv(regs*)+0x34>
c0011af1:	83 c4 10             	add    esp,0x10
c0011af4:	31 c0                	xor    eax,eax
c0011af6:	5b                   	pop    ebx
c0011af7:	31 d2                	xor    edx,edx
c0011af9:	5e                   	pop    esi
c0011afa:	5f                   	pop    edi
c0011afb:	c3                   	ret    
c0011afc:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011aff:	eb f0                	jmp    c0011af1 <SysGetEnv(regs*)+0x29>
c0011b01:	8d 44 24 08          	lea    eax,[esp+0x8]
c0011b05:	83 ec 04             	sub    esp,0x4
c0011b08:	57                   	push   edi
c0011b09:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011b0f:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c0011b12:	57                   	push   edi
c0011b13:	50                   	push   eax
c0011b14:	e8 5a ef ff ff       	call   c0010a73 <KeGetProcessEnvPair(Process*, int)>
c0011b19:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011b1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011b20:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011b24:	83 c4 0c             	add    esp,0xc
c0011b27:	85 d2                	test   edx,edx
c0011b29:	75 23                	jne    c0011b4e <SysGetEnv(regs*)+0x86>
c0011b2b:	83 ec 0c             	sub    esp,0xc
c0011b2e:	50                   	push   eax
c0011b2f:	e8 3c ea fe ff       	call   c0000570 <strlen>
c0011b34:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011b37:	89 c3                	mov    ebx,eax
c0011b39:	e8 32 ea fe ff       	call   c0000570 <strlen>
c0011b3e:	83 c4 10             	add    esp,0x10
c0011b41:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0011b45:	83 c4 10             	add    esp,0x10
c0011b48:	31 d2                	xor    edx,edx
c0011b4a:	5b                   	pop    ebx
c0011b4b:	5e                   	pop    esi
c0011b4c:	5f                   	pop    edi
c0011b4d:	c3                   	ret    
c0011b4e:	83 ec 08             	sub    esp,0x8
c0011b51:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011b54:	50                   	push   eax
c0011b55:	56                   	push   esi
c0011b56:	e8 e5 ea fe ff       	call   c0000640 <strcpy>
c0011b5b:	58                   	pop    eax
c0011b5c:	5a                   	pop    edx
c0011b5d:	68 9c 15 02 c0       	push   0xc002159c
c0011b62:	56                   	push   esi
c0011b63:	e8 d8 ec fe ff       	call   c0000840 <strcat>
c0011b68:	59                   	pop    ecx
c0011b69:	5b                   	pop    ebx
c0011b6a:	57                   	push   edi
c0011b6b:	56                   	push   esi
c0011b6c:	e8 cf ec fe ff       	call   c0000840 <strcat>
c0011b71:	83 c4 10             	add    esp,0x10
c0011b74:	e9 78 ff ff ff       	jmp    c0011af1 <SysGetEnv(regs*)+0x29>

c0011b79 <SysSetFatAttrib(regs*)>:
c0011b79:	57                   	push   edi
c0011b7a:	56                   	push   esi
c0011b7b:	53                   	push   ebx
c0011b7c:	83 ec 1c             	sub    esp,0x1c
c0011b7f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0011b83:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0011b86:	68 14 01 00 00       	push   0x114
c0011b8b:	e8 1e 5f ff ff       	call   c0007aae <malloc>
c0011b90:	83 c4 0c             	add    esp,0xc
c0011b93:	89 c3                	mov    ebx,eax
c0011b95:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b9a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b9d:	50                   	push   eax
c0011b9e:	57                   	push   edi
c0011b9f:	53                   	push   ebx
c0011ba0:	e8 eb 95 ff ff       	call   c000b190 <File::File(char const*, Process*)>
c0011ba5:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011ba8:	83 c4 0c             	add    esp,0xc
c0011bab:	0f b6 d4             	movzx  edx,ah
c0011bae:	0f b6 c0             	movzx  eax,al
c0011bb1:	52                   	push   edx
c0011bb2:	50                   	push   eax
c0011bb3:	53                   	push   ebx
c0011bb4:	e8 a5 98 ff ff       	call   c000b45e <File::chfatattr(unsigned char, unsigned char)>
c0011bb9:	83 c4 10             	add    esp,0x10
c0011bbc:	85 db                	test   ebx,ebx
c0011bbe:	74 14                	je     c0011bd4 <SysSetFatAttrib(regs*)+0x5b>
c0011bc0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011bc4:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011bc6:	83 ec 0c             	sub    esp,0xc
c0011bc9:	53                   	push   ebx
c0011bca:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011bcd:	83 c4 10             	add    esp,0x10
c0011bd0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011bd4:	85 c0                	test   eax,eax
c0011bd6:	0f 95 c0             	setne  al
c0011bd9:	31 d2                	xor    edx,edx
c0011bdb:	0f b6 c0             	movzx  eax,al
c0011bde:	f7 d8                	neg    eax
c0011be0:	83 d2 00             	adc    edx,0x0
c0011be3:	83 c4 10             	add    esp,0x10
c0011be6:	f7 da                	neg    edx
c0011be8:	5b                   	pop    ebx
c0011be9:	5e                   	pop    esi
c0011bea:	5f                   	pop    edi
c0011beb:	c3                   	ret    

c0011bec <SysPipe(regs*)>:
c0011bec:	57                   	push   edi
c0011bed:	56                   	push   esi
c0011bee:	53                   	push   ebx
c0011bef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011bf3:	83 ec 0c             	sub    esp,0xc
c0011bf6:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0011bf9:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011bfc:	6a 20                	push   0x20
c0011bfe:	e8 ab 5e ff ff       	call   c0007aae <malloc>
c0011c03:	89 c3                	mov    ebx,eax
c0011c05:	58                   	pop    eax
c0011c06:	5a                   	pop    edx
c0011c07:	68 00 50 00 00       	push   0x5000
c0011c0c:	53                   	push   ebx
c0011c0d:	e8 08 68 ff ff       	call   c000841a <Pipe::Pipe(int)>
c0011c12:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011c15:	e8 90 75 ff ff       	call   c00091aa <UnixFile::getFileDescriptor()>
c0011c1a:	89 07                	mov    DWORD PTR [edi],eax
c0011c1c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011c1f:	e8 86 75 ff ff       	call   c00091aa <UnixFile::getFileDescriptor()>
c0011c24:	83 c4 10             	add    esp,0x10
c0011c27:	89 06                	mov    DWORD PTR [esi],eax
c0011c29:	31 d2                	xor    edx,edx
c0011c2b:	5b                   	pop    ebx
c0011c2c:	31 c0                	xor    eax,eax
c0011c2e:	5e                   	pop    esi
c0011c2f:	5f                   	pop    edi
c0011c30:	c3                   	ret    

c0011c31 <SysGetUnixTime(regs*)>:
c0011c31:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0011c36:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0011c3c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011c40:	e9 51 9f ff ff       	jmp    c000bb96 <Clock::timeInSecondsLocal()>

c0011c45 <string_ends_with(char const*, char const*)>:
c0011c45:	57                   	push   edi
c0011c46:	56                   	push   esi
c0011c47:	53                   	push   ebx
c0011c48:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011c4c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0011c50:	83 ec 0c             	sub    esp,0xc
c0011c53:	53                   	push   ebx
c0011c54:	e8 17 e9 fe ff       	call   c0000570 <strlen>
c0011c59:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011c5c:	89 c6                	mov    esi,eax
c0011c5e:	e8 0d e9 fe ff       	call   c0000570 <strlen>
c0011c63:	83 c4 10             	add    esp,0x10
c0011c66:	39 c6                	cmp    esi,eax
c0011c68:	7d 06                	jge    c0011c70 <string_ends_with(char const*, char const*)+0x2b>
c0011c6a:	5b                   	pop    ebx
c0011c6b:	31 c0                	xor    eax,eax
c0011c6d:	5e                   	pop    esi
c0011c6e:	5f                   	pop    edi
c0011c6f:	c3                   	ret    
c0011c70:	83 ec 08             	sub    esp,0x8
c0011c73:	29 c6                	sub    esi,eax
c0011c75:	57                   	push   edi
c0011c76:	01 f3                	add    ebx,esi
c0011c78:	53                   	push   ebx
c0011c79:	e8 d2 ea fe ff       	call   c0000750 <strcmp>
c0011c7e:	83 c4 10             	add    esp,0x10
c0011c81:	85 c0                	test   eax,eax
c0011c83:	5b                   	pop    ebx
c0011c84:	0f 94 c0             	sete   al
c0011c87:	5e                   	pop    esi
c0011c88:	0f b6 c0             	movzx  eax,al
c0011c8b:	5f                   	pop    edi
c0011c8c:	c3                   	ret    

c0011c8d <SysOpen(regs*)>:
c0011c8d:	56                   	push   esi
c0011c8e:	53                   	push   ebx
c0011c8f:	81 ec 04 01 00 00    	sub    esp,0x104
c0011c95:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0011c9c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011c9f:	85 c0                	test   eax,eax
c0011ca1:	0f 84 bd 01 00 00    	je     c0011e64 <SysOpen(regs*)+0x1d7>
c0011ca7:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011caa:	85 c0                	test   eax,eax
c0011cac:	0f 84 b2 01 00 00    	je     c0011e64 <SysOpen(regs*)+0x1d7>
c0011cb2:	83 ec 04             	sub    esp,0x4
c0011cb5:	68 9e 15 02 c0       	push   0xc002159e
c0011cba:	50                   	push   eax
c0011cbb:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011cbf:	56                   	push   esi
c0011cc0:	e8 15 93 ff ff       	call   c000afda <Fs::standardiseFiles(char*, char const*, char const*)>
c0011cc5:	89 34 24             	mov    DWORD PTR [esp],esi
c0011cc8:	e8 a3 e8 fe ff       	call   c0000570 <strlen>
c0011ccd:	83 c4 10             	add    esp,0x10
c0011cd0:	83 e8 01             	sub    eax,0x1
c0011cd3:	74 21                	je     c0011cf6 <SysOpen(regs*)+0x69>
c0011cd5:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0011cd9:	eb 12                	jmp    c0011ced <SysOpen(regs*)+0x60>
c0011cdb:	83 fa 3a             	cmp    edx,0x3a
c0011cde:	74 12                	je     c0011cf2 <SysOpen(regs*)+0x65>
c0011ce0:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0011ce4:	83 e8 01             	sub    eax,0x1
c0011ce7:	74 0d                	je     c0011cf6 <SysOpen(regs*)+0x69>
c0011ce9:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0011ced:	83 fa 2e             	cmp    edx,0x2e
c0011cf0:	75 e9                	jne    c0011cdb <SysOpen(regs*)+0x4e>
c0011cf2:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0011cf6:	83 ec 08             	sub    esp,0x8
c0011cf9:	68 a2 15 02 c0       	push   0xc00215a2
c0011cfe:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011d01:	50                   	push   eax
c0011d02:	e8 3e ff ff ff       	call   c0011c45 <string_ends_with(char const*, char const*)>
c0011d07:	83 c4 10             	add    esp,0x10
c0011d0a:	85 c0                	test   eax,eax
c0011d0c:	74 1d                	je     c0011d2b <SysOpen(regs*)+0x9e>
c0011d0e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011d11:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0011d17:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011d1e:	81 c4 04 01 00 00    	add    esp,0x104
c0011d24:	31 c0                	xor    eax,eax
c0011d26:	31 d2                	xor    edx,edx
c0011d28:	5b                   	pop    ebx
c0011d29:	5e                   	pop    esi
c0011d2a:	c3                   	ret    
c0011d2b:	83 ec 08             	sub    esp,0x8
c0011d2e:	68 a7 15 02 c0       	push   0xc00215a7
c0011d33:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011d36:	50                   	push   eax
c0011d37:	e8 09 ff ff ff       	call   c0011c45 <string_ends_with(char const*, char const*)>
c0011d3c:	83 c4 10             	add    esp,0x10
c0011d3f:	85 c0                	test   eax,eax
c0011d41:	75 cb                	jne    c0011d0e <SysOpen(regs*)+0x81>
c0011d43:	83 ec 08             	sub    esp,0x8
c0011d46:	68 a3 15 02 c0       	push   0xc00215a3
c0011d4b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011d4e:	50                   	push   eax
c0011d4f:	e8 fc e9 fe ff       	call   c0000750 <strcmp>
c0011d54:	83 c4 10             	add    esp,0x10
c0011d57:	85 c0                	test   eax,eax
c0011d59:	74 b3                	je     c0011d0e <SysOpen(regs*)+0x81>
c0011d5b:	83 ec 08             	sub    esp,0x8
c0011d5e:	68 a2 15 02 c0       	push   0xc00215a2
c0011d63:	56                   	push   esi
c0011d64:	e8 dc fe ff ff       	call   c0011c45 <string_ends_with(char const*, char const*)>
c0011d69:	83 c4 10             	add    esp,0x10
c0011d6c:	85 c0                	test   eax,eax
c0011d6e:	75 9e                	jne    c0011d0e <SysOpen(regs*)+0x81>
c0011d70:	83 ec 08             	sub    esp,0x8
c0011d73:	68 ac 15 02 c0       	push   0xc00215ac
c0011d78:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011d7b:	50                   	push   eax
c0011d7c:	e8 c4 fe ff ff       	call   c0011c45 <string_ends_with(char const*, char const*)>
c0011d81:	83 c4 10             	add    esp,0x10
c0011d84:	85 c0                	test   eax,eax
c0011d86:	0f 85 eb 00 00 00    	jne    c0011e77 <SysOpen(regs*)+0x1ea>
c0011d8c:	83 ec 08             	sub    esp,0x8
c0011d8f:	68 b1 15 02 c0       	push   0xc00215b1
c0011d94:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011d97:	50                   	push   eax
c0011d98:	e8 a8 fe ff ff       	call   c0011c45 <string_ends_with(char const*, char const*)>
c0011d9d:	83 c4 10             	add    esp,0x10
c0011da0:	85 c0                	test   eax,eax
c0011da2:	0f 85 cf 00 00 00    	jne    c0011e77 <SysOpen(regs*)+0x1ea>
c0011da8:	83 ec 08             	sub    esp,0x8
c0011dab:	68 ad 15 02 c0       	push   0xc00215ad
c0011db0:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011db3:	51                   	push   ecx
c0011db4:	e8 97 e9 fe ff       	call   c0000750 <strcmp>
c0011db9:	83 c4 10             	add    esp,0x10
c0011dbc:	85 c0                	test   eax,eax
c0011dbe:	0f 84 b3 00 00 00    	je     c0011e77 <SysOpen(regs*)+0x1ea>
c0011dc4:	83 ec 08             	sub    esp,0x8
c0011dc7:	68 ac 15 02 c0       	push   0xc00215ac
c0011dcc:	56                   	push   esi
c0011dcd:	e8 73 fe ff ff       	call   c0011c45 <string_ends_with(char const*, char const*)>
c0011dd2:	83 c4 10             	add    esp,0x10
c0011dd5:	85 c0                	test   eax,eax
c0011dd7:	0f 85 9a 00 00 00    	jne    c0011e77 <SysOpen(regs*)+0x1ea>
c0011ddd:	83 ec 0c             	sub    esp,0xc
c0011de0:	68 14 01 00 00       	push   0x114
c0011de5:	e8 c4 5c ff ff       	call   c0007aae <malloc>
c0011dea:	83 c4 0c             	add    esp,0xc
c0011ded:	89 c6                	mov    esi,eax
c0011def:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011df4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011df7:	50                   	push   eax
c0011df8:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011dfb:	52                   	push   edx
c0011dfc:	56                   	push   esi
c0011dfd:	e8 8e 93 ff ff       	call   c000b190 <File::File(char const*, Process*)>
c0011e02:	83 c4 10             	add    esp,0x10
c0011e05:	85 f6                	test   esi,esi
c0011e07:	74 5b                	je     c0011e64 <SysOpen(regs*)+0x1d7>
c0011e09:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011e0c:	0f b6 c2             	movzx  eax,dl
c0011e0f:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0011e12:	89 d0                	mov    eax,edx
c0011e14:	83 e0 01             	and    eax,0x1
c0011e17:	f6 c2 02             	test   dl,0x2
c0011e1a:	74 03                	je     c0011e1f <SysOpen(regs*)+0x192>
c0011e1c:	83 c8 02             	or     eax,0x2
c0011e1f:	f6 c2 04             	test   dl,0x4
c0011e22:	74 03                	je     c0011e27 <SysOpen(regs*)+0x19a>
c0011e24:	83 c8 04             	or     eax,0x4
c0011e27:	f6 c2 08             	test   dl,0x8
c0011e2a:	74 03                	je     c0011e2f <SysOpen(regs*)+0x1a2>
c0011e2c:	83 c8 0a             	or     eax,0xa
c0011e2f:	80 e2 10             	and    dl,0x10
c0011e32:	74 03                	je     c0011e37 <SysOpen(regs*)+0x1aa>
c0011e34:	83 c8 12             	or     eax,0x12
c0011e37:	83 ec 08             	sub    esp,0x8
c0011e3a:	50                   	push   eax
c0011e3b:	56                   	push   esi
c0011e3c:	e8 0b 94 ff ff       	call   c000b24c <File::open(FileOpenMode)>
c0011e41:	83 c4 10             	add    esp,0x10
c0011e44:	85 c0                	test   eax,eax
c0011e46:	75 1c                	jne    c0011e64 <SysOpen(regs*)+0x1d7>
c0011e48:	83 ec 0c             	sub    esp,0xc
c0011e4b:	56                   	push   esi
c0011e4c:	e8 59 73 ff ff       	call   c00091aa <UnixFile::getFileDescriptor()>
c0011e51:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011e54:	83 c4 10             	add    esp,0x10
c0011e57:	89 02                	mov    DWORD PTR [edx],eax
c0011e59:	c1 f8 1f             	sar    eax,0x1f
c0011e5c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011e5f:	e9 ba fe ff ff       	jmp    c0011d1e <SysOpen(regs*)+0x91>
c0011e64:	81 c4 04 01 00 00    	add    esp,0x104
c0011e6a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011e6f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e74:	5b                   	pop    ebx
c0011e75:	5e                   	pop    esi
c0011e76:	c3                   	ret    
c0011e77:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011e7a:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0011e80:	e9 92 fe ff ff       	jmp    c0011d17 <SysOpen(regs*)+0x8a>

c0011e85 <KeSystemCall(regs*, void*)>:
c0011e85:	53                   	push   ebx
c0011e86:	83 ec 08             	sub    esp,0x8
c0011e89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011e8d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0011e90:	83 f8 3b             	cmp    eax,0x3b
c0011e93:	77 16                	ja     c0011eab <KeSystemCall(regs*, void*)+0x26>
c0011e95:	8b 14 85 e0 2a 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd520]
c0011e9c:	85 d2                	test   edx,edx
c0011e9e:	74 0b                	je     c0011eab <KeSystemCall(regs*, void*)+0x26>
c0011ea0:	83 ec 0c             	sub    esp,0xc
c0011ea3:	53                   	push   ebx
c0011ea4:	ff d2                	call   edx
c0011ea6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0011ea9:	eb 0d                	jmp    c0011eb8 <KeSystemCall(regs*, void*)+0x33>
c0011eab:	52                   	push   edx
c0011eac:	52                   	push   edx
c0011ead:	50                   	push   eax
c0011eae:	68 b6 15 02 c0       	push   0xc00215b6
c0011eb3:	e8 81 8a ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0011eb8:	83 c4 10             	add    esp,0x10
c0011ebb:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011ec0:	31 d2                	xor    edx,edx
c0011ec2:	83 c4 08             	add    esp,0x8
c0011ec5:	5b                   	pop    ebx
c0011ec6:	c3                   	ret    
c0011ec7:	90                   	nop

c0011ec8 <KeSwitchEndian16(unsigned short)>:
c0011ec8:	83 ec 04             	sub    esp,0x4
c0011ecb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011ecf:	66 89 04 24          	mov    WORD PTR [esp],ax
c0011ed3:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0011ed7:	c1 f8 08             	sar    eax,0x8
c0011eda:	89 c2                	mov    edx,eax
c0011edc:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0011ee0:	c1 e0 08             	shl    eax,0x8
c0011ee3:	09 d0                	or     eax,edx
c0011ee5:	83 c4 04             	add    esp,0x4
c0011ee8:	c3                   	ret    
c0011ee9:	8d 76 00             	lea    esi,[esi+0x0]

c0011eec <KeSwitchEndian32(unsigned int)>:
c0011eec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ef0:	c1 e8 18             	shr    eax,0x18
c0011ef3:	89 c2                	mov    edx,eax
c0011ef5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ef9:	c1 e0 08             	shl    eax,0x8
c0011efc:	25 00 00 ff 00       	and    eax,0xff0000
c0011f01:	09 c2                	or     edx,eax
c0011f03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f07:	c1 e8 08             	shr    eax,0x8
c0011f0a:	25 00 ff 00 00       	and    eax,0xff00
c0011f0f:	09 c2                	or     edx,eax
c0011f11:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f15:	c1 e0 18             	shl    eax,0x18
c0011f18:	09 d0                	or     eax,edx
c0011f1a:	c3                   	ret    
c0011f1b:	90                   	nop

c0011f1c <EthernetCRC32(unsigned char*, int)>:
c0011f1c:	83 ec 10             	sub    esp,0x10
c0011f1f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0011f24:	75 0a                	jne    c0011f30 <EthernetCRC32(unsigned char*, int)+0x14>
c0011f26:	b8 00 00 00 00       	mov    eax,0x0
c0011f2b:	e9 8c 00 00 00       	jmp    c0011fbc <EthernetCRC32(unsigned char*, int)+0xa0>
c0011f30:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0011f35:	7f 09                	jg     c0011f40 <EthernetCRC32(unsigned char*, int)+0x24>
c0011f37:	b8 00 00 00 00       	mov    eax,0x0
c0011f3c:	eb 7e                	jmp    c0011fbc <EthernetCRC32(unsigned char*, int)+0xa0>
c0011f3e:	66 90                	xchg   ax,ax
c0011f40:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0011f48:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011f50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011f54:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0011f58:	7d 5a                	jge    c0011fb4 <EthernetCRC32(unsigned char*, int)+0x98>
c0011f5a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011f5e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011f62:	01 d0                	add    eax,edx
c0011f64:	8a 00                	mov    al,BYTE PTR [eax]
c0011f66:	0f b6 c0             	movzx  eax,al
c0011f69:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0011f6d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011f75:	8d 76 00             	lea    esi,[esi+0x0]
c0011f78:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0011f7d:	7f 2d                	jg     c0011fac <EthernetCRC32(unsigned char*, int)+0x90>
c0011f7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f83:	83 e0 01             	and    eax,0x1
c0011f86:	74 10                	je     c0011f98 <EthernetCRC32(unsigned char*, int)+0x7c>
c0011f88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f8c:	d1 e8                	shr    eax,1
c0011f8e:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0011f93:	eb 0b                	jmp    c0011fa0 <EthernetCRC32(unsigned char*, int)+0x84>
c0011f95:	8d 76 00             	lea    esi,[esi+0x0]
c0011f98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f9c:	d1 e8                	shr    eax,1
c0011f9e:	66 90                	xchg   ax,ax
c0011fa0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011fa4:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0011fa9:	eb cd                	jmp    c0011f78 <EthernetCRC32(unsigned char*, int)+0x5c>
c0011fab:	90                   	nop
c0011fac:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0011fb1:	eb 9d                	jmp    c0011f50 <EthernetCRC32(unsigned char*, int)+0x34>
c0011fb3:	90                   	nop
c0011fb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011fb8:	f7 d0                	not    eax
c0011fba:	66 90                	xchg   ax,ax
c0011fbc:	83 c4 10             	add    esp,0x10
c0011fbf:	c3                   	ret    

c0011fc0 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0011fc0:	83 ec 2c             	sub    esp,0x2c
c0011fc3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011fc7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011fcc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011fd0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011fd4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011fd8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011fdb:	0f b7 c0             	movzx  eax,ax
c0011fde:	3d 06 08 00 00       	cmp    eax,0x806
c0011fe3:	75 13                	jne    c0011ff8 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0011fe5:	83 ec 0c             	sub    esp,0xc
c0011fe8:	68 ca 15 02 c0       	push   0xc00215ca
c0011fed:	e8 47 89 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0011ff2:	83 c4 10             	add    esp,0x10
c0011ff5:	eb 25                	jmp    c001201c <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0011ff7:	90                   	nop
c0011ff8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011ffc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011fff:	0f b7 c0             	movzx  eax,ax
c0012002:	3d 00 08 00 00       	cmp    eax,0x800
c0012007:	75 13                	jne    c001201c <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012009:	83 ec 0c             	sub    esp,0xc
c001200c:	68 e0 15 02 c0       	push   0xc00215e0
c0012011:	e8 23 89 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0012016:	83 c4 10             	add    esp,0x10
c0012019:	8d 76 00             	lea    esi,[esi+0x0]
c001201c:	90                   	nop
c001201d:	83 c4 2c             	add    esp,0x2c
c0012020:	c3                   	ret    

c0012021 <CmOpen(char const*)>:
c0012021:	57                   	push   edi
c0012022:	56                   	push   esi
c0012023:	53                   	push   ebx
c0012024:	83 ec 1c             	sub    esp,0x1c
c0012027:	6a 30                	push   0x30
c0012029:	e8 80 5a ff ff       	call   c0007aae <malloc>
c001202e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012035:	89 c3                	mov    ebx,eax
c0012037:	e8 72 5a ff ff       	call   c0007aae <malloc>
c001203c:	83 c4 0c             	add    esp,0xc
c001203f:	89 c6                	mov    esi,eax
c0012041:	ff 35 90 91 02 c0    	push   DWORD PTR ds:0xc0029190
c0012047:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001204b:	50                   	push   eax
c001204c:	e8 3f 91 ff ff       	call   c000b190 <File::File(char const*, Process*)>
c0012051:	83 c4 0c             	add    esp,0xc
c0012054:	89 33                	mov    DWORD PTR [ebx],esi
c0012056:	8d 44 24 07          	lea    eax,[esp+0x7]
c001205a:	50                   	push   eax
c001205b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001205f:	50                   	push   eax
c0012060:	56                   	push   esi
c0012061:	e8 92 94 ff ff       	call   c000b4f8 <File::stat(unsigned long long*, bool*)>
c0012066:	5a                   	pop    edx
c0012067:	59                   	pop    ecx
c0012068:	6a 01                	push   0x1
c001206a:	ff 33                	push   DWORD PTR [ebx]
c001206c:	e8 db 91 ff ff       	call   c000b24c <File::open(FileOpenMode)>
c0012071:	5e                   	pop    esi
c0012072:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012076:	e8 33 5a ff ff       	call   c0007aae <malloc>
c001207b:	5a                   	pop    edx
c001207c:	89 c7                	mov    edi,eax
c001207e:	8d 74 24 10          	lea    esi,[esp+0x10]
c0012082:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012084:	8b 10                	mov    edx,DWORD PTR [eax]
c0012086:	56                   	push   esi
c0012087:	57                   	push   edi
c0012088:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001208c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012090:	50                   	push   eax
c0012091:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012094:	83 c4 14             	add    esp,0x14
c0012097:	ff 33                	push   DWORD PTR [ebx]
c0012099:	e8 0c 92 ff ff       	call   c000b2aa <File::close()>
c001209e:	59                   	pop    ecx
c001209f:	58                   	pop    eax
c00120a0:	6a 13                	push   0x13
c00120a2:	ff 33                	push   DWORD PTR [ebx]
c00120a4:	e8 a3 91 ff ff       	call   c000b24c <File::open(FileOpenMode)>
c00120a9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00120ab:	8b 10                	mov    edx,DWORD PTR [eax]
c00120ad:	89 34 24             	mov    DWORD PTR [esp],esi
c00120b0:	57                   	push   edi
c00120b1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00120b5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00120b9:	50                   	push   eax
c00120ba:	ff 52 10             	call   DWORD PTR [edx+0x10]
c00120bd:	83 c4 14             	add    esp,0x14
c00120c0:	57                   	push   edi
c00120c1:	e8 f8 59 ff ff       	call   c0007abe <free>
c00120c6:	83 c4 10             	add    esp,0x10
c00120c9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00120cc:	75 10                	jne    c00120de <CmOpen(char const*)+0xbd>
c00120ce:	83 ec 0c             	sub    esp,0xc
c00120d1:	68 f5 15 02 c0       	push   0xc00215f5
c00120d6:	e8 c0 ea ff ff       	call   c0010b9b <KePanic(char const*)>
c00120db:	83 c4 10             	add    esp,0x10
c00120de:	8d 7b 05             	lea    edi,[ebx+0x5]
c00120e1:	50                   	push   eax
c00120e2:	6a 00                	push   0x0
c00120e4:	6a 00                	push   0x0
c00120e6:	ff 33                	push   DWORD PTR [ebx]
c00120e8:	e8 1d 92 ff ff       	call   c000b30a <File::seek(unsigned long long)>
c00120ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00120ef:	8b 10                	mov    edx,DWORD PTR [eax]
c00120f1:	89 34 24             	mov    DWORD PTR [esp],esi
c00120f4:	57                   	push   edi
c00120f5:	6a 00                	push   0x0
c00120f7:	6a 2b                	push   0x2b
c00120f9:	50                   	push   eax
c00120fa:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00120fd:	83 c4 1c             	add    esp,0x1c
c0012100:	6a 00                	push   0x0
c0012102:	6a 00                	push   0x0
c0012104:	ff 33                	push   DWORD PTR [ebx]
c0012106:	e8 ff 91 ff ff       	call   c000b30a <File::seek(unsigned long long)>
c001210b:	83 c4 0c             	add    esp,0xc
c001210e:	6a 08                	push   0x8
c0012110:	68 06 16 02 c0       	push   0xc0021606
c0012115:	57                   	push   edi
c0012116:	e8 65 e2 fe ff       	call   c0000380 <memcmp>
c001211b:	83 c4 10             	add    esp,0x10
c001211e:	85 c0                	test   eax,eax
c0012120:	74 10                	je     c0012132 <CmOpen(char const*)+0x111>
c0012122:	83 ec 0c             	sub    esp,0xc
c0012125:	68 0f 16 02 c0       	push   0xc002160f
c001212a:	e8 6c ea ff ff       	call   c0010b9b <KePanic(char const*)>
c001212f:	83 c4 10             	add    esp,0x10
c0012132:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0012136:	89 d8                	mov    eax,ebx
c0012138:	83 c4 10             	add    esp,0x10
c001213b:	5b                   	pop    ebx
c001213c:	5e                   	pop    esi
c001213d:	5f                   	pop    edi
c001213e:	c3                   	ret    

c001213f <CmClose(Reghive_Tag*)>:
c001213f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012143:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012147:	74 0b                	je     c0012154 <CmClose(Reghive_Tag*)+0x15>
c0012149:	8b 00                	mov    eax,DWORD PTR [eax]
c001214b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001214f:	e9 56 91 ff ff       	jmp    c000b2aa <File::close()>
c0012154:	c3                   	ret    

c0012155 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0012155:	53                   	push   ebx
c0012156:	83 ec 18             	sub    esp,0x18
c0012159:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001215d:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012161:	74 29                	je     c001218c <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012163:	50                   	push   eax
c0012164:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012169:	99                   	cdq    
c001216a:	52                   	push   edx
c001216b:	50                   	push   eax
c001216c:	ff 33                	push   DWORD PTR [ebx]
c001216e:	e8 97 91 ff ff       	call   c000b30a <File::seek(unsigned long long)>
c0012173:	5a                   	pop    edx
c0012174:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012176:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001217a:	8b 10                	mov    edx,DWORD PTR [eax]
c001217c:	51                   	push   ecx
c001217d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012181:	6a 00                	push   0x0
c0012183:	6a 2b                	push   0x2b
c0012185:	50                   	push   eax
c0012186:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012189:	83 c4 20             	add    esp,0x20
c001218c:	83 c4 18             	add    esp,0x18
c001218f:	5b                   	pop    ebx
c0012190:	c3                   	ret    

c0012191 <CmGetString(Reghive_Tag*, int, char*)>:
c0012191:	55                   	push   ebp
c0012192:	57                   	push   edi
c0012193:	56                   	push   esi
c0012194:	53                   	push   ebx
c0012195:	31 db                	xor    ebx,ebx
c0012197:	83 ec 70             	sub    esp,0x70
c001219a:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c00121a1:	8d 44 24 0e          	lea    eax,[esp+0xe]
c00121a5:	50                   	push   eax
c00121a6:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c00121ad:	55                   	push   ebp
c00121ae:	e8 a2 ff ff ff       	call   c0012155 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00121b3:	83 c4 10             	add    esp,0x10
c00121b6:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c00121bb:	c1 e0 08             	shl    eax,0x8
c00121be:	89 c2                	mov    edx,eax
c00121c0:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c00121c5:	09 d0                	or     eax,edx
c00121c7:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c00121cc:	c1 e0 08             	shl    eax,0x8
c00121cf:	09 d0                	or     eax,edx
c00121d1:	74 25                	je     c00121f8 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c00121d3:	6b fb 0d             	imul   edi,ebx,0xd
c00121d6:	52                   	push   edx
c00121d7:	8d 54 24 39          	lea    edx,[esp+0x39]
c00121db:	52                   	push   edx
c00121dc:	50                   	push   eax
c00121dd:	55                   	push   ebp
c00121de:	e8 72 ff ff ff       	call   c0012155 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00121e3:	8d 74 24 49          	lea    esi,[esp+0x49]
c00121e7:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c00121ee:	b9 27 00 00 00       	mov    ecx,0x27
c00121f3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00121f5:	83 c4 10             	add    esp,0x10
c00121f8:	83 c3 03             	add    ebx,0x3
c00121fb:	83 fb 15             	cmp    ebx,0x15
c00121fe:	75 b6                	jne    c00121b6 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0012200:	83 c4 6c             	add    esp,0x6c
c0012203:	5b                   	pop    ebx
c0012204:	5e                   	pop    esi
c0012205:	5f                   	pop    edi
c0012206:	5d                   	pop    ebp
c0012207:	c3                   	ret    

c0012208 <CmEnterDirectory(Reghive_Tag*, int)>:
c0012208:	83 ec 40             	sub    esp,0x40
c001220b:	8d 44 24 09          	lea    eax,[esp+0x9]
c001220f:	50                   	push   eax
c0012210:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012214:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012218:	e8 38 ff ff ff       	call   c0012155 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001221d:	83 c4 10             	add    esp,0x10
c0012220:	83 c8 ff             	or     eax,0xffffffff
c0012223:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0012228:	75 19                	jne    c0012243 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c001222a:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c001222f:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0012234:	c1 e0 08             	shl    eax,0x8
c0012237:	09 c2                	or     edx,eax
c0012239:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c001223e:	c1 e0 10             	shl    eax,0x10
c0012241:	09 d0                	or     eax,edx
c0012243:	83 c4 3c             	add    esp,0x3c
c0012246:	c3                   	ret    

c0012247 <CmGetNext(Reghive_Tag*, int)>:
c0012247:	83 ec 40             	sub    esp,0x40
c001224a:	8d 44 24 09          	lea    eax,[esp+0x9]
c001224e:	50                   	push   eax
c001224f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012253:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012257:	e8 f9 fe ff ff       	call   c0012155 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001225c:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0012261:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0012266:	c1 e0 08             	shl    eax,0x8
c0012269:	09 c2                	or     edx,eax
c001226b:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0012270:	83 c4 4c             	add    esp,0x4c
c0012273:	c1 e0 10             	shl    eax,0x10
c0012276:	09 d0                	or     eax,edx
c0012278:	c3                   	ret    

c0012279 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0012279:	53                   	push   ebx
c001227a:	83 ec 18             	sub    esp,0x18
c001227d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012281:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012285:	74 29                	je     c00122b0 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012287:	50                   	push   eax
c0012288:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c001228d:	99                   	cdq    
c001228e:	52                   	push   edx
c001228f:	50                   	push   eax
c0012290:	ff 33                	push   DWORD PTR [ebx]
c0012292:	e8 73 90 ff ff       	call   c000b30a <File::seek(unsigned long long)>
c0012297:	5a                   	pop    edx
c0012298:	8b 03                	mov    eax,DWORD PTR [ebx]
c001229a:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001229e:	8b 10                	mov    edx,DWORD PTR [eax]
c00122a0:	51                   	push   ecx
c00122a1:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00122a5:	6a 00                	push   0x0
c00122a7:	6a 2b                	push   0x2b
c00122a9:	50                   	push   eax
c00122aa:	ff 52 10             	call   DWORD PTR [edx+0x10]
c00122ad:	83 c4 20             	add    esp,0x20
c00122b0:	83 c4 18             	add    esp,0x18
c00122b3:	5b                   	pop    ebx
c00122b4:	c3                   	ret    

c00122b5 <CmFreeExtent(Reghive_Tag*, int)>:
c00122b5:	53                   	push   ebx
c00122b6:	83 ec 3c             	sub    esp,0x3c
c00122b9:	6a 2b                	push   0x2b
c00122bb:	6a 00                	push   0x0
c00122bd:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00122c1:	53                   	push   ebx
c00122c2:	e8 29 e2 fe ff       	call   c00004f0 <memset>
c00122c7:	83 c4 0c             	add    esp,0xc
c00122ca:	53                   	push   ebx
c00122cb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00122cf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00122d3:	e8 a1 ff ff ff       	call   c0012279 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00122d8:	83 c4 48             	add    esp,0x48
c00122db:	5b                   	pop    ebx
c00122dc:	c3                   	ret    

c00122dd <CmUpdateHeader(Reghive_Tag*)>:
c00122dd:	83 ec 0c             	sub    esp,0xc
c00122e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122e4:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c00122e8:	74 10                	je     c00122fa <CmUpdateHeader(Reghive_Tag*)+0x1d>
c00122ea:	52                   	push   edx
c00122eb:	8d 50 05             	lea    edx,[eax+0x5]
c00122ee:	52                   	push   edx
c00122ef:	6a 00                	push   0x0
c00122f1:	50                   	push   eax
c00122f2:	e8 82 ff ff ff       	call   c0012279 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00122f7:	83 c4 10             	add    esp,0x10
c00122fa:	83 c4 0c             	add    esp,0xc
c00122fd:	c3                   	ret    

c00122fe <CmExpand(Reghive_Tag*, int)>:
c00122fe:	57                   	push   edi
c00122ff:	56                   	push   esi
c0012300:	83 ce ff             	or     esi,0xffffffff
c0012303:	53                   	push   ebx
c0012304:	83 ec 30             	sub    esp,0x30
c0012307:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001230b:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c001230f:	74 5f                	je     c0012370 <CmExpand(Reghive_Tag*, int)+0x72>
c0012311:	31 d2                	xor    edx,edx
c0012313:	31 f6                	xor    esi,esi
c0012315:	50                   	push   eax
c0012316:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c001231a:	52                   	push   edx
c001231b:	50                   	push   eax
c001231c:	ff 33                	push   DWORD PTR [ebx]
c001231e:	e8 e7 8f ff ff       	call   c000b30a <File::seek(unsigned long long)>
c0012323:	83 c4 0c             	add    esp,0xc
c0012326:	6a 2b                	push   0x2b
c0012328:	6a 00                	push   0x0
c001232a:	8d 7c 24 11          	lea    edi,[esp+0x11]
c001232e:	57                   	push   edi
c001232f:	e8 bc e1 fe ff       	call   c00004f0 <memset>
c0012334:	83 c4 10             	add    esp,0x10
c0012337:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c001233b:	7d 1b                	jge    c0012358 <CmExpand(Reghive_Tag*, int)+0x5a>
c001233d:	83 ec 0c             	sub    esp,0xc
c0012340:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012342:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0012346:	8b 10                	mov    edx,DWORD PTR [eax]
c0012348:	46                   	inc    esi
c0012349:	51                   	push   ecx
c001234a:	57                   	push   edi
c001234b:	6a 00                	push   0x0
c001234d:	6a 2b                	push   0x2b
c001234f:	50                   	push   eax
c0012350:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012353:	83 c4 20             	add    esp,0x20
c0012356:	eb df                	jmp    c0012337 <CmExpand(Reghive_Tag*, int)+0x39>
c0012358:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001235c:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c001235f:	83 ec 0c             	sub    esp,0xc
c0012362:	01 f2                	add    edx,esi
c0012364:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c0012367:	53                   	push   ebx
c0012368:	e8 70 ff ff ff       	call   c00122dd <CmUpdateHeader(Reghive_Tag*)>
c001236d:	83 c4 10             	add    esp,0x10
c0012370:	83 c4 30             	add    esp,0x30
c0012373:	89 f0                	mov    eax,esi
c0012375:	5b                   	pop    ebx
c0012376:	5e                   	pop    esi
c0012377:	5f                   	pop    edi
c0012378:	c3                   	ret    

c0012379 <CmFindUnusedExtent(Reghive_Tag*)>:
c0012379:	55                   	push   ebp
c001237a:	57                   	push   edi
c001237b:	56                   	push   esi
c001237c:	53                   	push   ebx
c001237d:	83 cb ff             	or     ebx,0xffffffff
c0012380:	83 ec 1c             	sub    esp,0x1c
c0012383:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0012387:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c001238b:	74 68                	je     c00123f5 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c001238d:	be 2b 00 00 00       	mov    esi,0x2b
c0012392:	51                   	push   ecx
c0012393:	31 ff                	xor    edi,edi
c0012395:	6a 00                	push   0x0
c0012397:	31 db                	xor    ebx,ebx
c0012399:	6a 00                	push   0x0
c001239b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c001239e:	e8 67 8f ff ff       	call   c000b30a <File::seek(unsigned long long)>
c00123a3:	83 c4 10             	add    esp,0x10
c00123a6:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c00123a9:	76 3b                	jbe    c00123e6 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c00123ab:	83 ec 0c             	sub    esp,0xc
c00123ae:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00123b1:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00123b5:	8b 10                	mov    edx,DWORD PTR [eax]
c00123b7:	51                   	push   ecx
c00123b8:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c00123bc:	51                   	push   ecx
c00123bd:	6a 00                	push   0x0
c00123bf:	6a 01                	push   0x1
c00123c1:	50                   	push   eax
c00123c2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00123c5:	83 c4 20             	add    esp,0x20
c00123c8:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00123cd:	74 26                	je     c00123f5 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c00123cf:	43                   	inc    ebx
c00123d0:	52                   	push   edx
c00123d1:	57                   	push   edi
c00123d2:	56                   	push   esi
c00123d3:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00123d6:	e8 2f 8f ff ff       	call   c000b30a <File::seek(unsigned long long)>
c00123db:	83 c6 2b             	add    esi,0x2b
c00123de:	83 d7 00             	adc    edi,0x0
c00123e1:	83 c4 10             	add    esp,0x10
c00123e4:	eb c0                	jmp    c00123a6 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c00123e6:	50                   	push   eax
c00123e7:	50                   	push   eax
c00123e8:	6a 40                	push   0x40
c00123ea:	55                   	push   ebp
c00123eb:	e8 0e ff ff ff       	call   c00122fe <CmExpand(Reghive_Tag*, int)>
c00123f0:	83 c4 10             	add    esp,0x10
c00123f3:	89 c3                	mov    ebx,eax
c00123f5:	83 c4 1c             	add    esp,0x1c
c00123f8:	89 d8                	mov    eax,ebx
c00123fa:	5b                   	pop    ebx
c00123fb:	5e                   	pop    esi
c00123fc:	5f                   	pop    edi
c00123fd:	5d                   	pop    ebp
c00123fe:	c3                   	ret    

c00123ff <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c00123ff:	55                   	push   ebp
c0012400:	57                   	push   edi
c0012401:	56                   	push   esi
c0012402:	53                   	push   ebx
c0012403:	81 ec 88 00 00 00    	sub    esp,0x88
c0012409:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0012410:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012417:	e8 5d ff ff ff       	call   c0012379 <CmFindUnusedExtent(Reghive_Tag*)>
c001241c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012420:	83 c4 0c             	add    esp,0xc
c0012423:	6a 2b                	push   0x2b
c0012425:	6a 00                	push   0x0
c0012427:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c001242b:	55                   	push   ebp
c001242c:	e8 bf e0 fe ff       	call   c00004f0 <memset>
c0012431:	83 c4 10             	add    esp,0x10
c0012434:	85 db                	test   ebx,ebx
c0012436:	74 12                	je     c001244a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0012438:	51                   	push   ecx
c0012439:	55                   	push   ebp
c001243a:	53                   	push   ebx
c001243b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012442:	e8 0e fd ff ff       	call   c0012155 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012447:	83 c4 10             	add    esp,0x10
c001244a:	8d 7c 24 45          	lea    edi,[esp+0x45]
c001244e:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0012455:	b9 2b 00 00 00       	mov    ecx,0x2b
c001245a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001245c:	85 db                	test   ebx,ebx
c001245e:	74 49                	je     c00124a9 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0012460:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0012465:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c001246a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001246e:	c1 e0 08             	shl    eax,0x8
c0012471:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0012477:	09 c8                	or     eax,ecx
c0012479:	74 11                	je     c001248c <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c001247b:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001247f:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c0012483:	c1 e8 10             	shr    eax,0x10
c0012486:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c001248a:	eb 0f                	jmp    c001249b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c001248c:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012491:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012496:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c001249b:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c001249f:	c1 ea 08             	shr    edx,0x8
c00124a2:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c00124a7:	eb 0f                	jmp    c00124b8 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c00124a9:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c00124ae:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c00124b3:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c00124b8:	52                   	push   edx
c00124b9:	8d 44 24 49          	lea    eax,[esp+0x49]
c00124bd:	50                   	push   eax
c00124be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00124c2:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00124c9:	e8 ab fd ff ff       	call   c0012279 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00124ce:	83 c4 10             	add    esp,0x10
c00124d1:	85 db                	test   ebx,ebx
c00124d3:	74 12                	je     c00124e7 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c00124d5:	50                   	push   eax
c00124d6:	55                   	push   ebp
c00124d7:	53                   	push   ebx
c00124d8:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00124df:	e8 95 fd ff ff       	call   c0012279 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00124e4:	83 c4 10             	add    esp,0x10
c00124e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00124eb:	83 c4 7c             	add    esp,0x7c
c00124ee:	5b                   	pop    ebx
c00124ef:	5e                   	pop    esi
c00124f0:	5f                   	pop    edi
c00124f1:	5d                   	pop    ebp
c00124f2:	c3                   	ret    

c00124f3 <CmSetString(Reghive_Tag*, int, char const*)>:
c00124f3:	55                   	push   ebp
c00124f4:	57                   	push   edi
c00124f5:	56                   	push   esi
c00124f6:	53                   	push   ebx
c00124f7:	bb 27 00 00 00       	mov    ebx,0x27
c00124fc:	81 ec 88 00 00 00    	sub    esp,0x88
c0012502:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0012509:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0012510:	e8 5b e0 fe ff       	call   c0000570 <strlen>
c0012515:	8d 48 26             	lea    ecx,[eax+0x26]
c0012518:	89 c8                	mov    eax,ecx
c001251a:	99                   	cdq    
c001251b:	f7 fb                	idiv   ebx
c001251d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012521:	83 c4 10             	add    esp,0x10
c0012524:	81 f9 37 01 00 00    	cmp    ecx,0x137
c001252a:	7e 10                	jle    c001253c <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c001252c:	83 ec 0c             	sub    esp,0xc
c001252f:	68 20 16 02 c0       	push   0xc0021620
c0012534:	e8 62 e6 ff ff       	call   c0010b9b <KePanic(char const*)>
c0012539:	83 c4 10             	add    esp,0x10
c001253c:	31 ff                	xor    edi,edi
c001253e:	50                   	push   eax
c001253f:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c0012543:	53                   	push   ebx
c0012544:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001254b:	56                   	push   esi
c001254c:	e8 04 fc ff ff       	call   c0012155 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012551:	83 c4 10             	add    esp,0x10
c0012554:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c0012558:	89 d0                	mov    eax,edx
c001255a:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c001255e:	c1 e0 08             	shl    eax,0x8
c0012561:	09 c2                	or     edx,eax
c0012563:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c0012567:	c1 e2 08             	shl    edx,0x8
c001256a:	09 c2                	or     edx,eax
c001256c:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0012570:	7e 76                	jle    c00125e8 <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c0012572:	85 d2                	test   edx,edx
c0012574:	75 25                	jne    c001259b <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c0012576:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c001257b:	8d 44 24 45          	lea    eax,[esp+0x45]
c001257f:	50                   	push   eax
c0012580:	6a 00                	push   0x0
c0012582:	6a 00                	push   0x0
c0012584:	56                   	push   esi
c0012585:	e8 75 fe ff ff       	call   c00123ff <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001258a:	83 c4 10             	add    esp,0x10
c001258d:	89 c2                	mov    edx,eax
c001258f:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0012592:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0012595:	c1 f8 10             	sar    eax,0x10
c0012598:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c001259b:	55                   	push   ebp
c001259c:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c00125a0:	55                   	push   ebp
c00125a1:	52                   	push   edx
c00125a2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00125a6:	56                   	push   esi
c00125a7:	e8 a9 fb ff ff       	call   c0012155 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00125ac:	83 c4 0c             	add    esp,0xc
c00125af:	6a 27                	push   0x27
c00125b1:	6a 00                	push   0x0
c00125b3:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c00125b7:	51                   	push   ecx
c00125b8:	e8 33 df fe ff       	call   c00004f0 <memset>
c00125bd:	83 c4 0c             	add    esp,0xc
c00125c0:	6b c7 27             	imul   eax,edi,0x27
c00125c3:	6a 27                	push   0x27
c00125c5:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c00125cc:	50                   	push   eax
c00125cd:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c00125d1:	51                   	push   ecx
c00125d2:	e8 a9 e0 fe ff       	call   c0000680 <strncpy>
c00125d7:	83 c4 0c             	add    esp,0xc
c00125da:	55                   	push   ebp
c00125db:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00125df:	52                   	push   edx
c00125e0:	56                   	push   esi
c00125e1:	e8 93 fc ff ff       	call   c0012279 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00125e6:	eb 19                	jmp    c0012601 <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c00125e8:	85 d2                	test   edx,edx
c00125ea:	74 18                	je     c0012604 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c00125ec:	51                   	push   ecx
c00125ed:	51                   	push   ecx
c00125ee:	52                   	push   edx
c00125ef:	56                   	push   esi
c00125f0:	e8 c0 fc ff ff       	call   c00122b5 <CmFreeExtent(Reghive_Tag*, int)>
c00125f5:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c00125f9:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c00125fd:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0012601:	83 c4 10             	add    esp,0x10
c0012604:	47                   	inc    edi
c0012605:	83 c3 03             	add    ebx,0x3
c0012608:	83 ff 07             	cmp    edi,0x7
c001260b:	0f 85 43 ff ff ff    	jne    c0012554 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c0012611:	50                   	push   eax
c0012612:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c0012616:	50                   	push   eax
c0012617:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001261e:	56                   	push   esi
c001261f:	e8 55 fc ff ff       	call   c0012279 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012624:	81 c4 8c 00 00 00    	add    esp,0x8c
c001262a:	5b                   	pop    ebx
c001262b:	5e                   	pop    esi
c001262c:	5f                   	pop    edi
c001262d:	5d                   	pop    ebp
c001262e:	c3                   	ret    

c001262f <CmGetMatch(char*, char*, bool, bool*)>:
c001262f:	56                   	push   esi
c0012630:	53                   	push   ebx
c0012631:	50                   	push   eax
c0012632:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012636:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001263b:	74 25                	je     c0012662 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c001263d:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012640:	31 db                	xor    ebx,ebx
c0012642:	50                   	push   eax
c0012643:	50                   	push   eax
c0012644:	8d 04 9d e0 2b 02 c0 	lea    eax,[ebx*4-0x3ffdd420]
c001264b:	50                   	push   eax
c001264c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012650:	e8 fb e0 fe ff       	call   c0000750 <strcmp>
c0012655:	83 c4 10             	add    esp,0x10
c0012658:	85 c0                	test   eax,eax
c001265a:	74 2e                	je     c001268a <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c001265c:	43                   	inc    ebx
c001265d:	83 fb 3f             	cmp    ebx,0x3f
c0012660:	75 e0                	jne    c0012642 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c0012662:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012665:	31 db                	xor    ebx,ebx
c0012667:	8d 04 9d e0 2b 02 c0 	lea    eax,[ebx*4-0x3ffdd420]
c001266e:	51                   	push   ecx
c001266f:	51                   	push   ecx
c0012670:	50                   	push   eax
c0012671:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012675:	e8 d6 e0 fe ff       	call   c0000750 <strcmp>
c001267a:	83 c4 10             	add    esp,0x10
c001267d:	85 c0                	test   eax,eax
c001267f:	74 09                	je     c001268a <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012681:	43                   	inc    ebx
c0012682:	83 fb 3f             	cmp    ebx,0x3f
c0012685:	75 e0                	jne    c0012667 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c0012687:	83 cb ff             	or     ebx,0xffffffff
c001268a:	89 d8                	mov    eax,ebx
c001268c:	5a                   	pop    edx
c001268d:	5b                   	pop    ebx
c001268e:	5e                   	pop    esi
c001268f:	c3                   	ret    

c0012690 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0012690:	55                   	push   ebp
c0012691:	31 c0                	xor    eax,eax
c0012693:	57                   	push   edi
c0012694:	56                   	push   esi
c0012695:	53                   	push   ebx
c0012696:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001269a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001269e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00126a0:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00126a4:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c00126a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00126ab:	83 fd 1f             	cmp    ebp,0x1f
c00126ae:	7f 0b                	jg     c00126bb <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c00126b0:	0f b6 c2             	movzx  eax,dl
c00126b3:	d3 e0                	shl    eax,cl
c00126b5:	09 07                	or     DWORD PTR [edi],eax
c00126b7:	b0 01                	mov    al,0x1
c00126b9:	01 33                	add    DWORD PTR [ebx],esi
c00126bb:	5b                   	pop    ebx
c00126bc:	5e                   	pop    esi
c00126bd:	5f                   	pop    edi
c00126be:	5d                   	pop    ebp
c00126bf:	c3                   	ret    

c00126c0 <CmGetShift(unsigned int*, int*, int, bool*)>:
c00126c0:	57                   	push   edi
c00126c1:	56                   	push   esi
c00126c2:	53                   	push   ebx
c00126c3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00126c7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00126cb:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00126cf:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00126d3:	39 0b                	cmp    DWORD PTR [ebx],ecx
c00126d5:	7c 17                	jl     c00126ee <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c00126d7:	8b 17                	mov    edx,DWORD PTR [edi]
c00126d9:	b8 01 00 00 00       	mov    eax,0x1
c00126de:	d3 e0                	shl    eax,cl
c00126e0:	48                   	dec    eax
c00126e1:	21 d0                	and    eax,edx
c00126e3:	d3 ea                	shr    edx,cl
c00126e5:	89 17                	mov    DWORD PTR [edi],edx
c00126e7:	29 0b                	sub    DWORD PTR [ebx],ecx
c00126e9:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00126ec:	eb 05                	jmp    c00126f3 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c00126ee:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00126f1:	31 c0                	xor    eax,eax
c00126f3:	5b                   	pop    ebx
c00126f4:	5e                   	pop    esi
c00126f5:	5f                   	pop    edi
c00126f6:	c3                   	ret    

c00126f7 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c00126f7:	83 ec 40             	sub    esp,0x40
c00126fa:	8d 44 24 09          	lea    eax,[esp+0x9]
c00126fe:	50                   	push   eax
c00126ff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012703:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012707:	e8 49 fa ff ff       	call   c0012155 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001270c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0012710:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0012714:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c0012718:	89 10                	mov    DWORD PTR [eax],edx
c001271a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001271d:	83 c4 4c             	add    esp,0x4c
c0012720:	c3                   	ret    

c0012721 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c0012721:	55                   	push   ebp
c0012722:	57                   	push   edi
c0012723:	56                   	push   esi
c0012724:	53                   	push   ebx
c0012725:	83 ec 40             	sub    esp,0x40
c0012728:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001272c:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0012730:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c0012734:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c0012738:	53                   	push   ebx
c0012739:	56                   	push   esi
c001273a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001273e:	e8 12 fa ff ff       	call   c0012155 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012743:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c0012747:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c001274b:	83 c4 0c             	add    esp,0xc
c001274e:	53                   	push   ebx
c001274f:	56                   	push   esi
c0012750:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012754:	e8 20 fb ff ff       	call   c0012279 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012759:	83 c4 4c             	add    esp,0x4c
c001275c:	5b                   	pop    ebx
c001275d:	5e                   	pop    esi
c001275e:	5f                   	pop    edi
c001275f:	5d                   	pop    ebp
c0012760:	c3                   	ret    

c0012761 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0012761:	55                   	push   ebp
c0012762:	57                   	push   edi
c0012763:	56                   	push   esi
c0012764:	31 f6                	xor    esi,esi
c0012766:	53                   	push   ebx
c0012767:	31 db                	xor    ebx,ebx
c0012769:	83 ec 40             	sub    esp,0x40
c001276c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012774:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001277c:	6a 12                	push   0x12
c001277e:	68 ee 00 00 00       	push   0xee
c0012783:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0012787:	e8 64 dd fe ff       	call   c00004f0 <memset>
c001278c:	83 c4 10             	add    esp,0x10
c001278f:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0012793:	6a 08                	push   0x8
c0012795:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012799:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c001279d:	50                   	push   eax
c001279e:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00127a2:	55                   	push   ebp
c00127a3:	57                   	push   edi
c00127a4:	e8 e7 fe ff ff       	call   c0012690 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c00127a9:	83 c4 10             	add    esp,0x10
c00127ac:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00127b0:	50                   	push   eax
c00127b1:	6a 06                	push   0x6
c00127b3:	55                   	push   ebp
c00127b4:	57                   	push   edi
c00127b5:	e8 06 ff ff ff       	call   c00126c0 <CmGetShift(unsigned int*, int*, int, bool*)>
c00127ba:	83 c4 10             	add    esp,0x10
c00127bd:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00127c2:	74 07                	je     c00127cb <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c00127c4:	46                   	inc    esi
c00127c5:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c00127c9:	eb e1                	jmp    c00127ac <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c00127cb:	43                   	inc    ebx
c00127cc:	83 fb 12             	cmp    ebx,0x12
c00127cf:	75 c2                	jne    c0012793 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c00127d1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00127d5:	31 db                	xor    ebx,ebx
c00127d7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00127da:	50                   	push   eax
c00127db:	50                   	push   eax
c00127dc:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c00127e1:	43                   	inc    ebx
c00127e2:	8d 04 85 e0 2b 02 c0 	lea    eax,[eax*4-0x3ffdd420]
c00127e9:	50                   	push   eax
c00127ea:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00127ee:	e8 4d e0 fe ff       	call   c0000840 <strcat>
c00127f3:	83 c4 10             	add    esp,0x10
c00127f6:	83 fb 18             	cmp    ebx,0x18
c00127f9:	75 df                	jne    c00127da <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c00127fb:	83 c4 3c             	add    esp,0x3c
c00127fe:	31 c0                	xor    eax,eax
c0012800:	5b                   	pop    ebx
c0012801:	5e                   	pop    esi
c0012802:	5f                   	pop    edi
c0012803:	5d                   	pop    ebp
c0012804:	c3                   	ret    

c0012805 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0012805:	83 ec 40             	sub    esp,0x40
c0012808:	8d 44 24 09          	lea    eax,[esp+0x9]
c001280c:	50                   	push   eax
c001280d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012811:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012815:	e8 3b f9 ff ff       	call   c0012155 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001281a:	58                   	pop    eax
c001281b:	5a                   	pop    edx
c001281c:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0012820:	8d 44 24 15          	lea    eax,[esp+0x15]
c0012824:	50                   	push   eax
c0012825:	e8 37 ff ff ff       	call   c0012761 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c001282a:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c001282f:	83 c4 4c             	add    esp,0x4c
c0012832:	c3                   	ret    

c0012833 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c0012833:	55                   	push   ebp
c0012834:	57                   	push   edi
c0012835:	56                   	push   esi
c0012836:	53                   	push   ebx
c0012837:	31 db                	xor    ebx,ebx
c0012839:	83 ec 70             	sub    esp,0x70
c001283c:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c0012843:	6a 30                	push   0x30
c0012845:	6a 00                	push   0x0
c0012847:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001284b:	56                   	push   esi
c001284c:	e8 9f dc fe ff       	call   c00004f0 <memset>
c0012851:	83 c4 10             	add    esp,0x10
c0012854:	83 ec 0c             	sub    esp,0xc
c0012857:	57                   	push   edi
c0012858:	e8 13 dd fe ff       	call   c0000570 <strlen>
c001285d:	83 c4 10             	add    esp,0x10
c0012860:	39 d8                	cmp    eax,ebx
c0012862:	76 16                	jbe    c001287a <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0012864:	83 ec 0c             	sub    esp,0xc
c0012867:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c001286b:	50                   	push   eax
c001286c:	e8 bf e0 fe ff       	call   c0000930 <toupper>
c0012871:	83 c4 10             	add    esp,0x10
c0012874:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0012877:	43                   	inc    ebx
c0012878:	eb da                	jmp    c0012854 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c001287a:	31 f6                	xor    esi,esi
c001287c:	52                   	push   edx
c001287d:	31 ff                	xor    edi,edi
c001287f:	6a 18                	push   0x18
c0012881:	6a 3f                	push   0x3f
c0012883:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012887:	50                   	push   eax
c0012888:	e8 63 dc fe ff       	call   c00004f0 <memset>
c001288d:	83 c4 10             	add    esp,0x10
c0012890:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c0012894:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c0012898:	84 c0                	test   al,al
c001289a:	0f 84 b0 00 00 00    	je     c0012950 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c00128a0:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c00128a4:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c00128a9:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c00128ad:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c00128b2:	8d 6e 01             	lea    ebp,[esi+0x1]
c00128b5:	83 ec 0c             	sub    esp,0xc
c00128b8:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c00128bc:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c00128c0:	53                   	push   ebx
c00128c1:	e8 aa dc fe ff       	call   c0000570 <strlen>
c00128c6:	83 c4 10             	add    esp,0x10
c00128c9:	85 c0                	test   eax,eax
c00128cb:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00128cf:	74 0b                	je     c00128dc <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c00128d1:	50                   	push   eax
c00128d2:	6a 01                	push   0x1
c00128d4:	53                   	push   ebx
c00128d5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00128d9:	50                   	push   eax
c00128da:	eb 0a                	jmp    c00128e6 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c00128dc:	50                   	push   eax
c00128dd:	6a 00                	push   0x0
c00128df:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00128e3:	50                   	push   eax
c00128e4:	6a 00                	push   0x0
c00128e6:	e8 44 fd ff ff       	call   c001262f <CmGetMatch(char*, char*, bool, bool*)>
c00128eb:	83 c4 10             	add    esp,0x10
c00128ee:	83 f8 ff             	cmp    eax,0xffffffff
c00128f1:	75 1a                	jne    c001290d <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c00128f3:	83 ec 0c             	sub    esp,0xc
c00128f6:	68 35 16 02 c0       	push   0xc0021635
c00128fb:	e8 9b e2 ff ff       	call   c0010b9b <KePanic(char const*)>
c0012900:	83 c4 10             	add    esp,0x10
c0012903:	b8 02 00 00 00       	mov    eax,0x2
c0012908:	e9 bc 00 00 00       	jmp    c00129c9 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c001290d:	83 ff 18             	cmp    edi,0x18
c0012910:	75 1a                	jne    c001292c <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c0012912:	83 ec 0c             	sub    esp,0xc
c0012915:	68 4a 16 02 c0       	push   0xc002164a
c001291a:	e8 7c e2 ff ff       	call   c0010b9b <KePanic(char const*)>
c001291f:	83 c4 10             	add    esp,0x10
c0012922:	b8 01 00 00 00       	mov    eax,0x1
c0012927:	e9 9d 00 00 00       	jmp    c00129c9 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c001292c:	47                   	inc    edi
c001292d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012932:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c0012936:	74 02                	je     c001293a <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c0012938:	89 ee                	mov    esi,ebp
c001293a:	83 ec 0c             	sub    esp,0xc
c001293d:	53                   	push   ebx
c001293e:	e8 2d dc fe ff       	call   c0000570 <strlen>
c0012943:	83 c4 10             	add    esp,0x10
c0012946:	85 c0                	test   eax,eax
c0012948:	74 06                	je     c0012950 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c001294a:	46                   	inc    esi
c001294b:	e9 40 ff ff ff       	jmp    c0012890 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c0012950:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012958:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012960:	31 f6                	xor    esi,esi
c0012962:	50                   	push   eax
c0012963:	31 ff                	xor    edi,edi
c0012965:	6a 12                	push   0x12
c0012967:	68 ee 00 00 00       	push   0xee
c001296c:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0012973:	e8 78 db fe ff       	call   c00004f0 <memset>
c0012978:	83 c4 10             	add    esp,0x10
c001297b:	83 fe 17             	cmp    esi,0x17
c001297e:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c0012982:	7e 26                	jle    c00129aa <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c0012984:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012988:	50                   	push   eax
c0012989:	6a 08                	push   0x8
c001298b:	55                   	push   ebp
c001298c:	53                   	push   ebx
c001298d:	e8 2e fd ff ff       	call   c00126c0 <CmGetShift(unsigned int*, int*, int, bool*)>
c0012992:	83 c4 10             	add    esp,0x10
c0012995:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001299a:	74 26                	je     c00129c2 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c001299c:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c00129a3:	4e                   	dec    esi
c00129a4:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c00129a7:	47                   	inc    edi
c00129a8:	eb 1c                	jmp    c00129c6 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c00129aa:	6a 06                	push   0x6
c00129ac:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c00129b1:	50                   	push   eax
c00129b2:	55                   	push   ebp
c00129b3:	53                   	push   ebx
c00129b4:	e8 d7 fc ff ff       	call   c0012690 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c00129b9:	83 c4 10             	add    esp,0x10
c00129bc:	84 c0                	test   al,al
c00129be:	75 06                	jne    c00129c6 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c00129c0:	eb c2                	jmp    c0012984 <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c00129c2:	31 c0                	xor    eax,eax
c00129c4:	eb 03                	jmp    c00129c9 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c00129c6:	46                   	inc    esi
c00129c7:	eb b2                	jmp    c001297b <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c00129c9:	83 c4 6c             	add    esp,0x6c
c00129cc:	5b                   	pop    ebx
c00129cd:	5e                   	pop    esi
c00129ce:	5f                   	pop    edi
c00129cf:	5d                   	pop    ebp
c00129d0:	c3                   	ret    

c00129d1 <CmCreateString(Reghive_Tag*, int, char const*)>:
c00129d1:	53                   	push   ebx
c00129d2:	83 ec 3c             	sub    esp,0x3c
c00129d5:	6a 2b                	push   0x2b
c00129d7:	6a 00                	push   0x0
c00129d9:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00129dd:	53                   	push   ebx
c00129de:	e8 0d db fe ff       	call   c00004f0 <memset>
c00129e3:	58                   	pop    eax
c00129e4:	5a                   	pop    edx
c00129e5:	8d 44 24 11          	lea    eax,[esp+0x11]
c00129e9:	50                   	push   eax
c00129ea:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00129ee:	e8 40 fe ff ff       	call   c0012833 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00129f3:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c00129f8:	83 c4 0c             	add    esp,0xc
c00129fb:	6a 15                	push   0x15
c00129fd:	6a 00                	push   0x0
c00129ff:	8d 44 24 27          	lea    eax,[esp+0x27]
c0012a03:	50                   	push   eax
c0012a04:	e8 e7 da fe ff       	call   c00004f0 <memset>
c0012a09:	53                   	push   ebx
c0012a0a:	6a 00                	push   0x0
c0012a0c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012a10:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012a14:	e8 e6 f9 ff ff       	call   c00123ff <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012a19:	83 c4 58             	add    esp,0x58
c0012a1c:	5b                   	pop    ebx
c0012a1d:	c3                   	ret    

c0012a1e <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c0012a1e:	56                   	push   esi
c0012a1f:	53                   	push   ebx
c0012a20:	83 ec 48             	sub    esp,0x48
c0012a23:	6a 12                	push   0x12
c0012a25:	68 ff 00 00 00       	push   0xff
c0012a2a:	8d 74 24 0f          	lea    esi,[esp+0xf]
c0012a2e:	56                   	push   esi
c0012a2f:	e8 bc da fe ff       	call   c00004f0 <memset>
c0012a34:	5a                   	pop    edx
c0012a35:	59                   	pop    ecx
c0012a36:	56                   	push   esi
c0012a37:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0012a3b:	e8 f3 fd ff ff       	call   c0012833 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012a40:	83 c4 10             	add    esp,0x10
c0012a43:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0012a47:	85 db                	test   ebx,ebx
c0012a49:	74 42                	je     c0012a8d <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c0012a4b:	50                   	push   eax
c0012a4c:	8d 44 24 19          	lea    eax,[esp+0x19]
c0012a50:	50                   	push   eax
c0012a51:	53                   	push   ebx
c0012a52:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012a56:	e8 fa f6 ff ff       	call   c0012155 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012a5b:	83 c4 0c             	add    esp,0xc
c0012a5e:	6a 12                	push   0x12
c0012a60:	8d 44 24 21          	lea    eax,[esp+0x21]
c0012a64:	50                   	push   eax
c0012a65:	56                   	push   esi
c0012a66:	e8 15 d9 fe ff       	call   c0000380 <memcmp>
c0012a6b:	83 c4 10             	add    esp,0x10
c0012a6e:	85 c0                	test   eax,eax
c0012a70:	74 1e                	je     c0012a90 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c0012a72:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c0012a77:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c0012a7c:	c1 e3 08             	shl    ebx,0x8
c0012a7f:	09 d8                	or     eax,ebx
c0012a81:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c0012a86:	c1 e3 10             	shl    ebx,0x10
c0012a89:	09 c3                	or     ebx,eax
c0012a8b:	eb ba                	jmp    c0012a47 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c0012a8d:	83 cb ff             	or     ebx,0xffffffff
c0012a90:	89 d8                	mov    eax,ebx
c0012a92:	83 c4 44             	add    esp,0x44
c0012a95:	5b                   	pop    ebx
c0012a96:	5e                   	pop    esi
c0012a97:	c3                   	ret    

c0012a98 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c0012a98:	57                   	push   edi
c0012a99:	56                   	push   esi
c0012a9a:	53                   	push   ebx
c0012a9b:	83 ec 34             	sub    esp,0x34
c0012a9e:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0012aa2:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0012aa6:	6a 2b                	push   0x2b
c0012aa8:	6a 00                	push   0x0
c0012aaa:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012aae:	53                   	push   ebx
c0012aaf:	e8 3c da fe ff       	call   c00004f0 <memset>
c0012ab4:	58                   	pop    eax
c0012ab5:	5a                   	pop    edx
c0012ab6:	8d 44 24 11          	lea    eax,[esp+0x11]
c0012aba:	50                   	push   eax
c0012abb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012abf:	e8 6f fd ff ff       	call   c0012833 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012ac4:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0012ac8:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c0012acc:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c0012ad0:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0012ad4:	53                   	push   ebx
c0012ad5:	6a 00                	push   0x0
c0012ad7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012adb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012adf:	e8 1b f9 ff ff       	call   c00123ff <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012ae4:	83 c4 50             	add    esp,0x50
c0012ae7:	5b                   	pop    ebx
c0012ae8:	5e                   	pop    esi
c0012ae9:	5f                   	pop    edi
c0012aea:	c3                   	ret    

c0012aeb <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c0012aeb:	55                   	push   ebp
c0012aec:	57                   	push   edi
c0012aed:	56                   	push   esi
c0012aee:	53                   	push   ebx
c0012aef:	83 ec 40             	sub    esp,0x40
c0012af2:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c0012af6:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0012afa:	6a 2b                	push   0x2b
c0012afc:	6a 00                	push   0x0
c0012afe:	8d 74 24 11          	lea    esi,[esp+0x11]
c0012b02:	56                   	push   esi
c0012b03:	e8 e8 d9 fe ff       	call   c00004f0 <memset>
c0012b08:	5f                   	pop    edi
c0012b09:	89 ef                	mov    edi,ebp
c0012b0b:	58                   	pop    eax
c0012b0c:	8d 44 24 11          	lea    eax,[esp+0x11]
c0012b10:	50                   	push   eax
c0012b11:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0012b15:	e8 19 fd ff ff       	call   c0012833 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012b1a:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c0012b1f:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c0012b24:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c0012b29:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c0012b2e:	83 c4 10             	add    esp,0x10
c0012b31:	85 ed                	test   ebp,ebp
c0012b33:	74 14                	je     c0012b49 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0012b35:	51                   	push   ecx
c0012b36:	51                   	push   ecx
c0012b37:	57                   	push   edi
c0012b38:	53                   	push   ebx
c0012b39:	e8 09 f7 ff ff       	call   c0012247 <CmGetNext(Reghive_Tag*, int)>
c0012b3e:	83 c4 10             	add    esp,0x10
c0012b41:	85 c0                	test   eax,eax
c0012b43:	74 04                	je     c0012b49 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0012b45:	89 c7                	mov    edi,eax
c0012b47:	eb e8                	jmp    c0012b31 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c0012b49:	56                   	push   esi
c0012b4a:	6a 00                	push   0x0
c0012b4c:	57                   	push   edi
c0012b4d:	53                   	push   ebx
c0012b4e:	e8 ac f8 ff ff       	call   c00123ff <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012b53:	83 c4 0c             	add    esp,0xc
c0012b56:	89 c7                	mov    edi,eax
c0012b58:	56                   	push   esi
c0012b59:	50                   	push   eax
c0012b5a:	53                   	push   ebx
c0012b5b:	e8 f5 f5 ff ff       	call   c0012155 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012b60:	58                   	pop    eax
c0012b61:	5a                   	pop    edx
c0012b62:	6a 6c                	push   0x6c
c0012b64:	6a 00                	push   0x0
c0012b66:	6a 00                	push   0x0
c0012b68:	68 5b 16 02 c0       	push   0xc002165b
c0012b6d:	57                   	push   edi
c0012b6e:	53                   	push   ebx
c0012b6f:	e8 24 ff ff ff       	call   c0012a98 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c0012b74:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0012b78:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c0012b7c:	c1 e8 10             	shr    eax,0x10
c0012b7f:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0012b83:	83 c4 1c             	add    esp,0x1c
c0012b86:	56                   	push   esi
c0012b87:	57                   	push   edi
c0012b88:	53                   	push   ebx
c0012b89:	e8 eb f6 ff ff       	call   c0012279 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012b8e:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c0012b93:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0012b98:	c1 e0 08             	shl    eax,0x8
c0012b9b:	09 c2                	or     edx,eax
c0012b9d:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0012ba2:	83 c4 4c             	add    esp,0x4c
c0012ba5:	c1 e0 10             	shl    eax,0x10
c0012ba8:	5b                   	pop    ebx
c0012ba9:	09 d0                	or     eax,edx
c0012bab:	5e                   	pop    esi
c0012bac:	5f                   	pop    edi
c0012bad:	5d                   	pop    ebp
c0012bae:	c3                   	ret    

c0012baf <zStrtok(char*, char const*)>:
c0012baf:	55                   	push   ebp
c0012bb0:	57                   	push   edi
c0012bb1:	56                   	push   esi
c0012bb2:	53                   	push   ebx
c0012bb3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012bb7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012bbb:	85 db                	test   ebx,ebx
c0012bbd:	74 2f                	je     c0012bee <zStrtok(char*, char const*)+0x3f>
c0012bbf:	85 c0                	test   eax,eax
c0012bc1:	75 09                	jne    c0012bcc <zStrtok(char*, char const*)+0x1d>
c0012bc3:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c0012bc8:	85 c0                	test   eax,eax
c0012bca:	74 50                	je     c0012c1c <zStrtok(char*, char const*)+0x6d>
c0012bcc:	31 c9                	xor    ecx,ecx
c0012bce:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c0012bd2:	74 03                	je     c0012bd7 <zStrtok(char*, char const*)+0x28>
c0012bd4:	41                   	inc    ecx
c0012bd5:	eb f7                	jmp    c0012bce <zStrtok(char*, char const*)+0x1f>
c0012bd7:	31 d2                	xor    edx,edx
c0012bd9:	39 ca                	cmp    edx,ecx
c0012bdb:	74 15                	je     c0012bf2 <zStrtok(char*, char const*)+0x43>
c0012bdd:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c0012be1:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c0012be4:	8d 3c 10             	lea    edi,[eax+edx*1]
c0012be7:	39 ee                	cmp    esi,ebp
c0012be9:	74 13                	je     c0012bfe <zStrtok(char*, char const*)+0x4f>
c0012beb:	42                   	inc    edx
c0012bec:	eb eb                	jmp    c0012bd9 <zStrtok(char*, char const*)+0x2a>
c0012bee:	31 c0                	xor    eax,eax
c0012bf0:	eb 2a                	jmp    c0012c1c <zStrtok(char*, char const*)+0x6d>
c0012bf2:	c7 05 90 89 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028990,0x0
c0012bfc:	eb 1e                	jmp    c0012c1c <zStrtok(char*, char const*)+0x6d>
c0012bfe:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0012c01:	39 ce                	cmp    esi,ecx
c0012c03:	75 0a                	jne    c0012c0f <zStrtok(char*, char const*)+0x60>
c0012c05:	40                   	inc    eax
c0012c06:	a3 90 89 02 c0       	mov    ds:0xc0028990,eax
c0012c0b:	89 d8                	mov    eax,ebx
c0012c0d:	eb 0d                	jmp    c0012c1c <zStrtok(char*, char const*)+0x6d>
c0012c0f:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c0012c13:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0012c16:	89 15 90 89 02 c0    	mov    DWORD PTR ds:0xc0028990,edx
c0012c1c:	5b                   	pop    ebx
c0012c1d:	5e                   	pop    esi
c0012c1e:	5f                   	pop    edi
c0012c1f:	5d                   	pop    ebp
c0012c20:	c3                   	ret    

c0012c21 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c0012c21:	57                   	push   edi
c0012c22:	56                   	push   esi
c0012c23:	53                   	push   ebx
c0012c24:	81 ec 08 01 00 00    	sub    esp,0x108
c0012c2a:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c0012c31:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c0012c38:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0012c3c:	53                   	push   ebx
c0012c3d:	e8 fe d9 fe ff       	call   c0000640 <strcpy>
c0012c42:	59                   	pop    ecx
c0012c43:	5e                   	pop    esi
c0012c44:	68 de 1a 02 c0       	push   0xc0021ade
c0012c49:	53                   	push   ebx
c0012c4a:	bb 01 00 00 00       	mov    ebx,0x1
c0012c4f:	e8 5b ff ff ff       	call   c0012baf <zStrtok(char*, char const*)>
c0012c54:	83 c4 10             	add    esp,0x10
c0012c57:	85 c0                	test   eax,eax
c0012c59:	74 3b                	je     c0012c96 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0012c5b:	52                   	push   edx
c0012c5c:	50                   	push   eax
c0012c5d:	6a 01                	push   0x1
c0012c5f:	57                   	push   edi
c0012c60:	e8 b9 fd ff ff       	call   c0012a1e <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c0012c65:	59                   	pop    ecx
c0012c66:	89 c3                	mov    ebx,eax
c0012c68:	5e                   	pop    esi
c0012c69:	68 de 1a 02 c0       	push   0xc0021ade
c0012c6e:	6a 00                	push   0x0
c0012c70:	e8 3a ff ff ff       	call   c0012baf <zStrtok(char*, char const*)>
c0012c75:	83 c4 10             	add    esp,0x10
c0012c78:	89 c6                	mov    esi,eax
c0012c7a:	85 c0                	test   eax,eax
c0012c7c:	74 18                	je     c0012c96 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0012c7e:	52                   	push   edx
c0012c7f:	52                   	push   edx
c0012c80:	53                   	push   ebx
c0012c81:	57                   	push   edi
c0012c82:	e8 81 f5 ff ff       	call   c0012208 <CmEnterDirectory(Reghive_Tag*, int)>
c0012c87:	83 c4 10             	add    esp,0x10
c0012c8a:	89 c3                	mov    ebx,eax
c0012c8c:	83 f8 ff             	cmp    eax,0xffffffff
c0012c8f:	74 05                	je     c0012c96 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0012c91:	50                   	push   eax
c0012c92:	56                   	push   esi
c0012c93:	53                   	push   ebx
c0012c94:	eb c9                	jmp    c0012c5f <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c0012c96:	81 c4 00 01 00 00    	add    esp,0x100
c0012c9c:	89 d8                	mov    eax,ebx
c0012c9e:	5b                   	pop    ebx
c0012c9f:	5e                   	pop    esi
c0012ca0:	5f                   	pop    edi
c0012ca1:	c3                   	ret    

c0012ca2 <CmDisplayTree(Reghive_Tag*, int, int)>:
c0012ca2:	55                   	push   ebp
c0012ca3:	57                   	push   edi
c0012ca4:	56                   	push   esi
c0012ca5:	53                   	push   ebx
c0012ca6:	83 ec 5c             	sub    esp,0x5c
c0012ca9:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0012cad:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0012cb1:	85 db                	test   ebx,ebx
c0012cb3:	0f 8e 84 00 00 00    	jle    c0012d3d <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c0012cb9:	31 ed                	xor    ebp,ebp
c0012cbb:	57                   	push   edi
c0012cbc:	6a 32                	push   0x32
c0012cbe:	6a 00                	push   0x0
c0012cc0:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c0012cc4:	57                   	push   edi
c0012cc5:	e8 26 d8 fe ff       	call   c00004f0 <memset>
c0012cca:	83 c4 0c             	add    esp,0xc
c0012ccd:	57                   	push   edi
c0012cce:	53                   	push   ebx
c0012ccf:	56                   	push   esi
c0012cd0:	e8 30 fb ff ff       	call   c0012805 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0012cd5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012cd9:	83 c4 10             	add    esp,0x10
c0012cdc:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c0012ce0:	7d 13                	jge    c0012cf5 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c0012ce2:	83 ec 0c             	sub    esp,0xc
c0012ce5:	45                   	inc    ebp
c0012ce6:	68 83 1e 02 c0       	push   0xc0021e83
c0012ceb:	e8 49 7c ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0012cf0:	83 c4 10             	add    esp,0x10
c0012cf3:	eb e7                	jmp    c0012cdc <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c0012cf5:	51                   	push   ecx
c0012cf6:	57                   	push   edi
c0012cf7:	53                   	push   ebx
c0012cf8:	68 61 16 02 c0       	push   0xc0021661
c0012cfd:	e8 37 7c ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0012d02:	83 c4 10             	add    esp,0x10
c0012d05:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c0012d0a:	75 1e                	jne    c0012d2a <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c0012d0c:	52                   	push   edx
c0012d0d:	52                   	push   edx
c0012d0e:	53                   	push   ebx
c0012d0f:	56                   	push   esi
c0012d10:	e8 f3 f4 ff ff       	call   c0012208 <CmEnterDirectory(Reghive_Tag*, int)>
c0012d15:	83 c4 0c             	add    esp,0xc
c0012d18:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0012d1c:	8d 51 04             	lea    edx,[ecx+0x4]
c0012d1f:	52                   	push   edx
c0012d20:	50                   	push   eax
c0012d21:	56                   	push   esi
c0012d22:	e8 7b ff ff ff       	call   c0012ca2 <CmDisplayTree(Reghive_Tag*, int, int)>
c0012d27:	83 c4 10             	add    esp,0x10
c0012d2a:	50                   	push   eax
c0012d2b:	50                   	push   eax
c0012d2c:	53                   	push   ebx
c0012d2d:	56                   	push   esi
c0012d2e:	e8 14 f5 ff ff       	call   c0012247 <CmGetNext(Reghive_Tag*, int)>
c0012d33:	83 c4 10             	add    esp,0x10
c0012d36:	89 c3                	mov    ebx,eax
c0012d38:	e9 74 ff ff ff       	jmp    c0012cb1 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0012d3d:	83 c4 5c             	add    esp,0x5c
c0012d40:	5b                   	pop    ebx
c0012d41:	5e                   	pop    esi
c0012d42:	5f                   	pop    edi
c0012d43:	5d                   	pop    ebp
c0012d44:	c3                   	ret    

c0012d45 <CmSplitFinalSlashInPlace(char*)>:
c0012d45:	53                   	push   ebx
c0012d46:	83 ec 14             	sub    esp,0x14
c0012d49:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012d4d:	53                   	push   ebx
c0012d4e:	e8 1d d8 fe ff       	call   c0000570 <strlen>
c0012d53:	83 c4 10             	add    esp,0x10
c0012d56:	48                   	dec    eax
c0012d57:	85 c0                	test   eax,eax
c0012d59:	74 15                	je     c0012d70 <CmSplitFinalSlashInPlace(char*)+0x2b>
c0012d5b:	8d 14 03             	lea    edx,[ebx+eax*1]
c0012d5e:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012d62:	75 09                	jne    c0012d6d <CmSplitFinalSlashInPlace(char*)+0x28>
c0012d64:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0012d67:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0012d6b:	eb 05                	jmp    c0012d72 <CmSplitFinalSlashInPlace(char*)+0x2d>
c0012d6d:	48                   	dec    eax
c0012d6e:	eb e7                	jmp    c0012d57 <CmSplitFinalSlashInPlace(char*)+0x12>
c0012d70:	31 c0                	xor    eax,eax
c0012d72:	83 c4 08             	add    esp,0x8
c0012d75:	5b                   	pop    ebx
c0012d76:	c3                   	ret    

c0012d77 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0012d77:	55                   	push   ebp
c0012d78:	57                   	push   edi
c0012d79:	56                   	push   esi
c0012d7a:	53                   	push   ebx
c0012d7b:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0012d81:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c0012d88:	8a 13                	mov    dl,BYTE PTR [ebx]
c0012d8a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012d8d:	80 fa 40             	cmp    dl,0x40
c0012d90:	75 1c                	jne    c0012dae <Reg::findLineFromLoadedData(char*, char*, char*)+0x37>
c0012d92:	0f be 0b             	movsx  ecx,BYTE PTR [ebx]
c0012d95:	85 c9                	test   ecx,ecx
c0012d97:	0f 84 09 01 00 00    	je     c0012ea6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0012d9d:	8d 43 01             	lea    eax,[ebx+0x1]
c0012da0:	83 f9 3a             	cmp    ecx,0x3a
c0012da3:	74 04                	je     c0012da9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x32>
c0012da5:	89 c3                	mov    ebx,eax
c0012da7:	eb e9                	jmp    c0012d92 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0012da9:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012dac:	89 c3                	mov    ebx,eax
c0012dae:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0012db2:	50                   	push   eax
c0012db3:	6a 40                	push   0x40
c0012db5:	6a 00                	push   0x0
c0012db7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012dbb:	50                   	push   eax
c0012dbc:	e8 2f d7 fe ff       	call   c00004f0 <memset>
c0012dc1:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0012dc8:	31 c0                	xor    eax,eax
c0012dca:	83 c4 10             	add    esp,0x10
c0012dcd:	0f be 74 24 0c       	movsx  esi,BYTE PTR [esp+0xc]
c0012dd2:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0012dd5:	89 d1                	mov    ecx,edx
c0012dd7:	85 d2                	test   edx,edx
c0012dd9:	0f 84 c7 00 00 00    	je     c0012ea6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0012ddf:	3d c7 00 00 00       	cmp    eax,0xc7
c0012de4:	0f 8f bc 00 00 00    	jg     c0012ea6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0012dea:	83 fa 0a             	cmp    edx,0xa
c0012ded:	0f 85 a4 00 00 00    	jne    c0012e97 <Reg::findLineFromLoadedData(char*, char*, char*)+0x120>
c0012df3:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0012df8:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0012dfd:	89 c8                	mov    eax,ecx
c0012dff:	a8 df                	test   al,0xdf
c0012e01:	0f 94 c2             	sete   dl
c0012e04:	83 f9 23             	cmp    ecx,0x23
c0012e07:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0012e0c:	0b 54 24 0c          	or     edx,DWORD PTR [esp+0xc]
c0012e10:	80 e2 01             	and    dl,0x1
c0012e13:	75 4a                	jne    c0012e5f <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0012e15:	83 e8 09             	sub    eax,0x9
c0012e18:	3c 01                	cmp    al,0x1
c0012e1a:	76 43                	jbe    c0012e5f <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0012e1c:	83 f9 5b             	cmp    ecx,0x5b
c0012e1f:	75 42                	jne    c0012e63 <Reg::findLineFromLoadedData(char*, char*, char*)+0xec>
c0012e21:	83 fe 40             	cmp    esi,0x40
c0012e24:	75 39                	jne    c0012e5f <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0012e26:	83 ec 0c             	sub    esp,0xc
c0012e29:	8d 54 24 65          	lea    edx,[esp+0x65]
c0012e2d:	52                   	push   edx
c0012e2e:	e8 3d d7 fe ff       	call   c0000570 <strlen>
c0012e33:	83 c4 10             	add    esp,0x10
c0012e36:	83 f8 3f             	cmp    eax,0x3f
c0012e39:	77 6b                	ja     c0012ea6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0012e3b:	50                   	push   eax
c0012e3c:	50                   	push   eax
c0012e3d:	8d 54 24 61          	lea    edx,[esp+0x61]
c0012e41:	52                   	push   edx
c0012e42:	8d 54 24 24          	lea    edx,[esp+0x24]
c0012e46:	52                   	push   edx
c0012e47:	e8 f4 d7 fe ff       	call   c0000640 <strcpy>
c0012e4c:	58                   	pop    eax
c0012e4d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0012e51:	52                   	push   edx
c0012e52:	e8 19 d7 fe ff       	call   c0000570 <strlen>
c0012e57:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0012e5c:	83 c4 10             	add    esp,0x10
c0012e5f:	31 d2                	xor    edx,edx
c0012e61:	eb 3b                	jmp    c0012e9e <Reg::findLineFromLoadedData(char*, char*, char*)+0x127>
c0012e63:	83 fe 40             	cmp    esi,0x40
c0012e66:	74 06                	je     c0012e6e <Reg::findLineFromLoadedData(char*, char*, char*)+0xf7>
c0012e68:	8d 44 24 58          	lea    eax,[esp+0x58]
c0012e6c:	eb 20                	jmp    c0012e8e <Reg::findLineFromLoadedData(char*, char*, char*)+0x117>
c0012e6e:	50                   	push   eax
c0012e6f:	50                   	push   eax
c0012e70:	55                   	push   ebp
c0012e71:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012e75:	50                   	push   eax
c0012e76:	e8 d5 d8 fe ff       	call   c0000750 <strcmp>
c0012e7b:	83 c4 10             	add    esp,0x10
c0012e7e:	85 c0                	test   eax,eax
c0012e80:	75 dd                	jne    c0012e5f <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0012e82:	eb e4                	jmp    c0012e68 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0012e84:	8d 50 01             	lea    edx,[eax+0x1]
c0012e87:	83 f9 3d             	cmp    ecx,0x3d
c0012e8a:	74 1e                	je     c0012eaa <Reg::findLineFromLoadedData(char*, char*, char*)+0x133>
c0012e8c:	89 d0                	mov    eax,edx
c0012e8e:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0012e91:	85 c9                	test   ecx,ecx
c0012e93:	75 ef                	jne    c0012e84 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10d>
c0012e95:	eb 0f                	jmp    c0012ea6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0012e97:	8d 50 01             	lea    edx,[eax+0x1]
c0012e9a:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0012e9e:	47                   	inc    edi
c0012e9f:	89 d0                	mov    eax,edx
c0012ea1:	e9 2c ff ff ff       	jmp    c0012dd2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x5b>
c0012ea6:	31 c0                	xor    eax,eax
c0012ea8:	eb 33                	jmp    c0012edd <Reg::findLineFromLoadedData(char*, char*, char*)+0x166>
c0012eaa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012eae:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0012eb1:	50                   	push   eax
c0012eb2:	50                   	push   eax
c0012eb3:	8d 44 24 60          	lea    eax,[esp+0x60]
c0012eb7:	50                   	push   eax
c0012eb8:	53                   	push   ebx
c0012eb9:	e8 92 d8 fe ff       	call   c0000750 <strcmp>
c0012ebe:	83 c4 10             	add    esp,0x10
c0012ec1:	85 c0                	test   eax,eax
c0012ec3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012ec7:	75 96                	jne    c0012e5f <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0012ec9:	51                   	push   ecx
c0012eca:	51                   	push   ecx
c0012ecb:	52                   	push   edx
c0012ecc:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0012ed3:	e8 68 d7 fe ff       	call   c0000640 <strcpy>
c0012ed8:	83 c4 10             	add    esp,0x10
c0012edb:	b0 01                	mov    al,0x1
c0012edd:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012ee3:	5b                   	pop    ebx
c0012ee4:	5e                   	pop    esi
c0012ee5:	5f                   	pop    edi
c0012ee6:	5d                   	pop    ebp
c0012ee7:	c3                   	ret    

c0012ee8 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0012ee8:	57                   	push   edi
c0012ee9:	56                   	push   esi
c0012eea:	53                   	push   ebx
c0012eeb:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0012ef1:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0012ef8:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0012eff:	53                   	push   ebx
c0012f00:	e8 6b d6 fe ff       	call   c0000570 <strlen>
c0012f05:	89 34 24             	mov    DWORD PTR [esp],esi
c0012f08:	89 c7                	mov    edi,eax
c0012f0a:	e8 61 d6 fe ff       	call   c0000570 <strlen>
c0012f0f:	83 c4 10             	add    esp,0x10
c0012f12:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0012f16:	3d ff 00 00 00       	cmp    eax,0xff
c0012f1b:	0f 87 d3 00 00 00    	ja     c0012ff4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0012f21:	57                   	push   edi
c0012f22:	57                   	push   edi
c0012f23:	56                   	push   esi
c0012f24:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0012f28:	56                   	push   esi
c0012f29:	e8 12 d7 fe ff       	call   c0000640 <strcpy>
c0012f2e:	58                   	pop    eax
c0012f2f:	5a                   	pop    edx
c0012f30:	68 de 1a 02 c0       	push   0xc0021ade
c0012f35:	56                   	push   esi
c0012f36:	e8 05 d9 fe ff       	call   c0000840 <strcat>
c0012f3b:	59                   	pop    ecx
c0012f3c:	5f                   	pop    edi
c0012f3d:	53                   	push   ebx
c0012f3e:	56                   	push   esi
c0012f3f:	e8 fc d8 fe ff       	call   c0000840 <strcat>
c0012f44:	58                   	pop    eax
c0012f45:	5a                   	pop    edx
c0012f46:	68 6b 16 02 c0       	push   0xc002166b
c0012f4b:	56                   	push   esi
c0012f4c:	e8 ef d8 fe ff       	call   c0000840 <strcat>
c0012f51:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012f58:	e8 51 4b ff ff       	call   c0007aae <malloc>
c0012f5d:	83 c4 0c             	add    esp,0xc
c0012f60:	89 c3                	mov    ebx,eax
c0012f62:	ff 35 90 91 02 c0    	push   DWORD PTR ds:0xc0029190
c0012f68:	56                   	push   esi
c0012f69:	50                   	push   eax
c0012f6a:	e8 21 82 ff ff       	call   c000b190 <File::File(char const*, Process*)>
c0012f6f:	83 c4 10             	add    esp,0x10
c0012f72:	85 db                	test   ebx,ebx
c0012f74:	74 7e                	je     c0012ff4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0012f76:	51                   	push   ecx
c0012f77:	51                   	push   ecx
c0012f78:	6a 01                	push   0x1
c0012f7a:	53                   	push   ebx
c0012f7b:	e8 cc 82 ff ff       	call   c000b24c <File::open(FileOpenMode)>
c0012f80:	83 c4 10             	add    esp,0x10
c0012f83:	85 c0                	test   eax,eax
c0012f85:	74 08                	je     c0012f8f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0012f87:	83 ec 0c             	sub    esp,0xc
c0012f8a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012f8c:	53                   	push   ebx
c0012f8d:	eb 5f                	jmp    c0012fee <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0012f8f:	52                   	push   edx
c0012f90:	8d 44 24 17          	lea    eax,[esp+0x17]
c0012f94:	50                   	push   eax
c0012f95:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012f99:	50                   	push   eax
c0012f9a:	53                   	push   ebx
c0012f9b:	e8 58 85 ff ff       	call   c000b4f8 <File::stat(unsigned long long*, bool*)>
c0012fa0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012fa4:	83 c4 10             	add    esp,0x10
c0012fa7:	89 c1                	mov    ecx,eax
c0012fa9:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0012fad:	74 31                	je     c0012fe0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0012faf:	83 ec 0c             	sub    esp,0xc
c0012fb2:	50                   	push   eax
c0012fb3:	e8 f6 4a ff ff       	call   c0007aae <malloc>
c0012fb8:	89 c6                	mov    esi,eax
c0012fba:	58                   	pop    eax
c0012fbb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012fbd:	8d 54 24 20          	lea    edx,[esp+0x20]
c0012fc1:	52                   	push   edx
c0012fc2:	56                   	push   esi
c0012fc3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012fc7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012fcb:	53                   	push   ebx
c0012fcc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012fcf:	83 c4 20             	add    esp,0x20
c0012fd2:	85 c0                	test   eax,eax
c0012fd4:	75 0a                	jne    c0012fe0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0012fd6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012fda:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0012fde:	74 18                	je     c0012ff8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0012fe0:	83 ec 0c             	sub    esp,0xc
c0012fe3:	53                   	push   ebx
c0012fe4:	e8 c1 82 ff ff       	call   c000b2aa <File::close()>
c0012fe9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012feb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012fee:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012ff1:	83 c4 10             	add    esp,0x10
c0012ff4:	31 c0                	xor    eax,eax
c0012ff6:	eb 3b                	jmp    c0013033 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0012ff8:	83 ec 0c             	sub    esp,0xc
c0012ffb:	53                   	push   ebx
c0012ffc:	e8 a9 82 ff ff       	call   c000b2aa <File::close()>
c0013001:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013003:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013006:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013009:	83 c4 0c             	add    esp,0xc
c001300c:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013013:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001301a:	56                   	push   esi
c001301b:	e8 57 fd ff ff       	call   c0012d77 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0013020:	89 34 24             	mov    DWORD PTR [esp],esi
c0013023:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0013027:	e8 92 4a ff ff       	call   c0007abe <free>
c001302c:	83 c4 10             	add    esp,0x10
c001302f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013033:	81 c4 20 01 00 00    	add    esp,0x120
c0013039:	5b                   	pop    ebx
c001303a:	5e                   	pop    esi
c001303b:	5f                   	pop    edi
c001303c:	c3                   	ret    

c001303d <Reg::getLine(char*, char*, char*)>:
c001303d:	57                   	push   edi
c001303e:	56                   	push   esi
c001303f:	53                   	push   ebx
c0013040:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013044:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013048:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001304c:	57                   	push   edi
c001304d:	56                   	push   esi
c001304e:	53                   	push   ebx
c001304f:	68 70 16 02 c0       	push   0xc0021670
c0013054:	e8 8f fe ff ff       	call   c0012ee8 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013059:	83 c4 10             	add    esp,0x10
c001305c:	84 c0                	test   al,al
c001305e:	75 10                	jne    c0013070 <Reg::getLine(char*, char*, char*)+0x33>
c0013060:	57                   	push   edi
c0013061:	56                   	push   esi
c0013062:	53                   	push   ebx
c0013063:	68 95 16 02 c0       	push   0xc0021695
c0013068:	e8 7b fe ff ff       	call   c0012ee8 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001306d:	83 c4 10             	add    esp,0x10
c0013070:	5b                   	pop    ebx
c0013071:	5e                   	pop    esi
c0013072:	5f                   	pop    edi
c0013073:	c3                   	ret    

c0013074 <Reg::readInt(char*, char*, int*)>:
c0013074:	55                   	push   ebp
c0013075:	57                   	push   edi
c0013076:	56                   	push   esi
c0013077:	53                   	push   ebx
c0013078:	81 ec f0 00 00 00    	sub    esp,0xf0
c001307e:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0013082:	55                   	push   ebp
c0013083:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001308a:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013091:	e8 a7 ff ff ff       	call   c001303d <Reg::getLine(char*, char*, char*)>
c0013096:	83 c4 10             	add    esp,0x10
c0013099:	84 c0                	test   al,al
c001309b:	0f 84 b6 00 00 00    	je     c0013157 <Reg::readInt(char*, char*, int*)+0xe3>
c00130a1:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c00130a6:	83 fa 2b             	cmp    edx,0x2b
c00130a9:	74 0c                	je     c00130b7 <Reg::readInt(char*, char*, int*)+0x43>
c00130ab:	83 fa 2d             	cmp    edx,0x2d
c00130ae:	75 0e                	jne    c00130be <Reg::readInt(char*, char*, int*)+0x4a>
c00130b0:	ba 01 00 00 00       	mov    edx,0x1
c00130b5:	eb 0b                	jmp    c00130c2 <Reg::readInt(char*, char*, int*)+0x4e>
c00130b7:	ba 01 00 00 00       	mov    edx,0x1
c00130bc:	eb 02                	jmp    c00130c0 <Reg::readInt(char*, char*, int*)+0x4c>
c00130be:	31 d2                	xor    edx,edx
c00130c0:	31 c0                	xor    eax,eax
c00130c2:	be 0a 00 00 00       	mov    esi,0xa
c00130c7:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c00130cc:	75 21                	jne    c00130ef <Reg::readInt(char*, char*, int*)+0x7b>
c00130ce:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c00130d3:	83 f9 78             	cmp    ecx,0x78
c00130d6:	75 0a                	jne    c00130e2 <Reg::readInt(char*, char*, int*)+0x6e>
c00130d8:	83 c2 02             	add    edx,0x2
c00130db:	be 10 00 00 00       	mov    esi,0x10
c00130e0:	eb 0d                	jmp    c00130ef <Reg::readInt(char*, char*, int*)+0x7b>
c00130e2:	83 f9 62             	cmp    ecx,0x62
c00130e5:	75 08                	jne    c00130ef <Reg::readInt(char*, char*, int*)+0x7b>
c00130e7:	83 c2 02             	add    edx,0x2
c00130ea:	be 02 00 00 00       	mov    esi,0x2
c00130ef:	01 d5                	add    ebp,edx
c00130f1:	31 d2                	xor    edx,edx
c00130f3:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c00130f7:	83 f9 0d             	cmp    ecx,0xd
c00130fa:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00130fe:	0f 94 c3             	sete   bl
c0013101:	85 c9                	test   ecx,ecx
c0013103:	89 df                	mov    edi,ebx
c0013105:	0f 94 c3             	sete   bl
c0013108:	09 df                	or     edi,ebx
c001310a:	89 fb                	mov    ebx,edi
c001310c:	83 e7 01             	and    edi,0x1
c001310f:	75 35                	jne    c0013146 <Reg::readInt(char*, char*, int*)+0xd2>
c0013111:	0f af d6             	imul   edx,esi
c0013114:	83 fe 10             	cmp    esi,0x10
c0013117:	75 26                	jne    c001313f <Reg::readInt(char*, char*, int*)+0xcb>
c0013119:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001311d:	83 ef 41             	sub    edi,0x41
c0013120:	89 fb                	mov    ebx,edi
c0013122:	80 fb 05             	cmp    bl,0x5
c0013125:	77 06                	ja     c001312d <Reg::readInt(char*, char*, int*)+0xb9>
c0013127:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c001312b:	eb 16                	jmp    c0013143 <Reg::readInt(char*, char*, int*)+0xcf>
c001312d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013131:	83 eb 61             	sub    ebx,0x61
c0013134:	80 fb 05             	cmp    bl,0x5
c0013137:	77 06                	ja     c001313f <Reg::readInt(char*, char*, int*)+0xcb>
c0013139:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c001313d:	eb 04                	jmp    c0013143 <Reg::readInt(char*, char*, int*)+0xcf>
c001313f:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0013143:	45                   	inc    ebp
c0013144:	eb ad                	jmp    c00130f3 <Reg::readInt(char*, char*, int*)+0x7f>
c0013146:	84 c0                	test   al,al
c0013148:	74 02                	je     c001314c <Reg::readInt(char*, char*, int*)+0xd8>
c001314a:	f7 da                	neg    edx
c001314c:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0013153:	89 10                	mov    DWORD PTR [eax],edx
c0013155:	88 d8                	mov    al,bl
c0013157:	81 c4 ec 00 00 00    	add    esp,0xec
c001315d:	5b                   	pop    ebx
c001315e:	5e                   	pop    esi
c001315f:	5f                   	pop    edi
c0013160:	5d                   	pop    ebp
c0013161:	c3                   	ret    

c0013162 <Reg::readString(char*, char*, char*, int)>:
c0013162:	57                   	push   edi
c0013163:	56                   	push   esi
c0013164:	53                   	push   ebx
c0013165:	81 ec d4 00 00 00    	sub    esp,0xd4
c001316b:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0013172:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0013176:	57                   	push   edi
c0013177:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001317e:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013185:	e8 b3 fe ff ff       	call   c001303d <Reg::getLine(char*, char*, char*)>
c001318a:	83 c4 10             	add    esp,0x10
c001318d:	89 c6                	mov    esi,eax
c001318f:	84 c0                	test   al,al
c0013191:	74 44                	je     c00131d7 <Reg::readString(char*, char*, char*, int)+0x75>
c0013193:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001319a:	31 c0                	xor    eax,eax
c001319c:	4a                   	dec    edx
c001319d:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c00131a0:	84 c9                	test   cl,cl
c00131a2:	74 0f                	je     c00131b3 <Reg::readString(char*, char*, char*, int)+0x51>
c00131a4:	39 c2                	cmp    edx,eax
c00131a6:	7e 0b                	jle    c00131b3 <Reg::readString(char*, char*, char*, int)+0x51>
c00131a8:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00131ab:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00131b0:	40                   	inc    eax
c00131b1:	eb ea                	jmp    c001319d <Reg::readString(char*, char*, char*, int)+0x3b>
c00131b3:	83 ec 0c             	sub    esp,0xc
c00131b6:	53                   	push   ebx
c00131b7:	e8 b4 d3 fe ff       	call   c0000570 <strlen>
c00131bc:	83 c4 10             	add    esp,0x10
c00131bf:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00131c4:	75 11                	jne    c00131d7 <Reg::readString(char*, char*, char*, int)+0x75>
c00131c6:	83 ec 0c             	sub    esp,0xc
c00131c9:	53                   	push   ebx
c00131ca:	e8 a1 d3 fe ff       	call   c0000570 <strlen>
c00131cf:	83 c4 10             	add    esp,0x10
c00131d2:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00131d7:	81 c4 d0 00 00 00    	add    esp,0xd0
c00131dd:	89 f0                	mov    eax,esi
c00131df:	5b                   	pop    ebx
c00131e0:	5e                   	pop    esi
c00131e1:	5f                   	pop    edi
c00131e2:	c3                   	ret    

c00131e3 <Reg::readBool(char*, char*, bool*)>:
c00131e3:	83 ec 20             	sub    esp,0x20
c00131e6:	8d 44 24 10          	lea    eax,[esp+0x10]
c00131ea:	50                   	push   eax
c00131eb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00131ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00131f3:	e8 7c fe ff ff       	call   c0013074 <Reg::readInt(char*, char*, int*)>
c00131f8:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00131fd:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0013201:	0f 95 02             	setne  BYTE PTR [edx]
c0013204:	83 c4 2c             	add    esp,0x2c
c0013207:	c3                   	ret    

c0013208 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0013208:	53                   	push   ebx
c0013209:	83 ec 1c             	sub    esp,0x1c
c001320c:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0013210:	8d 44 24 13          	lea    eax,[esp+0x13]
c0013214:	50                   	push   eax
c0013215:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013219:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001321d:	e8 c1 ff ff ff       	call   c00131e3 <Reg::readBool(char*, char*, bool*)>
c0013222:	83 c4 10             	add    esp,0x10
c0013225:	84 c0                	test   al,al
c0013227:	74 04                	je     c001322d <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0013229:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001322d:	88 d8                	mov    al,bl
c001322f:	83 c4 18             	add    esp,0x18
c0013232:	5b                   	pop    ebx
c0013233:	c3                   	ret    

c0013234 <Reg::readIntWithDefault(char*, char*, int)>:
c0013234:	53                   	push   ebx
c0013235:	83 ec 1c             	sub    esp,0x1c
c0013238:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001323c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013240:	50                   	push   eax
c0013241:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013245:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013249:	e8 26 fe ff ff       	call   c0013074 <Reg::readInt(char*, char*, int*)>
c001324e:	83 c4 10             	add    esp,0x10
c0013251:	84 c0                	test   al,al
c0013253:	74 04                	je     c0013259 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0013255:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013259:	89 d8                	mov    eax,ebx
c001325b:	83 c4 18             	add    esp,0x18
c001325e:	5b                   	pop    ebx
c001325f:	c3                   	ret    

c0013260 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0013260:	57                   	push   edi
c0013261:	56                   	push   esi
c0013262:	56                   	push   esi
c0013263:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013267:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001326b:	56                   	push   esi
c001326c:	57                   	push   edi
c001326d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013271:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013275:	e8 e8 fe ff ff       	call   c0013162 <Reg::readString(char*, char*, char*, int)>
c001327a:	83 c4 10             	add    esp,0x10
c001327d:	84 c0                	test   al,al
c001327f:	75 1a                	jne    c001329b <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0013281:	51                   	push   ecx
c0013282:	56                   	push   esi
c0013283:	6a 00                	push   0x0
c0013285:	57                   	push   edi
c0013286:	e8 65 d2 fe ff       	call   c00004f0 <memset>
c001328b:	8d 4e ff             	lea    ecx,[esi-0x1]
c001328e:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013292:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013294:	83 c4 10             	add    esp,0x10
c0013297:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001329b:	89 f8                	mov    eax,edi
c001329d:	5a                   	pop    edx
c001329e:	5e                   	pop    esi
c001329f:	5f                   	pop    edi
c00132a0:	c3                   	ret    

c00132a1 <SysEject(regs*)>:
c00132a1:	83 ec 0c             	sub    esp,0xc
c00132a4:	83 ca ff             	or     edx,0xffffffff
c00132a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132ab:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00132ae:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00132b3:	83 e9 41             	sub    ecx,0x41
c00132b6:	83 f9 19             	cmp    ecx,0x19
c00132b9:	77 18                	ja     c00132d3 <SysEject(regs*)+0x32>
c00132bb:	8b 0c 8d 20 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7be0]
c00132c2:	85 c9                	test   ecx,ecx
c00132c4:	74 0d                	je     c00132d3 <SysEject(regs*)+0x32>
c00132c6:	83 ec 0c             	sub    esp,0xc
c00132c9:	51                   	push   ecx
c00132ca:	e8 eb a0 ff ff       	call   c000d3ba <LogicalDisk::eject()>
c00132cf:	83 c4 10             	add    esp,0x10
c00132d2:	99                   	cdq    
c00132d3:	83 c4 0c             	add    esp,0xc
c00132d6:	c3                   	ret    

c00132d7 <SysExit(regs*)>:
c00132d7:	83 ec 18             	sub    esp,0x18
c00132da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00132de:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00132e1:	e8 c6 2a 00 00       	call   c0015dac <terminateTask(int)>
c00132e6:	83 c8 ff             	or     eax,0xffffffff
c00132e9:	83 c4 1c             	add    esp,0x1c
c00132ec:	89 c2                	mov    edx,eax
c00132ee:	c3                   	ret    

c00132ef <SysGetCwd(regs*)>:
c00132ef:	83 ec 10             	sub    esp,0x10
c00132f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00132f6:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00132f9:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00132fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013301:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013304:	e8 7d 7c ff ff       	call   c000af86 <Fs::getcwd(Process*, char*, int)>
c0013309:	83 c4 1c             	add    esp,0x1c
c001330c:	99                   	cdq    
c001330d:	c3                   	ret    

c001330e <SysGetPID(regs*)>:
c001330e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013313:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013316:	8b 00                	mov    eax,DWORD PTR [eax]
c0013318:	99                   	cdq    
c0013319:	c3                   	ret    

c001331a <SysGetRAMData(regs*)>:
c001331a:	8b 0d e8 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ee8
c0013320:	69 05 e4 5e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0025ee4,0xc8
c001332a:	99                   	cdq    
c001332b:	f7 f9                	idiv   ecx
c001332d:	c1 e0 18             	shl    eax,0x18
c0013330:	09 c8                	or     eax,ecx
c0013332:	99                   	cdq    
c0013333:	c3                   	ret    

c0013334 <SysGetVGAPtr(regs*)>:
c0013334:	55                   	push   ebp
c0013335:	57                   	push   edi
c0013336:	56                   	push   esi
c0013337:	53                   	push   ebx
c0013338:	83 ec 18             	sub    esp,0x18
c001333b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001333f:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013342:	e8 31 25 00 00       	call   c0015878 <Thr::processFromPID(int)>
c0013347:	83 c4 10             	add    esp,0x10
c001334a:	89 c1                	mov    ecx,eax
c001334c:	b8 01 00 00 00       	mov    eax,0x1
c0013351:	85 c9                	test   ecx,ecx
c0013353:	74 57                	je     c00133ac <SysGetVGAPtr(regs*)+0x78>
c0013355:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c001335b:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c001335f:	74 0c                	je     c001336d <SysGetVGAPtr(regs*)+0x39>
c0013361:	83 ec 0c             	sub    esp,0xc
c0013364:	55                   	push   ebp
c0013365:	e8 e1 53 ff ff       	call   c000874b <setActiveTerminal(VgaText*)>
c001336a:	83 c4 10             	add    esp,0x10
c001336d:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0013370:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0013373:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0013378:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001337a:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001337d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013380:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0013386:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013389:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001338c:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0013392:	50                   	push   eax
c0013393:	50                   	push   eax
c0013394:	68 b0 16 02 c0       	push   0xc00216b0
c0013399:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001339c:	05 a8 0f 00 00       	add    eax,0xfa8
c00133a1:	50                   	push   eax
c00133a2:	e8 99 d2 fe ff       	call   c0000640 <strcpy>
c00133a7:	83 c4 10             	add    esp,0x10
c00133aa:	31 c0                	xor    eax,eax
c00133ac:	83 c4 0c             	add    esp,0xc
c00133af:	31 d2                	xor    edx,edx
c00133b1:	5b                   	pop    ebx
c00133b2:	5e                   	pop    esi
c00133b3:	5f                   	pop    edi
c00133b4:	5d                   	pop    ebp
c00133b5:	c3                   	ret    
c00133b6:	66 90                	xchg   ax,ax

c00133b8 <SysKill(regs*)>:
c00133b8:	53                   	push   ebx
c00133b9:	83 ec 08             	sub    esp,0x8
c00133bc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00133c0:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c00133c4:	75 16                	jne    c00133dc <SysKill(regs*)+0x24>
c00133c6:	83 ec 0c             	sub    esp,0xc
c00133c9:	68 ba 16 02 c0       	push   0xc00216ba
c00133ce:	e8 c8 d7 ff ff       	call   c0010b9b <KePanic(char const*)>
c00133d3:	83 c4 10             	add    esp,0x10
c00133d6:	e9 89 00 00 00       	jmp    c0013464 <SysKill(regs*)+0xac>
c00133db:	90                   	nop
c00133dc:	83 ec 0c             	sub    esp,0xc
c00133df:	68 84 91 02 c0       	push   0xc0029184
c00133e4:	e8 13 bc 00 00       	call   c001effc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00133e9:	8d 76 00             	lea    esi,[esi+0x0]
c00133ec:	83 c4 10             	add    esp,0x10
c00133ef:	85 c0                	test   eax,eax
c00133f1:	74 19                	je     c001340c <SysKill(regs*)+0x54>
c00133f3:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00133f6:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00133f9:	39 0a                	cmp    DWORD PTR [edx],ecx
c00133fb:	74 33                	je     c0013430 <SysKill(regs*)+0x78>
c00133fd:	52                   	push   edx
c00133fe:	52                   	push   edx
c00133ff:	50                   	push   eax
c0013400:	68 84 91 02 c0       	push   0xc0029184
c0013405:	e8 12 bf 00 00       	call   c001f31c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001340a:	eb e0                	jmp    c00133ec <SysKill(regs*)+0x34>
c001340c:	83 ec 0c             	sub    esp,0xc
c001340f:	68 78 91 02 c0       	push   0xc0029178
c0013414:	e8 e3 bb 00 00       	call   c001effc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013419:	8d 76 00             	lea    esi,[esi+0x0]
c001341c:	83 c4 10             	add    esp,0x10
c001341f:	85 c0                	test   eax,eax
c0013421:	74 41                	je     c0013464 <SysKill(regs*)+0xac>
c0013423:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013426:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013429:	39 0a                	cmp    DWORD PTR [edx],ecx
c001342b:	75 27                	jne    c0013454 <SysKill(regs*)+0x9c>
c001342d:	8d 76 00             	lea    esi,[esi+0x0]
c0013430:	51                   	push   ecx
c0013431:	51                   	push   ecx
c0013432:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013435:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001343a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001343d:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013443:	e8 f6 db ff ff       	call   c001103e <KeRaiseSignal(SigHandlerBlock*, int)>
c0013448:	83 c4 10             	add    esp,0x10
c001344b:	31 c0                	xor    eax,eax
c001344d:	31 d2                	xor    edx,edx
c001344f:	eb 1b                	jmp    c001346c <SysKill(regs*)+0xb4>
c0013451:	8d 76 00             	lea    esi,[esi+0x0]
c0013454:	52                   	push   edx
c0013455:	52                   	push   edx
c0013456:	50                   	push   eax
c0013457:	68 78 91 02 c0       	push   0xc0029178
c001345c:	e8 bb be 00 00       	call   c001f31c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013461:	eb b9                	jmp    c001341c <SysKill(regs*)+0x64>
c0013463:	90                   	nop
c0013464:	83 c8 ff             	or     eax,0xffffffff
c0013467:	89 c2                	mov    edx,eax
c0013469:	8d 76 00             	lea    esi,[esi+0x0]
c001346c:	83 c4 08             	add    esp,0x8
c001346f:	5b                   	pop    ebx
c0013470:	c3                   	ret    

c0013471 <SysLoadDLL(regs*)>:
c0013471:	56                   	push   esi
c0013472:	53                   	push   ebx
c0013473:	31 d2                	xor    edx,edx
c0013475:	51                   	push   ecx
c0013476:	b8 01 00 00 00       	mov    eax,0x1
c001347b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001347f:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0013483:	0f 84 8c 00 00 00    	je     c0013515 <SysLoadDLL(regs*)+0xa4>
c0013489:	83 ec 0c             	sub    esp,0xc
c001348c:	68 14 01 00 00       	push   0x114
c0013491:	e8 18 46 ff ff       	call   c0007aae <malloc>
c0013496:	83 c4 0c             	add    esp,0xc
c0013499:	89 c3                	mov    ebx,eax
c001349b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00134a0:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00134a3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00134a6:	53                   	push   ebx
c00134a7:	e8 e4 7c ff ff       	call   c000b190 <File::File(char const*, Process*)>
c00134ac:	83 c4 10             	add    esp,0x10
c00134af:	31 d2                	xor    edx,edx
c00134b1:	b8 02 00 00 00       	mov    eax,0x2
c00134b6:	85 db                	test   ebx,ebx
c00134b8:	74 5b                	je     c0013515 <SysLoadDLL(regs*)+0xa4>
c00134ba:	83 ec 0c             	sub    esp,0xc
c00134bd:	53                   	push   ebx
c00134be:	e8 f7 7f ff ff       	call   c000b4ba <File::exists()>
c00134c3:	83 c4 10             	add    esp,0x10
c00134c6:	84 c0                	test   al,al
c00134c8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00134ca:	75 11                	jne    c00134dd <SysLoadDLL(regs*)+0x6c>
c00134cc:	83 ec 0c             	sub    esp,0xc
c00134cf:	53                   	push   ebx
c00134d0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00134d3:	83 c4 10             	add    esp,0x10
c00134d6:	b8 03 00 00 00       	mov    eax,0x3
c00134db:	eb 36                	jmp    c0013513 <SysLoadDLL(regs*)+0xa2>
c00134dd:	83 ec 0c             	sub    esp,0xc
c00134e0:	53                   	push   ebx
c00134e1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00134e4:	58                   	pop    eax
c00134e5:	5a                   	pop    edx
c00134e6:	6a 00                	push   0x0
c00134e8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00134eb:	e8 bb 14 00 00       	call   c00149ab <Thr::loadDLL(char const*, bool)>
c00134f0:	83 c4 10             	add    esp,0x10
c00134f3:	89 c1                	mov    ecx,eax
c00134f5:	31 d2                	xor    edx,edx
c00134f7:	b8 04 00 00 00       	mov    eax,0x4
c00134fc:	85 c9                	test   ecx,ecx
c00134fe:	74 15                	je     c0013515 <SysLoadDLL(regs*)+0xa4>
c0013500:	53                   	push   ebx
c0013501:	53                   	push   ebx
c0013502:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0013508:	51                   	push   ecx
c0013509:	e8 ce 16 00 00       	call   c0014bdc <Thr::executeDLL(unsigned long, void*)>
c001350e:	83 c4 10             	add    esp,0x10
c0013511:	31 c0                	xor    eax,eax
c0013513:	31 d2                	xor    edx,edx
c0013515:	59                   	pop    ecx
c0013516:	5b                   	pop    ebx
c0013517:	5e                   	pop    esi
c0013518:	c3                   	ret    

c0013519 <SysRead(regs*)>:
c0013519:	57                   	push   edi
c001351a:	56                   	push   esi
c001351b:	53                   	push   ebx
c001351c:	83 ec 10             	sub    esp,0x10
c001351f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013523:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013526:	83 f8 02             	cmp    eax,0x2
c0013529:	77 10                	ja     c001353b <SysRead(regs*)+0x22>
c001352b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013530:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013533:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013539:	eb 0e                	jmp    c0013549 <SysRead(regs*)+0x30>
c001353b:	83 ec 0c             	sub    esp,0xc
c001353e:	50                   	push   eax
c001353f:	e8 63 5f ff ff       	call   c00094a7 <KeGetFileFromDescriptor(int)>
c0013544:	83 c4 10             	add    esp,0x10
c0013547:	89 c1                	mov    ecx,eax
c0013549:	83 c8 ff             	or     eax,0xffffffff
c001354c:	85 c9                	test   ecx,ecx
c001354e:	89 c2                	mov    edx,eax
c0013550:	74 28                	je     c001357a <SysRead(regs*)+0x61>
c0013552:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001355a:	31 ff                	xor    edi,edi
c001355c:	83 ec 0c             	sub    esp,0xc
c001355f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013561:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013565:	52                   	push   edx
c0013566:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013569:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001356c:	57                   	push   edi
c001356d:	56                   	push   esi
c001356e:	51                   	push   ecx
c001356f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013572:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013576:	83 c4 20             	add    esp,0x20
c0013579:	99                   	cdq    
c001357a:	83 c4 10             	add    esp,0x10
c001357d:	5b                   	pop    ebx
c001357e:	5e                   	pop    esi
c001357f:	5f                   	pop    edi
c0013580:	c3                   	ret    

c0013581 <SysRegisterSignal(regs*)>:
c0013581:	83 ec 18             	sub    esp,0x18
c0013584:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013588:	6a 00                	push   0x0
c001358a:	6a 00                	push   0x0
c001358c:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001358f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013592:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013597:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001359a:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00135a0:	e8 63 da ff ff       	call   c0011008 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c00135a5:	83 c4 2c             	add    esp,0x2c
c00135a8:	99                   	cdq    
c00135a9:	c3                   	ret    

c00135aa <SysRegistryGetTypeFromPath(regs*)>:
c00135aa:	57                   	push   edi
c00135ab:	56                   	push   esi
c00135ac:	53                   	push   ebx
c00135ad:	81 ec 38 01 00 00    	sub    esp,0x138
c00135b3:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c00135ba:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00135bd:	68 db 16 02 c0       	push   0xc00216db
c00135c2:	e8 72 73 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c00135c7:	5a                   	pop    edx
c00135c8:	59                   	pop    ecx
c00135c9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00135cc:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00135cf:	e8 4d f6 ff ff       	call   c0012c21 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00135d4:	5f                   	pop    edi
c00135d5:	89 c6                	mov    esi,eax
c00135d7:	5a                   	pop    edx
c00135d8:	50                   	push   eax
c00135d9:	68 fb 16 02 c0       	push   0xc00216fb
c00135de:	e8 56 73 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c00135e3:	83 c4 10             	add    esp,0x10
c00135e6:	85 f6                	test   esi,esi
c00135e8:	74 28                	je     c0013612 <SysRegistryGetTypeFromPath(regs*)+0x68>
c00135ea:	50                   	push   eax
c00135eb:	8d 7c 24 08          	lea    edi,[esp+0x8]
c00135ef:	57                   	push   edi
c00135f0:	56                   	push   esi
c00135f1:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00135f4:	e8 0c f2 ff ff       	call   c0012805 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00135f9:	83 c4 0c             	add    esp,0xc
c00135fc:	89 c3                	mov    ebx,eax
c00135fe:	57                   	push   edi
c00135ff:	50                   	push   eax
c0013600:	68 03 17 02 c0       	push   0xc0021703
c0013605:	e8 2f 73 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c001360a:	89 d8                	mov    eax,ebx
c001360c:	83 c4 10             	add    esp,0x10
c001360f:	99                   	cdq    
c0013610:	eb 05                	jmp    c0013617 <SysRegistryGetTypeFromPath(regs*)+0x6d>
c0013612:	83 c8 ff             	or     eax,0xffffffff
c0013615:	89 c2                	mov    edx,eax
c0013617:	81 c4 30 01 00 00    	add    esp,0x130
c001361d:	5b                   	pop    ebx
c001361e:	5e                   	pop    esi
c001361f:	5f                   	pop    edi
c0013620:	c3                   	ret    

c0013621 <SysRegistryReadExtent(regs*)>:
c0013621:	83 ec 1c             	sub    esp,0x1c
c0013624:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013628:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001362b:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001362e:	85 c0                	test   eax,eax
c0013630:	79 1f                	jns    c0013651 <SysRegistryReadExtent(regs*)+0x30>
c0013632:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0013637:	52                   	push   edx
c0013638:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001363c:	52                   	push   edx
c001363d:	50                   	push   eax
c001363e:	51                   	push   ecx
c001363f:	e8 b3 f0 ff ff       	call   c00126f7 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0013644:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013648:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001364c:	83 c4 10             	add    esp,0x10
c001364f:	eb 14                	jmp    c0013665 <SysRegistryReadExtent(regs*)+0x44>
c0013651:	83 ec 04             	sub    esp,0x4
c0013654:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0013657:	50                   	push   eax
c0013658:	51                   	push   ecx
c0013659:	e8 33 eb ff ff       	call   c0012191 <CmGetString(Reghive_Tag*, int, char*)>
c001365e:	83 c4 10             	add    esp,0x10
c0013661:	31 c0                	xor    eax,eax
c0013663:	31 d2                	xor    edx,edx
c0013665:	83 c4 1c             	add    esp,0x1c
c0013668:	c3                   	ret    

c0013669 <SysRegistryPathToExtentLookup(regs*)>:
c0013669:	53                   	push   ebx
c001366a:	83 ec 10             	sub    esp,0x10
c001366d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013671:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013674:	68 19 17 02 c0       	push   0xc0021719
c0013679:	e8 bb 72 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c001367e:	58                   	pop    eax
c001367f:	5a                   	pop    edx
c0013680:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013683:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013686:	e8 96 f5 ff ff       	call   c0012c21 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c001368b:	83 c4 18             	add    esp,0x18
c001368e:	99                   	cdq    
c001368f:	5b                   	pop    ebx
c0013690:	c3                   	ret    

c0013691 <SysRegistryEnterDirectory(regs*)>:
c0013691:	53                   	push   ebx
c0013692:	83 ec 10             	sub    esp,0x10
c0013695:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013699:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001369c:	68 3c 17 02 c0       	push   0xc002173c
c00136a1:	e8 93 72 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c00136a6:	58                   	pop    eax
c00136a7:	5a                   	pop    edx
c00136a8:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00136ab:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00136ae:	e8 55 eb ff ff       	call   c0012208 <CmEnterDirectory(Reghive_Tag*, int)>
c00136b3:	83 c4 18             	add    esp,0x18
c00136b6:	99                   	cdq    
c00136b7:	5b                   	pop    ebx
c00136b8:	c3                   	ret    

c00136b9 <SysRegistryGetNext(regs*)>:
c00136b9:	53                   	push   ebx
c00136ba:	83 ec 10             	sub    esp,0x10
c00136bd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00136c1:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00136c4:	68 5a 17 02 c0       	push   0xc002175a
c00136c9:	e8 6b 72 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c00136ce:	58                   	pop    eax
c00136cf:	5a                   	pop    edx
c00136d0:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00136d3:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00136d6:	e8 6c eb ff ff       	call   c0012247 <CmGetNext(Reghive_Tag*, int)>
c00136db:	83 c4 18             	add    esp,0x18
c00136de:	99                   	cdq    
c00136df:	5b                   	pop    ebx
c00136e0:	c3                   	ret    

c00136e1 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c00136e1:	57                   	push   edi
c00136e2:	56                   	push   esi
c00136e3:	53                   	push   ebx
c00136e4:	81 ec 34 01 00 00    	sub    esp,0x134
c00136ea:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c00136f1:	8d 7c 24 08          	lea    edi,[esp+0x8]
c00136f5:	57                   	push   edi
c00136f6:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00136f9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00136fc:	e8 04 f1 ff ff       	call   c0012805 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013701:	89 c3                	mov    ebx,eax
c0013703:	58                   	pop    eax
c0013704:	5a                   	pop    edx
c0013705:	57                   	push   edi
c0013706:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0013709:	e8 32 cf fe ff       	call   c0000640 <strcpy>
c001370e:	89 d8                	mov    eax,ebx
c0013710:	81 c4 40 01 00 00    	add    esp,0x140
c0013716:	99                   	cdq    
c0013717:	5b                   	pop    ebx
c0013718:	5e                   	pop    esi
c0013719:	5f                   	pop    edi
c001371a:	c3                   	ret    

c001371b <SysRegistryOpen(regs*)>:
c001371b:	83 ec 18             	sub    esp,0x18
c001371e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013722:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013725:	e8 f7 e8 ff ff       	call   c0012021 <CmOpen(char const*)>
c001372a:	83 c4 1c             	add    esp,0x1c
c001372d:	99                   	cdq    
c001372e:	c3                   	ret    

c001372f <SysRegistryClose(regs*)>:
c001372f:	83 ec 18             	sub    esp,0x18
c0013732:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013736:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013739:	e8 01 ea ff ff       	call   c001213f <CmClose(Reghive_Tag*)>
c001373e:	31 c0                	xor    eax,eax
c0013740:	31 d2                	xor    edx,edx
c0013742:	83 c4 1c             	add    esp,0x1c
c0013745:	c3                   	ret    

c0013746 <SysSbrk(regs*)>:
c0013746:	56                   	push   esi
c0013747:	53                   	push   ebx
c0013748:	50                   	push   eax
c0013749:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001374e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013752:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013755:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0013758:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c001375e:	85 db                	test   ebx,ebx
c0013760:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0013763:	74 02                	je     c0013767 <SysSbrk(regs*)+0x21>
c0013765:	79 06                	jns    c001376d <SysSbrk(regs*)+0x27>
c0013767:	89 f0                	mov    eax,esi
c0013769:	31 d2                	xor    edx,edx
c001376b:	eb 2a                	jmp    c0013797 <SysSbrk(regs*)+0x51>
c001376d:	83 c8 ff             	or     eax,0xffffffff
c0013770:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0013776:	89 c2                	mov    edx,eax
c0013778:	77 1d                	ja     c0013797 <SysSbrk(regs*)+0x51>
c001377a:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0013780:	50                   	push   eax
c0013781:	c1 ea 0c             	shr    edx,0xc
c0013784:	68 07 0c 00 00       	push   0xc07
c0013789:	52                   	push   edx
c001378a:	51                   	push   ecx
c001378b:	e8 88 66 ff ff       	call   c0009e18 <VAS::allocatePages(int, int)>
c0013790:	89 f0                	mov    eax,esi
c0013792:	31 d2                	xor    edx,edx
c0013794:	83 c4 10             	add    esp,0x10
c0013797:	59                   	pop    ecx
c0013798:	5b                   	pop    ebx
c0013799:	5e                   	pop    esi
c001379a:	c3                   	ret    

c001379b <SysSetCwd(regs*)>:
c001379b:	83 ec 14             	sub    esp,0x14
c001379e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00137a2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00137a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00137aa:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00137ad:	e8 a7 7d ff ff       	call   c000b559 <Fs::setcwd(Process*, char*)>
c00137b2:	83 c4 1c             	add    esp,0x1c
c00137b5:	99                   	cdq    
c00137b6:	c3                   	ret    

c00137b7 <SysSetTime(regs*)>:
c00137b7:	55                   	push   ebp
c00137b8:	31 c9                	xor    ecx,ecx
c00137ba:	57                   	push   edi
c00137bb:	bd 0c 00 00 00       	mov    ebp,0xc
c00137c0:	56                   	push   esi
c00137c1:	53                   	push   ebx
c00137c2:	31 db                	xor    ebx,ebx
c00137c4:	83 ec 10             	sub    esp,0x10
c00137c7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00137cb:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c00137ce:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00137d1:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c00137d4:	89 c2                	mov    edx,eax
c00137d6:	81 ef 6c 07 00 00    	sub    edi,0x76c
c00137dc:	83 e2 1f             	and    edx,0x1f
c00137df:	c1 e7 10             	shl    edi,0x10
c00137e2:	42                   	inc    edx
c00137e3:	c1 e8 05             	shr    eax,0x5
c00137e6:	88 d1                	mov    cl,dl
c00137e8:	31 d2                	xor    edx,edx
c00137ea:	f7 f5                	div    ebp
c00137ec:	89 dd                	mov    ebp,ebx
c00137ee:	88 d5                	mov    ch,dl
c00137f0:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c00137f6:	0f b7 c1             	movzx  eax,cx
c00137f9:	31 d2                	xor    edx,edx
c00137fb:	09 f8                	or     eax,edi
c00137fd:	bf 3c 00 00 00       	mov    edi,0x3c
c0013802:	89 c1                	mov    ecx,eax
c0013804:	89 f0                	mov    eax,esi
c0013806:	f7 f7                	div    edi
c0013808:	c1 e2 10             	shl    edx,0x10
c001380b:	09 d5                	or     ebp,edx
c001380d:	31 d2                	xor    edx,edx
c001380f:	89 eb                	mov    ebx,ebp
c0013811:	f7 f7                	div    edi
c0013813:	bf 10 0e 00 00       	mov    edi,0xe10
c0013818:	88 d7                	mov    bh,dl
c001381a:	89 f0                	mov    eax,esi
c001381c:	31 d2                	xor    edx,edx
c001381e:	f7 f7                	div    edi
c0013820:	bf 18 00 00 00       	mov    edi,0x18
c0013825:	31 d2                	xor    edx,edx
c0013827:	f7 f7                	div    edi
c0013829:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001382e:	88 d3                	mov    bl,dl
c0013830:	53                   	push   ebx
c0013831:	51                   	push   ecx
c0013832:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0013838:	e8 19 85 ff ff       	call   c000bd56 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001383d:	83 c4 1c             	add    esp,0x1c
c0013840:	83 f0 01             	xor    eax,0x1
c0013843:	5b                   	pop    ebx
c0013844:	0f b6 c0             	movzx  eax,al
c0013847:	5e                   	pop    esi
c0013848:	31 d2                	xor    edx,edx
c001384a:	5f                   	pop    edi
c001384b:	5d                   	pop    ebp
c001384c:	c3                   	ret    

c001384d <SysTimezone(regs*)>:
c001384d:	53                   	push   ebx
c001384e:	83 ec 08             	sub    esp,0x8
c0013851:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013855:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0013859:	75 17                	jne    c0013872 <SysTimezone(regs*)+0x25>
c001385b:	83 ec 0c             	sub    esp,0xc
c001385e:	68 71 17 02 c0       	push   0xc0021771
c0013863:	e8 d1 70 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0013868:	83 c8 ff             	or     eax,0xffffffff
c001386b:	83 c4 10             	add    esp,0x10
c001386e:	89 c2                	mov    edx,eax
c0013870:	eb 20                	jmp    c0013892 <SysTimezone(regs*)+0x45>
c0013872:	83 ec 0c             	sub    esp,0xc
c0013875:	68 86 17 02 c0       	push   0xc0021786
c001387a:	e8 ba 70 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c001387f:	58                   	pop    eax
c0013880:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013883:	e8 38 82 ff ff       	call   c000bac0 <User::loadClockSettings(int)>
c0013888:	83 c4 10             	add    esp,0x10
c001388b:	b8 01 00 00 00       	mov    eax,0x1
c0013890:	31 d2                	xor    edx,edx
c0013892:	83 c4 08             	add    esp,0x8
c0013895:	5b                   	pop    ebx
c0013896:	c3                   	ret    

c0013897 <SysWrite(regs*)>:
c0013897:	57                   	push   edi
c0013898:	56                   	push   esi
c0013899:	53                   	push   ebx
c001389a:	83 ec 10             	sub    esp,0x10
c001389d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00138a1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00138a4:	83 f8 02             	cmp    eax,0x2
c00138a7:	77 10                	ja     c00138b9 <SysWrite(regs*)+0x22>
c00138a9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00138ae:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00138b1:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00138b7:	eb 0e                	jmp    c00138c7 <SysWrite(regs*)+0x30>
c00138b9:	83 ec 0c             	sub    esp,0xc
c00138bc:	50                   	push   eax
c00138bd:	e8 e5 5b ff ff       	call   c00094a7 <KeGetFileFromDescriptor(int)>
c00138c2:	83 c4 10             	add    esp,0x10
c00138c5:	89 c1                	mov    ecx,eax
c00138c7:	83 c8 ff             	or     eax,0xffffffff
c00138ca:	85 c9                	test   ecx,ecx
c00138cc:	89 c2                	mov    edx,eax
c00138ce:	74 28                	je     c00138f8 <SysWrite(regs*)+0x61>
c00138d0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00138d8:	31 ff                	xor    edi,edi
c00138da:	83 ec 0c             	sub    esp,0xc
c00138dd:	8b 01                	mov    eax,DWORD PTR [ecx]
c00138df:	8d 54 24 18          	lea    edx,[esp+0x18]
c00138e3:	52                   	push   edx
c00138e4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00138e7:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00138ea:	57                   	push   edi
c00138eb:	56                   	push   esi
c00138ec:	51                   	push   ecx
c00138ed:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00138f0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00138f4:	83 c4 20             	add    esp,0x20
c00138f7:	99                   	cdq    
c00138f8:	83 c4 10             	add    esp,0x10
c00138fb:	5b                   	pop    ebx
c00138fc:	5e                   	pop    esi
c00138fd:	5f                   	pop    edi
c00138fe:	c3                   	ret    

c00138ff <SysWsbe(regs*)>:
c00138ff:	57                   	push   edi
c0013900:	b9 0b 00 00 00       	mov    ecx,0xb
c0013905:	56                   	push   esi
c0013906:	be c5 17 02 c0       	mov    esi,0xc00217c5
c001390b:	53                   	push   ebx
c001390c:	83 ec 30             	sub    esp,0x30
c001390f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0013913:	fc                   	cld    
c0013914:	83 ec 0c             	sub    esp,0xc
c0013917:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013919:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001391d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013922:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013925:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c001392b:	8b 06                	mov    eax,DWORD PTR [esi]
c001392d:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0013930:	57                   	push   edi
c0013931:	e8 3a cc fe ff       	call   c0000570 <strlen>
c0013936:	5a                   	pop    edx
c0013937:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001393b:	52                   	push   edx
c001393c:	31 d2                	xor    edx,edx
c001393e:	57                   	push   edi
c001393f:	52                   	push   edx
c0013940:	50                   	push   eax
c0013941:	56                   	push   esi
c0013942:	ff d3                	call   ebx
c0013944:	83 c4 14             	add    esp,0x14
c0013947:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001394b:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001394e:	e8 59 24 00 00       	call   c0015dac <terminateTask(int)>
c0013953:	83 c4 40             	add    esp,0x40
c0013956:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001395b:	5b                   	pop    ebx
c001395c:	31 d2                	xor    edx,edx
c001395e:	5e                   	pop    esi
c001395f:	5f                   	pop    edi
c0013960:	c3                   	ret    

c0013961 <SysYield(regs*)>:
c0013961:	83 ec 0c             	sub    esp,0xc
c0013964:	fa                   	cli    
c0013965:	ff 05 68 91 02 c0    	inc    DWORD PTR ds:0xc0029168
c001396b:	e8 9c 1a 00 00       	call   c001540c <schedule()>
c0013970:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0013975:	48                   	dec    eax
c0013976:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c001397b:	75 01                	jne    c001397e <SysYield(regs*)+0x1d>
c001397d:	fb                   	sti    
c001397e:	31 c0                	xor    eax,eax
c0013980:	31 d2                	xor    edx,edx
c0013982:	83 c4 0c             	add    esp,0xc
c0013985:	c3                   	ret    

c0013986 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0013986:	55                   	push   ebp
c0013987:	57                   	push   edi
c0013988:	56                   	push   esi
c0013989:	53                   	push   ebx
c001398a:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0013990:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0013998:	0f 95 c0             	setne  al
c001399b:	31 d2                	xor    edx,edx
c001399d:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00139a5:	0f 94 c2             	sete   dl
c00139a8:	85 c2                	test   edx,eax
c00139aa:	74 34                	je     c00139e0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c00139ac:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c00139b7:	74 27                	je     c00139e0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c00139b9:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c00139c0:	05 00 10 00 00       	add    eax,0x1000
c00139c5:	89 c1                	mov    ecx,eax
c00139c7:	25 00 f0 ff ff       	and    eax,0xfffff000
c00139cc:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c00139d2:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c00139d9:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c00139e0:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c00139e7:	83 ec 0c             	sub    esp,0xc
c00139ea:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00139f0:	6a 01                	push   0x1
c00139f2:	e8 0a 5c ff ff       	call   c0009601 <Virt::allocateKernelVirtualPages(int)>
c00139f7:	83 c4 10             	add    esp,0x10
c00139fa:	89 c3                	mov    ebx,eax
c00139fc:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0013a02:	0f 86 25 01 00 00    	jbe    c0013b2d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c0013a08:	c1 ee 0c             	shr    esi,0xc
c0013a0b:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0013a12:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0013a16:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013a1e:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0013a25:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013a29:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0013a30:	29 ef                	sub    edi,ebp
c0013a32:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0013a36:	0f 83 f8 00 00 00    	jae    c0013b34 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ae>
c0013a3c:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0013a42:	76 05                	jbe    c0013a49 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c0013a44:	bf 00 10 00 00       	mov    edi,0x1000
c0013a49:	83 ec 0c             	sub    esp,0xc
c0013a4c:	31 d2                	xor    edx,edx
c0013a4e:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0013a55:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013a57:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013a5b:	50                   	push   eax
c0013a5c:	8d 74 24 30          	lea    esi,[esp+0x30]
c0013a60:	56                   	push   esi
c0013a61:	52                   	push   edx
c0013a62:	57                   	push   edi
c0013a63:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0013a6a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013a6d:	83 c4 20             	add    esp,0x20
c0013a70:	85 c0                	test   eax,eax
c0013a72:	75 06                	jne    c0013a7a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c0013a74:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0013a78:	74 13                	je     c0013a8d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c0013a7a:	83 ec 0c             	sub    esp,0xc
c0013a7d:	53                   	push   ebx
c0013a7e:	e8 9c 5e ff ff       	call   c000991f <Virt::freeKernelVirtualPages(unsigned long)>
c0013a83:	83 c4 10             	add    esp,0x10
c0013a86:	31 c0                	xor    eax,eax
c0013a88:	e9 7c 01 00 00       	jmp    c0013c09 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c0013a8d:	fa                   	cli    
c0013a8e:	ff 05 68 91 02 c0    	inc    DWORD PTR ds:0xc0029168
c0013a94:	e8 19 43 ff ff       	call   c0007db2 <Phys::allocatePage()>
c0013a99:	6a 07                	push   0x7
c0013a9b:	89 c7                	mov    edi,eax
c0013a9d:	53                   	push   ebx
c0013a9e:	50                   	push   eax
c0013a9f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013aa4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013aa7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013aad:	e8 62 62 ff ff       	call   c0009d14 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013ab2:	83 c4 0c             	add    esp,0xc
c0013ab5:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013abc:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013ac2:	6a 00                	push   0x0
c0013ac4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ac9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013acc:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013ad2:	e8 a3 60 ff ff       	call   c0009b7a <VAS::mapOtherVASIn(bool, VAS*)>
c0013ad7:	58                   	pop    eax
c0013ad8:	5a                   	pop    edx
c0013ad9:	68 07 0c 00 00       	push   0xc07
c0013ade:	55                   	push   ebp
c0013adf:	57                   	push   edi
c0013ae0:	89 df                	mov    edi,ebx
c0013ae2:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013ae9:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013aef:	6a 00                	push   0x0
c0013af1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013af6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013af9:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013aff:	e8 62 64 ff ff       	call   c0009f66 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0013b04:	b9 00 10 00 00       	mov    ecx,0x1000
c0013b09:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013b0b:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0013b10:	83 c4 20             	add    esp,0x20
c0013b13:	48                   	dec    eax
c0013b14:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0013b19:	85 c0                	test   eax,eax
c0013b1b:	75 01                	jne    c0013b1e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c0013b1d:	fb                   	sti    
c0013b1e:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013b24:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0013b28:	e9 f1 fe ff ff       	jmp    c0013a1e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c0013b2d:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0013b34:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0013b3b:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0013b41:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0013b47:	0f 86 ae 00 00 00    	jbe    c0013bfb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c0013b4d:	fa                   	cli    
c0013b4e:	ff 05 68 91 02 c0    	inc    DWORD PTR ds:0xc0029168
c0013b54:	c1 ee 0c             	shr    esi,0xc
c0013b57:	51                   	push   ecx
c0013b58:	31 ff                	xor    edi,edi
c0013b5a:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013b61:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013b67:	6a 00                	push   0x0
c0013b69:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b6e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013b71:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013b77:	e8 fe 5f ff ff       	call   c0009b7a <VAS::mapOtherVASIn(bool, VAS*)>
c0013b7c:	83 c4 10             	add    esp,0x10
c0013b7f:	e8 2e 42 ff ff       	call   c0007db2 <Phys::allocatePage()>
c0013b84:	47                   	inc    edi
c0013b85:	6a 07                	push   0x7
c0013b87:	53                   	push   ebx
c0013b88:	50                   	push   eax
c0013b89:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013b8d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013b93:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0013b96:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0013b9c:	e8 73 61 ff ff       	call   c0009d14 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013ba1:	58                   	pop    eax
c0013ba2:	5a                   	pop    edx
c0013ba3:	68 07 0c 00 00       	push   0xc07
c0013ba8:	55                   	push   ebp
c0013ba9:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013baf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013bb3:	50                   	push   eax
c0013bb4:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013bbb:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013bc1:	6a 00                	push   0x0
c0013bc3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013bc8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013bcb:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013bd1:	e8 90 63 ff ff       	call   c0009f66 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0013bd6:	83 c4 1c             	add    esp,0x1c
c0013bd9:	68 00 10 00 00       	push   0x1000
c0013bde:	6a 00                	push   0x0
c0013be0:	53                   	push   ebx
c0013be1:	e8 0a c9 fe ff       	call   c00004f0 <memset>
c0013be6:	83 c4 10             	add    esp,0x10
c0013be9:	39 fe                	cmp    esi,edi
c0013beb:	77 92                	ja     c0013b7f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f9>
c0013bed:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0013bf2:	48                   	dec    eax
c0013bf3:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0013bf8:	75 01                	jne    c0013bfb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c0013bfa:	fb                   	sti    
c0013bfb:	83 ec 0c             	sub    esp,0xc
c0013bfe:	53                   	push   ebx
c0013bff:	e8 1b 5d ff ff       	call   c000991f <Virt::freeKernelVirtualPages(unsigned long)>
c0013c04:	83 c4 10             	add    esp,0x10
c0013c07:	b0 01                	mov    al,0x1
c0013c09:	81 c4 2c 10 00 00    	add    esp,0x102c
c0013c0f:	5b                   	pop    ebx
c0013c10:	5e                   	pop    esi
c0013c11:	5f                   	pop    edi
c0013c12:	5d                   	pop    ebp
c0013c13:	c3                   	ret    

c0013c14 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0013c14:	55                   	push   ebp
c0013c15:	57                   	push   edi
c0013c16:	56                   	push   esi
c0013c17:	53                   	push   ebx
c0013c18:	83 ec 48             	sub    esp,0x48
c0013c1b:	68 14 01 00 00       	push   0x114
c0013c20:	e8 89 3e ff ff       	call   c0007aae <malloc>
c0013c25:	83 c4 0c             	add    esp,0xc
c0013c28:	89 c6                	mov    esi,eax
c0013c2a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013c2e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013c32:	50                   	push   eax
c0013c33:	e8 58 75 ff ff       	call   c000b190 <File::File(char const*, Process*)>
c0013c38:	58                   	pop    eax
c0013c39:	5a                   	pop    edx
c0013c3a:	6a 01                	push   0x1
c0013c3c:	56                   	push   esi
c0013c3d:	e8 0a 76 ff ff       	call   c000b24c <File::open(FileOpenMode)>
c0013c42:	83 c4 10             	add    esp,0x10
c0013c45:	85 c0                	test   eax,eax
c0013c47:	0f 85 43 01 00 00    	jne    c0013d90 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013c4d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0013c55:	83 ec 0c             	sub    esp,0xc
c0013c58:	6a 34                	push   0x34
c0013c5a:	e8 4f 3e ff ff       	call   c0007aae <malloc>
c0013c5f:	89 c3                	mov    ebx,eax
c0013c61:	58                   	pop    eax
c0013c62:	8b 06                	mov    eax,DWORD PTR [esi]
c0013c64:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0013c68:	57                   	push   edi
c0013c69:	53                   	push   ebx
c0013c6a:	6a 00                	push   0x0
c0013c6c:	6a 34                	push   0x34
c0013c6e:	56                   	push   esi
c0013c6f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013c72:	83 c4 20             	add    esp,0x20
c0013c75:	85 c0                	test   eax,eax
c0013c77:	0f 85 13 01 00 00    	jne    c0013d90 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013c7d:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0013c83:	0f 85 07 01 00 00    	jne    c0013d90 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013c89:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013c8c:	85 c0                	test   eax,eax
c0013c8e:	0f 84 fc 00 00 00    	je     c0013d90 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013c94:	31 d2                	xor    edx,edx
c0013c96:	55                   	push   ebp
c0013c97:	52                   	push   edx
c0013c98:	50                   	push   eax
c0013c99:	56                   	push   esi
c0013c9a:	e8 6b 76 ff ff       	call   c000b30a <File::seek(unsigned long long)>
c0013c9f:	83 c4 10             	add    esp,0x10
c0013ca2:	85 c0                	test   eax,eax
c0013ca4:	0f 85 e6 00 00 00    	jne    c0013d90 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013caa:	83 ec 0c             	sub    esp,0xc
c0013cad:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013cb0:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0013cb4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0013cb8:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013cbc:	0f af c2             	imul   eax,edx
c0013cbf:	50                   	push   eax
c0013cc0:	e8 e9 3d ff ff       	call   c0007aae <malloc>
c0013cc5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0013cc7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013ccb:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013cce:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013cd2:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0013cd6:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013cda:	0f af c2             	imul   eax,edx
c0013cdd:	99                   	cdq    
c0013cde:	52                   	push   edx
c0013cdf:	50                   	push   eax
c0013ce0:	56                   	push   esi
c0013ce1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013ce4:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0013ce7:	83 c4 20             	add    esp,0x20
c0013cea:	85 c0                	test   eax,eax
c0013cec:	0f 84 9e 00 00 00    	je     c0013d90 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013cf2:	31 d2                	xor    edx,edx
c0013cf4:	51                   	push   ecx
c0013cf5:	52                   	push   edx
c0013cf6:	50                   	push   eax
c0013cf7:	56                   	push   esi
c0013cf8:	e8 0d 76 ff ff       	call   c000b30a <File::seek(unsigned long long)>
c0013cfd:	83 c4 10             	add    esp,0x10
c0013d00:	85 c0                	test   eax,eax
c0013d02:	0f 85 88 00 00 00    	jne    c0013d90 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013d08:	83 ec 0c             	sub    esp,0xc
c0013d0b:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0013d0f:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0013d13:	31 ed                	xor    ebp,ebp
c0013d15:	0f af c2             	imul   eax,edx
c0013d18:	50                   	push   eax
c0013d19:	e8 90 3d ff ff       	call   c0007aae <malloc>
c0013d1e:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0013d20:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013d24:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013d27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d2b:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0013d2f:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0013d33:	0f af c2             	imul   eax,edx
c0013d36:	99                   	cdq    
c0013d37:	52                   	push   edx
c0013d38:	50                   	push   eax
c0013d39:	56                   	push   esi
c0013d3a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013d3d:	83 c4 20             	add    esp,0x20
c0013d40:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013d48:	0f b7 fd             	movzx  edi,bp
c0013d4b:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c0013d4f:	73 7d                	jae    c0013dce <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ba>
c0013d51:	c1 e7 05             	shl    edi,0x5
c0013d54:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0013d58:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0013d5b:	75 6b                	jne    c0013dc8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0013d5d:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0013d60:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013d64:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0013d67:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013d6b:	52                   	push   edx
c0013d6c:	31 d2                	xor    edx,edx
c0013d6e:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0013d71:	52                   	push   edx
c0013d72:	50                   	push   eax
c0013d73:	56                   	push   esi
c0013d74:	e8 91 75 ff ff       	call   c000b30a <File::seek(unsigned long long)>
c0013d79:	83 c4 10             	add    esp,0x10
c0013d7c:	85 c0                	test   eax,eax
c0013d7e:	74 17                	je     c0013d97 <Thr::loadProgramIntoMemory(Process*, char const*)+0x183>
c0013d80:	83 ec 0c             	sub    esp,0xc
c0013d83:	68 f1 17 02 c0       	push   0xc00217f1
c0013d88:	e8 ac 6b ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0013d8d:	83 c4 10             	add    esp,0x10
c0013d90:	31 c0                	xor    eax,eax
c0013d92:	e9 87 00 00 00       	jmp    c0013e1e <Thr::loadProgramIntoMemory(Process*, char const*)+0x20a>
c0013d97:	83 ec 0c             	sub    esp,0xc
c0013d9a:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0013d9d:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0013da0:	50                   	push   eax
c0013da1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013da5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013da9:	56                   	push   esi
c0013daa:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0013dae:	e8 d3 fb ff ff       	call   c0013986 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0013db3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013db7:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0013dbb:	83 c4 20             	add    esp,0x20
c0013dbe:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0013dc2:	73 04                	jae    c0013dc8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0013dc4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013dc8:	45                   	inc    ebp
c0013dc9:	e9 7a ff ff ff       	jmp    c0013d48 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0013dce:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0013dd2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013dd6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013dda:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0013de0:	83 ec 0c             	sub    esp,0xc
c0013de3:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0013de9:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013dee:	05 00 10 00 00       	add    eax,0x1000
c0013df3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013df6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013dfa:	e8 bf 3c ff ff       	call   c0007abe <free>
c0013dff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013e02:	e8 b7 3c ff ff       	call   c0007abe <free>
c0013e07:	58                   	pop    eax
c0013e08:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013e0c:	e8 ad 3c ff ff       	call   c0007abe <free>
c0013e11:	89 34 24             	mov    DWORD PTR [esp],esi
c0013e14:	e8 91 74 ff ff       	call   c000b2aa <File::close()>
c0013e19:	83 c4 10             	add    esp,0x10
c0013e1c:	b0 01                	mov    al,0x1
c0013e1e:	83 c4 3c             	add    esp,0x3c
c0013e21:	5b                   	pop    ebx
c0013e22:	5e                   	pop    esi
c0013e23:	5f                   	pop    edi
c0013e24:	5d                   	pop    ebp
c0013e25:	c3                   	ret    

c0013e26 <Thr::runtimeReferenceHelper()>:
c0013e26:	83 ec 18             	sub    esp,0x18
c0013e29:	68 f9 17 02 c0       	push   0xc00217f9
c0013e2e:	e8 06 6b ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0013e33:	fa                   	cli    
c0013e34:	83 c4 10             	add    esp,0x10
c0013e37:	eb fe                	jmp    c0013e37 <Thr::runtimeReferenceHelper()+0x11>

c0013e39 <Thr::getAddressOfKernelSymbol(char const*)>:
c0013e39:	57                   	push   edi
c0013e3a:	56                   	push   esi
c0013e3b:	53                   	push   ebx
c0013e3c:	31 db                	xor    ebx,ebx
c0013e3e:	39 1d 40 91 02 c0    	cmp    DWORD PTR ds:0xc0029140,ebx
c0013e44:	7e 3c                	jle    c0013e82 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0013e46:	8b 34 9d c0 90 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd6f40]
c0013e4d:	31 ff                	xor    edi,edi
c0013e4f:	39 3c 9d c0 8f 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd7040],edi
c0013e56:	7e 27                	jle    c0013e7f <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0013e58:	50                   	push   eax
c0013e59:	50                   	push   eax
c0013e5a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013e5e:	8b 06                	mov    eax,DWORD PTR [esi]
c0013e60:	03 04 9d 40 90 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd6fc0]
c0013e67:	50                   	push   eax
c0013e68:	e8 e3 c8 fe ff       	call   c0000750 <strcmp>
c0013e6d:	83 c4 10             	add    esp,0x10
c0013e70:	85 c0                	test   eax,eax
c0013e72:	75 05                	jne    c0013e79 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0013e74:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013e77:	eb 0b                	jmp    c0013e84 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0013e79:	83 c6 10             	add    esi,0x10
c0013e7c:	47                   	inc    edi
c0013e7d:	eb d0                	jmp    c0013e4f <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0013e7f:	43                   	inc    ebx
c0013e80:	eb bc                	jmp    c0013e3e <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0013e82:	31 c0                	xor    eax,eax
c0013e84:	5b                   	pop    ebx
c0013e85:	5e                   	pop    esi
c0013e86:	5f                   	pop    edi
c0013e87:	c3                   	ret    

c0013e88 <Thr::loadKernelSymbolTable(char const*)>:
c0013e88:	55                   	push   ebp
c0013e89:	57                   	push   edi
c0013e8a:	56                   	push   esi
c0013e8b:	53                   	push   ebx
c0013e8c:	83 ec 68             	sub    esp,0x68
c0013e8f:	8b 35 90 91 02 c0    	mov    esi,DWORD PTR ds:0xc0029190
c0013e95:	68 14 01 00 00       	push   0x114
c0013e9a:	e8 0f 3c ff ff       	call   c0007aae <malloc>
c0013e9f:	83 c4 0c             	add    esp,0xc
c0013ea2:	89 c3                	mov    ebx,eax
c0013ea4:	56                   	push   esi
c0013ea5:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0013ea9:	50                   	push   eax
c0013eaa:	e8 e1 72 ff ff       	call   c000b190 <File::File(char const*, Process*)>
c0013eaf:	5e                   	pop    esi
c0013eb0:	5f                   	pop    edi
c0013eb1:	6a 01                	push   0x1
c0013eb3:	53                   	push   ebx
c0013eb4:	e8 93 73 ff ff       	call   c000b24c <File::open(FileOpenMode)>
c0013eb9:	83 c4 10             	add    esp,0x10
c0013ebc:	85 c0                	test   eax,eax
c0013ebe:	74 0a                	je     c0013eca <Thr::loadKernelSymbolTable(char const*)+0x42>
c0013ec0:	83 ec 0c             	sub    esp,0xc
c0013ec3:	68 1b 18 02 c0       	push   0xc002181b
c0013ec8:	eb 34                	jmp    c0013efe <Thr::loadKernelSymbolTable(char const*)+0x76>
c0013eca:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0013ed2:	83 ec 0c             	sub    esp,0xc
c0013ed5:	6a 34                	push   0x34
c0013ed7:	e8 d2 3b ff ff       	call   c0007aae <malloc>
c0013edc:	59                   	pop    ecx
c0013edd:	89 c7                	mov    edi,eax
c0013edf:	8d 74 24 34          	lea    esi,[esp+0x34]
c0013ee3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ee5:	56                   	push   esi
c0013ee6:	57                   	push   edi
c0013ee7:	6a 00                	push   0x0
c0013ee9:	6a 34                	push   0x34
c0013eeb:	53                   	push   ebx
c0013eec:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013eef:	83 c4 20             	add    esp,0x20
c0013ef2:	85 c0                	test   eax,eax
c0013ef4:	74 17                	je     c0013f0d <Thr::loadKernelSymbolTable(char const*)+0x85>
c0013ef6:	83 ec 0c             	sub    esp,0xc
c0013ef9:	68 32 18 02 c0       	push   0xc0021832
c0013efe:	e8 98 cc ff ff       	call   c0010b9b <KePanic(char const*)>
c0013f03:	83 c4 10             	add    esp,0x10
c0013f06:	31 c0                	xor    eax,eax
c0013f08:	e9 31 02 00 00       	jmp    c001413e <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0013f0d:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0013f13:	75 e1                	jne    c0013ef6 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013f15:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0013f18:	85 c0                	test   eax,eax
c0013f1a:	74 da                	je     c0013ef6 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013f1c:	52                   	push   edx
c0013f1d:	31 d2                	xor    edx,edx
c0013f1f:	52                   	push   edx
c0013f20:	50                   	push   eax
c0013f21:	53                   	push   ebx
c0013f22:	e8 e3 73 ff ff       	call   c000b30a <File::seek(unsigned long long)>
c0013f27:	83 c4 10             	add    esp,0x10
c0013f2a:	85 c0                	test   eax,eax
c0013f2c:	75 c8                	jne    c0013ef6 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013f2e:	83 ec 0c             	sub    esp,0xc
c0013f31:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013f35:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013f39:	31 ed                	xor    ebp,ebp
c0013f3b:	0f af c2             	imul   eax,edx
c0013f3e:	50                   	push   eax
c0013f3f:	e8 6a 3b ff ff       	call   c0007aae <malloc>
c0013f44:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013f46:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013f4a:	89 34 24             	mov    DWORD PTR [esp],esi
c0013f4d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f51:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013f55:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013f59:	0f af c2             	imul   eax,edx
c0013f5c:	99                   	cdq    
c0013f5d:	52                   	push   edx
c0013f5e:	50                   	push   eax
c0013f5f:	53                   	push   ebx
c0013f60:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013f63:	83 c4 20             	add    esp,0x20
c0013f66:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013f6e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0013f76:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0013f7e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013f86:	0f b7 f5             	movzx  esi,bp
c0013f89:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0013f8d:	0f 83 a7 00 00 00    	jae    c001403a <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0013f93:	6b f6 28             	imul   esi,esi,0x28
c0013f96:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0013f9a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0013f9d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013fa1:	50                   	push   eax
c0013fa2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013fa6:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0013faa:	8b 16                	mov    edx,DWORD PTR [esi]
c0013fac:	6b c0 28             	imul   eax,eax,0x28
c0013faf:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0013fb3:	89 d0                	mov    eax,edx
c0013fb5:	31 d2                	xor    edx,edx
c0013fb7:	52                   	push   edx
c0013fb8:	50                   	push   eax
c0013fb9:	53                   	push   ebx
c0013fba:	e8 4b 73 ff ff       	call   c000b30a <File::seek(unsigned long long)>
c0013fbf:	83 c4 0c             	add    esp,0xc
c0013fc2:	6a 20                	push   0x20
c0013fc4:	6a 00                	push   0x0
c0013fc6:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0013fca:	52                   	push   edx
c0013fcb:	e8 20 c5 fe ff       	call   c00004f0 <memset>
c0013fd0:	58                   	pop    eax
c0013fd1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013fd3:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0013fd7:	51                   	push   ecx
c0013fd8:	8d 54 24 40          	lea    edx,[esp+0x40]
c0013fdc:	52                   	push   edx
c0013fdd:	6a 00                	push   0x0
c0013fdf:	6a 1f                	push   0x1f
c0013fe1:	53                   	push   ebx
c0013fe2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013fe5:	83 c4 18             	add    esp,0x18
c0013fe8:	68 49 18 02 c0       	push   0xc0021849
c0013fed:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0013ff1:	52                   	push   edx
c0013ff2:	e8 59 c7 fe ff       	call   c0000750 <strcmp>
c0013ff7:	83 c4 10             	add    esp,0x10
c0013ffa:	85 c0                	test   eax,eax
c0013ffc:	75 0f                	jne    c001400d <Thr::loadKernelSymbolTable(char const*)+0x185>
c0013ffe:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014001:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014005:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014009:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001400d:	50                   	push   eax
c001400e:	50                   	push   eax
c001400f:	68 51 18 02 c0       	push   0xc0021851
c0014014:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0014018:	50                   	push   eax
c0014019:	e8 32 c7 fe ff       	call   c0000750 <strcmp>
c001401e:	83 c4 10             	add    esp,0x10
c0014021:	85 c0                	test   eax,eax
c0014023:	75 0f                	jne    c0014034 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0014025:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014028:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001402c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014030:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014034:	45                   	inc    ebp
c0014035:	e9 4c ff ff ff       	jmp    c0013f86 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001403a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001403f:	75 10                	jne    c0014051 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0014041:	83 ec 0c             	sub    esp,0xc
c0014044:	68 59 18 02 c0       	push   0xc0021859
c0014049:	e8 4d cb ff ff       	call   c0010b9b <KePanic(char const*)>
c001404e:	83 c4 10             	add    esp,0x10
c0014051:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014056:	75 10                	jne    c0014068 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0014058:	83 ec 0c             	sub    esp,0xc
c001405b:	68 59 18 02 c0       	push   0xc0021859
c0014060:	e8 36 cb ff ff       	call   c0010b9b <KePanic(char const*)>
c0014065:	83 c4 10             	add    esp,0x10
c0014068:	31 d2                	xor    edx,edx
c001406a:	50                   	push   eax
c001406b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001406f:	52                   	push   edx
c0014070:	50                   	push   eax
c0014071:	53                   	push   ebx
c0014072:	e8 93 72 ff ff       	call   c000b30a <File::seek(unsigned long long)>
c0014077:	5a                   	pop    edx
c0014078:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001407c:	e8 2d 3a ff ff       	call   c0007aae <malloc>
c0014081:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014085:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014089:	31 c9                	xor    ecx,ecx
c001408b:	5e                   	pop    esi
c001408c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001408e:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0014092:	55                   	push   ebp
c0014093:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014097:	51                   	push   ecx
c0014098:	52                   	push   edx
c0014099:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001409d:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00140a1:	53                   	push   ebx
c00140a2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00140a5:	83 c4 14             	add    esp,0x14
c00140a8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00140ac:	e8 fd 39 ff ff       	call   c0007aae <malloc>
c00140b1:	89 c6                	mov    esi,eax
c00140b3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00140b5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00140b8:	56                   	push   esi
c00140b9:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00140bd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00140c1:	51                   	push   ecx
c00140c2:	52                   	push   edx
c00140c3:	53                   	push   ebx
c00140c4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00140c7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00140cb:	8b 15 40 91 02 c0    	mov    edx,DWORD PTR ds:0xc0029140
c00140d1:	83 c4 1c             	add    esp,0x1c
c00140d4:	c1 e8 04             	shr    eax,0x4
c00140d7:	89 04 95 c0 8f 02 c0 	mov    DWORD PTR [edx*4-0x3ffd7040],eax
c00140de:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00140e2:	31 d2                	xor    edx,edx
c00140e4:	52                   	push   edx
c00140e5:	50                   	push   eax
c00140e6:	53                   	push   ebx
c00140e7:	e8 1e 72 ff ff       	call   c000b30a <File::seek(unsigned long long)>
c00140ec:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00140ee:	31 d2                	xor    edx,edx
c00140f0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00140f3:	56                   	push   esi
c00140f4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00140f8:	52                   	push   edx
c00140f9:	50                   	push   eax
c00140fa:	53                   	push   ebx
c00140fb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00140fe:	83 c4 14             	add    esp,0x14
c0014101:	53                   	push   ebx
c0014102:	e8 a3 71 ff ff       	call   c000b2aa <File::close()>
c0014107:	5d                   	pop    ebp
c0014108:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001410c:	e8 ad 39 ff ff       	call   c0007abe <free>
c0014111:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014114:	e8 a5 39 ff ff       	call   c0007abe <free>
c0014119:	a1 40 91 02 c0       	mov    eax,ds:0xc0029140
c001411e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014122:	8d 50 01             	lea    edx,[eax+0x1]
c0014125:	89 0c 85 c0 90 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6f40],ecx
c001412c:	89 34 85 40 90 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6fc0],esi
c0014133:	89 15 40 91 02 c0    	mov    DWORD PTR ds:0xc0029140,edx
c0014139:	83 c4 10             	add    esp,0x10
c001413c:	b0 01                	mov    al,0x1
c001413e:	83 c4 5c             	add    esp,0x5c
c0014141:	5b                   	pop    ebx
c0014142:	5e                   	pop    esi
c0014143:	5f                   	pop    edi
c0014144:	5d                   	pop    ebp
c0014145:	c3                   	ret    

c0014146 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0014146:	55                   	push   ebp
c0014147:	57                   	push   edi
c0014148:	56                   	push   esi
c0014149:	53                   	push   ebx
c001414a:	81 ec 78 03 00 00    	sub    esp,0x378
c0014150:	8a 84 24 94 03 00 00 	mov    al,BYTE PTR [esp+0x394]
c0014157:	8b 1d 90 91 02 c0    	mov    ebx,DWORD PTR ds:0xc0029190
c001415d:	88 44 24 53          	mov    BYTE PTR [esp+0x53],al
c0014161:	68 14 01 00 00       	push   0x114
c0014166:	e8 43 39 ff ff       	call   c0007aae <malloc>
c001416b:	83 c4 0c             	add    esp,0xc
c001416e:	89 c5                	mov    ebp,eax
c0014170:	53                   	push   ebx
c0014171:	ff b4 24 88 03 00 00 	push   DWORD PTR [esp+0x388]
c0014178:	50                   	push   eax
c0014179:	e8 12 70 ff ff       	call   c000b190 <File::File(char const*, Process*)>
c001417e:	5e                   	pop    esi
c001417f:	5f                   	pop    edi
c0014180:	6a 01                	push   0x1
c0014182:	55                   	push   ebp
c0014183:	e8 c4 70 ff ff       	call   c000b24c <File::open(FileOpenMode)>
c0014188:	83 c4 10             	add    esp,0x10
c001418b:	85 c0                	test   eax,eax
c001418d:	0f 85 53 07 00 00    	jne    c00148e6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7a0>
c0014193:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001419b:	83 ec 0c             	sub    esp,0xc
c001419e:	6a 34                	push   0x34
c00141a0:	e8 09 39 ff ff       	call   c0007aae <malloc>
c00141a5:	5b                   	pop    ebx
c00141a6:	89 c7                	mov    edi,eax
c00141a8:	8d 5c 24 64          	lea    ebx,[esp+0x64]
c00141ac:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00141af:	53                   	push   ebx
c00141b0:	57                   	push   edi
c00141b1:	6a 00                	push   0x0
c00141b3:	6a 34                	push   0x34
c00141b5:	55                   	push   ebp
c00141b6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00141b9:	83 c4 20             	add    esp,0x20
c00141bc:	85 c0                	test   eax,eax
c00141be:	0f 85 22 07 00 00    	jne    c00148e6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7a0>
c00141c4:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00141ca:	0f 85 16 07 00 00    	jne    c00148e6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7a0>
c00141d0:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00141d3:	85 c0                	test   eax,eax
c00141d5:	0f 84 0b 07 00 00    	je     c00148e6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7a0>
c00141db:	31 d2                	xor    edx,edx
c00141dd:	51                   	push   ecx
c00141de:	52                   	push   edx
c00141df:	50                   	push   eax
c00141e0:	55                   	push   ebp
c00141e1:	e8 24 71 ff ff       	call   c000b30a <File::seek(unsigned long long)>
c00141e6:	83 c4 10             	add    esp,0x10
c00141e9:	85 c0                	test   eax,eax
c00141eb:	0f 85 f5 06 00 00    	jne    c00148e6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7a0>
c00141f1:	83 ec 0c             	sub    esp,0xc
c00141f4:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c00141f7:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00141fb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00141ff:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014203:	0f af c2             	imul   eax,edx
c0014206:	50                   	push   eax
c0014207:	e8 a2 38 ff ff       	call   c0007aae <malloc>
c001420c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001420f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014213:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014216:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001421a:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001421e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014222:	0f af c2             	imul   eax,edx
c0014225:	99                   	cdq    
c0014226:	52                   	push   edx
c0014227:	50                   	push   eax
c0014228:	55                   	push   ebp
c0014229:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001422c:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001422f:	83 c4 20             	add    esp,0x20
c0014232:	85 c0                	test   eax,eax
c0014234:	0f 84 ac 06 00 00    	je     c00148e6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7a0>
c001423a:	52                   	push   edx
c001423b:	31 d2                	xor    edx,edx
c001423d:	52                   	push   edx
c001423e:	50                   	push   eax
c001423f:	55                   	push   ebp
c0014240:	e8 c5 70 ff ff       	call   c000b30a <File::seek(unsigned long long)>
c0014245:	83 c4 10             	add    esp,0x10
c0014248:	85 c0                	test   eax,eax
c001424a:	0f 85 96 06 00 00    	jne    c00148e6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7a0>
c0014250:	83 ec 0c             	sub    esp,0xc
c0014253:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0014257:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001425b:	31 f6                	xor    esi,esi
c001425d:	0f af c2             	imul   eax,edx
c0014260:	50                   	push   eax
c0014261:	e8 48 38 ff ff       	call   c0007aae <malloc>
c0014266:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014269:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001426d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014270:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0014274:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0014278:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001427c:	0f af c2             	imul   eax,edx
c001427f:	99                   	cdq    
c0014280:	52                   	push   edx
c0014281:	50                   	push   eax
c0014282:	55                   	push   ebp
c0014283:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014286:	83 c4 20             	add    esp,0x20
c0014289:	0f b7 de             	movzx  ebx,si
c001428c:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c0014290:	0f 83 87 00 00 00    	jae    c001431d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0014296:	c1 e3 05             	shl    ebx,0x5
c0014299:	03 5c 24 24          	add    ebx,DWORD PTR [esp+0x24]
c001429d:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c00142a0:	75 75                	jne    c0014317 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c00142a2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00142a5:	31 d2                	xor    edx,edx
c00142a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00142ab:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00142ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00142b2:	50                   	push   eax
c00142b3:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00142b6:	52                   	push   edx
c00142b7:	50                   	push   eax
c00142b8:	55                   	push   ebp
c00142b9:	e8 4c 70 ff ff       	call   c000b30a <File::seek(unsigned long long)>
c00142be:	83 c4 10             	add    esp,0x10
c00142c1:	85 c0                	test   eax,eax
c00142c3:	0f 85 1d 06 00 00    	jne    c00148e6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7a0>
c00142c9:	8b 84 24 84 03 00 00 	mov    eax,DWORD PTR [esp+0x384]
c00142d0:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00142d3:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c00142d7:	31 d2                	xor    edx,edx
c00142d9:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00142dd:	83 ec 0c             	sub    esp,0xc
c00142e0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00142e4:	8d 84 24 6c 02 00 00 	lea    eax,[esp+0x26c]
c00142eb:	50                   	push   eax
c00142ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00142f0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00142f4:	52                   	push   edx
c00142f5:	50                   	push   eax
c00142f6:	55                   	push   ebp
c00142f7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00142fa:	83 c4 1c             	add    esp,0x1c
c00142fd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014300:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0014303:	50                   	push   eax
c0014304:	6a 00                	push   0x0
c0014306:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001430a:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c001430e:	50                   	push   eax
c001430f:	e8 dc c1 fe ff       	call   c00004f0 <memset>
c0014314:	83 c4 10             	add    esp,0x10
c0014317:	46                   	inc    esi
c0014318:	e9 6c ff ff ff       	jmp    c0014289 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001431d:	53                   	push   ebx
c001431e:	31 db                	xor    ebx,ebx
c0014320:	68 00 01 00 00       	push   0x100
c0014325:	6a 00                	push   0x0
c0014327:	8d 44 24 6c          	lea    eax,[esp+0x6c]
c001432b:	50                   	push   eax
c001432c:	e8 bf c1 fe ff       	call   c00004f0 <memset>
c0014331:	83 c4 0c             	add    esp,0xc
c0014334:	68 00 01 00 00       	push   0x100
c0014339:	6a 00                	push   0x0
c001433b:	8d 84 24 6c 01 00 00 	lea    eax,[esp+0x16c]
c0014342:	50                   	push   eax
c0014343:	e8 a8 c1 fe ff       	call   c00004f0 <memset>
c0014348:	83 c4 10             	add    esp,0x10
c001434b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014353:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001435b:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c0014363:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001436b:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0014373:	0f b7 f3             	movzx  esi,bx
c0014376:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c001437a:	0f 83 2d 01 00 00    	jae    c00144ad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0014380:	6b f6 28             	imul   esi,esi,0x28
c0014383:	03 74 24 14          	add    esi,DWORD PTR [esp+0x14]
c0014387:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001438a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001438e:	52                   	push   edx
c001438f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0014393:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0014397:	8b 06                	mov    eax,DWORD PTR [esi]
c0014399:	6b d2 28             	imul   edx,edx,0x28
c001439c:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00143a0:	31 d2                	xor    edx,edx
c00143a2:	52                   	push   edx
c00143a3:	50                   	push   eax
c00143a4:	55                   	push   ebp
c00143a5:	e8 60 6f ff ff       	call   c000b30a <File::seek(unsigned long long)>
c00143aa:	83 c4 0c             	add    esp,0xc
c00143ad:	6a 20                	push   0x20
c00143af:	6a 00                	push   0x0
c00143b1:	8d 8c 24 6c 02 00 00 	lea    ecx,[esp+0x26c]
c00143b8:	51                   	push   ecx
c00143b9:	e8 32 c1 fe ff       	call   c00004f0 <memset>
c00143be:	59                   	pop    ecx
c00143bf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00143c2:	8d 54 24 68          	lea    edx,[esp+0x68]
c00143c6:	52                   	push   edx
c00143c7:	8d 8c 24 70 02 00 00 	lea    ecx,[esp+0x270]
c00143ce:	51                   	push   ecx
c00143cf:	6a 00                	push   0x0
c00143d1:	6a 1f                	push   0x1f
c00143d3:	55                   	push   ebp
c00143d4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00143d7:	83 c4 1c             	add    esp,0x1c
c00143da:	6a 09                	push   0x9
c00143dc:	68 73 18 02 c0       	push   0xc0021873
c00143e1:	8d 8c 24 6c 02 00 00 	lea    ecx,[esp+0x26c]
c00143e8:	51                   	push   ecx
c00143e9:	e8 92 bf fe ff       	call   c0000380 <memcmp>
c00143ee:	83 c4 10             	add    esp,0x10
c00143f1:	85 c0                	test   eax,eax
c00143f3:	75 21                	jne    c0014416 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c00143f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143f9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00143fd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014401:	89 54 84 60          	mov    DWORD PTR [esp+eax*4+0x60],edx
c0014405:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014408:	89 84 8c 60 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x160],eax
c001440f:	89 c8                	mov    eax,ecx
c0014411:	40                   	inc    eax
c0014412:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014416:	50                   	push   eax
c0014417:	6a 09                	push   0x9
c0014419:	68 7d 18 02 c0       	push   0xc002187d
c001441e:	8d 84 24 6c 02 00 00 	lea    eax,[esp+0x26c]
c0014425:	50                   	push   eax
c0014426:	e8 55 bf fe ff       	call   c0000380 <memcmp>
c001442b:	83 c4 10             	add    esp,0x10
c001442e:	85 c0                	test   eax,eax
c0014430:	75 21                	jne    c0014453 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0014432:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014436:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001443a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001443e:	89 54 84 60          	mov    DWORD PTR [esp+eax*4+0x60],edx
c0014442:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014445:	89 84 8c 60 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x160],eax
c001444c:	89 c8                	mov    eax,ecx
c001444e:	40                   	inc    eax
c001444f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014453:	50                   	push   eax
c0014454:	50                   	push   eax
c0014455:	68 49 18 02 c0       	push   0xc0021849
c001445a:	8d 84 24 6c 02 00 00 	lea    eax,[esp+0x26c]
c0014461:	50                   	push   eax
c0014462:	e8 e9 c2 fe ff       	call   c0000750 <strcmp>
c0014467:	83 c4 10             	add    esp,0x10
c001446a:	85 c0                	test   eax,eax
c001446c:	75 0f                	jne    c001447d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001446e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014471:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014475:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014479:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001447d:	50                   	push   eax
c001447e:	50                   	push   eax
c001447f:	68 51 18 02 c0       	push   0xc0021851
c0014484:	8d 84 24 6c 02 00 00 	lea    eax,[esp+0x26c]
c001448b:	50                   	push   eax
c001448c:	e8 bf c2 fe ff       	call   c0000750 <strcmp>
c0014491:	83 c4 10             	add    esp,0x10
c0014494:	85 c0                	test   eax,eax
c0014496:	75 0f                	jne    c00144a7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0014498:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001449b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001449f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00144a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00144a7:	43                   	inc    ebx
c00144a8:	e9 c6 fe ff ff       	jmp    c0014373 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c00144ad:	31 d2                	xor    edx,edx
c00144af:	50                   	push   eax
c00144b0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00144b4:	52                   	push   edx
c00144b5:	50                   	push   eax
c00144b6:	55                   	push   ebp
c00144b7:	e8 4e 6e ff ff       	call   c000b30a <File::seek(unsigned long long)>
c00144bc:	58                   	pop    eax
c00144bd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00144c1:	e8 e8 35 ff ff       	call   c0007aae <malloc>
c00144c6:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00144c9:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00144cd:	31 d2                	xor    edx,edx
c00144cf:	58                   	pop    eax
c00144d0:	8d 5c 24 64          	lea    ebx,[esp+0x64]
c00144d4:	53                   	push   ebx
c00144d5:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00144d9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00144dd:	52                   	push   edx
c00144de:	50                   	push   eax
c00144df:	55                   	push   ebp
c00144e0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00144e3:	83 c4 14             	add    esp,0x14
c00144e6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00144ea:	e8 bf 35 ff ff       	call   c0007aae <malloc>
c00144ef:	31 d2                	xor    edx,edx
c00144f1:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00144f5:	83 c4 0c             	add    esp,0xc
c00144f8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00144fc:	52                   	push   edx
c00144fd:	50                   	push   eax
c00144fe:	55                   	push   ebp
c00144ff:	e8 06 6e ff ff       	call   c000b30a <File::seek(unsigned long long)>
c0014504:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014507:	31 d2                	xor    edx,edx
c0014509:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001450c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014510:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014514:	52                   	push   edx
c0014515:	50                   	push   eax
c0014516:	55                   	push   ebp
c0014517:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001451a:	83 c4 20             	add    esp,0x20
c001451d:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c0014522:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001452a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001452e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014532:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c0014536:	0f 84 ae 03 00 00    	je     c00148ea <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7a4>
c001453c:	8b 84 94 60 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x160]
c0014543:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014547:	31 d2                	xor    edx,edx
c0014549:	c1 e8 03             	shr    eax,0x3
c001454c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0014550:	51                   	push   ecx
c0014551:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014555:	8b 44 84 64          	mov    eax,DWORD PTR [esp+eax*4+0x64]
c0014559:	52                   	push   edx
c001455a:	50                   	push   eax
c001455b:	55                   	push   ebp
c001455c:	e8 a9 6d ff ff       	call   c000b30a <File::seek(unsigned long long)>
c0014561:	5b                   	pop    ebx
c0014562:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014566:	ff b4 84 6c 01 00 00 	push   DWORD PTR [esp+eax*4+0x16c]
c001456d:	e8 3c 35 ff ff       	call   c0007aae <malloc>
c0014572:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014575:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014579:	31 d2                	xor    edx,edx
c001457b:	5e                   	pop    esi
c001457c:	8d 44 24 68          	lea    eax,[esp+0x68]
c0014580:	50                   	push   eax
c0014581:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014585:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0014589:	8b 84 84 74 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x174]
c0014590:	52                   	push   edx
c0014591:	50                   	push   eax
c0014592:	55                   	push   ebp
c0014593:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014596:	83 c4 20             	add    esp,0x20
c0014599:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00145a1:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00145a5:	39 4c 24 34          	cmp    DWORD PTR [esp+0x34],ecx
c00145a9:	0f 8d 1f 03 00 00    	jge    c00148ce <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x788>
c00145af:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00145b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00145b7:	31 f6                	xor    esi,esi
c00145b9:	83 ec 0c             	sub    esp,0xc
c00145bc:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c00145bf:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00145c3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00145c7:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c00145cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00145cf:	c1 e8 08             	shr    eax,0x8
c00145d2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00145d6:	89 c3                	mov    ebx,eax
c00145d8:	c1 e3 04             	shl    ebx,0x4
c00145db:	03 5c 24 4c          	add    ebx,DWORD PTR [esp+0x4c]
c00145df:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00145e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00145e6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00145ea:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00145ee:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00145f2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00145f6:	03 03                	add    eax,DWORD PTR [ebx]
c00145f8:	50                   	push   eax
c00145f9:	68 87 18 02 c0       	push   0xc0021887
c00145fe:	e8 36 63 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0014603:	83 c4 20             	add    esp,0x20
c0014606:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001460b:	0f 85 a1 00 00 00    	jne    c00146b2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x56c>
c0014611:	83 ec 0c             	sub    esp,0xc
c0014614:	be 01 00 00 00       	mov    esi,0x1
c0014619:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001461d:	03 03                	add    eax,DWORD PTR [ebx]
c001461f:	50                   	push   eax
c0014620:	e8 14 f8 ff ff       	call   c0013e39 <Thr::getAddressOfKernelSymbol(char const*)>
c0014625:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014629:	83 c4 10             	add    esp,0x10
c001462c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014631:	75 7f                	jne    c00146b2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x56c>
c0014633:	83 ec 0c             	sub    esp,0xc
c0014636:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001463a:	03 03                	add    eax,DWORD PTR [ebx]
c001463c:	50                   	push   eax
c001463d:	e8 46 c7 ff ff       	call   c0010d88 <KeResolveCompatibilitySymbol(char*)>
c0014642:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014646:	83 c4 10             	add    esp,0x10
c0014649:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001464e:	75 62                	jne    c00146b2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x56c>
c0014650:	50                   	push   eax
c0014651:	50                   	push   eax
c0014652:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014656:	03 03                	add    eax,DWORD PTR [ebx]
c0014658:	50                   	push   eax
c0014659:	68 ba 18 02 c0       	push   0xc00218ba
c001465e:	e8 d6 62 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0014663:	58                   	pop    eax
c0014664:	5a                   	pop    edx
c0014665:	68 d4 18 02 c0       	push   0xc00218d4
c001466a:	8d b4 24 6c 02 00 00 	lea    esi,[esp+0x26c]
c0014671:	56                   	push   esi
c0014672:	e8 c9 bf fe ff       	call   c0000640 <strcpy>
c0014677:	59                   	pop    ecx
c0014678:	58                   	pop    eax
c0014679:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001467d:	03 03                	add    eax,DWORD PTR [ebx]
c001467f:	50                   	push   eax
c0014680:	56                   	push   esi
c0014681:	e8 ba c1 fe ff       	call   c0000840 <strcat>
c0014686:	58                   	pop    eax
c0014687:	5a                   	pop    edx
c0014688:	68 56 1a 02 c0       	push   0xc0021a56
c001468d:	56                   	push   esi
c001468e:	e8 ad c1 fe ff       	call   c0000840 <strcat>
c0014693:	83 c4 10             	add    esp,0x10
c0014696:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c001469b:	0f 84 e7 01 00 00    	je     c0014888 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x742>
c00146a1:	83 ec 0c             	sub    esp,0xc
c00146a4:	56                   	push   esi
c00146a5:	e8 f1 c4 ff ff       	call   c0010b9b <KePanic(char const*)>
c00146aa:	83 c4 10             	add    esp,0x10
c00146ad:	0f b6 74 24 47       	movzx  esi,BYTE PTR [esp+0x47]
c00146b2:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00146b7:	83 f8 01             	cmp    eax,0x1
c00146ba:	0f 85 bf 00 00 00    	jne    c001477f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x639>
c00146c0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00146c4:	8b 8c 24 84 03 00 00 	mov    ecx,DWORD PTR [esp+0x384]
c00146cb:	2b 4c 24 20          	sub    ecx,DWORD PTR [esp+0x20]
c00146cf:	01 cb                	add    ebx,ecx
c00146d1:	81 7c 24 1c 01 04 00 00 	cmp    DWORD PTR [esp+0x1c],0x401
c00146d9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00146db:	0f 94 44 24 4c       	sete   BYTE PTR [esp+0x4c]
c00146e0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00146e4:	81 7c 24 1c 01 01 00 00 	cmp    DWORD PTR [esp+0x1c],0x101
c00146ec:	89 f0                	mov    eax,esi
c00146ee:	0f 94 c2             	sete   dl
c00146f1:	0b 54 24 4c          	or     edx,DWORD PTR [esp+0x4c]
c00146f5:	84 c0                	test   al,al
c00146f7:	74 41                	je     c001473a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f4>
c00146f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00146fd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0014701:	01 c6                	add    esi,eax
c0014703:	80 e2 01             	and    dl,0x1
c0014706:	75 15                	jne    c001471d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d7>
c0014708:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001470c:	66 83 f8 0c          	cmp    ax,0xc
c0014710:	76 05                	jbe    c0014717 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d1>
c0014712:	b8 0c 00 00 00       	mov    eax,0xc
c0014717:	3b 44 24 38          	cmp    eax,DWORD PTR [esp+0x38]
c001471b:	76 54                	jbe    c0014771 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62b>
c001471d:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0014722:	0f 84 60 01 00 00    	je     c0014888 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x742>
c0014728:	83 ec 0c             	sub    esp,0xc
c001472b:	68 eb 18 02 c0       	push   0xc00218eb
c0014730:	e8 66 c4 ff ff       	call   c0010b9b <KePanic(char const*)>
c0014735:	83 c4 10             	add    esp,0x10
c0014738:	eb 37                	jmp    c0014771 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62b>
c001473a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001473e:	01 ce                	add    esi,ecx
c0014740:	81 7c 24 1c 01 14 02 00 	cmp    DWORD PTR [esp+0x1c],0x21401
c0014748:	74 19                	je     c0014763 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61d>
c001474a:	80 e2 01             	and    dl,0x1
c001474d:	75 14                	jne    c0014763 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61d>
c001474f:	0f b7 57 30          	movzx  edx,WORD PTR [edi+0x30]
c0014753:	89 f0                	mov    eax,esi
c0014755:	3b 54 24 38          	cmp    edx,DWORD PTR [esp+0x38]
c0014759:	77 0a                	ja     c0014765 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001475b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001475f:	01 f0                	add    eax,esi
c0014761:	eb 02                	jmp    c0014765 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0014763:	89 f0                	mov    eax,esi
c0014765:	89 c2                	mov    edx,eax
c0014767:	c1 ea 1c             	shr    edx,0x1c
c001476a:	83 fa 0d             	cmp    edx,0xd
c001476d:	74 02                	je     c0014771 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62b>
c001476f:	89 c6                	mov    esi,eax
c0014771:	56                   	push   esi
c0014772:	53                   	push   ebx
c0014773:	ff 33                	push   DWORD PTR [ebx]
c0014775:	68 07 19 02 c0       	push   0xc0021907
c001477a:	e9 b8 00 00 00       	jmp    c0014837 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f1>
c001477f:	83 f8 02             	cmp    eax,0x2
c0014782:	0f 85 d7 00 00 00    	jne    c001485f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x719>
c0014788:	8b 9c 24 84 03 00 00 	mov    ebx,DWORD PTR [esp+0x384]
c001478f:	2b 5c 24 20          	sub    ebx,DWORD PTR [esp+0x20]
c0014793:	03 5c 24 30          	add    ebx,DWORD PTR [esp+0x30]
c0014797:	81 7c 24 1c 01 04 00 00 	cmp    DWORD PTR [esp+0x1c],0x401
c001479f:	74 21                	je     c00147c2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c00147a1:	81 7c 24 1c 01 01 00 00 	cmp    DWORD PTR [esp+0x1c],0x101
c00147a9:	74 17                	je     c00147c2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c00147ab:	0f b7 57 30          	movzx  edx,WORD PTR [edi+0x30]
c00147af:	b8 0a 00 00 00       	mov    eax,0xa
c00147b4:	83 fa 0e             	cmp    edx,0xe
c00147b7:	77 03                	ja     c00147bc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x676>
c00147b9:	8d 42 fc             	lea    eax,[edx-0x4]
c00147bc:	3b 44 24 38          	cmp    eax,DWORD PTR [esp+0x38]
c00147c0:	76 48                	jbe    c001480a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c4>
c00147c2:	50                   	push   eax
c00147c3:	53                   	push   ebx
c00147c4:	ff 33                	push   DWORD PTR [ebx]
c00147c6:	68 78 19 02 c0       	push   0xc0021978
c00147cb:	e8 69 61 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c00147d0:	58                   	pop    eax
c00147d1:	ff 33                	push   DWORD PTR [ebx]
c00147d3:	ff b4 24 94 03 00 00 	push   DWORD PTR [esp+0x394]
c00147da:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00147de:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00147e2:	68 42 19 02 c0       	push   0xc0021942
c00147e7:	e8 4d 61 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c00147ec:	83 c4 20             	add    esp,0x20
c00147ef:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c00147f4:	0f 84 8e 00 00 00    	je     c0014888 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x742>
c00147fa:	83 ec 0c             	sub    esp,0xc
c00147fd:	68 b6 19 02 c0       	push   0xc00219b6
c0014802:	e8 94 c3 ff ff       	call   c0010b9b <KePanic(char const*)>
c0014807:	83 c4 10             	add    esp,0x10
c001480a:	89 f1                	mov    ecx,esi
c001480c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001480e:	84 c9                	test   cl,cl
c0014810:	74 13                	je     c0014825 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6df>
c0014812:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014816:	2b b4 24 84 03 00 00 	sub    esi,DWORD PTR [esp+0x384]
c001481d:	2b 74 24 30          	sub    esi,DWORD PTR [esp+0x30]
c0014821:	01 c6                	add    esi,eax
c0014823:	eb 06                	jmp    c001482b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e5>
c0014825:	89 c6                	mov    esi,eax
c0014827:	2b 74 24 30          	sub    esi,DWORD PTR [esp+0x30]
c001482b:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c001482f:	56                   	push   esi
c0014830:	53                   	push   ebx
c0014831:	50                   	push   eax
c0014832:	68 d2 19 02 c0       	push   0xc00219d2
c0014837:	e8 fd 60 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c001483c:	59                   	pop    ecx
c001483d:	ff 33                	push   DWORD PTR [ebx]
c001483f:	ff b4 24 94 03 00 00 	push   DWORD PTR [esp+0x394]
c0014846:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001484a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001484e:	68 42 19 02 c0       	push   0xc0021942
c0014853:	e8 e1 60 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0014858:	89 33                	mov    DWORD PTR [ebx],esi
c001485a:	83 c4 20             	add    esp,0x20
c001485d:	eb 66                	jmp    c00148c5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x77f>
c001485f:	52                   	push   edx
c0014860:	52                   	push   edx
c0014861:	50                   	push   eax
c0014862:	68 0f 1a 02 c0       	push   0xc0021a0f
c0014867:	e8 cd 60 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c001486c:	83 c4 10             	add    esp,0x10
c001486f:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0014874:	74 12                	je     c0014888 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x742>
c0014876:	83 ec 0c             	sub    esp,0xc
c0014879:	68 1a 1a 02 c0       	push   0xc0021a1a
c001487e:	e8 18 c3 ff ff       	call   c0010b9b <KePanic(char const*)>
c0014883:	83 c4 10             	add    esp,0x10
c0014886:	eb 3d                	jmp    c00148c5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x77f>
c0014888:	83 ec 0c             	sub    esp,0xc
c001488b:	55                   	push   ebp
c001488c:	e8 19 6a ff ff       	call   c000b2aa <File::close()>
c0014891:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014894:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014897:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001489a:	59                   	pop    ecx
c001489b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001489f:	e8 1a 32 ff ff       	call   c0007abe <free>
c00148a4:	5b                   	pop    ebx
c00148a5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00148a9:	e8 10 32 ff ff       	call   c0007abe <free>
c00148ae:	89 3c 24             	mov    DWORD PTR [esp],edi
c00148b1:	e8 08 32 ff ff       	call   c0007abe <free>
c00148b6:	5e                   	pop    esi
c00148b7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00148bb:	e8 fe 31 ff ff       	call   c0007abe <free>
c00148c0:	83 c4 10             	add    esp,0x10
c00148c3:	eb 21                	jmp    c00148e6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7a0>
c00148c5:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c00148c9:	e9 d3 fc ff ff       	jmp    c00145a1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x45b>
c00148ce:	83 ec 0c             	sub    esp,0xc
c00148d1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00148d5:	e8 e4 31 ff ff       	call   c0007abe <free>
c00148da:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00148de:	83 c4 10             	add    esp,0x10
c00148e1:	e9 48 fc ff ff       	jmp    c001452e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3e8>
c00148e6:	31 c0                	xor    eax,eax
c00148e8:	eb 33                	jmp    c001491d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7d7>
c00148ea:	83 ec 0c             	sub    esp,0xc
c00148ed:	55                   	push   ebp
c00148ee:	e8 b7 69 ff ff       	call   c000b2aa <File::close()>
c00148f3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00148f6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00148f9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00148fc:	58                   	pop    eax
c00148fd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014901:	e8 b8 31 ff ff       	call   c0007abe <free>
c0014906:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014909:	e8 b0 31 ff ff       	call   c0007abe <free>
c001490e:	5a                   	pop    edx
c001490f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0014913:	e8 a6 31 ff ff       	call   c0007abe <free>
c0014918:	83 c4 10             	add    esp,0x10
c001491b:	b0 01                	mov    al,0x1
c001491d:	81 c4 6c 03 00 00    	add    esp,0x36c
c0014923:	5b                   	pop    ebx
c0014924:	5e                   	pop    esi
c0014925:	5f                   	pop    edi
c0014926:	5d                   	pop    ebp
c0014927:	c3                   	ret    

c0014928 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0014928:	56                   	push   esi
c0014929:	31 d2                	xor    edx,edx
c001492b:	53                   	push   ebx
c001492c:	8b 1d a0 89 02 c0    	mov    ebx,DWORD PTR ds:0xc00289a0
c0014932:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014936:	39 d3                	cmp    ebx,edx
c0014938:	7e 1b                	jle    c0014955 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001493a:	8b 04 95 c0 8b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7440]
c0014941:	39 c8                	cmp    eax,ecx
c0014943:	77 0d                	ja     c0014952 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0014945:	8b 34 95 c0 89 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd7640]
c001494c:	01 c6                	add    esi,eax
c001494e:	39 ce                	cmp    esi,ecx
c0014950:	77 05                	ja     c0014957 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0014952:	42                   	inc    edx
c0014953:	eb e1                	jmp    c0014936 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0014955:	31 c0                	xor    eax,eax
c0014957:	5b                   	pop    ebx
c0014958:	5e                   	pop    esi
c0014959:	c3                   	ret    

c001495a <Thr::getDriverNameFromAddress(unsigned long)>:
c001495a:	53                   	push   ebx
c001495b:	31 c0                	xor    eax,eax
c001495d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014961:	8b 1d a0 89 02 c0    	mov    ebx,DWORD PTR ds:0xc00289a0
c0014967:	39 c3                	cmp    ebx,eax
c0014969:	7e 22                	jle    c001498d <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001496b:	8b 14 85 c0 8b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7440]
c0014972:	39 ca                	cmp    edx,ecx
c0014974:	77 14                	ja     c001498a <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0014976:	03 14 85 c0 89 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd7640]
c001497d:	39 ca                	cmp    edx,ecx
c001497f:	76 09                	jbe    c001498a <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0014981:	8b 04 85 c0 8d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7240]
c0014988:	eb 05                	jmp    c001498f <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001498a:	40                   	inc    eax
c001498b:	eb da                	jmp    c0014967 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001498d:	31 c0                	xor    eax,eax
c001498f:	5b                   	pop    ebx
c0014990:	c3                   	ret    

c0014991 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0014991:	53                   	push   ebx
c0014992:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0014996:	53                   	push   ebx
c0014997:	e8 8c ff ff ff       	call   c0014928 <Thr::getDriverBaseFromAddress(unsigned long)>
c001499c:	5a                   	pop    edx
c001499d:	31 d2                	xor    edx,edx
c001499f:	85 c0                	test   eax,eax
c00149a1:	74 04                	je     c00149a7 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00149a3:	89 da                	mov    edx,ebx
c00149a5:	29 c2                	sub    edx,eax
c00149a7:	89 d0                	mov    eax,edx
c00149a9:	5b                   	pop    ebx
c00149aa:	c3                   	ret    

c00149ab <Thr::loadDLL(char const*, bool)>:
c00149ab:	55                   	push   ebp
c00149ac:	57                   	push   edi
c00149ad:	56                   	push   esi
c00149ae:	53                   	push   ebx
c00149af:	81 ec 34 01 00 00    	sub    esp,0x134
c00149b5:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00149bc:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00149c3:	56                   	push   esi
c00149c4:	68 32 1a 02 c0       	push   0xc0021a32
c00149c9:	e8 6b 5f ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c00149ce:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00149d5:	e8 d4 30 ff ff       	call   c0007aae <malloc>
c00149da:	83 c4 0c             	add    esp,0xc
c00149dd:	89 c3                	mov    ebx,eax
c00149df:	ff 35 90 91 02 c0    	push   DWORD PTR ds:0xc0029190
c00149e5:	56                   	push   esi
c00149e6:	50                   	push   eax
c00149e7:	e8 a4 67 ff ff       	call   c000b190 <File::File(char const*, Process*)>
c00149ec:	83 c4 10             	add    esp,0x10
c00149ef:	85 db                	test   ebx,ebx
c00149f1:	75 3c                	jne    c0014a2f <Thr::loadDLL(char const*, bool)+0x84>
c00149f3:	89 f8                	mov    eax,edi
c00149f5:	84 c0                	test   al,al
c00149f7:	0f 84 d2 01 00 00    	je     c0014bcf <Thr::loadDLL(char const*, bool)+0x224>
c00149fd:	55                   	push   ebp
c00149fe:	55                   	push   ebp
c00149ff:	68 43 1a 02 c0       	push   0xc0021a43
c0014a04:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0014a08:	55                   	push   ebp
c0014a09:	e8 32 bc fe ff       	call   c0000640 <strcpy>
c0014a0e:	58                   	pop    eax
c0014a0f:	5a                   	pop    edx
c0014a10:	56                   	push   esi
c0014a11:	55                   	push   ebp
c0014a12:	e8 29 be fe ff       	call   c0000840 <strcat>
c0014a17:	59                   	pop    ecx
c0014a18:	58                   	pop    eax
c0014a19:	68 56 1a 02 c0       	push   0xc0021a56
c0014a1e:	55                   	push   ebp
c0014a1f:	e8 1c be fe ff       	call   c0000840 <strcat>
c0014a24:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014a27:	e8 6f c1 ff ff       	call   c0010b9b <KePanic(char const*)>
c0014a2c:	83 c4 10             	add    esp,0x10
c0014a2f:	51                   	push   ecx
c0014a30:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0014a34:	50                   	push   eax
c0014a35:	8d 44 24 20          	lea    eax,[esp+0x20]
c0014a39:	50                   	push   eax
c0014a3a:	53                   	push   ebx
c0014a3b:	e8 b8 6a ff ff       	call   c000b4f8 <File::stat(unsigned long long*, bool*)>
c0014a40:	83 c4 10             	add    esp,0x10
c0014a43:	85 db                	test   ebx,ebx
c0014a45:	74 0c                	je     c0014a53 <Thr::loadDLL(char const*, bool)+0xa8>
c0014a47:	83 ec 0c             	sub    esp,0xc
c0014a4a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014a4c:	53                   	push   ebx
c0014a4d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014a50:	83 c4 10             	add    esp,0x10
c0014a53:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0014a58:	75 0a                	jne    c0014a64 <Thr::loadDLL(char const*, bool)+0xb9>
c0014a5a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014a5e:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0014a62:	75 3c                	jne    c0014aa0 <Thr::loadDLL(char const*, bool)+0xf5>
c0014a64:	89 f8                	mov    eax,edi
c0014a66:	84 c0                	test   al,al
c0014a68:	0f 84 49 01 00 00    	je     c0014bb7 <Thr::loadDLL(char const*, bool)+0x20c>
c0014a6e:	51                   	push   ecx
c0014a6f:	51                   	push   ecx
c0014a70:	68 43 1a 02 c0       	push   0xc0021a43
c0014a75:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0014a79:	53                   	push   ebx
c0014a7a:	e8 c1 bb fe ff       	call   c0000640 <strcpy>
c0014a7f:	5d                   	pop    ebp
c0014a80:	58                   	pop    eax
c0014a81:	56                   	push   esi
c0014a82:	53                   	push   ebx
c0014a83:	e8 b8 bd fe ff       	call   c0000840 <strcat>
c0014a88:	58                   	pop    eax
c0014a89:	5a                   	pop    edx
c0014a8a:	68 56 1a 02 c0       	push   0xc0021a56
c0014a8f:	53                   	push   ebx
c0014a90:	e8 ab bd fe ff       	call   c0000840 <strcat>
c0014a95:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014a98:	e8 fe c0 ff ff       	call   c0010b9b <KePanic(char const*)>
c0014a9d:	83 c4 10             	add    esp,0x10
c0014aa0:	52                   	push   edx
c0014aa1:	6a 03                	push   0x3
c0014aa3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014aa7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014aab:	05 ff 0f 00 00       	add    eax,0xfff
c0014ab0:	83 d2 00             	adc    edx,0x0
c0014ab3:	0f ac d0 0c          	shrd   eax,edx,0xc
c0014ab7:	50                   	push   eax
c0014ab8:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0014abe:	e8 55 53 ff ff       	call   c0009e18 <VAS::allocatePages(int, int)>
c0014ac3:	59                   	pop    ecx
c0014ac4:	89 c3                	mov    ebx,eax
c0014ac6:	5d                   	pop    ebp
c0014ac7:	50                   	push   eax
c0014ac8:	68 92 00 02 c0       	push   0xc0020092
c0014acd:	e8 67 5e ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0014ad2:	89 34 24             	mov    DWORD PTR [esp],esi
c0014ad5:	e8 96 ba fe ff       	call   c0000570 <strlen>
c0014ada:	8b 2d a0 89 02 c0    	mov    ebp,DWORD PTR ds:0xc00289a0
c0014ae0:	40                   	inc    eax
c0014ae1:	89 04 24             	mov    DWORD PTR [esp],eax
c0014ae4:	e8 c5 2f ff ff       	call   c0007aae <malloc>
c0014ae9:	89 04 ad c0 8d 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd7240],eax
c0014af0:	58                   	pop    eax
c0014af1:	a1 a0 89 02 c0       	mov    eax,ds:0xc00289a0
c0014af6:	5a                   	pop    edx
c0014af7:	56                   	push   esi
c0014af8:	ff 34 85 c0 8d 02 c0 	push   DWORD PTR [eax*4-0x3ffd7240]
c0014aff:	e8 3c bb fe ff       	call   c0000640 <strcpy>
c0014b04:	a1 a0 89 02 c0       	mov    eax,ds:0xc00289a0
c0014b09:	8d 50 01             	lea    edx,[eax+0x1]
c0014b0c:	89 1c 85 c0 8b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7440],ebx
c0014b13:	89 15 a0 89 02 c0    	mov    DWORD PTR ds:0xc00289a0,edx
c0014b19:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014b1d:	83 c4 0c             	add    esp,0xc
c0014b20:	89 14 85 c0 89 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7640],edx
c0014b27:	6a 01                	push   0x1
c0014b29:	53                   	push   ebx
c0014b2a:	56                   	push   esi
c0014b2b:	e8 16 f6 ff ff       	call   c0014146 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0014b30:	83 c4 10             	add    esp,0x10
c0014b33:	0f b6 c0             	movzx  eax,al
c0014b36:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014b3a:	85 c0                	test   eax,eax
c0014b3c:	0f 85 89 00 00 00    	jne    c0014bcb <Thr::loadDLL(char const*, bool)+0x220>
c0014b42:	89 f8                	mov    eax,edi
c0014b44:	84 c0                	test   al,al
c0014b46:	74 73                	je     c0014bbb <Thr::loadDLL(char const*, bool)+0x210>
c0014b48:	83 ec 0c             	sub    esp,0xc
c0014b4b:	68 58 1a 02 c0       	push   0xc0021a58
c0014b50:	e8 46 c0 ff ff       	call   c0010b9b <KePanic(char const*)>
c0014b55:	83 c4 10             	add    esp,0x10
c0014b58:	eb 61                	jmp    c0014bbb <Thr::loadDLL(char const*, bool)+0x210>
c0014b5a:	50                   	push   eax
c0014b5b:	50                   	push   eax
c0014b5c:	89 e8                	mov    eax,ebp
c0014b5e:	c1 e0 0c             	shl    eax,0xc
c0014b61:	01 d8                	add    eax,ebx
c0014b63:	50                   	push   eax
c0014b64:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0014b6a:	e8 91 4d ff ff       	call   c0009900 <VAS::getPageTableEntry(unsigned long)>
c0014b6f:	83 c4 10             	add    esp,0x10
c0014b72:	8b 00                	mov    eax,DWORD PTR [eax]
c0014b74:	a8 60                	test   al,0x60
c0014b76:	75 11                	jne    c0014b89 <Thr::loadDLL(char const*, bool)+0x1de>
c0014b78:	83 ec 0c             	sub    esp,0xc
c0014b7b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014b80:	50                   	push   eax
c0014b81:	e8 c3 31 ff ff       	call   c0007d49 <Phys::freePage(unsigned long)>
c0014b86:	83 c4 10             	add    esp,0x10
c0014b89:	45                   	inc    ebp
c0014b8a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014b8e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014b92:	05 ff 0f 00 00       	add    eax,0xfff
c0014b97:	bf 00 00 00 00       	mov    edi,0x0
c0014b9c:	83 d2 00             	adc    edx,0x0
c0014b9f:	0f ac d0 0c          	shrd   eax,edx,0xc
c0014ba3:	c1 ea 0c             	shr    edx,0xc
c0014ba6:	39 c5                	cmp    ebp,eax
c0014ba8:	89 d1                	mov    ecx,edx
c0014baa:	89 f8                	mov    eax,edi
c0014bac:	19 c8                	sbb    eax,ecx
c0014bae:	72 aa                	jb     c0014b5a <Thr::loadDLL(char const*, bool)+0x1af>
c0014bb0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014bb5:	75 18                	jne    c0014bcf <Thr::loadDLL(char const*, bool)+0x224>
c0014bb7:	31 db                	xor    ebx,ebx
c0014bb9:	eb 14                	jmp    c0014bcf <Thr::loadDLL(char const*, bool)+0x224>
c0014bbb:	83 ec 0c             	sub    esp,0xc
c0014bbe:	68 77 1a 02 c0       	push   0xc0021a77
c0014bc3:	e8 d3 bf ff ff       	call   c0010b9b <KePanic(char const*)>
c0014bc8:	83 c4 10             	add    esp,0x10
c0014bcb:	31 ed                	xor    ebp,ebp
c0014bcd:	eb bb                	jmp    c0014b8a <Thr::loadDLL(char const*, bool)+0x1df>
c0014bcf:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014bd5:	89 d8                	mov    eax,ebx
c0014bd7:	5b                   	pop    ebx
c0014bd8:	5e                   	pop    esi
c0014bd9:	5f                   	pop    edi
c0014bda:	5d                   	pop    ebp
c0014bdb:	c3                   	ret    

c0014bdc <Thr::executeDLL(unsigned long, void*)>:
c0014bdc:	56                   	push   esi
c0014bdd:	53                   	push   ebx
c0014bde:	52                   	push   edx
c0014bdf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014be3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014be7:	85 db                	test   ebx,ebx
c0014be9:	75 10                	jne    c0014bfb <Thr::executeDLL(unsigned long, void*)+0x1f>
c0014beb:	83 ec 0c             	sub    esp,0xc
c0014bee:	68 93 1a 02 c0       	push   0xc0021a93
c0014bf3:	e8 a3 bf ff ff       	call   c0010b9b <KePanic(char const*)>
c0014bf8:	83 c4 10             	add    esp,0x10
c0014bfb:	50                   	push   eax
c0014bfc:	50                   	push   eax
c0014bfd:	53                   	push   ebx
c0014bfe:	68 bd 1a 02 c0       	push   0xc0021abd
c0014c03:	e8 31 5d ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0014c08:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0014c0c:	89 d8                	mov    eax,ebx
c0014c0e:	83 c4 14             	add    esp,0x14
c0014c11:	5b                   	pop    ebx
c0014c12:	5e                   	pop    esi
c0014c13:	ff e0                	jmp    eax
c0014c15:	66 90                	xchg   ax,ax
c0014c17:	90                   	nop

c0014c18 <userModeEntryPoint(void*)>:
c0014c18:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0014c1d:	83 e8 01             	sub    eax,0x1
c0014c20:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0014c25:	75 01                	jne    c0014c28 <userModeEntryPoint(void*)+0x10>
c0014c27:	fb                   	sti    
c0014c28:	fb                   	sti    
c0014c29:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c2e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014c31:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0014c37:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014c3b:	e9 ff b5 fe ff       	jmp    c000023f <goToUsermode>

c0014c40 <changeTSS>:
c0014c40:	83 ec 14             	sub    esp,0x14
c0014c43:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c48:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014c4b:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0014c50:	c1 e2 15             	shl    edx,0x15
c0014c53:	29 d0                	sub    eax,edx
c0014c55:	50                   	push   eax
c0014c56:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0014c5b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014c61:	05 7c 11 00 00       	add    eax,0x117c
c0014c66:	50                   	push   eax
c0014c67:	e8 dc 42 ff ff       	call   c0008f48 <TSS::setESP(unsigned long)>
c0014c6c:	83 c4 1c             	add    esp,0x1c
c0014c6f:	c3                   	ret    

c0014c70 <switchToThread(ThreadControlBlock*)>:
c0014c70:	57                   	push   edi
c0014c71:	8b 0d 64 91 02 c0    	mov    ecx,DWORD PTR ds:0xc0029164
c0014c77:	56                   	push   esi
c0014c78:	85 c9                	test   ecx,ecx
c0014c7a:	53                   	push   ebx
c0014c7b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014c7f:	0f 85 8b 00 00 00    	jne    c0014d10 <switchToThread(ThreadControlBlock*)+0xa0>
c0014c85:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0014c89:	81 fa ff 00 00 00    	cmp    edx,0xff
c0014c8f:	74 7b                	je     c0014d0c <switchToThread(ThreadControlBlock*)+0x9c>
c0014c91:	b8 00 04 00 00       	mov    eax,0x400
c0014c96:	29 d0                	sub    eax,edx
c0014c98:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0014c9b:	d1 f8                	sar    eax,1
c0014c9d:	01 d0                	add    eax,edx
c0014c9f:	90                   	nop
c0014ca0:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0014ca3:	e8 1e 28 00 00       	call   c00174c6 <HalQueryPerformanceCounter()>
c0014ca8:	a3 a8 91 02 c0       	mov    ds:0xc00291a8,eax
c0014cad:	89 15 ac 91 02 c0    	mov    DWORD PTR ds:0xc00291ac,edx
c0014cb3:	89 c6                	mov    esi,eax
c0014cb5:	89 d7                	mov    edi,edx
c0014cb7:	2b 35 98 91 02 c0    	sub    esi,DWORD PTR ds:0xc0029198
c0014cbd:	a3 98 91 02 c0       	mov    ds:0xc0029198,eax
c0014cc2:	1b 3d 9c 91 02 c0    	sbb    edi,DWORD PTR ds:0xc002919c
c0014cc8:	89 35 a0 91 02 c0    	mov    DWORD PTR ds:0xc00291a0,esi
c0014cce:	89 3d a4 91 02 c0    	mov    DWORD PTR ds:0xc00291a4,edi
c0014cd4:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014cda:	89 15 9c 91 02 c0    	mov    DWORD PTR ds:0xc002919c,edx
c0014ce0:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0014ce3:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0014ce6:	01 c6                	add    esi,eax
c0014ce8:	11 d7                	adc    edi,edx
c0014cea:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0014ced:	83 ec 0c             	sub    esp,0xc
c0014cf0:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0014cf3:	53                   	push   ebx
c0014cf4:	e8 7e b5 fe ff       	call   c0000277 <switchToThreadASM>
c0014cf9:	0f 20 c0             	mov    eax,cr0
c0014cfc:	83 c8 08             	or     eax,0x8
c0014cff:	0f 22 c0             	mov    cr0,eax
c0014d02:	83 c4 10             	add    esp,0x10
c0014d05:	5b                   	pop    ebx
c0014d06:	5e                   	pop    esi
c0014d07:	5f                   	pop    edi
c0014d08:	c3                   	ret    
c0014d09:	8d 76 00             	lea    esi,[esi+0x0]
c0014d0c:	31 c0                	xor    eax,eax
c0014d0e:	eb 90                	jmp    c0014ca0 <switchToThread(ThreadControlBlock*)+0x30>
c0014d10:	5b                   	pop    ebx
c0014d11:	c7 05 60 91 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0029160,0x1
c0014d1b:	5e                   	pop    esi
c0014d1c:	5f                   	pop    edi
c0014d1d:	c3                   	ret    
c0014d1e:	66 90                	xchg   ax,ax

c0014d20 <Process::addArgs(char**)>:
c0014d20:	57                   	push   edi
c0014d21:	56                   	push   esi
c0014d22:	53                   	push   ebx
c0014d23:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014d27:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0014d2b:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0014d35:	85 ff                	test   edi,edi
c0014d37:	74 4f                	je     c0014d88 <Process::addArgs(char**)+0x68>
c0014d39:	8b 07                	mov    eax,DWORD PTR [edi]
c0014d3b:	85 c0                	test   eax,eax
c0014d3d:	74 49                	je     c0014d88 <Process::addArgs(char**)+0x68>
c0014d3f:	31 db                	xor    ebx,ebx
c0014d41:	8d 76 00             	lea    esi,[esi+0x0]
c0014d44:	83 ec 0c             	sub    esp,0xc
c0014d47:	50                   	push   eax
c0014d48:	e8 23 b8 fe ff       	call   c0000570 <strlen>
c0014d4d:	83 c0 01             	add    eax,0x1
c0014d50:	89 04 24             	mov    DWORD PTR [esp],eax
c0014d53:	e8 56 2d ff ff       	call   c0007aae <malloc>
c0014d58:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0014d5f:	5a                   	pop    edx
c0014d60:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014d63:	59                   	pop    ecx
c0014d64:	83 c3 01             	add    ebx,0x1
c0014d67:	52                   	push   edx
c0014d68:	50                   	push   eax
c0014d69:	e8 d2 b8 fe ff       	call   c0000640 <strcpy>
c0014d6e:	8b 8e 16 05 00 00    	mov    ecx,DWORD PTR [esi+0x516]
c0014d74:	83 c4 10             	add    esp,0x10
c0014d77:	83 c1 01             	add    ecx,0x1
c0014d7a:	89 8e 16 05 00 00    	mov    DWORD PTR [esi+0x516],ecx
c0014d80:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0014d83:	85 c0                	test   eax,eax
c0014d85:	75 bd                	jne    c0014d44 <Process::addArgs(char**)+0x24>
c0014d87:	90                   	nop
c0014d88:	5b                   	pop    ebx
c0014d89:	5e                   	pop    esi
c0014d8a:	5f                   	pop    edi
c0014d8b:	c3                   	ret    

c0014d8c <Process::Process(char const*, Process*, char**)>:
c0014d8c:	56                   	push   esi
c0014d8d:	53                   	push   ebx
c0014d8e:	83 ec 14             	sub    esp,0x14
c0014d91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d95:	05 0c 02 00 00       	add    eax,0x20c
c0014d9a:	bb 07 00 00 00       	mov    ebx,0x7
c0014d9f:	89 c6                	mov    esi,eax
c0014da1:	8d 76 00             	lea    esi,[esi+0x0]
c0014da4:	85 db                	test   ebx,ebx
c0014da6:	78 14                	js     c0014dbc <Process::Process(char const*, Process*, char**)+0x30>
c0014da8:	83 ec 0c             	sub    esp,0xc
c0014dab:	56                   	push   esi
c0014dac:	e8 77 a5 00 00       	call   c001f328 <ThreadControlBlock::ThreadControlBlock()>
c0014db1:	83 c4 10             	add    esp,0x10
c0014db4:	83 c6 5f             	add    esi,0x5f
c0014db7:	83 eb 01             	sub    ebx,0x1
c0014dba:	eb e8                	jmp    c0014da4 <Process::Process(char const*, Process*, char**)+0x18>
c0014dbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014dc0:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0014dc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014dcb:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0014dd2:	83 ec 0c             	sub    esp,0xc
c0014dd5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014dd9:	e8 b2 bb ff ff       	call   c0010990 <KeNewProcessEnv(Process*)>
c0014dde:	83 c4 10             	add    esp,0x10
c0014de1:	89 c2                	mov    edx,eax
c0014de3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014de7:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014ded:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014df1:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014dfa:	a1 e0 2c 02 c0       	mov    eax,ds:0xc0022ce0
c0014dff:	8d 50 01             	lea    edx,[eax+0x1]
c0014e02:	89 15 e0 2c 02 c0    	mov    DWORD PTR ds:0xc0022ce0,edx
c0014e08:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014e0c:	89 02                	mov    DWORD PTR [edx],eax
c0014e0e:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0014e16:	83 ec 0c             	sub    esp,0xc
c0014e19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014e1d:	e8 8c 2c ff ff       	call   c0007aae <malloc>
c0014e22:	83 c4 10             	add    esp,0x10
c0014e25:	89 c3                	mov    ebx,eax
c0014e27:	83 ec 08             	sub    esp,0x8
c0014e2a:	6a 00                	push   0x0
c0014e2c:	53                   	push   ebx
c0014e2d:	e8 2a 52 ff ff       	call   c000a05c <VAS::VAS(bool)>
c0014e32:	83 c4 10             	add    esp,0x10
c0014e35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e39:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014e3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e43:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014e4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e51:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014e55:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0014e5b:	e8 56 c1 ff ff       	call   c0010fb6 <KeInitSignals()>
c0014e60:	89 c2                	mov    edx,eax
c0014e62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e66:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0014e6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e70:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014e76:	85 c0                	test   eax,eax
c0014e78:	74 42                	je     c0014ebc <Process::Process(char const*, Process*, char**)+0x130>
c0014e7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e7e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014e84:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014e8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e8e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014e94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e98:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014e9e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014ea4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ea8:	05 0c 01 00 00       	add    eax,0x10c
c0014ead:	83 ec 08             	sub    esp,0x8
c0014eb0:	52                   	push   edx
c0014eb1:	50                   	push   eax
c0014eb2:	e8 89 b7 fe ff       	call   c0000640 <strcpy>
c0014eb7:	83 c4 10             	add    esp,0x10
c0014eba:	eb 64                	jmp    c0014f20 <Process::Process(char const*, Process*, char**)+0x194>
c0014ebc:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0014ec4:	83 ec 0c             	sub    esp,0xc
c0014ec7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014ecb:	e8 de 2b ff ff       	call   c0007aae <malloc>
c0014ed0:	83 c4 10             	add    esp,0x10
c0014ed3:	89 c3                	mov    ebx,eax
c0014ed5:	83 ec 08             	sub    esp,0x8
c0014ed8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014edc:	53                   	push   ebx
c0014edd:	e8 76 3d ff ff       	call   c0008c58 <VgaText::VgaText(char const*)>
c0014ee2:	83 c4 10             	add    esp,0x10
c0014ee5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ee9:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0014eef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ef3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014ef9:	83 ec 0c             	sub    esp,0xc
c0014efc:	50                   	push   eax
c0014efd:	e8 f4 35 ff ff       	call   c00084f6 <addToTerminalCycle(VgaText*)>
c0014f02:	83 c4 10             	add    esp,0x10
c0014f05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f09:	05 0c 01 00 00       	add    eax,0x10c
c0014f0e:	83 ec 08             	sub    esp,0x8
c0014f11:	68 dc 1a 02 c0       	push   0xc0021adc
c0014f16:	50                   	push   eax
c0014f17:	e8 24 b7 fe ff       	call   c0000640 <strcpy>
c0014f1c:	83 c4 10             	add    esp,0x10
c0014f1f:	90                   	nop
c0014f20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f24:	83 c0 0c             	add    eax,0xc
c0014f27:	83 ec 08             	sub    esp,0x8
c0014f2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014f2e:	50                   	push   eax
c0014f2f:	e8 0c b7 fe ff       	call   c0000640 <strcpy>
c0014f34:	83 c4 10             	add    esp,0x10
c0014f37:	83 ec 08             	sub    esp,0x8
c0014f3a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0014f3e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014f42:	e8 d9 fd ff ff       	call   c0014d20 <Process::addArgs(char**)>
c0014f47:	83 c4 10             	add    esp,0x10
c0014f4a:	83 ec 08             	sub    esp,0x8
c0014f4d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014f51:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014f55:	e8 ba ec ff ff       	call   c0013c14 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0014f5a:	83 c4 10             	add    esp,0x10
c0014f5d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0014f61:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014f65:	83 f0 01             	xor    eax,0x1
c0014f68:	88 c2                	mov    dl,al
c0014f6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f6e:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0014f74:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0014f79:	83 ec 04             	sub    esp,0x4
c0014f7c:	50                   	push   eax
c0014f7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014f81:	68 34 1b 02 c0       	push   0xc0021b34
c0014f86:	e8 ae 59 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0014f8b:	83 c4 10             	add    esp,0x10
c0014f8e:	90                   	nop
c0014f8f:	83 c4 14             	add    esp,0x14
c0014f92:	5b                   	pop    ebx
c0014f93:	5e                   	pop    esi
c0014f94:	c3                   	ret    
c0014f95:	90                   	nop
c0014f96:	66 90                	xchg   ax,ax

c0014f98 <Process::Process(bool, char const*, Process*, char**)>:
c0014f98:	56                   	push   esi
c0014f99:	53                   	push   ebx
c0014f9a:	83 ec 24             	sub    esp,0x24
c0014f9d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014fa1:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0014fa5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014fa9:	05 0c 02 00 00       	add    eax,0x20c
c0014fae:	bb 07 00 00 00       	mov    ebx,0x7
c0014fb3:	89 c6                	mov    esi,eax
c0014fb5:	8d 76 00             	lea    esi,[esi+0x0]
c0014fb8:	85 db                	test   ebx,ebx
c0014fba:	78 14                	js     c0014fd0 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0014fbc:	83 ec 0c             	sub    esp,0xc
c0014fbf:	56                   	push   esi
c0014fc0:	e8 63 a3 00 00       	call   c001f328 <ThreadControlBlock::ThreadControlBlock()>
c0014fc5:	83 c4 10             	add    esp,0x10
c0014fc8:	83 c6 5f             	add    esi,0x5f
c0014fcb:	83 eb 01             	sub    ebx,0x1
c0014fce:	eb e8                	jmp    c0014fb8 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0014fd0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014fd4:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0014fdb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014fdf:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0014fe6:	83 ec 0c             	sub    esp,0xc
c0014fe9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014fed:	e8 9e b9 ff ff       	call   c0010990 <KeNewProcessEnv(Process*)>
c0014ff2:	83 c4 10             	add    esp,0x10
c0014ff5:	89 c2                	mov    edx,eax
c0014ff7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014ffb:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015001:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015005:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001500e:	a1 e0 2c 02 c0       	mov    eax,ds:0xc0022ce0
c0015013:	8d 50 01             	lea    edx,[eax+0x1]
c0015016:	89 15 e0 2c 02 c0    	mov    DWORD PTR ds:0xc0022ce0,edx
c001501c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015020:	89 02                	mov    DWORD PTR [edx],eax
c0015022:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001502a:	83 ec 0c             	sub    esp,0xc
c001502d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015031:	e8 78 2a ff ff       	call   c0007aae <malloc>
c0015036:	83 c4 10             	add    esp,0x10
c0015039:	89 c3                	mov    ebx,eax
c001503b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015040:	83 ec 08             	sub    esp,0x8
c0015043:	50                   	push   eax
c0015044:	53                   	push   ebx
c0015045:	e8 12 50 ff ff       	call   c000a05c <VAS::VAS(bool)>
c001504a:	83 c4 10             	add    esp,0x10
c001504d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015051:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015057:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001505b:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015065:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015069:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001506d:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015073:	e8 3e bf ff ff       	call   c0010fb6 <KeInitSignals()>
c0015078:	89 c2                	mov    edx,eax
c001507a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001507e:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015084:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015088:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001508e:	85 c0                	test   eax,eax
c0015090:	74 42                	je     c00150d4 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0015092:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015096:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001509c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00150a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00150a6:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00150ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00150b0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00150b6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00150bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00150c0:	05 0c 01 00 00       	add    eax,0x10c
c00150c5:	83 ec 08             	sub    esp,0x8
c00150c8:	52                   	push   edx
c00150c9:	50                   	push   eax
c00150ca:	e8 71 b5 fe ff       	call   c0000640 <strcpy>
c00150cf:	83 c4 10             	add    esp,0x10
c00150d2:	eb 64                	jmp    c0015138 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c00150d4:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c00150dc:	83 ec 0c             	sub    esp,0xc
c00150df:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00150e3:	e8 c6 29 ff ff       	call   c0007aae <malloc>
c00150e8:	83 c4 10             	add    esp,0x10
c00150eb:	89 c3                	mov    ebx,eax
c00150ed:	83 ec 08             	sub    esp,0x8
c00150f0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00150f4:	53                   	push   ebx
c00150f5:	e8 5e 3b ff ff       	call   c0008c58 <VgaText::VgaText(char const*)>
c00150fa:	83 c4 10             	add    esp,0x10
c00150fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015101:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015107:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001510b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015111:	83 ec 0c             	sub    esp,0xc
c0015114:	50                   	push   eax
c0015115:	e8 dc 33 ff ff       	call   c00084f6 <addToTerminalCycle(VgaText*)>
c001511a:	83 c4 10             	add    esp,0x10
c001511d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015121:	05 0c 01 00 00       	add    eax,0x10c
c0015126:	83 ec 08             	sub    esp,0x8
c0015129:	68 dc 1a 02 c0       	push   0xc0021adc
c001512e:	50                   	push   eax
c001512f:	e8 0c b5 fe ff       	call   c0000640 <strcpy>
c0015134:	83 c4 10             	add    esp,0x10
c0015137:	90                   	nop
c0015138:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001513c:	83 c0 0c             	add    eax,0xc
c001513f:	83 ec 08             	sub    esp,0x8
c0015142:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015146:	50                   	push   eax
c0015147:	e8 f4 b4 fe ff       	call   c0000640 <strcpy>
c001514c:	83 c4 10             	add    esp,0x10
c001514f:	83 ec 08             	sub    esp,0x8
c0015152:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015156:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001515a:	e8 c1 fb ff ff       	call   c0014d20 <Process::addArgs(char**)>
c001515f:	83 c4 10             	add    esp,0x10
c0015162:	90                   	nop
c0015163:	83 c4 24             	add    esp,0x24
c0015166:	5b                   	pop    ebx
c0015167:	5e                   	pop    esi
c0015168:	c3                   	ret    
c0015169:	8d 76 00             	lea    esi,[esi+0x0]

c001516c <taskStartupFunction>:
c001516c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015171:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0015174:	c3                   	ret    
c0015175:	90                   	nop
c0015176:	66 90                	xchg   ax,ax

c0015178 <Semaphore::Semaphore(int)>:
c0015178:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001517c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015180:	89 10                	mov    DWORD PTR [eax],edx
c0015182:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015186:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001518d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015191:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015198:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001519c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00151a3:	90                   	nop
c00151a4:	c3                   	ret    
c00151a5:	90                   	nop
c00151a6:	66 90                	xchg   ax,ax

c00151a8 <Mutex::Mutex()>:
c00151a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00151ac:	6a 01                	push   0x1
c00151ae:	50                   	push   eax
c00151af:	e8 c4 ff ff ff       	call   c0015178 <Semaphore::Semaphore(int)>
c00151b4:	83 c4 08             	add    esp,0x8
c00151b7:	90                   	nop
c00151b8:	c3                   	ret    
c00151b9:	90                   	nop
c00151ba:	66 90                	xchg   ax,ax

c00151bc <Process::createThread(void (*)(void*), void*, int)>:
c00151bc:	57                   	push   edi
c00151bd:	31 c9                	xor    ecx,ecx
c00151bf:	56                   	push   esi
c00151c0:	53                   	push   ebx
c00151c1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00151c5:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c00151cc:	89 f2                	mov    edx,esi
c00151ce:	66 90                	xchg   ax,ax
c00151d0:	0f b7 c2             	movzx  eax,dx
c00151d3:	80 e2 01             	and    dl,0x1
c00151d6:	74 14                	je     c00151ec <Process::createThread(void (*)(void*), void*, int)+0x30>
c00151d8:	d1 f8                	sar    eax,1
c00151da:	83 c1 01             	add    ecx,0x1
c00151dd:	89 c2                	mov    edx,eax
c00151df:	83 f9 10             	cmp    ecx,0x10
c00151e2:	75 ec                	jne    c00151d0 <Process::createThread(void (*)(void*), void*, int)+0x14>
c00151e4:	31 db                	xor    ebx,ebx
c00151e6:	89 d8                	mov    eax,ebx
c00151e8:	5b                   	pop    ebx
c00151e9:	5e                   	pop    esi
c00151ea:	5f                   	pop    edi
c00151eb:	c3                   	ret    
c00151ec:	b8 01 00 00 00       	mov    eax,0x1
c00151f1:	d3 e0                	shl    eax,cl
c00151f3:	09 c6                	or     esi,eax
c00151f5:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00151f8:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c00151ff:	01 c0                	add    eax,eax
c0015201:	01 c8                	add    eax,ecx
c0015203:	8d 04 80             	lea    eax,[eax+eax*4]
c0015206:	01 d8                	add    eax,ebx
c0015208:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c001520f:	75 0b                	jne    c001521c <Process::createThread(void (*)(void*), void*, int)+0x60>
c0015211:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c001521b:	90                   	nop
c001521c:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015222:	83 ec 0c             	sub    esp,0xc
c0015225:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0015228:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c001522b:	01 c0                	add    eax,eax
c001522d:	01 c8                	add    eax,ecx
c001522f:	8d 3c 80             	lea    edi,[eax+eax*4]
c0015232:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0015235:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001523b:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c0015241:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015245:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c001524b:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0015251:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0015257:	89 ca                	mov    edx,ecx
c0015259:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0015260:	f7 da                	neg    edx
c0015262:	c1 e2 15             	shl    edx,0x15
c0015265:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001526b:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0015271:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015275:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001527f:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0015285:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015289:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001528f:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0015299:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c00152a3:	68 00 01 00 00       	push   0x100
c00152a8:	e8 01 28 ff ff       	call   c0007aae <malloc>
c00152ad:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00152b0:	58                   	pop    eax
c00152b1:	5a                   	pop    edx
c00152b2:	53                   	push   ebx
c00152b3:	68 84 91 02 c0       	push   0xc0029184
c00152b8:	e8 03 9e 00 00       	call   c001f0c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00152bd:	83 c4 10             	add    esp,0x10
c00152c0:	89 d8                	mov    eax,ebx
c00152c2:	5b                   	pop    ebx
c00152c3:	5e                   	pop    esi
c00152c4:	5f                   	pop    edi
c00152c5:	c3                   	ret    
c00152c6:	66 90                	xchg   ax,ax

c00152c8 <Process::createUserThread()>:
c00152c8:	83 ec 0c             	sub    esp,0xc
c00152cb:	68 80 00 00 00       	push   0x80
c00152d0:	6a 00                	push   0x0
c00152d2:	68 18 4c 01 c0       	push   0xc0014c18
c00152d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00152db:	50                   	push   eax
c00152dc:	e8 db fe ff ff       	call   c00151bc <Process::createThread(void (*)(void*), void*, int)>
c00152e1:	83 c4 1c             	add    esp,0x1c
c00152e4:	c3                   	ret    
c00152e5:	8d 76 00             	lea    esi,[esi+0x0]

c00152e8 <setupMultitasking(void (*)())>:
c00152e8:	56                   	push   esi
c00152e9:	53                   	push   ebx
c00152ea:	83 ec 04             	sub    esp,0x4
c00152ed:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00152f1:	eb 11                	jmp    c0015304 <setupMultitasking(void (*)())+0x1c>
c00152f3:	90                   	nop
c00152f4:	83 ec 0c             	sub    esp,0xc
c00152f7:	68 84 91 02 c0       	push   0xc0029184
c00152fc:	e8 03 9d 00 00       	call   c001f004 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015301:	83 c4 10             	add    esp,0x10
c0015304:	83 ec 0c             	sub    esp,0xc
c0015307:	68 84 91 02 c0       	push   0xc0029184
c001530c:	e8 cf 9c 00 00       	call   c001efe0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015311:	83 c4 10             	add    esp,0x10
c0015314:	84 c0                	test   al,al
c0015316:	74 dc                	je     c00152f4 <setupMultitasking(void (*)())+0xc>
c0015318:	83 ec 0c             	sub    esp,0xc
c001531b:	68 24 07 00 00       	push   0x724
c0015320:	e8 89 27 ff ff       	call   c0007aae <malloc>
c0015325:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001532c:	89 c3                	mov    ebx,eax
c001532e:	6a 00                	push   0x0
c0015330:	68 e0 1a 02 c0       	push   0xc0021ae0
c0015335:	6a 01                	push   0x1
c0015337:	50                   	push   eax
c0015338:	e8 5b fc ff ff       	call   c0014f98 <Process::Process(bool, char const*, Process*, char**)>
c001533d:	83 c4 14             	add    esp,0x14
c0015340:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0015346:	89 1d 90 91 02 c0    	mov    DWORD PTR ds:0xc0029190,ebx
c001534c:	50                   	push   eax
c001534d:	e8 f9 33 ff ff       	call   c000874b <setActiveTerminal(VgaText*)>
c0015352:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0015359:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0015363:	83 c8 01             	or     eax,0x1
c0015366:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c001536d:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015373:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015376:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0015380:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0015386:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c001538c:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0015396:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c00153a0:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c00153aa:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c00153b0:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c00153ba:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c00153c0:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c00153ca:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c00153d1:	e8 d8 26 ff ff       	call   c0007aae <malloc>
c00153d6:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c00153dc:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00153e2:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00153e8:	5a                   	pop    edx
c00153e9:	59                   	pop    ecx
c00153ea:	68 dc 1a 02 c0       	push   0xc0021adc
c00153ef:	50                   	push   eax
c00153f0:	e8 4b b2 fe ff       	call   c0000640 <strcpy>
c00153f5:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c00153fc:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015400:	83 c4 14             	add    esp,0x14
c0015403:	5b                   	pop    ebx
c0015404:	5e                   	pop    esi
c0015405:	e9 5f ae fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c001540a:	66 90                	xchg   ax,ax

c001540c <schedule()>:
c001540c:	8b 15 64 91 02 c0    	mov    edx,DWORD PTR ds:0xc0029164
c0015412:	85 d2                	test   edx,edx
c0015414:	74 0e                	je     c0015424 <schedule()+0x18>
c0015416:	c7 05 60 91 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0029160,0x1
c0015420:	c3                   	ret    
c0015421:	8d 76 00             	lea    esi,[esi+0x0]
c0015424:	53                   	push   ebx
c0015425:	83 ec 14             	sub    esp,0x14
c0015428:	68 84 91 02 c0       	push   0xc0029184
c001542d:	e8 ae 9b 00 00       	call   c001efe0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015432:	83 c4 10             	add    esp,0x10
c0015435:	84 c0                	test   al,al
c0015437:	75 3f                	jne    c0015478 <schedule()+0x6c>
c0015439:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001543e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0015441:	83 fa 01             	cmp    edx,0x1
c0015444:	74 3a                	je     c0015480 <schedule()+0x74>
c0015446:	66 90                	xchg   ax,ax
c0015448:	83 ec 0c             	sub    esp,0xc
c001544b:	68 84 91 02 c0       	push   0xc0029184
c0015450:	e8 a7 9b 00 00       	call   c001effc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015455:	c7 04 24 84 91 02 c0 	mov    DWORD PTR [esp],0xc0029184
c001545c:	89 c3                	mov    ebx,eax
c001545e:	e8 a1 9b 00 00       	call   c001f004 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015463:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001546a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001546d:	e8 fe f7 ff ff       	call   c0014c70 <switchToThread(ThreadControlBlock*)>
c0015472:	83 c4 10             	add    esp,0x10
c0015475:	8d 76 00             	lea    esi,[esi+0x0]
c0015478:	83 c4 08             	add    esp,0x8
c001547b:	5b                   	pop    ebx
c001547c:	c3                   	ret    
c001547d:	8d 76 00             	lea    esi,[esi+0x0]
c0015480:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0015487:	83 ec 08             	sub    esp,0x8
c001548a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001548f:	50                   	push   eax
c0015490:	68 84 91 02 c0       	push   0xc0029184
c0015495:	e8 26 9c 00 00       	call   c001f0c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001549a:	83 c4 10             	add    esp,0x10
c001549d:	eb a9                	jmp    c0015448 <schedule()+0x3c>
c001549f:	90                   	nop

c00154a0 <Semaphore::tryAcquire()>:
c00154a0:	53                   	push   ebx
c00154a1:	83 ec 08             	sub    esp,0x8
c00154a4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00154a8:	fa                   	cli    
c00154a9:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c00154ae:	8d 50 01             	lea    edx,[eax+0x1]
c00154b1:	89 15 68 91 02 c0    	mov    DWORD PTR ds:0xc0029168,edx
c00154b7:	8b 15 64 91 02 c0    	mov    edx,DWORD PTR ds:0xc0029164
c00154bd:	8d 5a 01             	lea    ebx,[edx+0x1]
c00154c0:	89 1d 64 91 02 c0    	mov    DWORD PTR ds:0xc0029164,ebx
c00154c6:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c00154c9:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c00154cb:	7c 33                	jl     c0015500 <Semaphore::tryAcquire()+0x60>
c00154cd:	89 15 64 91 02 c0    	mov    DWORD PTR ds:0xc0029164,edx
c00154d3:	85 d2                	test   edx,edx
c00154d5:	75 0d                	jne    c00154e4 <Semaphore::tryAcquire()+0x44>
c00154d7:	8b 15 60 91 02 c0    	mov    edx,DWORD PTR ds:0xc0029160
c00154dd:	85 d2                	test   edx,edx
c00154df:	75 6f                	jne    c0015550 <Semaphore::tryAcquire()+0xb0>
c00154e1:	8d 76 00             	lea    esi,[esi+0x0]
c00154e4:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c00154e9:	85 c0                	test   eax,eax
c00154eb:	74 0b                	je     c00154f8 <Semaphore::tryAcquire()+0x58>
c00154ed:	8d 76 00             	lea    esi,[esi+0x0]
c00154f0:	31 c0                	xor    eax,eax
c00154f2:	83 c4 08             	add    esp,0x8
c00154f5:	5b                   	pop    ebx
c00154f6:	c3                   	ret    
c00154f7:	90                   	nop
c00154f8:	fb                   	sti    
c00154f9:	83 c4 08             	add    esp,0x8
c00154fc:	5b                   	pop    ebx
c00154fd:	c3                   	ret    
c00154fe:	66 90                	xchg   ax,ax
c0015500:	83 c3 01             	add    ebx,0x1
c0015503:	89 15 64 91 02 c0    	mov    DWORD PTR ds:0xc0029164,edx
c0015509:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001550c:	85 d2                	test   edx,edx
c001550e:	75 24                	jne    c0015534 <Semaphore::tryAcquire()+0x94>
c0015510:	8b 0d 60 91 02 c0    	mov    ecx,DWORD PTR ds:0xc0029160
c0015516:	85 c9                	test   ecx,ecx
c0015518:	74 1a                	je     c0015534 <Semaphore::tryAcquire()+0x94>
c001551a:	c7 05 60 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029160,0x0
c0015524:	e8 e3 fe ff ff       	call   c001540c <schedule()>
c0015529:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c001552e:	83 e8 01             	sub    eax,0x1
c0015531:	8d 76 00             	lea    esi,[esi+0x0]
c0015534:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0015539:	85 c0                	test   eax,eax
c001553b:	75 0b                	jne    c0015548 <Semaphore::tryAcquire()+0xa8>
c001553d:	fb                   	sti    
c001553e:	b0 01                	mov    al,0x1
c0015540:	83 c4 08             	add    esp,0x8
c0015543:	5b                   	pop    ebx
c0015544:	c3                   	ret    
c0015545:	8d 76 00             	lea    esi,[esi+0x0]
c0015548:	b0 01                	mov    al,0x1
c001554a:	83 c4 08             	add    esp,0x8
c001554d:	5b                   	pop    ebx
c001554e:	c3                   	ret    
c001554f:	90                   	nop
c0015550:	c7 05 60 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029160,0x0
c001555a:	e8 ad fe ff ff       	call   c001540c <schedule()>
c001555f:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0015564:	83 e8 01             	sub    eax,0x1
c0015567:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c001556c:	85 c0                	test   eax,eax
c001556e:	75 80                	jne    c00154f0 <Semaphore::tryAcquire()+0x50>
c0015570:	eb 86                	jmp    c00154f8 <Semaphore::tryAcquire()+0x58>
c0015572:	66 90                	xchg   ax,ax

c0015574 <Semaphore::assertLocked(char const*)>:
c0015574:	83 ec 0c             	sub    esp,0xc
c0015577:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001557b:	fa                   	cli    
c001557c:	8b 0d 68 91 02 c0    	mov    ecx,DWORD PTR ds:0xc0029168
c0015582:	a1 64 91 02 c0       	mov    eax,ds:0xc0029164
c0015587:	83 c1 01             	add    ecx,0x1
c001558a:	89 0d 68 91 02 c0    	mov    DWORD PTR ds:0xc0029168,ecx
c0015590:	8d 48 01             	lea    ecx,[eax+0x1]
c0015593:	89 0d 64 91 02 c0    	mov    DWORD PTR ds:0xc0029164,ecx
c0015599:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001559b:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001559e:	7c 28                	jl     c00155c8 <Semaphore::assertLocked(char const*)+0x54>
c00155a0:	a3 64 91 02 c0       	mov    ds:0xc0029164,eax
c00155a5:	85 c0                	test   eax,eax
c00155a7:	75 0b                	jne    c00155b4 <Semaphore::assertLocked(char const*)+0x40>
c00155a9:	a1 60 91 02 c0       	mov    eax,ds:0xc0029160
c00155ae:	85 c0                	test   eax,eax
c00155b0:	75 32                	jne    c00155e4 <Semaphore::assertLocked(char const*)+0x70>
c00155b2:	66 90                	xchg   ax,ax
c00155b4:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c00155b9:	83 e8 01             	sub    eax,0x1
c00155bc:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c00155c1:	75 01                	jne    c00155c4 <Semaphore::assertLocked(char const*)+0x50>
c00155c3:	fb                   	sti    
c00155c4:	83 c4 0c             	add    esp,0xc
c00155c7:	c3                   	ret    
c00155c8:	83 ec 0c             	sub    esp,0xc
c00155cb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00155cf:	52                   	push   edx
c00155d0:	e8 c6 b5 ff ff       	call   c0010b9b <KePanic(char const*)>
c00155d5:	a1 64 91 02 c0       	mov    eax,ds:0xc0029164
c00155da:	83 c4 10             	add    esp,0x10
c00155dd:	83 e8 01             	sub    eax,0x1
c00155e0:	eb be                	jmp    c00155a0 <Semaphore::assertLocked(char const*)+0x2c>
c00155e2:	66 90                	xchg   ax,ax
c00155e4:	c7 05 60 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029160,0x0
c00155ee:	e8 19 fe ff ff       	call   c001540c <schedule()>
c00155f3:	eb bf                	jmp    c00155b4 <Semaphore::assertLocked(char const*)+0x40>
c00155f5:	8d 76 00             	lea    esi,[esi+0x0]

c00155f8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00155f8:	83 ec 0c             	sub    esp,0xc
c00155fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015600:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015604:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015607:	e8 00 fe ff ff       	call   c001540c <schedule()>
c001560c:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0015611:	83 e8 01             	sub    eax,0x1
c0015614:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0015619:	75 01                	jne    c001561c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c001561b:	fb                   	sti    
c001561c:	83 c4 0c             	add    esp,0xc
c001561f:	c3                   	ret    

c0015620 <blockTask(TaskState)>:
c0015620:	83 ec 0c             	sub    esp,0xc
c0015623:	fa                   	cli    
c0015624:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0015629:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001562d:	83 c0 01             	add    eax,0x1
c0015630:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0015635:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001563a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001563d:	e8 ca fd ff ff       	call   c001540c <schedule()>
c0015642:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0015647:	83 e8 01             	sub    eax,0x1
c001564a:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c001564f:	75 03                	jne    c0015654 <blockTask(TaskState)+0x34>
c0015651:	fb                   	sti    
c0015652:	66 90                	xchg   ax,ax
c0015654:	83 c4 0c             	add    esp,0xc
c0015657:	c3                   	ret    

c0015658 <waitTask(int, int*, int)>:
c0015658:	83 ec 18             	sub    esp,0x18
c001565b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015660:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015664:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0015667:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001566b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015670:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0015673:	6a 07                	push   0x7
c0015675:	e8 a6 ff ff ff       	call   c0015620 <blockTask(TaskState)>
c001567a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001567f:	83 c4 10             	add    esp,0x10
c0015682:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0015685:	85 d2                	test   edx,edx
c0015687:	74 0b                	je     c0015694 <waitTask(int, int*, int)+0x3c>
c0015689:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c001568c:	89 02                	mov    DWORD PTR [edx],eax
c001568e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015693:	90                   	nop
c0015694:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0015697:	83 c4 0c             	add    esp,0xc
c001569a:	c3                   	ret    
c001569b:	90                   	nop

c001569c <milliTenthSleepUntil(unsigned int)>:
c001569c:	83 ec 0c             	sub    esp,0xc
c001569f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00156a3:	39 05 8c 84 02 c0    	cmp    DWORD PTR ds:0xc002848c,eax
c00156a9:	76 05                	jbe    c00156b0 <milliTenthSleepUntil(unsigned int)+0x14>
c00156ab:	90                   	nop
c00156ac:	83 c4 0c             	add    esp,0xc
c00156af:	c3                   	ret    
c00156b0:	fa                   	cli    
c00156b1:	8b 15 68 91 02 c0    	mov    edx,DWORD PTR ds:0xc0029168
c00156b7:	83 ec 08             	sub    esp,0x8
c00156ba:	83 c2 01             	add    edx,0x1
c00156bd:	8b 0d 64 91 02 c0    	mov    ecx,DWORD PTR ds:0xc0029164
c00156c3:	89 15 68 91 02 c0    	mov    DWORD PTR ds:0xc0029168,edx
c00156c9:	83 c1 01             	add    ecx,0x1
c00156cc:	89 0d 64 91 02 c0    	mov    DWORD PTR ds:0xc0029164,ecx
c00156d2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00156d8:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c00156db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00156e0:	50                   	push   eax
c00156e1:	68 78 91 02 c0       	push   0xc0029178
c00156e6:	e8 d5 99 00 00       	call   c001f0c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00156eb:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00156f2:	e8 29 ff ff ff       	call   c0015620 <blockTask(TaskState)>
c00156f7:	a1 64 91 02 c0       	mov    eax,ds:0xc0029164
c00156fc:	83 c4 10             	add    esp,0x10
c00156ff:	83 e8 01             	sub    eax,0x1
c0015702:	a3 64 91 02 c0       	mov    ds:0xc0029164,eax
c0015707:	85 c0                	test   eax,eax
c0015709:	75 09                	jne    c0015714 <milliTenthSleepUntil(unsigned int)+0x78>
c001570b:	a1 60 91 02 c0       	mov    eax,ds:0xc0029160
c0015710:	85 c0                	test   eax,eax
c0015712:	75 14                	jne    c0015728 <milliTenthSleepUntil(unsigned int)+0x8c>
c0015714:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0015719:	83 e8 01             	sub    eax,0x1
c001571c:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0015721:	75 89                	jne    c00156ac <milliTenthSleepUntil(unsigned int)+0x10>
c0015723:	fb                   	sti    
c0015724:	83 c4 0c             	add    esp,0xc
c0015727:	c3                   	ret    
c0015728:	c7 05 60 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029160,0x0
c0015732:	e8 d5 fc ff ff       	call   c001540c <schedule()>
c0015737:	eb db                	jmp    c0015714 <milliTenthSleepUntil(unsigned int)+0x78>
c0015739:	8d 76 00             	lea    esi,[esi+0x0]

c001573c <milliTenthSleep(unsigned int)>:
c001573c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015740:	a1 8c 84 02 c0       	mov    eax,ds:0xc002848c
c0015745:	01 c2                	add    edx,eax
c0015747:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001574b:	e9 4c ff ff ff       	jmp    c001569c <milliTenthSleepUntil(unsigned int)>

c0015750 <sleep(unsigned int)>:
c0015750:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015754:	8d 04 80             	lea    eax,[eax+eax*4]
c0015757:	8d 04 80             	lea    eax,[eax+eax*4]
c001575a:	8d 04 80             	lea    eax,[eax+eax*4]
c001575d:	8d 04 80             	lea    eax,[eax+eax*4]
c0015760:	c1 e0 04             	shl    eax,0x4
c0015763:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015767:	eb d3                	jmp    c001573c <milliTenthSleep(unsigned int)>
c0015769:	90                   	nop
c001576a:	66 90                	xchg   ax,ax

c001576c <Semaphore::acquire()>:
c001576c:	83 ec 0c             	sub    esp,0xc
c001576f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015773:	fa                   	cli    
c0015774:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0015779:	83 c0 01             	add    eax,0x1
c001577c:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0015781:	a1 64 91 02 c0       	mov    eax,ds:0xc0029164
c0015786:	8d 48 01             	lea    ecx,[eax+0x1]
c0015789:	89 0d 64 91 02 c0    	mov    DWORD PTR ds:0xc0029164,ecx
c001578f:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0015792:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0015794:	7d 2e                	jge    c00157c4 <Semaphore::acquire()+0x58>
c0015796:	83 c1 01             	add    ecx,0x1
c0015799:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001579c:	a3 64 91 02 c0       	mov    ds:0xc0029164,eax
c00157a1:	85 c0                	test   eax,eax
c00157a3:	75 0b                	jne    c00157b0 <Semaphore::acquire()+0x44>
c00157a5:	a1 60 91 02 c0       	mov    eax,ds:0xc0029160
c00157aa:	85 c0                	test   eax,eax
c00157ac:	75 66                	jne    c0015814 <Semaphore::acquire()+0xa8>
c00157ae:	66 90                	xchg   ax,ax
c00157b0:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c00157b5:	83 e8 01             	sub    eax,0x1
c00157b8:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c00157bd:	75 01                	jne    c00157c0 <Semaphore::acquire()+0x54>
c00157bf:	fb                   	sti    
c00157c0:	83 c4 0c             	add    esp,0xc
c00157c3:	c3                   	ret    
c00157c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00157c9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00157d0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00157d3:	85 c9                	test   ecx,ecx
c00157d5:	74 51                	je     c0015828 <Semaphore::acquire()+0xbc>
c00157d7:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c00157da:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00157e0:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c00157e3:	90                   	nop
c00157e4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00157e9:	83 ec 0c             	sub    esp,0xc
c00157ec:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00157ef:	68 60 1b 02 c0       	push   0xc0021b60
c00157f4:	e8 40 51 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c00157f9:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0015800:	e8 1b fe ff ff       	call   c0015620 <blockTask(TaskState)>
c0015805:	a1 64 91 02 c0       	mov    eax,ds:0xc0029164
c001580a:	83 c4 10             	add    esp,0x10
c001580d:	83 e8 01             	sub    eax,0x1
c0015810:	eb 8a                	jmp    c001579c <Semaphore::acquire()+0x30>
c0015812:	66 90                	xchg   ax,ax
c0015814:	c7 05 60 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029160,0x0
c001581e:	e8 e9 fb ff ff       	call   c001540c <schedule()>
c0015823:	eb 8b                	jmp    c00157b0 <Semaphore::acquire()+0x44>
c0015825:	8d 76 00             	lea    esi,[esi+0x0]
c0015828:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001582d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015830:	eb b2                	jmp    c00157e4 <Semaphore::acquire()+0x78>
c0015832:	66 90                	xchg   ax,ax

c0015834 <taskReturned>:
c0015834:	83 ec 18             	sub    esp,0x18
c0015837:	68 80 1b 02 c0       	push   0xc0021b80
c001583c:	e8 5a b3 ff ff       	call   c0010b9b <KePanic(char const*)>
c0015841:	83 c4 10             	add    esp,0x10
c0015844:	83 ec 0c             	sub    esp,0xc
c0015847:	6a 02                	push   0x2
c0015849:	e8 d2 fd ff ff       	call   c0015620 <blockTask(TaskState)>
c001584e:	fa                   	cli    
c001584f:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0015854:	83 c0 01             	add    eax,0x1
c0015857:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c001585c:	e8 ab fb ff ff       	call   c001540c <schedule()>
c0015861:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0015866:	83 c4 10             	add    esp,0x10
c0015869:	83 e8 01             	sub    eax,0x1
c001586c:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0015871:	85 c0                	test   eax,eax
c0015873:	75 cf                	jne    c0015844 <taskReturned+0x10>
c0015875:	fb                   	sti    
c0015876:	eb cc                	jmp    c0015844 <taskReturned+0x10>

c0015878 <Thr::processFromPID(int)>:
c0015878:	57                   	push   edi
c0015879:	56                   	push   esi
c001587a:	53                   	push   ebx
c001587b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001587f:	fa                   	cli    
c0015880:	8b 0d 68 91 02 c0    	mov    ecx,DWORD PTR ds:0xc0029168
c0015886:	83 ec 0c             	sub    esp,0xc
c0015889:	83 c1 01             	add    ecx,0x1
c001588c:	68 84 91 02 c0       	push   0xc0029184
c0015891:	89 0d 68 91 02 c0    	mov    DWORD PTR ds:0xc0029168,ecx
c0015897:	e8 60 97 00 00       	call   c001effc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001589c:	83 c4 10             	add    esp,0x10
c001589f:	89 c7                	mov    edi,eax
c00158a1:	eb 15                	jmp    c00158b8 <Thr::processFromPID(int)+0x40>
c00158a3:	90                   	nop
c00158a4:	83 ec 0c             	sub    esp,0xc
c00158a7:	68 84 91 02 c0       	push   0xc0029184
c00158ac:	e8 4b 97 00 00       	call   c001effc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00158b1:	83 c4 10             	add    esp,0x10
c00158b4:	39 f8                	cmp    eax,edi
c00158b6:	74 50                	je     c0015908 <Thr::processFromPID(int)+0x90>
c00158b8:	83 ec 0c             	sub    esp,0xc
c00158bb:	68 84 91 02 c0       	push   0xc0029184
c00158c0:	e8 37 97 00 00       	call   c001effc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00158c5:	c7 04 24 84 91 02 c0 	mov    DWORD PTR [esp],0xc0029184
c00158cc:	89 c3                	mov    ebx,eax
c00158ce:	e8 31 97 00 00       	call   c001f004 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00158d3:	58                   	pop    eax
c00158d4:	5a                   	pop    edx
c00158d5:	53                   	push   ebx
c00158d6:	68 84 91 02 c0       	push   0xc0029184
c00158db:	e8 e0 97 00 00       	call   c001f0c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00158e0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00158e3:	83 c4 10             	add    esp,0x10
c00158e6:	39 30                	cmp    DWORD PTR [eax],esi
c00158e8:	75 ba                	jne    c00158a4 <Thr::processFromPID(int)+0x2c>
c00158ea:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c00158ef:	83 e8 01             	sub    eax,0x1
c00158f2:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c00158f7:	74 0b                	je     c0015904 <Thr::processFromPID(int)+0x8c>
c00158f9:	8d 76 00             	lea    esi,[esi+0x0]
c00158fc:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00158ff:	5b                   	pop    ebx
c0015900:	5e                   	pop    esi
c0015901:	5f                   	pop    edi
c0015902:	c3                   	ret    
c0015903:	90                   	nop
c0015904:	fb                   	sti    
c0015905:	eb f5                	jmp    c00158fc <Thr::processFromPID(int)+0x84>
c0015907:	90                   	nop
c0015908:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c001590d:	83 e8 01             	sub    eax,0x1
c0015910:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0015915:	75 05                	jne    c001591c <Thr::processFromPID(int)+0xa4>
c0015917:	fb                   	sti    
c0015918:	5b                   	pop    ebx
c0015919:	5e                   	pop    esi
c001591a:	5f                   	pop    edi
c001591b:	c3                   	ret    
c001591c:	5b                   	pop    ebx
c001591d:	31 c0                	xor    eax,eax
c001591f:	5e                   	pop    esi
c0015920:	5f                   	pop    edi
c0015921:	c3                   	ret    
c0015922:	66 90                	xchg   ax,ax

c0015924 <unblockTask(ThreadControlBlock*)>:
c0015924:	53                   	push   ebx
c0015925:	83 ec 08             	sub    esp,0x8
c0015928:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001592c:	fa                   	cli    
c001592d:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0015932:	83 c0 01             	add    eax,0x1
c0015935:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c001593a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001593d:	85 c0                	test   eax,eax
c001593f:	74 67                	je     c00159a8 <unblockTask(ThreadControlBlock*)+0x84>
c0015941:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015944:	83 f8 01             	cmp    eax,0x1
c0015947:	74 37                	je     c0015980 <unblockTask(ThreadControlBlock*)+0x5c>
c0015949:	83 ec 0c             	sub    esp,0xc
c001594c:	68 84 91 02 c0       	push   0xc0029184
c0015951:	e8 a6 96 00 00       	call   c001effc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015956:	83 c4 10             	add    esp,0x10
c0015959:	85 c0                	test   eax,eax
c001595b:	75 1b                	jne    c0015978 <unblockTask(ThreadControlBlock*)+0x54>
c001595d:	eb 5d                	jmp    c00159bc <unblockTask(ThreadControlBlock*)+0x98>
c001595f:	90                   	nop
c0015960:	83 ec 08             	sub    esp,0x8
c0015963:	50                   	push   eax
c0015964:	68 84 91 02 c0       	push   0xc0029184
c0015969:	e8 ae 99 00 00       	call   c001f31c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001596e:	83 c4 10             	add    esp,0x10
c0015971:	85 c0                	test   eax,eax
c0015973:	74 47                	je     c00159bc <unblockTask(ThreadControlBlock*)+0x98>
c0015975:	8d 76 00             	lea    esi,[esi+0x0]
c0015978:	39 c3                	cmp    ebx,eax
c001597a:	75 e4                	jne    c0015960 <unblockTask(ThreadControlBlock*)+0x3c>
c001597c:	eb 12                	jmp    c0015990 <unblockTask(ThreadControlBlock*)+0x6c>
c001597e:	66 90                	xchg   ax,ax
c0015980:	83 ec 0c             	sub    esp,0xc
c0015983:	68 fe 1a 02 c0       	push   0xc0021afe
c0015988:	e8 ac 4f ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c001598d:	83 c4 10             	add    esp,0x10
c0015990:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0015995:	83 e8 01             	sub    eax,0x1
c0015998:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c001599d:	75 01                	jne    c00159a0 <unblockTask(ThreadControlBlock*)+0x7c>
c001599f:	fb                   	sti    
c00159a0:	83 c4 08             	add    esp,0x8
c00159a3:	5b                   	pop    ebx
c00159a4:	c3                   	ret    
c00159a5:	8d 76 00             	lea    esi,[esi+0x0]
c00159a8:	83 ec 0c             	sub    esp,0xc
c00159ab:	68 e7 1a 02 c0       	push   0xc0021ae7
c00159b0:	e8 84 4f ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c00159b5:	83 c4 10             	add    esp,0x10
c00159b8:	eb d6                	jmp    c0015990 <unblockTask(ThreadControlBlock*)+0x6c>
c00159ba:	66 90                	xchg   ax,ax
c00159bc:	83 ec 08             	sub    esp,0x8
c00159bf:	53                   	push   ebx
c00159c0:	68 84 91 02 c0       	push   0xc0029184
c00159c5:	e8 f6 96 00 00       	call   c001f0c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00159ca:	83 c4 10             	add    esp,0x10
c00159cd:	eb c1                	jmp    c0015990 <unblockTask(ThreadControlBlock*)+0x6c>
c00159cf:	90                   	nop

c00159d0 <cleanupTerminatedTask(ThreadControlBlock*)>:
c00159d0:	55                   	push   ebp
c00159d1:	57                   	push   edi
c00159d2:	56                   	push   esi
c00159d3:	53                   	push   ebx
c00159d4:	83 ec 1c             	sub    esp,0x1c
c00159d7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00159db:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00159de:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c00159e4:	85 ed                	test   ebp,ebp
c00159e6:	7e 28                	jle    c0015a10 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c00159e8:	31 f6                	xor    esi,esi
c00159ea:	66 90                	xchg   ax,ax
c00159ec:	83 ec 0c             	sub    esp,0xc
c00159ef:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c00159f6:	83 c6 01             	add    esi,0x1
c00159f9:	57                   	push   edi
c00159fa:	e8 bf 20 ff ff       	call   c0007abe <free>
c00159ff:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015a02:	83 c4 10             	add    esp,0x10
c0015a05:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0015a0b:	7f df                	jg     c00159ec <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0015a0d:	8d 76 00             	lea    esi,[esi+0x0]
c0015a10:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015a1a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015a1f:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0015a22:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0015a25:	d3 c0                	rol    eax,cl
c0015a27:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c0015a2e:	21 c8                	and    eax,ecx
c0015a30:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c0015a37:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015a3a:	89 f7                	mov    edi,esi
c0015a3c:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0015a44:	0f 85 72 01 00 00    	jne    c0015bbc <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0015a4a:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0015a50:	85 ed                	test   ebp,ebp
c0015a52:	74 1c                	je     c0015a70 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0015a54:	83 ec 0c             	sub    esp,0xc
c0015a57:	55                   	push   ebp
c0015a58:	e8 4f ae ff ff       	call   c00108ac <EnvVarContainer::~EnvVarContainer()>
c0015a5d:	59                   	pop    ecx
c0015a5e:	5e                   	pop    esi
c0015a5f:	6a 0c                	push   0xc
c0015a61:	55                   	push   ebp
c0015a62:	e8 a5 4d ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0015a67:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015a6a:	83 c4 10             	add    esp,0x10
c0015a6d:	89 f7                	mov    edi,esi
c0015a6f:	90                   	nop
c0015a70:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015a76:	85 c0                	test   eax,eax
c0015a78:	0f 84 b2 00 00 00    	je     c0015b30 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0015a7e:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0015a81:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0015a85:	31 c9                	xor    ecx,ecx
c0015a87:	eb 17                	jmp    c0015aa0 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0015a89:	8d 76 00             	lea    esi,[esi+0x0]
c0015a8c:	83 c1 01             	add    ecx,0x1
c0015a8f:	83 f9 10             	cmp    ecx,0x10
c0015a92:	0f 84 98 00 00 00    	je     c0015b30 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0015a98:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015a9e:	66 90                	xchg   ax,ax
c0015aa0:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0015aa7:	d3 fa                	sar    edx,cl
c0015aa9:	80 e2 01             	and    dl,0x1
c0015aac:	74 de                	je     c0015a8c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015aae:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0015ab1:	01 d2                	add    edx,edx
c0015ab3:	01 ca                	add    edx,ecx
c0015ab5:	8d 14 92             	lea    edx,[edx+edx*4]
c0015ab8:	01 d0                	add    eax,edx
c0015aba:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0015ac0:	83 fd 07             	cmp    ebp,0x7
c0015ac3:	75 c7                	jne    c0015a8c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015ac5:	05 40 02 00 00       	add    eax,0x240
c0015aca:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0015acd:	83 fd ff             	cmp    ebp,0xffffffff
c0015ad0:	0f 8c ee 00 00 00    	jl     c0015bc4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0015ad6:	0f 84 ac 01 00 00    	je     c0015c88 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c0015adc:	85 ed                	test   ebp,ebp
c0015ade:	0f 84 90 01 00 00    	je     c0015c74 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c0015ae4:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0015ae6:	75 a4                	jne    c0015a8c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015ae8:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015aee:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015af2:	01 d0                	add    eax,edx
c0015af4:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0015af8:	83 ec 0c             	sub    esp,0xc
c0015afb:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0015b01:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015b04:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015b0a:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0015b11:	50                   	push   eax
c0015b12:	e8 0d fe ff ff       	call   c0015924 <unblockTask(ThreadControlBlock*)>
c0015b17:	83 c4 10             	add    esp,0x10
c0015b1a:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015b1d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015b21:	89 f7                	mov    edi,esi
c0015b23:	83 c1 01             	add    ecx,0x1
c0015b26:	83 f9 10             	cmp    ecx,0x10
c0015b29:	0f 85 69 ff ff ff    	jne    c0015a98 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c0015b2f:	90                   	nop
c0015b30:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0015b36:	85 c0                	test   eax,eax
c0015b38:	74 62                	je     c0015b9c <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0015b3a:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0015b40:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0015b46:	74 54                	je     c0015b9c <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0015b48:	83 ec 0c             	sub    esp,0xc
c0015b4b:	68 84 91 02 c0       	push   0xc0029184
c0015b50:	e8 a7 94 00 00       	call   c001effc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015b55:	c7 04 24 84 91 02 c0 	mov    DWORD PTR [esp],0xc0029184
c0015b5c:	89 c7                	mov    edi,eax
c0015b5e:	e8 7d 94 00 00       	call   c001efe0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015b63:	83 c4 10             	add    esp,0x10
c0015b66:	84 c0                	test   al,al
c0015b68:	0f 84 ce 00 00 00    	je     c0015c3c <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c0015b6e:	66 90                	xchg   ax,ax
c0015b70:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015b73:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015b79:	85 d2                	test   edx,edx
c0015b7b:	74 0f                	je     c0015b8c <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c0015b7d:	83 ec 0c             	sub    esp,0xc
c0015b80:	8b 02                	mov    eax,DWORD PTR [edx]
c0015b82:	52                   	push   edx
c0015b83:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015b86:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015b89:	83 c4 10             	add    esp,0x10
c0015b8c:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0015b96:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0015b99:	8d 76 00             	lea    esi,[esi+0x0]
c0015b9c:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0015ba2:	85 db                	test   ebx,ebx
c0015ba4:	74 16                	je     c0015bbc <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0015ba6:	83 ec 0c             	sub    esp,0xc
c0015ba9:	53                   	push   ebx
c0015baa:	e8 f7 3f ff ff       	call   c0009ba6 <VAS::~VAS()>
c0015baf:	58                   	pop    eax
c0015bb0:	5a                   	pop    edx
c0015bb1:	6a 14                	push   0x14
c0015bb3:	53                   	push   ebx
c0015bb4:	e8 53 4c ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0015bb9:	83 c4 10             	add    esp,0x10
c0015bbc:	83 c4 1c             	add    esp,0x1c
c0015bbf:	5b                   	pop    ebx
c0015bc0:	5e                   	pop    esi
c0015bc1:	5f                   	pop    edi
c0015bc2:	5d                   	pop    ebp
c0015bc3:	c3                   	ret    
c0015bc4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015bc8:	83 ec 0c             	sub    esp,0xc
c0015bcb:	68 b4 1b 02 c0       	push   0xc0021bb4
c0015bd0:	e8 c6 af ff ff       	call   c0010b9b <KePanic(char const*)>
c0015bd5:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015bd8:	83 c4 10             	add    esp,0x10
c0015bdb:	89 f7                	mov    edi,esi
c0015bdd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015be1:	e9 a6 fe ff ff       	jmp    c0015a8c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015be6:	66 90                	xchg   ax,ax
c0015be8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015bee:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0015bf4:	75 1e                	jne    c0015c14 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015bf6:	83 ec 0c             	sub    esp,0xc
c0015bf9:	68 1c 1c 02 c0       	push   0xc0021c1c
c0015bfe:	e8 36 4d ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0015c03:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0015c0a:	e8 11 fa ff ff       	call   c0015620 <blockTask(TaskState)>
c0015c0f:	83 c4 10             	add    esp,0x10
c0015c12:	66 90                	xchg   ax,ax
c0015c14:	83 ec 08             	sub    esp,0x8
c0015c17:	56                   	push   esi
c0015c18:	68 84 91 02 c0       	push   0xc0029184
c0015c1d:	e8 9e 94 00 00       	call   c001f0c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015c22:	c7 04 24 84 91 02 c0 	mov    DWORD PTR [esp],0xc0029184
c0015c29:	e8 ce 93 00 00       	call   c001effc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015c2e:	83 c4 10             	add    esp,0x10
c0015c31:	39 f8                	cmp    eax,edi
c0015c33:	0f 84 37 ff ff ff    	je     c0015b70 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c0015c39:	8d 76 00             	lea    esi,[esi+0x0]
c0015c3c:	83 ec 0c             	sub    esp,0xc
c0015c3f:	68 84 91 02 c0       	push   0xc0029184
c0015c44:	e8 b3 93 00 00       	call   c001effc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015c49:	c7 04 24 84 91 02 c0 	mov    DWORD PTR [esp],0xc0029184
c0015c50:	89 c6                	mov    esi,eax
c0015c52:	e8 ad 93 00 00       	call   c001f004 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015c57:	83 c4 10             	add    esp,0x10
c0015c5a:	39 f3                	cmp    ebx,esi
c0015c5c:	74 b6                	je     c0015c14 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015c5e:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0015c61:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015c64:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0015c6a:	75 a8                	jne    c0015c14 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015c6c:	e9 77 ff ff ff       	jmp    c0015be8 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0015c71:	8d 76 00             	lea    esi,[esi+0x0]
c0015c74:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015c78:	83 ec 0c             	sub    esp,0xc
c0015c7b:	68 e8 1b 02 c0       	push   0xc0021be8
c0015c80:	e9 4b ff ff ff       	jmp    c0015bd0 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0015c85:	8d 76 00             	lea    esi,[esi+0x0]
c0015c88:	8b 36                	mov    esi,DWORD PTR [esi]
c0015c8a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015c8e:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0015c91:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015c94:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0015c9a:	01 d7                	add    edi,edx
c0015c9c:	89 f8                	mov    eax,edi
c0015c9e:	e9 51 fe ff ff       	jmp    c0015af4 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c0015ca3:	90                   	nop

c0015ca4 <cleanerTaskFunction(void*)>:
c0015ca4:	53                   	push   ebx
c0015ca5:	83 ec 08             	sub    esp,0x8
c0015ca8:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0015cad:	83 e8 01             	sub    eax,0x1
c0015cb0:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0015cb5:	75 01                	jne    c0015cb8 <cleanerTaskFunction(void*)+0x14>
c0015cb7:	fb                   	sti    
c0015cb8:	fa                   	cli    
c0015cb9:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0015cbe:	80 3d 4c 91 02 c0 00 	cmp    BYTE PTR ds:0xc002914c,0x0
c0015cc5:	8d 50 01             	lea    edx,[eax+0x1]
c0015cc8:	89 15 68 91 02 c0    	mov    DWORD PTR ds:0xc0029168,edx
c0015cce:	0f 84 c4 00 00 00    	je     c0015d98 <cleanerTaskFunction(void*)+0xf4>
c0015cd4:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0015cd9:	85 c0                	test   eax,eax
c0015cdb:	75 03                	jne    c0015ce0 <cleanerTaskFunction(void*)+0x3c>
c0015cdd:	fb                   	sti    
c0015cde:	66 90                	xchg   ax,ax
c0015ce0:	c6 05 4c 91 02 c0 00 	mov    BYTE PTR ds:0xc002914c,0x0
c0015ce7:	fa                   	cli    
c0015ce8:	8b 15 68 91 02 c0    	mov    edx,DWORD PTR ds:0xc0029168
c0015cee:	8b 0d 64 91 02 c0    	mov    ecx,DWORD PTR ds:0xc0029164
c0015cf4:	83 c2 01             	add    edx,0x1
c0015cf7:	83 c1 01             	add    ecx,0x1
c0015cfa:	89 15 68 91 02 c0    	mov    DWORD PTR ds:0xc0029168,edx
c0015d00:	89 0d 64 91 02 c0    	mov    DWORD PTR ds:0xc0029164,ecx
c0015d06:	fa                   	cli    
c0015d07:	8b 1d 68 91 02 c0    	mov    ebx,DWORD PTR ds:0xc0029168
c0015d0d:	83 c3 01             	add    ebx,0x1
c0015d10:	89 1d 68 91 02 c0    	mov    DWORD PTR ds:0xc0029168,ebx
c0015d16:	eb 28                	jmp    c0015d40 <cleanerTaskFunction(void*)+0x9c>
c0015d18:	83 ec 0c             	sub    esp,0xc
c0015d1b:	68 6c 91 02 c0       	push   0xc002916c
c0015d20:	e8 d7 92 00 00       	call   c001effc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015d25:	c7 04 24 6c 91 02 c0 	mov    DWORD PTR [esp],0xc002916c
c0015d2c:	89 c3                	mov    ebx,eax
c0015d2e:	e8 d1 92 00 00       	call   c001f004 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015d33:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015d36:	e8 95 fc ff ff       	call   c00159d0 <cleanupTerminatedTask(ThreadControlBlock*)>
c0015d3b:	83 c4 10             	add    esp,0x10
c0015d3e:	66 90                	xchg   ax,ax
c0015d40:	83 ec 0c             	sub    esp,0xc
c0015d43:	68 6c 91 02 c0       	push   0xc002916c
c0015d48:	e8 93 92 00 00       	call   c001efe0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015d4d:	83 c4 10             	add    esp,0x10
c0015d50:	84 c0                	test   al,al
c0015d52:	74 c4                	je     c0015d18 <cleanerTaskFunction(void*)+0x74>
c0015d54:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0015d59:	83 e8 01             	sub    eax,0x1
c0015d5c:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0015d61:	75 01                	jne    c0015d64 <cleanerTaskFunction(void*)+0xc0>
c0015d63:	fb                   	sti    
c0015d64:	a1 64 91 02 c0       	mov    eax,ds:0xc0029164
c0015d69:	83 e8 01             	sub    eax,0x1
c0015d6c:	a3 64 91 02 c0       	mov    ds:0xc0029164,eax
c0015d71:	0f 85 31 ff ff ff    	jne    c0015ca8 <cleanerTaskFunction(void*)+0x4>
c0015d77:	a1 60 91 02 c0       	mov    eax,ds:0xc0029160
c0015d7c:	85 c0                	test   eax,eax
c0015d7e:	0f 84 24 ff ff ff    	je     c0015ca8 <cleanerTaskFunction(void*)+0x4>
c0015d84:	c7 05 60 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029160,0x0
c0015d8e:	e8 79 f6 ff ff       	call   c001540c <schedule()>
c0015d93:	e9 10 ff ff ff       	jmp    c0015ca8 <cleanerTaskFunction(void*)+0x4>
c0015d98:	83 ec 0c             	sub    esp,0xc
c0015d9b:	6a 02                	push   0x2
c0015d9d:	e8 56 f8 ff ff       	call   c00155f8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015da2:	83 c4 10             	add    esp,0x10
c0015da5:	e9 36 ff ff ff       	jmp    c0015ce0 <cleanerTaskFunction(void*)+0x3c>
c0015daa:	66 90                	xchg   ax,ax

c0015dac <terminateTask(int)>:
c0015dac:	83 ec 14             	sub    esp,0x14
c0015daf:	fa                   	cli    
c0015db0:	8b 15 68 91 02 c0    	mov    edx,DWORD PTR ds:0xc0029168
c0015db6:	8b 0d 64 91 02 c0    	mov    ecx,DWORD PTR ds:0xc0029164
c0015dbc:	83 c2 01             	add    edx,0x1
c0015dbf:	83 c1 01             	add    ecx,0x1
c0015dc2:	89 15 68 91 02 c0    	mov    DWORD PTR ds:0xc0029168,edx
c0015dc8:	89 0d 64 91 02 c0    	mov    DWORD PTR ds:0xc0029164,ecx
c0015dce:	fa                   	cli    
c0015dcf:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0015dd4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015dd8:	83 c0 01             	add    eax,0x1
c0015ddb:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0015de0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015de5:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0015de8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ded:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015df0:	50                   	push   eax
c0015df1:	68 6c 91 02 c0       	push   0xc002916c
c0015df6:	e8 c5 92 00 00       	call   c001f0c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015dfb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e00:	83 c4 10             	add    esp,0x10
c0015e03:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0015e0a:	a1 48 91 02 c0       	mov    eax,ds:0xc0029148
c0015e0f:	85 c0                	test   eax,eax
c0015e11:	74 65                	je     c0015e78 <terminateTask(int)+0xcc>
c0015e13:	83 ec 0c             	sub    esp,0xc
c0015e16:	c6 05 4c 91 02 c0 01 	mov    BYTE PTR ds:0xc002914c,0x1
c0015e1d:	50                   	push   eax
c0015e1e:	e8 01 fb ff ff       	call   c0015924 <unblockTask(ThreadControlBlock*)>
c0015e23:	83 c4 10             	add    esp,0x10
c0015e26:	66 90                	xchg   ax,ax
c0015e28:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0015e2d:	83 e8 01             	sub    eax,0x1
c0015e30:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0015e35:	75 01                	jne    c0015e38 <terminateTask(int)+0x8c>
c0015e37:	fb                   	sti    
c0015e38:	a1 64 91 02 c0       	mov    eax,ds:0xc0029164
c0015e3d:	83 e8 01             	sub    eax,0x1
c0015e40:	a3 64 91 02 c0       	mov    ds:0xc0029164,eax
c0015e45:	75 09                	jne    c0015e50 <terminateTask(int)+0xa4>
c0015e47:	83 3d 60 91 02 c0 00 	cmp    DWORD PTR ds:0xc0029160,0x0
c0015e4e:	75 3c                	jne    c0015e8c <terminateTask(int)+0xe0>
c0015e50:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0015e55:	83 e8 01             	sub    eax,0x1
c0015e58:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0015e5d:	75 01                	jne    c0015e60 <terminateTask(int)+0xb4>
c0015e5f:	fb                   	sti    
c0015e60:	fa                   	cli    
c0015e61:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0015e66:	83 c0 01             	add    eax,0x1
c0015e69:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0015e6e:	66 90                	xchg   ax,ax
c0015e70:	e8 97 f5 ff ff       	call   c001540c <schedule()>
c0015e75:	eb d9                	jmp    c0015e50 <terminateTask(int)+0xa4>
c0015e77:	90                   	nop
c0015e78:	83 ec 0c             	sub    esp,0xc
c0015e7b:	68 15 1b 02 c0       	push   0xc0021b15
c0015e80:	e8 b4 4a ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0015e85:	83 c4 10             	add    esp,0x10
c0015e88:	eb 9e                	jmp    c0015e28 <terminateTask(int)+0x7c>
c0015e8a:	66 90                	xchg   ax,ax
c0015e8c:	c7 05 60 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029160,0x0
c0015e96:	eb d8                	jmp    c0015e70 <terminateTask(int)+0xc4>

c0015e98 <Thr::terminateFromIRQ(int)>:
c0015e98:	83 ec 18             	sub    esp,0x18
c0015e9b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015e9f:	50                   	push   eax
c0015ea0:	e8 07 ff ff ff       	call   c0015dac <terminateTask(int)>
c0015ea5:	90                   	nop
c0015ea6:	66 90                	xchg   ax,ax

c0015ea8 <Semaphore::release()>:
c0015ea8:	83 ec 0c             	sub    esp,0xc
c0015eab:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015eaf:	fa                   	cli    
c0015eb0:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0015eb5:	83 c0 01             	add    eax,0x1
c0015eb8:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0015ebd:	a1 64 91 02 c0       	mov    eax,ds:0xc0029164
c0015ec2:	8d 48 01             	lea    ecx,[eax+0x1]
c0015ec5:	89 0d 64 91 02 c0    	mov    DWORD PTR ds:0xc0029164,ecx
c0015ecb:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015ece:	85 c9                	test   ecx,ecx
c0015ed0:	74 42                	je     c0015f14 <Semaphore::release()+0x6c>
c0015ed2:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0015ed5:	83 ec 0c             	sub    esp,0xc
c0015ed8:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015edb:	51                   	push   ecx
c0015edc:	e8 43 fa ff ff       	call   c0015924 <unblockTask(ThreadControlBlock*)>
c0015ee1:	a1 64 91 02 c0       	mov    eax,ds:0xc0029164
c0015ee6:	83 c4 10             	add    esp,0x10
c0015ee9:	83 e8 01             	sub    eax,0x1
c0015eec:	a3 64 91 02 c0       	mov    ds:0xc0029164,eax
c0015ef1:	85 c0                	test   eax,eax
c0015ef3:	75 0b                	jne    c0015f00 <Semaphore::release()+0x58>
c0015ef5:	a1 60 91 02 c0       	mov    eax,ds:0xc0029160
c0015efa:	85 c0                	test   eax,eax
c0015efc:	75 22                	jne    c0015f20 <Semaphore::release()+0x78>
c0015efe:	66 90                	xchg   ax,ax
c0015f00:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0015f05:	83 e8 01             	sub    eax,0x1
c0015f08:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0015f0d:	75 01                	jne    c0015f10 <Semaphore::release()+0x68>
c0015f0f:	fb                   	sti    
c0015f10:	83 c4 0c             	add    esp,0xc
c0015f13:	c3                   	ret    
c0015f14:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0015f17:	83 e9 01             	sub    ecx,0x1
c0015f1a:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0015f1d:	eb cd                	jmp    c0015eec <Semaphore::release()+0x44>
c0015f1f:	90                   	nop
c0015f20:	c7 05 60 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029160,0x0
c0015f2a:	e8 dd f4 ff ff       	call   c001540c <schedule()>
c0015f2f:	eb cf                	jmp    c0015f00 <Semaphore::release()+0x58>
c0015f31:	8d 76 00             	lea    esi,[esi+0x0]

c0015f34 <__static_initialization_and_destruction_0(int, int)>:
c0015f34:	83 ec 0c             	sub    esp,0xc
c0015f37:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0015f3c:	0f 85 8e 00 00 00    	jne    c0015fd0 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015f42:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0015f4a:	0f 85 80 00 00 00    	jne    c0015fd0 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015f50:	83 ec 0c             	sub    esp,0xc
c0015f53:	68 84 91 02 c0       	push   0xc0029184
c0015f58:	e8 17 94 00 00       	call   c001f374 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015f5d:	83 c4 10             	add    esp,0x10
c0015f60:	83 ec 04             	sub    esp,0x4
c0015f63:	68 e4 27 02 c0       	push   0xc00227e4
c0015f68:	68 84 91 02 c0       	push   0xc0029184
c0015f6d:	68 24 f3 01 c0       	push   0xc001f324
c0015f72:	e8 45 48 ff ff       	call   c000a7bc <__cxa_atexit>
c0015f77:	83 c4 10             	add    esp,0x10
c0015f7a:	83 ec 0c             	sub    esp,0xc
c0015f7d:	68 78 91 02 c0       	push   0xc0029178
c0015f82:	e8 ed 93 00 00       	call   c001f374 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015f87:	83 c4 10             	add    esp,0x10
c0015f8a:	83 ec 04             	sub    esp,0x4
c0015f8d:	68 e4 27 02 c0       	push   0xc00227e4
c0015f92:	68 78 91 02 c0       	push   0xc0029178
c0015f97:	68 24 f3 01 c0       	push   0xc001f324
c0015f9c:	e8 1b 48 ff ff       	call   c000a7bc <__cxa_atexit>
c0015fa1:	83 c4 10             	add    esp,0x10
c0015fa4:	83 ec 0c             	sub    esp,0xc
c0015fa7:	68 6c 91 02 c0       	push   0xc002916c
c0015fac:	e8 c3 93 00 00       	call   c001f374 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015fb1:	83 c4 10             	add    esp,0x10
c0015fb4:	83 ec 04             	sub    esp,0x4
c0015fb7:	68 e4 27 02 c0       	push   0xc00227e4
c0015fbc:	68 6c 91 02 c0       	push   0xc002916c
c0015fc1:	68 24 f3 01 c0       	push   0xc001f324
c0015fc6:	e8 f1 47 ff ff       	call   c000a7bc <__cxa_atexit>
c0015fcb:	83 c4 10             	add    esp,0x10
c0015fce:	66 90                	xchg   ax,ax
c0015fd0:	90                   	nop
c0015fd1:	83 c4 0c             	add    esp,0xc
c0015fd4:	c3                   	ret    
c0015fd5:	8d 76 00             	lea    esi,[esi+0x0]

c0015fd8 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0015fd8:	83 ec 0c             	sub    esp,0xc
c0015fdb:	83 ec 08             	sub    esp,0x8
c0015fde:	68 ff ff 00 00       	push   0xffff
c0015fe3:	6a 01                	push   0x1
c0015fe5:	e8 4a ff ff ff       	call   c0015f34 <__static_initialization_and_destruction_0(int, int)>
c0015fea:	83 c4 10             	add    esp,0x10
c0015fed:	83 c4 0c             	add    esp,0xc
c0015ff0:	c3                   	ret    

c0015ff1 <Vm::inbv(unsigned short)>:
c0015ff1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015ff5:	66 81 fa fe fe       	cmp    dx,0xfefe
c0015ffa:	75 06                	jne    c0016002 <Vm::inbv(unsigned short)+0x11>
c0015ffc:	a0 cc 91 02 c0       	mov    al,ds:0xc00291cc
c0016001:	c3                   	ret    
c0016002:	ec                   	in     al,dx
c0016003:	c3                   	ret    

c0016004 <Vm::outbv(unsigned short, unsigned char)>:
c0016004:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016008:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001600c:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016011:	75 25                	jne    c0016038 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0016013:	8b 0d cc 91 02 c0    	mov    ecx,DWORD PTR ds:0xc00291cc
c0016019:	8d 51 01             	lea    edx,[ecx+0x1]
c001601c:	88 81 e0 91 02 c0    	mov    BYTE PTR [ecx-0x3ffd6e20],al
c0016022:	89 15 cc 91 02 c0    	mov    DWORD PTR ds:0xc00291cc,edx
c0016028:	83 fa 20             	cmp    edx,0x20
c001602b:	75 0c                	jne    c0016039 <Vm::outbv(unsigned short, unsigned char)+0x35>
c001602d:	c7 05 cc 91 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00291cc,0x1f
c0016037:	c3                   	ret    
c0016038:	ee                   	out    dx,al
c0016039:	c3                   	ret    

c001603a <Vm::realToLinear(unsigned short, unsigned short)>:
c001603a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001603f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016044:	c1 e0 04             	shl    eax,0x4
c0016047:	01 d0                	add    eax,edx
c0016049:	c3                   	ret    

c001604a <Vm::getSegment(unsigned int)>:
c001604a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001604e:	c1 e8 10             	shr    eax,0x10
c0016051:	c3                   	ret    

c0016052 <Vm::getOffset(unsigned int)>:
c0016052:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016056:	c3                   	ret    

c0016057 <Vm::mainloop2()>:
c0016057:	83 ec 18             	sub    esp,0x18
c001605a:	fa                   	cli    
c001605b:	ff 05 68 91 02 c0    	inc    DWORD PTR ds:0xc0029168
c0016061:	6a 02                	push   0x2
c0016063:	c6 05 c5 91 02 c0 01 	mov    BYTE PTR ds:0xc00291c5,0x1
c001606a:	e8 89 f5 ff ff       	call   c00155f8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001606f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016074:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0016078:	52                   	push   edx
c0016079:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c001607d:	52                   	push   edx
c001607e:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0016082:	52                   	push   edx
c0016083:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0016087:	50                   	push   eax
c0016088:	e8 82 a1 fe ff       	call   c000020f <goToVM86>
c001608d:	83 c4 2c             	add    esp,0x2c
c0016090:	c3                   	ret    

c0016091 <Vm::mainVm8086Loop(void*)>:
c0016091:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0016096:	48                   	dec    eax
c0016097:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c001609c:	75 01                	jne    c001609f <Vm::mainVm8086Loop(void*)+0xe>
c001609e:	fb                   	sti    
c001609f:	eb b6                	jmp    c0016057 <Vm::mainloop2()>

c00160a1 <Vm::mainloop3(unsigned long)>:
c00160a1:	83 ec 18             	sub    esp,0x18
c00160a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00160a8:	fa                   	cli    
c00160a9:	ff 05 68 91 02 c0    	inc    DWORD PTR ds:0xc0029168
c00160af:	6a 02                	push   0x2
c00160b1:	c6 05 c4 91 02 c0 01 	mov    BYTE PTR ds:0xc00291c4,0x1
c00160b8:	a3 c0 91 02 c0       	mov    ds:0xc00291c0,eax
c00160bd:	e8 36 f5 ff ff       	call   c00155f8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00160c2:	83 c4 1c             	add    esp,0x1c
c00160c5:	eb 90                	jmp    c0016057 <Vm::mainloop2()>

c00160c7 <Vm::initialise8086()>:
c00160c7:	83 ec 0c             	sub    esp,0xc
c00160ca:	68 80 00 00 00       	push   0x80
c00160cf:	6a 00                	push   0x0
c00160d1:	68 91 60 01 c0       	push   0xc0016091
c00160d6:	ff 35 90 91 02 c0    	push   DWORD PTR ds:0xc0029190
c00160dc:	e8 db f0 ff ff       	call   c00151bc <Process::createThread(void (*)(void*), void*, int)>
c00160e1:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c00160e8:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c00160ed:	68 00 01 00 00       	push   0x100
c00160f2:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c00160f7:	6a 00                	push   0x0
c00160f9:	6a 00                	push   0x0
c00160fb:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016101:	e8 08 3e ff ff       	call   c0009f0e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016106:	83 c4 2c             	add    esp,0x2c
c0016109:	c3                   	ret    

c001610a <Vm::finish8086()>:
c001610a:	53                   	push   ebx
c001610b:	83 ec 08             	sub    esp,0x8
c001610e:	fa                   	cli    
c001610f:	ff 05 68 91 02 c0    	inc    DWORD PTR ds:0xc0029168
c0016115:	80 3d c4 91 02 c0 00 	cmp    BYTE PTR ds:0xc00291c4,0x0
c001611c:	75 15                	jne    c0016133 <Vm::finish8086()+0x29>
c001611e:	e8 e9 f2 ff ff       	call   c001540c <schedule()>
c0016123:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0016128:	48                   	dec    eax
c0016129:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c001612e:	75 de                	jne    c001610e <Vm::finish8086()+0x4>
c0016130:	fb                   	sti    
c0016131:	eb db                	jmp    c001610e <Vm::finish8086()+0x4>
c0016133:	83 ec 0c             	sub    esp,0xc
c0016136:	8b 1d c0 91 02 c0    	mov    ebx,DWORD PTR ds:0xc00291c0
c001613c:	ff 35 c8 91 02 c0    	push   DWORD PTR ds:0xc00291c8
c0016142:	c6 05 c4 91 02 c0 00 	mov    BYTE PTR ds:0xc00291c4,0x0
c0016149:	e8 d6 f7 ff ff       	call   c0015924 <unblockTask(ThreadControlBlock*)>
c001614e:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0016153:	83 c4 10             	add    esp,0x10
c0016156:	8d 50 ff             	lea    edx,[eax-0x1]
c0016159:	89 15 68 91 02 c0    	mov    DWORD PTR ds:0xc0029168,edx
c001615f:	85 d2                	test   edx,edx
c0016161:	75 01                	jne    c0016164 <Vm::finish8086()+0x5a>
c0016163:	fb                   	sti    
c0016164:	89 d8                	mov    eax,ebx
c0016166:	83 c4 08             	add    esp,0x8
c0016169:	5b                   	pop    ebx
c001616a:	c3                   	ret    

c001616b <Vm::getOutput8086(unsigned char*)>:
c001616b:	57                   	push   edi
c001616c:	8b 0d cc 91 02 c0    	mov    ecx,DWORD PTR ds:0xc00291cc
c0016172:	56                   	push   esi
c0016173:	be e0 91 02 c0       	mov    esi,0xc00291e0
c0016178:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001617c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001617e:	a1 cc 91 02 c0       	mov    eax,ds:0xc00291cc
c0016183:	5e                   	pop    esi
c0016184:	c7 05 cc 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00291cc,0x0
c001618e:	5f                   	pop    edi
c001618f:	c3                   	ret    

c0016190 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016190:	55                   	push   ebp
c0016191:	57                   	push   edi
c0016192:	56                   	push   esi
c0016193:	53                   	push   ebx
c0016194:	83 ec 0c             	sub    esp,0xc
c0016197:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001619b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001619f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00161a3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00161a7:	fa                   	cli    
c00161a8:	ff 05 68 91 02 c0    	inc    DWORD PTR ds:0xc0029168
c00161ae:	80 3d c5 91 02 c0 00 	cmp    BYTE PTR ds:0xc00291c5,0x0
c00161b5:	75 15                	jne    c00161cc <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c00161b7:	e8 50 f2 ff ff       	call   c001540c <schedule()>
c00161bc:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c00161c1:	48                   	dec    eax
c00161c2:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c00161c7:	75 de                	jne    c00161a7 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00161c9:	fb                   	sti    
c00161ca:	eb db                	jmp    c00161a7 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00161cc:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c00161d1:	c7 05 cc 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00291cc,0x0
c00161db:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c00161df:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c00161e3:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00161e7:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00161eb:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00161ef:	0f b7 ff             	movzx  edi,di
c00161f2:	0f b7 f6             	movzx  esi,si
c00161f5:	50                   	push   eax
c00161f6:	6a 20                	push   0x20
c00161f8:	6a 00                	push   0x0
c00161fa:	68 e0 91 02 c0       	push   0xc00291e0
c00161ff:	e8 ec a2 fe ff       	call   c00004f0 <memset>
c0016204:	5a                   	pop    edx
c0016205:	59                   	pop    ecx
c0016206:	57                   	push   edi
c0016207:	56                   	push   esi
c0016208:	e8 2d fe ff ff       	call   c001603a <Vm::realToLinear(unsigned short, unsigned short)>
c001620d:	83 c4 10             	add    esp,0x10
c0016210:	89 c7                	mov    edi,eax
c0016212:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016216:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001621a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001621c:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0016221:	c6 05 c5 91 02 c0 00 	mov    BYTE PTR ds:0xc00291c5,0x0
c0016228:	48                   	dec    eax
c0016229:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c001622e:	75 01                	jne    c0016231 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0016230:	fb                   	sti    
c0016231:	83 ec 0c             	sub    esp,0xc
c0016234:	ff 35 c8 91 02 c0    	push   DWORD PTR ds:0xc00291c8
c001623a:	e8 e5 f6 ff ff       	call   c0015924 <unblockTask(ThreadControlBlock*)>
c001623f:	83 c4 1c             	add    esp,0x1c
c0016242:	b0 01                	mov    al,0x1
c0016244:	5b                   	pop    ebx
c0016245:	5e                   	pop    esi
c0016246:	5f                   	pop    edi
c0016247:	5d                   	pop    ebp
c0016248:	c3                   	ret    

c0016249 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016249:	55                   	push   ebp
c001624a:	57                   	push   edi
c001624b:	56                   	push   esi
c001624c:	53                   	push   ebx
c001624d:	83 ec 34             	sub    esp,0x34
c0016250:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0016254:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0016258:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001625c:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0016260:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016264:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016268:	68 44 1c 02 c0       	push   0xc0021c44
c001626d:	e8 c7 46 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0016272:	83 c4 10             	add    esp,0x10
c0016275:	fa                   	cli    
c0016276:	ff 05 68 91 02 c0    	inc    DWORD PTR ds:0xc0029168
c001627c:	8a 1d c5 91 02 c0    	mov    bl,BYTE PTR ds:0xc00291c5
c0016282:	84 db                	test   bl,bl
c0016284:	75 15                	jne    c001629b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c0016286:	e8 81 f1 ff ff       	call   c001540c <schedule()>
c001628b:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0016290:	48                   	dec    eax
c0016291:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0016296:	75 dd                	jne    c0016275 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016298:	fb                   	sti    
c0016299:	eb da                	jmp    c0016275 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c001629b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001629f:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c00162a4:	c7 05 cc 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00291cc,0x0
c00162ae:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c00162b2:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00162b6:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c00162ba:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c00162be:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00162c2:	50                   	push   eax
c00162c3:	6a 20                	push   0x20
c00162c5:	6a 00                	push   0x0
c00162c7:	68 e0 91 02 c0       	push   0xc00291e0
c00162cc:	e8 1f a2 fe ff       	call   c00004f0 <memset>
c00162d1:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00162d8:	e8 d1 17 ff ff       	call   c0007aae <malloc>
c00162dd:	83 c4 0c             	add    esp,0xc
c00162e0:	89 c5                	mov    ebp,eax
c00162e2:	ff 35 90 91 02 c0    	push   DWORD PTR ds:0xc0029190
c00162e8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00162ec:	50                   	push   eax
c00162ed:	e8 9e 4e ff ff       	call   c000b190 <File::File(char const*, Process*)>
c00162f2:	83 c4 10             	add    esp,0x10
c00162f5:	85 ed                	test   ebp,ebp
c00162f7:	75 0a                	jne    c0016303 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c00162f9:	83 ec 0c             	sub    esp,0xc
c00162fc:	68 66 1c 02 c0       	push   0xc0021c66
c0016301:	eb 2b                	jmp    c001632e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c0016303:	50                   	push   eax
c0016304:	8d 44 24 17          	lea    eax,[esp+0x17]
c0016308:	50                   	push   eax
c0016309:	8d 44 24 20          	lea    eax,[esp+0x20]
c001630d:	50                   	push   eax
c001630e:	55                   	push   ebp
c001630f:	e8 e4 51 ff ff       	call   c000b4f8 <File::stat(unsigned long long*, bool*)>
c0016314:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0016318:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001631c:	83 c4 10             	add    esp,0x10
c001631f:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0016324:	74 27                	je     c001634d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c0016326:	83 ec 0c             	sub    esp,0xc
c0016329:	68 7a 1c 02 c0       	push   0xc0021c7a
c001632e:	e8 68 a8 ff ff       	call   c0010b9b <KePanic(char const*)>
c0016333:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0016338:	83 c4 10             	add    esp,0x10
c001633b:	48                   	dec    eax
c001633c:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0016341:	85 c0                	test   eax,eax
c0016343:	75 01                	jne    c0016346 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016345:	fb                   	sti    
c0016346:	31 db                	xor    ebx,ebx
c0016348:	e9 90 00 00 00       	jmp    c00163dd <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c001634d:	51                   	push   ecx
c001634e:	51                   	push   ecx
c001634f:	6a 01                	push   0x1
c0016351:	55                   	push   ebp
c0016352:	e8 f5 4e ff ff       	call   c000b24c <File::open(FileOpenMode)>
c0016357:	83 c4 10             	add    esp,0x10
c001635a:	85 c0                	test   eax,eax
c001635c:	74 26                	je     c0016384 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c001635e:	83 ec 0c             	sub    esp,0xc
c0016361:	68 93 1c 02 c0       	push   0xc0021c93
c0016366:	e8 30 a8 ff ff       	call   c0010b9b <KePanic(char const*)>
c001636b:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0016370:	83 c4 10             	add    esp,0x10
c0016373:	48                   	dec    eax
c0016374:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0016379:	85 c0                	test   eax,eax
c001637b:	75 c9                	jne    c0016346 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c001637d:	fb                   	sti    
c001637e:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0016382:	eb 59                	jmp    c00163dd <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016384:	0f b7 ff             	movzx  edi,di
c0016387:	50                   	push   eax
c0016388:	0f b7 f6             	movzx  esi,si
c001638b:	50                   	push   eax
c001638c:	57                   	push   edi
c001638d:	56                   	push   esi
c001638e:	e8 a7 fc ff ff       	call   c001603a <Vm::realToLinear(unsigned short, unsigned short)>
c0016393:	5a                   	pop    edx
c0016394:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0016397:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001639b:	51                   	push   ecx
c001639c:	50                   	push   eax
c001639d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00163a1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00163a5:	55                   	push   ebp
c00163a6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00163a9:	83 c4 14             	add    esp,0x14
c00163ac:	55                   	push   ebp
c00163ad:	e8 f8 4e ff ff       	call   c000b2aa <File::close()>
c00163b2:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c00163b7:	83 c4 10             	add    esp,0x10
c00163ba:	48                   	dec    eax
c00163bb:	c6 05 c5 91 02 c0 00 	mov    BYTE PTR ds:0xc00291c5,0x0
c00163c2:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c00163c7:	85 c0                	test   eax,eax
c00163c9:	75 01                	jne    c00163cc <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c00163cb:	fb                   	sti    
c00163cc:	83 ec 0c             	sub    esp,0xc
c00163cf:	ff 35 c8 91 02 c0    	push   DWORD PTR ds:0xc00291c8
c00163d5:	e8 4a f5 ff ff       	call   c0015924 <unblockTask(ThreadControlBlock*)>
c00163da:	83 c4 10             	add    esp,0x10
c00163dd:	83 c4 2c             	add    esp,0x2c
c00163e0:	88 d8                	mov    al,bl
c00163e2:	5b                   	pop    ebx
c00163e3:	5e                   	pop    esi
c00163e4:	5f                   	pop    edi
c00163e5:	5d                   	pop    ebp
c00163e6:	c3                   	ret    

c00163e7 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00163e7:	57                   	push   edi
c00163e8:	56                   	push   esi
c00163e9:	53                   	push   ebx
c00163ea:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00163ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00163f2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00163f6:	83 e8 06             	sub    eax,0x6
c00163f9:	0f b7 c0             	movzx  eax,ax
c00163fc:	50                   	push   eax
c00163fd:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0016402:	50                   	push   eax
c0016403:	e8 32 fc ff ff       	call   c001603a <Vm::realToLinear(unsigned short, unsigned short)>
c0016408:	5a                   	pop    edx
c0016409:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c001640c:	59                   	pop    ecx
c001640d:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0016410:	8d 51 fa             	lea    edx,[ecx-0x6]
c0016413:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016419:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c001641c:	8d 56 02             	lea    edx,[esi+0x2]
c001641f:	66 89 10             	mov    WORD PTR [eax],dx
c0016422:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0016426:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001642a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001642d:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0016431:	0f b6 f1             	movzx  esi,cl
c0016434:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016438:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001643e:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0016442:	0f b6 d5             	movzx  edx,ch
c0016445:	74 0a                	je     c0016451 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6a>
c0016447:	c1 e2 08             	shl    edx,0x8
c001644a:	09 f2                	or     edx,esi
c001644c:	80 ce 02             	or     dh,0x2
c001644f:	eb 08                	jmp    c0016459 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x72>
c0016451:	c1 e2 08             	shl    edx,0x8
c0016454:	09 f2                	or     edx,esi
c0016456:	80 e6 fd             	and    dh,0xfd
c0016459:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001645d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016462:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016466:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c001646e:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0016471:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0016479:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001647c:	5b                   	pop    ebx
c001647d:	5e                   	pop    esi
c001647e:	5f                   	pop    edi
c001647f:	c3                   	ret    

c0016480 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0016480:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016485:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001648a:	c1 e0 04             	shl    eax,0x4
c001648d:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0016490:	c3                   	ret    

c0016491 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0016491:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016496:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001649b:	c1 e0 04             	shl    eax,0x4
c001649e:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00164a2:	c3                   	ret    

c00164a3 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c00164a3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00164a8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00164ad:	c1 e0 04             	shl    eax,0x4
c00164b0:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00164b3:	c3                   	ret    

c00164b4 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00164b4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00164b9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00164be:	c1 e0 04             	shl    eax,0x4
c00164c1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00164c5:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00164c8:	c3                   	ret    

c00164c9 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00164c9:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00164ce:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00164d3:	c1 e0 04             	shl    eax,0x4
c00164d6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00164da:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00164de:	c3                   	ret    

c00164df <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00164df:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00164e4:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00164e9:	c1 e0 04             	shl    eax,0x4
c00164ec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00164f0:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00164f3:	c3                   	ret    

c00164f4 <Vm::faultHandler(regs*)>:
c00164f4:	55                   	push   ebp
c00164f5:	57                   	push   edi
c00164f6:	56                   	push   esi
c00164f7:	53                   	push   ebx
c00164f8:	83 ec 2c             	sub    esp,0x2c
c00164fb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00164ff:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016502:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0016506:	0f b7 f8             	movzx  edi,ax
c0016509:	52                   	push   edx
c001650a:	0f b7 c0             	movzx  eax,ax
c001650d:	50                   	push   eax
c001650e:	e8 27 fb ff ff       	call   c001603a <Vm::realToLinear(unsigned short, unsigned short)>
c0016513:	5a                   	pop    edx
c0016514:	59                   	pop    ecx
c0016515:	89 c1                	mov    ecx,eax
c0016517:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001651a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001651e:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0016523:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016527:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c001652a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001652e:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0016533:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016537:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001653b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001653f:	e8 f6 fa ff ff       	call   c001603a <Vm::realToLinear(unsigned short, unsigned short)>
c0016544:	5e                   	pop    esi
c0016545:	be 06 00 00 00       	mov    esi,0x6
c001654a:	5d                   	pop    ebp
c001654b:	31 ed                	xor    ebp,ebp
c001654d:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0016552:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0016555:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c001655b:	0f 84 74 02 00 00    	je     c00167d5 <Vm::faultHandler(regs*)+0x2e1>
c0016561:	0f 87 94 00 00 00    	ja     c00165fb <Vm::faultHandler(regs*)+0x107>
c0016567:	83 fa 66             	cmp    edx,0x66
c001656a:	0f 84 e2 01 00 00    	je     c0016752 <Vm::faultHandler(regs*)+0x25e>
c0016570:	77 47                	ja     c00165b9 <Vm::faultHandler(regs*)+0xc5>
c0016572:	83 fa 36             	cmp    edx,0x36
c0016575:	0f 84 ca 01 00 00    	je     c0016745 <Vm::faultHandler(regs*)+0x251>
c001657b:	77 1a                	ja     c0016597 <Vm::faultHandler(regs*)+0xa3>
c001657d:	83 fa 26             	cmp    edx,0x26
c0016580:	0f 84 98 01 00 00    	je     c001671e <Vm::faultHandler(regs*)+0x22a>
c0016586:	83 fa 2e             	cmp    edx,0x2e
c0016589:	0f 85 21 06 00 00    	jne    c0016bb0 <Vm::faultHandler(regs*)+0x6bc>
c001658f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016592:	31 f6                	xor    esi,esi
c0016594:	41                   	inc    ecx
c0016595:	eb bb                	jmp    c0016552 <Vm::faultHandler(regs*)+0x5e>
c0016597:	83 fa 64             	cmp    edx,0x64
c001659a:	0f 84 8b 01 00 00    	je     c001672b <Vm::faultHandler(regs*)+0x237>
c00165a0:	0f 87 92 01 00 00    	ja     c0016738 <Vm::faultHandler(regs*)+0x244>
c00165a6:	83 fa 3e             	cmp    edx,0x3e
c00165a9:	0f 85 01 06 00 00    	jne    c0016bb0 <Vm::faultHandler(regs*)+0x6bc>
c00165af:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00165b2:	be 01 00 00 00       	mov    esi,0x1
c00165b7:	eb db                	jmp    c0016594 <Vm::faultHandler(regs*)+0xa0>
c00165b9:	83 fa 6d             	cmp    edx,0x6d
c00165bc:	0f 84 34 03 00 00    	je     c00168f6 <Vm::faultHandler(regs*)+0x402>
c00165c2:	77 17                	ja     c00165db <Vm::faultHandler(regs*)+0xe7>
c00165c4:	83 fa 67             	cmp    edx,0x67
c00165c7:	0f 84 92 01 00 00    	je     c001675f <Vm::faultHandler(regs*)+0x26b>
c00165cd:	83 fa 6c             	cmp    edx,0x6c
c00165d0:	0f 84 b1 02 00 00    	je     c0016887 <Vm::faultHandler(regs*)+0x393>
c00165d6:	e9 d5 05 00 00       	jmp    c0016bb0 <Vm::faultHandler(regs*)+0x6bc>
c00165db:	83 fa 6f             	cmp    edx,0x6f
c00165de:	0f 84 3d 04 00 00    	je     c0016a21 <Vm::faultHandler(regs*)+0x52d>
c00165e4:	0f 82 9f 03 00 00    	jb     c0016989 <Vm::faultHandler(regs*)+0x495>
c00165ea:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c00165f0:	0f 84 76 01 00 00    	je     c001676c <Vm::faultHandler(regs*)+0x278>
c00165f6:	e9 b5 05 00 00       	jmp    c0016bb0 <Vm::faultHandler(regs*)+0x6bc>
c00165fb:	81 fa ec 00 00 00    	cmp    edx,0xec
c0016601:	0f 84 51 05 00 00    	je     c0016b58 <Vm::faultHandler(regs*)+0x664>
c0016607:	0f 87 a9 00 00 00    	ja     c00166b6 <Vm::faultHandler(regs*)+0x1c2>
c001660d:	81 fa e4 00 00 00    	cmp    edx,0xe4
c0016613:	0f 84 d0 04 00 00    	je     c0016ae9 <Vm::faultHandler(regs*)+0x5f5>
c0016619:	77 78                	ja     c0016693 <Vm::faultHandler(regs*)+0x19f>
c001661b:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0016621:	0f 84 0e 02 00 00    	je     c0016835 <Vm::faultHandler(regs*)+0x341>
c0016627:	81 fa cf 00 00 00    	cmp    edx,0xcf
c001662d:	0f 85 7d 05 00 00    	jne    c0016bb0 <Vm::faultHandler(regs*)+0x6bc>
c0016633:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0016637:	89 d1                	mov    ecx,edx
c0016639:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c001663c:	c1 e1 08             	shl    ecx,0x8
c001663f:	09 ca                	or     edx,ecx
c0016641:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0016644:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0016648:	89 d1                	mov    ecx,edx
c001664a:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c001664e:	c1 e1 08             	shl    ecx,0x8
c0016651:	09 ca                	or     edx,ecx
c0016653:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0016656:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c001665a:	89 d1                	mov    ecx,edx
c001665c:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0016660:	c1 e1 08             	shl    ecx,0x8
c0016663:	09 ca                	or     edx,ecx
c0016665:	81 ca 00 02 02 00    	or     edx,0x20200
c001666b:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001666e:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c0016672:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016678:	d1 e8                	shr    eax,1
c001667a:	83 e0 01             	and    eax,0x1
c001667d:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016680:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016683:	83 c0 06             	add    eax,0x6
c0016686:	25 ff ff 00 00       	and    eax,0xffff
c001668b:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001668e:	e9 19 05 00 00       	jmp    c0016bac <Vm::faultHandler(regs*)+0x6b8>
c0016693:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0016699:	0f 84 8f 04 00 00    	je     c0016b2e <Vm::faultHandler(regs*)+0x63a>
c001669f:	0f 82 60 04 00 00    	jb     c0016b05 <Vm::faultHandler(regs*)+0x611>
c00166a5:	81 fa e7 00 00 00    	cmp    edx,0xe7
c00166ab:	0f 84 94 04 00 00    	je     c0016b45 <Vm::faultHandler(regs*)+0x651>
c00166b1:	e9 fa 04 00 00       	jmp    c0016bb0 <Vm::faultHandler(regs*)+0x6bc>
c00166b6:	81 fa ef 00 00 00    	cmp    edx,0xef
c00166bc:	0f 84 d7 04 00 00    	je     c0016b99 <Vm::faultHandler(regs*)+0x6a5>
c00166c2:	77 2e                	ja     c00166f2 <Vm::faultHandler(regs*)+0x1fe>
c00166c4:	81 fa ed 00 00 00    	cmp    edx,0xed
c00166ca:	0f 84 a4 04 00 00    	je     c0016b74 <Vm::faultHandler(regs*)+0x680>
c00166d0:	81 fa ee 00 00 00    	cmp    edx,0xee
c00166d6:	0f 85 d4 04 00 00    	jne    c0016bb0 <Vm::faultHandler(regs*)+0x6bc>
c00166dc:	50                   	push   eax
c00166dd:	50                   	push   eax
c00166de:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00166e2:	50                   	push   eax
c00166e3:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00166e7:	50                   	push   eax
c00166e8:	e8 17 f9 ff ff       	call   c0016004 <Vm::outbv(unsigned short, unsigned char)>
c00166ed:	e9 9f 04 00 00       	jmp    c0016b91 <Vm::faultHandler(regs*)+0x69d>
c00166f2:	81 fa fa 00 00 00    	cmp    edx,0xfa
c00166f8:	0f 84 6d 01 00 00    	je     c001686b <Vm::faultHandler(regs*)+0x377>
c00166fe:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0016704:	0f 84 6f 01 00 00    	je     c0016879 <Vm::faultHandler(regs*)+0x385>
c001670a:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0016710:	0f 85 9a 04 00 00    	jne    c0016bb0 <Vm::faultHandler(regs*)+0x6bc>
c0016716:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016719:	e9 76 fe ff ff       	jmp    c0016594 <Vm::faultHandler(regs*)+0xa0>
c001671e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016721:	be 02 00 00 00       	mov    esi,0x2
c0016726:	e9 69 fe ff ff       	jmp    c0016594 <Vm::faultHandler(regs*)+0xa0>
c001672b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001672e:	be 03 00 00 00       	mov    esi,0x3
c0016733:	e9 5c fe ff ff       	jmp    c0016594 <Vm::faultHandler(regs*)+0xa0>
c0016738:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001673b:	be 04 00 00 00       	mov    esi,0x4
c0016740:	e9 4f fe ff ff       	jmp    c0016594 <Vm::faultHandler(regs*)+0xa0>
c0016745:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016748:	be 05 00 00 00       	mov    esi,0x5
c001674d:	e9 42 fe ff ff       	jmp    c0016594 <Vm::faultHandler(regs*)+0xa0>
c0016752:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016755:	bd 01 00 00 00       	mov    ebp,0x1
c001675a:	e9 35 fe ff ff       	jmp    c0016594 <Vm::faultHandler(regs*)+0xa0>
c001675f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016762:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0016767:	e9 28 fe ff ff       	jmp    c0016594 <Vm::faultHandler(regs*)+0xa0>
c001676c:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001676f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016773:	83 e5 01             	and    ebp,0x1
c0016776:	74 30                	je     c00167a8 <Vm::faultHandler(regs*)+0x2b4>
c0016778:	83 e9 04             	sub    ecx,0x4
c001677b:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016781:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016787:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001678a:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001678d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016793:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016797:	0f 84 0c 04 00 00    	je     c0016ba9 <Vm::faultHandler(regs*)+0x6b5>
c001679d:	80 ce 02             	or     dh,0x2
c00167a0:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00167a3:	e9 01 04 00 00       	jmp    c0016ba9 <Vm::faultHandler(regs*)+0x6b5>
c00167a8:	83 e9 02             	sub    ecx,0x2
c00167ab:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00167b1:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00167b4:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00167b8:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00167be:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00167c2:	74 05                	je     c00167c9 <Vm::faultHandler(regs*)+0x2d5>
c00167c4:	80 ce 02             	or     dh,0x2
c00167c7:	eb 03                	jmp    c00167cc <Vm::faultHandler(regs*)+0x2d8>
c00167c9:	80 e6 fd             	and    dh,0xfd
c00167cc:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00167d0:	e9 d4 03 00 00       	jmp    c0016ba9 <Vm::faultHandler(regs*)+0x6b5>
c00167d5:	83 e5 01             	and    ebp,0x1
c00167d8:	74 2a                	je     c0016804 <Vm::faultHandler(regs*)+0x310>
c00167da:	8b 10                	mov    edx,DWORD PTR [eax]
c00167dc:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00167e2:	81 ca 00 02 02 00    	or     edx,0x20200
c00167e8:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00167eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00167ed:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00167f3:	c1 e8 09             	shr    eax,0x9
c00167f6:	83 e0 01             	and    eax,0x1
c00167f9:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00167fc:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00167ff:	83 c0 04             	add    eax,0x4
c0016802:	eb 24                	jmp    c0016828 <Vm::faultHandler(regs*)+0x334>
c0016804:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0016807:	81 ca 00 02 02 00    	or     edx,0x20200
c001680d:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016810:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0016813:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016819:	c1 e8 09             	shr    eax,0x9
c001681c:	83 e0 01             	and    eax,0x1
c001681f:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016822:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016825:	83 c0 02             	add    eax,0x2
c0016828:	25 ff ff 00 00       	and    eax,0xffff
c001682d:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016830:	e9 74 03 00 00       	jmp    c0016ba9 <Vm::faultHandler(regs*)+0x6b5>
c0016835:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016839:	3d ee 00 00 00       	cmp    eax,0xee
c001683e:	75 10                	jne    c0016850 <Vm::faultHandler(regs*)+0x35c>
c0016840:	83 ec 0c             	sub    esp,0xc
c0016843:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0016846:	e8 56 f8 ff ff       	call   c00160a1 <Vm::mainloop3(unsigned long)>
c001684b:	e9 44 03 00 00       	jmp    c0016b94 <Vm::faultHandler(regs*)+0x6a0>
c0016850:	83 ec 0c             	sub    esp,0xc
c0016853:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016857:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001685b:	51                   	push   ecx
c001685c:	50                   	push   eax
c001685d:	53                   	push   ebx
c001685e:	e8 84 fb ff ff       	call   c00163e7 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0016863:	83 c4 20             	add    esp,0x20
c0016866:	e9 41 03 00 00       	jmp    c0016bac <Vm::faultHandler(regs*)+0x6b8>
c001686b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016870:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016874:	e9 30 03 00 00       	jmp    c0016ba9 <Vm::faultHandler(regs*)+0x6b5>
c0016879:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001687e:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0016882:	e9 22 03 00 00       	jmp    c0016ba9 <Vm::faultHandler(regs*)+0x6b5>
c0016887:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001688a:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001688f:	74 2b                	je     c00168bc <Vm::faultHandler(regs*)+0x3c8>
c0016891:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0016898:	76 22                	jbe    c00168bc <Vm::faultHandler(regs*)+0x3c8>
c001689a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001689e:	50                   	push   eax
c001689f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00168a3:	50                   	push   eax
c00168a4:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00168a8:	50                   	push   eax
c00168a9:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00168ad:	50                   	push   eax
c00168ae:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00168b2:	50                   	push   eax
c00168b3:	6a 6c                	push   0x6c
c00168b5:	6a 6c                	push   0x6c
c00168b7:	e9 bd 01 00 00       	jmp    c0016a79 <Vm::faultHandler(regs*)+0x585>
c00168bc:	83 ec 0c             	sub    esp,0xc
c00168bf:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00168c3:	0f b7 f6             	movzx  esi,si
c00168c6:	50                   	push   eax
c00168c7:	e8 25 f7 ff ff       	call   c0015ff1 <Vm::inbv(unsigned short)>
c00168cc:	83 c4 0c             	add    esp,0xc
c00168cf:	0f b6 c0             	movzx  eax,al
c00168d2:	50                   	push   eax
c00168d3:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00168d7:	50                   	push   eax
c00168d8:	56                   	push   esi
c00168d9:	e8 d6 fb ff ff       	call   c00164b4 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00168de:	83 c4 10             	add    esp,0x10
c00168e1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00168e4:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00168e8:	74 03                	je     c00168ed <Vm::faultHandler(regs*)+0x3f9>
c00168ea:	48                   	dec    eax
c00168eb:	eb 01                	jmp    c00168ee <Vm::faultHandler(regs*)+0x3fa>
c00168ed:	40                   	inc    eax
c00168ee:	0f b7 c0             	movzx  eax,ax
c00168f1:	e9 8b 00 00 00       	jmp    c0016981 <Vm::faultHandler(regs*)+0x48d>
c00168f6:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00168f9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00168fc:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016901:	74 29                	je     c001692c <Vm::faultHandler(regs*)+0x438>
c0016903:	3d ff ff 00 00       	cmp    eax,0xffff
c0016908:	76 22                	jbe    c001692c <Vm::faultHandler(regs*)+0x438>
c001690a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001690e:	50                   	push   eax
c001690f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016913:	50                   	push   eax
c0016914:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016918:	50                   	push   eax
c0016919:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001691d:	50                   	push   eax
c001691e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016922:	50                   	push   eax
c0016923:	6a 6d                	push   0x6d
c0016925:	6a 6d                	push   0x6d
c0016927:	e9 4d 01 00 00       	jmp    c0016a79 <Vm::faultHandler(regs*)+0x585>
c001692c:	0f b7 c8             	movzx  ecx,ax
c001692f:	0f b7 f6             	movzx  esi,si
c0016932:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016935:	83 e5 01             	and    ebp,0x1
c0016938:	74 20                	je     c001695a <Vm::faultHandler(regs*)+0x466>
c001693a:	ed                   	in     eax,dx
c001693b:	55                   	push   ebp
c001693c:	50                   	push   eax
c001693d:	51                   	push   ecx
c001693e:	56                   	push   esi
c001693f:	e8 9b fb ff ff       	call   c00164df <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0016944:	83 c4 10             	add    esp,0x10
c0016947:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001694a:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001694e:	74 05                	je     c0016955 <Vm::faultHandler(regs*)+0x461>
c0016950:	83 e8 04             	sub    eax,0x4
c0016953:	eb 27                	jmp    c001697c <Vm::faultHandler(regs*)+0x488>
c0016955:	83 c0 04             	add    eax,0x4
c0016958:	eb 22                	jmp    c001697c <Vm::faultHandler(regs*)+0x488>
c001695a:	66 ed                	in     ax,dx
c001695c:	0f b7 c0             	movzx  eax,ax
c001695f:	57                   	push   edi
c0016960:	50                   	push   eax
c0016961:	51                   	push   ecx
c0016962:	56                   	push   esi
c0016963:	e8 61 fb ff ff       	call   c00164c9 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0016968:	83 c4 10             	add    esp,0x10
c001696b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001696e:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016972:	74 05                	je     c0016979 <Vm::faultHandler(regs*)+0x485>
c0016974:	83 e8 02             	sub    eax,0x2
c0016977:	eb 03                	jmp    c001697c <Vm::faultHandler(regs*)+0x488>
c0016979:	83 c0 02             	add    eax,0x2
c001697c:	25 ff ff 00 00       	and    eax,0xffff
c0016981:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0016984:	e9 20 02 00 00       	jmp    c0016ba9 <Vm::faultHandler(regs*)+0x6b5>
c0016989:	8d 46 ff             	lea    eax,[esi-0x1]
c001698c:	0f b6 f0             	movzx  esi,al
c001698f:	83 fe 05             	cmp    esi,0x5
c0016992:	77 23                	ja     c00169b7 <Vm::faultHandler(regs*)+0x4c3>
c0016994:	ff 24 b5 08 1d 02 c0 	jmp    DWORD PTR [esi*4-0x3ffde2f8]
c001699b:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c00169a0:	eb 15                	jmp    c00169b7 <Vm::faultHandler(regs*)+0x4c3>
c00169a2:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c00169a6:	eb 0f                	jmp    c00169b7 <Vm::faultHandler(regs*)+0x4c3>
c00169a8:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c00169ac:	eb 09                	jmp    c00169b7 <Vm::faultHandler(regs*)+0x4c3>
c00169ae:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c00169b2:	eb 03                	jmp    c00169b7 <Vm::faultHandler(regs*)+0x4c3>
c00169b4:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c00169b7:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00169ba:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00169bf:	74 29                	je     c00169ea <Vm::faultHandler(regs*)+0x4f6>
c00169c1:	3d ff ff 00 00       	cmp    eax,0xffff
c00169c6:	76 22                	jbe    c00169ea <Vm::faultHandler(regs*)+0x4f6>
c00169c8:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00169cc:	50                   	push   eax
c00169cd:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00169d1:	50                   	push   eax
c00169d2:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00169d6:	50                   	push   eax
c00169d7:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00169db:	50                   	push   eax
c00169dc:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00169e0:	50                   	push   eax
c00169e1:	6a 6e                	push   0x6e
c00169e3:	6a 6e                	push   0x6e
c00169e5:	e9 8f 00 00 00       	jmp    c0016a79 <Vm::faultHandler(regs*)+0x585>
c00169ea:	0f b7 c0             	movzx  eax,ax
c00169ed:	52                   	push   edx
c00169ee:	52                   	push   edx
c00169ef:	50                   	push   eax
c00169f0:	57                   	push   edi
c00169f1:	e8 8a fa ff ff       	call   c0016480 <Vm::readByteFromReal(unsigned short, unsigned short)>
c00169f6:	59                   	pop    ecx
c00169f7:	0f b6 c0             	movzx  eax,al
c00169fa:	5e                   	pop    esi
c00169fb:	50                   	push   eax
c00169fc:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016a00:	50                   	push   eax
c0016a01:	e8 fe f5 ff ff       	call   c0016004 <Vm::outbv(unsigned short, unsigned char)>
c0016a06:	83 c4 10             	add    esp,0x10
c0016a09:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016a0c:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016a10:	74 03                	je     c0016a15 <Vm::faultHandler(regs*)+0x521>
c0016a12:	48                   	dec    eax
c0016a13:	eb 01                	jmp    c0016a16 <Vm::faultHandler(regs*)+0x522>
c0016a15:	40                   	inc    eax
c0016a16:	0f b7 c0             	movzx  eax,ax
c0016a19:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0016a1c:	e9 88 01 00 00       	jmp    c0016ba9 <Vm::faultHandler(regs*)+0x6b5>
c0016a21:	8d 46 ff             	lea    eax,[esi-0x1]
c0016a24:	0f b6 f0             	movzx  esi,al
c0016a27:	83 fe 05             	cmp    esi,0x5
c0016a2a:	77 1e                	ja     c0016a4a <Vm::faultHandler(regs*)+0x556>
c0016a2c:	ff 24 b5 20 1d 02 c0 	jmp    DWORD PTR [esi*4-0x3ffde2e0]
c0016a33:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016a37:	eb 11                	jmp    c0016a4a <Vm::faultHandler(regs*)+0x556>
c0016a39:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0016a3c:	eb 0c                	jmp    c0016a4a <Vm::faultHandler(regs*)+0x556>
c0016a3e:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0016a41:	eb 07                	jmp    c0016a4a <Vm::faultHandler(regs*)+0x556>
c0016a43:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0016a46:	eb 02                	jmp    c0016a4a <Vm::faultHandler(regs*)+0x556>
c0016a48:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0016a4a:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0016a4d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016a52:	74 37                	je     c0016a8b <Vm::faultHandler(regs*)+0x597>
c0016a54:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0016a5a:	76 2f                	jbe    c0016a8b <Vm::faultHandler(regs*)+0x597>
c0016a5c:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016a60:	50                   	push   eax
c0016a61:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016a65:	50                   	push   eax
c0016a66:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016a6a:	50                   	push   eax
c0016a6b:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016a6f:	50                   	push   eax
c0016a70:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016a74:	50                   	push   eax
c0016a75:	6a 6f                	push   0x6f
c0016a77:	6a 6f                	push   0x6f
c0016a79:	68 ac 1c 02 c0       	push   0xc0021cac
c0016a7e:	e8 b6 3e ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0016a83:	83 c4 20             	add    esp,0x20
c0016a86:	e9 83 01 00 00       	jmp    c0016c0e <Vm::faultHandler(regs*)+0x71a>
c0016a8b:	0f b7 d7             	movzx  edx,di
c0016a8e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0016a91:	0f b7 c6             	movzx  eax,si
c0016a94:	81 e1 00 04 00 00    	and    ecx,0x400
c0016a9a:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0016a9d:	83 e5 01             	and    ebp,0x1
c0016aa0:	74 1d                	je     c0016abf <Vm::faultHandler(regs*)+0x5cb>
c0016aa2:	55                   	push   ebp
c0016aa3:	55                   	push   ebp
c0016aa4:	50                   	push   eax
c0016aa5:	52                   	push   edx
c0016aa6:	e8 f8 f9 ff ff       	call   c00164a3 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0016aab:	83 c4 10             	add    esp,0x10
c0016aae:	89 fa                	mov    edx,edi
c0016ab0:	ef                   	out    dx,eax
c0016ab1:	85 c9                	test   ecx,ecx
c0016ab3:	74 05                	je     c0016aba <Vm::faultHandler(regs*)+0x5c6>
c0016ab5:	83 ee 04             	sub    esi,0x4
c0016ab8:	eb 21                	jmp    c0016adb <Vm::faultHandler(regs*)+0x5e7>
c0016aba:	83 c6 04             	add    esi,0x4
c0016abd:	eb 1c                	jmp    c0016adb <Vm::faultHandler(regs*)+0x5e7>
c0016abf:	55                   	push   ebp
c0016ac0:	55                   	push   ebp
c0016ac1:	50                   	push   eax
c0016ac2:	52                   	push   edx
c0016ac3:	e8 c9 f9 ff ff       	call   c0016491 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0016ac8:	83 c4 10             	add    esp,0x10
c0016acb:	89 fa                	mov    edx,edi
c0016acd:	66 ef                	out    dx,ax
c0016acf:	85 c9                	test   ecx,ecx
c0016ad1:	74 05                	je     c0016ad8 <Vm::faultHandler(regs*)+0x5e4>
c0016ad3:	83 ee 02             	sub    esi,0x2
c0016ad6:	eb 03                	jmp    c0016adb <Vm::faultHandler(regs*)+0x5e7>
c0016ad8:	83 c6 02             	add    esi,0x2
c0016adb:	81 e6 ff ff 00 00    	and    esi,0xffff
c0016ae1:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0016ae4:	e9 c0 00 00 00       	jmp    c0016ba9 <Vm::faultHandler(regs*)+0x6b5>
c0016ae9:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0016af0:	83 ec 0c             	sub    esp,0xc
c0016af3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016af7:	50                   	push   eax
c0016af8:	e8 f4 f4 ff ff       	call   c0015ff1 <Vm::inbv(unsigned short)>
c0016afd:	0f b6 c0             	movzx  eax,al
c0016b00:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0016b03:	eb 3a                	jmp    c0016b3f <Vm::faultHandler(regs*)+0x64b>
c0016b05:	83 e5 01             	and    ebp,0x1
c0016b08:	74 07                	je     c0016b11 <Vm::faultHandler(regs*)+0x61d>
c0016b0a:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016b0e:	ed                   	in     eax,dx
c0016b0f:	eb 14                	jmp    c0016b25 <Vm::faultHandler(regs*)+0x631>
c0016b11:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0016b14:	66 31 f6             	xor    si,si
c0016b17:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0016b1a:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016b1e:	66 ed                	in     ax,dx
c0016b20:	0f b7 c0             	movzx  eax,ax
c0016b23:	09 f0                	or     eax,esi
c0016b25:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016b28:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0016b2c:	eb 7e                	jmp    c0016bac <Vm::faultHandler(regs*)+0x6b8>
c0016b2e:	52                   	push   edx
c0016b2f:	52                   	push   edx
c0016b30:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016b34:	50                   	push   eax
c0016b35:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016b39:	50                   	push   eax
c0016b3a:	e8 c5 f4 ff ff       	call   c0016004 <Vm::outbv(unsigned short, unsigned char)>
c0016b3f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0016b43:	eb 4f                	jmp    c0016b94 <Vm::faultHandler(regs*)+0x6a0>
c0016b45:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016b48:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016b4c:	83 e5 01             	and    ebp,0x1
c0016b4f:	74 03                	je     c0016b54 <Vm::faultHandler(regs*)+0x660>
c0016b51:	ef                   	out    dx,eax
c0016b52:	eb d4                	jmp    c0016b28 <Vm::faultHandler(regs*)+0x634>
c0016b54:	66 ef                	out    dx,ax
c0016b56:	eb d0                	jmp    c0016b28 <Vm::faultHandler(regs*)+0x634>
c0016b58:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0016b5f:	83 ec 0c             	sub    esp,0xc
c0016b62:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016b66:	50                   	push   eax
c0016b67:	e8 85 f4 ff ff       	call   c0015ff1 <Vm::inbv(unsigned short)>
c0016b6c:	0f b6 c0             	movzx  eax,al
c0016b6f:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0016b72:	eb 1d                	jmp    c0016b91 <Vm::faultHandler(regs*)+0x69d>
c0016b74:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016b77:	83 e5 01             	and    ebp,0x1
c0016b7a:	74 03                	je     c0016b7f <Vm::faultHandler(regs*)+0x68b>
c0016b7c:	ed                   	in     eax,dx
c0016b7d:	eb 0d                	jmp    c0016b8c <Vm::faultHandler(regs*)+0x698>
c0016b7f:	66 ed                	in     ax,dx
c0016b81:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0016b84:	0f b7 c0             	movzx  eax,ax
c0016b87:	66 31 d2             	xor    dx,dx
c0016b8a:	09 d0                	or     eax,edx
c0016b8c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016b8f:	eb 18                	jmp    c0016ba9 <Vm::faultHandler(regs*)+0x6b5>
c0016b91:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016b94:	83 c4 10             	add    esp,0x10
c0016b97:	eb 13                	jmp    c0016bac <Vm::faultHandler(regs*)+0x6b8>
c0016b99:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016b9c:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016b9f:	83 e5 01             	and    ebp,0x1
c0016ba2:	74 03                	je     c0016ba7 <Vm::faultHandler(regs*)+0x6b3>
c0016ba4:	ef                   	out    dx,eax
c0016ba5:	eb 02                	jmp    c0016ba9 <Vm::faultHandler(regs*)+0x6b5>
c0016ba7:	66 ef                	out    dx,ax
c0016ba9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016bac:	b0 01                	mov    al,0x1
c0016bae:	eb 60                	jmp    c0016c10 <Vm::faultHandler(regs*)+0x71c>
c0016bb0:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016bb4:	50                   	push   eax
c0016bb5:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016bb9:	50                   	push   eax
c0016bba:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016bbe:	50                   	push   eax
c0016bbf:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016bc3:	50                   	push   eax
c0016bc4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016bc8:	50                   	push   eax
c0016bc9:	52                   	push   edx
c0016bca:	52                   	push   edx
c0016bcb:	68 d9 1c 02 c0       	push   0xc0021cd9
c0016bd0:	e8 64 3d ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0016bd5:	83 c4 20             	add    esp,0x20
c0016bd8:	83 ec 0c             	sub    esp,0xc
c0016bdb:	6a 60                	push   0x60
c0016bdd:	e8 0f f4 ff ff       	call   c0015ff1 <Vm::inbv(unsigned short)>
c0016be2:	83 c4 10             	add    esp,0x10
c0016be5:	0f b6 d0             	movzx  edx,al
c0016be8:	83 fa 1c             	cmp    edx,0x1c
c0016beb:	74 05                	je     c0016bf2 <Vm::faultHandler(regs*)+0x6fe>
c0016bed:	83 fa 5a             	cmp    edx,0x5a
c0016bf0:	75 e6                	jne    c0016bd8 <Vm::faultHandler(regs*)+0x6e4>
c0016bf2:	0f b6 c0             	movzx  eax,al
c0016bf5:	83 f8 1c             	cmp    eax,0x1c
c0016bf8:	74 05                	je     c0016bff <Vm::faultHandler(regs*)+0x70b>
c0016bfa:	83 f8 5a             	cmp    eax,0x5a
c0016bfd:	75 0f                	jne    c0016c0e <Vm::faultHandler(regs*)+0x71a>
c0016bff:	83 ec 0c             	sub    esp,0xc
c0016c02:	6a 60                	push   0x60
c0016c04:	e8 e8 f3 ff ff       	call   c0015ff1 <Vm::inbv(unsigned short)>
c0016c09:	83 c4 10             	add    esp,0x10
c0016c0c:	eb e4                	jmp    c0016bf2 <Vm::faultHandler(regs*)+0x6fe>
c0016c0e:	31 c0                	xor    eax,eax
c0016c10:	83 c4 2c             	add    esp,0x2c
c0016c13:	5b                   	pop    ebx
c0016c14:	5e                   	pop    esi
c0016c15:	5f                   	pop    edi
c0016c16:	5d                   	pop    ebp
c0016c17:	c3                   	ret    

c0016c18 <noCopro(unsigned long)>:
c0016c18:	c3                   	ret    

c0016c19 <nmiHandler(regs*, void*)>:
c0016c19:	83 ec 0c             	sub    esp,0xc
c0016c1c:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0016c21:	83 ec 0c             	sub    esp,0xc
c0016c24:	50                   	push   eax
c0016c25:	e8 84 06 ff ff       	call   c00072ae <Computer::handleNMI()>
c0016c2a:	83 c4 10             	add    esp,0x10
c0016c2d:	90                   	nop
c0016c2e:	83 c4 0c             	add    esp,0xc
c0016c31:	c3                   	ret    

c0016c32 <doubleFault(regs*, void*)>:
c0016c32:	55                   	push   ebp
c0016c33:	89 e5                	mov    ebp,esp
c0016c35:	83 ec 08             	sub    esp,0x8
c0016c38:	83 ec 0c             	sub    esp,0xc
c0016c3b:	68 38 1d 02 c0       	push   0xc0021d38
c0016c40:	e8 56 9f ff ff       	call   c0010b9b <KePanic(char const*)>
c0016c45:	83 c4 10             	add    esp,0x10
c0016c48:	90                   	nop
c0016c49:	c9                   	leave  
c0016c4a:	c3                   	ret    

c0016c4b <displayDebugInfo(regs*)>:
c0016c4b:	83 ec 1c             	sub    esp,0x1c
c0016c4e:	0f 20 c0             	mov    eax,cr0
c0016c51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016c55:	0f 20 d0             	mov    eax,cr2
c0016c58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016c5c:	0f 20 d8             	mov    eax,cr3
c0016c5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016c63:	0f 20 e0             	mov    eax,cr4
c0016c66:	89 04 24             	mov    DWORD PTR [esp],eax
c0016c69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c6d:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0016c70:	83 ec 08             	sub    esp,0x8
c0016c73:	50                   	push   eax
c0016c74:	68 54 1d 02 c0       	push   0xc0021d54
c0016c79:	e8 bb 3c ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0016c7e:	83 c4 10             	add    esp,0x10
c0016c81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c85:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0016c88:	83 ec 08             	sub    esp,0x8
c0016c8b:	50                   	push   eax
c0016c8c:	68 45 1d 02 c0       	push   0xc0021d45
c0016c91:	e8 a3 3c ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0016c96:	83 c4 10             	add    esp,0x10
c0016c99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c9d:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0016ca0:	83 ec 08             	sub    esp,0x8
c0016ca3:	50                   	push   eax
c0016ca4:	68 50 1d 02 c0       	push   0xc0021d50
c0016ca9:	e8 8b 3c ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0016cae:	83 c4 10             	add    esp,0x10
c0016cb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016cb5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016cb8:	83 ec 08             	sub    esp,0x8
c0016cbb:	50                   	push   eax
c0016cbc:	68 5f 1d 02 c0       	push   0xc0021d5f
c0016cc1:	e8 73 3c ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0016cc6:	83 c4 10             	add    esp,0x10
c0016cc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ccd:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0016cd0:	83 ec 08             	sub    esp,0x8
c0016cd3:	50                   	push   eax
c0016cd4:	68 6a 1d 02 c0       	push   0xc0021d6a
c0016cd9:	e8 5b 3c ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0016cde:	83 c4 10             	add    esp,0x10
c0016ce1:	83 ec 08             	sub    esp,0x8
c0016ce4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016ce8:	68 75 1d 02 c0       	push   0xc0021d75
c0016ced:	e8 47 3c ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0016cf2:	83 c4 10             	add    esp,0x10
c0016cf5:	83 ec 08             	sub    esp,0x8
c0016cf8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016cfc:	68 80 1d 02 c0       	push   0xc0021d80
c0016d01:	e8 33 3c ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0016d06:	83 c4 10             	add    esp,0x10
c0016d09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d0d:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0016d10:	c1 e0 05             	shl    eax,0x5
c0016d13:	8d 90 00 2d 02 c0    	lea    edx,[eax-0x3ffdd300]
c0016d19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d1d:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0016d20:	83 ec 04             	sub    esp,0x4
c0016d23:	52                   	push   edx
c0016d24:	50                   	push   eax
c0016d25:	68 8b 1d 02 c0       	push   0xc0021d8b
c0016d2a:	e8 0a 3c ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0016d2f:	83 c4 10             	add    esp,0x10
c0016d32:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016d37:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016d3d:	83 ec 0c             	sub    esp,0xc
c0016d40:	50                   	push   eax
c0016d41:	e8 05 1a ff ff       	call   c000874b <setActiveTerminal(VgaText*)>
c0016d46:	83 c4 10             	add    esp,0x10
c0016d49:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016d4e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016d54:	83 ec 08             	sub    esp,0x8
c0016d57:	68 9a 1d 02 c0       	push   0xc0021d9a
c0016d5c:	50                   	push   eax
c0016d5d:	e8 36 1d ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c0016d62:	83 c4 10             	add    esp,0x10
c0016d65:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016d6a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016d70:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016d74:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0016d77:	83 ec 08             	sub    esp,0x8
c0016d7a:	52                   	push   edx
c0016d7b:	50                   	push   eax
c0016d7c:	e8 d1 1c ff ff       	call   c0008a52 <VgaText::putx(unsigned int)>
c0016d81:	83 c4 10             	add    esp,0x10
c0016d84:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016d89:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016d8f:	83 ec 08             	sub    esp,0x8
c0016d92:	68 a8 1d 02 c0       	push   0xc0021da8
c0016d97:	50                   	push   eax
c0016d98:	e8 fb 1c ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c0016d9d:	83 c4 10             	add    esp,0x10
c0016da0:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016da5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016dab:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0016db0:	8b 12                	mov    edx,DWORD PTR [edx]
c0016db2:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0016db5:	83 c2 0c             	add    edx,0xc
c0016db8:	83 ec 08             	sub    esp,0x8
c0016dbb:	52                   	push   edx
c0016dbc:	50                   	push   eax
c0016dbd:	e8 d6 1c ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c0016dc2:	83 c4 10             	add    esp,0x10
c0016dc5:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016dca:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016dd0:	83 ec 08             	sub    esp,0x8
c0016dd3:	68 b1 1d 02 c0       	push   0xc0021db1
c0016dd8:	50                   	push   eax
c0016dd9:	e8 ba 1c ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c0016dde:	83 c4 10             	add    esp,0x10
c0016de1:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016de6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016dec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016df0:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0016df3:	83 ec 08             	sub    esp,0x8
c0016df6:	52                   	push   edx
c0016df7:	50                   	push   eax
c0016df8:	e8 55 1c ff ff       	call   c0008a52 <VgaText::putx(unsigned int)>
c0016dfd:	83 c4 10             	add    esp,0x10
c0016e00:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016e05:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016e0b:	83 ec 08             	sub    esp,0x8
c0016e0e:	68 b9 1d 02 c0       	push   0xc0021db9
c0016e13:	50                   	push   eax
c0016e14:	e8 7f 1c ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c0016e19:	83 c4 10             	add    esp,0x10
c0016e1c:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016e21:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016e27:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016e2b:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0016e2e:	83 ec 08             	sub    esp,0x8
c0016e31:	52                   	push   edx
c0016e32:	50                   	push   eax
c0016e33:	e8 1a 1c ff ff       	call   c0008a52 <VgaText::putx(unsigned int)>
c0016e38:	83 c4 10             	add    esp,0x10
c0016e3b:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016e40:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016e46:	83 ec 08             	sub    esp,0x8
c0016e49:	68 c1 1d 02 c0       	push   0xc0021dc1
c0016e4e:	50                   	push   eax
c0016e4f:	e8 44 1c ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c0016e54:	83 c4 10             	add    esp,0x10
c0016e57:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016e5c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016e62:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016e66:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0016e69:	83 ec 08             	sub    esp,0x8
c0016e6c:	52                   	push   edx
c0016e6d:	50                   	push   eax
c0016e6e:	e8 df 1b ff ff       	call   c0008a52 <VgaText::putx(unsigned int)>
c0016e73:	83 c4 10             	add    esp,0x10
c0016e76:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016e7b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016e81:	83 ec 08             	sub    esp,0x8
c0016e84:	68 c9 1d 02 c0       	push   0xc0021dc9
c0016e89:	50                   	push   eax
c0016e8a:	e8 09 1c ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c0016e8f:	83 c4 10             	add    esp,0x10
c0016e92:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016e97:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016e9d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016ea1:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0016ea4:	83 ec 08             	sub    esp,0x8
c0016ea7:	52                   	push   edx
c0016ea8:	50                   	push   eax
c0016ea9:	e8 a4 1b ff ff       	call   c0008a52 <VgaText::putx(unsigned int)>
c0016eae:	83 c4 10             	add    esp,0x10
c0016eb1:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016eb6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016ebc:	83 ec 08             	sub    esp,0x8
c0016ebf:	68 d1 1d 02 c0       	push   0xc0021dd1
c0016ec4:	50                   	push   eax
c0016ec5:	e8 ce 1b ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c0016eca:	83 c4 10             	add    esp,0x10
c0016ecd:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016ed2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016ed8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016edc:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0016edf:	83 ec 08             	sub    esp,0x8
c0016ee2:	52                   	push   edx
c0016ee3:	50                   	push   eax
c0016ee4:	e8 69 1b ff ff       	call   c0008a52 <VgaText::putx(unsigned int)>
c0016ee9:	83 c4 10             	add    esp,0x10
c0016eec:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016ef1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016ef7:	83 ec 08             	sub    esp,0x8
c0016efa:	68 d9 1d 02 c0       	push   0xc0021dd9
c0016eff:	50                   	push   eax
c0016f00:	e8 93 1b ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c0016f05:	83 c4 10             	add    esp,0x10
c0016f08:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016f0d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016f13:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016f17:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0016f1a:	83 ec 08             	sub    esp,0x8
c0016f1d:	52                   	push   edx
c0016f1e:	50                   	push   eax
c0016f1f:	e8 2e 1b ff ff       	call   c0008a52 <VgaText::putx(unsigned int)>
c0016f24:	83 c4 10             	add    esp,0x10
c0016f27:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016f2c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016f32:	83 ec 08             	sub    esp,0x8
c0016f35:	68 e1 1d 02 c0       	push   0xc0021de1
c0016f3a:	50                   	push   eax
c0016f3b:	e8 58 1b ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c0016f40:	83 c4 10             	add    esp,0x10
c0016f43:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016f48:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016f4e:	83 ec 08             	sub    esp,0x8
c0016f51:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016f55:	50                   	push   eax
c0016f56:	e8 f7 1a ff ff       	call   c0008a52 <VgaText::putx(unsigned int)>
c0016f5b:	83 c4 10             	add    esp,0x10
c0016f5e:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016f63:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016f69:	83 ec 08             	sub    esp,0x8
c0016f6c:	68 ea 1d 02 c0       	push   0xc0021dea
c0016f71:	50                   	push   eax
c0016f72:	e8 21 1b ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c0016f77:	83 c4 10             	add    esp,0x10
c0016f7a:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016f7f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016f85:	83 ec 08             	sub    esp,0x8
c0016f88:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016f8c:	50                   	push   eax
c0016f8d:	e8 c0 1a ff ff       	call   c0008a52 <VgaText::putx(unsigned int)>
c0016f92:	83 c4 10             	add    esp,0x10
c0016f95:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016f9a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016fa0:	83 ec 08             	sub    esp,0x8
c0016fa3:	68 f2 1d 02 c0       	push   0xc0021df2
c0016fa8:	50                   	push   eax
c0016fa9:	e8 ea 1a ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c0016fae:	83 c4 10             	add    esp,0x10
c0016fb1:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016fb6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016fbc:	83 ec 08             	sub    esp,0x8
c0016fbf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016fc3:	50                   	push   eax
c0016fc4:	e8 89 1a ff ff       	call   c0008a52 <VgaText::putx(unsigned int)>
c0016fc9:	83 c4 10             	add    esp,0x10
c0016fcc:	fa                   	cli    
c0016fcd:	f4                   	hlt    
c0016fce:	eb fe                	jmp    c0016fce <displayDebugInfo(regs*)+0x383>

c0016fd0 <HalSystemIdle()>:
c0016fd0:	56                   	push   esi
c0016fd1:	53                   	push   ebx
c0016fd2:	83 ec 14             	sub    esp,0x14
c0016fd5:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0016fda:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016fe0:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0016fe6:	83 e0 04             	and    eax,0x4
c0016fe9:	0f b6 c0             	movzx  eax,al
c0016fec:	85 c0                	test   eax,eax
c0016fee:	0f 95 c0             	setne  al
c0016ff1:	0f b6 c0             	movzx  eax,al
c0016ff4:	85 c0                	test   eax,eax
c0016ff6:	74 4c                	je     c0017044 <HalSystemIdle()+0x74>
c0016ff8:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0016ffd:	83 ec 08             	sub    esp,0x8
c0017000:	68 e1 00 00 00       	push   0xe1
c0017005:	50                   	push   eax
c0017006:	e8 ad 00 ff ff       	call   c00070b8 <Computer::rdmsr(unsigned int)>
c001700b:	83 c4 10             	add    esp,0x10
c001700e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017012:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017016:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001701b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001701f:	83 e2 02             	and    edx,0x2
c0017022:	89 d3                	mov    ebx,edx
c0017024:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017028:	83 e2 00             	and    edx,0x0
c001702b:	89 d6                	mov    esi,edx
c001702d:	56                   	push   esi
c001702e:	53                   	push   ebx
c001702f:	68 e1 00 00 00       	push   0xe1
c0017034:	50                   	push   eax
c0017035:	e8 aa 00 ff ff       	call   c00070e4 <Computer::wrmsr(unsigned int, unsigned long long)>
c001703a:	83 c4 10             	add    esp,0x10
c001703d:	e8 52 91 fe ff       	call   c0000194 <doTPAUSE>
c0017042:	eb 01                	jmp    c0017045 <HalSystemIdle()+0x75>
c0017044:	f4                   	hlt    
c0017045:	90                   	nop
c0017046:	83 c4 14             	add    esp,0x14
c0017049:	5b                   	pop    ebx
c001704a:	5e                   	pop    esi
c001704b:	c3                   	ret    

c001704c <displayProgramFault(char const*)>:
c001704c:	83 ec 0c             	sub    esp,0xc
c001704f:	83 ec 0c             	sub    esp,0xc
c0017052:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017056:	e8 de 38 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c001705b:	83 c4 10             	add    esp,0x10
c001705e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017063:	8b 00                	mov    eax,DWORD PTR [eax]
c0017065:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017068:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001706e:	85 c0                	test   eax,eax
c0017070:	74 21                	je     c0017093 <displayProgramFault(char const*)+0x47>
c0017072:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017077:	8b 00                	mov    eax,DWORD PTR [eax]
c0017079:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001707c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017082:	6a 04                	push   0x4
c0017084:	6a 0f                	push   0xf
c0017086:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001708a:	50                   	push   eax
c001708b:	e8 7a 1a ff ff       	call   c0008b0a <VgaText::puts(char const*, VgaColour, VgaColour)>
c0017090:	83 c4 10             	add    esp,0x10
c0017093:	90                   	nop
c0017094:	83 c4 0c             	add    esp,0xc
c0017097:	c3                   	ret    

c0017098 <gpFault(regs*, void*)>:
c0017098:	83 ec 1c             	sub    esp,0x1c
c001709b:	c7 05 14 92 02 c0 f4 64 01 c0 	mov    DWORD PTR ds:0xc0029214,0xc00164f4
c00170a5:	a1 14 92 02 c0       	mov    eax,ds:0xc0029214
c00170aa:	85 c0                	test   eax,eax
c00170ac:	74 1e                	je     c00170cc <gpFault(regs*, void*)+0x34>
c00170ae:	a1 14 92 02 c0       	mov    eax,ds:0xc0029214
c00170b3:	83 ec 0c             	sub    esp,0xc
c00170b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00170ba:	ff d0                	call   eax
c00170bc:	83 c4 10             	add    esp,0x10
c00170bf:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00170c3:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00170c8:	85 c0                	test   eax,eax
c00170ca:	75 2e                	jne    c00170fa <gpFault(regs*, void*)+0x62>
c00170cc:	83 ec 0c             	sub    esp,0xc
c00170cf:	68 fa 1d 02 c0       	push   0xc0021dfa
c00170d4:	e8 73 ff ff ff       	call   c001704c <displayProgramFault(char const*)>
c00170d9:	83 c4 10             	add    esp,0x10
c00170dc:	83 ec 0c             	sub    esp,0xc
c00170df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00170e3:	e8 63 fb ff ff       	call   c0016c4b <displayDebugInfo(regs*)>
c00170e8:	83 c4 10             	add    esp,0x10
c00170eb:	83 ec 0c             	sub    esp,0xc
c00170ee:	6a 00                	push   0x0
c00170f0:	e8 a3 ed ff ff       	call   c0015e98 <Thr::terminateFromIRQ(int)>
c00170f5:	83 c4 10             	add    esp,0x10
c00170f8:	eb 01                	jmp    c00170fb <gpFault(regs*, void*)+0x63>
c00170fa:	90                   	nop
c00170fb:	83 c4 1c             	add    esp,0x1c
c00170fe:	c3                   	ret    

c00170ff <pgFault(regs*, void*)>:
c00170ff:	83 ec 1c             	sub    esp,0x1c
c0017102:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017106:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0017109:	0f 20 d0             	mov    eax,cr2
c001710c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017110:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017114:	83 ec 04             	sub    esp,0x4
c0017117:	52                   	push   edx
c0017118:	50                   	push   eax
c0017119:	68 d8 1e 02 c0       	push   0xc0021ed8
c001711e:	e8 16 38 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0017123:	83 c4 10             	add    esp,0x10
c0017126:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001712b:	8b 00                	mov    eax,DWORD PTR [eax]
c001712d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017130:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0017136:	0f 20 d2             	mov    edx,cr2
c0017139:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001713d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017141:	83 ec 08             	sub    esp,0x8
c0017144:	52                   	push   edx
c0017145:	50                   	push   eax
c0017146:	e8 39 32 ff ff       	call   c000a384 <VAS::tryLoadBackOffDisk(unsigned long)>
c001714b:	83 c4 10             	add    esp,0x10
c001714e:	0f b6 c0             	movzx  eax,al
c0017151:	85 c0                	test   eax,eax
c0017153:	75 2e                	jne    c0017183 <pgFault(regs*, void*)+0x84>
c0017155:	83 ec 0c             	sub    esp,0xc
c0017158:	68 13 1e 02 c0       	push   0xc0021e13
c001715d:	e8 ea fe ff ff       	call   c001704c <displayProgramFault(char const*)>
c0017162:	83 c4 10             	add    esp,0x10
c0017165:	83 ec 0c             	sub    esp,0xc
c0017168:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001716c:	e8 da fa ff ff       	call   c0016c4b <displayDebugInfo(regs*)>
c0017171:	83 c4 10             	add    esp,0x10
c0017174:	83 ec 0c             	sub    esp,0xc
c0017177:	6a 00                	push   0x0
c0017179:	e8 1a ed ff ff       	call   c0015e98 <Thr::terminateFromIRQ(int)>
c001717e:	83 c4 10             	add    esp,0x10
c0017181:	eb 01                	jmp    c0017184 <pgFault(regs*, void*)+0x85>
c0017183:	90                   	nop
c0017184:	83 c4 1c             	add    esp,0x1c
c0017187:	c3                   	ret    

c0017188 <otherISRHandler(regs*, void*)>:
c0017188:	83 ec 0c             	sub    esp,0xc
c001718b:	83 ec 0c             	sub    esp,0xc
c001718e:	68 00 1f 02 c0       	push   0xc0021f00
c0017193:	e8 b4 fe ff ff       	call   c001704c <displayProgramFault(char const*)>
c0017198:	83 c4 10             	add    esp,0x10
c001719b:	83 ec 0c             	sub    esp,0xc
c001719e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00171a2:	e8 a4 fa ff ff       	call   c0016c4b <displayDebugInfo(regs*)>
c00171a7:	83 c4 10             	add    esp,0x10
c00171aa:	83 ec 0c             	sub    esp,0xc
c00171ad:	6a 00                	push   0x0
c00171af:	e8 e4 ec ff ff       	call   c0015e98 <Thr::terminateFromIRQ(int)>
c00171b4:	83 c4 10             	add    esp,0x10
c00171b7:	90                   	nop
c00171b8:	83 c4 0c             	add    esp,0xc
c00171bb:	c3                   	ret    

c00171bc <opcodeFault(regs*, void*)>:
c00171bc:	55                   	push   ebp
c00171bd:	89 e5                	mov    ebp,esp
c00171bf:	83 ec 08             	sub    esp,0x8
c00171c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00171c5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00171c8:	83 ec 08             	sub    esp,0x8
c00171cb:	50                   	push   eax
c00171cc:	68 1e 1e 02 c0       	push   0xc0021e1e
c00171d1:	e8 63 37 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c00171d6:	83 c4 10             	add    esp,0x10
c00171d9:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00171de:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00171e4:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00171ea:	0f b6 c0             	movzx  eax,al
c00171ed:	85 c0                	test   eax,eax
c00171ef:	74 21                	je     c0017212 <opcodeFault(regs*, void*)+0x56>
c00171f1:	83 ec 0c             	sub    esp,0xc
c00171f4:	68 28 1f 02 c0       	push   0xc0021f28
c00171f9:	e8 3b 37 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c00171fe:	83 c4 10             	add    esp,0x10
c0017201:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017204:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017207:	8d 50 19             	lea    edx,[eax+0x19]
c001720a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001720d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017210:	eb 2b                	jmp    c001723d <opcodeFault(regs*, void*)+0x81>
c0017212:	83 ec 0c             	sub    esp,0xc
c0017215:	68 2c 1e 02 c0       	push   0xc0021e2c
c001721a:	e8 2d fe ff ff       	call   c001704c <displayProgramFault(char const*)>
c001721f:	83 c4 10             	add    esp,0x10
c0017222:	83 ec 0c             	sub    esp,0xc
c0017225:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0017228:	e8 1e fa ff ff       	call   c0016c4b <displayDebugInfo(regs*)>
c001722d:	83 c4 10             	add    esp,0x10
c0017230:	83 ec 0c             	sub    esp,0xc
c0017233:	6a 00                	push   0x0
c0017235:	e8 5e ec ff ff       	call   c0015e98 <Thr::terminateFromIRQ(int)>
c001723a:	83 c4 10             	add    esp,0x10
c001723d:	c9                   	leave  
c001723e:	c3                   	ret    

c001723f <i386SaveCoprocessor(void*)>:
c001723f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017243:	83 c0 3f             	add    eax,0x3f
c0017246:	83 e0 c0             	and    eax,0xffffffc0
c0017249:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001724d:	ff 25 10 92 02 c0    	jmp    DWORD PTR ds:0xc0029210

c0017253 <i386LoadCoprocessor(void*)>:
c0017253:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017257:	83 c0 3f             	add    eax,0x3f
c001725a:	83 e0 c0             	and    eax,0xffffffc0
c001725d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017261:	ff 25 0c 92 02 c0    	jmp    DWORD PTR ds:0xc002920c

c0017267 <x87EmulHandler(regs*, void*)>:
c0017267:	53                   	push   ebx
c0017268:	83 ec 08             	sub    esp,0x8
c001726b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017270:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0017274:	74 10                	je     c0017286 <x87EmulHandler(regs*, void*)+0x1f>
c0017276:	83 ec 0c             	sub    esp,0xc
c0017279:	68 39 1e 02 c0       	push   0xc0021e39
c001727e:	e8 18 99 ff ff       	call   c0010b9b <KePanic(char const*)>
c0017283:	83 c4 10             	add    esp,0x10
c0017286:	0f 20 c0             	mov    eax,cr0
c0017289:	a8 08                	test   al,0x8
c001728b:	74 59                	je     c00172e6 <x87EmulHandler(regs*, void*)+0x7f>
c001728d:	0f 06                	clts   
c001728f:	a1 08 92 02 c0       	mov    eax,ds:0xc0029208
c0017294:	85 c0                	test   eax,eax
c0017296:	74 0e                	je     c00172a6 <x87EmulHandler(regs*, void*)+0x3f>
c0017298:	83 ec 0c             	sub    esp,0xc
c001729b:	ff 70 55             	push   DWORD PTR [eax+0x55]
c001729e:	e8 9c ff ff ff       	call   c001723f <i386SaveCoprocessor(void*)>
c00172a3:	83 c4 10             	add    esp,0x10
c00172a6:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c00172ac:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c00172b0:	75 12                	jne    c00172c4 <x87EmulHandler(regs*, void*)+0x5d>
c00172b2:	83 ec 0c             	sub    esp,0xc
c00172b5:	68 40 02 00 00       	push   0x240
c00172ba:	e8 ef 07 ff ff       	call   c0007aae <malloc>
c00172bf:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c00172c2:	eb 10                	jmp    c00172d4 <x87EmulHandler(regs*, void*)+0x6d>
c00172c4:	83 ec 0c             	sub    esp,0xc
c00172c7:	a1 08 92 02 c0       	mov    eax,ds:0xc0029208
c00172cc:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00172cf:	e8 7f ff ff ff       	call   c0017253 <i386LoadCoprocessor(void*)>
c00172d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00172d9:	83 c4 10             	add    esp,0x10
c00172dc:	a3 08 92 02 c0       	mov    ds:0xc0029208,eax
c00172e1:	83 c4 08             	add    esp,0x8
c00172e4:	5b                   	pop    ebx
c00172e5:	c3                   	ret    
c00172e6:	83 ec 0c             	sub    esp,0xc
c00172e9:	68 4d 1e 02 c0       	push   0xc0021e4d
c00172ee:	e8 46 36 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c00172f3:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00172fb:	83 c4 18             	add    esp,0x18
c00172fe:	5b                   	pop    ebx
c00172ff:	e9 94 eb ff ff       	jmp    c0015e98 <Thr::terminateFromIRQ(int)>

c0017304 <HalInitialiseCoprocessor()>:
c0017304:	83 ec 10             	sub    esp,0x10
c0017307:	c7 05 08 92 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029208,0x0
c0017311:	6a 00                	push   0x0
c0017313:	68 67 72 01 c0       	push   0xc0017267
c0017318:	6a 07                	push   0x7
c001731a:	e8 57 52 ff ff       	call   c000c576 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001731f:	e8 dc 6f 00 00       	call   c001e300 <avxDetect>
c0017324:	83 c4 10             	add    esp,0x10
c0017327:	85 c0                	test   eax,eax
c0017329:	74 1c                	je     c0017347 <HalInitialiseCoprocessor()+0x43>
c001732b:	c7 05 10 92 02 c0 2a e3 01 c0 	mov    DWORD PTR ds:0xc0029210,0xc001e32a
c0017335:	c7 05 0c 92 02 c0 3b e3 01 c0 	mov    DWORD PTR ds:0xc002920c,0xc001e33b
c001733f:	83 c4 0c             	add    esp,0xc
c0017342:	e9 05 70 00 00       	jmp    c001e34c <avxInit>
c0017347:	e8 44 73 00 00       	call   c001e690 <absolutelyNoChanceInHell>
c001734c:	85 c0                	test   eax,eax
c001734e:	74 1c                	je     c001736c <HalInitialiseCoprocessor()+0x68>
c0017350:	c7 05 10 92 02 c0 a8 e6 01 c0 	mov    DWORD PTR ds:0xc0029210,0xc001e6a8
c001735a:	c7 05 0c 92 02 c0 b0 e6 01 c0 	mov    DWORD PTR ds:0xc002920c,0xc001e6b0
c0017364:	83 c4 0c             	add    esp,0xc
c0017367:	e9 4c 73 00 00       	jmp    c001e6b8 <sseInit>
c001736c:	e8 65 73 00 00       	call   c001e6d6 <x87Detect>
c0017371:	85 c0                	test   eax,eax
c0017373:	74 1c                	je     c0017391 <HalInitialiseCoprocessor()+0x8d>
c0017375:	c7 05 10 92 02 c0 f1 e6 01 c0 	mov    DWORD PTR ds:0xc0029210,0xc001e6f1
c001737f:	c7 05 0c 92 02 c0 f8 e6 01 c0 	mov    DWORD PTR ds:0xc002920c,0xc001e6f8
c0017389:	83 c4 0c             	add    esp,0xc
c001738c:	e9 6e 73 00 00       	jmp    c001e6ff <x87Init>
c0017391:	c7 05 10 92 02 c0 18 6c 01 c0 	mov    DWORD PTR ds:0xc0029210,0xc0016c18
c001739b:	c7 05 0c 92 02 c0 18 6c 01 c0 	mov    DWORD PTR ds:0xc002920c,0xc0016c18
c00173a5:	0f 20 c0             	mov    eax,cr0
c00173a8:	83 c8 04             	or     eax,0x4
c00173ab:	0f 22 c0             	mov    cr0,eax
c00173ae:	83 c4 0c             	add    esp,0xc
c00173b1:	c3                   	ret    

c00173b2 <HalPanic(char const*)>:
c00173b2:	53                   	push   ebx
c00173b3:	83 ec 10             	sub    esp,0x10
c00173b6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00173ba:	fa                   	cli    
c00173bb:	53                   	push   ebx
c00173bc:	68 63 1e 02 c0       	push   0xc0021e63
c00173c1:	e8 73 35 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c00173c6:	a1 04 92 02 c0       	mov    eax,ds:0xc0029204
c00173cb:	83 c4 10             	add    esp,0x10
c00173ce:	85 c0                	test   eax,eax
c00173d0:	74 09                	je     c00173db <HalPanic(char const*)+0x29>
c00173d2:	83 ec 0c             	sub    esp,0xc
c00173d5:	53                   	push   ebx
c00173d6:	ff d0                	call   eax
c00173d8:	83 c4 10             	add    esp,0x10
c00173db:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c00173e0:	85 c0                	test   eax,eax
c00173e2:	0f 84 dc 00 00 00    	je     c00174c4 <HalPanic(char const*)+0x112>
c00173e8:	52                   	push   edx
c00173e9:	6a 01                	push   0x1
c00173eb:	6a 0f                	push   0xf
c00173ed:	50                   	push   eax
c00173ee:	e8 b3 11 ff ff       	call   c00085a6 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00173f3:	59                   	pop    ecx
c00173f4:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c00173fa:	e8 97 13 ff ff       	call   c0008796 <VgaText::clearScreen()>
c00173ff:	58                   	pop    eax
c0017400:	5a                   	pop    edx
c0017401:	68 44 01 02 c0       	push   0xc0020144
c0017406:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c001740c:	e8 cd 11 ff ff       	call   c00085de <VgaText::setTitle(char*)>
c0017411:	83 c4 0c             	add    esp,0xc
c0017414:	6a 01                	push   0x1
c0017416:	6a 0f                	push   0xf
c0017418:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c001741e:	e8 83 11 ff ff       	call   c00085a6 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017423:	59                   	pop    ecx
c0017424:	58                   	pop    eax
c0017425:	68 7c 1e 02 c0       	push   0xc0021e7c
c001742a:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017430:	e8 63 16 ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c0017435:	83 c4 0c             	add    esp,0xc
c0017438:	6a 0f                	push   0xf
c001743a:	6a 01                	push   0x1
c001743c:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017442:	e8 5f 11 ff ff       	call   c00085a6 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017447:	58                   	pop    eax
c0017448:	5a                   	pop    edx
c0017449:	68 85 1e 02 c0       	push   0xc0021e85
c001744e:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017454:	e8 3f 16 ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c0017459:	83 c4 0c             	add    esp,0xc
c001745c:	6a 01                	push   0x1
c001745e:	6a 0f                	push   0xf
c0017460:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017466:	e8 3b 11 ff ff       	call   c00085a6 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001746b:	59                   	pop    ecx
c001746c:	58                   	pop    eax
c001746d:	68 c9 1e 02 c0       	push   0xc0021ec9
c0017472:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017478:	e8 1b 16 ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c001747d:	58                   	pop    eax
c001747e:	5a                   	pop    edx
c001747f:	68 92 1e 02 c0       	push   0xc0021e92
c0017484:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c001748a:	e8 09 16 ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c001748f:	59                   	pop    ecx
c0017490:	58                   	pop    eax
c0017491:	68 cc 1e 02 c0       	push   0xc0021ecc
c0017496:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c001749c:	e8 f7 15 ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c00174a1:	58                   	pop    eax
c00174a2:	5a                   	pop    edx
c00174a3:	53                   	push   ebx
c00174a4:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c00174aa:	e8 e9 15 ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c00174af:	59                   	pop    ecx
c00174b0:	5b                   	pop    ebx
c00174b1:	68 c9 1e 02 c0       	push   0xc0021ec9
c00174b6:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c00174bc:	e8 d7 15 ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c00174c1:	83 c4 10             	add    esp,0x10
c00174c4:	eb fe                	jmp    c00174c4 <HalPanic(char const*)+0x112>

c00174c6 <HalQueryPerformanceCounter()>:
c00174c6:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00174cb:	31 d2                	xor    edx,edx
c00174cd:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00174d3:	31 c0                	xor    eax,eax
c00174d5:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c00174dc:	74 02                	je     c00174e0 <HalQueryPerformanceCounter()+0x1a>
c00174de:	0f 31                	rdtsc  
c00174e0:	c3                   	ret    

c00174e1 <HalInitialise()>:
c00174e1:	53                   	push   ebx
c00174e2:	83 ec 08             	sub    esp,0x8
c00174e5:	e8 bc 52 ff ff       	call   c000c7a6 <setupINTS()>
c00174ea:	80 3d 80 87 02 c0 00 	cmp    BYTE PTR ds:0xc0028780,0x0
c00174f1:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00174f6:	75 0f                	jne    c0017507 <HalInitialise()+0x26>
c00174f8:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c00174fe:	83 e2 fe             	and    edx,0xfffffffe
c0017501:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017507:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001750d:	c6 05 00 92 02 c0 00 	mov    BYTE PTR ds:0xc0029200,0x0
c0017514:	83 e2 fe             	and    edx,0xfffffffe
c0017517:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001751d:	e8 9e 02 00 00       	call   c00177c0 <picOpen()>
c0017522:	80 3d 00 92 02 c0 00 	cmp    BYTE PTR ds:0xc0029200,0x0
c0017529:	74 0a                	je     c0017535 <HalInitialise()+0x54>
c001752b:	e8 e0 01 00 00       	call   c0017710 <picDisable()>
c0017530:	e8 3d 67 00 00       	call   c001dc72 <apicOpen()>
c0017535:	bb 0f 00 00 00       	mov    ebx,0xf
c001753a:	50                   	push   eax
c001753b:	6a 00                	push   0x0
c001753d:	68 88 71 01 c0       	push   0xc0017188
c0017542:	6a 00                	push   0x0
c0017544:	e8 2d 50 ff ff       	call   c000c576 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017549:	83 c4 0c             	add    esp,0xc
c001754c:	6a 00                	push   0x0
c001754e:	68 88 71 01 c0       	push   0xc0017188
c0017553:	6a 01                	push   0x1
c0017555:	e8 1c 50 ff ff       	call   c000c576 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001755a:	83 c4 0c             	add    esp,0xc
c001755d:	6a 00                	push   0x0
c001755f:	68 19 6c 01 c0       	push   0xc0016c19
c0017564:	6a 02                	push   0x2
c0017566:	e8 0b 50 ff ff       	call   c000c576 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001756b:	83 c4 0c             	add    esp,0xc
c001756e:	6a 00                	push   0x0
c0017570:	68 88 71 01 c0       	push   0xc0017188
c0017575:	6a 03                	push   0x3
c0017577:	e8 fa 4f ff ff       	call   c000c576 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001757c:	83 c4 0c             	add    esp,0xc
c001757f:	6a 00                	push   0x0
c0017581:	68 88 71 01 c0       	push   0xc0017188
c0017586:	6a 04                	push   0x4
c0017588:	e8 e9 4f ff ff       	call   c000c576 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001758d:	83 c4 0c             	add    esp,0xc
c0017590:	6a 00                	push   0x0
c0017592:	68 88 71 01 c0       	push   0xc0017188
c0017597:	6a 05                	push   0x5
c0017599:	e8 d8 4f ff ff       	call   c000c576 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001759e:	83 c4 0c             	add    esp,0xc
c00175a1:	6a 00                	push   0x0
c00175a3:	68 bc 71 01 c0       	push   0xc00171bc
c00175a8:	6a 06                	push   0x6
c00175aa:	e8 c7 4f ff ff       	call   c000c576 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00175af:	83 c4 0c             	add    esp,0xc
c00175b2:	6a 00                	push   0x0
c00175b4:	68 32 6c 01 c0       	push   0xc0016c32
c00175b9:	6a 08                	push   0x8
c00175bb:	e8 b6 4f ff ff       	call   c000c576 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00175c0:	83 c4 0c             	add    esp,0xc
c00175c3:	6a 00                	push   0x0
c00175c5:	68 88 71 01 c0       	push   0xc0017188
c00175ca:	6a 09                	push   0x9
c00175cc:	e8 a5 4f ff ff       	call   c000c576 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00175d1:	83 c4 0c             	add    esp,0xc
c00175d4:	6a 00                	push   0x0
c00175d6:	68 88 71 01 c0       	push   0xc0017188
c00175db:	6a 0a                	push   0xa
c00175dd:	e8 94 4f ff ff       	call   c000c576 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00175e2:	83 c4 0c             	add    esp,0xc
c00175e5:	6a 00                	push   0x0
c00175e7:	68 88 71 01 c0       	push   0xc0017188
c00175ec:	6a 0b                	push   0xb
c00175ee:	e8 83 4f ff ff       	call   c000c576 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00175f3:	83 c4 0c             	add    esp,0xc
c00175f6:	6a 00                	push   0x0
c00175f8:	68 98 70 01 c0       	push   0xc0017098
c00175fd:	6a 0d                	push   0xd
c00175ff:	e8 72 4f ff ff       	call   c000c576 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017604:	83 c4 0c             	add    esp,0xc
c0017607:	6a 00                	push   0x0
c0017609:	68 ff 70 01 c0       	push   0xc00170ff
c001760e:	6a 0e                	push   0xe
c0017610:	e8 61 4f ff ff       	call   c000c576 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017615:	83 c4 10             	add    esp,0x10
c0017618:	50                   	push   eax
c0017619:	6a 00                	push   0x0
c001761b:	68 88 71 01 c0       	push   0xc0017188
c0017620:	53                   	push   ebx
c0017621:	43                   	inc    ebx
c0017622:	e8 4f 4f ff ff       	call   c000c576 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017627:	83 c4 10             	add    esp,0x10
c001762a:	83 fb 1e             	cmp    ebx,0x1e
c001762d:	75 e9                	jne    c0017618 <HalInitialise()+0x137>
c001762f:	50                   	push   eax
c0017630:	6a 00                	push   0x0
c0017632:	68 85 1e 01 c0       	push   0xc0011e85
c0017637:	6a 60                	push   0x60
c0017639:	e8 38 4f ff ff       	call   c000c576 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001763e:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017643:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c001764d:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0017654:	e8 55 04 ff ff       	call   c0007aae <malloc>
c0017659:	89 04 24             	mov    DWORD PTR [esp],eax
c001765c:	89 c3                	mov    ebx,eax
c001765e:	e8 3b 09 00 00       	call   c0017f9e <RTC::RTC()>
c0017663:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001766d:	5a                   	pop    edx
c001766e:	59                   	pop    ecx
c001766f:	53                   	push   ebx
c0017670:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017676:	e8 c7 49 ff ff       	call   c000c042 <Device::addChild(Device*)>
c001767b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001767d:	6a 00                	push   0x0
c001767f:	6a 00                	push   0x0
c0017681:	6a 00                	push   0x0
c0017683:	53                   	push   ebx
c0017684:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017687:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001768c:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0017692:	83 c4 28             	add    esp,0x28
c0017695:	5b                   	pop    ebx
c0017696:	c3                   	ret    

c0017697 <HalMakeBeep(int)>:
c0017697:	53                   	push   ebx
c0017698:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001769c:	85 db                	test   ebx,ebx
c001769e:	75 07                	jne    c00176a7 <HalMakeBeep(int)+0x10>
c00176a0:	e4 61                	in     al,0x61
c00176a2:	83 e0 fc             	and    eax,0xfffffffc
c00176a5:	eb 26                	jmp    c00176cd <HalMakeBeep(int)+0x36>
c00176a7:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00176ac:	99                   	cdq    
c00176ad:	f7 fb                	idiv   ebx
c00176af:	89 c1                	mov    ecx,eax
c00176b1:	b0 b6                	mov    al,0xb6
c00176b3:	e6 43                	out    0x43,al
c00176b5:	88 c8                	mov    al,cl
c00176b7:	e6 42                	out    0x42,al
c00176b9:	89 c8                	mov    eax,ecx
c00176bb:	c1 e8 08             	shr    eax,0x8
c00176be:	e6 42                	out    0x42,al
c00176c0:	e4 61                	in     al,0x61
c00176c2:	89 c2                	mov    edx,eax
c00176c4:	83 ca 03             	or     edx,0x3
c00176c7:	38 d0                	cmp    al,dl
c00176c9:	74 04                	je     c00176cf <HalMakeBeep(int)+0x38>
c00176cb:	88 d0                	mov    al,dl
c00176cd:	e6 61                	out    0x61,al
c00176cf:	5b                   	pop    ebx
c00176d0:	c3                   	ret    

c00176d1 <HalGetRand()>:
c00176d1:	31 c0                	xor    eax,eax
c00176d3:	c3                   	ret    

c00176d4 <HalEndOfInterrupt(int)>:
c00176d4:	80 3d 00 92 02 c0 00 	cmp    BYTE PTR ds:0xc0029200,0x0
c00176db:	74 23                	je     c0017700 <HalEndOfInterrupt(int)+0x2c>
c00176dd:	83 ec 14             	sub    esp,0x14
c00176e0:	6a 1b                	push   0x1b
c00176e2:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00176e8:	e8 cb f9 fe ff       	call   c00070b8 <Computer::rdmsr(unsigned int)>
c00176ed:	25 00 f0 ff ff       	and    eax,0xfffff000
c00176f2:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c00176fc:	83 c4 1c             	add    esp,0x1c
c00176ff:	c3                   	ret    
c0017700:	e9 3f 02 00 00       	jmp    c0017944 <picEOI(int)>

c0017705 <HalRestart()>:
c0017705:	c3                   	ret    

c0017706 <HalShutdown()>:
c0017706:	c3                   	ret    

c0017707 <HalSleep()>:
c0017707:	c3                   	ret    

c0017708 <picIoWait()>:
c0017708:	eb 00                	jmp    c001770a <picIoWait()+0x2>
c001770a:	eb 00                	jmp    c001770c <picIoWait()+0x4>
c001770c:	90                   	nop
c001770d:	c3                   	ret    
c001770e:	66 90                	xchg   ax,ax

c0017710 <picDisable()>:
c0017710:	83 ec 10             	sub    esp,0x10
c0017713:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001771a:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001771f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017723:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0017728:	ee                   	out    dx,al
c0017729:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0017730:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0017735:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017739:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001773e:	ee                   	out    dx,al
c001773f:	90                   	nop
c0017740:	83 c4 10             	add    esp,0x10
c0017743:	c3                   	ret    

c0017744 <picGetIRQReg(int)>:
c0017744:	83 ec 10             	sub    esp,0x10
c0017747:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001774b:	0f b6 c0             	movzx  eax,al
c001774e:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0017755:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0017759:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001775d:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0017762:	ee                   	out    dx,al
c0017763:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017767:	0f b6 c0             	movzx  eax,al
c001776a:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0017771:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0017775:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0017779:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001777e:	ee                   	out    dx,al
c001777f:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0017786:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001778b:	89 c2                	mov    edx,eax
c001778d:	ec                   	in     al,dx
c001778e:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017792:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017796:	0f b6 c0             	movzx  eax,al
c0017799:	c1 e0 08             	shl    eax,0x8
c001779c:	89 c1                	mov    ecx,eax
c001779e:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c00177a5:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00177aa:	89 c2                	mov    edx,eax
c00177ac:	ec                   	in     al,dx
c00177ad:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00177b1:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00177b5:	0f b6 c0             	movzx  eax,al
c00177b8:	09 c8                	or     eax,ecx
c00177ba:	83 c4 10             	add    esp,0x10
c00177bd:	c3                   	ret    
c00177be:	66 90                	xchg   ax,ax

c00177c0 <picOpen()>:
c00177c0:	83 ec 50             	sub    esp,0x50
c00177c3:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c00177ca:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00177cf:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00177d3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00177d7:	ee                   	out    dx,al
c00177d8:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c00177df:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00177e4:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00177e8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00177ec:	ee                   	out    dx,al
c00177ed:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c00177f5:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c00177fd:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0017804:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017808:	89 c2                	mov    edx,eax
c001780a:	ec                   	in     al,dx
c001780b:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001780f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0017813:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0017817:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001781e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017822:	89 c2                	mov    edx,eax
c0017824:	ec                   	in     al,dx
c0017825:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0017829:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001782d:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0017831:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0017838:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c001783d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017841:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017845:	ee                   	out    dx,al
c0017846:	e8 bd fe ff ff       	call   c0017708 <picIoWait()>
c001784b:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0017852:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0017857:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001785b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001785f:	ee                   	out    dx,al
c0017860:	e8 a3 fe ff ff       	call   c0017708 <picIoWait()>
c0017865:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017869:	0f b6 c0             	movzx  eax,al
c001786c:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0017873:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0017877:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c001787b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001787f:	ee                   	out    dx,al
c0017880:	e8 83 fe ff ff       	call   c0017708 <picIoWait()>
c0017885:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017889:	0f b6 c0             	movzx  eax,al
c001788c:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0017893:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0017897:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001789b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001789f:	ee                   	out    dx,al
c00178a0:	e8 63 fe ff ff       	call   c0017708 <picIoWait()>
c00178a5:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c00178ac:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c00178b1:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c00178b5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00178b9:	ee                   	out    dx,al
c00178ba:	e8 49 fe ff ff       	call   c0017708 <picIoWait()>
c00178bf:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c00178c6:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c00178cb:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c00178cf:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00178d3:	ee                   	out    dx,al
c00178d4:	e8 2f fe ff ff       	call   c0017708 <picIoWait()>
c00178d9:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c00178e0:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c00178e5:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c00178e9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00178ed:	ee                   	out    dx,al
c00178ee:	e8 15 fe ff ff       	call   c0017708 <picIoWait()>
c00178f3:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c00178fa:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c00178ff:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0017903:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017907:	ee                   	out    dx,al
c0017908:	e8 fb fd ff ff       	call   c0017708 <picIoWait()>
c001790d:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c0017912:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0017919:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c001791d:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0017921:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017925:	ee                   	out    dx,al
c0017926:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c001792b:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0017932:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0017936:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c001793a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001793e:	ee                   	out    dx,al
c001793f:	90                   	nop
c0017940:	83 c4 50             	add    esp,0x50
c0017943:	c3                   	ret    

c0017944 <picEOI(int)>:
c0017944:	83 ec 10             	sub    esp,0x10
c0017947:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001794c:	75 1e                	jne    c001796c <picEOI(int)+0x28>
c001794e:	6a 0b                	push   0xb
c0017950:	e8 ef fd ff ff       	call   c0017744 <picGetIRQReg(int)>
c0017955:	83 c4 04             	add    esp,0x4
c0017958:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001795d:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0017962:	25 80 00 00 00       	and    eax,0x80
c0017967:	74 73                	je     c00179dc <picEOI(int)+0x98>
c0017969:	8d 76 00             	lea    esi,[esi+0x0]
c001796c:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0017971:	75 31                	jne    c00179a4 <picEOI(int)+0x60>
c0017973:	6a 0b                	push   0xb
c0017975:	e8 ca fd ff ff       	call   c0017744 <picGetIRQReg(int)>
c001797a:	83 c4 04             	add    esp,0x4
c001797d:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017982:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017986:	98                   	cwde   
c0017987:	85 c0                	test   eax,eax
c0017989:	78 19                	js     c00179a4 <picEOI(int)+0x60>
c001798b:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0017992:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0017997:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001799b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00179a0:	ee                   	out    dx,al
c00179a1:	eb 3d                	jmp    c00179e0 <picEOI(int)+0x9c>
c00179a3:	90                   	nop
c00179a4:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00179a9:	7e 19                	jle    c00179c4 <picEOI(int)+0x80>
c00179ab:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00179b2:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c00179b7:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00179bb:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00179c0:	ee                   	out    dx,al
c00179c1:	8d 76 00             	lea    esi,[esi+0x0]
c00179c4:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00179cb:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c00179d0:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00179d4:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00179d9:	ee                   	out    dx,al
c00179da:	eb 04                	jmp    c00179e0 <picEOI(int)+0x9c>
c00179dc:	90                   	nop
c00179dd:	8d 76 00             	lea    esi,[esi+0x0]
c00179e0:	83 c4 10             	add    esp,0x10
c00179e3:	c3                   	ret    

c00179e4 <RTC::open(int, int, void*)>:
c00179e4:	31 c0                	xor    eax,eax
c00179e6:	c3                   	ret    
c00179e7:	90                   	nop

c00179e8 <RTC::close(int, int, void*)>:
c00179e8:	31 c0                	xor    eax,eax
c00179ea:	c3                   	ret    
c00179eb:	90                   	nop

c00179ec <RTC::timeInSecondsUTC()>:
c00179ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00179f0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00179f6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00179fc:	c3                   	ret    
c00179fd:	90                   	nop

c00179fe <RTC::timeInDatetimeUTC()>:
c00179fe:	53                   	push   ebx
c00179ff:	83 ec 14             	sub    esp,0x14
c0017a02:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0017a06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a0a:	8b 10                	mov    edx,DWORD PTR [eax]
c0017a0c:	50                   	push   eax
c0017a0d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0017a10:	83 c4 0c             	add    esp,0xc
c0017a13:	52                   	push   edx
c0017a14:	50                   	push   eax
c0017a15:	53                   	push   ebx
c0017a16:	e8 9b 43 ff ff       	call   c000bdb6 <secondsToDatetime(unsigned long long)>
c0017a1b:	89 d8                	mov    eax,ebx
c0017a1d:	83 c4 14             	add    esp,0x14
c0017a20:	5b                   	pop    ebx
c0017a21:	c2 04 00             	ret    0x4

c0017a24 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0017a24:	56                   	push   esi
c0017a25:	53                   	push   ebx
c0017a26:	83 ec 14             	sub    esp,0x14
c0017a29:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017a2d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017a2f:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0017a32:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017a36:	52                   	push   edx
c0017a37:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a3b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a3f:	50                   	push   eax
c0017a40:	e8 71 43 ff ff       	call   c000bdb6 <secondsToDatetime(unsigned long long)>
c0017a45:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017a49:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017a4d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017a51:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0017a55:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0017a59:	89 f0                	mov    eax,esi
c0017a5b:	83 c4 20             	add    esp,0x20
c0017a5e:	5b                   	pop    ebx
c0017a5f:	5e                   	pop    esi
c0017a60:	ff e0                	jmp    eax

c0017a62 <RTC::~RTC()>:
c0017a62:	83 ec 0c             	sub    esp,0xc
c0017a65:	ba 68 1f 02 c0       	mov    edx,0xc0021f68
c0017a6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a6e:	89 10                	mov    DWORD PTR [eax],edx
c0017a70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a74:	83 ec 0c             	sub    esp,0xc
c0017a77:	50                   	push   eax
c0017a78:	e8 cb 40 ff ff       	call   c000bb48 <Clock::~Clock()>
c0017a7d:	83 c4 10             	add    esp,0x10
c0017a80:	90                   	nop
c0017a81:	83 c4 0c             	add    esp,0xc
c0017a84:	c3                   	ret    
c0017a85:	90                   	nop

c0017a86 <RTC::~RTC()>:
c0017a86:	83 ec 0c             	sub    esp,0xc
c0017a89:	83 ec 0c             	sub    esp,0xc
c0017a8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a90:	e8 cd ff ff ff       	call   c0017a62 <RTC::~RTC()>
c0017a95:	83 c4 10             	add    esp,0x10
c0017a98:	83 ec 08             	sub    esp,0x8
c0017a9b:	68 60 01 00 00       	push   0x160
c0017aa0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017aa4:	e8 63 2d ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0017aa9:	83 c4 10             	add    esp,0x10
c0017aac:	83 c4 0c             	add    esp,0xc
c0017aaf:	c3                   	ret    

c0017ab0 <RTC::get_update_in_progress_flag()>:
c0017ab0:	83 ec 14             	sub    esp,0x14
c0017ab3:	6a 0a                	push   0xa
c0017ab5:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017abb:	e8 b0 f6 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017ac0:	83 c4 1c             	add    esp,0x1c
c0017ac3:	0f b6 c0             	movzx  eax,al
c0017ac6:	c1 e8 07             	shr    eax,0x7
c0017ac9:	c3                   	ret    

c0017aca <RTC::completeRTCRefresh()>:
c0017aca:	55                   	push   ebp
c0017acb:	57                   	push   edi
c0017acc:	56                   	push   esi
c0017acd:	53                   	push   ebx
c0017ace:	83 ec 3c             	sub    esp,0x3c
c0017ad1:	8b 1d 8c 84 02 c0    	mov    ebx,DWORD PTR ds:0xc002848c
c0017ad7:	83 ec 0c             	sub    esp,0xc
c0017ada:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0017ade:	e8 cd ff ff ff       	call   c0017ab0 <RTC::get_update_in_progress_flag()>
c0017ae3:	83 c4 10             	add    esp,0x10
c0017ae6:	84 c0                	test   al,al
c0017ae8:	74 0e                	je     c0017af8 <RTC::completeRTCRefresh()+0x2e>
c0017aea:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0017af0:	3b 05 8c 84 02 c0    	cmp    eax,DWORD PTR ds:0xc002848c
c0017af6:	73 df                	jae    c0017ad7 <RTC::completeRTCRefresh()+0xd>
c0017af8:	51                   	push   ecx
c0017af9:	51                   	push   ecx
c0017afa:	6a 00                	push   0x0
c0017afc:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017b02:	e8 69 f6 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017b07:	5b                   	pop    ebx
c0017b08:	89 c7                	mov    edi,eax
c0017b0a:	5e                   	pop    esi
c0017b0b:	6a 02                	push   0x2
c0017b0d:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017b13:	e8 58 f6 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017b18:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0017b1c:	5d                   	pop    ebp
c0017b1d:	58                   	pop    eax
c0017b1e:	6a 04                	push   0x4
c0017b20:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017b26:	e8 45 f6 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017b2b:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0017b2f:	58                   	pop    eax
c0017b30:	5a                   	pop    edx
c0017b31:	6a 07                	push   0x7
c0017b33:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017b39:	e8 32 f6 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017b3e:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0017b42:	59                   	pop    ecx
c0017b43:	5b                   	pop    ebx
c0017b44:	6a 08                	push   0x8
c0017b46:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017b4c:	e8 1f f6 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017b51:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0017b55:	5e                   	pop    esi
c0017b56:	5d                   	pop    ebp
c0017b57:	6a 09                	push   0x9
c0017b59:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017b5f:	e8 0c f6 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017b64:	0f b6 c0             	movzx  eax,al
c0017b67:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017b6b:	83 c4 10             	add    esp,0x10
c0017b6e:	8b 1d 8c 84 02 c0    	mov    ebx,DWORD PTR ds:0xc002848c
c0017b74:	83 ec 0c             	sub    esp,0xc
c0017b77:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0017b7b:	e8 30 ff ff ff       	call   c0017ab0 <RTC::get_update_in_progress_flag()>
c0017b80:	83 c4 10             	add    esp,0x10
c0017b83:	84 c0                	test   al,al
c0017b85:	74 0e                	je     c0017b95 <RTC::completeRTCRefresh()+0xcb>
c0017b87:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0017b8d:	3b 05 8c 84 02 c0    	cmp    eax,DWORD PTR ds:0xc002848c
c0017b93:	73 df                	jae    c0017b74 <RTC::completeRTCRefresh()+0xaa>
c0017b95:	51                   	push   ecx
c0017b96:	51                   	push   ecx
c0017b97:	6a 00                	push   0x0
c0017b99:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017b9f:	e8 cc f5 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017ba4:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0017ba8:	5b                   	pop    ebx
c0017ba9:	5e                   	pop    esi
c0017baa:	6a 02                	push   0x2
c0017bac:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017bb2:	e8 b9 f5 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017bb7:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0017bbb:	5d                   	pop    ebp
c0017bbc:	58                   	pop    eax
c0017bbd:	6a 04                	push   0x4
c0017bbf:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017bc5:	e8 a6 f5 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017bca:	88 c3                	mov    bl,al
c0017bcc:	58                   	pop    eax
c0017bcd:	5a                   	pop    edx
c0017bce:	6a 07                	push   0x7
c0017bd0:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017bd6:	e8 95 f5 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017bdb:	59                   	pop    ecx
c0017bdc:	89 c6                	mov    esi,eax
c0017bde:	5d                   	pop    ebp
c0017bdf:	6a 08                	push   0x8
c0017be1:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017be7:	e8 84 f5 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017bec:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017bf0:	58                   	pop    eax
c0017bf1:	5a                   	pop    edx
c0017bf2:	6a 09                	push   0x9
c0017bf4:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017bfa:	e8 71 f5 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017bff:	89 f9                	mov    ecx,edi
c0017c01:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0017c05:	0f b6 e8             	movzx  ebp,al
c0017c08:	83 c4 10             	add    esp,0x10
c0017c0b:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c0017c0f:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017c14:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c0017c19:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0017c1d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017c21:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0017c25:	0f 94 c0             	sete   al
c0017c28:	0f b6 fb             	movzx  edi,bl
c0017c2b:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c0017c2f:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c0017c34:	0f 94 c2             	sete   dl
c0017c37:	21 d0                	and    eax,edx
c0017c39:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c0017c3d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0017c41:	0f 94 c2             	sete   dl
c0017c44:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0017c48:	21 c2                	and    edx,eax
c0017c4a:	89 f0                	mov    eax,esi
c0017c4c:	0f b6 c0             	movzx  eax,al
c0017c4f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017c53:	89 f0                	mov    eax,esi
c0017c55:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c0017c59:	0f 94 c0             	sete   al
c0017c5c:	21 d0                	and    eax,edx
c0017c5e:	31 d2                	xor    edx,edx
c0017c60:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0017c64:	0f 94 c2             	sete   dl
c0017c67:	85 c2                	test   edx,eax
c0017c69:	75 27                	jne    c0017c92 <RTC::completeRTCRefresh()+0x1c8>
c0017c6b:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0017c6f:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c0017c73:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017c77:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c0017c7b:	89 f0                	mov    eax,esi
c0017c7d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0017c81:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017c85:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017c89:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0017c8d:	e9 dc fe ff ff       	jmp    c0017b6e <RTC::completeRTCRefresh()+0xa4>
c0017c92:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c0017c96:	75 d3                	jne    c0017c6b <RTC::completeRTCRefresh()+0x1a1>
c0017c98:	52                   	push   edx
c0017c99:	52                   	push   edx
c0017c9a:	6a 0b                	push   0xb
c0017c9c:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017ca2:	e8 c9 f4 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017ca7:	83 c4 10             	add    esp,0x10
c0017caa:	a8 04                	test   al,0x4
c0017cac:	75 7a                	jne    c0017d28 <RTC::completeRTCRefresh()+0x25e>
c0017cae:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017cb2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017cb6:	83 e1 0f             	and    ecx,0xf
c0017cb9:	c1 ea 04             	shr    edx,0x4
c0017cbc:	c1 ef 04             	shr    edi,0x4
c0017cbf:	6b d2 0a             	imul   edx,edx,0xa
c0017cc2:	83 e6 0f             	and    esi,0xf
c0017cc5:	01 d1                	add    ecx,edx
c0017cc7:	c1 ed 04             	shr    ebp,0x4
c0017cca:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0017cce:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017cd2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017cd6:	c1 ea 04             	shr    edx,0x4
c0017cd9:	83 e1 0f             	and    ecx,0xf
c0017cdc:	6b d2 0a             	imul   edx,edx,0xa
c0017cdf:	6b ed 0a             	imul   ebp,ebp,0xa
c0017ce2:	01 d1                	add    ecx,edx
c0017ce4:	89 fa                	mov    edx,edi
c0017ce6:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017cea:	83 e2 07             	and    edx,0x7
c0017ced:	89 d9                	mov    ecx,ebx
c0017cef:	6b d2 0a             	imul   edx,edx,0xa
c0017cf2:	83 e1 0f             	and    ecx,0xf
c0017cf5:	83 e3 80             	and    ebx,0xffffff80
c0017cf8:	01 d1                	add    ecx,edx
c0017cfa:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017cfe:	09 cb                	or     ebx,ecx
c0017d00:	c1 ea 04             	shr    edx,0x4
c0017d03:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017d07:	6b d2 0a             	imul   edx,edx,0xa
c0017d0a:	83 e1 0f             	and    ecx,0xf
c0017d0d:	01 d6                	add    esi,edx
c0017d0f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017d13:	c1 ea 04             	shr    edx,0x4
c0017d16:	6b d2 0a             	imul   edx,edx,0xa
c0017d19:	01 d1                	add    ecx,edx
c0017d1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017d1f:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0017d23:	83 e2 0f             	and    edx,0xf
c0017d26:	01 d5                	add    ebp,edx
c0017d28:	a8 02                	test   al,0x2
c0017d2a:	75 15                	jne    c0017d41 <RTC::completeRTCRefresh()+0x277>
c0017d2c:	f6 c3 80             	test   bl,0x80
c0017d2f:	74 10                	je     c0017d41 <RTC::completeRTCRefresh()+0x277>
c0017d31:	83 e3 7f             	and    ebx,0x7f
c0017d34:	b9 18 00 00 00       	mov    ecx,0x18
c0017d39:	8d 43 0c             	lea    eax,[ebx+0xc]
c0017d3c:	99                   	cdq    
c0017d3d:	f7 f9                	idiv   ecx
c0017d3f:	88 d3                	mov    bl,dl
c0017d41:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c0017d47:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c0017d4d:	77 06                	ja     c0017d55 <RTC::completeRTCRefresh()+0x28b>
c0017d4f:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c0017d55:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017d5a:	31 c9                	xor    ecx,ecx
c0017d5c:	c1 e0 10             	shl    eax,0x10
c0017d5f:	89 cd                	mov    ebp,ecx
c0017d61:	c1 e7 10             	shl    edi,0x10
c0017d64:	31 d2                	xor    edx,edx
c0017d66:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0017d6c:	09 c5                	or     ebp,eax
c0017d6e:	89 f0                	mov    eax,esi
c0017d70:	89 e9                	mov    ecx,ebp
c0017d72:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017d76:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c0017d7a:	88 c2                	mov    dl,al
c0017d7c:	88 d9                	mov    cl,bl
c0017d7e:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c0017d82:	0f b7 c2             	movzx  eax,dx
c0017d85:	09 f8                	or     eax,edi
c0017d87:	89 c2                	mov    edx,eax
c0017d89:	50                   	push   eax
c0017d8a:	50                   	push   eax
c0017d8b:	51                   	push   ecx
c0017d8c:	52                   	push   edx
c0017d8d:	e8 a5 3e ff ff       	call   c000bc37 <datetimeToSeconds(datetime_t)>
c0017d92:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0017d96:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0017d9c:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0017da2:	83 c4 4c             	add    esp,0x4c
c0017da5:	5b                   	pop    ebx
c0017da6:	5e                   	pop    esi
c0017da7:	5f                   	pop    edi
c0017da8:	5d                   	pop    ebp
c0017da9:	c3                   	ret    

c0017daa <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0017daa:	55                   	push   ebp
c0017dab:	57                   	push   edi
c0017dac:	56                   	push   esi
c0017dad:	53                   	push   ebx
c0017dae:	83 ec 30             	sub    esp,0x30
c0017db1:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0017db5:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0017db9:	6a 00                	push   0x0
c0017dbb:	6a 00                	push   0x0
c0017dbd:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017dc3:	e8 c2 f4 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017dc8:	83 c4 0c             	add    esp,0xc
c0017dcb:	6a 00                	push   0x0
c0017dcd:	6a 02                	push   0x2
c0017dcf:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017dd5:	e8 b0 f4 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017dda:	31 d2                	xor    edx,edx
c0017ddc:	89 f9                	mov    ecx,edi
c0017dde:	89 f8                	mov    eax,edi
c0017de0:	c1 e9 10             	shr    ecx,0x10
c0017de3:	0f b6 c4             	movzx  eax,ah
c0017de6:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c0017dea:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0017dee:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017df2:	b9 64 00 00 00       	mov    ecx,0x64
c0017df7:	89 f0                	mov    eax,esi
c0017df9:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017dfd:	89 f0                	mov    eax,esi
c0017dff:	0f b6 c4             	movzx  eax,ah
c0017e02:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017e06:	89 f0                	mov    eax,esi
c0017e08:	c1 e8 10             	shr    eax,0x10
c0017e0b:	f7 f1                	div    ecx
c0017e0d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0017e11:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0017e15:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0017e19:	59                   	pop    ecx
c0017e1a:	5b                   	pop    ebx
c0017e1b:	89 fb                	mov    ebx,edi
c0017e1d:	6a 0b                	push   0xb
c0017e1f:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017e25:	e8 46 f3 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017e2a:	83 c4 10             	add    esp,0x10
c0017e2d:	89 c5                	mov    ebp,eax
c0017e2f:	a8 04                	test   al,0x4
c0017e31:	75 6e                	jne    c0017ea1 <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c0017e33:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017e37:	31 d2                	xor    edx,edx
c0017e39:	0f b6 c1             	movzx  eax,cl
c0017e3c:	b9 0a 00 00 00       	mov    ecx,0xa
c0017e41:	f7 f1                	div    ecx
c0017e43:	c1 e0 04             	shl    eax,0x4
c0017e46:	09 d0                	or     eax,edx
c0017e48:	31 d2                	xor    edx,edx
c0017e4a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017e4e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0017e53:	f7 f1                	div    ecx
c0017e55:	c1 e0 04             	shl    eax,0x4
c0017e58:	09 d0                	or     eax,edx
c0017e5a:	31 d2                	xor    edx,edx
c0017e5c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017e60:	0f b6 c3             	movzx  eax,bl
c0017e63:	f7 f1                	div    ecx
c0017e65:	c1 e0 04             	shl    eax,0x4
c0017e68:	09 d0                	or     eax,edx
c0017e6a:	31 d2                	xor    edx,edx
c0017e6c:	89 c3                	mov    ebx,eax
c0017e6e:	89 f0                	mov    eax,esi
c0017e70:	0f b6 c0             	movzx  eax,al
c0017e73:	f7 f1                	div    ecx
c0017e75:	c1 e0 04             	shl    eax,0x4
c0017e78:	09 d0                	or     eax,edx
c0017e7a:	31 d2                	xor    edx,edx
c0017e7c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017e80:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017e85:	f7 f1                	div    ecx
c0017e87:	c1 e0 04             	shl    eax,0x4
c0017e8a:	09 d0                	or     eax,edx
c0017e8c:	31 d2                	xor    edx,edx
c0017e8e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017e92:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017e96:	f7 f1                	div    ecx
c0017e98:	c1 e0 04             	shl    eax,0x4
c0017e9b:	09 d0                	or     eax,edx
c0017e9d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017ea1:	83 e5 02             	and    ebp,0x2
c0017ea4:	75 1e                	jne    c0017ec4 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0017ea6:	0f b6 c3             	movzx  eax,bl
c0017ea9:	83 f8 0b             	cmp    eax,0xb
c0017eac:	76 10                	jbe    c0017ebe <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0017eae:	8d 53 f4             	lea    edx,[ebx-0xc]
c0017eb1:	88 d3                	mov    bl,dl
c0017eb3:	84 d2                	test   dl,dl
c0017eb5:	75 02                	jne    c0017eb9 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0017eb7:	b3 0c                	mov    bl,0xc
c0017eb9:	83 cb 80             	or     ebx,0xffffff80
c0017ebc:	eb 06                	jmp    c0017ec4 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0017ebe:	85 c0                	test   eax,eax
c0017ec0:	75 02                	jne    c0017ec4 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0017ec2:	b3 0c                	mov    bl,0xc
c0017ec4:	0f b6 db             	movzx  ebx,bl
c0017ec7:	50                   	push   eax
c0017ec8:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0017ecd:	52                   	push   edx
c0017ece:	6a 00                	push   0x0
c0017ed0:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017ed6:	e8 af f3 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017edb:	83 c4 0c             	add    esp,0xc
c0017ede:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017ee3:	50                   	push   eax
c0017ee4:	6a 02                	push   0x2
c0017ee6:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017eec:	e8 99 f3 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017ef1:	83 c4 0c             	add    esp,0xc
c0017ef4:	53                   	push   ebx
c0017ef5:	6a 04                	push   0x4
c0017ef7:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017efd:	e8 88 f3 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017f02:	83 c4 0c             	add    esp,0xc
c0017f05:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0017f0a:	52                   	push   edx
c0017f0b:	6a 07                	push   0x7
c0017f0d:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017f13:	e8 72 f3 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017f18:	83 c4 0c             	add    esp,0xc
c0017f1b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017f20:	50                   	push   eax
c0017f21:	6a 08                	push   0x8
c0017f23:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017f29:	e8 5c f3 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017f2e:	83 c4 0c             	add    esp,0xc
c0017f31:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0017f36:	55                   	push   ebp
c0017f37:	6a 09                	push   0x9
c0017f39:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017f3f:	e8 46 f3 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017f44:	5a                   	pop    edx
c0017f45:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017f49:	e8 7c fb ff ff       	call   c0017aca <RTC::completeRTCRefresh()>
c0017f4e:	83 c4 3c             	add    esp,0x3c
c0017f51:	b0 01                	mov    al,0x1
c0017f53:	5b                   	pop    ebx
c0017f54:	5e                   	pop    esi
c0017f55:	5f                   	pop    edi
c0017f56:	5d                   	pop    ebp
c0017f57:	c3                   	ret    

c0017f58 <rtcIRQHandler(regs*, void*)>:
c0017f58:	53                   	push   ebx
c0017f59:	83 ec 10             	sub    esp,0x10
c0017f5c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0017f60:	6a 0c                	push   0xc
c0017f62:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017f68:	e8 03 f2 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017f6d:	83 c4 10             	add    esp,0x10
c0017f70:	a8 80                	test   al,0x80
c0017f72:	74 24                	je     c0017f98 <rtcIRQHandler(regs*, void*)+0x40>
c0017f74:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0017f7b:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0017f82:	66 ff 05 18 92 02 c0 	inc    WORD PTR ds:0xc0029218
c0017f89:	75 0d                	jne    c0017f98 <rtcIRQHandler(regs*, void*)+0x40>
c0017f8b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017f8f:	83 c4 08             	add    esp,0x8
c0017f92:	5b                   	pop    ebx
c0017f93:	e9 32 fb ff ff       	jmp    c0017aca <RTC::completeRTCRefresh()>
c0017f98:	83 c4 08             	add    esp,0x8
c0017f9b:	5b                   	pop    ebx
c0017f9c:	c3                   	ret    
c0017f9d:	90                   	nop

c0017f9e <RTC::RTC()>:
c0017f9e:	83 ec 1c             	sub    esp,0x1c
c0017fa1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fa5:	83 ec 08             	sub    esp,0x8
c0017fa8:	68 4b 1f 02 c0       	push   0xc0021f4b
c0017fad:	50                   	push   eax
c0017fae:	e8 5f 3b ff ff       	call   c000bb12 <Clock::Clock(char const*)>
c0017fb3:	83 c4 10             	add    esp,0x10
c0017fb6:	ba 68 1f 02 c0       	mov    edx,0xc0021f68
c0017fbb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fbf:	89 10                	mov    DWORD PTR [eax],edx
c0017fc1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fc5:	83 ec 0c             	sub    esp,0xc
c0017fc8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017fcc:	6a 01                	push   0x1
c0017fce:	68 58 7f 01 c0       	push   0xc0017f58
c0017fd3:	6a 08                	push   0x8
c0017fd5:	50                   	push   eax
c0017fd6:	e8 13 40 ff ff       	call   c000bfee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0017fdb:	83 c4 20             	add    esp,0x20
c0017fde:	89 c2                	mov    edx,eax
c0017fe0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fe4:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0017fea:	fa                   	cli    
c0017feb:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0017ff0:	83 c0 01             	add    eax,0x1
c0017ff3:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0017ff8:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017ffd:	83 ec 08             	sub    esp,0x8
c0018000:	6a 0b                	push   0xb
c0018002:	50                   	push   eax
c0018003:	e8 68 f1 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0018008:	83 c4 10             	add    esp,0x10
c001800b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001800f:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0018014:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018018:	83 ca 10             	or     edx,0x10
c001801b:	0f b6 d2             	movzx  edx,dl
c001801e:	83 ec 04             	sub    esp,0x4
c0018021:	52                   	push   edx
c0018022:	6a 0b                	push   0xb
c0018024:	50                   	push   eax
c0018025:	e8 60 f2 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c001802a:	83 c4 10             	add    esp,0x10
c001802d:	83 ec 0c             	sub    esp,0xc
c0018030:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018034:	e8 91 fa ff ff       	call   c0017aca <RTC::completeRTCRefresh()>
c0018039:	83 c4 10             	add    esp,0x10
c001803c:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0018041:	83 e8 01             	sub    eax,0x1
c0018044:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0018049:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c001804e:	85 c0                	test   eax,eax
c0018050:	75 01                	jne    c0018053 <RTC::RTC()+0xb5>
c0018052:	fb                   	sti    
c0018053:	90                   	nop
c0018054:	83 c4 1c             	add    esp,0x1c
c0018057:	c3                   	ret    

c0018058 <HalConsoleScroll(int, int)>:
c0018058:	83 ec 10             	sub    esp,0x10
c001805b:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0018063:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001806b:	90                   	nop
c001806c:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018071:	0f 8f e1 00 00 00    	jg     c0018158 <HalConsoleScroll(int, int)+0x100>
c0018077:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001807f:	90                   	nop
c0018080:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0018088:	0f 8f be 00 00 00    	jg     c001814c <HalConsoleScroll(int, int)+0xf4>
c001808e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018092:	89 d0                	mov    eax,edx
c0018094:	c1 e0 02             	shl    eax,0x2
c0018097:	01 d0                	add    eax,edx
c0018099:	c1 e0 05             	shl    eax,0x5
c001809c:	89 c2                	mov    edx,eax
c001809e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00180a2:	01 d0                	add    eax,edx
c00180a4:	89 c2                	mov    edx,eax
c00180a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00180aa:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00180ad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00180b1:	89 d0                	mov    eax,edx
c00180b3:	c1 e0 02             	shl    eax,0x2
c00180b6:	01 d0                	add    eax,edx
c00180b8:	c1 e0 05             	shl    eax,0x5
c00180bb:	89 c2                	mov    edx,eax
c00180bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00180c1:	01 d0                	add    eax,edx
c00180c3:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c00180c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00180cd:	01 c2                	add    edx,eax
c00180cf:	8a 01                	mov    al,BYTE PTR [ecx]
c00180d1:	88 02                	mov    BYTE PTR [edx],al
c00180d3:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c00180d8:	75 66                	jne    c0018140 <HalConsoleScroll(int, int)+0xe8>
c00180da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00180de:	83 e0 01             	and    eax,0x1
c00180e1:	74 39                	je     c001811c <HalConsoleScroll(int, int)+0xc4>
c00180e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00180e7:	83 e0 0f             	and    eax,0xf
c00180ea:	88 c2                	mov    dl,al
c00180ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00180f0:	c1 e0 04             	shl    eax,0x4
c00180f3:	09 d0                	or     eax,edx
c00180f5:	88 c1                	mov    cl,al
c00180f7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00180fb:	89 d0                	mov    eax,edx
c00180fd:	c1 e0 02             	shl    eax,0x2
c0018100:	01 d0                	add    eax,edx
c0018102:	c1 e0 05             	shl    eax,0x5
c0018105:	89 c2                	mov    edx,eax
c0018107:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001810b:	01 d0                	add    eax,edx
c001810d:	89 c2                	mov    edx,eax
c001810f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018113:	01 d0                	add    eax,edx
c0018115:	88 ca                	mov    dl,cl
c0018117:	88 10                	mov    BYTE PTR [eax],dl
c0018119:	eb 25                	jmp    c0018140 <HalConsoleScroll(int, int)+0xe8>
c001811b:	90                   	nop
c001811c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018120:	89 d0                	mov    eax,edx
c0018122:	c1 e0 02             	shl    eax,0x2
c0018125:	01 d0                	add    eax,edx
c0018127:	c1 e0 05             	shl    eax,0x5
c001812a:	89 c2                	mov    edx,eax
c001812c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018130:	01 d0                	add    eax,edx
c0018132:	89 c2                	mov    edx,eax
c0018134:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018138:	01 d0                	add    eax,edx
c001813a:	c6 00 20             	mov    BYTE PTR [eax],0x20
c001813d:	8d 76 00             	lea    esi,[esi+0x0]
c0018140:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0018145:	e9 36 ff ff ff       	jmp    c0018080 <HalConsoleScroll(int, int)+0x28>
c001814a:	66 90                	xchg   ax,ax
c001814c:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0018151:	e9 16 ff ff ff       	jmp    c001806c <HalConsoleScroll(int, int)+0x14>
c0018156:	66 90                	xchg   ax,ax
c0018158:	90                   	nop
c0018159:	83 c4 10             	add    esp,0x10
c001815c:	c3                   	ret    
c001815d:	8d 76 00             	lea    esi,[esi+0x0]

c0018160 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0018160:	83 ec 14             	sub    esp,0x14
c0018163:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018167:	88 04 24             	mov    BYTE PTR [esp],al
c001816a:	8a 04 24             	mov    al,BYTE PTR [esp]
c001816d:	0f b6 c0             	movzx  eax,al
c0018170:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018174:	89 d1                	mov    ecx,edx
c0018176:	83 e1 0f             	and    ecx,0xf
c0018179:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001817d:	c1 e2 04             	shl    edx,0x4
c0018180:	0f b6 d2             	movzx  edx,dl
c0018183:	09 ca                	or     edx,ecx
c0018185:	c1 e2 08             	shl    edx,0x8
c0018188:	09 d0                	or     eax,edx
c001818a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001818f:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0018197:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001819b:	89 d0                	mov    eax,edx
c001819d:	c1 e0 02             	shl    eax,0x2
c00181a0:	01 d0                	add    eax,edx
c00181a2:	c1 e0 04             	shl    eax,0x4
c00181a5:	89 c2                	mov    edx,eax
c00181a7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00181ab:	01 d0                	add    eax,edx
c00181ad:	01 c0                	add    eax,eax
c00181af:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00181b3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00181b7:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00181bc:	66 89 02             	mov    WORD PTR [edx],ax
c00181bf:	90                   	nop
c00181c0:	83 c4 14             	add    esp,0x14
c00181c3:	c3                   	ret    

c00181c4 <HalConsoleCursorUpdate(int, int)>:
c00181c4:	83 ec 20             	sub    esp,0x20
c00181c7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00181cb:	89 c2                	mov    edx,eax
c00181cd:	c1 e2 02             	shl    edx,0x2
c00181d0:	01 d0                	add    eax,edx
c00181d2:	c1 e0 04             	shl    eax,0x4
c00181d5:	89 c2                	mov    edx,eax
c00181d7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00181db:	01 d0                	add    eax,edx
c00181dd:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00181e2:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c00181e9:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c00181ee:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00181f2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00181f6:	ee                   	out    dx,al
c00181f7:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00181fc:	0f b6 c0             	movzx  eax,al
c00181ff:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0018206:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001820a:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001820e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018212:	ee                   	out    dx,al
c0018213:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c001821a:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001821f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018223:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018227:	ee                   	out    dx,al
c0018228:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c001822d:	c1 e8 08             	shr    eax,0x8
c0018230:	0f b6 c0             	movzx  eax,al
c0018233:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c001823a:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001823e:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018242:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018246:	ee                   	out    dx,al
c0018247:	90                   	nop
c0018248:	83 c4 20             	add    esp,0x20
c001824b:	c3                   	ret    

c001824c <FAT::getName()>:
c001824c:	b8 9c 1f 02 c0       	mov    eax,0xc0021f9c
c0018251:	c3                   	ret    
c0018252:	66 90                	xchg   ax,ax

c0018254 <FAT::tell(void*, unsigned long long*)>:
c0018254:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018259:	75 09                	jne    c0018264 <FAT::tell(void*, unsigned long long*)+0x10>
c001825b:	b8 04 00 00 00       	mov    eax,0x4
c0018260:	c3                   	ret    
c0018261:	8d 76 00             	lea    esi,[esi+0x0]
c0018264:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018269:	75 09                	jne    c0018274 <FAT::tell(void*, unsigned long long*)+0x20>
c001826b:	b8 04 00 00 00       	mov    eax,0x4
c0018270:	c3                   	ret    
c0018271:	8d 76 00             	lea    esi,[esi+0x0]
c0018274:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018278:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001827b:	ba 00 00 00 00       	mov    edx,0x0
c0018280:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018284:	89 01                	mov    DWORD PTR [ecx],eax
c0018286:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018289:	b8 00 00 00 00       	mov    eax,0x0
c001828e:	c3                   	ret    
c001828f:	90                   	nop

c0018290 <FAT::stat(void*, unsigned long long*)>:
c0018290:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018295:	75 09                	jne    c00182a0 <FAT::stat(void*, unsigned long long*)+0x10>
c0018297:	b8 04 00 00 00       	mov    eax,0x4
c001829c:	c3                   	ret    
c001829d:	8d 76 00             	lea    esi,[esi+0x0]
c00182a0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00182a5:	75 09                	jne    c00182b0 <FAT::stat(void*, unsigned long long*)+0x20>
c00182a7:	b8 04 00 00 00       	mov    eax,0x4
c00182ac:	c3                   	ret    
c00182ad:	8d 76 00             	lea    esi,[esi+0x0]
c00182b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00182b4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00182b7:	ba 00 00 00 00       	mov    edx,0x0
c00182bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00182c0:	89 01                	mov    DWORD PTR [ecx],eax
c00182c2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00182c5:	b8 00 00 00 00       	mov    eax,0x0
c00182ca:	c3                   	ret    
c00182cb:	90                   	nop

c00182cc <FAT::~FAT()>:
c00182cc:	83 ec 0c             	sub    esp,0xc
c00182cf:	ba e8 1f 02 c0       	mov    edx,0xc0021fe8
c00182d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182d8:	89 10                	mov    DWORD PTR [eax],edx
c00182da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182de:	83 ec 0c             	sub    esp,0xc
c00182e1:	50                   	push   eax
c00182e2:	e8 6d 2c ff ff       	call   c000af54 <Filesystem::~Filesystem()>
c00182e7:	83 c4 10             	add    esp,0x10
c00182ea:	90                   	nop
c00182eb:	83 c4 0c             	add    esp,0xc
c00182ee:	c3                   	ret    
c00182ef:	90                   	nop

c00182f0 <FAT::~FAT()>:
c00182f0:	83 ec 0c             	sub    esp,0xc
c00182f3:	83 ec 0c             	sub    esp,0xc
c00182f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00182fa:	e8 cd ff ff ff       	call   c00182cc <FAT::~FAT()>
c00182ff:	83 c4 10             	add    esp,0x10
c0018302:	83 ec 08             	sub    esp,0x8
c0018305:	6a 08                	push   0x8
c0018307:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001830b:	e8 fc 24 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0018310:	83 c4 10             	add    esp,0x10
c0018313:	83 c4 0c             	add    esp,0xc
c0018316:	c3                   	ret    
c0018317:	90                   	nop

c0018318 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0018318:	83 ec 1c             	sub    esp,0x1c
c001831b:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0018322:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0018327:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001832b:	8b 04 85 40 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6dc0]
c0018332:	83 f8 ff             	cmp    eax,0xffffffff
c0018335:	75 35                	jne    c001836c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0018337:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001833b:	88 c2                	mov    dl,al
c001833d:	a1 20 92 02 c0       	mov    eax,ds:0xc0029220
c0018342:	01 d0                	add    eax,edx
c0018344:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018348:	8b 15 20 92 02 c0    	mov    edx,DWORD PTR ds:0xc0029220
c001834e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018352:	89 14 85 40 92 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6dc0],edx
c0018359:	a1 20 92 02 c0       	mov    eax,ds:0xc0029220
c001835e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018362:	89 14 85 c0 92 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6d40],edx
c0018369:	eb 19                	jmp    c0018384 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001836b:	90                   	nop
c001836c:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018370:	88 c2                	mov    dl,al
c0018372:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018376:	8b 04 85 40 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6dc0]
c001837d:	01 d0                	add    eax,edx
c001837f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018383:	90                   	nop
c0018384:	83 ec 04             	sub    esp,0x4
c0018387:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001838b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001838f:	8d 44 24 15          	lea    eax,[esp+0x15]
c0018393:	50                   	push   eax
c0018394:	e8 36 cc fe ff       	call   c0004fcf <f_getlabel>
c0018399:	83 c4 10             	add    esp,0x10
c001839c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00183a0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00183a5:	75 09                	jne    c00183b0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c00183a7:	b8 00 00 00 00       	mov    eax,0x0
c00183ac:	eb 0a                	jmp    c00183b8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c00183ae:	66 90                	xchg   ax,ax
c00183b0:	b8 01 00 00 00       	mov    eax,0x1
c00183b5:	8d 76 00             	lea    esi,[esi+0x0]
c00183b8:	83 c4 1c             	add    esp,0x1c
c00183bb:	c3                   	ret    

c00183bc <FAT::setlabel(LogicalDisk*, int, char*)>:
c00183bc:	57                   	push   edi
c00183bd:	83 ec 58             	sub    esp,0x58
c00183c0:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c00183c8:	8d 54 24 10          	lea    edx,[esp+0x10]
c00183cc:	b8 00 00 00 00       	mov    eax,0x0
c00183d1:	b9 0f 00 00 00       	mov    ecx,0xf
c00183d6:	fc                   	cld    
c00183d7:	89 d7                	mov    edi,edx
c00183d9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00183db:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00183df:	8b 04 85 40 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6dc0]
c00183e6:	83 f8 ff             	cmp    eax,0xffffffff
c00183e9:	75 35                	jne    c0018420 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c00183eb:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00183ef:	88 c2                	mov    dl,al
c00183f1:	a1 20 92 02 c0       	mov    eax,ds:0xc0029220
c00183f6:	01 d0                	add    eax,edx
c00183f8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00183fc:	8b 15 20 92 02 c0    	mov    edx,DWORD PTR ds:0xc0029220
c0018402:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018406:	89 14 85 40 92 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6dc0],edx
c001840d:	a1 20 92 02 c0       	mov    eax,ds:0xc0029220
c0018412:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0018416:	89 14 85 c0 92 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6d40],edx
c001841d:	eb 19                	jmp    c0018438 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001841f:	90                   	nop
c0018420:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018424:	88 c2                	mov    dl,al
c0018426:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001842a:	8b 04 85 40 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6dc0]
c0018431:	01 d0                	add    eax,edx
c0018433:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018437:	90                   	nop
c0018438:	83 ec 08             	sub    esp,0x8
c001843b:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001843f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018443:	50                   	push   eax
c0018444:	e8 f7 83 fe ff       	call   c0000840 <strcat>
c0018449:	83 c4 10             	add    esp,0x10
c001844c:	83 ec 0c             	sub    esp,0xc
c001844f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018453:	50                   	push   eax
c0018454:	e8 c7 cc fe ff       	call   c0005120 <f_setlabel>
c0018459:	83 c4 10             	add    esp,0x10
c001845c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018460:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0018465:	75 09                	jne    c0018470 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c0018467:	b8 00 00 00 00       	mov    eax,0x0
c001846c:	eb 0a                	jmp    c0018478 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001846e:	66 90                	xchg   ax,ax
c0018470:	b8 01 00 00 00       	mov    eax,0x1
c0018475:	8d 76 00             	lea    esi,[esi+0x0]
c0018478:	83 c4 58             	add    esp,0x58
c001847b:	5f                   	pop    edi
c001847c:	c3                   	ret    
c001847d:	90                   	nop
c001847e:	66 90                	xchg   ax,ax

c0018480 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0018480:	83 ec 2c             	sub    esp,0x2c
c0018483:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001848b:	83 ec 08             	sub    esp,0x8
c001848e:	68 c0 1f 02 c0       	push   0xc0021fc0
c0018493:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018497:	e8 b4 82 fe ff       	call   c0000750 <strcmp>
c001849c:	83 c4 10             	add    esp,0x10
c001849f:	85 c0                	test   eax,eax
c00184a1:	0f 94 c0             	sete   al
c00184a4:	0f b6 c0             	movzx  eax,al
c00184a7:	85 c0                	test   eax,eax
c00184a9:	74 0d                	je     c00184b8 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c00184ab:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00184b3:	e9 c0 00 00 00       	jmp    c0018578 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00184b8:	83 ec 08             	sub    esp,0x8
c00184bb:	68 b2 1f 02 c0       	push   0xc0021fb2
c00184c0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00184c4:	e8 87 82 fe ff       	call   c0000750 <strcmp>
c00184c9:	83 c4 10             	add    esp,0x10
c00184cc:	85 c0                	test   eax,eax
c00184ce:	0f 94 c0             	sete   al
c00184d1:	0f b6 c0             	movzx  eax,al
c00184d4:	85 c0                	test   eax,eax
c00184d6:	74 10                	je     c00184e8 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c00184d8:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00184e0:	e9 93 00 00 00       	jmp    c0018578 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00184e5:	8d 76 00             	lea    esi,[esi+0x0]
c00184e8:	83 ec 08             	sub    esp,0x8
c00184eb:	68 b8 1f 02 c0       	push   0xc0021fb8
c00184f0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00184f4:	e8 57 82 fe ff       	call   c0000750 <strcmp>
c00184f9:	83 c4 10             	add    esp,0x10
c00184fc:	85 c0                	test   eax,eax
c00184fe:	0f 94 c0             	sete   al
c0018501:	0f b6 c0             	movzx  eax,al
c0018504:	85 c0                	test   eax,eax
c0018506:	74 0c                	je     c0018514 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0018508:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018510:	eb 66                	jmp    c0018578 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018512:	66 90                	xchg   ax,ax
c0018514:	83 ec 08             	sub    esp,0x8
c0018517:	68 fc f7 01 c0       	push   0xc001f7fc
c001851c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018520:	e8 2b 82 fe ff       	call   c0000750 <strcmp>
c0018525:	83 c4 10             	add    esp,0x10
c0018528:	85 c0                	test   eax,eax
c001852a:	0f 94 c0             	sete   al
c001852d:	0f b6 c0             	movzx  eax,al
c0018530:	85 c0                	test   eax,eax
c0018532:	74 0c                	je     c0018540 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c0018534:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001853c:	eb 3a                	jmp    c0018578 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001853e:	66 90                	xchg   ax,ax
c0018540:	83 ec 08             	sub    esp,0x8
c0018543:	68 be 1f 02 c0       	push   0xc0021fbe
c0018548:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001854c:	e8 ff 81 fe ff       	call   c0000750 <strcmp>
c0018551:	83 c4 10             	add    esp,0x10
c0018554:	85 c0                	test   eax,eax
c0018556:	0f 94 c0             	sete   al
c0018559:	0f b6 c0             	movzx  eax,al
c001855c:	85 c0                	test   eax,eax
c001855e:	74 0c                	je     c001856c <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0018560:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0018568:	eb 0e                	jmp    c0018578 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001856a:	66 90                	xchg   ax,ax
c001856c:	b8 08 00 00 00       	mov    eax,0x8
c0018571:	e9 ea 00 00 00       	jmp    c0018660 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018576:	66 90                	xchg   ax,ax
c0018578:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001857f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018584:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018588:	8b 04 85 40 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6dc0]
c001858f:	83 f8 ff             	cmp    eax,0xffffffff
c0018592:	75 34                	jne    c00185c8 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0018594:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018598:	88 c2                	mov    dl,al
c001859a:	a1 20 92 02 c0       	mov    eax,ds:0xc0029220
c001859f:	01 d0                	add    eax,edx
c00185a1:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00185a5:	8b 15 20 92 02 c0    	mov    edx,DWORD PTR ds:0xc0029220
c00185ab:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00185af:	89 14 85 40 92 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6dc0],edx
c00185b6:	a1 20 92 02 c0       	mov    eax,ds:0xc0029220
c00185bb:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00185bf:	89 14 85 c0 92 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6d40],edx
c00185c6:	eb 18                	jmp    c00185e0 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c00185c8:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00185cc:	88 c2                	mov    dl,al
c00185ce:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00185d2:	8b 04 85 40 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6dc0]
c00185d9:	01 d0                	add    eax,edx
c00185db:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00185df:	90                   	nop
c00185e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00185e4:	88 04 24             	mov    BYTE PTR [esp],al
c00185e7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00185eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00185ef:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00185f7:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00185fc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018604:	83 ec 0c             	sub    esp,0xc
c0018607:	68 00 20 00 00       	push   0x2000
c001860c:	e8 9d f4 fe ff       	call   c0007aae <malloc>
c0018611:	83 c4 10             	add    esp,0x10
c0018614:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018618:	68 00 20 00 00       	push   0x2000
c001861d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018621:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018625:	50                   	push   eax
c0018626:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001862a:	50                   	push   eax
c001862b:	e8 ed cd fe ff       	call   c000541d <f_mkfs>
c0018630:	83 c4 10             	add    esp,0x10
c0018633:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018637:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001863c:	75 0a                	jne    c0018648 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001863e:	b8 00 00 00 00       	mov    eax,0x0
c0018643:	eb 1b                	jmp    c0018660 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018645:	8d 76 00             	lea    esi,[esi+0x0]
c0018648:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001864d:	75 09                	jne    c0018658 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c001864f:	b8 09 00 00 00       	mov    eax,0x9
c0018654:	eb 0a                	jmp    c0018660 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018656:	66 90                	xchg   ax,ax
c0018658:	b8 01 00 00 00       	mov    eax,0x1
c001865d:	8d 76 00             	lea    esi,[esi+0x0]
c0018660:	83 c4 2c             	add    esp,0x2c
c0018663:	c3                   	ret    

c0018664 <FAT::tryMount(LogicalDisk*, int)>:
c0018664:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001866a:	a1 20 92 02 c0       	mov    eax,ds:0xc0029220
c001866f:	83 f8 14             	cmp    eax,0x14
c0018672:	75 18                	jne    c001868c <FAT::tryMount(LogicalDisk*, int)+0x28>
c0018674:	83 ec 0c             	sub    esp,0xc
c0018677:	68 c4 1f 02 c0       	push   0xc0021fc4
c001867c:	e8 1a 85 ff ff       	call   c0010b9b <KePanic(char const*)>
c0018681:	83 c4 10             	add    esp,0x10
c0018684:	b0 00                	mov    al,0x0
c0018686:	e9 ed 01 00 00       	jmp    c0018878 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001868b:	90                   	nop
c001868c:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0018693:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018699:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001869f:	3d 00 02 00 00       	cmp    eax,0x200
c00186a4:	74 0a                	je     c00186b0 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c00186a6:	b0 00                	mov    al,0x0
c00186a8:	e9 cb 01 00 00       	jmp    c0018878 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00186ad:	8d 76 00             	lea    esi,[esi+0x0]
c00186b0:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c00186b8:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00186bf:	8b 04 85 40 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6dc0]
c00186c6:	83 f8 ff             	cmp    eax,0xffffffff
c00186c9:	74 09                	je     c00186d4 <FAT::tryMount(LogicalDisk*, int)+0x70>
c00186cb:	b0 01                	mov    al,0x1
c00186cd:	e9 a6 01 00 00       	jmp    c0018878 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00186d2:	66 90                	xchg   ax,ax
c00186d4:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c00186de:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c00186e6:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c00186ed:	88 c2                	mov    dl,al
c00186ef:	a1 20 92 02 c0       	mov    eax,ds:0xc0029220
c00186f4:	01 d0                	add    eax,edx
c00186f6:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c00186fd:	8b 15 20 92 02 c0    	mov    edx,DWORD PTR ds:0xc0029220
c0018703:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001870a:	89 14 85 40 92 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6dc0],edx
c0018711:	a1 20 92 02 c0       	mov    eax,ds:0xc0029220
c0018716:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c001871d:	89 14 85 c0 92 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6d40],edx
c0018724:	83 ec 0c             	sub    esp,0xc
c0018727:	68 34 02 00 00       	push   0x234
c001872c:	e8 7d f3 fe ff       	call   c0007aae <malloc>
c0018731:	83 c4 10             	add    esp,0x10
c0018734:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c001873b:	83 ec 04             	sub    esp,0x4
c001873e:	6a 00                	push   0x0
c0018740:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018747:	50                   	push   eax
c0018748:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001874f:	e8 a4 b4 fe ff       	call   c0003bf8 <f_mount>
c0018754:	83 c4 10             	add    esp,0x10
c0018757:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001875e:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0018766:	74 1c                	je     c0018784 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0018768:	83 ec 0c             	sub    esp,0xc
c001876b:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018772:	e8 57 f3 fe ff       	call   c0007ace <rfree>
c0018777:	83 c4 10             	add    esp,0x10
c001877a:	b0 00                	mov    al,0x0
c001877c:	e9 f7 00 00 00       	jmp    c0018878 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018781:	8d 76 00             	lea    esi,[esi+0x0]
c0018784:	83 ec 04             	sub    esp,0x4
c0018787:	68 00 01 00 00       	push   0x100
c001878c:	6a 00                	push   0x0
c001878e:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018795:	50                   	push   eax
c0018796:	e8 55 7d fe ff       	call   c00004f0 <memset>
c001879b:	83 c4 10             	add    esp,0x10
c001879e:	83 ec 08             	sub    esp,0x8
c00187a1:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00187a8:	50                   	push   eax
c00187a9:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00187b0:	50                   	push   eax
c00187b1:	e8 8a 80 fe ff       	call   c0000840 <strcat>
c00187b6:	83 c4 10             	add    esp,0x10
c00187b9:	83 ec 08             	sub    esp,0x8
c00187bc:	68 d2 1f 02 c0       	push   0xc0021fd2
c00187c1:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00187c8:	50                   	push   eax
c00187c9:	e8 72 80 fe ff       	call   c0000840 <strcat>
c00187ce:	83 c4 10             	add    esp,0x10
c00187d1:	83 ec 04             	sub    esp,0x4
c00187d4:	6a 01                	push   0x1
c00187d6:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c00187dd:	50                   	push   eax
c00187de:	8d 44 24 14          	lea    eax,[esp+0x14]
c00187e2:	50                   	push   eax
c00187e3:	e8 72 b4 fe ff       	call   c0003c5a <f_open>
c00187e8:	83 c4 10             	add    esp,0x10
c00187eb:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00187f2:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c00187f9:	85 c0                	test   eax,eax
c00187fb:	74 0b                	je     c0018808 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c00187fd:	78 31                	js     c0018830 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00187ff:	83 e8 04             	sub    eax,0x4
c0018802:	83 f8 01             	cmp    eax,0x1
c0018805:	77 29                	ja     c0018830 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0018807:	90                   	nop
c0018808:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0018810:	83 ec 0c             	sub    esp,0xc
c0018813:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018817:	50                   	push   eax
c0018818:	e8 0c bc fe ff       	call   c0004429 <f_close>
c001881d:	83 c4 10             	add    esp,0x10
c0018820:	90                   	nop
c0018821:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c0018829:	85 c0                	test   eax,eax
c001882b:	74 43                	je     c0018870 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c001882d:	eb 31                	jmp    c0018860 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001882f:	90                   	nop
c0018830:	83 ec 0c             	sub    esp,0xc
c0018833:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001883a:	e8 8f f2 fe ff       	call   c0007ace <rfree>
c001883f:	83 c4 10             	add    esp,0x10
c0018842:	83 ec 04             	sub    esp,0x4
c0018845:	6a 00                	push   0x0
c0018847:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001884e:	50                   	push   eax
c001884f:	6a 00                	push   0x0
c0018851:	e8 a2 b3 fe ff       	call   c0003bf8 <f_mount>
c0018856:	83 c4 10             	add    esp,0x10
c0018859:	b0 00                	mov    al,0x0
c001885b:	eb 1b                	jmp    c0018878 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001885d:	8d 76 00             	lea    esi,[esi+0x0]
c0018860:	a1 20 92 02 c0       	mov    eax,ds:0xc0029220
c0018865:	83 c0 01             	add    eax,0x1
c0018868:	a3 20 92 02 c0       	mov    ds:0xc0029220,eax
c001886d:	8d 76 00             	lea    esi,[esi+0x0]
c0018870:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0018877:	90                   	nop
c0018878:	81 c4 4c 03 00 00    	add    esp,0x34c
c001887e:	c3                   	ret    
c001887f:	90                   	nop

c0018880 <FAT::allocateSwapfile(char const*, int)>:
c0018880:	55                   	push   ebp
c0018881:	57                   	push   edi
c0018882:	56                   	push   esi
c0018883:	53                   	push   ebx
c0018884:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001888a:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0018895:	83 ec 0c             	sub    esp,0xc
c0018898:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001889f:	e8 0a f2 fe ff       	call   c0007aae <malloc>
c00188a4:	83 c4 10             	add    esp,0x10
c00188a7:	89 c7                	mov    edi,eax
c00188a9:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c00188ae:	83 ec 04             	sub    esp,0x4
c00188b1:	50                   	push   eax
c00188b2:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c00188b9:	57                   	push   edi
c00188ba:	e8 d1 28 ff ff       	call   c000b190 <File::File(char const*, Process*)>
c00188bf:	83 c4 10             	add    esp,0x10
c00188c2:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c00188c9:	83 ec 04             	sub    esp,0x4
c00188cc:	8d 44 24 13          	lea    eax,[esp+0x13]
c00188d0:	50                   	push   eax
c00188d1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00188d5:	50                   	push   eax
c00188d6:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00188dd:	e8 16 2c ff ff       	call   c000b4f8 <File::stat(unsigned long long*, bool*)>
c00188e2:	83 c4 10             	add    esp,0x10
c00188e5:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00188ec:	c1 e0 14             	shl    eax,0x14
c00188ef:	89 c7                	mov    edi,eax
c00188f1:	89 c5                	mov    ebp,eax
c00188f3:	c1 fd 1f             	sar    ebp,0x1f
c00188f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00188fa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00188fe:	89 f9                	mov    ecx,edi
c0018900:	31 c1                	xor    ecx,eax
c0018902:	89 cb                	mov    ebx,ecx
c0018904:	89 e9                	mov    ecx,ebp
c0018906:	31 d1                	xor    ecx,edx
c0018908:	89 ce                	mov    esi,ecx
c001890a:	89 f0                	mov    eax,esi
c001890c:	09 d8                	or     eax,ebx
c001890e:	0f 84 9c 00 00 00    	je     c00189b0 <FAT::allocateSwapfile(char const*, int)+0x130>
c0018914:	83 ec 0c             	sub    esp,0xc
c0018917:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001891e:	e8 a1 2a ff ff       	call   c000b3c4 <File::unlink()>
c0018923:	83 c4 10             	add    esp,0x10
c0018926:	83 ec 08             	sub    esp,0x8
c0018929:	6a 12                	push   0x12
c001892b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018932:	e8 15 29 ff ff       	call   c000b24c <File::open(FileOpenMode)>
c0018937:	83 c4 10             	add    esp,0x10
c001893a:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0018941:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0018947:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001894e:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0018955:	c1 e0 14             	shl    eax,0x14
c0018958:	83 ec 04             	sub    esp,0x4
c001895b:	6a 01                	push   0x1
c001895d:	50                   	push   eax
c001895e:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0018965:	e8 46 c9 fe ff       	call   c00052b0 <f_expand>
c001896a:	83 c4 10             	add    esp,0x10
c001896d:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0018974:	8b 00                	mov    eax,DWORD PTR [eax]
c0018976:	83 c0 10             	add    eax,0x10
c0018979:	8b 00                	mov    eax,DWORD PTR [eax]
c001897b:	83 ec 0c             	sub    esp,0xc
c001897e:	8d 54 24 24          	lea    edx,[esp+0x24]
c0018982:	52                   	push   edx
c0018983:	8d 54 24 30          	lea    edx,[esp+0x30]
c0018987:	52                   	push   edx
c0018988:	6a 00                	push   0x0
c001898a:	68 00 04 00 00       	push   0x400
c001898f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0018996:	ff d0                	call   eax
c0018998:	83 c4 20             	add    esp,0x20
c001899b:	83 ec 0c             	sub    esp,0xc
c001899e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00189a5:	e8 00 29 ff ff       	call   c000b2aa <File::close()>
c00189aa:	83 c4 10             	add    esp,0x10
c00189ad:	8d 76 00             	lea    esi,[esi+0x0]
c00189b0:	83 ec 08             	sub    esp,0x8
c00189b3:	6a 01                	push   0x1
c00189b5:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00189bc:	e8 8b 28 ff ff       	call   c000b24c <File::open(FileOpenMode)>
c00189c1:	83 c4 10             	add    esp,0x10
c00189c4:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00189cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00189cd:	83 c0 0c             	add    eax,0xc
c00189d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00189d2:	83 ec 0c             	sub    esp,0xc
c00189d5:	8d 54 24 24          	lea    edx,[esp+0x24]
c00189d9:	52                   	push   edx
c00189da:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00189de:	52                   	push   edx
c00189df:	6a 00                	push   0x0
c00189e1:	6a 04                	push   0x4
c00189e3:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00189ea:	ff d0                	call   eax
c00189ec:	83 c4 20             	add    esp,0x20
c00189ef:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00189f6:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00189fc:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0018a03:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0018a0a:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0018a0d:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0018a14:	83 ec 0c             	sub    esp,0xc
c0018a17:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018a1e:	e8 87 28 ff ff       	call   c000b2aa <File::close()>
c0018a23:	83 c4 10             	add    esp,0x10
c0018a26:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0018a2d:	ba 00 00 00 00       	mov    edx,0x0
c0018a32:	81 c4 3c 04 00 00    	add    esp,0x43c
c0018a38:	5b                   	pop    ebx
c0018a39:	5e                   	pop    esi
c0018a3a:	5f                   	pop    edi
c0018a3b:	5d                   	pop    ebp
c0018a3c:	c3                   	ret    
c0018a3d:	90                   	nop
c0018a3e:	66 90                	xchg   ax,ax

c0018a40 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0018a40:	57                   	push   edi
c0018a41:	56                   	push   esi
c0018a42:	53                   	push   ebx
c0018a43:	81 ec 50 02 00 00    	sub    esp,0x250
c0018a49:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0018a51:	74 0d                	je     c0018a60 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0018a53:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0018a5b:	75 0f                	jne    c0018a6c <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0018a5d:	8d 76 00             	lea    esi,[esi+0x0]
c0018a60:	b8 04 00 00 00       	mov    eax,0x4
c0018a65:	e9 3a 01 00 00       	jmp    c0018ba4 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0018a6a:	66 90                	xchg   ax,ax
c0018a6c:	83 ec 08             	sub    esp,0x8
c0018a6f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0018a76:	50                   	push   eax
c0018a77:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0018a7e:	e8 73 bc fe ff       	call   c00046f6 <f_readdir>
c0018a83:	83 c4 10             	add    esp,0x10
c0018a86:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0018a8d:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0018a94:	83 ec 0c             	sub    esp,0xc
c0018a97:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0018a9e:	83 c0 16             	add    eax,0x16
c0018aa1:	50                   	push   eax
c0018aa2:	e8 c9 7a fe ff       	call   c0000570 <strlen>
c0018aa7:	83 c4 10             	add    esp,0x10
c0018aaa:	ba 00 00 00 00       	mov    edx,0x0
c0018aaf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018ab3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0018ab7:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0018abe:	0f b6 c0             	movzx  eax,al
c0018ac1:	83 e0 10             	and    eax,0x10
c0018ac4:	74 0a                	je     c0018ad0 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0018ac6:	b8 02 00 00 00       	mov    eax,0x2
c0018acb:	eb 0b                	jmp    c0018ad8 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0018acd:	8d 76 00             	lea    esi,[esi+0x0]
c0018ad0:	b8 01 00 00 00       	mov    eax,0x1
c0018ad5:	8d 76 00             	lea    esi,[esi+0x0]
c0018ad8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018adc:	83 ec 08             	sub    esp,0x8
c0018adf:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0018ae6:	83 c0 16             	add    eax,0x16
c0018ae9:	50                   	push   eax
c0018aea:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018aee:	83 c0 10             	add    eax,0x10
c0018af1:	50                   	push   eax
c0018af2:	e8 49 7b fe ff       	call   c0000640 <strcpy>
c0018af7:	83 c4 10             	add    esp,0x10
c0018afa:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0018b01:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0018b08:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018b0c:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0018b13:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0018b1a:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0018b21:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0018b28:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0018b2f:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0018b36:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0018b3d:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0018b44:	89 c6                	mov    esi,eax
c0018b46:	89 d7                	mov    edi,edx
c0018b48:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018b4a:	89 c8                	mov    eax,ecx
c0018b4c:	89 fa                	mov    edx,edi
c0018b4e:	89 f3                	mov    ebx,esi
c0018b50:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0018b57:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0018b5e:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0018b65:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0018b6c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0018b72:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0018b79:	0f be c0             	movsx  eax,al
c0018b7c:	85 c0                	test   eax,eax
c0018b7e:	75 08                	jne    c0018b88 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c0018b80:	b8 07 00 00 00       	mov    eax,0x7
c0018b85:	eb 1d                	jmp    c0018ba4 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0018b87:	90                   	nop
c0018b88:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0018b8f:	85 c0                	test   eax,eax
c0018b91:	75 09                	jne    c0018b9c <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c0018b93:	b8 00 00 00 00       	mov    eax,0x0
c0018b98:	eb 0a                	jmp    c0018ba4 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0018b9a:	66 90                	xchg   ax,ax
c0018b9c:	b8 01 00 00 00       	mov    eax,0x1
c0018ba1:	8d 76 00             	lea    esi,[esi+0x0]
c0018ba4:	81 c4 50 02 00 00    	add    esp,0x250
c0018baa:	5b                   	pop    ebx
c0018bab:	5e                   	pop    esi
c0018bac:	5f                   	pop    edi
c0018bad:	c3                   	ret    
c0018bae:	66 90                	xchg   ax,ax

c0018bb0 <FAT::read(void*, unsigned long, void*, int*)>:
c0018bb0:	83 ec 1c             	sub    esp,0x1c
c0018bb3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018bb8:	74 0a                	je     c0018bc4 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0018bba:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0018bbf:	75 0b                	jne    c0018bcc <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0018bc1:	8d 76 00             	lea    esi,[esi+0x0]
c0018bc4:	b8 04 00 00 00       	mov    eax,0x4
c0018bc9:	eb 41                	jmp    c0018c0c <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0018bcb:	90                   	nop
c0018bcc:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018bd0:	50                   	push   eax
c0018bd1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018bd5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018bd9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018bdd:	e8 3b b3 fe ff       	call   c0003f1d <f_read>
c0018be2:	83 c4 10             	add    esp,0x10
c0018be5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018be9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018bed:	89 c2                	mov    edx,eax
c0018bef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018bf3:	89 10                	mov    DWORD PTR [eax],edx
c0018bf5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018bf9:	85 c0                	test   eax,eax
c0018bfb:	75 07                	jne    c0018c04 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0018bfd:	b8 00 00 00 00       	mov    eax,0x0
c0018c02:	eb 08                	jmp    c0018c0c <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0018c04:	b8 01 00 00 00       	mov    eax,0x1
c0018c09:	8d 76 00             	lea    esi,[esi+0x0]
c0018c0c:	83 c4 1c             	add    esp,0x1c
c0018c0f:	c3                   	ret    

c0018c10 <FAT::write(void*, unsigned long, void*, int*)>:
c0018c10:	83 ec 1c             	sub    esp,0x1c
c0018c13:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018c18:	74 0a                	je     c0018c24 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0018c1a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0018c1f:	75 0b                	jne    c0018c2c <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0018c21:	8d 76 00             	lea    esi,[esi+0x0]
c0018c24:	b8 04 00 00 00       	mov    eax,0x4
c0018c29:	eb 41                	jmp    c0018c6c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0018c2b:	90                   	nop
c0018c2c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018c30:	50                   	push   eax
c0018c31:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018c35:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018c39:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018c3d:	e8 da b4 fe ff       	call   c000411c <f_write>
c0018c42:	83 c4 10             	add    esp,0x10
c0018c45:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018c49:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018c4d:	89 c2                	mov    edx,eax
c0018c4f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c53:	89 10                	mov    DWORD PTR [eax],edx
c0018c55:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018c59:	85 c0                	test   eax,eax
c0018c5b:	75 07                	jne    c0018c64 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0018c5d:	b8 00 00 00 00       	mov    eax,0x0
c0018c62:	eb 08                	jmp    c0018c6c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0018c64:	b8 01 00 00 00       	mov    eax,0x1
c0018c69:	8d 76 00             	lea    esi,[esi+0x0]
c0018c6c:	83 c4 1c             	add    esp,0x1c
c0018c6f:	c3                   	ret    

c0018c70 <FAT::close(void*)>:
c0018c70:	83 ec 1c             	sub    esp,0x1c
c0018c73:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018c78:	75 0a                	jne    c0018c84 <FAT::close(void*)+0x14>
c0018c7a:	b8 04 00 00 00       	mov    eax,0x4
c0018c7f:	eb 3f                	jmp    c0018cc0 <FAT::close(void*)+0x50>
c0018c81:	8d 76 00             	lea    esi,[esi+0x0]
c0018c84:	83 ec 0c             	sub    esp,0xc
c0018c87:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018c8b:	e8 99 b7 fe ff       	call   c0004429 <f_close>
c0018c90:	83 c4 10             	add    esp,0x10
c0018c93:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018c97:	83 ec 0c             	sub    esp,0xc
c0018c9a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018c9e:	e8 1b ee fe ff       	call   c0007abe <free>
c0018ca3:	83 c4 10             	add    esp,0x10
c0018ca6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018caa:	85 c0                	test   eax,eax
c0018cac:	75 0a                	jne    c0018cb8 <FAT::close(void*)+0x48>
c0018cae:	b8 00 00 00 00       	mov    eax,0x0
c0018cb3:	eb 0b                	jmp    c0018cc0 <FAT::close(void*)+0x50>
c0018cb5:	8d 76 00             	lea    esi,[esi+0x0]
c0018cb8:	b8 01 00 00 00       	mov    eax,0x1
c0018cbd:	8d 76 00             	lea    esi,[esi+0x0]
c0018cc0:	83 c4 1c             	add    esp,0x1c
c0018cc3:	c3                   	ret    

c0018cc4 <FAT::closeDir(void*)>:
c0018cc4:	83 ec 1c             	sub    esp,0x1c
c0018cc7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018ccc:	75 0a                	jne    c0018cd8 <FAT::closeDir(void*)+0x14>
c0018cce:	b8 04 00 00 00       	mov    eax,0x4
c0018cd3:	eb 3f                	jmp    c0018d14 <FAT::closeDir(void*)+0x50>
c0018cd5:	8d 76 00             	lea    esi,[esi+0x0]
c0018cd8:	83 ec 0c             	sub    esp,0xc
c0018cdb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018cdf:	e8 f0 b9 fe ff       	call   c00046d4 <f_closedir>
c0018ce4:	83 c4 10             	add    esp,0x10
c0018ce7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018ceb:	83 ec 0c             	sub    esp,0xc
c0018cee:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018cf2:	e8 c7 ed fe ff       	call   c0007abe <free>
c0018cf7:	83 c4 10             	add    esp,0x10
c0018cfa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018cfe:	85 c0                	test   eax,eax
c0018d00:	75 0a                	jne    c0018d0c <FAT::closeDir(void*)+0x48>
c0018d02:	b8 00 00 00 00       	mov    eax,0x0
c0018d07:	eb 0b                	jmp    c0018d14 <FAT::closeDir(void*)+0x50>
c0018d09:	8d 76 00             	lea    esi,[esi+0x0]
c0018d0c:	b8 01 00 00 00       	mov    eax,0x1
c0018d11:	8d 76 00             	lea    esi,[esi+0x0]
c0018d14:	83 c4 1c             	add    esp,0x1c
c0018d17:	c3                   	ret    

c0018d18 <FAT::seek(void*, unsigned long long)>:
c0018d18:	83 ec 2c             	sub    esp,0x2c
c0018d1b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018d1f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018d23:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018d27:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018d2b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0018d30:	75 0a                	jne    c0018d3c <FAT::seek(void*, unsigned long long)+0x24>
c0018d32:	b8 04 00 00 00       	mov    eax,0x4
c0018d37:	eb 33                	jmp    c0018d6c <FAT::seek(void*, unsigned long long)+0x54>
c0018d39:	8d 76 00             	lea    esi,[esi+0x0]
c0018d3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018d40:	83 ec 08             	sub    esp,0x8
c0018d43:	50                   	push   eax
c0018d44:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0018d48:	e8 0b b7 fe ff       	call   c0004458 <f_lseek>
c0018d4d:	83 c4 10             	add    esp,0x10
c0018d50:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018d54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018d58:	85 c0                	test   eax,eax
c0018d5a:	75 08                	jne    c0018d64 <FAT::seek(void*, unsigned long long)+0x4c>
c0018d5c:	b8 00 00 00 00       	mov    eax,0x0
c0018d61:	eb 09                	jmp    c0018d6c <FAT::seek(void*, unsigned long long)+0x54>
c0018d63:	90                   	nop
c0018d64:	b8 01 00 00 00       	mov    eax,0x1
c0018d69:	8d 76 00             	lea    esi,[esi+0x0]
c0018d6c:	83 c4 2c             	add    esp,0x2c
c0018d6f:	c3                   	ret    

c0018d70 <fatWrapperReadDisk>:
c0018d70:	53                   	push   ebx
c0018d71:	83 ec 18             	sub    esp,0x18
c0018d74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018d78:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018d7c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018d81:	8b 0c 85 20 84 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7be0]
c0018d88:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0018d8c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d90:	ba 00 00 00 00       	mov    edx,0x0
c0018d95:	83 ec 0c             	sub    esp,0xc
c0018d98:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018d9c:	53                   	push   ebx
c0018d9d:	52                   	push   edx
c0018d9e:	50                   	push   eax
c0018d9f:	51                   	push   ecx
c0018da0:	e8 7f 46 ff ff       	call   c000d424 <LogicalDisk::read(unsigned long long, int, void*)>
c0018da5:	83 c4 20             	add    esp,0x20
c0018da8:	83 c4 18             	add    esp,0x18
c0018dab:	5b                   	pop    ebx
c0018dac:	c3                   	ret    
c0018dad:	8d 76 00             	lea    esi,[esi+0x0]

c0018db0 <fatWrapperWriteDisk>:
c0018db0:	53                   	push   ebx
c0018db1:	83 ec 18             	sub    esp,0x18
c0018db4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018db8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018dbc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018dc1:	8b 0c 85 20 84 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7be0]
c0018dc8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0018dcc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018dd0:	ba 00 00 00 00       	mov    edx,0x0
c0018dd5:	83 ec 0c             	sub    esp,0xc
c0018dd8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018ddc:	53                   	push   ebx
c0018ddd:	52                   	push   edx
c0018dde:	50                   	push   eax
c0018ddf:	51                   	push   ecx
c0018de0:	e8 ab 46 ff ff       	call   c000d490 <LogicalDisk::write(unsigned long long, int, void*)>
c0018de5:	83 c4 20             	add    esp,0x20
c0018de8:	83 c4 18             	add    esp,0x18
c0018deb:	5b                   	pop    ebx
c0018dec:	c3                   	ret    
c0018ded:	8d 76 00             	lea    esi,[esi+0x0]

c0018df0 <fatWrapperIoctl>:
c0018df0:	53                   	push   ebx
c0018df1:	83 ec 28             	sub    esp,0x28
c0018df4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018df8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018dfc:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0018e00:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018e04:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018e09:	83 f8 02             	cmp    eax,0x2
c0018e0c:	75 32                	jne    c0018e40 <fatWrapperIoctl+0x50>
c0018e0e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018e12:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018e16:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018e1b:	8b 04 85 20 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7be0]
c0018e22:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018e28:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018e2e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018e32:	66 89 02             	mov    WORD PTR [edx],ax
c0018e35:	b8 00 00 00 00       	mov    eax,0x0
c0018e3a:	e9 c5 00 00 00       	jmp    c0018f04 <fatWrapperIoctl+0x114>
c0018e3f:	90                   	nop
c0018e40:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018e45:	83 f8 01             	cmp    eax,0x1
c0018e48:	75 6a                	jne    c0018eb4 <fatWrapperIoctl+0xc4>
c0018e4a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018e4e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018e52:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018e57:	8b 04 85 20 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7be0]
c0018e5e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018e64:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0018e6a:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0018e70:	89 c8                	mov    eax,ecx
c0018e72:	89 da                	mov    edx,ebx
c0018e74:	0f a4 c2 0a          	shld   edx,eax,0xa
c0018e78:	c1 e0 0a             	shl    eax,0xa
c0018e7b:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0018e80:	8b 0c 8d 20 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7be0]
c0018e87:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0018e8d:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0018e93:	89 cb                	mov    ebx,ecx
c0018e95:	c1 fb 1f             	sar    ebx,0x1f
c0018e98:	53                   	push   ebx
c0018e99:	51                   	push   ecx
c0018e9a:	52                   	push   edx
c0018e9b:	50                   	push   eax
c0018e9c:	e8 6f 5b 00 00       	call   c001ea10 <__udivdi3>
c0018ea1:	83 c4 10             	add    esp,0x10
c0018ea4:	89 c2                	mov    edx,eax
c0018ea6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018eaa:	89 10                	mov    DWORD PTR [eax],edx
c0018eac:	b8 00 00 00 00       	mov    eax,0x0
c0018eb1:	eb 51                	jmp    c0018f04 <fatWrapperIoctl+0x114>
c0018eb3:	90                   	nop
c0018eb4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018eb9:	85 c0                	test   eax,eax
c0018ebb:	75 07                	jne    c0018ec4 <fatWrapperIoctl+0xd4>
c0018ebd:	b8 00 00 00 00       	mov    eax,0x0
c0018ec2:	eb 40                	jmp    c0018f04 <fatWrapperIoctl+0x114>
c0018ec4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018ec9:	83 f8 03             	cmp    eax,0x3
c0018ecc:	75 1a                	jne    c0018ee8 <fatWrapperIoctl+0xf8>
c0018ece:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018ed2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018ed6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018eda:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0018ee0:	b8 00 00 00 00       	mov    eax,0x0
c0018ee5:	eb 1d                	jmp    c0018f04 <fatWrapperIoctl+0x114>
c0018ee7:	90                   	nop
c0018ee8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018eed:	83 f8 04             	cmp    eax,0x4
c0018ef0:	75 0a                	jne    c0018efc <fatWrapperIoctl+0x10c>
c0018ef2:	b8 00 00 00 00       	mov    eax,0x0
c0018ef7:	eb 0b                	jmp    c0018f04 <fatWrapperIoctl+0x114>
c0018ef9:	8d 76 00             	lea    esi,[esi+0x0]
c0018efc:	b8 04 00 00 00       	mov    eax,0x4
c0018f01:	8d 76 00             	lea    esi,[esi+0x0]
c0018f04:	83 c4 28             	add    esp,0x28
c0018f07:	5b                   	pop    ebx
c0018f08:	c3                   	ret    
c0018f09:	90                   	nop
c0018f0a:	66 90                	xchg   ax,ax

c0018f0c <FAT::FAT()>:
c0018f0c:	83 ec 1c             	sub    esp,0x1c
c0018f0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018f13:	83 ec 0c             	sub    esp,0xc
c0018f16:	50                   	push   eax
c0018f17:	e8 14 20 ff ff       	call   c000af30 <Filesystem::Filesystem()>
c0018f1c:	83 c4 10             	add    esp,0x10
c0018f1f:	ba e8 1f 02 c0       	mov    edx,0xc0021fe8
c0018f24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018f28:	89 10                	mov    DWORD PTR [eax],edx
c0018f2a:	c7 05 20 92 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029220,0x0
c0018f34:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0018f3c:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0018f41:	7f 19                	jg     c0018f5c <FAT::FAT()+0x50>
c0018f43:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018f47:	c7 04 85 40 92 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd6dc0],0xffffffff
c0018f52:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0018f57:	eb e3                	jmp    c0018f3c <FAT::FAT()+0x30>
c0018f59:	8d 76 00             	lea    esi,[esi+0x0]
c0018f5c:	90                   	nop
c0018f5d:	83 c4 1c             	add    esp,0x1c
c0018f60:	c3                   	ret    
c0018f61:	90                   	nop
c0018f62:	66 90                	xchg   ax,ax

c0018f64 <FAT::fixFilepath(char*)>:
c0018f64:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018f68:	8a 00                	mov    al,BYTE PTR [eax]
c0018f6a:	0f be c0             	movsx  eax,al
c0018f6d:	83 f8 40             	cmp    eax,0x40
c0018f70:	7e 2e                	jle    c0018fa0 <FAT::fixFilepath(char*)+0x3c>
c0018f72:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018f76:	8a 00                	mov    al,BYTE PTR [eax]
c0018f78:	83 e8 41             	sub    eax,0x41
c0018f7b:	88 c2                	mov    dl,al
c0018f7d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018f81:	88 10                	mov    BYTE PTR [eax],dl
c0018f83:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018f87:	8a 00                	mov    al,BYTE PTR [eax]
c0018f89:	0f be c0             	movsx  eax,al
c0018f8c:	8b 04 85 40 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6dc0]
c0018f93:	83 c0 30             	add    eax,0x30
c0018f96:	88 c2                	mov    dl,al
c0018f98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018f9c:	88 10                	mov    BYTE PTR [eax],dl
c0018f9e:	66 90                	xchg   ax,ax
c0018fa0:	90                   	nop
c0018fa1:	c3                   	ret    
c0018fa2:	66 90                	xchg   ax,ax

c0018fa4 <FAT::open(char const*, void**, FileOpenMode)>:
c0018fa4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018faa:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0018fb2:	74 0c                	je     c0018fc0 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0018fb4:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0018fbc:	75 0e                	jne    c0018fcc <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0018fbe:	66 90                	xchg   ax,ax
c0018fc0:	b8 04 00 00 00       	mov    eax,0x4
c0018fc5:	e9 46 01 00 00       	jmp    c0019110 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0018fca:	66 90                	xchg   ax,ax
c0018fcc:	83 ec 08             	sub    esp,0x8
c0018fcf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018fd6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018fda:	50                   	push   eax
c0018fdb:	e8 60 76 fe ff       	call   c0000640 <strcpy>
c0018fe0:	83 c4 10             	add    esp,0x10
c0018fe3:	83 ec 08             	sub    esp,0x8
c0018fe6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018fea:	50                   	push   eax
c0018feb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018ff2:	e8 6d ff ff ff       	call   c0018f64 <FAT::fixFilepath(char*)>
c0018ff7:	83 c4 10             	add    esp,0x10
c0018ffa:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0019002:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019009:	83 e0 01             	and    eax,0x1
c001900c:	74 12                	je     c0019020 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c001900e:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019015:	83 c8 01             	or     eax,0x1
c0019018:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001901f:	90                   	nop
c0019020:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019027:	83 e0 04             	and    eax,0x4
c001902a:	74 24                	je     c0019050 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c001902c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019033:	83 c8 30             	or     eax,0x30
c0019036:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001903d:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019044:	83 c8 02             	or     eax,0x2
c0019047:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001904e:	66 90                	xchg   ax,ax
c0019050:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019057:	83 e0 02             	and    eax,0x2
c001905a:	74 14                	je     c0019070 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001905c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019063:	83 c8 02             	or     eax,0x2
c0019066:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001906d:	8d 76 00             	lea    esi,[esi+0x0]
c0019070:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019077:	83 e0 08             	and    eax,0x8
c001907a:	74 14                	je     c0019090 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c001907c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019083:	83 c8 04             	or     eax,0x4
c0019086:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001908d:	8d 76 00             	lea    esi,[esi+0x0]
c0019090:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019097:	83 e0 10             	and    eax,0x10
c001909a:	74 14                	je     c00190b0 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c001909c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00190a3:	83 c8 08             	or     eax,0x8
c00190a6:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00190ad:	8d 76 00             	lea    esi,[esi+0x0]
c00190b0:	83 ec 0c             	sub    esp,0xc
c00190b3:	68 28 02 00 00       	push   0x228
c00190b8:	e8 f1 e9 fe ff       	call   c0007aae <malloc>
c00190bd:	83 c4 10             	add    esp,0x10
c00190c0:	89 c2                	mov    edx,eax
c00190c2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00190c9:	89 10                	mov    DWORD PTR [eax],edx
c00190cb:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00190d3:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00190da:	8b 00                	mov    eax,DWORD PTR [eax]
c00190dc:	83 ec 04             	sub    esp,0x4
c00190df:	52                   	push   edx
c00190e0:	8d 54 24 10          	lea    edx,[esp+0x10]
c00190e4:	52                   	push   edx
c00190e5:	50                   	push   eax
c00190e6:	e8 6f ab fe ff       	call   c0003c5a <f_open>
c00190eb:	83 c4 10             	add    esp,0x10
c00190ee:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00190f5:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00190fd:	74 09                	je     c0019108 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c00190ff:	b8 01 00 00 00       	mov    eax,0x1
c0019104:	eb 0a                	jmp    c0019110 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019106:	66 90                	xchg   ax,ax
c0019108:	b8 00 00 00 00       	mov    eax,0x0
c001910d:	8d 76 00             	lea    esi,[esi+0x0]
c0019110:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019116:	c3                   	ret    
c0019117:	90                   	nop

c0019118 <FAT::openDir(char const*, void**)>:
c0019118:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001911e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019126:	74 0c                	je     c0019134 <FAT::openDir(char const*, void**)+0x1c>
c0019128:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019130:	75 0e                	jne    c0019140 <FAT::openDir(char const*, void**)+0x28>
c0019132:	66 90                	xchg   ax,ax
c0019134:	b8 04 00 00 00       	mov    eax,0x4
c0019139:	e9 82 00 00 00       	jmp    c00191c0 <FAT::openDir(char const*, void**)+0xa8>
c001913e:	66 90                	xchg   ax,ax
c0019140:	83 ec 08             	sub    esp,0x8
c0019143:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001914a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001914e:	50                   	push   eax
c001914f:	e8 ec 74 fe ff       	call   c0000640 <strcpy>
c0019154:	83 c4 10             	add    esp,0x10
c0019157:	83 ec 08             	sub    esp,0x8
c001915a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001915e:	50                   	push   eax
c001915f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019166:	e8 f9 fd ff ff       	call   c0018f64 <FAT::fixFilepath(char*)>
c001916b:	83 c4 10             	add    esp,0x10
c001916e:	83 ec 0c             	sub    esp,0xc
c0019171:	6a 30                	push   0x30
c0019173:	e8 36 e9 fe ff       	call   c0007aae <malloc>
c0019178:	83 c4 10             	add    esp,0x10
c001917b:	89 c2                	mov    edx,eax
c001917d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019184:	89 10                	mov    DWORD PTR [eax],edx
c0019186:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001918d:	8b 00                	mov    eax,DWORD PTR [eax]
c001918f:	83 ec 08             	sub    esp,0x8
c0019192:	8d 54 24 14          	lea    edx,[esp+0x14]
c0019196:	52                   	push   edx
c0019197:	50                   	push   eax
c0019198:	e8 6c b4 fe ff       	call   c0004609 <f_opendir>
c001919d:	83 c4 10             	add    esp,0x10
c00191a0:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00191a7:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00191af:	74 07                	je     c00191b8 <FAT::openDir(char const*, void**)+0xa0>
c00191b1:	b8 01 00 00 00       	mov    eax,0x1
c00191b6:	eb 08                	jmp    c00191c0 <FAT::openDir(char const*, void**)+0xa8>
c00191b8:	b8 00 00 00 00       	mov    eax,0x0
c00191bd:	8d 76 00             	lea    esi,[esi+0x0]
c00191c0:	81 c4 1c 01 00 00    	add    esp,0x11c
c00191c6:	c3                   	ret    
c00191c7:	90                   	nop

c00191c8 <FAT::stat(char const*, unsigned long long*, bool*)>:
c00191c8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00191ce:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00191d6:	75 0c                	jne    c00191e4 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c00191d8:	b8 04 00 00 00       	mov    eax,0x4
c00191dd:	e9 d6 00 00 00       	jmp    c00192b8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00191e2:	66 90                	xchg   ax,ax
c00191e4:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00191ec:	75 0a                	jne    c00191f8 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c00191ee:	b8 04 00 00 00       	mov    eax,0x4
c00191f3:	e9 c0 00 00 00       	jmp    c00192b8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00191f8:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019200:	75 0a                	jne    c001920c <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0019202:	b8 04 00 00 00       	mov    eax,0x4
c0019207:	e9 ac 00 00 00       	jmp    c00192b8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001920c:	83 ec 08             	sub    esp,0x8
c001920f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019216:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001921d:	50                   	push   eax
c001921e:	e8 1d 74 fe ff       	call   c0000640 <strcpy>
c0019223:	83 c4 10             	add    esp,0x10
c0019226:	83 ec 08             	sub    esp,0x8
c0019229:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019230:	50                   	push   eax
c0019231:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019238:	e8 27 fd ff ff       	call   c0018f64 <FAT::fixFilepath(char*)>
c001923d:	83 c4 10             	add    esp,0x10
c0019240:	83 ec 08             	sub    esp,0x8
c0019243:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019247:	50                   	push   eax
c0019248:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001924f:	50                   	push   eax
c0019250:	e8 33 b5 fe ff       	call   c0004788 <f_stat>
c0019255:	83 c4 10             	add    esp,0x10
c0019258:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001925f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019266:	85 c0                	test   eax,eax
c0019268:	74 0a                	je     c0019274 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001926a:	83 f8 04             	cmp    eax,0x4
c001926d:	74 39                	je     c00192a8 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001926f:	eb 3f                	jmp    c00192b0 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0019271:	8d 76 00             	lea    esi,[esi+0x0]
c0019274:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019278:	0f b6 c0             	movzx  eax,al
c001927b:	83 e0 10             	and    eax,0x10
c001927e:	0f 95 c2             	setne  dl
c0019281:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0019288:	88 10                	mov    BYTE PTR [eax],dl
c001928a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001928e:	ba 00 00 00 00       	mov    edx,0x0
c0019293:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001929a:	89 01                	mov    DWORD PTR [ecx],eax
c001929c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001929f:	b8 00 00 00 00       	mov    eax,0x0
c00192a4:	eb 12                	jmp    c00192b8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00192a6:	66 90                	xchg   ax,ax
c00192a8:	b8 02 00 00 00       	mov    eax,0x2
c00192ad:	eb 09                	jmp    c00192b8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00192af:	90                   	nop
c00192b0:	b8 01 00 00 00       	mov    eax,0x1
c00192b5:	8d 76 00             	lea    esi,[esi+0x0]
c00192b8:	81 c4 2c 02 00 00    	add    esp,0x22c
c00192be:	c3                   	ret    
c00192bf:	90                   	nop

c00192c0 <FAT::unlink(char const*)>:
c00192c0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00192c6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00192ce:	75 08                	jne    c00192d8 <FAT::unlink(char const*)+0x18>
c00192d0:	b8 04 00 00 00       	mov    eax,0x4
c00192d5:	eb 61                	jmp    c0019338 <FAT::unlink(char const*)+0x78>
c00192d7:	90                   	nop
c00192d8:	83 ec 08             	sub    esp,0x8
c00192db:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00192e2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00192e6:	50                   	push   eax
c00192e7:	e8 54 73 fe ff       	call   c0000640 <strcpy>
c00192ec:	83 c4 10             	add    esp,0x10
c00192ef:	83 ec 08             	sub    esp,0x8
c00192f2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00192f6:	50                   	push   eax
c00192f7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00192fe:	e8 61 fc ff ff       	call   c0018f64 <FAT::fixFilepath(char*)>
c0019303:	83 c4 10             	add    esp,0x10
c0019306:	83 ec 0c             	sub    esp,0xc
c0019309:	8d 44 24 18          	lea    eax,[esp+0x18]
c001930d:	50                   	push   eax
c001930e:	e8 e7 b6 fe ff       	call   c00049fa <f_unlink>
c0019313:	83 c4 10             	add    esp,0x10
c0019316:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001931d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019324:	85 c0                	test   eax,eax
c0019326:	75 08                	jne    c0019330 <FAT::unlink(char const*)+0x70>
c0019328:	b8 00 00 00 00       	mov    eax,0x0
c001932d:	eb 09                	jmp    c0019338 <FAT::unlink(char const*)+0x78>
c001932f:	90                   	nop
c0019330:	b8 01 00 00 00       	mov    eax,0x1
c0019335:	8d 76 00             	lea    esi,[esi+0x0]
c0019338:	81 c4 1c 01 00 00    	add    esp,0x11c
c001933e:	c3                   	ret    
c001933f:	90                   	nop

c0019340 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0019340:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019346:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001934d:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0019354:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019358:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001935c:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0019364:	75 0a                	jne    c0019370 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0019366:	b8 04 00 00 00       	mov    eax,0x4
c001936b:	e9 7c 01 00 00       	jmp    c00194ec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c0019370:	83 ec 08             	sub    esp,0x8
c0019373:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001937a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001937e:	50                   	push   eax
c001937f:	e8 bc 72 fe ff       	call   c0000640 <strcpy>
c0019384:	83 c4 10             	add    esp,0x10
c0019387:	83 ec 08             	sub    esp,0x8
c001938a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001938e:	50                   	push   eax
c001938f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019396:	e8 c9 fb ff ff       	call   c0018f64 <FAT::fixFilepath(char*)>
c001939b:	83 c4 10             	add    esp,0x10
c001939e:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00193a6:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c00193ae:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00193b3:	83 e0 01             	and    eax,0x1
c00193b6:	74 14                	je     c00193cc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c00193b8:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00193bf:	83 c8 01             	or     eax,0x1
c00193c2:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c00193c9:	8d 76 00             	lea    esi,[esi+0x0]
c00193cc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00193d1:	83 e0 02             	and    eax,0x2
c00193d4:	74 12                	je     c00193e8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c00193d6:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00193dd:	83 c8 20             	or     eax,0x20
c00193e0:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c00193e7:	90                   	nop
c00193e8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00193ed:	83 e0 04             	and    eax,0x4
c00193f0:	74 12                	je     c0019404 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c00193f2:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00193f9:	83 c8 04             	or     eax,0x4
c00193fc:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019403:	90                   	nop
c0019404:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019409:	83 e0 08             	and    eax,0x8
c001940c:	74 12                	je     c0019420 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c001940e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019415:	83 c8 02             	or     eax,0x2
c0019418:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001941f:	90                   	nop
c0019420:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019425:	83 e0 01             	and    eax,0x1
c0019428:	74 12                	je     c001943c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c001942a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019431:	83 c8 01             	or     eax,0x1
c0019434:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001943b:	90                   	nop
c001943c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019441:	83 e0 02             	and    eax,0x2
c0019444:	74 12                	je     c0019458 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c0019446:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001944d:	83 c8 20             	or     eax,0x20
c0019450:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019457:	90                   	nop
c0019458:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001945d:	83 e0 04             	and    eax,0x4
c0019460:	74 12                	je     c0019474 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c0019462:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019469:	83 c8 04             	or     eax,0x4
c001946c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019473:	90                   	nop
c0019474:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019479:	83 e0 08             	and    eax,0x8
c001947c:	74 12                	je     c0019490 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c001947e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019485:	83 c8 02             	or     eax,0x2
c0019488:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001948f:	90                   	nop
c0019490:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c0019497:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001949e:	09 d0                	or     eax,edx
c00194a0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c00194a7:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c00194af:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c00194b7:	83 ec 04             	sub    esp,0x4
c00194ba:	52                   	push   edx
c00194bb:	50                   	push   eax
c00194bc:	8d 44 24 24          	lea    eax,[esp+0x24]
c00194c0:	50                   	push   eax
c00194c1:	e8 a9 b9 fe ff       	call   c0004e6f <f_chmod>
c00194c6:	83 c4 10             	add    esp,0x10
c00194c9:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00194d0:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c00194d7:	85 c0                	test   eax,eax
c00194d9:	75 09                	jne    c00194e4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c00194db:	b8 00 00 00 00       	mov    eax,0x0
c00194e0:	eb 0a                	jmp    c00194ec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c00194e2:	66 90                	xchg   ax,ax
c00194e4:	b8 01 00 00 00       	mov    eax,0x1
c00194e9:	8d 76 00             	lea    esi,[esi+0x0]
c00194ec:	81 c4 2c 01 00 00    	add    esp,0x12c
c00194f2:	c3                   	ret    
c00194f3:	90                   	nop

c00194f4 <FAT::rename(char const*, char const*)>:
c00194f4:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00194fa:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0019502:	74 0c                	je     c0019510 <FAT::rename(char const*, char const*)+0x1c>
c0019504:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001950c:	75 0e                	jne    c001951c <FAT::rename(char const*, char const*)+0x28>
c001950e:	66 90                	xchg   ax,ax
c0019510:	b8 04 00 00 00       	mov    eax,0x4
c0019515:	e9 9e 00 00 00       	jmp    c00195b8 <FAT::rename(char const*, char const*)+0xc4>
c001951a:	66 90                	xchg   ax,ax
c001951c:	83 ec 08             	sub    esp,0x8
c001951f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019526:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001952d:	50                   	push   eax
c001952e:	e8 0d 71 fe ff       	call   c0000640 <strcpy>
c0019533:	83 c4 10             	add    esp,0x10
c0019536:	83 ec 08             	sub    esp,0x8
c0019539:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0019540:	50                   	push   eax
c0019541:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019548:	e8 17 fa ff ff       	call   c0018f64 <FAT::fixFilepath(char*)>
c001954d:	83 c4 10             	add    esp,0x10
c0019550:	83 ec 08             	sub    esp,0x8
c0019553:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001955a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001955e:	50                   	push   eax
c001955f:	e8 dc 70 fe ff       	call   c0000640 <strcpy>
c0019564:	83 c4 10             	add    esp,0x10
c0019567:	83 ec 08             	sub    esp,0x8
c001956a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001956e:	50                   	push   eax
c001956f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019576:	e8 e9 f9 ff ff       	call   c0018f64 <FAT::fixFilepath(char*)>
c001957b:	83 c4 10             	add    esp,0x10
c001957e:	83 ec 08             	sub    esp,0x8
c0019581:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019585:	50                   	push   eax
c0019586:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001958d:	50                   	push   eax
c001958e:	e8 24 b7 fe ff       	call   c0004cb7 <f_rename>
c0019593:	83 c4 10             	add    esp,0x10
c0019596:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001959d:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00195a4:	85 c0                	test   eax,eax
c00195a6:	75 08                	jne    c00195b0 <FAT::rename(char const*, char const*)+0xbc>
c00195a8:	b8 00 00 00 00       	mov    eax,0x0
c00195ad:	eb 09                	jmp    c00195b8 <FAT::rename(char const*, char const*)+0xc4>
c00195af:	90                   	nop
c00195b0:	b8 01 00 00 00       	mov    eax,0x1
c00195b5:	8d 76 00             	lea    esi,[esi+0x0]
c00195b8:	81 c4 1c 02 00 00    	add    esp,0x21c
c00195be:	c3                   	ret    
c00195bf:	90                   	nop

c00195c0 <FAT::mkdir(char const*)>:
c00195c0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00195c6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00195ce:	75 08                	jne    c00195d8 <FAT::mkdir(char const*)+0x18>
c00195d0:	b8 04 00 00 00       	mov    eax,0x4
c00195d5:	eb 61                	jmp    c0019638 <FAT::mkdir(char const*)+0x78>
c00195d7:	90                   	nop
c00195d8:	83 ec 08             	sub    esp,0x8
c00195db:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00195e2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00195e6:	50                   	push   eax
c00195e7:	e8 54 70 fe ff       	call   c0000640 <strcpy>
c00195ec:	83 c4 10             	add    esp,0x10
c00195ef:	83 ec 08             	sub    esp,0x8
c00195f2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00195f6:	50                   	push   eax
c00195f7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00195fe:	e8 61 f9 ff ff       	call   c0018f64 <FAT::fixFilepath(char*)>
c0019603:	83 c4 10             	add    esp,0x10
c0019606:	83 ec 0c             	sub    esp,0xc
c0019609:	8d 44 24 18          	lea    eax,[esp+0x18]
c001960d:	50                   	push   eax
c001960e:	e8 09 b5 fe ff       	call   c0004b1c <f_mkdir>
c0019613:	83 c4 10             	add    esp,0x10
c0019616:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001961d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019624:	85 c0                	test   eax,eax
c0019626:	75 08                	jne    c0019630 <FAT::mkdir(char const*)+0x70>
c0019628:	b8 00 00 00 00       	mov    eax,0x0
c001962d:	eb 09                	jmp    c0019638 <FAT::mkdir(char const*)+0x78>
c001962f:	90                   	nop
c0019630:	b8 01 00 00 00       	mov    eax,0x1
c0019635:	8d 76 00             	lea    esi,[esi+0x0]
c0019638:	81 c4 1c 01 00 00    	add    esp,0x11c
c001963e:	c3                   	ret    
c001963f:	90                   	nop

c0019640 <FAT::exists(char const*)>:
c0019640:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019646:	83 ec 08             	sub    esp,0x8
c0019649:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019650:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019654:	50                   	push   eax
c0019655:	e8 e6 6f fe ff       	call   c0000640 <strcpy>
c001965a:	83 c4 10             	add    esp,0x10
c001965d:	83 ec 08             	sub    esp,0x8
c0019660:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019664:	50                   	push   eax
c0019665:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001966c:	e8 f3 f8 ff ff       	call   c0018f64 <FAT::fixFilepath(char*)>
c0019671:	83 c4 10             	add    esp,0x10
c0019674:	83 ec 08             	sub    esp,0x8
c0019677:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001967e:	50                   	push   eax
c001967f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019683:	50                   	push   eax
c0019684:	e8 ff b0 fe ff       	call   c0004788 <f_stat>
c0019689:	83 c4 10             	add    esp,0x10
c001968c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019693:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001969a:	85 c0                	test   eax,eax
c001969c:	75 06                	jne    c00196a4 <FAT::exists(char const*)+0x64>
c001969e:	b0 01                	mov    al,0x1
c00196a0:	eb 06                	jmp    c00196a8 <FAT::exists(char const*)+0x68>
c00196a2:	66 90                	xchg   ax,ax
c00196a4:	b0 00                	mov    al,0x0
c00196a6:	66 90                	xchg   ax,ax
c00196a8:	81 c4 2c 02 00 00    	add    esp,0x22c
c00196ae:	c3                   	ret    
c00196af:	90                   	nop

c00196b0 <isoReadDiscSectorHelper>:
c00196b0:	83 ec 2c             	sub    esp,0x2c
c00196b3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00196b7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00196bb:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c00196c0:	83 e8 41             	sub    eax,0x41
c00196c3:	8b 0c 85 20 84 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7be0]
c00196ca:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00196ce:	ba 00 00 00 00       	mov    edx,0x0
c00196d3:	83 ec 0c             	sub    esp,0xc
c00196d6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00196da:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00196de:	52                   	push   edx
c00196df:	50                   	push   eax
c00196e0:	51                   	push   ecx
c00196e1:	e8 3e 3d ff ff       	call   c000d424 <LogicalDisk::read(unsigned long long, int, void*)>
c00196e6:	83 c4 20             	add    esp,0x20
c00196e9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00196ed:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00196f2:	74 0c                	je     c0019700 <isoReadDiscSectorHelper+0x50>
c00196f4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00196f8:	c1 e0 0b             	shl    eax,0xb
c00196fb:	eb 0b                	jmp    c0019708 <isoReadDiscSectorHelper+0x58>
c00196fd:	8d 76 00             	lea    esi,[esi+0x0]
c0019700:	b8 00 00 00 00       	mov    eax,0x0
c0019705:	8d 76 00             	lea    esi,[esi+0x0]
c0019708:	83 c4 2c             	add    esp,0x2c
c001970b:	c3                   	ret    

c001970c <iso_kprintf>:
c001970c:	83 ec 0c             	sub    esp,0xc
c001970f:	83 ec 08             	sub    esp,0x8
c0019712:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019716:	68 96 1d 02 c0       	push   0xc0021d96
c001971b:	e8 19 12 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0019720:	83 c4 10             	add    esp,0x10
c0019723:	90                   	nop
c0019724:	83 c4 0c             	add    esp,0xc
c0019727:	c3                   	ret    

c0019728 <iso_kprintfd>:
c0019728:	83 ec 0c             	sub    esp,0xc
c001972b:	83 ec 08             	sub    esp,0x8
c001972e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019732:	68 da 05 02 c0       	push   0xc00205da
c0019737:	e8 fd 11 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c001973c:	83 c4 10             	add    esp,0x10
c001973f:	90                   	nop
c0019740:	83 c4 0c             	add    esp,0xc
c0019743:	c3                   	ret    

c0019744 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0019744:	b8 08 00 00 00       	mov    eax,0x8
c0019749:	c3                   	ret    

c001974a <ISO9660::getName()>:
c001974a:	b8 48 20 02 c0       	mov    eax,0xc0022048
c001974f:	c3                   	ret    

c0019750 <ISO9660::closeDir(void*)>:
c0019750:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019754:	8b 00                	mov    eax,DWORD PTR [eax]
c0019756:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c0019759:	90                   	nop

c001975a <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001975a:	b8 01 00 00 00       	mov    eax,0x1
c001975f:	c3                   	ret    

c0019760 <ISO9660::unlink(char const*)>:
c0019760:	b8 01 00 00 00       	mov    eax,0x1
c0019765:	c3                   	ret    

c0019766 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0019766:	b8 03 00 00 00       	mov    eax,0x3
c001976b:	c3                   	ret    

c001976c <ISO9660::rename(char const*, char const*)>:
c001976c:	b8 01 00 00 00       	mov    eax,0x1
c0019771:	c3                   	ret    

c0019772 <ISO9660::mkdir(char const*)>:
c0019772:	b8 01 00 00 00       	mov    eax,0x1
c0019777:	c3                   	ret    

c0019778 <ISO9660::~ISO9660()>:
c0019778:	83 ec 0c             	sub    esp,0xc
c001977b:	ba 88 21 02 c0       	mov    edx,0xc0022188
c0019780:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019784:	89 10                	mov    DWORD PTR [eax],edx
c0019786:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001978a:	83 ec 0c             	sub    esp,0xc
c001978d:	50                   	push   eax
c001978e:	e8 c1 17 ff ff       	call   c000af54 <Filesystem::~Filesystem()>
c0019793:	83 c4 10             	add    esp,0x10
c0019796:	90                   	nop
c0019797:	83 c4 0c             	add    esp,0xc
c001979a:	c3                   	ret    
c001979b:	90                   	nop

c001979c <ISO9660::~ISO9660()>:
c001979c:	83 ec 0c             	sub    esp,0xc
c001979f:	83 ec 0c             	sub    esp,0xc
c00197a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00197a6:	e8 cd ff ff ff       	call   c0019778 <ISO9660::~ISO9660()>
c00197ab:	83 c4 10             	add    esp,0x10
c00197ae:	83 ec 08             	sub    esp,0x8
c00197b1:	6a 08                	push   0x8
c00197b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00197b7:	e8 50 10 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c00197bc:	83 c4 10             	add    esp,0x10
c00197bf:	83 c4 0c             	add    esp,0xc
c00197c2:	c3                   	ret    
c00197c3:	90                   	nop

c00197c4 <ISO9660::exists(char const*)>:
c00197c4:	83 ec 18             	sub    esp,0x18
c00197c7:	68 63 20 02 c0       	push   0xc0022063
c00197cc:	e8 ca 73 ff ff       	call   c0010b9b <KePanic(char const*)>
c00197d1:	31 c0                	xor    eax,eax
c00197d3:	83 c4 1c             	add    esp,0x1c
c00197d6:	c3                   	ret    
c00197d7:	90                   	nop

c00197d8 <ISO9660::open(char const*, void**, FileOpenMode)>:
c00197d8:	56                   	push   esi
c00197d9:	53                   	push   ebx
c00197da:	53                   	push   ebx
c00197db:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00197df:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00197e3:	85 db                	test   ebx,ebx
c00197e5:	0f 84 ca 00 00 00    	je     c00198b5 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c00197eb:	85 f6                	test   esi,esi
c00197ed:	0f 84 c2 00 00 00    	je     c00198b5 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c00197f3:	b8 03 00 00 00       	mov    eax,0x3
c00197f8:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c00197fd:	0f 85 b7 00 00 00    	jne    c00198ba <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0019803:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0019805:	0f be 05 20 93 02 c0 	movsx  eax,BYTE PTR ds:0xc0029320
c001980c:	38 0d 20 93 02 c0    	cmp    BYTE PTR ds:0xc0029320,cl
c0019812:	74 1b                	je     c001982f <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c0019814:	85 c0                	test   eax,eax
c0019816:	74 10                	je     c0019828 <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c0019818:	83 ec 0c             	sub    esp,0xc
c001981b:	68 81 20 02 c0       	push   0xc0022081
c0019820:	e8 76 73 ff ff       	call   c0010b9b <KePanic(char const*)>
c0019825:	83 c4 10             	add    esp,0x10
c0019828:	8a 03                	mov    al,BYTE PTR [ebx]
c001982a:	a2 20 93 02 c0       	mov    ds:0xc0029320,al
c001982f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019832:	8b 04 85 1c 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7ce4]
c0019839:	85 c0                	test   eax,eax
c001983b:	74 09                	je     c0019846 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001983d:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0019844:	74 48                	je     c001988e <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c0019846:	83 ec 0c             	sub    esp,0xc
c0019849:	68 91 20 02 c0       	push   0xc0022091
c001984e:	e8 e6 10 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0019853:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019856:	83 c4 10             	add    esp,0x10
c0019859:	8b 04 85 1c 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7ce4]
c0019860:	85 c0                	test   eax,eax
c0019862:	74 17                	je     c001987b <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c0019864:	83 ec 0c             	sub    esp,0xc
c0019867:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001986e:	68 b1 20 02 c0       	push   0xc00220b1
c0019873:	e8 c1 10 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0019878:	83 c4 10             	add    esp,0x10
c001987b:	83 ec 0c             	sub    esp,0xc
c001987e:	0f be 05 20 93 02 c0 	movsx  eax,BYTE PTR ds:0xc0029320
c0019885:	50                   	push   eax
c0019886:	e8 bb d1 fe ff       	call   c0006a46 <init_percd>
c001988b:	83 c4 10             	add    esp,0x10
c001988e:	83 c3 03             	add    ebx,0x3
c0019891:	51                   	push   ecx
c0019892:	51                   	push   ecx
c0019893:	6a 00                	push   0x0
c0019895:	53                   	push   ebx
c0019896:	e8 72 cc fe ff       	call   c000650d <iso_open>
c001989b:	83 c4 10             	add    esp,0x10
c001989e:	89 c2                	mov    edx,eax
c00198a0:	b8 01 00 00 00       	mov    eax,0x1
c00198a5:	83 fa ff             	cmp    edx,0xffffffff
c00198a8:	74 10                	je     c00198ba <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c00198aa:	83 c2 32             	add    edx,0x32
c00198ad:	31 c0                	xor    eax,eax
c00198af:	01 d2                	add    edx,edx
c00198b1:	89 16                	mov    DWORD PTR [esi],edx
c00198b3:	eb 05                	jmp    c00198ba <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c00198b5:	b8 04 00 00 00       	mov    eax,0x4
c00198ba:	5a                   	pop    edx
c00198bb:	5b                   	pop    ebx
c00198bc:	5e                   	pop    esi
c00198bd:	c3                   	ret    

c00198be <ISO9660::read(void*, unsigned long, void*, int*)>:
c00198be:	53                   	push   ebx
c00198bf:	83 ec 08             	sub    esp,0x8
c00198c2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00198c6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00198ca:	85 c0                	test   eax,eax
c00198cc:	74 2d                	je     c00198fb <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c00198ce:	85 db                	test   ebx,ebx
c00198d0:	74 29                	je     c00198fb <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c00198d2:	b9 02 00 00 00       	mov    ecx,0x2
c00198d7:	52                   	push   edx
c00198d8:	99                   	cdq    
c00198d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00198dd:	f7 f9                	idiv   ecx
c00198df:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00198e3:	83 e8 32             	sub    eax,0x32
c00198e6:	50                   	push   eax
c00198e7:	e8 c9 cc fe ff       	call   c00065b5 <iso_read>
c00198ec:	83 c4 10             	add    esp,0x10
c00198ef:	89 03                	mov    DWORD PTR [ebx],eax
c00198f1:	09 d0                	or     eax,edx
c00198f3:	0f 94 c0             	sete   al
c00198f6:	0f b6 c0             	movzx  eax,al
c00198f9:	eb 05                	jmp    c0019900 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c00198fb:	b8 04 00 00 00       	mov    eax,0x4
c0019900:	83 c4 08             	add    esp,0x8
c0019903:	5b                   	pop    ebx
c0019904:	c3                   	ret    
c0019905:	90                   	nop

c0019906 <ISO9660::seek(void*, unsigned long long)>:
c0019906:	57                   	push   edi
c0019907:	56                   	push   esi
c0019908:	b8 04 00 00 00       	mov    eax,0x4
c001990d:	51                   	push   ecx
c001990e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019912:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019916:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001991a:	85 d2                	test   edx,edx
c001991c:	74 26                	je     c0019944 <ISO9660::seek(void*, unsigned long long)+0x3e>
c001991e:	6a 00                	push   0x0
c0019920:	b9 02 00 00 00       	mov    ecx,0x2
c0019925:	57                   	push   edi
c0019926:	89 d0                	mov    eax,edx
c0019928:	56                   	push   esi
c0019929:	99                   	cdq    
c001992a:	f7 f9                	idiv   ecx
c001992c:	83 e8 32             	sub    eax,0x32
c001992f:	50                   	push   eax
c0019930:	e8 96 cd fe ff       	call   c00066cb <iso_seek>
c0019935:	83 c4 10             	add    esp,0x10
c0019938:	31 f0                	xor    eax,esi
c001993a:	31 fa                	xor    edx,edi
c001993c:	09 d0                	or     eax,edx
c001993e:	0f 95 c0             	setne  al
c0019941:	0f b6 c0             	movzx  eax,al
c0019944:	5a                   	pop    edx
c0019945:	5e                   	pop    esi
c0019946:	5f                   	pop    edi
c0019947:	c3                   	ret    

c0019948 <ISO9660::tell(void*, unsigned long long*)>:
c0019948:	53                   	push   ebx
c0019949:	83 ec 08             	sub    esp,0x8
c001994c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019950:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019954:	85 c0                	test   eax,eax
c0019956:	74 24                	je     c001997c <ISO9660::tell(void*, unsigned long long*)+0x34>
c0019958:	85 db                	test   ebx,ebx
c001995a:	74 20                	je     c001997c <ISO9660::tell(void*, unsigned long long*)+0x34>
c001995c:	83 ec 0c             	sub    esp,0xc
c001995f:	b9 02 00 00 00       	mov    ecx,0x2
c0019964:	99                   	cdq    
c0019965:	f7 f9                	idiv   ecx
c0019967:	83 e8 32             	sub    eax,0x32
c001996a:	50                   	push   eax
c001996b:	e8 df cd fe ff       	call   c000674f <iso_tell>
c0019970:	83 c4 10             	add    esp,0x10
c0019973:	89 03                	mov    DWORD PTR [ebx],eax
c0019975:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0019978:	31 c0                	xor    eax,eax
c001997a:	eb 05                	jmp    c0019981 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001997c:	b8 04 00 00 00       	mov    eax,0x4
c0019981:	83 c4 08             	add    esp,0x8
c0019984:	5b                   	pop    ebx
c0019985:	c3                   	ret    

c0019986 <ISO9660::stat(void*, unsigned long long*)>:
c0019986:	53                   	push   ebx
c0019987:	83 ec 14             	sub    esp,0x14
c001998a:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001998e:	68 d5 20 02 c0       	push   0xc00220d5
c0019993:	e8 a1 0f ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0019998:	83 c4 10             	add    esp,0x10
c001999b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00199a0:	74 2c                	je     c00199ce <ISO9660::stat(void*, unsigned long long*)+0x48>
c00199a2:	85 db                	test   ebx,ebx
c00199a4:	74 28                	je     c00199ce <ISO9660::stat(void*, unsigned long long*)+0x48>
c00199a6:	83 ec 0c             	sub    esp,0xc
c00199a9:	b9 02 00 00 00       	mov    ecx,0x2
c00199ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00199b2:	99                   	cdq    
c00199b3:	f7 f9                	idiv   ecx
c00199b5:	83 e8 32             	sub    eax,0x32
c00199b8:	50                   	push   eax
c00199b9:	e8 c2 cd fe ff       	call   c0006780 <iso_total>
c00199be:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00199c5:	89 03                	mov    DWORD PTR [ebx],eax
c00199c7:	83 c4 10             	add    esp,0x10
c00199ca:	31 c0                	xor    eax,eax
c00199cc:	eb 05                	jmp    c00199d3 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c00199ce:	b8 04 00 00 00       	mov    eax,0x4
c00199d3:	83 c4 08             	add    esp,0x8
c00199d6:	5b                   	pop    ebx
c00199d7:	c3                   	ret    

c00199d8 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c00199d8:	55                   	push   ebp
c00199d9:	57                   	push   edi
c00199da:	56                   	push   esi
c00199db:	53                   	push   ebx
c00199dc:	83 ec 18             	sub    esp,0x18
c00199df:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00199e3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00199e7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00199eb:	68 dd 20 02 c0       	push   0xc00220dd
c00199f0:	e8 44 0f ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c00199f5:	83 c4 10             	add    esp,0x10
c00199f8:	85 ff                	test   edi,edi
c00199fa:	0f 94 c0             	sete   al
c00199fd:	85 f6                	test   esi,esi
c00199ff:	0f 94 c2             	sete   dl
c0019a02:	09 d0                	or     eax,edx
c0019a04:	a8 01                	test   al,0x1
c0019a06:	0f 85 dd 00 00 00    	jne    c0019ae9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c0019a0c:	85 db                	test   ebx,ebx
c0019a0e:	0f 84 d5 00 00 00    	je     c0019ae9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c0019a14:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0019a17:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0019a1d:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0019a24:	0f be 05 20 93 02 c0 	movsx  eax,BYTE PTR ds:0xc0029320
c0019a2b:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0019a2d:	38 0d 20 93 02 c0    	cmp    BYTE PTR ds:0xc0029320,cl
c0019a33:	74 1b                	je     c0019a50 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c0019a35:	85 c0                	test   eax,eax
c0019a37:	74 10                	je     c0019a49 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c0019a39:	83 ec 0c             	sub    esp,0xc
c0019a3c:	68 81 20 02 c0       	push   0xc0022081
c0019a41:	e8 55 71 ff ff       	call   c0010b9b <KePanic(char const*)>
c0019a46:	83 c4 10             	add    esp,0x10
c0019a49:	8a 03                	mov    al,BYTE PTR [ebx]
c0019a4b:	a2 20 93 02 c0       	mov    ds:0xc0029320,al
c0019a50:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019a53:	8b 04 85 1c 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7ce4]
c0019a5a:	85 c0                	test   eax,eax
c0019a5c:	74 09                	je     c0019a67 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c0019a5e:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0019a65:	74 51                	je     c0019ab8 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c0019a67:	83 ec 0c             	sub    esp,0xc
c0019a6a:	68 e5 20 02 c0       	push   0xc00220e5
c0019a6f:	e8 c5 0e ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0019a74:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019a77:	83 c4 10             	add    esp,0x10
c0019a7a:	83 3c 85 1c 83 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd7ce4],0x0
c0019a82:	74 21                	je     c0019aa5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c0019a84:	83 ec 0c             	sub    esp,0xc
c0019a87:	68 05 21 02 c0       	push   0xc0022105
c0019a8c:	e8 a8 0e ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0019a91:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019a94:	83 c4 10             	add    esp,0x10
c0019a97:	8b 04 85 1c 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7ce4]
c0019a9e:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0019aa5:	83 ec 0c             	sub    esp,0xc
c0019aa8:	0f be 05 20 93 02 c0 	movsx  eax,BYTE PTR ds:0xc0029320
c0019aaf:	50                   	push   eax
c0019ab0:	e8 91 cf fe ff       	call   c0006a46 <init_percd>
c0019ab5:	83 c4 10             	add    esp,0x10
c0019ab8:	83 c3 03             	add    ebx,0x3
c0019abb:	52                   	push   edx
c0019abc:	52                   	push   edx
c0019abd:	6a 00                	push   0x0
c0019abf:	53                   	push   ebx
c0019ac0:	e8 48 ca fe ff       	call   c000650d <iso_open>
c0019ac5:	83 c4 10             	add    esp,0x10
c0019ac8:	89 c5                	mov    ebp,eax
c0019aca:	83 f8 ff             	cmp    eax,0xffffffff
c0019acd:	75 21                	jne    c0019af0 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c0019acf:	50                   	push   eax
c0019ad0:	50                   	push   eax
c0019ad1:	6a 01                	push   0x1
c0019ad3:	53                   	push   ebx
c0019ad4:	e8 34 ca fe ff       	call   c000650d <iso_open>
c0019ad9:	83 c4 10             	add    esp,0x10
c0019adc:	ba 02 00 00 00       	mov    edx,0x2
c0019ae1:	40                   	inc    eax
c0019ae2:	74 2b                	je     c0019b0f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c0019ae4:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0019ae7:	eb 24                	jmp    c0019b0d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c0019ae9:	ba 04 00 00 00       	mov    edx,0x4
c0019aee:	eb 1f                	jmp    c0019b0f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c0019af0:	83 ec 0c             	sub    esp,0xc
c0019af3:	50                   	push   eax
c0019af4:	e8 87 cc fe ff       	call   c0006780 <iso_total>
c0019af9:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0019b00:	89 07                	mov    DWORD PTR [edi],eax
c0019b02:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0019b05:	e8 8d ca fe ff       	call   c0006597 <iso_close>
c0019b0a:	83 c4 10             	add    esp,0x10
c0019b0d:	31 d2                	xor    edx,edx
c0019b0f:	83 c4 0c             	add    esp,0xc
c0019b12:	89 d0                	mov    eax,edx
c0019b14:	5b                   	pop    ebx
c0019b15:	5e                   	pop    esi
c0019b16:	5f                   	pop    edi
c0019b17:	5d                   	pop    ebp
c0019b18:	c3                   	ret    
c0019b19:	90                   	nop

c0019b1a <ISO9660::close(void*)>:
c0019b1a:	83 ec 0c             	sub    esp,0xc
c0019b1d:	b8 04 00 00 00       	mov    eax,0x4
c0019b22:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019b26:	85 d2                	test   edx,edx
c0019b28:	74 1b                	je     c0019b45 <ISO9660::close(void*)+0x2b>
c0019b2a:	83 ec 0c             	sub    esp,0xc
c0019b2d:	b9 02 00 00 00       	mov    ecx,0x2
c0019b32:	89 d0                	mov    eax,edx
c0019b34:	99                   	cdq    
c0019b35:	f7 f9                	idiv   ecx
c0019b37:	83 e8 32             	sub    eax,0x32
c0019b3a:	50                   	push   eax
c0019b3b:	e8 57 ca fe ff       	call   c0006597 <iso_close>
c0019b40:	83 c4 10             	add    esp,0x10
c0019b43:	31 c0                	xor    eax,eax
c0019b45:	83 c4 0c             	add    esp,0xc
c0019b48:	c3                   	ret    
c0019b49:	90                   	nop

c0019b4a <ISO9660::openDir(char const*, void**)>:
c0019b4a:	56                   	push   esi
c0019b4b:	53                   	push   ebx
c0019b4c:	50                   	push   eax
c0019b4d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019b51:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019b55:	85 db                	test   ebx,ebx
c0019b57:	0f 84 bd 00 00 00    	je     c0019c1a <ISO9660::openDir(char const*, void**)+0xd0>
c0019b5d:	85 f6                	test   esi,esi
c0019b5f:	0f 84 b5 00 00 00    	je     c0019c1a <ISO9660::openDir(char const*, void**)+0xd0>
c0019b65:	8a 13                	mov    dl,BYTE PTR [ebx]
c0019b67:	0f be 05 20 93 02 c0 	movsx  eax,BYTE PTR ds:0xc0029320
c0019b6e:	38 15 20 93 02 c0    	cmp    BYTE PTR ds:0xc0029320,dl
c0019b74:	74 1b                	je     c0019b91 <ISO9660::openDir(char const*, void**)+0x47>
c0019b76:	85 c0                	test   eax,eax
c0019b78:	74 10                	je     c0019b8a <ISO9660::openDir(char const*, void**)+0x40>
c0019b7a:	83 ec 0c             	sub    esp,0xc
c0019b7d:	68 81 20 02 c0       	push   0xc0022081
c0019b82:	e8 14 70 ff ff       	call   c0010b9b <KePanic(char const*)>
c0019b87:	83 c4 10             	add    esp,0x10
c0019b8a:	8a 03                	mov    al,BYTE PTR [ebx]
c0019b8c:	a2 20 93 02 c0       	mov    ds:0xc0029320,al
c0019b91:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019b94:	8b 04 85 1c 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7ce4]
c0019b9b:	85 c0                	test   eax,eax
c0019b9d:	74 10                	je     c0019baf <ISO9660::openDir(char const*, void**)+0x65>
c0019b9f:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0019ba6:	74 1a                	je     c0019bc2 <ISO9660::openDir(char const*, void**)+0x78>
c0019ba8:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0019baf:	83 ec 0c             	sub    esp,0xc
c0019bb2:	0f be 05 20 93 02 c0 	movsx  eax,BYTE PTR ds:0xc0029320
c0019bb9:	50                   	push   eax
c0019bba:	e8 87 ce fe ff       	call   c0006a46 <init_percd>
c0019bbf:	83 c4 10             	add    esp,0x10
c0019bc2:	83 c3 03             	add    ebx,0x3
c0019bc5:	50                   	push   eax
c0019bc6:	50                   	push   eax
c0019bc7:	6a 01                	push   0x1
c0019bc9:	53                   	push   ebx
c0019bca:	e8 3e c9 fe ff       	call   c000650d <iso_open>
c0019bcf:	83 c4 10             	add    esp,0x10
c0019bd2:	89 c3                	mov    ebx,eax
c0019bd4:	83 f8 ff             	cmp    eax,0xffffffff
c0019bd7:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0019bdc:	75 1c                	jne    c0019bfa <ISO9660::openDir(char const*, void**)+0xb0>
c0019bde:	53                   	push   ebx
c0019bdf:	53                   	push   ebx
c0019be0:	68 29 21 02 c0       	push   0xc0022129
c0019be5:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0019beb:	e8 a8 ee fe ff       	call   c0008a98 <VgaText::puts(char const*)>
c0019bf0:	83 c4 10             	add    esp,0x10
c0019bf3:	b8 01 00 00 00       	mov    eax,0x1
c0019bf8:	eb 25                	jmp    c0019c1f <ISO9660::openDir(char const*, void**)+0xd5>
c0019bfa:	01 db                	add    ebx,ebx
c0019bfc:	51                   	push   ecx
c0019bfd:	83 c3 65             	add    ebx,0x65
c0019c00:	51                   	push   ecx
c0019c01:	68 3c 21 02 c0       	push   0xc002213c
c0019c06:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0019c0c:	e8 87 ee fe ff       	call   c0008a98 <VgaText::puts(char const*)>
c0019c11:	89 1e                	mov    DWORD PTR [esi],ebx
c0019c13:	83 c4 10             	add    esp,0x10
c0019c16:	31 c0                	xor    eax,eax
c0019c18:	eb 05                	jmp    c0019c1f <ISO9660::openDir(char const*, void**)+0xd5>
c0019c1a:	b8 04 00 00 00       	mov    eax,0x4
c0019c1f:	5a                   	pop    edx
c0019c20:	5b                   	pop    ebx
c0019c21:	5e                   	pop    esi
c0019c22:	c3                   	ret    
c0019c23:	90                   	nop

c0019c24 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0019c24:	55                   	push   ebp
c0019c25:	57                   	push   edi
c0019c26:	56                   	push   esi
c0019c27:	53                   	push   ebx
c0019c28:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019c2e:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0019c35:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0019c3c:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0019c44:	0f 84 e7 00 00 00    	je     c0019d31 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c0019c4a:	85 db                	test   ebx,ebx
c0019c4c:	0f 84 df 00 00 00    	je     c0019d31 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c0019c52:	83 ec 0c             	sub    esp,0xc
c0019c55:	68 4f 21 02 c0       	push   0xc002214f
c0019c5a:	e8 da 0c ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0019c5f:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0019c66:	b9 02 00 00 00       	mov    ecx,0x2
c0019c6b:	99                   	cdq    
c0019c6c:	f7 f9                	idiv   ecx
c0019c6e:	83 e8 32             	sub    eax,0x32
c0019c71:	89 04 24             	mov    DWORD PTR [esp],eax
c0019c74:	e8 59 cb fe ff       	call   c00067d2 <iso_readdir>
c0019c79:	83 c4 10             	add    esp,0x10
c0019c7c:	89 c6                	mov    esi,eax
c0019c7e:	85 c0                	test   eax,eax
c0019c80:	75 37                	jne    c0019cb9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c0019c82:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0019c87:	56                   	push   esi
c0019c88:	56                   	push   esi
c0019c89:	68 5a 21 02 c0       	push   0xc002215a
c0019c8e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0019c94:	e8 ff ed fe ff       	call   c0008a98 <VgaText::puts(char const*)>
c0019c99:	83 c4 0c             	add    esp,0xc
c0019c9c:	68 10 01 00 00       	push   0x110
c0019ca1:	6a 00                	push   0x0
c0019ca3:	57                   	push   edi
c0019ca4:	e8 47 68 fe ff       	call   c00004f0 <memset>
c0019ca9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0019caf:	83 c4 10             	add    esp,0x10
c0019cb2:	b8 01 00 00 00       	mov    eax,0x1
c0019cb7:	eb 7d                	jmp    c0019d36 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c0019cb9:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0019cbf:	8d 68 08             	lea    ebp,[eax+0x8]
c0019cc2:	83 ec 0c             	sub    esp,0xc
c0019cc5:	55                   	push   ebp
c0019cc6:	e8 a5 68 fe ff       	call   c0000570 <strlen>
c0019ccb:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0019cd3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019cd7:	83 c4 10             	add    esp,0x10
c0019cda:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c0019cde:	75 0a                	jne    c0019cea <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0019ce0:	b8 02 00 00 00       	mov    eax,0x2
c0019ce5:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c0019ce8:	74 05                	je     c0019cef <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c0019cea:	b8 01 00 00 00       	mov    eax,0x1
c0019cef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019cf3:	50                   	push   eax
c0019cf4:	50                   	push   eax
c0019cf5:	55                   	push   ebp
c0019cf6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019cfa:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0019cfe:	50                   	push   eax
c0019cff:	e8 3c 69 fe ff       	call   c0000640 <strcpy>
c0019d04:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0019d0b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019d0d:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c0019d13:	5a                   	pop    edx
c0019d14:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0019d19:	59                   	pop    ecx
c0019d1a:	68 6d 21 02 c0       	push   0xc002216d
c0019d1f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0019d25:	e8 6e ed fe ff       	call   c0008a98 <VgaText::puts(char const*)>
c0019d2a:	83 c4 10             	add    esp,0x10
c0019d2d:	31 c0                	xor    eax,eax
c0019d2f:	eb 05                	jmp    c0019d36 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c0019d31:	b8 04 00 00 00       	mov    eax,0x4
c0019d36:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019d3c:	5b                   	pop    ebx
c0019d3d:	5e                   	pop    esi
c0019d3e:	5f                   	pop    edi
c0019d3f:	5d                   	pop    ebp
c0019d40:	c3                   	ret    

c0019d41 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0019d41:	57                   	push   edi
c0019d42:	56                   	push   esi
c0019d43:	53                   	push   ebx
c0019d44:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019d48:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019d4c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019d50:	39 35 24 93 02 c0    	cmp    DWORD PTR ds:0xc0029324,esi
c0019d56:	0f be cb             	movsx  ecx,bl
c0019d59:	75 0b                	jne    c0019d66 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c0019d5b:	0f be 05 a0 2f 02 c0 	movsx  eax,BYTE PTR ds:0xc0022fa0
c0019d62:	39 c8                	cmp    eax,ecx
c0019d64:	74 47                	je     c0019dad <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c0019d66:	83 ec 0c             	sub    esp,0xc
c0019d69:	31 d2                	xor    edx,edx
c0019d6b:	68 40 93 02 c0       	push   0xc0029340
c0019d70:	6a 01                	push   0x1
c0019d72:	52                   	push   edx
c0019d73:	56                   	push   esi
c0019d74:	ff 34 8d 1c 83 02 c0 	push   DWORD PTR [ecx*4-0x3ffd7ce4]
c0019d7b:	e8 a4 36 ff ff       	call   c000d424 <LogicalDisk::read(unsigned long long, int, void*)>
c0019d80:	83 c4 20             	add    esp,0x20
c0019d83:	85 c0                	test   eax,eax
c0019d85:	75 0e                	jne    c0019d95 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c0019d87:	89 35 24 93 02 c0    	mov    DWORD PTR ds:0xc0029324,esi
c0019d8d:	88 1d a0 2f 02 c0    	mov    BYTE PTR ds:0xc0022fa0,bl
c0019d93:	eb 18                	jmp    c0019dad <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c0019d95:	50                   	push   eax
c0019d96:	68 00 08 00 00       	push   0x800
c0019d9b:	6a 00                	push   0x0
c0019d9d:	57                   	push   edi
c0019d9e:	e8 4d 67 fe ff       	call   c00004f0 <memset>
c0019da3:	83 c4 10             	add    esp,0x10
c0019da6:	b8 01 00 00 00       	mov    eax,0x1
c0019dab:	eb 0e                	jmp    c0019dbb <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c0019dad:	be 40 93 02 c0       	mov    esi,0xc0029340
c0019db2:	b9 00 08 00 00       	mov    ecx,0x800
c0019db7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019db9:	31 c0                	xor    eax,eax
c0019dbb:	5b                   	pop    ebx
c0019dbc:	5e                   	pop    esi
c0019dbd:	5f                   	pop    edi
c0019dbe:	c3                   	ret    
c0019dbf:	90                   	nop

c0019dc0 <ISO9660::tryMount(LogicalDisk*, int)>:
c0019dc0:	53                   	push   ebx
c0019dc1:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0019dc7:	c7 05 24 93 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0029324,0xdeadbeef
c0019dd1:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c0019dd8:	8d 58 41             	lea    ebx,[eax+0x41]
c0019ddb:	0f be db             	movsx  ebx,bl
c0019dde:	53                   	push   ebx
c0019ddf:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019de3:	50                   	push   eax
c0019de4:	6a 10                	push   0x10
c0019de6:	e8 56 ff ff ff       	call   c0019d41 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0019deb:	83 c4 10             	add    esp,0x10
c0019dee:	31 d2                	xor    edx,edx
c0019df0:	85 c0                	test   eax,eax
c0019df2:	75 33                	jne    c0019e27 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019df4:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0019df9:	75 2c                	jne    c0019e27 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019dfb:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0019e00:	75 25                	jne    c0019e27 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019e02:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0019e07:	75 1e                	jne    c0019e27 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019e09:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0019e0e:	75 17                	jne    c0019e27 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019e10:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0019e15:	75 10                	jne    c0019e27 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019e17:	83 ec 0c             	sub    esp,0xc
c0019e1a:	53                   	push   ebx
c0019e1b:	e8 26 cc fe ff       	call   c0006a46 <init_percd>
c0019e20:	83 c4 10             	add    esp,0x10
c0019e23:	40                   	inc    eax
c0019e24:	0f 95 c2             	setne  dl
c0019e27:	88 d0                	mov    al,dl
c0019e29:	81 c4 08 08 00 00    	add    esp,0x808
c0019e2f:	5b                   	pop    ebx
c0019e30:	c3                   	ret    
c0019e31:	90                   	nop

c0019e32 <ISO9660::ISO9660()>:
c0019e32:	83 ec 0c             	sub    esp,0xc
c0019e35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e39:	83 ec 0c             	sub    esp,0xc
c0019e3c:	50                   	push   eax
c0019e3d:	e8 ee 10 ff ff       	call   c000af30 <Filesystem::Filesystem()>
c0019e42:	83 c4 10             	add    esp,0x10
c0019e45:	ba 88 21 02 c0       	mov    edx,0xc0022188
c0019e4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e4e:	89 10                	mov    DWORD PTR [eax],edx
c0019e50:	e8 03 cd fe ff       	call   c0006b58 <fs_iso9660_init>
c0019e55:	90                   	nop
c0019e56:	83 c4 0c             	add    esp,0xc
c0019e59:	c3                   	ret    

c0019e5a <SoundCard::beginPlayback()>:
c0019e5a:	c7 44 24 04 e8 21 02 c0 	mov    DWORD PTR [esp+0x4],0xc00221e8
c0019e62:	e9 34 6d ff ff       	jmp    c0010b9b <KePanic(char const*)>
c0019e67:	90                   	nop

c0019e68 <SoundCard::stopPlayback()>:
c0019e68:	c7 44 24 04 e8 21 02 c0 	mov    DWORD PTR [esp+0x4],0xc00221e8
c0019e70:	e9 26 6d ff ff       	jmp    c0010b9b <KePanic(char const*)>
c0019e75:	90                   	nop

c0019e76 <SoundCard::SoundCard(char const*)>:
c0019e76:	83 ec 1c             	sub    esp,0x1c
c0019e79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019e7d:	83 ec 08             	sub    esp,0x8
c0019e80:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019e84:	50                   	push   eax
c0019e85:	e8 50 23 ff ff       	call   c000c1da <Device::Device(char const*)>
c0019e8a:	83 c4 10             	add    esp,0x10
c0019e8d:	ba 34 22 02 c0       	mov    edx,0xc0022234
c0019e92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019e96:	89 10                	mov    DWORD PTR [eax],edx
c0019e98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019e9c:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0019ea3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019ea7:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0019eb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019eb5:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0019ebf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019ec3:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0019ecd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019ed1:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0019edb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019ee3:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0019ee8:	7f 1a                	jg     c0019f04 <SoundCard::SoundCard(char const*)+0x8e>
c0019eea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019eee:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019ef2:	83 c2 54             	add    edx,0x54
c0019ef5:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0019efd:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019f02:	eb df                	jmp    c0019ee3 <SoundCard::SoundCard(char const*)+0x6d>
c0019f04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019f08:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0019f0f:	90                   	nop
c0019f10:	83 c4 1c             	add    esp,0x1c
c0019f13:	c3                   	ret    

c0019f14 <SoundCard::~SoundCard()>:
c0019f14:	83 ec 0c             	sub    esp,0xc
c0019f17:	ba 34 22 02 c0       	mov    edx,0xc0022234
c0019f1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f20:	89 10                	mov    DWORD PTR [eax],edx
c0019f22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f26:	83 ec 0c             	sub    esp,0xc
c0019f29:	50                   	push   eax
c0019f2a:	e8 15 20 ff ff       	call   c000bf44 <Device::~Device()>
c0019f2f:	83 c4 10             	add    esp,0x10
c0019f32:	90                   	nop
c0019f33:	83 c4 0c             	add    esp,0xc
c0019f36:	c3                   	ret    
c0019f37:	90                   	nop

c0019f38 <SoundCard::~SoundCard()>:
c0019f38:	83 ec 0c             	sub    esp,0xc
c0019f3b:	83 ec 0c             	sub    esp,0xc
c0019f3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019f42:	e8 cd ff ff ff       	call   c0019f14 <SoundCard::~SoundCard()>
c0019f47:	83 c4 10             	add    esp,0x10
c0019f4a:	83 ec 08             	sub    esp,0x8
c0019f4d:	68 e8 01 00 00       	push   0x1e8
c0019f52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019f56:	e8 b1 08 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0019f5b:	83 c4 10             	add    esp,0x10
c0019f5e:	83 c4 0c             	add    esp,0xc
c0019f61:	c3                   	ret    

c0019f62 <SoundCard::configureRates(int, int, int)>:
c0019f62:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019f66:	31 c0                	xor    eax,eax
c0019f68:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0019f6f:	75 20                	jne    c0019f91 <SoundCard::configureRates(int, int, int)+0x2f>
c0019f71:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019f75:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0019f7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019f7f:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0019f85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f89:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0019f8f:	b0 01                	mov    al,0x1
c0019f91:	c3                   	ret    

c0019f92 <SoundCard::getSamples16(int, short*)>:
c0019f92:	55                   	push   ebp
c0019f93:	57                   	push   edi
c0019f94:	31 ff                	xor    edi,edi
c0019f96:	56                   	push   esi
c0019f97:	53                   	push   ebx
c0019f98:	31 db                	xor    ebx,ebx
c0019f9a:	83 ec 10             	sub    esp,0x10
c0019f9d:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0019fa1:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019fa5:	8d 04 36             	lea    eax,[esi+esi*1]
c0019fa8:	50                   	push   eax
c0019fa9:	6a 00                	push   0x0
c0019fab:	55                   	push   ebp
c0019fac:	e8 3f 65 fe ff       	call   c00004f0 <memset>
c0019fb1:	83 c4 10             	add    esp,0x10
c0019fb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019fb8:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c0019fbf:	85 c0                	test   eax,eax
c0019fc1:	74 1b                	je     c0019fde <SoundCard::getSamples16(int, short*)+0x4c>
c0019fc3:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0019fc7:	75 15                	jne    c0019fde <SoundCard::getSamples16(int, short*)+0x4c>
c0019fc9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019fcd:	55                   	push   ebp
c0019fce:	56                   	push   esi
c0019fcf:	50                   	push   eax
c0019fd0:	e8 f3 02 00 00       	call   c001a2c8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0019fd5:	83 c4 10             	add    esp,0x10
c0019fd8:	39 c7                	cmp    edi,eax
c0019fda:	7d 02                	jge    c0019fde <SoundCard::getSamples16(int, short*)+0x4c>
c0019fdc:	89 c7                	mov    edi,eax
c0019fde:	43                   	inc    ebx
c0019fdf:	83 fb 20             	cmp    ebx,0x20
c0019fe2:	75 d0                	jne    c0019fb4 <SoundCard::getSamples16(int, short*)+0x22>
c0019fe4:	83 c4 0c             	add    esp,0xc
c0019fe7:	89 f8                	mov    eax,edi
c0019fe9:	5b                   	pop    ebx
c0019fea:	5e                   	pop    esi
c0019feb:	5f                   	pop    edi
c0019fec:	5d                   	pop    ebp
c0019fed:	c3                   	ret    

c0019fee <SoundCard::getSamples32(int, int*)>:
c0019fee:	55                   	push   ebp
c0019fef:	57                   	push   edi
c0019ff0:	31 ff                	xor    edi,edi
c0019ff2:	56                   	push   esi
c0019ff3:	31 f6                	xor    esi,esi
c0019ff5:	53                   	push   ebx
c0019ff6:	83 ec 10             	sub    esp,0x10
c0019ff9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019ffd:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001a001:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a005:	c1 e0 02             	shl    eax,0x2
c001a008:	50                   	push   eax
c001a009:	6a 00                	push   0x0
c001a00b:	55                   	push   ebp
c001a00c:	e8 df 64 fe ff       	call   c00004f0 <memset>
c001a011:	83 c4 10             	add    esp,0x10
c001a014:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001a01b:	85 c0                	test   eax,eax
c001a01d:	74 1b                	je     c001a03a <SoundCard::getSamples32(int, int*)+0x4c>
c001a01f:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001a023:	75 15                	jne    c001a03a <SoundCard::getSamples32(int, int*)+0x4c>
c001a025:	53                   	push   ebx
c001a026:	55                   	push   ebp
c001a027:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a02b:	50                   	push   eax
c001a02c:	e8 63 03 00 00       	call   c001a394 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001a031:	83 c4 10             	add    esp,0x10
c001a034:	39 c6                	cmp    esi,eax
c001a036:	7d 02                	jge    c001a03a <SoundCard::getSamples32(int, int*)+0x4c>
c001a038:	89 c6                	mov    esi,eax
c001a03a:	47                   	inc    edi
c001a03b:	83 ff 20             	cmp    edi,0x20
c001a03e:	75 d4                	jne    c001a014 <SoundCard::getSamples32(int, int*)+0x26>
c001a040:	85 f6                	test   esi,esi
c001a042:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001a049:	75 0f                	jne    c001a05a <SoundCard::getSamples32(int, int*)+0x6c>
c001a04b:	85 c0                	test   eax,eax
c001a04d:	74 1b                	je     c001a06a <SoundCard::getSamples32(int, int*)+0x7c>
c001a04f:	83 ec 0c             	sub    esp,0xc
c001a052:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a054:	53                   	push   ebx
c001a055:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001a058:	eb 0d                	jmp    c001a067 <SoundCard::getSamples32(int, int*)+0x79>
c001a05a:	85 c0                	test   eax,eax
c001a05c:	75 0c                	jne    c001a06a <SoundCard::getSamples32(int, int*)+0x7c>
c001a05e:	83 ec 0c             	sub    esp,0xc
c001a061:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a063:	53                   	push   ebx
c001a064:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001a067:	83 c4 10             	add    esp,0x10
c001a06a:	83 c4 0c             	add    esp,0xc
c001a06d:	89 f0                	mov    eax,esi
c001a06f:	5b                   	pop    ebx
c001a070:	5e                   	pop    esi
c001a071:	5f                   	pop    edi
c001a072:	5d                   	pop    ebp
c001a073:	c3                   	ret    

c001a074 <SoundCard::addChannel(SoundPort*)>:
c001a074:	83 ec 0c             	sub    esp,0xc
c001a077:	31 c0                	xor    eax,eax
c001a079:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a07d:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001a085:	74 1b                	je     c001a0a2 <SoundCard::addChannel(SoundPort*)+0x2e>
c001a087:	40                   	inc    eax
c001a088:	83 f8 20             	cmp    eax,0x20
c001a08b:	75 f0                	jne    c001a07d <SoundCard::addChannel(SoundPort*)+0x9>
c001a08d:	83 ec 0c             	sub    esp,0xc
c001a090:	68 0d 22 02 c0       	push   0xc002220d
c001a095:	e8 01 6b ff ff       	call   c0010b9b <KePanic(char const*)>
c001a09a:	83 c4 10             	add    esp,0x10
c001a09d:	83 c8 ff             	or     eax,0xffffffff
c001a0a0:	eb 0b                	jmp    c001a0ad <SoundCard::addChannel(SoundPort*)+0x39>
c001a0a2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a0a6:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001a0ad:	83 c4 0c             	add    esp,0xc
c001a0b0:	c3                   	ret    
c001a0b1:	90                   	nop

c001a0b2 <SoundCard::removeChannel(int)>:
c001a0b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a0b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a0ba:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001a0c5:	c3                   	ret    
c001a0c6:	66 90                	xchg   ax,ax

c001a0c8 <SoundPort::SoundPort(int, int, int, int)>:
c001a0c8:	83 ec 0c             	sub    esp,0xc
c001a0cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0cf:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001a0d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0da:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001a0de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0e2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a0e6:	89 10                	mov    DWORD PTR [eax],edx
c001a0e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0ec:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a0f0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001a0f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0f7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a0fb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a0fe:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001a103:	75 13                	jne    c001a118 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001a105:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a109:	8b 00                	mov    eax,DWORD PTR [eax]
c001a10b:	05 a0 0f 00 00       	add    eax,0xfa0
c001a110:	01 c0                	add    eax,eax
c001a112:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a116:	66 90                	xchg   ax,ax
c001a118:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a11c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a120:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001a123:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a127:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001a12e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a132:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001a135:	c1 e0 02             	shl    eax,0x2
c001a138:	83 ec 0c             	sub    esp,0xc
c001a13b:	50                   	push   eax
c001a13c:	e8 6d d9 fe ff       	call   c0007aae <malloc>
c001a141:	83 c4 10             	add    esp,0x10
c001a144:	89 c2                	mov    edx,eax
c001a146:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a14a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001a14d:	90                   	nop
c001a14e:	83 c4 0c             	add    esp,0xc
c001a151:	c3                   	ret    
c001a152:	66 90                	xchg   ax,ax

c001a154 <SoundPort::~SoundPort()>:
c001a154:	83 ec 0c             	sub    esp,0xc
c001a157:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a15b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a15e:	85 c0                	test   eax,eax
c001a160:	74 1e                	je     c001a180 <SoundPort::~SoundPort()+0x2c>
c001a162:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a166:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a169:	83 ec 0c             	sub    esp,0xc
c001a16c:	50                   	push   eax
c001a16d:	e8 4c d9 fe ff       	call   c0007abe <free>
c001a172:	83 c4 10             	add    esp,0x10
c001a175:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a179:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001a180:	90                   	nop
c001a181:	83 c4 0c             	add    esp,0xc
c001a184:	c3                   	ret    
c001a185:	90                   	nop
c001a186:	66 90                	xchg   ax,ax

c001a188 <SoundPort::unpause()>:
c001a188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a18c:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001a190:	c3                   	ret    
c001a191:	90                   	nop
c001a192:	66 90                	xchg   ax,ax

c001a194 <SoundPort::pause()>:
c001a194:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a198:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001a19c:	c3                   	ret    
c001a19d:	90                   	nop
c001a19e:	66 90                	xchg   ax,ax

c001a1a0 <SoundPort::getBufferUsed()>:
c001a1a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a1a4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a1a7:	c3                   	ret    

c001a1a8 <SoundPort::getBufferSize()>:
c001a1a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a1ac:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001a1af:	c3                   	ret    

c001a1b0 <SoundPort::buffer16(short*, int)>:
c001a1b0:	55                   	push   ebp
c001a1b1:	57                   	push   edi
c001a1b2:	56                   	push   esi
c001a1b3:	53                   	push   ebx
c001a1b4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a1b8:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001a1bc:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001a1bf:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001a1c2:	74 68                	je     c001a22c <SoundPort::buffer16(short*, int)+0x7c>
c001a1c4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a1c8:	85 c9                	test   ecx,ecx
c001a1ca:	7e 60                	jle    c001a22c <SoundPort::buffer16(short*, int)+0x7c>
c001a1cc:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001a1d0:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001a1d3:	c1 e1 0f             	shl    ecx,0xf
c001a1d6:	8d 70 01             	lea    esi,[eax+0x1]
c001a1d9:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001a1dc:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001a1df:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a1e2:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a1e5:	74 4d                	je     c001a234 <SoundPort::buffer16(short*, int)+0x84>
c001a1e7:	31 f6                	xor    esi,esi
c001a1e9:	eb 21                	jmp    c001a20c <SoundPort::buffer16(short*, int)+0x5c>
c001a1eb:	90                   	nop
c001a1ec:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001a1f1:	8d 79 01             	lea    edi,[ecx+0x1]
c001a1f4:	c1 e3 0f             	shl    ebx,0xf
c001a1f7:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001a1fa:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001a1fd:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001a200:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a203:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a206:	74 1c                	je     c001a224 <SoundPort::buffer16(short*, int)+0x74>
c001a208:	89 c6                	mov    esi,eax
c001a20a:	66 90                	xchg   ax,ax
c001a20c:	8d 46 01             	lea    eax,[esi+0x1]
c001a20f:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001a213:	75 d7                	jne    c001a1ec <SoundPort::buffer16(short*, int)+0x3c>
c001a215:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a219:	8d 76 00             	lea    esi,[esi+0x0]
c001a21c:	5b                   	pop    ebx
c001a21d:	5e                   	pop    esi
c001a21e:	5f                   	pop    edi
c001a21f:	5d                   	pop    ebp
c001a220:	c3                   	ret    
c001a221:	8d 76 00             	lea    esi,[esi+0x0]
c001a224:	5b                   	pop    ebx
c001a225:	8d 46 02             	lea    eax,[esi+0x2]
c001a228:	5e                   	pop    esi
c001a229:	5f                   	pop    edi
c001a22a:	5d                   	pop    ebp
c001a22b:	c3                   	ret    
c001a22c:	5b                   	pop    ebx
c001a22d:	31 c0                	xor    eax,eax
c001a22f:	5e                   	pop    esi
c001a230:	5f                   	pop    edi
c001a231:	5d                   	pop    ebp
c001a232:	c3                   	ret    
c001a233:	90                   	nop
c001a234:	b8 01 00 00 00       	mov    eax,0x1
c001a239:	eb e1                	jmp    c001a21c <SoundPort::buffer16(short*, int)+0x6c>
c001a23b:	90                   	nop

c001a23c <SoundPort::buffer32(int*, int)>:
c001a23c:	55                   	push   ebp
c001a23d:	57                   	push   edi
c001a23e:	56                   	push   esi
c001a23f:	53                   	push   ebx
c001a240:	83 ec 04             	sub    esp,0x4
c001a243:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a247:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a24b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a24e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a252:	89 04 24             	mov    DWORD PTR [esp],eax
c001a255:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a258:	74 5a                	je     c001a2b4 <SoundPort::buffer32(int*, int)+0x78>
c001a25a:	85 c0                	test   eax,eax
c001a25c:	7e 56                	jle    c001a2b4 <SoundPort::buffer32(int*, int)+0x78>
c001a25e:	8d 71 01             	lea    esi,[ecx+0x1]
c001a261:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001a264:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001a267:	8b 37                	mov    esi,DWORD PTR [edi]
c001a269:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001a26c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a26f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a272:	74 4c                	je     c001a2c0 <SoundPort::buffer32(int*, int)+0x84>
c001a274:	31 f6                	xor    esi,esi
c001a276:	eb 1c                	jmp    c001a294 <SoundPort::buffer32(int*, int)+0x58>
c001a278:	8d 69 01             	lea    ebp,[ecx+0x1]
c001a27b:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001a27e:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001a281:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001a284:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001a288:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a28b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a28e:	74 18                	je     c001a2a8 <SoundPort::buffer32(int*, int)+0x6c>
c001a290:	89 de                	mov    esi,ebx
c001a292:	66 90                	xchg   ax,ax
c001a294:	8d 5e 01             	lea    ebx,[esi+0x1]
c001a297:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001a29a:	75 dc                	jne    c001a278 <SoundPort::buffer32(int*, int)+0x3c>
c001a29c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001a29f:	90                   	nop
c001a2a0:	83 c4 04             	add    esp,0x4
c001a2a3:	5b                   	pop    ebx
c001a2a4:	5e                   	pop    esi
c001a2a5:	5f                   	pop    edi
c001a2a6:	5d                   	pop    ebp
c001a2a7:	c3                   	ret    
c001a2a8:	83 c4 04             	add    esp,0x4
c001a2ab:	8d 46 02             	lea    eax,[esi+0x2]
c001a2ae:	5b                   	pop    ebx
c001a2af:	5e                   	pop    esi
c001a2b0:	5f                   	pop    edi
c001a2b1:	5d                   	pop    ebp
c001a2b2:	c3                   	ret    
c001a2b3:	90                   	nop
c001a2b4:	83 c4 04             	add    esp,0x4
c001a2b7:	31 c0                	xor    eax,eax
c001a2b9:	5b                   	pop    ebx
c001a2ba:	5e                   	pop    esi
c001a2bb:	5f                   	pop    edi
c001a2bc:	5d                   	pop    ebp
c001a2bd:	c3                   	ret    
c001a2be:	66 90                	xchg   ax,ax
c001a2c0:	b8 01 00 00 00       	mov    eax,0x1
c001a2c5:	eb d9                	jmp    c001a2a0 <SoundPort::buffer32(int*, int)+0x64>
c001a2c7:	90                   	nop

c001a2c8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001a2c8:	57                   	push   edi
c001a2c9:	56                   	push   esi
c001a2ca:	53                   	push   ebx
c001a2cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a2cf:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001a2d3:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001a2d9:	39 03                	cmp    DWORD PTR [ebx],eax
c001a2db:	74 13                	je     c001a2f0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001a2dd:	83 ec 0c             	sub    esp,0xc
c001a2e0:	68 60 22 02 c0       	push   0xc0022260
c001a2e5:	e8 b1 68 ff ff       	call   c0010b9b <KePanic(char const*)>
c001a2ea:	83 c4 10             	add    esp,0x10
c001a2ed:	8d 76 00             	lea    esi,[esi+0x0]
c001a2f0:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001a2f6:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001a2f9:	74 11                	je     c001a30c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001a2fb:	83 ec 0c             	sub    esp,0xc
c001a2fe:	68 9f 22 02 c0       	push   0xc002229f
c001a303:	e8 93 68 ff ff       	call   c0010b9b <KePanic(char const*)>
c001a308:	83 c4 10             	add    esp,0x10
c001a30b:	90                   	nop
c001a30c:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001a312:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001a315:	74 11                	je     c001a328 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001a317:	83 ec 0c             	sub    esp,0xc
c001a31a:	68 9f 22 02 c0       	push   0xc002229f
c001a31f:	e8 77 68 ff ff       	call   c0010b9b <KePanic(char const*)>
c001a324:	83 c4 10             	add    esp,0x10
c001a327:	90                   	nop
c001a328:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001a32b:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001a32f:	7e 07                	jle    c001a338 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001a331:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a335:	8d 76 00             	lea    esi,[esi+0x0]
c001a338:	85 f6                	test   esi,esi
c001a33a:	7e 2c                	jle    c001a368 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c001a33c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a340:	8d 3c 36             	lea    edi,[esi+esi*1]
c001a343:	31 c9                	xor    ecx,ecx
c001a345:	01 d7                	add    edi,edx
c001a347:	90                   	nop
c001a348:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001a34b:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001a34e:	85 c0                	test   eax,eax
c001a350:	79 06                	jns    c001a358 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001a352:	05 ff 7f 00 00       	add    eax,0x7fff
c001a357:	90                   	nop
c001a358:	c1 f8 0f             	sar    eax,0xf
c001a35b:	83 c1 04             	add    ecx,0x4
c001a35e:	66 01 02             	add    WORD PTR [edx],ax
c001a361:	83 c2 02             	add    edx,0x2
c001a364:	39 d7                	cmp    edi,edx
c001a366:	75 e0                	jne    c001a348 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001a368:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001a36b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001a36e:	83 ec 04             	sub    esp,0x4
c001a371:	29 f0                	sub    eax,esi
c001a373:	c1 e0 02             	shl    eax,0x2
c001a376:	50                   	push   eax
c001a377:	8d 04 b2             	lea    eax,[edx+esi*4]
c001a37a:	50                   	push   eax
c001a37b:	52                   	push   edx
c001a37c:	e8 4f 60 fe ff       	call   c00003d0 <memmove>
c001a381:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001a384:	83 c4 10             	add    esp,0x10
c001a387:	29 f0                	sub    eax,esi
c001a389:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001a38c:	89 f0                	mov    eax,esi
c001a38e:	5b                   	pop    ebx
c001a38f:	5e                   	pop    esi
c001a390:	5f                   	pop    edi
c001a391:	c3                   	ret    
c001a392:	66 90                	xchg   ax,ax

c001a394 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001a394:	57                   	push   edi
c001a395:	56                   	push   esi
c001a396:	53                   	push   ebx
c001a397:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a39b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a39f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a3a3:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001a3a9:	39 06                	cmp    DWORD PTR [esi],eax
c001a3ab:	74 13                	je     c001a3c0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001a3ad:	83 ec 0c             	sub    esp,0xc
c001a3b0:	68 80 22 02 c0       	push   0xc0022280
c001a3b5:	e8 e1 67 ff ff       	call   c0010b9b <KePanic(char const*)>
c001a3ba:	83 c4 10             	add    esp,0x10
c001a3bd:	8d 76 00             	lea    esi,[esi+0x0]
c001a3c0:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001a3c6:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001a3c9:	74 11                	je     c001a3dc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001a3cb:	83 ec 0c             	sub    esp,0xc
c001a3ce:	68 bb 22 02 c0       	push   0xc00222bb
c001a3d3:	e8 c3 67 ff ff       	call   c0010b9b <KePanic(char const*)>
c001a3d8:	83 c4 10             	add    esp,0x10
c001a3db:	90                   	nop
c001a3dc:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001a3e2:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001a3e5:	74 11                	je     c001a3f8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001a3e7:	83 ec 0c             	sub    esp,0xc
c001a3ea:	68 bb 22 02 c0       	push   0xc00222bb
c001a3ef:	e8 a7 67 ff ff       	call   c0010b9b <KePanic(char const*)>
c001a3f4:	83 c4 10             	add    esp,0x10
c001a3f7:	90                   	nop
c001a3f8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001a3fb:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001a3ff:	7e 07                	jle    c001a408 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001a401:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a405:	8d 76 00             	lea    esi,[esi+0x0]
c001a408:	85 ff                	test   edi,edi
c001a40a:	7e 1c                	jle    c001a428 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001a40c:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001a413:	31 c0                	xor    eax,eax
c001a415:	8d 76 00             	lea    esi,[esi+0x0]
c001a418:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001a41b:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001a41e:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001a421:	83 c0 04             	add    eax,0x4
c001a424:	39 c1                	cmp    ecx,eax
c001a426:	75 f0                	jne    c001a418 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001a428:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001a42b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a42e:	83 ec 04             	sub    esp,0x4
c001a431:	29 f8                	sub    eax,edi
c001a433:	c1 e0 02             	shl    eax,0x2
c001a436:	50                   	push   eax
c001a437:	8d 04 ba             	lea    eax,[edx+edi*4]
c001a43a:	50                   	push   eax
c001a43b:	52                   	push   edx
c001a43c:	e8 8f 5f fe ff       	call   c00003d0 <memmove>
c001a441:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001a444:	83 c4 10             	add    esp,0x10
c001a447:	29 f8                	sub    eax,edi
c001a449:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001a44c:	89 f8                	mov    eax,edi
c001a44e:	5b                   	pop    ebx
c001a44f:	5e                   	pop    esi
c001a450:	5f                   	pop    edi
c001a451:	c3                   	ret    

c001a452 <PCI::open(int, int, void*)>:
c001a452:	83 ec 18             	sub    esp,0x18
c001a455:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a459:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a45d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001a463:	8b 10                	mov    edx,DWORD PTR [eax]
c001a465:	50                   	push   eax
c001a466:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001a469:	31 c0                	xor    eax,eax
c001a46b:	83 c4 1c             	add    esp,0x1c
c001a46e:	c3                   	ret    
c001a46f:	90                   	nop

c001a470 <PCI::close(int, int, void*)>:
c001a470:	31 c0                	xor    eax,eax
c001a472:	c3                   	ret    
c001a473:	90                   	nop

c001a474 <PCI::PCI()>:
c001a474:	83 ec 0c             	sub    esp,0xc
c001a477:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a47b:	83 ec 08             	sub    esp,0x8
c001a47e:	68 d7 22 02 c0       	push   0xc00222d7
c001a483:	50                   	push   eax
c001a484:	e8 1b 15 ff ff       	call   c000b9a4 <Bus::Bus(char const*)>
c001a489:	83 c4 10             	add    esp,0x10
c001a48c:	ba 80 23 02 c0       	mov    edx,0xc0022380
c001a491:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a495:	89 10                	mov    DWORD PTR [eax],edx
c001a497:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a49b:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001a4a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a4a9:	a3 40 9b 02 c0       	mov    ds:0xc0029b40,eax
c001a4ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a4b2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001a4b8:	0f b6 d0             	movzx  edx,al
c001a4bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a4bf:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001a4c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a4ca:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001a4d0:	0f b6 d0             	movzx  edx,al
c001a4d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a4d7:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001a4dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a4e0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001a4e6:	8d 50 01             	lea    edx,[eax+0x1]
c001a4e9:	88 d1                	mov    cl,dl
c001a4eb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a4ef:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001a4f5:	0f b6 d0             	movzx  edx,al
c001a4f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a4fc:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001a500:	83 c9 c0             	or     ecx,0xffffffc0
c001a503:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001a507:	90                   	nop
c001a508:	83 c4 0c             	add    esp,0xc
c001a50b:	c3                   	ret    

c001a50c <PCI::readBAR8(unsigned int, int)>:
c001a50c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a510:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a514:	f6 c2 01             	test   dl,0x1
c001a517:	74 07                	je     c001a520 <PCI::readBAR8(unsigned int, int)+0x14>
c001a519:	83 e2 fc             	and    edx,0xfffffffc
c001a51c:	01 c2                	add    edx,eax
c001a51e:	ec                   	in     al,dx
c001a51f:	c3                   	ret    
c001a520:	83 e2 f0             	and    edx,0xfffffff0
c001a523:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001a526:	c3                   	ret    
c001a527:	90                   	nop

c001a528 <PCI::readBAR16(unsigned int, int)>:
c001a528:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a52c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a530:	f6 c2 01             	test   dl,0x1
c001a533:	74 08                	je     c001a53d <PCI::readBAR16(unsigned int, int)+0x15>
c001a535:	83 e2 fc             	and    edx,0xfffffffc
c001a538:	01 c2                	add    edx,eax
c001a53a:	66 ed                	in     ax,dx
c001a53c:	c3                   	ret    
c001a53d:	83 e2 f0             	and    edx,0xfffffff0
c001a540:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001a544:	c3                   	ret    
c001a545:	90                   	nop

c001a546 <PCI::readBAR32(unsigned int, int)>:
c001a546:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a54a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a54e:	f6 c2 01             	test   dl,0x1
c001a551:	74 07                	je     c001a55a <PCI::readBAR32(unsigned int, int)+0x14>
c001a553:	83 e2 fc             	and    edx,0xfffffffc
c001a556:	01 c2                	add    edx,eax
c001a558:	ed                   	in     eax,dx
c001a559:	c3                   	ret    
c001a55a:	83 e2 f0             	and    edx,0xfffffff0
c001a55d:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001a560:	c3                   	ret    
c001a561:	90                   	nop

c001a562 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001a562:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a566:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a56a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a56e:	f6 c2 01             	test   dl,0x1
c001a571:	74 07                	je     c001a57a <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001a573:	83 e2 fc             	and    edx,0xfffffffc
c001a576:	01 ca                	add    edx,ecx
c001a578:	ee                   	out    dx,al
c001a579:	c3                   	ret    
c001a57a:	83 e2 f0             	and    edx,0xfffffff0
c001a57d:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001a580:	c3                   	ret    
c001a581:	90                   	nop

c001a582 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001a582:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a586:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a58a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a58e:	f6 c2 01             	test   dl,0x1
c001a591:	74 08                	je     c001a59b <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001a593:	83 e2 fc             	and    edx,0xfffffffc
c001a596:	01 ca                	add    edx,ecx
c001a598:	66 ef                	out    dx,ax
c001a59a:	c3                   	ret    
c001a59b:	83 e2 f0             	and    edx,0xfffffff0
c001a59e:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001a5a2:	c3                   	ret    
c001a5a3:	90                   	nop

c001a5a4 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001a5a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a5a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a5ac:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a5b0:	f6 c2 01             	test   dl,0x1
c001a5b3:	74 07                	je     c001a5bc <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001a5b5:	83 e2 fc             	and    edx,0xfffffffc
c001a5b8:	01 ca                	add    edx,ecx
c001a5ba:	ef                   	out    dx,eax
c001a5bb:	c3                   	ret    
c001a5bc:	83 e2 f0             	and    edx,0xfffffff0
c001a5bf:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001a5c2:	c3                   	ret    
c001a5c3:	90                   	nop

c001a5c4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a5c4:	55                   	push   ebp
c001a5c5:	57                   	push   edi
c001a5c6:	56                   	push   esi
c001a5c7:	53                   	push   ebx
c001a5c8:	83 ec 0c             	sub    esp,0xc
c001a5cb:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001a5d0:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001a5d4:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001a5d8:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a5dc:	83 fe 07             	cmp    esi,0x7
c001a5df:	76 10                	jbe    c001a5f1 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001a5e1:	83 ec 0c             	sub    esp,0xc
c001a5e4:	68 df 22 02 c0       	push   0xc00222df
c001a5e9:	e8 ad 65 ff ff       	call   c0010b9b <KePanic(char const*)>
c001a5ee:	83 c4 10             	add    esp,0x10
c001a5f1:	0f b6 db             	movzx  ebx,bl
c001a5f4:	83 fb 0f             	cmp    ebx,0xf
c001a5f7:	76 10                	jbe    c001a609 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001a5f9:	83 ec 0c             	sub    esp,0xc
c001a5fc:	68 0f 23 02 c0       	push   0xc002230f
c001a601:	e8 95 65 ff ff       	call   c0010b9b <KePanic(char const*)>
c001a606:	83 c4 10             	add    esp,0x10
c001a609:	8d 04 36             	lea    eax,[esi+esi*1]
c001a60c:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a611:	83 c8 f0             	or     eax,0xfffffff0
c001a614:	ee                   	out    dx,al
c001a615:	ba fa 0c 00 00       	mov    edx,0xcfa
c001a61a:	89 e8                	mov    eax,ebp
c001a61c:	ee                   	out    dx,al
c001a61d:	83 c4 0c             	add    esp,0xc
c001a620:	89 d8                	mov    eax,ebx
c001a622:	89 f9                	mov    ecx,edi
c001a624:	c1 e0 08             	shl    eax,0x8
c001a627:	0f b6 d9             	movzx  ebx,cl
c001a62a:	83 e3 fc             	and    ebx,0xfffffffc
c001a62d:	09 d8                	or     eax,ebx
c001a62f:	5b                   	pop    ebx
c001a630:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001a635:	5e                   	pop    esi
c001a636:	5f                   	pop    edi
c001a637:	5d                   	pop    ebp
c001a638:	c3                   	ret    
c001a639:	90                   	nop

c001a63a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a63a:	57                   	push   edi
c001a63b:	56                   	push   esi
c001a63c:	53                   	push   ebx
c001a63d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a641:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a645:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001a64b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a64f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a653:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a657:	83 ff 01             	cmp    edi,0x1
c001a65a:	75 3f                	jne    c001a69b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001a65c:	89 de                	mov    esi,ebx
c001a65e:	0f b6 c0             	movzx  eax,al
c001a661:	81 e6 fc 00 00 00    	and    esi,0xfc
c001a667:	c1 e0 10             	shl    eax,0x10
c001a66a:	0f b6 c9             	movzx  ecx,cl
c001a66d:	09 f0                	or     eax,esi
c001a66f:	c1 e1 08             	shl    ecx,0x8
c001a672:	0f b6 d2             	movzx  edx,dl
c001a675:	09 c8                	or     eax,ecx
c001a677:	c1 e2 0b             	shl    edx,0xb
c001a67a:	09 d0                	or     eax,edx
c001a67c:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a681:	0d 00 00 00 80       	or     eax,0x80000000
c001a686:	ef                   	out    dx,eax
c001a687:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a68c:	ed                   	in     eax,dx
c001a68d:	83 e3 02             	and    ebx,0x2
c001a690:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001a697:	d3 e8                	shr    eax,cl
c001a699:	eb 44                	jmp    c001a6df <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001a69b:	83 ff 02             	cmp    edi,0x2
c001a69e:	75 2d                	jne    c001a6cd <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001a6a0:	83 ec 0c             	sub    esp,0xc
c001a6a3:	0f b6 c9             	movzx  ecx,cl
c001a6a6:	0f b6 d2             	movzx  edx,dl
c001a6a9:	0f b6 fb             	movzx  edi,bl
c001a6ac:	0f b6 c0             	movzx  eax,al
c001a6af:	57                   	push   edi
c001a6b0:	51                   	push   ecx
c001a6b1:	52                   	push   edx
c001a6b2:	50                   	push   eax
c001a6b3:	56                   	push   esi
c001a6b4:	e8 0b ff ff ff       	call   c001a5c4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a6b9:	89 c2                	mov    edx,eax
c001a6bb:	ed                   	in     eax,dx
c001a6bc:	83 e3 02             	and    ebx,0x2
c001a6bf:	83 c4 20             	add    esp,0x20
c001a6c2:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001a6c9:	d3 e8                	shr    eax,cl
c001a6cb:	eb 12                	jmp    c001a6df <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001a6cd:	83 ec 0c             	sub    esp,0xc
c001a6d0:	68 3f 23 02 c0       	push   0xc002233f
c001a6d5:	e8 c1 64 ff ff       	call   c0010b9b <KePanic(char const*)>
c001a6da:	83 c4 10             	add    esp,0x10
c001a6dd:	31 c0                	xor    eax,eax
c001a6df:	5b                   	pop    ebx
c001a6e0:	5e                   	pop    esi
c001a6e1:	5f                   	pop    edi
c001a6e2:	c3                   	ret    
c001a6e3:	90                   	nop

c001a6e4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001a6e4:	83 ec 18             	sub    esp,0x18
c001a6e7:	6a 00                	push   0x0
c001a6e9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a6ee:	50                   	push   eax
c001a6ef:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a6f4:	50                   	push   eax
c001a6f5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a6fa:	50                   	push   eax
c001a6fb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a6ff:	e8 36 ff ff ff       	call   c001a63a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a704:	83 c4 2c             	add    esp,0x2c
c001a707:	c3                   	ret    

c001a708 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001a708:	83 ec 18             	sub    esp,0x18
c001a70b:	6a 0e                	push   0xe
c001a70d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a712:	50                   	push   eax
c001a713:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a718:	50                   	push   eax
c001a719:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a71e:	50                   	push   eax
c001a71f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a723:	e8 12 ff ff ff       	call   c001a63a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a728:	83 c4 2c             	add    esp,0x2c
c001a72b:	0f b6 c0             	movzx  eax,al
c001a72e:	c3                   	ret    
c001a72f:	90                   	nop

c001a730 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001a730:	55                   	push   ebp
c001a731:	57                   	push   edi
c001a732:	56                   	push   esi
c001a733:	53                   	push   ebx
c001a734:	83 ec 18             	sub    esp,0x18
c001a737:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001a73c:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001a741:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001a746:	6a 0a                	push   0xa
c001a748:	56                   	push   esi
c001a749:	55                   	push   ebp
c001a74a:	57                   	push   edi
c001a74b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a74f:	e8 e6 fe ff ff       	call   c001a63a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a754:	83 c4 14             	add    esp,0x14
c001a757:	89 c3                	mov    ebx,eax
c001a759:	6a 0a                	push   0xa
c001a75b:	0f b6 db             	movzx  ebx,bl
c001a75e:	56                   	push   esi
c001a75f:	55                   	push   ebp
c001a760:	57                   	push   edi
c001a761:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a765:	e8 d0 fe ff ff       	call   c001a63a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a76a:	83 c4 2c             	add    esp,0x2c
c001a76d:	25 00 ff 00 00       	and    eax,0xff00
c001a772:	09 d8                	or     eax,ebx
c001a774:	5b                   	pop    ebx
c001a775:	5e                   	pop    esi
c001a776:	5f                   	pop    edi
c001a777:	5d                   	pop    ebp
c001a778:	c3                   	ret    
c001a779:	90                   	nop

c001a77a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001a77a:	83 ec 18             	sub    esp,0x18
c001a77d:	6a 08                	push   0x8
c001a77f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a784:	50                   	push   eax
c001a785:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a78a:	50                   	push   eax
c001a78b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a790:	50                   	push   eax
c001a791:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a795:	e8 a0 fe ff ff       	call   c001a63a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a79a:	83 c4 2c             	add    esp,0x2c
c001a79d:	0f b6 c4             	movzx  eax,ah
c001a7a0:	c3                   	ret    
c001a7a1:	90                   	nop

c001a7a2 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001a7a2:	83 ec 18             	sub    esp,0x18
c001a7a5:	6a 08                	push   0x8
c001a7a7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a7ac:	50                   	push   eax
c001a7ad:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a7b2:	50                   	push   eax
c001a7b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a7b8:	50                   	push   eax
c001a7b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a7bd:	e8 78 fe ff ff       	call   c001a63a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a7c2:	83 c4 2c             	add    esp,0x2c
c001a7c5:	c3                   	ret    

c001a7c6 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001a7c6:	83 ec 18             	sub    esp,0x18
c001a7c9:	6a 3c                	push   0x3c
c001a7cb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a7d0:	50                   	push   eax
c001a7d1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a7d6:	50                   	push   eax
c001a7d7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a7dc:	50                   	push   eax
c001a7dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a7e1:	e8 54 fe ff ff       	call   c001a63a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a7e6:	83 c4 2c             	add    esp,0x2c
c001a7e9:	c3                   	ret    

c001a7ea <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001a7ea:	83 ec 18             	sub    esp,0x18
c001a7ed:	6a 18                	push   0x18
c001a7ef:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a7f4:	50                   	push   eax
c001a7f5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a7fa:	50                   	push   eax
c001a7fb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a800:	50                   	push   eax
c001a801:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a805:	e8 30 fe ff ff       	call   c001a63a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a80a:	83 c4 2c             	add    esp,0x2c
c001a80d:	0f b6 c4             	movzx  eax,ah
c001a810:	c3                   	ret    
c001a811:	90                   	nop

c001a812 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a812:	55                   	push   ebp
c001a813:	57                   	push   edi
c001a814:	56                   	push   esi
c001a815:	53                   	push   ebx
c001a816:	83 ec 28             	sub    esp,0x28
c001a819:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a81d:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001a822:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001a827:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001a82c:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001a833:	8d 43 12             	lea    eax,[ebx+0x12]
c001a836:	83 c3 10             	add    ebx,0x10
c001a839:	0f b6 c0             	movzx  eax,al
c001a83c:	0f b6 db             	movzx  ebx,bl
c001a83f:	50                   	push   eax
c001a840:	51                   	push   ecx
c001a841:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001a845:	57                   	push   edi
c001a846:	55                   	push   ebp
c001a847:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a84b:	e8 ea fd ff ff       	call   c001a63a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a850:	83 c4 14             	add    esp,0x14
c001a853:	89 c6                	mov    esi,eax
c001a855:	53                   	push   ebx
c001a856:	c1 e6 10             	shl    esi,0x10
c001a859:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a85d:	51                   	push   ecx
c001a85e:	57                   	push   edi
c001a85f:	55                   	push   ebp
c001a860:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a864:	e8 d1 fd ff ff       	call   c001a63a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a869:	83 c4 3c             	add    esp,0x3c
c001a86c:	0f b7 c0             	movzx  eax,ax
c001a86f:	5b                   	pop    ebx
c001a870:	09 f0                	or     eax,esi
c001a872:	5e                   	pop    esi
c001a873:	5f                   	pop    edi
c001a874:	5d                   	pop    ebp
c001a875:	c3                   	ret    

c001a876 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001a876:	55                   	push   ebp
c001a877:	57                   	push   edi
c001a878:	56                   	push   esi
c001a879:	53                   	push   ebx
c001a87a:	83 ec 0c             	sub    esp,0xc
c001a87d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001a881:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001a885:	89 f5                	mov    ebp,esi
c001a887:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001a88d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a891:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a895:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001a899:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a89d:	83 f9 01             	cmp    ecx,0x1
c001a8a0:	75 5d                	jne    c001a8ff <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001a8a2:	0f b6 c8             	movzx  ecx,al
c001a8a5:	0f b6 d2             	movzx  edx,dl
c001a8a8:	c1 e1 10             	shl    ecx,0x10
c001a8ab:	c1 e2 0b             	shl    edx,0xb
c001a8ae:	89 f0                	mov    eax,esi
c001a8b0:	25 fc 00 00 00       	and    eax,0xfc
c001a8b5:	09 c1                	or     ecx,eax
c001a8b7:	89 e8                	mov    eax,ebp
c001a8b9:	0f b6 c0             	movzx  eax,al
c001a8bc:	c1 e0 08             	shl    eax,0x8
c001a8bf:	09 c1                	or     ecx,eax
c001a8c1:	09 d1                	or     ecx,edx
c001a8c3:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a8c8:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001a8ce:	89 c8                	mov    eax,ecx
c001a8d0:	ef                   	out    dx,eax
c001a8d1:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a8d6:	ed                   	in     eax,dx
c001a8d7:	0f b7 db             	movzx  ebx,bx
c001a8da:	83 e6 02             	and    esi,0x2
c001a8dd:	74 0a                	je     c001a8e9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001a8df:	0f b7 d0             	movzx  edx,ax
c001a8e2:	c1 e3 10             	shl    ebx,0x10
c001a8e5:	09 d3                	or     ebx,edx
c001a8e7:	eb 05                	jmp    c001a8ee <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001a8e9:	66 31 c0             	xor    ax,ax
c001a8ec:	09 c3                	or     ebx,eax
c001a8ee:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a8f3:	89 c8                	mov    eax,ecx
c001a8f5:	ef                   	out    dx,eax
c001a8f6:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a8fb:	89 d8                	mov    eax,ebx
c001a8fd:	eb 41                	jmp    c001a940 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001a8ff:	83 f9 02             	cmp    ecx,0x2
c001a902:	75 45                	jne    c001a949 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001a904:	83 ec 0c             	sub    esp,0xc
c001a907:	0f b6 d2             	movzx  edx,dl
c001a90a:	89 f1                	mov    ecx,esi
c001a90c:	0f b6 c0             	movzx  eax,al
c001a90f:	0f b6 f1             	movzx  esi,cl
c001a912:	89 e9                	mov    ecx,ebp
c001a914:	56                   	push   esi
c001a915:	0f b6 c9             	movzx  ecx,cl
c001a918:	51                   	push   ecx
c001a919:	52                   	push   edx
c001a91a:	50                   	push   eax
c001a91b:	57                   	push   edi
c001a91c:	e8 a3 fc ff ff       	call   c001a5c4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a921:	89 c2                	mov    edx,eax
c001a923:	ed                   	in     eax,dx
c001a924:	83 c4 20             	add    esp,0x20
c001a927:	0f b7 db             	movzx  ebx,bx
c001a92a:	f6 c2 02             	test   dl,0x2
c001a92d:	74 0c                	je     c001a93b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001a92f:	0f b7 c8             	movzx  ecx,ax
c001a932:	89 d8                	mov    eax,ebx
c001a934:	c1 e0 10             	shl    eax,0x10
c001a937:	09 c8                	or     eax,ecx
c001a939:	eb 05                	jmp    c001a940 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001a93b:	66 31 c0             	xor    ax,ax
c001a93e:	09 d8                	or     eax,ebx
c001a940:	ef                   	out    dx,eax
c001a941:	83 c4 0c             	add    esp,0xc
c001a944:	5b                   	pop    ebx
c001a945:	5e                   	pop    esi
c001a946:	5f                   	pop    edi
c001a947:	5d                   	pop    ebp
c001a948:	c3                   	ret    
c001a949:	c7 44 24 20 3f 23 02 c0 	mov    DWORD PTR [esp+0x20],0xc002233f
c001a951:	83 c4 0c             	add    esp,0xc
c001a954:	5b                   	pop    ebx
c001a955:	5e                   	pop    esi
c001a956:	5f                   	pop    edi
c001a957:	5d                   	pop    ebp
c001a958:	e9 3e 62 ff ff       	jmp    c0010b9b <KePanic(char const*)>
c001a95d:	90                   	nop

c001a95e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001a95e:	55                   	push   ebp
c001a95f:	57                   	push   edi
c001a960:	56                   	push   esi
c001a961:	53                   	push   ebx
c001a962:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001a968:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c001a96f:	80 3d 4c 9b 02 c0 00 	cmp    BYTE PTR ds:0xc0029b4c,0x0
c001a976:	0f 85 bd 00 00 00    	jne    c001aa39 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001a97c:	83 ec 0c             	sub    esp,0xc
c001a97f:	68 14 01 00 00       	push   0x114
c001a984:	e8 25 d1 fe ff       	call   c0007aae <malloc>
c001a989:	83 c4 0c             	add    esp,0xc
c001a98c:	89 c3                	mov    ebx,eax
c001a98e:	ff 35 90 91 02 c0    	push   DWORD PTR ds:0xc0029190
c001a994:	68 45 23 02 c0       	push   0xc0022345
c001a999:	50                   	push   eax
c001a99a:	e8 f1 07 ff ff       	call   c000b190 <File::File(char const*, Process*)>
c001a99f:	83 c4 10             	add    esp,0x10
c001a9a2:	85 db                	test   ebx,ebx
c001a9a4:	0f 84 67 02 00 00    	je     c001ac11 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001a9aa:	56                   	push   esi
c001a9ab:	56                   	push   esi
c001a9ac:	6a 01                	push   0x1
c001a9ae:	53                   	push   ebx
c001a9af:	e8 98 08 ff ff       	call   c000b24c <File::open(FileOpenMode)>
c001a9b4:	83 c4 10             	add    esp,0x10
c001a9b7:	85 c0                	test   eax,eax
c001a9b9:	0f 85 52 02 00 00    	jne    c001ac11 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001a9bf:	52                   	push   edx
c001a9c0:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001a9c4:	50                   	push   eax
c001a9c5:	8d 44 24 48          	lea    eax,[esp+0x48]
c001a9c9:	50                   	push   eax
c001a9ca:	53                   	push   ebx
c001a9cb:	e8 28 0b ff ff       	call   c000b4f8 <File::stat(unsigned long long*, bool*)>
c001a9d0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a9d4:	40                   	inc    eax
c001a9d5:	89 04 24             	mov    DWORD PTR [esp],eax
c001a9d8:	e8 d1 d0 fe ff       	call   c0007aae <malloc>
c001a9dd:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a9e1:	a3 48 9b 02 c0       	mov    ds:0xc0029b48,eax
c001a9e6:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001a9ea:	59                   	pop    ecx
c001a9eb:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a9ed:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001a9f1:	51                   	push   ecx
c001a9f2:	50                   	push   eax
c001a9f3:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001a9f7:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001a9fb:	53                   	push   ebx
c001a9fc:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001a9ff:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001aa03:	83 c4 20             	add    esp,0x20
c001aa06:	89 c8                	mov    eax,ecx
c001aa08:	99                   	cdq    
c001aa09:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001aa0d:	0f 85 fe 01 00 00    	jne    c001ac11 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001aa13:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001aa17:	0f 85 f4 01 00 00    	jne    c001ac11 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001aa1d:	83 ec 0c             	sub    esp,0xc
c001aa20:	53                   	push   ebx
c001aa21:	e8 84 08 ff ff       	call   c000b2aa <File::close()>
c001aa26:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001aa2a:	c6 05 4c 9b 02 c0 01 	mov    BYTE PTR ds:0xc0029b4c,0x1
c001aa31:	a3 44 9b 02 c0       	mov    ds:0xc0029b44,eax
c001aa36:	83 c4 10             	add    esp,0x10
c001aa39:	a1 44 9b 02 c0       	mov    eax,ds:0xc0029b44
c001aa3e:	8b 1d 48 9b 02 c0    	mov    ebx,DWORD PTR ds:0xc0029b48
c001aa44:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aa48:	31 f6                	xor    esi,esi
c001aa4a:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001aa52:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001aa59:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001aa5e:	31 c9                	xor    ecx,ecx
c001aa60:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001aa68:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001aa6d:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001aa75:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001aa79:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001aa81:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001aa85:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001aa89:	0f 8e 82 01 00 00    	jle    c001ac11 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001aa8f:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c001aa92:	d4 40                	aam    0x40
c001aa94:	d5 39                	aad    0x39
c001aa96:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001aa9a:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c001aa9e:	d4 40                	aam    0x40
c001aaa0:	d5 39                	aad    0x39
c001aaa2:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001aaa6:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c001aaaa:	d4 40                	aam    0x40
c001aaac:	d5 39                	aad    0x39
c001aaae:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001aab2:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c001aab6:	d4 40                	aam    0x40
c001aab8:	d5 39                	aad    0x39
c001aaba:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001aabe:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c001aac2:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001aac6:	3c 56                	cmp    al,0x56
c001aac8:	74 43                	je     c001ab0d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c001aaca:	d4 40                	aam    0x40
c001aacc:	d5 39                	aad    0x39
c001aace:	8d 48 d0             	lea    ecx,[eax-0x30]
c001aad1:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c001aad5:	0f b6 c9             	movzx  ecx,cl
c001aad8:	c1 e1 04             	shl    ecx,0x4
c001aadb:	d4 40                	aam    0x40
c001aadd:	d5 39                	aad    0x39
c001aadf:	83 e8 30             	sub    eax,0x30
c001aae2:	0f b6 c0             	movzx  eax,al
c001aae5:	09 c1                	or     ecx,eax
c001aae7:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c001aaeb:	c1 e1 04             	shl    ecx,0x4
c001aaee:	d4 40                	aam    0x40
c001aaf0:	d5 39                	aad    0x39
c001aaf2:	83 e8 30             	sub    eax,0x30
c001aaf5:	0f b6 c0             	movzx  eax,al
c001aaf8:	09 c1                	or     ecx,eax
c001aafa:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c001aafe:	c1 e1 04             	shl    ecx,0x4
c001ab01:	d4 40                	aam    0x40
c001ab03:	d5 39                	aad    0x39
c001ab05:	83 e8 30             	sub    eax,0x30
c001ab08:	0f b6 c0             	movzx  eax,al
c001ab0b:	09 c1                	or     ecx,eax
c001ab0d:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c001ab11:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001ab15:	3c 58                	cmp    al,0x58
c001ab17:	74 47                	je     c001ab60 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c001ab19:	d4 40                	aam    0x40
c001ab1b:	d5 39                	aad    0x39
c001ab1d:	8d 50 d0             	lea    edx,[eax-0x30]
c001ab20:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c001ab24:	0f b6 d2             	movzx  edx,dl
c001ab27:	c1 e2 04             	shl    edx,0x4
c001ab2a:	d4 40                	aam    0x40
c001ab2c:	d5 39                	aad    0x39
c001ab2e:	83 e8 30             	sub    eax,0x30
c001ab31:	0f b6 c0             	movzx  eax,al
c001ab34:	09 c2                	or     edx,eax
c001ab36:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c001ab3a:	c1 e2 04             	shl    edx,0x4
c001ab3d:	d4 40                	aam    0x40
c001ab3f:	d5 39                	aad    0x39
c001ab41:	83 e8 30             	sub    eax,0x30
c001ab44:	0f b6 c0             	movzx  eax,al
c001ab47:	09 c2                	or     edx,eax
c001ab49:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c001ab4d:	c1 e2 04             	shl    edx,0x4
c001ab50:	d4 40                	aam    0x40
c001ab52:	d5 39                	aad    0x39
c001ab54:	83 e8 30             	sub    eax,0x30
c001ab57:	0f b6 c0             	movzx  eax,al
c001ab5a:	09 c2                	or     edx,eax
c001ab5c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ab60:	83 c6 10             	add    esi,0x10
c001ab63:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001ab67:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c001ab6b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001ab6f:	83 fa 0a             	cmp    edx,0xa
c001ab72:	74 0b                	je     c001ab7f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c001ab74:	47                   	inc    edi
c001ab75:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001ab79:	75 19                	jne    c001ab94 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c001ab7b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c001ab7f:	31 c0                	xor    eax,eax
c001ab81:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c001ab86:	0f 94 c0             	sete   al
c001ab89:	01 c6                	add    esi,eax
c001ab8b:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001ab90:	75 0b                	jne    c001ab9d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c001ab92:	eb 14                	jmp    c001aba8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c001ab94:	46                   	inc    esi
c001ab95:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c001ab98:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001ab9b:	eb ca                	jmp    c001ab67 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c001ab9d:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c001aba2:	0f 85 dd fe ff ff    	jne    c001aa85 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001aba8:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c001abad:	74 10                	je     c001abbf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c001abaf:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001abb4:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001abb9:	0f 85 c6 fe ff ff    	jne    c001aa85 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001abbf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001abc3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001abc7:	83 e8 30             	sub    eax,0x30
c001abca:	83 ef 30             	sub    edi,0x30
c001abcd:	c1 e0 04             	shl    eax,0x4
c001abd0:	09 f8                	or     eax,edi
c001abd2:	0f b6 c0             	movzx  eax,al
c001abd5:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001abd9:	0f 85 a6 fe ff ff    	jne    c001aa85 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001abdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abe3:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001abe7:	83 e8 30             	sub    eax,0x30
c001abea:	83 ef 30             	sub    edi,0x30
c001abed:	c1 e0 04             	shl    eax,0x4
c001abf0:	09 f8                	or     eax,edi
c001abf2:	0f b6 c0             	movzx  eax,al
c001abf5:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001abf9:	0f 85 86 fe ff ff    	jne    c001aa85 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001abff:	50                   	push   eax
c001ac00:	50                   	push   eax
c001ac01:	8d 44 24 48          	lea    eax,[esp+0x48]
c001ac05:	50                   	push   eax
c001ac06:	55                   	push   ebp
c001ac07:	e8 34 5a fe ff       	call   c0000640 <strcpy>
c001ac0c:	83 c4 10             	add    esp,0x10
c001ac0f:	eb 06                	jmp    c001ac17 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c001ac11:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001ac15:	31 ed                	xor    ebp,ebp
c001ac17:	81 c4 4c 01 00 00    	add    esp,0x14c
c001ac1d:	89 e8                	mov    eax,ebp
c001ac1f:	5b                   	pop    ebx
c001ac20:	5e                   	pop    esi
c001ac21:	5f                   	pop    edi
c001ac22:	5d                   	pop    ebp
c001ac23:	c3                   	ret    

c001ac24 <PCI::checkBus(unsigned char)>:
c001ac24:	56                   	push   esi
c001ac25:	53                   	push   ebx
c001ac26:	31 db                	xor    ebx,ebx
c001ac28:	51                   	push   ecx
c001ac29:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001ac2e:	52                   	push   edx
c001ac2f:	53                   	push   ebx
c001ac30:	43                   	inc    ebx
c001ac31:	56                   	push   esi
c001ac32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac36:	e8 03 03 00 00       	call   c001af3e <PCI::checkDevice(unsigned char, unsigned char)>
c001ac3b:	83 c4 10             	add    esp,0x10
c001ac3e:	83 fb 20             	cmp    ebx,0x20
c001ac41:	75 eb                	jne    c001ac2e <PCI::checkBus(unsigned char)+0xa>
c001ac43:	58                   	pop    eax
c001ac44:	5b                   	pop    ebx
c001ac45:	5e                   	pop    esi
c001ac46:	c3                   	ret    
c001ac47:	90                   	nop

c001ac48 <PCI::foundDevice(PCIDeviceInfo)>:
c001ac48:	55                   	push   ebp
c001ac49:	57                   	push   edi
c001ac4a:	56                   	push   esi
c001ac4b:	53                   	push   ebx
c001ac4c:	83 ec 1c             	sub    esp,0x1c
c001ac4f:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001ac54:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ac58:	3d ff ff 00 00       	cmp    eax,0xffff
c001ac5d:	0f 84 57 01 00 00    	je     c001adba <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001ac63:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001ac68:	66 3d 06 04          	cmp    ax,0x406
c001ac6c:	75 2c                	jne    c001ac9a <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001ac6e:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001ac73:	50                   	push   eax
c001ac74:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001ac79:	50                   	push   eax
c001ac7a:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001ac7f:	50                   	push   eax
c001ac80:	53                   	push   ebx
c001ac81:	e8 64 fb ff ff       	call   c001a7ea <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001ac86:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001ac8a:	0f b6 c0             	movzx  eax,al
c001ac8d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001ac91:	83 c4 2c             	add    esp,0x2c
c001ac94:	5b                   	pop    ebx
c001ac95:	5e                   	pop    esi
c001ac96:	5f                   	pop    edi
c001ac97:	5d                   	pop    ebp
c001ac98:	eb 8a                	jmp    c001ac24 <PCI::checkBus(unsigned char)>
c001ac9a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001ac9e:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001aca4:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001aca8:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001acac:	0f b6 7c 24 54       	movzx  edi,BYTE PTR [esp+0x54]
c001acb1:	85 d2                	test   edx,edx
c001acb3:	74 36                	je     c001aceb <PCI::foundDevice(PCIDeviceInfo)+0xa3>
c001acb5:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001acb8:	85 c9                	test   ecx,ecx
c001acba:	74 2b                	je     c001ace7 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001acbc:	8b b1 18 01 00 00    	mov    esi,DWORD PTR [ecx+0x118]
c001acc2:	31 ee                	xor    esi,ebp
c001acc4:	81 e6 ff 00 ff ff    	and    esi,0xffff00ff
c001acca:	75 1b                	jne    c001ace7 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001accc:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001acd0:	39 b1 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],esi
c001acd6:	75 0f                	jne    c001ace7 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001acd8:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001acdf:	39 f9                	cmp    ecx,edi
c001ace1:	0f 84 d3 00 00 00    	je     c001adba <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001ace7:	8b 12                	mov    edx,DWORD PTR [edx]
c001ace9:	eb c6                	jmp    c001acb1 <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001aceb:	3d 01 06 00 00       	cmp    eax,0x601
c001acf0:	75 19                	jne    c001ad0b <PCI::foundDevice(PCIDeviceInfo)+0xc3>
c001acf2:	83 ec 0c             	sub    esp,0xc
c001acf5:	68 64 01 00 00       	push   0x164
c001acfa:	e8 af cd fe ff       	call   c0007aae <malloc>
c001acff:	89 c5                	mov    ebp,eax
c001ad01:	89 04 24             	mov    DWORD PTR [esp],eax
c001ad04:	e8 a1 0e 00 00       	call   c001bbaa <SATABus::SATABus()>
c001ad09:	eb 1e                	jmp    c001ad29 <PCI::foundDevice(PCIDeviceInfo)+0xe1>
c001ad0b:	3d 01 01 00 00       	cmp    eax,0x101
c001ad10:	75 62                	jne    c001ad74 <PCI::foundDevice(PCIDeviceInfo)+0x12c>
c001ad12:	83 ec 0c             	sub    esp,0xc
c001ad15:	68 70 02 00 00       	push   0x270
c001ad1a:	e8 8f cd fe ff       	call   c0007aae <malloc>
c001ad1f:	89 c5                	mov    ebp,eax
c001ad21:	89 04 24             	mov    DWORD PTR [esp],eax
c001ad24:	e8 e5 02 00 00       	call   c001b00e <IDE::IDE()>
c001ad29:	5f                   	pop    edi
c001ad2a:	58                   	pop    eax
c001ad2b:	55                   	push   ebp
c001ad2c:	53                   	push   ebx
c001ad2d:	e8 10 13 ff ff       	call   c000c042 <Device::addChild(Device*)>
c001ad32:	83 ec 1c             	sub    esp,0x1c
c001ad35:	b9 09 00 00 00       	mov    ecx,0x9
c001ad3a:	fc                   	cld    
c001ad3b:	89 e7                	mov    edi,esp
c001ad3d:	8d 74 24 60          	lea    esi,[esp+0x60]
c001ad41:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ad43:	55                   	push   ebp
c001ad44:	e8 3f 12 ff ff       	call   c000bf88 <Device::preOpenPCI(PCIDeviceInfo)>
c001ad49:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001ad4c:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001ad50:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001ad58:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001ad60:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001ad68:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001ad6b:	83 c4 4c             	add    esp,0x4c
c001ad6e:	5b                   	pop    ebx
c001ad6f:	5e                   	pop    esi
c001ad70:	5f                   	pop    edi
c001ad71:	5d                   	pop    ebp
c001ad72:	ff e0                	jmp    eax
c001ad74:	83 ec 0c             	sub    esp,0xc
c001ad77:	68 58 01 00 00       	push   0x158
c001ad7c:	e8 2d cd fe ff       	call   c0007aae <malloc>
c001ad81:	89 c5                	mov    ebp,eax
c001ad83:	58                   	pop    eax
c001ad84:	5a                   	pop    edx
c001ad85:	68 5e 23 02 c0       	push   0xc002235e
c001ad8a:	55                   	push   ebp
c001ad8b:	e8 50 15 ff ff       	call   c000c2e0 <DriverlessDevice::DriverlessDevice(char const*)>
c001ad90:	59                   	pop    ecx
c001ad91:	5e                   	pop    esi
c001ad92:	55                   	push   ebp
c001ad93:	53                   	push   ebx
c001ad94:	e8 a9 12 ff ff       	call   c000c042 <Device::addChild(Device*)>
c001ad99:	83 c4 10             	add    esp,0x10
c001ad9c:	b9 09 00 00 00       	mov    ecx,0x9
c001ada1:	fc                   	cld    
c001ada2:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001ada6:	89 fe                	mov    esi,edi
c001ada8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001adaa:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001adae:	83 c4 1c             	add    esp,0x1c
c001adb1:	5b                   	pop    ebx
c001adb2:	5e                   	pop    esi
c001adb3:	5f                   	pop    edi
c001adb4:	5d                   	pop    ebp
c001adb5:	e9 ce 11 ff ff       	jmp    c000bf88 <Device::preOpenPCI(PCIDeviceInfo)>
c001adba:	83 c4 1c             	add    esp,0x1c
c001adbd:	5b                   	pop    ebx
c001adbe:	5e                   	pop    esi
c001adbf:	5f                   	pop    edi
c001adc0:	5d                   	pop    ebp
c001adc1:	c3                   	ret    

c001adc2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001adc2:	55                   	push   ebp
c001adc3:	57                   	push   edi
c001adc4:	56                   	push   esi
c001adc5:	53                   	push   ebx
c001adc6:	83 ec 68             	sub    esp,0x68
c001adc9:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001adcd:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001add4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001add8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001addf:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001ade4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001ade8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001adef:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001adf4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001adf8:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001adfd:	6a 0c                	push   0xc
c001adff:	57                   	push   edi
c001ae00:	53                   	push   ebx
c001ae01:	56                   	push   esi
c001ae02:	55                   	push   ebp
c001ae03:	e8 32 f8 ff ff       	call   c001a63a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ae08:	83 c4 20             	add    esp,0x20
c001ae0b:	57                   	push   edi
c001ae0c:	53                   	push   ebx
c001ae0d:	56                   	push   esi
c001ae0e:	55                   	push   ebp
c001ae0f:	e8 1c f9 ff ff       	call   c001a730 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001ae14:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001ae19:	57                   	push   edi
c001ae1a:	53                   	push   ebx
c001ae1b:	56                   	push   esi
c001ae1c:	55                   	push   ebp
c001ae1d:	e8 a4 f9 ff ff       	call   c001a7c6 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001ae22:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001ae26:	83 c4 14             	add    esp,0x14
c001ae29:	6a 3c                	push   0x3c
c001ae2b:	57                   	push   edi
c001ae2c:	53                   	push   ebx
c001ae2d:	56                   	push   esi
c001ae2e:	55                   	push   ebp
c001ae2f:	e8 06 f8 ff ff       	call   c001a63a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ae34:	0f b6 c4             	movzx  eax,ah
c001ae37:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ae3b:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001ae3f:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001ae43:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001ae48:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001ae4e:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001ae54:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001ae58:	83 c4 20             	add    esp,0x20
c001ae5b:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001ae60:	74 30                	je     c001ae92 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001ae62:	31 c0                	xor    eax,eax
c001ae64:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001ae68:	7e 28                	jle    c001ae92 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001ae6a:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001ae72:	39 cb                	cmp    ebx,ecx
c001ae74:	75 19                	jne    c001ae8f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001ae76:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001ae7e:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001ae82:	75 0b                	jne    c001ae8f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001ae84:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001ae8b:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001ae8f:	40                   	inc    eax
c001ae90:	eb d2                	jmp    c001ae64 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001ae92:	31 d2                	xor    edx,edx
c001ae94:	83 ec 0c             	sub    esp,0xc
c001ae97:	57                   	push   edi
c001ae98:	53                   	push   ebx
c001ae99:	56                   	push   esi
c001ae9a:	52                   	push   edx
c001ae9b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001ae9f:	55                   	push   ebp
c001aea0:	e8 6d f9 ff ff       	call   c001a812 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aea5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001aea9:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001aead:	42                   	inc    edx
c001aeae:	83 c4 20             	add    esp,0x20
c001aeb1:	83 fa 06             	cmp    edx,0x6
c001aeb4:	75 de                	jne    c001ae94 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001aeb6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001aeba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aebe:	c1 e2 08             	shl    edx,0x8
c001aec1:	83 ec 0c             	sub    esp,0xc
c001aec4:	0f b6 c4             	movzx  eax,ah
c001aec7:	09 d0                	or     eax,edx
c001aec9:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001aece:	6a 02                	push   0x2
c001aed0:	57                   	push   edi
c001aed1:	53                   	push   ebx
c001aed2:	56                   	push   esi
c001aed3:	55                   	push   ebp
c001aed4:	e8 61 f7 ff ff       	call   c001a63a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aed9:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001aede:	83 c4 20             	add    esp,0x20
c001aee1:	57                   	push   edi
c001aee2:	53                   	push   ebx
c001aee3:	56                   	push   esi
c001aee4:	55                   	push   ebp
c001aee5:	e8 90 f8 ff ff       	call   c001a77a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001aeea:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001aeee:	57                   	push   edi
c001aeef:	53                   	push   ebx
c001aef0:	56                   	push   esi
c001aef1:	55                   	push   ebp
c001aef2:	e8 ed f7 ff ff       	call   c001a6e4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001aef7:	b9 09 00 00 00       	mov    ecx,0x9
c001aefc:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001af01:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001af05:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001af09:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001af0d:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001af11:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001af15:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001af19:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001af1d:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001af21:	83 ec 0c             	sub    esp,0xc
c001af24:	fc                   	cld    
c001af25:	89 e7                	mov    edi,esp
c001af27:	8d 74 24 58          	lea    esi,[esp+0x58]
c001af2b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001af2d:	55                   	push   ebp
c001af2e:	e8 15 fd ff ff       	call   c001ac48 <PCI::foundDevice(PCIDeviceInfo)>
c001af33:	81 c4 8c 00 00 00    	add    esp,0x8c
c001af39:	5b                   	pop    ebx
c001af3a:	5e                   	pop    esi
c001af3b:	5f                   	pop    edi
c001af3c:	5d                   	pop    ebp
c001af3d:	c3                   	ret    

c001af3e <PCI::checkDevice(unsigned char, unsigned char)>:
c001af3e:	55                   	push   ebp
c001af3f:	57                   	push   edi
c001af40:	56                   	push   esi
c001af41:	53                   	push   ebx
c001af42:	83 ec 0c             	sub    esp,0xc
c001af45:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001af49:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001af4e:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001af53:	6a 00                	push   0x0
c001af55:	56                   	push   esi
c001af56:	57                   	push   edi
c001af57:	55                   	push   ebp
c001af58:	e8 87 f7 ff ff       	call   c001a6e4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001af5d:	6a 00                	push   0x0
c001af5f:	56                   	push   esi
c001af60:	57                   	push   edi
c001af61:	55                   	push   ebp
c001af62:	e8 5b fe ff ff       	call   c001adc2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001af67:	83 c4 20             	add    esp,0x20
c001af6a:	6a 00                	push   0x0
c001af6c:	56                   	push   esi
c001af6d:	57                   	push   edi
c001af6e:	55                   	push   ebp
c001af6f:	e8 94 f7 ff ff       	call   c001a708 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001af74:	83 c4 10             	add    esp,0x10
c001af77:	a8 80                	test   al,0x80
c001af79:	74 2d                	je     c001afa8 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001af7b:	bb 01 00 00 00       	mov    ebx,0x1
c001af80:	53                   	push   ebx
c001af81:	56                   	push   esi
c001af82:	57                   	push   edi
c001af83:	55                   	push   ebp
c001af84:	e8 5b f7 ff ff       	call   c001a6e4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001af89:	83 c4 10             	add    esp,0x10
c001af8c:	0f b7 c0             	movzx  eax,ax
c001af8f:	3d ff ff 00 00       	cmp    eax,0xffff
c001af94:	74 0c                	je     c001afa2 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001af96:	53                   	push   ebx
c001af97:	56                   	push   esi
c001af98:	57                   	push   edi
c001af99:	55                   	push   ebp
c001af9a:	e8 23 fe ff ff       	call   c001adc2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001af9f:	83 c4 10             	add    esp,0x10
c001afa2:	43                   	inc    ebx
c001afa3:	83 fb 08             	cmp    ebx,0x8
c001afa6:	75 d8                	jne    c001af80 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001afa8:	83 c4 0c             	add    esp,0xc
c001afab:	5b                   	pop    ebx
c001afac:	5e                   	pop    esi
c001afad:	5f                   	pop    edi
c001afae:	5d                   	pop    ebp
c001afaf:	c3                   	ret    

c001afb0 <PCI::detect()>:
c001afb0:	56                   	push   esi
c001afb1:	53                   	push   ebx
c001afb2:	53                   	push   ebx
c001afb3:	31 db                	xor    ebx,ebx
c001afb5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001afb9:	6a 00                	push   0x0
c001afbb:	6a 00                	push   0x0
c001afbd:	6a 00                	push   0x0
c001afbf:	56                   	push   esi
c001afc0:	e8 43 f7 ff ff       	call   c001a708 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001afc5:	83 c4 10             	add    esp,0x10
c001afc8:	a8 80                	test   al,0x80
c001afca:	75 21                	jne    c001afed <PCI::detect()+0x3d>
c001afcc:	51                   	push   ecx
c001afcd:	51                   	push   ecx
c001afce:	6a 00                	push   0x0
c001afd0:	56                   	push   esi
c001afd1:	e8 4e fc ff ff       	call   c001ac24 <PCI::checkBus(unsigned char)>
c001afd6:	83 c4 10             	add    esp,0x10
c001afd9:	eb 2a                	jmp    c001b005 <PCI::detect()+0x55>
c001afdb:	52                   	push   edx
c001afdc:	52                   	push   edx
c001afdd:	53                   	push   ebx
c001afde:	43                   	inc    ebx
c001afdf:	56                   	push   esi
c001afe0:	e8 3f fc ff ff       	call   c001ac24 <PCI::checkBus(unsigned char)>
c001afe5:	83 c4 10             	add    esp,0x10
c001afe8:	83 fb 08             	cmp    ebx,0x8
c001afeb:	74 18                	je     c001b005 <PCI::detect()+0x55>
c001afed:	53                   	push   ebx
c001afee:	6a 00                	push   0x0
c001aff0:	6a 00                	push   0x0
c001aff2:	56                   	push   esi
c001aff3:	e8 ec f6 ff ff       	call   c001a6e4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001aff8:	83 c4 10             	add    esp,0x10
c001affb:	0f b7 c0             	movzx  eax,ax
c001affe:	3d ff ff 00 00       	cmp    eax,0xffff
c001b003:	74 d6                	je     c001afdb <PCI::detect()+0x2b>
c001b005:	58                   	pop    eax
c001b006:	5b                   	pop    ebx
c001b007:	5e                   	pop    esi
c001b008:	c3                   	ret    
c001b009:	90                   	nop

c001b00a <IDE::close(int, int, void*)>:
c001b00a:	83 c8 ff             	or     eax,0xffffffff
c001b00d:	c3                   	ret    

c001b00e <IDE::IDE()>:
c001b00e:	83 ec 0c             	sub    esp,0xc
c001b011:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b015:	83 ec 08             	sub    esp,0x8
c001b018:	68 a4 23 02 c0       	push   0xc00223a4
c001b01d:	50                   	push   eax
c001b01e:	e8 61 13 ff ff       	call   c000c384 <HardDiskController::HardDiskController(char const*)>
c001b023:	83 c4 10             	add    esp,0x10
c001b026:	ba 34 24 02 c0       	mov    edx,0xc0022434
c001b02b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b02f:	89 10                	mov    DWORD PTR [eax],edx
c001b031:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b035:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001b03c:	90                   	nop
c001b03d:	83 c4 0c             	add    esp,0xc
c001b040:	c3                   	ret    
c001b041:	90                   	nop

c001b042 <IDE::prepareInterrupt(unsigned char)>:
c001b042:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b047:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b04b:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001b053:	c3                   	ret    

c001b054 <selectDrive(unsigned char, unsigned char)>:
c001b054:	c3                   	ret    
c001b055:	90                   	nop

c001b056 <IDE::getBase(unsigned char)>:
c001b056:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001b05b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b05f:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001b067:	c3                   	ret    

c001b068 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001b068:	55                   	push   ebp
c001b069:	57                   	push   edi
c001b06a:	56                   	push   esi
c001b06b:	53                   	push   ebx
c001b06c:	83 ec 1c             	sub    esp,0x1c
c001b06f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b073:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b077:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001b07a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b07e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b082:	80 f9 03             	cmp    cl,0x3
c001b085:	77 4f                	ja     c001b0d6 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001b087:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b08b:	0f b6 fa             	movzx  edi,dl
c001b08e:	0f b6 db             	movzx  ebx,bl
c001b091:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001b094:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001b099:	80 ca 80             	or     dl,0x80
c001b09c:	52                   	push   edx
c001b09d:	6a 0c                	push   0xc
c001b09f:	57                   	push   edi
c001b0a0:	56                   	push   esi
c001b0a1:	e8 c2 ff ff ff       	call   c001b068 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b0a6:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001b0ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b0af:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001b0b3:	ee                   	out    dx,al
c001b0b4:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b0b9:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001b0bd:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001b0c1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b0c5:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b0cd:	83 c4 2c             	add    esp,0x2c
c001b0d0:	5b                   	pop    ebx
c001b0d1:	5e                   	pop    esi
c001b0d2:	5f                   	pop    edi
c001b0d3:	5d                   	pop    ebp
c001b0d4:	eb 92                	jmp    c001b068 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b0d6:	0f b6 cb             	movzx  ecx,bl
c001b0d9:	83 f9 07             	cmp    ecx,0x7
c001b0dc:	77 12                	ja     c001b0f0 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001b0de:	0f b6 d2             	movzx  edx,dl
c001b0e1:	0f b6 db             	movzx  ebx,bl
c001b0e4:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001b0ec:	01 da                	add    edx,ebx
c001b0ee:	eb 2f                	jmp    c001b11f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001b0f0:	83 f9 0d             	cmp    ecx,0xd
c001b0f3:	77 13                	ja     c001b108 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001b0f5:	0f b6 d2             	movzx  edx,dl
c001b0f8:	0f b6 db             	movzx  ebx,bl
c001b0fb:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001b102:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001b106:	eb 17                	jmp    c001b11f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001b108:	83 f9 15             	cmp    ecx,0x15
c001b10b:	77 13                	ja     c001b120 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001b10d:	0f b6 d2             	movzx  edx,dl
c001b110:	0f b6 db             	movzx  ebx,bl
c001b113:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001b11b:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001b11f:	ee                   	out    dx,al
c001b120:	83 c4 1c             	add    esp,0x1c
c001b123:	5b                   	pop    ebx
c001b124:	5e                   	pop    esi
c001b125:	5f                   	pop    edi
c001b126:	5d                   	pop    ebp
c001b127:	c3                   	ret    

c001b128 <IDE::read(unsigned char, unsigned char)>:
c001b128:	55                   	push   ebp
c001b129:	57                   	push   edi
c001b12a:	56                   	push   esi
c001b12b:	53                   	push   ebx
c001b12c:	83 ec 1c             	sub    esp,0x1c
c001b12f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b133:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b137:	8d 43 f8             	lea    eax,[ebx-0x8]
c001b13a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001b13e:	3c 03                	cmp    al,0x3
c001b140:	77 40                	ja     c001b182 <IDE::read(unsigned char, unsigned char)+0x5a>
c001b142:	0f b6 f9             	movzx  edi,cl
c001b145:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001b148:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b14d:	0c 80                	or     al,0x80
c001b14f:	50                   	push   eax
c001b150:	6a 0c                	push   0xc
c001b152:	57                   	push   edi
c001b153:	56                   	push   esi
c001b154:	e8 0f ff ff ff       	call   c001b068 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b159:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001b15e:	0f b6 d3             	movzx  edx,bl
c001b161:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001b165:	ec                   	in     al,dx
c001b166:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b16a:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001b16f:	52                   	push   edx
c001b170:	6a 0c                	push   0xc
c001b172:	57                   	push   edi
c001b173:	56                   	push   esi
c001b174:	e8 ef fe ff ff       	call   c001b068 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b179:	83 c4 20             	add    esp,0x20
c001b17c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b180:	eb 4c                	jmp    c001b1ce <IDE::read(unsigned char, unsigned char)+0xa6>
c001b182:	0f b6 d3             	movzx  edx,bl
c001b185:	83 fa 07             	cmp    edx,0x7
c001b188:	77 12                	ja     c001b19c <IDE::read(unsigned char, unsigned char)+0x74>
c001b18a:	0f b6 c9             	movzx  ecx,cl
c001b18d:	0f b6 d3             	movzx  edx,bl
c001b190:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c001b198:	01 c2                	add    edx,eax
c001b19a:	eb 31                	jmp    c001b1cd <IDE::read(unsigned char, unsigned char)+0xa5>
c001b19c:	83 fa 0d             	cmp    edx,0xd
c001b19f:	77 13                	ja     c001b1b4 <IDE::read(unsigned char, unsigned char)+0x8c>
c001b1a1:	0f b6 c9             	movzx  ecx,cl
c001b1a4:	0f b6 d3             	movzx  edx,bl
c001b1a7:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c001b1ae:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001b1b2:	eb 19                	jmp    c001b1cd <IDE::read(unsigned char, unsigned char)+0xa5>
c001b1b4:	31 c0                	xor    eax,eax
c001b1b6:	83 fa 15             	cmp    edx,0x15
c001b1b9:	77 13                	ja     c001b1ce <IDE::read(unsigned char, unsigned char)+0xa6>
c001b1bb:	0f b6 c9             	movzx  ecx,cl
c001b1be:	0f b6 d3             	movzx  edx,bl
c001b1c1:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c001b1c9:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001b1cd:	ec                   	in     al,dx
c001b1ce:	83 c4 1c             	add    esp,0x1c
c001b1d1:	5b                   	pop    ebx
c001b1d2:	5e                   	pop    esi
c001b1d3:	5f                   	pop    edi
c001b1d4:	5d                   	pop    ebp
c001b1d5:	c3                   	ret    

c001b1d6 <IDE::waitInterrupt(unsigned char)>:
c001b1d6:	55                   	push   ebp
c001b1d7:	57                   	push   edi
c001b1d8:	56                   	push   esi
c001b1d9:	53                   	push   ebx
c001b1da:	31 db                	xor    ebx,ebx
c001b1dc:	83 ec 0c             	sub    esp,0xc
c001b1df:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b1e3:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001b1e8:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001b1f0:	89 e8                	mov    eax,ebp
c001b1f2:	84 c0                	test   al,al
c001b1f4:	75 30                	jne    c001b226 <IDE::waitInterrupt(unsigned char)+0x50>
c001b1f6:	50                   	push   eax
c001b1f7:	6a 0c                	push   0xc
c001b1f9:	56                   	push   esi
c001b1fa:	57                   	push   edi
c001b1fb:	e8 28 ff ff ff       	call   c001b128 <IDE::read(unsigned char, unsigned char)>
c001b200:	83 c4 10             	add    esp,0x10
c001b203:	a8 01                	test   al,0x1
c001b205:	75 27                	jne    c001b22e <IDE::waitInterrupt(unsigned char)+0x58>
c001b207:	f6 c3 04             	test   bl,0x4
c001b20a:	75 12                	jne    c001b21e <IDE::waitInterrupt(unsigned char)+0x48>
c001b20c:	83 fb 32             	cmp    ebx,0x32
c001b20f:	7e 0d                	jle    c001b21e <IDE::waitInterrupt(unsigned char)+0x48>
c001b211:	83 ec 0c             	sub    esp,0xc
c001b214:	6a 64                	push   0x64
c001b216:	e8 21 a5 ff ff       	call   c001573c <milliTenthSleep(unsigned int)>
c001b21b:	83 c4 10             	add    esp,0x10
c001b21e:	83 fb 3c             	cmp    ebx,0x3c
c001b221:	74 0b                	je     c001b22e <IDE::waitInterrupt(unsigned char)+0x58>
c001b223:	43                   	inc    ebx
c001b224:	eb c2                	jmp    c001b1e8 <IDE::waitInterrupt(unsigned char)+0x12>
c001b226:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001b22e:	83 c4 0c             	add    esp,0xc
c001b231:	89 e8                	mov    eax,ebp
c001b233:	5b                   	pop    ebx
c001b234:	5e                   	pop    esi
c001b235:	5f                   	pop    edi
c001b236:	5d                   	pop    ebp
c001b237:	c3                   	ret    

c001b238 <ideChannel0IRQHandler(regs*, void*)>:
c001b238:	83 ec 10             	sub    esp,0x10
c001b23b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b23f:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001b246:	6a 07                	push   0x7
c001b248:	6a 00                	push   0x0
c001b24a:	50                   	push   eax
c001b24b:	e8 d8 fe ff ff       	call   c001b128 <IDE::read(unsigned char, unsigned char)>
c001b250:	83 c4 1c             	add    esp,0x1c
c001b253:	c3                   	ret    

c001b254 <ideChannel1IRQHandler(regs*, void*)>:
c001b254:	83 ec 10             	sub    esp,0x10
c001b257:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b25b:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001b262:	6a 07                	push   0x7
c001b264:	6a 01                	push   0x1
c001b266:	50                   	push   eax
c001b267:	e8 bc fe ff ff       	call   c001b128 <IDE::read(unsigned char, unsigned char)>
c001b26c:	83 c4 1c             	add    esp,0x1c
c001b26f:	c3                   	ret    

c001b270 <IDE::enableIRQs(unsigned char, bool)>:
c001b270:	57                   	push   edi
c001b271:	b8 02 00 00 00       	mov    eax,0x2
c001b276:	56                   	push   esi
c001b277:	53                   	push   ebx
c001b278:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b27c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b280:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001b285:	74 02                	je     c001b289 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001b287:	31 c0                	xor    eax,eax
c001b289:	0f b6 db             	movzx  ebx,bl
c001b28c:	bf 04 00 00 00       	mov    edi,0x4
c001b291:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001b298:	50                   	push   eax
c001b299:	6a 0c                	push   0xc
c001b29b:	53                   	push   ebx
c001b29c:	56                   	push   esi
c001b29d:	e8 c6 fd ff ff       	call   c001b068 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b2a2:	83 c4 10             	add    esp,0x10
c001b2a5:	50                   	push   eax
c001b2a6:	6a 0c                	push   0xc
c001b2a8:	53                   	push   ebx
c001b2a9:	56                   	push   esi
c001b2aa:	e8 79 fe ff ff       	call   c001b128 <IDE::read(unsigned char, unsigned char)>
c001b2af:	83 c4 10             	add    esp,0x10
c001b2b2:	4f                   	dec    edi
c001b2b3:	75 f0                	jne    c001b2a5 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001b2b5:	5b                   	pop    ebx
c001b2b6:	5e                   	pop    esi
c001b2b7:	5f                   	pop    edi
c001b2b8:	c3                   	ret    
c001b2b9:	90                   	nop

c001b2ba <IDE::open(int, int, void*)>:
c001b2ba:	55                   	push   ebp
c001b2bb:	57                   	push   edi
c001b2bc:	56                   	push   esi
c001b2bd:	53                   	push   ebx
c001b2be:	83 ec 1c             	sub    esp,0x1c
c001b2c1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b2c5:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001b2ce:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001b2d7:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001b2de:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001b2e5:	0f 85 de 02 00 00    	jne    c001b5c9 <IDE::open(int, int, void*)+0x30f>
c001b2eb:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001b2f1:	88 04 24             	mov    BYTE PTR [esp],al
c001b2f4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b2f7:	83 e0 7f             	and    eax,0x7f
c001b2fa:	83 f8 05             	cmp    eax,0x5
c001b2fd:	74 05                	je     c001b304 <IDE::open(int, int, void*)+0x4a>
c001b2ff:	83 f8 0f             	cmp    eax,0xf
c001b302:	75 32                	jne    c001b336 <IDE::open(int, int, void*)+0x7c>
c001b304:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001b30a:	83 e0 fc             	and    eax,0xfffffffc
c001b30d:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001b314:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001b31a:	83 e0 fc             	and    eax,0xfffffffc
c001b31d:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001b324:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001b32a:	83 e0 fc             	and    eax,0xfffffffc
c001b32d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001b334:	eb 14                	jmp    c001b34a <IDE::open(int, int, void*)+0x90>
c001b336:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001b340:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001b34a:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001b351:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001b358:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b35c:	89 c6                	mov    esi,eax
c001b35e:	bf f8 0c 00 00       	mov    edi,0xcf8
c001b363:	c1 e6 10             	shl    esi,0x10
c001b366:	89 e8                	mov    eax,ebp
c001b368:	89 fa                	mov    edx,edi
c001b36a:	c1 e0 0b             	shl    eax,0xb
c001b36d:	09 f0                	or     eax,esi
c001b36f:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001b376:	c1 e6 08             	shl    esi,0x8
c001b379:	09 c6                	or     esi,eax
c001b37b:	89 f0                	mov    eax,esi
c001b37d:	0d 08 00 00 80       	or     eax,0x80000008
c001b382:	ef                   	out    dx,eax
c001b383:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001b388:	89 ca                	mov    edx,ecx
c001b38a:	ed                   	in     eax,dx
c001b38b:	c1 e8 10             	shr    eax,0x10
c001b38e:	3d ff ff 00 00       	cmp    eax,0xffff
c001b393:	0f 84 f9 00 00 00    	je     c001b492 <IDE::open(int, int, void*)+0x1d8>
c001b399:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001b39f:	89 fa                	mov    edx,edi
c001b3a1:	89 f0                	mov    eax,esi
c001b3a3:	ef                   	out    dx,eax
c001b3a4:	b0 fe                	mov    al,0xfe
c001b3a6:	89 ca                	mov    edx,ecx
c001b3a8:	ee                   	out    dx,al
c001b3a9:	89 f0                	mov    eax,esi
c001b3ab:	89 fa                	mov    edx,edi
c001b3ad:	ef                   	out    dx,eax
c001b3ae:	89 ca                	mov    edx,ecx
c001b3b0:	ed                   	in     eax,dx
c001b3b1:	3c fe                	cmp    al,0xfe
c001b3b3:	0f 85 a9 00 00 00    	jne    c001b462 <IDE::open(int, int, void*)+0x1a8>
c001b3b9:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c001b3bf:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001b3c6:	74 33                	je     c001b3fb <IDE::open(int, int, void*)+0x141>
c001b3c8:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001b3ce:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001b3d2:	40                   	inc    eax
c001b3d3:	83 ec 0c             	sub    esp,0xc
c001b3d6:	0f b6 c0             	movzx  eax,al
c001b3d9:	50                   	push   eax
c001b3da:	55                   	push   ebp
c001b3db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b3df:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001b3e5:	51                   	push   ecx
c001b3e6:	e8 c9 3b ff ff       	call   c000efb4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001b3eb:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001b3f0:	83 c4 1c             	add    esp,0x1c
c001b3f3:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001b3f9:	eb 0a                	jmp    c001b405 <IDE::open(int, int, void*)+0x14b>
c001b3fb:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001b405:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001b40c:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001b413:	c1 e1 10             	shl    ecx,0x10
c001b416:	c1 e0 08             	shl    eax,0x8
c001b419:	bf f8 0c 00 00       	mov    edi,0xcf8
c001b41e:	09 c1                	or     ecx,eax
c001b420:	89 fa                	mov    edx,edi
c001b422:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001b429:	c1 e0 0b             	shl    eax,0xb
c001b42c:	09 c1                	or     ecx,eax
c001b42e:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001b434:	89 c8                	mov    eax,ecx
c001b436:	ef                   	out    dx,eax
c001b437:	be fc 0c 00 00       	mov    esi,0xcfc
c001b43c:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001b442:	89 f2                	mov    edx,esi
c001b444:	ee                   	out    dx,al
c001b445:	89 c8                	mov    eax,ecx
c001b447:	89 fa                	mov    edx,edi
c001b449:	ef                   	out    dx,eax
c001b44a:	89 f2                	mov    edx,esi
c001b44c:	ed                   	in     eax,dx
c001b44d:	0f b6 c0             	movzx  eax,al
c001b450:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001b456:	74 4a                	je     c001b4a2 <IDE::open(int, int, void*)+0x1e8>
c001b458:	83 ec 0c             	sub    esp,0xc
c001b45b:	68 bc 23 02 c0       	push   0xc00223bc
c001b460:	eb 38                	jmp    c001b49a <IDE::open(int, int, void*)+0x1e0>
c001b462:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001b46b:	75 1b                	jne    c001b488 <IDE::open(int, int, void*)+0x1ce>
c001b46d:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c001b471:	3d 80 00 00 00       	cmp    eax,0x80
c001b476:	74 07                	je     c001b47f <IDE::open(int, int, void*)+0x1c5>
c001b478:	3d 8a 00 00 00       	cmp    eax,0x8a
c001b47d:	75 09                	jne    c001b488 <IDE::open(int, int, void*)+0x1ce>
c001b47f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001b486:	eb 1a                	jmp    c001b4a2 <IDE::open(int, int, void*)+0x1e8>
c001b488:	83 ec 0c             	sub    esp,0xc
c001b48b:	68 c4 23 02 c0       	push   0xc00223c4
c001b490:	eb 08                	jmp    c001b49a <IDE::open(int, int, void*)+0x1e0>
c001b492:	83 ec 0c             	sub    esp,0xc
c001b495:	68 f5 23 02 c0       	push   0xc00223f5
c001b49a:	e8 fc 56 ff ff       	call   c0010b9b <KePanic(char const*)>
c001b49f:	83 c4 10             	add    esp,0x10
c001b4a2:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001b4a9:	74 1a                	je     c001b4c5 <IDE::open(int, int, void*)+0x20b>
c001b4ab:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001b4b1:	83 e0 fc             	and    eax,0xfffffffc
c001b4b4:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001b4bb:	83 c0 08             	add    eax,0x8
c001b4be:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001b4c5:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001b4cb:	89 c2                	mov    edx,eax
c001b4cd:	83 e2 0f             	and    edx,0xf
c001b4d0:	83 fa 08             	cmp    edx,0x8
c001b4d3:	75 0a                	jne    c001b4df <IDE::open(int, int, void*)+0x225>
c001b4d5:	83 e8 02             	sub    eax,0x2
c001b4d8:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001b4df:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001b4e5:	89 c2                	mov    edx,eax
c001b4e7:	83 e2 0f             	and    edx,0xf
c001b4ea:	83 fa 08             	cmp    edx,0x8
c001b4ed:	75 0a                	jne    c001b4f9 <IDE::open(int, int, void*)+0x23f>
c001b4ef:	83 e8 02             	sub    eax,0x2
c001b4f2:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001b4f9:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001b500:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001b507:	89 d0                	mov    eax,edx
c001b509:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b50c:	8d 7a 01             	lea    edi,[edx+0x1]
c001b50f:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b513:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001b517:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001b51b:	83 e1 3f             	and    ecx,0x3f
c001b51e:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001b522:	89 f9                	mov    ecx,edi
c001b524:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001b52b:	0f b6 c9             	movzx  ecx,cl
c001b52e:	8d 78 02             	lea    edi,[eax+0x2]
c001b531:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001b534:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001b538:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001b53c:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001b540:	83 e2 3f             	and    edx,0x3f
c001b543:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001b547:	89 f9                	mov    ecx,edi
c001b549:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001b54f:	0f b6 d1             	movzx  edx,cl
c001b552:	8d 78 03             	lea    edi,[eax+0x3]
c001b555:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b558:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b55c:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001b560:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001b564:	83 e1 3f             	and    ecx,0x3f
c001b567:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001b56b:	89 f9                	mov    ecx,edi
c001b56d:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001b573:	0f b6 c9             	movzx  ecx,cl
c001b576:	8d 78 04             	lea    edi,[eax+0x4]
c001b579:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001b57c:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001b580:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001b584:	89 fa                	mov    edx,edi
c001b586:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001b58c:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001b590:	83 e2 3f             	and    edx,0x3f
c001b593:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001b597:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001b59e:	66 85 f6             	test   si,si
c001b5a1:	74 65                	je     c001b608 <IDE::open(int, int, void*)+0x34e>
c001b5a3:	89 f9                	mov    ecx,edi
c001b5a5:	83 c0 05             	add    eax,0x5
c001b5a8:	0f b6 d1             	movzx  edx,cl
c001b5ab:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b5ae:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b5b2:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001b5b6:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001b5bc:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001b5c0:	83 e0 3f             	and    eax,0x3f
c001b5c3:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001b5c7:	eb 3f                	jmp    c001b608 <IDE::open(int, int, void*)+0x34e>
c001b5c9:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001b5cf:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001b5d6:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001b5dd:	05 06 02 00 00       	add    eax,0x206
c001b5e2:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001b5e9:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001b5f0:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001b5f7:	05 06 02 00 00       	add    eax,0x206
c001b5fc:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001b603:	e9 bd fe ff ff       	jmp    c001b4c5 <IDE::open(int, int, void*)+0x20b>
c001b608:	50                   	push   eax
c001b609:	50                   	push   eax
c001b60a:	6a 00                	push   0x0
c001b60c:	53                   	push   ebx
c001b60d:	e8 30 fa ff ff       	call   c001b042 <IDE::prepareInterrupt(unsigned char)>
c001b612:	5a                   	pop    edx
c001b613:	59                   	pop    ecx
c001b614:	6a 01                	push   0x1
c001b616:	53                   	push   ebx
c001b617:	e8 26 fa ff ff       	call   c001b042 <IDE::prepareInterrupt(unsigned char)>
c001b61c:	83 c4 0c             	add    esp,0xc
c001b61f:	6a 00                	push   0x0
c001b621:	6a 00                	push   0x0
c001b623:	53                   	push   ebx
c001b624:	e8 47 fc ff ff       	call   c001b270 <IDE::enableIRQs(unsigned char, bool)>
c001b629:	83 c4 0c             	add    esp,0xc
c001b62c:	6a 00                	push   0x0
c001b62e:	6a 01                	push   0x1
c001b630:	53                   	push   ebx
c001b631:	e8 3a fc ff ff       	call   c001b270 <IDE::enableIRQs(unsigned char, bool)>
c001b636:	83 c4 10             	add    esp,0x10
c001b639:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001b640:	74 34                	je     c001b676 <IDE::open(int, int, void*)+0x3bc>
c001b642:	83 ec 0c             	sub    esp,0xc
c001b645:	53                   	push   ebx
c001b646:	6a 01                	push   0x1
c001b648:	68 38 b2 01 c0       	push   0xc001b238
c001b64d:	6a 0e                	push   0xe
c001b64f:	53                   	push   ebx
c001b650:	e8 99 09 ff ff       	call   c000bfee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b655:	83 c4 14             	add    esp,0x14
c001b658:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001b65e:	53                   	push   ebx
c001b65f:	6a 01                	push   0x1
c001b661:	68 54 b2 01 c0       	push   0xc001b254
c001b666:	6a 0f                	push   0xf
c001b668:	53                   	push   ebx
c001b669:	e8 80 09 ff ff       	call   c000bfee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b66e:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001b674:	eb 38                	jmp    c001b6ae <IDE::open(int, int, void*)+0x3f4>
c001b676:	83 ec 0c             	sub    esp,0xc
c001b679:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001b683:	53                   	push   ebx
c001b684:	6a 00                	push   0x0
c001b686:	68 38 b2 01 c0       	push   0xc001b238
c001b68b:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001b691:	53                   	push   ebx
c001b692:	e8 57 09 ff ff       	call   c000bfee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b697:	83 c4 14             	add    esp,0x14
c001b69a:	53                   	push   ebx
c001b69b:	6a 00                	push   0x0
c001b69d:	68 54 b2 01 c0       	push   0xc001b254
c001b6a2:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001b6a8:	53                   	push   ebx
c001b6a9:	e8 40 09 ff ff       	call   c000bfee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b6ae:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b6b0:	83 c4 20             	add    esp,0x20
c001b6b3:	83 ec 0c             	sub    esp,0xc
c001b6b6:	53                   	push   ebx
c001b6b7:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001b6ba:	83 c4 0c             	add    esp,0xc
c001b6bd:	6a 07                	push   0x7
c001b6bf:	6a 00                	push   0x0
c001b6c1:	53                   	push   ebx
c001b6c2:	e8 61 fa ff ff       	call   c001b128 <IDE::read(unsigned char, unsigned char)>
c001b6c7:	83 c4 0c             	add    esp,0xc
c001b6ca:	6a 07                	push   0x7
c001b6cc:	6a 01                	push   0x1
c001b6ce:	53                   	push   ebx
c001b6cf:	e8 54 fa ff ff       	call   c001b128 <IDE::read(unsigned char, unsigned char)>
c001b6d4:	83 c4 0c             	add    esp,0xc
c001b6d7:	6a 01                	push   0x1
c001b6d9:	6a 00                	push   0x0
c001b6db:	53                   	push   ebx
c001b6dc:	e8 8f fb ff ff       	call   c001b270 <IDE::enableIRQs(unsigned char, bool)>
c001b6e1:	83 c4 0c             	add    esp,0xc
c001b6e4:	6a 01                	push   0x1
c001b6e6:	6a 01                	push   0x1
c001b6e8:	53                   	push   ebx
c001b6e9:	e8 82 fb ff ff       	call   c001b270 <IDE::enableIRQs(unsigned char, bool)>
c001b6ee:	83 c4 2c             	add    esp,0x2c
c001b6f1:	31 c0                	xor    eax,eax
c001b6f3:	5b                   	pop    ebx
c001b6f4:	5e                   	pop    esi
c001b6f5:	5f                   	pop    edi
c001b6f6:	5d                   	pop    ebp
c001b6f7:	c3                   	ret    

c001b6f8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001b6f8:	55                   	push   ebp
c001b6f9:	57                   	push   edi
c001b6fa:	56                   	push   esi
c001b6fb:	53                   	push   ebx
c001b6fc:	83 ec 1c             	sub    esp,0x1c
c001b6ff:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b703:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b707:	8d 42 f8             	lea    eax,[edx-0x8]
c001b70a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b70e:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001b712:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001b716:	3c 03                	cmp    al,0x3
c001b718:	77 5a                	ja     c001b774 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001b71a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b71e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b722:	0f b6 db             	movzx  ebx,bl
c001b725:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001b728:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b72d:	0c 80                	or     al,0x80
c001b72f:	50                   	push   eax
c001b730:	6a 0c                	push   0xc
c001b732:	53                   	push   ebx
c001b733:	56                   	push   esi
c001b734:	e8 2f f9 ff ff       	call   c001b068 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b739:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001b73e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b742:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b746:	0f b6 d2             	movzx  edx,dl
c001b749:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001b74d:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001b74f:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b754:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001b758:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001b75c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b760:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b768:	83 c4 2c             	add    esp,0x2c
c001b76b:	5b                   	pop    ebx
c001b76c:	5e                   	pop    esi
c001b76d:	5f                   	pop    edi
c001b76e:	5d                   	pop    ebp
c001b76f:	e9 f4 f8 ff ff       	jmp    c001b068 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b774:	0f b6 c2             	movzx  eax,dl
c001b777:	83 f8 07             	cmp    eax,0x7
c001b77a:	77 12                	ja     c001b78e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001b77c:	0f b6 c2             	movzx  eax,dl
c001b77f:	0f b6 db             	movzx  ebx,bl
c001b782:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001b78a:	01 c2                	add    edx,eax
c001b78c:	eb 2f                	jmp    c001b7bd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001b78e:	83 f8 0d             	cmp    eax,0xd
c001b791:	77 13                	ja     c001b7a6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001b793:	0f b6 db             	movzx  ebx,bl
c001b796:	0f b6 d2             	movzx  edx,dl
c001b799:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001b7a0:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001b7a4:	eb 17                	jmp    c001b7bd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001b7a6:	83 f8 15             	cmp    eax,0x15
c001b7a9:	77 14                	ja     c001b7bf <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001b7ab:	0f b6 db             	movzx  ebx,bl
c001b7ae:	0f b6 d2             	movzx  edx,dl
c001b7b1:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001b7b9:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001b7bd:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001b7bf:	83 c4 1c             	add    esp,0x1c
c001b7c2:	5b                   	pop    ebx
c001b7c3:	5e                   	pop    esi
c001b7c4:	5f                   	pop    edi
c001b7c5:	5d                   	pop    ebp
c001b7c6:	c3                   	ret    
c001b7c7:	90                   	nop

c001b7c8 <IDE::detect()>:
c001b7c8:	55                   	push   ebp
c001b7c9:	57                   	push   edi
c001b7ca:	56                   	push   esi
c001b7cb:	53                   	push   ebx
c001b7cc:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001b7d2:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001b7d9:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001b7e0:	0f 85 a4 02 00 00    	jne    c001ba8a <IDE::detect()+0x2c2>
c001b7e6:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001b7ed:	31 f6                	xor    esi,esi
c001b7ef:	31 ed                	xor    ebp,ebp
c001b7f1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001b7f9:	89 e8                	mov    eax,ebp
c001b7fb:	c1 e0 06             	shl    eax,0x6
c001b7fe:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001b806:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001b80a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b80e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b812:	c1 e0 04             	shl    eax,0x4
c001b815:	83 c8 a0             	or     eax,0xffffffa0
c001b818:	0f b6 c0             	movzx  eax,al
c001b81b:	50                   	push   eax
c001b81c:	6a 06                	push   0x6
c001b81e:	56                   	push   esi
c001b81f:	53                   	push   ebx
c001b820:	e8 43 f8 ff ff       	call   c001b068 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b825:	83 c4 0c             	add    esp,0xc
c001b828:	6a 0c                	push   0xc
c001b82a:	56                   	push   esi
c001b82b:	53                   	push   ebx
c001b82c:	e8 f7 f8 ff ff       	call   c001b128 <IDE::read(unsigned char, unsigned char)>
c001b831:	83 c4 0c             	add    esp,0xc
c001b834:	6a 0c                	push   0xc
c001b836:	56                   	push   esi
c001b837:	53                   	push   ebx
c001b838:	e8 eb f8 ff ff       	call   c001b128 <IDE::read(unsigned char, unsigned char)>
c001b83d:	83 c4 0c             	add    esp,0xc
c001b840:	6a 0c                	push   0xc
c001b842:	56                   	push   esi
c001b843:	53                   	push   ebx
c001b844:	e8 df f8 ff ff       	call   c001b128 <IDE::read(unsigned char, unsigned char)>
c001b849:	83 c4 0c             	add    esp,0xc
c001b84c:	6a 0c                	push   0xc
c001b84e:	56                   	push   esi
c001b84f:	53                   	push   ebx
c001b850:	e8 d3 f8 ff ff       	call   c001b128 <IDE::read(unsigned char, unsigned char)>
c001b855:	68 ec 00 00 00       	push   0xec
c001b85a:	6a 07                	push   0x7
c001b85c:	56                   	push   esi
c001b85d:	53                   	push   ebx
c001b85e:	e8 05 f8 ff ff       	call   c001b068 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b863:	83 c4 1c             	add    esp,0x1c
c001b866:	6a 0c                	push   0xc
c001b868:	56                   	push   esi
c001b869:	53                   	push   ebx
c001b86a:	e8 b9 f8 ff ff       	call   c001b128 <IDE::read(unsigned char, unsigned char)>
c001b86f:	83 c4 0c             	add    esp,0xc
c001b872:	6a 0c                	push   0xc
c001b874:	56                   	push   esi
c001b875:	53                   	push   ebx
c001b876:	e8 ad f8 ff ff       	call   c001b128 <IDE::read(unsigned char, unsigned char)>
c001b87b:	83 c4 0c             	add    esp,0xc
c001b87e:	6a 0c                	push   0xc
c001b880:	56                   	push   esi
c001b881:	53                   	push   ebx
c001b882:	e8 a1 f8 ff ff       	call   c001b128 <IDE::read(unsigned char, unsigned char)>
c001b887:	83 c4 0c             	add    esp,0xc
c001b88a:	6a 0c                	push   0xc
c001b88c:	56                   	push   esi
c001b88d:	53                   	push   ebx
c001b88e:	e8 95 f8 ff ff       	call   c001b128 <IDE::read(unsigned char, unsigned char)>
c001b893:	83 c4 0c             	add    esp,0xc
c001b896:	6a 0c                	push   0xc
c001b898:	56                   	push   esi
c001b899:	53                   	push   ebx
c001b89a:	e8 89 f8 ff ff       	call   c001b128 <IDE::read(unsigned char, unsigned char)>
c001b89f:	83 c4 10             	add    esp,0x10
c001b8a2:	84 c0                	test   al,al
c001b8a4:	0f 84 60 01 00 00    	je     c001ba0a <IDE::detect()+0x242>
c001b8aa:	31 ff                	xor    edi,edi
c001b8ac:	50                   	push   eax
c001b8ad:	6a 0c                	push   0xc
c001b8af:	56                   	push   esi
c001b8b0:	53                   	push   ebx
c001b8b1:	e8 72 f8 ff ff       	call   c001b128 <IDE::read(unsigned char, unsigned char)>
c001b8b6:	83 c4 10             	add    esp,0x10
c001b8b9:	a8 01                	test   al,0x1
c001b8bb:	0f 85 6a 01 00 00    	jne    c001ba2b <IDE::detect()+0x263>
c001b8c1:	a8 80                	test   al,0x80
c001b8c3:	75 04                	jne    c001b8c9 <IDE::detect()+0x101>
c001b8c5:	a8 08                	test   al,0x8
c001b8c7:	75 23                	jne    c001b8ec <IDE::detect()+0x124>
c001b8c9:	47                   	inc    edi
c001b8ca:	81 ff 17 01 00 00    	cmp    edi,0x117
c001b8d0:	7e da                	jle    c001b8ac <IDE::detect()+0xe4>
c001b8d2:	83 ec 0c             	sub    esp,0xc
c001b8d5:	6a 32                	push   0x32
c001b8d7:	e8 60 9e ff ff       	call   c001573c <milliTenthSleep(unsigned int)>
c001b8dc:	83 c4 10             	add    esp,0x10
c001b8df:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001b8e5:	75 c5                	jne    c001b8ac <IDE::detect()+0xe4>
c001b8e7:	e9 3f 01 00 00       	jmp    c001ba2b <IDE::detect()+0x263>
c001b8ec:	31 c9                	xor    ecx,ecx
c001b8ee:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001b8f2:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b8f6:	83 ec 0c             	sub    esp,0xc
c001b8f9:	68 80 00 00 00       	push   0x80
c001b8fe:	57                   	push   edi
c001b8ff:	6a 00                	push   0x0
c001b901:	56                   	push   esi
c001b902:	53                   	push   ebx
c001b903:	e8 f0 fd ff ff       	call   c001b6f8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001b908:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001b90d:	89 e8                	mov    eax,ebp
c001b90f:	89 d1                	mov    ecx,edx
c001b911:	c1 e0 06             	shl    eax,0x6
c001b914:	01 d8                	add    eax,ebx
c001b916:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001b91d:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001b924:	89 f2                	mov    edx,esi
c001b926:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001b92c:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001b930:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001b936:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b93a:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001b941:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001b949:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001b950:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001b958:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001b95e:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001b965:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001b96b:	8d 54 24 58          	lea    edx,[esp+0x58]
c001b96f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001b973:	83 c4 20             	add    esp,0x20
c001b976:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001b979:	83 c0 02             	add    eax,0x2
c001b97c:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001b982:	83 c7 02             	add    edi,0x2
c001b985:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001b988:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001b98e:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001b992:	75 e2                	jne    c001b976 <IDE::detect()+0x1ae>
c001b994:	89 e8                	mov    eax,ebp
c001b996:	c1 e0 06             	shl    eax,0x6
c001b999:	01 d8                	add    eax,ebx
c001b99b:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001b9a2:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001b9a9:	c1 ea 09             	shr    edx,0x9
c001b9ac:	83 e2 01             	and    edx,0x1
c001b9af:	80 e1 01             	and    cl,0x1
c001b9b2:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001b9b8:	75 22                	jne    c001b9dc <IDE::detect()+0x214>
c001b9ba:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001b9c1:	74 46                	je     c001ba09 <IDE::detect()+0x241>
c001b9c3:	83 ec 0c             	sub    esp,0xc
c001b9c6:	68 7c 01 00 00       	push   0x17c
c001b9cb:	e8 de c0 fe ff       	call   c0007aae <malloc>
c001b9d0:	89 c7                	mov    edi,eax
c001b9d2:	89 04 24             	mov    DWORD PTR [esp],eax
c001b9d5:	e8 1a 05 00 00       	call   c001bef4 <ATA::ATA()>
c001b9da:	eb 17                	jmp    c001b9f3 <IDE::detect()+0x22b>
c001b9dc:	83 ec 0c             	sub    esp,0xc
c001b9df:	68 84 01 00 00       	push   0x184
c001b9e4:	e8 c5 c0 fe ff       	call   c0007aae <malloc>
c001b9e9:	89 c7                	mov    edi,eax
c001b9eb:	89 04 24             	mov    DWORD PTR [esp],eax
c001b9ee:	e8 45 0e 00 00       	call   c001c838 <ATAPI::ATAPI()>
c001b9f3:	5a                   	pop    edx
c001b9f4:	59                   	pop    ecx
c001b9f5:	57                   	push   edi
c001b9f6:	53                   	push   ebx
c001b9f7:	e8 46 06 ff ff       	call   c000c042 <Device::addChild(Device*)>
c001b9fc:	8b 07                	mov    eax,DWORD PTR [edi]
c001b9fe:	53                   	push   ebx
c001b9ff:	55                   	push   ebp
c001ba00:	6a 00                	push   0x0
c001ba02:	57                   	push   edi
c001ba03:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ba06:	83 c4 20             	add    esp,0x20
c001ba09:	45                   	inc    ebp
c001ba0a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001ba0f:	74 0d                	je     c001ba1e <IDE::detect()+0x256>
c001ba11:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001ba19:	e9 db fd ff ff       	jmp    c001b7f9 <IDE::detect()+0x31>
c001ba1e:	4e                   	dec    esi
c001ba1f:	74 69                	je     c001ba8a <IDE::detect()+0x2c2>
c001ba21:	be 01 00 00 00       	mov    esi,0x1
c001ba26:	e9 c6 fd ff ff       	jmp    c001b7f1 <IDE::detect()+0x29>
c001ba2b:	50                   	push   eax
c001ba2c:	6a 04                	push   0x4
c001ba2e:	56                   	push   esi
c001ba2f:	53                   	push   ebx
c001ba30:	e8 f3 f6 ff ff       	call   c001b128 <IDE::read(unsigned char, unsigned char)>
c001ba35:	83 c4 0c             	add    esp,0xc
c001ba38:	89 c7                	mov    edi,eax
c001ba3a:	6a 05                	push   0x5
c001ba3c:	56                   	push   esi
c001ba3d:	53                   	push   ebx
c001ba3e:	e8 e5 f6 ff ff       	call   c001b128 <IDE::read(unsigned char, unsigned char)>
c001ba43:	83 c4 10             	add    esp,0x10
c001ba46:	89 f9                	mov    ecx,edi
c001ba48:	0f b6 c0             	movzx  eax,al
c001ba4b:	0f b6 f9             	movzx  edi,cl
c001ba4e:	83 ff 14             	cmp    edi,0x14
c001ba51:	75 07                	jne    c001ba5a <IDE::detect()+0x292>
c001ba53:	3d eb 00 00 00       	cmp    eax,0xeb
c001ba58:	eb 0a                	jmp    c001ba64 <IDE::detect()+0x29c>
c001ba5a:	3d 96 00 00 00       	cmp    eax,0x96
c001ba5f:	75 a9                	jne    c001ba0a <IDE::detect()+0x242>
c001ba61:	83 ff 69             	cmp    edi,0x69
c001ba64:	75 a4                	jne    c001ba0a <IDE::detect()+0x242>
c001ba66:	68 a1 00 00 00       	push   0xa1
c001ba6b:	6a 07                	push   0x7
c001ba6d:	56                   	push   esi
c001ba6e:	53                   	push   ebx
c001ba6f:	e8 f4 f5 ff ff       	call   c001b068 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ba74:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001ba7b:	e8 bc 9c ff ff       	call   c001573c <milliTenthSleep(unsigned int)>
c001ba80:	83 c4 10             	add    esp,0x10
c001ba83:	b1 01                	mov    cl,0x1
c001ba85:	e9 64 fe ff ff       	jmp    c001b8ee <IDE::detect()+0x126>
c001ba8a:	81 c4 1c 02 00 00    	add    esp,0x21c
c001ba90:	5b                   	pop    ebx
c001ba91:	5e                   	pop    esi
c001ba92:	5f                   	pop    edi
c001ba93:	5d                   	pop    ebp
c001ba94:	c3                   	ret    
c001ba95:	90                   	nop

c001ba96 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001ba96:	55                   	push   ebp
c001ba97:	57                   	push   edi
c001ba98:	56                   	push   esi
c001ba99:	53                   	push   ebx
c001ba9a:	83 ec 1c             	sub    esp,0x1c
c001ba9d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001baa1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001baa5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001baa9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001baad:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001bab1:	88 c3                	mov    bl,al
c001bab3:	25 ff 00 00 00       	and    eax,0xff
c001bab8:	0f 84 88 00 00 00    	je     c001bb46 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001babe:	83 ec 0c             	sub    esp,0xc
c001bac1:	89 c7                	mov    edi,eax
c001bac3:	68 1f 24 02 c0       	push   0xc002241f
c001bac8:	e8 6c ee fe ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c001bacd:	83 c4 10             	add    esp,0x10
c001bad0:	83 ff 01             	cmp    edi,0x1
c001bad3:	74 6b                	je     c001bb40 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001bad5:	83 ff 02             	cmp    edi,0x2
c001bad8:	75 58                	jne    c001bb32 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001bada:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001badf:	01 ff                	add    edi,edi
c001bae1:	50                   	push   eax
c001bae2:	09 fe                	or     esi,edi
c001bae4:	6a 01                	push   0x1
c001bae6:	89 f0                	mov    eax,esi
c001bae8:	0f b6 f0             	movzx  esi,al
c001baeb:	c1 e6 06             	shl    esi,0x6
c001baee:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001baf6:	50                   	push   eax
c001baf7:	55                   	push   ebp
c001baf8:	e8 2b f6 ff ff       	call   c001b128 <IDE::read(unsigned char, unsigned char)>
c001bafd:	83 c4 10             	add    esp,0x10
c001bb00:	a8 01                	test   al,0x1
c001bb02:	74 02                	je     c001bb06 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001bb04:	b3 07                	mov    bl,0x7
c001bb06:	a8 02                	test   al,0x2
c001bb08:	74 02                	je     c001bb0c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001bb0a:	b3 03                	mov    bl,0x3
c001bb0c:	a8 04                	test   al,0x4
c001bb0e:	74 02                	je     c001bb12 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001bb10:	b3 14                	mov    bl,0x14
c001bb12:	a8 08                	test   al,0x8
c001bb14:	74 02                	je     c001bb18 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001bb16:	b3 03                	mov    bl,0x3
c001bb18:	a8 10                	test   al,0x10
c001bb1a:	74 02                	je     c001bb1e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001bb1c:	b3 15                	mov    bl,0x15
c001bb1e:	a8 20                	test   al,0x20
c001bb20:	74 02                	je     c001bb24 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001bb22:	b3 03                	mov    bl,0x3
c001bb24:	a8 40                	test   al,0x40
c001bb26:	74 02                	je     c001bb2a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001bb28:	b3 16                	mov    bl,0x16
c001bb2a:	a8 80                	test   al,0x80
c001bb2c:	74 18                	je     c001bb46 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001bb2e:	b3 0d                	mov    bl,0xd
c001bb30:	eb 14                	jmp    c001bb46 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001bb32:	83 ff 03             	cmp    edi,0x3
c001bb35:	74 0d                	je     c001bb44 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001bb37:	83 ff 04             	cmp    edi,0x4
c001bb3a:	75 0a                	jne    c001bb46 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001bb3c:	b3 08                	mov    bl,0x8
c001bb3e:	eb 06                	jmp    c001bb46 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001bb40:	b3 13                	mov    bl,0x13
c001bb42:	eb 02                	jmp    c001bb46 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001bb44:	b3 17                	mov    bl,0x17
c001bb46:	83 c4 1c             	add    esp,0x1c
c001bb49:	88 d8                	mov    al,bl
c001bb4b:	5b                   	pop    ebx
c001bb4c:	5e                   	pop    esi
c001bb4d:	5f                   	pop    edi
c001bb4e:	5d                   	pop    ebp
c001bb4f:	c3                   	ret    

c001bb50 <IDE::polling(unsigned char, unsigned int)>:
c001bb50:	57                   	push   edi
c001bb51:	56                   	push   esi
c001bb52:	53                   	push   ebx
c001bb53:	bb 04 00 00 00       	mov    ebx,0x4
c001bb58:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001bb5c:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001bb61:	52                   	push   edx
c001bb62:	6a 0c                	push   0xc
c001bb64:	56                   	push   esi
c001bb65:	57                   	push   edi
c001bb66:	e8 bd f5 ff ff       	call   c001b128 <IDE::read(unsigned char, unsigned char)>
c001bb6b:	83 c4 10             	add    esp,0x10
c001bb6e:	4b                   	dec    ebx
c001bb6f:	75 f0                	jne    c001bb61 <IDE::polling(unsigned char, unsigned int)+0x11>
c001bb71:	bb a0 86 01 00       	mov    ebx,0x186a0
c001bb76:	50                   	push   eax
c001bb77:	6a 0c                	push   0xc
c001bb79:	56                   	push   esi
c001bb7a:	57                   	push   edi
c001bb7b:	e8 a8 f5 ff ff       	call   c001b128 <IDE::read(unsigned char, unsigned char)>
c001bb80:	83 c4 10             	add    esp,0x10
c001bb83:	a8 01                	test   al,0x1
c001bb85:	75 17                	jne    c001bb9e <IDE::polling(unsigned char, unsigned int)+0x4e>
c001bb87:	a8 20                	test   al,0x20
c001bb89:	75 0f                	jne    c001bb9a <IDE::polling(unsigned char, unsigned int)+0x4a>
c001bb8b:	4b                   	dec    ebx
c001bb8c:	74 10                	je     c001bb9e <IDE::polling(unsigned char, unsigned int)+0x4e>
c001bb8e:	a8 80                	test   al,0x80
c001bb90:	75 e4                	jne    c001bb76 <IDE::polling(unsigned char, unsigned int)+0x26>
c001bb92:	a8 08                	test   al,0x8
c001bb94:	74 e0                	je     c001bb76 <IDE::polling(unsigned char, unsigned int)+0x26>
c001bb96:	31 c0                	xor    eax,eax
c001bb98:	eb 06                	jmp    c001bba0 <IDE::polling(unsigned char, unsigned int)+0x50>
c001bb9a:	b0 01                	mov    al,0x1
c001bb9c:	eb 02                	jmp    c001bba0 <IDE::polling(unsigned char, unsigned int)+0x50>
c001bb9e:	b0 02                	mov    al,0x2
c001bba0:	5b                   	pop    ebx
c001bba1:	5e                   	pop    esi
c001bba2:	5f                   	pop    edi
c001bba3:	c3                   	ret    

c001bba4 <SATABus::close(int, int, void*)>:
c001bba4:	31 c0                	xor    eax,eax
c001bba6:	c3                   	ret    
c001bba7:	90                   	nop

c001bba8 <SATABus::detect()>:
c001bba8:	c3                   	ret    
c001bba9:	90                   	nop

c001bbaa <SATABus::SATABus()>:
c001bbaa:	83 ec 0c             	sub    esp,0xc
c001bbad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbb1:	83 ec 08             	sub    esp,0x8
c001bbb4:	68 58 24 02 c0       	push   0xc0022458
c001bbb9:	50                   	push   eax
c001bbba:	e8 c5 07 ff ff       	call   c000c384 <HardDiskController::HardDiskController(char const*)>
c001bbbf:	83 c4 10             	add    esp,0x10
c001bbc2:	ba 84 24 02 c0       	mov    edx,0xc0022484
c001bbc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbcb:	89 10                	mov    DWORD PTR [eax],edx
c001bbcd:	83 ec 0c             	sub    esp,0xc
c001bbd0:	6a 50                	push   0x50
c001bbd2:	e8 aa c2 fe ff       	call   c0007e81 <Phys::allocateContiguousPages(int)>
c001bbd7:	83 c4 10             	add    esp,0x10
c001bbda:	89 c2                	mov    edx,eax
c001bbdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbe0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001bbe6:	83 ec 0c             	sub    esp,0xc
c001bbe9:	6a 50                	push   0x50
c001bbeb:	e8 11 da fe ff       	call   c0009601 <Virt::allocateKernelVirtualPages(int)>
c001bbf0:	83 c4 10             	add    esp,0x10
c001bbf3:	89 c2                	mov    edx,eax
c001bbf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbf9:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001bbff:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c001bc04:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bc08:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001bc0e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bc12:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001bc18:	83 ec 0c             	sub    esp,0xc
c001bc1b:	6a 03                	push   0x3
c001bc1d:	6a 50                	push   0x50
c001bc1f:	51                   	push   ecx
c001bc20:	52                   	push   edx
c001bc21:	50                   	push   eax
c001bc22:	e8 e7 e2 fe ff       	call   c0009f0e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001bc27:	83 c4 20             	add    esp,0x20
c001bc2a:	90                   	nop
c001bc2b:	83 c4 0c             	add    esp,0xc
c001bc2e:	c3                   	ret    
c001bc2f:	90                   	nop

c001bc30 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001bc30:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bc34:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001bc37:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001bc3a:	09 c2                	or     edx,eax
c001bc3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc40:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001bc46:	8b 08                	mov    ecx,DWORD PTR [eax]
c001bc48:	31 c0                	xor    eax,eax
c001bc4a:	c1 e9 08             	shr    ecx,0x8
c001bc4d:	83 e1 0f             	and    ecx,0xf
c001bc50:	39 c8                	cmp    eax,ecx
c001bc52:	74 0a                	je     c001bc5e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001bc54:	f6 c2 01             	test   dl,0x1
c001bc57:	74 08                	je     c001bc61 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001bc59:	d1 ea                	shr    edx,1
c001bc5b:	40                   	inc    eax
c001bc5c:	eb f2                	jmp    c001bc50 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001bc5e:	83 c8 ff             	or     eax,0xffffffff
c001bc61:	c3                   	ret    

c001bc62 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001bc62:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bc66:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001bc69:	89 c2                	mov    edx,eax
c001bc6b:	c1 ea 08             	shr    edx,0x8
c001bc6e:	83 e2 0f             	and    edx,0xf
c001bc71:	4a                   	dec    edx
c001bc72:	75 32                	jne    c001bca6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001bc74:	83 e0 0f             	and    eax,0xf
c001bc77:	83 f8 03             	cmp    eax,0x3
c001bc7a:	75 2a                	jne    c001bca6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001bc7c:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001bc7f:	b8 02 00 00 00       	mov    eax,0x2
c001bc84:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001bc8a:	74 1c                	je     c001bca8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001bc8c:	b8 04 00 00 00       	mov    eax,0x4
c001bc91:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001bc97:	74 0f                	je     c001bca8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001bc99:	31 c0                	xor    eax,eax
c001bc9b:	83 fa 03             	cmp    edx,0x3
c001bc9e:	0f 94 c0             	sete   al
c001bca1:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001bca5:	c3                   	ret    
c001bca6:	31 c0                	xor    eax,eax
c001bca8:	c3                   	ret    
c001bca9:	90                   	nop

c001bcaa <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001bcaa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bcae:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001bcb1:	0f ba e2 0f          	bt     edx,0xf
c001bcb5:	72 f7                	jb     c001bcae <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001bcb7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001bcba:	83 ca 10             	or     edx,0x10
c001bcbd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001bcc0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001bcc3:	83 ca 01             	or     edx,0x1
c001bcc6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001bcc9:	c3                   	ret    

c001bcca <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001bcca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bcce:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001bcd1:	83 e2 fe             	and    edx,0xfffffffe
c001bcd4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001bcd7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001bcda:	83 e2 ef             	and    edx,0xffffffef
c001bcdd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001bce0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001bce3:	0f ba e2 0e          	bt     edx,0xe
c001bce7:	72 f7                	jb     c001bce0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001bce9:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001bcec:	0f ba e2 0f          	bt     edx,0xf
c001bcf0:	72 ee                	jb     c001bce0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001bcf2:	c3                   	ret    
c001bcf3:	90                   	nop

c001bcf4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001bcf4:	55                   	push   ebp
c001bcf5:	57                   	push   edi
c001bcf6:	56                   	push   esi
c001bcf7:	53                   	push   ebx
c001bcf8:	83 ec 1c             	sub    esp,0x1c
c001bcfb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bcff:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001bd03:	53                   	push   ebx
c001bd04:	56                   	push   esi
c001bd05:	e8 c0 ff ff ff       	call   c001bcca <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001bd0a:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001bd0e:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001bd14:	83 ec 0c             	sub    esp,0xc
c001bd17:	c1 e5 0a             	shl    ebp,0xa
c001bd1a:	01 e8                	add    eax,ebp
c001bd1c:	89 03                	mov    DWORD PTR [ebx],eax
c001bd1e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bd20:	68 00 04 00 00       	push   0x400
c001bd25:	6a 00                	push   0x0
c001bd27:	50                   	push   eax
c001bd28:	e8 c3 47 fe ff       	call   c00004f0 <memset>
c001bd2d:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001bd33:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001bd37:	01 e8                	add    eax,ebp
c001bd39:	83 c4 1c             	add    esp,0x1c
c001bd3c:	89 03                	mov    DWORD PTR [ebx],eax
c001bd3e:	c1 e2 08             	shl    edx,0x8
c001bd41:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001bd48:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001bd4e:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001bd54:	01 f8                	add    eax,edi
c001bd56:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001bd59:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001bd5c:	68 00 01 00 00       	push   0x100
c001bd61:	6a 00                	push   0x0
c001bd63:	50                   	push   eax
c001bd64:	e8 87 47 fe ff       	call   c00004f0 <memset>
c001bd69:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001bd6f:	01 fa                	add    edx,edi
c001bd71:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001bd75:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001bd78:	c1 e7 0d             	shl    edi,0xd
c001bd7b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001bd82:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001bd88:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001bd8e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bd92:	31 ff                	xor    edi,edi
c001bd94:	83 c4 10             	add    esp,0x10
c001bd97:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001bd9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bda1:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001bda7:	83 c5 20             	add    ebp,0x20
c001bdaa:	01 f8                	add    eax,edi
c001bdac:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001bdaf:	52                   	push   edx
c001bdb0:	68 00 01 00 00       	push   0x100
c001bdb5:	6a 00                	push   0x0
c001bdb7:	50                   	push   eax
c001bdb8:	e8 33 47 fe ff       	call   c00004f0 <memset>
c001bdbd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bdc1:	83 c4 10             	add    esp,0x10
c001bdc4:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001bdca:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001bdd1:	01 f8                	add    eax,edi
c001bdd3:	81 c7 00 01 00 00    	add    edi,0x100
c001bdd9:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001bddc:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001bde2:	75 b3                	jne    c001bd97 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001bde4:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001bdeb:	50                   	push   eax
c001bdec:	50                   	push   eax
c001bded:	53                   	push   ebx
c001bdee:	56                   	push   esi
c001bdef:	e8 b6 fe ff ff       	call   c001bcaa <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001bdf4:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001bdfb:	83 c4 2c             	add    esp,0x2c
c001bdfe:	5b                   	pop    ebx
c001bdff:	5e                   	pop    esi
c001be00:	5f                   	pop    edi
c001be01:	5d                   	pop    ebp
c001be02:	c3                   	ret    
c001be03:	90                   	nop

c001be04 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001be04:	55                   	push   ebp
c001be05:	57                   	push   edi
c001be06:	56                   	push   esi
c001be07:	53                   	push   ebx
c001be08:	31 db                	xor    ebx,ebx
c001be0a:	83 ec 0c             	sub    esp,0xc
c001be0d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001be11:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001be15:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001be18:	f7 c7 01 00 00 00    	test   edi,0x1
c001be1e:	74 7a                	je     c001be9a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001be20:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001be24:	89 d8                	mov    eax,ebx
c001be26:	c1 e0 07             	shl    eax,0x7
c001be29:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001be30:	55                   	push   ebp
c001be31:	56                   	push   esi
c001be32:	e8 2b fe ff ff       	call   c001bc62 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001be37:	5a                   	pop    edx
c001be38:	83 f8 01             	cmp    eax,0x1
c001be3b:	59                   	pop    ecx
c001be3c:	75 21                	jne    c001be5f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001be3e:	50                   	push   eax
c001be3f:	53                   	push   ebx
c001be40:	55                   	push   ebp
c001be41:	56                   	push   esi
c001be42:	e8 ad fe ff ff       	call   c001bcf4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001be47:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001be4e:	e8 5b bc fe ff       	call   c0007aae <malloc>
c001be53:	89 c5                	mov    ebp,eax
c001be55:	89 04 24             	mov    DWORD PTR [esp],eax
c001be58:	e8 99 10 00 00       	call   c001cef6 <SATA::SATA()>
c001be5d:	eb 24                	jmp    c001be83 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001be5f:	83 f8 04             	cmp    eax,0x4
c001be62:	75 36                	jne    c001be9a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001be64:	51                   	push   ecx
c001be65:	53                   	push   ebx
c001be66:	55                   	push   ebp
c001be67:	56                   	push   esi
c001be68:	e8 87 fe ff ff       	call   c001bcf4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001be6d:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001be74:	e8 35 bc fe ff       	call   c0007aae <malloc>
c001be79:	89 c5                	mov    ebp,eax
c001be7b:	89 04 24             	mov    DWORD PTR [esp],eax
c001be7e:	e8 d5 17 00 00       	call   c001d658 <SATAPI::SATAPI()>
c001be83:	58                   	pop    eax
c001be84:	5a                   	pop    edx
c001be85:	55                   	push   ebp
c001be86:	56                   	push   esi
c001be87:	e8 b6 01 ff ff       	call   c000c042 <Device::addChild(Device*)>
c001be8c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001be8f:	56                   	push   esi
c001be90:	6a 00                	push   0x0
c001be92:	53                   	push   ebx
c001be93:	55                   	push   ebp
c001be94:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001be97:	83 c4 20             	add    esp,0x20
c001be9a:	d1 ef                	shr    edi,1
c001be9c:	43                   	inc    ebx
c001be9d:	83 fb 20             	cmp    ebx,0x20
c001bea0:	0f 85 72 ff ff ff    	jne    c001be18 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001bea6:	83 c4 0c             	add    esp,0xc
c001bea9:	5b                   	pop    ebx
c001beaa:	5e                   	pop    esi
c001beab:	5f                   	pop    edi
c001beac:	5d                   	pop    ebp
c001bead:	c3                   	ret    

c001beae <SATABus::open(int, int, void*)>:
c001beae:	83 ec 14             	sub    esp,0x14
c001beb1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001beb5:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001bebb:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001bec1:	52                   	push   edx
c001bec2:	50                   	push   eax
c001bec3:	e8 3c ff ff ff       	call   c001be04 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001bec8:	31 c0                	xor    eax,eax
c001beca:	83 c4 1c             	add    esp,0x1c
c001becd:	c3                   	ret    

c001bece <ATA::close(int, int, void*)>:
c001bece:	83 ec 0c             	sub    esp,0xc
c001bed1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bed5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001bedb:	85 c0                	test   eax,eax
c001bedd:	74 0c                	je     c001beeb <ATA::close(int, int, void*)+0x1d>
c001bedf:	83 ec 0c             	sub    esp,0xc
c001bee2:	8b 10                	mov    edx,DWORD PTR [eax]
c001bee4:	50                   	push   eax
c001bee5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001bee8:	83 c4 10             	add    esp,0x10
c001beeb:	31 c0                	xor    eax,eax
c001beed:	83 c4 0c             	add    esp,0xc
c001bef0:	c3                   	ret    
c001bef1:	90                   	nop

c001bef2 <ATA::powerSaving(PowerSavingLevel)>:
c001bef2:	c3                   	ret    
c001bef3:	90                   	nop

c001bef4 <ATA::ATA()>:
c001bef4:	83 ec 0c             	sub    esp,0xc
c001bef7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001befb:	83 ec 04             	sub    esp,0x4
c001befe:	68 00 02 00 00       	push   0x200
c001bf03:	68 51 25 02 c0       	push   0xc0022551
c001bf08:	50                   	push   eax
c001bf09:	e8 00 05 ff ff       	call   c000c40e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001bf0e:	83 c4 10             	add    esp,0x10
c001bf11:	ba c4 24 02 c0       	mov    edx,0xc00224c4
c001bf16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf1a:	89 10                	mov    DWORD PTR [eax],edx
c001bf1c:	90                   	nop
c001bf1d:	83 c4 0c             	add    esp,0xc
c001bf20:	c3                   	ret    
c001bf21:	90                   	nop

c001bf22 <ATA::flush(bool)>:
c001bf22:	53                   	push   ebx
c001bf23:	83 ec 08             	sub    esp,0x8
c001bf26:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bf2a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001bf2f:	83 f8 01             	cmp    eax,0x1
c001bf32:	19 c0                	sbb    eax,eax
c001bf34:	83 e0 fd             	and    eax,0xfffffffd
c001bf37:	05 ea 00 00 00       	add    eax,0xea
c001bf3c:	50                   	push   eax
c001bf3d:	6a 07                	push   0x7
c001bf3f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bf46:	50                   	push   eax
c001bf47:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bf4d:	e8 16 f1 ff ff       	call   c001b068 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf52:	83 c4 0c             	add    esp,0xc
c001bf55:	6a 00                	push   0x0
c001bf57:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bf5e:	50                   	push   eax
c001bf5f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bf65:	e8 e6 fb ff ff       	call   c001bb50 <IDE::polling(unsigned char, unsigned int)>
c001bf6a:	83 c4 18             	add    esp,0x18
c001bf6d:	5b                   	pop    ebx
c001bf6e:	c3                   	ret    
c001bf6f:	90                   	nop

c001bf70 <ATA::readyForCommand()>:
c001bf70:	56                   	push   esi
c001bf71:	53                   	push   ebx
c001bf72:	53                   	push   ebx
c001bf73:	31 db                	xor    ebx,ebx
c001bf75:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bf79:	51                   	push   ecx
c001bf7a:	6a 0c                	push   0xc
c001bf7c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bf83:	50                   	push   eax
c001bf84:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bf8a:	e8 99 f1 ff ff       	call   c001b128 <IDE::read(unsigned char, unsigned char)>
c001bf8f:	83 c4 10             	add    esp,0x10
c001bf92:	a8 88                	test   al,0x88
c001bf94:	74 1f                	je     c001bfb5 <ATA::readyForCommand()+0x45>
c001bf96:	43                   	inc    ebx
c001bf97:	83 fb 63             	cmp    ebx,0x63
c001bf9a:	7e dd                	jle    c001bf79 <ATA::readyForCommand()+0x9>
c001bf9c:	83 ec 0c             	sub    esp,0xc
c001bf9f:	6a 0a                	push   0xa
c001bfa1:	e8 96 97 ff ff       	call   c001573c <milliTenthSleep(unsigned int)>
c001bfa6:	83 c4 10             	add    esp,0x10
c001bfa9:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001bfaf:	75 c8                	jne    c001bf79 <ATA::readyForCommand()+0x9>
c001bfb1:	31 c0                	xor    eax,eax
c001bfb3:	eb 02                	jmp    c001bfb7 <ATA::readyForCommand()+0x47>
c001bfb5:	b0 01                	mov    al,0x1
c001bfb7:	5a                   	pop    edx
c001bfb8:	5b                   	pop    ebx
c001bfb9:	5e                   	pop    esi
c001bfba:	c3                   	ret    
c001bfbb:	90                   	nop

c001bfbc <ATA::access(unsigned long long, int, void*, bool)>:
c001bfbc:	55                   	push   ebp
c001bfbd:	57                   	push   edi
c001bfbe:	56                   	push   esi
c001bfbf:	53                   	push   ebx
c001bfc0:	83 ec 2c             	sub    esp,0x2c
c001bfc3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001bfc7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001bfcb:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001bfcf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bfd3:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001bfd7:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001bfdb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001bfdf:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001bfe5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bfe9:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001bfef:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bff3:	c1 e0 06             	shl    eax,0x6
c001bff6:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001bffe:	74 5d                	je     c001c05d <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001c000:	89 fa                	mov    edx,edi
c001c002:	89 f0                	mov    eax,esi
c001c004:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001c008:	c1 ea 1c             	shr    edx,0x1c
c001c00b:	89 d1                	mov    ecx,edx
c001c00d:	09 c1                	or     ecx,eax
c001c00f:	74 25                	je     c001c036 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001c011:	31 ed                	xor    ebp,ebp
c001c013:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001c01a:	89 fa                	mov    edx,edi
c001c01c:	89 f0                	mov    eax,esi
c001c01e:	0f ad d0             	shrd   eax,edx,cl
c001c021:	d3 ea                	shr    edx,cl
c001c023:	f6 c1 20             	test   cl,0x20
c001c026:	74 02                	je     c001c02a <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001c028:	89 d0                	mov    eax,edx
c001c02a:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001c02e:	45                   	inc    ebp
c001c02f:	83 fd 06             	cmp    ebp,0x6
c001c032:	75 df                	jne    c001c013 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001c034:	eb 76                	jmp    c001c0ac <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001c036:	89 f0                	mov    eax,esi
c001c038:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001c03d:	89 fa                	mov    edx,edi
c001c03f:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c046:	0f ac d0 10          	shrd   eax,edx,0x10
c001c04a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c04f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c053:	c1 ee 18             	shr    esi,0x18
c001c056:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001c05b:	eb 56                	jmp    c001c0b3 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c05d:	6a 00                	push   0x0
c001c05f:	6a 3f                	push   0x3f
c001c061:	57                   	push   edi
c001c062:	56                   	push   esi
c001c063:	e8 a8 2a 00 00       	call   c001eb10 <__umoddi3>
c001c068:	83 c4 10             	add    esp,0x10
c001c06b:	40                   	inc    eax
c001c06c:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001c070:	6a 00                	push   0x0
c001c072:	68 f0 03 00 00       	push   0x3f0
c001c077:	57                   	push   edi
c001c078:	56                   	push   esi
c001c079:	e8 92 29 00 00       	call   c001ea10 <__udivdi3>
c001c07e:	83 c4 10             	add    esp,0x10
c001c081:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001c086:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c08d:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c092:	6a 00                	push   0x0
c001c094:	6a 3f                	push   0x3f
c001c096:	57                   	push   edi
c001c097:	56                   	push   esi
c001c098:	e8 73 29 00 00       	call   c001ea10 <__udivdi3>
c001c09d:	83 c4 10             	add    esp,0x10
c001c0a0:	83 e0 0f             	and    eax,0xf
c001c0a3:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001c0a8:	89 c6                	mov    esi,eax
c001c0aa:	eb 07                	jmp    c001c0b3 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c0ac:	31 f6                	xor    esi,esi
c001c0ae:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001c0b3:	bf 01 00 00 00       	mov    edi,0x1
c001c0b8:	50                   	push   eax
c001c0b9:	6a 00                	push   0x0
c001c0bb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c0c2:	50                   	push   eax
c001c0c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c0c7:	e8 a4 f1 ff ff       	call   c001b270 <IDE::enableIRQs(unsigned char, bool)>
c001c0cc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c0cf:	e8 9c fe ff ff       	call   c001bf70 <ATA::readyForCommand()>
c001c0d4:	83 c4 10             	add    esp,0x10
c001c0d7:	84 c0                	test   al,al
c001c0d9:	0f 84 69 02 00 00    	je     c001c348 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001c0df:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001c0e5:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c0eb:	c1 e0 04             	shl    eax,0x4
c001c0ee:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001c0f5:	09 c6                	or     esi,eax
c001c0f7:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c001c0fc:	75 05                	jne    c001c103 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001c0fe:	83 ce a0             	or     esi,0xffffffa0
c001c101:	eb 03                	jmp    c001c106 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001c103:	83 ce e0             	or     esi,0xffffffe0
c001c106:	89 f0                	mov    eax,esi
c001c108:	0f b6 f0             	movzx  esi,al
c001c10b:	56                   	push   esi
c001c10c:	6a 06                	push   0x6
c001c10e:	51                   	push   ecx
c001c10f:	52                   	push   edx
c001c110:	e8 53 ef ff ff       	call   c001b068 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c115:	83 c4 10             	add    esp,0x10
c001c118:	6a 00                	push   0x0
c001c11a:	6a 01                	push   0x1
c001c11c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c123:	50                   	push   eax
c001c124:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c12a:	e8 39 ef ff ff       	call   c001b068 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c12f:	83 c4 10             	add    esp,0x10
c001c132:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001c137:	83 f8 02             	cmp    eax,0x2
c001c13a:	75 6e                	jne    c001c1aa <ATA::access(unsigned long long, int, void*, bool)+0x1ee>
c001c13c:	6a 00                	push   0x0
c001c13e:	6a 08                	push   0x8
c001c140:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c147:	50                   	push   eax
c001c148:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c14e:	e8 15 ef ff ff       	call   c001b068 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c153:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001c158:	50                   	push   eax
c001c159:	6a 09                	push   0x9
c001c15b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c162:	50                   	push   eax
c001c163:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c169:	e8 fa ee ff ff       	call   c001b068 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c16e:	83 c4 20             	add    esp,0x20
c001c171:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001c176:	50                   	push   eax
c001c177:	6a 0a                	push   0xa
c001c179:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c180:	50                   	push   eax
c001c181:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c187:	e8 dc ee ff ff       	call   c001b068 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c18c:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001c191:	50                   	push   eax
c001c192:	6a 0b                	push   0xb
c001c194:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c19b:	50                   	push   eax
c001c19c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c1a2:	e8 c1 ee ff ff       	call   c001b068 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c1a7:	83 c4 20             	add    esp,0x20
c001c1aa:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001c1af:	50                   	push   eax
c001c1b0:	6a 02                	push   0x2
c001c1b2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c1b9:	50                   	push   eax
c001c1ba:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c1c0:	e8 a3 ee ff ff       	call   c001b068 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c1c5:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001c1ca:	50                   	push   eax
c001c1cb:	6a 03                	push   0x3
c001c1cd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c1d4:	50                   	push   eax
c001c1d5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c1db:	e8 88 ee ff ff       	call   c001b068 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c1e0:	83 c4 20             	add    esp,0x20
c001c1e3:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001c1e8:	50                   	push   eax
c001c1e9:	6a 04                	push   0x4
c001c1eb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c1f2:	50                   	push   eax
c001c1f3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c1f9:	e8 6a ee ff ff       	call   c001b068 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c1fe:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c203:	50                   	push   eax
c001c204:	6a 05                	push   0x5
c001c206:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c20d:	50                   	push   eax
c001c20e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c214:	e8 4f ee ff ff       	call   c001b068 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c219:	83 c4 20             	add    esp,0x20
c001c21c:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001c221:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
c001c226:	74 11                	je     c001c239 <ATA::access(unsigned long long, int, void*, bool)+0x27d>
c001c228:	b8 30 00 00 00       	mov    eax,0x30
c001c22d:	83 fa 02             	cmp    edx,0x2
c001c230:	75 16                	jne    c001c248 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001c232:	b8 34 00 00 00       	mov    eax,0x34
c001c237:	eb 0f                	jmp    c001c248 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001c239:	b8 20 00 00 00       	mov    eax,0x20
c001c23e:	83 fa 02             	cmp    edx,0x2
c001c241:	75 05                	jne    c001c248 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001c243:	b8 24 00 00 00       	mov    eax,0x24
c001c248:	50                   	push   eax
c001c249:	6a 07                	push   0x7
c001c24b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c252:	50                   	push   eax
c001c253:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c259:	e8 0a ee ff ff       	call   c001b068 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c25e:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001c262:	83 c4 10             	add    esp,0x10
c001c265:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001c26a:	85 f6                	test   esi,esi
c001c26c:	0f 84 b3 00 00 00    	je     c001c325 <ATA::access(unsigned long long, int, void*, bool)+0x369>
c001c272:	50                   	push   eax
c001c273:	6a 01                	push   0x1
c001c275:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c27c:	50                   	push   eax
c001c27d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c283:	e8 c8 f8 ff ff       	call   c001bb50 <IDE::polling(unsigned char, unsigned int)>
c001c288:	83 c4 10             	add    esp,0x10
c001c28b:	0f b6 f8             	movzx  edi,al
c001c28e:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001c294:	85 ff                	test   edi,edi
c001c296:	74 1d                	je     c001c2b5 <ATA::access(unsigned long long, int, void*, bool)+0x2f9>
c001c298:	57                   	push   edi
c001c299:	0f b6 d2             	movzx  edx,dl
c001c29c:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001c2a3:	50                   	push   eax
c001c2a4:	52                   	push   edx
c001c2a5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c2ab:	e8 e6 f7 ff ff       	call   c001ba96 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001c2b0:	e9 90 00 00 00       	jmp    c001c345 <ATA::access(unsigned long long, int, void*, bool)+0x389>
c001c2b5:	85 ed                	test   ebp,ebp
c001c2b7:	74 3b                	je     c001c2f4 <ATA::access(unsigned long long, int, void*, bool)+0x338>
c001c2b9:	31 c9                	xor    ecx,ecx
c001c2bb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001c2bf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c2c3:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c001c2c7:	50                   	push   eax
c001c2c8:	50                   	push   eax
c001c2c9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c2d0:	50                   	push   eax
c001c2d1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c2d7:	e8 7a ed ff ff       	call   c001b056 <IDE::getBase(unsigned char)>
c001c2dc:	89 c2                	mov    edx,eax
c001c2de:	89 f8                	mov    eax,edi
c001c2e0:	66 ef                	out    dx,ax
c001c2e2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001c2e6:	83 c4 10             	add    esp,0x10
c001c2e9:	41                   	inc    ecx
c001c2ea:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001c2f0:	75 c9                	jne    c001c2bb <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c001c2f2:	eb 23                	jmp    c001c317 <ATA::access(unsigned long long, int, void*, bool)+0x35b>
c001c2f4:	0f b6 d2             	movzx  edx,dl
c001c2f7:	51                   	push   ecx
c001c2f8:	51                   	push   ecx
c001c2f9:	52                   	push   edx
c001c2fa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c300:	e8 51 ed ff ff       	call   c001b056 <IDE::getBase(unsigned char)>
c001c305:	b9 00 01 00 00       	mov    ecx,0x100
c001c30a:	89 c2                	mov    edx,eax
c001c30c:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001c310:	fc                   	cld    
c001c311:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001c314:	83 c4 10             	add    esp,0x10
c001c317:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001c31f:	4e                   	dec    esi
c001c320:	e9 45 ff ff ff       	jmp    c001c26a <ATA::access(unsigned long long, int, void*, bool)+0x2ae>
c001c325:	31 ff                	xor    edi,edi
c001c327:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001c32c:	74 1a                	je     c001c348 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001c32e:	50                   	push   eax
c001c32f:	50                   	push   eax
c001c330:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001c335:	83 f8 02             	cmp    eax,0x2
c001c338:	0f 94 c0             	sete   al
c001c33b:	0f b6 c0             	movzx  eax,al
c001c33e:	50                   	push   eax
c001c33f:	53                   	push   ebx
c001c340:	e8 dd fb ff ff       	call   c001bf22 <ATA::flush(bool)>
c001c345:	83 c4 10             	add    esp,0x10
c001c348:	83 c4 2c             	add    esp,0x2c
c001c34b:	89 f8                	mov    eax,edi
c001c34d:	5b                   	pop    ebx
c001c34e:	5e                   	pop    esi
c001c34f:	5f                   	pop    edi
c001c350:	5d                   	pop    ebp
c001c351:	c3                   	ret    

c001c352 <ATA::detectCHS()>:
c001c352:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c356:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001c35c:	c1 e0 06             	shl    eax,0x6
c001c35f:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001c365:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001c36f:	c7 44 24 04 a8 24 02 c0 	mov    DWORD PTR [esp+0x4],0xc00224a8
c001c377:	e9 1f 48 ff ff       	jmp    c0010b9b <KePanic(char const*)>

c001c37c <ATA::open(int, int, void*)>:
c001c37c:	53                   	push   ebx
c001c37d:	83 ec 08             	sub    esp,0x8
c001c380:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c384:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c388:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c38c:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001c392:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001c398:	c1 e0 06             	shl    eax,0x6
c001c39b:	01 d0                	add    eax,edx
c001c39d:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001c3a4:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001c3aa:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001c3b1:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001c3bb:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001c3c1:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001c3c8:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001c3cf:	75 0c                	jne    c001c3dd <ATA::open(int, int, void*)+0x61>
c001c3d1:	83 ec 0c             	sub    esp,0xc
c001c3d4:	53                   	push   ebx
c001c3d5:	e8 78 ff ff ff       	call   c001c352 <ATA::detectCHS()>
c001c3da:	83 c4 10             	add    esp,0x10
c001c3dd:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c3e3:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c3e9:	c1 e0 06             	shl    eax,0x6
c001c3ec:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001c3f3:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001c3fd:	d1 e8                	shr    eax,1
c001c3ff:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001c405:	6a 04                	push   0x4
c001c407:	6a 0c                	push   0xc
c001c409:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c410:	50                   	push   eax
c001c411:	52                   	push   edx
c001c412:	e8 51 ec ff ff       	call   c001b068 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c417:	90                   	nop
c001c418:	90                   	nop
c001c419:	6a 00                	push   0x0
c001c41b:	6a 0c                	push   0xc
c001c41d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c424:	50                   	push   eax
c001c425:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c42b:	e8 38 ec ff ff       	call   c001b068 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c430:	83 c4 14             	add    esp,0x14
c001c433:	53                   	push   ebx
c001c434:	e8 3d 00 ff ff       	call   c000c476 <PhysicalDisk::startCache()>
c001c439:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c43c:	e8 79 12 ff ff       	call   c000d6ba <createPartitionsForDisk(PhysicalDisk*)>
c001c441:	31 c0                	xor    eax,eax
c001c443:	83 c4 18             	add    esp,0x18
c001c446:	5b                   	pop    ebx
c001c447:	c3                   	ret    

c001c448 <combineCharAndColour(char, unsigned char)>:
c001c448:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c44d:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001c453:	c1 e0 08             	shl    eax,0x8
c001c456:	09 d0                	or     eax,edx
c001c458:	c3                   	ret    

c001c459 <combineColours(unsigned char, unsigned char)>:
c001c459:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c45e:	c1 e0 04             	shl    eax,0x4
c001c461:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001c465:	c3                   	ret    

c001c466 <ATA::read(unsigned long long, int, void*)>:
c001c466:	55                   	push   ebp
c001c467:	57                   	push   edi
c001c468:	56                   	push   esi
c001c469:	be 04 00 00 00       	mov    esi,0x4
c001c46e:	53                   	push   ebx
c001c46f:	83 ec 0c             	sub    esp,0xc
c001c472:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c476:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c47a:	8d 7b ff             	lea    edi,[ebx-0x1]
c001c47d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c481:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c485:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001c48b:	0f 87 a1 01 00 00    	ja     c001c632 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001c491:	be 06 00 00 00       	mov    esi,0x6
c001c496:	85 c9                	test   ecx,ecx
c001c498:	0f 84 94 01 00 00    	je     c001c632 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001c49e:	55                   	push   ebp
c001c49f:	55                   	push   ebp
c001c4a0:	6a 00                	push   0x0
c001c4a2:	51                   	push   ecx
c001c4a3:	53                   	push   ebx
c001c4a4:	52                   	push   edx
c001c4a5:	50                   	push   eax
c001c4a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c4aa:	e8 0d fb ff ff       	call   c001bfbc <ATA::access(unsigned long long, int, void*, bool)>
c001c4af:	83 c4 20             	add    esp,0x20
c001c4b2:	89 c6                	mov    esi,eax
c001c4b4:	85 c0                	test   eax,eax
c001c4b6:	0f 85 71 01 00 00    	jne    c001c62d <ATA::read(unsigned long long, int, void*)+0x1c7>
c001c4bc:	03 1d 54 9b 02 c0    	add    ebx,DWORD PTR ds:0xc0029b54
c001c4c2:	89 da                	mov    edx,ebx
c001c4c4:	50                   	push   eax
c001c4c5:	bd 10 27 00 00       	mov    ebp,0x2710
c001c4ca:	50                   	push   eax
c001c4cb:	89 1d 54 9b 02 c0    	mov    DWORD PTR ds:0xc0029b54,ebx
c001c4d1:	6a 0f                	push   0xf
c001c4d3:	6a 00                	push   0x0
c001c4d5:	e8 7f ff ff ff       	call   c001c459 <combineColours(unsigned char, unsigned char)>
c001c4da:	59                   	pop    ecx
c001c4db:	b9 0a 00 00 00       	mov    ecx,0xa
c001c4e0:	5b                   	pop    ebx
c001c4e1:	0f b6 d8             	movzx  ebx,al
c001c4e4:	89 d0                	mov    eax,edx
c001c4e6:	53                   	push   ebx
c001c4e7:	99                   	cdq    
c001c4e8:	f7 fd                	idiv   ebp
c001c4ea:	99                   	cdq    
c001c4eb:	f7 f9                	idiv   ecx
c001c4ed:	83 c2 30             	add    edx,0x30
c001c4f0:	0f b6 d2             	movzx  edx,dl
c001c4f3:	52                   	push   edx
c001c4f4:	e8 4f ff ff ff       	call   c001c448 <combineCharAndColour(char, unsigned char)>
c001c4f9:	5f                   	pop    edi
c001c4fa:	bf e8 03 00 00       	mov    edi,0x3e8
c001c4ff:	5a                   	pop    edx
c001c500:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c506:	53                   	push   ebx
c001c507:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001c50c:	99                   	cdq    
c001c50d:	f7 ff                	idiv   edi
c001c50f:	99                   	cdq    
c001c510:	f7 f9                	idiv   ecx
c001c512:	8d 42 30             	lea    eax,[edx+0x30]
c001c515:	0f b6 c0             	movzx  eax,al
c001c518:	50                   	push   eax
c001c519:	e8 2a ff ff ff       	call   c001c448 <combineCharAndColour(char, unsigned char)>
c001c51e:	5f                   	pop    edi
c001c51f:	bf 64 00 00 00       	mov    edi,0x64
c001c524:	5a                   	pop    edx
c001c525:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c52b:	53                   	push   ebx
c001c52c:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001c531:	99                   	cdq    
c001c532:	f7 ff                	idiv   edi
c001c534:	99                   	cdq    
c001c535:	f7 f9                	idiv   ecx
c001c537:	8d 42 30             	lea    eax,[edx+0x30]
c001c53a:	0f b6 c0             	movzx  eax,al
c001c53d:	50                   	push   eax
c001c53e:	e8 05 ff ff ff       	call   c001c448 <combineCharAndColour(char, unsigned char)>
c001c543:	5a                   	pop    edx
c001c544:	5a                   	pop    edx
c001c545:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c54b:	53                   	push   ebx
c001c54c:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001c551:	99                   	cdq    
c001c552:	f7 f9                	idiv   ecx
c001c554:	99                   	cdq    
c001c555:	f7 f9                	idiv   ecx
c001c557:	8d 42 30             	lea    eax,[edx+0x30]
c001c55a:	0f b6 c0             	movzx  eax,al
c001c55d:	50                   	push   eax
c001c55e:	e8 e5 fe ff ff       	call   c001c448 <combineCharAndColour(char, unsigned char)>
c001c563:	5a                   	pop    edx
c001c564:	5a                   	pop    edx
c001c565:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c56b:	53                   	push   ebx
c001c56c:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001c571:	99                   	cdq    
c001c572:	f7 f9                	idiv   ecx
c001c574:	83 c2 30             	add    edx,0x30
c001c577:	0f b6 d2             	movzx  edx,dl
c001c57a:	52                   	push   edx
c001c57b:	e8 c8 fe ff ff       	call   c001c448 <combineCharAndColour(char, unsigned char)>
c001c580:	5a                   	pop    edx
c001c581:	5a                   	pop    edx
c001c582:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c588:	53                   	push   ebx
c001c589:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001c58e:	99                   	cdq    
c001c58f:	f7 fd                	idiv   ebp
c001c591:	99                   	cdq    
c001c592:	f7 f9                	idiv   ecx
c001c594:	8d 42 30             	lea    eax,[edx+0x30]
c001c597:	0f b6 c0             	movzx  eax,al
c001c59a:	50                   	push   eax
c001c59b:	e8 a8 fe ff ff       	call   c001c448 <combineCharAndColour(char, unsigned char)>
c001c5a0:	5d                   	pop    ebp
c001c5a1:	bd e8 03 00 00       	mov    ebp,0x3e8
c001c5a6:	5a                   	pop    edx
c001c5a7:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c5ad:	53                   	push   ebx
c001c5ae:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001c5b3:	99                   	cdq    
c001c5b4:	f7 fd                	idiv   ebp
c001c5b6:	99                   	cdq    
c001c5b7:	f7 f9                	idiv   ecx
c001c5b9:	8d 42 30             	lea    eax,[edx+0x30]
c001c5bc:	0f b6 c0             	movzx  eax,al
c001c5bf:	50                   	push   eax
c001c5c0:	e8 83 fe ff ff       	call   c001c448 <combineCharAndColour(char, unsigned char)>
c001c5c5:	5d                   	pop    ebp
c001c5c6:	5a                   	pop    edx
c001c5c7:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c5cd:	53                   	push   ebx
c001c5ce:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001c5d3:	99                   	cdq    
c001c5d4:	f7 ff                	idiv   edi
c001c5d6:	99                   	cdq    
c001c5d7:	f7 f9                	idiv   ecx
c001c5d9:	8d 42 30             	lea    eax,[edx+0x30]
c001c5dc:	0f b6 c0             	movzx  eax,al
c001c5df:	50                   	push   eax
c001c5e0:	e8 63 fe ff ff       	call   c001c448 <combineCharAndColour(char, unsigned char)>
c001c5e5:	5f                   	pop    edi
c001c5e6:	5d                   	pop    ebp
c001c5e7:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c5ed:	53                   	push   ebx
c001c5ee:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001c5f3:	99                   	cdq    
c001c5f4:	f7 f9                	idiv   ecx
c001c5f6:	99                   	cdq    
c001c5f7:	f7 f9                	idiv   ecx
c001c5f9:	8d 42 30             	lea    eax,[edx+0x30]
c001c5fc:	0f b6 c0             	movzx  eax,al
c001c5ff:	50                   	push   eax
c001c600:	e8 43 fe ff ff       	call   c001c448 <combineCharAndColour(char, unsigned char)>
c001c605:	5a                   	pop    edx
c001c606:	5f                   	pop    edi
c001c607:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c60d:	53                   	push   ebx
c001c60e:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001c613:	99                   	cdq    
c001c614:	f7 f9                	idiv   ecx
c001c616:	83 c2 30             	add    edx,0x30
c001c619:	0f b6 d2             	movzx  edx,dl
c001c61c:	52                   	push   edx
c001c61d:	e8 26 fe ff ff       	call   c001c448 <combineCharAndColour(char, unsigned char)>
c001c622:	83 c4 10             	add    esp,0x10
c001c625:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c62b:	eb 05                	jmp    c001c632 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001c62d:	be 01 00 00 00       	mov    esi,0x1
c001c632:	83 c4 0c             	add    esp,0xc
c001c635:	89 f0                	mov    eax,esi
c001c637:	5b                   	pop    ebx
c001c638:	5e                   	pop    esi
c001c639:	5f                   	pop    edi
c001c63a:	5d                   	pop    ebp
c001c63b:	c3                   	ret    

c001c63c <ATA::write(unsigned long long, int, void*)>:
c001c63c:	55                   	push   ebp
c001c63d:	57                   	push   edi
c001c63e:	56                   	push   esi
c001c63f:	be 04 00 00 00       	mov    esi,0x4
c001c644:	53                   	push   ebx
c001c645:	83 ec 0c             	sub    esp,0xc
c001c648:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c64c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c650:	8d 7b ff             	lea    edi,[ebx-0x1]
c001c653:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c657:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c65b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001c661:	0f 87 9c 01 00 00    	ja     c001c803 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001c667:	be 06 00 00 00       	mov    esi,0x6
c001c66c:	85 c9                	test   ecx,ecx
c001c66e:	0f 84 8f 01 00 00    	je     c001c803 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001c674:	55                   	push   ebp
c001c675:	55                   	push   ebp
c001c676:	6a 01                	push   0x1
c001c678:	51                   	push   ecx
c001c679:	53                   	push   ebx
c001c67a:	52                   	push   edx
c001c67b:	50                   	push   eax
c001c67c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c680:	e8 37 f9 ff ff       	call   c001bfbc <ATA::access(unsigned long long, int, void*, bool)>
c001c685:	83 c4 20             	add    esp,0x20
c001c688:	89 c6                	mov    esi,eax
c001c68a:	85 c0                	test   eax,eax
c001c68c:	0f 85 6c 01 00 00    	jne    c001c7fe <ATA::write(unsigned long long, int, void*)+0x1c2>
c001c692:	01 1d 50 9b 02 c0    	add    DWORD PTR ds:0xc0029b50,ebx
c001c698:	bd 10 27 00 00       	mov    ebp,0x2710
c001c69d:	50                   	push   eax
c001c69e:	50                   	push   eax
c001c69f:	6a 0f                	push   0xf
c001c6a1:	6a 00                	push   0x0
c001c6a3:	e8 b1 fd ff ff       	call   c001c459 <combineColours(unsigned char, unsigned char)>
c001c6a8:	5a                   	pop    edx
c001c6a9:	0f b6 d8             	movzx  ebx,al
c001c6ac:	59                   	pop    ecx
c001c6ad:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001c6b2:	53                   	push   ebx
c001c6b3:	b9 0a 00 00 00       	mov    ecx,0xa
c001c6b8:	99                   	cdq    
c001c6b9:	f7 fd                	idiv   ebp
c001c6bb:	99                   	cdq    
c001c6bc:	f7 f9                	idiv   ecx
c001c6be:	8d 42 30             	lea    eax,[edx+0x30]
c001c6c1:	0f b6 c0             	movzx  eax,al
c001c6c4:	50                   	push   eax
c001c6c5:	e8 7e fd ff ff       	call   c001c448 <combineCharAndColour(char, unsigned char)>
c001c6ca:	5f                   	pop    edi
c001c6cb:	bf e8 03 00 00       	mov    edi,0x3e8
c001c6d0:	5a                   	pop    edx
c001c6d1:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c6d7:	53                   	push   ebx
c001c6d8:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001c6dd:	99                   	cdq    
c001c6de:	f7 ff                	idiv   edi
c001c6e0:	99                   	cdq    
c001c6e1:	f7 f9                	idiv   ecx
c001c6e3:	8d 42 30             	lea    eax,[edx+0x30]
c001c6e6:	0f b6 c0             	movzx  eax,al
c001c6e9:	50                   	push   eax
c001c6ea:	e8 59 fd ff ff       	call   c001c448 <combineCharAndColour(char, unsigned char)>
c001c6ef:	5f                   	pop    edi
c001c6f0:	bf 64 00 00 00       	mov    edi,0x64
c001c6f5:	5a                   	pop    edx
c001c6f6:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c6fc:	53                   	push   ebx
c001c6fd:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001c702:	99                   	cdq    
c001c703:	f7 ff                	idiv   edi
c001c705:	99                   	cdq    
c001c706:	f7 f9                	idiv   ecx
c001c708:	8d 42 30             	lea    eax,[edx+0x30]
c001c70b:	0f b6 c0             	movzx  eax,al
c001c70e:	50                   	push   eax
c001c70f:	e8 34 fd ff ff       	call   c001c448 <combineCharAndColour(char, unsigned char)>
c001c714:	5a                   	pop    edx
c001c715:	5a                   	pop    edx
c001c716:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c71c:	53                   	push   ebx
c001c71d:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001c722:	99                   	cdq    
c001c723:	f7 f9                	idiv   ecx
c001c725:	99                   	cdq    
c001c726:	f7 f9                	idiv   ecx
c001c728:	8d 42 30             	lea    eax,[edx+0x30]
c001c72b:	0f b6 c0             	movzx  eax,al
c001c72e:	50                   	push   eax
c001c72f:	e8 14 fd ff ff       	call   c001c448 <combineCharAndColour(char, unsigned char)>
c001c734:	5a                   	pop    edx
c001c735:	5a                   	pop    edx
c001c736:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c73c:	53                   	push   ebx
c001c73d:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001c742:	99                   	cdq    
c001c743:	f7 f9                	idiv   ecx
c001c745:	8d 42 30             	lea    eax,[edx+0x30]
c001c748:	0f b6 c0             	movzx  eax,al
c001c74b:	50                   	push   eax
c001c74c:	e8 f7 fc ff ff       	call   c001c448 <combineCharAndColour(char, unsigned char)>
c001c751:	5a                   	pop    edx
c001c752:	5a                   	pop    edx
c001c753:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c759:	53                   	push   ebx
c001c75a:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001c75f:	99                   	cdq    
c001c760:	f7 fd                	idiv   ebp
c001c762:	99                   	cdq    
c001c763:	f7 f9                	idiv   ecx
c001c765:	8d 42 30             	lea    eax,[edx+0x30]
c001c768:	0f b6 c0             	movzx  eax,al
c001c76b:	50                   	push   eax
c001c76c:	e8 d7 fc ff ff       	call   c001c448 <combineCharAndColour(char, unsigned char)>
c001c771:	5d                   	pop    ebp
c001c772:	bd e8 03 00 00       	mov    ebp,0x3e8
c001c777:	5a                   	pop    edx
c001c778:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c77e:	53                   	push   ebx
c001c77f:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001c784:	99                   	cdq    
c001c785:	f7 fd                	idiv   ebp
c001c787:	99                   	cdq    
c001c788:	f7 f9                	idiv   ecx
c001c78a:	8d 42 30             	lea    eax,[edx+0x30]
c001c78d:	0f b6 c0             	movzx  eax,al
c001c790:	50                   	push   eax
c001c791:	e8 b2 fc ff ff       	call   c001c448 <combineCharAndColour(char, unsigned char)>
c001c796:	5d                   	pop    ebp
c001c797:	5a                   	pop    edx
c001c798:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c79e:	53                   	push   ebx
c001c79f:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001c7a4:	99                   	cdq    
c001c7a5:	f7 ff                	idiv   edi
c001c7a7:	99                   	cdq    
c001c7a8:	f7 f9                	idiv   ecx
c001c7aa:	8d 42 30             	lea    eax,[edx+0x30]
c001c7ad:	0f b6 c0             	movzx  eax,al
c001c7b0:	50                   	push   eax
c001c7b1:	e8 92 fc ff ff       	call   c001c448 <combineCharAndColour(char, unsigned char)>
c001c7b6:	5f                   	pop    edi
c001c7b7:	5d                   	pop    ebp
c001c7b8:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c7be:	53                   	push   ebx
c001c7bf:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001c7c4:	99                   	cdq    
c001c7c5:	f7 f9                	idiv   ecx
c001c7c7:	99                   	cdq    
c001c7c8:	f7 f9                	idiv   ecx
c001c7ca:	8d 42 30             	lea    eax,[edx+0x30]
c001c7cd:	0f b6 c0             	movzx  eax,al
c001c7d0:	50                   	push   eax
c001c7d1:	e8 72 fc ff ff       	call   c001c448 <combineCharAndColour(char, unsigned char)>
c001c7d6:	5a                   	pop    edx
c001c7d7:	5f                   	pop    edi
c001c7d8:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c7de:	53                   	push   ebx
c001c7df:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001c7e4:	99                   	cdq    
c001c7e5:	f7 f9                	idiv   ecx
c001c7e7:	83 c2 30             	add    edx,0x30
c001c7ea:	0f b6 d2             	movzx  edx,dl
c001c7ed:	52                   	push   edx
c001c7ee:	e8 55 fc ff ff       	call   c001c448 <combineCharAndColour(char, unsigned char)>
c001c7f3:	83 c4 10             	add    esp,0x10
c001c7f6:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c7fc:	eb 05                	jmp    c001c803 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001c7fe:	be 01 00 00 00       	mov    esi,0x1
c001c803:	83 c4 0c             	add    esp,0xc
c001c806:	89 f0                	mov    eax,esi
c001c808:	5b                   	pop    ebx
c001c809:	5e                   	pop    esi
c001c80a:	5f                   	pop    edi
c001c80b:	5d                   	pop    ebp
c001c80c:	c3                   	ret    
c001c80d:	90                   	nop

c001c80e <ATAPI::write(unsigned long long, int, void*)>:
c001c80e:	b8 03 00 00 00       	mov    eax,0x3
c001c813:	c3                   	ret    

c001c814 <ATAPI::close(int, int, void*)>:
c001c814:	83 ec 0c             	sub    esp,0xc
c001c817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c81b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c821:	85 c0                	test   eax,eax
c001c823:	74 0c                	je     c001c831 <ATAPI::close(int, int, void*)+0x1d>
c001c825:	83 ec 0c             	sub    esp,0xc
c001c828:	8b 10                	mov    edx,DWORD PTR [eax]
c001c82a:	50                   	push   eax
c001c82b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c82e:	83 c4 10             	add    esp,0x10
c001c831:	31 c0                	xor    eax,eax
c001c833:	83 c4 0c             	add    esp,0xc
c001c836:	c3                   	ret    
c001c837:	90                   	nop

c001c838 <ATAPI::ATAPI()>:
c001c838:	83 ec 0c             	sub    esp,0xc
c001c83b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c83f:	83 ec 04             	sub    esp,0x4
c001c842:	68 00 08 00 00       	push   0x800
c001c847:	68 f1 25 02 c0       	push   0xc00225f1
c001c84c:	50                   	push   eax
c001c84d:	e8 bc fb fe ff       	call   c000c40e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c852:	83 c4 10             	add    esp,0x10
c001c855:	ba 0c 25 02 c0       	mov    edx,0xc002250c
c001c85a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c85e:	89 10                	mov    DWORD PTR [eax],edx
c001c860:	90                   	nop
c001c861:	83 c4 0c             	add    esp,0xc
c001c864:	c3                   	ret    
c001c865:	90                   	nop

c001c866 <ATAPI::readyForCommand()>:
c001c866:	56                   	push   esi
c001c867:	53                   	push   ebx
c001c868:	53                   	push   ebx
c001c869:	31 db                	xor    ebx,ebx
c001c86b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c86f:	51                   	push   ecx
c001c870:	6a 0c                	push   0xc
c001c872:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c879:	50                   	push   eax
c001c87a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c880:	e8 a3 e8 ff ff       	call   c001b128 <IDE::read(unsigned char, unsigned char)>
c001c885:	83 c4 10             	add    esp,0x10
c001c888:	a8 88                	test   al,0x88
c001c88a:	74 25                	je     c001c8b1 <ATAPI::readyForCommand()+0x4b>
c001c88c:	43                   	inc    ebx
c001c88d:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001c893:	7e da                	jle    c001c86f <ATAPI::readyForCommand()+0x9>
c001c895:	83 ec 0c             	sub    esp,0xc
c001c898:	68 5e 01 00 00       	push   0x15e
c001c89d:	e8 9a 8e ff ff       	call   c001573c <milliTenthSleep(unsigned int)>
c001c8a2:	83 c4 10             	add    esp,0x10
c001c8a5:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001c8ab:	75 c2                	jne    c001c86f <ATAPI::readyForCommand()+0x9>
c001c8ad:	31 c0                	xor    eax,eax
c001c8af:	eb 02                	jmp    c001c8b3 <ATAPI::readyForCommand()+0x4d>
c001c8b1:	b0 01                	mov    al,0x1
c001c8b3:	5a                   	pop    edx
c001c8b4:	5b                   	pop    ebx
c001c8b5:	5e                   	pop    esi
c001c8b6:	c3                   	ret    
c001c8b7:	90                   	nop

c001c8b8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001c8b8:	55                   	push   ebp
c001c8b9:	57                   	push   edi
c001c8ba:	56                   	push   esi
c001c8bb:	53                   	push   ebx
c001c8bc:	83 ec 20             	sub    esp,0x20
c001c8bf:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001c8c3:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001c8c7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001c8cb:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c8cf:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001c8d3:	6a 01                	push   0x1
c001c8d5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c8dc:	50                   	push   eax
c001c8dd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c8e3:	e8 88 e9 ff ff       	call   c001b270 <IDE::enableIRQs(unsigned char, bool)>
c001c8e8:	5e                   	pop    esi
c001c8e9:	58                   	pop    eax
c001c8ea:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c8f1:	50                   	push   eax
c001c8f2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c8f8:	e8 45 e7 ff ff       	call   c001b042 <IDE::prepareInterrupt(unsigned char)>
c001c8fd:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c900:	e8 61 ff ff ff       	call   c001c866 <ATAPI::readyForCommand()>
c001c905:	83 c4 10             	add    esp,0x10
c001c908:	84 c0                	test   al,al
c001c90a:	75 0a                	jne    c001c916 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001c90c:	bb 01 00 00 00       	mov    ebx,0x1
c001c911:	e9 60 02 00 00       	jmp    c001cb76 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001c916:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001c91c:	c1 e0 04             	shl    eax,0x4
c001c91f:	0f b6 c0             	movzx  eax,al
c001c922:	50                   	push   eax
c001c923:	6a 06                	push   0x6
c001c925:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c92c:	50                   	push   eax
c001c92d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c933:	e8 30 e7 ff ff       	call   c001b068 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c938:	6a 00                	push   0x0
c001c93a:	6a 01                	push   0x1
c001c93c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c943:	50                   	push   eax
c001c944:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c94a:	e8 19 e7 ff ff       	call   c001b068 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c94f:	83 c4 20             	add    esp,0x20
c001c952:	0f b6 c3             	movzx  eax,bl
c001c955:	0f b6 df             	movzx  ebx,bh
c001c958:	50                   	push   eax
c001c959:	6a 04                	push   0x4
c001c95b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c962:	50                   	push   eax
c001c963:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c969:	e8 fa e6 ff ff       	call   c001b068 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c96e:	53                   	push   ebx
c001c96f:	6a 05                	push   0x5
c001c971:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c978:	50                   	push   eax
c001c979:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c97f:	e8 e4 e6 ff ff       	call   c001b068 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c984:	83 c4 20             	add    esp,0x20
c001c987:	68 a0 00 00 00       	push   0xa0
c001c98c:	6a 07                	push   0x7
c001c98e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c995:	50                   	push   eax
c001c996:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c99c:	e8 c7 e6 ff ff       	call   c001b068 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9a1:	83 c4 0c             	add    esp,0xc
c001c9a4:	6a 01                	push   0x1
c001c9a6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c9ad:	50                   	push   eax
c001c9ae:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c9b4:	e8 97 f1 ff ff       	call   c001bb50 <IDE::polling(unsigned char, unsigned int)>
c001c9b9:	83 c4 10             	add    esp,0x10
c001c9bc:	0f b6 d8             	movzx  ebx,al
c001c9bf:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001c9c5:	85 db                	test   ebx,ebx
c001c9c7:	74 20                	je     c001c9e9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001c9c9:	53                   	push   ebx
c001c9ca:	0f b6 c0             	movzx  eax,al
c001c9cd:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001c9d4:	52                   	push   edx
c001c9d5:	50                   	push   eax
c001c9d6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c9dc:	e8 b5 f0 ff ff       	call   c001ba96 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001c9e1:	83 c4 10             	add    esp,0x10
c001c9e4:	e9 8d 01 00 00       	jmp    c001cb76 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001c9e9:	0f b6 c0             	movzx  eax,al
c001c9ec:	53                   	push   ebx
c001c9ed:	53                   	push   ebx
c001c9ee:	50                   	push   eax
c001c9ef:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c9f5:	e8 5c e6 ff ff       	call   c001b056 <IDE::getBase(unsigned char)>
c001c9fa:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c9fe:	b9 06 00 00 00       	mov    ecx,0x6
c001ca03:	89 c2                	mov    edx,eax
c001ca05:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001ca08:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001ca0c:	83 c4 10             	add    esp,0x10
c001ca0f:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001ca14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ca18:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001ca1e:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001ca25:	85 db                	test   ebx,ebx
c001ca27:	0f 84 ec 00 00 00    	je     c001cb19 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c001ca2d:	51                   	push   ecx
c001ca2e:	51                   	push   ecx
c001ca2f:	52                   	push   edx
c001ca30:	50                   	push   eax
c001ca31:	e8 a0 e7 ff ff       	call   c001b1d6 <IDE::waitInterrupt(unsigned char)>
c001ca36:	83 c4 10             	add    esp,0x10
c001ca39:	84 c0                	test   al,al
c001ca3b:	0f 84 cb fe ff ff    	je     c001c90c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001ca41:	56                   	push   esi
c001ca42:	56                   	push   esi
c001ca43:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ca4a:	50                   	push   eax
c001ca4b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ca51:	e8 ec e5 ff ff       	call   c001b042 <IDE::prepareInterrupt(unsigned char)>
c001ca56:	83 c4 0c             	add    esp,0xc
c001ca59:	6a 04                	push   0x4
c001ca5b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ca62:	50                   	push   eax
c001ca63:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ca69:	e8 ba e6 ff ff       	call   c001b128 <IDE::read(unsigned char, unsigned char)>
c001ca6e:	83 c4 0c             	add    esp,0xc
c001ca71:	89 c6                	mov    esi,eax
c001ca73:	6a 05                	push   0x5
c001ca75:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ca7c:	50                   	push   eax
c001ca7d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ca83:	e8 a0 e6 ff ff       	call   c001b128 <IDE::read(unsigned char, unsigned char)>
c001ca88:	89 f1                	mov    ecx,esi
c001ca8a:	0f b6 c0             	movzx  eax,al
c001ca8d:	0f b6 f1             	movzx  esi,cl
c001ca90:	c1 e0 08             	shl    eax,0x8
c001ca93:	09 c6                	or     esi,eax
c001ca95:	d1 fe                	sar    esi,1
c001ca97:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001ca9b:	83 c4 10             	add    esp,0x10
c001ca9e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001caa3:	74 41                	je     c001cae6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c001caa5:	31 c9                	xor    ecx,ecx
c001caa7:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001caad:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001cab4:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001cab8:	75 0a                	jne    c001cac4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c001caba:	01 c9                	add    ecx,ecx
c001cabc:	01 cd                	add    ebp,ecx
c001cabe:	4b                   	dec    ebx
c001cabf:	e9 54 ff ff ff       	jmp    c001ca18 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c001cac4:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001cac9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001cacd:	51                   	push   ecx
c001cace:	51                   	push   ecx
c001cacf:	52                   	push   edx
c001cad0:	50                   	push   eax
c001cad1:	e8 80 e5 ff ff       	call   c001b056 <IDE::getBase(unsigned char)>
c001cad6:	89 c2                	mov    edx,eax
c001cad8:	89 f0                	mov    eax,esi
c001cada:	66 ef                	out    dx,ax
c001cadc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cae0:	83 c4 10             	add    esp,0x10
c001cae3:	41                   	inc    ecx
c001cae4:	eb c1                	jmp    c001caa7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c001cae6:	31 f6                	xor    esi,esi
c001cae8:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001caee:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001caf5:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001caf9:	75 06                	jne    c001cb01 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c001cafb:	01 f6                	add    esi,esi
c001cafd:	01 f5                	add    ebp,esi
c001caff:	eb bd                	jmp    c001cabe <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c001cb01:	51                   	push   ecx
c001cb02:	51                   	push   ecx
c001cb03:	52                   	push   edx
c001cb04:	50                   	push   eax
c001cb05:	e8 4c e5 ff ff       	call   c001b056 <IDE::getBase(unsigned char)>
c001cb0a:	89 c2                	mov    edx,eax
c001cb0c:	66 ed                	in     ax,dx
c001cb0e:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001cb13:	83 c4 10             	add    esp,0x10
c001cb16:	46                   	inc    esi
c001cb17:	eb cf                	jmp    c001cae8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c001cb19:	51                   	push   ecx
c001cb1a:	51                   	push   ecx
c001cb1b:	52                   	push   edx
c001cb1c:	50                   	push   eax
c001cb1d:	e8 b4 e6 ff ff       	call   c001b1d6 <IDE::waitInterrupt(unsigned char)>
c001cb22:	83 c4 10             	add    esp,0x10
c001cb25:	84 c0                	test   al,al
c001cb27:	0f 84 df fd ff ff    	je     c001c90c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001cb2d:	bb a0 86 01 00       	mov    ebx,0x186a0
c001cb32:	52                   	push   edx
c001cb33:	52                   	push   edx
c001cb34:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cb3b:	50                   	push   eax
c001cb3c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cb42:	e8 fb e4 ff ff       	call   c001b042 <IDE::prepareInterrupt(unsigned char)>
c001cb47:	83 c4 10             	add    esp,0x10
c001cb4a:	50                   	push   eax
c001cb4b:	50                   	push   eax
c001cb4c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cb53:	50                   	push   eax
c001cb54:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cb5a:	e8 f7 e4 ff ff       	call   c001b056 <IDE::getBase(unsigned char)>
c001cb5f:	8d 50 07             	lea    edx,[eax+0x7]
c001cb62:	ec                   	in     al,dx
c001cb63:	83 c4 10             	add    esp,0x10
c001cb66:	a8 88                	test   al,0x88
c001cb68:	74 0a                	je     c001cb74 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c001cb6a:	4b                   	dec    ebx
c001cb6b:	75 dd                	jne    c001cb4a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c001cb6d:	bb 02 00 00 00       	mov    ebx,0x2
c001cb72:	eb 02                	jmp    c001cb76 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001cb74:	31 db                	xor    ebx,ebx
c001cb76:	83 c4 1c             	add    esp,0x1c
c001cb79:	89 d8                	mov    eax,ebx
c001cb7b:	5b                   	pop    ebx
c001cb7c:	5e                   	pop    esi
c001cb7d:	5f                   	pop    edi
c001cb7e:	5d                   	pop    ebp
c001cb7f:	c3                   	ret    

c001cb80 <ATAPI::diskRemoved()>:
c001cb80:	53                   	push   ebx
c001cb81:	83 ec 14             	sub    esp,0x14
c001cb84:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001cb88:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001cb8f:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001cb95:	e8 10 08 ff ff       	call   c000d3aa <LogicalDisk::unmount()>
c001cb9a:	58                   	pop    eax
c001cb9b:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001cba1:	e8 e6 11 ff ff       	call   c000dd8c <VCache::writeWriteBuffer()>
c001cba6:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001cbac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cbb0:	83 c4 18             	add    esp,0x18
c001cbb3:	5b                   	pop    ebx
c001cbb4:	e9 c3 11 ff ff       	jmp    c000dd7c <VCache::invalidateReadBuffer()>
c001cbb9:	90                   	nop

c001cbba <ATAPI::eject()>:
c001cbba:	57                   	push   edi
c001cbbb:	b9 03 00 00 00       	mov    ecx,0x3
c001cbc0:	53                   	push   ebx
c001cbc1:	83 ec 14             	sub    esp,0x14
c001cbc4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cbc8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001cbcc:	fc                   	cld    
c001cbcd:	31 c0                	xor    eax,eax
c001cbcf:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001cbd1:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001cbd6:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001cbdb:	50                   	push   eax
c001cbdc:	50                   	push   eax
c001cbdd:	6a 00                	push   0x0
c001cbdf:	6a 00                	push   0x0
c001cbe1:	6a 00                	push   0x0
c001cbe3:	6a 02                	push   0x2
c001cbe5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cbe9:	50                   	push   eax
c001cbea:	53                   	push   ebx
c001cbeb:	e8 c8 fc ff ff       	call   c001c8b8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001cbf0:	83 c4 14             	add    esp,0x14
c001cbf3:	53                   	push   ebx
c001cbf4:	e8 87 ff ff ff       	call   c001cb80 <ATAPI::diskRemoved()>
c001cbf9:	83 c4 24             	add    esp,0x24
c001cbfc:	31 c0                	xor    eax,eax
c001cbfe:	5b                   	pop    ebx
c001cbff:	5f                   	pop    edi
c001cc00:	c3                   	ret    
c001cc01:	90                   	nop

c001cc02 <ATAPI::diskInserted()>:
c001cc02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cc06:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001cc0d:	c3                   	ret    

c001cc0e <ATAPI::detectMedia()>:
c001cc0e:	56                   	push   esi
c001cc0f:	53                   	push   ebx
c001cc10:	83 ec 28             	sub    esp,0x28
c001cc13:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001cc17:	6a 0c                	push   0xc
c001cc19:	6a 00                	push   0x0
c001cc1b:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001cc1f:	56                   	push   esi
c001cc20:	e8 cb 38 fe ff       	call   c00004f0 <memset>
c001cc25:	58                   	pop    eax
c001cc26:	5a                   	pop    edx
c001cc27:	6a 00                	push   0x0
c001cc29:	6a 00                	push   0x0
c001cc2b:	6a 00                	push   0x0
c001cc2d:	6a 00                	push   0x0
c001cc2f:	56                   	push   esi
c001cc30:	53                   	push   ebx
c001cc31:	e8 82 fc ff ff       	call   c001c8b8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001cc36:	83 c4 1c             	add    esp,0x1c
c001cc39:	6a 0c                	push   0xc
c001cc3b:	6a 00                	push   0x0
c001cc3d:	56                   	push   esi
c001cc3e:	e8 ad 38 fe ff       	call   c00004f0 <memset>
c001cc43:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001cc48:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001cc4d:	59                   	pop    ecx
c001cc4e:	58                   	pop    eax
c001cc4f:	6a 01                	push   0x1
c001cc51:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001cc55:	50                   	push   eax
c001cc56:	6a 00                	push   0x0
c001cc58:	6a 12                	push   0x12
c001cc5a:	56                   	push   esi
c001cc5b:	53                   	push   ebx
c001cc5c:	e8 57 fc ff ff       	call   c001c8b8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001cc61:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001cc65:	83 c4 20             	add    esp,0x20
c001cc68:	83 e0 7f             	and    eax,0x7f
c001cc6b:	83 f8 70             	cmp    eax,0x70
c001cc6e:	74 15                	je     c001cc85 <ATAPI::detectMedia()+0x77>
c001cc70:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001cc77:	75 0c                	jne    c001cc85 <ATAPI::detectMedia()+0x77>
c001cc79:	83 ec 0c             	sub    esp,0xc
c001cc7c:	53                   	push   ebx
c001cc7d:	e8 80 ff ff ff       	call   c001cc02 <ATAPI::diskInserted()>
c001cc82:	83 c4 10             	add    esp,0x10
c001cc85:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001cc89:	83 e0 0f             	and    eax,0xf
c001cc8c:	83 f8 02             	cmp    eax,0x2
c001cc8f:	75 1b                	jne    c001ccac <ATAPI::detectMedia()+0x9e>
c001cc91:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001cc96:	75 2d                	jne    c001ccc5 <ATAPI::detectMedia()+0xb7>
c001cc98:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001cc9f:	74 24                	je     c001ccc5 <ATAPI::detectMedia()+0xb7>
c001cca1:	83 ec 0c             	sub    esp,0xc
c001cca4:	53                   	push   ebx
c001cca5:	e8 d6 fe ff ff       	call   c001cb80 <ATAPI::diskRemoved()>
c001ccaa:	eb 16                	jmp    c001ccc2 <ATAPI::detectMedia()+0xb4>
c001ccac:	85 c0                	test   eax,eax
c001ccae:	75 15                	jne    c001ccc5 <ATAPI::detectMedia()+0xb7>
c001ccb0:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ccb7:	75 0c                	jne    c001ccc5 <ATAPI::detectMedia()+0xb7>
c001ccb9:	83 ec 0c             	sub    esp,0xc
c001ccbc:	53                   	push   ebx
c001ccbd:	e8 40 ff ff ff       	call   c001cc02 <ATAPI::diskInserted()>
c001ccc2:	83 c4 10             	add    esp,0x10
c001ccc5:	83 c4 24             	add    esp,0x24
c001ccc8:	5b                   	pop    ebx
c001ccc9:	5e                   	pop    esi
c001ccca:	c3                   	ret    
c001cccb:	90                   	nop

c001cccc <ATAPI::open(int, int, void*)>:
c001cccc:	56                   	push   esi
c001cccd:	53                   	push   ebx
c001ccce:	50                   	push   eax
c001cccf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ccd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ccd7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ccdb:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001cce1:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001cce7:	c1 e0 06             	shl    eax,0x6
c001ccea:	01 d0                	add    eax,edx
c001ccec:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001ccf3:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001ccf9:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001cd00:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001cd0a:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001cd10:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001cd17:	6a 04                	push   0x4
c001cd19:	6a 0c                	push   0xc
c001cd1b:	51                   	push   ecx
c001cd1c:	52                   	push   edx
c001cd1d:	e8 46 e3 ff ff       	call   c001b068 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cd22:	90                   	nop
c001cd23:	90                   	nop
c001cd24:	6a 00                	push   0x0
c001cd26:	6a 0c                	push   0xc
c001cd28:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cd2f:	50                   	push   eax
c001cd30:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cd36:	e8 2d e3 ff ff       	call   c001b068 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cd3b:	83 c4 14             	add    esp,0x14
c001cd3e:	68 78 01 00 00       	push   0x178
c001cd43:	e8 66 ad fe ff       	call   c0007aae <malloc>
c001cd48:	83 c4 0c             	add    esp,0xc
c001cd4b:	89 c6                	mov    esi,eax
c001cd4d:	6a 00                	push   0x0
c001cd4f:	68 ff ff ff 7f       	push   0x7fffffff
c001cd54:	6a 00                	push   0x0
c001cd56:	6a 00                	push   0x0
c001cd58:	53                   	push   ebx
c001cd59:	68 a3 26 02 c0       	push   0xc00226a3
c001cd5e:	50                   	push   eax
c001cd5f:	e8 84 04 ff ff       	call   c000d1e8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001cd64:	83 c4 14             	add    esp,0x14
c001cd67:	56                   	push   esi
c001cd68:	e8 3b 05 ff ff       	call   c000d2a8 <LogicalDisk::assignDriveLetter()>
c001cd6d:	5a                   	pop    edx
c001cd6e:	0f be c0             	movsx  eax,al
c001cd71:	59                   	pop    ecx
c001cd72:	50                   	push   eax
c001cd73:	68 f4 24 02 c0       	push   0xc00224f4
c001cd78:	e8 bc db fe ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c001cd7d:	58                   	pop    eax
c001cd7e:	5a                   	pop    edx
c001cd7f:	56                   	push   esi
c001cd80:	53                   	push   ebx
c001cd81:	e8 bc f2 fe ff       	call   c000c042 <Device::addChild(Device*)>
c001cd86:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001cd8c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cd8f:	e8 e2 f6 fe ff       	call   c000c476 <PhysicalDisk::startCache()>
c001cd94:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001cd9b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cd9e:	e8 6b fe ff ff       	call   c001cc0e <ATAPI::detectMedia()>
c001cda3:	83 c4 14             	add    esp,0x14
c001cda6:	31 c0                	xor    eax,eax
c001cda8:	5b                   	pop    ebx
c001cda9:	5e                   	pop    esi
c001cdaa:	c3                   	ret    
c001cdab:	90                   	nop

c001cdac <ATAPI::read(unsigned long long, int, void*)>:
c001cdac:	55                   	push   ebp
c001cdad:	57                   	push   edi
c001cdae:	56                   	push   esi
c001cdaf:	53                   	push   ebx
c001cdb0:	83 ec 1c             	sub    esp,0x1c
c001cdb3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001cdb7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001cdbb:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001cdbf:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001cdc6:	74 3c                	je     c001ce04 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001cdc8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001cdcc:	b9 03 00 00 00       	mov    ecx,0x3
c001cdd1:	fc                   	cld    
c001cdd2:	31 c0                	xor    eax,eax
c001cdd4:	0f ce                	bswap  esi
c001cdd6:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001cdd8:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001cddd:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001cde1:	89 e8                	mov    eax,ebp
c001cde3:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001cde7:	50                   	push   eax
c001cde8:	50                   	push   eax
c001cde9:	55                   	push   ebp
c001cdea:	c1 e5 0b             	shl    ebp,0xb
c001cded:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001cdf1:	6a 00                	push   0x0
c001cdf3:	55                   	push   ebp
c001cdf4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cdf8:	50                   	push   eax
c001cdf9:	53                   	push   ebx
c001cdfa:	e8 b9 fa ff ff       	call   c001c8b8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001cdff:	83 c4 20             	add    esp,0x20
c001ce02:	eb 1a                	jmp    c001ce1e <ATAPI::read(unsigned long long, int, void*)+0x72>
c001ce04:	83 ec 0c             	sub    esp,0xc
c001ce07:	53                   	push   ebx
c001ce08:	e8 01 fe ff ff       	call   c001cc0e <ATAPI::detectMedia()>
c001ce0d:	83 c4 10             	add    esp,0x10
c001ce10:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ce17:	75 af                	jne    c001cdc8 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001ce19:	b8 02 00 00 00       	mov    eax,0x2
c001ce1e:	83 c4 1c             	add    esp,0x1c
c001ce21:	5b                   	pop    ebx
c001ce22:	5e                   	pop    esi
c001ce23:	5f                   	pop    edi
c001ce24:	5d                   	pop    ebp
c001ce25:	c3                   	ret    

c001ce26 <SATA::close(int, int, void*)>:
c001ce26:	83 ec 0c             	sub    esp,0xc
c001ce29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce2d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ce33:	85 c0                	test   eax,eax
c001ce35:	74 0c                	je     c001ce43 <SATA::close(int, int, void*)+0x1d>
c001ce37:	83 ec 0c             	sub    esp,0xc
c001ce3a:	8b 10                	mov    edx,DWORD PTR [eax]
c001ce3c:	50                   	push   eax
c001ce3d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ce40:	83 c4 10             	add    esp,0x10
c001ce43:	31 c0                	xor    eax,eax
c001ce45:	83 c4 0c             	add    esp,0xc
c001ce48:	c3                   	ret    
c001ce49:	90                   	nop

c001ce4a <SATA::powerSaving(PowerSavingLevel)>:
c001ce4a:	c3                   	ret    
c001ce4b:	90                   	nop

c001ce4c <SATA::open(int, int, void*)>:
c001ce4c:	56                   	push   esi
c001ce4d:	53                   	push   ebx
c001ce4e:	50                   	push   eax
c001ce4f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ce53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ce57:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001ce61:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001ce67:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001ce71:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ce75:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001ce7f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001ce85:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001ce8c:	e8 21 af fe ff       	call   c0007db2 <Phys::allocatePage()>
c001ce91:	89 c6                	mov    esi,eax
c001ce93:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001ce99:	81 c6 00 10 00 00    	add    esi,0x1000
c001ce9f:	e8 0e af fe ff       	call   c0007db2 <Phys::allocatePage()>
c001cea4:	39 c6                	cmp    esi,eax
c001cea6:	74 10                	je     c001ceb8 <SATA::open(int, int, void*)+0x6c>
c001cea8:	83 ec 0c             	sub    esp,0xc
c001ceab:	68 3c 25 02 c0       	push   0xc002253c
c001ceb0:	e8 e6 3c ff ff       	call   c0010b9b <KePanic(char const*)>
c001ceb5:	83 c4 10             	add    esp,0x10
c001ceb8:	83 ec 0c             	sub    esp,0xc
c001cebb:	6a 02                	push   0x2
c001cebd:	e8 3f c7 fe ff       	call   c0009601 <Virt::allocateKernelVirtualPages(int)>
c001cec2:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001cec8:	6a 03                	push   0x3
c001ceca:	50                   	push   eax
c001cecb:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001ced1:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001ced7:	e8 38 ce fe ff       	call   c0009d14 <VAS::mapPage(unsigned long, unsigned long, int)>
c001cedc:	83 c4 14             	add    esp,0x14
c001cedf:	53                   	push   ebx
c001cee0:	e8 91 f5 fe ff       	call   c000c476 <PhysicalDisk::startCache()>
c001cee5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cee8:	e8 cd 07 ff ff       	call   c000d6ba <createPartitionsForDisk(PhysicalDisk*)>
c001ceed:	83 c4 14             	add    esp,0x14
c001cef0:	31 c0                	xor    eax,eax
c001cef2:	5b                   	pop    ebx
c001cef3:	5e                   	pop    esi
c001cef4:	c3                   	ret    
c001cef5:	90                   	nop

c001cef6 <SATA::SATA()>:
c001cef6:	83 ec 0c             	sub    esp,0xc
c001cef9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cefd:	83 ec 04             	sub    esp,0x4
c001cf00:	68 00 02 00 00       	push   0x200
c001cf05:	68 50 25 02 c0       	push   0xc0022550
c001cf0a:	50                   	push   eax
c001cf0b:	e8 fe f4 fe ff       	call   c000c40e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001cf10:	83 c4 10             	add    esp,0x10
c001cf13:	ba c0 25 02 c0       	mov    edx,0xc00225c0
c001cf18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf1c:	89 10                	mov    DWORD PTR [eax],edx
c001cf1e:	90                   	nop
c001cf1f:	83 c4 0c             	add    esp,0xc
c001cf22:	c3                   	ret    
c001cf23:	90                   	nop

c001cf24 <SATA::access(unsigned long long, int, void*, bool)>:
c001cf24:	55                   	push   ebp
c001cf25:	57                   	push   edi
c001cf26:	56                   	push   esi
c001cf27:	53                   	push   ebx
c001cf28:	83 ec 2c             	sub    esp,0x2c
c001cf2b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001cf2f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001cf33:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cf37:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001cf3b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001cf3f:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001cf44:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cf48:	7e 10                	jle    c001cf5a <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001cf4a:	83 ec 0c             	sub    esp,0xc
c001cf4d:	68 60 25 02 c0       	push   0xc0022560
c001cf52:	e8 44 3c ff ff       	call   c0010b9b <KePanic(char const*)>
c001cf57:	83 c4 10             	add    esp,0x10
c001cf5a:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cf60:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001cf66:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001cf6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cf70:	89 d0                	mov    eax,edx
c001cf72:	c1 e0 07             	shl    eax,0x7
c001cf75:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001cf79:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001cf83:	51                   	push   ecx
c001cf84:	8d 42 02             	lea    eax,[edx+0x2]
c001cf87:	51                   	push   ecx
c001cf88:	c1 e0 07             	shl    eax,0x7
c001cf8b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001cf8f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001cf93:	50                   	push   eax
c001cf94:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001cf9a:	e8 91 ec ff ff       	call   c001bc30 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001cf9f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cfa3:	83 c4 10             	add    esp,0x10
c001cfa6:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001cfab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cfaf:	0f 84 57 01 00 00    	je     c001d10c <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001cfb5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001cfb9:	c1 e0 09             	shl    eax,0x9
c001cfbc:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001cfc1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cfc5:	74 0e                	je     c001cfd5 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001cfc7:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001cfcd:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001cfd1:	89 c1                	mov    ecx,eax
c001cfd3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cfd5:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001cfdb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001cfdf:	8d 42 02             	lea    eax,[edx+0x2]
c001cfe2:	c1 e0 07             	shl    eax,0x7
c001cfe5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001cfe9:	8b 00                	mov    eax,DWORD PTR [eax]
c001cfeb:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001cff1:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001cff7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cffb:	c1 e1 05             	shl    ecx,0x5
c001cffe:	01 c8                	add    eax,ecx
c001d000:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d004:	83 e1 01             	and    ecx,0x1
c001d007:	89 ce                	mov    esi,ecx
c001d009:	8a 08                	mov    cl,BYTE PTR [eax]
c001d00b:	c1 e6 06             	shl    esi,0x6
c001d00e:	83 e1 bf             	and    ecx,0xffffffbf
c001d011:	09 f1                	or     ecx,esi
c001d013:	88 08                	mov    BYTE PTR [eax],cl
c001d015:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d017:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001d01d:	81 c9 05 00 01 00    	or     ecx,0x10005
c001d023:	89 08                	mov    DWORD PTR [eax],ecx
c001d025:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001d02b:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001d031:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001d037:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001d03a:	50                   	push   eax
c001d03b:	68 90 00 00 00       	push   0x90
c001d040:	6a 00                	push   0x0
c001d042:	56                   	push   esi
c001d043:	e8 a8 34 fe ff       	call   c00004f0 <memset>
c001d048:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001d04e:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001d054:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d058:	83 c4 10             	add    esp,0x10
c001d05b:	48                   	dec    eax
c001d05c:	25 ff ff 3f 00       	and    eax,0x3fffff
c001d061:	89 c1                	mov    ecx,eax
c001d063:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001d069:	25 00 00 c0 ff       	and    eax,0xffc00000
c001d06e:	09 c8                	or     eax,ecx
c001d070:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001d076:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001d07c:	83 c8 80             	or     eax,0xffffff80
c001d07f:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001d085:	66 8b 06             	mov    ax,WORD PTR [esi]
c001d088:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d08c:	25 00 7f 00 00       	and    eax,0x7f00
c001d091:	0d 27 80 ff ff       	or     eax,0xffff8027
c001d096:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001d09b:	66 89 06             	mov    WORD PTR [esi],ax
c001d09e:	b0 35                	mov    al,0x35
c001d0a0:	75 02                	jne    c001d0a4 <SATA::access(unsigned long long, int, void*, bool)+0x180>
c001d0a2:	b0 25                	mov    al,0x25
c001d0a4:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001d0a7:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001d0ab:	89 e8                	mov    eax,ebp
c001d0ad:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001d0b1:	c1 e8 10             	shr    eax,0x10
c001d0b4:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001d0b7:	89 e8                	mov    eax,ebp
c001d0b9:	c1 e8 18             	shr    eax,0x18
c001d0bc:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001d0bf:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001d0c3:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001d0c6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d0ca:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001d0cd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d0d1:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001d0d5:	89 d6                	mov    esi,edx
c001d0d7:	31 c0                	xor    eax,eax
c001d0d9:	c1 e6 07             	shl    esi,0x7
c001d0dc:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d0e0:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001d0e6:	80 e1 88             	and    cl,0x88
c001d0e9:	74 0a                	je     c001d0f5 <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001d0eb:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d0f0:	74 0a                	je     c001d0fc <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001d0f2:	40                   	inc    eax
c001d0f3:	eb eb                	jmp    c001d0e0 <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001d0f5:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d0fa:	75 17                	jne    c001d113 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001d0fc:	83 ec 0c             	sub    esp,0xc
c001d0ff:	68 99 25 02 c0       	push   0xc0022599
c001d104:	e8 30 d8 fe ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c001d109:	83 c4 10             	add    esp,0x10
c001d10c:	b8 01 00 00 00       	mov    eax,0x1
c001d111:	eb 5d                	jmp    c001d170 <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001d113:	b8 01 00 00 00       	mov    eax,0x1
c001d118:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001d11c:	c1 e2 07             	shl    edx,0x7
c001d11f:	d3 e0                	shl    eax,cl
c001d121:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001d125:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001d12b:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001d131:	85 c8                	test   eax,ecx
c001d133:	74 16                	je     c001d14b <SATA::access(unsigned long long, int, void*, bool)+0x227>
c001d135:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001d13b:	0f ba e1 1e          	bt     ecx,0x1e
c001d13f:	73 ea                	jae    c001d12b <SATA::access(unsigned long long, int, void*, bool)+0x207>
c001d141:	83 ec 0c             	sub    esp,0xc
c001d144:	68 a7 25 02 c0       	push   0xc00225a7
c001d149:	eb b9                	jmp    c001d104 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001d14b:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001d151:	0f ba e0 1e          	bt     eax,0x1e
c001d155:	72 b5                	jb     c001d10c <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001d157:	31 c0                	xor    eax,eax
c001d159:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001d15e:	75 10                	jne    c001d170 <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001d160:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001d166:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001d16a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001d16e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d170:	83 c4 2c             	add    esp,0x2c
c001d173:	5b                   	pop    ebx
c001d174:	5e                   	pop    esi
c001d175:	5f                   	pop    edi
c001d176:	5d                   	pop    ebp
c001d177:	c3                   	ret    

c001d178 <SATA::read(unsigned long long, int, void*)>:
c001d178:	55                   	push   ebp
c001d179:	57                   	push   edi
c001d17a:	56                   	push   esi
c001d17b:	be 04 00 00 00       	mov    esi,0x4
c001d180:	53                   	push   ebx
c001d181:	83 ec 0c             	sub    esp,0xc
c001d184:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d188:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d18c:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d18f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d193:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d197:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d19d:	0f 87 1a 02 00 00    	ja     c001d3bd <SATA::read(unsigned long long, int, void*)+0x245>
c001d1a3:	be 06 00 00 00       	mov    esi,0x6
c001d1a8:	85 c9                	test   ecx,ecx
c001d1aa:	0f 84 0d 02 00 00    	je     c001d3bd <SATA::read(unsigned long long, int, void*)+0x245>
c001d1b0:	56                   	push   esi
c001d1b1:	56                   	push   esi
c001d1b2:	6a 00                	push   0x0
c001d1b4:	51                   	push   ecx
c001d1b5:	53                   	push   ebx
c001d1b6:	52                   	push   edx
c001d1b7:	50                   	push   eax
c001d1b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d1bc:	e8 63 fd ff ff       	call   c001cf24 <SATA::access(unsigned long long, int, void*, bool)>
c001d1c1:	83 c4 20             	add    esp,0x20
c001d1c4:	89 c6                	mov    esi,eax
c001d1c6:	85 c0                	test   eax,eax
c001d1c8:	0f 85 ea 01 00 00    	jne    c001d3b8 <SATA::read(unsigned long long, int, void*)+0x240>
c001d1ce:	01 1d 54 9b 02 c0    	add    DWORD PTR ds:0xc0029b54,ebx
c001d1d4:	bb 0a 00 00 00       	mov    ebx,0xa
c001d1d9:	50                   	push   eax
c001d1da:	50                   	push   eax
c001d1db:	6a 0f                	push   0xf
c001d1dd:	6a 00                	push   0x0
c001d1df:	e8 75 f2 ff ff       	call   c001c459 <combineColours(unsigned char, unsigned char)>
c001d1e4:	5a                   	pop    edx
c001d1e5:	0f b6 c0             	movzx  eax,al
c001d1e8:	59                   	pop    ecx
c001d1e9:	b9 10 27 00 00       	mov    ecx,0x2710
c001d1ee:	50                   	push   eax
c001d1ef:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001d1f4:	99                   	cdq    
c001d1f5:	f7 f9                	idiv   ecx
c001d1f7:	99                   	cdq    
c001d1f8:	f7 fb                	idiv   ebx
c001d1fa:	8d 42 30             	lea    eax,[edx+0x30]
c001d1fd:	0f b6 c0             	movzx  eax,al
c001d200:	50                   	push   eax
c001d201:	e8 42 f2 ff ff       	call   c001c448 <combineCharAndColour(char, unsigned char)>
c001d206:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d20c:	5f                   	pop    edi
c001d20d:	5d                   	pop    ebp
c001d20e:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d213:	6a 0f                	push   0xf
c001d215:	6a 00                	push   0x0
c001d217:	e8 3d f2 ff ff       	call   c001c459 <combineColours(unsigned char, unsigned char)>
c001d21c:	5a                   	pop    edx
c001d21d:	0f b6 c0             	movzx  eax,al
c001d220:	59                   	pop    ecx
c001d221:	50                   	push   eax
c001d222:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001d227:	99                   	cdq    
c001d228:	f7 fd                	idiv   ebp
c001d22a:	99                   	cdq    
c001d22b:	f7 fb                	idiv   ebx
c001d22d:	8d 42 30             	lea    eax,[edx+0x30]
c001d230:	0f b6 c0             	movzx  eax,al
c001d233:	50                   	push   eax
c001d234:	e8 0f f2 ff ff       	call   c001c448 <combineCharAndColour(char, unsigned char)>
c001d239:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d23f:	5f                   	pop    edi
c001d240:	bf 64 00 00 00       	mov    edi,0x64
c001d245:	58                   	pop    eax
c001d246:	6a 0f                	push   0xf
c001d248:	6a 00                	push   0x0
c001d24a:	e8 0a f2 ff ff       	call   c001c459 <combineColours(unsigned char, unsigned char)>
c001d24f:	5a                   	pop    edx
c001d250:	0f b6 c0             	movzx  eax,al
c001d253:	59                   	pop    ecx
c001d254:	50                   	push   eax
c001d255:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001d25a:	99                   	cdq    
c001d25b:	f7 ff                	idiv   edi
c001d25d:	99                   	cdq    
c001d25e:	f7 fb                	idiv   ebx
c001d260:	8d 42 30             	lea    eax,[edx+0x30]
c001d263:	0f b6 c0             	movzx  eax,al
c001d266:	50                   	push   eax
c001d267:	e8 dc f1 ff ff       	call   c001c448 <combineCharAndColour(char, unsigned char)>
c001d26c:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d272:	58                   	pop    eax
c001d273:	5a                   	pop    edx
c001d274:	6a 0f                	push   0xf
c001d276:	6a 00                	push   0x0
c001d278:	e8 dc f1 ff ff       	call   c001c459 <combineColours(unsigned char, unsigned char)>
c001d27d:	59                   	pop    ecx
c001d27e:	0f b6 c0             	movzx  eax,al
c001d281:	5a                   	pop    edx
c001d282:	50                   	push   eax
c001d283:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001d288:	99                   	cdq    
c001d289:	f7 fb                	idiv   ebx
c001d28b:	99                   	cdq    
c001d28c:	f7 fb                	idiv   ebx
c001d28e:	8d 42 30             	lea    eax,[edx+0x30]
c001d291:	0f b6 c0             	movzx  eax,al
c001d294:	50                   	push   eax
c001d295:	e8 ae f1 ff ff       	call   c001c448 <combineCharAndColour(char, unsigned char)>
c001d29a:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d2a0:	59                   	pop    ecx
c001d2a1:	58                   	pop    eax
c001d2a2:	6a 0f                	push   0xf
c001d2a4:	6a 00                	push   0x0
c001d2a6:	e8 ae f1 ff ff       	call   c001c459 <combineColours(unsigned char, unsigned char)>
c001d2ab:	5a                   	pop    edx
c001d2ac:	0f b6 c0             	movzx  eax,al
c001d2af:	59                   	pop    ecx
c001d2b0:	50                   	push   eax
c001d2b1:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001d2b6:	99                   	cdq    
c001d2b7:	f7 fb                	idiv   ebx
c001d2b9:	8d 42 30             	lea    eax,[edx+0x30]
c001d2bc:	0f b6 c0             	movzx  eax,al
c001d2bf:	50                   	push   eax
c001d2c0:	e8 83 f1 ff ff       	call   c001c448 <combineCharAndColour(char, unsigned char)>
c001d2c5:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d2cb:	58                   	pop    eax
c001d2cc:	5a                   	pop    edx
c001d2cd:	6a 0f                	push   0xf
c001d2cf:	6a 00                	push   0x0
c001d2d1:	e8 83 f1 ff ff       	call   c001c459 <combineColours(unsigned char, unsigned char)>
c001d2d6:	59                   	pop    ecx
c001d2d7:	0f b6 c0             	movzx  eax,al
c001d2da:	5a                   	pop    edx
c001d2db:	b9 10 27 00 00       	mov    ecx,0x2710
c001d2e0:	50                   	push   eax
c001d2e1:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001d2e6:	99                   	cdq    
c001d2e7:	f7 f9                	idiv   ecx
c001d2e9:	99                   	cdq    
c001d2ea:	f7 fb                	idiv   ebx
c001d2ec:	8d 42 30             	lea    eax,[edx+0x30]
c001d2ef:	0f b6 c0             	movzx  eax,al
c001d2f2:	50                   	push   eax
c001d2f3:	e8 50 f1 ff ff       	call   c001c448 <combineCharAndColour(char, unsigned char)>
c001d2f8:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d2fe:	59                   	pop    ecx
c001d2ff:	58                   	pop    eax
c001d300:	6a 0f                	push   0xf
c001d302:	6a 00                	push   0x0
c001d304:	e8 50 f1 ff ff       	call   c001c459 <combineColours(unsigned char, unsigned char)>
c001d309:	5a                   	pop    edx
c001d30a:	0f b6 c0             	movzx  eax,al
c001d30d:	59                   	pop    ecx
c001d30e:	50                   	push   eax
c001d30f:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001d314:	99                   	cdq    
c001d315:	f7 fd                	idiv   ebp
c001d317:	99                   	cdq    
c001d318:	f7 fb                	idiv   ebx
c001d31a:	8d 42 30             	lea    eax,[edx+0x30]
c001d31d:	0f b6 c0             	movzx  eax,al
c001d320:	50                   	push   eax
c001d321:	e8 22 f1 ff ff       	call   c001c448 <combineCharAndColour(char, unsigned char)>
c001d326:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d32c:	5d                   	pop    ebp
c001d32d:	58                   	pop    eax
c001d32e:	6a 0f                	push   0xf
c001d330:	6a 00                	push   0x0
c001d332:	e8 22 f1 ff ff       	call   c001c459 <combineColours(unsigned char, unsigned char)>
c001d337:	5a                   	pop    edx
c001d338:	0f b6 c0             	movzx  eax,al
c001d33b:	59                   	pop    ecx
c001d33c:	50                   	push   eax
c001d33d:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001d342:	99                   	cdq    
c001d343:	f7 ff                	idiv   edi
c001d345:	99                   	cdq    
c001d346:	f7 fb                	idiv   ebx
c001d348:	8d 42 30             	lea    eax,[edx+0x30]
c001d34b:	0f b6 c0             	movzx  eax,al
c001d34e:	50                   	push   eax
c001d34f:	e8 f4 f0 ff ff       	call   c001c448 <combineCharAndColour(char, unsigned char)>
c001d354:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d35a:	5f                   	pop    edi
c001d35b:	5d                   	pop    ebp
c001d35c:	6a 0f                	push   0xf
c001d35e:	6a 00                	push   0x0
c001d360:	e8 f4 f0 ff ff       	call   c001c459 <combineColours(unsigned char, unsigned char)>
c001d365:	5a                   	pop    edx
c001d366:	0f b6 c0             	movzx  eax,al
c001d369:	59                   	pop    ecx
c001d36a:	50                   	push   eax
c001d36b:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001d370:	99                   	cdq    
c001d371:	f7 fb                	idiv   ebx
c001d373:	99                   	cdq    
c001d374:	f7 fb                	idiv   ebx
c001d376:	8d 42 30             	lea    eax,[edx+0x30]
c001d379:	0f b6 c0             	movzx  eax,al
c001d37c:	50                   	push   eax
c001d37d:	e8 c6 f0 ff ff       	call   c001c448 <combineCharAndColour(char, unsigned char)>
c001d382:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d388:	5f                   	pop    edi
c001d389:	5d                   	pop    ebp
c001d38a:	6a 0f                	push   0xf
c001d38c:	6a 00                	push   0x0
c001d38e:	e8 c6 f0 ff ff       	call   c001c459 <combineColours(unsigned char, unsigned char)>
c001d393:	5a                   	pop    edx
c001d394:	0f b6 c0             	movzx  eax,al
c001d397:	59                   	pop    ecx
c001d398:	50                   	push   eax
c001d399:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001d39e:	99                   	cdq    
c001d39f:	f7 fb                	idiv   ebx
c001d3a1:	83 c2 30             	add    edx,0x30
c001d3a4:	0f b6 d2             	movzx  edx,dl
c001d3a7:	52                   	push   edx
c001d3a8:	e8 9b f0 ff ff       	call   c001c448 <combineCharAndColour(char, unsigned char)>
c001d3ad:	83 c4 10             	add    esp,0x10
c001d3b0:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d3b6:	eb 05                	jmp    c001d3bd <SATA::read(unsigned long long, int, void*)+0x245>
c001d3b8:	be 01 00 00 00       	mov    esi,0x1
c001d3bd:	83 c4 0c             	add    esp,0xc
c001d3c0:	89 f0                	mov    eax,esi
c001d3c2:	5b                   	pop    ebx
c001d3c3:	5e                   	pop    esi
c001d3c4:	5f                   	pop    edi
c001d3c5:	5d                   	pop    ebp
c001d3c6:	c3                   	ret    
c001d3c7:	90                   	nop

c001d3c8 <SATA::write(unsigned long long, int, void*)>:
c001d3c8:	55                   	push   ebp
c001d3c9:	b8 04 00 00 00       	mov    eax,0x4
c001d3ce:	57                   	push   edi
c001d3cf:	56                   	push   esi
c001d3d0:	53                   	push   ebx
c001d3d1:	83 ec 1c             	sub    esp,0x1c
c001d3d4:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d3d8:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001d3dc:	8d 75 ff             	lea    esi,[ebp-0x1]
c001d3df:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d3e3:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001d3e7:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001d3ed:	0f 87 32 02 00 00    	ja     c001d625 <SATA::write(unsigned long long, int, void*)+0x25d>
c001d3f3:	b8 06 00 00 00       	mov    eax,0x6
c001d3f8:	85 ff                	test   edi,edi
c001d3fa:	0f 84 25 02 00 00    	je     c001d625 <SATA::write(unsigned long long, int, void*)+0x25d>
c001d400:	89 ee                	mov    esi,ebp
c001d402:	c1 e6 09             	shl    esi,0x9
c001d405:	01 fe                	add    esi,edi
c001d407:	89 c8                	mov    eax,ecx
c001d409:	89 da                	mov    edx,ebx
c001d40b:	83 c0 01             	add    eax,0x1
c001d40e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d412:	83 d2 00             	adc    edx,0x0
c001d415:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d419:	50                   	push   eax
c001d41a:	50                   	push   eax
c001d41b:	6a 01                	push   0x1
c001d41d:	57                   	push   edi
c001d41e:	81 c7 00 02 00 00    	add    edi,0x200
c001d424:	6a 01                	push   0x1
c001d426:	53                   	push   ebx
c001d427:	51                   	push   ecx
c001d428:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d42c:	e8 f3 fa ff ff       	call   c001cf24 <SATA::access(unsigned long long, int, void*, bool)>
c001d431:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d435:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d439:	83 c4 20             	add    esp,0x20
c001d43c:	39 f7                	cmp    edi,esi
c001d43e:	75 c7                	jne    c001d407 <SATA::write(unsigned long long, int, void*)+0x3f>
c001d440:	bb 0a 00 00 00       	mov    ebx,0xa
c001d445:	01 2d 50 9b 02 c0    	add    DWORD PTR ds:0xc0029b50,ebp
c001d44b:	bd 10 27 00 00       	mov    ebp,0x2710
c001d450:	50                   	push   eax
c001d451:	50                   	push   eax
c001d452:	6a 0f                	push   0xf
c001d454:	6a 00                	push   0x0
c001d456:	e8 fe ef ff ff       	call   c001c459 <combineColours(unsigned char, unsigned char)>
c001d45b:	5a                   	pop    edx
c001d45c:	0f b6 c0             	movzx  eax,al
c001d45f:	59                   	pop    ecx
c001d460:	50                   	push   eax
c001d461:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001d466:	99                   	cdq    
c001d467:	f7 fd                	idiv   ebp
c001d469:	99                   	cdq    
c001d46a:	f7 fb                	idiv   ebx
c001d46c:	8d 42 30             	lea    eax,[edx+0x30]
c001d46f:	0f b6 c0             	movzx  eax,al
c001d472:	50                   	push   eax
c001d473:	e8 d0 ef ff ff       	call   c001c448 <combineCharAndColour(char, unsigned char)>
c001d478:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d47e:	5e                   	pop    esi
c001d47f:	5f                   	pop    edi
c001d480:	bf e8 03 00 00       	mov    edi,0x3e8
c001d485:	6a 0f                	push   0xf
c001d487:	6a 00                	push   0x0
c001d489:	e8 cb ef ff ff       	call   c001c459 <combineColours(unsigned char, unsigned char)>
c001d48e:	5a                   	pop    edx
c001d48f:	0f b6 c0             	movzx  eax,al
c001d492:	59                   	pop    ecx
c001d493:	50                   	push   eax
c001d494:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001d499:	99                   	cdq    
c001d49a:	f7 ff                	idiv   edi
c001d49c:	99                   	cdq    
c001d49d:	f7 fb                	idiv   ebx
c001d49f:	8d 42 30             	lea    eax,[edx+0x30]
c001d4a2:	0f b6 c0             	movzx  eax,al
c001d4a5:	50                   	push   eax
c001d4a6:	e8 9d ef ff ff       	call   c001c448 <combineCharAndColour(char, unsigned char)>
c001d4ab:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d4b1:	5e                   	pop    esi
c001d4b2:	be 64 00 00 00       	mov    esi,0x64
c001d4b7:	58                   	pop    eax
c001d4b8:	6a 0f                	push   0xf
c001d4ba:	6a 00                	push   0x0
c001d4bc:	e8 98 ef ff ff       	call   c001c459 <combineColours(unsigned char, unsigned char)>
c001d4c1:	5a                   	pop    edx
c001d4c2:	0f b6 c0             	movzx  eax,al
c001d4c5:	59                   	pop    ecx
c001d4c6:	50                   	push   eax
c001d4c7:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001d4cc:	99                   	cdq    
c001d4cd:	f7 fe                	idiv   esi
c001d4cf:	99                   	cdq    
c001d4d0:	f7 fb                	idiv   ebx
c001d4d2:	8d 42 30             	lea    eax,[edx+0x30]
c001d4d5:	0f b6 c0             	movzx  eax,al
c001d4d8:	50                   	push   eax
c001d4d9:	e8 6a ef ff ff       	call   c001c448 <combineCharAndColour(char, unsigned char)>
c001d4de:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d4e4:	58                   	pop    eax
c001d4e5:	5a                   	pop    edx
c001d4e6:	6a 0f                	push   0xf
c001d4e8:	6a 00                	push   0x0
c001d4ea:	e8 6a ef ff ff       	call   c001c459 <combineColours(unsigned char, unsigned char)>
c001d4ef:	59                   	pop    ecx
c001d4f0:	0f b6 c0             	movzx  eax,al
c001d4f3:	5a                   	pop    edx
c001d4f4:	50                   	push   eax
c001d4f5:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001d4fa:	99                   	cdq    
c001d4fb:	f7 fb                	idiv   ebx
c001d4fd:	99                   	cdq    
c001d4fe:	f7 fb                	idiv   ebx
c001d500:	8d 42 30             	lea    eax,[edx+0x30]
c001d503:	0f b6 c0             	movzx  eax,al
c001d506:	50                   	push   eax
c001d507:	e8 3c ef ff ff       	call   c001c448 <combineCharAndColour(char, unsigned char)>
c001d50c:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d512:	59                   	pop    ecx
c001d513:	58                   	pop    eax
c001d514:	6a 0f                	push   0xf
c001d516:	6a 00                	push   0x0
c001d518:	e8 3c ef ff ff       	call   c001c459 <combineColours(unsigned char, unsigned char)>
c001d51d:	5a                   	pop    edx
c001d51e:	0f b6 c0             	movzx  eax,al
c001d521:	59                   	pop    ecx
c001d522:	50                   	push   eax
c001d523:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001d528:	99                   	cdq    
c001d529:	f7 fb                	idiv   ebx
c001d52b:	83 c2 30             	add    edx,0x30
c001d52e:	0f b6 d2             	movzx  edx,dl
c001d531:	52                   	push   edx
c001d532:	e8 11 ef ff ff       	call   c001c448 <combineCharAndColour(char, unsigned char)>
c001d537:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d53d:	58                   	pop    eax
c001d53e:	5a                   	pop    edx
c001d53f:	6a 0f                	push   0xf
c001d541:	6a 00                	push   0x0
c001d543:	e8 11 ef ff ff       	call   c001c459 <combineColours(unsigned char, unsigned char)>
c001d548:	59                   	pop    ecx
c001d549:	0f b6 c0             	movzx  eax,al
c001d54c:	5a                   	pop    edx
c001d54d:	50                   	push   eax
c001d54e:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001d553:	99                   	cdq    
c001d554:	f7 fd                	idiv   ebp
c001d556:	99                   	cdq    
c001d557:	f7 fb                	idiv   ebx
c001d559:	8d 42 30             	lea    eax,[edx+0x30]
c001d55c:	0f b6 c0             	movzx  eax,al
c001d55f:	50                   	push   eax
c001d560:	e8 e3 ee ff ff       	call   c001c448 <combineCharAndColour(char, unsigned char)>
c001d565:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d56b:	59                   	pop    ecx
c001d56c:	5d                   	pop    ebp
c001d56d:	6a 0f                	push   0xf
c001d56f:	6a 00                	push   0x0
c001d571:	e8 e3 ee ff ff       	call   c001c459 <combineColours(unsigned char, unsigned char)>
c001d576:	5a                   	pop    edx
c001d577:	0f b6 c0             	movzx  eax,al
c001d57a:	59                   	pop    ecx
c001d57b:	50                   	push   eax
c001d57c:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001d581:	99                   	cdq    
c001d582:	f7 ff                	idiv   edi
c001d584:	99                   	cdq    
c001d585:	f7 fb                	idiv   ebx
c001d587:	8d 42 30             	lea    eax,[edx+0x30]
c001d58a:	0f b6 c0             	movzx  eax,al
c001d58d:	50                   	push   eax
c001d58e:	e8 b5 ee ff ff       	call   c001c448 <combineCharAndColour(char, unsigned char)>
c001d593:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d599:	5f                   	pop    edi
c001d59a:	5d                   	pop    ebp
c001d59b:	6a 0f                	push   0xf
c001d59d:	6a 00                	push   0x0
c001d59f:	e8 b5 ee ff ff       	call   c001c459 <combineColours(unsigned char, unsigned char)>
c001d5a4:	5a                   	pop    edx
c001d5a5:	0f b6 c0             	movzx  eax,al
c001d5a8:	59                   	pop    ecx
c001d5a9:	50                   	push   eax
c001d5aa:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001d5af:	99                   	cdq    
c001d5b0:	f7 fe                	idiv   esi
c001d5b2:	99                   	cdq    
c001d5b3:	f7 fb                	idiv   ebx
c001d5b5:	8d 42 30             	lea    eax,[edx+0x30]
c001d5b8:	0f b6 c0             	movzx  eax,al
c001d5bb:	50                   	push   eax
c001d5bc:	e8 87 ee ff ff       	call   c001c448 <combineCharAndColour(char, unsigned char)>
c001d5c1:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d5c7:	5e                   	pop    esi
c001d5c8:	5f                   	pop    edi
c001d5c9:	6a 0f                	push   0xf
c001d5cb:	6a 00                	push   0x0
c001d5cd:	e8 87 ee ff ff       	call   c001c459 <combineColours(unsigned char, unsigned char)>
c001d5d2:	5d                   	pop    ebp
c001d5d3:	0f b6 c0             	movzx  eax,al
c001d5d6:	5a                   	pop    edx
c001d5d7:	50                   	push   eax
c001d5d8:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001d5dd:	99                   	cdq    
c001d5de:	f7 fb                	idiv   ebx
c001d5e0:	99                   	cdq    
c001d5e1:	f7 fb                	idiv   ebx
c001d5e3:	8d 42 30             	lea    eax,[edx+0x30]
c001d5e6:	0f b6 c0             	movzx  eax,al
c001d5e9:	50                   	push   eax
c001d5ea:	e8 59 ee ff ff       	call   c001c448 <combineCharAndColour(char, unsigned char)>
c001d5ef:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d5f5:	59                   	pop    ecx
c001d5f6:	5e                   	pop    esi
c001d5f7:	6a 0f                	push   0xf
c001d5f9:	6a 00                	push   0x0
c001d5fb:	e8 59 ee ff ff       	call   c001c459 <combineColours(unsigned char, unsigned char)>
c001d600:	5f                   	pop    edi
c001d601:	0f b6 c0             	movzx  eax,al
c001d604:	5d                   	pop    ebp
c001d605:	50                   	push   eax
c001d606:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001d60b:	99                   	cdq    
c001d60c:	f7 fb                	idiv   ebx
c001d60e:	83 c2 30             	add    edx,0x30
c001d611:	0f b6 d2             	movzx  edx,dl
c001d614:	52                   	push   edx
c001d615:	e8 2e ee ff ff       	call   c001c448 <combineCharAndColour(char, unsigned char)>
c001d61a:	83 c4 10             	add    esp,0x10
c001d61d:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d623:	31 c0                	xor    eax,eax
c001d625:	83 c4 1c             	add    esp,0x1c
c001d628:	5b                   	pop    ebx
c001d629:	5e                   	pop    esi
c001d62a:	5f                   	pop    edi
c001d62b:	5d                   	pop    ebp
c001d62c:	c3                   	ret    
c001d62d:	90                   	nop

c001d62e <SATAPI::write(unsigned long long, int, void*)>:
c001d62e:	b8 03 00 00 00       	mov    eax,0x3
c001d633:	c3                   	ret    

c001d634 <SATAPI::close(int, int, void*)>:
c001d634:	83 ec 0c             	sub    esp,0xc
c001d637:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d63b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d641:	85 c0                	test   eax,eax
c001d643:	74 0c                	je     c001d651 <SATAPI::close(int, int, void*)+0x1d>
c001d645:	83 ec 0c             	sub    esp,0xc
c001d648:	8b 10                	mov    edx,DWORD PTR [eax]
c001d64a:	50                   	push   eax
c001d64b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d64e:	83 c4 10             	add    esp,0x10
c001d651:	31 c0                	xor    eax,eax
c001d653:	83 c4 0c             	add    esp,0xc
c001d656:	c3                   	ret    
c001d657:	90                   	nop

c001d658 <SATAPI::SATAPI()>:
c001d658:	83 ec 0c             	sub    esp,0xc
c001d65b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d65f:	83 ec 04             	sub    esp,0x4
c001d662:	68 00 08 00 00       	push   0x800
c001d667:	68 f0 25 02 c0       	push   0xc00225f0
c001d66c:	50                   	push   eax
c001d66d:	e8 9c ed fe ff       	call   c000c40e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d672:	83 c4 10             	add    esp,0x10
c001d675:	ba e4 26 02 c0       	mov    edx,0xc00226e4
c001d67a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d67e:	89 10                	mov    DWORD PTR [eax],edx
c001d680:	90                   	nop
c001d681:	83 c4 0c             	add    esp,0xc
c001d684:	c3                   	ret    
c001d685:	90                   	nop

c001d686 <SATAPI::diskRemoved()>:
c001d686:	c3                   	ret    
c001d687:	90                   	nop

c001d688 <SATAPI::diskInserted()>:
c001d688:	83 ec 18             	sub    esp,0x18
c001d68b:	68 fc 25 02 c0       	push   0xc00225fc
c001d690:	e8 a4 d2 fe ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c001d695:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d699:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001d6a0:	83 c4 1c             	add    esp,0x1c
c001d6a3:	c3                   	ret    

c001d6a4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001d6a4:	55                   	push   ebp
c001d6a5:	57                   	push   edi
c001d6a6:	56                   	push   esi
c001d6a7:	53                   	push   ebx
c001d6a8:	83 ec 34             	sub    esp,0x34
c001d6ab:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001d6af:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001d6b3:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001d6b7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d6bb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001d6bf:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001d6c5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d6cb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d6cf:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001d6d5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d6d9:	83 c0 02             	add    eax,0x2
c001d6dc:	c1 e0 07             	shl    eax,0x7
c001d6df:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d6e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d6e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d6eb:	c1 e0 07             	shl    eax,0x7
c001d6ee:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d6f2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d6f6:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001d700:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d704:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d70a:	e8 21 e5 ff ff       	call   c001bc30 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001d70f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d713:	83 c4 10             	add    esp,0x10
c001d716:	b8 01 00 00 00       	mov    eax,0x1
c001d71b:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001d720:	0f 84 53 02 00 00    	je     c001d979 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001d726:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001d72c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d730:	8b 00                	mov    eax,DWORD PTR [eax]
c001d732:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001d738:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001d73e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d742:	c1 e1 05             	shl    ecx,0x5
c001d745:	01 c8                	add    eax,ecx
c001d747:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d749:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001d74f:	81 c9 25 00 01 00    	or     ecx,0x10025
c001d755:	89 08                	mov    DWORD PTR [eax],ecx
c001d757:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001d75d:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001d763:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001d769:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001d76c:	8d 7b 40             	lea    edi,[ebx+0x40]
c001d76f:	50                   	push   eax
c001d770:	68 90 00 00 00       	push   0x90
c001d775:	6a 00                	push   0x0
c001d777:	53                   	push   ebx
c001d778:	e8 73 2d fe ff       	call   c00004f0 <memset>
c001d77d:	b9 0c 00 00 00       	mov    ecx,0xc
c001d782:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001d786:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d788:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001d78e:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001d792:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001d798:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001d79c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001d7a0:	48                   	dec    eax
c001d7a1:	25 ff ff 3f 00       	and    eax,0x3fffff
c001d7a6:	89 c1                	mov    ecx,eax
c001d7a8:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001d7ae:	25 00 00 c0 ff       	and    eax,0xffc00000
c001d7b3:	09 c8                	or     eax,ecx
c001d7b5:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001d7bb:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001d7c1:	83 c8 80             	or     eax,0xffffff80
c001d7c4:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001d7ca:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001d7cd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001d7d1:	25 00 7f 00 00       	and    eax,0x7f00
c001d7d6:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001d7da:	0d 27 80 ff ff       	or     eax,0xffff8027
c001d7df:	66 89 03             	mov    WORD PTR [ebx],ax
c001d7e2:	89 d0                	mov    eax,edx
c001d7e4:	c1 ea 18             	shr    edx,0x18
c001d7e7:	c1 e8 10             	shr    eax,0x10
c001d7ea:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001d7ed:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001d7f0:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001d7f4:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001d7f7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d7fb:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001d7fe:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001d802:	83 c4 10             	add    esp,0x10
c001d805:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001d809:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d80d:	31 c0                	xor    eax,eax
c001d80f:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001d815:	80 e1 88             	and    cl,0x88
c001d818:	74 0a                	je     c001d824 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c001d81a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d81f:	74 0a                	je     c001d82b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c001d821:	40                   	inc    eax
c001d822:	eb eb                	jmp    c001d80f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001d824:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d829:	75 43                	jne    c001d86e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001d82b:	83 ec 0c             	sub    esp,0xc
c001d82e:	68 14 26 02 c0       	push   0xc0022614
c001d833:	e8 01 d1 fe ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c001d838:	58                   	pop    eax
c001d839:	5a                   	pop    edx
c001d83a:	68 29 26 02 c0       	push   0xc0022629
c001d83f:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c001d845:	e8 4e b2 fe ff       	call   c0008a98 <VgaText::puts(char const*)>
c001d84a:	59                   	pop    ecx
c001d84b:	5b                   	pop    ebx
c001d84c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d850:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d856:	e8 6f e4 ff ff       	call   c001bcca <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001d85b:	5e                   	pop    esi
c001d85c:	5f                   	pop    edi
c001d85d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d861:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d867:	e8 3e e4 ff ff       	call   c001bcaa <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001d86c:	eb 48                	jmp    c001d8b6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c001d86e:	be 01 00 00 00       	mov    esi,0x1
c001d873:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001d877:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001d87b:	d3 e6                	shl    esi,cl
c001d87d:	c1 e7 07             	shl    edi,0x7
c001d880:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001d886:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001d88b:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001d88f:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001d895:	85 c6                	test   esi,eax
c001d897:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001d89d:	0f 84 a3 00 00 00    	je     c001d946 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a2>
c001d8a3:	0f ba e0 1e          	bt     eax,0x1e
c001d8a7:	73 1a                	jae    c001d8c3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c001d8a9:	83 ec 0c             	sub    esp,0xc
c001d8ac:	68 3b 26 02 c0       	push   0xc002263b
c001d8b1:	e8 83 d0 fe ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c001d8b6:	83 c4 10             	add    esp,0x10
c001d8b9:	b8 01 00 00 00       	mov    eax,0x1
c001d8be:	e9 b6 00 00 00       	jmp    c001d979 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001d8c3:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001d8c9:	83 f8 0d             	cmp    eax,0xd
c001d8cc:	77 0a                	ja     c001d8d8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x234>
c001d8ce:	83 ec 0c             	sub    esp,0xc
c001d8d1:	68 c8 00 00 00       	push   0xc8
c001d8d6:	eb 28                	jmp    c001d900 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001d8d8:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001d8de:	83 f8 0d             	cmp    eax,0xd
c001d8e1:	77 0a                	ja     c001d8ed <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x249>
c001d8e3:	83 ec 0c             	sub    esp,0xc
c001d8e6:	68 58 02 00 00       	push   0x258
c001d8eb:	eb 13                	jmp    c001d900 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001d8ed:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001d8f3:	83 f8 06             	cmp    eax,0x6
c001d8f6:	77 10                	ja     c001d908 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001d8f8:	83 ec 0c             	sub    esp,0xc
c001d8fb:	68 dc 05 00 00       	push   0x5dc
c001d900:	e8 37 7e ff ff       	call   c001573c <milliTenthSleep(unsigned int)>
c001d905:	83 c4 10             	add    esp,0x10
c001d908:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001d90c:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001d90f:	75 06                	jne    c001d917 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x273>
c001d911:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001d915:	74 15                	je     c001d92c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001d917:	83 fb 06             	cmp    ebx,0x6
c001d91a:	77 10                	ja     c001d92c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001d91c:	83 ec 0c             	sub    esp,0xc
c001d91f:	68 c4 09 00 00       	push   0x9c4
c001d924:	e8 13 7e ff ff       	call   c001573c <milliTenthSleep(unsigned int)>
c001d929:	83 c4 10             	add    esp,0x10
c001d92c:	43                   	inc    ebx
c001d92d:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001d933:	0f 85 56 ff ff ff    	jne    c001d88f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c001d939:	83 ec 0c             	sub    esp,0xc
c001d93c:	68 4e 26 02 c0       	push   0xc002264e
c001d941:	e9 6b ff ff ff       	jmp    c001d8b1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001d946:	0f ba e0 1e          	bt     eax,0x1e
c001d94a:	73 0d                	jae    c001d959 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b5>
c001d94c:	83 ec 0c             	sub    esp,0xc
c001d94f:	68 62 26 02 c0       	push   0xc0022662
c001d954:	e9 58 ff ff ff       	jmp    c001d8b1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001d959:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001d95e:	74 17                	je     c001d977 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001d960:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001d965:	74 10                	je     c001d977 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001d967:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001d96d:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001d971:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001d975:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d977:	31 c0                	xor    eax,eax
c001d979:	83 c4 2c             	add    esp,0x2c
c001d97c:	5b                   	pop    ebx
c001d97d:	5e                   	pop    esi
c001d97e:	5f                   	pop    edi
c001d97f:	5d                   	pop    ebp
c001d980:	c3                   	ret    
c001d981:	90                   	nop

c001d982 <SATAPI::eject()>:
c001d982:	57                   	push   edi
c001d983:	b9 03 00 00 00       	mov    ecx,0x3
c001d988:	83 ec 18             	sub    esp,0x18
c001d98b:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d98f:	fc                   	cld    
c001d990:	31 c0                	xor    eax,eax
c001d992:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d994:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d999:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d99e:	50                   	push   eax
c001d99f:	6a 00                	push   0x0
c001d9a1:	6a 00                	push   0x0
c001d9a3:	6a 00                	push   0x0
c001d9a5:	6a 00                	push   0x0
c001d9a7:	6a 02                	push   0x2
c001d9a9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d9ad:	50                   	push   eax
c001d9ae:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d9b2:	e8 ed fc ff ff       	call   c001d6a4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d9b7:	31 c0                	xor    eax,eax
c001d9b9:	83 c4 38             	add    esp,0x38
c001d9bc:	5f                   	pop    edi
c001d9bd:	c3                   	ret    

c001d9be <SATAPI::detectMedia()>:
c001d9be:	53                   	push   ebx
c001d9bf:	83 ec 14             	sub    esp,0x14
c001d9c2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d9c6:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d9cc:	e8 bb 03 ff ff       	call   c000dd8c <VCache::writeWriteBuffer()>
c001d9d1:	59                   	pop    ecx
c001d9d2:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d9d8:	e8 9f 03 ff ff       	call   c000dd7c <VCache::invalidateReadBuffer()>
c001d9dd:	c7 04 24 77 26 02 c0 	mov    DWORD PTR [esp],0xc0022677
c001d9e4:	e8 50 cf fe ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c001d9e9:	83 c4 10             	add    esp,0x10
c001d9ec:	31 c0                	xor    eax,eax
c001d9ee:	8b 14 85 20 84 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7be0]
c001d9f5:	85 d2                	test   edx,edx
c001d9f7:	74 0f                	je     c001da08 <SATAPI::detectMedia()+0x4a>
c001d9f9:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001d9ff:	75 07                	jne    c001da08 <SATAPI::detectMedia()+0x4a>
c001da01:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001da08:	40                   	inc    eax
c001da09:	83 f8 1a             	cmp    eax,0x1a
c001da0c:	75 e0                	jne    c001d9ee <SATAPI::detectMedia()+0x30>
c001da0e:	83 c4 08             	add    esp,0x8
c001da11:	5b                   	pop    ebx
c001da12:	c3                   	ret    
c001da13:	90                   	nop

c001da14 <SATAPI::open(int, int, void*)>:
c001da14:	56                   	push   esi
c001da15:	53                   	push   ebx
c001da16:	51                   	push   ecx
c001da17:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001da1b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001da1f:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001da29:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001da2f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001da39:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001da3d:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001da47:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001da4d:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001da54:	e8 59 a3 fe ff       	call   c0007db2 <Phys::allocatePage()>
c001da59:	89 c6                	mov    esi,eax
c001da5b:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001da61:	81 c6 00 10 00 00    	add    esi,0x1000
c001da67:	e8 46 a3 fe ff       	call   c0007db2 <Phys::allocatePage()>
c001da6c:	39 c6                	cmp    esi,eax
c001da6e:	74 10                	je     c001da80 <SATAPI::open(int, int, void*)+0x6c>
c001da70:	83 ec 0c             	sub    esp,0xc
c001da73:	68 8c 26 02 c0       	push   0xc002268c
c001da78:	e8 1e 31 ff ff       	call   c0010b9b <KePanic(char const*)>
c001da7d:	83 c4 10             	add    esp,0x10
c001da80:	83 ec 0c             	sub    esp,0xc
c001da83:	6a 02                	push   0x2
c001da85:	e8 77 bb fe ff       	call   c0009601 <Virt::allocateKernelVirtualPages(int)>
c001da8a:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001da90:	6a 03                	push   0x3
c001da92:	50                   	push   eax
c001da93:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001da99:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001da9f:	e8 70 c2 fe ff       	call   c0009d14 <VAS::mapPage(unsigned long, unsigned long, int)>
c001daa4:	83 c4 14             	add    esp,0x14
c001daa7:	68 78 01 00 00       	push   0x178
c001daac:	e8 fd 9f fe ff       	call   c0007aae <malloc>
c001dab1:	83 c4 0c             	add    esp,0xc
c001dab4:	89 c6                	mov    esi,eax
c001dab6:	6a 00                	push   0x0
c001dab8:	68 ff ff ff 7f       	push   0x7fffffff
c001dabd:	6a 00                	push   0x0
c001dabf:	6a 00                	push   0x0
c001dac1:	53                   	push   ebx
c001dac2:	68 a2 26 02 c0       	push   0xc00226a2
c001dac7:	50                   	push   eax
c001dac8:	e8 1b f7 fe ff       	call   c000d1e8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001dacd:	83 c4 14             	add    esp,0x14
c001dad0:	56                   	push   esi
c001dad1:	e8 d2 f7 fe ff       	call   c000d2a8 <LogicalDisk::assignDriveLetter()>
c001dad6:	5a                   	pop    edx
c001dad7:	0f be c0             	movsx  eax,al
c001dada:	59                   	pop    ecx
c001dadb:	50                   	push   eax
c001dadc:	68 f4 24 02 c0       	push   0xc00224f4
c001dae1:	e8 53 ce fe ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c001dae6:	58                   	pop    eax
c001dae7:	5a                   	pop    edx
c001dae8:	56                   	push   esi
c001dae9:	53                   	push   ebx
c001daea:	e8 53 e5 fe ff       	call   c000c042 <Device::addChild(Device*)>
c001daef:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001daf5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001daf8:	e8 79 e9 fe ff       	call   c000c476 <PhysicalDisk::startCache()>
c001dafd:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001db04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001db07:	e8 b2 fe ff ff       	call   c001d9be <SATAPI::detectMedia()>
c001db0c:	83 c4 14             	add    esp,0x14
c001db0f:	31 c0                	xor    eax,eax
c001db11:	5b                   	pop    ebx
c001db12:	5e                   	pop    esi
c001db13:	c3                   	ret    

c001db14 <SATAPI::read(unsigned long long, int, void*)>:
c001db14:	57                   	push   edi
c001db15:	56                   	push   esi
c001db16:	53                   	push   ebx
c001db17:	83 ec 30             	sub    esp,0x30
c001db1a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001db1e:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001db22:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001db26:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001db2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001db2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001db32:	83 fe 04             	cmp    esi,0x4
c001db35:	7e 10                	jle    c001db47 <SATAPI::read(unsigned long long, int, void*)+0x33>
c001db37:	83 ec 0c             	sub    esp,0xc
c001db3a:	68 b0 26 02 c0       	push   0xc00226b0
c001db3f:	e8 57 30 ff ff       	call   c0010b9b <KePanic(char const*)>
c001db44:	83 c4 10             	add    esp,0x10
c001db47:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001db4d:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001db53:	51                   	push   ecx
c001db54:	50                   	push   eax
c001db55:	83 c0 02             	add    eax,0x2
c001db58:	c1 e0 07             	shl    eax,0x7
c001db5b:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001db61:	50                   	push   eax
c001db62:	52                   	push   edx
c001db63:	e8 8c e1 ff ff       	call   c001bcf4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001db68:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001db6c:	b9 03 00 00 00       	mov    ecx,0x3
c001db71:	fc                   	cld    
c001db72:	31 c0                	xor    eax,eax
c001db74:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001db76:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001db7b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001db80:	83 c4 0c             	add    esp,0xc
c001db83:	6a 00                	push   0x0
c001db85:	6a 00                	push   0x0
c001db87:	6a 00                	push   0x0
c001db89:	6a 00                	push   0x0
c001db8b:	6a 02                	push   0x2
c001db8d:	8d 44 24 30          	lea    eax,[esp+0x30]
c001db91:	50                   	push   eax
c001db92:	53                   	push   ebx
c001db93:	e8 0c fb ff ff       	call   c001d6a4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001db98:	83 c4 20             	add    esp,0x20
c001db9b:	85 c0                	test   eax,eax
c001db9d:	75 44                	jne    c001dbe3 <SATAPI::read(unsigned long long, int, void*)+0xcf>
c001db9f:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001dba3:	b9 03 00 00 00       	mov    ecx,0x3
c001dba8:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001dbaa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001dbae:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001dbb3:	0f c8                	bswap  eax
c001dbb5:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001dbb9:	89 f0                	mov    eax,esi
c001dbbb:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001dbbf:	50                   	push   eax
c001dbc0:	56                   	push   esi
c001dbc1:	c1 e6 0b             	shl    esi,0xb
c001dbc4:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001dbc8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001dbcc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001dbd0:	56                   	push   esi
c001dbd1:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001dbd5:	50                   	push   eax
c001dbd6:	53                   	push   ebx
c001dbd7:	e8 c8 fa ff ff       	call   c001d6a4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001dbdc:	83 c4 20             	add    esp,0x20
c001dbdf:	85 c0                	test   eax,eax
c001dbe1:	74 14                	je     c001dbf7 <SATAPI::read(unsigned long long, int, void*)+0xe3>
c001dbe3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001dbe7:	83 ec 0c             	sub    esp,0xc
c001dbea:	53                   	push   ebx
c001dbeb:	e8 ce fd ff ff       	call   c001d9be <SATAPI::detectMedia()>
c001dbf0:	83 c4 10             	add    esp,0x10
c001dbf3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001dbf7:	83 c4 30             	add    esp,0x30
c001dbfa:	5b                   	pop    ebx
c001dbfb:	5e                   	pop    esi
c001dbfc:	5f                   	pop    edi
c001dbfd:	c3                   	ret    

c001dbfe <IOAPIC::close(int, int, void*)>:
c001dbfe:	b8 00 00 00 00       	mov    eax,0x0
c001dc03:	c3                   	ret    

c001dc04 <apicGetBase()>:
c001dc04:	55                   	push   ebp
c001dc05:	89 e5                	mov    ebp,esp
c001dc07:	83 ec 18             	sub    esp,0x18
c001dc0a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001dc0f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001dc15:	83 e0 08             	and    eax,0x8
c001dc18:	0f b6 c0             	movzx  eax,al
c001dc1b:	85 c0                	test   eax,eax
c001dc1d:	75 07                	jne    c001dc26 <apicGetBase()+0x22>
c001dc1f:	b8 00 00 00 00       	mov    eax,0x0
c001dc24:	eb 21                	jmp    c001dc47 <apicGetBase()+0x43>
c001dc26:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001dc2b:	83 ec 08             	sub    esp,0x8
c001dc2e:	6a 1b                	push   0x1b
c001dc30:	50                   	push   eax
c001dc31:	e8 82 94 fe ff       	call   c00070b8 <Computer::rdmsr(unsigned int)>
c001dc36:	83 c4 10             	add    esp,0x10
c001dc39:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001dc3c:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001dc3f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dc42:	25 00 00 ff ff       	and    eax,0xffff0000
c001dc47:	c9                   	leave  
c001dc48:	c3                   	ret    
c001dc49:	90                   	nop

c001dc4a <IOAPIC::IOAPIC()>:
c001dc4a:	83 ec 0c             	sub    esp,0xc
c001dc4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc51:	83 ec 08             	sub    esp,0x8
c001dc54:	68 14 27 02 c0       	push   0xc0022714
c001dc59:	50                   	push   eax
c001dc5a:	e8 7b e5 fe ff       	call   c000c1da <Device::Device(char const*)>
c001dc5f:	83 c4 10             	add    esp,0x10
c001dc62:	ba 24 27 02 c0       	mov    edx,0xc0022724
c001dc67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc6b:	89 10                	mov    DWORD PTR [eax],edx
c001dc6d:	90                   	nop
c001dc6e:	83 c4 0c             	add    esp,0xc
c001dc71:	c3                   	ret    

c001dc72 <apicOpen()>:
c001dc72:	55                   	push   ebp
c001dc73:	89 e5                	mov    ebp,esp
c001dc75:	53                   	push   ebx
c001dc76:	83 ec 34             	sub    esp,0x34
c001dc79:	a0 a0 9b 02 c0       	mov    al,ds:0xc0029ba0
c001dc7e:	83 f0 01             	xor    eax,0x1
c001dc81:	0f b6 c0             	movzx  eax,al
c001dc84:	85 c0                	test   eax,eax
c001dc86:	0f 84 a3 00 00 00    	je     c001dd2f <apicOpen()+0xbd>
c001dc8c:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001dc90:	a0 80 87 02 c0       	mov    al,ds:0xc0028780
c001dc95:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001dc99:	0f b6 c0             	movzx  eax,al
c001dc9c:	39 c2                	cmp    edx,eax
c001dc9e:	0f 83 84 00 00 00    	jae    c001dd28 <apicOpen()+0xb6>
c001dca4:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001dcab:	83 ec 0c             	sub    esp,0xc
c001dcae:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001dcb1:	e8 f8 9d fe ff       	call   c0007aae <malloc>
c001dcb6:	83 c4 10             	add    esp,0x10
c001dcb9:	89 c3                	mov    ebx,eax
c001dcbb:	83 ec 0c             	sub    esp,0xc
c001dcbe:	53                   	push   ebx
c001dcbf:	e8 86 ff ff ff       	call   c001dc4a <IOAPIC::IOAPIC()>
c001dcc4:	83 c4 10             	add    esp,0x10
c001dcc7:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001dcca:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001dcce:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001dcd1:	89 14 85 80 9b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6480],edx
c001dcd8:	a1 60 9b 02 c0       	mov    eax,ds:0xc0029b60
c001dcdd:	83 c0 01             	add    eax,0x1
c001dce0:	a3 60 9b 02 c0       	mov    ds:0xc0029b60,eax
c001dce5:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001dcea:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001dcf0:	83 ec 08             	sub    esp,0x8
c001dcf3:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001dcf6:	50                   	push   eax
c001dcf7:	e8 46 e3 fe ff       	call   c000c042 <Device::addChild(Device*)>
c001dcfc:	83 c4 10             	add    esp,0x10
c001dcff:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001dd02:	8b 00                	mov    eax,DWORD PTR [eax]
c001dd04:	83 c0 08             	add    eax,0x8
c001dd07:	8b 00                	mov    eax,DWORD PTR [eax]
c001dd09:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001dd0d:	6a 00                	push   0x0
c001dd0f:	6a 00                	push   0x0
c001dd11:	52                   	push   edx
c001dd12:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001dd15:	ff d0                	call   eax
c001dd17:	83 c4 10             	add    esp,0x10
c001dd1a:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001dd1d:	83 c0 01             	add    eax,0x1
c001dd20:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001dd23:	e9 68 ff ff ff       	jmp    c001dc90 <apicOpen()+0x1e>
c001dd28:	c6 05 a0 9b 02 c0 01 	mov    BYTE PTR ds:0xc0029ba0,0x1
c001dd2f:	e8 d0 fe ff ff       	call   c001dc04 <apicGetBase()>
c001dd34:	05 f0 00 00 00       	add    eax,0xf0
c001dd39:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001dd3c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001dd3f:	8b 00                	mov    eax,DWORD PTR [eax]
c001dd41:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001dd44:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001dd4b:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001dd52:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001dd55:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001dd58:	89 10                	mov    DWORD PTR [eax],edx
c001dd5a:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001dd61:	a1 d0 86 02 c0       	mov    eax,ds:0xc00286d0
c001dd66:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001dd69:	7d 7c                	jge    c001dde7 <apicOpen()+0x175>
c001dd6b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dd6e:	8b 04 85 e0 86 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7920]
c001dd75:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001dd78:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dd7b:	8b 04 85 e0 86 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7920]
c001dd82:	c1 e8 08             	shr    eax,0x8
c001dd85:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001dd89:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dd8c:	8b 04 85 e0 86 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7920]
c001dd93:	c1 e8 18             	shr    eax,0x18
c001dd96:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001dd99:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001dd9d:	3d ff 00 00 00       	cmp    eax,0xff
c001dda2:	75 3a                	jne    c001ddde <apicOpen()+0x16c>
c001dda4:	e8 5b fe ff ff       	call   c001dc04 <apicGetBase()>
c001dda9:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001ddad:	83 fa 01             	cmp    edx,0x1
c001ddb0:	75 07                	jne    c001ddb9 <apicOpen()+0x147>
c001ddb2:	ba 60 03 00 00       	mov    edx,0x360
c001ddb7:	eb 05                	jmp    c001ddbe <apicOpen()+0x14c>
c001ddb9:	ba 50 03 00 00       	mov    edx,0x350
c001ddbe:	01 d0                	add    eax,edx
c001ddc0:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001ddc3:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ddc6:	8b 00                	mov    eax,DWORD PTR [eax]
c001ddc8:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001ddcb:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001ddd2:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001ddd6:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ddd9:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001dddc:	89 10                	mov    DWORD PTR [eax],edx
c001ddde:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001dde2:	e9 7a ff ff ff       	jmp    c001dd61 <apicOpen()+0xef>
c001dde7:	90                   	nop
c001dde8:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001ddeb:	c9                   	leave  
c001ddec:	c3                   	ret    
c001dded:	90                   	nop

c001ddee <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001ddee:	55                   	push   ebp
c001ddef:	89 e5                	mov    ebp,esp
c001ddf1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ddf4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ddfa:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ddfd:	72 1d                	jb     c001de1c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ddff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001de02:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001de08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001de0b:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001de11:	01 d0                	add    eax,edx
c001de13:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001de16:	73 04                	jae    c001de1c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001de18:	b0 01                	mov    al,0x1
c001de1a:	eb 02                	jmp    c001de1e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001de1c:	b0 00                	mov    al,0x0
c001de1e:	5d                   	pop    ebp
c001de1f:	c3                   	ret    

c001de20 <IOAPIC::read(int)>:
c001de20:	55                   	push   ebp
c001de21:	89 e5                	mov    ebp,esp
c001de23:	83 ec 10             	sub    esp,0x10
c001de26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001de29:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001de2f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001de32:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001de35:	0f b6 d0             	movzx  edx,al
c001de38:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001de3b:	89 10                	mov    DWORD PTR [eax],edx
c001de3d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001de40:	83 c0 10             	add    eax,0x10
c001de43:	8b 00                	mov    eax,DWORD PTR [eax]
c001de45:	c9                   	leave  
c001de46:	c3                   	ret    
c001de47:	90                   	nop

c001de48 <IOAPIC::open(int, int, void*)>:
c001de48:	55                   	push   ebp
c001de49:	89 e5                	mov    ebp,esp
c001de4b:	57                   	push   edi
c001de4c:	56                   	push   esi
c001de4d:	53                   	push   ebx
c001de4e:	83 ec 04             	sub    esp,0x4
c001de51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001de54:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001de57:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001de5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001de60:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001de66:	8b 14 85 c0 87 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7840]
c001de6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001de70:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001de76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001de79:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001de7f:	8b 14 85 40 88 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd77c0]
c001de86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001de89:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001de8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001de92:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001de98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001de9b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001dea1:	0f b6 f0             	movzx  esi,al
c001dea4:	89 d0                	mov    eax,edx
c001dea6:	ba 00 00 00 00       	mov    edx,0x0
c001deab:	89 c7                	mov    edi,eax
c001dead:	83 e7 ff             	and    edi,0xffffffff
c001deb0:	89 f9                	mov    ecx,edi
c001deb2:	0f b6 da             	movzx  ebx,dl
c001deb5:	89 c8                	mov    eax,ecx
c001deb7:	89 da                	mov    edx,ebx
c001deb9:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001debc:	8d 5e 08             	lea    ebx,[esi+0x8]
c001debf:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001dec3:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001dec7:	83 e0 00             	and    eax,0x0
c001deca:	09 d0                	or     eax,edx
c001decc:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001ded0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ded3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ded9:	8d 50 01             	lea    edx,[eax+0x1]
c001dedc:	88 d1                	mov    cl,dl
c001dede:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001dee1:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001dee7:	0f b6 d0             	movzx  edx,al
c001deea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001deed:	83 c2 08             	add    edx,0x8
c001def0:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001def4:	0f b6 c9             	movzx  ecx,cl
c001def7:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001defd:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001df01:	6a 01                	push   0x1
c001df03:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001df06:	e8 15 ff ff ff       	call   c001de20 <IOAPIC::read(int)>
c001df0b:	83 c4 08             	add    esp,0x8
c001df0e:	c1 f8 10             	sar    eax,0x10
c001df11:	0f b6 c0             	movzx  eax,al
c001df14:	8d 50 01             	lea    edx,[eax+0x1]
c001df17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001df1a:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001df20:	b8 00 00 00 00       	mov    eax,0x0
c001df25:	8d 65 f4             	lea    esp,[ebp-0xc]
c001df28:	5b                   	pop    ebx
c001df29:	5e                   	pop    esi
c001df2a:	5f                   	pop    edi
c001df2b:	5d                   	pop    ebp
c001df2c:	c3                   	ret    
c001df2d:	90                   	nop

c001df2e <IOAPIC::write(int, int)>:
c001df2e:	55                   	push   ebp
c001df2f:	89 e5                	mov    ebp,esp
c001df31:	83 ec 10             	sub    esp,0x10
c001df34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001df37:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001df3d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001df40:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001df43:	0f b6 d0             	movzx  edx,al
c001df46:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001df49:	89 10                	mov    DWORD PTR [eax],edx
c001df4b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001df4e:	8d 50 10             	lea    edx,[eax+0x10]
c001df51:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001df54:	89 02                	mov    DWORD PTR [edx],eax
c001df56:	90                   	nop
c001df57:	c9                   	leave  
c001df58:	c3                   	ret    
c001df59:	90                   	nop

c001df5a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001df5a:	55                   	push   ebp
c001df5b:	89 e5                	mov    ebp,esp
c001df5d:	53                   	push   ebx
c001df5e:	83 ec 2c             	sub    esp,0x2c
c001df61:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001df64:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001df67:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001df6a:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001df6d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001df70:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001df73:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001df76:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001df79:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001df7c:	88 d8                	mov    al,bl
c001df7e:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001df81:	88 c8                	mov    al,cl
c001df83:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001df86:	88 d0                	mov    al,dl
c001df88:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001df8b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001df8f:	83 c0 08             	add    eax,0x8
c001df92:	01 c0                	add    eax,eax
c001df94:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001df97:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001df9b:	83 c0 08             	add    eax,0x8
c001df9e:	01 c0                	add    eax,eax
c001dfa0:	83 c0 01             	add    eax,0x1
c001dfa3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001dfa6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001dfa9:	50                   	push   eax
c001dfaa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dfad:	e8 6e fe ff ff       	call   c001de20 <IOAPIC::read(int)>
c001dfb2:	83 c4 08             	add    esp,0x8
c001dfb5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001dfb8:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001dfbf:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001dfc2:	c1 e0 18             	shl    eax,0x18
c001dfc5:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001dfc8:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001dfcb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001dfce:	52                   	push   edx
c001dfcf:	50                   	push   eax
c001dfd0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dfd3:	e8 56 ff ff ff       	call   c001df2e <IOAPIC::write(int, int)>
c001dfd8:	83 c4 0c             	add    esp,0xc
c001dfdb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dfde:	50                   	push   eax
c001dfdf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dfe2:	e8 39 fe ff ff       	call   c001de20 <IOAPIC::read(int)>
c001dfe7:	83 c4 08             	add    esp,0x8
c001dfea:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001dfed:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001dff4:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001dffb:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001e002:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001e006:	85 c0                	test   eax,eax
c001e008:	74 09                	je     c001e013 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001e00a:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001e011:	eb 07                	jmp    c001e01a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001e013:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001e01a:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001e01e:	85 c0                	test   eax,eax
c001e020:	74 09                	je     c001e02b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001e022:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001e029:	eb 07                	jmp    c001e032 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001e02b:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001e032:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001e039:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001e03d:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001e040:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001e043:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e046:	52                   	push   edx
c001e047:	50                   	push   eax
c001e048:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e04b:	e8 de fe ff ff       	call   c001df2e <IOAPIC::write(int, int)>
c001e050:	83 c4 0c             	add    esp,0xc
c001e053:	90                   	nop
c001e054:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001e057:	c9                   	leave  
c001e058:	c3                   	ret    
c001e059:	66 90                	xchg   ax,ax
c001e05b:	90                   	nop

c001e05c <APICTimer::close(int, int, void*)>:
c001e05c:	b8 00 00 00 00       	mov    eax,0x0
c001e061:	c3                   	ret    
c001e062:	66 90                	xchg   ax,ax

c001e064 <apicTimerHandler(regs*, void*)>:
c001e064:	83 ec 0c             	sub    esp,0xc
c001e067:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e06b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e06d:	b8 10 27 00 00       	mov    eax,0x2710
c001e072:	ba 00 00 00 00       	mov    edx,0x0
c001e077:	f7 f1                	div    ecx
c001e079:	83 ec 0c             	sub    esp,0xc
c001e07c:	50                   	push   eax
c001e07d:	e8 22 fa fe ff       	call   c000daa4 <timerHandler(unsigned int)>
c001e082:	83 c4 10             	add    esp,0x10
c001e085:	90                   	nop
c001e086:	83 c4 0c             	add    esp,0xc
c001e089:	c3                   	ret    
c001e08a:	66 90                	xchg   ax,ax

c001e08c <APICTimer::open(int, int, void*)>:
c001e08c:	83 ec 0c             	sub    esp,0xc
c001e08f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e093:	8b 00                	mov    eax,DWORD PTR [eax]
c001e095:	83 c0 24             	add    eax,0x24
c001e098:	8b 00                	mov    eax,DWORD PTR [eax]
c001e09a:	83 ec 08             	sub    esp,0x8
c001e09d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e0a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e0a5:	ff d0                	call   eax
c001e0a7:	83 c4 10             	add    esp,0x10
c001e0aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0ae:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e0b2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e0b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0bc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e0c0:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001e0c6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e0ca:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001e0d0:	83 ec 0c             	sub    esp,0xc
c001e0d3:	51                   	push   ecx
c001e0d4:	6a 01                	push   0x1
c001e0d6:	68 64 e0 01 c0       	push   0xc001e064
c001e0db:	52                   	push   edx
c001e0dc:	50                   	push   eax
c001e0dd:	e8 0c df fe ff       	call   c000bfee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e0e2:	83 c4 20             	add    esp,0x20
c001e0e5:	89 c2                	mov    edx,eax
c001e0e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0eb:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e0f1:	b8 00 00 00 00       	mov    eax,0x0
c001e0f6:	83 c4 0c             	add    esp,0xc
c001e0f9:	c3                   	ret    
c001e0fa:	66 90                	xchg   ax,ax

c001e0fc <APICTimer::write(int)>:
c001e0fc:	83 ec 0c             	sub    esp,0xc
c001e0ff:	83 ec 0c             	sub    esp,0xc
c001e102:	68 48 27 02 c0       	push   0xc0022748
c001e107:	e8 8f 2a ff ff       	call   c0010b9b <KePanic(char const*)>
c001e10c:	83 c4 10             	add    esp,0x10
c001e10f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e113:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e117:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e11d:	90                   	nop
c001e11e:	83 c4 0c             	add    esp,0xc
c001e121:	c3                   	ret    
c001e122:	66 90                	xchg   ax,ax

c001e124 <APICTimer::APICTimer()>:
c001e124:	83 ec 0c             	sub    esp,0xc
c001e127:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e12b:	83 ec 08             	sub    esp,0x8
c001e12e:	68 58 27 02 c0       	push   0xc0022758
c001e133:	50                   	push   eax
c001e134:	e8 9f f8 fe ff       	call   c000d9d8 <Timer::Timer(char const*)>
c001e139:	83 c4 10             	add    esp,0x10
c001e13c:	ba 6c 27 02 c0       	mov    edx,0xc002276c
c001e141:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e145:	89 10                	mov    DWORD PTR [eax],edx
c001e147:	90                   	nop
c001e148:	83 c4 0c             	add    esp,0xc
c001e14b:	c3                   	ret    

c001e14c <PIT::write(int)>:
c001e14c:	83 ec 10             	sub    esp,0x10
c001e14f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e153:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e157:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e15d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e161:	a3 a4 9b 02 c0       	mov    ds:0xc0029ba4,eax
c001e166:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001e16b:	89 c2                	mov    edx,eax
c001e16d:	c1 fa 1f             	sar    edx,0x1f
c001e170:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001e174:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e178:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001e17f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001e184:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001e188:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001e18d:	ee                   	out    dx,al
c001e18e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e192:	0f b6 c0             	movzx  eax,al
c001e195:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001e19c:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001e1a0:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001e1a4:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001e1a9:	ee                   	out    dx,al
c001e1aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e1ae:	c1 f8 08             	sar    eax,0x8
c001e1b1:	0f b6 c0             	movzx  eax,al
c001e1b4:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001e1bb:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001e1bf:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001e1c3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001e1c8:	ee                   	out    dx,al
c001e1c9:	90                   	nop
c001e1ca:	83 c4 10             	add    esp,0x10
c001e1cd:	c3                   	ret    
c001e1ce:	66 90                	xchg   ax,ax

c001e1d0 <pitHandler(regs*, void*)>:
c001e1d0:	83 ec 0c             	sub    esp,0xc
c001e1d3:	8b 0d a4 9b 02 c0    	mov    ecx,DWORD PTR ds:0xc0029ba4
c001e1d9:	b8 10 27 00 00       	mov    eax,0x2710
c001e1de:	89 c2                	mov    edx,eax
c001e1e0:	c1 fa 1f             	sar    edx,0x1f
c001e1e3:	f7 f9                	idiv   ecx
c001e1e5:	83 ec 0c             	sub    esp,0xc
c001e1e8:	50                   	push   eax
c001e1e9:	e8 b6 f8 fe ff       	call   c000daa4 <timerHandler(unsigned int)>
c001e1ee:	83 c4 10             	add    esp,0x10
c001e1f1:	90                   	nop
c001e1f2:	83 c4 0c             	add    esp,0xc
c001e1f5:	c3                   	ret    
c001e1f6:	66 90                	xchg   ax,ax

c001e1f8 <PIT::open(int, int, void*)>:
c001e1f8:	83 ec 0c             	sub    esp,0xc
c001e1fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1ff:	8b 00                	mov    eax,DWORD PTR [eax]
c001e201:	83 c0 24             	add    eax,0x24
c001e204:	8b 00                	mov    eax,DWORD PTR [eax]
c001e206:	83 ec 08             	sub    esp,0x8
c001e209:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e20d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e211:	ff d0                	call   eax
c001e213:	83 c4 10             	add    esp,0x10
c001e216:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e21a:	83 ec 0c             	sub    esp,0xc
c001e21d:	6a 00                	push   0x0
c001e21f:	6a 01                	push   0x1
c001e221:	68 d0 e1 01 c0       	push   0xc001e1d0
c001e226:	6a 00                	push   0x0
c001e228:	50                   	push   eax
c001e229:	e8 c0 dd fe ff       	call   c000bfee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e22e:	83 c4 20             	add    esp,0x20
c001e231:	89 c2                	mov    edx,eax
c001e233:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e237:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e23d:	b8 00 00 00 00       	mov    eax,0x0
c001e242:	83 c4 0c             	add    esp,0xc
c001e245:	c3                   	ret    
c001e246:	66 90                	xchg   ax,ax

c001e248 <PIT::close(int, int, void*)>:
c001e248:	83 ec 0c             	sub    esp,0xc
c001e24b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e24f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001e259:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e25d:	6a 01                	push   0x1
c001e25f:	68 d0 e1 01 c0       	push   0xc001e1d0
c001e264:	6a 00                	push   0x0
c001e266:	50                   	push   eax
c001e267:	e8 b8 dd fe ff       	call   c000c024 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001e26c:	83 c4 10             	add    esp,0x10
c001e26f:	b8 00 00 00 00       	mov    eax,0x0
c001e274:	83 c4 0c             	add    esp,0xc
c001e277:	c3                   	ret    

c001e278 <PIT::PIT()>:
c001e278:	83 ec 0c             	sub    esp,0xc
c001e27b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e27f:	83 ec 08             	sub    esp,0x8
c001e282:	68 94 27 02 c0       	push   0xc0022794
c001e287:	50                   	push   eax
c001e288:	e8 4b f7 fe ff       	call   c000d9d8 <Timer::Timer(char const*)>
c001e28d:	83 c4 10             	add    esp,0x10
c001e290:	ba bc 27 02 c0       	mov    edx,0xc00227bc
c001e295:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e299:	89 10                	mov    DWORD PTR [eax],edx
c001e29b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e29f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e2a5:	0f b6 d0             	movzx  edx,al
c001e2a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2ac:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001e2b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2b7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e2bd:	0f b6 d0             	movzx  edx,al
c001e2c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2c4:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001e2c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2cd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e2d3:	8d 50 01             	lea    edx,[eax+0x1]
c001e2d6:	88 d1                	mov    cl,dl
c001e2d8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e2dc:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001e2e2:	0f b6 d0             	movzx  edx,al
c001e2e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2e9:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001e2ed:	83 e1 3f             	and    ecx,0x3f
c001e2f0:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001e2f4:	90                   	nop
c001e2f5:	83 c4 0c             	add    esp,0xc
c001e2f8:	c3                   	ret    
c001e2f9:	66 90                	xchg   ax,ax
c001e2fb:	66 90                	xchg   ax,ax
c001e2fd:	66 90                	xchg   ax,ax
c001e2ff:	90                   	nop

c001e300 <avxDetect>:
c001e300:	b8 01 00 00 00       	mov    eax,0x1
c001e305:	0f a2                	cpuid  
c001e307:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001e30d:	74 15                	je     c001e324 <avxDetect.noAVX>
c001e30f:	b8 01 00 00 00       	mov    eax,0x1
c001e314:	0f a2                	cpuid  
c001e316:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001e31c:	74 06                	je     c001e324 <avxDetect.noAVX>
c001e31e:	b8 01 00 00 00       	mov    eax,0x1
c001e323:	c3                   	ret    

c001e324 <avxDetect.noAVX>:
c001e324:	b8 00 00 00 00       	mov    eax,0x0
c001e329:	c3                   	ret    

c001e32a <avxSave>:
c001e32a:	53                   	push   ebx
c001e32b:	52                   	push   edx
c001e32c:	31 c0                	xor    eax,eax
c001e32e:	48                   	dec    eax
c001e32f:	89 c2                	mov    edx,eax
c001e331:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e335:	0f ae 23             	xsave  [ebx]
c001e338:	5a                   	pop    edx
c001e339:	5b                   	pop    ebx
c001e33a:	c3                   	ret    

c001e33b <avxLoad>:
c001e33b:	53                   	push   ebx
c001e33c:	52                   	push   edx
c001e33d:	31 c0                	xor    eax,eax
c001e33f:	48                   	dec    eax
c001e340:	89 c2                	mov    edx,eax
c001e342:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e346:	0f ae 2b             	xrstor [ebx]
c001e349:	5a                   	pop    edx
c001e34a:	5b                   	pop    ebx
c001e34b:	c3                   	ret    

c001e34c <avxInit>:
c001e34c:	e8 67 03 00 00       	call   c001e6b8 <sseInit>
c001e351:	50                   	push   eax
c001e352:	51                   	push   ecx
c001e353:	0f 20 e0             	mov    eax,cr4
c001e356:	0d 00 00 04 00       	or     eax,0x40000
c001e35b:	0f 22 e0             	mov    cr4,eax
c001e35e:	31 c9                	xor    ecx,ecx
c001e360:	0f 01 d0             	xgetbv 
c001e363:	0d 07 00 00 00       	or     eax,0x7
c001e368:	0f 01 d1             	xsetbv 
c001e36b:	59                   	pop    ecx
c001e36c:	58                   	pop    eax
c001e36d:	c3                   	ret    

c001e36e <avxClose>:
c001e36e:	c3                   	ret    

c001e36f <wouldSheSayYes>:
c001e36f:	c3                   	ret    
c001e370:	49                   	dec    ecx
c001e371:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001e375:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001e379:	75 20                	jne    c001e39b <isr0+0xb>
c001e37b:	4e                   	dec    esi
c001e37c:	79 61                	jns    c001e3df <isr7+0x3>
c001e37e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001e383:	66 90                	xchg   ax,ax
c001e385:	66 90                	xchg   ax,ax
c001e387:	66 90                	xchg   ax,ax
c001e389:	66 90                	xchg   ax,ax
c001e38b:	66 90                	xchg   ax,ax
c001e38d:	66 90                	xchg   ax,ax
c001e38f:	90                   	nop

c001e390 <isr0>:
c001e390:	fa                   	cli    
c001e391:	68 00 00 00 00       	push   0x0
c001e396:	68 00 00 00 00       	push   0x0
c001e39b:	e9 56 01 00 00       	jmp    c001e4f6 <int_common_stub>

c001e3a0 <isr1>:
c001e3a0:	fa                   	cli    
c001e3a1:	6a 00                	push   0x0
c001e3a3:	6a 01                	push   0x1
c001e3a5:	e9 4c 01 00 00       	jmp    c001e4f6 <int_common_stub>

c001e3aa <isr2>:
c001e3aa:	fa                   	cli    
c001e3ab:	6a 00                	push   0x0
c001e3ad:	6a 02                	push   0x2
c001e3af:	e9 42 01 00 00       	jmp    c001e4f6 <int_common_stub>

c001e3b4 <isr3>:
c001e3b4:	fa                   	cli    
c001e3b5:	6a 00                	push   0x0
c001e3b7:	6a 03                	push   0x3
c001e3b9:	e9 38 01 00 00       	jmp    c001e4f6 <int_common_stub>

c001e3be <isr4>:
c001e3be:	fa                   	cli    
c001e3bf:	6a 00                	push   0x0
c001e3c1:	6a 04                	push   0x4
c001e3c3:	e9 2e 01 00 00       	jmp    c001e4f6 <int_common_stub>

c001e3c8 <isr5>:
c001e3c8:	fa                   	cli    
c001e3c9:	6a 00                	push   0x0
c001e3cb:	6a 05                	push   0x5
c001e3cd:	e9 24 01 00 00       	jmp    c001e4f6 <int_common_stub>

c001e3d2 <isr6>:
c001e3d2:	fa                   	cli    
c001e3d3:	6a 00                	push   0x0
c001e3d5:	6a 06                	push   0x6
c001e3d7:	e9 1a 01 00 00       	jmp    c001e4f6 <int_common_stub>

c001e3dc <isr7>:
c001e3dc:	fa                   	cli    
c001e3dd:	6a 00                	push   0x0
c001e3df:	6a 07                	push   0x7
c001e3e1:	e9 10 01 00 00       	jmp    c001e4f6 <int_common_stub>

c001e3e6 <isr8>:
c001e3e6:	fa                   	cli    
c001e3e7:	6a 08                	push   0x8
c001e3e9:	e9 08 01 00 00       	jmp    c001e4f6 <int_common_stub>

c001e3ee <isr9>:
c001e3ee:	fa                   	cli    
c001e3ef:	6a 00                	push   0x0
c001e3f1:	6a 09                	push   0x9
c001e3f3:	e9 fe 00 00 00       	jmp    c001e4f6 <int_common_stub>

c001e3f8 <isr10>:
c001e3f8:	fa                   	cli    
c001e3f9:	6a 0a                	push   0xa
c001e3fb:	e9 f6 00 00 00       	jmp    c001e4f6 <int_common_stub>

c001e400 <isr11>:
c001e400:	fa                   	cli    
c001e401:	6a 0b                	push   0xb
c001e403:	e9 ee 00 00 00       	jmp    c001e4f6 <int_common_stub>

c001e408 <isr12>:
c001e408:	fa                   	cli    
c001e409:	6a 0c                	push   0xc
c001e40b:	e9 e6 00 00 00       	jmp    c001e4f6 <int_common_stub>

c001e410 <isr13>:
c001e410:	fa                   	cli    
c001e411:	6a 0d                	push   0xd
c001e413:	53                   	push   ebx
c001e414:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e418:	81 fb e6 e5 01 c0    	cmp    ebx,0xc001e5e6
c001e41e:	5b                   	pop    ebx
c001e41f:	0f 84 c3 01 00 00    	je     c001e5e8 <finishSignal2>
c001e425:	e9 cc 00 00 00       	jmp    c001e4f6 <int_common_stub>

c001e42a <isr14>:
c001e42a:	fa                   	cli    
c001e42b:	6a 0e                	push   0xe
c001e42d:	e9 c4 00 00 00       	jmp    c001e4f6 <int_common_stub>

c001e432 <isr15>:
c001e432:	fa                   	cli    
c001e433:	6a 00                	push   0x0
c001e435:	6a 0f                	push   0xf
c001e437:	e9 ba 00 00 00       	jmp    c001e4f6 <int_common_stub>

c001e43c <isr16>:
c001e43c:	fa                   	cli    
c001e43d:	6a 00                	push   0x0
c001e43f:	6a 10                	push   0x10
c001e441:	e9 b0 00 00 00       	jmp    c001e4f6 <int_common_stub>

c001e446 <isr17>:
c001e446:	fa                   	cli    
c001e447:	6a 00                	push   0x0
c001e449:	6a 11                	push   0x11
c001e44b:	e9 a6 00 00 00       	jmp    c001e4f6 <int_common_stub>

c001e450 <isr18>:
c001e450:	fa                   	cli    
c001e451:	6a 00                	push   0x0
c001e453:	6a 12                	push   0x12
c001e455:	e9 9c 00 00 00       	jmp    c001e4f6 <int_common_stub>

c001e45a <irq3>:
c001e45a:	fa                   	cli    
c001e45b:	6a 00                	push   0x0
c001e45d:	6a 23                	push   0x23
c001e45f:	e9 92 00 00 00       	jmp    c001e4f6 <int_common_stub>

c001e464 <irq4>:
c001e464:	fa                   	cli    
c001e465:	6a 00                	push   0x0
c001e467:	6a 24                	push   0x24
c001e469:	e9 88 00 00 00       	jmp    c001e4f6 <int_common_stub>

c001e46e <irq5>:
c001e46e:	fa                   	cli    
c001e46f:	6a 00                	push   0x0
c001e471:	6a 25                	push   0x25
c001e473:	e9 7e 00 00 00       	jmp    c001e4f6 <int_common_stub>

c001e478 <irq6>:
c001e478:	fa                   	cli    
c001e479:	6a 00                	push   0x0
c001e47b:	6a 26                	push   0x26
c001e47d:	e9 74 00 00 00       	jmp    c001e4f6 <int_common_stub>

c001e482 <irq7>:
c001e482:	fa                   	cli    
c001e483:	6a 00                	push   0x0
c001e485:	6a 27                	push   0x27
c001e487:	e9 6a 00 00 00       	jmp    c001e4f6 <int_common_stub>

c001e48c <irq8>:
c001e48c:	fa                   	cli    
c001e48d:	6a 00                	push   0x0
c001e48f:	6a 28                	push   0x28
c001e491:	e9 60 00 00 00       	jmp    c001e4f6 <int_common_stub>

c001e496 <irq9>:
c001e496:	fa                   	cli    
c001e497:	6a 00                	push   0x0
c001e499:	6a 29                	push   0x29
c001e49b:	e9 56 00 00 00       	jmp    c001e4f6 <int_common_stub>

c001e4a0 <irq10>:
c001e4a0:	fa                   	cli    
c001e4a1:	6a 00                	push   0x0
c001e4a3:	6a 2a                	push   0x2a
c001e4a5:	e9 4c 00 00 00       	jmp    c001e4f6 <int_common_stub>

c001e4aa <irq11>:
c001e4aa:	fa                   	cli    
c001e4ab:	6a 00                	push   0x0
c001e4ad:	6a 2b                	push   0x2b
c001e4af:	e9 42 00 00 00       	jmp    c001e4f6 <int_common_stub>

c001e4b4 <irq12>:
c001e4b4:	fa                   	cli    
c001e4b5:	6a 00                	push   0x0
c001e4b7:	6a 2c                	push   0x2c
c001e4b9:	e9 38 00 00 00       	jmp    c001e4f6 <int_common_stub>

c001e4be <irq13>:
c001e4be:	fa                   	cli    
c001e4bf:	6a 00                	push   0x0
c001e4c1:	6a 2d                	push   0x2d
c001e4c3:	e9 2e 00 00 00       	jmp    c001e4f6 <int_common_stub>

c001e4c8 <irq14>:
c001e4c8:	fa                   	cli    
c001e4c9:	6a 00                	push   0x0
c001e4cb:	6a 2e                	push   0x2e
c001e4cd:	e9 24 00 00 00       	jmp    c001e4f6 <int_common_stub>

c001e4d2 <irq15>:
c001e4d2:	fa                   	cli    
c001e4d3:	6a 00                	push   0x0
c001e4d5:	6a 2f                	push   0x2f
c001e4d7:	e9 1a 00 00 00       	jmp    c001e4f6 <int_common_stub>

c001e4dc <irq1>:
c001e4dc:	fa                   	cli    
c001e4dd:	6a 00                	push   0x0
c001e4df:	6a 21                	push   0x21
c001e4e1:	eb 13                	jmp    c001e4f6 <int_common_stub>

c001e4e3 <irq2>:
c001e4e3:	fa                   	cli    
c001e4e4:	6a 00                	push   0x0
c001e4e6:	6a 22                	push   0x22
c001e4e8:	eb 0c                	jmp    c001e4f6 <int_common_stub>

c001e4ea <isr96>:
c001e4ea:	6a 00                	push   0x0
c001e4ec:	6a 60                	push   0x60
c001e4ee:	fb                   	sti    
c001e4ef:	eb 37                	jmp    c001e528 <syscall_common_stub>

c001e4f1 <irq0>:
c001e4f1:	fa                   	cli    
c001e4f2:	6a 00                	push   0x0
c001e4f4:	6a 20                	push   0x20

c001e4f6 <int_common_stub>:
c001e4f6:	60                   	pusha  
c001e4f7:	1e                   	push   ds
c001e4f8:	06                   	push   es
c001e4f9:	0f a0                	push   fs
c001e4fb:	0f a8                	push   gs
c001e4fd:	66 b8 10 00          	mov    ax,0x10
c001e501:	66 8e d8             	mov    ds,ax
c001e504:	66 8e c0             	mov    es,ax
c001e507:	66 8e e0             	mov    fs,ax
c001e50a:	66 8e e8             	mov    gs,ax
c001e50d:	54                   	push   esp
c001e50e:	fc                   	cld    
c001e50f:	e8 d8 df fe ff       	call   c000c4ec <int_handler>
c001e514:	81 c4 04 00 00 00    	add    esp,0x4
c001e51a:	0f a9                	pop    gs
c001e51c:	0f a1                	pop    fs
c001e51e:	07                   	pop    es
c001e51f:	1f                   	pop    ds
c001e520:	61                   	popa   
c001e521:	81 c4 08 00 00 00    	add    esp,0x8
c001e527:	cf                   	iret   

c001e528 <syscall_common_stub>:
c001e528:	60                   	pusha  
c001e529:	1e                   	push   ds
c001e52a:	06                   	push   es
c001e52b:	0f a0                	push   fs
c001e52d:	0f a8                	push   gs
c001e52f:	66 b8 10 00          	mov    ax,0x10
c001e533:	66 8e d8             	mov    ds,ax
c001e536:	66 8e c0             	mov    es,ax
c001e539:	66 8e e0             	mov    fs,ax
c001e53c:	66 8e e8             	mov    gs,ax
c001e53f:	54                   	push   esp
c001e540:	fc                   	cld    
c001e541:	e8 a6 df fe ff       	call   c000c4ec <int_handler>
c001e546:	81 c4 04 00 00 00    	add    esp,0x4
c001e54c:	0f a9                	pop    gs
c001e54e:	0f a1                	pop    fs
c001e550:	07                   	pop    es
c001e551:	1f                   	pop    ds
c001e552:	e8 5b 2c ff ff       	call   c00111b2 <KiCheckSignalZ>
c001e557:	3d 00 00 00 00       	cmp    eax,0x0
c001e55c:	0f 84 c0 00 00 00    	je     c001e622 <skipSignals>
c001e562:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001e567:	61                   	popa   
c001e568:	53                   	push   ebx
c001e569:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001e56f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001e572:	5b                   	pop    ebx
c001e573:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001e578:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001e57b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001e57e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e581:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001e584:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001e587:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001e58a:	81 c4 08 00 00 00    	add    esp,0x8
c001e590:	5e                   	pop    esi
c001e591:	5b                   	pop    ebx
c001e592:	59                   	pop    ecx
c001e593:	5a                   	pop    edx
c001e594:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001e597:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001e59a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001e59d:	52                   	push   edx
c001e59e:	51                   	push   ecx
c001e59f:	53                   	push   ebx
c001e5a0:	56                   	push   esi
c001e5a1:	81 ec 08 00 00 00    	sub    esp,0x8
c001e5a7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001e5aa:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001e5ad:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001e5b0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e5b3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e5b6:	60                   	pusha  
c001e5b7:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001e5bd:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001e5c0:	89 e3                	mov    ebx,esp
c001e5c2:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001e5c5:	52                   	push   edx
c001e5c6:	68 e6 e5 01 c0       	push   0xc001e5e6
c001e5cb:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001e5ce:	89 dc                	mov    esp,ebx
c001e5d0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001e5d3:	68 23 00 00 00       	push   0x23
c001e5d8:	51                   	push   ecx
c001e5d9:	68 02 02 00 00       	push   0x202
c001e5de:	68 1b 00 00 00       	push   0x1b
c001e5e3:	ff 36                	push   DWORD PTR [esi]
c001e5e5:	cf                   	iret   

c001e5e6 <finishSignal>:
c001e5e6:	cd 0f                	int    0xf

c001e5e8 <finishSignal2>:
c001e5e8:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001e5ee:	e8 3c 2c ff ff       	call   c001122f <KiFinishSignalZ>
c001e5f3:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001e5f9:	68 23 00 00 00       	push   0x23
c001e5fe:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001e601:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001e604:	68 1b 00 00 00       	push   0x1b
c001e609:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001e60c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e60f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001e612:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001e615:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001e618:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001e61b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001e61e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001e621:	cf                   	iret   

c001e622 <skipSignals>:
c001e622:	61                   	popa   
c001e623:	81 c4 08 00 00 00    	add    esp,0x8
c001e629:	cf                   	iret   
c001e62a:	90                   	nop
c001e62b:	90                   	nop

c001e62c <irq16>:
c001e62c:	fa                   	cli    
c001e62d:	6a 00                	push   0x0
c001e62f:	6a 30                	push   0x30
c001e631:	e9 c0 fe ff ff       	jmp    c001e4f6 <int_common_stub>

c001e636 <irq17>:
c001e636:	fa                   	cli    
c001e637:	6a 00                	push   0x0
c001e639:	6a 31                	push   0x31
c001e63b:	e9 b6 fe ff ff       	jmp    c001e4f6 <int_common_stub>

c001e640 <irq18>:
c001e640:	fa                   	cli    
c001e641:	6a 00                	push   0x0
c001e643:	6a 32                	push   0x32
c001e645:	e9 ac fe ff ff       	jmp    c001e4f6 <int_common_stub>

c001e64a <irq19>:
c001e64a:	fa                   	cli    
c001e64b:	6a 00                	push   0x0
c001e64d:	6a 33                	push   0x33
c001e64f:	e9 a2 fe ff ff       	jmp    c001e4f6 <int_common_stub>

c001e654 <irq20>:
c001e654:	fa                   	cli    
c001e655:	6a 00                	push   0x0
c001e657:	6a 34                	push   0x34
c001e659:	e9 98 fe ff ff       	jmp    c001e4f6 <int_common_stub>

c001e65e <irq21>:
c001e65e:	fa                   	cli    
c001e65f:	6a 00                	push   0x0
c001e661:	6a 35                	push   0x35
c001e663:	e9 8e fe ff ff       	jmp    c001e4f6 <int_common_stub>

c001e668 <irq22>:
c001e668:	fa                   	cli    
c001e669:	6a 00                	push   0x0
c001e66b:	6a 36                	push   0x36
c001e66d:	e9 84 fe ff ff       	jmp    c001e4f6 <int_common_stub>

c001e672 <irq23>:
c001e672:	fa                   	cli    
c001e673:	6a 00                	push   0x0
c001e675:	6a 37                	push   0x37
c001e677:	e9 7a fe ff ff       	jmp    c001e4f6 <int_common_stub>
c001e67c:	66 90                	xchg   ax,ax
c001e67e:	66 90                	xchg   ax,ax

c001e680 <i386GetRDRAND>:
c001e680:	b9 64 00 00 00       	mov    ecx,0x64

c001e685 <retry>:
c001e685:	0f c7 f0             	rdrand eax
c001e688:	72 05                	jb     c001e68f <retry.done>
c001e68a:	e2 f9                	loop   c001e685 <retry>

c001e68c <retry.fail>:
c001e68c:	31 c0                	xor    eax,eax
c001e68e:	c3                   	ret    

c001e68f <retry.done>:
c001e68f:	c3                   	ret    

c001e690 <absolutelyNoChanceInHell>:
c001e690:	b8 01 00 00 00       	mov    eax,0x1
c001e695:	0f a2                	cpuid  
c001e697:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001e69d:	74 06                	je     c001e6a5 <sseDetect.noSSE>
c001e69f:	b8 01 00 00 00       	mov    eax,0x1
c001e6a4:	c3                   	ret    

c001e6a5 <sseDetect.noSSE>:
c001e6a5:	31 c0                	xor    eax,eax
c001e6a7:	c3                   	ret    

c001e6a8 <sseSave>:
c001e6a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e6ac:	0f ae 00             	fxsave [eax]
c001e6af:	c3                   	ret    

c001e6b0 <sseLoad>:
c001e6b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e6b4:	0f ae 08             	fxrstor [eax]
c001e6b7:	c3                   	ret    

c001e6b8 <sseInit>:
c001e6b8:	e8 42 00 00 00       	call   c001e6ff <x87Init>
c001e6bd:	0f 20 e0             	mov    eax,cr4
c001e6c0:	66 0d 00 06          	or     ax,0x600
c001e6c4:	0f 22 e0             	mov    cr4,eax
c001e6c7:	c3                   	ret    

c001e6c8 <sseClose>:
c001e6c8:	c3                   	ret    
c001e6c9:	66 90                	xchg   ax,ax
c001e6cb:	66 90                	xchg   ax,ax
c001e6cd:	66 90                	xchg   ax,ax
c001e6cf:	90                   	nop

c001e6d0 <value_37F>:
c001e6d0:	7f 03                	jg     c001e6d5 <value_37A+0x1>

c001e6d2 <value_37E>:
c001e6d2:	7e 03                	jle    c001e6d7 <x87Detect+0x1>

c001e6d4 <value_37A>:
c001e6d4:	7a 03                	jp     c001e6d9 <x87Detect+0x3>

c001e6d6 <x87Detect>:
c001e6d6:	b8 01 00 00 00       	mov    eax,0x1
c001e6db:	0f a2                	cpuid  
c001e6dd:	f7 c2 01 00 00 00    	test   edx,0x1
c001e6e3:	74 06                	je     c001e6eb <x87Detect.nox87>
c001e6e5:	b8 01 00 00 00       	mov    eax,0x1
c001e6ea:	c3                   	ret    

c001e6eb <x87Detect.nox87>:
c001e6eb:	b8 00 00 00 00       	mov    eax,0x0
c001e6f0:	c3                   	ret    

c001e6f1 <x87Save>:
c001e6f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e6f5:	dd 30                	fnsave [eax]
c001e6f7:	c3                   	ret    

c001e6f8 <x87Load>:
c001e6f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e6fc:	dd 20                	frstor [eax]
c001e6fe:	c3                   	ret    

c001e6ff <x87Init>:
c001e6ff:	0f 20 c0             	mov    eax,cr0
c001e702:	66 25 fb ff          	and    ax,0xfffb
c001e706:	66 0d 22 00          	or     ax,0x22
c001e70a:	0f 22 c0             	mov    cr0,eax
c001e70d:	db e3                	fninit 
c001e70f:	0f 06                	clts   
c001e711:	d9 2d d4 e6 01 c0    	fldcw  WORD PTR ds:0xc001e6d4
c001e717:	c3                   	ret    

c001e718 <x87Close>:
c001e718:	c3                   	ret    
c001e719:	66 90                	xchg   ax,ax
c001e71b:	90                   	nop

c001e71c <__do_global_ctors_aux>:
c001e71c:	a1 d0 f6 01 c0       	mov    eax,ds:0xc001f6d0
c001e721:	83 f8 ff             	cmp    eax,0xffffffff
c001e724:	74 1a                	je     c001e740 <__do_global_ctors_aux+0x24>
c001e726:	55                   	push   ebp
c001e727:	89 e5                	mov    ebp,esp
c001e729:	53                   	push   ebx
c001e72a:	52                   	push   edx
c001e72b:	bb d0 f6 01 c0       	mov    ebx,0xc001f6d0
c001e730:	ff d0                	call   eax
c001e732:	83 eb 04             	sub    ebx,0x4
c001e735:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e737:	83 f8 ff             	cmp    eax,0xffffffff
c001e73a:	75 f4                	jne    c001e730 <__do_global_ctors_aux+0x14>
c001e73c:	58                   	pop    eax
c001e73d:	5b                   	pop    ebx
c001e73e:	5d                   	pop    ebp
c001e73f:	c3                   	ret    
c001e740:	c3                   	ret    
c001e741:	66 90                	xchg   ax,ax
c001e743:	90                   	nop

c001e744 <__divdi3>:
c001e744:	55                   	push   ebp
c001e745:	57                   	push   edi
c001e746:	56                   	push   esi
c001e747:	53                   	push   ebx
c001e748:	83 ec 1c             	sub    esp,0x1c
c001e74b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001e74f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e753:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e756:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e75a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e75e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e762:	85 db                	test   ebx,ebx
c001e764:	0f 88 8e 00 00 00    	js     c001e7f8 <__divdi3+0xb4>
c001e76a:	89 dd                	mov    ebp,ebx
c001e76c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001e774:	89 d3                	mov    ebx,edx
c001e776:	85 d2                	test   edx,edx
c001e778:	79 0d                	jns    c001e787 <__divdi3+0x43>
c001e77a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001e77e:	f7 d8                	neg    eax
c001e780:	83 d2 00             	adc    edx,0x0
c001e783:	f7 da                	neg    edx
c001e785:	89 d3                	mov    ebx,edx
c001e787:	89 c7                	mov    edi,eax
c001e789:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e78c:	85 db                	test   ebx,ebx
c001e78e:	75 48                	jne    c001e7d8 <__divdi3+0x94>
c001e790:	39 ef                	cmp    edi,ebp
c001e792:	76 24                	jbe    c001e7b8 <__divdi3+0x74>
c001e794:	89 ea                	mov    edx,ebp
c001e796:	f7 f7                	div    edi
c001e798:	89 c1                	mov    ecx,eax
c001e79a:	31 f6                	xor    esi,esi
c001e79c:	89 c8                	mov    eax,ecx
c001e79e:	89 f2                	mov    edx,esi
c001e7a0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e7a4:	85 c9                	test   ecx,ecx
c001e7a6:	74 07                	je     c001e7af <__divdi3+0x6b>
c001e7a8:	f7 d8                	neg    eax
c001e7aa:	83 d2 00             	adc    edx,0x0
c001e7ad:	f7 da                	neg    edx
c001e7af:	83 c4 1c             	add    esp,0x1c
c001e7b2:	5b                   	pop    ebx
c001e7b3:	5e                   	pop    esi
c001e7b4:	5f                   	pop    edi
c001e7b5:	5d                   	pop    ebp
c001e7b6:	c3                   	ret    
c001e7b7:	90                   	nop
c001e7b8:	85 ff                	test   edi,edi
c001e7ba:	75 0b                	jne    c001e7c7 <__divdi3+0x83>
c001e7bc:	b8 01 00 00 00       	mov    eax,0x1
c001e7c1:	31 d2                	xor    edx,edx
c001e7c3:	f7 f3                	div    ebx
c001e7c5:	89 c7                	mov    edi,eax
c001e7c7:	31 d2                	xor    edx,edx
c001e7c9:	89 e8                	mov    eax,ebp
c001e7cb:	f7 f7                	div    edi
c001e7cd:	89 c6                	mov    esi,eax
c001e7cf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e7d2:	f7 f7                	div    edi
c001e7d4:	89 c1                	mov    ecx,eax
c001e7d6:	eb c4                	jmp    c001e79c <__divdi3+0x58>
c001e7d8:	39 eb                	cmp    ebx,ebp
c001e7da:	77 3c                	ja     c001e818 <__divdi3+0xd4>
c001e7dc:	0f bd f3             	bsr    esi,ebx
c001e7df:	83 f6 1f             	xor    esi,0x1f
c001e7e2:	75 40                	jne    c001e824 <__divdi3+0xe0>
c001e7e4:	39 eb                	cmp    ebx,ebp
c001e7e6:	72 09                	jb     c001e7f1 <__divdi3+0xad>
c001e7e8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001e7eb:	0f 87 97 00 00 00    	ja     c001e888 <__divdi3+0x144>
c001e7f1:	b9 01 00 00 00       	mov    ecx,0x1
c001e7f6:	eb a4                	jmp    c001e79c <__divdi3+0x58>
c001e7f8:	f7 d9                	neg    ecx
c001e7fa:	83 d3 00             	adc    ebx,0x0
c001e7fd:	f7 db                	neg    ebx
c001e7ff:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e802:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e806:	89 dd                	mov    ebp,ebx
c001e808:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001e810:	e9 5f ff ff ff       	jmp    c001e774 <__divdi3+0x30>
c001e815:	8d 76 00             	lea    esi,[esi+0x0]
c001e818:	31 f6                	xor    esi,esi
c001e81a:	31 c9                	xor    ecx,ecx
c001e81c:	e9 7b ff ff ff       	jmp    c001e79c <__divdi3+0x58>
c001e821:	8d 76 00             	lea    esi,[esi+0x0]
c001e824:	b8 20 00 00 00       	mov    eax,0x20
c001e829:	29 f0                	sub    eax,esi
c001e82b:	89 f1                	mov    ecx,esi
c001e82d:	d3 e3                	shl    ebx,cl
c001e82f:	89 fa                	mov    edx,edi
c001e831:	88 c1                	mov    cl,al
c001e833:	d3 ea                	shr    edx,cl
c001e835:	09 da                	or     edx,ebx
c001e837:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e83b:	89 f1                	mov    ecx,esi
c001e83d:	d3 e7                	shl    edi,cl
c001e83f:	89 eb                	mov    ebx,ebp
c001e841:	88 c1                	mov    cl,al
c001e843:	d3 eb                	shr    ebx,cl
c001e845:	89 f1                	mov    ecx,esi
c001e847:	d3 e5                	shl    ebp,cl
c001e849:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001e84c:	88 c1                	mov    cl,al
c001e84e:	d3 ea                	shr    edx,cl
c001e850:	09 d5                	or     ebp,edx
c001e852:	89 e8                	mov    eax,ebp
c001e854:	89 da                	mov    edx,ebx
c001e856:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001e85a:	89 d3                	mov    ebx,edx
c001e85c:	89 c5                	mov    ebp,eax
c001e85e:	f7 e7                	mul    edi
c001e860:	39 d3                	cmp    ebx,edx
c001e862:	72 18                	jb     c001e87c <__divdi3+0x138>
c001e864:	74 0a                	je     c001e870 <__divdi3+0x12c>
c001e866:	89 e9                	mov    ecx,ebp
c001e868:	31 f6                	xor    esi,esi
c001e86a:	e9 2d ff ff ff       	jmp    c001e79c <__divdi3+0x58>
c001e86f:	90                   	nop
c001e870:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001e873:	89 f1                	mov    ecx,esi
c001e875:	d3 e7                	shl    edi,cl
c001e877:	39 c7                	cmp    edi,eax
c001e879:	73 eb                	jae    c001e866 <__divdi3+0x122>
c001e87b:	90                   	nop
c001e87c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001e87f:	31 f6                	xor    esi,esi
c001e881:	e9 16 ff ff ff       	jmp    c001e79c <__divdi3+0x58>
c001e886:	66 90                	xchg   ax,ax
c001e888:	31 c9                	xor    ecx,ecx
c001e88a:	e9 0d ff ff ff       	jmp    c001e79c <__divdi3+0x58>
c001e88f:	90                   	nop

c001e890 <__moddi3>:
c001e890:	55                   	push   ebp
c001e891:	57                   	push   edi
c001e892:	56                   	push   esi
c001e893:	53                   	push   ebx
c001e894:	83 ec 2c             	sub    esp,0x2c
c001e897:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e89b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001e89f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001e8a3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e8a7:	85 db                	test   ebx,ebx
c001e8a9:	0f 88 85 00 00 00    	js     c001e934 <__moddi3+0xa4>
c001e8af:	89 de                	mov    esi,ebx
c001e8b1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001e8b9:	89 d7                	mov    edi,edx
c001e8bb:	85 d2                	test   edx,edx
c001e8bd:	79 09                	jns    c001e8c8 <__moddi3+0x38>
c001e8bf:	f7 d8                	neg    eax
c001e8c1:	83 d2 00             	adc    edx,0x0
c001e8c4:	f7 da                	neg    edx
c001e8c6:	89 d7                	mov    edi,edx
c001e8c8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e8cc:	89 cd                	mov    ebp,ecx
c001e8ce:	85 ff                	test   edi,edi
c001e8d0:	75 52                	jne    c001e924 <__moddi3+0x94>
c001e8d2:	89 c3                	mov    ebx,eax
c001e8d4:	39 f0                	cmp    eax,esi
c001e8d6:	76 24                	jbe    c001e8fc <__moddi3+0x6c>
c001e8d8:	89 c8                	mov    eax,ecx
c001e8da:	89 f2                	mov    edx,esi
c001e8dc:	f7 f3                	div    ebx
c001e8de:	89 d6                	mov    esi,edx
c001e8e0:	89 f0                	mov    eax,esi
c001e8e2:	31 d2                	xor    edx,edx
c001e8e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e8e8:	85 c9                	test   ecx,ecx
c001e8ea:	74 07                	je     c001e8f3 <__moddi3+0x63>
c001e8ec:	f7 d8                	neg    eax
c001e8ee:	83 d2 00             	adc    edx,0x0
c001e8f1:	f7 da                	neg    edx
c001e8f3:	83 c4 2c             	add    esp,0x2c
c001e8f6:	5b                   	pop    ebx
c001e8f7:	5e                   	pop    esi
c001e8f8:	5f                   	pop    edi
c001e8f9:	5d                   	pop    ebp
c001e8fa:	c3                   	ret    
c001e8fb:	90                   	nop
c001e8fc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e900:	85 db                	test   ebx,ebx
c001e902:	75 0d                	jne    c001e911 <__moddi3+0x81>
c001e904:	b8 01 00 00 00       	mov    eax,0x1
c001e909:	31 d2                	xor    edx,edx
c001e90b:	f7 f7                	div    edi
c001e90d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e911:	89 f0                	mov    eax,esi
c001e913:	31 d2                	xor    edx,edx
c001e915:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e919:	f7 f7                	div    edi
c001e91b:	89 e8                	mov    eax,ebp
c001e91d:	f7 f7                	div    edi
c001e91f:	89 d6                	mov    esi,edx
c001e921:	eb bd                	jmp    c001e8e0 <__moddi3+0x50>
c001e923:	90                   	nop
c001e924:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e928:	39 f7                	cmp    edi,esi
c001e92a:	76 20                	jbe    c001e94c <__moddi3+0xbc>
c001e92c:	89 c8                	mov    eax,ecx
c001e92e:	89 f2                	mov    edx,esi
c001e930:	eb b2                	jmp    c001e8e4 <__moddi3+0x54>
c001e932:	66 90                	xchg   ax,ax
c001e934:	f7 d9                	neg    ecx
c001e936:	83 d3 00             	adc    ebx,0x0
c001e939:	f7 db                	neg    ebx
c001e93b:	89 de                	mov    esi,ebx
c001e93d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001e945:	e9 6f ff ff ff       	jmp    c001e8b9 <__moddi3+0x29>
c001e94a:	66 90                	xchg   ax,ax
c001e94c:	0f bd c7             	bsr    eax,edi
c001e94f:	83 f0 1f             	xor    eax,0x1f
c001e952:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e956:	75 24                	jne    c001e97c <__moddi3+0xec>
c001e958:	39 f7                	cmp    edi,esi
c001e95a:	72 06                	jb     c001e962 <__moddi3+0xd2>
c001e95c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001e960:	77 0c                	ja     c001e96e <__moddi3+0xde>
c001e962:	89 e9                	mov    ecx,ebp
c001e964:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001e968:	19 fe                	sbb    esi,edi
c001e96a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e96e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e972:	89 f2                	mov    edx,esi
c001e974:	e9 6b ff ff ff       	jmp    c001e8e4 <__moddi3+0x54>
c001e979:	8d 76 00             	lea    esi,[esi+0x0]
c001e97c:	b8 20 00 00 00       	mov    eax,0x20
c001e981:	89 c2                	mov    edx,eax
c001e983:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e987:	29 da                	sub    edx,ebx
c001e989:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e98d:	88 d9                	mov    cl,bl
c001e98f:	d3 e7                	shl    edi,cl
c001e991:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e995:	88 d1                	mov    cl,dl
c001e997:	d3 e8                	shr    eax,cl
c001e999:	09 c7                	or     edi,eax
c001e99b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001e99f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e9a3:	89 d8                	mov    eax,ebx
c001e9a5:	88 d9                	mov    cl,bl
c001e9a7:	d3 e7                	shl    edi,cl
c001e9a9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e9ad:	89 f3                	mov    ebx,esi
c001e9af:	88 d1                	mov    cl,dl
c001e9b1:	d3 eb                	shr    ebx,cl
c001e9b3:	89 c7                	mov    edi,eax
c001e9b5:	88 c1                	mov    cl,al
c001e9b7:	d3 e6                	shl    esi,cl
c001e9b9:	89 e8                	mov    eax,ebp
c001e9bb:	88 d1                	mov    cl,dl
c001e9bd:	d3 e8                	shr    eax,cl
c001e9bf:	09 f0                	or     eax,esi
c001e9c1:	89 f9                	mov    ecx,edi
c001e9c3:	d3 e5                	shl    ebp,cl
c001e9c5:	89 da                	mov    edx,ebx
c001e9c7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001e9cb:	89 d3                	mov    ebx,edx
c001e9cd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e9d1:	89 c6                	mov    esi,eax
c001e9d3:	89 d1                	mov    ecx,edx
c001e9d5:	39 d3                	cmp    ebx,edx
c001e9d7:	72 27                	jb     c001ea00 <__moddi3+0x170>
c001e9d9:	74 21                	je     c001e9fc <__moddi3+0x16c>
c001e9db:	29 f5                	sub    ebp,esi
c001e9dd:	19 cb                	sbb    ebx,ecx
c001e9df:	89 de                	mov    esi,ebx
c001e9e1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001e9e5:	d3 e6                	shl    esi,cl
c001e9e7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001e9eb:	89 f9                	mov    ecx,edi
c001e9ed:	d3 ed                	shr    ebp,cl
c001e9ef:	09 ee                	or     esi,ebp
c001e9f1:	89 f0                	mov    eax,esi
c001e9f3:	d3 eb                	shr    ebx,cl
c001e9f5:	89 da                	mov    edx,ebx
c001e9f7:	e9 e8 fe ff ff       	jmp    c001e8e4 <__moddi3+0x54>
c001e9fc:	39 c5                	cmp    ebp,eax
c001e9fe:	73 db                	jae    c001e9db <__moddi3+0x14b>
c001ea00:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001ea04:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001ea08:	89 d1                	mov    ecx,edx
c001ea0a:	89 c6                	mov    esi,eax
c001ea0c:	eb cd                	jmp    c001e9db <__moddi3+0x14b>
c001ea0e:	66 90                	xchg   ax,ax

c001ea10 <__udivdi3>:
c001ea10:	55                   	push   ebp
c001ea11:	57                   	push   edi
c001ea12:	56                   	push   esi
c001ea13:	53                   	push   ebx
c001ea14:	83 ec 1c             	sub    esp,0x1c
c001ea17:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001ea1b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001ea1f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001ea23:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001ea27:	85 d2                	test   edx,edx
c001ea29:	75 41                	jne    c001ea6c <__udivdi3+0x5c>
c001ea2b:	39 f7                	cmp    edi,esi
c001ea2d:	76 15                	jbe    c001ea44 <__udivdi3+0x34>
c001ea2f:	89 e8                	mov    eax,ebp
c001ea31:	89 f2                	mov    edx,esi
c001ea33:	f7 f7                	div    edi
c001ea35:	31 db                	xor    ebx,ebx
c001ea37:	89 da                	mov    edx,ebx
c001ea39:	83 c4 1c             	add    esp,0x1c
c001ea3c:	5b                   	pop    ebx
c001ea3d:	5e                   	pop    esi
c001ea3e:	5f                   	pop    edi
c001ea3f:	5d                   	pop    ebp
c001ea40:	c3                   	ret    
c001ea41:	8d 76 00             	lea    esi,[esi+0x0]
c001ea44:	89 f9                	mov    ecx,edi
c001ea46:	85 ff                	test   edi,edi
c001ea48:	75 0b                	jne    c001ea55 <__udivdi3+0x45>
c001ea4a:	b8 01 00 00 00       	mov    eax,0x1
c001ea4f:	31 d2                	xor    edx,edx
c001ea51:	f7 f7                	div    edi
c001ea53:	89 c1                	mov    ecx,eax
c001ea55:	31 d2                	xor    edx,edx
c001ea57:	89 f0                	mov    eax,esi
c001ea59:	f7 f1                	div    ecx
c001ea5b:	89 c3                	mov    ebx,eax
c001ea5d:	89 e8                	mov    eax,ebp
c001ea5f:	f7 f1                	div    ecx
c001ea61:	89 da                	mov    edx,ebx
c001ea63:	83 c4 1c             	add    esp,0x1c
c001ea66:	5b                   	pop    ebx
c001ea67:	5e                   	pop    esi
c001ea68:	5f                   	pop    edi
c001ea69:	5d                   	pop    ebp
c001ea6a:	c3                   	ret    
c001ea6b:	90                   	nop
c001ea6c:	39 f2                	cmp    edx,esi
c001ea6e:	77 1c                	ja     c001ea8c <__udivdi3+0x7c>
c001ea70:	0f bd da             	bsr    ebx,edx
c001ea73:	83 f3 1f             	xor    ebx,0x1f
c001ea76:	75 24                	jne    c001ea9c <__udivdi3+0x8c>
c001ea78:	39 f2                	cmp    edx,esi
c001ea7a:	72 08                	jb     c001ea84 <__udivdi3+0x74>
c001ea7c:	39 ef                	cmp    edi,ebp
c001ea7e:	0f 87 84 00 00 00    	ja     c001eb08 <__udivdi3+0xf8>
c001ea84:	b8 01 00 00 00       	mov    eax,0x1
c001ea89:	eb ac                	jmp    c001ea37 <__udivdi3+0x27>
c001ea8b:	90                   	nop
c001ea8c:	31 db                	xor    ebx,ebx
c001ea8e:	31 c0                	xor    eax,eax
c001ea90:	89 da                	mov    edx,ebx
c001ea92:	83 c4 1c             	add    esp,0x1c
c001ea95:	5b                   	pop    ebx
c001ea96:	5e                   	pop    esi
c001ea97:	5f                   	pop    edi
c001ea98:	5d                   	pop    ebp
c001ea99:	c3                   	ret    
c001ea9a:	66 90                	xchg   ax,ax
c001ea9c:	b8 20 00 00 00       	mov    eax,0x20
c001eaa1:	29 d8                	sub    eax,ebx
c001eaa3:	88 d9                	mov    cl,bl
c001eaa5:	d3 e2                	shl    edx,cl
c001eaa7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001eaab:	89 fa                	mov    edx,edi
c001eaad:	88 c1                	mov    cl,al
c001eaaf:	d3 ea                	shr    edx,cl
c001eab1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001eab5:	09 d1                	or     ecx,edx
c001eab7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001eabb:	88 d9                	mov    cl,bl
c001eabd:	d3 e7                	shl    edi,cl
c001eabf:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001eac3:	89 f7                	mov    edi,esi
c001eac5:	88 c1                	mov    cl,al
c001eac7:	d3 ef                	shr    edi,cl
c001eac9:	88 d9                	mov    cl,bl
c001eacb:	d3 e6                	shl    esi,cl
c001eacd:	89 ea                	mov    edx,ebp
c001eacf:	88 c1                	mov    cl,al
c001ead1:	d3 ea                	shr    edx,cl
c001ead3:	09 d6                	or     esi,edx
c001ead5:	89 f0                	mov    eax,esi
c001ead7:	89 fa                	mov    edx,edi
c001ead9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001eadd:	89 d7                	mov    edi,edx
c001eadf:	89 c6                	mov    esi,eax
c001eae1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001eae5:	39 d7                	cmp    edi,edx
c001eae7:	72 13                	jb     c001eafc <__udivdi3+0xec>
c001eae9:	74 09                	je     c001eaf4 <__udivdi3+0xe4>
c001eaeb:	89 f0                	mov    eax,esi
c001eaed:	31 db                	xor    ebx,ebx
c001eaef:	e9 43 ff ff ff       	jmp    c001ea37 <__udivdi3+0x27>
c001eaf4:	88 d9                	mov    cl,bl
c001eaf6:	d3 e5                	shl    ebp,cl
c001eaf8:	39 c5                	cmp    ebp,eax
c001eafa:	73 ef                	jae    c001eaeb <__udivdi3+0xdb>
c001eafc:	8d 46 ff             	lea    eax,[esi-0x1]
c001eaff:	31 db                	xor    ebx,ebx
c001eb01:	e9 31 ff ff ff       	jmp    c001ea37 <__udivdi3+0x27>
c001eb06:	66 90                	xchg   ax,ax
c001eb08:	31 c0                	xor    eax,eax
c001eb0a:	e9 28 ff ff ff       	jmp    c001ea37 <__udivdi3+0x27>
c001eb0f:	90                   	nop

c001eb10 <__umoddi3>:
c001eb10:	55                   	push   ebp
c001eb11:	57                   	push   edi
c001eb12:	56                   	push   esi
c001eb13:	53                   	push   ebx
c001eb14:	83 ec 1c             	sub    esp,0x1c
c001eb17:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001eb1b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001eb1f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001eb23:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001eb27:	89 da                	mov    edx,ebx
c001eb29:	85 c0                	test   eax,eax
c001eb2b:	75 37                	jne    c001eb64 <__umoddi3+0x54>
c001eb2d:	39 df                	cmp    edi,ebx
c001eb2f:	76 13                	jbe    c001eb44 <__umoddi3+0x34>
c001eb31:	89 f0                	mov    eax,esi
c001eb33:	f7 f7                	div    edi
c001eb35:	89 d0                	mov    eax,edx
c001eb37:	31 d2                	xor    edx,edx
c001eb39:	83 c4 1c             	add    esp,0x1c
c001eb3c:	5b                   	pop    ebx
c001eb3d:	5e                   	pop    esi
c001eb3e:	5f                   	pop    edi
c001eb3f:	5d                   	pop    ebp
c001eb40:	c3                   	ret    
c001eb41:	8d 76 00             	lea    esi,[esi+0x0]
c001eb44:	89 fd                	mov    ebp,edi
c001eb46:	85 ff                	test   edi,edi
c001eb48:	75 0b                	jne    c001eb55 <__umoddi3+0x45>
c001eb4a:	b8 01 00 00 00       	mov    eax,0x1
c001eb4f:	31 d2                	xor    edx,edx
c001eb51:	f7 f7                	div    edi
c001eb53:	89 c5                	mov    ebp,eax
c001eb55:	89 d8                	mov    eax,ebx
c001eb57:	31 d2                	xor    edx,edx
c001eb59:	f7 f5                	div    ebp
c001eb5b:	89 f0                	mov    eax,esi
c001eb5d:	f7 f5                	div    ebp
c001eb5f:	89 d0                	mov    eax,edx
c001eb61:	eb d4                	jmp    c001eb37 <__umoddi3+0x27>
c001eb63:	90                   	nop
c001eb64:	89 f1                	mov    ecx,esi
c001eb66:	39 d8                	cmp    eax,ebx
c001eb68:	76 0a                	jbe    c001eb74 <__umoddi3+0x64>
c001eb6a:	89 f0                	mov    eax,esi
c001eb6c:	83 c4 1c             	add    esp,0x1c
c001eb6f:	5b                   	pop    ebx
c001eb70:	5e                   	pop    esi
c001eb71:	5f                   	pop    edi
c001eb72:	5d                   	pop    ebp
c001eb73:	c3                   	ret    
c001eb74:	0f bd e8             	bsr    ebp,eax
c001eb77:	83 f5 1f             	xor    ebp,0x1f
c001eb7a:	75 1c                	jne    c001eb98 <__umoddi3+0x88>
c001eb7c:	39 d8                	cmp    eax,ebx
c001eb7e:	72 04                	jb     c001eb84 <__umoddi3+0x74>
c001eb80:	39 f7                	cmp    edi,esi
c001eb82:	77 08                	ja     c001eb8c <__umoddi3+0x7c>
c001eb84:	89 da                	mov    edx,ebx
c001eb86:	29 fe                	sub    esi,edi
c001eb88:	19 c2                	sbb    edx,eax
c001eb8a:	89 f1                	mov    ecx,esi
c001eb8c:	89 c8                	mov    eax,ecx
c001eb8e:	83 c4 1c             	add    esp,0x1c
c001eb91:	5b                   	pop    ebx
c001eb92:	5e                   	pop    esi
c001eb93:	5f                   	pop    edi
c001eb94:	5d                   	pop    ebp
c001eb95:	c3                   	ret    
c001eb96:	66 90                	xchg   ax,ax
c001eb98:	ba 20 00 00 00       	mov    edx,0x20
c001eb9d:	29 ea                	sub    edx,ebp
c001eb9f:	89 e9                	mov    ecx,ebp
c001eba1:	d3 e0                	shl    eax,cl
c001eba3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001eba7:	89 f8                	mov    eax,edi
c001eba9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001ebad:	88 d1                	mov    cl,dl
c001ebaf:	d3 e8                	shr    eax,cl
c001ebb1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ebb5:	09 c1                	or     ecx,eax
c001ebb7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001ebbb:	89 e9                	mov    ecx,ebp
c001ebbd:	d3 e7                	shl    edi,cl
c001ebbf:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001ebc3:	89 d8                	mov    eax,ebx
c001ebc5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ebc9:	88 d1                	mov    cl,dl
c001ebcb:	d3 e8                	shr    eax,cl
c001ebcd:	89 c7                	mov    edi,eax
c001ebcf:	89 e9                	mov    ecx,ebp
c001ebd1:	d3 e3                	shl    ebx,cl
c001ebd3:	89 f0                	mov    eax,esi
c001ebd5:	88 d1                	mov    cl,dl
c001ebd7:	d3 e8                	shr    eax,cl
c001ebd9:	09 d8                	or     eax,ebx
c001ebdb:	89 e9                	mov    ecx,ebp
c001ebdd:	d3 e6                	shl    esi,cl
c001ebdf:	89 f3                	mov    ebx,esi
c001ebe1:	89 fa                	mov    edx,edi
c001ebe3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001ebe7:	89 d1                	mov    ecx,edx
c001ebe9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001ebed:	89 c6                	mov    esi,eax
c001ebef:	89 d7                	mov    edi,edx
c001ebf1:	39 d1                	cmp    ecx,edx
c001ebf3:	72 27                	jb     c001ec1c <__umoddi3+0x10c>
c001ebf5:	74 21                	je     c001ec18 <__umoddi3+0x108>
c001ebf7:	89 ca                	mov    edx,ecx
c001ebf9:	29 f3                	sub    ebx,esi
c001ebfb:	19 fa                	sbb    edx,edi
c001ebfd:	89 d0                	mov    eax,edx
c001ebff:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001ec03:	d3 e0                	shl    eax,cl
c001ec05:	89 e9                	mov    ecx,ebp
c001ec07:	d3 eb                	shr    ebx,cl
c001ec09:	09 d8                	or     eax,ebx
c001ec0b:	d3 ea                	shr    edx,cl
c001ec0d:	83 c4 1c             	add    esp,0x1c
c001ec10:	5b                   	pop    ebx
c001ec11:	5e                   	pop    esi
c001ec12:	5f                   	pop    edi
c001ec13:	5d                   	pop    ebp
c001ec14:	c3                   	ret    
c001ec15:	8d 76 00             	lea    esi,[esi+0x0]
c001ec18:	39 c3                	cmp    ebx,eax
c001ec1a:	73 db                	jae    c001ebf7 <__umoddi3+0xe7>
c001ec1c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001ec20:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001ec24:	89 d7                	mov    edi,edx
c001ec26:	89 c6                	mov    esi,eax
c001ec28:	eb cd                	jmp    c001ebf7 <__umoddi3+0xe7>

Disassembly of section .init:

c001ec2a <_init>:
c001ec2a:	55                   	push   ebp
c001ec2b:	89 e5                	mov    ebp,esp
c001ec2d:	e8 c2 14 fe ff       	call   c00000f4 <frame_dummy>
c001ec32:	e8 e5 fa ff ff       	call   c001e71c <__do_global_ctors_aux>
c001ec37:	5d                   	pop    ebp
c001ec38:	c3                   	ret    

Disassembly of section .fini:

c001ec39 <_fini>:
c001ec39:	55                   	push   ebp
c001ec3a:	89 e5                	mov    ebp,esp
c001ec3c:	e8 43 14 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001ec41:	5d                   	pop    ebp
c001ec42:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001ec44 <Computer::~Computer()>:
c001ec44:	83 ec 0c             	sub    esp,0xc
c001ec47:	ba 54 ff 01 c0       	mov    edx,0xc001ff54
c001ec4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec50:	89 10                	mov    DWORD PTR [eax],edx
c001ec52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec56:	83 ec 0c             	sub    esp,0xc
c001ec59:	50                   	push   eax
c001ec5a:	e8 e5 d2 fe ff       	call   c000bf44 <Device::~Device()>
c001ec5f:	83 c4 10             	add    esp,0x10
c001ec62:	90                   	nop
c001ec63:	83 c4 0c             	add    esp,0xc
c001ec66:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001ec68 <Computer::~Computer()>:
c001ec68:	83 ec 0c             	sub    esp,0xc
c001ec6b:	83 ec 0c             	sub    esp,0xc
c001ec6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec72:	e8 cd ff ff ff       	call   c001ec44 <Computer::~Computer()>
c001ec77:	83 c4 10             	add    esp,0x10
c001ec7a:	83 ec 08             	sub    esp,0x8
c001ec7d:	68 70 01 00 00       	push   0x170
c001ec82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec86:	e8 81 bb fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001ec8b:	83 c4 10             	add    esp,0x10
c001ec8e:	83 c4 0c             	add    esp,0xc
c001ec91:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001ec92 <idleCommon()>:
c001ec92:	83 ec 0c             	sub    esp,0xc
c001ec95:	fa                   	cli    
c001ec96:	ff 05 68 91 02 c0    	inc    DWORD PTR ds:0xc0029168
c001ec9c:	e8 6b 67 ff ff       	call   c001540c <schedule()>
c001eca1:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c001eca6:	48                   	dec    eax
c001eca7:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c001ecac:	75 01                	jne    c001ecaf <idleCommon()+0x1d>
c001ecae:	fb                   	sti    
c001ecaf:	83 c4 0c             	add    esp,0xc
c001ecb2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001ecb4 <LinkedList<UnixFile>::~LinkedList()>:
c001ecb4:	90                   	nop
c001ecb5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001ecb6 <LinkedList<UnixFile>::LinkedList()>:
c001ecb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ecba:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ecc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ecc4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001eccb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eccf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ecd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ecda:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ece0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ece4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001eceb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ecef:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ecf6:	90                   	nop
c001ecf7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001ecf8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001ecf8:	83 ec 0c             	sub    esp,0xc
c001ecfb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ed00:	75 10                	jne    c001ed12 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001ed02:	83 ec 0c             	sub    esp,0xc
c001ed05:	68 68 01 02 c0       	push   0xc0020168
c001ed0a:	e8 8c 1e ff ff       	call   c0010b9b <KePanic(char const*)>
c001ed0f:	83 c4 10             	add    esp,0x10
c001ed12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed16:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed18:	85 c0                	test   eax,eax
c001ed1a:	74 34                	je     c001ed50 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001ed1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed20:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed23:	85 c0                	test   eax,eax
c001ed25:	74 29                	je     c001ed50 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001ed27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed2b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed2e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ed32:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ed35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed39:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ed3d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ed40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed44:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed47:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ed4e:	eb 65                	jmp    c001edb5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001ed50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed54:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed56:	85 c0                	test   eax,eax
c001ed58:	75 4b                	jne    c001eda5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001ed5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed5e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed61:	85 c0                	test   eax,eax
c001ed63:	75 40                	jne    c001eda5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001ed65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed69:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ed6d:	89 10                	mov    DWORD PTR [eax],edx
c001ed6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed73:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ed77:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ed7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed81:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ed88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed8c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ed8f:	85 c0                	test   eax,eax
c001ed91:	74 22                	je     c001edb5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001ed93:	83 ec 0c             	sub    esp,0xc
c001ed96:	68 8a 01 02 c0       	push   0xc002018a
c001ed9b:	e8 fb 1d ff ff       	call   c0010b9b <KePanic(char const*)>
c001eda0:	83 c4 10             	add    esp,0x10
c001eda3:	eb 10                	jmp    c001edb5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001eda5:	83 ec 0c             	sub    esp,0xc
c001eda8:	68 94 01 02 c0       	push   0xc0020194
c001edad:	e8 e9 1d ff ff       	call   c0010b9b <KePanic(char const*)>
c001edb2:	83 c4 10             	add    esp,0x10
c001edb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edb9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001edbc:	8d 50 01             	lea    edx,[eax+0x1]
c001edbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edc3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001edc6:	90                   	nop
c001edc7:	83 c4 0c             	add    esp,0xc
c001edca:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001edcc <LinkedList<UnixFile>::getFirstElement()>:
c001edcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001edd0:	8b 00                	mov    eax,DWORD PTR [eax]
c001edd2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001edd4 <LinkedList<UnixFile>::removeFirst()>:
c001edd4:	83 ec 0c             	sub    esp,0xc
c001edd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eddb:	8b 00                	mov    eax,DWORD PTR [eax]
c001eddd:	85 c0                	test   eax,eax
c001eddf:	75 12                	jne    c001edf3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001ede1:	83 ec 0c             	sub    esp,0xc
c001ede4:	68 a0 01 02 c0       	push   0xc00201a0
c001ede9:	e8 ad 1d ff ff       	call   c0010b9b <KePanic(char const*)>
c001edee:	83 c4 10             	add    esp,0x10
c001edf1:	eb 7e                	jmp    c001ee71 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001edf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edf7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001edfa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001edfd:	85 c0                	test   eax,eax
c001edff:	74 10                	je     c001ee11 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001ee01:	83 ec 0c             	sub    esp,0xc
c001ee04:	68 eb 01 02 c0       	push   0xc00201eb
c001ee09:	e8 8d 1d ff ff       	call   c0010b9b <KePanic(char const*)>
c001ee0e:	83 c4 10             	add    esp,0x10
c001ee11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee15:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee17:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ee1a:	85 c0                	test   eax,eax
c001ee1c:	75 33                	jne    c001ee51 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001ee1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee22:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ee28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee2c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ee33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee37:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ee3a:	83 f8 01             	cmp    eax,0x1
c001ee3d:	74 21                	je     c001ee60 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001ee3f:	83 ec 0c             	sub    esp,0xc
c001ee42:	68 c4 01 02 c0       	push   0xc00201c4
c001ee47:	e8 4f 1d ff ff       	call   c0010b9b <KePanic(char const*)>
c001ee4c:	83 c4 10             	add    esp,0x10
c001ee4f:	eb 0f                	jmp    c001ee60 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001ee51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee55:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee57:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001ee5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee5e:	89 10                	mov    DWORD PTR [eax],edx
c001ee60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee64:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ee67:	8d 50 ff             	lea    edx,[eax-0x1]
c001ee6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee6e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ee71:	83 c4 0c             	add    esp,0xc
c001ee74:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001ee76 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001ee76:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ee7a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ee7d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001ee7e <DriverlessDevice::~DriverlessDevice()>:
c001ee7e:	ba 1c 0c 02 c0       	mov    edx,0xc0020c1c
c001ee83:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee87:	89 10                	mov    DWORD PTR [eax],edx
c001ee89:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee8d:	50                   	push   eax
c001ee8e:	e8 b1 d0 fe ff       	call   c000bf44 <Device::~Device()>
c001ee93:	83 c4 04             	add    esp,0x4
c001ee96:	90                   	nop
c001ee97:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001ee98 <DriverlessDevice::~DriverlessDevice()>:
c001ee98:	83 ec 0c             	sub    esp,0xc
c001ee9b:	83 ec 0c             	sub    esp,0xc
c001ee9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eea2:	e8 d7 ff ff ff       	call   c001ee7e <DriverlessDevice::~DriverlessDevice()>
c001eea7:	83 c4 10             	add    esp,0x10
c001eeaa:	83 ec 08             	sub    esp,0x8
c001eead:	68 58 01 00 00       	push   0x158
c001eeb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eeb6:	e8 51 b9 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001eebb:	83 c4 10             	add    esp,0x10
c001eebe:	83 c4 0c             	add    esp,0xc
c001eec1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001eec2 <LinkedList<Device>::addElement(Device*)>:
c001eec2:	83 ec 0c             	sub    esp,0xc
c001eec5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001eeca:	75 10                	jne    c001eedc <LinkedList<Device>::addElement(Device*)+0x1a>
c001eecc:	83 ec 0c             	sub    esp,0xc
c001eecf:	68 68 01 02 c0       	push   0xc0020168
c001eed4:	e8 c2 1c ff ff       	call   c0010b9b <KePanic(char const*)>
c001eed9:	83 c4 10             	add    esp,0x10
c001eedc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eee0:	8b 00                	mov    eax,DWORD PTR [eax]
c001eee2:	85 c0                	test   eax,eax
c001eee4:	74 3a                	je     c001ef20 <LinkedList<Device>::addElement(Device*)+0x5e>
c001eee6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eeed:	85 c0                	test   eax,eax
c001eeef:	74 2f                	je     c001ef20 <LinkedList<Device>::addElement(Device*)+0x5e>
c001eef1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eef5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eef8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eefc:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001ef02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef06:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ef0a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ef0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef11:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ef14:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001ef1e:	eb 68                	jmp    c001ef88 <LinkedList<Device>::addElement(Device*)+0xc6>
c001ef20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef24:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef26:	85 c0                	test   eax,eax
c001ef28:	75 4e                	jne    c001ef78 <LinkedList<Device>::addElement(Device*)+0xb6>
c001ef2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ef31:	85 c0                	test   eax,eax
c001ef33:	75 43                	jne    c001ef78 <LinkedList<Device>::addElement(Device*)+0xb6>
c001ef35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef39:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ef3d:	89 10                	mov    DWORD PTR [eax],edx
c001ef3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef43:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ef47:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ef4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ef51:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001ef5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef5f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ef62:	85 c0                	test   eax,eax
c001ef64:	74 22                	je     c001ef88 <LinkedList<Device>::addElement(Device*)+0xc6>
c001ef66:	83 ec 0c             	sub    esp,0xc
c001ef69:	68 8a 01 02 c0       	push   0xc002018a
c001ef6e:	e8 28 1c ff ff       	call   c0010b9b <KePanic(char const*)>
c001ef73:	83 c4 10             	add    esp,0x10
c001ef76:	eb 10                	jmp    c001ef88 <LinkedList<Device>::addElement(Device*)+0xc6>
c001ef78:	83 ec 0c             	sub    esp,0xc
c001ef7b:	68 94 01 02 c0       	push   0xc0020194
c001ef80:	e8 16 1c ff ff       	call   c0010b9b <KePanic(char const*)>
c001ef85:	83 c4 10             	add    esp,0x10
c001ef88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef8c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ef8f:	8d 50 01             	lea    edx,[eax+0x1]
c001ef92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef96:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ef99:	90                   	nop
c001ef9a:	83 c4 0c             	add    esp,0xc
c001ef9d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001ef9e <LinkedList<Device>::LinkedList()>:
c001ef9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efa2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001efa8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efac:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001efb3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efb7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001efbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efc2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001efc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efcc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001efd3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efd7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001efde:	90                   	nop
c001efdf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001efe0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001efe0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efe4:	8b 00                	mov    eax,DWORD PTR [eax]
c001efe6:	85 c0                	test   eax,eax
c001efe8:	75 0e                	jne    c001eff8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001efea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eff1:	85 c0                	test   eax,eax
c001eff3:	75 03                	jne    c001eff8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001eff5:	b0 01                	mov    al,0x1
c001eff7:	c3                   	ret    
c001eff8:	b0 00                	mov    al,0x0
c001effa:	90                   	nop
c001effb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001effc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001effc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f000:	8b 00                	mov    eax,DWORD PTR [eax]
c001f002:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001f004 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001f004:	83 ec 0c             	sub    esp,0xc
c001f007:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f00b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f00d:	85 c0                	test   eax,eax
c001f00f:	75 17                	jne    c001f028 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001f011:	83 ec 0c             	sub    esp,0xc
c001f014:	68 a0 01 02 c0       	push   0xc00201a0
c001f019:	e8 7d 1b ff ff       	call   c0010b9b <KePanic(char const*)>
c001f01e:	83 c4 10             	add    esp,0x10
c001f021:	e9 96 00 00 00       	jmp    c001f0bc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001f026:	66 90                	xchg   ax,ax
c001f028:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f02c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f02f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f032:	85 c0                	test   eax,eax
c001f034:	0f 95 c0             	setne  al
c001f037:	0f b6 c0             	movzx  eax,al
c001f03a:	85 c0                	test   eax,eax
c001f03c:	74 12                	je     c001f050 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001f03e:	83 ec 0c             	sub    esp,0xc
c001f041:	68 eb 01 02 c0       	push   0xc00201eb
c001f046:	e8 50 1b ff ff       	call   c0010b9b <KePanic(char const*)>
c001f04b:	83 c4 10             	add    esp,0x10
c001f04e:	66 90                	xchg   ax,ax
c001f050:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f054:	8b 00                	mov    eax,DWORD PTR [eax]
c001f056:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f059:	85 c0                	test   eax,eax
c001f05b:	0f 94 c0             	sete   al
c001f05e:	0f b6 c0             	movzx  eax,al
c001f061:	85 c0                	test   eax,eax
c001f063:	74 33                	je     c001f098 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001f065:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f069:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f06f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f073:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f07a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f07e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f081:	83 f8 01             	cmp    eax,0x1
c001f084:	74 22                	je     c001f0a8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001f086:	83 ec 0c             	sub    esp,0xc
c001f089:	68 c4 01 02 c0       	push   0xc00201c4
c001f08e:	e8 08 1b ff ff       	call   c0010b9b <KePanic(char const*)>
c001f093:	83 c4 10             	add    esp,0x10
c001f096:	eb 10                	jmp    c001f0a8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001f098:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f09c:	8b 00                	mov    eax,DWORD PTR [eax]
c001f09e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001f0a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0a5:	89 10                	mov    DWORD PTR [eax],edx
c001f0a7:	90                   	nop
c001f0a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0ac:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f0af:	8d 50 ff             	lea    edx,[eax-0x1]
c001f0b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0b6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f0b9:	8d 76 00             	lea    esi,[esi+0x0]
c001f0bc:	83 c4 0c             	add    esp,0xc
c001f0bf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001f0c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001f0c0:	83 ec 0c             	sub    esp,0xc
c001f0c3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f0c8:	75 12                	jne    c001f0dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001f0ca:	83 ec 0c             	sub    esp,0xc
c001f0cd:	68 68 01 02 c0       	push   0xc0020168
c001f0d2:	e8 c4 1a ff ff       	call   c0010b9b <KePanic(char const*)>
c001f0d7:	83 c4 10             	add    esp,0x10
c001f0da:	66 90                	xchg   ax,ax
c001f0dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0e0:	8b 00                	mov    eax,DWORD PTR [eax]
c001f0e2:	85 c0                	test   eax,eax
c001f0e4:	74 36                	je     c001f11c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001f0e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f0ed:	85 c0                	test   eax,eax
c001f0ef:	74 2b                	je     c001f11c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001f0f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0f5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f0f8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f0fc:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001f0ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f103:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f107:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f10a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f10e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f111:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f118:	eb 6a                	jmp    c001f184 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f11a:	66 90                	xchg   ax,ax
c001f11c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f120:	8b 00                	mov    eax,DWORD PTR [eax]
c001f122:	85 c0                	test   eax,eax
c001f124:	75 4e                	jne    c001f174 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001f126:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f12a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f12d:	85 c0                	test   eax,eax
c001f12f:	75 43                	jne    c001f174 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001f131:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f135:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f139:	89 10                	mov    DWORD PTR [eax],edx
c001f13b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f13f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f143:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f146:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f14a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f14d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f154:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f158:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f15b:	85 c0                	test   eax,eax
c001f15d:	74 25                	je     c001f184 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f15f:	83 ec 0c             	sub    esp,0xc
c001f162:	68 8a 01 02 c0       	push   0xc002018a
c001f167:	e8 2f 1a ff ff       	call   c0010b9b <KePanic(char const*)>
c001f16c:	83 c4 10             	add    esp,0x10
c001f16f:	eb 13                	jmp    c001f184 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f171:	8d 76 00             	lea    esi,[esi+0x0]
c001f174:	83 ec 0c             	sub    esp,0xc
c001f177:	68 94 01 02 c0       	push   0xc0020194
c001f17c:	e8 1a 1a ff ff       	call   c0010b9b <KePanic(char const*)>
c001f181:	83 c4 10             	add    esp,0x10
c001f184:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f188:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f18b:	8d 50 01             	lea    edx,[eax+0x1]
c001f18e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f192:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f195:	90                   	nop
c001f196:	83 c4 0c             	add    esp,0xc
c001f199:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001f19c <ACPI::~ACPI()>:
c001f19c:	83 ec 0c             	sub    esp,0xc
c001f19f:	ba 20 12 02 c0       	mov    edx,0xc0021220
c001f1a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1a8:	89 10                	mov    DWORD PTR [eax],edx
c001f1aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1ae:	83 ec 0c             	sub    esp,0xc
c001f1b1:	50                   	push   eax
c001f1b2:	e8 8d cd fe ff       	call   c000bf44 <Device::~Device()>
c001f1b7:	83 c4 10             	add    esp,0x10
c001f1ba:	90                   	nop
c001f1bb:	83 c4 0c             	add    esp,0xc
c001f1be:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001f1c0 <ACPI::~ACPI()>:
c001f1c0:	83 ec 0c             	sub    esp,0xc
c001f1c3:	83 ec 0c             	sub    esp,0xc
c001f1c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1ca:	e8 cd ff ff ff       	call   c001f19c <ACPI::~ACPI()>
c001f1cf:	83 c4 10             	add    esp,0x10
c001f1d2:	83 ec 08             	sub    esp,0x8
c001f1d5:	68 64 12 00 00       	push   0x1264
c001f1da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1de:	e8 29 b6 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f1e3:	83 c4 10             	add    esp,0x10
c001f1e6:	83 c4 0c             	add    esp,0xc
c001f1e9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001f1ec <LinkedList<Device>::~LinkedList()>:
c001f1ec:	90                   	nop
c001f1ed:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001f1f0 <LinkedList<Device>::isEmpty()>:
c001f1f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f1f4:	8b 00                	mov    eax,DWORD PTR [eax]
c001f1f6:	85 c0                	test   eax,eax
c001f1f8:	75 0e                	jne    c001f208 <LinkedList<Device>::isEmpty()+0x18>
c001f1fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f1fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f201:	85 c0                	test   eax,eax
c001f203:	75 03                	jne    c001f208 <LinkedList<Device>::isEmpty()+0x18>
c001f205:	b0 01                	mov    al,0x1
c001f207:	c3                   	ret    
c001f208:	b0 00                	mov    al,0x0
c001f20a:	90                   	nop
c001f20b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001f20c <LinkedList<Device>::getFirstElement()>:
c001f20c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f210:	8b 00                	mov    eax,DWORD PTR [eax]
c001f212:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001f214 <LinkedList<Device>::removeFirst()>:
c001f214:	83 ec 0c             	sub    esp,0xc
c001f217:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f21b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f21d:	85 c0                	test   eax,eax
c001f21f:	75 17                	jne    c001f238 <LinkedList<Device>::removeFirst()+0x24>
c001f221:	83 ec 0c             	sub    esp,0xc
c001f224:	68 a0 01 02 c0       	push   0xc00201a0
c001f229:	e8 6d 19 ff ff       	call   c0010b9b <KePanic(char const*)>
c001f22e:	83 c4 10             	add    esp,0x10
c001f231:	e9 92 00 00 00       	jmp    c001f2c8 <LinkedList<Device>::removeFirst()+0xb4>
c001f236:	66 90                	xchg   ax,ax
c001f238:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f23c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f23f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001f245:	85 c0                	test   eax,eax
c001f247:	74 13                	je     c001f25c <LinkedList<Device>::removeFirst()+0x48>
c001f249:	83 ec 0c             	sub    esp,0xc
c001f24c:	68 eb 01 02 c0       	push   0xc00201eb
c001f251:	e8 45 19 ff ff       	call   c0010b9b <KePanic(char const*)>
c001f256:	83 c4 10             	add    esp,0x10
c001f259:	8d 76 00             	lea    esi,[esi+0x0]
c001f25c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f260:	8b 00                	mov    eax,DWORD PTR [eax]
c001f262:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001f268:	85 c0                	test   eax,eax
c001f26a:	75 34                	jne    c001f2a0 <LinkedList<Device>::removeFirst()+0x8c>
c001f26c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f270:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f276:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f27a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f281:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f285:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f288:	83 f8 01             	cmp    eax,0x1
c001f28b:	74 27                	je     c001f2b4 <LinkedList<Device>::removeFirst()+0xa0>
c001f28d:	83 ec 0c             	sub    esp,0xc
c001f290:	68 c4 01 02 c0       	push   0xc00201c4
c001f295:	e8 01 19 ff ff       	call   c0010b9b <KePanic(char const*)>
c001f29a:	83 c4 10             	add    esp,0x10
c001f29d:	eb 15                	jmp    c001f2b4 <LinkedList<Device>::removeFirst()+0xa0>
c001f29f:	90                   	nop
c001f2a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2a4:	8b 00                	mov    eax,DWORD PTR [eax]
c001f2a6:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001f2ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2b0:	89 10                	mov    DWORD PTR [eax],edx
c001f2b2:	66 90                	xchg   ax,ax
c001f2b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2b8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f2bb:	8d 50 ff             	lea    edx,[eax-0x1]
c001f2be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2c2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f2c5:	8d 76 00             	lea    esi,[esi+0x0]
c001f2c8:	83 c4 0c             	add    esp,0xc
c001f2cb:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001f2cc <CPU::~CPU()>:
c001f2cc:	83 ec 0c             	sub    esp,0xc
c001f2cf:	ba c8 13 02 c0       	mov    edx,0xc00213c8
c001f2d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2d8:	89 10                	mov    DWORD PTR [eax],edx
c001f2da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2de:	83 ec 0c             	sub    esp,0xc
c001f2e1:	50                   	push   eax
c001f2e2:	e8 5d cc fe ff       	call   c000bf44 <Device::~Device()>
c001f2e7:	83 c4 10             	add    esp,0x10
c001f2ea:	90                   	nop
c001f2eb:	83 c4 0c             	add    esp,0xc
c001f2ee:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001f2f0 <CPU::~CPU()>:
c001f2f0:	83 ec 0c             	sub    esp,0xc
c001f2f3:	83 ec 0c             	sub    esp,0xc
c001f2f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2fa:	e8 cd ff ff ff       	call   c001f2cc <CPU::~CPU()>
c001f2ff:	83 c4 10             	add    esp,0x10
c001f302:	83 ec 08             	sub    esp,0x8
c001f305:	68 94 11 00 00       	push   0x1194
c001f30a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f30e:	e8 f9 b4 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f313:	83 c4 10             	add    esp,0x10
c001f316:	83 c4 0c             	add    esp,0xc
c001f319:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001f31c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001f31c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f320:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f323:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001f324 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001f324:	90                   	nop
c001f325:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001f328 <ThreadControlBlock::ThreadControlBlock()>:
c001f328:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f32c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f333:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f337:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001f33e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f342:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001f349:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f34d:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001f354:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f358:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001f35f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f363:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001f367:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f36b:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001f36f:	90                   	nop
c001f370:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001f374 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001f374:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f378:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f37e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f382:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f389:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f38d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f394:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f398:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f39e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f3a2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f3a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f3ad:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f3b4:	90                   	nop
c001f3b5:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001f3b6 <PCI::~PCI()>:
c001f3b6:	83 ec 0c             	sub    esp,0xc
c001f3b9:	ba 80 23 02 c0       	mov    edx,0xc0022380
c001f3be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3c2:	89 10                	mov    DWORD PTR [eax],edx
c001f3c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3c8:	83 ec 0c             	sub    esp,0xc
c001f3cb:	50                   	push   eax
c001f3cc:	e8 0b c6 fe ff       	call   c000b9dc <Bus::~Bus()>
c001f3d1:	83 c4 10             	add    esp,0x10
c001f3d4:	90                   	nop
c001f3d5:	83 c4 0c             	add    esp,0xc
c001f3d8:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001f3da <PCI::~PCI()>:
c001f3da:	83 ec 0c             	sub    esp,0xc
c001f3dd:	83 ec 0c             	sub    esp,0xc
c001f3e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f3e4:	e8 cd ff ff ff       	call   c001f3b6 <PCI::~PCI()>
c001f3e9:	83 c4 10             	add    esp,0x10
c001f3ec:	83 ec 08             	sub    esp,0x8
c001f3ef:	68 5c 01 00 00       	push   0x15c
c001f3f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f3f8:	e8 0f b4 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f3fd:	83 c4 10             	add    esp,0x10
c001f400:	83 c4 0c             	add    esp,0xc
c001f403:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001f404 <IDE::~IDE()>:
c001f404:	83 ec 0c             	sub    esp,0xc
c001f407:	ba 34 24 02 c0       	mov    edx,0xc0022434
c001f40c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f410:	89 10                	mov    DWORD PTR [eax],edx
c001f412:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f416:	83 ec 0c             	sub    esp,0xc
c001f419:	50                   	push   eax
c001f41a:	e8 9d cf fe ff       	call   c000c3bc <HardDiskController::~HardDiskController()>
c001f41f:	83 c4 10             	add    esp,0x10
c001f422:	90                   	nop
c001f423:	83 c4 0c             	add    esp,0xc
c001f426:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001f428 <IDE::~IDE()>:
c001f428:	83 ec 0c             	sub    esp,0xc
c001f42b:	83 ec 0c             	sub    esp,0xc
c001f42e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f432:	e8 cd ff ff ff       	call   c001f404 <IDE::~IDE()>
c001f437:	83 c4 10             	add    esp,0x10
c001f43a:	83 ec 08             	sub    esp,0x8
c001f43d:	68 70 02 00 00       	push   0x270
c001f442:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f446:	e8 c1 b3 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f44b:	83 c4 10             	add    esp,0x10
c001f44e:	83 c4 0c             	add    esp,0xc
c001f451:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001f452 <SATABus::~SATABus()>:
c001f452:	83 ec 0c             	sub    esp,0xc
c001f455:	ba 84 24 02 c0       	mov    edx,0xc0022484
c001f45a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f45e:	89 10                	mov    DWORD PTR [eax],edx
c001f460:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f464:	83 ec 0c             	sub    esp,0xc
c001f467:	50                   	push   eax
c001f468:	e8 4f cf fe ff       	call   c000c3bc <HardDiskController::~HardDiskController()>
c001f46d:	83 c4 10             	add    esp,0x10
c001f470:	90                   	nop
c001f471:	83 c4 0c             	add    esp,0xc
c001f474:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001f476 <SATABus::~SATABus()>:
c001f476:	83 ec 0c             	sub    esp,0xc
c001f479:	83 ec 0c             	sub    esp,0xc
c001f47c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f480:	e8 cd ff ff ff       	call   c001f452 <SATABus::~SATABus()>
c001f485:	83 c4 10             	add    esp,0x10
c001f488:	83 ec 08             	sub    esp,0x8
c001f48b:	68 64 01 00 00       	push   0x164
c001f490:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f494:	e8 73 b3 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f499:	83 c4 10             	add    esp,0x10
c001f49c:	83 c4 0c             	add    esp,0xc
c001f49f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001f4a0 <ATA::~ATA()>:
c001f4a0:	83 ec 0c             	sub    esp,0xc
c001f4a3:	ba c4 24 02 c0       	mov    edx,0xc00224c4
c001f4a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4ac:	89 10                	mov    DWORD PTR [eax],edx
c001f4ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4b2:	83 ec 0c             	sub    esp,0xc
c001f4b5:	50                   	push   eax
c001f4b6:	e8 e3 cf fe ff       	call   c000c49e <PhysicalDisk::~PhysicalDisk()>
c001f4bb:	83 c4 10             	add    esp,0x10
c001f4be:	90                   	nop
c001f4bf:	83 c4 0c             	add    esp,0xc
c001f4c2:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001f4c4 <ATA::~ATA()>:
c001f4c4:	83 ec 0c             	sub    esp,0xc
c001f4c7:	83 ec 0c             	sub    esp,0xc
c001f4ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f4ce:	e8 cd ff ff ff       	call   c001f4a0 <ATA::~ATA()>
c001f4d3:	83 c4 10             	add    esp,0x10
c001f4d6:	83 ec 08             	sub    esp,0x8
c001f4d9:	68 7c 01 00 00       	push   0x17c
c001f4de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f4e2:	e8 25 b3 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f4e7:	83 c4 10             	add    esp,0x10
c001f4ea:	83 c4 0c             	add    esp,0xc
c001f4ed:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001f4ee <ATAPI::~ATAPI()>:
c001f4ee:	83 ec 0c             	sub    esp,0xc
c001f4f1:	ba 0c 25 02 c0       	mov    edx,0xc002250c
c001f4f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4fa:	89 10                	mov    DWORD PTR [eax],edx
c001f4fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f500:	83 ec 0c             	sub    esp,0xc
c001f503:	50                   	push   eax
c001f504:	e8 95 cf fe ff       	call   c000c49e <PhysicalDisk::~PhysicalDisk()>
c001f509:	83 c4 10             	add    esp,0x10
c001f50c:	90                   	nop
c001f50d:	83 c4 0c             	add    esp,0xc
c001f510:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001f512 <ATAPI::~ATAPI()>:
c001f512:	83 ec 0c             	sub    esp,0xc
c001f515:	83 ec 0c             	sub    esp,0xc
c001f518:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f51c:	e8 cd ff ff ff       	call   c001f4ee <ATAPI::~ATAPI()>
c001f521:	83 c4 10             	add    esp,0x10
c001f524:	83 ec 08             	sub    esp,0x8
c001f527:	68 84 01 00 00       	push   0x184
c001f52c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f530:	e8 d7 b2 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f535:	83 c4 10             	add    esp,0x10
c001f538:	83 c4 0c             	add    esp,0xc
c001f53b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001f53c <SATA::~SATA()>:
c001f53c:	83 ec 0c             	sub    esp,0xc
c001f53f:	ba c0 25 02 c0       	mov    edx,0xc00225c0
c001f544:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f548:	89 10                	mov    DWORD PTR [eax],edx
c001f54a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f54e:	83 ec 0c             	sub    esp,0xc
c001f551:	50                   	push   eax
c001f552:	e8 47 cf fe ff       	call   c000c49e <PhysicalDisk::~PhysicalDisk()>
c001f557:	83 c4 10             	add    esp,0x10
c001f55a:	90                   	nop
c001f55b:	83 c4 0c             	add    esp,0xc
c001f55e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001f560 <SATA::~SATA()>:
c001f560:	83 ec 0c             	sub    esp,0xc
c001f563:	83 ec 0c             	sub    esp,0xc
c001f566:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f56a:	e8 cd ff ff ff       	call   c001f53c <SATA::~SATA()>
c001f56f:	83 c4 10             	add    esp,0x10
c001f572:	83 ec 08             	sub    esp,0x8
c001f575:	68 7c 01 00 00       	push   0x17c
c001f57a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f57e:	e8 89 b2 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f583:	83 c4 10             	add    esp,0x10
c001f586:	83 c4 0c             	add    esp,0xc
c001f589:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001f58a <SATAPI::~SATAPI()>:
c001f58a:	83 ec 0c             	sub    esp,0xc
c001f58d:	ba e4 26 02 c0       	mov    edx,0xc00226e4
c001f592:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f596:	89 10                	mov    DWORD PTR [eax],edx
c001f598:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f59c:	83 ec 0c             	sub    esp,0xc
c001f59f:	50                   	push   eax
c001f5a0:	e8 f9 ce fe ff       	call   c000c49e <PhysicalDisk::~PhysicalDisk()>
c001f5a5:	83 c4 10             	add    esp,0x10
c001f5a8:	90                   	nop
c001f5a9:	83 c4 0c             	add    esp,0xc
c001f5ac:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001f5ae <SATAPI::~SATAPI()>:
c001f5ae:	83 ec 0c             	sub    esp,0xc
c001f5b1:	83 ec 0c             	sub    esp,0xc
c001f5b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f5b8:	e8 cd ff ff ff       	call   c001f58a <SATAPI::~SATAPI()>
c001f5bd:	83 c4 10             	add    esp,0x10
c001f5c0:	83 ec 08             	sub    esp,0x8
c001f5c3:	68 84 01 00 00       	push   0x184
c001f5c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f5cc:	e8 3b b2 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f5d1:	83 c4 10             	add    esp,0x10
c001f5d4:	83 c4 0c             	add    esp,0xc
c001f5d7:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001f5d8 <IOAPIC::~IOAPIC()>:
c001f5d8:	83 ec 0c             	sub    esp,0xc
c001f5db:	ba 24 27 02 c0       	mov    edx,0xc0022724
c001f5e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5e4:	89 10                	mov    DWORD PTR [eax],edx
c001f5e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5ea:	83 ec 0c             	sub    esp,0xc
c001f5ed:	50                   	push   eax
c001f5ee:	e8 51 c9 fe ff       	call   c000bf44 <Device::~Device()>
c001f5f3:	83 c4 10             	add    esp,0x10
c001f5f6:	90                   	nop
c001f5f7:	83 c4 0c             	add    esp,0xc
c001f5fa:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001f5fc <IOAPIC::~IOAPIC()>:
c001f5fc:	83 ec 0c             	sub    esp,0xc
c001f5ff:	83 ec 0c             	sub    esp,0xc
c001f602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f606:	e8 cd ff ff ff       	call   c001f5d8 <IOAPIC::~IOAPIC()>
c001f60b:	83 c4 10             	add    esp,0x10
c001f60e:	83 ec 08             	sub    esp,0x8
c001f611:	68 68 01 00 00       	push   0x168
c001f616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f61a:	e8 ed b1 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f61f:	83 c4 10             	add    esp,0x10
c001f622:	83 c4 0c             	add    esp,0xc
c001f625:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001f628 <APICTimer::~APICTimer()>:
c001f628:	83 ec 0c             	sub    esp,0xc
c001f62b:	ba 6c 27 02 c0       	mov    edx,0xc002276c
c001f630:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f634:	89 10                	mov    DWORD PTR [eax],edx
c001f636:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f63a:	83 ec 0c             	sub    esp,0xc
c001f63d:	50                   	push   eax
c001f63e:	e8 cd e3 fe ff       	call   c000da10 <Timer::~Timer()>
c001f643:	83 c4 10             	add    esp,0x10
c001f646:	90                   	nop
c001f647:	83 c4 0c             	add    esp,0xc
c001f64a:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001f64c <APICTimer::~APICTimer()>:
c001f64c:	83 ec 0c             	sub    esp,0xc
c001f64f:	83 ec 0c             	sub    esp,0xc
c001f652:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f656:	e8 cd ff ff ff       	call   c001f628 <APICTimer::~APICTimer()>
c001f65b:	83 c4 10             	add    esp,0x10
c001f65e:	83 ec 08             	sub    esp,0x8
c001f661:	68 60 01 00 00       	push   0x160
c001f666:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f66a:	e8 9d b1 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f66f:	83 c4 10             	add    esp,0x10
c001f672:	83 c4 0c             	add    esp,0xc
c001f675:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001f678 <PIT::~PIT()>:
c001f678:	83 ec 0c             	sub    esp,0xc
c001f67b:	ba bc 27 02 c0       	mov    edx,0xc00227bc
c001f680:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f684:	89 10                	mov    DWORD PTR [eax],edx
c001f686:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f68a:	83 ec 0c             	sub    esp,0xc
c001f68d:	50                   	push   eax
c001f68e:	e8 7d e3 fe ff       	call   c000da10 <Timer::~Timer()>
c001f693:	83 c4 10             	add    esp,0x10
c001f696:	90                   	nop
c001f697:	83 c4 0c             	add    esp,0xc
c001f69a:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001f69c <PIT::~PIT()>:
c001f69c:	83 ec 0c             	sub    esp,0xc
c001f69f:	83 ec 0c             	sub    esp,0xc
c001f6a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f6a6:	e8 cd ff ff ff       	call   c001f678 <PIT::~PIT()>
c001f6ab:	83 c4 10             	add    esp,0x10
c001f6ae:	83 ec 08             	sub    esp,0x8
c001f6b1:	68 5c 01 00 00       	push   0x15c
c001f6b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f6ba:	e8 4d b1 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f6bf:	83 c4 10             	add    esp,0x10
c001f6c2:	83 c4 0c             	add    esp,0xc
c001f6c5:	c3                   	ret    

Disassembly of section userkernel:

c0024000 <KiDefaultSignalHandlerAbort(int)>:
c0024000:	57                   	push   edi
c0024001:	b9 07 00 00 00       	mov    ecx,0x7
c0024006:	56                   	push   esi
c0024007:	be b9 14 02 c0       	mov    esi,0xc00214b9
c002400c:	83 ec 24             	sub    esp,0x24
c002400f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024013:	fc                   	cld    
c0024014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0024016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002401a:	50                   	push   eax
c002401b:	6a 00                	push   0x0
c002401d:	6a 38                	push   0x38
c002401f:	6a 01                	push   0x1
c0024021:	e8 2c 00 00 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0024026:	83 c4 34             	add    esp,0x34
c0024029:	5e                   	pop    esi
c002402a:	5f                   	pop    edi
c002402b:	c3                   	ret    

c002402c <KiDefaultSignalHandlerTerminate(int)>:
c002402c:	57                   	push   edi
c002402d:	b9 08 00 00 00       	mov    ecx,0x8
c0024032:	56                   	push   esi
c0024033:	be d5 14 02 c0       	mov    esi,0xc00214d5
c0024038:	83 ec 24             	sub    esp,0x24
c002403b:	89 e7                	mov    edi,esp
c002403d:	fc                   	cld    
c002403e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0024040:	54                   	push   esp
c0024041:	6a 00                	push   0x0
c0024043:	6a 37                	push   0x37
c0024045:	6a 01                	push   0x1
c0024047:	e8 06 00 00 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002404c:	83 c4 34             	add    esp,0x34
c002404f:	5e                   	pop    esi
c0024050:	5f                   	pop    edi
c0024051:	c3                   	ret    

c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0024052:	53                   	push   ebx
c0024053:	83 ec 10             	sub    esp,0x10
c0024056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002405a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002405e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024066:	cd 60                	int    0x60
c0024068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002406c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0024074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024078:	83 c4 10             	add    esp,0x10
c002407b:	5b                   	pop    ebx
c002407c:	c3                   	ret    

Disassembly of section align_previous:

c0025000 <DO_NOT_DELETE()>:
c0025000:	c3                   	ret    
