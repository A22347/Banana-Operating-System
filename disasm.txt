
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 bf f8 00 00       	call   c000f8df <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 f3 87 02 00       	call   c0028818 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 6c 94 02 c0       	mov    ebx,0xc002946c
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 78 94 02 c0    	cmp    ebx,0xc0029478
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 b8 d7 02 c0       	mov    eax,0xc002d7b8
c0000049:	3d b8 d7 02 c0       	cmp    eax,0xc002d7b8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 b8 d7 02 c0       	push   0xc002d7b8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 b8 d7 02 c0       	mov    eax,0xc002d7b8
c0000075:	2d b8 d7 02 c0       	sub    eax,0xc002d7b8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 b8 d7 02 c0       	push   0xc002d7b8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d e8 dd 02 c0 00 	cmp    BYTE PTR ds:0xc002dde8,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 80 94 02 c0       	mov    ebx,0xc0029480
c00000bb:	81 eb 7c 94 02 c0    	sub    ebx,0xc002947c
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 7c 94 02 c0       	mov    esi,0xc002947c
c00000ca:	a1 ec dd 02 c0       	mov    eax,ds:0xc002ddec
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 ec dd 02 c0       	mov    ds:0xc002ddec,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 ec dd 02 c0       	mov    eax,ds:0xc002ddec
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 b8 d7 02 c0       	push   0xc002d7b8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 e8 dd 02 c0 01 	mov    BYTE PTR ds:0xc002dde8,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 f0 dd 02 c0       	push   0xc002ddf0
c000012c:	68 b8 d7 02 c0       	push   0xc002d7b8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 f7 d1 01 00       	call   c001d59a <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 2c 22 01 00       	call   c00125e7 <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 d5 d1 01 00       	call   c001d59a <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 7d d6 01 00       	call   c001da61 <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 a2 dc 01 00       	call   c001e08f <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 30 e2 02 c0 	lgdtd  ds:0xc002e230
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	fc                   	cld    
c00005dd:	e8 95 3f 01 00       	call   c0014577 <int_handler>
c00005e2:	81 c4 04 00 00 00    	add    esp,0x4
c00005e8:	0f a9                	pop    gs
c00005ea:	0f a1                	pop    fs
c00005ec:	07                   	pop    es
c00005ed:	1f                   	pop    ds
c00005ee:	61                   	popa   
c00005ef:	81 c4 08 00 00 00    	add    esp,0x8
c00005f5:	cf                   	iret   

c00005f6 <irq16>:
c00005f6:	fa                   	cli    
c00005f7:	6a 00                	push   0x0
c00005f9:	6a 30                	push   0x30
c00005fb:	e9 c4 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000600 <irq17>:
c0000600:	fa                   	cli    
c0000601:	6a 00                	push   0x0
c0000603:	6a 31                	push   0x31
c0000605:	e9 ba ff ff ff       	jmp    c00005c4 <int_common_stub>

c000060a <irq18>:
c000060a:	fa                   	cli    
c000060b:	6a 00                	push   0x0
c000060d:	6a 32                	push   0x32
c000060f:	e9 b0 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000614 <irq19>:
c0000614:	fa                   	cli    
c0000615:	6a 00                	push   0x0
c0000617:	6a 33                	push   0x33
c0000619:	e9 a6 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061e <irq20>:
c000061e:	fa                   	cli    
c000061f:	6a 00                	push   0x0
c0000621:	6a 34                	push   0x34
c0000623:	e9 9c ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000628 <irq21>:
c0000628:	fa                   	cli    
c0000629:	6a 00                	push   0x0
c000062b:	6a 35                	push   0x35
c000062d:	e9 92 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000632 <irq22>:
c0000632:	fa                   	cli    
c0000633:	6a 00                	push   0x0
c0000635:	6a 36                	push   0x36
c0000637:	e9 88 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063c <irq23>:
c000063c:	fa                   	cli    
c000063d:	6a 00                	push   0x0
c000063f:	6a 37                	push   0x37
c0000641:	e9 7e ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000646 <memcpy>:
c0000646:	e9 15 e1 00 00       	jmp    c000e760 <__not_memcpy>
c000064b:	90                   	nop

c000064c <memcmp>:
c000064c:	56                   	push   esi
c000064d:	53                   	push   ebx
c000064e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000652:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000656:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065a:	85 f6                	test   esi,esi
c000065c:	74 1d                	je     c000067b <memcmp+0x2f>
c000065e:	8a 08                	mov    cl,BYTE PTR [eax]
c0000660:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000663:	38 cb                	cmp    bl,cl
c0000665:	75 19                	jne    c0000680 <memcmp+0x34>
c0000667:	01 c6                	add    esi,eax
c0000669:	eb 0a                	jmp    c0000675 <memcmp+0x29>
c000066b:	90                   	nop
c000066c:	8a 08                	mov    cl,BYTE PTR [eax]
c000066e:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000671:	38 d9                	cmp    cl,bl
c0000673:	75 0b                	jne    c0000680 <memcmp+0x34>
c0000675:	40                   	inc    eax
c0000676:	42                   	inc    edx
c0000677:	39 f0                	cmp    eax,esi
c0000679:	75 f1                	jne    c000066c <memcmp+0x20>
c000067b:	31 c0                	xor    eax,eax
c000067d:	5b                   	pop    ebx
c000067e:	5e                   	pop    esi
c000067f:	c3                   	ret    
c0000680:	0f b6 c1             	movzx  eax,cl
c0000683:	29 d8                	sub    eax,ebx
c0000685:	5b                   	pop    ebx
c0000686:	5e                   	pop    esi
c0000687:	c3                   	ret    

c0000688 <memmove>:
c0000688:	55                   	push   ebp
c0000689:	57                   	push   edi
c000068a:	56                   	push   esi
c000068b:	53                   	push   ebx
c000068c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000690:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000694:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000698:	39 dd                	cmp    ebp,ebx
c000069a:	0f 83 80 00 00 00    	jae    c0000720 <memmove+0x98>
c00006a0:	85 d2                	test   edx,edx
c00006a2:	74 74                	je     c0000718 <memmove+0x90>
c00006a4:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006a7:	8d 75 04             	lea    esi,[ebp+0x4]
c00006aa:	39 cd                	cmp    ebp,ecx
c00006ac:	0f 93 c1             	setae  cl
c00006af:	39 f3                	cmp    ebx,esi
c00006b1:	0f 93 c0             	setae  al
c00006b4:	89 c6                	mov    esi,eax
c00006b6:	09 ce                	or     esi,ecx
c00006b8:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006bb:	89 f0                	mov    eax,esi
c00006bd:	83 f9 0c             	cmp    ecx,0xc
c00006c0:	0f 97 c1             	seta   cl
c00006c3:	84 c8                	test   al,cl
c00006c5:	74 75                	je     c000073c <memmove+0xb4>
c00006c7:	89 e9                	mov    ecx,ebp
c00006c9:	09 d9                	or     ecx,ebx
c00006cb:	83 e1 03             	and    ecx,0x3
c00006ce:	75 6c                	jne    c000073c <memmove+0xb4>
c00006d0:	89 d7                	mov    edi,edx
c00006d2:	89 d9                	mov    ecx,ebx
c00006d4:	83 e7 fc             	and    edi,0xfffffffc
c00006d7:	89 ee                	mov    esi,ebp
c00006d9:	01 df                	add    edi,ebx
c00006db:	90                   	nop
c00006dc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006de:	83 c6 04             	add    esi,0x4
c00006e1:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006e4:	83 c1 04             	add    ecx,0x4
c00006e7:	39 f9                	cmp    ecx,edi
c00006e9:	75 f1                	jne    c00006dc <memmove+0x54>
c00006eb:	89 d1                	mov    ecx,edx
c00006ed:	89 d7                	mov    edi,edx
c00006ef:	83 e1 fc             	and    ecx,0xfffffffc
c00006f2:	29 cf                	sub    edi,ecx
c00006f4:	01 cb                	add    ebx,ecx
c00006f6:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006fa:	39 ca                	cmp    edx,ecx
c00006fc:	74 1a                	je     c0000718 <memmove+0x90>
c00006fe:	8a 03                	mov    al,BYTE PTR [ebx]
c0000700:	83 ff 01             	cmp    edi,0x1
c0000703:	88 06                	mov    BYTE PTR [esi],al
c0000705:	74 11                	je     c0000718 <memmove+0x90>
c0000707:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000070a:	83 ff 02             	cmp    edi,0x2
c000070d:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000710:	74 06                	je     c0000718 <memmove+0x90>
c0000712:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000715:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000718:	5b                   	pop    ebx
c0000719:	89 e8                	mov    eax,ebp
c000071b:	5e                   	pop    esi
c000071c:	5f                   	pop    edi
c000071d:	5d                   	pop    ebp
c000071e:	c3                   	ret    
c000071f:	90                   	nop
c0000720:	76 f6                	jbe    c0000718 <memmove+0x90>
c0000722:	85 d2                	test   edx,edx
c0000724:	74 f2                	je     c0000718 <memmove+0x90>
c0000726:	4b                   	dec    ebx
c0000727:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000072a:	66 90                	xchg   ax,ax
c000072c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000072f:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000732:	4a                   	dec    edx
c0000733:	75 f7                	jne    c000072c <memmove+0xa4>
c0000735:	5b                   	pop    ebx
c0000736:	89 e8                	mov    eax,ebp
c0000738:	5e                   	pop    esi
c0000739:	5f                   	pop    edi
c000073a:	5d                   	pop    ebp
c000073b:	c3                   	ret    
c000073c:	01 ea                	add    edx,ebp
c000073e:	89 e9                	mov    ecx,ebp
c0000740:	8a 03                	mov    al,BYTE PTR [ebx]
c0000742:	41                   	inc    ecx
c0000743:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000746:	43                   	inc    ebx
c0000747:	39 d1                	cmp    ecx,edx
c0000749:	75 f5                	jne    c0000740 <memmove+0xb8>
c000074b:	eb cb                	jmp    c0000718 <memmove+0x90>
c000074d:	8d 76 00             	lea    esi,[esi+0x0]

c0000750 <memset>:
c0000750:	57                   	push   edi
c0000751:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000755:	85 c9                	test   ecx,ecx
c0000757:	74 0b                	je     c0000764 <memset+0x14>
c0000759:	fc                   	cld    
c000075a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000075e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000762:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000764:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000768:	5f                   	pop    edi
c0000769:	c3                   	ret    
c000076a:	66 90                	xchg   ax,ax

c000076c <strlen>:
c000076c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000770:	31 c0                	xor    eax,eax
c0000772:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000775:	74 09                	je     c0000780 <strlen+0x14>
c0000777:	90                   	nop
c0000778:	40                   	inc    eax
c0000779:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000077d:	75 f9                	jne    c0000778 <strlen+0xc>
c000077f:	c3                   	ret    
c0000780:	c3                   	ret    
c0000781:	8d 76 00             	lea    esi,[esi+0x0]

c0000784 <strpbrk>:
c0000784:	57                   	push   edi
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000078f:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000791:	84 db                	test   bl,bl
c0000793:	74 21                	je     c00007b6 <strpbrk+0x32>
c0000795:	8a 07                	mov    al,BYTE PTR [edi]
c0000797:	84 c0                	test   al,al
c0000799:	74 14                	je     c00007af <strpbrk+0x2b>
c000079b:	38 d8                	cmp    al,bl
c000079d:	74 19                	je     c00007b8 <strpbrk+0x34>
c000079f:	89 fa                	mov    edx,edi
c00007a1:	eb 05                	jmp    c00007a8 <strpbrk+0x24>
c00007a3:	90                   	nop
c00007a4:	38 d9                	cmp    cl,bl
c00007a6:	74 10                	je     c00007b8 <strpbrk+0x34>
c00007a8:	42                   	inc    edx
c00007a9:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007ab:	84 c9                	test   cl,cl
c00007ad:	75 f5                	jne    c00007a4 <strpbrk+0x20>
c00007af:	46                   	inc    esi
c00007b0:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b2:	84 db                	test   bl,bl
c00007b4:	75 e1                	jne    c0000797 <strpbrk+0x13>
c00007b6:	31 f6                	xor    esi,esi
c00007b8:	89 f0                	mov    eax,esi
c00007ba:	5b                   	pop    ebx
c00007bb:	5e                   	pop    esi
c00007bc:	5f                   	pop    edi
c00007bd:	c3                   	ret    
c00007be:	66 90                	xchg   ax,ax

c00007c0 <strtok>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	85 db                	test   ebx,ebx
c00007cc:	75 07                	jne    c00007d5 <strtok+0x15>
c00007ce:	eb 2c                	jmp    c00007fc <strtok+0x3c>
c00007d0:	43                   	inc    ebx
c00007d1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007d5:	56                   	push   esi
c00007d6:	53                   	push   ebx
c00007d7:	e8 a8 ff ff ff       	call   c0000784 <strpbrk>
c00007dc:	5a                   	pop    edx
c00007dd:	a3 08 de 02 c0       	mov    ds:0xc002de08,eax
c00007e2:	59                   	pop    ecx
c00007e3:	39 d8                	cmp    eax,ebx
c00007e5:	74 e9                	je     c00007d0 <strtok+0x10>
c00007e7:	85 c0                	test   eax,eax
c00007e9:	74 1b                	je     c0000806 <strtok+0x46>
c00007eb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00007ee:	8d 50 01             	lea    edx,[eax+0x1]
c00007f1:	89 d8                	mov    eax,ebx
c00007f3:	89 15 08 de 02 c0    	mov    DWORD PTR ds:0xc002de08,edx
c00007f9:	5b                   	pop    ebx
c00007fa:	5e                   	pop    esi
c00007fb:	c3                   	ret    
c00007fc:	8b 1d 08 de 02 c0    	mov    ebx,DWORD PTR ds:0xc002de08
c0000802:	85 db                	test   ebx,ebx
c0000804:	75 cf                	jne    c00007d5 <strtok+0x15>
c0000806:	31 c0                	xor    eax,eax
c0000808:	5b                   	pop    ebx
c0000809:	5e                   	pop    esi
c000080a:	c3                   	ret    
c000080b:	90                   	nop

c000080c <strcpy>:
c000080c:	53                   	push   ebx
c000080d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000811:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000815:	89 c3                	mov    ebx,eax
c0000817:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000819:	84 d2                	test   dl,dl
c000081b:	74 0d                	je     c000082a <strcpy+0x1e>
c000081d:	8d 76 00             	lea    esi,[esi+0x0]
c0000820:	88 13                	mov    BYTE PTR [ebx],dl
c0000822:	41                   	inc    ecx
c0000823:	43                   	inc    ebx
c0000824:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000826:	84 d2                	test   dl,dl
c0000828:	75 f6                	jne    c0000820 <strcpy+0x14>
c000082a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000082d:	5b                   	pop    ebx
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncpy>:
c0000830:	55                   	push   ebp
c0000831:	57                   	push   edi
c0000832:	56                   	push   esi
c0000833:	53                   	push   ebx
c0000834:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000838:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000083c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000840:	85 c0                	test   eax,eax
c0000842:	74 39                	je     c000087d <strncpy+0x4d>
c0000844:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000846:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000849:	8d 55 01             	lea    edx,[ebp+0x1]
c000084c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000084f:	84 db                	test   bl,bl
c0000851:	74 31                	je     c0000884 <strncpy+0x54>
c0000853:	85 c9                	test   ecx,ecx
c0000855:	74 26                	je     c000087d <strncpy+0x4d>
c0000857:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000085a:	8d 48 fe             	lea    ecx,[eax-0x2]
c000085d:	8d 55 02             	lea    edx,[ebp+0x2]
c0000860:	8d 46 02             	lea    eax,[esi+0x2]
c0000863:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000866:	84 db                	test   bl,bl
c0000868:	75 0f                	jne    c0000879 <strncpy+0x49>
c000086a:	eb 18                	jmp    c0000884 <strncpy+0x54>
c000086c:	40                   	inc    eax
c000086d:	42                   	inc    edx
c000086e:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000871:	49                   	dec    ecx
c0000872:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000875:	84 db                	test   bl,bl
c0000877:	74 0b                	je     c0000884 <strncpy+0x54>
c0000879:	85 c9                	test   ecx,ecx
c000087b:	75 ef                	jne    c000086c <strncpy+0x3c>
c000087d:	5b                   	pop    ebx
c000087e:	89 e8                	mov    eax,ebp
c0000880:	5e                   	pop    esi
c0000881:	5f                   	pop    edi
c0000882:	5d                   	pop    ebp
c0000883:	c3                   	ret    
c0000884:	85 c9                	test   ecx,ecx
c0000886:	74 f5                	je     c000087d <strncpy+0x4d>
c0000888:	fc                   	cld    
c0000889:	31 c0                	xor    eax,eax
c000088b:	89 d7                	mov    edi,edx
c000088d:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000088f:	89 e8                	mov    eax,ebp
c0000891:	5b                   	pop    ebx
c0000892:	5e                   	pop    esi
c0000893:	5f                   	pop    edi
c0000894:	5d                   	pop    ebp
c0000895:	c3                   	ret    
c0000896:	66 90                	xchg   ax,ax

c0000898 <strcmp>:
c0000898:	56                   	push   esi
c0000899:	53                   	push   ebx
c000089a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000089e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008a2:	8a 16                	mov    dl,BYTE PTR [esi]
c00008a4:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008a7:	38 d1                	cmp    cl,dl
c00008a9:	75 1d                	jne    c00008c8 <strcmp+0x30>
c00008ab:	84 c9                	test   cl,cl
c00008ad:	74 21                	je     c00008d0 <strcmp+0x38>
c00008af:	b8 01 00 00 00       	mov    eax,0x1
c00008b4:	eb 07                	jmp    c00008bd <strcmp+0x25>
c00008b6:	66 90                	xchg   ax,ax
c00008b8:	40                   	inc    eax
c00008b9:	84 d2                	test   dl,dl
c00008bb:	74 13                	je     c00008d0 <strcmp+0x38>
c00008bd:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008c0:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008c4:	38 ca                	cmp    dl,cl
c00008c6:	74 f0                	je     c00008b8 <strcmp+0x20>
c00008c8:	0f b6 c2             	movzx  eax,dl
c00008cb:	5b                   	pop    ebx
c00008cc:	29 c8                	sub    eax,ecx
c00008ce:	5e                   	pop    esi
c00008cf:	c3                   	ret    
c00008d0:	31 c0                	xor    eax,eax
c00008d2:	5b                   	pop    ebx
c00008d3:	5e                   	pop    esi
c00008d4:	c3                   	ret    
c00008d5:	8d 76 00             	lea    esi,[esi+0x0]

c00008d8 <strchr>:
c00008d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008dc:	8a 10                	mov    dl,BYTE PTR [eax]
c00008de:	84 d2                	test   dl,dl
c00008e0:	74 15                	je     c00008f7 <strchr+0x1f>
c00008e2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00008e6:	38 ca                	cmp    dl,cl
c00008e8:	75 06                	jne    c00008f0 <strchr+0x18>
c00008ea:	eb 0e                	jmp    c00008fa <strchr+0x22>
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 09                	je     c00008f9 <strchr+0x21>
c00008f0:	40                   	inc    eax
c00008f1:	8a 10                	mov    dl,BYTE PTR [eax]
c00008f3:	84 d2                	test   dl,dl
c00008f5:	75 f5                	jne    c00008ec <strchr+0x14>
c00008f7:	31 c0                	xor    eax,eax
c00008f9:	c3                   	ret    
c00008fa:	c3                   	ret    
c00008fb:	90                   	nop

c00008fc <strncmp>:
c00008fc:	57                   	push   edi
c00008fd:	56                   	push   esi
c00008fe:	53                   	push   ebx
c00008ff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000903:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000907:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000090b:	85 ff                	test   edi,edi
c000090d:	74 28                	je     c0000937 <strncmp+0x3b>
c000090f:	8a 16                	mov    dl,BYTE PTR [esi]
c0000911:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000914:	38 d1                	cmp    cl,dl
c0000916:	75 28                	jne    c0000940 <strncmp+0x44>
c0000918:	8d 46 01             	lea    eax,[esi+0x1]
c000091b:	84 c9                	test   cl,cl
c000091d:	74 18                	je     c0000937 <strncmp+0x3b>
c000091f:	01 fe                	add    esi,edi
c0000921:	eb 0f                	jmp    c0000932 <strncmp+0x36>
c0000923:	90                   	nop
c0000924:	8a 10                	mov    dl,BYTE PTR [eax]
c0000926:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000929:	38 ca                	cmp    dl,cl
c000092b:	75 13                	jne    c0000940 <strncmp+0x44>
c000092d:	40                   	inc    eax
c000092e:	84 d2                	test   dl,dl
c0000930:	74 05                	je     c0000937 <strncmp+0x3b>
c0000932:	43                   	inc    ebx
c0000933:	39 c6                	cmp    esi,eax
c0000935:	75 ed                	jne    c0000924 <strncmp+0x28>
c0000937:	5b                   	pop    ebx
c0000938:	31 c0                	xor    eax,eax
c000093a:	5e                   	pop    esi
c000093b:	5f                   	pop    edi
c000093c:	c3                   	ret    
c000093d:	8d 76 00             	lea    esi,[esi+0x0]
c0000940:	5b                   	pop    ebx
c0000941:	0f b6 c2             	movzx  eax,dl
c0000944:	5e                   	pop    esi
c0000945:	29 c8                	sub    eax,ecx
c0000947:	5f                   	pop    edi
c0000948:	c3                   	ret    
c0000949:	8d 76 00             	lea    esi,[esi+0x0]

c000094c <strcat>:
c000094c:	56                   	push   esi
c000094d:	53                   	push   ebx
c000094e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000952:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000956:	89 c3                	mov    ebx,eax
c0000958:	eb 04                	jmp    c000095e <strcat+0x12>
c000095a:	66 90                	xchg   ax,ax
c000095c:	89 d3                	mov    ebx,edx
c000095e:	8d 53 01             	lea    edx,[ebx+0x1]
c0000961:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000965:	75 f5                	jne    c000095c <strcat+0x10>
c0000967:	31 d2                	xor    edx,edx
c0000969:	8d 76 00             	lea    esi,[esi+0x0]
c000096c:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000096f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000972:	42                   	inc    edx
c0000973:	84 c9                	test   cl,cl
c0000975:	75 f5                	jne    c000096c <strcat+0x20>
c0000977:	5b                   	pop    ebx
c0000978:	5e                   	pop    esi
c0000979:	c3                   	ret    
c000097a:	66 90                	xchg   ax,ax

c000097c <strncat>:
c000097c:	56                   	push   esi
c000097d:	53                   	push   ebx
c000097e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000982:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000986:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000098a:	85 f6                	test   esi,esi
c000098c:	74 1e                	je     c00009ac <strncat+0x30>
c000098e:	89 c2                	mov    edx,eax
c0000990:	42                   	inc    edx
c0000991:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000995:	75 f9                	jne    c0000990 <strncat+0x14>
c0000997:	01 ce                	add    esi,ecx
c0000999:	eb 06                	jmp    c00009a1 <strncat+0x25>
c000099b:	90                   	nop
c000099c:	39 f1                	cmp    ecx,esi
c000099e:	74 10                	je     c00009b0 <strncat+0x34>
c00009a0:	42                   	inc    edx
c00009a1:	41                   	inc    ecx
c00009a2:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009a5:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009a8:	84 db                	test   bl,bl
c00009aa:	75 f0                	jne    c000099c <strncat+0x20>
c00009ac:	5b                   	pop    ebx
c00009ad:	5e                   	pop    esi
c00009ae:	c3                   	ret    
c00009af:	90                   	nop
c00009b0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009b3:	5b                   	pop    ebx
c00009b4:	5e                   	pop    esi
c00009b5:	c3                   	ret    
c00009b6:	66 90                	xchg   ax,ax

c00009b8 <strstr>:
c00009b8:	57                   	push   edi
c00009b9:	56                   	push   esi
c00009ba:	53                   	push   ebx
c00009bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009c3:	57                   	push   edi
c00009c4:	e8 a3 fd ff ff       	call   c000076c <strlen>
c00009c9:	59                   	pop    ecx
c00009ca:	85 c0                	test   eax,eax
c00009cc:	74 2a                	je     c00009f8 <strstr+0x40>
c00009ce:	89 c6                	mov    esi,eax
c00009d0:	eb 12                	jmp    c00009e4 <strstr+0x2c>
c00009d2:	66 90                	xchg   ax,ax
c00009d4:	56                   	push   esi
c00009d5:	57                   	push   edi
c00009d6:	53                   	push   ebx
c00009d7:	e8 70 fc ff ff       	call   c000064c <memcmp>
c00009dc:	83 c4 0c             	add    esp,0xc
c00009df:	85 c0                	test   eax,eax
c00009e1:	74 15                	je     c00009f8 <strstr+0x40>
c00009e3:	43                   	inc    ebx
c00009e4:	53                   	push   ebx
c00009e5:	e8 82 fd ff ff       	call   c000076c <strlen>
c00009ea:	5a                   	pop    edx
c00009eb:	39 f0                	cmp    eax,esi
c00009ed:	73 e5                	jae    c00009d4 <strstr+0x1c>
c00009ef:	5b                   	pop    ebx
c00009f0:	31 c0                	xor    eax,eax
c00009f2:	5e                   	pop    esi
c00009f3:	5f                   	pop    edi
c00009f4:	c3                   	ret    
c00009f5:	8d 76 00             	lea    esi,[esi+0x0]
c00009f8:	89 d8                	mov    eax,ebx
c00009fa:	5b                   	pop    ebx
c00009fb:	5e                   	pop    esi
c00009fc:	5f                   	pop    edi
c00009fd:	c3                   	ret    
c00009fe:	66 90                	xchg   ax,ax

c0000a00 <toupper>:
c0000a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a04:	0f b6 d0             	movzx  edx,al
c0000a07:	f6 82 a0 94 02 c0 02 	test   BYTE PTR [edx-0x3ffd6b60],0x2
c0000a0e:	74 03                	je     c0000a13 <toupper+0x13>
c0000a10:	83 e8 20             	sub    eax,0x20
c0000a13:	c3                   	ret    

c0000a14 <tolower>:
c0000a14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a18:	0f b6 d0             	movzx  edx,al
c0000a1b:	f6 82 a0 94 02 c0 01 	test   BYTE PTR [edx-0x3ffd6b60],0x1
c0000a22:	74 03                	je     c0000a27 <tolower+0x13>
c0000a24:	83 c0 20             	add    eax,0x20
c0000a27:	c3                   	ret    

c0000a28 <simple_strtoul>:
c0000a28:	55                   	push   ebp
c0000a29:	57                   	push   edi
c0000a2a:	56                   	push   esi
c0000a2b:	53                   	push   ebx
c0000a2c:	83 ec 08             	sub    esp,0x8
c0000a2f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a33:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a37:	90                   	nop
c0000a38:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a3b:	f6 82 a0 94 02 c0 08 	test   BYTE PTR [edx-0x3ffd6b60],0x8
c0000a42:	75 05                	jne    c0000a49 <simple_strtoul+0x21>
c0000a44:	80 fa 09             	cmp    dl,0x9
c0000a47:	75 03                	jne    c0000a4c <simple_strtoul+0x24>
c0000a49:	41                   	inc    ecx
c0000a4a:	eb ec                	jmp    c0000a38 <simple_strtoul+0x10>
c0000a4c:	80 fa 2d             	cmp    dl,0x2d
c0000a4f:	0f 84 1b 01 00 00    	je     c0000b70 <simple_strtoul+0x148>
c0000a55:	80 fa 2b             	cmp    dl,0x2b
c0000a58:	0f 84 c2 00 00 00    	je     c0000b20 <simple_strtoul+0xf8>
c0000a5e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a66:	85 f6                	test   esi,esi
c0000a68:	0f 85 c3 00 00 00    	jne    c0000b31 <simple_strtoul+0x109>
c0000a6e:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a70:	80 fa 30             	cmp    dl,0x30
c0000a73:	0f 84 47 01 00 00    	je     c0000bc0 <simple_strtoul+0x198>
c0000a79:	be 0a 00 00 00       	mov    esi,0xa
c0000a7e:	84 d2                	test   dl,dl
c0000a80:	0f 84 6f 01 00 00    	je     c0000bf5 <simple_strtoul+0x1cd>
c0000a86:	31 ed                	xor    ebp,ebp
c0000a88:	31 ff                	xor    edi,edi
c0000a8a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a91:	eb 2b                	jmp    c0000abe <simple_strtoul+0x96>
c0000a93:	90                   	nop
c0000a94:	83 eb 30             	sub    ebx,0x30
c0000a97:	39 f3                	cmp    ebx,esi
c0000a99:	73 4d                	jae    c0000ae8 <simple_strtoul+0xc0>
c0000a9b:	31 d2                	xor    edx,edx
c0000a9d:	89 d8                	mov    eax,ebx
c0000a9f:	f7 d0                	not    eax
c0000aa1:	f7 f6                	div    esi
c0000aa3:	39 f8                	cmp    eax,edi
c0000aa5:	0f 82 b1 00 00 00    	jb     c0000b5c <simple_strtoul+0x134>
c0000aab:	0f af fe             	imul   edi,esi
c0000aae:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ab5:	01 df                	add    edi,ebx
c0000ab7:	41                   	inc    ecx
c0000ab8:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aba:	84 d2                	test   dl,dl
c0000abc:	74 2a                	je     c0000ae8 <simple_strtoul+0xc0>
c0000abe:	0f b6 da             	movzx  ebx,dl
c0000ac1:	f6 83 a0 94 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6b60],0x4
c0000ac8:	75 ca                	jne    c0000a94 <simple_strtoul+0x6c>
c0000aca:	0f be d2             	movsx  edx,dl
c0000acd:	52                   	push   edx
c0000ace:	e8 2d ff ff ff       	call   c0000a00 <toupper>
c0000ad3:	5b                   	pop    ebx
c0000ad4:	0f b6 d0             	movzx  edx,al
c0000ad7:	f6 82 a0 94 02 c0 01 	test   BYTE PTR [edx-0x3ffd6b60],0x1
c0000ade:	74 08                	je     c0000ae8 <simple_strtoul+0xc0>
c0000ae0:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000ae3:	39 f3                	cmp    ebx,esi
c0000ae5:	72 b4                	jb     c0000a9b <simple_strtoul+0x73>
c0000ae7:	90                   	nop
c0000ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aec:	85 c0                	test   eax,eax
c0000aee:	74 14                	je     c0000b04 <simple_strtoul+0xdc>
c0000af0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000af3:	09 f8                	or     eax,edi
c0000af5:	75 71                	jne    c0000b68 <simple_strtoul+0x140>
c0000af7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000afb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000aff:	31 ff                	xor    edi,edi
c0000b01:	89 30                	mov    DWORD PTR [eax],esi
c0000b03:	90                   	nop
c0000b04:	4d                   	dec    ebp
c0000b05:	75 05                	jne    c0000b0c <simple_strtoul+0xe4>
c0000b07:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b0c:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b11:	75 02                	jne    c0000b15 <simple_strtoul+0xed>
c0000b13:	f7 df                	neg    edi
c0000b15:	83 c4 08             	add    esp,0x8
c0000b18:	89 f8                	mov    eax,edi
c0000b1a:	5b                   	pop    ebx
c0000b1b:	5e                   	pop    esi
c0000b1c:	5f                   	pop    edi
c0000b1d:	5d                   	pop    ebp
c0000b1e:	c3                   	ret    
c0000b1f:	90                   	nop
c0000b20:	41                   	inc    ecx
c0000b21:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b29:	85 f6                	test   esi,esi
c0000b2b:	0f 84 3d ff ff ff    	je     c0000a6e <simple_strtoul+0x46>
c0000b31:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b34:	83 f8 22             	cmp    eax,0x22
c0000b37:	77 6a                	ja     c0000ba3 <simple_strtoul+0x17b>
c0000b39:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b3b:	83 fe 08             	cmp    esi,0x8
c0000b3e:	0f 84 a2 00 00 00    	je     c0000be6 <simple_strtoul+0x1be>
c0000b44:	83 fe 10             	cmp    esi,0x10
c0000b47:	0f 85 31 ff ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000b4d:	80 fa 30             	cmp    dl,0x30
c0000b50:	74 2c                	je     c0000b7e <simple_strtoul+0x156>
c0000b52:	be 10 00 00 00       	mov    esi,0x10
c0000b57:	e9 22 ff ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000b5c:	bd 01 00 00 00       	mov    ebp,0x1
c0000b61:	31 ff                	xor    edi,edi
c0000b63:	e9 4f ff ff ff       	jmp    c0000ab7 <simple_strtoul+0x8f>
c0000b68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b6c:	89 08                	mov    DWORD PTR [eax],ecx
c0000b6e:	eb 94                	jmp    c0000b04 <simple_strtoul+0xdc>
c0000b70:	41                   	inc    ecx
c0000b71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b79:	e9 e8 fe ff ff       	jmp    c0000a66 <simple_strtoul+0x3e>
c0000b7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b82:	88 04 24             	mov    BYTE PTR [esp],al
c0000b85:	50                   	push   eax
c0000b86:	e8 89 fe ff ff       	call   c0000a14 <tolower>
c0000b8b:	5e                   	pop    esi
c0000b8c:	83 f8 78             	cmp    eax,0x78
c0000b8f:	0f 84 84 00 00 00    	je     c0000c19 <simple_strtoul+0x1f1>
c0000b95:	41                   	inc    ecx
c0000b96:	be 10 00 00 00       	mov    esi,0x10
c0000b9b:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b9e:	e9 db fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000ba3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ba7:	85 ff                	test   edi,edi
c0000ba9:	74 5c                	je     c0000c07 <simple_strtoul+0x1df>
c0000bab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000baf:	85 c9                	test   ecx,ecx
c0000bb1:	75 4e                	jne    c0000c01 <simple_strtoul+0x1d9>
c0000bb3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bb9:	31 ff                	xor    edi,edi
c0000bbb:	e9 4c ff ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000bc0:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bc4:	88 04 24             	mov    BYTE PTR [esp],al
c0000bc7:	50                   	push   eax
c0000bc8:	e8 47 fe ff ff       	call   c0000a14 <tolower>
c0000bcd:	5d                   	pop    ebp
c0000bce:	83 f8 78             	cmp    eax,0x78
c0000bd1:	74 3b                	je     c0000c0e <simple_strtoul+0x1e6>
c0000bd3:	41                   	inc    ecx
c0000bd4:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bd7:	80 fa 30             	cmp    dl,0x30
c0000bda:	74 13                	je     c0000bef <simple_strtoul+0x1c7>
c0000bdc:	be 08 00 00 00       	mov    esi,0x8
c0000be1:	e9 98 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000be6:	80 fa 30             	cmp    dl,0x30
c0000be9:	0f 85 8f fe ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000bef:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000bf2:	41                   	inc    ecx
c0000bf3:	eb e7                	jmp    c0000bdc <simple_strtoul+0x1b4>
c0000bf5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bf9:	85 d2                	test   edx,edx
c0000bfb:	74 0a                	je     c0000c07 <simple_strtoul+0x1df>
c0000bfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c01:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c05:	89 30                	mov    DWORD PTR [eax],esi
c0000c07:	31 ff                	xor    edi,edi
c0000c09:	e9 fe fe ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000c0e:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c11:	83 c1 02             	add    ecx,0x2
c0000c14:	e9 34 ff ff ff       	jmp    c0000b4d <simple_strtoul+0x125>
c0000c19:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c1c:	be 10 00 00 00       	mov    esi,0x10
c0000c21:	83 c1 02             	add    ecx,0x2
c0000c24:	e9 55 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>

c0000c29 <largebin_index>:
c0000c29:	89 c2                	mov    edx,eax
c0000c2b:	c1 ea 08             	shr    edx,0x8
c0000c2e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c34:	77 10                	ja     c0000c46 <largebin_index+0x1d>
c0000c36:	0f bd d2             	bsr    edx,edx
c0000c39:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c3c:	d3 e8                	shr    eax,cl
c0000c3e:	83 e0 03             	and    eax,0x3
c0000c41:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c45:	c3                   	ret    
c0000c46:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c4b:	c3                   	ret    

c0000c4c <malloc_init_state>:
c0000c4c:	53                   	push   ebx
c0000c4d:	8d 50 34             	lea    edx,[eax+0x34]
c0000c50:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c56:	89 d1                	mov    ecx,edx
c0000c58:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c5b:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c5e:	83 c2 08             	add    edx,0x8
c0000c61:	39 da                	cmp    edx,ebx
c0000c63:	75 f3                	jne    c0000c58 <malloc_init_state+0xc>
c0000c65:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c67:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c71:	83 e2 03             	and    edx,0x3
c0000c74:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c7e:	83 ca 48             	or     edx,0x48
c0000c81:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c8b:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c95:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c9c:	89 10                	mov    DWORD PTR [eax],edx
c0000c9e:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ca1:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cab:	5b                   	pop    ebx
c0000cac:	c3                   	ret    

c0000cad <malloc_consolidate>:
c0000cad:	8b 10                	mov    edx,DWORD PTR [eax]
c0000caf:	85 d2                	test   edx,edx
c0000cb1:	0f 84 d8 00 00 00    	je     c0000d8f <malloc_consolidate+0xe2>
c0000cb7:	55                   	push   ebp
c0000cb8:	83 e2 fd             	and    edx,0xfffffffd
c0000cbb:	57                   	push   edi
c0000cbc:	89 c5                	mov    ebp,eax
c0000cbe:	56                   	push   esi
c0000cbf:	8d 78 34             	lea    edi,[eax+0x34]
c0000cc2:	53                   	push   ebx
c0000cc3:	83 ec 10             	sub    esp,0x10
c0000cc6:	89 10                	mov    DWORD PTR [eax],edx
c0000cc8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ccc:	c1 ea 03             	shr    edx,0x3
c0000ccf:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cd3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cd7:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000cda:	85 d2                	test   edx,edx
c0000cdc:	0f 84 98 00 00 00    	je     c0000d7a <malloc_consolidate+0xcd>
c0000ce2:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ce9:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cec:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cf3:	89 f9                	mov    ecx,edi
c0000cf5:	83 e1 fe             	and    ecx,0xfffffffe
c0000cf8:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cfb:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cfe:	83 e3 fc             	and    ebx,0xfffffffc
c0000d01:	83 e7 01             	and    edi,0x1
c0000d04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d07:	75 14                	jne    c0000d1d <malloc_consolidate+0x70>
c0000d09:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d0b:	29 fa                	sub    edx,edi
c0000d0d:	01 f9                	add    ecx,edi
c0000d0f:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d12:	89 fb                	mov    ebx,edi
c0000d14:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d17:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d1a:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d1d:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d20:	74 40                	je     c0000d62 <malloc_consolidate+0xb5>
c0000d22:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d25:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d28:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d2c:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d2f:	83 e7 01             	and    edi,0x1
c0000d32:	75 0e                	jne    c0000d42 <malloc_consolidate+0x95>
c0000d34:	01 d9                	add    ecx,ebx
c0000d36:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d39:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d3c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d3f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d42:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d45:	89 ce                	mov    esi,ecx
c0000d47:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d4a:	83 ce 01             	or     esi,0x1
c0000d4d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d50:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d53:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d56:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d5a:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d5d:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d60:	eb 0c                	jmp    c0000d6e <malloc_consolidate+0xc1>
c0000d62:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d65:	83 c9 01             	or     ecx,0x1
c0000d68:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d6b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d72:	85 d2                	test   edx,edx
c0000d74:	0f 85 6f ff ff ff    	jne    c0000ce9 <malloc_consolidate+0x3c>
c0000d7a:	83 c5 04             	add    ebp,0x4
c0000d7d:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d81:	0f 85 50 ff ff ff    	jne    c0000cd7 <malloc_consolidate+0x2a>
c0000d87:	83 c4 10             	add    esp,0x10
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	5d                   	pop    ebp
c0000d8e:	c3                   	ret    
c0000d8f:	e9 b8 fe ff ff       	jmp    c0000c4c <malloc_init_state>

c0000d94 <dlfree>:
c0000d94:	57                   	push   edi
c0000d95:	56                   	push   esi
c0000d96:	53                   	push   ebx
c0000d97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d9b:	85 db                	test   ebx,ebx
c0000d9d:	0f 84 e2 00 00 00    	je     c0000e85 <dlfree+0xf1>
c0000da3:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000da6:	8b 0d 20 de 02 c0    	mov    ecx,DWORD PTR ds:0xc002de20
c0000dac:	89 f0                	mov    eax,esi
c0000dae:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000db1:	83 e0 fc             	and    eax,0xfffffffc
c0000db4:	39 c1                	cmp    ecx,eax
c0000db6:	72 24                	jb     c0000ddc <dlfree+0x48>
c0000db8:	83 c9 03             	or     ecx,0x3
c0000dbb:	c1 e8 03             	shr    eax,0x3
c0000dbe:	89 0d 20 de 02 c0    	mov    DWORD PTR ds:0xc002de20,ecx
c0000dc4:	83 e8 02             	sub    eax,0x2
c0000dc7:	8b 0c 85 24 de 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd21dc]
c0000dce:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dd0:	89 14 85 24 de 02 c0 	mov    DWORD PTR [eax*4-0x3ffd21dc],edx
c0000dd7:	e9 a9 00 00 00       	jmp    c0000e85 <dlfree+0xf1>
c0000ddc:	83 e6 02             	and    esi,0x2
c0000ddf:	0f 85 a0 00 00 00    	jne    c0000e85 <dlfree+0xf1>
c0000de5:	83 c9 01             	or     ecx,0x1
c0000de8:	8d 34 02             	lea    esi,[edx+eax*1]
c0000deb:	89 0d 20 de 02 c0    	mov    DWORD PTR ds:0xc002de20,ecx
c0000df1:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000df4:	83 e1 fc             	and    ecx,0xfffffffc
c0000df7:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dfb:	75 13                	jne    c0000e10 <dlfree+0x7c>
c0000dfd:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e00:	29 da                	sub    edx,ebx
c0000e02:	01 d8                	add    eax,ebx
c0000e04:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e07:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e0a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e0d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e10:	39 35 4c de 02 c0    	cmp    DWORD PTR ds:0xc002de4c,esi
c0000e16:	74 40                	je     c0000e58 <dlfree+0xc4>
c0000e18:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e1c:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e1f:	80 e3 01             	and    bl,0x1
c0000e22:	75 0e                	jne    c0000e32 <dlfree+0x9e>
c0000e24:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e27:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e2a:	01 c8                	add    eax,ecx
c0000e2c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e2f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e32:	8b 0d 5c de 02 c0    	mov    ecx,DWORD PTR ds:0xc002de5c
c0000e38:	c7 42 0c 54 de 02 c0 	mov    DWORD PTR [edx+0xc],0xc002de54
c0000e3f:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e42:	89 15 5c de 02 c0    	mov    DWORD PTR ds:0xc002de5c,edx
c0000e48:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e4b:	89 c1                	mov    ecx,eax
c0000e4d:	83 c9 01             	or     ecx,0x1
c0000e50:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e53:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e56:	eb 10                	jmp    c0000e68 <dlfree+0xd4>
c0000e58:	01 c8                	add    eax,ecx
c0000e5a:	89 c1                	mov    ecx,eax
c0000e5c:	83 c9 01             	or     ecx,0x1
c0000e5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e62:	89 15 4c de 02 c0    	mov    DWORD PTR ds:0xc002de4c,edx
c0000e68:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e6d:	76 16                	jbe    c0000e85 <dlfree+0xf1>
c0000e6f:	f6 05 20 de 02 c0 02 	test   BYTE PTR ds:0xc002de20,0x2
c0000e76:	74 0d                	je     c0000e85 <dlfree+0xf1>
c0000e78:	5b                   	pop    ebx
c0000e79:	b8 20 de 02 c0       	mov    eax,0xc002de20
c0000e7e:	5e                   	pop    esi
c0000e7f:	5f                   	pop    edi
c0000e80:	e9 28 fe ff ff       	jmp    c0000cad <malloc_consolidate>
c0000e85:	5b                   	pop    ebx
c0000e86:	5e                   	pop    esi
c0000e87:	5f                   	pop    edi
c0000e88:	c3                   	ret    

c0000e89 <sYSMALLOc>:
c0000e89:	55                   	push   ebp
c0000e8a:	57                   	push   edi
c0000e8b:	56                   	push   esi
c0000e8c:	53                   	push   ebx
c0000e8d:	89 d3                	mov    ebx,edx
c0000e8f:	83 ec 2c             	sub    esp,0x2c
c0000e92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e96:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e9c:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e9f:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ea2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ea6:	74 1f                	je     c0000ec7 <sYSMALLOc+0x3e>
c0000ea8:	89 d8                	mov    eax,ebx
c0000eaa:	e8 fe fd ff ff       	call   c0000cad <malloc_consolidate>
c0000eaf:	83 ec 0c             	sub    esp,0xc
c0000eb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000eb6:	83 e8 07             	sub    eax,0x7
c0000eb9:	50                   	push   eax
c0000eba:	e8 30 02 00 00       	call   c00010ef <dlmalloc>
c0000ebf:	83 c4 10             	add    esp,0x10
c0000ec2:	e9 20 02 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000ec7:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000eca:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ed0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000ed3:	83 e0 fc             	and    eax,0xfffffffc
c0000ed6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ede:	83 c0 10             	add    eax,0x10
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000ee7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000eee:	74 04                	je     c0000ef4 <sYSMALLOc+0x6b>
c0000ef0:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ef4:	f7 da                	neg    edx
c0000ef6:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000efa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000efe:	21 d1                	and    ecx,edx
c0000f00:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f04:	7f 07                	jg     c0000f0d <sYSMALLOc+0x84>
c0000f06:	31 c0                	xor    eax,eax
c0000f08:	e9 da 01 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000f0d:	83 ec 0c             	sub    esp,0xc
c0000f10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f14:	e8 5f e7 00 00       	call   c000f678 <sbrk>
c0000f19:	83 c4 10             	add    esp,0x10
c0000f1c:	89 c6                	mov    esi,eax
c0000f1e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f21:	74 e3                	je     c0000f06 <sYSMALLOc+0x7d>
c0000f23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f27:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f2b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f2e:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f34:	39 f1                	cmp    ecx,esi
c0000f36:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f3c:	75 13                	jne    c0000f51 <sYSMALLOc+0xc8>
c0000f3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f42:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f46:	83 c8 01             	or     eax,0x1
c0000f49:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f4c:	e9 3e 01 00 00       	jmp    c000108f <sYSMALLOc+0x206>
c0000f51:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f57:	88 d0                	mov    al,dl
c0000f59:	83 e0 01             	and    eax,0x1
c0000f5c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f61:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f65:	0f 95 c0             	setne  al
c0000f68:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f6c:	39 f1                	cmp    ecx,esi
c0000f6e:	76 12                	jbe    c0000f82 <sYSMALLOc+0xf9>
c0000f70:	84 c0                	test   al,al
c0000f72:	74 0e                	je     c0000f82 <sYSMALLOc+0xf9>
c0000f74:	83 e2 fe             	and    edx,0xfffffffe
c0000f77:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f7d:	e9 83 00 00 00       	jmp    c0001005 <sYSMALLOc+0x17c>
c0000f82:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000f87:	74 7c                	je     c0001005 <sYSMALLOc+0x17c>
c0000f89:	84 c0                	test   al,al
c0000f8b:	74 0c                	je     c0000f99 <sYSMALLOc+0x110>
c0000f8d:	89 f0                	mov    eax,esi
c0000f8f:	29 c8                	sub    eax,ecx
c0000f91:	01 e8                	add    eax,ebp
c0000f93:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f99:	89 f2                	mov    edx,esi
c0000f9b:	83 e2 07             	and    edx,0x7
c0000f9e:	74 0c                	je     c0000fac <sYSMALLOc+0x123>
c0000fa0:	b8 08 00 00 00       	mov    eax,0x8
c0000fa5:	29 d0                	sub    eax,edx
c0000fa7:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000faa:	eb 04                	jmp    c0000fb0 <sYSMALLOc+0x127>
c0000fac:	89 f5                	mov    ebp,esi
c0000fae:	31 c0                	xor    eax,eax
c0000fb0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fb4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fbc:	01 c1                	add    ecx,eax
c0000fbe:	83 ec 0c             	sub    esp,0xc
c0000fc1:	01 f1                	add    ecx,esi
c0000fc3:	01 ca                	add    edx,ecx
c0000fc5:	29 c8                	sub    eax,ecx
c0000fc7:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000fcb:	01 c2                	add    edx,eax
c0000fcd:	52                   	push   edx
c0000fce:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000fd2:	e8 a1 e6 00 00       	call   c000f678 <sbrk>
c0000fd7:	83 c4 10             	add    esp,0x10
c0000fda:	83 f8 ff             	cmp    eax,0xffffffff
c0000fdd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe1:	75 0f                	jne    c0000ff2 <sYSMALLOc+0x169>
c0000fe3:	83 ec 0c             	sub    esp,0xc
c0000fe6:	6a 00                	push   0x0
c0000fe8:	e8 8b e6 00 00       	call   c000f678 <sbrk>
c0000fed:	83 c4 10             	add    esp,0x10
c0000ff0:	eb 30                	jmp    c0001022 <sYSMALLOc+0x199>
c0000ff2:	39 c6                	cmp    esi,eax
c0000ff4:	76 33                	jbe    c0001029 <sYSMALLOc+0x1a0>
c0000ff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000ffa:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001001:	01 f0                	add    eax,esi
c0001003:	eb 1d                	jmp    c0001022 <sYSMALLOc+0x199>
c0001005:	83 ec 0c             	sub    esp,0xc
c0001008:	89 f5                	mov    ebp,esi
c000100a:	6a 00                	push   0x0
c000100c:	e8 67 e6 00 00       	call   c000f678 <sbrk>
c0001011:	89 c2                	mov    edx,eax
c0001013:	29 f2                	sub    edx,esi
c0001015:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001019:	83 c4 10             	add    esp,0x10
c000101c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001022:	31 d2                	xor    edx,edx
c0001024:	83 f8 ff             	cmp    eax,0xffffffff
c0001027:	74 66                	je     c000108f <sYSMALLOc+0x206>
c0001029:	29 e8                	sub    eax,ebp
c000102b:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000102e:	01 d0                	add    eax,edx
c0001030:	83 c8 01             	or     eax,0x1
c0001033:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001036:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000103c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001041:	74 4c                	je     c000108f <sYSMALLOc+0x206>
c0001043:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001047:	83 e8 0c             	sub    eax,0xc
c000104a:	83 e0 f8             	and    eax,0xfffffff8
c000104d:	89 c2                	mov    edx,eax
c000104f:	83 ca 01             	or     edx,0x1
c0001052:	83 f8 0f             	cmp    eax,0xf
c0001055:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001058:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001060:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001068:	76 25                	jbe    c000108f <sYSMALLOc+0x206>
c000106a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001070:	83 ec 0c             	sub    esp,0xc
c0001073:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c000107d:	83 c7 08             	add    edi,0x8
c0001080:	57                   	push   edi
c0001081:	e8 0e fd ff ff       	call   c0000d94 <dlfree>
c0001086:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000108c:	83 c4 10             	add    esp,0x10
c000108f:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001095:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000109b:	73 06                	jae    c00010a3 <sYSMALLOc+0x21a>
c000109d:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a3:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a9:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010af:	73 06                	jae    c00010b7 <sYSMALLOc+0x22e>
c00010b1:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010ba:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bd:	83 e2 fc             	and    edx,0xfffffffc
c00010c0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010c4:	0f 82 3c fe ff ff    	jb     c0000f06 <sYSMALLOc+0x7d>
c00010ca:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010ce:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010d1:	29 fa                	sub    edx,edi
c00010d3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	89 fb                	mov    ebx,edi
c00010db:	83 c0 08             	add    eax,0x8
c00010de:	83 cb 01             	or     ebx,0x1
c00010e1:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010e4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e7:	83 c4 2c             	add    esp,0x2c
c00010ea:	5b                   	pop    ebx
c00010eb:	5e                   	pop    esi
c00010ec:	5f                   	pop    edi
c00010ed:	5d                   	pop    ebp
c00010ee:	c3                   	ret    

c00010ef <dlmalloc>:
c00010ef:	55                   	push   ebp
c00010f0:	57                   	push   edi
c00010f1:	56                   	push   esi
c00010f2:	53                   	push   ebx
c00010f3:	83 ec 1c             	sub    esp,0x1c
c00010f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010fa:	83 f8 df             	cmp    eax,0xffffffdf
c00010fd:	0f 87 70 03 00 00    	ja     c0001473 <dlmalloc+0x384>
c0001103:	83 c0 0b             	add    eax,0xb
c0001106:	be 10 00 00 00       	mov    esi,0x10
c000110b:	83 f8 0f             	cmp    eax,0xf
c000110e:	76 05                	jbe    c0001115 <dlmalloc+0x26>
c0001110:	83 e0 f8             	and    eax,0xfffffff8
c0001113:	89 c6                	mov    esi,eax
c0001115:	8b 3d 20 de 02 c0    	mov    edi,DWORD PTR ds:0xc002de20
c000111b:	f7 c7 01 00 00 00    	test   edi,0x1
c0001121:	75 17                	jne    c000113a <dlmalloc+0x4b>
c0001123:	85 ff                	test   edi,edi
c0001125:	0f 85 05 03 00 00    	jne    c0001430 <dlmalloc+0x341>
c000112b:	b8 20 de 02 c0       	mov    eax,0xc002de20
c0001130:	e8 78 fb ff ff       	call   c0000cad <malloc_consolidate>
c0001135:	e9 f6 02 00 00       	jmp    c0001430 <dlmalloc+0x341>
c000113a:	39 f7                	cmp    edi,esi
c000113c:	72 1f                	jb     c000115d <dlmalloc+0x6e>
c000113e:	89 f2                	mov    edx,esi
c0001140:	c1 ea 03             	shr    edx,0x3
c0001143:	83 ea 02             	sub    edx,0x2
c0001146:	8b 04 95 24 de 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd21dc]
c000114d:	85 c0                	test   eax,eax
c000114f:	74 0c                	je     c000115d <dlmalloc+0x6e>
c0001151:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001154:	89 0c 95 24 de 02 c0 	mov    DWORD PTR [edx*4-0x3ffd21dc],ecx
c000115b:	eb 30                	jmp    c000118d <dlmalloc+0x9e>
c000115d:	89 f0                	mov    eax,esi
c000115f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001165:	77 2e                	ja     c0001195 <dlmalloc+0xa6>
c0001167:	c1 e8 03             	shr    eax,0x3
c000116a:	8d 14 c5 54 de 02 c0 	lea    edx,[eax*8-0x3ffd21ac]
c0001171:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001175:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001178:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000117b:	39 c3                	cmp    ebx,eax
c000117d:	74 2e                	je     c00011ad <dlmalloc+0xbe>
c000117f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001182:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001187:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000118a:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000118d:	83 c0 08             	add    eax,0x8
c0001190:	e9 e0 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001195:	e8 8f fa ff ff       	call   c0000c29 <largebin_index>
c000119a:	83 e7 02             	and    edi,0x2
c000119d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011a1:	74 0a                	je     c00011ad <dlmalloc+0xbe>
c00011a3:	b8 20 de 02 c0       	mov    eax,0xc002de20
c00011a8:	e8 00 fb ff ff       	call   c0000cad <malloc_consolidate>
c00011ad:	8d 46 10             	lea    eax,[esi+0x10]
c00011b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011b4:	8b 1d 60 de 02 c0    	mov    ebx,DWORD PTR ds:0xc002de60
c00011ba:	81 fb 54 de 02 c0    	cmp    ebx,0xc002de54
c00011c0:	0f 84 13 01 00 00    	je     c00012d9 <dlmalloc+0x1ea>
c00011c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011c9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011cc:	83 e7 fc             	and    edi,0xfffffffc
c00011cf:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d5:	77 4c                	ja     c0001223 <dlmalloc+0x134>
c00011d7:	3d 54 de 02 c0       	cmp    eax,0xc002de54
c00011dc:	75 45                	jne    c0001223 <dlmalloc+0x134>
c00011de:	39 1d 50 de 02 c0    	cmp    DWORD PTR ds:0xc002de50,ebx
c00011e4:	75 3d                	jne    c0001223 <dlmalloc+0x134>
c00011e6:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011ea:	73 37                	jae    c0001223 <dlmalloc+0x134>
c00011ec:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ef:	89 fa                	mov    edx,edi
c00011f1:	a3 5c de 02 c0       	mov    ds:0xc002de5c,eax
c00011f6:	a3 60 de 02 c0       	mov    ds:0xc002de60,eax
c00011fb:	a3 50 de 02 c0       	mov    ds:0xc002de50,eax
c0001200:	29 f2                	sub    edx,esi
c0001202:	c7 40 08 54 de 02 c0 	mov    DWORD PTR [eax+0x8],0xc002de54
c0001209:	c7 40 0c 54 de 02 c0 	mov    DWORD PTR [eax+0xc],0xc002de54
c0001210:	83 ce 01             	or     esi,0x1
c0001213:	89 d1                	mov    ecx,edx
c0001215:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001218:	83 c9 01             	or     ecx,0x1
c000121b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000121e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001221:	eb 15                	jmp    c0001238 <dlmalloc+0x149>
c0001223:	a3 60 de 02 c0       	mov    ds:0xc002de60,eax
c0001228:	39 fe                	cmp    esi,edi
c000122a:	c7 40 08 54 de 02 c0 	mov    DWORD PTR [eax+0x8],0xc002de54
c0001231:	75 0d                	jne    c0001240 <dlmalloc+0x151>
c0001233:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001238:	8d 43 08             	lea    eax,[ebx+0x8]
c000123b:	e9 35 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001240:	89 f8                	mov    eax,edi
c0001242:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001248:	77 19                	ja     c0001263 <dlmalloc+0x174>
c000124a:	c1 e8 03             	shr    eax,0x3
c000124d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001250:	83 c2 0d             	add    edx,0xd
c0001253:	8d 2c 95 18 de 02 c0 	lea    ebp,[edx*4-0x3ffd21e8]
c000125a:	8b 14 95 20 de 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd21e0]
c0001261:	eb 46                	jmp    c00012a9 <dlmalloc+0x1ba>
c0001263:	e8 c1 f9 ff ff       	call   c0000c29 <largebin_index>
c0001268:	8d 14 00             	lea    edx,[eax+eax*1]
c000126b:	83 c2 0d             	add    edx,0xd
c000126e:	8d 0c 95 20 de 02 c0 	lea    ecx,[edx*4-0x3ffd21e0]
c0001275:	8b 14 95 20 de 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd21e0]
c000127c:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000127f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001283:	89 d5                	mov    ebp,edx
c0001285:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001289:	74 1e                	je     c00012a9 <dlmalloc+0x1ba>
c000128b:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000128e:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001291:	77 12                	ja     c00012a5 <dlmalloc+0x1b6>
c0001293:	83 cf 01             	or     edi,0x1
c0001296:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001299:	76 05                	jbe    c00012a0 <dlmalloc+0x1b1>
c000129b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000129e:	eb f6                	jmp    c0001296 <dlmalloc+0x1a7>
c00012a0:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012a3:	eb 04                	jmp    c00012a9 <dlmalloc+0x1ba>
c00012a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012a9:	89 c7                	mov    edi,eax
c00012ab:	88 c1                	mov    cl,al
c00012ad:	c1 ff 05             	sar    edi,0x5
c00012b0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012b4:	bf 01 00 00 00       	mov    edi,0x1
c00012b9:	d3 e7                	shl    edi,cl
c00012bb:	89 f8                	mov    eax,edi
c00012bd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012c1:	09 04 bd 54 e1 02 c0 	or     DWORD PTR [edi*4-0x3ffd1eac],eax
c00012c8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012cb:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012ce:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012d1:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012d4:	e9 db fe ff ff       	jmp    c00011b4 <dlmalloc+0xc5>
c00012d9:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012df:	76 78                	jbe    c0001359 <dlmalloc+0x26a>
c00012e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012e5:	8d 04 c5 54 de 02 c0 	lea    eax,[eax*8-0x3ffd21ac]
c00012ec:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ef:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012f2:	39 ca                	cmp    edx,ecx
c00012f4:	74 63                	je     c0001359 <dlmalloc+0x26a>
c00012f6:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012f9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012fc:	83 e3 fc             	and    ebx,0xfffffffc
c00012ff:	39 de                	cmp    esi,ebx
c0001301:	77 52                	ja     c0001355 <dlmalloc+0x266>
c0001303:	89 df                	mov    edi,ebx
c0001305:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001308:	29 f7                	sub    edi,esi
c000130a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000130d:	01 d3                	add    ebx,edx
c000130f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001312:	83 ff 0f             	cmp    edi,0xf
c0001315:	8d 42 08             	lea    eax,[edx+0x8]
c0001318:	77 09                	ja     c0001323 <dlmalloc+0x234>
c000131a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000131e:	e9 52 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001323:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001326:	83 ce 01             	or     esi,0x1
c0001329:	89 0d 5c de 02 c0    	mov    DWORD PTR ds:0xc002de5c,ecx
c000132f:	89 0d 60 de 02 c0    	mov    DWORD PTR ds:0xc002de60,ecx
c0001335:	c7 41 08 54 de 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002de54
c000133c:	c7 41 0c 54 de 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002de54
c0001343:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001346:	89 fa                	mov    edx,edi
c0001348:	83 ca 01             	or     edx,0x1
c000134b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000134e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001350:	e9 20 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001355:	89 c2                	mov    edx,eax
c0001357:	eb 99                	jmp    c00012f2 <dlmalloc+0x203>
c0001359:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	41                   	inc    ecx
c0001363:	89 cb                	mov    ebx,ecx
c0001365:	8d 14 cd 4c de 02 c0 	lea    edx,[ecx*8-0x3ffd21b4]
c000136c:	c1 eb 05             	shr    ebx,0x5
c000136f:	d3 e0                	shl    eax,cl
c0001371:	8b 3c 9d 54 e1 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1eac]
c0001378:	39 f8                	cmp    eax,edi
c000137a:	77 04                	ja     c0001380 <dlmalloc+0x291>
c000137c:	85 c0                	test   eax,eax
c000137e:	75 26                	jne    c00013a6 <dlmalloc+0x2b7>
c0001380:	43                   	inc    ebx
c0001381:	83 fb 02             	cmp    ebx,0x2
c0001384:	0f 87 a6 00 00 00    	ja     c0001430 <dlmalloc+0x341>
c000138a:	8b 3c 9d 54 e1 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1eac]
c0001391:	85 ff                	test   edi,edi
c0001393:	74 eb                	je     c0001380 <dlmalloc+0x291>
c0001395:	89 d8                	mov    eax,ebx
c0001397:	c1 e0 06             	shl    eax,0x6
c000139a:	8d 14 85 4c de 02 c0 	lea    edx,[eax*4-0x3ffd21b4]
c00013a1:	b8 01 00 00 00       	mov    eax,0x1
c00013a6:	85 f8                	test   eax,edi
c00013a8:	75 07                	jne    c00013b1 <dlmalloc+0x2c2>
c00013aa:	83 c2 08             	add    edx,0x8
c00013ad:	01 c0                	add    eax,eax
c00013af:	eb f5                	jmp    c00013a6 <dlmalloc+0x2b7>
c00013b1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013b4:	39 ca                	cmp    edx,ecx
c00013b6:	75 14                	jne    c00013cc <dlmalloc+0x2dd>
c00013b8:	89 c1                	mov    ecx,eax
c00013ba:	83 c2 08             	add    edx,0x8
c00013bd:	f7 d1                	not    ecx
c00013bf:	01 c0                	add    eax,eax
c00013c1:	21 cf                	and    edi,ecx
c00013c3:	89 3c 9d 54 e1 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd1eac],edi
c00013ca:	eb ac                	jmp    c0001378 <dlmalloc+0x289>
c00013cc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013cf:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013d2:	83 e0 fc             	and    eax,0xfffffffc
c00013d5:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013d8:	89 c3                	mov    ebx,eax
c00013da:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013dd:	29 f3                	sub    ebx,esi
c00013df:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013e2:	83 fb 0f             	cmp    ebx,0xf
c00013e5:	8d 41 08             	lea    eax,[ecx+0x8]
c00013e8:	77 09                	ja     c00013f3 <dlmalloc+0x304>
c00013ea:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013ee:	e9 82 00 00 00       	jmp    c0001475 <dlmalloc+0x386>
c00013f3:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013f6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013fc:	89 3d 5c de 02 c0    	mov    DWORD PTR ds:0xc002de5c,edi
c0001402:	89 3d 60 de 02 c0    	mov    DWORD PTR ds:0xc002de60,edi
c0001408:	c7 47 08 54 de 02 c0 	mov    DWORD PTR [edi+0x8],0xc002de54
c000140f:	c7 47 0c 54 de 02 c0 	mov    DWORD PTR [edi+0xc],0xc002de54
c0001416:	77 06                	ja     c000141e <dlmalloc+0x32f>
c0001418:	89 3d 50 de 02 c0    	mov    DWORD PTR ds:0xc002de50,edi
c000141e:	83 ce 01             	or     esi,0x1
c0001421:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001424:	89 d9                	mov    ecx,ebx
c0001426:	83 c9 01             	or     ecx,0x1
c0001429:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000142c:	89 1a                	mov    DWORD PTR [edx],ebx
c000142e:	eb 45                	jmp    c0001475 <dlmalloc+0x386>
c0001430:	a1 4c de 02 c0       	mov    eax,ds:0xc002de4c
c0001435:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001438:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000143b:	83 e2 fc             	and    edx,0xfffffffc
c000143e:	39 d1                	cmp    ecx,edx
c0001440:	77 1e                	ja     c0001460 <dlmalloc+0x371>
c0001442:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001445:	89 f3                	mov    ebx,esi
c0001447:	89 0d 4c de 02 c0    	mov    DWORD PTR ds:0xc002de4c,ecx
c000144d:	83 cb 01             	or     ebx,0x1
c0001450:	29 f2                	sub    edx,esi
c0001452:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001455:	83 ca 01             	or     edx,0x1
c0001458:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000145b:	e9 2d fd ff ff       	jmp    c000118d <dlmalloc+0x9e>
c0001460:	83 c4 1c             	add    esp,0x1c
c0001463:	89 f0                	mov    eax,esi
c0001465:	5b                   	pop    ebx
c0001466:	ba 20 de 02 c0       	mov    edx,0xc002de20
c000146b:	5e                   	pop    esi
c000146c:	5f                   	pop    edi
c000146d:	5d                   	pop    ebp
c000146e:	e9 16 fa ff ff       	jmp    c0000e89 <sYSMALLOc>
c0001473:	31 c0                	xor    eax,eax
c0001475:	83 c4 1c             	add    esp,0x1c
c0001478:	5b                   	pop    ebx
c0001479:	5e                   	pop    esi
c000147a:	5f                   	pop    edi
c000147b:	5d                   	pop    ebp
c000147c:	c3                   	ret    

c000147d <iALLOc>:
c000147d:	55                   	push   ebp
c000147e:	89 c5                	mov    ebp,eax
c0001480:	57                   	push   edi
c0001481:	56                   	push   esi
c0001482:	53                   	push   ebx
c0001483:	83 ec 2c             	sub    esp,0x2c
c0001486:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000148a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000148e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001492:	83 3d 20 de 02 c0 00 	cmp    DWORD PTR ds:0xc002de20,0x0
c0001499:	75 12                	jne    c00014ad <iALLOc+0x30>
c000149b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000149f:	b8 20 de 02 c0       	mov    eax,0xc002de20
c00014a4:	e8 04 f8 ff ff       	call   c0000cad <malloc_consolidate>
c00014a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014b2:	74 12                	je     c00014c6 <iALLOc+0x49>
c00014b4:	85 ed                	test   ebp,ebp
c00014b6:	0f 84 64 01 00 00    	je     c0001620 <iALLOc+0x1a3>
c00014bc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014c4:	eb 33                	jmp    c00014f9 <iALLOc+0x7c>
c00014c6:	85 ed                	test   ebp,ebp
c00014c8:	75 14                	jne    c00014de <iALLOc+0x61>
c00014ca:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014d2:	83 c4 2c             	add    esp,0x2c
c00014d5:	5b                   	pop    ebx
c00014d6:	5e                   	pop    esi
c00014d7:	5f                   	pop    edi
c00014d8:	5d                   	pop    ebp
c00014d9:	e9 11 fc ff ff       	jmp    c00010ef <dlmalloc>
c00014de:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e5:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014ed:	83 f8 0f             	cmp    eax,0xf
c00014f0:	76 07                	jbe    c00014f9 <iALLOc+0x7c>
c00014f2:	83 e0 f8             	and    eax,0xfffffff8
c00014f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014f9:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014fe:	75 09                	jne    c0001509 <iALLOc+0x8c>
c0001500:	89 d0                	mov    eax,edx
c0001502:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001505:	31 f6                	xor    esi,esi
c0001507:	eb 3b                	jmp    c0001544 <iALLOc+0xc7>
c0001509:	8b 02                	mov    eax,DWORD PTR [edx]
c000150b:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001513:	83 c0 0b             	add    eax,0xb
c0001516:	83 f8 0f             	cmp    eax,0xf
c0001519:	76 07                	jbe    c0001522 <iALLOc+0xa5>
c000151b:	83 e0 f8             	and    eax,0xfffffff8
c000151e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001522:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001526:	0f af f5             	imul   esi,ebp
c0001529:	eb 25                	jmp    c0001550 <iALLOc+0xd3>
c000152b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000152d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001530:	bb 10 00 00 00       	mov    ebx,0x10
c0001535:	83 f9 0f             	cmp    ecx,0xf
c0001538:	76 05                	jbe    c000153f <iALLOc+0xc2>
c000153a:	83 e1 f8             	and    ecx,0xfffffff8
c000153d:	89 cb                	mov    ebx,ecx
c000153f:	01 de                	add    esi,ebx
c0001541:	83 c0 04             	add    eax,0x4
c0001544:	39 c7                	cmp    edi,eax
c0001546:	75 e3                	jne    c000152b <iALLOc+0xae>
c0001548:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001550:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001554:	8b 1d 74 e1 02 c0    	mov    ebx,DWORD PTR ds:0xc002e174
c000155a:	83 ec 0c             	sub    esp,0xc
c000155d:	c7 05 74 e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e174,0x0
c0001567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000156b:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000156f:	50                   	push   eax
c0001570:	e8 7a fb ff ff       	call   c00010ef <dlmalloc>
c0001575:	83 c4 10             	add    esp,0x10
c0001578:	89 1d 74 e1 02 c0    	mov    DWORD PTR ds:0xc002e174,ebx
c000157e:	85 c0                	test   eax,eax
c0001580:	0f 84 92 00 00 00    	je     c0001618 <iALLOc+0x19b>
c0001586:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001589:	8d 78 f8             	lea    edi,[eax-0x8]
c000158c:	83 e3 fc             	and    ebx,0xfffffffc
c000158f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001593:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001598:	74 1e                	je     c00015b8 <iALLOc+0x13b>
c000159a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000159e:	89 d9                	mov    ecx,ebx
c00015a0:	52                   	push   edx
c00015a1:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015a5:	83 e9 04             	sub    ecx,0x4
c00015a8:	51                   	push   ecx
c00015a9:	6a 00                	push   0x0
c00015ab:	50                   	push   eax
c00015ac:	e8 9f f1 ff ff       	call   c0000750 <memset>
c00015b1:	83 c4 10             	add    esp,0x10
c00015b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015bd:	75 14                	jne    c00015d3 <iALLOc+0x156>
c00015bf:	8d 04 37             	lea    eax,[edi+esi*1]
c00015c2:	29 f3                	sub    ebx,esi
c00015c4:	8d 48 08             	lea    ecx,[eax+0x8]
c00015c7:	83 cb 01             	or     ebx,0x1
c00015ca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015ce:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015d1:	89 f3                	mov    ebx,esi
c00015d3:	31 c0                	xor    eax,eax
c00015d5:	4d                   	dec    ebp
c00015d6:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015dd:	39 c5                	cmp    ebp,eax
c00015df:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015e2:	74 2c                	je     c0001610 <iALLOc+0x193>
c00015e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015e8:	85 c9                	test   ecx,ecx
c00015ea:	75 15                	jne    c0001601 <iALLOc+0x184>
c00015ec:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ef:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015f2:	b9 10 00 00 00       	mov    ecx,0x10
c00015f7:	83 fe 0f             	cmp    esi,0xf
c00015fa:	76 05                	jbe    c0001601 <iALLOc+0x184>
c00015fc:	83 e6 f8             	and    esi,0xfffffff8
c00015ff:	89 f1                	mov    ecx,esi
c0001601:	89 ce                	mov    esi,ecx
c0001603:	29 cb                	sub    ebx,ecx
c0001605:	83 ce 01             	or     esi,0x1
c0001608:	40                   	inc    eax
c0001609:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000160c:	01 cf                	add    edi,ecx
c000160e:	eb c6                	jmp    c00015d6 <iALLOc+0x159>
c0001610:	83 cb 01             	or     ebx,0x1
c0001613:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001616:	eb 08                	jmp    c0001620 <iALLOc+0x1a3>
c0001618:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001620:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001624:	83 c4 2c             	add    esp,0x2c
c0001627:	5b                   	pop    ebx
c0001628:	5e                   	pop    esi
c0001629:	5f                   	pop    edi
c000162a:	5d                   	pop    ebp
c000162b:	c3                   	ret    

c000162c <dlrealloc>:
c000162c:	55                   	push   ebp
c000162d:	57                   	push   edi
c000162e:	56                   	push   esi
c000162f:	53                   	push   ebx
c0001630:	83 ec 1c             	sub    esp,0x1c
c0001633:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001637:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000163b:	85 db                	test   ebx,ebx
c000163d:	75 10                	jne    c000164f <dlrealloc+0x23>
c000163f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001643:	83 c4 1c             	add    esp,0x1c
c0001646:	5b                   	pop    ebx
c0001647:	5e                   	pop    esi
c0001648:	5f                   	pop    edi
c0001649:	5d                   	pop    ebp
c000164a:	e9 a0 fa ff ff       	jmp    c00010ef <dlmalloc>
c000164f:	83 f8 df             	cmp    eax,0xffffffdf
c0001652:	76 07                	jbe    c000165b <dlrealloc+0x2f>
c0001654:	31 db                	xor    ebx,ebx
c0001656:	e9 6a 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c000165b:	83 c0 0b             	add    eax,0xb
c000165e:	bd 10 00 00 00       	mov    ebp,0x10
c0001663:	83 f8 0f             	cmp    eax,0xf
c0001666:	76 05                	jbe    c000166d <dlrealloc+0x41>
c0001668:	83 e0 f8             	and    eax,0xfffffff8
c000166b:	89 c5                	mov    ebp,eax
c000166d:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001670:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001673:	89 c6                	mov    esi,eax
c0001675:	83 e6 fc             	and    esi,0xfffffffc
c0001678:	a8 02                	test   al,0x2
c000167a:	75 d8                	jne    c0001654 <dlrealloc+0x28>
c000167c:	39 f5                	cmp    ebp,esi
c000167e:	0f 86 04 01 00 00    	jbe    c0001788 <dlrealloc+0x15c>
c0001684:	8d 14 37             	lea    edx,[edi+esi*1]
c0001687:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000168a:	39 15 4c de 02 c0    	cmp    DWORD PTR ds:0xc002de4c,edx
c0001690:	75 33                	jne    c00016c5 <dlrealloc+0x99>
c0001692:	83 e1 fc             	and    ecx,0xfffffffc
c0001695:	01 f1                	add    ecx,esi
c0001697:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000169b:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000169e:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016a2:	77 49                	ja     c00016ed <dlrealloc+0xc1>
c00016a4:	01 ef                	add    edi,ebp
c00016a6:	83 e0 01             	and    eax,0x1
c00016a9:	09 e8                	or     eax,ebp
c00016ab:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016ae:	89 3d 4c de 02 c0    	mov    DWORD PTR ds:0xc002de4c,edi
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	29 e8                	sub    eax,ebp
c00016ba:	83 c8 01             	or     eax,0x1
c00016bd:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016c0:	e9 00 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c00016c5:	89 c8                	mov    eax,ecx
c00016c7:	83 e0 fe             	and    eax,0xfffffffe
c00016ca:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016cf:	75 1c                	jne    c00016ed <dlrealloc+0xc1>
c00016d1:	83 e1 fc             	and    ecx,0xfffffffc
c00016d4:	01 f1                	add    ecx,esi
c00016d6:	39 cd                	cmp    ebp,ecx
c00016d8:	77 13                	ja     c00016ed <dlrealloc+0xc1>
c00016da:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00016dd:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00016e0:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00016e3:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016e6:	89 ce                	mov    esi,ecx
c00016e8:	e9 9b 00 00 00       	jmp    c0001788 <dlrealloc+0x15c>
c00016ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016f1:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016f4:	83 ec 0c             	sub    esp,0xc
c00016f7:	50                   	push   eax
c00016f8:	e8 f2 f9 ff ff       	call   c00010ef <dlmalloc>
c00016fd:	83 c4 10             	add    esp,0x10
c0001700:	85 c0                	test   eax,eax
c0001702:	0f 84 4c ff ff ff    	je     c0001654 <dlrealloc+0x28>
c0001708:	8d 48 f8             	lea    ecx,[eax-0x8]
c000170b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000170f:	39 ca                	cmp    edx,ecx
c0001711:	75 0a                	jne    c000171d <dlrealloc+0xf1>
c0001713:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001716:	83 e0 fc             	and    eax,0xfffffffc
c0001719:	01 c6                	add    esi,eax
c000171b:	eb 6b                	jmp    c0001788 <dlrealloc+0x15c>
c000171d:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001720:	83 f9 27             	cmp    ecx,0x27
c0001723:	76 08                	jbe    c000172d <dlrealloc+0x101>
c0001725:	89 de                	mov    esi,ebx
c0001727:	89 c7                	mov    edi,eax
c0001729:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000172b:	eb 43                	jmp    c0001770 <dlrealloc+0x144>
c000172d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000172f:	83 f9 13             	cmp    ecx,0x13
c0001732:	89 10                	mov    DWORD PTR [eax],edx
c0001734:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001737:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000173a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000173d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001740:	76 2e                	jbe    c0001770 <dlrealloc+0x144>
c0001742:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001745:	83 f9 1b             	cmp    ecx,0x1b
c0001748:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000174b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000174e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001751:	76 1d                	jbe    c0001770 <dlrealloc+0x144>
c0001753:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001756:	83 f9 23             	cmp    ecx,0x23
c0001759:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000175c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000175f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001762:	76 0c                	jbe    c0001770 <dlrealloc+0x144>
c0001764:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001767:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000176a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000176d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001770:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001774:	83 ec 0c             	sub    esp,0xc
c0001777:	53                   	push   ebx
c0001778:	e8 17 f6 ff ff       	call   c0000d94 <dlfree>
c000177d:	83 c4 10             	add    esp,0x10
c0001780:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001784:	89 c3                	mov    ebx,eax
c0001786:	eb 3d                	jmp    c00017c5 <dlrealloc+0x199>
c0001788:	89 f2                	mov    edx,esi
c000178a:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c000178d:	29 ea                	sub    edx,ebp
c000178f:	83 e1 01             	and    ecx,0x1
c0001792:	8d 04 37             	lea    eax,[edi+esi*1]
c0001795:	83 fa 0f             	cmp    edx,0xf
c0001798:	77 0b                	ja     c00017a5 <dlrealloc+0x179>
c000179a:	09 ce                	or     esi,ecx
c000179c:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000179f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017a3:	eb 20                	jmp    c00017c5 <dlrealloc+0x199>
c00017a5:	01 ef                	add    edi,ebp
c00017a7:	83 ec 0c             	sub    esp,0xc
c00017aa:	09 cd                	or     ebp,ecx
c00017ac:	83 ca 01             	or     edx,0x1
c00017af:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017b2:	83 c7 08             	add    edi,0x8
c00017b5:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017b8:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017bc:	57                   	push   edi
c00017bd:	e8 d2 f5 ff ff       	call   c0000d94 <dlfree>
c00017c2:	83 c4 10             	add    esp,0x10
c00017c5:	83 c4 1c             	add    esp,0x1c
c00017c8:	89 d8                	mov    eax,ebx
c00017ca:	5b                   	pop    ebx
c00017cb:	5e                   	pop    esi
c00017cc:	5f                   	pop    edi
c00017cd:	5d                   	pop    ebp
c00017ce:	c3                   	ret    

c00017cf <dlmemalign>:
c00017cf:	55                   	push   ebp
c00017d0:	57                   	push   edi
c00017d1:	56                   	push   esi
c00017d2:	53                   	push   ebx
c00017d3:	83 ec 0c             	sub    esp,0xc
c00017d6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017de:	83 fa 08             	cmp    edx,0x8
c00017e1:	77 10                	ja     c00017f3 <dlmemalign+0x24>
c00017e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017e7:	83 c4 0c             	add    esp,0xc
c00017ea:	5b                   	pop    ebx
c00017eb:	5e                   	pop    esi
c00017ec:	5f                   	pop    edi
c00017ed:	5d                   	pop    ebp
c00017ee:	e9 fc f8 ff ff       	jmp    c00010ef <dlmalloc>
c00017f3:	bf 10 00 00 00       	mov    edi,0x10
c00017f8:	83 fa 0f             	cmp    edx,0xf
c00017fb:	76 13                	jbe    c0001810 <dlmemalign+0x41>
c00017fd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001800:	85 d1                	test   ecx,edx
c0001802:	75 04                	jne    c0001808 <dlmemalign+0x39>
c0001804:	89 d7                	mov    edi,edx
c0001806:	eb 08                	jmp    c0001810 <dlmemalign+0x41>
c0001808:	39 d7                	cmp    edi,edx
c000180a:	73 04                	jae    c0001810 <dlmemalign+0x41>
c000180c:	01 ff                	add    edi,edi
c000180e:	eb f8                	jmp    c0001808 <dlmemalign+0x39>
c0001810:	83 f8 df             	cmp    eax,0xffffffdf
c0001813:	76 07                	jbe    c000181c <dlmemalign+0x4d>
c0001815:	31 c0                	xor    eax,eax
c0001817:	e9 ce 00 00 00       	jmp    c00018ea <dlmemalign+0x11b>
c000181c:	83 c0 0b             	add    eax,0xb
c000181f:	bd 10 00 00 00       	mov    ebp,0x10
c0001824:	83 f8 0f             	cmp    eax,0xf
c0001827:	76 05                	jbe    c000182e <dlmemalign+0x5f>
c0001829:	83 e0 f8             	and    eax,0xfffffff8
c000182c:	89 c5                	mov    ebp,eax
c000182e:	83 ec 0c             	sub    esp,0xc
c0001831:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001835:	50                   	push   eax
c0001836:	e8 b4 f8 ff ff       	call   c00010ef <dlmalloc>
c000183b:	83 c4 10             	add    esp,0x10
c000183e:	89 c1                	mov    ecx,eax
c0001840:	85 c0                	test   eax,eax
c0001842:	74 d1                	je     c0001815 <dlmemalign+0x46>
c0001844:	31 d2                	xor    edx,edx
c0001846:	8d 70 f8             	lea    esi,[eax-0x8]
c0001849:	f7 f7                	div    edi
c000184b:	85 d2                	test   edx,edx
c000184d:	74 62                	je     c00018b1 <dlmemalign+0xe2>
c000184f:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001853:	89 f8                	mov    eax,edi
c0001855:	f7 d8                	neg    eax
c0001857:	21 c3                	and    ebx,eax
c0001859:	83 eb 08             	sub    ebx,0x8
c000185c:	89 d8                	mov    eax,ebx
c000185e:	29 f0                	sub    eax,esi
c0001860:	83 f8 0f             	cmp    eax,0xf
c0001863:	77 02                	ja     c0001867 <dlmemalign+0x98>
c0001865:	01 fb                	add    ebx,edi
c0001867:	89 d8                	mov    eax,ebx
c0001869:	29 f0                	sub    eax,esi
c000186b:	89 c6                	mov    esi,eax
c000186d:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001870:	89 c2                	mov    edx,eax
c0001872:	83 e2 fc             	and    edx,0xfffffffc
c0001875:	29 f2                	sub    edx,esi
c0001877:	a8 02                	test   al,0x2
c0001879:	74 10                	je     c000188b <dlmemalign+0xbc>
c000187b:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000187e:	83 ca 02             	or     edx,0x2
c0001881:	8d 43 08             	lea    eax,[ebx+0x8]
c0001884:	89 33                	mov    DWORD PTR [ebx],esi
c0001886:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001889:	eb 5f                	jmp    c00018ea <dlmemalign+0x11b>
c000188b:	83 ec 0c             	sub    esp,0xc
c000188e:	89 d0                	mov    eax,edx
c0001890:	83 c8 01             	or     eax,0x1
c0001893:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001896:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c000189b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000189e:	83 e0 01             	and    eax,0x1
c00018a1:	09 f0                	or     eax,esi
c00018a3:	89 de                	mov    esi,ebx
c00018a5:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018a8:	51                   	push   ecx
c00018a9:	e8 e6 f4 ff ff       	call   c0000d94 <dlfree>
c00018ae:	83 c4 10             	add    esp,0x10
c00018b1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018b4:	a8 02                	test   al,0x2
c00018b6:	75 2f                	jne    c00018e7 <dlmemalign+0x118>
c00018b8:	83 e0 fc             	and    eax,0xfffffffc
c00018bb:	8d 55 10             	lea    edx,[ebp+0x10]
c00018be:	39 c2                	cmp    edx,eax
c00018c0:	73 25                	jae    c00018e7 <dlmemalign+0x118>
c00018c2:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	29 e8                	sub    eax,ebp
c00018ca:	83 c2 08             	add    edx,0x8
c00018cd:	83 c8 01             	or     eax,0x1
c00018d0:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00018d3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018d6:	83 e0 01             	and    eax,0x1
c00018d9:	09 c5                	or     ebp,eax
c00018db:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018de:	52                   	push   edx
c00018df:	e8 b0 f4 ff ff       	call   c0000d94 <dlfree>
c00018e4:	83 c4 10             	add    esp,0x10
c00018e7:	8d 46 08             	lea    eax,[esi+0x8]
c00018ea:	83 c4 0c             	add    esp,0xc
c00018ed:	5b                   	pop    ebx
c00018ee:	5e                   	pop    esi
c00018ef:	5f                   	pop    edi
c00018f0:	5d                   	pop    ebp
c00018f1:	c3                   	ret    

c00018f2 <dlcalloc>:
c00018f2:	53                   	push   ebx
c00018f3:	83 ec 14             	sub    esp,0x14
c00018f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018fa:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018ff:	50                   	push   eax
c0001900:	e8 ea f7 ff ff       	call   c00010ef <dlmalloc>
c0001905:	83 c4 10             	add    esp,0x10
c0001908:	89 c3                	mov    ebx,eax
c000190a:	85 c0                	test   eax,eax
c000190c:	74 77                	je     c0001985 <dlcalloc+0x93>
c000190e:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001911:	89 d0                	mov    eax,edx
c0001913:	83 e0 fc             	and    eax,0xfffffffc
c0001916:	80 e2 02             	and    dl,0x2
c0001919:	75 5a                	jne    c0001975 <dlcalloc+0x83>
c000191b:	83 e8 04             	sub    eax,0x4
c000191e:	83 f8 27             	cmp    eax,0x27
c0001921:	76 03                	jbe    c0001926 <dlcalloc+0x34>
c0001923:	51                   	push   ecx
c0001924:	eb 53                	jmp    c0001979 <dlcalloc+0x87>
c0001926:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000192c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001933:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000193a:	83 f8 13             	cmp    eax,0x13
c000193d:	76 46                	jbe    c0001985 <dlcalloc+0x93>
c000193f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001946:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000194d:	83 f8 1b             	cmp    eax,0x1b
c0001950:	76 33                	jbe    c0001985 <dlcalloc+0x93>
c0001952:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001959:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001960:	83 f8 23             	cmp    eax,0x23
c0001963:	76 20                	jbe    c0001985 <dlcalloc+0x93>
c0001965:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000196c:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001973:	eb 10                	jmp    c0001985 <dlcalloc+0x93>
c0001975:	83 e8 08             	sub    eax,0x8
c0001978:	52                   	push   edx
c0001979:	50                   	push   eax
c000197a:	6a 00                	push   0x0
c000197c:	53                   	push   ebx
c000197d:	e8 ce ed ff ff       	call   c0000750 <memset>
c0001982:	83 c4 10             	add    esp,0x10
c0001985:	89 d8                	mov    eax,ebx
c0001987:	83 c4 08             	add    esp,0x8
c000198a:	5b                   	pop    ebx
c000198b:	c3                   	ret    

c000198c <dlcfree>:
c000198c:	e9 03 f4 ff ff       	jmp    c0000d94 <dlfree>

c0001991 <dlindependent_calloc>:
c0001991:	83 ec 28             	sub    esp,0x28
c0001994:	b9 03 00 00 00       	mov    ecx,0x3
c0001999:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019a1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019a5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019ad:	e8 cb fa ff ff       	call   c000147d <iALLOc>
c00019b2:	83 c4 2c             	add    esp,0x2c
c00019b5:	c3                   	ret    

c00019b6 <dlindependent_comalloc>:
c00019b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019be:	31 c9                	xor    ecx,ecx
c00019c0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019c8:	e9 b0 fa ff ff       	jmp    c000147d <iALLOc>

c00019cd <dlvalloc>:
c00019cd:	83 ec 0c             	sub    esp,0xc
c00019d0:	83 3d 20 de 02 c0 00 	cmp    DWORD PTR ds:0xc002de20,0x0
c00019d7:	75 0a                	jne    c00019e3 <dlvalloc+0x16>
c00019d9:	b8 20 de 02 c0       	mov    eax,0xc002de20
c00019de:	e8 ca f2 ff ff       	call   c0000cad <malloc_consolidate>
c00019e3:	50                   	push   eax
c00019e4:	50                   	push   eax
c00019e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019e9:	ff 35 7c e1 02 c0    	push   DWORD PTR ds:0xc002e17c
c00019ef:	e8 db fd ff ff       	call   c00017cf <dlmemalign>
c00019f4:	83 c4 1c             	add    esp,0x1c
c00019f7:	c3                   	ret    

c00019f8 <dlpvalloc>:
c00019f8:	83 ec 0c             	sub    esp,0xc
c00019fb:	83 3d 20 de 02 c0 00 	cmp    DWORD PTR ds:0xc002de20,0x0
c0001a02:	75 0a                	jne    c0001a0e <dlpvalloc+0x16>
c0001a04:	b8 20 de 02 c0       	mov    eax,0xc002de20
c0001a09:	e8 9f f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a0e:	a1 7c e1 02 c0       	mov    eax,ds:0xc002e17c
c0001a13:	89 c1                	mov    ecx,eax
c0001a15:	52                   	push   edx
c0001a16:	f7 d9                	neg    ecx
c0001a18:	52                   	push   edx
c0001a19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a1d:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a21:	21 ca                	and    edx,ecx
c0001a23:	52                   	push   edx
c0001a24:	50                   	push   eax
c0001a25:	e8 a5 fd ff ff       	call   c00017cf <dlmemalign>
c0001a2a:	83 c4 1c             	add    esp,0x1c
c0001a2d:	c3                   	ret    

c0001a2e <dlmalloc_trim>:
c0001a2e:	b8 20 de 02 c0       	mov    eax,0xc002de20
c0001a33:	e8 75 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a38:	31 c0                	xor    eax,eax
c0001a3a:	c3                   	ret    

c0001a3b <dlmalloc_usable_size>:
c0001a3b:	53                   	push   ebx
c0001a3c:	31 c0                	xor    eax,eax
c0001a3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a42:	85 c9                	test   ecx,ecx
c0001a44:	74 24                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a46:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a49:	f6 c2 02             	test   dl,0x2
c0001a4c:	74 08                	je     c0001a56 <dlmalloc_usable_size+0x1b>
c0001a4e:	83 e2 fc             	and    edx,0xfffffffc
c0001a51:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a54:	eb 14                	jmp    c0001a6a <dlmalloc_usable_size+0x2f>
c0001a56:	89 d3                	mov    ebx,edx
c0001a58:	31 c0                	xor    eax,eax
c0001a5a:	83 e3 fe             	and    ebx,0xfffffffe
c0001a5d:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a62:	74 06                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a64:	83 e2 fc             	and    edx,0xfffffffc
c0001a67:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a6a:	5b                   	pop    ebx
c0001a6b:	c3                   	ret    

c0001a6c <dlmallinfo>:
c0001a6c:	55                   	push   ebp
c0001a6d:	57                   	push   edi
c0001a6e:	56                   	push   esi
c0001a6f:	53                   	push   ebx
c0001a70:	83 ec 08             	sub    esp,0x8
c0001a73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a77:	83 3d 4c de 02 c0 00 	cmp    DWORD PTR ds:0xc002de4c,0x0
c0001a7e:	75 0a                	jne    c0001a8a <dlmallinfo+0x1e>
c0001a80:	b8 20 de 02 c0       	mov    eax,0xc002de20
c0001a85:	e8 23 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a8a:	a1 4c de 02 c0       	mov    eax,ds:0xc002de4c
c0001a8f:	31 ed                	xor    ebp,ebp
c0001a91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a94:	31 c9                	xor    ecx,ecx
c0001a96:	83 e0 fc             	and    eax,0xfffffffc
c0001a99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a9d:	31 c0                	xor    eax,eax
c0001a9f:	8b 14 85 24 de 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd21dc]
c0001aa6:	85 d2                	test   edx,edx
c0001aa8:	74 0e                	je     c0001ab8 <dlmallinfo+0x4c>
c0001aaa:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aad:	45                   	inc    ebp
c0001aae:	83 e6 fc             	and    esi,0xfffffffc
c0001ab1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001ab4:	01 f1                	add    ecx,esi
c0001ab6:	eb ee                	jmp    c0001aa6 <dlmallinfo+0x3a>
c0001ab8:	40                   	inc    eax
c0001ab9:	83 f8 0a             	cmp    eax,0xa
c0001abc:	75 e1                	jne    c0001a9f <dlmallinfo+0x33>
c0001abe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ac2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001ac9:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001acc:	b8 54 de 02 c0       	mov    eax,0xc002de54
c0001ad1:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001ad4:	39 f0                	cmp    eax,esi
c0001ad6:	74 10                	je     c0001ae8 <dlmallinfo+0x7c>
c0001ad8:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001adb:	ff 04 24             	inc    DWORD PTR [esp]
c0001ade:	83 e7 fc             	and    edi,0xfffffffc
c0001ae1:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ae4:	01 fa                	add    edx,edi
c0001ae6:	eb ec                	jmp    c0001ad4 <dlmallinfo+0x68>
c0001ae8:	83 c0 08             	add    eax,0x8
c0001aeb:	3d 4c e1 02 c0       	cmp    eax,0xc002e14c
c0001af0:	75 df                	jne    c0001ad1 <dlmallinfo+0x65>
c0001af2:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af5:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af8:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001afb:	a1 88 e1 02 c0       	mov    eax,ds:0xc002e188
c0001b00:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b03:	89 03                	mov    DWORD PTR [ebx],eax
c0001b05:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b08:	8b 35 70 e1 02 c0    	mov    esi,DWORD PTR ds:0xc002e170
c0001b0e:	29 d0                	sub    eax,edx
c0001b10:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b13:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b16:	8b 35 84 e1 02 c0    	mov    esi,DWORD PTR ds:0xc002e184
c0001b1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b20:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b23:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b26:	8b 35 94 e1 02 c0    	mov    esi,DWORD PTR ds:0xc002e194
c0001b2c:	89 d8                	mov    eax,ebx
c0001b2e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b31:	83 c4 08             	add    esp,0x8
c0001b34:	5b                   	pop    ebx
c0001b35:	5e                   	pop    esi
c0001b36:	5f                   	pop    edi
c0001b37:	5d                   	pop    ebp
c0001b38:	c2 04 00             	ret    0x4

c0001b3b <dlmalloc_stats>:
c0001b3b:	83 ec 30             	sub    esp,0x30
c0001b3e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b42:	50                   	push   eax
c0001b43:	e8 24 ff ff ff       	call   c0001a6c <dlmallinfo>
c0001b48:	83 c4 30             	add    esp,0x30
c0001b4b:	c3                   	ret    

c0001b4c <dlmallopt>:
c0001b4c:	56                   	push   esi
c0001b4d:	b8 20 de 02 c0       	mov    eax,0xc002de20
c0001b52:	53                   	push   ebx
c0001b53:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b5b:	e8 4d f1 ff ff       	call   c0000cad <malloc_consolidate>
c0001b60:	8d 46 04             	lea    eax,[esi+0x4]
c0001b63:	83 f8 05             	cmp    eax,0x5
c0001b66:	77 67                	ja     c0001bcf <dlmallopt+0x83>
c0001b68:	ff 24 85 a4 95 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6a5c]
c0001b6f:	83 fb 50             	cmp    ebx,0x50
c0001b72:	77 5b                	ja     c0001bcf <dlmallopt+0x83>
c0001b74:	ba 08 00 00 00       	mov    edx,0x8
c0001b79:	85 db                	test   ebx,ebx
c0001b7b:	74 12                	je     c0001b8f <dlmallopt+0x43>
c0001b7d:	83 c3 0b             	add    ebx,0xb
c0001b80:	ba 10 00 00 00       	mov    edx,0x10
c0001b85:	83 fb 0f             	cmp    ebx,0xf
c0001b88:	76 05                	jbe    c0001b8f <dlmallopt+0x43>
c0001b8a:	89 da                	mov    edx,ebx
c0001b8c:	83 e2 f8             	and    edx,0xfffffff8
c0001b8f:	a1 20 de 02 c0       	mov    eax,ds:0xc002de20
c0001b94:	83 e0 03             	and    eax,0x3
c0001b97:	09 d0                	or     eax,edx
c0001b99:	a3 20 de 02 c0       	mov    ds:0xc002de20,eax
c0001b9e:	eb 31                	jmp    c0001bd1 <dlmallopt+0x85>
c0001ba0:	89 1d 64 e1 02 c0    	mov    DWORD PTR ds:0xc002e164,ebx
c0001ba6:	eb 06                	jmp    c0001bae <dlmallopt+0x62>
c0001ba8:	89 1d 68 e1 02 c0    	mov    DWORD PTR ds:0xc002e168,ebx
c0001bae:	be 01 00 00 00       	mov    esi,0x1
c0001bb3:	eb 1c                	jmp    c0001bd1 <dlmallopt+0x85>
c0001bb5:	89 1d 6c e1 02 c0    	mov    DWORD PTR ds:0xc002e16c,ebx
c0001bbb:	eb f1                	jmp    c0001bae <dlmallopt+0x62>
c0001bbd:	31 f6                	xor    esi,esi
c0001bbf:	85 db                	test   ebx,ebx
c0001bc1:	75 0e                	jne    c0001bd1 <dlmallopt+0x85>
c0001bc3:	c7 05 74 e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e174,0x0
c0001bcd:	eb df                	jmp    c0001bae <dlmallopt+0x62>
c0001bcf:	31 f6                	xor    esi,esi
c0001bd1:	89 f0                	mov    eax,esi
c0001bd3:	5b                   	pop    ebx
c0001bd4:	5e                   	pop    esi
c0001bd5:	c3                   	ret    

c0001bd6 <disk_status>:
c0001bd6:	31 c0                	xor    eax,eax
c0001bd8:	c3                   	ret    

c0001bd9 <disk_initialize>:
c0001bd9:	31 c0                	xor    eax,eax
c0001bdb:	c3                   	ret    

c0001bdc <disk_read>:
c0001bdc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001be1:	0f b6 04 85 c0 f8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd0740]
c0001be9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bed:	e9 94 ef 01 00       	jmp    c0020b86 <fatWrapperReadDisk>

c0001bf2 <disk_write>:
c0001bf2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001bf7:	0f b6 04 85 c0 f8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd0740]
c0001bff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c03:	e9 c5 ef 01 00       	jmp    c0020bcd <fatWrapperWriteDisk>

c0001c08 <disk_ioctl>:
c0001c08:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c11:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c16:	0f b6 04 85 c0 f8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd0740]
c0001c1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c22:	e9 ed ef 01 00       	jmp    c0020c14 <fatWrapperIoctl>

c0001c27 <ld_word>:
c0001c27:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c2e:	c1 e2 08             	shl    edx,0x8
c0001c31:	09 d0                	or     eax,edx
c0001c33:	c3                   	ret    

c0001c34 <ld_dword>:
c0001c34:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c38:	89 d1                	mov    ecx,edx
c0001c3a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c3e:	c1 e1 08             	shl    ecx,0x8
c0001c41:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c44:	09 ca                	or     edx,ecx
c0001c46:	c1 e2 08             	shl    edx,0x8
c0001c49:	09 d0                	or     eax,edx
c0001c4b:	c3                   	ret    

c0001c4c <ld_qword>:
c0001c4c:	57                   	push   edi
c0001c4d:	56                   	push   esi
c0001c4e:	53                   	push   ebx
c0001c4f:	31 db                	xor    ebx,ebx
c0001c51:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c54:	89 df                	mov    edi,ebx
c0001c56:	89 ce                	mov    esi,ecx
c0001c58:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c5c:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c60:	c1 e6 08             	shl    esi,0x8
c0001c63:	09 f2                	or     edx,esi
c0001c65:	89 d6                	mov    esi,edx
c0001c67:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001c6b:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c6f:	c1 e6 08             	shl    esi,0x8
c0001c72:	09 f2                	or     edx,esi
c0001c74:	89 d6                	mov    esi,edx
c0001c76:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c7a:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c7e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c81:	c1 e6 08             	shl    esi,0x8
c0001c84:	89 fb                	mov    ebx,edi
c0001c86:	09 f2                	or     edx,esi
c0001c88:	89 d1                	mov    ecx,edx
c0001c8a:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001c8e:	c1 e1 08             	shl    ecx,0x8
c0001c91:	89 da                	mov    edx,ebx
c0001c93:	09 c8                	or     eax,ecx
c0001c95:	5b                   	pop    ebx
c0001c96:	5e                   	pop    esi
c0001c97:	5f                   	pop    edi
c0001c98:	c3                   	ret    

c0001c99 <st_word>:
c0001c99:	66 89 10             	mov    WORD PTR [eax],dx
c0001c9c:	c3                   	ret    

c0001c9d <st_dword>:
c0001c9d:	89 10                	mov    DWORD PTR [eax],edx
c0001c9f:	c3                   	ret    

c0001ca0 <st_qword>:
c0001ca0:	89 10                	mov    DWORD PTR [eax],edx
c0001ca2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ca5:	c3                   	ret    

c0001ca6 <mem_cpy>:
c0001ca6:	85 c9                	test   ecx,ecx
c0001ca8:	74 10                	je     c0001cba <mem_cpy+0x14>
c0001caa:	57                   	push   edi
c0001cab:	01 c1                	add    ecx,eax
c0001cad:	56                   	push   esi
c0001cae:	89 c7                	mov    edi,eax
c0001cb0:	89 d6                	mov    esi,edx
c0001cb2:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cb3:	39 f9                	cmp    ecx,edi
c0001cb5:	75 fb                	jne    c0001cb2 <mem_cpy+0xc>
c0001cb7:	5e                   	pop    esi
c0001cb8:	5f                   	pop    edi
c0001cb9:	c3                   	ret    
c0001cba:	c3                   	ret    

c0001cbb <mem_set>:
c0001cbb:	01 c1                	add    ecx,eax
c0001cbd:	40                   	inc    eax
c0001cbe:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cc1:	39 c8                	cmp    eax,ecx
c0001cc3:	75 f8                	jne    c0001cbd <mem_set+0x2>
c0001cc5:	c3                   	ret    

c0001cc6 <mem_cmp>:
c0001cc6:	57                   	push   edi
c0001cc7:	56                   	push   esi
c0001cc8:	89 c6                	mov    esi,eax
c0001cca:	53                   	push   ebx
c0001ccb:	46                   	inc    esi
c0001ccc:	42                   	inc    edx
c0001ccd:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001cd1:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001cd5:	29 fb                	sub    ebx,edi
c0001cd7:	89 cf                	mov    edi,ecx
c0001cd9:	29 f7                	sub    edi,esi
c0001cdb:	01 c7                	add    edi,eax
c0001cdd:	74 04                	je     c0001ce3 <mem_cmp+0x1d>
c0001cdf:	85 db                	test   ebx,ebx
c0001ce1:	74 e8                	je     c0001ccb <mem_cmp+0x5>
c0001ce3:	89 d8                	mov    eax,ebx
c0001ce5:	5b                   	pop    ebx
c0001ce6:	5e                   	pop    esi
c0001ce7:	5f                   	pop    edi
c0001ce8:	c3                   	ret    

c0001ce9 <chk_chr>:
c0001ce9:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001cec:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001cef:	74 07                	je     c0001cf8 <chk_chr+0xf>
c0001cf1:	39 d1                	cmp    ecx,edx
c0001cf3:	74 03                	je     c0001cf8 <chk_chr+0xf>
c0001cf5:	40                   	inc    eax
c0001cf6:	eb f1                	jmp    c0001ce9 <chk_chr>
c0001cf8:	89 c8                	mov    eax,ecx
c0001cfa:	c3                   	ret    

c0001cfb <dbc_1st>:
c0001cfb:	31 c0                	xor    eax,eax
c0001cfd:	c3                   	ret    

c0001cfe <dbc_2nd>:
c0001cfe:	31 c0                	xor    eax,eax
c0001d00:	c3                   	ret    

c0001d01 <tchar2uni>:
c0001d01:	57                   	push   edi
c0001d02:	89 c7                	mov    edi,eax
c0001d04:	56                   	push   esi
c0001d05:	53                   	push   ebx
c0001d06:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d08:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d0a:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d0d:	84 c9                	test   cl,cl
c0001d0f:	78 0a                	js     c0001d1b <tchar2uni+0x1a>
c0001d11:	0f b6 d1             	movzx  edx,cl
c0001d14:	89 f3                	mov    ebx,esi
c0001d16:	e9 9f 00 00 00       	jmp    c0001dba <tchar2uni+0xb9>
c0001d1b:	88 ca                	mov    dl,cl
c0001d1d:	83 e2 e0             	and    edx,0xffffffe0
c0001d20:	80 fa c0             	cmp    dl,0xc0
c0001d23:	75 0c                	jne    c0001d31 <tchar2uni+0x30>
c0001d25:	89 ca                	mov    edx,ecx
c0001d27:	b9 01 00 00 00       	mov    ecx,0x1
c0001d2c:	83 e2 1f             	and    edx,0x1f
c0001d2f:	eb 2e                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d31:	88 ca                	mov    dl,cl
c0001d33:	83 e2 f0             	and    edx,0xfffffff0
c0001d36:	80 fa e0             	cmp    dl,0xe0
c0001d39:	75 0c                	jne    c0001d47 <tchar2uni+0x46>
c0001d3b:	89 ca                	mov    edx,ecx
c0001d3d:	b9 02 00 00 00       	mov    ecx,0x2
c0001d42:	83 e2 0f             	and    edx,0xf
c0001d45:	eb 18                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d47:	88 ca                	mov    dl,cl
c0001d49:	83 e2 f8             	and    edx,0xfffffff8
c0001d4c:	88 d0                	mov    al,dl
c0001d4e:	83 ca ff             	or     edx,0xffffffff
c0001d51:	3c f0                	cmp    al,0xf0
c0001d53:	75 6c                	jne    c0001dc1 <tchar2uni+0xc0>
c0001d55:	89 ca                	mov    edx,ecx
c0001d57:	b9 03 00 00 00       	mov    ecx,0x3
c0001d5c:	83 e2 07             	and    edx,0x7
c0001d5f:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d63:	46                   	inc    esi
c0001d64:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001d67:	88 c8                	mov    al,cl
c0001d69:	83 e0 c0             	and    eax,0xffffffc0
c0001d6c:	3c 80                	cmp    al,0x80
c0001d6e:	75 4e                	jne    c0001dbe <tchar2uni+0xbd>
c0001d70:	c1 e2 06             	shl    edx,0x6
c0001d73:	83 e1 3f             	and    ecx,0x3f
c0001d76:	09 ca                	or     edx,ecx
c0001d78:	39 de                	cmp    esi,ebx
c0001d7a:	75 e7                	jne    c0001d63 <tchar2uni+0x62>
c0001d7c:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001d7f:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001d85:	77 37                	ja     c0001dbe <tchar2uni+0xbd>
c0001d87:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001d8d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d93:	76 29                	jbe    c0001dbe <tchar2uni+0xbd>
c0001d95:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001d9b:	76 1d                	jbe    c0001dba <tchar2uni+0xb9>
c0001d9d:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001da3:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001da9:	c1 e1 06             	shl    ecx,0x6
c0001dac:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001db2:	09 ca                	or     edx,ecx
c0001db4:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dba:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dbc:	eb 03                	jmp    c0001dc1 <tchar2uni+0xc0>
c0001dbe:	83 ca ff             	or     edx,0xffffffff
c0001dc1:	5b                   	pop    ebx
c0001dc2:	89 d0                	mov    eax,edx
c0001dc4:	5e                   	pop    esi
c0001dc5:	5f                   	pop    edi
c0001dc6:	c3                   	ret    

c0001dc7 <put_utf>:
c0001dc7:	53                   	push   ebx
c0001dc8:	83 f8 7f             	cmp    eax,0x7f
c0001dcb:	89 c3                	mov    ebx,eax
c0001dcd:	b0 00                	mov    al,0x0
c0001dcf:	77 11                	ja     c0001de2 <put_utf+0x1b>
c0001dd1:	85 c9                	test   ecx,ecx
c0001dd3:	0f 84 e5 00 00 00    	je     c0001ebe <put_utf+0xf7>
c0001dd9:	88 1a                	mov    BYTE PTR [edx],bl
c0001ddb:	b0 01                	mov    al,0x1
c0001ddd:	e9 dc 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001de2:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001de8:	77 23                	ja     c0001e0d <put_utf+0x46>
c0001dea:	83 f9 01             	cmp    ecx,0x1
c0001ded:	0f 86 cb 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001df3:	89 d8                	mov    eax,ebx
c0001df5:	83 e3 3f             	and    ebx,0x3f
c0001df8:	c1 e8 06             	shr    eax,0x6
c0001dfb:	83 cb 80             	or     ebx,0xffffff80
c0001dfe:	83 c8 c0             	or     eax,0xffffffc0
c0001e01:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e04:	88 02                	mov    BYTE PTR [edx],al
c0001e06:	b0 02                	mov    al,0x2
c0001e08:	e9 b1 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001e0d:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e13:	77 40                	ja     c0001e55 <put_utf+0x8e>
c0001e15:	83 f9 02             	cmp    ecx,0x2
c0001e18:	0f 86 a0 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e1e:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e24:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e2a:	0f 86 8e 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e30:	89 d8                	mov    eax,ebx
c0001e32:	c1 e8 0c             	shr    eax,0xc
c0001e35:	83 c8 e0             	or     eax,0xffffffe0
c0001e38:	88 02                	mov    BYTE PTR [edx],al
c0001e3a:	89 d8                	mov    eax,ebx
c0001e3c:	83 e3 3f             	and    ebx,0x3f
c0001e3f:	c1 e8 06             	shr    eax,0x6
c0001e42:	83 cb 80             	or     ebx,0xffffff80
c0001e45:	83 e0 3f             	and    eax,0x3f
c0001e48:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e4b:	83 c8 80             	or     eax,0xffffff80
c0001e4e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e51:	b0 03                	mov    al,0x3
c0001e53:	eb 69                	jmp    c0001ebe <put_utf+0xf7>
c0001e55:	83 f9 03             	cmp    ecx,0x3
c0001e58:	76 64                	jbe    c0001ebe <put_utf+0xf7>
c0001e5a:	89 d9                	mov    ecx,ebx
c0001e5c:	0f b7 c3             	movzx  eax,bx
c0001e5f:	66 31 c9             	xor    cx,cx
c0001e62:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001e68:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001e6e:	c1 e9 06             	shr    ecx,0x6
c0001e71:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001e77:	77 43                	ja     c0001ebc <put_utf+0xf5>
c0001e79:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001e7f:	77 3b                	ja     c0001ebc <put_utf+0xf5>
c0001e81:	09 cb                	or     ebx,ecx
c0001e83:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001e89:	89 d8                	mov    eax,ebx
c0001e8b:	c1 e8 12             	shr    eax,0x12
c0001e8e:	83 c8 f0             	or     eax,0xfffffff0
c0001e91:	88 02                	mov    BYTE PTR [edx],al
c0001e93:	89 d8                	mov    eax,ebx
c0001e95:	c1 e8 0c             	shr    eax,0xc
c0001e98:	83 e0 3f             	and    eax,0x3f
c0001e9b:	83 c8 80             	or     eax,0xffffff80
c0001e9e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ea1:	89 d8                	mov    eax,ebx
c0001ea3:	83 e3 3f             	and    ebx,0x3f
c0001ea6:	c1 e8 06             	shr    eax,0x6
c0001ea9:	83 cb 80             	or     ebx,0xffffff80
c0001eac:	83 e0 3f             	and    eax,0x3f
c0001eaf:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eb2:	83 c8 80             	or     eax,0xffffff80
c0001eb5:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001eb8:	b0 04                	mov    al,0x4
c0001eba:	eb 02                	jmp    c0001ebe <put_utf+0xf7>
c0001ebc:	31 c0                	xor    eax,eax
c0001ebe:	5b                   	pop    ebx
c0001ebf:	c3                   	ret    

c0001ec0 <clst2sect>:
c0001ec0:	89 c1                	mov    ecx,eax
c0001ec2:	83 ea 02             	sub    edx,0x2
c0001ec5:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ec8:	83 e8 02             	sub    eax,0x2
c0001ecb:	39 d0                	cmp    eax,edx
c0001ecd:	76 0d                	jbe    c0001edc <clst2sect+0x1c>
c0001ecf:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001ed3:	f7 e2                	mul    edx
c0001ed5:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001ed8:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001edb:	c3                   	ret    
c0001edc:	31 c0                	xor    eax,eax
c0001ede:	31 d2                	xor    edx,edx
c0001ee0:	c3                   	ret    

c0001ee1 <clmt_clust>:
c0001ee1:	57                   	push   edi
c0001ee2:	89 cf                	mov    edi,ecx
c0001ee4:	56                   	push   esi
c0001ee5:	89 d6                	mov    esi,edx
c0001ee7:	53                   	push   ebx
c0001ee8:	0f ac fe 09          	shrd   esi,edi,0x9
c0001eec:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001eef:	89 f2                	mov    edx,esi
c0001ef1:	8b 00                	mov    eax,DWORD PTR [eax]
c0001ef3:	c1 ef 09             	shr    edi,0x9
c0001ef6:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001efa:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001efd:	89 f9                	mov    ecx,edi
c0001eff:	31 ff                	xor    edi,edi
c0001f01:	57                   	push   edi
c0001f02:	56                   	push   esi
c0001f03:	51                   	push   ecx
c0001f04:	52                   	push   edx
c0001f05:	e8 6a 4c 02 00       	call   c0026b74 <__udivdi3>
c0001f0a:	83 c4 10             	add    esp,0x10
c0001f0d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f0f:	85 d2                	test   edx,edx
c0001f11:	74 10                	je     c0001f23 <clmt_clust+0x42>
c0001f13:	39 d0                	cmp    eax,edx
c0001f15:	72 07                	jb     c0001f1e <clmt_clust+0x3d>
c0001f17:	29 d0                	sub    eax,edx
c0001f19:	83 c3 08             	add    ebx,0x8
c0001f1c:	eb ef                	jmp    c0001f0d <clmt_clust+0x2c>
c0001f1e:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f21:	89 c2                	mov    edx,eax
c0001f23:	5b                   	pop    ebx
c0001f24:	89 d0                	mov    eax,edx
c0001f26:	5e                   	pop    esi
c0001f27:	5f                   	pop    edi
c0001f28:	c3                   	ret    

c0001f29 <pick_lfn>:
c0001f29:	55                   	push   ebp
c0001f2a:	57                   	push   edi
c0001f2b:	56                   	push   esi
c0001f2c:	89 d6                	mov    esi,edx
c0001f2e:	53                   	push   ebx
c0001f2f:	89 c3                	mov    ebx,eax
c0001f31:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f34:	e8 ee fc ff ff       	call   c0001c27 <ld_word>
c0001f39:	66 85 c0             	test   ax,ax
c0001f3c:	74 04                	je     c0001f42 <pick_lfn+0x19>
c0001f3e:	31 c0                	xor    eax,eax
c0001f40:	eb 5c                	jmp    c0001f9e <pick_lfn+0x75>
c0001f42:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f45:	bd 01 00 00 00       	mov    ebp,0x1
c0001f4a:	83 e1 bf             	and    ecx,0xffffffbf
c0001f4d:	31 ff                	xor    edi,edi
c0001f4f:	49                   	dec    ecx
c0001f50:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f53:	0f b6 87 c0 96 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6940]
c0001f5a:	01 f0                	add    eax,esi
c0001f5c:	e8 c6 fc ff ff       	call   c0001c27 <ld_word>
c0001f61:	66 85 ed             	test   bp,bp
c0001f64:	74 11                	je     c0001f77 <pick_lfn+0x4e>
c0001f66:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f6c:	77 d0                	ja     c0001f3e <pick_lfn+0x15>
c0001f6e:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001f72:	89 c5                	mov    ebp,eax
c0001f74:	41                   	inc    ecx
c0001f75:	eb 04                	jmp    c0001f7b <pick_lfn+0x52>
c0001f77:	66 40                	inc    ax
c0001f79:	75 c3                	jne    c0001f3e <pick_lfn+0x15>
c0001f7b:	47                   	inc    edi
c0001f7c:	83 ff 0d             	cmp    edi,0xd
c0001f7f:	75 d2                	jne    c0001f53 <pick_lfn+0x2a>
c0001f81:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001f84:	74 13                	je     c0001f99 <pick_lfn+0x70>
c0001f86:	66 85 ed             	test   bp,bp
c0001f89:	74 0e                	je     c0001f99 <pick_lfn+0x70>
c0001f8b:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f91:	77 ab                	ja     c0001f3e <pick_lfn+0x15>
c0001f93:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001f99:	b8 01 00 00 00       	mov    eax,0x1
c0001f9e:	5b                   	pop    ebx
c0001f9f:	5e                   	pop    esi
c0001fa0:	5f                   	pop    edi
c0001fa1:	5d                   	pop    ebp
c0001fa2:	c3                   	ret    

c0001fa3 <put_lfn>:
c0001fa3:	55                   	push   ebp
c0001fa4:	31 ed                	xor    ebp,ebp
c0001fa6:	57                   	push   edi
c0001fa7:	89 d7                	mov    edi,edx
c0001fa9:	56                   	push   esi
c0001faa:	31 f6                	xor    esi,esi
c0001fac:	53                   	push   ebx
c0001fad:	83 ec 08             	sub    esp,0x8
c0001fb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fb3:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001fb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001fbb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001fc1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001fc4:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fc7:	31 d2                	xor    edx,edx
c0001fc9:	e8 cb fc ff ff       	call   c0001c99 <st_word>
c0001fce:	0f b6 d9             	movzx  ebx,cl
c0001fd1:	4b                   	dec    ebx
c0001fd2:	6b db 0d             	imul   ebx,ebx,0xd
c0001fd5:	66 83 fe ff          	cmp    si,0xffff
c0001fd9:	74 08                	je     c0001fe3 <put_lfn+0x40>
c0001fdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001fde:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001fe2:	43                   	inc    ebx
c0001fe3:	0f b6 85 c0 96 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6940]
c0001fea:	0f b7 d6             	movzx  edx,si
c0001fed:	01 f8                	add    eax,edi
c0001fef:	e8 a5 fc ff ff       	call   c0001c99 <st_word>
c0001ff4:	66 85 f6             	test   si,si
c0001ff7:	75 03                	jne    c0001ffc <put_lfn+0x59>
c0001ff9:	83 ce ff             	or     esi,0xffffffff
c0001ffc:	45                   	inc    ebp
c0001ffd:	83 fd 0d             	cmp    ebp,0xd
c0002000:	75 d3                	jne    c0001fd5 <put_lfn+0x32>
c0002002:	66 46                	inc    si
c0002004:	74 0a                	je     c0002010 <put_lfn+0x6d>
c0002006:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002009:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000200e:	75 09                	jne    c0002019 <put_lfn+0x76>
c0002010:	88 c8                	mov    al,cl
c0002012:	83 c8 40             	or     eax,0x40
c0002015:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002019:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000201d:	88 07                	mov    BYTE PTR [edi],al
c000201f:	83 c4 08             	add    esp,0x8
c0002022:	5b                   	pop    ebx
c0002023:	5e                   	pop    esi
c0002024:	5f                   	pop    edi
c0002025:	5d                   	pop    ebp
c0002026:	c3                   	ret    

c0002027 <gen_numname>:
c0002027:	57                   	push   edi
c0002028:	89 cf                	mov    edi,ecx
c000202a:	56                   	push   esi
c000202b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002030:	53                   	push   ebx
c0002031:	89 c6                	mov    esi,eax
c0002033:	83 ec 10             	sub    esp,0x10
c0002036:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000203a:	e8 67 fc ff ff       	call   c0001ca6 <mem_cpy>
c000203f:	83 fb 05             	cmp    ebx,0x5
c0002042:	76 2d                	jbe    c0002071 <gen_numname+0x4a>
c0002044:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002047:	66 85 c0             	test   ax,ax
c000204a:	74 25                	je     c0002071 <gen_numname+0x4a>
c000204c:	83 c7 02             	add    edi,0x2
c000204f:	ba 10 00 00 00       	mov    edx,0x10
c0002054:	01 db                	add    ebx,ebx
c0002056:	89 c1                	mov    ecx,eax
c0002058:	66 d1 e8             	shr    ax,1
c000205b:	83 e1 01             	and    ecx,0x1
c000205e:	01 cb                	add    ebx,ecx
c0002060:	0f ba e3 10          	bt     ebx,0x10
c0002064:	73 06                	jae    c000206c <gen_numname+0x45>
c0002066:	81 f3 21 10 01 00    	xor    ebx,0x11021
c000206c:	4a                   	dec    edx
c000206d:	75 e5                	jne    c0002054 <gen_numname+0x2d>
c000206f:	eb d3                	jmp    c0002044 <gen_numname+0x1d>
c0002071:	b8 07 00 00 00       	mov    eax,0x7
c0002076:	88 d9                	mov    cl,bl
c0002078:	83 e1 0f             	and    ecx,0xf
c000207b:	8d 51 30             	lea    edx,[ecx+0x30]
c000207e:	80 fa 39             	cmp    dl,0x39
c0002081:	76 03                	jbe    c0002086 <gen_numname+0x5f>
c0002083:	8d 51 37             	lea    edx,[ecx+0x37]
c0002086:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002089:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c000208d:	89 da                	mov    edx,ebx
c000208f:	c1 ea 04             	shr    edx,0x4
c0002092:	83 fb 0f             	cmp    ebx,0xf
c0002095:	76 06                	jbe    c000209d <gen_numname+0x76>
c0002097:	89 c8                	mov    eax,ecx
c0002099:	89 d3                	mov    ebx,edx
c000209b:	eb d9                	jmp    c0002076 <gen_numname+0x4f>
c000209d:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020a2:	31 d2                	xor    edx,edx
c00020a4:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020a7:	8d 04 16             	lea    eax,[esi+edx*1]
c00020aa:	39 ca                	cmp    edx,ecx
c00020ac:	73 18                	jae    c00020c6 <gen_numname+0x9f>
c00020ae:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020b1:	3c 20                	cmp    al,0x20
c00020b3:	74 11                	je     c00020c6 <gen_numname+0x9f>
c00020b5:	e8 41 fc ff ff       	call   c0001cfb <dbc_1st>
c00020ba:	85 c0                	test   eax,eax
c00020bc:	74 05                	je     c00020c3 <gen_numname+0x9c>
c00020be:	39 d3                	cmp    ebx,edx
c00020c0:	74 04                	je     c00020c6 <gen_numname+0x9f>
c00020c2:	42                   	inc    edx
c00020c3:	42                   	inc    edx
c00020c4:	eb e1                	jmp    c00020a7 <gen_numname+0x80>
c00020c6:	b0 20                	mov    al,0x20
c00020c8:	83 f9 07             	cmp    ecx,0x7
c00020cb:	77 05                	ja     c00020d2 <gen_numname+0xab>
c00020cd:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00020d1:	41                   	inc    ecx
c00020d2:	42                   	inc    edx
c00020d3:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00020d7:	83 fa 07             	cmp    edx,0x7
c00020da:	76 ea                	jbe    c00020c6 <gen_numname+0x9f>
c00020dc:	83 c4 10             	add    esp,0x10
c00020df:	5b                   	pop    ebx
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	c3                   	ret    

c00020e3 <sum_sfn>:
c00020e3:	31 c9                	xor    ecx,ecx
c00020e5:	31 d2                	xor    edx,edx
c00020e7:	d0 ca                	ror    dl,1
c00020e9:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c00020ec:	41                   	inc    ecx
c00020ed:	83 f9 0b             	cmp    ecx,0xb
c00020f0:	75 f5                	jne    c00020e7 <sum_sfn+0x4>
c00020f2:	88 d0                	mov    al,dl
c00020f4:	c3                   	ret    

c00020f5 <xdir_sum>:
c00020f5:	56                   	push   esi
c00020f6:	31 c9                	xor    ecx,ecx
c00020f8:	53                   	push   ebx
c00020f9:	31 d2                	xor    edx,edx
c00020fb:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c00020ff:	43                   	inc    ebx
c0002100:	c1 e3 05             	shl    ebx,0x5
c0002103:	83 fa 02             	cmp    edx,0x2
c0002106:	74 0b                	je     c0002113 <xdir_sum+0x1e>
c0002108:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c000210c:	66 d1 c9             	ror    cx,1
c000210f:	01 f1                	add    ecx,esi
c0002111:	eb 05                	jmp    c0002118 <xdir_sum+0x23>
c0002113:	ba 03 00 00 00       	mov    edx,0x3
c0002118:	42                   	inc    edx
c0002119:	39 d3                	cmp    ebx,edx
c000211b:	77 e6                	ja     c0002103 <xdir_sum+0xe>
c000211d:	89 c8                	mov    eax,ecx
c000211f:	5b                   	pop    ebx
c0002120:	5e                   	pop    esi
c0002121:	c3                   	ret    

c0002122 <xsum32>:
c0002122:	d1 ca                	ror    edx,1
c0002124:	0f b6 c0             	movzx  eax,al
c0002127:	01 d0                	add    eax,edx
c0002129:	c3                   	ret    

c000212a <get_xfileinfo>:
c000212a:	55                   	push   ebp
c000212b:	31 c9                	xor    ecx,ecx
c000212d:	57                   	push   edi
c000212e:	bd 40 00 00 00       	mov    ebp,0x40
c0002133:	56                   	push   esi
c0002134:	31 ff                	xor    edi,edi
c0002136:	53                   	push   ebx
c0002137:	89 c6                	mov    esi,eax
c0002139:	83 ec 0c             	sub    esp,0xc
c000213c:	89 d3                	mov    ebx,edx
c000213e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002145:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002149:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000214c:	76 6d                	jbe    c00021bb <get_xfileinfo+0x91>
c000214e:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002154:	76 0b                	jbe    c0002161 <get_xfileinfo+0x37>
c0002156:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000215a:	bf 01 00 00 00       	mov    edi,0x1
c000215f:	eb 63                	jmp    c00021c4 <get_xfileinfo+0x9a>
c0002161:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002167:	75 03                	jne    c000216c <get_xfileinfo+0x42>
c0002169:	83 c5 02             	add    ebp,0x2
c000216c:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000216f:	83 c5 02             	add    ebp,0x2
c0002172:	e8 b0 fa ff ff       	call   c0001c27 <ld_word>
c0002177:	ff 04 24             	inc    DWORD PTR [esp]
c000217a:	66 85 c9             	test   cx,cx
c000217d:	75 0d                	jne    c000218c <get_xfileinfo+0x62>
c000217f:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0002185:	66 81 fa ff 07       	cmp    dx,0x7ff
c000218a:	76 2b                	jbe    c00021b7 <get_xfileinfo+0x8d>
c000218c:	c1 e1 10             	shl    ecx,0x10
c000218f:	ba ff 00 00 00       	mov    edx,0xff
c0002194:	0f b7 c0             	movzx  eax,ax
c0002197:	29 fa                	sub    edx,edi
c0002199:	09 c8                	or     eax,ecx
c000219b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000219f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021a3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021a7:	e8 1b fc ff ff       	call   c0001dc7 <put_utf>
c00021ac:	84 c0                	test   al,al
c00021ae:	74 a6                	je     c0002156 <get_xfileinfo+0x2c>
c00021b0:	0f b6 c0             	movzx  eax,al
c00021b3:	01 c7                	add    edi,eax
c00021b5:	31 c0                	xor    eax,eax
c00021b7:	89 c1                	mov    ecx,eax
c00021b9:	eb 8a                	jmp    c0002145 <get_xfileinfo+0x1b>
c00021bb:	85 ff                	test   edi,edi
c00021bd:	74 97                	je     c0002156 <get_xfileinfo+0x2c>
c00021bf:	66 85 c9             	test   cx,cx
c00021c2:	75 92                	jne    c0002156 <get_xfileinfo+0x2c>
c00021c4:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00021c9:	31 c0                	xor    eax,eax
c00021cb:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00021cf:	31 d2                	xor    edx,edx
c00021d1:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c00021d4:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c00021d7:	80 e1 10             	and    cl,0x10
c00021da:	75 08                	jne    c00021e4 <get_xfileinfo+0xba>
c00021dc:	8d 46 38             	lea    eax,[esi+0x38]
c00021df:	e8 68 fa ff ff       	call   c0001c4c <ld_qword>
c00021e4:	89 03                	mov    DWORD PTR [ebx],eax
c00021e6:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00021e9:	8d 46 0c             	lea    eax,[esi+0xc]
c00021ec:	e8 36 fa ff ff       	call   c0001c27 <ld_word>
c00021f1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c00021f5:	8d 46 0e             	lea    eax,[esi+0xe]
c00021f8:	e8 2a fa ff ff       	call   c0001c27 <ld_word>
c00021fd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002201:	83 c4 0c             	add    esp,0xc
c0002204:	5b                   	pop    ebx
c0002205:	5e                   	pop    esi
c0002206:	5f                   	pop    edi
c0002207:	5d                   	pop    ebp
c0002208:	c3                   	ret    

c0002209 <get_ldnumber>:
c0002209:	8b 10                	mov    edx,DWORD PTR [eax]
c000220b:	85 d2                	test   edx,edx
c000220d:	74 14                	je     c0002223 <get_ldnumber+0x1a>
c000220f:	56                   	push   esi
c0002210:	53                   	push   ebx
c0002211:	89 d3                	mov    ebx,edx
c0002213:	43                   	inc    ebx
c0002214:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002217:	80 f9 1f             	cmp    cl,0x1f
c000221a:	76 0d                	jbe    c0002229 <get_ldnumber+0x20>
c000221c:	80 f9 3a             	cmp    cl,0x3a
c000221f:	75 f2                	jne    c0002213 <get_ldnumber+0xa>
c0002221:	eb 0a                	jmp    c000222d <get_ldnumber+0x24>
c0002223:	83 c9 ff             	or     ecx,0xffffffff
c0002226:	89 c8                	mov    eax,ecx
c0002228:	c3                   	ret    
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	eb 24                	jmp    c0002251 <get_ldnumber+0x48>
c000222d:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002230:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002233:	80 f9 09             	cmp    cl,0x9
c0002236:	77 16                	ja     c000224e <get_ldnumber+0x45>
c0002238:	83 c2 02             	add    edx,0x2
c000223b:	83 c9 ff             	or     ecx,0xffffffff
c000223e:	39 d3                	cmp    ebx,edx
c0002240:	75 0f                	jne    c0002251 <get_ldnumber+0x48>
c0002242:	89 f2                	mov    edx,esi
c0002244:	89 18                	mov    DWORD PTR [eax],ebx
c0002246:	0f be ca             	movsx  ecx,dl
c0002249:	83 e9 30             	sub    ecx,0x30
c000224c:	eb 03                	jmp    c0002251 <get_ldnumber+0x48>
c000224e:	83 c9 ff             	or     ecx,0xffffffff
c0002251:	89 c8                	mov    eax,ecx
c0002253:	5b                   	pop    ebx
c0002254:	5e                   	pop    esi
c0002255:	c3                   	ret    

c0002256 <crc32>:
c0002256:	56                   	push   esi
c0002257:	89 d6                	mov    esi,edx
c0002259:	53                   	push   ebx
c000225a:	b2 01                	mov    dl,0x1
c000225c:	bb 08 00 00 00       	mov    ebx,0x8
c0002261:	89 f1                	mov    ecx,esi
c0002263:	84 d1                	test   cl,dl
c0002265:	0f 95 c1             	setne  cl
c0002268:	0f b6 c9             	movzx  ecx,cl
c000226b:	31 c1                	xor    ecx,eax
c000226d:	89 c8                	mov    eax,ecx
c000226f:	d1 e8                	shr    eax,1
c0002271:	80 e1 01             	and    cl,0x1
c0002274:	74 05                	je     c000227b <crc32+0x25>
c0002276:	35 20 83 b8 ed       	xor    eax,0xedb88320
c000227b:	d1 e2                	shl    edx,1
c000227d:	4b                   	dec    ebx
c000227e:	75 e1                	jne    c0002261 <crc32+0xb>
c0002280:	5b                   	pop    ebx
c0002281:	5e                   	pop    esi
c0002282:	c3                   	ret    

c0002283 <test_gpt_header>:
c0002283:	55                   	push   ebp
c0002284:	b9 10 00 00 00       	mov    ecx,0x10
c0002289:	57                   	push   edi
c000228a:	ba c0 95 02 c0       	mov    edx,0xc00295c0
c000228f:	56                   	push   esi
c0002290:	31 ff                	xor    edi,edi
c0002292:	53                   	push   ebx
c0002293:	89 c3                	mov    ebx,eax
c0002295:	e8 2c fa ff ff       	call   c0001cc6 <mem_cmp>
c000229a:	85 c0                	test   eax,eax
c000229c:	75 55                	jne    c00022f3 <test_gpt_header+0x70>
c000229e:	89 c7                	mov    edi,eax
c00022a0:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022a5:	83 ce ff             	or     esi,0xffffffff
c00022a8:	31 d2                	xor    edx,edx
c00022aa:	83 fd 03             	cmp    ebp,0x3
c00022ad:	76 05                	jbe    c00022b4 <test_gpt_header+0x31>
c00022af:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022b4:	89 f0                	mov    eax,esi
c00022b6:	45                   	inc    ebp
c00022b7:	e8 9a ff ff ff       	call   c0002256 <crc32>
c00022bc:	83 fd 4c             	cmp    ebp,0x4c
c00022bf:	89 c6                	mov    esi,eax
c00022c1:	75 e5                	jne    c00022a8 <test_gpt_header+0x25>
c00022c3:	8d 43 10             	lea    eax,[ebx+0x10]
c00022c6:	f7 d6                	not    esi
c00022c8:	e8 67 f9 ff ff       	call   c0001c34 <ld_dword>
c00022cd:	39 c6                	cmp    esi,eax
c00022cf:	75 22                	jne    c00022f3 <test_gpt_header+0x70>
c00022d1:	8d 43 54             	lea    eax,[ebx+0x54]
c00022d4:	e8 5b f9 ff ff       	call   c0001c34 <ld_dword>
c00022d9:	83 c0 80             	add    eax,0xffffff80
c00022dc:	75 15                	jne    c00022f3 <test_gpt_header+0x70>
c00022de:	8d 43 50             	lea    eax,[ebx+0x50]
c00022e1:	e8 4e f9 ff ff       	call   c0001c34 <ld_dword>
c00022e6:	3d 80 00 00 00       	cmp    eax,0x80
c00022eb:	0f 96 c0             	setbe  al
c00022ee:	0f b6 c0             	movzx  eax,al
c00022f1:	89 c7                	mov    edi,eax
c00022f3:	5b                   	pop    ebx
c00022f4:	89 f8                	mov    eax,edi
c00022f6:	5e                   	pop    esi
c00022f7:	5f                   	pop    edi
c00022f8:	5d                   	pop    ebp
c00022f9:	c3                   	ret    

c00022fa <make_rand>:
c00022fa:	56                   	push   esi
c00022fb:	85 c0                	test   eax,eax
c00022fd:	53                   	push   ebx
c00022fe:	75 05                	jne    c0002305 <make_rand+0xb>
c0002300:	b8 01 00 00 00       	mov    eax,0x1
c0002305:	01 d1                	add    ecx,edx
c0002307:	bb 08 00 00 00       	mov    ebx,0x8
c000230c:	89 c6                	mov    esi,eax
c000230e:	d1 e8                	shr    eax,1
c0002310:	83 e6 01             	and    esi,0x1
c0002313:	85 f6                	test   esi,esi
c0002315:	74 05                	je     c000231c <make_rand+0x22>
c0002317:	35 00 00 00 a3       	xor    eax,0xa3000000
c000231c:	4b                   	dec    ebx
c000231d:	75 ed                	jne    c000230c <make_rand+0x12>
c000231f:	42                   	inc    edx
c0002320:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002323:	39 ca                	cmp    edx,ecx
c0002325:	75 e0                	jne    c0002307 <make_rand+0xd>
c0002327:	5b                   	pop    ebx
c0002328:	5e                   	pop    esi
c0002329:	c3                   	ret    

c000232a <validate>:
c000232a:	56                   	push   esi
c000232b:	53                   	push   ebx
c000232c:	89 d6                	mov    esi,edx
c000232e:	51                   	push   ecx
c000232f:	85 c0                	test   eax,eax
c0002331:	75 09                	jne    c000233c <validate+0x12>
c0002333:	b8 09 00 00 00       	mov    eax,0x9
c0002338:	31 c9                	xor    ecx,ecx
c000233a:	eb 2f                	jmp    c000236b <validate+0x41>
c000233c:	89 c3                	mov    ebx,eax
c000233e:	8b 00                	mov    eax,DWORD PTR [eax]
c0002340:	85 c0                	test   eax,eax
c0002342:	74 ef                	je     c0002333 <validate+0x9>
c0002344:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002347:	74 ea                	je     c0002333 <validate+0x9>
c0002349:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000234d:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002351:	75 e0                	jne    c0002333 <validate+0x9>
c0002353:	83 ec 0c             	sub    esp,0xc
c0002356:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000235a:	50                   	push   eax
c000235b:	e8 76 f8 ff ff       	call   c0001bd6 <disk_status>
c0002360:	83 c4 10             	add    esp,0x10
c0002363:	a8 01                	test   al,0x1
c0002365:	75 cc                	jne    c0002333 <validate+0x9>
c0002367:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002369:	31 c0                	xor    eax,eax
c000236b:	89 0e                	mov    DWORD PTR [esi],ecx
c000236d:	5a                   	pop    edx
c000236e:	5b                   	pop    ebx
c000236f:	5e                   	pop    esi
c0002370:	c3                   	ret    

c0002371 <sync_window>:
c0002371:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002375:	0f 84 85 00 00 00    	je     c0002400 <sync_window+0x8f>
c000237b:	55                   	push   ebp
c000237c:	8d 68 54             	lea    ebp,[eax+0x54]
c000237f:	57                   	push   edi
c0002380:	56                   	push   esi
c0002381:	53                   	push   ebx
c0002382:	89 c3                	mov    ebx,eax
c0002384:	83 ec 28             	sub    esp,0x28
c0002387:	6a 01                	push   0x1
c0002389:	ff 70 50             	push   DWORD PTR [eax+0x50]
c000238c:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c000238f:	55                   	push   ebp
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 58 f8 ff ff       	call   c0001bf2 <disk_write>
c000239a:	83 c4 20             	add    esp,0x20
c000239d:	ba 01 00 00 00       	mov    edx,0x1
c00023a2:	85 c0                	test   eax,eax
c00023a4:	75 50                	jne    c00023f6 <sync_window+0x85>
c00023a6:	31 ff                	xor    edi,edi
c00023a8:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023af:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023b3:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023b6:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023b9:	89 c6                	mov    esi,eax
c00023bb:	89 d7                	mov    edi,edx
c00023bd:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023c0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023c4:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00023c7:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00023cb:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00023cf:	73 23                	jae    c00023f4 <sync_window+0x83>
c00023d1:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00023d5:	75 1d                	jne    c00023f4 <sync_window+0x83>
c00023d7:	83 ec 0c             	sub    esp,0xc
c00023da:	6a 01                	push   0x1
c00023dc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00023e0:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00023e4:	52                   	push   edx
c00023e5:	50                   	push   eax
c00023e6:	55                   	push   ebp
c00023e7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00023eb:	50                   	push   eax
c00023ec:	e8 01 f8 ff ff       	call   c0001bf2 <disk_write>
c00023f1:	83 c4 20             	add    esp,0x20
c00023f4:	31 d2                	xor    edx,edx
c00023f6:	83 c4 1c             	add    esp,0x1c
c00023f9:	89 d0                	mov    eax,edx
c00023fb:	5b                   	pop    ebx
c00023fc:	5e                   	pop    esi
c00023fd:	5f                   	pop    edi
c00023fe:	5d                   	pop    ebp
c00023ff:	c3                   	ret    
c0002400:	31 d2                	xor    edx,edx
c0002402:	89 d0                	mov    eax,edx
c0002404:	c3                   	ret    

c0002405 <move_window>:
c0002405:	56                   	push   esi
c0002406:	53                   	push   ebx
c0002407:	89 c3                	mov    ebx,eax
c0002409:	83 ec 14             	sub    esp,0x14
c000240c:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000240f:	75 07                	jne    c0002418 <move_window+0x13>
c0002411:	31 f6                	xor    esi,esi
c0002413:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002416:	74 59                	je     c0002471 <move_window+0x6c>
c0002418:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000241c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002420:	89 d8                	mov    eax,ebx
c0002422:	e8 4a ff ff ff       	call   c0002371 <sync_window>
c0002427:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000242b:	89 c6                	mov    esi,eax
c000242d:	85 c0                	test   eax,eax
c000242f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002433:	75 3c                	jne    c0002471 <move_window+0x6c>
c0002435:	83 ec 0c             	sub    esp,0xc
c0002438:	8d 43 54             	lea    eax,[ebx+0x54]
c000243b:	6a 01                	push   0x1
c000243d:	51                   	push   ecx
c000243e:	52                   	push   edx
c000243f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002443:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002447:	50                   	push   eax
c0002448:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000244c:	50                   	push   eax
c000244d:	e8 8a f7 ff ff       	call   c0001bdc <disk_read>
c0002452:	83 c4 20             	add    esp,0x20
c0002455:	85 c0                	test   eax,eax
c0002457:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000245f:	74 0a                	je     c000246b <move_window+0x66>
c0002461:	83 ca ff             	or     edx,0xffffffff
c0002464:	be 01 00 00 00       	mov    esi,0x1
c0002469:	89 d1                	mov    ecx,edx
c000246b:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000246e:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002471:	89 f0                	mov    eax,esi
c0002473:	83 c4 14             	add    esp,0x14
c0002476:	5b                   	pop    ebx
c0002477:	5e                   	pop    esi
c0002478:	c3                   	ret    

c0002479 <check_fs>:
c0002479:	53                   	push   ebx
c000247a:	89 c3                	mov    ebx,eax
c000247c:	83 ec 08             	sub    esp,0x8
c000247f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002483:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c000248a:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c0002491:	e8 6f ff ff ff       	call   c0002405 <move_window>
c0002496:	ba 04 00 00 00       	mov    edx,0x4
c000249b:	85 c0                	test   eax,eax
c000249d:	0f 85 89 00 00 00    	jne    c000252c <check_fs+0xb3>
c00024a3:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024a9:	e8 79 f7 ff ff       	call   c0001c27 <ld_word>
c00024ae:	ba 03 00 00 00       	mov    edx,0x3
c00024b3:	66 3d 55 aa          	cmp    ax,0xaa55
c00024b7:	75 73                	jne    c000252c <check_fs+0xb3>
c00024b9:	ba e0 96 02 c0       	mov    edx,0xc00296e0
c00024be:	8d 43 54             	lea    eax,[ebx+0x54]
c00024c1:	b9 0b 00 00 00       	mov    ecx,0xb
c00024c6:	e8 fb f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024cb:	ba 01 00 00 00       	mov    edx,0x1
c00024d0:	85 c0                	test   eax,eax
c00024d2:	74 58                	je     c000252c <check_fs+0xb3>
c00024d4:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00024d7:	8d 50 18             	lea    edx,[eax+0x18]
c00024da:	80 fa 01             	cmp    dl,0x1
c00024dd:	76 09                	jbe    c00024e8 <check_fs+0x6f>
c00024df:	ba 02 00 00 00       	mov    edx,0x2
c00024e4:	3c eb                	cmp    al,0xeb
c00024e6:	75 44                	jne    c000252c <check_fs+0xb3>
c00024e8:	ba ac c6 02 c0       	mov    edx,0xc002c6ac
c00024ed:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00024f3:	b9 03 00 00 00       	mov    ecx,0x3
c00024f8:	e8 c9 f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024fd:	31 d2                	xor    edx,edx
c00024ff:	85 c0                	test   eax,eax
c0002501:	74 29                	je     c000252c <check_fs+0xb3>
c0002503:	ba ec 96 02 c0       	mov    edx,0xc00296ec
c0002508:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000250e:	b9 05 00 00 00       	mov    ecx,0x5
c0002513:	e8 ae f7 ff ff       	call   c0001cc6 <mem_cmp>
c0002518:	31 d2                	xor    edx,edx
c000251a:	85 c0                	test   eax,eax
c000251c:	74 0e                	je     c000252c <check_fs+0xb3>
c000251e:	31 d2                	xor    edx,edx
c0002520:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002527:	0f 95 c2             	setne  dl
c000252a:	01 d2                	add    edx,edx
c000252c:	89 d0                	mov    eax,edx
c000252e:	83 c4 08             	add    esp,0x8
c0002531:	5b                   	pop    ebx
c0002532:	c3                   	ret    

c0002533 <find_volume>:
c0002533:	55                   	push   ebp
c0002534:	31 c9                	xor    ecx,ecx
c0002536:	57                   	push   edi
c0002537:	56                   	push   esi
c0002538:	89 d6                	mov    esi,edx
c000253a:	53                   	push   ebx
c000253b:	31 d2                	xor    edx,edx
c000253d:	83 ec 3c             	sub    esp,0x3c
c0002540:	89 c3                	mov    ebx,eax
c0002542:	e8 32 ff ff ff       	call   c0002479 <check_fs>
c0002547:	83 f8 02             	cmp    eax,0x2
c000254a:	74 0e                	je     c000255a <find_volume+0x27>
c000254c:	0f 87 5d 01 00 00    	ja     c00026af <find_volume+0x17c>
c0002552:	85 f6                	test   esi,esi
c0002554:	0f 84 55 01 00 00    	je     c00026af <find_volume+0x17c>
c000255a:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002561:	0f 85 dd 00 00 00    	jne    c0002644 <find_volume+0x111>
c0002567:	31 c9                	xor    ecx,ecx
c0002569:	ba 01 00 00 00       	mov    edx,0x1
c000256e:	89 d8                	mov    eax,ebx
c0002570:	e8 90 fe ff ff       	call   c0002405 <move_window>
c0002575:	85 c0                	test   eax,eax
c0002577:	74 0a                	je     c0002583 <find_volume+0x50>
c0002579:	b8 04 00 00 00       	mov    eax,0x4
c000257e:	e9 2c 01 00 00       	jmp    c00026af <find_volume+0x17c>
c0002583:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002586:	89 e8                	mov    eax,ebp
c0002588:	e8 f6 fc ff ff       	call   c0002283 <test_gpt_header>
c000258d:	85 c0                	test   eax,eax
c000258f:	75 0a                	jne    c000259b <find_volume+0x68>
c0002591:	b8 03 00 00 00       	mov    eax,0x3
c0002596:	e9 14 01 00 00       	jmp    c00026af <find_volume+0x17c>
c000259b:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025a1:	e8 8e f6 ff ff       	call   c0001c34 <ld_dword>
c00025a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025aa:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025b0:	e8 97 f6 ff ff       	call   c0001c4c <ld_qword>
c00025b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025c5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00025cd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00025d1:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00025d5:	74 ba                	je     c0002591 <find_volume+0x5e>
c00025d7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00025db:	31 c9                	xor    ecx,ecx
c00025dd:	c1 e7 07             	shl    edi,0x7
c00025e0:	89 d8                	mov    eax,ebx
c00025e2:	89 fa                	mov    edx,edi
c00025e4:	c1 ea 09             	shr    edx,0x9
c00025e7:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00025eb:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00025ef:	e8 11 fe ff ff       	call   c0002405 <move_window>
c00025f4:	85 c0                	test   eax,eax
c00025f6:	75 81                	jne    c0002579 <find_volume+0x46>
c00025f8:	81 e7 80 01 00 00    	and    edi,0x180
c00025fe:	b9 10 00 00 00       	mov    ecx,0x10
c0002603:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002607:	ba d0 96 02 c0       	mov    edx,0xc00296d0
c000260c:	e8 b5 f6 ff ff       	call   c0001cc6 <mem_cmp>
c0002611:	85 c0                	test   eax,eax
c0002613:	75 29                	jne    c000263e <find_volume+0x10b>
c0002615:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002619:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000261d:	e8 2a f6 ff ff       	call   c0001c4c <ld_qword>
c0002622:	89 d1                	mov    ecx,edx
c0002624:	89 c2                	mov    edx,eax
c0002626:	89 d8                	mov    eax,ebx
c0002628:	e8 4c fe ff ff       	call   c0002479 <check_fs>
c000262d:	85 f6                	test   esi,esi
c000262f:	75 07                	jne    c0002638 <find_volume+0x105>
c0002631:	83 f8 01             	cmp    eax,0x1
c0002634:	77 08                	ja     c000263e <find_volume+0x10b>
c0002636:	eb 77                	jmp    c00026af <find_volume+0x17c>
c0002638:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000263c:	74 71                	je     c00026af <find_volume+0x17c>
c000263e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002642:	eb 89                	jmp    c00025cd <find_volume+0x9a>
c0002644:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002648:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000264e:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002654:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002658:	89 cd                	mov    ebp,ecx
c000265a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000265e:	89 f8                	mov    eax,edi
c0002660:	83 c7 10             	add    edi,0x10
c0002663:	e8 cc f5 ff ff       	call   c0001c34 <ld_dword>
c0002668:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000266c:	89 01                	mov    DWORD PTR [ecx],eax
c000266e:	83 c1 04             	add    ecx,0x4
c0002671:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002675:	75 e3                	jne    c000265a <find_volume+0x127>
c0002677:	31 ff                	xor    edi,edi
c0002679:	85 f6                	test   esi,esi
c000267b:	74 03                	je     c0002680 <find_volume+0x14d>
c000267d:	8d 7e ff             	lea    edi,[esi-0x1]
c0002680:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c0002684:	85 d2                	test   edx,edx
c0002686:	74 14                	je     c000269c <find_volume+0x169>
c0002688:	31 c9                	xor    ecx,ecx
c000268a:	89 d8                	mov    eax,ebx
c000268c:	e8 e8 fd ff ff       	call   c0002479 <check_fs>
c0002691:	83 f8 01             	cmp    eax,0x1
c0002694:	76 19                	jbe    c00026af <find_volume+0x17c>
c0002696:	85 f6                	test   esi,esi
c0002698:	74 0f                	je     c00026a9 <find_volume+0x176>
c000269a:	eb 13                	jmp    c00026af <find_volume+0x17c>
c000269c:	85 f6                	test   esi,esi
c000269e:	0f 85 ed fe ff ff    	jne    c0002591 <find_volume+0x5e>
c00026a4:	b8 03 00 00 00       	mov    eax,0x3
c00026a9:	47                   	inc    edi
c00026aa:	83 ff 03             	cmp    edi,0x3
c00026ad:	76 d1                	jbe    c0002680 <find_volume+0x14d>
c00026af:	83 c4 3c             	add    esp,0x3c
c00026b2:	5b                   	pop    ebx
c00026b3:	5e                   	pop    esi
c00026b4:	5f                   	pop    edi
c00026b5:	5d                   	pop    ebp
c00026b6:	c3                   	ret    

c00026b7 <mount_volume>:
c00026b7:	55                   	push   ebp
c00026b8:	57                   	push   edi
c00026b9:	89 cf                	mov    edi,ecx
c00026bb:	56                   	push   esi
c00026bc:	53                   	push   ebx
c00026bd:	bb 0b 00 00 00       	mov    ebx,0xb
c00026c2:	83 ec 3c             	sub    esp,0x3c
c00026c5:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00026cf:	e8 35 fb ff ff       	call   c0002209 <get_ldnumber>
c00026d4:	85 c0                	test   eax,eax
c00026d6:	0f 88 3a 05 00 00    	js     c0002c16 <mount_volume+0x55f>
c00026dc:	8b 2c 85 c0 e1 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1e40]
c00026e3:	89 c6                	mov    esi,eax
c00026e5:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ea:	85 ed                	test   ebp,ebp
c00026ec:	0f 84 24 05 00 00    	je     c0002c16 <mount_volume+0x55f>
c00026f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026f6:	83 e7 fe             	and    edi,0xfffffffe
c00026f9:	89 2a                	mov    DWORD PTR [edx],ebp
c00026fb:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00026ff:	74 32                	je     c0002733 <mount_volume+0x7c>
c0002701:	83 ec 0c             	sub    esp,0xc
c0002704:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002708:	50                   	push   eax
c0002709:	e8 c8 f4 ff ff       	call   c0001bd6 <disk_status>
c000270e:	83 c4 10             	add    esp,0x10
c0002711:	a8 01                	test   al,0x1
c0002713:	75 1e                	jne    c0002733 <mount_volume+0x7c>
c0002715:	31 db                	xor    ebx,ebx
c0002717:	89 f9                	mov    ecx,edi
c0002719:	84 c9                	test   cl,cl
c000271b:	0f 84 f5 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002721:	a8 04                	test   al,0x4
c0002723:	0f 84 ed 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002729:	bb 0a 00 00 00       	mov    ebx,0xa
c000272e:	e9 e3 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002733:	83 ec 0c             	sub    esp,0xc
c0002736:	89 f0                	mov    eax,esi
c0002738:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000273c:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000273f:	0f b6 f0             	movzx  esi,al
c0002742:	bb 03 00 00 00       	mov    ebx,0x3
c0002747:	56                   	push   esi
c0002748:	e8 8c f4 ff ff       	call   c0001bd9 <disk_initialize>
c000274d:	83 c4 10             	add    esp,0x10
c0002750:	a8 01                	test   al,0x1
c0002752:	0f 85 be 04 00 00    	jne    c0002c16 <mount_volume+0x55f>
c0002758:	89 f9                	mov    ecx,edi
c000275a:	84 c9                	test   cl,cl
c000275c:	74 04                	je     c0002762 <mount_volume+0xab>
c000275e:	a8 04                	test   al,0x4
c0002760:	75 c7                	jne    c0002729 <mount_volume+0x72>
c0002762:	31 d2                	xor    edx,edx
c0002764:	89 e8                	mov    eax,ebp
c0002766:	e8 c8 fd ff ff       	call   c0002533 <find_volume>
c000276b:	83 f8 04             	cmp    eax,0x4
c000276e:	75 0a                	jne    c000277a <mount_volume+0xc3>
c0002770:	bb 01 00 00 00       	mov    ebx,0x1
c0002775:	e9 9c 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c000277a:	83 f8 01             	cmp    eax,0x1
c000277d:	76 0a                	jbe    c0002789 <mount_volume+0xd2>
c000277f:	bb 0d 00 00 00       	mov    ebx,0xd
c0002784:	e9 8d 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002789:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c000278c:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000278f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002793:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002797:	75 17                	jne    c00027b0 <mount_volume+0xf9>
c0002799:	b8 0b 00 00 00       	mov    eax,0xb
c000279e:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027a3:	75 da                	jne    c000277f <mount_volume+0xc8>
c00027a5:	40                   	inc    eax
c00027a6:	83 f8 40             	cmp    eax,0x40
c00027a9:	75 f3                	jne    c000279e <mount_volume+0xe7>
c00027ab:	e9 5a 02 00 00       	jmp    c0002a0a <mount_volume+0x353>
c00027b0:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027b3:	e8 6f f4 ff ff       	call   c0001c27 <ld_word>
c00027b8:	66 3d 00 02          	cmp    ax,0x200
c00027bc:	75 c1                	jne    c000277f <mount_volume+0xc8>
c00027be:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027c1:	e8 61 f4 ff ff       	call   c0001c27 <ld_word>
c00027c6:	0f b7 c0             	movzx  eax,ax
c00027c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027cd:	85 c0                	test   eax,eax
c00027cf:	75 0c                	jne    c00027dd <mount_volume+0x126>
c00027d1:	8d 45 78             	lea    eax,[ebp+0x78]
c00027d4:	e8 5b f4 ff ff       	call   c0001c34 <ld_dword>
c00027d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027e1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027e4:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00027e7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00027eb:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027ee:	48                   	dec    eax
c00027ef:	3c 01                	cmp    al,0x1
c00027f1:	77 8c                	ja     c000277f <mount_volume+0xc8>
c00027f3:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00027f7:	89 c3                	mov    ebx,eax
c00027f9:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00027fd:	66 85 c0             	test   ax,ax
c0002800:	0f 84 79 ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002806:	8d 40 ff             	lea    eax,[eax-0x1]
c0002809:	85 d8                	test   eax,ebx
c000280b:	0f 85 6e ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002811:	8d 45 65             	lea    eax,[ebp+0x65]
c0002814:	e8 0e f4 ff ff       	call   c0001c27 <ld_word>
c0002819:	89 c7                	mov    edi,eax
c000281b:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000281f:	a8 0f                	test   al,0xf
c0002821:	0f 85 58 ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002827:	8d 45 67             	lea    eax,[ebp+0x67]
c000282a:	e8 f8 f3 ff ff       	call   c0001c27 <ld_word>
c000282f:	0f b7 f0             	movzx  esi,ax
c0002832:	85 f6                	test   esi,esi
c0002834:	75 0a                	jne    c0002840 <mount_volume+0x189>
c0002836:	8d 45 74             	lea    eax,[ebp+0x74]
c0002839:	e8 f6 f3 ff ff       	call   c0001c34 <ld_dword>
c000283e:	89 c6                	mov    esi,eax
c0002840:	8d 45 62             	lea    eax,[ebp+0x62]
c0002843:	e8 df f3 ff ff       	call   c0001c27 <ld_word>
c0002848:	66 85 c0             	test   ax,ax
c000284b:	0f 84 2e ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002851:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002856:	0f b7 c8             	movzx  ecx,ax
c0002859:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000285e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002862:	89 fa                	mov    edx,edi
c0002864:	66 c1 ea 04          	shr    dx,0x4
c0002868:	0f b7 d2             	movzx  edx,dx
c000286b:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000286f:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002872:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002876:	39 c6                	cmp    esi,eax
c0002878:	0f 82 01 ff ff ff    	jb     c000277f <mount_volume+0xc8>
c000287e:	29 c6                	sub    esi,eax
c0002880:	31 d2                	xor    edx,edx
c0002882:	89 f0                	mov    eax,esi
c0002884:	f7 f3                	div    ebx
c0002886:	39 de                	cmp    esi,ebx
c0002888:	0f 82 f1 fe ff ff    	jb     c000277f <mount_volume+0xc8>
c000288e:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002893:	0f 87 e6 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c0002899:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000289e:	0f 86 63 03 00 00    	jbe    c0002c07 <mount_volume+0x550>
c00028a4:	bb 03 00 00 00       	mov    ebx,0x3
c00028a9:	8d 70 02             	lea    esi,[eax+0x2]
c00028ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028b4:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028b7:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 c8                	mov    eax,ecx
c00028be:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028c1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028c9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00028cd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00028d1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028d4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00028db:	31 d2                	xor    edx,edx
c00028dd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028e5:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028e8:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028eb:	83 fb 03             	cmp    ebx,0x3
c00028ee:	75 2b                	jne    c000291b <mount_volume+0x264>
c00028f0:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00028f3:	e8 2f f3 ff ff       	call   c0001c27 <ld_word>
c00028f8:	66 09 c7             	or     di,ax
c00028fb:	0f 85 7e fe ff ff    	jne    c000277f <mount_volume+0xc8>
c0002901:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002907:	c1 e6 02             	shl    esi,0x2
c000290a:	e8 25 f3 ff ff       	call   c0001c34 <ld_dword>
c000290f:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002916:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002919:	eb 30                	jmp    c000294b <mount_volume+0x294>
c000291b:	66 85 ff             	test   di,di
c000291e:	0f 84 5b fe ff ff    	je     c000277f <mount_volume+0xc8>
c0002924:	31 d2                	xor    edx,edx
c0002926:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000292a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000292e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002932:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002935:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002938:	83 fb 02             	cmp    ebx,0x2
c000293b:	75 04                	jne    c0002941 <mount_volume+0x28a>
c000293d:	01 f6                	add    esi,esi
c000293f:	eb 0a                	jmp    c000294b <mount_volume+0x294>
c0002941:	8d 04 76             	lea    eax,[esi+esi*2]
c0002944:	83 e6 01             	and    esi,0x1
c0002947:	d1 e8                	shr    eax,1
c0002949:	01 c6                	add    esi,eax
c000294b:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002951:	c1 ee 09             	shr    esi,0x9
c0002954:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002958:	0f 87 21 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c000295e:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002965:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000296c:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002970:	83 fb 03             	cmp    ebx,0x3
c0002973:	75 7a                	jne    c00029ef <mount_volume+0x338>
c0002975:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000297b:	e8 a7 f2 ff ff       	call   c0001c27 <ld_word>
c0002980:	66 48                	dec    ax
c0002982:	75 6b                	jne    c00029ef <mount_volume+0x338>
c0002984:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002988:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000298c:	83 c2 01             	add    edx,0x1
c000298f:	89 e8                	mov    eax,ebp
c0002991:	83 d1 00             	adc    ecx,0x0
c0002994:	e8 6c fa ff ff       	call   c0002405 <move_window>
c0002999:	85 c0                	test   eax,eax
c000299b:	75 52                	jne    c00029ef <mount_volume+0x338>
c000299d:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029a1:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029a7:	e8 7b f2 ff ff       	call   c0001c27 <ld_word>
c00029ac:	66 3d 55 aa          	cmp    ax,0xaa55
c00029b0:	75 3d                	jne    c00029ef <mount_volume+0x338>
c00029b2:	8d 45 54             	lea    eax,[ebp+0x54]
c00029b5:	e8 7a f2 ff ff       	call   c0001c34 <ld_dword>
c00029ba:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029bf:	75 2e                	jne    c00029ef <mount_volume+0x338>
c00029c1:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00029c7:	e8 68 f2 ff ff       	call   c0001c34 <ld_dword>
c00029cc:	3d 72 72 41 61       	cmp    eax,0x61417272
c00029d1:	75 1c                	jne    c00029ef <mount_volume+0x338>
c00029d3:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00029d9:	e8 56 f2 ff ff       	call   c0001c34 <ld_dword>
c00029de:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00029e1:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00029e7:	e8 48 f2 ff ff       	call   c0001c34 <ld_dword>
c00029ec:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00029ef:	66 a1 a0 e1 02 c0    	mov    ax,ds:0xc002e1a0
c00029f5:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00029f8:	40                   	inc    eax
c00029f9:	31 db                	xor    ebx,ebx
c00029fb:	66 a3 a0 e1 02 c0    	mov    ds:0xc002e1a0,ax
c0002a01:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a05:	e9 0c 02 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002a0a:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a10:	e8 12 f2 ff ff       	call   c0001c27 <ld_word>
c0002a15:	66 3d 00 01          	cmp    ax,0x100
c0002a19:	0f 85 60 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a1f:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a26:	0f 85 53 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a2c:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a32:	e8 15 f2 ff ff       	call   c0001c4c <ld_qword>
c0002a37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a3f:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a45:	e8 ea f1 ff ff       	call   c0001c34 <ld_dword>
c0002a4a:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a4d:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a53:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a56:	fe c8                	dec    al
c0002a58:	0f 85 21 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a5e:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a65:	bb 01 00 00 00       	mov    ebx,0x1
c0002a6a:	d3 e3                	shl    ebx,cl
c0002a6c:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002a70:	66 85 db             	test   bx,bx
c0002a73:	0f 84 06 fd ff ff    	je     c000277f <mount_volume+0xc8>
c0002a79:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002a7f:	e8 b0 f1 ff ff       	call   c0001c34 <ld_dword>
c0002a84:	89 c6                	mov    esi,eax
c0002a86:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002a8b:	0f 87 ee fc ff ff    	ja     c000277f <mount_volume+0xc8>
c0002a91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a95:	8d 40 02             	lea    eax,[eax+0x2]
c0002a98:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002a9b:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002a9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002aa2:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002aa5:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002aab:	e8 84 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ab0:	31 d2                	xor    edx,edx
c0002ab2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002ab6:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002aba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002abe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002ac2:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002ac5:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002ac8:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002ace:	e8 61 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ad3:	31 d2                	xor    edx,edx
c0002ad5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002ad9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002add:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002ae1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002ae4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002ae7:	0f b7 c3             	movzx  eax,bx
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	0f af f0             	imul   esi,eax
c0002aef:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002af3:	89 f0                	mov    eax,esi
c0002af5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002af9:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002afd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b01:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b05:	39 c1                	cmp    ecx,eax
c0002b07:	89 df                	mov    edi,ebx
c0002b09:	19 d7                	sbb    edi,edx
c0002b0b:	0f 82 6e fc ff ff    	jb     c000277f <mount_volume+0xc8>
c0002b11:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b17:	31 db                	xor    ebx,ebx
c0002b19:	e8 16 f1 ff ff       	call   c0001c34 <ld_dword>
c0002b1e:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b25:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b28:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b30:	85 db                	test   ebx,ebx
c0002b32:	75 39                	jne    c0002b6d <mount_volume+0x4b6>
c0002b34:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b38:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b3c:	0f 86 3d fc ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b42:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b45:	31 ff                	xor    edi,edi
c0002b47:	89 e8                	mov    eax,ebp
c0002b49:	e8 72 f3 ff ff       	call   c0001ec0 <clst2sect>
c0002b4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b52:	01 c6                	add    esi,eax
c0002b54:	89 e8                	mov    eax,ebp
c0002b56:	11 d7                	adc    edi,edx
c0002b58:	89 f2                	mov    edx,esi
c0002b5a:	89 f9                	mov    ecx,edi
c0002b5c:	e8 a4 f8 ff ff       	call   c0002405 <move_window>
c0002b61:	85 c0                	test   eax,eax
c0002b63:	0f 85 07 fc ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002b69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002b6d:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002b72:	74 0b                	je     c0002b7f <mount_volume+0x4c8>
c0002b74:	83 c3 20             	add    ebx,0x20
c0002b77:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002b7d:	eb b1                	jmp    c0002b30 <mount_volume+0x479>
c0002b7f:	8d 75 54             	lea    esi,[ebp+0x54]
c0002b82:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002b86:	e8 a9 f0 ff ff       	call   c0001c34 <ld_dword>
c0002b8b:	89 c3                	mov    ebx,eax
c0002b8d:	83 f8 01             	cmp    eax,0x1
c0002b90:	0f 86 e9 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b96:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002b99:	0f 86 e0 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b9f:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ba2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ba6:	0f af c2             	imul   eax,edx
c0002ba9:	31 d2                	xor    edx,edx
c0002bab:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bae:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bb1:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bb4:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bb7:	31 c9                	xor    ecx,ecx
c0002bb9:	89 da                	mov    edx,ebx
c0002bbb:	89 e8                	mov    eax,ebp
c0002bbd:	c1 ea 07             	shr    edx,0x7
c0002bc0:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bc3:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002bc6:	e8 3a f8 ff ff       	call   c0002405 <move_window>
c0002bcb:	85 c0                	test   eax,eax
c0002bcd:	0f 85 9d fb ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002bd3:	89 d8                	mov    eax,ebx
c0002bd5:	83 e0 7f             	and    eax,0x7f
c0002bd8:	8d 04 86             	lea    eax,[esi+eax*4]
c0002bdb:	e8 54 f0 ff ff       	call   c0001c34 <ld_dword>
c0002be0:	83 f8 ff             	cmp    eax,0xffffffff
c0002be3:	74 0a                	je     c0002bef <mount_volume+0x538>
c0002be5:	43                   	inc    ebx
c0002be6:	39 d8                	cmp    eax,ebx
c0002be8:	74 cd                	je     c0002bb7 <mount_volume+0x500>
c0002bea:	e9 90 fb ff ff       	jmp    c000277f <mount_volume+0xc8>
c0002bef:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002bf6:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002bfd:	bb 04 00 00 00       	mov    ebx,0x4
c0002c02:	e9 e8 fd ff ff       	jmp    c00029ef <mount_volume+0x338>
c0002c07:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c0c:	19 db                	sbb    ebx,ebx
c0002c0e:	83 c3 02             	add    ebx,0x2
c0002c11:	e9 93 fc ff ff       	jmp    c00028a9 <mount_volume+0x1f2>
c0002c16:	83 c4 3c             	add    esp,0x3c
c0002c19:	89 d8                	mov    eax,ebx
c0002c1b:	5b                   	pop    ebx
c0002c1c:	5e                   	pop    esi
c0002c1d:	5f                   	pop    edi
c0002c1e:	5d                   	pop    ebp
c0002c1f:	c3                   	ret    

c0002c20 <find_bitmap>:
c0002c20:	55                   	push   ebp
c0002c21:	57                   	push   edi
c0002c22:	89 c7                	mov    edi,eax
c0002c24:	56                   	push   esi
c0002c25:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c28:	53                   	push   ebx
c0002c29:	83 ec 1c             	sub    esp,0x1c
c0002c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c2f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c33:	83 e8 02             	sub    eax,0x2
c0002c36:	39 f0                	cmp    eax,esi
c0002c38:	77 02                	ja     c0002c3c <find_bitmap+0x1c>
c0002c3a:	31 f6                	xor    esi,esi
c0002c3c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c40:	89 f3                	mov    ebx,esi
c0002c42:	31 ed                	xor    ebp,ebp
c0002c44:	31 c9                	xor    ecx,ecx
c0002c46:	89 da                	mov    edx,ebx
c0002c48:	89 f8                	mov    eax,edi
c0002c4a:	c1 ea 0c             	shr    edx,0xc
c0002c4d:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c50:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c53:	e8 ad f7 ff ff       	call   c0002405 <move_window>
c0002c58:	85 c0                	test   eax,eax
c0002c5a:	75 68                	jne    c0002cc4 <find_bitmap+0xa4>
c0002c5c:	89 da                	mov    edx,ebx
c0002c5e:	89 d9                	mov    ecx,ebx
c0002c60:	c1 ea 03             	shr    edx,0x3
c0002c63:	83 e1 07             	and    ecx,0x7
c0002c66:	b8 01 00 00 00       	mov    eax,0x1
c0002c6b:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002c71:	d3 e0                	shl    eax,cl
c0002c73:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002c76:	83 e9 02             	sub    ecx,0x2
c0002c79:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c7d:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002c81:	43                   	inc    ebx
c0002c82:	21 c1                	and    ecx,eax
c0002c84:	d1 e0                	shl    eax,1
c0002c86:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002c8a:	77 09                	ja     c0002c95 <find_bitmap+0x75>
c0002c8c:	31 db                	xor    ebx,ebx
c0002c8e:	ba 00 02 00 00       	mov    edx,0x200
c0002c93:	31 c0                	xor    eax,eax
c0002c95:	84 c9                	test   cl,cl
c0002c97:	75 10                	jne    c0002ca9 <find_bitmap+0x89>
c0002c99:	45                   	inc    ebp
c0002c9a:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002c9e:	75 0f                	jne    c0002caf <find_bitmap+0x8f>
c0002ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ca4:	83 c0 02             	add    eax,0x2
c0002ca7:	eb 22                	jmp    c0002ccb <find_bitmap+0xab>
c0002ca9:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cad:	31 ed                	xor    ebp,ebp
c0002caf:	39 de                	cmp    esi,ebx
c0002cb1:	74 16                	je     c0002cc9 <find_bitmap+0xa9>
c0002cb3:	84 c0                	test   al,al
c0002cb5:	75 c6                	jne    c0002c7d <find_bitmap+0x5d>
c0002cb7:	42                   	inc    edx
c0002cb8:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cbe:	77 84                	ja     c0002c44 <find_bitmap+0x24>
c0002cc0:	b0 01                	mov    al,0x1
c0002cc2:	eb b9                	jmp    c0002c7d <find_bitmap+0x5d>
c0002cc4:	83 c8 ff             	or     eax,0xffffffff
c0002cc7:	eb 02                	jmp    c0002ccb <find_bitmap+0xab>
c0002cc9:	31 c0                	xor    eax,eax
c0002ccb:	83 c4 1c             	add    esp,0x1c
c0002cce:	5b                   	pop    ebx
c0002ccf:	5e                   	pop    esi
c0002cd0:	5f                   	pop    edi
c0002cd1:	5d                   	pop    ebp
c0002cd2:	c3                   	ret    

c0002cd3 <change_bitmap>:
c0002cd3:	55                   	push   ebp
c0002cd4:	89 cd                	mov    ebp,ecx
c0002cd6:	57                   	push   edi
c0002cd7:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002cda:	56                   	push   esi
c0002cdb:	89 c7                	mov    edi,eax
c0002cdd:	53                   	push   ebx
c0002cde:	89 c8                	mov    eax,ecx
c0002ce0:	83 ec 1c             	sub    esp,0x1c
c0002ce3:	31 d2                	xor    edx,edx
c0002ce5:	89 ce                	mov    esi,ecx
c0002ce7:	c1 e8 0c             	shr    eax,0xc
c0002cea:	bb 01 00 00 00       	mov    ebx,0x1
c0002cef:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002cf2:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002cf5:	c1 ee 03             	shr    esi,0x3
c0002cf8:	83 e1 07             	and    ecx,0x7
c0002cfb:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d01:	d3 e3                	shl    ebx,cl
c0002d03:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d07:	89 c1                	mov    ecx,eax
c0002d09:	89 d3                	mov    ebx,edx
c0002d0b:	83 c1 01             	add    ecx,0x1
c0002d0e:	83 d3 00             	adc    ebx,0x0
c0002d11:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d15:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d19:	89 d1                	mov    ecx,edx
c0002d1b:	89 c2                	mov    edx,eax
c0002d1d:	89 f8                	mov    eax,edi
c0002d1f:	e8 e1 f6 ff ff       	call   c0002405 <move_window>
c0002d24:	89 c1                	mov    ecx,eax
c0002d26:	85 c0                	test   eax,eax
c0002d28:	75 48                	jne    c0002d72 <change_bitmap+0x9f>
c0002d2a:	31 d2                	xor    edx,edx
c0002d2c:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d30:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d34:	0f 95 c2             	setne  dl
c0002d37:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d3b:	74 3c                	je     c0002d79 <change_bitmap+0xa6>
c0002d3d:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d41:	4d                   	dec    ebp
c0002d42:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d46:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d4a:	74 32                	je     c0002d7e <change_bitmap+0xab>
c0002d4c:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d50:	75 d8                	jne    c0002d2a <change_bitmap+0x57>
c0002d52:	8d 46 01             	lea    eax,[esi+0x1]
c0002d55:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d5a:	89 c3                	mov    ebx,eax
c0002d5c:	31 f6                	xor    esi,esi
c0002d5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d66:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002d6c:	74 99                	je     c0002d07 <change_bitmap+0x34>
c0002d6e:	89 de                	mov    esi,ebx
c0002d70:	eb b8                	jmp    c0002d2a <change_bitmap+0x57>
c0002d72:	b9 01 00 00 00       	mov    ecx,0x1
c0002d77:	eb 05                	jmp    c0002d7e <change_bitmap+0xab>
c0002d79:	b9 02 00 00 00       	mov    ecx,0x2
c0002d7e:	83 c4 1c             	add    esp,0x1c
c0002d81:	89 c8                	mov    eax,ecx
c0002d83:	5b                   	pop    ebx
c0002d84:	5e                   	pop    esi
c0002d85:	5f                   	pop    edi
c0002d86:	5d                   	pop    ebp
c0002d87:	c3                   	ret    

c0002d88 <put_fat>:
c0002d88:	83 fa 01             	cmp    edx,0x1
c0002d8b:	0f 86 7b 01 00 00    	jbe    c0002f0c <put_fat+0x184>
c0002d91:	55                   	push   ebp
c0002d92:	57                   	push   edi
c0002d93:	89 cf                	mov    edi,ecx
c0002d95:	56                   	push   esi
c0002d96:	b9 02 00 00 00       	mov    ecx,0x2
c0002d9b:	53                   	push   ebx
c0002d9c:	89 c6                	mov    esi,eax
c0002d9e:	83 ec 1c             	sub    esp,0x1c
c0002da1:	89 d3                	mov    ebx,edx
c0002da3:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002da6:	0f 86 68 01 00 00    	jbe    c0002f14 <put_fat+0x18c>
c0002dac:	8a 00                	mov    al,BYTE PTR [eax]
c0002dae:	3c 02                	cmp    al,0x2
c0002db0:	0f 84 c7 00 00 00    	je     c0002e7d <put_fat+0xf5>
c0002db6:	77 09                	ja     c0002dc1 <put_fat+0x39>
c0002db8:	fe c8                	dec    al
c0002dba:	74 17                	je     c0002dd3 <put_fat+0x4b>
c0002dbc:	e9 53 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dc1:	b9 02 00 00 00       	mov    ecx,0x2
c0002dc6:	3c 04                	cmp    al,0x4
c0002dc8:	0f 86 e1 00 00 00    	jbe    c0002eaf <put_fat+0x127>
c0002dce:	e9 41 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dd3:	89 d5                	mov    ebp,edx
c0002dd5:	31 c9                	xor    ecx,ecx
c0002dd7:	d1 ed                	shr    ebp,1
c0002dd9:	89 f0                	mov    eax,esi
c0002ddb:	01 d5                	add    ebp,edx
c0002ddd:	89 ea                	mov    edx,ebp
c0002ddf:	c1 ea 09             	shr    edx,0x9
c0002de2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002de5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002de8:	e8 18 f6 ff ff       	call   c0002405 <move_window>
c0002ded:	89 c1                	mov    ecx,eax
c0002def:	85 c0                	test   eax,eax
c0002df1:	0f 85 1d 01 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002df7:	8d 46 54             	lea    eax,[esi+0x54]
c0002dfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dfe:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e01:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e0b:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e0f:	89 f8                	mov    eax,edi
c0002e11:	83 e3 01             	and    ebx,0x1
c0002e14:	74 0d                	je     c0002e23 <put_fat+0x9b>
c0002e16:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e19:	89 fa                	mov    edx,edi
c0002e1b:	83 e0 0f             	and    eax,0xf
c0002e1e:	c1 e2 04             	shl    edx,0x4
c0002e21:	09 d0                	or     eax,edx
c0002e23:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e2a:	31 c9                	xor    ecx,ecx
c0002e2c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e30:	c1 ea 09             	shr    edx,0x9
c0002e33:	89 f0                	mov    eax,esi
c0002e35:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e38:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e3b:	e8 c5 f5 ff ff       	call   c0002405 <move_window>
c0002e40:	89 c1                	mov    ecx,eax
c0002e42:	85 c0                	test   eax,eax
c0002e44:	0f 85 ca 00 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002e4a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e4e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e54:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e58:	85 db                	test   ebx,ebx
c0002e5a:	74 07                	je     c0002e63 <put_fat+0xdb>
c0002e5c:	c1 ef 04             	shr    edi,0x4
c0002e5f:	89 fa                	mov    edx,edi
c0002e61:	eb 0e                	jmp    c0002e71 <put_fat+0xe9>
c0002e63:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002e66:	c1 ef 08             	shr    edi,0x8
c0002e69:	83 e2 f0             	and    edx,0xfffffff0
c0002e6c:	83 e7 0f             	and    edi,0xf
c0002e6f:	09 fa                	or     edx,edi
c0002e71:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002e74:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e78:	e9 97 00 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002e7d:	31 c9                	xor    ecx,ecx
c0002e7f:	c1 ea 08             	shr    edx,0x8
c0002e82:	89 f0                	mov    eax,esi
c0002e84:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e87:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e8a:	e8 76 f5 ff ff       	call   c0002405 <move_window>
c0002e8f:	89 c1                	mov    ecx,eax
c0002e91:	85 c0                	test   eax,eax
c0002e93:	75 7f                	jne    c0002f14 <put_fat+0x18c>
c0002e95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e99:	01 db                	add    ebx,ebx
c0002e9b:	0f b7 d7             	movzx  edx,di
c0002e9e:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ea4:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ea8:	e8 ec ed ff ff       	call   c0001c99 <st_word>
c0002ead:	eb 53                	jmp    c0002f02 <put_fat+0x17a>
c0002eaf:	31 c9                	xor    ecx,ecx
c0002eb1:	c1 ea 07             	shr    edx,0x7
c0002eb4:	89 f0                	mov    eax,esi
c0002eb6:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002eb9:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ebc:	e8 44 f5 ff ff       	call   c0002405 <move_window>
c0002ec1:	89 c1                	mov    ecx,eax
c0002ec3:	85 c0                	test   eax,eax
c0002ec5:	75 4d                	jne    c0002f14 <put_fat+0x18c>
c0002ec7:	c1 e3 02             	shl    ebx,0x2
c0002eca:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ed0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002ed3:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ed7:	74 1c                	je     c0002ef5 <put_fat+0x16d>
c0002ed9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002edd:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ee3:	89 d8                	mov    eax,ebx
c0002ee5:	e8 4a ed ff ff       	call   c0001c34 <ld_dword>
c0002eea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002eee:	25 00 00 00 f0       	and    eax,0xf0000000
c0002ef3:	09 c7                	or     edi,eax
c0002ef5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef9:	89 fa                	mov    edx,edi
c0002efb:	89 d8                	mov    eax,ebx
c0002efd:	e8 9b ed ff ff       	call   c0001c9d <st_dword>
c0002f02:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f06:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f0a:	eb 08                	jmp    c0002f14 <put_fat+0x18c>
c0002f0c:	b9 02 00 00 00       	mov    ecx,0x2
c0002f11:	89 c8                	mov    eax,ecx
c0002f13:	c3                   	ret    
c0002f14:	83 c4 1c             	add    esp,0x1c
c0002f17:	89 c8                	mov    eax,ecx
c0002f19:	5b                   	pop    ebx
c0002f1a:	5e                   	pop    esi
c0002f1b:	5f                   	pop    edi
c0002f1c:	5d                   	pop    ebp
c0002f1d:	c3                   	ret    

c0002f1e <fill_last_frag>:
c0002f1e:	57                   	push   edi
c0002f1f:	89 cf                	mov    edi,ecx
c0002f21:	56                   	push   esi
c0002f22:	89 d6                	mov    esi,edx
c0002f24:	53                   	push   ebx
c0002f25:	89 c3                	mov    ebx,eax
c0002f27:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f2a:	85 c0                	test   eax,eax
c0002f2c:	74 21                	je     c0002f4f <fill_last_frag+0x31>
c0002f2e:	89 f9                	mov    ecx,edi
c0002f30:	83 f8 01             	cmp    eax,0x1
c0002f33:	76 05                	jbe    c0002f3a <fill_last_frag+0x1c>
c0002f35:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f38:	29 c1                	sub    ecx,eax
c0002f3a:	8d 56 01             	lea    edx,[esi+0x1]
c0002f3d:	29 c2                	sub    edx,eax
c0002f3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f41:	e8 42 fe ff ff       	call   c0002d88 <put_fat>
c0002f46:	85 c0                	test   eax,eax
c0002f48:	75 05                	jne    c0002f4f <fill_last_frag+0x31>
c0002f4a:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f4d:	eb d8                	jmp    c0002f27 <fill_last_frag+0x9>
c0002f4f:	5b                   	pop    ebx
c0002f50:	5e                   	pop    esi
c0002f51:	5f                   	pop    edi
c0002f52:	c3                   	ret    

c0002f53 <fill_first_frag>:
c0002f53:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f57:	75 2d                	jne    c0002f86 <fill_first_frag+0x33>
c0002f59:	57                   	push   edi
c0002f5a:	56                   	push   esi
c0002f5b:	53                   	push   ebx
c0002f5c:	89 c3                	mov    ebx,eax
c0002f5e:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f61:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f64:	01 d7                	add    edi,edx
c0002f66:	39 fa                	cmp    edx,edi
c0002f68:	74 14                	je     c0002f7e <fill_first_frag+0x2b>
c0002f6a:	8d 72 01             	lea    esi,[edx+0x1]
c0002f6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f6f:	89 f1                	mov    ecx,esi
c0002f71:	e8 12 fe ff ff       	call   c0002d88 <put_fat>
c0002f76:	89 f2                	mov    edx,esi
c0002f78:	85 c0                	test   eax,eax
c0002f7a:	74 ea                	je     c0002f66 <fill_first_frag+0x13>
c0002f7c:	eb 0b                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f7e:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f82:	31 c0                	xor    eax,eax
c0002f84:	eb 03                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f86:	31 c0                	xor    eax,eax
c0002f88:	c3                   	ret    
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <get_fat>:
c0002f8d:	83 fa 01             	cmp    edx,0x1
c0002f90:	0f 86 db 01 00 00    	jbe    c0003171 <get_fat+0x1e4>
c0002f96:	55                   	push   ebp
c0002f97:	b9 01 00 00 00       	mov    ecx,0x1
c0002f9c:	57                   	push   edi
c0002f9d:	56                   	push   esi
c0002f9e:	53                   	push   ebx
c0002f9f:	83 ec 1c             	sub    esp,0x1c
c0002fa2:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fa4:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fa7:	0f 86 cc 01 00 00    	jbe    c0003179 <get_fat+0x1ec>
c0002fad:	89 c3                	mov    ebx,eax
c0002faf:	89 d6                	mov    esi,edx
c0002fb1:	8a 07                	mov    al,BYTE PTR [edi]
c0002fb3:	3c 02                	cmp    al,0x2
c0002fb5:	0f 84 99 00 00 00    	je     c0003054 <get_fat+0xc7>
c0002fbb:	77 09                	ja     c0002fc6 <get_fat+0x39>
c0002fbd:	fe c8                	dec    al
c0002fbf:	74 1a                	je     c0002fdb <get_fat+0x4e>
c0002fc1:	e9 b3 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fc6:	3c 03                	cmp    al,0x3
c0002fc8:	0f 84 b5 00 00 00    	je     c0003083 <get_fat+0xf6>
c0002fce:	3c 04                	cmp    al,0x4
c0002fd0:	0f 84 e3 00 00 00    	je     c00030b9 <get_fat+0x12c>
c0002fd6:	e9 9e 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fdb:	89 d3                	mov    ebx,edx
c0002fdd:	31 c9                	xor    ecx,ecx
c0002fdf:	d1 eb                	shr    ebx,1
c0002fe1:	89 f8                	mov    eax,edi
c0002fe3:	01 d3                	add    ebx,edx
c0002fe5:	89 da                	mov    edx,ebx
c0002fe7:	c1 ea 09             	shr    edx,0x9
c0002fea:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fed:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ff0:	e8 10 f4 ff ff       	call   c0002405 <move_window>
c0002ff5:	85 c0                	test   eax,eax
c0002ff7:	74 08                	je     c0003001 <get_fat+0x74>
c0002ff9:	83 c9 ff             	or     ecx,0xffffffff
c0002ffc:	e9 78 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003001:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003004:	31 c9                	xor    ecx,ecx
c0003006:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000300c:	89 ea                	mov    edx,ebp
c000300e:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003012:	c1 ea 09             	shr    edx,0x9
c0003015:	89 f8                	mov    eax,edi
c0003017:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000301a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000301d:	e8 e3 f3 ff ff       	call   c0002405 <move_window>
c0003022:	85 c0                	test   eax,eax
c0003024:	75 d3                	jne    c0002ff9 <get_fat+0x6c>
c0003026:	0f b6 c3             	movzx  eax,bl
c0003029:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000302f:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003034:	c1 e3 08             	shl    ebx,0x8
c0003037:	09 c3                	or     ebx,eax
c0003039:	89 d9                	mov    ecx,ebx
c000303b:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003041:	83 e6 01             	and    esi,0x1
c0003044:	0f 84 2f 01 00 00    	je     c0003179 <get_fat+0x1ec>
c000304a:	89 d9                	mov    ecx,ebx
c000304c:	c1 e9 04             	shr    ecx,0x4
c000304f:	e9 25 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003054:	31 c9                	xor    ecx,ecx
c0003056:	c1 ea 08             	shr    edx,0x8
c0003059:	89 f8                	mov    eax,edi
c000305b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000305e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003061:	e8 9f f3 ff ff       	call   c0002405 <move_window>
c0003066:	85 c0                	test   eax,eax
c0003068:	75 8f                	jne    c0002ff9 <get_fat+0x6c>
c000306a:	01 f6                	add    esi,esi
c000306c:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0003072:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003076:	e8 ac eb ff ff       	call   c0001c27 <ld_word>
c000307b:	0f b7 c8             	movzx  ecx,ax
c000307e:	e9 f6 00 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003083:	31 c9                	xor    ecx,ecx
c0003085:	c1 ea 07             	shr    edx,0x7
c0003088:	89 f8                	mov    eax,edi
c000308a:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000308d:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003090:	e8 70 f3 ff ff       	call   c0002405 <move_window>
c0003095:	85 c0                	test   eax,eax
c0003097:	0f 85 5c ff ff ff    	jne    c0002ff9 <get_fat+0x6c>
c000309d:	c1 e6 02             	shl    esi,0x2
c00030a0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030a6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030aa:	e8 85 eb ff ff       	call   c0001c34 <ld_dword>
c00030af:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030b4:	e9 b4 00 00 00       	jmp    c000316d <get_fat+0x1e0>
c00030b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030bf:	89 d1                	mov    ecx,edx
c00030c1:	09 c1                	or     ecx,eax
c00030c3:	74 06                	je     c00030cb <get_fat+0x13e>
c00030c5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00030c9:	75 0f                	jne    c00030da <get_fat+0x14d>
c00030cb:	b9 01 00 00 00       	mov    ecx,0x1
c00030d0:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c00030d4:	0f 85 9f 00 00 00    	jne    c0003179 <get_fat+0x1ec>
c00030da:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c00030de:	89 f5                	mov    ebp,esi
c00030e0:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c00030e5:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c00030e8:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c00030eb:	80 f9 02             	cmp    cl,0x2
c00030ee:	75 35                	jne    c0003125 <get_fat+0x198>
c00030f0:	83 c0 ff             	add    eax,0xffffffff
c00030f3:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c00030f8:	83 d2 ff             	adc    edx,0xffffffff
c00030fb:	31 db                	xor    ebx,ebx
c00030fd:	0f ac d0 09          	shrd   eax,edx,0x9
c0003101:	53                   	push   ebx
c0003102:	c1 ea 09             	shr    edx,0x9
c0003105:	51                   	push   ecx
c0003106:	52                   	push   edx
c0003107:	50                   	push   eax
c0003108:	e8 67 3a 02 00       	call   c0026b74 <__udivdi3>
c000310d:	83 c4 10             	add    esp,0x10
c0003110:	b9 01 00 00 00       	mov    ecx,0x1
c0003115:	39 c5                	cmp    ebp,eax
c0003117:	77 60                	ja     c0003179 <get_fat+0x1ec>
c0003119:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000311e:	74 59                	je     c0003179 <get_fat+0x1ec>
c0003120:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003123:	eb 54                	jmp    c0003179 <get_fat+0x1ec>
c0003125:	80 f9 03             	cmp    cl,0x3
c0003128:	75 05                	jne    c000312f <get_fat+0x1a2>
c000312a:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c000312d:	77 f1                	ja     c0003120 <get_fat+0x193>
c000312f:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003134:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003138:	75 3f                	jne    c0003179 <get_fat+0x1ec>
c000313a:	31 c9                	xor    ecx,ecx
c000313c:	89 f2                	mov    edx,esi
c000313e:	89 f8                	mov    eax,edi
c0003140:	c1 ea 07             	shr    edx,0x7
c0003143:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003146:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003149:	e8 b7 f2 ff ff       	call   c0002405 <move_window>
c000314e:	85 c0                	test   eax,eax
c0003150:	0f 85 a3 fe ff ff    	jne    c0002ff9 <get_fat+0x6c>
c0003156:	c1 e6 02             	shl    esi,0x2
c0003159:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000315f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003163:	e8 cc ea ff ff       	call   c0001c34 <ld_dword>
c0003168:	25 ff ff ff 7f       	and    eax,0x7fffffff
c000316d:	89 c1                	mov    ecx,eax
c000316f:	eb 08                	jmp    c0003179 <get_fat+0x1ec>
c0003171:	b9 01 00 00 00       	mov    ecx,0x1
c0003176:	89 c8                	mov    eax,ecx
c0003178:	c3                   	ret    
c0003179:	83 c4 1c             	add    esp,0x1c
c000317c:	89 c8                	mov    eax,ecx
c000317e:	5b                   	pop    ebx
c000317f:	5e                   	pop    esi
c0003180:	5f                   	pop    edi
c0003181:	5d                   	pop    ebp
c0003182:	c3                   	ret    

c0003183 <dir_sdi>:
c0003183:	55                   	push   ebp
c0003184:	57                   	push   edi
c0003185:	56                   	push   esi
c0003186:	53                   	push   ebx
c0003187:	89 c3                	mov    ebx,eax
c0003189:	83 ec 1c             	sub    esp,0x1c
c000318c:	8b 38                	mov    edi,DWORD PTR [eax]
c000318e:	31 c0                	xor    eax,eax
c0003190:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003193:	0f 94 c0             	sete   al
c0003196:	48                   	dec    eax
c0003197:	25 00 00 20 f0       	and    eax,0xf0200000
c000319c:	05 00 00 00 10       	add    eax,0x10000000
c00031a1:	39 d0                	cmp    eax,edx
c00031a3:	77 0a                	ja     c00031af <dir_sdi+0x2c>
c00031a5:	b8 02 00 00 00       	mov    eax,0x2
c00031aa:	e9 c4 00 00 00       	jmp    c0003273 <dir_sdi+0xf0>
c00031af:	89 d6                	mov    esi,edx
c00031b1:	f6 c2 1f             	test   dl,0x1f
c00031b4:	75 ef                	jne    c00031a5 <dir_sdi+0x22>
c00031b6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031b9:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031bc:	85 c9                	test   ecx,ecx
c00031be:	75 2d                	jne    c00031ed <dir_sdi+0x6a>
c00031c0:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031c3:	77 1b                	ja     c00031e0 <dir_sdi+0x5d>
c00031c5:	89 f2                	mov    edx,esi
c00031c7:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00031cb:	c1 ea 05             	shr    edx,0x5
c00031ce:	39 c2                	cmp    edx,eax
c00031d0:	73 d3                	jae    c00031a5 <dir_sdi+0x22>
c00031d2:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031d5:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c00031d8:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00031db:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031de:	eb 4b                	jmp    c000322b <dir_sdi+0xa8>
c00031e0:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031e3:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c00031e7:	85 c0                	test   eax,eax
c00031e9:	74 da                	je     c00031c5 <dir_sdi+0x42>
c00031eb:	89 c1                	mov    ecx,eax
c00031ed:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c00031f1:	c1 e5 09             	shl    ebp,0x9
c00031f4:	89 ca                	mov    edx,ecx
c00031f6:	39 ee                	cmp    esi,ebp
c00031f8:	72 1c                	jb     c0003216 <dir_sdi+0x93>
c00031fa:	89 d8                	mov    eax,ebx
c00031fc:	e8 8c fd ff ff       	call   c0002f8d <get_fat>
c0003201:	89 c1                	mov    ecx,eax
c0003203:	83 f8 ff             	cmp    eax,0xffffffff
c0003206:	74 66                	je     c000326e <dir_sdi+0xeb>
c0003208:	83 f8 01             	cmp    eax,0x1
c000320b:	76 98                	jbe    c00031a5 <dir_sdi+0x22>
c000320d:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003210:	76 93                	jbe    c00031a5 <dir_sdi+0x22>
c0003212:	29 ee                	sub    esi,ebp
c0003214:	eb de                	jmp    c00031f4 <dir_sdi+0x71>
c0003216:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000321a:	89 f8                	mov    eax,edi
c000321c:	e8 9f ec ff ff       	call   c0001ec0 <clst2sect>
c0003221:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003225:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000322b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000322e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003231:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003234:	89 d1                	mov    ecx,edx
c0003236:	09 c1                	or     ecx,eax
c0003238:	0f 84 67 ff ff ff    	je     c00031a5 <dir_sdi+0x22>
c000323e:	89 f1                	mov    ecx,esi
c0003240:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003248:	c1 e9 09             	shr    ecx,0x9
c000324b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000324f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003253:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003257:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000325a:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003260:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003263:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003267:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000326a:	31 c0                	xor    eax,eax
c000326c:	eb 05                	jmp    c0003273 <dir_sdi+0xf0>
c000326e:	b8 01 00 00 00       	mov    eax,0x1
c0003273:	83 c4 1c             	add    esp,0x1c
c0003276:	5b                   	pop    ebx
c0003277:	5e                   	pop    esi
c0003278:	5f                   	pop    edi
c0003279:	5d                   	pop    ebp
c000327a:	c3                   	ret    

c000327b <create_chain>:
c000327b:	55                   	push   ebp
c000327c:	89 c5                	mov    ebp,eax
c000327e:	57                   	push   edi
c000327f:	56                   	push   esi
c0003280:	53                   	push   ebx
c0003281:	83 ec 1c             	sub    esp,0x1c
c0003284:	85 d2                	test   edx,edx
c0003286:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000328a:	8b 30                	mov    esi,DWORD PTR [eax]
c000328c:	75 0e                	jne    c000329c <create_chain+0x21>
c000328e:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0003291:	85 ff                	test   edi,edi
c0003293:	74 39                	je     c00032ce <create_chain+0x53>
c0003295:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003298:	77 39                	ja     c00032d3 <create_chain+0x58>
c000329a:	eb 32                	jmp    c00032ce <create_chain+0x53>
c000329c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032a0:	e8 e8 fc ff ff       	call   c0002f8d <get_fat>
c00032a5:	89 c3                	mov    ebx,eax
c00032a7:	83 f8 01             	cmp    eax,0x1
c00032aa:	77 0a                	ja     c00032b6 <create_chain+0x3b>
c00032ac:	bb 01 00 00 00       	mov    ebx,0x1
c00032b1:	e9 ba 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032b6:	83 f8 ff             	cmp    eax,0xffffffff
c00032b9:	0f 84 62 01 00 00    	je     c0003421 <create_chain+0x1a6>
c00032bf:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032c2:	0f 87 a8 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c00032c8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00032cc:	eb 05                	jmp    c00032d3 <create_chain+0x58>
c00032ce:	bf 01 00 00 00       	mov    edi,0x1
c00032d3:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00032d7:	75 07                	jne    c00032e0 <create_chain+0x65>
c00032d9:	31 db                	xor    ebx,ebx
c00032db:	e9 90 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032e0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00032e3:	75 74                	jne    c0003359 <create_chain+0xde>
c00032e5:	b9 01 00 00 00       	mov    ecx,0x1
c00032ea:	89 fa                	mov    edx,edi
c00032ec:	89 f0                	mov    eax,esi
c00032ee:	e8 2d f9 ff ff       	call   c0002c20 <find_bitmap>
c00032f3:	89 c3                	mov    ebx,eax
c00032f5:	8d 40 ff             	lea    eax,[eax-0x1]
c00032f8:	83 f8 fd             	cmp    eax,0xfffffffd
c00032fb:	0f 87 6f 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c0003301:	83 ec 0c             	sub    esp,0xc
c0003304:	b9 01 00 00 00       	mov    ecx,0x1
c0003309:	6a 01                	push   0x1
c000330b:	89 da                	mov    edx,ebx
c000330d:	89 f0                	mov    eax,esi
c000330f:	e8 bf f9 ff ff       	call   c0002cd3 <change_bitmap>
c0003314:	83 c4 10             	add    esp,0x10
c0003317:	83 f8 02             	cmp    eax,0x2
c000331a:	74 90                	je     c00032ac <create_chain+0x31>
c000331c:	83 f8 01             	cmp    eax,0x1
c000331f:	0f 84 fc 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003325:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000332a:	75 09                	jne    c0003335 <create_chain+0xba>
c000332c:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003330:	e9 0c 01 00 00       	jmp    c0003441 <create_chain+0x1c6>
c0003335:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003339:	0f 85 e7 00 00 00    	jne    c0003426 <create_chain+0x1ab>
c000333f:	8d 57 01             	lea    edx,[edi+0x1]
c0003342:	39 da                	cmp    edx,ebx
c0003344:	0f 84 f7 00 00 00    	je     c0003441 <create_chain+0x1c6>
c000334a:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000334d:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003351:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003354:	e9 cd 00 00 00       	jmp    c0003426 <create_chain+0x1ab>
c0003359:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000335d:	75 41                	jne    c00033a0 <create_chain+0x125>
c000335f:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003362:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003365:	77 05                	ja     c000336c <create_chain+0xf1>
c0003367:	bb 02 00 00 00       	mov    ebx,0x2
c000336c:	89 da                	mov    edx,ebx
c000336e:	89 e8                	mov    eax,ebp
c0003370:	e8 18 fc ff ff       	call   c0002f8d <get_fat>
c0003375:	83 f8 01             	cmp    eax,0x1
c0003378:	0f 84 2e ff ff ff    	je     c00032ac <create_chain+0x31>
c000337e:	83 f8 ff             	cmp    eax,0xffffffff
c0003381:	0f 84 9a 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003387:	85 c0                	test   eax,eax
c0003389:	74 11                	je     c000339c <create_chain+0x121>
c000338b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000338e:	83 f8 01             	cmp    eax,0x1
c0003391:	76 0d                	jbe    c00033a0 <create_chain+0x125>
c0003393:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003396:	76 08                	jbe    c00033a0 <create_chain+0x125>
c0003398:	89 c7                	mov    edi,eax
c000339a:	eb 04                	jmp    c00033a0 <create_chain+0x125>
c000339c:	85 db                	test   ebx,ebx
c000339e:	75 38                	jne    c00033d8 <create_chain+0x15d>
c00033a0:	89 fb                	mov    ebx,edi
c00033a2:	43                   	inc    ebx
c00033a3:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033a6:	77 0e                	ja     c00033b6 <create_chain+0x13b>
c00033a8:	83 ff 01             	cmp    edi,0x1
c00033ab:	0f 86 28 ff ff ff    	jbe    c00032d9 <create_chain+0x5e>
c00033b1:	bb 02 00 00 00       	mov    ebx,0x2
c00033b6:	89 da                	mov    edx,ebx
c00033b8:	89 e8                	mov    eax,ebp
c00033ba:	e8 ce fb ff ff       	call   c0002f8d <get_fat>
c00033bf:	85 c0                	test   eax,eax
c00033c1:	74 15                	je     c00033d8 <create_chain+0x15d>
c00033c3:	83 f8 01             	cmp    eax,0x1
c00033c6:	0f 84 e0 fe ff ff    	je     c00032ac <create_chain+0x31>
c00033cc:	40                   	inc    eax
c00033cd:	74 52                	je     c0003421 <create_chain+0x1a6>
c00033cf:	39 fb                	cmp    ebx,edi
c00033d1:	75 cf                	jne    c00033a2 <create_chain+0x127>
c00033d3:	e9 01 ff ff ff       	jmp    c00032d9 <create_chain+0x5e>
c00033d8:	83 c9 ff             	or     ecx,0xffffffff
c00033db:	89 da                	mov    edx,ebx
c00033dd:	89 f0                	mov    eax,esi
c00033df:	e8 a4 f9 ff ff       	call   c0002d88 <put_fat>
c00033e4:	85 c0                	test   eax,eax
c00033e6:	75 32                	jne    c000341a <create_chain+0x19f>
c00033e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00033ed:	74 11                	je     c0003400 <create_chain+0x185>
c00033ef:	89 d9                	mov    ecx,ebx
c00033f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00033f5:	89 f0                	mov    eax,esi
c00033f7:	e8 8c f9 ff ff       	call   c0002d88 <put_fat>
c00033fc:	85 c0                	test   eax,eax
c00033fe:	75 1a                	jne    c000341a <create_chain+0x19f>
c0003400:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003403:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003406:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003409:	8d 51 fe             	lea    edx,[ecx-0x2]
c000340c:	39 d0                	cmp    eax,edx
c000340e:	77 04                	ja     c0003414 <create_chain+0x199>
c0003410:	48                   	dec    eax
c0003411:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003414:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003418:	eb 56                	jmp    c0003470 <create_chain+0x1f5>
c000341a:	48                   	dec    eax
c000341b:	0f 85 8b fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003421:	83 cb ff             	or     ebx,0xffffffff
c0003424:	eb 4a                	jmp    c0003470 <create_chain+0x1f5>
c0003426:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000342a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000342d:	41                   	inc    ecx
c000342e:	39 d9                	cmp    ecx,ebx
c0003430:	75 19                	jne    c000344b <create_chain+0x1d0>
c0003432:	b9 02 00 00 00       	mov    ecx,0x2
c0003437:	85 d2                	test   edx,edx
c0003439:	74 03                	je     c000343e <create_chain+0x1c3>
c000343b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000343e:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003441:	85 c0                	test   eax,eax
c0003443:	0f 85 63 fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003449:	eb b5                	jmp    c0003400 <create_chain+0x185>
c000344b:	85 d2                	test   edx,edx
c000344d:	75 07                	jne    c0003456 <create_chain+0x1db>
c000344f:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003456:	89 d9                	mov    ecx,ebx
c0003458:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000345c:	89 e8                	mov    eax,ebp
c000345e:	e8 bb fa ff ff       	call   c0002f1e <fill_last_frag>
c0003463:	85 c0                	test   eax,eax
c0003465:	75 b3                	jne    c000341a <create_chain+0x19f>
c0003467:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000346e:	eb 90                	jmp    c0003400 <create_chain+0x185>
c0003470:	83 c4 1c             	add    esp,0x1c
c0003473:	89 d8                	mov    eax,ebx
c0003475:	5b                   	pop    ebx
c0003476:	5e                   	pop    esi
c0003477:	5f                   	pop    edi
c0003478:	5d                   	pop    ebp
c0003479:	c3                   	ret    

c000347a <remove_chain>:
c000347a:	55                   	push   ebp
c000347b:	57                   	push   edi
c000347c:	56                   	push   esi
c000347d:	53                   	push   ebx
c000347e:	83 ec 1c             	sub    esp,0x1c
c0003481:	83 fa 01             	cmp    edx,0x1
c0003484:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003488:	8b 18                	mov    ebx,DWORD PTR [eax]
c000348a:	77 0a                	ja     c0003496 <remove_chain+0x1c>
c000348c:	b8 02 00 00 00       	mov    eax,0x2
c0003491:	e9 24 01 00 00       	jmp    c00035ba <remove_chain+0x140>
c0003496:	89 d6                	mov    esi,edx
c0003498:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c000349b:	76 ef                	jbe    c000348c <remove_chain+0x12>
c000349d:	89 c7                	mov    edi,eax
c000349f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034a4:	75 06                	jne    c00034ac <remove_chain+0x32>
c00034a6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034aa:	eb 54                	jmp    c0003500 <remove_chain+0x86>
c00034ac:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034af:	75 06                	jne    c00034b7 <remove_chain+0x3d>
c00034b1:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034b5:	74 ef                	je     c00034a6 <remove_chain+0x2c>
c00034b7:	83 c9 ff             	or     ecx,0xffffffff
c00034ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034be:	89 d8                	mov    eax,ebx
c00034c0:	e8 c3 f8 ff ff       	call   c0002d88 <put_fat>
c00034c5:	85 c0                	test   eax,eax
c00034c7:	74 dd                	je     c00034a6 <remove_chain+0x2c>
c00034c9:	e9 ec 00 00 00       	jmp    c00035ba <remove_chain+0x140>
c00034ce:	83 f8 01             	cmp    eax,0x1
c00034d1:	74 b9                	je     c000348c <remove_chain+0x12>
c00034d3:	83 f8 ff             	cmp    eax,0xffffffff
c00034d6:	74 6d                	je     c0003545 <remove_chain+0xcb>
c00034d8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034db:	75 6f                	jne    c000354c <remove_chain+0xd2>
c00034dd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00034e0:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00034e3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00034e6:	39 d0                	cmp    eax,edx
c00034e8:	73 08                	jae    c00034f2 <remove_chain+0x78>
c00034ea:	40                   	inc    eax
c00034eb:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00034ef:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00034f2:	8d 4e 01             	lea    ecx,[esi+0x1]
c00034f5:	39 e9                	cmp    ecx,ebp
c00034f7:	75 64                	jne    c000355d <remove_chain+0xe3>
c00034f9:	89 ee                	mov    esi,ebp
c00034fb:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00034fe:	76 0f                	jbe    c000350f <remove_chain+0x95>
c0003500:	89 f2                	mov    edx,esi
c0003502:	89 f8                	mov    eax,edi
c0003504:	e8 84 fa ff ff       	call   c0002f8d <get_fat>
c0003509:	89 c5                	mov    ebp,eax
c000350b:	85 c0                	test   eax,eax
c000350d:	75 bf                	jne    c00034ce <remove_chain+0x54>
c000350f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003512:	0f 85 a0 00 00 00    	jne    c00035b8 <remove_chain+0x13e>
c0003518:	eb 6c                	jmp    c0003586 <remove_chain+0x10c>
c000351a:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000351d:	84 c0                	test   al,al
c000351f:	75 7d                	jne    c000359e <remove_chain+0x124>
c0003521:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003524:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003528:	0f 84 86 00 00 00    	je     c00035b4 <remove_chain+0x13a>
c000352e:	89 da                	mov    edx,ebx
c0003530:	89 f8                	mov    eax,edi
c0003532:	e8 56 fa ff ff       	call   c0002f8d <get_fat>
c0003537:	83 f8 01             	cmp    eax,0x1
c000353a:	0f 86 4c ff ff ff    	jbe    c000348c <remove_chain+0x12>
c0003540:	83 f8 ff             	cmp    eax,0xffffffff
c0003543:	75 4e                	jne    c0003593 <remove_chain+0x119>
c0003545:	b8 01 00 00 00       	mov    eax,0x1
c000354a:	eb 6e                	jmp    c00035ba <remove_chain+0x140>
c000354c:	31 c9                	xor    ecx,ecx
c000354e:	89 f2                	mov    edx,esi
c0003550:	89 d8                	mov    eax,ebx
c0003552:	e8 31 f8 ff ff       	call   c0002d88 <put_fat>
c0003557:	85 c0                	test   eax,eax
c0003559:	74 82                	je     c00034dd <remove_chain+0x63>
c000355b:	eb 5d                	jmp    c00035ba <remove_chain+0x140>
c000355d:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003560:	75 1b                	jne    c000357d <remove_chain+0x103>
c0003562:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003566:	89 d8                	mov    eax,ebx
c0003568:	83 ec 0c             	sub    esp,0xc
c000356b:	6a 00                	push   0x0
c000356d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003571:	e8 5d f7 ff ff       	call   c0002cd3 <change_bitmap>
c0003576:	83 c4 10             	add    esp,0x10
c0003579:	85 c0                	test   eax,eax
c000357b:	75 3d                	jne    c00035ba <remove_chain+0x140>
c000357d:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003581:	e9 73 ff ff ff       	jmp    c00034f9 <remove_chain+0x7f>
c0003586:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000358b:	75 8d                	jne    c000351a <remove_chain+0xa0>
c000358d:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c0003591:	eb 25                	jmp    c00035b8 <remove_chain+0x13e>
c0003593:	8d 53 01             	lea    edx,[ebx+0x1]
c0003596:	89 c3                	mov    ebx,eax
c0003598:	39 c2                	cmp    edx,eax
c000359a:	74 88                	je     c0003524 <remove_chain+0xaa>
c000359c:	eb 1a                	jmp    c00035b8 <remove_chain+0x13e>
c000359e:	3c 03                	cmp    al,0x3
c00035a0:	75 16                	jne    c00035b8 <remove_chain+0x13e>
c00035a2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035a5:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035a9:	77 0d                	ja     c00035b8 <remove_chain+0x13e>
c00035ab:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035ae:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035b2:	72 04                	jb     c00035b8 <remove_chain+0x13e>
c00035b4:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035b8:	31 c0                	xor    eax,eax
c00035ba:	83 c4 1c             	add    esp,0x1c
c00035bd:	5b                   	pop    ebx
c00035be:	5e                   	pop    esi
c00035bf:	5f                   	pop    edi
c00035c0:	5d                   	pop    ebp
c00035c1:	c3                   	ret    

c00035c2 <dir_clear>:
c00035c2:	55                   	push   ebp
c00035c3:	57                   	push   edi
c00035c4:	56                   	push   esi
c00035c5:	89 c6                	mov    esi,eax
c00035c7:	53                   	push   ebx
c00035c8:	83 ec 1c             	sub    esp,0x1c
c00035cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00035cf:	e8 9d ed ff ff       	call   c0002371 <sync_window>
c00035d4:	85 c0                	test   eax,eax
c00035d6:	0f 85 de 00 00 00    	jne    c00036ba <dir_clear+0xf8>
c00035dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00035e0:	89 f0                	mov    eax,esi
c00035e2:	8d 6e 54             	lea    ebp,[esi+0x54]
c00035e5:	e8 d6 e8 ff ff       	call   c0001ec0 <clst2sect>
c00035ea:	b9 00 02 00 00       	mov    ecx,0x200
c00035ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00035f7:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00035fa:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00035fd:	89 e8                	mov    eax,ebp
c00035ff:	31 d2                	xor    edx,edx
c0003601:	e8 b5 e6 ff ff       	call   c0001cbb <mem_set>
c0003606:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000360a:	c1 e3 09             	shl    ebx,0x9
c000360d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003613:	76 1f                	jbe    c0003634 <dir_clear+0x72>
c0003615:	bb 00 80 00 00       	mov    ebx,0x8000
c000361a:	eb 18                	jmp    c0003634 <dir_clear+0x72>
c000361c:	83 ec 0c             	sub    esp,0xc
c000361f:	53                   	push   ebx
c0003620:	e8 6b 50 00 00       	call   c0008690 <ff_memalloc>
c0003625:	83 c4 10             	add    esp,0x10
c0003628:	89 c7                	mov    edi,eax
c000362a:	85 c0                	test   eax,eax
c000362c:	0f 85 8f 00 00 00    	jne    c00036c1 <dir_clear+0xff>
c0003632:	d1 eb                	shr    ebx,1
c0003634:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000363a:	77 e0                	ja     c000361c <dir_clear+0x5a>
c000363c:	31 db                	xor    ebx,ebx
c000363e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003642:	39 d8                	cmp    eax,ebx
c0003644:	76 66                	jbe    c00036ac <dir_clear+0xea>
c0003646:	83 ec 0c             	sub    esp,0xc
c0003649:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000364d:	6a 01                	push   0x1
c000364f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003653:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003657:	55                   	push   ebp
c0003658:	50                   	push   eax
c0003659:	e8 94 e5 ff ff       	call   c0001bf2 <disk_write>
c000365e:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003663:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003668:	83 c4 20             	add    esp,0x20
c000366b:	85 c0                	test   eax,eax
c000366d:	75 3d                	jne    c00036ac <dir_clear+0xea>
c000366f:	43                   	inc    ebx
c0003670:	eb cc                	jmp    c000363e <dir_clear+0x7c>
c0003672:	83 ec 0c             	sub    esp,0xc
c0003675:	31 d2                	xor    edx,edx
c0003677:	55                   	push   ebp
c0003678:	89 d8                	mov    eax,ebx
c000367a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000367e:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0003682:	52                   	push   edx
c0003683:	50                   	push   eax
c0003684:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003688:	57                   	push   edi
c0003689:	50                   	push   eax
c000368a:	e8 63 e5 ff ff       	call   c0001bf2 <disk_write>
c000368f:	83 c4 20             	add    esp,0x20
c0003692:	85 c0                	test   eax,eax
c0003694:	75 0a                	jne    c00036a0 <dir_clear+0xde>
c0003696:	01 eb                	add    ebx,ebp
c0003698:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000369c:	39 d8                	cmp    eax,ebx
c000369e:	77 d2                	ja     c0003672 <dir_clear+0xb0>
c00036a0:	83 ec 0c             	sub    esp,0xc
c00036a3:	57                   	push   edi
c00036a4:	e8 fd 4f 00 00       	call   c00086a6 <ff_memfree>
c00036a9:	83 c4 10             	add    esp,0x10
c00036ac:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036b0:	39 d8                	cmp    eax,ebx
c00036b2:	0f 95 c0             	setne  al
c00036b5:	0f b6 c0             	movzx  eax,al
c00036b8:	eb 19                	jmp    c00036d3 <dir_clear+0x111>
c00036ba:	b8 01 00 00 00       	mov    eax,0x1
c00036bf:	eb 12                	jmp    c00036d3 <dir_clear+0x111>
c00036c1:	89 d9                	mov    ecx,ebx
c00036c3:	31 d2                	xor    edx,edx
c00036c5:	c1 eb 09             	shr    ebx,0x9
c00036c8:	e8 ee e5 ff ff       	call   c0001cbb <mem_set>
c00036cd:	89 dd                	mov    ebp,ebx
c00036cf:	31 db                	xor    ebx,ebx
c00036d1:	eb c5                	jmp    c0003698 <dir_clear+0xd6>
c00036d3:	83 c4 1c             	add    esp,0x1c
c00036d6:	5b                   	pop    ebx
c00036d7:	5e                   	pop    esi
c00036d8:	5f                   	pop    edi
c00036d9:	5d                   	pop    ebp
c00036da:	c3                   	ret    

c00036db <dir_next>:
c00036db:	55                   	push   ebp
c00036dc:	57                   	push   edi
c00036dd:	56                   	push   esi
c00036de:	53                   	push   ebx
c00036df:	89 c3                	mov    ebx,eax
c00036e1:	83 ec 1c             	sub    esp,0x1c
c00036e4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00036e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00036ea:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00036ed:	8d 78 20             	lea    edi,[eax+0x20]
c00036f0:	31 c0                	xor    eax,eax
c00036f2:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00036f6:	0f 94 c0             	sete   al
c00036f9:	48                   	dec    eax
c00036fa:	25 00 00 20 f0       	and    eax,0xf0200000
c00036ff:	05 00 00 00 10       	add    eax,0x10000000
c0003704:	39 f8                	cmp    eax,edi
c0003706:	77 0e                	ja     c0003716 <dir_next+0x3b>
c0003708:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000370f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003716:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003719:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371c:	b8 04 00 00 00       	mov    eax,0x4
c0003721:	89 ce                	mov    esi,ecx
c0003723:	09 d6                	or     esi,edx
c0003725:	0f 84 da 00 00 00    	je     c0003805 <dir_next+0x12a>
c000372b:	89 f8                	mov    eax,edi
c000372d:	25 ff 01 00 00       	and    eax,0x1ff
c0003732:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003736:	0f 85 b9 00 00 00    	jne    c00037f5 <dir_next+0x11a>
c000373c:	83 c2 01             	add    edx,0x1
c000373f:	83 d1 00             	adc    ecx,0x0
c0003742:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003745:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003748:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000374b:	85 d2                	test   edx,edx
c000374d:	75 29                	jne    c0003778 <dir_next+0x9d>
c000374f:	89 fa                	mov    edx,edi
c0003751:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003755:	c1 ea 05             	shr    edx,0x5
c0003758:	39 c2                	cmp    edx,eax
c000375a:	0f 82 95 00 00 00    	jb     c00037f5 <dir_next+0x11a>
c0003760:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003767:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000376e:	b8 04 00 00 00       	mov    eax,0x4
c0003773:	e9 8d 00 00 00       	jmp    c0003805 <dir_next+0x12a>
c0003778:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000377c:	89 f9                	mov    ecx,edi
c000377e:	48                   	dec    eax
c000377f:	c1 e9 09             	shr    ecx,0x9
c0003782:	85 c8                	test   eax,ecx
c0003784:	75 6f                	jne    c00037f5 <dir_next+0x11a>
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 00 f8 ff ff       	call   c0002f8d <get_fat>
c000378d:	89 c6                	mov    esi,eax
c000378f:	83 f8 01             	cmp    eax,0x1
c0003792:	77 07                	ja     c000379b <dir_next+0xc0>
c0003794:	b8 02 00 00 00       	mov    eax,0x2
c0003799:	eb 6a                	jmp    c0003805 <dir_next+0x12a>
c000379b:	83 f8 ff             	cmp    eax,0xffffffff
c000379e:	75 07                	jne    c00037a7 <dir_next+0xcc>
c00037a0:	b8 01 00 00 00       	mov    eax,0x1
c00037a5:	eb 5e                	jmp    c0003805 <dir_next+0x12a>
c00037a7:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037aa:	77 37                	ja     c00037e3 <dir_next+0x108>
c00037ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037b1:	74 ad                	je     c0003760 <dir_next+0x85>
c00037b3:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037b6:	89 d8                	mov    eax,ebx
c00037b8:	e8 be fa ff ff       	call   c000327b <create_chain>
c00037bd:	89 c6                	mov    esi,eax
c00037bf:	b8 07 00 00 00       	mov    eax,0x7
c00037c4:	85 f6                	test   esi,esi
c00037c6:	74 3d                	je     c0003805 <dir_next+0x12a>
c00037c8:	83 fe 01             	cmp    esi,0x1
c00037cb:	74 c7                	je     c0003794 <dir_next+0xb9>
c00037cd:	83 fe ff             	cmp    esi,0xffffffff
c00037d0:	74 ce                	je     c00037a0 <dir_next+0xc5>
c00037d2:	89 f2                	mov    edx,esi
c00037d4:	89 e8                	mov    eax,ebp
c00037d6:	e8 e7 fd ff ff       	call   c00035c2 <dir_clear>
c00037db:	85 c0                	test   eax,eax
c00037dd:	75 c1                	jne    c00037a0 <dir_next+0xc5>
c00037df:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00037e3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00037e6:	89 f2                	mov    edx,esi
c00037e8:	89 e8                	mov    eax,ebp
c00037ea:	e8 d1 e6 ff ff       	call   c0001ec0 <clst2sect>
c00037ef:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00037f2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00037f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037f9:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00037fc:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003800:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003803:	31 c0                	xor    eax,eax
c0003805:	83 c4 1c             	add    esp,0x1c
c0003808:	5b                   	pop    ebx
c0003809:	5e                   	pop    esi
c000380a:	5f                   	pop    edi
c000380b:	5d                   	pop    ebp
c000380c:	c3                   	ret    

c000380d <load_xdir>:
c000380d:	55                   	push   ebp
c000380e:	57                   	push   edi
c000380f:	56                   	push   esi
c0003810:	89 c6                	mov    esi,eax
c0003812:	53                   	push   ebx
c0003813:	83 ec 1c             	sub    esp,0x1c
c0003816:	8b 00                	mov    eax,DWORD PTR [eax]
c0003818:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000381b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000381e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003821:	e8 df eb ff ff       	call   c0002405 <move_window>
c0003826:	89 c3                	mov    ebx,eax
c0003828:	85 c0                	test   eax,eax
c000382a:	0f 85 0c 01 00 00    	jne    c000393c <load_xdir+0x12f>
c0003830:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003833:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003836:	0f 85 fb 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c000383c:	89 f8                	mov    eax,edi
c000383e:	b9 20 00 00 00       	mov    ecx,0x20
c0003843:	e8 5e e4 ff ff       	call   c0001ca6 <mem_cpy>
c0003848:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000384c:	40                   	inc    eax
c000384d:	c1 e0 05             	shl    eax,0x5
c0003850:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003854:	83 e8 60             	sub    eax,0x60
c0003857:	3d 00 02 00 00       	cmp    eax,0x200
c000385c:	0f 87 d5 00 00 00    	ja     c0003937 <load_xdir+0x12a>
c0003862:	31 d2                	xor    edx,edx
c0003864:	89 f0                	mov    eax,esi
c0003866:	e8 70 fe ff ff       	call   c00036db <dir_next>
c000386b:	89 c3                	mov    ebx,eax
c000386d:	83 f8 04             	cmp    eax,0x4
c0003870:	0f 84 c1 00 00 00    	je     c0003937 <load_xdir+0x12a>
c0003876:	85 c0                	test   eax,eax
c0003878:	0f 85 be 00 00 00    	jne    c000393c <load_xdir+0x12f>
c000387e:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003881:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003884:	8b 06                	mov    eax,DWORD PTR [esi]
c0003886:	e8 7a eb ff ff       	call   c0002405 <move_window>
c000388b:	89 c3                	mov    ebx,eax
c000388d:	85 c0                	test   eax,eax
c000388f:	0f 85 a7 00 00 00    	jne    c000393c <load_xdir+0x12f>
c0003895:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003898:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c000389b:	0f 85 96 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c00038a1:	8d 47 20             	lea    eax,[edi+0x20]
c00038a4:	b9 20 00 00 00       	mov    ecx,0x20
c00038a9:	e8 f8 e3 ff ff       	call   c0001ca6 <mem_cpy>
c00038ae:	31 d2                	xor    edx,edx
c00038b0:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038b4:	b9 0f 00 00 00       	mov    ecx,0xf
c00038b9:	83 c0 2c             	add    eax,0x2c
c00038bc:	f7 f1                	div    ecx
c00038be:	c1 e0 05             	shl    eax,0x5
c00038c1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038c5:	77 70                	ja     c0003937 <load_xdir+0x12a>
c00038c7:	bd 40 00 00 00       	mov    ebp,0x40
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	89 f0                	mov    eax,esi
c00038d0:	e8 06 fe ff ff       	call   c00036db <dir_next>
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 f8 04             	cmp    eax,0x4
c00038da:	74 5b                	je     c0003937 <load_xdir+0x12a>
c00038dc:	85 c0                	test   eax,eax
c00038de:	75 5c                	jne    c000393c <load_xdir+0x12f>
c00038e0:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038e3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038e6:	8b 06                	mov    eax,DWORD PTR [esi]
c00038e8:	e8 18 eb ff ff       	call   c0002405 <move_window>
c00038ed:	89 c3                	mov    ebx,eax
c00038ef:	85 c0                	test   eax,eax
c00038f1:	75 49                	jne    c000393c <load_xdir+0x12f>
c00038f3:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038f6:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00038f9:	75 3c                	jne    c0003937 <load_xdir+0x12a>
c00038fb:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003901:	77 0d                	ja     c0003910 <load_xdir+0x103>
c0003903:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003906:	b9 20 00 00 00       	mov    ecx,0x20
c000390b:	e8 96 e3 ff ff       	call   c0001ca6 <mem_cpy>
c0003910:	83 c5 20             	add    ebp,0x20
c0003913:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003917:	77 b3                	ja     c00038cc <load_xdir+0xbf>
c0003919:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000391f:	77 1b                	ja     c000393c <load_xdir+0x12f>
c0003921:	89 f8                	mov    eax,edi
c0003923:	e8 cd e7 ff ff       	call   c00020f5 <xdir_sum>
c0003928:	89 c1                	mov    ecx,eax
c000392a:	8d 47 02             	lea    eax,[edi+0x2]
c000392d:	e8 f5 e2 ff ff       	call   c0001c27 <ld_word>
c0003932:	66 39 c1             	cmp    cx,ax
c0003935:	74 05                	je     c000393c <load_xdir+0x12f>
c0003937:	bb 02 00 00 00       	mov    ebx,0x2
c000393c:	83 c4 1c             	add    esp,0x1c
c000393f:	89 d8                	mov    eax,ebx
c0003941:	5b                   	pop    ebx
c0003942:	5e                   	pop    esi
c0003943:	5f                   	pop    edi
c0003944:	5d                   	pop    ebp
c0003945:	c3                   	ret    

c0003946 <load_obj_xdir>:
c0003946:	53                   	push   ebx
c0003947:	89 c3                	mov    ebx,eax
c0003949:	83 ec 08             	sub    esp,0x8
c000394c:	8b 02                	mov    eax,DWORD PTR [edx]
c000394e:	89 03                	mov    DWORD PTR [ebx],eax
c0003950:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003953:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003956:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003959:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000395c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000395f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003966:	30 c0                	xor    al,al
c0003968:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000396f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003972:	89 d8                	mov    eax,ebx
c0003974:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003977:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000397a:	e8 04 f8 ff ff       	call   c0003183 <dir_sdi>
c000397f:	85 c0                	test   eax,eax
c0003981:	75 0b                	jne    c000398e <load_obj_xdir+0x48>
c0003983:	89 d8                	mov    eax,ebx
c0003985:	83 c4 08             	add    esp,0x8
c0003988:	5b                   	pop    ebx
c0003989:	e9 7f fe ff ff       	jmp    c000380d <load_xdir>
c000398e:	83 c4 08             	add    esp,0x8
c0003991:	5b                   	pop    ebx
c0003992:	c3                   	ret    

c0003993 <dir_read>:
c0003993:	55                   	push   ebp
c0003994:	bd 04 00 00 00       	mov    ebp,0x4
c0003999:	57                   	push   edi
c000399a:	56                   	push   esi
c000399b:	be ff ff ff ff       	mov    esi,0xffffffff
c00039a0:	53                   	push   ebx
c00039a1:	89 c3                	mov    ebx,eax
c00039a3:	83 ec 1c             	sub    esp,0x1c
c00039a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039aa:	8b 38                	mov    edi,DWORD PTR [eax]
c00039ac:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039b1:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039b4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039b7:	89 c8                	mov    eax,ecx
c00039b9:	09 d0                	or     eax,edx
c00039bb:	0f 84 25 01 00 00    	je     c0003ae6 <dir_read+0x153>
c00039c1:	89 f8                	mov    eax,edi
c00039c3:	e8 3d ea ff ff       	call   c0002405 <move_window>
c00039c8:	89 c5                	mov    ebp,eax
c00039ca:	85 c0                	test   eax,eax
c00039cc:	0f 85 23 01 00 00    	jne    c0003af5 <dir_read+0x162>
c00039d2:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039d5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00039d7:	84 c9                	test   cl,cl
c00039d9:	0f 84 11 01 00 00    	je     c0003af0 <dir_read+0x15d>
c00039df:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00039e2:	75 48                	jne    c0003a2c <dir_read+0x99>
c00039e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00039e9:	74 10                	je     c00039fb <dir_read+0x68>
c00039eb:	80 f9 83             	cmp    cl,0x83
c00039ee:	0f 85 dd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c00039f4:	31 ed                	xor    ebp,ebp
c00039f6:	e9 08 01 00 00       	jmp    c0003b03 <dir_read+0x170>
c00039fb:	80 f9 85             	cmp    cl,0x85
c00039fe:	0f 85 cd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c0003a04:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a07:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a0a:	89 d8                	mov    eax,ebx
c0003a0c:	e8 fc fd ff ff       	call   c000380d <load_xdir>
c0003a11:	89 c5                	mov    ebp,eax
c0003a13:	85 c0                	test   eax,eax
c0003a15:	0f 85 da 00 00 00    	jne    c0003af5 <dir_read+0x162>
c0003a1b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a1e:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a21:	83 e0 3f             	and    eax,0x3f
c0003a24:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a27:	e9 d7 00 00 00       	jmp    c0003b03 <dir_read+0x170>
c0003a2c:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a2f:	83 e0 3f             	and    eax,0x3f
c0003a32:	80 f9 2e             	cmp    cl,0x2e
c0003a35:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a39:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a3c:	0f 84 8a 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a42:	80 f9 e5             	cmp    cl,0xe5
c0003a45:	0f 84 81 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a4f:	83 e0 1f             	and    eax,0x1f
c0003a52:	83 f8 08             	cmp    eax,0x8
c0003a55:	0f 94 c0             	sete   al
c0003a58:	0f b6 c0             	movzx  eax,al
c0003a5b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a5f:	75 6b                	jne    c0003acc <dir_read+0x139>
c0003a61:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003a66:	75 44                	jne    c0003aac <dir_read+0x119>
c0003a68:	f6 c1 40             	test   cl,0x40
c0003a6b:	74 12                	je     c0003a7f <dir_read+0xec>
c0003a6d:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003a70:	83 e1 bf             	and    ecx,0xffffffbf
c0003a73:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003a77:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a7a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a7d:	eb 06                	jmp    c0003a85 <dir_read+0xf2>
c0003a7f:	89 f0                	mov    eax,esi
c0003a81:	38 c8                	cmp    al,cl
c0003a83:	75 47                	jne    c0003acc <dir_read+0x139>
c0003a85:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003a89:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a8e:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003a91:	75 3e                	jne    c0003ad1 <dir_read+0x13e>
c0003a93:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003a97:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a9a:	e8 8a e4 ff ff       	call   c0001f29 <pick_lfn>
c0003a9f:	85 c0                	test   eax,eax
c0003aa1:	74 2e                	je     c0003ad1 <dir_read+0x13e>
c0003aa3:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003aa7:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003aaa:	eb 25                	jmp    c0003ad1 <dir_read+0x13e>
c0003aac:	89 f0                	mov    eax,esi
c0003aae:	84 c0                	test   al,al
c0003ab0:	75 11                	jne    c0003ac3 <dir_read+0x130>
c0003ab2:	89 d0                	mov    eax,edx
c0003ab4:	e8 2a e6 ff ff       	call   c00020e3 <sum_sfn>
c0003ab9:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003abd:	0f 84 31 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003ac3:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003aca:	eb 37                	jmp    c0003b03 <dir_read+0x170>
c0003acc:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ad1:	31 d2                	xor    edx,edx
c0003ad3:	89 d8                	mov    eax,ebx
c0003ad5:	e8 01 fc ff ff       	call   c00036db <dir_next>
c0003ada:	89 c5                	mov    ebp,eax
c0003adc:	85 c0                	test   eax,eax
c0003ade:	0f 84 cd fe ff ff    	je     c00039b1 <dir_read+0x1e>
c0003ae4:	eb 0f                	jmp    c0003af5 <dir_read+0x162>
c0003ae6:	85 ed                	test   ebp,ebp
c0003ae8:	0f 84 06 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003aee:	eb 05                	jmp    c0003af5 <dir_read+0x162>
c0003af0:	bd 04 00 00 00       	mov    ebp,0x4
c0003af5:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003afc:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b03:	83 c4 1c             	add    esp,0x1c
c0003b06:	89 e8                	mov    eax,ebp
c0003b08:	5b                   	pop    ebx
c0003b09:	5e                   	pop    esi
c0003b0a:	5f                   	pop    edi
c0003b0b:	5d                   	pop    ebp
c0003b0c:	c3                   	ret    

c0003b0d <dir_alloc>:
c0003b0d:	55                   	push   ebp
c0003b0e:	89 d5                	mov    ebp,edx
c0003b10:	57                   	push   edi
c0003b11:	31 d2                	xor    edx,edx
c0003b13:	56                   	push   esi
c0003b14:	53                   	push   ebx
c0003b15:	89 c3                	mov    ebx,eax
c0003b17:	83 ec 0c             	sub    esp,0xc
c0003b1a:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b1c:	e8 62 f6 ff ff       	call   c0003183 <dir_sdi>
c0003b21:	85 c0                	test   eax,eax
c0003b23:	75 4e                	jne    c0003b73 <dir_alloc+0x66>
c0003b25:	31 f6                	xor    esi,esi
c0003b27:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b2a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b2d:	89 f8                	mov    eax,edi
c0003b2f:	e8 d1 e8 ff ff       	call   c0002405 <move_window>
c0003b34:	85 c0                	test   eax,eax
c0003b36:	75 3b                	jne    c0003b73 <dir_alloc+0x66>
c0003b38:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b3b:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b3e:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b40:	75 07                	jne    c0003b49 <dir_alloc+0x3c>
c0003b42:	f7 d2                	not    edx
c0003b44:	c0 ea 07             	shr    dl,0x7
c0003b47:	eb 0d                	jmp    c0003b56 <dir_alloc+0x49>
c0003b49:	84 d2                	test   dl,dl
c0003b4b:	0f 94 c1             	sete   cl
c0003b4e:	80 fa e5             	cmp    dl,0xe5
c0003b51:	0f 94 c2             	sete   dl
c0003b54:	09 ca                	or     edx,ecx
c0003b56:	84 d2                	test   dl,dl
c0003b58:	74 07                	je     c0003b61 <dir_alloc+0x54>
c0003b5a:	46                   	inc    esi
c0003b5b:	39 ee                	cmp    esi,ebp
c0003b5d:	75 04                	jne    c0003b63 <dir_alloc+0x56>
c0003b5f:	eb 1c                	jmp    c0003b7d <dir_alloc+0x70>
c0003b61:	31 f6                	xor    esi,esi
c0003b63:	ba 01 00 00 00       	mov    edx,0x1
c0003b68:	89 d8                	mov    eax,ebx
c0003b6a:	e8 6c fb ff ff       	call   c00036db <dir_next>
c0003b6f:	85 c0                	test   eax,eax
c0003b71:	74 b4                	je     c0003b27 <dir_alloc+0x1a>
c0003b73:	83 f8 04             	cmp    eax,0x4
c0003b76:	75 05                	jne    c0003b7d <dir_alloc+0x70>
c0003b78:	b8 07 00 00 00       	mov    eax,0x7
c0003b7d:	83 c4 0c             	add    esp,0xc
c0003b80:	5b                   	pop    ebx
c0003b81:	5e                   	pop    esi
c0003b82:	5f                   	pop    edi
c0003b83:	5d                   	pop    ebp
c0003b84:	c3                   	ret    

c0003b85 <store_xdir>:
c0003b85:	55                   	push   ebp
c0003b86:	57                   	push   edi
c0003b87:	89 c7                	mov    edi,eax
c0003b89:	56                   	push   esi
c0003b8a:	53                   	push   ebx
c0003b8b:	83 ec 0c             	sub    esp,0xc
c0003b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0003b90:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003b93:	89 e8                	mov    eax,ebp
c0003b95:	e8 5b e5 ff ff       	call   c00020f5 <xdir_sum>
c0003b9a:	0f b7 d0             	movzx  edx,ax
c0003b9d:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ba0:	e8 f4 e0 ff ff       	call   c0001c99 <st_word>
c0003ba5:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003ba9:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bac:	89 f8                	mov    eax,edi
c0003bae:	e8 d0 f5 ff ff       	call   c0003183 <dir_sdi>
c0003bb3:	89 c6                	mov    esi,eax
c0003bb5:	85 f6                	test   esi,esi
c0003bb7:	75 3d                	jne    c0003bf6 <store_xdir+0x71>
c0003bb9:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bbc:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bbf:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bc1:	e8 3f e8 ff ff       	call   c0002405 <move_window>
c0003bc6:	89 c6                	mov    esi,eax
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	75 2a                	jne    c0003bf6 <store_xdir+0x71>
c0003bcc:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0003bd4:	89 ea                	mov    edx,ebp
c0003bd6:	e8 cb e0 ff ff       	call   c0001ca6 <mem_cpy>
c0003bdb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bdd:	85 db                	test   ebx,ebx
c0003bdf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003be3:	74 11                	je     c0003bf6 <store_xdir+0x71>
c0003be5:	31 d2                	xor    edx,edx
c0003be7:	89 f8                	mov    eax,edi
c0003be9:	83 c5 20             	add    ebp,0x20
c0003bec:	e8 ea fa ff ff       	call   c00036db <dir_next>
c0003bf1:	4b                   	dec    ebx
c0003bf2:	89 c6                	mov    esi,eax
c0003bf4:	eb bf                	jmp    c0003bb5 <store_xdir+0x30>
c0003bf6:	89 f0                	mov    eax,esi
c0003bf8:	83 fe 02             	cmp    esi,0x2
c0003bfb:	76 05                	jbe    c0003c02 <store_xdir+0x7d>
c0003bfd:	b8 02 00 00 00       	mov    eax,0x2
c0003c02:	83 c4 0c             	add    esp,0xc
c0003c05:	5b                   	pop    ebx
c0003c06:	5e                   	pop    esi
c0003c07:	5f                   	pop    edi
c0003c08:	5d                   	pop    ebp
c0003c09:	c3                   	ret    

c0003c0a <dir_remove>:
c0003c0a:	57                   	push   edi
c0003c0b:	56                   	push   esi
c0003c0c:	53                   	push   ebx
c0003c0d:	89 c3                	mov    ebx,eax
c0003c0f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c12:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c14:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c17:	83 fa ff             	cmp    edx,0xffffffff
c0003c1a:	74 09                	je     c0003c25 <dir_remove+0x1b>
c0003c1c:	e8 62 f5 ff ff       	call   c0003183 <dir_sdi>
c0003c21:	85 c0                	test   eax,eax
c0003c23:	75 41                	jne    c0003c66 <dir_remove+0x5c>
c0003c25:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c28:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c2b:	89 f0                	mov    eax,esi
c0003c2d:	e8 d3 e7 ff ff       	call   c0002405 <move_window>
c0003c32:	85 c0                	test   eax,eax
c0003c34:	75 26                	jne    c0003c5c <dir_remove+0x52>
c0003c36:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c39:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c3c:	75 05                	jne    c0003c43 <dir_remove+0x39>
c0003c3e:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c41:	eb 03                	jmp    c0003c46 <dir_remove+0x3c>
c0003c43:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c46:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c4a:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c4d:	73 17                	jae    c0003c66 <dir_remove+0x5c>
c0003c4f:	31 d2                	xor    edx,edx
c0003c51:	89 d8                	mov    eax,ebx
c0003c53:	e8 83 fa ff ff       	call   c00036db <dir_next>
c0003c58:	85 c0                	test   eax,eax
c0003c5a:	74 c9                	je     c0003c25 <dir_remove+0x1b>
c0003c5c:	83 f8 04             	cmp    eax,0x4
c0003c5f:	75 05                	jne    c0003c66 <dir_remove+0x5c>
c0003c61:	b8 02 00 00 00       	mov    eax,0x2
c0003c66:	5b                   	pop    ebx
c0003c67:	5e                   	pop    esi
c0003c68:	5f                   	pop    edi
c0003c69:	c3                   	ret    

c0003c6a <create_name>:
c0003c6a:	55                   	push   ebp
c0003c6b:	89 d5                	mov    ebp,edx
c0003c6d:	57                   	push   edi
c0003c6e:	89 c7                	mov    edi,eax
c0003c70:	56                   	push   esi
c0003c71:	31 f6                	xor    esi,esi
c0003c73:	53                   	push   ebx
c0003c74:	83 ec 3c             	sub    esp,0x3c
c0003c77:	8b 02                	mov    eax,DWORD PTR [edx]
c0003c79:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c7d:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003c82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003c86:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003c8a:	e8 72 e0 ff ff       	call   c0001d01 <tchar2uni>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	83 f8 ff             	cmp    eax,0xffffffff
c0003c94:	75 0a                	jne    c0003ca0 <create_name+0x36>
c0003c96:	b8 06 00 00 00       	mov    eax,0x6
c0003c9b:	e9 9e 02 00 00       	jmp    c0003f3e <create_name+0x2d4>
c0003ca0:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ca5:	76 0c                	jbe    c0003cb3 <create_name+0x49>
c0003ca7:	c1 e8 10             	shr    eax,0x10
c0003caa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cae:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cb2:	46                   	inc    esi
c0003cb3:	66 83 fb 1f          	cmp    bx,0x1f
c0003cb7:	76 4f                	jbe    c0003d08 <create_name+0x9e>
c0003cb9:	66 83 fb 5c          	cmp    bx,0x5c
c0003cbd:	74 35                	je     c0003cf4 <create_name+0x8a>
c0003cbf:	66 83 fb 2f          	cmp    bx,0x2f
c0003cc3:	74 2f                	je     c0003cf4 <create_name+0x8a>
c0003cc5:	66 83 fb 7f          	cmp    bx,0x7f
c0003cc9:	77 11                	ja     c0003cdc <create_name+0x72>
c0003ccb:	0f b7 d3             	movzx  edx,bx
c0003cce:	b8 f2 96 02 c0       	mov    eax,0xc00296f2
c0003cd3:	e8 11 e0 ff ff       	call   c0001ce9 <chk_chr>
c0003cd8:	85 c0                	test   eax,eax
c0003cda:	75 ba                	jne    c0003c96 <create_name+0x2c>
c0003cdc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003ce2:	77 b2                	ja     c0003c96 <create_name+0x2c>
c0003ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ce8:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003cec:	46                   	inc    esi
c0003ced:	eb 97                	jmp    c0003c86 <create_name+0x1c>
c0003cef:	40                   	inc    eax
c0003cf0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cf4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003cf8:	8a 10                	mov    dl,BYTE PTR [eax]
c0003cfa:	80 fa 2f             	cmp    dl,0x2f
c0003cfd:	74 f0                	je     c0003cef <create_name+0x85>
c0003cff:	80 fa 5c             	cmp    dl,0x5c
c0003d02:	74 eb                	je     c0003cef <create_name+0x85>
c0003d04:	31 db                	xor    ebx,ebx
c0003d06:	eb 02                	jmp    c0003d0a <create_name+0xa0>
c0003d08:	b3 04                	mov    bl,0x4
c0003d0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d0e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d11:	85 f6                	test   esi,esi
c0003d13:	74 18                	je     c0003d2d <create_name+0xc3>
c0003d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d19:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d1e:	66 83 f8 20          	cmp    ax,0x20
c0003d22:	74 06                	je     c0003d2a <create_name+0xc0>
c0003d24:	66 83 f8 2e          	cmp    ax,0x2e
c0003d28:	75 03                	jne    c0003d2d <create_name+0xc3>
c0003d2a:	4e                   	dec    esi
c0003d2b:	eb e4                	jmp    c0003d11 <create_name+0xa7>
c0003d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d31:	31 ed                	xor    ebp,ebp
c0003d33:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d39:	85 f6                	test   esi,esi
c0003d3b:	0f 84 55 ff ff ff    	je     c0003c96 <create_name+0x2c>
c0003d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d45:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d48:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d4c:	66 83 f8 20          	cmp    ax,0x20
c0003d50:	75 04                	jne    c0003d56 <create_name+0xec>
c0003d52:	89 d5                	mov    ebp,edx
c0003d54:	eb eb                	jmp    c0003d41 <create_name+0xd7>
c0003d56:	85 ed                	test   ebp,ebp
c0003d58:	75 06                	jne    c0003d60 <create_name+0xf6>
c0003d5a:	66 83 f8 2e          	cmp    ax,0x2e
c0003d5e:	75 08                	jne    c0003d68 <create_name+0xfe>
c0003d60:	83 cb 03             	or     ebx,0x3
c0003d63:	eb 03                	jmp    c0003d68 <create_name+0xfe>
c0003d65:	4e                   	dec    esi
c0003d66:	74 0c                	je     c0003d74 <create_name+0x10a>
c0003d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6c:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003d72:	75 f1                	jne    c0003d65 <create_name+0xfb>
c0003d74:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d79:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003d7c:	ba 20 00 00 00       	mov    edx,0x20
c0003d81:	e8 35 df ff ff       	call   c0001cbb <mem_set>
c0003d86:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003d8e:	31 c9                	xor    ecx,ecx
c0003d90:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003d95:	8d 45 01             	lea    eax,[ebp+0x1]
c0003d98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da0:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	0f 84 30 01 00 00    	je     c0003edd <create_name+0x273>
c0003dad:	66 83 fd 20          	cmp    bp,0x20
c0003db1:	74 10                	je     c0003dc3 <create_name+0x159>
c0003db3:	66 83 fd 2e          	cmp    bp,0x2e
c0003db7:	75 13                	jne    c0003dcc <create_name+0x162>
c0003db9:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dbd:	0f 84 6b 01 00 00    	je     c0003f2e <create_name+0x2c4>
c0003dc3:	83 cb 03             	or     ebx,0x3
c0003dc6:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003dca:	eb c9                	jmp    c0003d95 <create_name+0x12b>
c0003dcc:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003dd0:	73 0b                	jae    c0003ddd <create_name+0x173>
c0003dd2:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dd6:	75 47                	jne    c0003e1f <create_name+0x1b5>
c0003dd8:	e9 51 01 00 00       	jmp    c0003f2e <create_name+0x2c4>
c0003ddd:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003de2:	75 10                	jne    c0003df4 <create_name+0x18a>
c0003de4:	83 cb 03             	or     ebx,0x3
c0003de7:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003def:	e9 e9 00 00 00       	jmp    c0003edd <create_name+0x273>
c0003df4:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df8:	74 0d                	je     c0003e07 <create_name+0x19d>
c0003dfa:	83 cb 03             	or     ebx,0x3
c0003dfd:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e01:	0f 87 d6 00 00 00    	ja     c0003edd <create_name+0x273>
c0003e07:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e0c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e10:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e18:	b9 08 00 00 00       	mov    ecx,0x8
c0003e1d:	eb a7                	jmp    c0003dc6 <create_name+0x15c>
c0003e1f:	66 83 fd 7f          	cmp    bp,0x7f
c0003e23:	76 68                	jbe    c0003e8d <create_name+0x223>
c0003e25:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e29:	88 da                	mov    dl,bl
c0003e2b:	83 ca 02             	or     edx,0x2
c0003e2e:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e32:	50                   	push   eax
c0003e33:	50                   	push   eax
c0003e34:	68 b5 01 00 00       	push   0x1b5
c0003e39:	55                   	push   ebp
c0003e3a:	e8 7e 48 00 00       	call   c00086bd <ff_uni2oem>
c0003e3f:	83 c4 10             	add    esp,0x10
c0003e42:	89 c5                	mov    ebp,eax
c0003e44:	a8 80                	test   al,0x80
c0003e46:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e4a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e4e:	74 0c                	je     c0003e5c <create_name+0x1f2>
c0003e50:	83 e5 7f             	and    ebp,0x7f
c0003e53:	0f b6 ad 40 96 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd69c0]
c0003e5a:	eb 2a                	jmp    c0003e86 <create_name+0x21c>
c0003e5c:	66 3d ff 00          	cmp    ax,0xff
c0003e60:	76 24                	jbe    c0003e86 <create_name+0x21c>
c0003e62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e66:	48                   	dec    eax
c0003e67:	39 c8                	cmp    eax,ecx
c0003e69:	77 0c                	ja     c0003e77 <create_name+0x20d>
c0003e6b:	83 cb 03             	or     ebx,0x3
c0003e6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003e72:	e9 4f ff ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003e77:	89 e8                	mov    eax,ebp
c0003e79:	88 d3                	mov    bl,dl
c0003e7b:	66 c1 e8 08          	shr    ax,0x8
c0003e7f:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e83:	41                   	inc    ecx
c0003e84:	eb 4b                	jmp    c0003ed1 <create_name+0x267>
c0003e86:	88 d3                	mov    bl,dl
c0003e88:	66 85 ed             	test   bp,bp
c0003e8b:	74 19                	je     c0003ea6 <create_name+0x23c>
c0003e8d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003e91:	0f b7 d5             	movzx  edx,bp
c0003e94:	b8 fb 96 02 c0       	mov    eax,0xc00296fb
c0003e99:	e8 4b de ff ff       	call   c0001ce9 <chk_chr>
c0003e9e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ea2:	85 c0                	test   eax,eax
c0003ea4:	74 0a                	je     c0003eb0 <create_name+0x246>
c0003ea6:	83 cb 03             	or     ebx,0x3
c0003ea9:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003eae:	eb 21                	jmp    c0003ed1 <create_name+0x267>
c0003eb0:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eb3:	66 83 f8 19          	cmp    ax,0x19
c0003eb7:	77 07                	ja     c0003ec0 <create_name+0x256>
c0003eb9:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ebe:	eb 11                	jmp    c0003ed1 <create_name+0x267>
c0003ec0:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ec3:	66 83 f8 19          	cmp    ax,0x19
c0003ec7:	77 08                	ja     c0003ed1 <create_name+0x267>
c0003ec9:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003ece:	83 ed 20             	sub    ebp,0x20
c0003ed1:	89 e8                	mov    eax,ebp
c0003ed3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ed7:	41                   	inc    ecx
c0003ed8:	e9 e9 fe ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003edd:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ee1:	75 04                	jne    c0003ee7 <create_name+0x27d>
c0003ee3:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003ee7:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003eec:	75 05                	jne    c0003ef3 <create_name+0x289>
c0003eee:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003ef3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ef7:	83 e0 0c             	and    eax,0xc
c0003efa:	3c 0c                	cmp    al,0xc
c0003efc:	74 0b                	je     c0003f09 <create_name+0x29f>
c0003efe:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f02:	83 e0 03             	and    eax,0x3
c0003f05:	3c 03                	cmp    al,0x3
c0003f07:	75 05                	jne    c0003f0e <create_name+0x2a4>
c0003f09:	83 cb 02             	or     ebx,0x2
c0003f0c:	eb 19                	jmp    c0003f27 <create_name+0x2bd>
c0003f0e:	f6 c3 02             	test   bl,0x2
c0003f11:	75 14                	jne    c0003f27 <create_name+0x2bd>
c0003f13:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f18:	74 03                	je     c0003f1d <create_name+0x2b3>
c0003f1a:	83 cb 10             	or     ebx,0x10
c0003f1d:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f22:	74 03                	je     c0003f27 <create_name+0x2bd>
c0003f24:	83 cb 08             	or     ebx,0x8
c0003f27:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f2a:	31 c0                	xor    eax,eax
c0003f2c:	eb 10                	jmp    c0003f3e <create_name+0x2d4>
c0003f2e:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f33:	0f 85 ce fe ff ff    	jne    c0003e07 <create_name+0x19d>
c0003f39:	e9 a6 fe ff ff       	jmp    c0003de4 <create_name+0x17a>
c0003f3e:	83 c4 3c             	add    esp,0x3c
c0003f41:	5b                   	pop    ebx
c0003f42:	5e                   	pop    esi
c0003f43:	5f                   	pop    edi
c0003f44:	5d                   	pop    ebp
c0003f45:	c3                   	ret    

c0003f46 <xname_sum>:
c0003f46:	56                   	push   esi
c0003f47:	53                   	push   ebx
c0003f48:	89 c6                	mov    esi,eax
c0003f4a:	51                   	push   ecx
c0003f4b:	31 db                	xor    ebx,ebx
c0003f4d:	83 c6 02             	add    esi,0x2
c0003f50:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f54:	66 85 c0             	test   ax,ax
c0003f57:	74 1f                	je     c0003f78 <xname_sum+0x32>
c0003f59:	83 ec 0c             	sub    esp,0xc
c0003f5c:	66 d1 cb             	ror    bx,1
c0003f5f:	50                   	push   eax
c0003f60:	e8 54 48 00 00       	call   c00087b9 <ff_wtoupper>
c0003f65:	83 c4 10             	add    esp,0x10
c0003f68:	0f b6 d0             	movzx  edx,al
c0003f6b:	66 c1 e8 08          	shr    ax,0x8
c0003f6f:	01 d3                	add    ebx,edx
c0003f71:	66 d1 cb             	ror    bx,1
c0003f74:	01 c3                	add    ebx,eax
c0003f76:	eb d5                	jmp    c0003f4d <xname_sum+0x7>
c0003f78:	89 d8                	mov    eax,ebx
c0003f7a:	5a                   	pop    edx
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	c3                   	ret    

c0003f7e <create_xdir>:
c0003f7e:	55                   	push   ebp
c0003f7f:	b9 40 00 00 00       	mov    ecx,0x40
c0003f84:	57                   	push   edi
c0003f85:	bd 01 00 00 00       	mov    ebp,0x1
c0003f8a:	56                   	push   esi
c0003f8b:	31 ff                	xor    edi,edi
c0003f8d:	53                   	push   ebx
c0003f8e:	be 40 00 00 00       	mov    esi,0x40
c0003f93:	89 c3                	mov    ebx,eax
c0003f95:	83 ec 1c             	sub    esp,0x1c
c0003f98:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f9c:	31 d2                	xor    edx,edx
c0003f9e:	e8 18 dd ff ff       	call   c0001cbb <mem_set>
c0003fa3:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fa6:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003faa:	31 c9                	xor    ecx,ecx
c0003fac:	8d 46 01             	lea    eax,[esi+0x1]
c0003faf:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fb3:	83 c6 02             	add    esi,0x2
c0003fb6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003fba:	66 85 ed             	test   bp,bp
c0003fbd:	74 12                	je     c0003fd1 <create_xdir+0x53>
c0003fbf:	0f b6 c1             	movzx  eax,cl
c0003fc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fc6:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003fca:	66 83 fd 01          	cmp    bp,0x1
c0003fce:	80 d9 ff             	sbb    cl,0xff
c0003fd1:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003fd4:	0f b7 d5             	movzx  edx,bp
c0003fd7:	83 c6 02             	add    esi,0x2
c0003fda:	e8 ba dc ff ff       	call   c0001c99 <st_word>
c0003fdf:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003fe5:	75 d3                	jne    c0003fba <create_xdir+0x3c>
c0003fe7:	8d 47 01             	lea    eax,[edi+0x1]
c0003fea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fee:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ff2:	0f b6 c1             	movzx  eax,cl
c0003ff5:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003ffa:	74 07                	je     c0004003 <create_xdir+0x85>
c0003ffc:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004001:	eb a9                	jmp    c0003fac <create_xdir+0x2e>
c0004003:	8d 47 02             	lea    eax,[edi+0x2]
c0004006:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004009:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000400c:	89 d0                	mov    eax,edx
c000400e:	e8 33 ff ff ff       	call   c0003f46 <xname_sum>
c0004013:	83 c4 1c             	add    esp,0x1c
c0004016:	0f b7 d0             	movzx  edx,ax
c0004019:	8d 43 24             	lea    eax,[ebx+0x24]
c000401c:	5b                   	pop    ebx
c000401d:	5e                   	pop    esi
c000401e:	5f                   	pop    edi
c000401f:	5d                   	pop    ebp
c0004020:	e9 74 dc ff ff       	jmp    c0001c99 <st_word>

c0004025 <cmp_lfn>:
c0004025:	55                   	push   ebp
c0004026:	57                   	push   edi
c0004027:	89 d7                	mov    edi,edx
c0004029:	56                   	push   esi
c000402a:	53                   	push   ebx
c000402b:	83 ec 1c             	sub    esp,0x1c
c000402e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004032:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004035:	e8 ed db ff ff       	call   c0001c27 <ld_word>
c000403a:	66 85 c0             	test   ax,ax
c000403d:	74 07                	je     c0004046 <cmp_lfn+0x21>
c000403f:	31 c0                	xor    eax,eax
c0004041:	e9 9a 00 00 00       	jmp    c00040e0 <cmp_lfn+0xbb>
c0004046:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004048:	bd 01 00 00 00       	mov    ebp,0x1
c000404d:	83 e3 3f             	and    ebx,0x3f
c0004050:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004058:	4b                   	dec    ebx
c0004059:	6b db 0d             	imul   ebx,ebx,0xd
c000405c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004060:	0f b6 80 c0 96 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6940]
c0004067:	01 f8                	add    eax,edi
c0004069:	e8 b9 db ff ff       	call   c0001c27 <ld_word>
c000406e:	66 85 ed             	test   bp,bp
c0004071:	89 c6                	mov    esi,eax
c0004073:	74 3c                	je     c00040b1 <cmp_lfn+0x8c>
c0004075:	81 fb ff 00 00 00    	cmp    ebx,0xff
c000407b:	77 c2                	ja     c000403f <cmp_lfn+0x1a>
c000407d:	83 ec 0c             	sub    esp,0xc
c0004080:	0f b7 c0             	movzx  eax,ax
c0004083:	50                   	push   eax
c0004084:	e8 30 47 00 00       	call   c00087b9 <ff_wtoupper>
c0004089:	89 c5                	mov    ebp,eax
c000408b:	8d 43 01             	lea    eax,[ebx+0x1]
c000408e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0004092:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004096:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c000409a:	89 04 24             	mov    DWORD PTR [esp],eax
c000409d:	e8 17 47 00 00       	call   c00087b9 <ff_wtoupper>
c00040a2:	83 c4 10             	add    esp,0x10
c00040a5:	39 c5                	cmp    ebp,eax
c00040a7:	75 96                	jne    c000403f <cmp_lfn+0x1a>
c00040a9:	89 f5                	mov    ebp,esi
c00040ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040af:	eb 04                	jmp    c00040b5 <cmp_lfn+0x90>
c00040b1:	66 46                	inc    si
c00040b3:	75 8a                	jne    c000403f <cmp_lfn+0x1a>
c00040b5:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040b9:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040be:	75 9c                	jne    c000405c <cmp_lfn+0x37>
c00040c0:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040c3:	74 16                	je     c00040db <cmp_lfn+0xb6>
c00040c5:	66 85 ed             	test   bp,bp
c00040c8:	74 11                	je     c00040db <cmp_lfn+0xb6>
c00040ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00040ce:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00040d3:	0f 94 c0             	sete   al
c00040d6:	0f b6 c0             	movzx  eax,al
c00040d9:	eb 05                	jmp    c00040e0 <cmp_lfn+0xbb>
c00040db:	b8 01 00 00 00       	mov    eax,0x1
c00040e0:	83 c4 1c             	add    esp,0x1c
c00040e3:	5b                   	pop    ebx
c00040e4:	5e                   	pop    esi
c00040e5:	5f                   	pop    edi
c00040e6:	5d                   	pop    ebp
c00040e7:	c3                   	ret    

c00040e8 <dir_find>:
c00040e8:	55                   	push   ebp
c00040e9:	31 d2                	xor    edx,edx
c00040eb:	57                   	push   edi
c00040ec:	56                   	push   esi
c00040ed:	53                   	push   ebx
c00040ee:	89 c3                	mov    ebx,eax
c00040f0:	83 ec 1c             	sub    esp,0x1c
c00040f3:	8b 30                	mov    esi,DWORD PTR [eax]
c00040f5:	e8 89 f0 ff ff       	call   c0003183 <dir_sdi>
c00040fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00040fd:	85 c0                	test   eax,eax
c00040ff:	0f 85 9e 01 00 00    	jne    c00042a3 <dir_find+0x1bb>
c0004105:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004108:	0f 85 8d 00 00 00    	jne    c000419b <dir_find+0xb3>
c000410e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004111:	e8 30 fe ff ff       	call   c0003f46 <xname_sum>
c0004116:	89 c7                	mov    edi,eax
c0004118:	31 d2                	xor    edx,edx
c000411a:	89 d8                	mov    eax,ebx
c000411c:	e8 72 f8 ff ff       	call   c0003993 <dir_read>
c0004121:	85 c0                	test   eax,eax
c0004123:	0f 85 5e 01 00 00    	jne    c0004287 <dir_find+0x19f>
c0004129:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000412c:	8d 41 24             	lea    eax,[ecx+0x24]
c000412f:	e8 f3 da ff ff       	call   c0001c27 <ld_word>
c0004134:	66 39 f8             	cmp    ax,di
c0004137:	75 df                	jne    c0004118 <dir_find+0x30>
c0004139:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c000413c:	31 ed                	xor    ebp,ebp
c000413e:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004142:	ba 40 00 00 00       	mov    edx,0x40
c0004147:	89 e9                	mov    ecx,ebp
c0004149:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c000414d:	0f 84 42 01 00 00    	je     c0004295 <dir_find+0x1ad>
c0004153:	f6 c2 1f             	test   dl,0x1f
c0004156:	75 03                	jne    c000415b <dir_find+0x73>
c0004158:	83 c2 02             	add    edx,0x2
c000415b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000415f:	89 d0                	mov    eax,edx
c0004161:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004164:	e8 be da ff ff       	call   c0001c27 <ld_word>
c0004169:	83 ec 0c             	sub    esp,0xc
c000416c:	0f b7 c0             	movzx  eax,ax
c000416f:	50                   	push   eax
c0004170:	e8 44 46 00 00       	call   c00087b9 <ff_wtoupper>
c0004175:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0004179:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000417c:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0004180:	89 04 24             	mov    DWORD PTR [esp],eax
c0004183:	e8 31 46 00 00       	call   c00087b9 <ff_wtoupper>
c0004188:	83 c4 10             	add    esp,0x10
c000418b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000418f:	75 87                	jne    c0004118 <dir_find+0x30>
c0004191:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004195:	45                   	inc    ebp
c0004196:	83 c2 02             	add    edx,0x2
c0004199:	eb ac                	jmp    c0004147 <dir_find+0x5f>
c000419b:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a2:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041a7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ac:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041af:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041b2:	89 f0                	mov    eax,esi
c00041b4:	e8 4c e2 ff ff       	call   c0002405 <move_window>
c00041b9:	85 c0                	test   eax,eax
c00041bb:	0f 85 c6 00 00 00    	jne    c0004287 <dir_find+0x19f>
c00041c1:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041c4:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00041c7:	84 c9                	test   cl,cl
c00041c9:	0f 84 bd 00 00 00    	je     c000428c <dir_find+0x1a4>
c00041cf:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00041d2:	88 d0                	mov    al,dl
c00041d4:	83 e0 3f             	and    eax,0x3f
c00041d7:	80 f9 e5             	cmp    cl,0xe5
c00041da:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00041dd:	0f 84 87 00 00 00    	je     c000426a <dir_find+0x182>
c00041e3:	80 e2 08             	and    dl,0x8
c00041e6:	74 06                	je     c00041ee <dir_find+0x106>
c00041e8:	3c 0f                	cmp    al,0xf
c00041ea:	75 7e                	jne    c000426a <dir_find+0x182>
c00041ec:	eb 04                	jmp    c00041f2 <dir_find+0x10a>
c00041ee:	3c 0f                	cmp    al,0xf
c00041f0:	75 4c                	jne    c000423e <dir_find+0x156>
c00041f2:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c00041f6:	75 7e                	jne    c0004276 <dir_find+0x18e>
c00041f8:	f6 c1 40             	test   cl,0x40
c00041fb:	74 12                	je     c000420f <dir_find+0x127>
c00041fd:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004200:	83 e1 bf             	and    ecx,0xffffffbf
c0004203:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004207:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000420a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000420d:	eb 06                	jmp    c0004215 <dir_find+0x12d>
c000420f:	89 f8                	mov    eax,edi
c0004211:	38 c8                	cmp    al,cl
c0004213:	75 5c                	jne    c0004271 <dir_find+0x189>
c0004215:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004219:	bf ff ff ff ff       	mov    edi,0xffffffff
c000421e:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004221:	75 53                	jne    c0004276 <dir_find+0x18e>
c0004223:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004227:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000422a:	89 ea                	mov    edx,ebp
c000422c:	e8 f4 fd ff ff       	call   c0004025 <cmp_lfn>
c0004231:	85 c0                	test   eax,eax
c0004233:	74 41                	je     c0004276 <dir_find+0x18e>
c0004235:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004239:	8d 79 ff             	lea    edi,[ecx-0x1]
c000423c:	eb 38                	jmp    c0004276 <dir_find+0x18e>
c000423e:	89 f8                	mov    eax,edi
c0004240:	84 c0                	test   al,al
c0004242:	75 0d                	jne    c0004251 <dir_find+0x169>
c0004244:	89 e8                	mov    eax,ebp
c0004246:	e8 98 de ff ff       	call   c00020e3 <sum_sfn>
c000424b:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000424f:	74 52                	je     c00042a3 <dir_find+0x1bb>
c0004251:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004255:	75 13                	jne    c000426a <dir_find+0x182>
c0004257:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000425a:	b9 0b 00 00 00       	mov    ecx,0xb
c000425f:	89 e8                	mov    eax,ebp
c0004261:	e8 60 da ff ff       	call   c0001cc6 <mem_cmp>
c0004266:	85 c0                	test   eax,eax
c0004268:	74 39                	je     c00042a3 <dir_find+0x1bb>
c000426a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004271:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004276:	31 d2                	xor    edx,edx
c0004278:	89 d8                	mov    eax,ebx
c000427a:	e8 5c f4 ff ff       	call   c00036db <dir_next>
c000427f:	85 c0                	test   eax,eax
c0004281:	0f 84 25 ff ff ff    	je     c00041ac <dir_find+0xc4>
c0004287:	89 04 24             	mov    DWORD PTR [esp],eax
c000428a:	eb 17                	jmp    c00042a3 <dir_find+0x1bb>
c000428c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0004293:	eb 0e                	jmp    c00042a3 <dir_find+0x1bb>
c0004295:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004298:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c000429d:	0f 85 75 fe ff ff    	jne    c0004118 <dir_find+0x30>
c00042a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042a6:	83 c4 1c             	add    esp,0x1c
c00042a9:	5b                   	pop    ebx
c00042aa:	5e                   	pop    esi
c00042ab:	5f                   	pop    edi
c00042ac:	5d                   	pop    ebp
c00042ad:	c3                   	ret    

c00042ae <dir_register>:
c00042ae:	55                   	push   ebp
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	be 06 00 00 00       	mov    esi,0x6
c00042b6:	53                   	push   ebx
c00042b7:	83 ec 6c             	sub    esp,0x6c
c00042ba:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042be:	0f 85 62 02 00 00    	jne    c0004526 <dir_register+0x278>
c00042c4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00042c6:	31 ff                	xor    edi,edi
c00042c8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042cb:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00042d0:	74 03                	je     c00042d5 <dir_register+0x27>
c00042d2:	47                   	inc    edi
c00042d3:	eb f6                	jmp    c00042cb <dir_register+0x1d>
c00042d5:	89 c3                	mov    ebx,eax
c00042d7:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00042db:	0f 85 e1 00 00 00    	jne    c00043c2 <dir_register+0x114>
c00042e1:	83 c7 0e             	add    edi,0xe
c00042e4:	b9 0f 00 00 00       	mov    ecx,0xf
c00042e9:	89 f8                	mov    eax,edi
c00042eb:	31 d2                	xor    edx,edx
c00042ed:	f7 f1                	div    ecx
c00042ef:	8d 50 02             	lea    edx,[eax+0x2]
c00042f2:	89 c7                	mov    edi,eax
c00042f4:	89 d8                	mov    eax,ebx
c00042f6:	e8 12 f8 ff ff       	call   c0003b0d <dir_alloc>
c00042fb:	89 c6                	mov    esi,eax
c00042fd:	85 c0                	test   eax,eax
c00042ff:	0f 85 21 02 00 00    	jne    c0004526 <dir_register+0x278>
c0004305:	81 c7 01 00 00 08    	add    edi,0x8000001
c000430b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000430e:	c1 e7 05             	shl    edi,0x5
c0004311:	29 f8                	sub    eax,edi
c0004313:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004316:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004319:	a8 04                	test   al,0x4
c000431b:	0f 84 91 00 00 00    	je     c00043b2 <dir_register+0x104>
c0004321:	83 e0 fb             	and    eax,0xfffffffb
c0004324:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004327:	89 d8                	mov    eax,ebx
c0004329:	e8 25 ec ff ff       	call   c0002f53 <fill_first_frag>
c000432e:	85 c0                	test   eax,eax
c0004330:	0f 85 ee 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004336:	83 c9 ff             	or     ecx,0xffffffff
c0004339:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000433c:	89 d8                	mov    eax,ebx
c000433e:	e8 db eb ff ff       	call   c0002f1e <fill_last_frag>
c0004343:	85 c0                	test   eax,eax
c0004345:	0f 85 d9 01 00 00    	jne    c0004524 <dir_register+0x276>
c000434b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000434f:	74 61                	je     c00043b2 <dir_register+0x104>
c0004351:	89 da                	mov    edx,ebx
c0004353:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004357:	e8 ea f5 ff ff       	call   c0003946 <load_obj_xdir>
c000435c:	85 c0                	test   eax,eax
c000435e:	0f 85 c0 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004364:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004368:	31 c9                	xor    ecx,ecx
c000436a:	c1 e2 09             	shl    edx,0x9
c000436d:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004370:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004373:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004376:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004379:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000437c:	83 c0 38             	add    eax,0x38
c000437f:	e8 1c d9 ff ff       	call   c0001ca0 <st_qword>
c0004384:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004387:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000438a:	83 c0 28             	add    eax,0x28
c000438d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004390:	e8 0b d9 ff ff       	call   c0001ca0 <st_qword>
c0004395:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004398:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000439b:	83 c8 01             	or     eax,0x1
c000439e:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043a5:	e8 db f7 ff ff       	call   c0003b85 <store_xdir>
c00043aa:	85 c0                	test   eax,eax
c00043ac:	0f 85 72 01 00 00    	jne    c0004524 <dir_register+0x276>
c00043b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043b5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b8:	e8 c1 fb ff ff       	call   c0003f7e <create_xdir>
c00043bd:	e9 64 01 00 00       	jmp    c0004526 <dir_register+0x278>
c00043c2:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043c5:	b9 0c 00 00 00       	mov    ecx,0xc
c00043ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00043ce:	89 c2                	mov    edx,eax
c00043d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043d4:	e8 cd d8 ff ff       	call   c0001ca6 <mem_cpy>
c00043d9:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00043de:	74 58                	je     c0004438 <dir_register+0x18a>
c00043e0:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00043e4:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00043ec:	83 ec 0c             	sub    esp,0xc
c00043ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00043f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00043f6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00043fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043fe:	e8 24 dc ff ff       	call   c0002027 <gen_numname>
c0004403:	89 d8                	mov    eax,ebx
c0004405:	e8 de fc ff ff       	call   c00040e8 <dir_find>
c000440a:	83 c4 10             	add    esp,0x10
c000440d:	89 c6                	mov    esi,eax
c000440f:	85 c0                	test   eax,eax
c0004411:	75 15                	jne    c0004428 <dir_register+0x17a>
c0004413:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004417:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000441c:	75 ce                	jne    c00043ec <dir_register+0x13e>
c000441e:	be 07 00 00 00       	mov    esi,0x7
c0004423:	e9 fe 00 00 00       	jmp    c0004526 <dir_register+0x278>
c0004428:	83 f8 04             	cmp    eax,0x4
c000442b:	0f 85 f5 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004431:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004435:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004438:	b9 01 00 00 00       	mov    ecx,0x1
c000443d:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004442:	74 0f                	je     c0004453 <dir_register+0x1a5>
c0004444:	b9 0d 00 00 00       	mov    ecx,0xd
c0004449:	8d 47 0c             	lea    eax,[edi+0xc]
c000444c:	31 d2                	xor    edx,edx
c000444e:	f7 f1                	div    ecx
c0004450:	8d 48 01             	lea    ecx,[eax+0x1]
c0004453:	89 ca                	mov    edx,ecx
c0004455:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004459:	89 d8                	mov    eax,ebx
c000445b:	e8 ad f6 ff ff       	call   c0003b0d <dir_alloc>
c0004460:	89 c6                	mov    esi,eax
c0004462:	85 c0                	test   eax,eax
c0004464:	0f 85 bc 00 00 00    	jne    c0004526 <dir_register+0x278>
c000446a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000446e:	49                   	dec    ecx
c000446f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004473:	74 6a                	je     c00044df <dir_register+0x231>
c0004475:	89 c8                	mov    eax,ecx
c0004477:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000447a:	c1 e0 05             	shl    eax,0x5
c000447d:	29 c2                	sub    edx,eax
c000447f:	89 d8                	mov    eax,ebx
c0004481:	e8 fd ec ff ff       	call   c0003183 <dir_sdi>
c0004486:	89 c6                	mov    esi,eax
c0004488:	85 c0                	test   eax,eax
c000448a:	0f 85 96 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004494:	e8 4a dc ff ff       	call   c00020e3 <sum_sfn>
c0004499:	0f b6 f8             	movzx  edi,al
c000449c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000449f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044a2:	89 e8                	mov    eax,ebp
c00044a4:	e8 5c df ff ff       	call   c0002405 <move_window>
c00044a9:	89 c6                	mov    esi,eax
c00044ab:	85 c0                	test   eax,eax
c00044ad:	75 77                	jne    c0004526 <dir_register+0x278>
c00044af:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044b4:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044b7:	83 ec 0c             	sub    esp,0xc
c00044ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044bd:	57                   	push   edi
c00044be:	e8 e0 da ff ff       	call   c0001fa3 <put_lfn>
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00044c9:	89 d8                	mov    eax,ebx
c00044cb:	e8 0b f2 ff ff       	call   c00036db <dir_next>
c00044d0:	83 c4 10             	add    esp,0x10
c00044d3:	89 c6                	mov    esi,eax
c00044d5:	85 c0                	test   eax,eax
c00044d7:	75 4d                	jne    c0004526 <dir_register+0x278>
c00044d9:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00044dd:	75 bd                	jne    c000449c <dir_register+0x1ee>
c00044df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044e2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044e5:	89 e8                	mov    eax,ebp
c00044e7:	e8 19 df ff ff       	call   c0002405 <move_window>
c00044ec:	89 c6                	mov    esi,eax
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 34                	jne    c0004526 <dir_register+0x278>
c00044f2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00044f5:	b9 20 00 00 00       	mov    ecx,0x20
c00044fa:	31 d2                	xor    edx,edx
c00044fc:	e8 ba d7 ff ff       	call   c0001cbb <mem_set>
c0004501:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004504:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004508:	b9 0b 00 00 00       	mov    ecx,0xb
c000450d:	e8 94 d7 ff ff       	call   c0001ca6 <mem_cpy>
c0004512:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004515:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004518:	83 e0 18             	and    eax,0x18
c000451b:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000451e:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004522:	eb 02                	jmp    c0004526 <dir_register+0x278>
c0004524:	89 c6                	mov    esi,eax
c0004526:	83 c4 6c             	add    esp,0x6c
c0004529:	89 f0                	mov    eax,esi
c000452b:	5b                   	pop    ebx
c000452c:	5e                   	pop    esi
c000452d:	5f                   	pop    edi
c000452e:	5d                   	pop    ebp
c000452f:	c3                   	ret    

c0004530 <sync_fs>:
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	53                   	push   ebx
c0004533:	89 c3                	mov    ebx,eax
c0004535:	e8 37 de ff ff       	call   c0002371 <sync_window>
c000453a:	85 c0                	test   eax,eax
c000453c:	0f 85 b1 00 00 00    	jne    c00045f3 <sync_fs+0xc3>
c0004542:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004545:	0f 85 8e 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c000454b:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000454f:	0f 85 84 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c0004555:	b9 00 02 00 00       	mov    ecx,0x200
c000455a:	8d 73 54             	lea    esi,[ebx+0x54]
c000455d:	31 d2                	xor    edx,edx
c000455f:	89 f0                	mov    eax,esi
c0004561:	e8 55 d7 ff ff       	call   c0001cbb <mem_set>
c0004566:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000456c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004571:	e8 23 d7 ff ff       	call   c0001c99 <st_word>
c0004576:	ba 52 52 61 41       	mov    edx,0x41615252
c000457b:	89 f0                	mov    eax,esi
c000457d:	e8 1b d7 ff ff       	call   c0001c9d <st_dword>
c0004582:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004588:	ba 72 72 41 61       	mov    edx,0x61417272
c000458d:	e8 0b d7 ff ff       	call   c0001c9d <st_dword>
c0004592:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004595:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c000459b:	e8 fd d6 ff ff       	call   c0001c9d <st_dword>
c00045a0:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045a3:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045a9:	e8 ef d6 ff ff       	call   c0001c9d <st_dword>
c00045ae:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045b4:	83 c0 01             	add    eax,0x1
c00045b7:	83 d2 00             	adc    edx,0x0
c00045ba:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045bd:	83 ec 0c             	sub    esp,0xc
c00045c0:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045c3:	6a 01                	push   0x1
c00045c5:	52                   	push   edx
c00045c6:	50                   	push   eax
c00045c7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045cb:	56                   	push   esi
c00045cc:	50                   	push   eax
c00045cd:	e8 20 d6 ff ff       	call   c0001bf2 <disk_write>
c00045d2:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00045d6:	83 c4 20             	add    esp,0x20
c00045d9:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045dd:	51                   	push   ecx
c00045de:	6a 00                	push   0x0
c00045e0:	6a 00                	push   0x0
c00045e2:	50                   	push   eax
c00045e3:	e8 20 d6 ff ff       	call   c0001c08 <disk_ioctl>
c00045e8:	83 c4 10             	add    esp,0x10
c00045eb:	85 c0                	test   eax,eax
c00045ed:	0f 95 c0             	setne  al
c00045f0:	0f b6 c0             	movzx  eax,al
c00045f3:	5a                   	pop    edx
c00045f4:	5b                   	pop    ebx
c00045f5:	5e                   	pop    esi
c00045f6:	c3                   	ret    

c00045f7 <create_partition>:
c00045f7:	55                   	push   ebp
c00045f8:	0f b6 c0             	movzx  eax,al
c00045fb:	57                   	push   edi
c00045fc:	56                   	push   esi
c00045fd:	53                   	push   ebx
c00045fe:	83 ec 60             	sub    esp,0x60
c0004601:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004605:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004609:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000460d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004611:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004615:	50                   	push   eax
c0004616:	6a 01                	push   0x1
c0004618:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000461c:	e8 e7 d5 ff ff       	call   c0001c08 <disk_ioctl>
c0004621:	83 c4 10             	add    esp,0x10
c0004624:	85 c0                	test   eax,eax
c0004626:	74 0a                	je     c0004632 <create_partition+0x3b>
c0004628:	b8 01 00 00 00       	mov    eax,0x1
c000462d:	e9 67 05 00 00       	jmp    c0004b99 <create_partition+0x5a2>
c0004632:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004636:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000463a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000463e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004642:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004647:	0f 86 ed 03 00 00    	jbe    c0004a3a <create_partition+0x443>
c000464d:	83 c0 df             	add    eax,0xffffffdf
c0004650:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004658:	83 d2 ff             	adc    edx,0xffffffff
c000465b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000465f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004663:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004667:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000466b:	83 c0 bd             	add    eax,0xffffffbd
c000466e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004675:	83 d2 ff             	adc    edx,0xffffffff
c0004678:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000467c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004680:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004688:	be 22 00 00 00       	mov    esi,0x22
c000468d:	31 ff                	xor    edi,edi
c000468f:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004697:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c000469f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046a7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046ab:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046b1:	75 0e                	jne    c00046c1 <create_partition+0xca>
c00046b3:	b9 00 02 00 00       	mov    ecx,0x200
c00046b8:	31 d2                	xor    edx,edx
c00046ba:	89 d8                	mov    eax,ebx
c00046bc:	e8 fa d5 ff ff       	call   c0001cbb <mem_set>
c00046c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046c5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00046c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046cd:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046d0:	0f 84 23 01 00 00    	je     c00047f9 <create_partition+0x202>
c00046d6:	89 f0                	mov    eax,esi
c00046d8:	89 fa                	mov    edx,edi
c00046da:	05 ff 07 00 00       	add    eax,0x7ff
c00046df:	83 d2 00             	adc    edx,0x0
c00046e2:	89 c1                	mov    ecx,eax
c00046e4:	89 d7                	mov    edi,edx
c00046e6:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00046ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00046f0:	89 ce                	mov    esi,ecx
c00046f2:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00046f6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00046fa:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00046fe:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004705:	89 04 24             	mov    DWORD PTR [esp],eax
c0004708:	b8 64 00 00 00       	mov    eax,0x64
c000470d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004710:	b8 00 00 00 00       	mov    eax,0x0
c0004715:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004719:	72 41                	jb     c000475c <create_partition+0x165>
c000471b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000471f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004723:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004727:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000472c:	01 c1                	add    ecx,eax
c000472e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004732:	f7 24 24             	mul    DWORD PTR [esp]
c0004735:	6a 00                	push   0x0
c0004737:	01 ca                	add    edx,ecx
c0004739:	6a 64                	push   0x64
c000473b:	52                   	push   edx
c000473c:	50                   	push   eax
c000473d:	e8 32 24 02 00       	call   c0026b74 <__udivdi3>
c0004742:	83 c4 10             	add    esp,0x10
c0004745:	05 ff 07 00 00       	add    eax,0x7ff
c000474a:	83 d2 00             	adc    edx,0x0
c000474d:	89 c1                	mov    ecx,eax
c000474f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004753:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004759:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000475c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000475f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004763:	01 f0                	add    eax,esi
c0004765:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004769:	11 fa                	adc    edx,edi
c000476b:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000476f:	19 d1                	sbb    ecx,edx
c0004771:	73 2e                	jae    c00047a1 <create_partition+0x1aa>
c0004773:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004777:	89 f8                	mov    eax,edi
c0004779:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004780:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004784:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000478c:	73 6b                	jae    c00047f9 <create_partition+0x202>
c000478e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0004792:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004796:	29 f0                	sub    eax,esi
c0004798:	19 fa                	sbb    edx,edi
c000479a:	89 04 24             	mov    DWORD PTR [esp],eax
c000479d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047a5:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047a8:	74 4f                	je     c00047f9 <create_partition+0x202>
c00047aa:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047ad:	b9 10 00 00 00       	mov    ecx,0x10
c00047b2:	ba d0 96 02 c0       	mov    edx,0xc00296d0
c00047b7:	e8 ea d4 ff ff       	call   c0001ca6 <mem_cpy>
c00047bc:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047c0:	b9 10 00 00 00       	mov    ecx,0x10
c00047c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00047c9:	e8 2c db ff ff       	call   c00022fa <make_rand>
c00047ce:	89 f2                	mov    edx,esi
c00047d0:	89 f9                	mov    ecx,edi
c00047d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00047d6:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00047da:	e8 c1 d4 ff ff       	call   c0001ca0 <st_qword>
c00047df:	03 34 24             	add    esi,DWORD PTR [esp]
c00047e2:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00047e6:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00047ea:	89 f2                	mov    edx,esi
c00047ec:	89 f9                	mov    ecx,edi
c00047ee:	83 c2 ff             	add    edx,0xffffffff
c00047f1:	83 d1 ff             	adc    ecx,0xffffffff
c00047f4:	e8 a7 d4 ff ff       	call   c0001ca0 <st_qword>
c00047f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00047fd:	83 e8 80             	sub    eax,0xffffff80
c0004800:	89 c5                	mov    ebp,eax
c0004802:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004806:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000480c:	75 6b                	jne    c0004879 <create_partition+0x282>
c000480e:	45                   	inc    ebp
c000480f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004813:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004818:	e8 39 da ff ff       	call   c0002256 <crc32>
c000481d:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004823:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004827:	75 e5                	jne    c000480e <create_partition+0x217>
c0004829:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000482d:	31 d2                	xor    edx,edx
c000482f:	83 ec 0c             	sub    esp,0xc
c0004832:	c1 ed 09             	shr    ebp,0x9
c0004835:	6a 01                	push   0x1
c0004837:	8d 45 02             	lea    eax,[ebp+0x2]
c000483a:	52                   	push   edx
c000483b:	50                   	push   eax
c000483c:	53                   	push   ebx
c000483d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004841:	e8 ac d3 ff ff       	call   c0001bf2 <disk_write>
c0004846:	83 c4 20             	add    esp,0x20
c0004849:	85 c0                	test   eax,eax
c000484b:	0f 85 d7 fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004851:	83 ec 0c             	sub    esp,0xc
c0004854:	31 d2                	xor    edx,edx
c0004856:	6a 01                	push   0x1
c0004858:	89 e8                	mov    eax,ebp
c000485a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000485e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004862:	52                   	push   edx
c0004863:	50                   	push   eax
c0004864:	53                   	push   ebx
c0004865:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004869:	e8 84 d3 ff ff       	call   c0001bf2 <disk_write>
c000486e:	83 c4 20             	add    esp,0x20
c0004871:	85 c0                	test   eax,eax
c0004873:	0f 85 af fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004879:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000487d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004881:	3d 00 40 00 00       	cmp    eax,0x4000
c0004886:	74 0d                	je     c0004895 <create_partition+0x29e>
c0004888:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000488c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004890:	e9 12 fe ff ff       	jmp    c00046a7 <create_partition+0xb0>
c0004895:	31 d2                	xor    edx,edx
c0004897:	b9 00 02 00 00       	mov    ecx,0x200
c000489c:	89 d8                	mov    eax,ebx
c000489e:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048a1:	e8 15 d4 ff ff       	call   c0001cbb <mem_set>
c00048a6:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048a9:	b9 10 00 00 00       	mov    ecx,0x10
c00048ae:	ba c0 95 02 c0       	mov    edx,0xc00295c0
c00048b3:	89 d8                	mov    eax,ebx
c00048b5:	e8 ec d3 ff ff       	call   c0001ca6 <mem_cpy>
c00048ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048be:	8d 43 58             	lea    eax,[ebx+0x58]
c00048c1:	f7 d2                	not    edx
c00048c3:	e8 d5 d3 ff ff       	call   c0001c9d <st_dword>
c00048c8:	8d 43 18             	lea    eax,[ebx+0x18]
c00048cb:	31 c9                	xor    ecx,ecx
c00048cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00048d0:	ba 01 00 00 00       	mov    edx,0x1
c00048d5:	e8 c6 d3 ff ff       	call   c0001ca0 <st_qword>
c00048da:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048de:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048e2:	83 c2 ff             	add    edx,0xffffffff
c00048e5:	89 e8                	mov    eax,ebp
c00048e7:	83 d1 ff             	adc    ecx,0xffffffff
c00048ea:	e8 b1 d3 ff ff       	call   c0001ca0 <st_qword>
c00048ef:	31 c9                	xor    ecx,ecx
c00048f1:	8d 43 28             	lea    eax,[ebx+0x28]
c00048f4:	ba 22 00 00 00       	mov    edx,0x22
c00048f9:	e8 a2 d3 ff ff       	call   c0001ca0 <st_qword>
c00048fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004902:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004906:	83 c2 de             	add    edx,0xffffffde
c0004909:	8d 43 30             	lea    eax,[ebx+0x30]
c000490c:	83 d1 ff             	adc    ecx,0xffffffff
c000490f:	31 f6                	xor    esi,esi
c0004911:	e8 8a d3 ff ff       	call   c0001ca0 <st_qword>
c0004916:	8d 43 54             	lea    eax,[ebx+0x54]
c0004919:	ba 80 00 00 00       	mov    edx,0x80
c000491e:	e8 7a d3 ff ff       	call   c0001c9d <st_dword>
c0004923:	8d 43 50             	lea    eax,[ebx+0x50]
c0004926:	ba 80 00 00 00       	mov    edx,0x80
c000492b:	e8 6d d3 ff ff       	call   c0001c9d <st_dword>
c0004930:	ba 02 00 00 00       	mov    edx,0x2
c0004935:	89 f8                	mov    eax,edi
c0004937:	e8 61 d3 ff ff       	call   c0001c9d <st_dword>
c000493c:	8d 53 38             	lea    edx,[ebx+0x38]
c000493f:	b9 10 00 00 00       	mov    ecx,0x10
c0004944:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004948:	e8 ad d9 ff ff       	call   c00022fa <make_rand>
c000494d:	83 c8 ff             	or     eax,0xffffffff
c0004950:	46                   	inc    esi
c0004951:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004956:	e8 fb d8 ff ff       	call   c0002256 <crc32>
c000495b:	83 fe 5c             	cmp    esi,0x5c
c000495e:	75 f0                	jne    c0004950 <create_partition+0x359>
c0004960:	f7 d0                	not    eax
c0004962:	8d 73 10             	lea    esi,[ebx+0x10]
c0004965:	89 c2                	mov    edx,eax
c0004967:	89 f0                	mov    eax,esi
c0004969:	e8 2f d3 ff ff       	call   c0001c9d <st_dword>
c000496e:	83 ec 0c             	sub    esp,0xc
c0004971:	6a 01                	push   0x1
c0004973:	6a 00                	push   0x0
c0004975:	6a 01                	push   0x1
c0004977:	53                   	push   ebx
c0004978:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000497c:	e8 71 d2 ff ff       	call   c0001bf2 <disk_write>
c0004981:	83 c4 20             	add    esp,0x20
c0004984:	85 c0                	test   eax,eax
c0004986:	0f 85 9c fc ff ff    	jne    c0004628 <create_partition+0x31>
c000498c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004990:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004994:	83 c2 ff             	add    edx,0xffffffff
c0004997:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000499a:	83 d1 ff             	adc    ecx,0xffffffff
c000499d:	e8 fe d2 ff ff       	call   c0001ca0 <st_qword>
c00049a2:	ba 01 00 00 00       	mov    edx,0x1
c00049a7:	31 c9                	xor    ecx,ecx
c00049a9:	89 e8                	mov    eax,ebp
c00049ab:	e8 f0 d2 ff ff       	call   c0001ca0 <st_qword>
c00049b0:	89 f8                	mov    eax,edi
c00049b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049b6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049ba:	31 ff                	xor    edi,edi
c00049bc:	e8 df d2 ff ff       	call   c0001ca0 <st_qword>
c00049c1:	89 f0                	mov    eax,esi
c00049c3:	31 d2                	xor    edx,edx
c00049c5:	e8 d3 d2 ff ff       	call   c0001c9d <st_dword>
c00049ca:	83 c8 ff             	or     eax,0xffffffff
c00049cd:	47                   	inc    edi
c00049ce:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00049d3:	e8 7e d8 ff ff       	call   c0002256 <crc32>
c00049d8:	83 ff 5c             	cmp    edi,0x5c
c00049db:	75 f0                	jne    c00049cd <create_partition+0x3d6>
c00049dd:	f7 d0                	not    eax
c00049df:	89 c2                	mov    edx,eax
c00049e1:	89 f0                	mov    eax,esi
c00049e3:	e8 b5 d2 ff ff       	call   c0001c9d <st_dword>
c00049e8:	83 ec 0c             	sub    esp,0xc
c00049eb:	6a 01                	push   0x1
c00049ed:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00049f1:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00049f5:	83 c0 ff             	add    eax,0xffffffff
c00049f8:	83 d2 ff             	adc    edx,0xffffffff
c00049fb:	52                   	push   edx
c00049fc:	50                   	push   eax
c00049fd:	53                   	push   ebx
c00049fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a02:	e8 eb d1 ff ff       	call   c0001bf2 <disk_write>
c0004a07:	83 c4 20             	add    esp,0x20
c0004a0a:	85 c0                	test   eax,eax
c0004a0c:	0f 85 16 fc ff ff    	jne    c0004628 <create_partition+0x31>
c0004a12:	31 d2                	xor    edx,edx
c0004a14:	89 d8                	mov    eax,ebx
c0004a16:	b9 00 02 00 00       	mov    ecx,0x200
c0004a1b:	e8 9b d2 ff ff       	call   c0001cbb <mem_set>
c0004a20:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a26:	b9 10 00 00 00       	mov    ecx,0x10
c0004a2b:	ba d0 95 02 c0       	mov    edx,0xc00295d0
c0004a30:	e8 71 d2 ff ff       	call   c0001ca6 <mem_cpy>
c0004a35:	e9 21 01 00 00       	jmp    c0004b5b <create_partition+0x564>
c0004a3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a3e:	b9 05 00 00 00       	mov    ecx,0x5
c0004a43:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a46:	bf 08 00 00 00       	mov    edi,0x8
c0004a4b:	89 f8                	mov    eax,edi
c0004a4d:	31 d2                	xor    edx,edx
c0004a4f:	0f b6 f0             	movzx  esi,al
c0004a52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a55:	f7 f6                	div    esi
c0004a57:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a5c:	76 0a                	jbe    c0004a68 <create_partition+0x471>
c0004a5e:	d1 e7                	shl    edi,1
c0004a60:	49                   	dec    ecx
c0004a61:	75 e8                	jne    c0004a4b <create_partition+0x454>
c0004a63:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004a68:	b9 00 02 00 00       	mov    ecx,0x200
c0004a6d:	31 d2                	xor    edx,edx
c0004a6f:	89 d8                	mov    eax,ebx
c0004a71:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004a77:	e8 3f d2 ff ff       	call   c0001cbb <mem_set>
c0004a7c:	b9 64 00 00 00       	mov    ecx,0x64
c0004a81:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a84:	31 d2                	xor    edx,edx
c0004a86:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004a8e:	f7 f1                	div    ecx
c0004a90:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004a95:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004a99:	89 f8                	mov    eax,edi
c0004a9b:	0f b6 c0             	movzx  eax,al
c0004a9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004aa2:	e9 80 00 00 00       	jmp    c0004b27 <create_partition+0x530>
c0004aa7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004aaa:	29 cf                	sub    edi,ecx
c0004aac:	89 ca                	mov    edx,ecx
c0004aae:	89 f0                	mov    eax,esi
c0004ab0:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004ab5:	e8 e3 d1 ff ff       	call   c0001c9d <st_dword>
c0004aba:	8d 46 04             	lea    eax,[esi+0x4]
c0004abd:	89 fa                	mov    edx,edi
c0004abf:	83 c6 10             	add    esi,0x10
c0004ac2:	e8 d6 d1 ff ff       	call   c0001c9d <st_dword>
c0004ac7:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004acb:	31 d2                	xor    edx,edx
c0004acd:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004ad0:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004ad4:	89 c8                	mov    eax,ecx
c0004ad6:	01 f9                	add    ecx,edi
c0004ad8:	f7 f5                	div    ebp
c0004ada:	89 d5                	mov    ebp,edx
c0004adc:	31 d2                	xor    edx,edx
c0004ade:	45                   	inc    ebp
c0004adf:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004ae3:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004ae6:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004ae9:	89 c2                	mov    edx,eax
c0004aeb:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004aee:	c1 ea 02             	shr    edx,0x2
c0004af1:	83 e2 c0             	and    edx,0xffffffc0
c0004af4:	09 ea                	or     edx,ebp
c0004af6:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004afb:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004afe:	31 d2                	xor    edx,edx
c0004b00:	f7 f5                	div    ebp
c0004b02:	89 d7                	mov    edi,edx
c0004b04:	31 d2                	xor    edx,edx
c0004b06:	47                   	inc    edi
c0004b07:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b0b:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b0e:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b11:	89 c5                	mov    ebp,eax
c0004b13:	c1 ed 02             	shr    ebp,0x2
c0004b16:	83 e5 c0             	and    ebp,0xffffffc0
c0004b19:	09 ef                	or     edi,ebp
c0004b1b:	89 fa                	mov    edx,edi
c0004b1d:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b20:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b25:	74 34                	je     c0004b5b <create_partition+0x564>
c0004b27:	85 c9                	test   ecx,ecx
c0004b29:	74 30                	je     c0004b5b <create_partition+0x564>
c0004b2b:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b2e:	76 2b                	jbe    c0004b5b <create_partition+0x564>
c0004b30:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b34:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b38:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b3b:	83 ff 64             	cmp    edi,0x64
c0004b3e:	76 4b                	jbe    c0004b8b <create_partition+0x594>
c0004b40:	89 f8                	mov    eax,edi
c0004b42:	01 c8                	add    eax,ecx
c0004b44:	0f 82 5d ff ff ff    	jb     c0004aa7 <create_partition+0x4b0>
c0004b4a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b4d:	0f 87 54 ff ff ff    	ja     c0004aa7 <create_partition+0x4b0>
c0004b53:	85 ff                	test   edi,edi
c0004b55:	0f 85 51 ff ff ff    	jne    c0004aac <create_partition+0x4b5>
c0004b5b:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b61:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004b66:	e8 2e d1 ff ff       	call   c0001c99 <st_word>
c0004b6b:	83 ec 0c             	sub    esp,0xc
c0004b6e:	6a 01                	push   0x1
c0004b70:	6a 00                	push   0x0
c0004b72:	6a 00                	push   0x0
c0004b74:	53                   	push   ebx
c0004b75:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004b79:	e8 74 d0 ff ff       	call   c0001bf2 <disk_write>
c0004b7e:	83 c4 20             	add    esp,0x20
c0004b81:	85 c0                	test   eax,eax
c0004b83:	0f 95 c0             	setne  al
c0004b86:	0f b6 c0             	movzx  eax,al
c0004b89:	eb 0e                	jmp    c0004b99 <create_partition+0x5a2>
c0004b8b:	74 07                	je     c0004b94 <create_partition+0x59d>
c0004b8d:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004b92:	eb ac                	jmp    c0004b40 <create_partition+0x549>
c0004b94:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004b97:	eb a7                	jmp    c0004b40 <create_partition+0x549>
c0004b99:	83 c4 5c             	add    esp,0x5c
c0004b9c:	5b                   	pop    ebx
c0004b9d:	5e                   	pop    esi
c0004b9e:	5f                   	pop    edi
c0004b9f:	5d                   	pop    ebp
c0004ba0:	c3                   	ret    

c0004ba1 <get_fileinfo>:
c0004ba1:	55                   	push   ebp
c0004ba2:	57                   	push   edi
c0004ba3:	56                   	push   esi
c0004ba4:	53                   	push   ebx
c0004ba5:	83 ec 1c             	sub    esp,0x1c
c0004ba8:	8b 30                	mov    esi,DWORD PTR [eax]
c0004baa:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bae:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bb2:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bb5:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bb8:	0f 84 dc 01 00 00    	je     c0004d9a <get_fileinfo+0x1f9>
c0004bbe:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bc1:	75 0f                	jne    c0004bd2 <get_fileinfo+0x31>
c0004bc3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004bc6:	83 c4 1c             	add    esp,0x1c
c0004bc9:	5b                   	pop    ebx
c0004bca:	5e                   	pop    esi
c0004bcb:	5f                   	pop    edi
c0004bcc:	5d                   	pop    ebp
c0004bcd:	e9 58 d5 ff ff       	jmp    c000212a <get_xfileinfo>
c0004bd2:	89 d3                	mov    ebx,edx
c0004bd4:	89 c6                	mov    esi,eax
c0004bd6:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004bda:	74 6a                	je     c0004c46 <get_fileinfo+0xa5>
c0004bdc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004be4:	31 ed                	xor    ebp,ebp
c0004be6:	31 ff                	xor    edi,edi
c0004be8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004bec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004bf0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004bf3:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004bf7:	66 85 d2             	test   dx,dx
c0004bfa:	74 3e                	je     c0004c3a <get_fileinfo+0x99>
c0004bfc:	66 85 ed             	test   bp,bp
c0004bff:	75 0c                	jne    c0004c0d <get_fileinfo+0x6c>
c0004c01:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c07:	66 3d ff 07          	cmp    ax,0x7ff
c0004c0b:	76 22                	jbe    c0004c2f <get_fileinfo+0x8e>
c0004c0d:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c12:	89 e8                	mov    eax,ebp
c0004c14:	29 f9                	sub    ecx,edi
c0004c16:	c1 e0 10             	shl    eax,0x10
c0004c19:	09 d0                	or     eax,edx
c0004c1b:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c1f:	e8 a3 d1 ff ff       	call   c0001dc7 <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 10                	je     c0004c38 <get_fileinfo+0x97>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	31 d2                	xor    edx,edx
c0004c2d:	01 c7                	add    edi,eax
c0004c2f:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c34:	89 d5                	mov    ebp,edx
c0004c36:	eb b0                	jmp    c0004be8 <get_fileinfo+0x47>
c0004c38:	31 ff                	xor    edi,edi
c0004c3a:	66 85 ed             	test   bp,bp
c0004c3d:	74 02                	je     c0004c41 <get_fileinfo+0xa0>
c0004c3f:	31 ff                	xor    edi,edi
c0004c41:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c46:	31 ff                	xor    edi,edi
c0004c48:	31 c9                	xor    ecx,ecx
c0004c4a:	83 f9 0a             	cmp    ecx,0xa
c0004c4d:	0f 87 ad 00 00 00    	ja     c0004d00 <get_fileinfo+0x15f>
c0004c53:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c56:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c59:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c5d:	66 83 fa 20          	cmp    dx,0x20
c0004c61:	0f 84 92 00 00 00    	je     c0004cf9 <get_fileinfo+0x158>
c0004c67:	66 83 fa 05          	cmp    dx,0x5
c0004c6b:	75 05                	jne    c0004c72 <get_fileinfo+0xd1>
c0004c6d:	ba e5 00 00 00       	mov    edx,0xe5
c0004c72:	83 ff 0b             	cmp    edi,0xb
c0004c75:	77 0b                	ja     c0004c82 <get_fileinfo+0xe1>
c0004c77:	83 fd 09             	cmp    ebp,0x9
c0004c7a:	75 06                	jne    c0004c82 <get_fileinfo+0xe1>
c0004c7c:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004c81:	47                   	inc    edi
c0004c82:	0f b7 c2             	movzx  eax,dx
c0004c85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c89:	e8 6d d0 ff ff       	call   c0001cfb <dbc_1st>
c0004c8e:	85 c0                	test   eax,eax
c0004c90:	74 2f                	je     c0004cc1 <get_fileinfo+0x120>
c0004c92:	83 fd 08             	cmp    ebp,0x8
c0004c95:	74 2a                	je     c0004cc1 <get_fileinfo+0x120>
c0004c97:	83 fd 0b             	cmp    ebp,0xb
c0004c9a:	74 25                	je     c0004cc1 <get_fileinfo+0x120>
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ca3:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ca7:	e8 52 d0 ff ff       	call   c0001cfe <dbc_2nd>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	74 11                	je     c0004cc1 <get_fileinfo+0x120>
c0004cb0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cb4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cb9:	c1 e2 08             	shl    edx,0x8
c0004cbc:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cbf:	09 c2                	or     edx,eax
c0004cc1:	0f b7 d2             	movzx  edx,dx
c0004cc4:	50                   	push   eax
c0004cc5:	50                   	push   eax
c0004cc6:	68 b5 01 00 00       	push   0x1b5
c0004ccb:	52                   	push   edx
c0004ccc:	e8 7c 3a 00 00       	call   c000874d <ff_oem2uni>
c0004cd1:	83 c4 10             	add    esp,0x10
c0004cd4:	66 85 c0             	test   ax,ax
c0004cd7:	75 04                	jne    c0004cdd <get_fileinfo+0x13c>
c0004cd9:	31 ff                	xor    edi,edi
c0004cdb:	eb 23                	jmp    c0004d00 <get_fileinfo+0x15f>
c0004cdd:	b9 0c 00 00 00       	mov    ecx,0xc
c0004ce2:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ce6:	29 f9                	sub    ecx,edi
c0004ce8:	0f b7 c0             	movzx  eax,ax
c0004ceb:	e8 d7 d0 ff ff       	call   c0001dc7 <put_utf>
c0004cf0:	84 c0                	test   al,al
c0004cf2:	74 e5                	je     c0004cd9 <get_fileinfo+0x138>
c0004cf4:	0f b6 c0             	movzx  eax,al
c0004cf7:	01 c7                	add    edi,eax
c0004cf9:	89 e9                	mov    ecx,ebp
c0004cfb:	e9 4a ff ff ff       	jmp    c0004c4a <get_fileinfo+0xa9>
c0004d00:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d05:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d09:	75 54                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d0b:	85 ff                	test   edi,edi
c0004d0d:	75 0b                	jne    c0004d1a <get_fileinfo+0x179>
c0004d0f:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d13:	ba 01 00 00 00       	mov    edx,0x1
c0004d18:	eb 33                	jmp    c0004d4d <get_fileinfo+0x1ac>
c0004d1a:	b1 08                	mov    cl,0x8
c0004d1c:	31 d2                	xor    edx,edx
c0004d1e:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d24:	84 c0                	test   al,al
c0004d26:	74 25                	je     c0004d4d <get_fileinfo+0x1ac>
c0004d28:	66 83 f8 2e          	cmp    ax,0x2e
c0004d2c:	74 16                	je     c0004d44 <get_fileinfo+0x1a3>
c0004d2e:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d31:	66 83 ff 19          	cmp    di,0x19
c0004d35:	77 0f                	ja     c0004d46 <get_fileinfo+0x1a5>
c0004d37:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d3a:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d3d:	74 07                	je     c0004d46 <get_fileinfo+0x1a5>
c0004d3f:	83 c0 20             	add    eax,0x20
c0004d42:	eb 02                	jmp    c0004d46 <get_fileinfo+0x1a5>
c0004d44:	b1 10                	mov    cl,0x10
c0004d46:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d4a:	42                   	inc    edx
c0004d4b:	eb d1                	jmp    c0004d1e <get_fileinfo+0x17d>
c0004d4d:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d55:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d59:	75 04                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d5b:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d5f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d62:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d65:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004d68:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d6b:	83 c0 1c             	add    eax,0x1c
c0004d6e:	e8 c1 ce ff ff       	call   c0001c34 <ld_dword>
c0004d73:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004d7a:	89 03                	mov    DWORD PTR [ebx],eax
c0004d7c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d7f:	83 c0 16             	add    eax,0x16
c0004d82:	e8 a0 ce ff ff       	call   c0001c27 <ld_word>
c0004d87:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004d8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8e:	83 c0 18             	add    eax,0x18
c0004d91:	e8 91 ce ff ff       	call   c0001c27 <ld_word>
c0004d96:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004d9a:	83 c4 1c             	add    esp,0x1c
c0004d9d:	5b                   	pop    ebx
c0004d9e:	5e                   	pop    esi
c0004d9f:	5f                   	pop    edi
c0004da0:	5d                   	pop    ebp
c0004da1:	c3                   	ret    

c0004da2 <ld_clust.isra.0>:
c0004da2:	56                   	push   esi
c0004da3:	89 c6                	mov    esi,eax
c0004da5:	53                   	push   ebx
c0004da6:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004da9:	89 d3                	mov    ebx,edx
c0004dab:	e8 77 ce ff ff       	call   c0001c27 <ld_word>
c0004db0:	0f b7 c8             	movzx  ecx,ax
c0004db3:	89 f0                	mov    eax,esi
c0004db5:	3c 03                	cmp    al,0x3
c0004db7:	75 0d                	jne    c0004dc6 <ld_clust.isra.0+0x24>
c0004db9:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dbc:	e8 66 ce ff ff       	call   c0001c27 <ld_word>
c0004dc1:	c1 e0 10             	shl    eax,0x10
c0004dc4:	09 c1                	or     ecx,eax
c0004dc6:	89 c8                	mov    eax,ecx
c0004dc8:	5b                   	pop    ebx
c0004dc9:	5e                   	pop    esi
c0004dca:	c3                   	ret    

c0004dcb <st_clust.isra.1>:
c0004dcb:	56                   	push   esi
c0004dcc:	89 c6                	mov    esi,eax
c0004dce:	53                   	push   ebx
c0004dcf:	89 d3                	mov    ebx,edx
c0004dd1:	0f b7 d1             	movzx  edx,cx
c0004dd4:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004dd7:	e8 bd ce ff ff       	call   c0001c99 <st_word>
c0004ddc:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004ddf:	75 0f                	jne    c0004df0 <st_clust.isra.1+0x25>
c0004de1:	c1 e9 10             	shr    ecx,0x10
c0004de4:	8d 43 14             	lea    eax,[ebx+0x14]
c0004de7:	89 ca                	mov    edx,ecx
c0004de9:	5b                   	pop    ebx
c0004dea:	5e                   	pop    esi
c0004deb:	e9 a9 ce ff ff       	jmp    c0001c99 <st_word>
c0004df0:	5b                   	pop    ebx
c0004df1:	5e                   	pop    esi
c0004df2:	c3                   	ret    

c0004df3 <init_alloc_info.isra.2>:
c0004df3:	56                   	push   esi
c0004df4:	53                   	push   ebx
c0004df5:	89 c6                	mov    esi,eax
c0004df7:	89 d3                	mov    ebx,edx
c0004df9:	51                   	push   ecx
c0004dfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0004dfc:	83 c0 34             	add    eax,0x34
c0004dff:	e8 30 ce ff ff       	call   c0001c34 <ld_dword>
c0004e04:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e07:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e09:	83 c0 38             	add    eax,0x38
c0004e0c:	e8 3b ce ff ff       	call   c0001c4c <ld_qword>
c0004e11:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e14:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e17:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e19:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e1c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e23:	83 e0 02             	and    eax,0x2
c0004e26:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e29:	5b                   	pop    ebx
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <follow_path>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c3                	mov    ebx,eax
c0004e31:	83 ec 14             	sub    esp,0x14
c0004e34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e38:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e3e:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e40:	80 fa 5c             	cmp    dl,0x5c
c0004e43:	75 07                	jne    c0004e4c <follow_path+0x1f>
c0004e45:	40                   	inc    eax
c0004e46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e4a:	eb ee                	jmp    c0004e3a <follow_path+0xd>
c0004e4c:	80 fa 2f             	cmp    dl,0x2f
c0004e4f:	74 f4                	je     c0004e45 <follow_path+0x18>
c0004e51:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e58:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5f:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e62:	77 52                	ja     c0004eb6 <follow_path+0x89>
c0004e64:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004e68:	31 d2                	xor    edx,edx
c0004e6a:	89 d8                	mov    eax,ebx
c0004e6c:	e8 12 e3 ff ff       	call   c0003183 <dir_sdi>
c0004e71:	eb 7c                	jmp    c0004eef <follow_path+0xc2>
c0004e73:	89 d8                	mov    eax,ebx
c0004e75:	e8 6e f2 ff ff       	call   c00040e8 <dir_find>
c0004e7a:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004e7d:	85 c0                	test   eax,eax
c0004e7f:	75 46                	jne    c0004ec7 <follow_path+0x9a>
c0004e81:	80 e2 04             	and    dl,0x4
c0004e84:	75 69                	jne    c0004eef <follow_path+0xc2>
c0004e86:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004e8a:	74 5e                	je     c0004eea <follow_path+0xbd>
c0004e8c:	8a 06                	mov    al,BYTE PTR [esi]
c0004e8e:	3c 04                	cmp    al,0x4
c0004e90:	75 41                	jne    c0004ed3 <follow_path+0xa6>
c0004e92:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e95:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004e99:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004e9c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004e9f:	30 c0                	xor    al,al
c0004ea1:	09 d0                	or     eax,edx
c0004ea3:	89 da                	mov    edx,ebx
c0004ea5:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ea8:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004eab:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004eae:	8d 46 10             	lea    eax,[esi+0x10]
c0004eb1:	e8 3d ff ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0004eb6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004eba:	89 d8                	mov    eax,ebx
c0004ebc:	e8 a9 ed ff ff       	call   c0003c6a <create_name>
c0004ec1:	85 c0                	test   eax,eax
c0004ec3:	74 ae                	je     c0004e73 <follow_path+0x46>
c0004ec5:	eb 28                	jmp    c0004eef <follow_path+0xc2>
c0004ec7:	83 f8 04             	cmp    eax,0x4
c0004eca:	75 23                	jne    c0004eef <follow_path+0xc2>
c0004ecc:	80 e2 04             	and    dl,0x4
c0004ecf:	74 19                	je     c0004eea <follow_path+0xbd>
c0004ed1:	eb 1c                	jmp    c0004eef <follow_path+0xc2>
c0004ed3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004ed6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004edc:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004ee0:	e8 bd fe ff ff       	call   c0004da2 <ld_clust.isra.0>
c0004ee5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004ee8:	eb cc                	jmp    c0004eb6 <follow_path+0x89>
c0004eea:	b8 05 00 00 00       	mov    eax,0x5
c0004eef:	83 c4 14             	add    esp,0x14
c0004ef2:	5b                   	pop    ebx
c0004ef3:	5e                   	pop    esi
c0004ef4:	c3                   	ret    

c0004ef5 <f_mount>:
c0004ef5:	53                   	push   ebx
c0004ef6:	83 ec 18             	sub    esp,0x18
c0004ef9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004efd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f05:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f09:	e8 fb d2 ff ff       	call   c0002209 <get_ldnumber>
c0004f0e:	89 c2                	mov    edx,eax
c0004f10:	b8 0b 00 00 00       	mov    eax,0xb
c0004f15:	85 d2                	test   edx,edx
c0004f17:	78 39                	js     c0004f52 <f_mount+0x5d>
c0004f19:	8b 04 95 c0 e1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1e40]
c0004f20:	85 c0                	test   eax,eax
c0004f22:	74 03                	je     c0004f27 <f_mount+0x32>
c0004f24:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 c0                	test   eax,eax
c0004f2d:	74 03                	je     c0004f32 <f_mount+0x3d>
c0004f2f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f36:	89 04 95 c0 e1 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1e40],eax
c0004f3d:	31 c0                	xor    eax,eax
c0004f3f:	84 db                	test   bl,bl
c0004f41:	74 0f                	je     c0004f52 <f_mount+0x5d>
c0004f43:	31 c9                	xor    ecx,ecx
c0004f45:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 65 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f52:	83 c4 18             	add    esp,0x18
c0004f55:	5b                   	pop    ebx
c0004f56:	c3                   	ret    

c0004f57 <f_open>:
c0004f57:	55                   	push   ebp
c0004f58:	bd 09 00 00 00       	mov    ebp,0x9
c0004f5d:	57                   	push   edi
c0004f5e:	56                   	push   esi
c0004f5f:	53                   	push   ebx
c0004f60:	83 ec 7c             	sub    esp,0x7c
c0004f63:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004f6a:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004f71:	85 db                	test   ebx,ebx
c0004f73:	0f 84 10 04 00 00    	je     c0005389 <f_open+0x432>
c0004f79:	89 fe                	mov    esi,edi
c0004f7b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f7f:	83 e6 3f             	and    esi,0x3f
c0004f82:	89 f0                	mov    eax,esi
c0004f84:	0f b6 c8             	movzx  ecx,al
c0004f87:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004f8e:	e8 24 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f93:	89 c5                	mov    ebp,eax
c0004f95:	85 c0                	test   eax,eax
c0004f97:	0f 85 e6 03 00 00    	jne    c0005383 <f_open+0x42c>
c0004f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa1:	bd 11 00 00 00       	mov    ebp,0x11
c0004fa6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004faa:	83 ec 0c             	sub    esp,0xc
c0004fad:	68 60 04 00 00       	push   0x460
c0004fb2:	e8 d9 36 00 00       	call   c0008690 <ff_memalloc>
c0004fb7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fbb:	83 c4 10             	add    esp,0x10
c0004fbe:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004fc3:	0f 84 c0 03 00 00    	je     c0005389 <f_open+0x432>
c0004fc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fcd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004fd1:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004fd7:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004fda:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004fdd:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004fe4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004fe8:	e8 40 fe ff ff       	call   c0004e2d <follow_path>
c0004fed:	89 c5                	mov    ebp,eax
c0004fef:	85 c0                	test   eax,eax
c0004ff1:	75 0c                	jne    c0004fff <f_open+0xa8>
c0004ff3:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004ff8:	79 05                	jns    c0004fff <f_open+0xa8>
c0004ffa:	bd 06 00 00 00       	mov    ebp,0x6
c0004fff:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005005:	0f 84 84 01 00 00    	je     c000518f <f_open+0x238>
c000500b:	85 ed                	test   ebp,ebp
c000500d:	74 20                	je     c000502f <f_open+0xd8>
c000500f:	83 fd 04             	cmp    ebp,0x4
c0005012:	0f 85 58 03 00 00    	jne    c0005370 <f_open+0x419>
c0005018:	8d 44 24 24          	lea    eax,[esp+0x24]
c000501c:	83 ce 08             	or     esi,0x8
c000501f:	e8 8a f2 ff ff       	call   c00042ae <dir_register>
c0005024:	89 c5                	mov    ebp,eax
c0005026:	85 c0                	test   eax,eax
c0005028:	74 2f                	je     c0005059 <f_open+0x102>
c000502a:	e9 41 03 00 00       	jmp    c0005370 <f_open+0x419>
c000502f:	bd 07 00 00 00       	mov    ebp,0x7
c0005034:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005039:	0f 85 31 03 00 00    	jne    c0005370 <f_open+0x419>
c000503f:	bd 08 00 00 00       	mov    ebp,0x8
c0005044:	f7 c7 04 00 00 00    	test   edi,0x4
c000504a:	0f 85 20 03 00 00    	jne    c0005370 <f_open+0x419>
c0005050:	83 e7 08             	and    edi,0x8
c0005053:	0f 84 65 01 00 00    	je     c00051be <f_open+0x267>
c0005059:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000505d:	8a 02                	mov    al,BYTE PTR [edx]
c000505f:	3c 04                	cmp    al,0x4
c0005061:	0f 85 97 00 00 00    	jne    c00050fe <f_open+0x1a7>
c0005067:	8d 42 10             	lea    eax,[edx+0x10]
c000506a:	89 13                	mov    DWORD PTR [ebx],edx
c000506c:	89 da                	mov    edx,ebx
c000506e:	e8 80 fd ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0005073:	31 d2                	xor    edx,edx
c0005075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005079:	b9 1e 00 00 00       	mov    ecx,0x1e
c000507e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005081:	83 c0 02             	add    eax,0x2
c0005084:	e8 32 cc ff ff       	call   c0001cbb <mem_set>
c0005089:	b9 1a 00 00 00       	mov    ecx,0x1a
c000508e:	31 d2                	xor    edx,edx
c0005090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005094:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005097:	83 c0 26             	add    eax,0x26
c000509a:	e8 1c cc ff ff       	call   c0001cbb <mem_set>
c000509f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050a6:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050aa:	ba 00 00 21 50       	mov    edx,0x50210000
c00050af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050b2:	83 c0 08             	add    eax,0x8
c00050b5:	e8 e3 cb ff ff       	call   c0001c9d <st_dword>
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050c1:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050c5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050c9:	e8 b7 ea ff ff       	call   c0003b85 <store_xdir>
c00050ce:	89 c5                	mov    ebp,eax
c00050d0:	85 c0                	test   eax,eax
c00050d2:	0f 85 98 02 00 00    	jne    c0005370 <f_open+0x419>
c00050d8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050db:	85 d2                	test   edx,edx
c00050dd:	0f 84 db 00 00 00    	je     c00051be <f_open+0x267>
c00050e3:	31 c9                	xor    ecx,ecx
c00050e5:	89 d8                	mov    eax,ebx
c00050e7:	e8 8e e3 ff ff       	call   c000347a <remove_chain>
c00050ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050f0:	89 c5                	mov    ebp,eax
c00050f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00050f5:	48                   	dec    eax
c00050f6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00050f9:	e9 b8 00 00 00       	jmp    c00051b6 <f_open+0x25f>
c00050fe:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005102:	89 ea                	mov    edx,ebp
c0005104:	e8 99 fc ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005109:	ba 00 00 21 50       	mov    edx,0x50210000
c000510e:	89 c7                	mov    edi,eax
c0005110:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005113:	e8 85 cb ff ff       	call   c0001c9d <st_dword>
c0005118:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000511c:	31 c9                	xor    ecx,ecx
c000511e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005122:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005126:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000512a:	e8 9c fc ff ff       	call   c0004dcb <st_clust.isra.1>
c000512f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005133:	31 d2                	xor    edx,edx
c0005135:	83 c0 1c             	add    eax,0x1c
c0005138:	e8 60 cb ff ff       	call   c0001c9d <st_dword>
c000513d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005141:	85 ff                	test   edi,edi
c0005143:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005147:	74 75                	je     c00051be <f_open+0x267>
c0005149:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000514d:	31 c9                	xor    ecx,ecx
c000514f:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005152:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005155:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005159:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000515d:	89 fa                	mov    edx,edi
c000515f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005163:	e8 12 e3 ff ff       	call   c000347a <remove_chain>
c0005168:	89 c5                	mov    ebp,eax
c000516a:	85 c0                	test   eax,eax
c000516c:	0f 85 fe 01 00 00    	jne    c0005370 <f_open+0x419>
c0005172:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005176:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000517a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517e:	4f                   	dec    edi
c000517f:	e8 81 d2 ff ff       	call   c0002405 <move_window>
c0005184:	89 c5                	mov    ebp,eax
c0005186:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000518a:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c000518d:	eb 27                	jmp    c00051b6 <f_open+0x25f>
c000518f:	85 ed                	test   ebp,ebp
c0005191:	0f 85 d9 01 00 00    	jne    c0005370 <f_open+0x419>
c0005197:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c000519b:	bd 04 00 00 00       	mov    ebp,0x4
c00051a0:	a8 10                	test   al,0x10
c00051a2:	0f 85 c8 01 00 00    	jne    c0005370 <f_open+0x419>
c00051a8:	83 e7 02             	and    edi,0x2
c00051ab:	74 11                	je     c00051be <f_open+0x267>
c00051ad:	bd 07 00 00 00       	mov    ebp,0x7
c00051b2:	a8 01                	test   al,0x1
c00051b4:	eb 02                	jmp    c00051b8 <f_open+0x261>
c00051b6:	85 ed                	test   ebp,ebp
c00051b8:	0f 85 b2 01 00 00    	jne    c0005370 <f_open+0x419>
c00051be:	f7 c6 08 00 00 00    	test   esi,0x8
c00051c4:	74 03                	je     c00051c9 <f_open+0x272>
c00051c6:	83 ce 40             	or     esi,0x40
c00051c9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00051cd:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00051d0:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00051d3:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c00051d6:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c00051d9:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00051dd:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c00051e0:	8a 02                	mov    al,BYTE PTR [edx]
c00051e2:	3c 04                	cmp    al,0x4
c00051e4:	75 2a                	jne    c0005210 <f_open+0x2b9>
c00051e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00051ea:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c00051ef:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00051f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00051f6:	30 c0                	xor    al,al
c00051f8:	09 c8                	or     eax,ecx
c00051fa:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c00051fd:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005201:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005204:	8d 42 10             	lea    eax,[edx+0x10]
c0005207:	89 da                	mov    edx,ebx
c0005209:	e8 e5 fb ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000520e:	eb 1c                	jmp    c000522c <f_open+0x2d5>
c0005210:	89 fa                	mov    edx,edi
c0005212:	e8 8b fb ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005217:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000521a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000521d:	e8 12 ca ff ff       	call   c0001c34 <ld_dword>
c0005222:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005229:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000522c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005230:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005237:	89 03                	mov    DWORD PTR [ebx],eax
c0005239:	31 d2                	xor    edx,edx
c000523b:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000523f:	b9 00 02 00 00       	mov    ecx,0x200
c0005244:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005248:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000524c:	89 f0                	mov    eax,esi
c000524e:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005255:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005258:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000525f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005262:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005269:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005270:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005274:	e8 42 ca ff ff       	call   c0001cbb <mem_set>
c0005279:	83 e6 20             	and    esi,0x20
c000527c:	75 07                	jne    c0005285 <f_open+0x32e>
c000527e:	31 ed                	xor    ebp,ebp
c0005280:	e9 eb 00 00 00       	jmp    c0005370 <f_open+0x419>
c0005285:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005288:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000528b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000528f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005297:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000529b:	74 e1                	je     c000527e <f_open+0x327>
c000529d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052a5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052a8:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052af:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052b2:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052b6:	31 ff                	xor    edi,edi
c00052b8:	c1 e5 09             	shl    ebp,0x9
c00052bb:	89 ee                	mov    esi,ebp
c00052bd:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052c1:	89 f8                	mov    eax,edi
c00052c3:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00052c7:	73 22                	jae    c00052eb <f_open+0x394>
c00052c9:	89 d8                	mov    eax,ebx
c00052cb:	e8 bd dc ff ff       	call   c0002f8d <get_fat>
c00052d0:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00052d4:	89 c2                	mov    edx,eax
c00052d6:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00052da:	83 f8 01             	cmp    eax,0x1
c00052dd:	76 10                	jbe    c00052ef <f_open+0x398>
c00052df:	83 f8 ff             	cmp    eax,0xffffffff
c00052e2:	75 d9                	jne    c00052bd <f_open+0x366>
c00052e4:	bd 01 00 00 00       	mov    ebp,0x1
c00052e9:	eb 09                	jmp    c00052f4 <f_open+0x39d>
c00052eb:	31 ed                	xor    ebp,ebp
c00052ed:	eb 05                	jmp    c00052f4 <f_open+0x39d>
c00052ef:	bd 02 00 00 00       	mov    ebp,0x2
c00052f4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00052f7:	85 ed                	test   ebp,ebp
c00052f9:	75 75                	jne    c0005370 <f_open+0x419>
c00052fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052ff:	25 ff 01 00 00       	and    eax,0x1ff
c0005304:	0f 84 74 ff ff ff    	je     c000527e <f_open+0x327>
c000530a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000530e:	bd 02 00 00 00       	mov    ebp,0x2
c0005313:	89 c8                	mov    eax,ecx
c0005315:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005319:	e8 a2 cb ff ff       	call   c0001ec0 <clst2sect>
c000531e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005322:	89 d7                	mov    edi,edx
c0005324:	09 c7                	or     edi,eax
c0005326:	74 48                	je     c0005370 <f_open+0x419>
c0005328:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000532c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005330:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005338:	0f ac fe 09          	shrd   esi,edi,0x9
c000533c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005340:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005344:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005347:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000534b:	83 ec 0c             	sub    esp,0xc
c000534e:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005351:	6a 01                	push   0x1
c0005353:	52                   	push   edx
c0005354:	50                   	push   eax
c0005355:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005359:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000535d:	50                   	push   eax
c000535e:	e8 79 c8 ff ff       	call   c0001bdc <disk_read>
c0005363:	83 c4 20             	add    esp,0x20
c0005366:	85 c0                	test   eax,eax
c0005368:	0f 95 c0             	setne  al
c000536b:	0f b6 c0             	movzx  eax,al
c000536e:	89 c5                	mov    ebp,eax
c0005370:	83 ec 0c             	sub    esp,0xc
c0005373:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005377:	e8 2a 33 00 00       	call   c00086a6 <ff_memfree>
c000537c:	83 c4 10             	add    esp,0x10
c000537f:	85 ed                	test   ebp,ebp
c0005381:	74 06                	je     c0005389 <f_open+0x432>
c0005383:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005389:	83 c4 7c             	add    esp,0x7c
c000538c:	89 e8                	mov    eax,ebp
c000538e:	5b                   	pop    ebx
c000538f:	5e                   	pop    esi
c0005390:	5f                   	pop    edi
c0005391:	5d                   	pop    ebp
c0005392:	c3                   	ret    

c0005393 <f_read>:
c0005393:	55                   	push   ebp
c0005394:	57                   	push   edi
c0005395:	56                   	push   esi
c0005396:	53                   	push   ebx
c0005397:	83 ec 2c             	sub    esp,0x2c
c000539a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000539e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053ac:	89 d8                	mov    eax,ebx
c00053ae:	e8 77 cf ff ff       	call   c000232a <validate>
c00053b3:	89 c5                	mov    ebp,eax
c00053b5:	85 c0                	test   eax,eax
c00053b7:	0f 85 4c 02 00 00    	jne    c0005609 <f_read+0x276>
c00053bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	0f 85 40 02 00 00    	jne    c0005609 <f_read+0x276>
c00053c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00053cd:	0f 84 31 02 00 00    	je     c0005604 <f_read+0x271>
c00053d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00053d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00053d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00053dc:	bf 00 00 00 00       	mov    edi,0x0
c00053e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00053e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00053e8:	89 d1                	mov    ecx,edx
c00053ea:	19 f9                	sbb    ecx,edi
c00053ec:	0f 83 cf 00 00 00    	jae    c00054c1 <f_read+0x12e>
c00053f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053f6:	e9 c6 00 00 00       	jmp    c00054c1 <f_read+0x12e>
c00053fb:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053fe:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005401:	89 d0                	mov    eax,edx
c0005403:	25 ff 01 00 00       	and    eax,0x1ff
c0005408:	0f 85 c9 01 00 00    	jne    c00055d7 <f_read+0x244>
c000540e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005412:	89 d6                	mov    esi,edx
c0005414:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005418:	89 cf                	mov    edi,ecx
c000541a:	48                   	dec    eax
c000541b:	0f ac fe 09          	shrd   esi,edi,0x9
c000541f:	21 f0                	and    eax,esi
c0005421:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005425:	0f 84 a6 00 00 00    	je     c00054d1 <f_read+0x13e>
c000542b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000542f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005432:	89 c8                	mov    eax,ecx
c0005434:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005437:	e8 84 ca ff ff       	call   c0001ec0 <clst2sect>
c000543c:	89 d7                	mov    edi,edx
c000543e:	09 c7                	or     edi,eax
c0005440:	0f 84 b4 00 00 00    	je     c00054fa <f_read+0x167>
c0005446:	31 ff                	xor    edi,edi
c0005448:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000544c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000544f:	01 c6                	add    esi,eax
c0005451:	11 d7                	adc    edi,edx
c0005453:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000545b:	0f 86 fd 00 00 00    	jbe    c000555e <f_read+0x1cb>
c0005461:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005465:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005469:	c1 e8 09             	shr    eax,0x9
c000546c:	89 04 24             	mov    DWORD PTR [esp],eax
c000546f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005473:	03 14 24             	add    edx,DWORD PTR [esp]
c0005476:	39 c2                	cmp    edx,eax
c0005478:	76 07                	jbe    c0005481 <f_read+0xee>
c000547a:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000547e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005481:	83 ec 0c             	sub    esp,0xc
c0005484:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005488:	57                   	push   edi
c0005489:	56                   	push   esi
c000548a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000548e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005492:	50                   	push   eax
c0005493:	e8 44 c7 ff ff       	call   c0001bdc <disk_read>
c0005498:	83 c4 20             	add    esp,0x20
c000549b:	85 c0                	test   eax,eax
c000549d:	75 6e                	jne    c000550d <f_read+0x17a>
c000549f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054a3:	78 7e                	js     c0005523 <f_read+0x190>
c00054a5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054a8:	c1 e6 09             	shl    esi,0x9
c00054ab:	31 ff                	xor    edi,edi
c00054ad:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054b9:	01 30                	add    DWORD PTR [eax],esi
c00054bb:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054be:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00054c6:	0f 85 2f ff ff ff    	jne    c00053fb <f_read+0x68>
c00054cc:	e9 38 01 00 00       	jmp    c0005609 <f_read+0x276>
c00054d1:	89 c8                	mov    eax,ecx
c00054d3:	09 d0                	or     eax,edx
c00054d5:	75 05                	jne    c00054dc <f_read+0x149>
c00054d7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054da:	eb 19                	jmp    c00054f5 <f_read+0x162>
c00054dc:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00054e0:	74 09                	je     c00054eb <f_read+0x158>
c00054e2:	89 d8                	mov    eax,ebx
c00054e4:	e8 f8 c9 ff ff       	call   c0001ee1 <clmt_clust>
c00054e9:	eb 0a                	jmp    c00054f5 <f_read+0x162>
c00054eb:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054ee:	89 d8                	mov    eax,ebx
c00054f0:	e8 98 da ff ff       	call   c0002f8d <get_fat>
c00054f5:	83 f8 01             	cmp    eax,0x1
c00054f8:	77 0e                	ja     c0005508 <f_read+0x175>
c00054fa:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00054fe:	bd 02 00 00 00       	mov    ebp,0x2
c0005503:	e9 01 01 00 00       	jmp    c0005609 <f_read+0x276>
c0005508:	83 f8 ff             	cmp    eax,0xffffffff
c000550b:	75 0e                	jne    c000551b <f_read+0x188>
c000550d:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005511:	bd 01 00 00 00       	mov    ebp,0x1
c0005516:	e9 ee 00 00 00       	jmp    c0005609 <f_read+0x276>
c000551b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000551e:	e9 08 ff ff ff       	jmp    c000542b <f_read+0x98>
c0005523:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005526:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005529:	29 f0                	sub    eax,esi
c000552b:	19 fa                	sbb    edx,edi
c000552d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005530:	89 d7                	mov    edi,edx
c0005532:	ba 00 00 00 00       	mov    edx,0x0
c0005537:	89 f9                	mov    ecx,edi
c0005539:	19 d1                	sbb    ecx,edx
c000553b:	0f 83 64 ff ff ff    	jae    c00054a5 <f_read+0x112>
c0005541:	89 c7                	mov    edi,eax
c0005543:	8d 53 50             	lea    edx,[ebx+0x50]
c0005546:	c1 e7 09             	shl    edi,0x9
c0005549:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000554d:	b9 00 02 00 00       	mov    ecx,0x200
c0005552:	01 f8                	add    eax,edi
c0005554:	e8 4d c7 ff ff       	call   c0001ca6 <mem_cpy>
c0005559:	e9 47 ff ff ff       	jmp    c00054a5 <f_read+0x112>
c000555e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005561:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005564:	89 04 24             	mov    DWORD PTR [esp],eax
c0005567:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000556b:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000556f:	75 05                	jne    c0005576 <f_read+0x1e3>
c0005571:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005574:	74 5b                	je     c00055d1 <f_read+0x23e>
c0005576:	8d 43 50             	lea    eax,[ebx+0x50]
c0005579:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000557d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005581:	79 2a                	jns    c00055ad <f_read+0x21a>
c0005583:	83 ec 0c             	sub    esp,0xc
c0005586:	6a 01                	push   0x1
c0005588:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000558c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005594:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005598:	50                   	push   eax
c0005599:	e8 54 c6 ff ff       	call   c0001bf2 <disk_write>
c000559e:	83 c4 20             	add    esp,0x20
c00055a1:	85 c0                	test   eax,eax
c00055a3:	0f 85 64 ff ff ff    	jne    c000550d <f_read+0x17a>
c00055a9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055ad:	83 ec 0c             	sub    esp,0xc
c00055b0:	6a 01                	push   0x1
c00055b2:	57                   	push   edi
c00055b3:	56                   	push   esi
c00055b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055b8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055bc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055c0:	50                   	push   eax
c00055c1:	e8 16 c6 ff ff       	call   c0001bdc <disk_read>
c00055c6:	83 c4 20             	add    esp,0x20
c00055c9:	85 c0                	test   eax,eax
c00055cb:	0f 85 3c ff ff ff    	jne    c000550d <f_read+0x17a>
c00055d1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055d4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055d7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055da:	ba 00 02 00 00       	mov    edx,0x200
c00055df:	25 ff 01 00 00       	and    eax,0x1ff
c00055e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00055e8:	29 c2                	sub    edx,eax
c00055ea:	39 d6                	cmp    esi,edx
c00055ec:	76 02                	jbe    c00055f0 <f_read+0x25d>
c00055ee:	89 d6                	mov    esi,edx
c00055f0:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00055f4:	89 f1                	mov    ecx,esi
c00055f6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055fa:	e8 a7 c6 ff ff       	call   c0001ca6 <mem_cpy>
c00055ff:	e9 a7 fe ff ff       	jmp    c00054ab <f_read+0x118>
c0005604:	bd 07 00 00 00       	mov    ebp,0x7
c0005609:	83 c4 2c             	add    esp,0x2c
c000560c:	89 e8                	mov    eax,ebp
c000560e:	5b                   	pop    ebx
c000560f:	5e                   	pop    esi
c0005610:	5f                   	pop    edi
c0005611:	5d                   	pop    ebp
c0005612:	c3                   	ret    

c0005613 <f_write>:
c0005613:	55                   	push   ebp
c0005614:	57                   	push   edi
c0005615:	56                   	push   esi
c0005616:	53                   	push   ebx
c0005617:	83 ec 2c             	sub    esp,0x2c
c000561a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000561e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005622:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005628:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000562c:	89 d8                	mov    eax,ebx
c000562e:	e8 f7 cc ff ff       	call   c000232a <validate>
c0005633:	89 c5                	mov    ebp,eax
c0005635:	85 c0                	test   eax,eax
c0005637:	0f 85 86 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c000563d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005641:	85 ed                	test   ebp,ebp
c0005643:	0f 85 7a 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c0005649:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000564d:	0f 84 6b 02 00 00    	je     c00058be <f_write+0x2ab>
c0005653:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005657:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000565a:	0f 84 43 01 00 00    	je     c00057a3 <f_write+0x190>
c0005660:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005663:	89 c1                	mov    ecx,eax
c0005665:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005669:	0f 83 34 01 00 00    	jae    c00057a3 <f_write+0x190>
c000566f:	f7 d0                	not    eax
c0005671:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005675:	e9 29 01 00 00       	jmp    c00057a3 <f_write+0x190>
c000567a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000567d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005680:	89 d0                	mov    eax,edx
c0005682:	25 ff 01 00 00       	and    eax,0x1ff
c0005687:	0f 85 00 02 00 00    	jne    c000588d <f_write+0x27a>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	89 d6                	mov    esi,edx
c0005693:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005697:	89 cf                	mov    edi,ecx
c0005699:	48                   	dec    eax
c000569a:	0f ac fe 09          	shrd   esi,edi,0x9
c000569e:	21 f0                	and    eax,esi
c00056a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056a4:	0f 84 06 01 00 00    	je     c00057b0 <f_write+0x19d>
c00056aa:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056ae:	0f 88 6e 01 00 00    	js     c0005822 <f_write+0x20f>
c00056b4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056b8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056bb:	89 c8                	mov    eax,ecx
c00056bd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056c1:	e8 fa c7 ff ff       	call   c0001ec0 <clst2sect>
c00056c6:	89 d1                	mov    ecx,edx
c00056c8:	09 c1                	or     ecx,eax
c00056ca:	0f 84 1c 01 00 00    	je     c00057ec <f_write+0x1d9>
c00056d0:	31 ff                	xor    edi,edi
c00056d2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00056d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00056da:	01 c6                	add    esi,eax
c00056dc:	11 d7                	adc    edi,edx
c00056de:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00056e6:	0f 86 63 01 00 00    	jbe    c000584f <f_write+0x23c>
c00056ec:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00056f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056f4:	c1 e8 09             	shr    eax,0x9
c00056f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00056fb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00056ff:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005703:	39 c2                	cmp    edx,eax
c0005705:	76 08                	jbe    c000570f <f_write+0xfc>
c0005707:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000570b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000570f:	83 ec 0c             	sub    esp,0xc
c0005712:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005716:	57                   	push   edi
c0005717:	56                   	push   esi
c0005718:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000571c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005720:	50                   	push   eax
c0005721:	e8 cc c4 ff ff       	call   c0001bf2 <disk_write>
c0005726:	83 c4 20             	add    esp,0x20
c0005729:	85 c0                	test   eax,eax
c000572b:	0f 85 ce 00 00 00    	jne    c00057ff <f_write+0x1ec>
c0005731:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005734:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005737:	29 f0                	sub    eax,esi
c0005739:	19 fa                	sbb    edx,edi
c000573b:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000573f:	89 d7                	mov    edi,edx
c0005741:	ba 00 00 00 00       	mov    edx,0x0
c0005746:	89 f9                	mov    ecx,edi
c0005748:	19 d1                	sbb    ecx,edx
c000574a:	73 1c                	jae    c0005768 <f_write+0x155>
c000574c:	89 c7                	mov    edi,eax
c000574e:	b9 00 02 00 00       	mov    ecx,0x200
c0005753:	c1 e7 09             	shl    edi,0x9
c0005756:	8d 43 50             	lea    eax,[ebx+0x50]
c0005759:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000575d:	89 fa                	mov    edx,edi
c000575f:	e8 42 c5 ff ff       	call   c0001ca6 <mem_cpy>
c0005764:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005768:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000576c:	c1 e6 09             	shl    esi,0x9
c000576f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005773:	31 ff                	xor    edi,edi
c0005775:	01 30                	add    DWORD PTR [eax],esi
c0005777:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000577b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000577f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005782:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005785:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005788:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c000578b:	89 c1                	mov    ecx,eax
c000578d:	39 f2                	cmp    edx,esi
c000578f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005792:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005795:	19 f9                	sbb    ecx,edi
c0005797:	73 04                	jae    c000579d <f_write+0x18a>
c0005799:	89 f2                	mov    edx,esi
c000579b:	89 f8                	mov    eax,edi
c000579d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057a0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057a3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057a8:	0f 85 cc fe ff ff    	jne    c000567a <f_write+0x67>
c00057ae:	eb 2e                	jmp    c00057de <f_write+0x1cb>
c00057b0:	89 c8                	mov    eax,ecx
c00057b2:	09 d0                	or     eax,edx
c00057b4:	75 0b                	jne    c00057c1 <f_write+0x1ae>
c00057b6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057b9:	31 d2                	xor    edx,edx
c00057bb:	85 c0                	test   eax,eax
c00057bd:	75 28                	jne    c00057e7 <f_write+0x1d4>
c00057bf:	eb 12                	jmp    c00057d3 <f_write+0x1c0>
c00057c1:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057c5:	74 09                	je     c00057d0 <f_write+0x1bd>
c00057c7:	89 d8                	mov    eax,ebx
c00057c9:	e8 13 c7 ff ff       	call   c0001ee1 <clmt_clust>
c00057ce:	eb 0a                	jmp    c00057da <f_write+0x1c7>
c00057d0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00057d3:	89 d8                	mov    eax,ebx
c00057d5:	e8 a1 da ff ff       	call   c000327b <create_chain>
c00057da:	85 c0                	test   eax,eax
c00057dc:	75 09                	jne    c00057e7 <f_write+0x1d4>
c00057de:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00057e2:	e9 dc 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057e7:	83 f8 01             	cmp    eax,0x1
c00057ea:	75 0e                	jne    c00057fa <f_write+0x1e7>
c00057ec:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00057f0:	bd 02 00 00 00       	mov    ebp,0x2
c00057f5:	e9 c9 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057fa:	83 f8 ff             	cmp    eax,0xffffffff
c00057fd:	75 0e                	jne    c000580d <f_write+0x1fa>
c00057ff:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005803:	bd 01 00 00 00       	mov    ebp,0x1
c0005808:	e9 b6 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c000580d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005810:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005814:	0f 85 90 fe ff ff    	jne    c00056aa <f_write+0x97>
c000581a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000581d:	e9 88 fe ff ff       	jmp    c00056aa <f_write+0x97>
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	8d 43 50             	lea    eax,[ebx+0x50]
c0005828:	6a 01                	push   0x1
c000582a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000582d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005830:	50                   	push   eax
c0005831:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005835:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005839:	50                   	push   eax
c000583a:	e8 b3 c3 ff ff       	call   c0001bf2 <disk_write>
c000583f:	83 c4 20             	add    esp,0x20
c0005842:	85 c0                	test   eax,eax
c0005844:	75 b9                	jne    c00057ff <f_write+0x1ec>
c0005846:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000584a:	e9 65 fe ff ff       	jmp    c00056b4 <f_write+0xa1>
c000584f:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005852:	75 05                	jne    c0005859 <f_write+0x246>
c0005854:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005857:	74 2e                	je     c0005887 <f_write+0x274>
c0005859:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000585c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000585f:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005862:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005865:	73 20                	jae    c0005887 <f_write+0x274>
c0005867:	83 ec 0c             	sub    esp,0xc
c000586a:	8d 43 50             	lea    eax,[ebx+0x50]
c000586d:	6a 01                	push   0x1
c000586f:	57                   	push   edi
c0005870:	56                   	push   esi
c0005871:	50                   	push   eax
c0005872:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005876:	50                   	push   eax
c0005877:	e8 60 c3 ff ff       	call   c0001bdc <disk_read>
c000587c:	83 c4 20             	add    esp,0x20
c000587f:	85 c0                	test   eax,eax
c0005881:	0f 85 78 ff ff ff    	jne    c00057ff <f_write+0x1ec>
c0005887:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000588a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000588d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005890:	ba 00 02 00 00       	mov    edx,0x200
c0005895:	25 ff 01 00 00       	and    eax,0x1ff
c000589a:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000589e:	29 c2                	sub    edx,eax
c00058a0:	39 d6                	cmp    esi,edx
c00058a2:	76 02                	jbe    c00058a6 <f_write+0x293>
c00058a4:	89 d6                	mov    esi,edx
c00058a6:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058aa:	89 f1                	mov    ecx,esi
c00058ac:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058b0:	e8 f1 c3 ff ff       	call   c0001ca6 <mem_cpy>
c00058b5:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058b9:	e9 b1 fe ff ff       	jmp    c000576f <f_write+0x15c>
c00058be:	bd 07 00 00 00       	mov    ebp,0x7
c00058c3:	83 c4 2c             	add    esp,0x2c
c00058c6:	89 e8                	mov    eax,ebp
c00058c8:	5b                   	pop    ebx
c00058c9:	5e                   	pop    esi
c00058ca:	5f                   	pop    edi
c00058cb:	5d                   	pop    ebp
c00058cc:	c3                   	ret    

c00058cd <f_sync>:
c00058cd:	56                   	push   esi
c00058ce:	53                   	push   ebx
c00058cf:	83 ec 64             	sub    esp,0x64
c00058d2:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00058d6:	8d 54 24 10          	lea    edx,[esp+0x10]
c00058da:	89 d8                	mov    eax,ebx
c00058dc:	e8 49 ca ff ff       	call   c000232a <validate>
c00058e1:	85 c0                	test   eax,eax
c00058e3:	0f 85 ba 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c00058e9:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00058ec:	f6 c2 40             	test   dl,0x40
c00058ef:	0f 84 ae 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c00058f5:	84 d2                	test   dl,dl
c00058f7:	79 33                	jns    c000592c <f_sync+0x5f>
c00058f9:	83 ec 0c             	sub    esp,0xc
c00058fc:	8d 43 50             	lea    eax,[ebx+0x50]
c00058ff:	6a 01                	push   0x1
c0005901:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005904:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005907:	50                   	push   eax
c0005908:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000590c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005910:	50                   	push   eax
c0005911:	e8 dc c2 ff ff       	call   c0001bf2 <disk_write>
c0005916:	83 c4 20             	add    esp,0x20
c0005919:	89 c2                	mov    edx,eax
c000591b:	b8 01 00 00 00       	mov    eax,0x1
c0005920:	85 d2                	test   edx,edx
c0005922:	0f 85 7b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005928:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000592c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005930:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005933:	0f 85 11 01 00 00    	jne    c0005a4a <f_sync+0x17d>
c0005939:	89 d8                	mov    eax,ebx
c000593b:	e8 13 d6 ff ff       	call   c0002f53 <fill_first_frag>
c0005940:	85 c0                	test   eax,eax
c0005942:	0f 85 5b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005948:	83 c9 ff             	or     ecx,0xffffffff
c000594b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000594e:	89 d8                	mov    eax,ebx
c0005950:	e8 c9 d5 ff ff       	call   c0002f1e <fill_last_frag>
c0005955:	85 c0                	test   eax,eax
c0005957:	0f 85 46 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c000595d:	83 ec 0c             	sub    esp,0xc
c0005960:	68 60 04 00 00       	push   0x460
c0005965:	e8 26 2d 00 00       	call   c0008690 <ff_memalloc>
c000596a:	83 c4 10             	add    esp,0x10
c000596d:	89 c6                	mov    esi,eax
c000596f:	b8 11 00 00 00       	mov    eax,0x11
c0005974:	85 f6                	test   esi,esi
c0005976:	0f 84 27 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c000597c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005980:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005986:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005989:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000598c:	89 da                	mov    edx,ebx
c000598e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005992:	e8 af df ff ff       	call   c0003946 <load_obj_xdir>
c0005997:	85 c0                	test   eax,eax
c0005999:	0f 85 95 00 00 00    	jne    c0005a34 <f_sync+0x167>
c000599f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059a6:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059aa:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059ad:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059b0:	83 ca 01             	or     edx,0x1
c00059b3:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059b6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059bc:	83 c0 34             	add    eax,0x34
c00059bf:	e8 d9 c2 ff ff       	call   c0001c9d <st_dword>
c00059c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059ce:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059d1:	83 c0 38             	add    eax,0x38
c00059d4:	e8 c7 c2 ff ff       	call   c0001ca0 <st_qword>
c00059d9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059e6:	83 c0 28             	add    eax,0x28
c00059e9:	e8 b2 c2 ff ff       	call   c0001ca0 <st_qword>
c00059ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059f2:	ba 00 00 21 50       	mov    edx,0x50210000
c00059f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059fa:	83 c0 0c             	add    eax,0xc
c00059fd:	e8 9b c2 ff ff       	call   c0001c9d <st_dword>
c0005a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a06:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a09:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a0d:	31 d2                	xor    edx,edx
c0005a0f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a12:	83 c0 10             	add    eax,0x10
c0005a15:	e8 83 c2 ff ff       	call   c0001c9d <st_dword>
c0005a1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a1e:	e8 62 e1 ff ff       	call   c0003b85 <store_xdir>
c0005a23:	85 c0                	test   eax,eax
c0005a25:	75 0d                	jne    c0005a34 <f_sync+0x167>
c0005a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2b:	e8 00 eb ff ff       	call   c0004530 <sync_fs>
c0005a30:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a38:	83 ec 0c             	sub    esp,0xc
c0005a3b:	56                   	push   esi
c0005a3c:	e8 65 2c 00 00       	call   c00086a6 <ff_memfree>
c0005a41:	83 c4 10             	add    esp,0x10
c0005a44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a48:	eb 59                	jmp    c0005aa3 <f_sync+0x1d6>
c0005a4a:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a4d:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a50:	e8 b0 c9 ff ff       	call   c0002405 <move_window>
c0005a55:	85 c0                	test   eax,eax
c0005a57:	75 4a                	jne    c0005aa3 <f_sync+0x1d6>
c0005a59:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a5c:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a60:	89 f2                	mov    edx,esi
c0005a62:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005a67:	e8 5f f3 ff ff       	call   c0004dcb <st_clust.isra.1>
c0005a6c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6f:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005a72:	e8 26 c2 ff ff       	call   c0001c9d <st_dword>
c0005a77:	8d 46 16             	lea    eax,[esi+0x16]
c0005a7a:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a7f:	e8 19 c2 ff ff       	call   c0001c9d <st_dword>
c0005a84:	8d 46 12             	lea    eax,[esi+0x12]
c0005a87:	31 d2                	xor    edx,edx
c0005a89:	e8 0b c2 ff ff       	call   c0001c99 <st_word>
c0005a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a92:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a9a:	e8 91 ea ff ff       	call   c0004530 <sync_fs>
c0005a9f:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005aa3:	83 c4 64             	add    esp,0x64
c0005aa6:	5b                   	pop    ebx
c0005aa7:	5e                   	pop    esi
c0005aa8:	c3                   	ret    

c0005aa9 <f_close>:
c0005aa9:	53                   	push   ebx
c0005aaa:	83 ec 24             	sub    esp,0x24
c0005aad:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005ab1:	53                   	push   ebx
c0005ab2:	e8 16 fe ff ff       	call   c00058cd <f_sync>
c0005ab7:	83 c4 10             	add    esp,0x10
c0005aba:	85 c0                	test   eax,eax
c0005abc:	75 15                	jne    c0005ad3 <f_close+0x2a>
c0005abe:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 61 c8 ff ff       	call   c000232a <validate>
c0005ac9:	85 c0                	test   eax,eax
c0005acb:	75 06                	jne    c0005ad3 <f_close+0x2a>
c0005acd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ad3:	83 c4 18             	add    esp,0x18
c0005ad6:	5b                   	pop    ebx
c0005ad7:	c3                   	ret    

c0005ad8 <f_lseek>:
c0005ad8:	55                   	push   ebp
c0005ad9:	57                   	push   edi
c0005ada:	56                   	push   esi
c0005adb:	53                   	push   ebx
c0005adc:	83 ec 3c             	sub    esp,0x3c
c0005adf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005ae3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005ae7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005aeb:	89 04 24             	mov    DWORD PTR [esp],eax
c0005aee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005af2:	89 d8                	mov    eax,ebx
c0005af4:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005af8:	e8 2d c8 ff ff       	call   c000232a <validate>
c0005afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b01:	85 c0                	test   eax,eax
c0005b03:	0f 85 7a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b09:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b0d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b11:	85 c0                	test   eax,eax
c0005b13:	0f 85 6a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b1d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b20:	74 0c                	je     c0005b2e <f_lseek+0x56>
c0005b22:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b25:	85 c0                	test   eax,eax
c0005b27:	75 1f                	jne    c0005b48 <f_lseek+0x70>
c0005b29:	e9 b5 01 00 00       	jmp    c0005ce3 <f_lseek+0x20b>
c0005b2e:	83 c9 ff             	or     ecx,0xffffffff
c0005b31:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b34:	89 d8                	mov    eax,ebx
c0005b36:	e8 e3 d3 ff ff       	call   c0002f1e <fill_last_frag>
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	74 e3                	je     c0005b22 <f_lseek+0x4a>
c0005b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b43:	e9 3b 04 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005b48:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b4d:	0f 85 ac 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b53:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b57:	0f 85 a2 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b5d:	8d 78 04             	lea    edi,[eax+0x4]
c0005b60:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b63:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b65:	be 02 00 00 00       	mov    esi,0x2
c0005b6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b6e:	85 ed                	test   ebp,ebp
c0005b70:	74 73                	je     c0005be5 <f_lseek+0x10d>
c0005b72:	89 e9                	mov    ecx,ebp
c0005b74:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005b7b:	ff 04 24             	inc    DWORD PTR [esp]
c0005b7e:	89 ca                	mov    edx,ecx
c0005b80:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005b84:	89 d8                	mov    eax,ebx
c0005b86:	e8 02 d4 ff ff       	call   c0002f8d <get_fat>
c0005b8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005b8f:	83 f8 01             	cmp    eax,0x1
c0005b92:	77 11                	ja     c0005ba5 <f_lseek+0xcd>
c0005b94:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005b98:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ba0:	e9 de 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005ba5:	83 f8 ff             	cmp    eax,0xffffffff
c0005ba8:	75 11                	jne    c0005bbb <f_lseek+0xe3>
c0005baa:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bae:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bb6:	e9 c8 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bbb:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bbe:	89 c1                	mov    ecx,eax
c0005bc0:	39 c2                	cmp    edx,eax
c0005bc2:	74 b7                	je     c0005b7b <f_lseek+0xa3>
c0005bc4:	83 c6 02             	add    esi,0x2
c0005bc7:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005bcb:	72 0b                	jb     c0005bd8 <f_lseek+0x100>
c0005bcd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005bd0:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005bd3:	89 0f                	mov    DWORD PTR [edi],ecx
c0005bd5:	83 c7 08             	add    edi,0x8
c0005bd8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bdc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bdf:	76 04                	jbe    c0005be5 <f_lseek+0x10d>
c0005be1:	89 c5                	mov    ebp,eax
c0005be3:	eb 8d                	jmp    c0005b72 <f_lseek+0x9a>
c0005be5:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005be8:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005bec:	89 30                	mov    DWORD PTR [eax],esi
c0005bee:	0f 87 87 03 00 00    	ja     c0005f7b <f_lseek+0x4a3>
c0005bf4:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005bfa:	e9 84 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bff:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c02:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c11:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c18:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c1c:	73 0f                	jae    c0005c2d <f_lseek+0x155>
c0005c1e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c21:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c35:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c38:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c3f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c43:	0f 84 3a 03 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c49:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c4d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c51:	83 c6 ff             	add    esi,0xffffffff
c0005c54:	89 d8                	mov    eax,ebx
c0005c56:	83 d7 ff             	adc    edi,0xffffffff
c0005c59:	89 f2                	mov    edx,esi
c0005c5b:	89 f9                	mov    ecx,edi
c0005c5d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c61:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c64:	e8 78 c2 ff ff       	call   c0001ee1 <clmt_clust>
c0005c69:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c6d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c70:	89 c2                	mov    edx,eax
c0005c72:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005c76:	89 c8                	mov    eax,ecx
c0005c78:	e8 43 c2 ff ff       	call   c0001ec0 <clst2sect>
c0005c7d:	89 d7                	mov    edi,edx
c0005c7f:	09 c7                	or     edi,eax
c0005c81:	0f 84 0d ff ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005c87:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005c8b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005c91:	0f 84 ec 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c97:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c9b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005c9f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ca2:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ca6:	0f ac fe 09          	shrd   esi,edi,0x9
c0005caa:	4d                   	dec    ebp
c0005cab:	31 ff                	xor    edi,edi
c0005cad:	21 ee                	and    esi,ebp
c0005caf:	01 c6                	add    esi,eax
c0005cb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cb4:	11 d7                	adc    edi,edx
c0005cb6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cb9:	39 fa                	cmp    edx,edi
c0005cbb:	75 08                	jne    c0005cc5 <f_lseek+0x1ed>
c0005cbd:	39 f0                	cmp    eax,esi
c0005cbf:	0f 84 be 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005cc5:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005cc8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ccc:	0f 89 80 02 00 00    	jns    c0005f52 <f_lseek+0x47a>
c0005cd2:	83 ec 0c             	sub    esp,0xc
c0005cd5:	6a 01                	push   0x1
c0005cd7:	52                   	push   edx
c0005cd8:	50                   	push   eax
c0005cd9:	55                   	push   ebp
c0005cda:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005cde:	e9 5a 02 00 00       	jmp    c0005f3d <f_lseek+0x465>
c0005ce3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ce7:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005cea:	74 16                	je     c0005d02 <f_lseek+0x22a>
c0005cec:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005cf1:	76 0f                	jbe    c0005d02 <f_lseek+0x22a>
c0005cf3:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005cfa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d05:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d08:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d0b:	89 c7                	mov    edi,eax
c0005d0d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d11:	73 0d                	jae    c0005d20 <f_lseek+0x248>
c0005d13:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d17:	75 07                	jne    c0005d20 <f_lseek+0x248>
c0005d19:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d20:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d23:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d26:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d2a:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d31:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d38:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d3b:	75 09                	jne    c0005d46 <f_lseek+0x26e>
c0005d3d:	31 f6                	xor    esi,esi
c0005d3f:	31 ff                	xor    edi,edi
c0005d41:	e9 af 01 00 00       	jmp    c0005ef5 <f_lseek+0x41d>
c0005d46:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d4a:	89 d7                	mov    edi,edx
c0005d4c:	c1 e1 09             	shl    ecx,0x9
c0005d4f:	09 c7                	or     edi,eax
c0005d51:	89 cd                	mov    ebp,ecx
c0005d53:	74 6d                	je     c0005dc2 <f_lseek+0x2ea>
c0005d55:	83 c0 ff             	add    eax,0xffffffff
c0005d58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d5c:	83 d2 ff             	adc    edx,0xffffffff
c0005d5f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d66:	83 c0 ff             	add    eax,0xffffffff
c0005d69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005d6d:	83 d2 ff             	adc    edx,0xffffffff
c0005d70:	31 ff                	xor    edi,edi
c0005d72:	57                   	push   edi
c0005d73:	51                   	push   ecx
c0005d74:	52                   	push   edx
c0005d75:	50                   	push   eax
c0005d76:	e8 f9 0d 02 00       	call   c0026b74 <__udivdi3>
c0005d7b:	83 c4 10             	add    esp,0x10
c0005d7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005d86:	57                   	push   edi
c0005d87:	55                   	push   ebp
c0005d88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d90:	e8 df 0d 02 00       	call   c0026b74 <__udivdi3>
c0005d95:	83 c4 10             	add    esp,0x10
c0005d98:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005d9c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005da0:	19 d1                	sbb    ecx,edx
c0005da2:	72 1e                	jb     c0005dc2 <f_lseek+0x2ea>
c0005da4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005da8:	89 e9                	mov    ecx,ebp
c0005daa:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005dad:	f7 d9                	neg    ecx
c0005daf:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005db2:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005db6:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005db9:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dbc:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dc0:	eb 28                	jmp    c0005dea <f_lseek+0x312>
c0005dc2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dc5:	85 c0                	test   eax,eax
c0005dc7:	75 1e                	jne    c0005de7 <f_lseek+0x30f>
c0005dc9:	31 d2                	xor    edx,edx
c0005dcb:	89 d8                	mov    eax,ebx
c0005dcd:	e8 a9 d4 ff ff       	call   c000327b <create_chain>
c0005dd2:	83 f8 01             	cmp    eax,0x1
c0005dd5:	0f 84 b9 fd ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ddb:	83 f8 ff             	cmp    eax,0xffffffff
c0005dde:	0f 84 c6 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005de4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005de7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dea:	85 c0                	test   eax,eax
c0005dec:	0f 84 4b ff ff ff    	je     c0005d3d <f_lseek+0x265>
c0005df2:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005df6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005dfe:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e01:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e05:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e08:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e0b:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e0f:	0f 83 9d 00 00 00    	jae    c0005eb2 <f_lseek+0x3da>
c0005e15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e19:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e1d:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e20:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e24:	01 f2                	add    edx,esi
c0005e26:	11 f9                	adc    ecx,edi
c0005e28:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e2c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e30:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e33:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e36:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e39:	f6 c1 02             	test   cl,0x2
c0005e3c:	74 35                	je     c0005e73 <f_lseek+0x39b>
c0005e3e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e42:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e45:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e48:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e4c:	73 16                	jae    c0005e64 <f_lseek+0x38c>
c0005e4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e52:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e56:	88 ca                	mov    dl,cl
c0005e58:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e5b:	83 ca 40             	or     edx,0x40
c0005e5e:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e61:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e64:	89 c2                	mov    edx,eax
c0005e66:	89 d8                	mov    eax,ebx
c0005e68:	e8 0e d4 ff ff       	call   c000327b <create_chain>
c0005e6d:	85 c0                	test   eax,eax
c0005e6f:	75 0b                	jne    c0005e7c <f_lseek+0x3a4>
c0005e71:	eb 30                	jmp    c0005ea3 <f_lseek+0x3cb>
c0005e73:	89 c2                	mov    edx,eax
c0005e75:	89 d8                	mov    eax,ebx
c0005e77:	e8 11 d1 ff ff       	call   c0002f8d <get_fat>
c0005e7c:	83 f8 ff             	cmp    eax,0xffffffff
c0005e7f:	0f 84 25 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005e85:	83 f8 01             	cmp    eax,0x1
c0005e88:	0f 86 06 fd ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e8e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005e92:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005e95:	0f 86 f9 fc ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e9b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e9e:	e9 5b ff ff ff       	jmp    c0005dfe <f_lseek+0x326>
c0005ea3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005eaa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eb2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eb5:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005eb9:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ebc:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ebf:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ec2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ec8:	0f 84 6f fe ff ff    	je     c0005d3d <f_lseek+0x265>
c0005ece:	89 c2                	mov    edx,eax
c0005ed0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ed4:	e8 e7 bf ff ff       	call   c0001ec0 <clst2sect>
c0005ed9:	89 d7                	mov    edi,edx
c0005edb:	09 c7                	or     edi,eax
c0005edd:	0f 84 b1 fc ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ee3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ee7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005eea:	0f ac fe 09          	shrd   esi,edi,0x9
c0005eee:	c1 ef 09             	shr    edi,0x9
c0005ef1:	01 c6                	add    esi,eax
c0005ef3:	11 d7                	adc    edi,edx
c0005ef5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ef8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005efb:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005efe:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f01:	19 d1                	sbb    ecx,edx
c0005f03:	73 0a                	jae    c0005f0f <f_lseek+0x437>
c0005f05:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f08:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f0b:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f0f:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f14:	74 6d                	je     c0005f83 <f_lseek+0x4ab>
c0005f16:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f19:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f1c:	39 fa                	cmp    edx,edi
c0005f1e:	75 04                	jne    c0005f24 <f_lseek+0x44c>
c0005f20:	39 f0                	cmp    eax,esi
c0005f22:	74 5f                	je     c0005f83 <f_lseek+0x4ab>
c0005f24:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f27:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f2b:	79 25                	jns    c0005f52 <f_lseek+0x47a>
c0005f2d:	83 ec 0c             	sub    esp,0xc
c0005f30:	6a 01                	push   0x1
c0005f32:	52                   	push   edx
c0005f33:	50                   	push   eax
c0005f34:	55                   	push   ebp
c0005f35:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f39:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f3d:	50                   	push   eax
c0005f3e:	e8 af bc ff ff       	call   c0001bf2 <disk_write>
c0005f43:	83 c4 20             	add    esp,0x20
c0005f46:	85 c0                	test   eax,eax
c0005f48:	0f 85 5c fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f4e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f52:	83 ec 0c             	sub    esp,0xc
c0005f55:	6a 01                	push   0x1
c0005f57:	57                   	push   edi
c0005f58:	56                   	push   esi
c0005f59:	55                   	push   ebp
c0005f5a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f5e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f62:	50                   	push   eax
c0005f63:	e8 74 bc ff ff       	call   c0001bdc <disk_read>
c0005f68:	83 c4 20             	add    esp,0x20
c0005f6b:	85 c0                	test   eax,eax
c0005f6d:	0f 85 37 fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f73:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005f76:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005f79:	eb 08                	jmp    c0005f83 <f_lseek+0x4ab>
c0005f7b:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005f83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005f87:	83 c4 3c             	add    esp,0x3c
c0005f8a:	5b                   	pop    ebx
c0005f8b:	5e                   	pop    esi
c0005f8c:	5f                   	pop    edi
c0005f8d:	5d                   	pop    ebp
c0005f8e:	c3                   	ret    

c0005f8f <f_opendir>:
c0005f8f:	56                   	push   esi
c0005f90:	b8 09 00 00 00       	mov    eax,0x9
c0005f95:	53                   	push   ebx
c0005f96:	83 ec 24             	sub    esp,0x24
c0005f99:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005f9d:	85 db                	test   ebx,ebx
c0005f9f:	0f 84 e6 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fa5:	31 c9                	xor    ecx,ecx
c0005fa7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fab:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005faf:	e8 03 c7 ff ff       	call   c00026b7 <mount_volume>
c0005fb4:	85 c0                	test   eax,eax
c0005fb6:	0f 85 c9 00 00 00    	jne    c0006085 <f_opendir+0xf6>
c0005fbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fc0:	83 ec 0c             	sub    esp,0xc
c0005fc3:	89 03                	mov    DWORD PTR [ebx],eax
c0005fc5:	68 60 04 00 00       	push   0x460
c0005fca:	e8 c1 26 00 00       	call   c0008690 <ff_memalloc>
c0005fcf:	83 c4 10             	add    esp,0x10
c0005fd2:	89 c6                	mov    esi,eax
c0005fd4:	b8 11 00 00 00       	mov    eax,0x11
c0005fd9:	85 f6                	test   esi,esi
c0005fdb:	0f 84 aa 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fe1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fe5:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005feb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ff1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ff5:	89 d8                	mov    eax,ebx
c0005ff7:	e8 31 ee ff ff       	call   c0004e2d <follow_path>
c0005ffc:	85 c0                	test   eax,eax
c0005ffe:	75 61                	jne    c0006061 <f_opendir+0xd2>
c0006000:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006004:	78 46                	js     c000604c <f_opendir+0xbd>
c0006006:	b8 05 00 00 00       	mov    eax,0x5
c000600b:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000600f:	74 50                	je     c0006061 <f_opendir+0xd2>
c0006011:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006015:	8a 01                	mov    al,BYTE PTR [ecx]
c0006017:	3c 04                	cmp    al,0x4
c0006019:	75 26                	jne    c0006041 <f_opendir+0xb2>
c000601b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000601e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0006021:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006024:	30 d2                	xor    dl,dl
c0006026:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c000602a:	09 c2                	or     edx,eax
c000602c:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c000602f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006032:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006035:	89 da                	mov    edx,ebx
c0006037:	8d 41 10             	lea    eax,[ecx+0x10]
c000603a:	e8 b4 ed ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000603f:	eb 0b                	jmp    c000604c <f_opendir+0xbd>
c0006041:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006044:	e8 59 ed ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006049:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000604c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006050:	31 d2                	xor    edx,edx
c0006052:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006056:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000605a:	89 d8                	mov    eax,ebx
c000605c:	e8 22 d1 ff ff       	call   c0003183 <dir_sdi>
c0006061:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006065:	83 ec 0c             	sub    esp,0xc
c0006068:	56                   	push   esi
c0006069:	e8 38 26 00 00       	call   c00086a6 <ff_memfree>
c000606e:	83 c4 10             	add    esp,0x10
c0006071:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006075:	83 f8 04             	cmp    eax,0x4
c0006078:	74 06                	je     c0006080 <f_opendir+0xf1>
c000607a:	85 c0                	test   eax,eax
c000607c:	74 0d                	je     c000608b <f_opendir+0xfc>
c000607e:	eb 05                	jmp    c0006085 <f_opendir+0xf6>
c0006080:	b8 05 00 00 00       	mov    eax,0x5
c0006085:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000608b:	83 c4 24             	add    esp,0x24
c000608e:	5b                   	pop    ebx
c000608f:	5e                   	pop    esi
c0006090:	c3                   	ret    

c0006091 <f_closedir>:
c0006091:	53                   	push   ebx
c0006092:	83 ec 18             	sub    esp,0x18
c0006095:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006099:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000609d:	89 d8                	mov    eax,ebx
c000609f:	e8 86 c2 ff ff       	call   c000232a <validate>
c00060a4:	85 c0                	test   eax,eax
c00060a6:	75 06                	jne    c00060ae <f_closedir+0x1d>
c00060a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060ae:	83 c4 18             	add    esp,0x18
c00060b1:	5b                   	pop    ebx
c00060b2:	c3                   	ret    

c00060b3 <f_readdir>:
c00060b3:	57                   	push   edi
c00060b4:	56                   	push   esi
c00060b5:	53                   	push   ebx
c00060b6:	83 ec 20             	sub    esp,0x20
c00060b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060c5:	89 d8                	mov    eax,ebx
c00060c7:	e8 5e c2 ff ff       	call   c000232a <validate>
c00060cc:	85 c0                	test   eax,eax
c00060ce:	75 77                	jne    c0006147 <f_readdir+0x94>
c00060d0:	85 ff                	test   edi,edi
c00060d2:	75 0b                	jne    c00060df <f_readdir+0x2c>
c00060d4:	31 d2                	xor    edx,edx
c00060d6:	89 d8                	mov    eax,ebx
c00060d8:	e8 a6 d0 ff ff       	call   c0003183 <dir_sdi>
c00060dd:	eb 68                	jmp    c0006147 <f_readdir+0x94>
c00060df:	83 ec 0c             	sub    esp,0xc
c00060e2:	68 60 04 00 00       	push   0x460
c00060e7:	e8 a4 25 00 00       	call   c0008690 <ff_memalloc>
c00060ec:	83 c4 10             	add    esp,0x10
c00060ef:	89 c6                	mov    esi,eax
c00060f1:	b8 11 00 00 00       	mov    eax,0x11
c00060f6:	85 f6                	test   esi,esi
c00060f8:	74 4d                	je     c0006147 <f_readdir+0x94>
c00060fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060fe:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006104:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006107:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000610a:	31 d2                	xor    edx,edx
c000610c:	89 d8                	mov    eax,ebx
c000610e:	e8 80 d8 ff ff       	call   c0003993 <dir_read>
c0006113:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006118:	75 19                	jne    c0006133 <f_readdir+0x80>
c000611a:	89 fa                	mov    edx,edi
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 7e ea ff ff       	call   c0004ba1 <get_fileinfo>
c0006123:	31 d2                	xor    edx,edx
c0006125:	89 d8                	mov    eax,ebx
c0006127:	e8 af d5 ff ff       	call   c00036db <dir_next>
c000612c:	83 f8 04             	cmp    eax,0x4
c000612f:	75 02                	jne    c0006133 <f_readdir+0x80>
c0006131:	31 c0                	xor    eax,eax
c0006133:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006137:	83 ec 0c             	sub    esp,0xc
c000613a:	56                   	push   esi
c000613b:	e8 66 25 00 00       	call   c00086a6 <ff_memfree>
c0006140:	83 c4 10             	add    esp,0x10
c0006143:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006147:	83 c4 20             	add    esp,0x20
c000614a:	5b                   	pop    ebx
c000614b:	5e                   	pop    esi
c000614c:	5f                   	pop    edi
c000614d:	c3                   	ret    

c000614e <f_stat>:
c000614e:	57                   	push   edi
c000614f:	31 c9                	xor    ecx,ecx
c0006151:	56                   	push   esi
c0006152:	53                   	push   ebx
c0006153:	83 ec 50             	sub    esp,0x50
c0006156:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000615a:	8d 54 24 04          	lea    edx,[esp+0x4]
c000615e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006162:	e8 50 c5 ff ff       	call   c00026b7 <mount_volume>
c0006167:	89 c3                	mov    ebx,eax
c0006169:	85 c0                	test   eax,eax
c000616b:	75 67                	jne    c00061d4 <f_stat+0x86>
c000616d:	83 ec 0c             	sub    esp,0xc
c0006170:	bb 11 00 00 00       	mov    ebx,0x11
c0006175:	68 60 04 00 00       	push   0x460
c000617a:	e8 11 25 00 00       	call   c0008690 <ff_memalloc>
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	89 c6                	mov    esi,eax
c0006184:	85 c0                	test   eax,eax
c0006186:	74 4c                	je     c00061d4 <f_stat+0x86>
c0006188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000618c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006192:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006195:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006198:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000619c:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061a0:	e8 88 ec ff ff       	call   c0004e2d <follow_path>
c00061a5:	89 c3                	mov    ebx,eax
c00061a7:	85 c0                	test   eax,eax
c00061a9:	75 1d                	jne    c00061c8 <f_stat+0x7a>
c00061ab:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061b0:	78 11                	js     c00061c3 <f_stat+0x75>
c00061b2:	85 ff                	test   edi,edi
c00061b4:	74 12                	je     c00061c8 <f_stat+0x7a>
c00061b6:	89 fa                	mov    edx,edi
c00061b8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061bc:	e8 e0 e9 ff ff       	call   c0004ba1 <get_fileinfo>
c00061c1:	eb 05                	jmp    c00061c8 <f_stat+0x7a>
c00061c3:	bb 06 00 00 00       	mov    ebx,0x6
c00061c8:	83 ec 0c             	sub    esp,0xc
c00061cb:	56                   	push   esi
c00061cc:	e8 d5 24 00 00       	call   c00086a6 <ff_memfree>
c00061d1:	83 c4 10             	add    esp,0x10
c00061d4:	83 c4 50             	add    esp,0x50
c00061d7:	89 d8                	mov    eax,ebx
c00061d9:	5b                   	pop    ebx
c00061da:	5e                   	pop    esi
c00061db:	5f                   	pop    edi
c00061dc:	c3                   	ret    

c00061dd <f_getfree>:
c00061dd:	55                   	push   ebp
c00061de:	31 c9                	xor    ecx,ecx
c00061e0:	57                   	push   edi
c00061e1:	56                   	push   esi
c00061e2:	53                   	push   ebx
c00061e3:	83 ec 5c             	sub    esp,0x5c
c00061e6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00061ea:	8d 44 24 70          	lea    eax,[esp+0x70]
c00061ee:	e8 c4 c4 ff ff       	call   c00026b7 <mount_volume>
c00061f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061f7:	85 c0                	test   eax,eax
c00061f9:	0f 85 9d 01 00 00    	jne    c000639c <f_getfree+0x1bf>
c00061ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006203:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006207:	89 02                	mov    DWORD PTR [edx],eax
c0006209:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000620c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000620f:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006212:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006216:	39 f2                	cmp    edx,esi
c0006218:	77 0b                	ja     c0006225 <f_getfree+0x48>
c000621a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000621e:	89 10                	mov    DWORD PTR [eax],edx
c0006220:	e9 77 01 00 00       	jmp    c000639c <f_getfree+0x1bf>
c0006225:	8a 10                	mov    dl,BYTE PTR [eax]
c0006227:	80 fa 01             	cmp    dl,0x1
c000622a:	75 3a                	jne    c0006266 <f_getfree+0x89>
c000622c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006230:	be 02 00 00 00       	mov    esi,0x2
c0006235:	31 db                	xor    ebx,ebx
c0006237:	89 f2                	mov    edx,esi
c0006239:	8d 44 24 28          	lea    eax,[esp+0x28]
c000623d:	e8 4b cd ff ff       	call   c0002f8d <get_fat>
c0006242:	83 f8 ff             	cmp    eax,0xffffffff
c0006245:	0f 84 28 01 00 00    	je     c0006373 <f_getfree+0x196>
c000624b:	83 f8 01             	cmp    eax,0x1
c000624e:	0f 84 29 01 00 00    	je     c000637d <f_getfree+0x1a0>
c0006254:	83 d3 00             	adc    ebx,0x0
c0006257:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000625b:	46                   	inc    esi
c000625c:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000625f:	77 d6                	ja     c0006237 <f_getfree+0x5a>
c0006261:	e9 25 01 00 00       	jmp    c000638b <f_getfree+0x1ae>
c0006266:	80 fa 04             	cmp    dl,0x4
c0006269:	0f 85 88 00 00 00    	jne    c00062f7 <f_getfree+0x11a>
c000626f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006272:	31 ed                	xor    ebp,ebp
c0006274:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006277:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000627b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000627f:	31 db                	xor    ebx,ebx
c0006281:	85 ed                	test   ebp,ebp
c0006283:	75 3f                	jne    c00062c4 <f_getfree+0xe7>
c0006285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006289:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000628d:	83 c0 01             	add    eax,0x1
c0006290:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006294:	83 d2 00             	adc    edx,0x0
c0006297:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000629b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000629f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062a7:	e8 59 c1 ff ff       	call   c0002405 <move_window>
c00062ac:	85 c0                	test   eax,eax
c00062ae:	0f 85 d3 00 00 00    	jne    c0006387 <f_getfree+0x1aa>
c00062b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062c0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c8:	8d 4e f8             	lea    ecx,[esi-0x8]
c00062cb:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00062cf:	89 cf                	mov    edi,ecx
c00062d1:	85 f6                	test   esi,esi
c00062d3:	74 12                	je     c00062e7 <f_getfree+0x10a>
c00062d5:	88 c1                	mov    cl,al
c00062d7:	83 e1 01             	and    ecx,0x1
c00062da:	80 f9 01             	cmp    cl,0x1
c00062dd:	83 d3 00             	adc    ebx,0x0
c00062e0:	d0 e8                	shr    al,1
c00062e2:	4e                   	dec    esi
c00062e3:	39 fe                	cmp    esi,edi
c00062e5:	75 ea                	jne    c00062d1 <f_getfree+0xf4>
c00062e7:	45                   	inc    ebp
c00062e8:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00062ee:	85 f6                	test   esi,esi
c00062f0:	75 8f                	jne    c0006281 <f_getfree+0xa4>
c00062f2:	e9 94 00 00 00       	jmp    c000638b <f_getfree+0x1ae>
c00062f7:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00062fa:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00062fd:	31 f6                	xor    esi,esi
c00062ff:	31 db                	xor    ebx,ebx
c0006301:	85 f6                	test   esi,esi
c0006303:	75 1b                	jne    c0006320 <f_getfree+0x143>
c0006305:	89 d7                	mov    edi,edx
c0006307:	89 cd                	mov    ebp,ecx
c0006309:	83 c7 01             	add    edi,0x1
c000630c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006310:	83 d5 00             	adc    ebp,0x0
c0006313:	e8 ed c0 ff ff       	call   c0002405 <move_window>
c0006318:	85 c0                	test   eax,eax
c000631a:	75 6b                	jne    c0006387 <f_getfree+0x1aa>
c000631c:	89 fa                	mov    edx,edi
c000631e:	89 e9                	mov    ecx,ebp
c0006320:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006324:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006328:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000632c:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000632f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006333:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006337:	75 11                	jne    c000634a <f_getfree+0x16d>
c0006339:	e8 e9 b8 ff ff       	call   c0001c27 <ld_word>
c000633e:	66 83 f8 01          	cmp    ax,0x1
c0006342:	83 d3 00             	adc    ebx,0x0
c0006345:	83 c6 02             	add    esi,0x2
c0006348:	eb 13                	jmp    c000635d <f_getfree+0x180>
c000634a:	e8 e5 b8 ff ff       	call   c0001c34 <ld_dword>
c000634f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006354:	83 f8 01             	cmp    eax,0x1
c0006357:	83 d3 00             	adc    ebx,0x0
c000635a:	83 c6 04             	add    esi,0x4
c000635d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006363:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006367:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000636b:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000636f:	75 90                	jne    c0006301 <f_getfree+0x124>
c0006371:	eb 18                	jmp    c000638b <f_getfree+0x1ae>
c0006373:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000637b:	eb 0e                	jmp    c000638b <f_getfree+0x1ae>
c000637d:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0006385:	eb 04                	jmp    c000638b <f_getfree+0x1ae>
c0006387:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000638b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000638f:	89 18                	mov    DWORD PTR [eax],ebx
c0006391:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006395:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006398:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000639c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063a0:	83 c4 5c             	add    esp,0x5c
c00063a3:	5b                   	pop    ebx
c00063a4:	5e                   	pop    esi
c00063a5:	5f                   	pop    edi
c00063a6:	5d                   	pop    ebp
c00063a7:	c3                   	ret    

c00063a8 <f_truncate>:
c00063a8:	56                   	push   esi
c00063a9:	53                   	push   ebx
c00063aa:	83 ec 14             	sub    esp,0x14
c00063ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063b1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063b5:	89 d8                	mov    eax,ebx
c00063b7:	e8 6e bf ff ff       	call   c000232a <validate>
c00063bc:	89 c6                	mov    esi,eax
c00063be:	85 c0                	test   eax,eax
c00063c0:	0f 85 d2 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063c6:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00063ca:	85 f6                	test   esi,esi
c00063cc:	0f 85 c6 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063d2:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00063d6:	0f 84 b7 00 00 00    	je     c0006493 <f_truncate+0xeb>
c00063dc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00063df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00063e2:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00063e5:	89 d1                	mov    ecx,edx
c00063e7:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00063ea:	0f 83 a8 00 00 00    	jae    c0006498 <f_truncate+0xf0>
c00063f0:	09 c2                	or     edx,eax
c00063f2:	75 15                	jne    c0006409 <f_truncate+0x61>
c00063f4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00063f7:	31 c9                	xor    ecx,ecx
c00063f9:	89 d8                	mov    eax,ebx
c00063fb:	e8 7a d0 ff ff       	call   c000347a <remove_chain>
c0006400:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006407:	eb 35                	jmp    c000643e <f_truncate+0x96>
c0006409:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000640c:	89 d8                	mov    eax,ebx
c000640e:	e8 7a cb ff ff       	call   c0002f8d <get_fat>
c0006413:	89 c2                	mov    edx,eax
c0006415:	b8 01 00 00 00       	mov    eax,0x1
c000641a:	83 fa ff             	cmp    edx,0xffffffff
c000641d:	74 1f                	je     c000643e <f_truncate+0x96>
c000641f:	b8 02 00 00 00       	mov    eax,0x2
c0006424:	83 fa 01             	cmp    edx,0x1
c0006427:	74 15                	je     c000643e <f_truncate+0x96>
c0006429:	31 c0                	xor    eax,eax
c000642b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000642f:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006432:	76 0a                	jbe    c000643e <f_truncate+0x96>
c0006434:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006437:	89 d8                	mov    eax,ebx
c0006439:	e8 3c d0 ff ff       	call   c000347a <remove_chain>
c000643e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006441:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006444:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006447:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000644a:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000644d:	83 ca 40             	or     edx,0x40
c0006450:	85 c0                	test   eax,eax
c0006452:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006455:	75 35                	jne    c000648c <f_truncate+0xe4>
c0006457:	84 d2                	test   dl,dl
c0006459:	79 3d                	jns    c0006498 <f_truncate+0xf0>
c000645b:	83 ec 0c             	sub    esp,0xc
c000645e:	8d 43 50             	lea    eax,[ebx+0x50]
c0006461:	6a 01                	push   0x1
c0006463:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006466:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006469:	50                   	push   eax
c000646a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000646e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006472:	50                   	push   eax
c0006473:	e8 7a b7 ff ff       	call   c0001bf2 <disk_write>
c0006478:	83 c4 20             	add    esp,0x20
c000647b:	85 c0                	test   eax,eax
c000647d:	75 08                	jne    c0006487 <f_truncate+0xdf>
c000647f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006483:	31 f6                	xor    esi,esi
c0006485:	eb 11                	jmp    c0006498 <f_truncate+0xf0>
c0006487:	b8 01 00 00 00       	mov    eax,0x1
c000648c:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c000648f:	89 c6                	mov    esi,eax
c0006491:	eb 05                	jmp    c0006498 <f_truncate+0xf0>
c0006493:	be 07 00 00 00       	mov    esi,0x7
c0006498:	89 f0                	mov    eax,esi
c000649a:	83 c4 14             	add    esp,0x14
c000649d:	5b                   	pop    ebx
c000649e:	5e                   	pop    esi
c000649f:	c3                   	ret    

c00064a0 <f_unlink>:
c00064a0:	56                   	push   esi
c00064a1:	b9 02 00 00 00       	mov    ecx,0x2
c00064a6:	53                   	push   ebx
c00064a7:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064b1:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064b8:	e8 fa c1 ff ff       	call   c00026b7 <mount_volume>
c00064bd:	85 c0                	test   eax,eax
c00064bf:	0f 85 55 01 00 00    	jne    c000661a <f_unlink+0x17a>
c00064c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064c9:	83 ec 0c             	sub    esp,0xc
c00064cc:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00064d0:	68 60 04 00 00       	push   0x460
c00064d5:	e8 b6 21 00 00       	call   c0008690 <ff_memalloc>
c00064da:	83 c4 10             	add    esp,0x10
c00064dd:	89 c3                	mov    ebx,eax
c00064df:	b8 11 00 00 00       	mov    eax,0x11
c00064e4:	85 db                	test   ebx,ebx
c00064e6:	0f 84 2e 01 00 00    	je     c000661a <f_unlink+0x17a>
c00064ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00064f6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00064f9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064fc:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006503:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006507:	e8 21 e9 ff ff       	call   c0004e2d <follow_path>
c000650c:	85 c0                	test   eax,eax
c000650e:	0f 85 f2 00 00 00    	jne    c0006606 <f_unlink+0x166>
c0006514:	b8 06 00 00 00       	mov    eax,0x6
c0006519:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006521:	0f 88 df 00 00 00    	js     c0006606 <f_unlink+0x166>
c0006527:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000652c:	74 0a                	je     c0006538 <f_unlink+0x98>
c000652e:	b8 07 00 00 00       	mov    eax,0x7
c0006533:	e9 ce 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c0006538:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000653c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006540:	8a 02                	mov    al,BYTE PTR [edx]
c0006542:	3c 04                	cmp    al,0x4
c0006544:	75 12                	jne    c0006558 <f_unlink+0xb8>
c0006546:	8d 42 10             	lea    eax,[edx+0x10]
c0006549:	8d 54 24 20          	lea    edx,[esp+0x20]
c000654d:	e8 a1 e8 ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0006552:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006556:	eb 0e                	jmp    c0006566 <f_unlink+0xc6>
c0006558:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000655f:	e8 3e e8 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006564:	89 c6                	mov    esi,eax
c0006566:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000656b:	75 12                	jne    c000657f <f_unlink+0xdf>
c000656d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006571:	e8 94 d6 ff ff       	call   c0003c0a <dir_remove>
c0006576:	85 c0                	test   eax,eax
c0006578:	74 6c                	je     c00065e6 <f_unlink+0x146>
c000657a:	e9 87 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c000657f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006583:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c000658a:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006591:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006594:	75 21                	jne    c00065b7 <f_unlink+0x117>
c0006596:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000659a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000659e:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065a5:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065ac:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065b0:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065b7:	31 d2                	xor    edx,edx
c00065b9:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065c0:	e8 be cb ff ff       	call   c0003183 <dir_sdi>
c00065c5:	85 c0                	test   eax,eax
c00065c7:	75 3d                	jne    c0006606 <f_unlink+0x166>
c00065c9:	31 d2                	xor    edx,edx
c00065cb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065d2:	e8 bc d3 ff ff       	call   c0003993 <dir_read>
c00065d7:	85 c0                	test   eax,eax
c00065d9:	0f 84 4f ff ff ff    	je     c000652e <f_unlink+0x8e>
c00065df:	83 f8 04             	cmp    eax,0x4
c00065e2:	75 22                	jne    c0006606 <f_unlink+0x166>
c00065e4:	eb 87                	jmp    c000656d <f_unlink+0xcd>
c00065e6:	85 f6                	test   esi,esi
c00065e8:	75 0b                	jne    c00065f5 <f_unlink+0x155>
c00065ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065ee:	e8 3d df ff ff       	call   c0004530 <sync_fs>
c00065f3:	eb 11                	jmp    c0006606 <f_unlink+0x166>
c00065f5:	31 c9                	xor    ecx,ecx
c00065f7:	89 f2                	mov    edx,esi
c00065f9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00065fd:	e8 78 ce ff ff       	call   c000347a <remove_chain>
c0006602:	85 c0                	test   eax,eax
c0006604:	74 e4                	je     c00065ea <f_unlink+0x14a>
c0006606:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000660a:	83 ec 0c             	sub    esp,0xc
c000660d:	53                   	push   ebx
c000660e:	e8 93 20 00 00       	call   c00086a6 <ff_memfree>
c0006613:	83 c4 10             	add    esp,0x10
c0006616:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000661a:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006620:	5b                   	pop    ebx
c0006621:	5e                   	pop    esi
c0006622:	c3                   	ret    

c0006623 <f_mkdir>:
c0006623:	57                   	push   edi
c0006624:	b9 02 00 00 00       	mov    ecx,0x2
c0006629:	56                   	push   esi
c000662a:	53                   	push   ebx
c000662b:	83 c4 80             	add    esp,0xffffff80
c000662e:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006632:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006639:	e8 79 c0 ff ff       	call   c00026b7 <mount_volume>
c000663e:	89 c3                	mov    ebx,eax
c0006640:	85 c0                	test   eax,eax
c0006642:	0f 85 fe 01 00 00    	jne    c0006846 <f_mkdir+0x223>
c0006648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664c:	bb 11 00 00 00       	mov    ebx,0x11
c0006651:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006655:	83 ec 0c             	sub    esp,0xc
c0006658:	68 60 04 00 00       	push   0x460
c000665d:	e8 2e 20 00 00       	call   c0008690 <ff_memalloc>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	89 c7                	mov    edi,eax
c0006667:	85 c0                	test   eax,eax
c0006669:	0f 84 d7 01 00 00    	je     c0006846 <f_mkdir+0x223>
c000666f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006673:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006679:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000667c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000667f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006686:	8d 44 24 34          	lea    eax,[esp+0x34]
c000668a:	e8 9e e7 ff ff       	call   c0004e2d <follow_path>
c000668f:	89 c3                	mov    ebx,eax
c0006691:	85 c0                	test   eax,eax
c0006693:	74 3e                	je     c00066d3 <f_mkdir+0xb0>
c0006695:	83 f8 04             	cmp    eax,0x4
c0006698:	75 3e                	jne    c00066d8 <f_mkdir+0xb5>
c000669a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000669e:	31 d2                	xor    edx,edx
c00066a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066a8:	e8 ce cb ff ff       	call   c000327b <create_chain>
c00066ad:	89 c6                	mov    esi,eax
c00066af:	85 c0                	test   eax,eax
c00066b1:	74 0c                	je     c00066bf <f_mkdir+0x9c>
c00066b3:	bb 02 00 00 00       	mov    ebx,0x2
c00066b8:	83 f8 01             	cmp    eax,0x1
c00066bb:	74 07                	je     c00066c4 <f_mkdir+0xa1>
c00066bd:	eb 2a                	jmp    c00066e9 <f_mkdir+0xc6>
c00066bf:	bb 07 00 00 00       	mov    ebx,0x7
c00066c4:	31 c9                	xor    ecx,ecx
c00066c6:	89 f2                	mov    edx,esi
c00066c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066cc:	e8 a9 cd ff ff       	call   c000347a <remove_chain>
c00066d1:	eb 05                	jmp    c00066d8 <f_mkdir+0xb5>
c00066d3:	bb 08 00 00 00       	mov    ebx,0x8
c00066d8:	83 ec 0c             	sub    esp,0xc
c00066db:	57                   	push   edi
c00066dc:	e8 c5 1f 00 00       	call   c00086a6 <ff_memfree>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	e9 5d 01 00 00       	jmp    c0006846 <f_mkdir+0x223>
c00066e9:	bb 01 00 00 00       	mov    ebx,0x1
c00066ee:	83 f8 ff             	cmp    eax,0xffffffff
c00066f1:	74 d1                	je     c00066c4 <f_mkdir+0xa1>
c00066f3:	89 f2                	mov    edx,esi
c00066f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f9:	e8 c4 ce ff ff       	call   c00035c2 <dir_clear>
c00066fe:	89 c3                	mov    ebx,eax
c0006700:	85 c0                	test   eax,eax
c0006702:	75 c0                	jne    c00066c4 <f_mkdir+0xa1>
c0006704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006708:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000670b:	74 69                	je     c0006776 <f_mkdir+0x153>
c000670d:	b9 0b 00 00 00       	mov    ecx,0xb
c0006712:	83 c0 54             	add    eax,0x54
c0006715:	ba 20 00 00 00       	mov    edx,0x20
c000671a:	e8 9c b5 ff ff       	call   c0001cbb <mem_set>
c000671f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006723:	ba 00 00 21 50       	mov    edx,0x50210000
c0006728:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000672c:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006730:	83 c0 6a             	add    eax,0x6a
c0006733:	e8 65 b5 ff ff       	call   c0001c9d <st_dword>
c0006738:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673c:	89 f1                	mov    ecx,esi
c000673e:	8d 50 54             	lea    edx,[eax+0x54]
c0006741:	e8 85 e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006746:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674a:	b9 20 00 00 00       	mov    ecx,0x20
c000674f:	8d 50 54             	lea    edx,[eax+0x54]
c0006752:	83 c0 74             	add    eax,0x74
c0006755:	e8 4c b5 ff ff       	call   c0001ca6 <mem_cpy>
c000675a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006762:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006766:	8d 50 74             	lea    edx,[eax+0x74]
c0006769:	e8 5d e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c000676e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006772:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006776:	8d 44 24 34          	lea    eax,[esp+0x34]
c000677a:	e8 2f db ff ff       	call   c00042ae <dir_register>
c000677f:	89 c3                	mov    ebx,eax
c0006781:	85 c0                	test   eax,eax
c0006783:	0f 85 3b ff ff ff    	jne    c00066c4 <f_mkdir+0xa1>
c0006789:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006790:	75 74                	jne    c0006806 <f_mkdir+0x1e3>
c0006792:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006795:	ba 00 00 21 50       	mov    edx,0x50210000
c000679a:	83 c0 0c             	add    eax,0xc
c000679d:	e8 fb b4 ff ff       	call   c0001c9d <st_dword>
c00067a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a6:	89 f2                	mov    edx,esi
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 34             	add    eax,0x34
c00067ae:	e8 ea b4 ff ff       	call   c0001c9d <st_dword>
c00067b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067be:	c1 e2 09             	shl    edx,0x9
c00067c1:	83 c0 38             	add    eax,0x38
c00067c4:	e8 d4 b4 ff ff       	call   c0001c9d <st_dword>
c00067c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067cd:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067d1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d4:	c1 e2 09             	shl    edx,0x9
c00067d7:	83 c0 28             	add    eax,0x28
c00067da:	e8 be b4 ff ff       	call   c0001c9d <st_dword>
c00067df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067e6:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00067ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ed:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00067f1:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067f5:	e8 8b d3 ff ff       	call   c0003b85 <store_xdir>
c00067fa:	89 c3                	mov    ebx,eax
c00067fc:	85 c0                	test   eax,eax
c00067fe:	0f 85 d4 fe ff ff    	jne    c00066d8 <f_mkdir+0xb5>
c0006804:	eb 30                	jmp    c0006836 <f_mkdir+0x213>
c0006806:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000680a:	ba 00 00 21 50       	mov    edx,0x50210000
c000680f:	83 c0 16             	add    eax,0x16
c0006812:	e8 86 b4 ff ff       	call   c0001c9d <st_dword>
c0006817:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681b:	89 f1                	mov    ecx,esi
c000681d:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006821:	e8 a5 e5 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006826:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000682a:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000682e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006832:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006836:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000683a:	e8 f1 dc ff ff       	call   c0004530 <sync_fs>
c000683f:	89 c3                	mov    ebx,eax
c0006841:	e9 92 fe ff ff       	jmp    c00066d8 <f_mkdir+0xb5>
c0006846:	83 ec 80             	sub    esp,0xffffff80
c0006849:	89 d8                	mov    eax,ebx
c000684b:	5b                   	pop    ebx
c000684c:	5e                   	pop    esi
c000684d:	5f                   	pop    edi
c000684e:	c3                   	ret    

c000684f <f_rename>:
c000684f:	55                   	push   ebp
c0006850:	57                   	push   edi
c0006851:	56                   	push   esi
c0006852:	53                   	push   ebx
c0006853:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006859:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006860:	e8 a4 b9 ff ff       	call   c0002209 <get_ldnumber>
c0006865:	b9 02 00 00 00       	mov    ecx,0x2
c000686a:	8d 54 24 14          	lea    edx,[esp+0x14]
c000686e:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006875:	e8 3d be ff ff       	call   c00026b7 <mount_volume>
c000687a:	85 c0                	test   eax,eax
c000687c:	0f 85 b5 02 00 00    	jne    c0006b37 <f_rename+0x2e8>
c0006882:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006886:	83 ec 0c             	sub    esp,0xc
c0006889:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000688d:	68 60 04 00 00       	push   0x460
c0006892:	e8 f9 1d 00 00       	call   c0008690 <ff_memalloc>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	89 c3                	mov    ebx,eax
c000689c:	b8 11 00 00 00       	mov    eax,0x11
c00068a1:	85 db                	test   ebx,ebx
c00068a3:	0f 84 8e 02 00 00    	je     c0006b37 <f_rename+0x2e8>
c00068a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ad:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068b3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068b9:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068c0:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068c4:	e8 64 e5 ff ff       	call   c0004e2d <follow_path>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 52 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068d1:	b8 06 00 00 00       	mov    eax,0x6
c00068d6:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00068de:	0f 85 3f 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00068eb:	0f 85 05 01 00 00    	jne    c00069f6 <f_rename+0x1a7>
c00068f1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068f4:	b9 40 00 00 00       	mov    ecx,0x40
c00068f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00068fd:	e8 a4 b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006902:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006907:	8d 54 24 58          	lea    edx,[esp+0x58]
c000690b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006912:	e8 8f b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006917:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000691e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006925:	e8 03 e5 ff ff       	call   c0004e2d <follow_path>
c000692a:	85 c0                	test   eax,eax
c000692c:	75 29                	jne    c0006957 <f_rename+0x108>
c000692e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006932:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006939:	74 0a                	je     c0006945 <f_rename+0xf6>
c000693b:	b8 08 00 00 00       	mov    eax,0x8
c0006940:	e9 de 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c0006945:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000694c:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006953:	75 e6                	jne    c000693b <f_rename+0xec>
c0006955:	eb 09                	jmp    c0006960 <f_rename+0x111>
c0006957:	83 f8 04             	cmp    eax,0x4
c000695a:	0f 85 c3 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006960:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006967:	e8 42 d9 ff ff       	call   c00042ae <dir_register>
c000696c:	85 c0                	test   eax,eax
c000696e:	0f 85 af 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006974:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006978:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000697b:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000697e:	89 c5                	mov    ebp,eax
c0006980:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006983:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006987:	8d 46 24             	lea    eax,[esi+0x24]
c000698a:	e8 98 b2 ff ff       	call   c0001c27 <ld_word>
c000698f:	b9 40 00 00 00       	mov    ecx,0x40
c0006994:	89 c7                	mov    edi,eax
c0006996:	8d 54 24 18          	lea    edx,[esp+0x18]
c000699a:	89 f0                	mov    eax,esi
c000699c:	e8 05 b3 ff ff       	call   c0001ca6 <mem_cpy>
c00069a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069a5:	89 e9                	mov    ecx,ebp
c00069a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069aa:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069ad:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069b8:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069bb:	0f b7 d7             	movzx  edx,di
c00069be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069c1:	83 c0 24             	add    eax,0x24
c00069c4:	e8 d0 b2 ff ff       	call   c0001c99 <st_word>
c00069c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069d0:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00069d3:	a8 10                	test   al,0x10
c00069d5:	75 06                	jne    c00069dd <f_rename+0x18e>
c00069d7:	83 c8 20             	or     eax,0x20
c00069da:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00069dd:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069e4:	e8 9c d1 ff ff       	call   c0003b85 <store_xdir>
c00069e9:	85 c0                	test   eax,eax
c00069eb:	0f 84 1c 01 00 00    	je     c0006b0d <f_rename+0x2be>
c00069f1:	e9 2d 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c00069f6:	b9 20 00 00 00       	mov    ecx,0x20
c00069fb:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a02:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a06:	e8 9b b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a0b:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a10:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a14:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1b:	e8 86 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a20:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a27:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a2e:	e8 fa e3 ff ff       	call   c0004e2d <follow_path>
c0006a33:	85 c0                	test   eax,eax
c0006a35:	75 27                	jne    c0006a5e <f_rename+0x20f>
c0006a37:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a3b:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a42:	0f 85 f3 fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a48:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a4f:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a56:	0f 85 df fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a5c:	eb 09                	jmp    c0006a67 <f_rename+0x218>
c0006a5e:	83 f8 04             	cmp    eax,0x4
c0006a61:	0f 85 bc 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a67:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a6e:	e8 3b d8 ff ff       	call   c00042ae <dir_register>
c0006a73:	85 c0                	test   eax,eax
c0006a75:	0f 85 a8 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a7b:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006a82:	b9 13 00 00 00       	mov    ecx,0x13
c0006a87:	8d 46 0d             	lea    eax,[esi+0xd]
c0006a8a:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006a8e:	e8 13 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a93:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006a97:	a8 10                	test   al,0x10
c0006a99:	75 03                	jne    c0006a9e <f_rename+0x24f>
c0006a9b:	83 c8 20             	or     eax,0x20
c0006a9e:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006aa1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006aa5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aa9:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006aad:	74 5e                	je     c0006b0d <f_rename+0x2be>
c0006aaf:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006ab6:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006aba:	74 51                	je     c0006b0d <f_rename+0x2be>
c0006abc:	89 f2                	mov    edx,esi
c0006abe:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006ac2:	8a 07                	mov    al,BYTE PTR [edi]
c0006ac4:	e8 d9 e2 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006ac9:	89 c2                	mov    edx,eax
c0006acb:	89 f8                	mov    eax,edi
c0006acd:	e8 ee b3 ff ff       	call   c0001ec0 <clst2sect>
c0006ad2:	89 c6                	mov    esi,eax
c0006ad4:	89 d1                	mov    ecx,edx
c0006ad6:	b8 02 00 00 00       	mov    eax,0x2
c0006adb:	09 f2                	or     edx,esi
c0006add:	74 44                	je     c0006b23 <f_rename+0x2d4>
c0006adf:	89 f2                	mov    edx,esi
c0006ae1:	89 f8                	mov    eax,edi
c0006ae3:	e8 1d b9 ff ff       	call   c0002405 <move_window>
c0006ae8:	85 c0                	test   eax,eax
c0006aea:	75 37                	jne    c0006b23 <f_rename+0x2d4>
c0006aec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006af0:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006af4:	75 17                	jne    c0006b0d <f_rename+0x2be>
c0006af6:	8d 50 74             	lea    edx,[eax+0x74]
c0006af9:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b00:	e8 c6 e2 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006b05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b09:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b0d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b11:	e8 f4 d0 ff ff       	call   c0003c0a <dir_remove>
c0006b16:	85 c0                	test   eax,eax
c0006b18:	75 09                	jne    c0006b23 <f_rename+0x2d4>
c0006b1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b1e:	e8 0d da ff ff       	call   c0004530 <sync_fs>
c0006b23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b27:	83 ec 0c             	sub    esp,0xc
c0006b2a:	53                   	push   ebx
c0006b2b:	e8 76 1b 00 00       	call   c00086a6 <ff_memfree>
c0006b30:	83 c4 10             	add    esp,0x10
c0006b33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b37:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b3d:	5b                   	pop    ebx
c0006b3e:	5e                   	pop    esi
c0006b3f:	5f                   	pop    edi
c0006b40:	5d                   	pop    ebp
c0006b41:	c3                   	ret    

c0006b42 <f_chmod>:
c0006b42:	57                   	push   edi
c0006b43:	b9 02 00 00 00       	mov    ecx,0x2
c0006b48:	56                   	push   esi
c0006b49:	53                   	push   ebx
c0006b4a:	83 ec 60             	sub    esp,0x60
c0006b4d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b51:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b55:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b59:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b5d:	e8 55 bb ff ff       	call   c00026b7 <mount_volume>
c0006b62:	85 c0                	test   eax,eax
c0006b64:	0f 85 af 00 00 00    	jne    c0006c19 <f_chmod+0xd7>
c0006b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b6e:	83 ec 0c             	sub    esp,0xc
c0006b71:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b75:	68 60 04 00 00       	push   0x460
c0006b7a:	e8 11 1b 00 00       	call   c0008690 <ff_memalloc>
c0006b7f:	83 c4 10             	add    esp,0x10
c0006b82:	89 c6                	mov    esi,eax
c0006b84:	b8 11 00 00 00       	mov    eax,0x11
c0006b89:	85 f6                	test   esi,esi
c0006b8b:	0f 84 88 00 00 00    	je     c0006c19 <f_chmod+0xd7>
c0006b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b95:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006b9b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006b9e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ba1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ba5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ba9:	e8 7f e2 ff ff       	call   c0004e2d <follow_path>
c0006bae:	85 c0                	test   eax,eax
c0006bb0:	75 53                	jne    c0006c05 <f_chmod+0xc3>
c0006bb2:	b8 06 00 00 00       	mov    eax,0x6
c0006bb7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bbc:	75 47                	jne    c0006c05 <f_chmod+0xc3>
c0006bbe:	89 f9                	mov    ecx,edi
c0006bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc4:	83 e1 27             	and    ecx,0x27
c0006bc7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bca:	75 1d                	jne    c0006be9 <f_chmod+0xa7>
c0006bcc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bcf:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd2:	21 cb                	and    ebx,ecx
c0006bd4:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd7:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006bda:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bde:	e8 a2 cf ff ff       	call   c0003b85 <store_xdir>
c0006be3:	85 c0                	test   eax,eax
c0006be5:	75 1e                	jne    c0006c05 <f_chmod+0xc3>
c0006be7:	eb 13                	jmp    c0006bfc <f_chmod+0xba>
c0006be9:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006bed:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf0:	21 cb                	and    ebx,ecx
c0006bf2:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf5:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006bf8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c00:	e8 2b d9 ff ff       	call   c0004530 <sync_fs>
c0006c05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c09:	83 ec 0c             	sub    esp,0xc
c0006c0c:	56                   	push   esi
c0006c0d:	e8 94 1a 00 00       	call   c00086a6 <ff_memfree>
c0006c12:	83 c4 10             	add    esp,0x10
c0006c15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c19:	83 c4 60             	add    esp,0x60
c0006c1c:	5b                   	pop    ebx
c0006c1d:	5e                   	pop    esi
c0006c1e:	5f                   	pop    edi
c0006c1f:	c3                   	ret    

c0006c20 <f_utime>:
c0006c20:	56                   	push   esi
c0006c21:	b9 02 00 00 00       	mov    ecx,0x2
c0006c26:	53                   	push   ebx
c0006c27:	83 ec 64             	sub    esp,0x64
c0006c2a:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c2e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c32:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c36:	e8 7c ba ff ff       	call   c00026b7 <mount_volume>
c0006c3b:	85 c0                	test   eax,eax
c0006c3d:	0f 85 b5 00 00 00    	jne    c0006cf8 <f_utime+0xd8>
c0006c43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c47:	83 ec 0c             	sub    esp,0xc
c0006c4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c4e:	68 60 04 00 00       	push   0x460
c0006c53:	e8 38 1a 00 00       	call   c0008690 <ff_memalloc>
c0006c58:	83 c4 10             	add    esp,0x10
c0006c5b:	89 c3                	mov    ebx,eax
c0006c5d:	b8 11 00 00 00       	mov    eax,0x11
c0006c62:	85 db                	test   ebx,ebx
c0006c64:	0f 84 8e 00 00 00    	je     c0006cf8 <f_utime+0xd8>
c0006c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c6e:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006c74:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006c77:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006c7a:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c7e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c82:	e8 a6 e1 ff ff       	call   c0004e2d <follow_path>
c0006c87:	85 c0                	test   eax,eax
c0006c89:	75 59                	jne    c0006ce4 <f_utime+0xc4>
c0006c8b:	b8 06 00 00 00       	mov    eax,0x6
c0006c90:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006c95:	75 4d                	jne    c0006ce4 <f_utime+0xc4>
c0006c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c9b:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006c9f:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ca3:	c1 e2 10             	shl    edx,0x10
c0006ca6:	09 ca                	or     edx,ecx
c0006ca8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cab:	75 1a                	jne    c0006cc7 <f_utime+0xa7>
c0006cad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cb0:	83 c0 0c             	add    eax,0xc
c0006cb3:	e8 e5 af ff ff       	call   c0001c9d <st_dword>
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 c4 ce ff ff       	call   c0003b85 <store_xdir>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 1f                	jne    c0006ce4 <f_utime+0xc4>
c0006cc5:	eb 14                	jmp    c0006cdb <f_utime+0xbb>
c0006cc7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ccb:	83 c0 16             	add    eax,0x16
c0006cce:	e8 ca af ff ff       	call   c0001c9d <st_dword>
c0006cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cdf:	e8 4c d8 ff ff       	call   c0004530 <sync_fs>
c0006ce4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ce8:	83 ec 0c             	sub    esp,0xc
c0006ceb:	53                   	push   ebx
c0006cec:	e8 b5 19 00 00       	call   c00086a6 <ff_memfree>
c0006cf1:	83 c4 10             	add    esp,0x10
c0006cf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006cf8:	83 c4 64             	add    esp,0x64
c0006cfb:	5b                   	pop    ebx
c0006cfc:	5e                   	pop    esi
c0006cfd:	c3                   	ret    

c0006cfe <f_getlabel>:
c0006cfe:	55                   	push   ebp
c0006cff:	31 c9                	xor    ecx,ecx
c0006d01:	57                   	push   edi
c0006d02:	56                   	push   esi
c0006d03:	53                   	push   ebx
c0006d04:	83 ec 6c             	sub    esp,0x6c
c0006d07:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d0b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d12:	e8 a0 b9 ff ff       	call   c00026b7 <mount_volume>
c0006d17:	89 c6                	mov    esi,eax
c0006d19:	85 c0                	test   eax,eax
c0006d1b:	0f 85 c1 01 00 00    	jne    c0006ee2 <f_getlabel+0x1e4>
c0006d21:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d29:	0f 84 5f 01 00 00    	je     c0006e8e <f_getlabel+0x190>
c0006d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d33:	31 d2                	xor    edx,edx
c0006d35:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d39:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d45:	e8 39 c4 ff ff       	call   c0003183 <dir_sdi>
c0006d4a:	85 c0                	test   eax,eax
c0006d4c:	0f 85 2d 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d52:	ba 01 00 00 00       	mov    edx,0x1
c0006d57:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d5b:	e8 33 cc ff ff       	call   c0003993 <dir_read>
c0006d60:	85 c0                	test   eax,eax
c0006d62:	0f 85 17 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d6f:	74 09                	je     c0006d7a <f_getlabel+0x7c>
c0006d71:	31 db                	xor    ebx,ebx
c0006d73:	31 c9                	xor    ecx,ecx
c0006d75:	e9 c8 00 00 00       	jmp    c0006e42 <f_getlabel+0x144>
c0006d7a:	31 ed                	xor    ebp,ebp
c0006d7c:	31 db                	xor    ebx,ebx
c0006d7e:	31 ff                	xor    edi,edi
c0006d80:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d84:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006d88:	39 fa                	cmp    edx,edi
c0006d8a:	76 4b                	jbe    c0006dd7 <f_getlabel+0xd9>
c0006d8c:	47                   	inc    edi
c0006d8d:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006d90:	01 d0                	add    eax,edx
c0006d92:	e8 90 ae ff ff       	call   c0001c27 <ld_word>
c0006d97:	66 85 ed             	test   bp,bp
c0006d9a:	75 0d                	jne    c0006da9 <f_getlabel+0xab>
c0006d9c:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006da2:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006da7:	76 28                	jbe    c0006dd1 <f_getlabel+0xd3>
c0006da9:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006db0:	89 e9                	mov    ecx,ebp
c0006db2:	01 da                	add    edx,ebx
c0006db4:	c1 e1 10             	shl    ecx,0x10
c0006db7:	0f b7 c0             	movzx  eax,ax
c0006dba:	09 c8                	or     eax,ecx
c0006dbc:	b9 04 00 00 00       	mov    ecx,0x4
c0006dc1:	e8 01 b0 ff ff       	call   c0001dc7 <put_utf>
c0006dc6:	84 c0                	test   al,al
c0006dc8:	74 0b                	je     c0006dd5 <f_getlabel+0xd7>
c0006dca:	0f b6 c0             	movzx  eax,al
c0006dcd:	01 c3                	add    ebx,eax
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	89 c5                	mov    ebp,eax
c0006dd3:	eb ab                	jmp    c0006d80 <f_getlabel+0x82>
c0006dd5:	31 db                	xor    ebx,ebx
c0006dd7:	66 85 ed             	test   bp,bp
c0006dda:	74 02                	je     c0006dde <f_getlabel+0xe0>
c0006ddc:	31 db                	xor    ebx,ebx
c0006dde:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006de5:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006de9:	e9 a0 00 00 00       	jmp    c0006e8e <f_getlabel+0x190>
c0006dee:	83 ff 0b             	cmp    edi,0xb
c0006df1:	74 11                	je     c0006e04 <f_getlabel+0x106>
c0006df3:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006df8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006dfc:	8d 79 02             	lea    edi,[ecx+0x2]
c0006dff:	c1 e0 08             	shl    eax,0x8
c0006e02:	09 c2                	or     edx,eax
c0006e04:	0f b7 d2             	movzx  edx,dx
c0006e07:	50                   	push   eax
c0006e08:	50                   	push   eax
c0006e09:	68 b5 01 00 00       	push   0x1b5
c0006e0e:	52                   	push   edx
c0006e0f:	e8 39 19 00 00       	call   c000874d <ff_oem2uni>
c0006e14:	83 c4 10             	add    esp,0x10
c0006e17:	66 85 c0             	test   ax,ax
c0006e1a:	74 46                	je     c0006e62 <f_getlabel+0x164>
c0006e1c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e23:	0f b7 c0             	movzx  eax,ax
c0006e26:	01 da                	add    edx,ebx
c0006e28:	b9 04 00 00 00       	mov    ecx,0x4
c0006e2d:	e8 95 af ff ff       	call   c0001dc7 <put_utf>
c0006e32:	84 c0                	test   al,al
c0006e34:	74 2c                	je     c0006e62 <f_getlabel+0x164>
c0006e36:	0f b6 c0             	movzx  eax,al
c0006e39:	01 c3                	add    ebx,eax
c0006e3b:	83 ff 0b             	cmp    edi,0xb
c0006e3e:	74 24                	je     c0006e64 <f_getlabel+0x166>
c0006e40:	89 f9                	mov    ecx,edi
c0006e42:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e46:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e49:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e4e:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e57:	e8 9f ae ff ff       	call   c0001cfb <dbc_1st>
c0006e5c:	85 c0                	test   eax,eax
c0006e5e:	74 a4                	je     c0006e04 <f_getlabel+0x106>
c0006e60:	eb 8c                	jmp    c0006dee <f_getlabel+0xf0>
c0006e62:	31 db                	xor    ebx,ebx
c0006e64:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006e6b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006e6e:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006e75:	74 17                	je     c0006e8e <f_getlabel+0x190>
c0006e77:	4b                   	dec    ebx
c0006e78:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006e7b:	74 ee                	je     c0006e6b <f_getlabel+0x16d>
c0006e7d:	eb 0f                	jmp    c0006e8e <f_getlabel+0x190>
c0006e7f:	83 f8 04             	cmp    eax,0x4
c0006e82:	75 5c                	jne    c0006ee0 <f_getlabel+0x1e2>
c0006e84:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006e8e:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006e96:	74 4a                	je     c0006ee2 <f_getlabel+0x1e4>
c0006e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e9c:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006e9f:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ea2:	e8 5e b5 ff ff       	call   c0002405 <move_window>
c0006ea7:	89 c6                	mov    esi,eax
c0006ea9:	85 c0                	test   eax,eax
c0006eab:	75 35                	jne    c0006ee2 <f_getlabel+0x1e4>
c0006ead:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eb1:	b8 43 00 00 00       	mov    eax,0x43
c0006eb6:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006eb8:	80 f9 03             	cmp    cl,0x3
c0006ebb:	74 0f                	je     c0006ecc <f_getlabel+0x1ce>
c0006ebd:	31 c0                	xor    eax,eax
c0006ebf:	80 f9 04             	cmp    cl,0x4
c0006ec2:	0f 94 c0             	sete   al
c0006ec5:	48                   	dec    eax
c0006ec6:	83 e0 c3             	and    eax,0xffffffc3
c0006ec9:	83 c0 64             	add    eax,0x64
c0006ecc:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006ed0:	e8 5f ad ff ff       	call   c0001c34 <ld_dword>
c0006ed5:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006edc:	89 07                	mov    DWORD PTR [edi],eax
c0006ede:	eb 02                	jmp    c0006ee2 <f_getlabel+0x1e4>
c0006ee0:	89 c6                	mov    esi,eax
c0006ee2:	83 c4 6c             	add    esp,0x6c
c0006ee5:	89 f0                	mov    eax,esi
c0006ee7:	5b                   	pop    ebx
c0006ee8:	5e                   	pop    esi
c0006ee9:	5f                   	pop    edi
c0006eea:	5d                   	pop    ebp
c0006eeb:	c3                   	ret    

c0006eec <f_setlabel>:
c0006eec:	56                   	push   esi
c0006eed:	b9 02 00 00 00       	mov    ecx,0x2
c0006ef2:	53                   	push   ebx
c0006ef3:	83 ec 74             	sub    esp,0x74
c0006ef6:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006efa:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f01:	e8 b1 b7 ff ff       	call   c00026b7 <mount_volume>
c0006f06:	89 c6                	mov    esi,eax
c0006f08:	85 c0                	test   eax,eax
c0006f0a:	0f 85 41 02 00 00    	jne    c0007151 <f_setlabel+0x265>
c0006f10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f14:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f17:	0f 85 8e 00 00 00    	jne    c0006fab <f_setlabel+0xbf>
c0006f1d:	b9 16 00 00 00       	mov    ecx,0x16
c0006f22:	31 d2                	xor    edx,edx
c0006f24:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f28:	31 db                	xor    ebx,ebx
c0006f2a:	e8 8c ad ff ff       	call   c0001cbb <mem_set>
c0006f2f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f36:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f39:	0f 86 0a 01 00 00    	jbe    c0007049 <f_setlabel+0x15d>
c0006f3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f46:	e8 b6 ad ff ff       	call   c0001d01 <tchar2uni>
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f52:	76 2a                	jbe    c0006f7e <f_setlabel+0x92>
c0006f54:	83 f8 ff             	cmp    eax,0xffffffff
c0006f57:	74 05                	je     c0006f5e <f_setlabel+0x72>
c0006f59:	83 fb 09             	cmp    ebx,0x9
c0006f5c:	76 0a                	jbe    c0006f68 <f_setlabel+0x7c>
c0006f5e:	be 06 00 00 00       	mov    esi,0x6
c0006f63:	e9 e9 01 00 00       	jmp    c0007151 <f_setlabel+0x265>
c0006f68:	89 c2                	mov    edx,eax
c0006f6a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f6e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f71:	c1 ea 10             	shr    edx,0x10
c0006f74:	01 c8                	add    eax,ecx
c0006f76:	43                   	inc    ebx
c0006f77:	e8 1d ad ff ff       	call   c0001c99 <st_word>
c0006f7c:	eb 04                	jmp    c0006f82 <f_setlabel+0x96>
c0006f7e:	85 c0                	test   eax,eax
c0006f80:	74 dc                	je     c0006f5e <f_setlabel+0x72>
c0006f82:	89 f2                	mov    edx,esi
c0006f84:	b8 17 96 02 c0       	mov    eax,0xc0029617
c0006f89:	e8 5b ad ff ff       	call   c0001ce9 <chk_chr>
c0006f8e:	85 c0                	test   eax,eax
c0006f90:	75 cc                	jne    c0006f5e <f_setlabel+0x72>
c0006f92:	83 fb 0a             	cmp    ebx,0xa
c0006f95:	77 c7                	ja     c0006f5e <f_setlabel+0x72>
c0006f97:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f9a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f9e:	0f b7 d6             	movzx  edx,si
c0006fa1:	01 c8                	add    eax,ecx
c0006fa3:	43                   	inc    ebx
c0006fa4:	e8 f0 ac ff ff       	call   c0001c99 <st_word>
c0006fa9:	eb 84                	jmp    c0006f2f <f_setlabel+0x43>
c0006fab:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fb0:	ba 20 00 00 00       	mov    edx,0x20
c0006fb5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006fb9:	31 db                	xor    ebx,ebx
c0006fbb:	e8 fb ac ff ff       	call   c0001cbb <mem_set>
c0006fc0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006fc7:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006fca:	76 60                	jbe    c000702c <f_setlabel+0x140>
c0006fcc:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fd3:	e8 29 ad ff ff       	call   c0001d01 <tchar2uni>
c0006fd8:	3d ff ff 00 00       	cmp    eax,0xffff
c0006fdd:	0f 87 7b ff ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0006fe3:	83 ec 0c             	sub    esp,0xc
c0006fe6:	50                   	push   eax
c0006fe7:	e8 cd 17 00 00       	call   c00087b9 <ff_wtoupper>
c0006fec:	5a                   	pop    edx
c0006fed:	59                   	pop    ecx
c0006fee:	68 b5 01 00 00       	push   0x1b5
c0006ff3:	50                   	push   eax
c0006ff4:	e8 c4 16 00 00       	call   c00086bd <ff_uni2oem>
c0006ff9:	83 c4 10             	add    esp,0x10
c0006ffc:	89 c6                	mov    esi,eax
c0006ffe:	66 85 c0             	test   ax,ax
c0007001:	0f 84 57 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007007:	0f b7 d0             	movzx  edx,ax
c000700a:	b8 10 96 02 c0       	mov    eax,0xc0029610
c000700f:	e8 d5 ac ff ff       	call   c0001ce9 <chk_chr>
c0007014:	85 c0                	test   eax,eax
c0007016:	0f 85 42 ff ff ff    	jne    c0006f5e <f_setlabel+0x72>
c000701c:	66 81 fe ff 00       	cmp    si,0xff
c0007021:	0f 87 14 01 00 00    	ja     c000713b <f_setlabel+0x24f>
c0007027:	e9 fa 00 00 00       	jmp    c0007126 <f_setlabel+0x23a>
c000702c:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0007031:	0f 84 27 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007037:	85 db                	test   ebx,ebx
c0007039:	74 0e                	je     c0007049 <f_setlabel+0x15d>
c000703b:	8d 43 ff             	lea    eax,[ebx-0x1]
c000703e:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0007043:	75 04                	jne    c0007049 <f_setlabel+0x15d>
c0007045:	89 c3                	mov    ebx,eax
c0007047:	eb ee                	jmp    c0007037 <f_setlabel+0x14b>
c0007049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000704d:	31 d2                	xor    edx,edx
c000704f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007053:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000705b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000705f:	e8 1f c1 ff ff       	call   c0003183 <dir_sdi>
c0007064:	89 c6                	mov    esi,eax
c0007066:	85 c0                	test   eax,eax
c0007068:	0f 85 e3 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c000706e:	ba 01 00 00 00       	mov    edx,0x1
c0007073:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007077:	e8 17 c9 ff ff       	call   c0003993 <dir_read>
c000707c:	85 c0                	test   eax,eax
c000707e:	75 21                	jne    c00070a1 <f_setlabel+0x1b5>
c0007080:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007084:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007088:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c000708b:	74 5d                	je     c00070ea <f_setlabel+0x1fe>
c000708d:	85 db                	test   ebx,ebx
c000708f:	74 0b                	je     c000709c <f_setlabel+0x1b0>
c0007091:	b9 0b 00 00 00       	mov    ecx,0xb
c0007096:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000709a:	eb 70                	jmp    c000710c <f_setlabel+0x220>
c000709c:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000709f:	eb 70                	jmp    c0007111 <f_setlabel+0x225>
c00070a1:	83 f8 04             	cmp    eax,0x4
c00070a4:	75 7c                	jne    c0007122 <f_setlabel+0x236>
c00070a6:	85 db                	test   ebx,ebx
c00070a8:	0f 84 a3 00 00 00    	je     c0007151 <f_setlabel+0x265>
c00070ae:	ba 01 00 00 00       	mov    edx,0x1
c00070b3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b7:	e8 51 ca ff ff       	call   c0003b0d <dir_alloc>
c00070bc:	89 c6                	mov    esi,eax
c00070be:	85 c0                	test   eax,eax
c00070c0:	0f 85 8b 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c00070c6:	31 d2                	xor    edx,edx
c00070c8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070cc:	b9 20 00 00 00       	mov    ecx,0x20
c00070d1:	e8 e5 ab ff ff       	call   c0001cbb <mem_set>
c00070d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070da:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00070dd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070e1:	75 18                	jne    c00070fb <f_setlabel+0x20f>
c00070e3:	c6 00 83             	mov    BYTE PTR [eax],0x83
c00070e6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ea:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c00070ed:	b9 16 00 00 00       	mov    ecx,0x16
c00070f2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070f6:	83 c0 02             	add    eax,0x2
c00070f9:	eb 9b                	jmp    c0007096 <f_setlabel+0x1aa>
c00070fb:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00070ff:	b9 0b 00 00 00       	mov    ecx,0xb
c0007104:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007108:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710c:	e8 95 ab ff ff       	call   c0001ca6 <mem_cpy>
c0007111:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007115:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007119:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711d:	e8 0e d4 ff ff       	call   c0004530 <sync_fs>
c0007122:	89 c6                	mov    esi,eax
c0007124:	eb 2b                	jmp    c0007151 <f_setlabel+0x265>
c0007126:	83 fb 0a             	cmp    ebx,0xa
c0007129:	0f 87 2f fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c000712f:	89 f0                	mov    eax,esi
c0007131:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007135:	43                   	inc    ebx
c0007136:	e9 85 fe ff ff       	jmp    c0006fc0 <f_setlabel+0xd4>
c000713b:	83 fb 09             	cmp    ebx,0x9
c000713e:	0f 87 1a fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0007144:	89 f0                	mov    eax,esi
c0007146:	66 c1 e8 08          	shr    ax,0x8
c000714a:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000714e:	43                   	inc    ebx
c000714f:	eb de                	jmp    c000712f <f_setlabel+0x243>
c0007151:	89 f0                	mov    eax,esi
c0007153:	83 c4 74             	add    esp,0x74
c0007156:	5b                   	pop    ebx
c0007157:	5e                   	pop    esi
c0007158:	c3                   	ret    

c0007159 <f_expand>:
c0007159:	55                   	push   ebp
c000715a:	57                   	push   edi
c000715b:	56                   	push   esi
c000715c:	53                   	push   ebx
c000715d:	83 ec 3c             	sub    esp,0x3c
c0007160:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0007164:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007168:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000716c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007170:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007174:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007178:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c000717c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007180:	89 d8                	mov    eax,ebx
c0007182:	e8 a3 b1 ff ff       	call   c000232a <validate>
c0007187:	89 c5                	mov    ebp,eax
c0007189:	85 c0                	test   eax,eax
c000718b:	0f 85 f4 01 00 00    	jne    c0007385 <f_expand+0x22c>
c0007191:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0007195:	85 ed                	test   ebp,ebp
c0007197:	0f 85 e8 01 00 00    	jne    c0007385 <f_expand+0x22c>
c000719d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00071a1:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00071a5:	75 0a                	jne    c00071b1 <f_expand+0x58>
c00071a7:	bd 07 00 00 00       	mov    ebp,0x7
c00071ac:	e9 d4 01 00 00       	jmp    c0007385 <f_expand+0x22c>
c00071b1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00071b4:	0b 43 0c             	or     eax,DWORD PTR [ebx+0xc]
c00071b7:	75 ee                	jne    c00071a7 <f_expand+0x4e>
c00071b9:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00071bd:	74 e8                	je     c00071a7 <f_expand+0x4e>
c00071bf:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00071c3:	8a 0e                	mov    cl,BYTE PTR [esi]
c00071c5:	80 f9 04             	cmp    cl,0x4
c00071c8:	74 07                	je     c00071d1 <f_expand+0x78>
c00071ca:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00071cf:	77 d6                	ja     c00071a7 <f_expand+0x4e>
c00071d1:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c00071d5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00071d9:	c1 e0 09             	shl    eax,0x9
c00071dc:	8d 50 ff             	lea    edx,[eax-0x1]
c00071df:	85 54 24 08          	test   DWORD PTR [esp+0x8],edx
c00071e3:	0f 95 c2             	setne  dl
c00071e6:	0f b6 d2             	movzx  edx,dl
c00071e9:	89 d7                	mov    edi,edx
c00071eb:	31 d2                	xor    edx,edx
c00071ed:	52                   	push   edx
c00071ee:	50                   	push   eax
c00071ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00071f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00071f7:	e8 78 f9 01 00       	call   c0026b74 <__udivdi3>
c00071fc:	83 c4 10             	add    esp,0x10
c00071ff:	01 f8                	add    eax,edi
c0007201:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0007205:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0007208:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000720c:	83 ff 01             	cmp    edi,0x1
c000720f:	76 05                	jbe    c0007216 <f_expand+0xbd>
c0007211:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0007214:	77 05                	ja     c000721b <f_expand+0xc2>
c0007216:	bf 02 00 00 00       	mov    edi,0x2
c000721b:	80 f9 04             	cmp    cl,0x4
c000721e:	75 19                	jne    c0007239 <f_expand+0xe0>
c0007220:	89 f0                	mov    eax,esi
c0007222:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007226:	89 fa                	mov    edx,edi
c0007228:	e8 f3 b9 ff ff       	call   c0002c20 <find_bitmap>
c000722d:	89 c6                	mov    esi,eax
c000722f:	85 c0                	test   eax,eax
c0007231:	0f 84 70 ff ff ff    	je     c00071a7 <f_expand+0x4e>
c0007237:	eb 7f                	jmp    c00072b8 <f_expand+0x15f>
c0007239:	89 fe                	mov    esi,edi
c000723b:	89 f9                	mov    ecx,edi
c000723d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007245:	89 ca                	mov    edx,ecx
c0007247:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000724b:	89 d8                	mov    eax,ebx
c000724d:	e8 3b bd ff ff       	call   c0002f8d <get_fat>
c0007252:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007256:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000725a:	41                   	inc    ecx
c000725b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000725f:	39 48 1c             	cmp    DWORD PTR [eax+0x1c],ecx
c0007262:	77 05                	ja     c0007269 <f_expand+0x110>
c0007264:	b9 02 00 00 00       	mov    ecx,0x2
c0007269:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c000726e:	74 3e                	je     c00072ae <f_expand+0x155>
c0007270:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0007275:	75 0a                	jne    c0007281 <f_expand+0x128>
c0007277:	bd 01 00 00 00       	mov    ebp,0x1
c000727c:	e9 04 01 00 00       	jmp    c0007385 <f_expand+0x22c>
c0007281:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007286:	75 13                	jne    c000729b <f_expand+0x142>
c0007288:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000728c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007290:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c0007294:	75 0f                	jne    c00072a5 <f_expand+0x14c>
c0007296:	e9 ce 00 00 00       	jmp    c0007369 <f_expand+0x210>
c000729b:	89 ce                	mov    esi,ecx
c000729d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072a5:	39 f9                	cmp    ecx,edi
c00072a7:	75 9c                	jne    c0007245 <f_expand+0xec>
c00072a9:	e9 f9 fe ff ff       	jmp    c00071a7 <f_expand+0x4e>
c00072ae:	bd 02 00 00 00       	mov    ebp,0x2
c00072b3:	e9 cd 00 00 00       	jmp    c0007385 <f_expand+0x22c>
c00072b8:	83 f8 ff             	cmp    eax,0xffffffff
c00072bb:	74 ba                	je     c0007277 <f_expand+0x11e>
c00072bd:	8d 7e ff             	lea    edi,[esi-0x1]
c00072c0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00072c4:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00072c8:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00072cd:	74 51                	je     c0007320 <f_expand+0x1c7>
c00072cf:	83 ec 0c             	sub    esp,0xc
c00072d2:	89 f2                	mov    edx,esi
c00072d4:	6a 01                	push   0x1
c00072d6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00072da:	e8 f4 b9 ff ff       	call   c0002cd3 <change_bitmap>
c00072df:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00072e3:	8d 54 3e ff          	lea    edx,[esi+edi*1-0x1]
c00072e7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00072eb:	83 c4 10             	add    esp,0x10
c00072ee:	85 c0                	test   eax,eax
c00072f0:	74 2e                	je     c0007320 <f_expand+0x1c7>
c00072f2:	eb 71                	jmp    c0007365 <f_expand+0x20c>
c00072f4:	83 c9 ff             	or     ecx,0xffffffff
c00072f7:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c00072fc:	74 03                	je     c0007301 <f_expand+0x1a8>
c00072fe:	8d 4f 01             	lea    ecx,[edi+0x1]
c0007301:	89 fa                	mov    edx,edi
c0007303:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007307:	e8 7c ba ff ff       	call   c0002d88 <put_fat>
c000730c:	85 c0                	test   eax,eax
c000730e:	75 55                	jne    c0007365 <f_expand+0x20c>
c0007310:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007314:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0007318:	47                   	inc    edi
c0007319:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000731e:	75 d4                	jne    c00072f4 <f_expand+0x19b>
c0007320:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007324:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007328:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000732d:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0007330:	74 53                	je     c0007385 <f_expand+0x22c>
c0007332:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
c0007335:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0007339:	c6 43 07 02          	mov    BYTE PTR [ebx+0x7],0x2
c000733d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007341:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007345:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0007348:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000734b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000734e:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0007351:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0007354:	39 ca                	cmp    edx,ecx
c0007356:	77 2d                	ja     c0007385 <f_expand+0x22c>
c0007358:	2b 54 24 10          	sub    edx,DWORD PTR [esp+0x10]
c000735c:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0007360:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0007363:	eb 20                	jmp    c0007385 <f_expand+0x22c>
c0007365:	89 c5                	mov    ebp,eax
c0007367:	eb 1c                	jmp    c0007385 <f_expand+0x22c>
c0007369:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000736e:	74 0c                	je     c000737c <f_expand+0x223>
c0007370:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007374:	89 f7                	mov    edi,esi
c0007376:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000737a:	eb 9d                	jmp    c0007319 <f_expand+0x1c0>
c000737c:	8d 46 ff             	lea    eax,[esi-0x1]
c000737f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007383:	eb 9b                	jmp    c0007320 <f_expand+0x1c7>
c0007385:	83 c4 3c             	add    esp,0x3c
c0007388:	89 e8                	mov    eax,ebp
c000738a:	5b                   	pop    ebx
c000738b:	5e                   	pop    esi
c000738c:	5f                   	pop    edi
c000738d:	5d                   	pop    ebp
c000738e:	c3                   	ret    

c000738f <f_forward>:
c000738f:	55                   	push   ebp
c0007390:	57                   	push   edi
c0007391:	56                   	push   esi
c0007392:	53                   	push   ebx
c0007393:	83 ec 2c             	sub    esp,0x2c
c0007396:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000739a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000739e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00073a4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00073a8:	89 d8                	mov    eax,ebx
c00073aa:	e8 7b af ff ff       	call   c000232a <validate>
c00073af:	89 c5                	mov    ebp,eax
c00073b1:	85 c0                	test   eax,eax
c00073b3:	0f 85 aa 01 00 00    	jne    c0007563 <f_forward+0x1d4>
c00073b9:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00073bd:	85 ed                	test   ebp,ebp
c00073bf:	0f 85 9e 01 00 00    	jne    c0007563 <f_forward+0x1d4>
c00073c5:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00073c9:	0f 84 8f 01 00 00    	je     c000755e <f_forward+0x1cf>
c00073cf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00073d2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00073d5:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00073d8:	bf 00 00 00 00       	mov    edi,0x0
c00073dd:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00073e0:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00073e4:	89 d1                	mov    ecx,edx
c00073e6:	19 f9                	sbb    ecx,edi
c00073e8:	0f 83 cf 00 00 00    	jae    c00074bd <f_forward+0x12e>
c00073ee:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00073f2:	e9 c6 00 00 00       	jmp    c00074bd <f_forward+0x12e>
c00073f7:	50                   	push   eax
c00073f8:	50                   	push   eax
c00073f9:	6a 00                	push   0x0
c00073fb:	6a 00                	push   0x0
c00073fd:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007401:	83 c4 10             	add    esp,0x10
c0007404:	85 c0                	test   eax,eax
c0007406:	0f 84 57 01 00 00    	je     c0007563 <f_forward+0x1d4>
c000740c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000740f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007413:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0007416:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000741a:	89 d7                	mov    edi,edx
c000741c:	8d 4e ff             	lea    ecx,[esi-0x1]
c000741f:	89 c6                	mov    esi,eax
c0007421:	0f ac fe 09          	shrd   esi,edi,0x9
c0007425:	21 ce                	and    esi,ecx
c0007427:	89 c1                	mov    ecx,eax
c0007429:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c000742f:	0f 84 98 00 00 00    	je     c00074cd <f_forward+0x13e>
c0007435:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007439:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000743c:	89 c8                	mov    eax,ecx
c000743e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007442:	e8 79 aa ff ff       	call   c0001ec0 <clst2sect>
c0007447:	89 d7                	mov    edi,edx
c0007449:	09 c7                	or     edi,eax
c000744b:	0f 84 9e 00 00 00    	je     c00074ef <f_forward+0x160>
c0007451:	31 ff                	xor    edi,edi
c0007453:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007456:	01 c6                	add    esi,eax
c0007458:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000745c:	11 d7                	adc    edi,edx
c000745e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007461:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007464:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007468:	39 fa                	cmp    edx,edi
c000746a:	0f 85 a2 00 00 00    	jne    c0007512 <f_forward+0x183>
c0007470:	39 f0                	cmp    eax,esi
c0007472:	0f 85 9a 00 00 00    	jne    c0007512 <f_forward+0x183>
c0007478:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000747b:	ba 00 02 00 00       	mov    edx,0x200
c0007480:	25 ff 01 00 00       	and    eax,0x1ff
c0007485:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007489:	29 c2                	sub    edx,eax
c000748b:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000748e:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007491:	39 d1                	cmp    ecx,edx
c0007493:	76 02                	jbe    c0007497 <f_forward+0x108>
c0007495:	89 d1                	mov    ecx,edx
c0007497:	8d 73 50             	lea    esi,[ebx+0x50]
c000749a:	52                   	push   edx
c000749b:	01 c6                	add    esi,eax
c000749d:	52                   	push   edx
c000749e:	51                   	push   ecx
c000749f:	56                   	push   esi
c00074a0:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00074a4:	83 c4 10             	add    esp,0x10
c00074a7:	85 c0                	test   eax,eax
c00074a9:	74 44                	je     c00074ef <f_forward+0x160>
c00074ab:	31 ff                	xor    edi,edi
c00074ad:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00074b0:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00074b3:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00074b7:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00074bb:	01 07                	add    DWORD PTR [edi],eax
c00074bd:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00074c2:	0f 85 2f ff ff ff    	jne    c00073f7 <f_forward+0x68>
c00074c8:	e9 96 00 00 00       	jmp    c0007563 <f_forward+0x1d4>
c00074cd:	85 f6                	test   esi,esi
c00074cf:	0f 85 60 ff ff ff    	jne    c0007435 <f_forward+0xa6>
c00074d5:	89 d7                	mov    edi,edx
c00074d7:	09 c7                	or     edi,eax
c00074d9:	75 05                	jne    c00074e0 <f_forward+0x151>
c00074db:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00074de:	eb 0a                	jmp    c00074ea <f_forward+0x15b>
c00074e0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00074e3:	89 d8                	mov    eax,ebx
c00074e5:	e8 a3 ba ff ff       	call   c0002f8d <get_fat>
c00074ea:	83 f8 01             	cmp    eax,0x1
c00074ed:	77 0b                	ja     c00074fa <f_forward+0x16b>
c00074ef:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00074f3:	bd 02 00 00 00       	mov    ebp,0x2
c00074f8:	eb 69                	jmp    c0007563 <f_forward+0x1d4>
c00074fa:	83 f8 ff             	cmp    eax,0xffffffff
c00074fd:	75 0b                	jne    c000750a <f_forward+0x17b>
c00074ff:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007503:	bd 01 00 00 00       	mov    ebp,0x1
c0007508:	eb 59                	jmp    c0007563 <f_forward+0x1d4>
c000750a:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000750d:	e9 23 ff ff ff       	jmp    c0007435 <f_forward+0xa6>
c0007512:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007516:	79 20                	jns    c0007538 <f_forward+0x1a9>
c0007518:	83 ec 0c             	sub    esp,0xc
c000751b:	6a 01                	push   0x1
c000751d:	52                   	push   edx
c000751e:	50                   	push   eax
c000751f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007523:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007527:	50                   	push   eax
c0007528:	e8 c5 a6 ff ff       	call   c0001bf2 <disk_write>
c000752d:	83 c4 20             	add    esp,0x20
c0007530:	85 c0                	test   eax,eax
c0007532:	75 cb                	jne    c00074ff <f_forward+0x170>
c0007534:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007538:	83 ec 0c             	sub    esp,0xc
c000753b:	6a 01                	push   0x1
c000753d:	57                   	push   edi
c000753e:	56                   	push   esi
c000753f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007543:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007547:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000754b:	50                   	push   eax
c000754c:	e8 8b a6 ff ff       	call   c0001bdc <disk_read>
c0007551:	83 c4 20             	add    esp,0x20
c0007554:	85 c0                	test   eax,eax
c0007556:	0f 84 1c ff ff ff    	je     c0007478 <f_forward+0xe9>
c000755c:	eb a1                	jmp    c00074ff <f_forward+0x170>
c000755e:	bd 07 00 00 00       	mov    ebp,0x7
c0007563:	83 c4 2c             	add    esp,0x2c
c0007566:	89 e8                	mov    eax,ebp
c0007568:	5b                   	pop    ebx
c0007569:	5e                   	pop    esi
c000756a:	5f                   	pop    edi
c000756b:	5d                   	pop    ebp
c000756c:	c3                   	ret    

c000756d <f_mkfs>:
c000756d:	55                   	push   ebp
c000756e:	57                   	push   edi
c000756f:	56                   	push   esi
c0007570:	53                   	push   ebx
c0007571:	bb 0b 00 00 00       	mov    ebx,0xb
c0007576:	81 ec 9c 00 00 00    	sub    esp,0x9c
c000757c:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007583:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000758a:	e8 7a ac ff ff       	call   c0002209 <get_ldnumber>
c000758f:	85 c0                	test   eax,eax
c0007591:	0f 88 ec 10 00 00    	js     c0008683 <f_mkfs+0x1116>
c0007597:	8b 14 85 c0 e1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1e40]
c000759e:	85 d2                	test   edx,edx
c00075a0:	74 03                	je     c00075a5 <f_mkfs+0x38>
c00075a2:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00075a5:	85 f6                	test   esi,esi
c00075a7:	75 05                	jne    c00075ae <f_mkfs+0x41>
c00075a9:	be 00 96 02 c0       	mov    esi,0xc0029600
c00075ae:	83 ec 0c             	sub    esp,0xc
c00075b1:	0f b6 c0             	movzx  eax,al
c00075b4:	bb 03 00 00 00       	mov    ebx,0x3
c00075b9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00075bd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00075c1:	e8 13 a6 ff ff       	call   c0001bd9 <disk_initialize>
c00075c6:	83 c4 10             	add    esp,0x10
c00075c9:	a8 01                	test   al,0x1
c00075cb:	0f 85 b2 10 00 00    	jne    c0008683 <f_mkfs+0x1116>
c00075d1:	bb 0a 00 00 00       	mov    ebx,0xa
c00075d6:	a8 04                	test   al,0x4
c00075d8:	0f 85 a5 10 00 00    	jne    c0008683 <f_mkfs+0x1116>
c00075de:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00075e1:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00075e5:	85 c0                	test   eax,eax
c00075e7:	75 20                	jne    c0007609 <f_mkfs+0x9c>
c00075e9:	51                   	push   ecx
c00075ea:	8d 44 24 78          	lea    eax,[esp+0x78]
c00075ee:	50                   	push   eax
c00075ef:	6a 03                	push   0x3
c00075f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00075f5:	e8 0e a6 ff ff       	call   c0001c08 <disk_ioctl>
c00075fa:	83 c4 10             	add    esp,0x10
c00075fd:	85 c0                	test   eax,eax
c00075ff:	74 08                	je     c0007609 <f_mkfs+0x9c>
c0007601:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007609:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c000760d:	8d 42 ff             	lea    eax,[edx-0x1]
c0007610:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007615:	77 04                	ja     c000761b <f_mkfs+0xae>
c0007617:	85 c2                	test   edx,eax
c0007619:	74 08                	je     c0007623 <f_mkfs+0xb6>
c000761b:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007623:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007626:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000762a:	48                   	dec    eax
c000762b:	3c 01                	cmp    al,0x1
c000762d:	76 05                	jbe    c0007634 <f_mkfs+0xc7>
c000762f:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007634:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007637:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000763b:	48                   	dec    eax
c000763c:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007641:	77 07                	ja     c000764a <f_mkfs+0xdd>
c0007643:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007648:	74 08                	je     c0007652 <f_mkfs+0xe5>
c000764a:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007652:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007655:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000765b:	77 07                	ja     c0007664 <f_mkfs+0xf7>
c000765d:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007660:	85 d8                	test   eax,ebx
c0007662:	74 02                	je     c0007666 <f_mkfs+0xf9>
c0007664:	31 db                	xor    ebx,ebx
c0007666:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007671:	77 0a                	ja     c000767d <f_mkfs+0x110>
c0007673:	bb 11 00 00 00       	mov    ebx,0x11
c0007678:	e9 06 10 00 00       	jmp    c0008683 <f_mkfs+0x1116>
c000767d:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007684:	8b 36                	mov    esi,DWORD PTR [esi]
c0007686:	85 ed                	test   ebp,ebp
c0007688:	75 1e                	jne    c00076a8 <f_mkfs+0x13b>
c000768a:	83 ec 0c             	sub    esp,0xc
c000768d:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007694:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007699:	50                   	push   eax
c000769a:	e8 f1 0f 00 00       	call   c0008690 <ff_memalloc>
c000769f:	83 c4 10             	add    esp,0x10
c00076a2:	89 c5                	mov    ebp,eax
c00076a4:	85 c0                	test   eax,eax
c00076a6:	74 cb                	je     c0007673 <f_mkfs+0x106>
c00076a8:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00076b0:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00076b8:	52                   	push   edx
c00076b9:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00076bd:	50                   	push   eax
c00076be:	6a 01                	push   0x1
c00076c0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00076c4:	e8 3f a5 ff ff       	call   c0001c08 <disk_ioctl>
c00076c9:	83 c4 10             	add    esp,0x10
c00076cc:	85 c0                	test   eax,eax
c00076ce:	0f 85 4a 0f 00 00    	jne    c000861e <f_mkfs+0x10b1>
c00076d4:	89 f1                	mov    ecx,esi
c00076d6:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00076de:	83 e1 0f             	and    ecx,0xf
c00076e1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00076e9:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00076ed:	83 e6 08             	and    esi,0x8
c00076f0:	75 56                	jne    c0007748 <f_mkfs+0x1db>
c00076f2:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00076f6:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00076fa:	83 ff 00             	cmp    edi,0x0
c00076fd:	76 20                	jbe    c000771f <f_mkfs+0x1b2>
c00076ff:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007704:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c000770c:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007712:	83 d7 ff             	adc    edi,0xffffffff
c0007715:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007719:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000771d:	eb 21                	jmp    c0007740 <f_mkfs+0x1d3>
c000771f:	ba 3f 00 00 00       	mov    edx,0x3f
c0007724:	39 f2                	cmp    edx,esi
c0007726:	19 f8                	sbb    eax,edi
c0007728:	73 1e                	jae    c0007748 <f_mkfs+0x1db>
c000772a:	83 c6 c1             	add    esi,0xffffffc1
c000772d:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007735:	83 d7 ff             	adc    edi,0xffffffff
c0007738:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000773c:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007740:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007748:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000774c:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007750:	89 04 24             	mov    DWORD PTR [esp],eax
c0007753:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007757:	31 c0                	xor    eax,eax
c0007759:	ba 7f 00 00 00       	mov    edx,0x7f
c000775e:	89 c7                	mov    edi,eax
c0007760:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007763:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007767:	0f 83 c5 0a 00 00    	jae    c0008232 <f_mkfs+0xcc5>
c000776d:	89 df                	mov    edi,ebx
c000776f:	c1 ef 09             	shr    edi,0x9
c0007772:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007776:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c000777d:	c1 ef 09             	shr    edi,0x9
c0007780:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007785:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007789:	74 29                	je     c00077b4 <f_mkfs+0x247>
c000778b:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007791:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007796:	0f 97 c2             	seta   dl
c0007799:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c000779c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00077a0:	0f 92 c0             	setb   al
c00077a3:	08 c2                	or     dl,al
c00077a5:	75 5b                	jne    c0007802 <f_mkfs+0x295>
c00077a7:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00077ab:	83 e0 07             	and    eax,0x7
c00077ae:	3c 04                	cmp    al,0x4
c00077b0:	74 50                	je     c0007802 <f_mkfs+0x295>
c00077b2:	eb 1b                	jmp    c00077cf <f_mkfs+0x262>
c00077b4:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00077b9:	0f 87 73 0a 00 00    	ja     c0008232 <f_mkfs+0xcc5>
c00077bf:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00077c5:	76 08                	jbe    c00077cf <f_mkfs+0x262>
c00077c7:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00077cf:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00077d3:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00077d7:	83 e0 01             	and    eax,0x1
c00077da:	80 e1 02             	and    cl,0x2
c00077dd:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00077e1:	74 0d                	je     c00077f0 <f_mkfs+0x283>
c00077e3:	84 c0                	test   al,al
c00077e5:	0f 84 53 09 00 00    	je     c000813e <f_mkfs+0xbd1>
c00077eb:	e9 12 08 00 00       	jmp    c0008002 <f_mkfs+0xa95>
c00077f0:	bb 13 00 00 00       	mov    ebx,0x13
c00077f5:	84 c0                	test   al,al
c00077f7:	0f 85 05 08 00 00    	jne    c0008002 <f_mkfs+0xa95>
c00077fd:	e9 39 0e 00 00       	jmp    c000863b <f_mkfs+0x10ce>
c0007802:	31 c0                	xor    eax,eax
c0007804:	ba ff 0f 00 00       	mov    edx,0xfff
c0007809:	89 c7                	mov    edi,eax
c000780b:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000780e:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007812:	0f 83 1a 0a 00 00    	jae    c0008232 <f_mkfs+0xcc5>
c0007818:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000781e:	77 39                	ja     c0007859 <f_mkfs+0x2ec>
c0007820:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007825:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c000782d:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007830:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007834:	73 08                	jae    c000783e <f_mkfs+0x2d1>
c0007836:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000783e:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007843:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007846:	b8 00 00 00 00       	mov    eax,0x0
c000784b:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000784f:	73 08                	jae    c0007859 <f_mkfs+0x2ec>
c0007851:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007859:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000785d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007861:	83 c0 20             	add    eax,0x20
c0007864:	83 d2 00             	adc    edx,0x0
c0007867:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000786b:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000786f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007873:	31 d2                	xor    edx,edx
c0007875:	31 ff                	xor    edi,edi
c0007877:	52                   	push   edx
c0007878:	89 fb                	mov    ebx,edi
c000787a:	50                   	push   eax
c000787b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000787f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007883:	e8 ec f2 01 00       	call   c0026b74 <__udivdi3>
c0007888:	83 c4 10             	add    esp,0x10
c000788b:	c1 e0 02             	shl    eax,0x2
c000788e:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007892:	05 07 02 00 00       	add    eax,0x207
c0007897:	89 f1                	mov    ecx,esi
c0007899:	c1 e8 09             	shr    eax,0x9
c000789c:	83 c1 ff             	add    ecx,0xffffffff
c000789f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00078a3:	83 d3 ff             	adc    ebx,0xffffffff
c00078a6:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00078aa:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00078ae:	31 d2                	xor    edx,edx
c00078b0:	01 c8                	add    eax,ecx
c00078b2:	11 da                	adc    edx,ebx
c00078b4:	89 c1                	mov    ecx,eax
c00078b6:	f7 de                	neg    esi
c00078b8:	89 d0                	mov    eax,edx
c00078ba:	83 d7 00             	adc    edi,0x0
c00078bd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00078c1:	f7 df                	neg    edi
c00078c3:	21 f1                	and    ecx,esi
c00078c5:	21 f8                	and    eax,edi
c00078c7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00078cb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00078cf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00078d3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00078d7:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00078db:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00078de:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00078e2:	0f ac d0 01          	shrd   eax,edx,0x1
c00078e6:	89 df                	mov    edi,ebx
c00078e8:	d1 ea                	shr    edx,1
c00078ea:	39 c1                	cmp    ecx,eax
c00078ec:	19 d7                	sbb    edi,edx
c00078ee:	0f 83 3e 09 00 00    	jae    c0008232 <f_mkfs+0xcc5>
c00078f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00078f8:	31 d2                	xor    edx,edx
c00078fa:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00078fe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007902:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0007906:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007909:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c000790d:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007911:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007915:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007919:	83 f8 0f             	cmp    eax,0xf
c000791c:	0f 86 10 09 00 00    	jbe    c0008232 <f_mkfs+0xcc5>
c0007922:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000792a:	0f 87 02 09 00 00    	ja     c0008232 <f_mkfs+0xcc5>
c0007930:	31 d2                	xor    edx,edx
c0007932:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007936:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000793e:	83 c0 07             	add    eax,0x7
c0007941:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007949:	c1 e8 03             	shr    eax,0x3
c000794c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007953:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007957:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000795b:	c1 e0 09             	shl    eax,0x9
c000795e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007962:	48                   	dec    eax
c0007963:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007967:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000796b:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c000796f:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007973:	31 d2                	xor    edx,edx
c0007975:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007979:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007980:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007984:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007989:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000798d:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007991:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007995:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007999:	31 ff                	xor    edi,edi
c000799b:	31 f6                	xor    esi,esi
c000799d:	31 db                	xor    ebx,ebx
c000799f:	85 ff                	test   edi,edi
c00079a1:	74 05                	je     c00079a8 <f_mkfs+0x43b>
c00079a3:	4f                   	dec    edi
c00079a4:	74 44                	je     c00079ea <f_mkfs+0x47d>
c00079a6:	eb 4f                	jmp    c00079f7 <f_mkfs+0x48a>
c00079a8:	83 ec 0c             	sub    esp,0xc
c00079ab:	0f b7 c3             	movzx  eax,bx
c00079ae:	50                   	push   eax
c00079af:	e8 05 0e 00 00       	call   c00087b9 <ff_wtoupper>
c00079b4:	83 c4 10             	add    esp,0x10
c00079b7:	89 c1                	mov    ecx,eax
c00079b9:	8d 53 01             	lea    edx,[ebx+0x1]
c00079bc:	66 39 c3             	cmp    bx,ax
c00079bf:	75 3e                	jne    c00079ff <f_mkfs+0x492>
c00079c1:	be 01 00 00 00       	mov    esi,0x1
c00079c6:	89 df                	mov    edi,ebx
c00079c8:	66 01 f7             	add    di,si
c00079cb:	75 07                	jne    c00079d4 <f_mkfs+0x467>
c00079cd:	83 fe 7f             	cmp    esi,0x7f
c00079d0:	77 31                	ja     c0007a03 <f_mkfs+0x496>
c00079d2:	eb 16                	jmp    c00079ea <f_mkfs+0x47d>
c00079d4:	83 ec 0c             	sub    esp,0xc
c00079d7:	0f b7 ff             	movzx  edi,di
c00079da:	57                   	push   edi
c00079db:	e8 d9 0d 00 00       	call   c00087b9 <ff_wtoupper>
c00079e0:	83 c4 10             	add    esp,0x10
c00079e3:	39 c7                	cmp    edi,eax
c00079e5:	75 e6                	jne    c00079cd <f_mkfs+0x460>
c00079e7:	46                   	inc    esi
c00079e8:	eb dc                	jmp    c00079c6 <f_mkfs+0x459>
c00079ea:	31 c0                	xor    eax,eax
c00079ec:	89 d9                	mov    ecx,ebx
c00079ee:	4e                   	dec    esi
c00079ef:	0f 95 c0             	setne  al
c00079f2:	43                   	inc    ebx
c00079f3:	89 c7                	mov    edi,eax
c00079f5:	eb 14                	jmp    c0007a0b <f_mkfs+0x49e>
c00079f7:	89 f1                	mov    ecx,esi
c00079f9:	01 f3                	add    ebx,esi
c00079fb:	31 ff                	xor    edi,edi
c00079fd:	eb 0c                	jmp    c0007a0b <f_mkfs+0x49e>
c00079ff:	89 d3                	mov    ebx,edx
c0007a01:	eb 08                	jmp    c0007a0b <f_mkfs+0x49e>
c0007a03:	bf 02 00 00 00       	mov    edi,0x2
c0007a08:	83 c9 ff             	or     ecx,0xffffffff
c0007a0b:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a0f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a12:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007a16:	0f b6 c1             	movzx  eax,cl
c0007a19:	e8 04 a7 ff ff       	call   c0002122 <xsum32>
c0007a1e:	66 c1 e9 08          	shr    cx,0x8
c0007a22:	89 c2                	mov    edx,eax
c0007a24:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a27:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007a2b:	0f b7 c1             	movzx  eax,cx
c0007a2e:	e8 ef a6 ff ff       	call   c0002122 <xsum32>
c0007a33:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007a38:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007a3c:	66 85 db             	test   bx,bx
c0007a3f:	74 1f                	je     c0007a60 <f_mkfs+0x4f3>
c0007a41:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a44:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007a4b:	83 c0 02             	add    eax,0x2
c0007a4e:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007a54:	39 c2                	cmp    edx,eax
c0007a56:	74 08                	je     c0007a60 <f_mkfs+0x4f3>
c0007a58:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a5b:	e9 3f ff ff ff       	jmp    c000799f <f_mkfs+0x432>
c0007a60:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a63:	83 ec 0c             	sub    esp,0xc
c0007a66:	05 01 02 00 00       	add    eax,0x201
c0007a6b:	c1 e8 09             	shr    eax,0x9
c0007a6e:	50                   	push   eax
c0007a6f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007a73:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007a77:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007a7b:	55                   	push   ebp
c0007a7c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a80:	e8 6d a1 ff ff       	call   c0001bf2 <disk_write>
c0007a85:	83 c4 20             	add    esp,0x20
c0007a88:	85 c0                	test   eax,eax
c0007a8a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007a8d:	0f 85 8b 0b 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007a93:	89 d0                	mov    eax,edx
c0007a95:	31 d2                	xor    edx,edx
c0007a97:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007a9b:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007a9f:	66 85 db             	test   bx,bx
c0007aa2:	74 04                	je     c0007aa8 <f_mkfs+0x53b>
c0007aa4:	31 c0                	xor    eax,eax
c0007aa6:	eb b0                	jmp    c0007a58 <f_mkfs+0x4eb>
c0007aa8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007aac:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0007ab0:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c0007ab4:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007aba:	31 d2                	xor    edx,edx
c0007abc:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007ac7:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007acb:	c1 eb 09             	shr    ebx,0x9
c0007ace:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007ad5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007ad9:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007add:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007ae1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007ae5:	8d 70 01             	lea    esi,[eax+0x1]
c0007ae8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007aec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007af0:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007af7:	31 d2                	xor    edx,edx
c0007af9:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007afe:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b01:	89 c1                	mov    ecx,eax
c0007b03:	89 e8                	mov    eax,ebp
c0007b05:	e8 b1 a1 ff ff       	call   c0001cbb <mem_set>
c0007b0a:	31 c0                	xor    eax,eax
c0007b0c:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007b0f:	76 10                	jbe    c0007b21 <f_mkfs+0x5b4>
c0007b11:	83 fe 07             	cmp    esi,0x7
c0007b14:	76 0b                	jbe    c0007b21 <f_mkfs+0x5b4>
c0007b16:	40                   	inc    eax
c0007b17:	83 ee 08             	sub    esi,0x8
c0007b1a:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007b1f:	eb eb                	jmp    c0007b0c <f_mkfs+0x59f>
c0007b21:	b2 01                	mov    dl,0x1
c0007b23:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007b27:	85 f6                	test   esi,esi
c0007b29:	74 0c                	je     c0007b37 <f_mkfs+0x5ca>
c0007b2b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007b2e:	76 07                	jbe    c0007b37 <f_mkfs+0x5ca>
c0007b30:	08 11                	or     BYTE PTR [ecx],dl
c0007b32:	4e                   	dec    esi
c0007b33:	d1 e2                	shl    edx,1
c0007b35:	eb f0                	jmp    c0007b27 <f_mkfs+0x5ba>
c0007b37:	89 df                	mov    edi,ebx
c0007b39:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007b3d:	76 04                	jbe    c0007b43 <f_mkfs+0x5d6>
c0007b3f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007b43:	83 ec 0c             	sub    esp,0xc
c0007b46:	57                   	push   edi
c0007b47:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007b4b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007b4f:	55                   	push   ebp
c0007b50:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b54:	e8 99 a0 ff ff       	call   c0001bf2 <disk_write>
c0007b59:	83 c4 20             	add    esp,0x20
c0007b5c:	85 c0                	test   eax,eax
c0007b5e:	0f 85 ba 0a 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007b64:	31 d2                	xor    edx,edx
c0007b66:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007b6a:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007b6e:	29 fb                	sub    ebx,edi
c0007b70:	0f 85 7a ff ff ff    	jne    c0007af0 <f_mkfs+0x583>
c0007b76:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007b7a:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007b82:	31 f6                	xor    esi,esi
c0007b84:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007b88:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b8b:	31 d2                	xor    edx,edx
c0007b8d:	89 e8                	mov    eax,ebp
c0007b8f:	e8 27 a1 ff ff       	call   c0001cbb <mem_set>
c0007b94:	31 c9                	xor    ecx,ecx
c0007b96:	85 db                	test   ebx,ebx
c0007b98:	75 40                	jne    c0007bda <f_mkfs+0x66d>
c0007b9a:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007b9f:	89 e8                	mov    eax,ebp
c0007ba1:	bb 02 00 00 00       	mov    ebx,0x2
c0007ba6:	e8 f2 a0 ff ff       	call   c0001c9d <st_dword>
c0007bab:	8d 45 04             	lea    eax,[ebp+0x4]
c0007bae:	83 ca ff             	or     edx,0xffffffff
c0007bb1:	e8 e7 a0 ff ff       	call   c0001c9d <st_dword>
c0007bb6:	b9 08 00 00 00       	mov    ecx,0x8
c0007bbb:	eb 1d                	jmp    c0007bda <f_mkfs+0x66d>
c0007bbd:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007bc0:	76 3b                	jbe    c0007bfd <f_mkfs+0x690>
c0007bc2:	43                   	inc    ebx
c0007bc3:	83 fe 01             	cmp    esi,0x1
c0007bc6:	89 da                	mov    edx,ebx
c0007bc8:	77 03                	ja     c0007bcd <f_mkfs+0x660>
c0007bca:	83 ca ff             	or     edx,0xffffffff
c0007bcd:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007bd1:	4e                   	dec    esi
c0007bd2:	e8 c6 a0 ff ff       	call   c0001c9d <st_dword>
c0007bd7:	83 c1 04             	add    ecx,0x4
c0007bda:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007bde:	85 f6                	test   esi,esi
c0007be0:	75 db                	jne    c0007bbd <f_mkfs+0x650>
c0007be2:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007be7:	77 14                	ja     c0007bfd <f_mkfs+0x690>
c0007be9:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007bed:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007bf4:	85 f6                	test   esi,esi
c0007bf6:	74 05                	je     c0007bfd <f_mkfs+0x690>
c0007bf8:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007bfb:	77 dd                	ja     c0007bda <f_mkfs+0x66d>
c0007bfd:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007c01:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007c05:	39 cf                	cmp    edi,ecx
c0007c07:	76 02                	jbe    c0007c0b <f_mkfs+0x69e>
c0007c09:	89 cf                	mov    edi,ecx
c0007c0b:	83 ec 0c             	sub    esp,0xc
c0007c0e:	57                   	push   edi
c0007c0f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007c13:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007c17:	55                   	push   ebp
c0007c18:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c1c:	e8 d1 9f ff ff       	call   c0001bf2 <disk_write>
c0007c21:	83 c4 20             	add    esp,0x20
c0007c24:	85 c0                	test   eax,eax
c0007c26:	0f 85 f2 09 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007c2c:	31 d2                	xor    edx,edx
c0007c2e:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007c32:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007c36:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007c3a:	0f 85 48 ff ff ff    	jne    c0007b88 <f_mkfs+0x61b>
c0007c40:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c43:	31 d2                	xor    edx,edx
c0007c45:	89 e8                	mov    eax,ebp
c0007c47:	31 ff                	xor    edi,edi
c0007c49:	e8 6d a0 ff ff       	call   c0001cbb <mem_set>
c0007c4e:	8d 45 34             	lea    eax,[ebp+0x34]
c0007c51:	ba 02 00 00 00       	mov    edx,0x2
c0007c56:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007c5a:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007c5e:	e8 3a a0 ff ff       	call   c0001c9d <st_dword>
c0007c63:	8d 45 38             	lea    eax,[ebp+0x38]
c0007c66:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007c6a:	e8 2e a0 ff ff       	call   c0001c9d <st_dword>
c0007c6f:	8d 45 44             	lea    eax,[ebp+0x44]
c0007c72:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007c76:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007c7a:	e8 1e a0 ff ff       	call   c0001c9d <st_dword>
c0007c7f:	8d 45 54             	lea    eax,[ebp+0x54]
c0007c82:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007c86:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007c8a:	83 c2 02             	add    edx,0x2
c0007c8d:	e8 0b a0 ff ff       	call   c0001c9d <st_dword>
c0007c92:	8d 45 58             	lea    eax,[ebp+0x58]
c0007c95:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007c99:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007c9d:	e8 fb 9f ff ff       	call   c0001c9d <st_dword>
c0007ca2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ca6:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007cab:	89 c6                	mov    esi,eax
c0007cad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cb1:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007cb5:	89 04 24             	mov    DWORD PTR [esp],eax
c0007cb8:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007cbc:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007cbf:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007cc3:	39 cb                	cmp    ebx,ecx
c0007cc5:	76 02                	jbe    c0007cc9 <f_mkfs+0x75c>
c0007cc7:	89 cb                	mov    ebx,ecx
c0007cc9:	83 ec 0c             	sub    esp,0xc
c0007ccc:	53                   	push   ebx
c0007ccd:	57                   	push   edi
c0007cce:	56                   	push   esi
c0007ccf:	55                   	push   ebp
c0007cd0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cd4:	e8 19 9f ff ff       	call   c0001bf2 <disk_write>
c0007cd9:	83 c4 20             	add    esp,0x20
c0007cdc:	85 c0                	test   eax,eax
c0007cde:	0f 85 3a 09 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007ce4:	31 d2                	xor    edx,edx
c0007ce6:	b9 00 02 00 00       	mov    ecx,0x200
c0007ceb:	89 e8                	mov    eax,ebp
c0007ced:	e8 c9 9f ff ff       	call   c0001cbb <mem_set>
c0007cf2:	31 d2                	xor    edx,edx
c0007cf4:	01 de                	add    esi,ebx
c0007cf6:	11 d7                	adc    edi,edx
c0007cf8:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007cfb:	75 bf                	jne    c0007cbc <f_mkfs+0x74f>
c0007cfd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007d01:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007d05:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007d0d:	b9 00 02 00 00       	mov    ecx,0x200
c0007d12:	31 d2                	xor    edx,edx
c0007d14:	89 e8                	mov    eax,ebp
c0007d16:	e8 a0 9f ff ff       	call   c0001cbb <mem_set>
c0007d1b:	b9 0b 00 00 00       	mov    ecx,0xb
c0007d20:	ba e0 96 02 c0       	mov    edx,0xc00296e0
c0007d25:	89 e8                	mov    eax,ebp
c0007d27:	e8 7a 9f ff ff       	call   c0001ca6 <mem_cpy>
c0007d2c:	8d 45 40             	lea    eax,[ebp+0x40]
c0007d2f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007d33:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007d37:	e8 64 9f ff ff       	call   c0001ca0 <st_qword>
c0007d3c:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007d40:	8d 45 48             	lea    eax,[ebp+0x48]
c0007d43:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007d47:	e8 54 9f ff ff       	call   c0001ca0 <st_qword>
c0007d4c:	8d 45 50             	lea    eax,[ebp+0x50]
c0007d4f:	ba 20 00 00 00       	mov    edx,0x20
c0007d54:	e8 44 9f ff ff       	call   c0001c9d <st_dword>
c0007d59:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007d5d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007d61:	e8 37 9f ff ff       	call   c0001c9d <st_dword>
c0007d66:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007d6a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007d6e:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007d72:	e8 26 9f ff ff       	call   c0001c9d <st_dword>
c0007d77:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007d7a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007d7e:	e8 1a 9f ff ff       	call   c0001c9d <st_dword>
c0007d83:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007d87:	8d 50 02             	lea    edx,[eax+0x2]
c0007d8a:	8d 45 60             	lea    eax,[ebp+0x60]
c0007d8d:	e8 0b 9f ff ff       	call   c0001c9d <st_dword>
c0007d92:	8d 45 64             	lea    eax,[ebp+0x64]
c0007d95:	ba 00 00 21 50       	mov    edx,0x50210000
c0007d9a:	e8 fe 9e ff ff       	call   c0001c9d <st_dword>
c0007d9f:	8d 45 68             	lea    eax,[ebp+0x68]
c0007da2:	ba 00 01 00 00       	mov    edx,0x100
c0007da7:	e8 ed 9e ff ff       	call   c0001c99 <st_word>
c0007dac:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007db0:	b8 0a 00 00 00       	mov    eax,0xa
c0007db5:	48                   	dec    eax
c0007db6:	74 05                	je     c0007dbd <f_mkfs+0x850>
c0007db8:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007dbb:	eb f8                	jmp    c0007db5 <f_mkfs+0x848>
c0007dbd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007dc1:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007dc5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007dc9:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007dcd:	74 05                	je     c0007dd4 <f_mkfs+0x867>
c0007dcf:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007dd2:	eb f5                	jmp    c0007dc9 <f_mkfs+0x85c>
c0007dd4:	8d 45 78             	lea    eax,[ebp+0x78]
c0007dd7:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007ddc:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007de2:	31 db                	xor    ebx,ebx
c0007de4:	e8 b0 9e ff ff       	call   c0001c99 <st_word>
c0007de9:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007def:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007df4:	89 04 24             	mov    DWORD PTR [esp],eax
c0007df7:	e8 9d 9e ff ff       	call   c0001c99 <st_word>
c0007dfc:	31 c9                	xor    ecx,ecx
c0007dfe:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007e01:	83 f8 01             	cmp    eax,0x1
c0007e04:	76 13                	jbe    c0007e19 <f_mkfs+0x8ac>
c0007e06:	83 f9 70             	cmp    ecx,0x70
c0007e09:	74 0e                	je     c0007e19 <f_mkfs+0x8ac>
c0007e0b:	89 da                	mov    edx,ebx
c0007e0d:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007e12:	e8 0b a3 ff ff       	call   c0002122 <xsum32>
c0007e17:	89 c3                	mov    ebx,eax
c0007e19:	41                   	inc    ecx
c0007e1a:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007e20:	75 dc                	jne    c0007dfe <f_mkfs+0x891>
c0007e22:	89 f0                	mov    eax,esi
c0007e24:	89 fa                	mov    edx,edi
c0007e26:	83 c0 01             	add    eax,0x1
c0007e29:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007e2d:	83 d2 00             	adc    edx,0x0
c0007e30:	83 ec 0c             	sub    esp,0xc
c0007e33:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007e37:	6a 01                	push   0x1
c0007e39:	57                   	push   edi
c0007e3a:	56                   	push   esi
c0007e3b:	55                   	push   ebp
c0007e3c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007e40:	e8 ad 9d ff ff       	call   c0001bf2 <disk_write>
c0007e45:	83 c4 20             	add    esp,0x20
c0007e48:	85 c0                	test   eax,eax
c0007e4a:	0f 85 ce 07 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007e50:	31 d2                	xor    edx,edx
c0007e52:	b9 00 02 00 00       	mov    ecx,0x200
c0007e57:	89 e8                	mov    eax,ebp
c0007e59:	e8 5d 9e ff ff       	call   c0001cbb <mem_set>
c0007e5e:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007e63:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e66:	e8 2e 9e ff ff       	call   c0001c99 <st_word>
c0007e6b:	89 f0                	mov    eax,esi
c0007e6d:	89 fa                	mov    edx,edi
c0007e6f:	83 c0 09             	add    eax,0x9
c0007e72:	83 d2 00             	adc    edx,0x0
c0007e75:	89 04 24             	mov    DWORD PTR [esp],eax
c0007e78:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007e7c:	31 c9                	xor    ecx,ecx
c0007e7e:	41                   	inc    ecx
c0007e7f:	89 da                	mov    edx,ebx
c0007e81:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007e86:	e8 97 a2 ff ff       	call   c0002122 <xsum32>
c0007e8b:	89 c3                	mov    ebx,eax
c0007e8d:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007e93:	75 e9                	jne    c0007e7e <f_mkfs+0x911>
c0007e95:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e99:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007e9d:	83 c0 01             	add    eax,0x1
c0007ea0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007ea4:	83 d2 00             	adc    edx,0x0
c0007ea7:	83 ec 0c             	sub    esp,0xc
c0007eaa:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007eae:	6a 01                	push   0x1
c0007eb0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007eb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007eb8:	55                   	push   ebp
c0007eb9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ebd:	e8 30 9d ff ff       	call   c0001bf2 <disk_write>
c0007ec2:	83 c4 20             	add    esp,0x20
c0007ec5:	85 c0                	test   eax,eax
c0007ec7:	0f 85 51 07 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007ecd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007ed1:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007ed5:	75 09                	jne    c0007ee0 <f_mkfs+0x973>
c0007ed7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007eda:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ede:	74 12                	je     c0007ef2 <f_mkfs+0x985>
c0007ee0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ee4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007ee8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007eec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007ef0:	eb 8a                	jmp    c0007e7c <f_mkfs+0x90f>
c0007ef2:	31 d2                	xor    edx,edx
c0007ef4:	b9 00 02 00 00       	mov    ecx,0x200
c0007ef9:	89 e8                	mov    eax,ebp
c0007efb:	e8 bb 9d ff ff       	call   c0001cbb <mem_set>
c0007f00:	83 c6 0b             	add    esi,0xb
c0007f03:	83 d7 00             	adc    edi,0x0
c0007f06:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007f0a:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007f0e:	31 c9                	xor    ecx,ecx
c0007f10:	41                   	inc    ecx
c0007f11:	89 da                	mov    edx,ebx
c0007f13:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007f18:	e8 05 a2 ff ff       	call   c0002122 <xsum32>
c0007f1d:	89 c3                	mov    ebx,eax
c0007f1f:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007f25:	75 e9                	jne    c0007f10 <f_mkfs+0x9a3>
c0007f27:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007f2a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007f2e:	83 c6 01             	add    esi,0x1
c0007f31:	83 d7 00             	adc    edi,0x0
c0007f34:	83 ec 0c             	sub    esp,0xc
c0007f37:	6a 01                	push   0x1
c0007f39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007f3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007f41:	55                   	push   ebp
c0007f42:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f46:	e8 a7 9c ff ff       	call   c0001bf2 <disk_write>
c0007f4b:	83 c4 20             	add    esp,0x20
c0007f4e:	85 c0                	test   eax,eax
c0007f50:	0f 85 c8 06 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007f56:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007f5a:	75 06                	jne    c0007f62 <f_mkfs+0x9f5>
c0007f5c:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007f60:	74 09                	je     c0007f6b <f_mkfs+0x9fe>
c0007f62:	89 34 24             	mov    DWORD PTR [esp],esi
c0007f65:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007f69:	eb a3                	jmp    c0007f0e <f_mkfs+0x9a1>
c0007f6b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007f6f:	89 da                	mov    edx,ebx
c0007f71:	01 e8                	add    eax,ebp
c0007f73:	e8 25 9d ff ff       	call   c0001c9d <st_dword>
c0007f78:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007f7d:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007f85:	75 e4                	jne    c0007f6b <f_mkfs+0x9fe>
c0007f87:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007f8a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007f8e:	83 c6 02             	add    esi,0x2
c0007f91:	83 d7 00             	adc    edi,0x0
c0007f94:	83 ec 0c             	sub    esp,0xc
c0007f97:	6a 01                	push   0x1
c0007f99:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007f9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007fa1:	55                   	push   ebp
c0007fa2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007fa6:	e8 47 9c ff ff       	call   c0001bf2 <disk_write>
c0007fab:	83 c4 20             	add    esp,0x20
c0007fae:	85 c0                	test   eax,eax
c0007fb0:	0f 85 68 06 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007fb6:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007fbb:	74 0d                	je     c0007fca <f_mkfs+0xa5d>
c0007fbd:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007fc5:	e9 43 fd ff ff       	jmp    c0007d0d <f_mkfs+0x7a0>
c0007fca:	b1 07                	mov    cl,0x7
c0007fcc:	e9 e3 05 00 00       	jmp    c00085b4 <f_mkfs+0x1047>
c0007fd1:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007fd6:	0f 85 4f 02 00 00    	jne    c000822b <f_mkfs+0xcbe>
c0007fdc:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007fe1:	0f 86 22 02 00 00    	jbe    c0008209 <f_mkfs+0xc9c>
c0007fe7:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007fec:	0f 85 81 06 00 00    	jne    c0008673 <f_mkfs+0x1106>
c0007ff2:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007ff5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007ff9:	83 f8 40             	cmp    eax,0x40
c0007ffc:	0f 87 51 06 00 00    	ja     c0008653 <f_mkfs+0x10e6>
c0008002:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008006:	85 ff                	test   edi,edi
c0008008:	75 1c                	jne    c0008026 <f_mkfs+0xab9>
c000800a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000800d:	ba e0 95 02 c0       	mov    edx,0xc00295e0
c0008012:	c1 e9 0c             	shr    ecx,0xc
c0008015:	bf 01 00 00 00       	mov    edi,0x1
c000801a:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000801d:	66 85 c0             	test   ax,ax
c0008020:	0f 85 95 01 00 00    	jne    c00081bb <f_mkfs+0xc4e>
c0008026:	31 d2                	xor    edx,edx
c0008028:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000802b:	f7 f7                	div    edi
c000802d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008032:	0f 86 95 01 00 00    	jbe    c00081cd <f_mkfs+0xc60>
c0008038:	83 c0 02             	add    eax,0x2
c000803b:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0008040:	01 c0                	add    eax,eax
c0008042:	05 ff 01 00 00       	add    eax,0x1ff
c0008047:	be 01 00 00 00       	mov    esi,0x1
c000804c:	c1 e8 09             	shr    eax,0x9
c000804f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0008053:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0008057:	c1 e0 05             	shl    eax,0x5
c000805a:	c1 e8 09             	shr    eax,0x9
c000805d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0008061:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0008066:	31 d2                	xor    edx,edx
c0008068:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000806c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0008070:	89 f0                	mov    eax,esi
c0008072:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0008076:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c000807a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000807e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0008082:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008086:	31 d2                	xor    edx,edx
c0008088:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c000808d:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0008091:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0008095:	31 db                	xor    ebx,ebx
c0008097:	01 c8                	add    eax,ecx
c0008099:	11 da                	adc    edx,ebx
c000809b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000809f:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c00080a3:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c00080a7:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00080ab:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c00080af:	f7 da                	neg    edx
c00080b1:	21 d1                	and    ecx,edx
c00080b3:	29 d9                	sub    ecx,ebx
c00080b5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080ba:	0f 85 20 01 00 00    	jne    c00081e0 <f_mkfs+0xc73>
c00080c0:	31 db                	xor    ebx,ebx
c00080c2:	01 ce                	add    esi,ecx
c00080c4:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c00080c8:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c00080cc:	31 d2                	xor    edx,edx
c00080ce:	89 f8                	mov    eax,edi
c00080d0:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00080d4:	c1 e0 04             	shl    eax,0x4
c00080d7:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00080db:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00080df:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c00080e3:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c00080e7:	39 04 24             	cmp    DWORD PTR [esp],eax
c00080ea:	19 d3                	sbb    ebx,edx
c00080ec:	0f 82 40 01 00 00    	jb     c0008232 <f_mkfs+0xcc5>
c00080f2:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00080f5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00080f9:	89 c8                	mov    eax,ecx
c00080fb:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0008100:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0008104:	29 f0                	sub    eax,esi
c0008106:	29 d0                	sub    eax,edx
c0008108:	31 d2                	xor    edx,edx
c000810a:	f7 f7                	div    edi
c000810c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008111:	89 c3                	mov    ebx,eax
c0008113:	0f 85 b8 fe ff ff    	jne    c0007fd1 <f_mkfs+0xa64>
c0008119:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000811e:	0f 87 1d 01 00 00    	ja     c0008241 <f_mkfs+0xcd4>
c0008124:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008129:	0f 85 03 01 00 00    	jne    c0008232 <f_mkfs+0xcc5>
c000812f:	83 ff 01             	cmp    edi,0x1
c0008132:	0f 86 fa 00 00 00    	jbe    c0008232 <f_mkfs+0xcc5>
c0008138:	d1 ef                	shr    edi,1
c000813a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000813e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0008142:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008145:	85 db                	test   ebx,ebx
c0008147:	75 2d                	jne    c0008176 <f_mkfs+0xc09>
c0008149:	89 cb                	mov    ebx,ecx
c000814b:	ba f0 95 02 c0       	mov    edx,0xc00295f0
c0008150:	c1 eb 11             	shr    ebx,0x11
c0008153:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c000815b:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000815e:	66 85 c0             	test   ax,ax
c0008161:	74 11                	je     c0008174 <f_mkfs+0xc07>
c0008163:	83 c2 02             	add    edx,0x2
c0008166:	39 d8                	cmp    eax,ebx
c0008168:	77 0a                	ja     c0008174 <f_mkfs+0xc07>
c000816a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000816e:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0008172:	eb e7                	jmp    c000815b <f_mkfs+0xbee>
c0008174:	31 db                	xor    ebx,ebx
c0008176:	31 d2                	xor    edx,edx
c0008178:	89 c8                	mov    eax,ecx
c000817a:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c000817e:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0008185:	2d f6 ff 00 00       	sub    eax,0xfff6
c000818a:	c1 ea 09             	shr    edx,0x9
c000818d:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0008192:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0008196:	0f 87 96 00 00 00    	ja     c0008232 <f_mkfs+0xcc5>
c000819c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00081a0:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c00081a8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00081ac:	be 20 00 00 00       	mov    esi,0x20
c00081b1:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c00081b6:	e9 a6 fe ff ff       	jmp    c0008061 <f_mkfs+0xaf4>
c00081bb:	83 c2 02             	add    edx,0x2
c00081be:	39 c8                	cmp    eax,ecx
c00081c0:	0f 87 60 fe ff ff    	ja     c0008026 <f_mkfs+0xab9>
c00081c6:	01 ff                	add    edi,edi
c00081c8:	e9 4d fe ff ff       	jmp    c000801a <f_mkfs+0xaad>
c00081cd:	8d 04 40             	lea    eax,[eax+eax*2]
c00081d0:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c00081d5:	40                   	inc    eax
c00081d6:	d1 e8                	shr    eax,1
c00081d8:	83 c0 03             	add    eax,0x3
c00081db:	e9 62 fe ff ff       	jmp    c0008042 <f_mkfs+0xad5>
c00081e0:	31 d2                	xor    edx,edx
c00081e2:	89 c8                	mov    eax,ecx
c00081e4:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c00081e8:	85 d2                	test   edx,edx
c00081ea:	74 0c                	je     c00081f8 <f_mkfs+0xc8b>
c00081ec:	49                   	dec    ecx
c00081ed:	46                   	inc    esi
c00081ee:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c00081f3:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c00081f8:	89 c8                	mov    eax,ecx
c00081fa:	31 d2                	xor    edx,edx
c00081fc:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008200:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008204:	e9 c3 fe ff ff       	jmp    c00080cc <f_mkfs+0xb5f>
c0008209:	3d f5 0f 00 00       	cmp    eax,0xff5
c000820e:	77 31                	ja     c0008241 <f_mkfs+0xcd4>
c0008210:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008215:	75 1b                	jne    c0008232 <f_mkfs+0xcc5>
c0008217:	8d 04 3f             	lea    eax,[edi+edi*1]
c000821a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000821e:	3d 80 00 00 00       	cmp    eax,0x80
c0008223:	0f 86 d9 fd ff ff    	jbe    c0008002 <f_mkfs+0xa95>
c0008229:	eb 07                	jmp    c0008232 <f_mkfs+0xcc5>
c000822b:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008230:	76 0a                	jbe    c000823c <f_mkfs+0xccf>
c0008232:	bb 0e 00 00 00       	mov    ebx,0xe
c0008237:	e9 ff 03 00 00       	jmp    c000863b <f_mkfs+0x10ce>
c000823c:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008241:	31 d2                	xor    edx,edx
c0008243:	b9 00 02 00 00       	mov    ecx,0x200
c0008248:	89 e8                	mov    eax,ebp
c000824a:	e8 6c 9a ff ff       	call   c0001cbb <mem_set>
c000824f:	b9 0b 00 00 00       	mov    ecx,0xb
c0008254:	ba 02 97 02 c0       	mov    edx,0xc0029702
c0008259:	89 e8                	mov    eax,ebp
c000825b:	e8 46 9a ff ff       	call   c0001ca6 <mem_cpy>
c0008260:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008263:	ba 00 02 00 00       	mov    edx,0x200
c0008268:	e8 2c 9a ff ff       	call   c0001c99 <st_word>
c000826d:	89 f8                	mov    eax,edi
c000826f:	0f b7 d6             	movzx  edx,si
c0008272:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008275:	8d 45 0e             	lea    eax,[ebp+0xe]
c0008278:	e8 1c 9a ff ff       	call   c0001c99 <st_word>
c000827d:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008281:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008286:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0008289:	75 08                	jne    c0008293 <f_mkfs+0xd26>
c000828b:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008293:	8d 45 11             	lea    eax,[ebp+0x11]
c0008296:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000829a:	e8 fa 99 ff ff       	call   c0001c99 <st_word>
c000829f:	b8 ff ff 00 00       	mov    eax,0xffff
c00082a4:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00082a8:	39 d0                	cmp    eax,edx
c00082aa:	b8 00 00 00 00       	mov    eax,0x0
c00082af:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00082b3:	72 0a                	jb     c00082bf <f_mkfs+0xd52>
c00082b5:	8d 45 13             	lea    eax,[ebp+0x13]
c00082b8:	e8 dc 99 ff ff       	call   c0001c99 <st_word>
c00082bd:	eb 08                	jmp    c00082c7 <f_mkfs+0xd5a>
c00082bf:	8d 45 20             	lea    eax,[ebp+0x20]
c00082c2:	e8 d6 99 ff ff       	call   c0001c9d <st_dword>
c00082c7:	8d 45 18             	lea    eax,[ebp+0x18]
c00082ca:	ba 3f 00 00 00       	mov    edx,0x3f
c00082cf:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00082d3:	e8 c1 99 ff ff       	call   c0001c99 <st_word>
c00082d8:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00082db:	ba ff 00 00 00       	mov    edx,0xff
c00082e0:	e8 b4 99 ff ff       	call   c0001c99 <st_word>
c00082e5:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00082e8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00082ec:	e8 ac 99 ff ff       	call   c0001c9d <st_dword>
c00082f1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082f6:	75 57                	jne    c000834f <f_mkfs+0xde2>
c00082f8:	8d 45 43             	lea    eax,[ebp+0x43]
c00082fb:	ba 00 00 21 50       	mov    edx,0x50210000
c0008300:	e8 98 99 ff ff       	call   c0001c9d <st_dword>
c0008305:	8d 45 24             	lea    eax,[ebp+0x24]
c0008308:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000830c:	e8 8c 99 ff ff       	call   c0001c9d <st_dword>
c0008311:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008314:	ba 02 00 00 00       	mov    edx,0x2
c0008319:	e8 7f 99 ff ff       	call   c0001c9d <st_dword>
c000831e:	8d 45 30             	lea    eax,[ebp+0x30]
c0008321:	ba 01 00 00 00       	mov    edx,0x1
c0008326:	e8 6e 99 ff ff       	call   c0001c99 <st_word>
c000832b:	8d 45 32             	lea    eax,[ebp+0x32]
c000832e:	ba 06 00 00 00       	mov    edx,0x6
c0008333:	e8 61 99 ff ff       	call   c0001c99 <st_word>
c0008338:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c000833c:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008340:	8d 45 47             	lea    eax,[ebp+0x47]
c0008343:	b9 13 00 00 00       	mov    ecx,0x13
c0008348:	ba 0e 97 02 c0       	mov    edx,0xc002970e
c000834d:	eb 2f                	jmp    c000837e <f_mkfs+0xe11>
c000834f:	8d 45 27             	lea    eax,[ebp+0x27]
c0008352:	ba 00 00 21 50       	mov    edx,0x50210000
c0008357:	e8 41 99 ff ff       	call   c0001c9d <st_dword>
c000835c:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008361:	8d 45 16             	lea    eax,[ebp+0x16]
c0008364:	e8 30 99 ff ff       	call   c0001c99 <st_word>
c0008369:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c000836d:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008371:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008374:	b9 13 00 00 00       	mov    ecx,0x13
c0008379:	ba 22 97 02 c0       	mov    edx,0xc0029722
c000837e:	e8 23 99 ff ff       	call   c0001ca6 <mem_cpy>
c0008383:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0008389:	ba 55 aa 00 00       	mov    edx,0xaa55
c000838e:	89 f0                	mov    eax,esi
c0008390:	e8 04 99 ff ff       	call   c0001c99 <st_word>
c0008395:	83 ec 0c             	sub    esp,0xc
c0008398:	6a 01                	push   0x1
c000839a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000839e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00083a2:	55                   	push   ebp
c00083a3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00083a7:	e8 46 98 ff ff       	call   c0001bf2 <disk_write>
c00083ac:	83 c4 20             	add    esp,0x20
c00083af:	85 c0                	test   eax,eax
c00083b1:	0f 85 67 02 00 00    	jne    c000861e <f_mkfs+0x10b1>
c00083b7:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083bc:	0f 85 b7 00 00 00    	jne    c0008479 <f_mkfs+0xf0c>
c00083c2:	83 ec 0c             	sub    esp,0xc
c00083c5:	6a 01                	push   0x1
c00083c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00083cb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00083cf:	83 c0 06             	add    eax,0x6
c00083d2:	83 d2 00             	adc    edx,0x0
c00083d5:	52                   	push   edx
c00083d6:	50                   	push   eax
c00083d7:	55                   	push   ebp
c00083d8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00083dc:	e8 11 98 ff ff       	call   c0001bf2 <disk_write>
c00083e1:	83 c4 20             	add    esp,0x20
c00083e4:	b9 00 02 00 00       	mov    ecx,0x200
c00083e9:	31 d2                	xor    edx,edx
c00083eb:	89 e8                	mov    eax,ebp
c00083ed:	e8 c9 98 ff ff       	call   c0001cbb <mem_set>
c00083f2:	ba 52 52 61 41       	mov    edx,0x41615252
c00083f7:	89 e8                	mov    eax,ebp
c00083f9:	e8 9f 98 ff ff       	call   c0001c9d <st_dword>
c00083fe:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008404:	ba 72 72 41 61       	mov    edx,0x61417272
c0008409:	e8 8f 98 ff ff       	call   c0001c9d <st_dword>
c000840e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008411:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0008417:	e8 81 98 ff ff       	call   c0001c9d <st_dword>
c000841c:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008422:	ba 02 00 00 00       	mov    edx,0x2
c0008427:	e8 71 98 ff ff       	call   c0001c9d <st_dword>
c000842c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008431:	89 f0                	mov    eax,esi
c0008433:	e8 61 98 ff ff       	call   c0001c99 <st_word>
c0008438:	83 ec 0c             	sub    esp,0xc
c000843b:	6a 01                	push   0x1
c000843d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008441:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008445:	83 c0 07             	add    eax,0x7
c0008448:	83 d2 00             	adc    edx,0x0
c000844b:	52                   	push   edx
c000844c:	50                   	push   eax
c000844d:	55                   	push   ebp
c000844e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008452:	e8 9b 97 ff ff       	call   c0001bf2 <disk_write>
c0008457:	83 c4 14             	add    esp,0x14
c000845a:	6a 01                	push   0x1
c000845c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008460:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008464:	83 c0 01             	add    eax,0x1
c0008467:	83 d2 00             	adc    edx,0x0
c000846a:	52                   	push   edx
c000846b:	50                   	push   eax
c000846c:	55                   	push   ebp
c000846d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008471:	e8 7c 97 ff ff       	call   c0001bf2 <disk_write>
c0008476:	83 c4 20             	add    esp,0x20
c0008479:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008480:	31 d2                	xor    edx,edx
c0008482:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008488:	31 db                	xor    ebx,ebx
c000848a:	89 e8                	mov    eax,ebp
c000848c:	e8 2a 98 ff ff       	call   c0001cbb <mem_set>
c0008491:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008496:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000849d:	0f 94 c3             	sete   bl
c00084a0:	4b                   	dec    ebx
c00084a1:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00084a7:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00084ad:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00084b2:	75 21                	jne    c00084d5 <f_mkfs+0xf68>
c00084b4:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00084b9:	89 e8                	mov    eax,ebp
c00084bb:	e8 dd 97 ff ff       	call   c0001c9d <st_dword>
c00084c0:	8d 45 04             	lea    eax,[ebp+0x4]
c00084c3:	83 ca ff             	or     edx,0xffffffff
c00084c6:	e8 d2 97 ff ff       	call   c0001c9d <st_dword>
c00084cb:	8d 45 08             	lea    eax,[ebp+0x8]
c00084ce:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00084d3:	eb 04                	jmp    c00084d9 <f_mkfs+0xf6c>
c00084d5:	89 da                	mov    edx,ebx
c00084d7:	89 e8                	mov    eax,ebp
c00084d9:	e8 bf 97 ff ff       	call   c0001c9d <st_dword>
c00084de:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00084e2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00084e6:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00084ea:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00084ee:	39 ce                	cmp    esi,ecx
c00084f0:	76 02                	jbe    c00084f4 <f_mkfs+0xf87>
c00084f2:	89 ce                	mov    esi,ecx
c00084f4:	83 ec 0c             	sub    esp,0xc
c00084f7:	56                   	push   esi
c00084f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00084fc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008500:	55                   	push   ebp
c0008501:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008505:	e8 e8 96 ff ff       	call   c0001bf2 <disk_write>
c000850a:	83 c4 20             	add    esp,0x20
c000850d:	85 c0                	test   eax,eax
c000850f:	0f 85 09 01 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0008515:	31 d2                	xor    edx,edx
c0008517:	b9 00 02 00 00       	mov    ecx,0x200
c000851c:	89 e8                	mov    eax,ebp
c000851e:	e8 98 97 ff ff       	call   c0001cbb <mem_set>
c0008523:	31 d2                	xor    edx,edx
c0008525:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c0008529:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000852d:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008531:	75 b3                	jne    c00084e6 <f_mkfs+0xf79>
c0008533:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008536:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000853d:	40                   	inc    eax
c000853e:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008542:	0f 87 65 ff ff ff    	ja     c00084ad <f_mkfs+0xf40>
c0008548:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000854d:	74 04                	je     c0008553 <f_mkfs+0xfe6>
c000854f:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008553:	89 fb                	mov    ebx,edi
c0008555:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008559:	76 04                	jbe    c000855f <f_mkfs+0xff2>
c000855b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000855f:	83 ec 0c             	sub    esp,0xc
c0008562:	53                   	push   ebx
c0008563:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008567:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000856b:	55                   	push   ebp
c000856c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008570:	e8 7d 96 ff ff       	call   c0001bf2 <disk_write>
c0008575:	83 c4 20             	add    esp,0x20
c0008578:	85 c0                	test   eax,eax
c000857a:	0f 85 9e 00 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0008580:	31 d2                	xor    edx,edx
c0008582:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008586:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000858a:	29 df                	sub    edi,ebx
c000858c:	75 c5                	jne    c0008553 <f_mkfs+0xfe6>
c000858e:	b1 0c                	mov    cl,0xc
c0008590:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008595:	74 1d                	je     c00085b4 <f_mkfs+0x1047>
c0008597:	b8 ff ff 00 00       	mov    eax,0xffff
c000859c:	b1 06                	mov    cl,0x6
c000859e:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00085a2:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00085a6:	72 0c                	jb     c00085b4 <f_mkfs+0x1047>
c00085a8:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00085ad:	0f 94 c1             	sete   cl
c00085b0:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00085b4:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00085b9:	75 4c                	jne    c0008607 <f_mkfs+0x109a>
c00085bb:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00085bf:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00085c3:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00085ca:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00085d1:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00085dc:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00085e7:	0f b6 c9             	movzx  ecx,cl
c00085ea:	83 ec 0c             	sub    esp,0xc
c00085ed:	55                   	push   ebp
c00085ee:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00085f5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00085f9:	e8 f9 bf ff ff       	call   c00045f7 <create_partition>
c00085fe:	83 c4 10             	add    esp,0x10
c0008601:	89 c3                	mov    ebx,eax
c0008603:	85 c0                	test   eax,eax
c0008605:	75 34                	jne    c000863b <f_mkfs+0x10ce>
c0008607:	31 db                	xor    ebx,ebx
c0008609:	50                   	push   eax
c000860a:	6a 00                	push   0x0
c000860c:	6a 00                	push   0x0
c000860e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008612:	e8 f1 95 ff ff       	call   c0001c08 <disk_ioctl>
c0008617:	83 c4 10             	add    esp,0x10
c000861a:	85 c0                	test   eax,eax
c000861c:	74 1d                	je     c000863b <f_mkfs+0x10ce>
c000861e:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008626:	75 0c                	jne    c0008634 <f_mkfs+0x10c7>
c0008628:	83 ec 0c             	sub    esp,0xc
c000862b:	55                   	push   ebp
c000862c:	e8 75 00 00 00       	call   c00086a6 <ff_memfree>
c0008631:	83 c4 10             	add    esp,0x10
c0008634:	bb 01 00 00 00       	mov    ebx,0x1
c0008639:	eb 48                	jmp    c0008683 <f_mkfs+0x1116>
c000863b:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008643:	75 3e                	jne    c0008683 <f_mkfs+0x1116>
c0008645:	83 ec 0c             	sub    esp,0xc
c0008648:	55                   	push   ebp
c0008649:	e8 58 00 00 00       	call   c00086a6 <ff_memfree>
c000864e:	83 c4 10             	add    esp,0x10
c0008651:	eb 30                	jmp    c0008683 <f_mkfs+0x1116>
c0008653:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008658:	0f 85 eb fa ff ff    	jne    c0008149 <f_mkfs+0xbdc>
c000865e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008662:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008668:	0f 86 b8 f9 ff ff    	jbe    c0008026 <f_mkfs+0xab9>
c000866e:	e9 bf fb ff ff       	jmp    c0008232 <f_mkfs+0xcc5>
c0008673:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008678:	0f 85 c0 fa ff ff    	jne    c000813e <f_mkfs+0xbd1>
c000867e:	e9 af fb ff ff       	jmp    c0008232 <f_mkfs+0xcc5>
c0008683:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008689:	89 d8                	mov    eax,ebx
c000868b:	5b                   	pop    ebx
c000868c:	5e                   	pop    esi
c000868d:	5f                   	pop    edi
c000868e:	5d                   	pop    ebp
c000868f:	c3                   	ret    

c0008690 <ff_memalloc>:
c0008690:	83 ec 0c             	sub    esp,0xc
c0008693:	83 ec 0c             	sub    esp,0xc
c0008696:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000869a:	e8 7a 71 00 00       	call   c000f819 <malloc>
c000869f:	83 c4 10             	add    esp,0x10
c00086a2:	83 c4 0c             	add    esp,0xc
c00086a5:	c3                   	ret    

c00086a6 <ff_memfree>:
c00086a6:	83 ec 0c             	sub    esp,0xc
c00086a9:	83 ec 0c             	sub    esp,0xc
c00086ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00086b0:	e8 74 71 00 00       	call   c000f829 <free>
c00086b5:	83 c4 10             	add    esp,0x10
c00086b8:	90                   	nop
c00086b9:	83 c4 0c             	add    esp,0xc
c00086bc:	c3                   	ret    

c00086bd <ff_uni2oem>:
c00086bd:	83 ec 14             	sub    esp,0x14
c00086c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00086c4:	66 89 04 24          	mov    WORD PTR [esp],ax
c00086c8:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00086cf:	c7 44 24 0c 40 9a 02 c0 	mov    DWORD PTR [esp+0xc],0xc0029a40
c00086d7:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00086dc:	77 0b                	ja     c00086e9 <ff_uni2oem+0x2c>
c00086de:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00086e2:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00086e7:	eb 5b                	jmp    c0008744 <ff_uni2oem+0x87>
c00086e9:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00086f1:	77 51                	ja     c0008744 <ff_uni2oem+0x87>
c00086f3:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00086f9:	75 49                	jne    c0008744 <ff_uni2oem+0x87>
c00086fb:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008702:	eb 0b                	jmp    c000870f <ff_uni2oem+0x52>
c0008704:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008709:	40                   	inc    eax
c000870a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000870f:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008715:	77 1b                	ja     c0008732 <ff_uni2oem+0x75>
c0008717:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000871c:	01 c0                	add    eax,eax
c000871e:	89 c2                	mov    edx,eax
c0008720:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008724:	01 d0                	add    eax,edx
c0008726:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008729:	0f b7 c0             	movzx  eax,ax
c000872c:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008730:	75 d2                	jne    c0008704 <ff_uni2oem+0x47>
c0008732:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008737:	83 e8 80             	sub    eax,0xffffff80
c000873a:	25 ff 00 00 00       	and    eax,0xff
c000873f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008744:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008749:	83 c4 14             	add    esp,0x14
c000874c:	c3                   	ret    

c000874d <ff_oem2uni>:
c000874d:	83 ec 18             	sub    esp,0x18
c0008750:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008754:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008758:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000875d:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008761:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008768:	c7 44 24 10 40 9a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029a40
c0008770:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008776:	77 0b                	ja     c0008783 <ff_oem2uni+0x36>
c0008778:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000877c:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008781:	eb 2d                	jmp    c00087b0 <ff_oem2uni+0x63>
c0008783:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008789:	75 25                	jne    c00087b0 <ff_oem2uni+0x63>
c000878b:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008792:	77 1c                	ja     c00087b0 <ff_oem2uni+0x63>
c0008794:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008799:	05 80 ff ff 7f       	add    eax,0x7fffff80
c000879e:	01 c0                	add    eax,eax
c00087a0:	89 c2                	mov    edx,eax
c00087a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00087a6:	01 d0                	add    eax,edx
c00087a8:	66 8b 00             	mov    ax,WORD PTR [eax]
c00087ab:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00087b0:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00087b5:	83 c4 18             	add    esp,0x18
c00087b8:	c3                   	ret    

c00087b9 <ff_wtoupper>:
c00087b9:	83 ec 10             	sub    esp,0x10
c00087bc:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00087c4:	0f 87 3e 01 00 00    	ja     c0008908 <ff_wtoupper+0x14f>
c00087ca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00087ce:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00087d3:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00087da:	77 07                	ja     c00087e3 <ff_wtoupper+0x2a>
c00087dc:	b8 40 98 02 c0       	mov    eax,0xc0029840
c00087e1:	eb 05                	jmp    c00087e8 <ff_wtoupper+0x2f>
c00087e3:	b8 80 97 02 c0       	mov    eax,0xc0029780
c00087e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00087ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087f0:	8d 50 02             	lea    edx,[eax+0x2]
c00087f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087f7:	66 8b 00             	mov    ax,WORD PTR [eax]
c00087fa:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00087ff:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008805:	0f 84 f4 00 00 00    	je     c00088ff <ff_wtoupper+0x146>
c000880b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008810:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008815:	0f 82 e4 00 00 00    	jb     c00088ff <ff_wtoupper+0x146>
c000881b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000881f:	8d 50 02             	lea    edx,[eax+0x2]
c0008822:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008826:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008829:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000882e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008833:	66 c1 e8 08          	shr    ax,0x8
c0008837:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c000883c:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008843:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008848:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000884d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008852:	01 ca                	add    edx,ecx
c0008854:	39 d0                	cmp    eax,edx
c0008856:	0f 8d 86 00 00 00    	jge    c00088e2 <ff_wtoupper+0x129>
c000885c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008861:	83 f8 08             	cmp    eax,0x8
c0008864:	0f 87 94 00 00 00    	ja     c00088fe <ff_wtoupper+0x145>
c000886a:	8b 04 85 40 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd68c0]
c0008871:	ff e0                	jmp    eax
c0008873:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008878:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000887d:	29 c2                	sub    edx,eax
c000887f:	89 d0                	mov    eax,edx
c0008881:	01 c0                	add    eax,eax
c0008883:	89 c2                	mov    edx,eax
c0008885:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008889:	01 d0                	add    eax,edx
c000888b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000888e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008893:	eb 4b                	jmp    c00088e0 <ff_wtoupper+0x127>
c0008895:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000889a:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000889e:	83 e0 01             	and    eax,0x1
c00088a1:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00088a6:	eb 38                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088a8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00088ae:	eb 30                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088b0:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00088b6:	eb 28                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088b8:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00088be:	eb 20                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088c0:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00088c6:	eb 18                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088c8:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00088ce:	eb 10                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088d0:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00088d6:	eb 08                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088d8:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00088df:	90                   	nop
c00088e0:	eb 1c                	jmp    c00088fe <ff_wtoupper+0x145>
c00088e2:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00088e8:	0f 85 fe fe ff ff    	jne    c00087ec <ff_wtoupper+0x33>
c00088ee:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00088f3:	01 c0                	add    eax,eax
c00088f5:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00088f9:	e9 ee fe ff ff       	jmp    c00087ec <ff_wtoupper+0x33>
c00088fe:	90                   	nop
c00088ff:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008904:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008908:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000890c:	83 c4 10             	add    esp,0x10
c000890f:	c3                   	ret    

c0008910 <psrc_set_converter>:
c0008910:	56                   	push   esi
c0008911:	89 d6                	mov    esi,edx
c0008913:	53                   	push   ebx
c0008914:	89 c3                	mov    ebx,eax
c0008916:	83 ec 0c             	sub    esp,0xc
c0008919:	52                   	push   edx
c000891a:	50                   	push   eax
c000891b:	e8 6f 55 00 00       	call   c000de8f <sinc_set_converter>
c0008920:	83 c4 10             	add    esp,0x10
c0008923:	85 c0                	test   eax,eax
c0008925:	74 25                	je     c000894c <psrc_set_converter+0x3c>
c0008927:	50                   	push   eax
c0008928:	50                   	push   eax
c0008929:	56                   	push   esi
c000892a:	53                   	push   ebx
c000892b:	e8 17 5d 00 00       	call   c000e647 <zoh_set_converter>
c0008930:	83 c4 10             	add    esp,0x10
c0008933:	85 c0                	test   eax,eax
c0008935:	74 15                	je     c000894c <psrc_set_converter+0x3c>
c0008937:	51                   	push   ecx
c0008938:	51                   	push   ecx
c0008939:	56                   	push   esi
c000893a:	53                   	push   ebx
c000893b:	e8 0f 11 00 00       	call   c0009a4f <linear_set_converter>
c0008940:	83 c4 10             	add    esp,0x10
c0008943:	ba 0a 00 00 00       	mov    edx,0xa
c0008948:	85 c0                	test   eax,eax
c000894a:	75 02                	jne    c000894e <psrc_set_converter+0x3e>
c000894c:	31 d2                	xor    edx,edx
c000894e:	89 d0                	mov    eax,edx
c0008950:	5a                   	pop    edx
c0008951:	5b                   	pop    ebx
c0008952:	5e                   	pop    esi
c0008953:	c3                   	ret    

c0008954 <src_delete>:
c0008954:	53                   	push   ebx
c0008955:	83 ec 08             	sub    esp,0x8
c0008958:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000895c:	85 db                	test   ebx,ebx
c000895e:	74 29                	je     c0008989 <src_delete+0x35>
c0008960:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008963:	85 c0                	test   eax,eax
c0008965:	74 0c                	je     c0008973 <src_delete+0x1f>
c0008967:	83 ec 0c             	sub    esp,0xc
c000896a:	50                   	push   eax
c000896b:	e8 b9 6e 00 00       	call   c000f829 <free>
c0008970:	83 c4 10             	add    esp,0x10
c0008973:	50                   	push   eax
c0008974:	6a 3c                	push   0x3c
c0008976:	6a 00                	push   0x0
c0008978:	53                   	push   ebx
c0008979:	e8 d2 7d ff ff       	call   c0000750 <memset>
c000897e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008981:	e8 a3 6e 00 00       	call   c000f829 <free>
c0008986:	83 c4 10             	add    esp,0x10
c0008989:	31 c0                	xor    eax,eax
c000898b:	83 c4 08             	add    esp,0x8
c000898e:	5b                   	pop    ebx
c000898f:	c3                   	ret    

c0008990 <src_process>:
c0008990:	55                   	push   ebp
c0008991:	57                   	push   edi
c0008992:	56                   	push   esi
c0008993:	53                   	push   ebx
c0008994:	83 ec 1c             	sub    esp,0x1c
c0008997:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000899b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000899f:	85 ed                	test   ebp,ebp
c00089a1:	0f 84 6f 01 00 00    	je     c0008b16 <src_process+0x186>
c00089a7:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00089ab:	0f 84 6c 01 00 00    	je     c0008b1d <src_process+0x18d>
c00089b1:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00089b5:	0f 84 62 01 00 00    	je     c0008b1d <src_process+0x18d>
c00089bb:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00089c2:	0f 85 5c 01 00 00    	jne    c0008b24 <src_process+0x194>
c00089c8:	85 db                	test   ebx,ebx
c00089ca:	0f 84 5b 01 00 00    	je     c0008b2b <src_process+0x19b>
c00089d0:	8b 33                	mov    esi,DWORD PTR [ebx]
c00089d2:	85 f6                	test   esi,esi
c00089d4:	0f 84 58 01 00 00    	je     c0008b32 <src_process+0x1a2>
c00089da:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00089dd:	85 ff                	test   edi,edi
c00089df:	0f 84 4d 01 00 00    	je     c0008b32 <src_process+0x1a2>
c00089e5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00089e8:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00089eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00089ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00089f3:	68 00 00 70 3f       	push   0x3f700000
c00089f8:	6a 00                	push   0x0
c00089fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00089fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008a02:	e8 40 fc 01 00       	call   c0028647 <__ltdf2>
c0008a07:	83 c4 10             	add    esp,0x10
c0008a0a:	85 c0                	test   eax,eax
c0008a0c:	0f 88 27 01 00 00    	js     c0008b39 <src_process+0x1a9>
c0008a12:	68 00 00 70 40       	push   0x40700000
c0008a17:	6a 00                	push   0x0
c0008a19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008a1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008a21:	e8 03 fc 01 00       	call   c0028629 <__gtdf2>
c0008a26:	83 c4 10             	add    esp,0x10
c0008a29:	85 c0                	test   eax,eax
c0008a2b:	0f 8f 08 01 00 00    	jg     c0008b39 <src_process+0x1a9>
c0008a31:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008a35:	79 07                	jns    c0008a3e <src_process+0xae>
c0008a37:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008a3e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008a41:	85 c0                	test   eax,eax
c0008a43:	79 50                	jns    c0008a95 <src_process+0x105>
c0008a45:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008a4c:	39 fe                	cmp    esi,edi
c0008a4e:	72 37                	jb     c0008a87 <src_process+0xf7>
c0008a50:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008a57:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008a5e:	68 00 00 70 3f       	push   0x3f700000
c0008a63:	6a 00                	push   0x0
c0008a65:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008a68:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008a6b:	e8 d7 fb 01 00       	call   c0028647 <__ltdf2>
c0008a70:	83 c4 10             	add    esp,0x10
c0008a73:	85 c0                	test   eax,eax
c0008a75:	79 37                	jns    c0008aae <src_process+0x11e>
c0008a77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008a7b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008a7f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008a82:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008a85:	eb 27                	jmp    c0008aae <src_process+0x11e>
c0008a87:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008a8a:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008a8e:	8d 04 86             	lea    eax,[esi+eax*4]
c0008a91:	39 c7                	cmp    edi,eax
c0008a93:	eb 0d                	jmp    c0008aa2 <src_process+0x112>
c0008a95:	39 fe                	cmp    esi,edi
c0008a97:	72 ee                	jb     c0008a87 <src_process+0xf7>
c0008a99:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008a9d:	8d 04 87             	lea    eax,[edi+eax*4]
c0008aa0:	39 c6                	cmp    esi,eax
c0008aa2:	73 ac                	jae    c0008a50 <src_process+0xc0>
c0008aa4:	b8 10 00 00 00       	mov    eax,0x10
c0008aa9:	e9 90 00 00 00       	jmp    c0008b3e <src_process+0x1ae>
c0008aae:	83 ec 10             	sub    esp,0x10
c0008ab1:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008ab4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008ab7:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008aba:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008abd:	e8 8a f2 01 00       	call   c0027d4c <__subdf3>
c0008ac2:	83 c4 18             	add    esp,0x18
c0008ac5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ac9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008acd:	52                   	push   edx
c0008ace:	50                   	push   eax
c0008acf:	e8 0c fd 01 00       	call   c00287e0 <fabs>
c0008ad4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008ad8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008adc:	83 c4 10             	add    esp,0x10
c0008adf:	68 af 03 d2 3c       	push   0x3cd203af
c0008ae4:	68 16 56 e7 9e       	push   0x9ee75616
c0008ae9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008aed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008af1:	e8 51 fb 01 00       	call   c0028647 <__ltdf2>
c0008af6:	83 c4 10             	add    esp,0x10
c0008af9:	85 c0                	test   eax,eax
c0008afb:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0008aff:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0008b03:	79 05                	jns    c0008b0a <src_process+0x17a>
c0008b05:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c0008b08:	eb 03                	jmp    c0008b0d <src_process+0x17d>
c0008b0a:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008b0d:	83 c4 1c             	add    esp,0x1c
c0008b10:	5b                   	pop    ebx
c0008b11:	5e                   	pop    esi
c0008b12:	5f                   	pop    edi
c0008b13:	5d                   	pop    ebp
c0008b14:	ff e0                	jmp    eax
c0008b16:	b8 02 00 00 00       	mov    eax,0x2
c0008b1b:	eb 21                	jmp    c0008b3e <src_process+0x1ae>
c0008b1d:	b8 07 00 00 00       	mov    eax,0x7
c0008b22:	eb 1a                	jmp    c0008b3e <src_process+0x1ae>
c0008b24:	b8 12 00 00 00       	mov    eax,0x12
c0008b29:	eb 13                	jmp    c0008b3e <src_process+0x1ae>
c0008b2b:	b8 03 00 00 00       	mov    eax,0x3
c0008b30:	eb 0c                	jmp    c0008b3e <src_process+0x1ae>
c0008b32:	b8 04 00 00 00       	mov    eax,0x4
c0008b37:	eb 05                	jmp    c0008b3e <src_process+0x1ae>
c0008b39:	b8 06 00 00 00       	mov    eax,0x6
c0008b3e:	83 c4 1c             	add    esp,0x1c
c0008b41:	5b                   	pop    ebx
c0008b42:	5e                   	pop    esi
c0008b43:	5f                   	pop    edi
c0008b44:	5d                   	pop    ebp
c0008b45:	c3                   	ret    

c0008b46 <src_callback_read>:
c0008b46:	55                   	push   ebp
c0008b47:	57                   	push   edi
c0008b48:	56                   	push   esi
c0008b49:	53                   	push   ebx
c0008b4a:	83 ec 3c             	sub    esp,0x3c
c0008b4d:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008b51:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008b55:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008b59:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008b5d:	85 ed                	test   ebp,ebp
c0008b5f:	0f 8e 52 01 00 00    	jle    c0008cb7 <src_callback_read+0x171>
c0008b65:	85 db                	test   ebx,ebx
c0008b67:	0f 84 4a 01 00 00    	je     c0008cb7 <src_callback_read+0x171>
c0008b6d:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008b74:	74 0c                	je     c0008b82 <src_callback_read+0x3c>
c0008b76:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008b7d:	e9 35 01 00 00       	jmp    c0008cb7 <src_callback_read+0x171>
c0008b82:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008b86:	75 0c                	jne    c0008b94 <src_callback_read+0x4e>
c0008b88:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008b8f:	e9 23 01 00 00       	jmp    c0008cb7 <src_callback_read+0x171>
c0008b94:	51                   	push   ecx
c0008b95:	6a 24                	push   0x24
c0008b97:	6a 00                	push   0x0
c0008b99:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008b9d:	50                   	push   eax
c0008b9e:	e8 ad 7b ff ff       	call   c0000750 <memset>
c0008ba3:	83 c4 10             	add    esp,0x10
c0008ba6:	68 00 00 70 3f       	push   0x3f700000
c0008bab:	6a 00                	push   0x0
c0008bad:	57                   	push   edi
c0008bae:	56                   	push   esi
c0008baf:	e8 93 fa 01 00       	call   c0028647 <__ltdf2>
c0008bb4:	83 c4 10             	add    esp,0x10
c0008bb7:	85 c0                	test   eax,eax
c0008bb9:	78 3e                	js     c0008bf9 <src_callback_read+0xb3>
c0008bbb:	68 00 00 70 40       	push   0x40700000
c0008bc0:	6a 00                	push   0x0
c0008bc2:	57                   	push   edi
c0008bc3:	56                   	push   esi
c0008bc4:	e8 60 fa 01 00       	call   c0028629 <__gtdf2>
c0008bc9:	83 c4 10             	add    esp,0x10
c0008bcc:	85 c0                	test   eax,eax
c0008bce:	7f 29                	jg     c0008bf9 <src_callback_read+0xb3>
c0008bd0:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0008bd4:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0008bd8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008bdc:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0008be0:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0008be3:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c0008be7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008beb:	31 f6                	xor    esi,esi
c0008bed:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0008bf0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008bf4:	e9 97 00 00 00       	jmp    c0008c90 <src_callback_read+0x14a>
c0008bf9:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008c00:	e9 b2 00 00 00       	jmp    c0008cb7 <src_callback_read+0x171>
c0008c05:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008c09:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c0d:	52                   	push   edx
c0008c0e:	52                   	push   edx
c0008c0f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008c13:	50                   	push   eax
c0008c14:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008c17:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008c1a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008c1e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008c22:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008c26:	83 c4 10             	add    esp,0x10
c0008c29:	85 c0                	test   eax,eax
c0008c2b:	75 08                	jne    c0008c35 <src_callback_read+0xef>
c0008c2d:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008c35:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008c3c:	50                   	push   eax
c0008c3d:	50                   	push   eax
c0008c3e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008c42:	50                   	push   eax
c0008c43:	53                   	push   ebx
c0008c44:	e8 47 fd ff ff       	call   c0008990 <src_process>
c0008c49:	83 c4 10             	add    esp,0x10
c0008c4c:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c53:	85 c0                	test   eax,eax
c0008c55:	75 49                	jne    c0008ca0 <src_callback_read+0x15a>
c0008c57:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008c5b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008c5e:	89 f9                	mov    ecx,edi
c0008c60:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008c64:	0f af ca             	imul   ecx,edx
c0008c67:	c1 e1 02             	shl    ecx,0x2
c0008c6a:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008c6e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008c72:	0f af d1             	imul   edx,ecx
c0008c75:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008c79:	c1 e2 02             	shl    edx,0x2
c0008c7c:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008c80:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008c83:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008c88:	74 12                	je     c0008c9c <src_callback_read+0x156>
c0008c8a:	39 d5                	cmp    ebp,edx
c0008c8c:	7e 14                	jle    c0008ca2 <src_callback_read+0x15c>
c0008c8e:	89 d6                	mov    esi,edx
c0008c90:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008c95:	75 9e                	jne    c0008c35 <src_callback_read+0xef>
c0008c97:	e9 69 ff ff ff       	jmp    c0008c05 <src_callback_read+0xbf>
c0008c9c:	85 c9                	test   ecx,ecx
c0008c9e:	75 ea                	jne    c0008c8a <src_callback_read+0x144>
c0008ca0:	89 f2                	mov    edx,esi
c0008ca2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008ca6:	85 c0                	test   eax,eax
c0008ca8:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008cab:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008caf:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008cb2:	74 05                	je     c0008cb9 <src_callback_read+0x173>
c0008cb4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008cb7:	31 d2                	xor    edx,edx
c0008cb9:	83 c4 3c             	add    esp,0x3c
c0008cbc:	89 d0                	mov    eax,edx
c0008cbe:	5b                   	pop    ebx
c0008cbf:	5e                   	pop    esi
c0008cc0:	5f                   	pop    edi
c0008cc1:	5d                   	pop    ebp
c0008cc2:	c3                   	ret    

c0008cc3 <src_set_ratio>:
c0008cc3:	57                   	push   edi
c0008cc4:	ba 02 00 00 00       	mov    edx,0x2
c0008cc9:	56                   	push   esi
c0008cca:	53                   	push   ebx
c0008ccb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ccf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008cd3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008cd7:	85 db                	test   ebx,ebx
c0008cd9:	74 4c                	je     c0008d27 <src_set_ratio+0x64>
c0008cdb:	ba 07 00 00 00       	mov    edx,0x7
c0008ce0:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008ce4:	74 41                	je     c0008d27 <src_set_ratio+0x64>
c0008ce6:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008cea:	74 3b                	je     c0008d27 <src_set_ratio+0x64>
c0008cec:	68 00 00 70 3f       	push   0x3f700000
c0008cf1:	6a 00                	push   0x0
c0008cf3:	57                   	push   edi
c0008cf4:	56                   	push   esi
c0008cf5:	e8 4d f9 01 00       	call   c0028647 <__ltdf2>
c0008cfa:	83 c4 10             	add    esp,0x10
c0008cfd:	ba 06 00 00 00       	mov    edx,0x6
c0008d02:	85 c0                	test   eax,eax
c0008d04:	78 21                	js     c0008d27 <src_set_ratio+0x64>
c0008d06:	68 00 00 70 40       	push   0x40700000
c0008d0b:	6a 00                	push   0x0
c0008d0d:	57                   	push   edi
c0008d0e:	56                   	push   esi
c0008d0f:	e8 15 f9 01 00       	call   c0028629 <__gtdf2>
c0008d14:	83 c4 10             	add    esp,0x10
c0008d17:	ba 06 00 00 00       	mov    edx,0x6
c0008d1c:	85 c0                	test   eax,eax
c0008d1e:	7f 07                	jg     c0008d27 <src_set_ratio+0x64>
c0008d20:	89 33                	mov    DWORD PTR [ebx],esi
c0008d22:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008d25:	31 d2                	xor    edx,edx
c0008d27:	5b                   	pop    ebx
c0008d28:	89 d0                	mov    eax,edx
c0008d2a:	5e                   	pop    esi
c0008d2b:	5f                   	pop    edi
c0008d2c:	c3                   	ret    

c0008d2d <src_get_channels>:
c0008d2d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d31:	b8 02 00 00 00       	mov    eax,0x2
c0008d36:	85 d2                	test   edx,edx
c0008d38:	74 14                	je     c0008d4e <src_get_channels+0x21>
c0008d3a:	b8 07 00 00 00       	mov    eax,0x7
c0008d3f:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008d43:	74 09                	je     c0008d4e <src_get_channels+0x21>
c0008d45:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008d49:	74 03                	je     c0008d4e <src_get_channels+0x21>
c0008d4b:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008d4e:	c3                   	ret    

c0008d4f <src_reset>:
c0008d4f:	53                   	push   ebx
c0008d50:	b8 02 00 00 00       	mov    eax,0x2
c0008d55:	83 ec 08             	sub    esp,0x8
c0008d58:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008d5c:	85 db                	test   ebx,ebx
c0008d5e:	74 36                	je     c0008d96 <src_reset+0x47>
c0008d60:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008d63:	85 c0                	test   eax,eax
c0008d65:	74 09                	je     c0008d70 <src_reset+0x21>
c0008d67:	83 ec 0c             	sub    esp,0xc
c0008d6a:	53                   	push   ebx
c0008d6b:	ff d0                	call   eax
c0008d6d:	83 c4 10             	add    esp,0x10
c0008d70:	31 c0                	xor    eax,eax
c0008d72:	31 d2                	xor    edx,edx
c0008d74:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008d77:	89 03                	mov    DWORD PTR [ebx],eax
c0008d79:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008d7c:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008d7f:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008d86:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008d8d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008d94:	31 c0                	xor    eax,eax
c0008d96:	83 c4 08             	add    esp,0x8
c0008d99:	5b                   	pop    ebx
c0008d9a:	c3                   	ret    

c0008d9b <src_new>:
c0008d9b:	57                   	push   edi
c0008d9c:	56                   	push   esi
c0008d9d:	53                   	push   ebx
c0008d9e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008da2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008da6:	85 f6                	test   esi,esi
c0008da8:	74 73                	je     c0008e1d <src_new+0x82>
c0008daa:	85 ff                	test   edi,edi
c0008dac:	7f 08                	jg     c0008db6 <src_new+0x1b>
c0008dae:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008db4:	eb 1e                	jmp    c0008dd4 <src_new+0x39>
c0008db6:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008dbc:	50                   	push   eax
c0008dbd:	50                   	push   eax
c0008dbe:	6a 3c                	push   0x3c
c0008dc0:	6a 01                	push   0x1
c0008dc2:	e8 82 6a 00 00       	call   c000f849 <calloc>
c0008dc7:	83 c4 10             	add    esp,0x10
c0008dca:	89 c3                	mov    ebx,eax
c0008dcc:	85 c0                	test   eax,eax
c0008dce:	75 10                	jne    c0008de0 <src_new+0x45>
c0008dd0:	85 f6                	test   esi,esi
c0008dd2:	75 04                	jne    c0008dd8 <src_new+0x3d>
c0008dd4:	31 db                	xor    ebx,ebx
c0008dd6:	eb 4b                	jmp    c0008e23 <src_new+0x88>
c0008dd8:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008dde:	eb 43                	jmp    c0008e23 <src_new+0x88>
c0008de0:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008de3:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008dea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008dee:	e8 1d fb ff ff       	call   c0008910 <psrc_set_converter>
c0008df3:	85 c0                	test   eax,eax
c0008df5:	74 18                	je     c0008e0f <src_new+0x74>
c0008df7:	85 f6                	test   esi,esi
c0008df9:	74 06                	je     c0008e01 <src_new+0x66>
c0008dfb:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008e01:	83 ec 0c             	sub    esp,0xc
c0008e04:	53                   	push   ebx
c0008e05:	31 db                	xor    ebx,ebx
c0008e07:	e8 1d 6a 00 00       	call   c000f829 <free>
c0008e0c:	83 c4 10             	add    esp,0x10
c0008e0f:	83 ec 0c             	sub    esp,0xc
c0008e12:	53                   	push   ebx
c0008e13:	e8 37 ff ff ff       	call   c0008d4f <src_reset>
c0008e18:	83 c4 10             	add    esp,0x10
c0008e1b:	eb 06                	jmp    c0008e23 <src_new+0x88>
c0008e1d:	85 ff                	test   edi,edi
c0008e1f:	7f 9b                	jg     c0008dbc <src_new+0x21>
c0008e21:	eb b1                	jmp    c0008dd4 <src_new+0x39>
c0008e23:	89 d8                	mov    eax,ebx
c0008e25:	5b                   	pop    ebx
c0008e26:	5e                   	pop    esi
c0008e27:	5f                   	pop    edi
c0008e28:	c3                   	ret    

c0008e29 <src_callback_new>:
c0008e29:	56                   	push   esi
c0008e2a:	53                   	push   ebx
c0008e2b:	53                   	push   ebx
c0008e2c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008e30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008e34:	85 f6                	test   esi,esi
c0008e36:	75 0e                	jne    c0008e46 <src_callback_new+0x1d>
c0008e38:	31 db                	xor    ebx,ebx
c0008e3a:	85 c0                	test   eax,eax
c0008e3c:	74 47                	je     c0008e85 <src_callback_new+0x5c>
c0008e3e:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008e44:	eb 3f                	jmp    c0008e85 <src_callback_new+0x5c>
c0008e46:	85 c0                	test   eax,eax
c0008e48:	74 06                	je     c0008e50 <src_callback_new+0x27>
c0008e4a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008e50:	51                   	push   ecx
c0008e51:	50                   	push   eax
c0008e52:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008e56:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008e5a:	e8 3c ff ff ff       	call   c0008d9b <src_new>
c0008e5f:	83 c4 10             	add    esp,0x10
c0008e62:	89 c3                	mov    ebx,eax
c0008e64:	85 c0                	test   eax,eax
c0008e66:	74 1d                	je     c0008e85 <src_callback_new+0x5c>
c0008e68:	83 ec 0c             	sub    esp,0xc
c0008e6b:	50                   	push   eax
c0008e6c:	e8 de fe ff ff       	call   c0008d4f <src_reset>
c0008e71:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008e75:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008e7c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008e7f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008e82:	83 c4 10             	add    esp,0x10
c0008e85:	89 d8                	mov    eax,ebx
c0008e87:	5a                   	pop    edx
c0008e88:	5b                   	pop    ebx
c0008e89:	5e                   	pop    esi
c0008e8a:	c3                   	ret    

c0008e8b <src_get_name>:
c0008e8b:	53                   	push   ebx
c0008e8c:	83 ec 14             	sub    esp,0x14
c0008e8f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008e93:	53                   	push   ebx
c0008e94:	e8 d0 4f 00 00       	call   c000de69 <sinc_get_name>
c0008e99:	83 c4 10             	add    esp,0x10
c0008e9c:	85 c0                	test   eax,eax
c0008e9e:	75 1d                	jne    c0008ebd <src_get_name+0x32>
c0008ea0:	83 ec 0c             	sub    esp,0xc
c0008ea3:	53                   	push   ebx
c0008ea4:	e8 80 57 00 00       	call   c000e629 <zoh_get_name>
c0008ea9:	83 c4 10             	add    esp,0x10
c0008eac:	85 c0                	test   eax,eax
c0008eae:	75 0d                	jne    c0008ebd <src_get_name+0x32>
c0008eb0:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008eb4:	83 c4 08             	add    esp,0x8
c0008eb7:	5b                   	pop    ebx
c0008eb8:	e9 74 0b 00 00       	jmp    c0009a31 <linear_get_name>
c0008ebd:	83 c4 08             	add    esp,0x8
c0008ec0:	5b                   	pop    ebx
c0008ec1:	c3                   	ret    

c0008ec2 <src_get_description>:
c0008ec2:	53                   	push   ebx
c0008ec3:	83 ec 14             	sub    esp,0x14
c0008ec6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008eca:	53                   	push   ebx
c0008ecb:	e8 ac 4f 00 00       	call   c000de7c <sinc_get_description>
c0008ed0:	83 c4 10             	add    esp,0x10
c0008ed3:	85 c0                	test   eax,eax
c0008ed5:	75 1d                	jne    c0008ef4 <src_get_description+0x32>
c0008ed7:	83 ec 0c             	sub    esp,0xc
c0008eda:	53                   	push   ebx
c0008edb:	e8 58 57 00 00       	call   c000e638 <zoh_get_description>
c0008ee0:	83 c4 10             	add    esp,0x10
c0008ee3:	85 c0                	test   eax,eax
c0008ee5:	75 0d                	jne    c0008ef4 <src_get_description+0x32>
c0008ee7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008eeb:	83 c4 08             	add    esp,0x8
c0008eee:	5b                   	pop    ebx
c0008eef:	e9 4c 0b 00 00       	jmp    c0009a40 <linear_get_description>
c0008ef4:	83 c4 08             	add    esp,0x8
c0008ef7:	5b                   	pop    ebx
c0008ef8:	c3                   	ret    

c0008ef9 <src_get_version>:
c0008ef9:	b8 40 9b 02 c0       	mov    eax,0xc0029b40
c0008efe:	c3                   	ret    

c0008eff <src_is_valid_ratio>:
c0008eff:	83 ec 1c             	sub    esp,0x1c
c0008f02:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008f0a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f12:	68 00 00 70 3f       	push   0x3f700000
c0008f17:	6a 00                	push   0x0
c0008f19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f21:	e8 21 f7 01 00       	call   c0028647 <__ltdf2>
c0008f26:	83 c4 10             	add    esp,0x10
c0008f29:	31 d2                	xor    edx,edx
c0008f2b:	85 c0                	test   eax,eax
c0008f2d:	78 1e                	js     c0008f4d <src_is_valid_ratio+0x4e>
c0008f2f:	68 00 00 70 40       	push   0x40700000
c0008f34:	6a 00                	push   0x0
c0008f36:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f3e:	e8 e6 f6 01 00       	call   c0028629 <__gtdf2>
c0008f43:	31 d2                	xor    edx,edx
c0008f45:	83 c4 10             	add    esp,0x10
c0008f48:	85 c0                	test   eax,eax
c0008f4a:	0f 9e c2             	setle  dl
c0008f4d:	89 d0                	mov    eax,edx
c0008f4f:	83 c4 1c             	add    esp,0x1c
c0008f52:	c3                   	ret    

c0008f53 <src_error>:
c0008f53:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008f57:	31 c0                	xor    eax,eax
c0008f59:	85 d2                	test   edx,edx
c0008f5b:	74 03                	je     c0008f60 <src_error+0xd>
c0008f5d:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008f60:	c3                   	ret    

c0008f61 <src_strerror>:
c0008f61:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008f65:	31 c0                	xor    eax,eax
c0008f67:	83 fa 17             	cmp    edx,0x17
c0008f6a:	77 07                	ja     c0008f73 <src_strerror+0x12>
c0008f6c:	8b 04 95 a0 9f 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6060]
c0008f73:	c3                   	ret    

c0008f74 <src_simple>:
c0008f74:	56                   	push   esi
c0008f75:	53                   	push   ebx
c0008f76:	83 ec 18             	sub    esp,0x18
c0008f79:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f7d:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008f81:	50                   	push   eax
c0008f82:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008f86:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008f8a:	e8 0c fe ff ff       	call   c0008d9b <src_new>
c0008f8f:	83 c4 10             	add    esp,0x10
c0008f92:	85 c0                	test   eax,eax
c0008f94:	75 06                	jne    c0008f9c <src_simple+0x28>
c0008f96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008f9a:	eb 25                	jmp    c0008fc1 <src_simple+0x4d>
c0008f9c:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008fa3:	89 c3                	mov    ebx,eax
c0008fa5:	50                   	push   eax
c0008fa6:	50                   	push   eax
c0008fa7:	56                   	push   esi
c0008fa8:	53                   	push   ebx
c0008fa9:	e8 e2 f9 ff ff       	call   c0008990 <src_process>
c0008fae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008fb1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008fb5:	e8 9a f9 ff ff       	call   c0008954 <src_delete>
c0008fba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fbe:	83 c4 10             	add    esp,0x10
c0008fc1:	83 c4 14             	add    esp,0x14
c0008fc4:	5b                   	pop    ebx
c0008fc5:	5e                   	pop    esi
c0008fc6:	c3                   	ret    

c0008fc7 <src_short_to_float_array>:
c0008fc7:	53                   	push   ebx
c0008fc8:	83 ec 18             	sub    esp,0x18
c0008fcb:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008fcf:	85 db                	test   ebx,ebx
c0008fd1:	74 54                	je     c0009027 <src_short_to_float_array+0x60>
c0008fd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008fd7:	4b                   	dec    ebx
c0008fd8:	83 ec 0c             	sub    esp,0xc
c0008fdb:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008fdf:	50                   	push   eax
c0008fe0:	e8 f6 f3 01 00       	call   c00283db <__floatsidf>
c0008fe5:	83 c4 10             	add    esp,0x10
c0008fe8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008fec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ff0:	68 00 00 00 3f       	push   0x3f000000
c0008ff5:	6a 00                	push   0x0
c0008ff7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ffb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fff:	e8 74 ed 01 00       	call   c0027d78 <__muldf3>
c0009004:	59                   	pop    ecx
c0009005:	59                   	pop    ecx
c0009006:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000900a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000900e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009012:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009016:	e8 30 f6 01 00       	call   c002864b <__truncdfsf2>
c000901b:	83 c4 10             	add    esp,0x10
c000901e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009022:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0009025:	eb a8                	jmp    c0008fcf <src_short_to_float_array+0x8>
c0009027:	83 c4 18             	add    esp,0x18
c000902a:	5b                   	pop    ebx
c000902b:	c3                   	ret    

c000902c <src_float_to_short_array>:
c000902c:	56                   	push   esi
c000902d:	53                   	push   ebx
c000902e:	83 ec 14             	sub    esp,0x14
c0009031:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0009035:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0009039:	85 db                	test   ebx,ebx
c000903b:	0f 84 a4 00 00 00    	je     c00090e5 <src_float_to_short_array+0xb9>
c0009041:	83 ec 0c             	sub    esp,0xc
c0009044:	4b                   	dec    ebx
c0009045:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0009049:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c000904c:	e8 1e f7 01 00       	call   c002876f <__extendsfdf2>
c0009051:	83 c4 10             	add    esp,0x10
c0009054:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009058:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000905c:	68 00 00 e0 41       	push   0x41e00000
c0009061:	6a 00                	push   0x0
c0009063:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009067:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000906b:	e8 08 ed 01 00       	call   c0027d78 <__muldf3>
c0009070:	83 c4 10             	add    esp,0x10
c0009073:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009077:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000907b:	68 ff ff df 41       	push   0x41dfffff
c0009080:	68 00 00 c0 ff       	push   0xffc00000
c0009085:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009089:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000908d:	e8 b3 f5 01 00       	call   c0028645 <__gedf2>
c0009092:	83 c4 10             	add    esp,0x10
c0009095:	85 c0                	test   eax,eax
c0009097:	78 08                	js     c00090a1 <src_float_to_short_array+0x75>
c0009099:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c000909f:	eb 98                	jmp    c0009039 <src_float_to_short_array+0xd>
c00090a1:	68 00 00 e0 c1       	push   0xc1e00000
c00090a6:	6a 00                	push   0x0
c00090a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090b0:	e8 94 f5 01 00       	call   c0028649 <__ledf2>
c00090b5:	83 c4 10             	add    esp,0x10
c00090b8:	85 c0                	test   eax,eax
c00090ba:	7f 0b                	jg     c00090c7 <src_float_to_short_array+0x9b>
c00090bc:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c00090c2:	e9 72 ff ff ff       	jmp    c0009039 <src_float_to_short_array+0xd>
c00090c7:	50                   	push   eax
c00090c8:	50                   	push   eax
c00090c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090d1:	e8 2a f7 01 00       	call   c0028800 <lrint>
c00090d6:	83 c4 10             	add    esp,0x10
c00090d9:	c1 f8 10             	sar    eax,0x10
c00090dc:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c00090e0:	e9 54 ff ff ff       	jmp    c0009039 <src_float_to_short_array+0xd>
c00090e5:	83 c4 14             	add    esp,0x14
c00090e8:	5b                   	pop    ebx
c00090e9:	5e                   	pop    esi
c00090ea:	c3                   	ret    

c00090eb <src_int_to_float_array>:
c00090eb:	53                   	push   ebx
c00090ec:	83 ec 18             	sub    esp,0x18
c00090ef:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00090f3:	85 db                	test   ebx,ebx
c00090f5:	74 52                	je     c0009149 <src_int_to_float_array+0x5e>
c00090f7:	83 ec 0c             	sub    esp,0xc
c00090fa:	4b                   	dec    ebx
c00090fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00090ff:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0009102:	e8 d4 f2 01 00       	call   c00283db <__floatsidf>
c0009107:	83 c4 10             	add    esp,0x10
c000910a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000910e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009112:	68 00 00 00 3e       	push   0x3e000000
c0009117:	6a 00                	push   0x0
c0009119:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000911d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009121:	e8 52 ec 01 00       	call   c0027d78 <__muldf3>
c0009126:	59                   	pop    ecx
c0009127:	59                   	pop    ecx
c0009128:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000912c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009130:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009134:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009138:	e8 0e f5 01 00       	call   c002864b <__truncdfsf2>
c000913d:	83 c4 10             	add    esp,0x10
c0009140:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009144:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0009147:	eb aa                	jmp    c00090f3 <src_int_to_float_array+0x8>
c0009149:	83 c4 18             	add    esp,0x18
c000914c:	5b                   	pop    ebx
c000914d:	c3                   	ret    

c000914e <src_float_to_int_array>:
c000914e:	56                   	push   esi
c000914f:	53                   	push   ebx
c0009150:	83 ec 14             	sub    esp,0x14
c0009153:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0009157:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000915b:	85 db                	test   ebx,ebx
c000915d:	0f 84 a2 00 00 00    	je     c0009205 <src_float_to_int_array+0xb7>
c0009163:	83 ec 0c             	sub    esp,0xc
c0009166:	4b                   	dec    ebx
c0009167:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000916b:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c000916e:	e8 fc f5 01 00       	call   c002876f <__extendsfdf2>
c0009173:	83 c4 10             	add    esp,0x10
c0009176:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000917a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000917e:	68 00 00 e0 41       	push   0x41e00000
c0009183:	6a 00                	push   0x0
c0009185:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009189:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000918d:	e8 e6 eb 01 00       	call   c0027d78 <__muldf3>
c0009192:	83 c4 10             	add    esp,0x10
c0009195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009199:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000919d:	68 ff ff df 41       	push   0x41dfffff
c00091a2:	68 00 00 c0 ff       	push   0xffc00000
c00091a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091af:	e8 91 f4 01 00       	call   c0028645 <__gedf2>
c00091b4:	83 c4 10             	add    esp,0x10
c00091b7:	85 c0                	test   eax,eax
c00091b9:	78 09                	js     c00091c4 <src_float_to_int_array+0x76>
c00091bb:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c00091c2:	eb 97                	jmp    c000915b <src_float_to_int_array+0xd>
c00091c4:	68 00 00 e0 c1       	push   0xc1e00000
c00091c9:	6a 00                	push   0x0
c00091cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091d3:	e8 71 f4 01 00       	call   c0028649 <__ledf2>
c00091d8:	83 c4 10             	add    esp,0x10
c00091db:	85 c0                	test   eax,eax
c00091dd:	7f 0c                	jg     c00091eb <src_float_to_int_array+0x9d>
c00091df:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c00091e6:	e9 70 ff ff ff       	jmp    c000915b <src_float_to_int_array+0xd>
c00091eb:	50                   	push   eax
c00091ec:	50                   	push   eax
c00091ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091f5:	e8 06 f6 01 00       	call   c0028800 <lrint>
c00091fa:	83 c4 10             	add    esp,0x10
c00091fd:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0009200:	e9 56 ff ff ff       	jmp    c000915b <src_float_to_int_array+0xd>
c0009205:	83 c4 14             	add    esp,0x14
c0009208:	5b                   	pop    ebx
c0009209:	5e                   	pop    esi
c000920a:	c3                   	ret    

c000920b <linear_vari_process>:
c000920b:	55                   	push   ebp
c000920c:	31 d2                	xor    edx,edx
c000920e:	57                   	push   edi
c000920f:	56                   	push   esi
c0009210:	53                   	push   ebx
c0009211:	83 ec 3c             	sub    esp,0x3c
c0009214:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0009218:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000921c:	0f 8e d3 07 00 00    	jle    c00099f5 <linear_vari_process+0x7ea>
c0009222:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009226:	ba 05 00 00 00       	mov    edx,0x5
c000922b:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000922e:	85 db                	test   ebx,ebx
c0009230:	0f 84 bf 07 00 00    	je     c00099f5 <linear_vari_process+0x7ea>
c0009236:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009239:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000923d:	74 19                	je     c0009258 <linear_vari_process+0x4d>
c000923f:	31 d2                	xor    edx,edx
c0009241:	39 c2                	cmp    edx,eax
c0009243:	7d 0c                	jge    c0009251 <linear_vari_process+0x46>
c0009245:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0009247:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000924a:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000924e:	42                   	inc    edx
c000924f:	eb f0                	jmp    c0009241 <linear_vari_process+0x36>
c0009251:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009258:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000925b:	0f af d0             	imul   edx,eax
c000925e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009261:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009265:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000926c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000926f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0009276:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000927a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000927d:	8b 00                	mov    eax,DWORD PTR [eax]
c000927f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009283:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009287:	68 00 00 70 3f       	push   0x3f700000
c000928c:	6a 00                	push   0x0
c000928e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009292:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009296:	e8 ac f3 01 00       	call   c0028647 <__ltdf2>
c000929b:	83 c4 10             	add    esp,0x10
c000929e:	ba 16 00 00 00       	mov    edx,0x16
c00092a3:	85 c0                	test   eax,eax
c00092a5:	0f 88 4a 07 00 00    	js     c00099f5 <linear_vari_process+0x7ea>
c00092ab:	68 00 00 70 40       	push   0x40700000
c00092b0:	6a 00                	push   0x0
c00092b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092ba:	e8 6a f3 01 00       	call   c0028629 <__gtdf2>
c00092bf:	83 c4 10             	add    esp,0x10
c00092c2:	ba 16 00 00 00       	mov    edx,0x16
c00092c7:	85 c0                	test   eax,eax
c00092c9:	0f 8f 26 07 00 00    	jg     c00099f5 <linear_vari_process+0x7ea>
c00092cf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00092d3:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00092d6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00092d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00092dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00092e1:	68 00 00 f0 3f       	push   0x3ff00000
c00092e6:	6a 00                	push   0x0
c00092e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092f0:	e8 52 f3 01 00       	call   c0028647 <__ltdf2>
c00092f5:	83 c4 10             	add    esp,0x10
c00092f8:	85 c0                	test   eax,eax
c00092fa:	0f 89 89 02 00 00    	jns    c0009589 <linear_vari_process+0x37e>
c0009300:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0009303:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c0009306:	0f 8d 7d 02 00 00    	jge    c0009589 <linear_vari_process+0x37e>
c000930c:	83 ec 0c             	sub    esp,0xc
c000930f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009312:	e8 c4 f0 01 00       	call   c00283db <__floatsidf>
c0009317:	83 c4 10             	add    esp,0x10
c000931a:	89 04 24             	mov    DWORD PTR [esp],eax
c000931d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009321:	68 00 00 f0 3f       	push   0x3ff00000
c0009326:	6a 00                	push   0x0
c0009328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000932c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009330:	e8 c6 e3 01 00       	call   c00276fb <__adddf3>
c0009335:	83 c4 10             	add    esp,0x10
c0009338:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000933c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009340:	52                   	push   edx
c0009341:	50                   	push   eax
c0009342:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009346:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000934a:	e8 29 ea 01 00       	call   c0027d78 <__muldf3>
c000934f:	5d                   	pop    ebp
c0009350:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009354:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009358:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000935b:	e8 7b f0 01 00       	call   c00283db <__floatsidf>
c0009360:	83 c4 10             	add    esp,0x10
c0009363:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009367:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000936b:	52                   	push   edx
c000936c:	50                   	push   eax
c000936d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009371:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009375:	e8 81 e3 01 00       	call   c00276fb <__adddf3>
c000937a:	59                   	pop    ecx
c000937b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000937f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009383:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0009386:	e8 50 f0 01 00       	call   c00283db <__floatsidf>
c000938b:	83 c4 10             	add    esp,0x10
c000938e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009392:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009396:	52                   	push   edx
c0009397:	50                   	push   eax
c0009398:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000939c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093a0:	e8 a0 f2 01 00       	call   c0028645 <__gedf2>
c00093a5:	83 c4 10             	add    esp,0x10
c00093a8:	85 c0                	test   eax,eax
c00093aa:	0f 89 d9 01 00 00    	jns    c0009589 <linear_vari_process+0x37e>
c00093b0:	85 ff                	test   edi,edi
c00093b2:	0f 8e f4 00 00 00    	jle    c00094ac <linear_vari_process+0x2a1>
c00093b8:	83 ec 10             	sub    esp,0x10
c00093bb:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00093be:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00093c1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00093c5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00093c8:	ff 30                	push   DWORD PTR [eax]
c00093ca:	e8 7d e9 01 00       	call   c0027d4c <__subdf3>
c00093cf:	83 c4 18             	add    esp,0x18
c00093d2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093d6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00093da:	52                   	push   edx
c00093db:	50                   	push   eax
c00093dc:	e8 ff f3 01 00       	call   c00287e0 <fabs>
c00093e1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093e5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093e9:	83 c4 10             	add    esp,0x10
c00093ec:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00093f1:	68 23 42 92 0c       	push   0xc924223
c00093f6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093fe:	e8 26 f2 01 00       	call   c0028629 <__gtdf2>
c0009403:	83 c4 10             	add    esp,0x10
c0009406:	85 c0                	test   eax,eax
c0009408:	0f 8e 9e 00 00 00    	jle    c00094ac <linear_vari_process+0x2a1>
c000940e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009412:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009415:	8b 00                	mov    eax,DWORD PTR [eax]
c0009417:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000941b:	89 04 24             	mov    DWORD PTR [esp],eax
c000941e:	52                   	push   edx
c000941f:	50                   	push   eax
c0009420:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009423:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009426:	e8 21 e9 01 00       	call   c0027d4c <__subdf3>
c000942b:	59                   	pop    ecx
c000942c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009430:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009434:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009437:	e8 9f ef 01 00       	call   c00283db <__floatsidf>
c000943c:	83 c4 10             	add    esp,0x10
c000943f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009443:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009447:	52                   	push   edx
c0009448:	50                   	push   eax
c0009449:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000944d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009451:	e8 22 e9 01 00       	call   c0027d78 <__muldf3>
c0009456:	5f                   	pop    edi
c0009457:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000945b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000945f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009462:	e8 74 ef 01 00       	call   c00283db <__floatsidf>
c0009467:	83 c4 10             	add    esp,0x10
c000946a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000946e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009472:	52                   	push   edx
c0009473:	50                   	push   eax
c0009474:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009478:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000947c:	e8 db eb 01 00       	call   c002805c <__divdf3>
c0009481:	83 c4 10             	add    esp,0x10
c0009484:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009488:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000948c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009490:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009494:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009498:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000949c:	e8 5a e2 01 00       	call   c00276fb <__adddf3>
c00094a1:	83 c4 10             	add    esp,0x10
c00094a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094a8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094ac:	31 ff                	xor    edi,edi
c00094ae:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00094b1:	0f 8e 9d 00 00 00    	jle    c0009554 <linear_vari_process+0x349>
c00094b7:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00094ba:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00094be:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00094c1:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00094c5:	89 04 24             	mov    DWORD PTR [esp],eax
c00094c8:	8b 06                	mov    eax,DWORD PTR [esi]
c00094ca:	52                   	push   edx
c00094cb:	52                   	push   edx
c00094cc:	55                   	push   ebp
c00094cd:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00094d0:	47                   	inc    edi
c00094d1:	e8 ba db 01 00       	call   c0027090 <__subsf3>
c00094d6:	89 04 24             	mov    DWORD PTR [esp],eax
c00094d9:	e8 91 f2 01 00       	call   c002876f <__extendsfdf2>
c00094de:	83 c4 10             	add    esp,0x10
c00094e1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094e5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094f9:	e8 7a e8 01 00       	call   c0027d78 <__muldf3>
c00094fe:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009501:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009505:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009509:	e8 61 f2 01 00       	call   c002876f <__extendsfdf2>
c000950e:	83 c4 10             	add    esp,0x10
c0009511:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009515:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009519:	52                   	push   edx
c000951a:	50                   	push   eax
c000951b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000951f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009523:	e8 d3 e1 01 00       	call   c00276fb <__adddf3>
c0009528:	59                   	pop    ecx
c0009529:	5d                   	pop    ebp
c000952a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000952e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009532:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009536:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000953a:	e8 0c f1 01 00       	call   c002864b <__truncdfsf2>
c000953f:	83 c4 10             	add    esp,0x10
c0009542:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009545:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009549:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000954c:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000954f:	e9 5a ff ff ff       	jmp    c00094ae <linear_vari_process+0x2a3>
c0009554:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009558:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000955c:	68 00 00 f0 3f       	push   0x3ff00000
c0009561:	6a 00                	push   0x0
c0009563:	e8 f4 ea 01 00       	call   c002805c <__divdf3>
c0009568:	83 c4 10             	add    esp,0x10
c000956b:	89 04 24             	mov    DWORD PTR [esp],eax
c000956e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009572:	52                   	push   edx
c0009573:	50                   	push   eax
c0009574:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009578:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000957c:	e8 7a e1 01 00       	call   c00276fb <__adddf3>
c0009581:	83 c4 10             	add    esp,0x10
c0009584:	e9 50 fd ff ff       	jmp    c00092d9 <linear_vari_process+0xce>
c0009589:	50                   	push   eax
c000958a:	50                   	push   eax
c000958b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000958f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009593:	e8 68 f2 01 00       	call   c0028800 <lrint>
c0009598:	83 ec 0c             	sub    esp,0xc
c000959b:	50                   	push   eax
c000959c:	e8 3a ee 01 00       	call   c00283db <__floatsidf>
c00095a1:	83 c4 10             	add    esp,0x10
c00095a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095a8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095ac:	52                   	push   edx
c00095ad:	50                   	push   eax
c00095ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095b6:	e8 91 e7 01 00       	call   c0027d4c <__subdf3>
c00095bb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00095bf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00095c3:	83 c4 20             	add    esp,0x20
c00095c6:	6a 00                	push   0x0
c00095c8:	6a 00                	push   0x0
c00095ca:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095d2:	e8 70 f0 01 00       	call   c0028647 <__ltdf2>
c00095d7:	83 c4 10             	add    esp,0x10
c00095da:	85 c0                	test   eax,eax
c00095dc:	79 1e                	jns    c00095fc <linear_vari_process+0x3f1>
c00095de:	68 00 00 f0 3f       	push   0x3ff00000
c00095e3:	6a 00                	push   0x0
c00095e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095ed:	e8 09 e1 01 00       	call   c00276fb <__adddf3>
c00095f2:	83 c4 10             	add    esp,0x10
c00095f5:	89 04 24             	mov    DWORD PTR [esp],eax
c00095f8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00095fc:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00095ff:	83 ec 10             	sub    esp,0x10
c0009602:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000960a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000960e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009612:	e8 35 e7 01 00       	call   c0027d4c <__subdf3>
c0009617:	83 c4 18             	add    esp,0x18
c000961a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000961e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009622:	52                   	push   edx
c0009623:	50                   	push   eax
c0009624:	e8 d7 f1 01 00       	call   c0028800 <lrint>
c0009629:	83 c4 10             	add    esp,0x10
c000962c:	0f af f8             	imul   edi,eax
c000962f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009632:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009635:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009638:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000963b:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000963e:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009642:	0f 8d 13 03 00 00    	jge    c000995b <linear_vari_process+0x750>
c0009648:	83 ec 0c             	sub    esp,0xc
c000964b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000964e:	e8 88 ed 01 00       	call   c00283db <__floatsidf>
c0009653:	83 c4 10             	add    esp,0x10
c0009656:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000965a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000965e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009662:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009666:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000966a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000966e:	e8 05 e7 01 00       	call   c0027d78 <__muldf3>
c0009673:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009676:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000967a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000967e:	e8 58 ed 01 00       	call   c00283db <__floatsidf>
c0009683:	83 c4 10             	add    esp,0x10
c0009686:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000968a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000968e:	52                   	push   edx
c000968f:	50                   	push   eax
c0009690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	e8 5e e0 01 00       	call   c00276fb <__adddf3>
c000969d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00096a0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00096a4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00096a8:	e8 2e ed 01 00       	call   c00283db <__floatsidf>
c00096ad:	83 c4 10             	add    esp,0x10
c00096b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00096b4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00096b8:	52                   	push   edx
c00096b9:	50                   	push   eax
c00096ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096c2:	e8 80 ef 01 00       	call   c0028647 <__ltdf2>
c00096c7:	83 c4 10             	add    esp,0x10
c00096ca:	85 c0                	test   eax,eax
c00096cc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096d0:	0f 89 85 02 00 00    	jns    c000995b <linear_vari_process+0x750>
c00096d6:	85 c9                	test   ecx,ecx
c00096d8:	0f 8e f5 00 00 00    	jle    c00097d3 <linear_vari_process+0x5c8>
c00096de:	83 ec 10             	sub    esp,0x10
c00096e1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00096e4:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00096e7:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00096eb:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00096ee:	ff 30                	push   DWORD PTR [eax]
c00096f0:	e8 57 e6 01 00       	call   c0027d4c <__subdf3>
c00096f5:	83 c4 18             	add    esp,0x18
c00096f8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096fc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009700:	52                   	push   edx
c0009701:	50                   	push   eax
c0009702:	e8 d9 f0 01 00       	call   c00287e0 <fabs>
c0009707:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000970b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000970f:	83 c4 10             	add    esp,0x10
c0009712:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0009717:	68 23 42 92 0c       	push   0xc924223
c000971c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009720:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009724:	e8 00 ef 01 00       	call   c0028629 <__gtdf2>
c0009729:	83 c4 10             	add    esp,0x10
c000972c:	85 c0                	test   eax,eax
c000972e:	0f 8e 9f 00 00 00    	jle    c00097d3 <linear_vari_process+0x5c8>
c0009734:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009738:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000973b:	8b 00                	mov    eax,DWORD PTR [eax]
c000973d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009741:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009745:	52                   	push   edx
c0009746:	50                   	push   eax
c0009747:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000974a:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000974d:	e8 fa e5 01 00       	call   c0027d4c <__subdf3>
c0009752:	5f                   	pop    edi
c0009753:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009757:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000975b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000975e:	e8 78 ec 01 00       	call   c00283db <__floatsidf>
c0009763:	83 c4 10             	add    esp,0x10
c0009766:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000976a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000976e:	52                   	push   edx
c000976f:	50                   	push   eax
c0009770:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009774:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009778:	e8 fb e5 01 00       	call   c0027d78 <__muldf3>
c000977d:	5d                   	pop    ebp
c000977e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009782:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009786:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009789:	e8 4d ec 01 00       	call   c00283db <__floatsidf>
c000978e:	83 c4 10             	add    esp,0x10
c0009791:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009795:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009799:	52                   	push   edx
c000979a:	50                   	push   eax
c000979b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000979f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00097a3:	e8 b4 e8 01 00       	call   c002805c <__divdf3>
c00097a8:	83 c4 10             	add    esp,0x10
c00097ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00097af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00097b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00097b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00097bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00097bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00097c3:	e8 33 df 01 00       	call   c00276fb <__adddf3>
c00097c8:	83 c4 10             	add    esp,0x10
c00097cb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00097cf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00097d3:	31 ff                	xor    edi,edi
c00097d5:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00097d8:	39 f8                	cmp    eax,edi
c00097da:	0f 8e ac 00 00 00    	jle    c000988c <linear_vari_process+0x681>
c00097e0:	8b 16                	mov    edx,DWORD PTR [esi]
c00097e2:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00097e5:	29 c1                	sub    ecx,eax
c00097e7:	89 c8                	mov    eax,ecx
c00097e9:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00097ec:	01 f8                	add    eax,edi
c00097ee:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00097f2:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00097f5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00097fc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097ff:	51                   	push   ecx
c0009800:	01 f8                	add    eax,edi
c0009802:	51                   	push   ecx
c0009803:	47                   	inc    edi
c0009804:	55                   	push   ebp
c0009805:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c0009808:	e8 83 d8 01 00       	call   c0027090 <__subsf3>
c000980d:	89 04 24             	mov    DWORD PTR [esp],eax
c0009810:	e8 5a ef 01 00       	call   c002876f <__extendsfdf2>
c0009815:	83 c4 10             	add    esp,0x10
c0009818:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000981c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009820:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009824:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009828:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000982c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009830:	e8 43 e5 01 00       	call   c0027d78 <__muldf3>
c0009835:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009838:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000983c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009840:	e8 2a ef 01 00       	call   c002876f <__extendsfdf2>
c0009845:	83 c4 10             	add    esp,0x10
c0009848:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000984c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009850:	52                   	push   edx
c0009851:	50                   	push   eax
c0009852:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009856:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000985a:	e8 9c de 01 00       	call   c00276fb <__adddf3>
c000985f:	5d                   	pop    ebp
c0009860:	59                   	pop    ecx
c0009861:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009865:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009869:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000986d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009871:	e8 d5 ed 01 00       	call   c002864b <__truncdfsf2>
c0009876:	83 c4 10             	add    esp,0x10
c0009879:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000987d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009881:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009884:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009887:	e9 49 ff ff ff       	jmp    c00097d5 <linear_vari_process+0x5ca>
c000988c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009890:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009894:	68 00 00 f0 3f       	push   0x3ff00000
c0009899:	6a 00                	push   0x0
c000989b:	e8 bc e7 01 00       	call   c002805c <__divdf3>
c00098a0:	83 c4 10             	add    esp,0x10
c00098a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00098ab:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00098af:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00098b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098bb:	e8 3b de 01 00       	call   c00276fb <__adddf3>
c00098c0:	59                   	pop    ecx
c00098c1:	5f                   	pop    edi
c00098c2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00098c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00098ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d2:	e8 29 ef 01 00       	call   c0028800 <lrint>
c00098d7:	83 ec 0c             	sub    esp,0xc
c00098da:	50                   	push   eax
c00098db:	e8 fb ea 01 00       	call   c00283db <__floatsidf>
c00098e0:	83 c4 10             	add    esp,0x10
c00098e3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00098e7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00098eb:	52                   	push   edx
c00098ec:	50                   	push   eax
c00098ed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098f5:	e8 52 e4 01 00       	call   c0027d4c <__subdf3>
c00098fa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098fe:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009902:	83 c4 20             	add    esp,0x20
c0009905:	6a 00                	push   0x0
c0009907:	6a 00                	push   0x0
c0009909:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000990d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009911:	e8 31 ed 01 00       	call   c0028647 <__ltdf2>
c0009916:	83 c4 10             	add    esp,0x10
c0009919:	85 c0                	test   eax,eax
c000991b:	79 1e                	jns    c000993b <linear_vari_process+0x730>
c000991d:	68 00 00 f0 3f       	push   0x3ff00000
c0009922:	6a 00                	push   0x0
c0009924:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009928:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000992c:	e8 ca dd 01 00       	call   c00276fb <__adddf3>
c0009931:	83 c4 10             	add    esp,0x10
c0009934:	89 04 24             	mov    DWORD PTR [esp],eax
c0009937:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000993b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000993e:	83 ec 10             	sub    esp,0x10
c0009941:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009945:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009949:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000994d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009951:	e8 f6 e3 01 00       	call   c0027d4c <__subdf3>
c0009956:	e9 bc fc ff ff       	jmp    c0009617 <linear_vari_process+0x40c>
c000995b:	39 fd                	cmp    ebp,edi
c000995d:	7d 38                	jge    c0009997 <linear_vari_process+0x78c>
c000995f:	83 ec 0c             	sub    esp,0xc
c0009962:	89 f8                	mov    eax,edi
c0009964:	29 e8                	sub    eax,ebp
c0009966:	99                   	cdq    
c0009967:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000996a:	50                   	push   eax
c000996b:	e8 6b ea 01 00       	call   c00283db <__floatsidf>
c0009970:	83 c4 10             	add    esp,0x10
c0009973:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009977:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000997b:	52                   	push   edx
c000997c:	50                   	push   eax
c000997d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009981:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009985:	e8 71 dd 01 00       	call   c00276fb <__adddf3>
c000998a:	83 c4 10             	add    esp,0x10
c000998d:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009990:	89 04 24             	mov    DWORD PTR [esp],eax
c0009993:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009997:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000999b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000999e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00099a2:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00099a5:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00099a8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00099ab:	85 c0                	test   eax,eax
c00099ad:	7f 29                	jg     c00099d8 <linear_vari_process+0x7cd>
c00099af:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00099b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00099b7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00099bb:	89 01                	mov    DWORD PTR [ecx],eax
c00099bd:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00099c0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00099c3:	99                   	cdq    
c00099c4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00099c7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00099ca:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00099cd:	99                   	cdq    
c00099ce:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00099d1:	31 d2                	xor    edx,edx
c00099d3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00099d6:	eb 1d                	jmp    c00099f5 <linear_vari_process+0x7ea>
c00099d8:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00099db:	31 d2                	xor    edx,edx
c00099dd:	29 c8                	sub    eax,ecx
c00099df:	c1 e0 02             	shl    eax,0x2
c00099e2:	39 d1                	cmp    ecx,edx
c00099e4:	7e c9                	jle    c00099af <linear_vari_process+0x7a4>
c00099e6:	8b 3e                	mov    edi,DWORD PTR [esi]
c00099e8:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00099eb:	83 c0 04             	add    eax,0x4
c00099ee:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00099f2:	42                   	inc    edx
c00099f3:	eb ed                	jmp    c00099e2 <linear_vari_process+0x7d7>
c00099f5:	83 c4 3c             	add    esp,0x3c
c00099f8:	89 d0                	mov    eax,edx
c00099fa:	5b                   	pop    ebx
c00099fb:	5e                   	pop    esi
c00099fc:	5f                   	pop    edi
c00099fd:	5d                   	pop    ebp
c00099fe:	c3                   	ret    

c00099ff <linear_reset>:
c00099ff:	83 ec 0c             	sub    esp,0xc
c0009a02:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009a06:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0009a09:	85 c0                	test   eax,eax
c0009a0b:	74 20                	je     c0009a2d <linear_reset+0x2e>
c0009a0d:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0009a10:	83 c0 1c             	add    eax,0x1c
c0009a13:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c0009a16:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009a1d:	c1 e2 02             	shl    edx,0x2
c0009a20:	51                   	push   ecx
c0009a21:	52                   	push   edx
c0009a22:	6a 00                	push   0x0
c0009a24:	50                   	push   eax
c0009a25:	e8 26 6d ff ff       	call   c0000750 <memset>
c0009a2a:	83 c4 10             	add    esp,0x10
c0009a2d:	83 c4 0c             	add    esp,0xc
c0009a30:	c3                   	ret    

c0009a31 <linear_get_name>:
c0009a31:	31 c0                	xor    eax,eax
c0009a33:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009a38:	75 05                	jne    c0009a3f <linear_get_name+0xe>
c0009a3a:	b8 00 a0 02 c0       	mov    eax,0xc002a000
c0009a3f:	c3                   	ret    

c0009a40 <linear_get_description>:
c0009a40:	31 c0                	xor    eax,eax
c0009a42:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009a47:	75 05                	jne    c0009a4e <linear_get_description+0xe>
c0009a49:	b8 14 a0 02 c0       	mov    eax,0xc002a014
c0009a4e:	c3                   	ret    

c0009a4f <linear_set_converter>:
c0009a4f:	53                   	push   ebx
c0009a50:	b8 0a 00 00 00       	mov    eax,0xa
c0009a55:	83 ec 08             	sub    esp,0x8
c0009a58:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009a5c:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009a61:	75 6e                	jne    c0009ad1 <linear_set_converter+0x82>
c0009a63:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009a66:	85 c0                	test   eax,eax
c0009a68:	74 13                	je     c0009a7d <linear_set_converter+0x2e>
c0009a6a:	83 ec 0c             	sub    esp,0xc
c0009a6d:	50                   	push   eax
c0009a6e:	e8 b6 5d 00 00       	call   c000f829 <free>
c0009a73:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009a7a:	83 c4 10             	add    esp,0x10
c0009a7d:	50                   	push   eax
c0009a7e:	50                   	push   eax
c0009a7f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009a82:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009a89:	50                   	push   eax
c0009a8a:	6a 01                	push   0x1
c0009a8c:	e8 b8 5d 00 00       	call   c000f849 <calloc>
c0009a91:	83 c4 10             	add    esp,0x10
c0009a94:	89 c2                	mov    edx,eax
c0009a96:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009a99:	85 d2                	test   edx,edx
c0009a9b:	b8 01 00 00 00       	mov    eax,0x1
c0009aa0:	74 2f                	je     c0009ad1 <linear_set_converter+0x82>
c0009aa2:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009aa5:	83 ec 0c             	sub    esp,0xc
c0009aa8:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009aab:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0009ab1:	c7 43 24 0b 92 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000920b
c0009ab8:	c7 43 20 0b 92 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000920b
c0009abf:	c7 43 28 ff 99 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00099ff
c0009ac6:	53                   	push   ebx
c0009ac7:	e8 33 ff ff ff       	call   c00099ff <linear_reset>
c0009acc:	83 c4 10             	add    esp,0x10
c0009acf:	31 c0                	xor    eax,eax
c0009ad1:	83 c4 08             	add    esp,0x8
c0009ad4:	5b                   	pop    ebx
c0009ad5:	c3                   	ret    

c0009ad6 <int_to_fp>:
c0009ad6:	c1 e0 0c             	shl    eax,0xc
c0009ad9:	c3                   	ret    

c0009ada <fp_to_int>:
c0009ada:	c1 f8 0c             	sar    eax,0xc
c0009add:	c3                   	ret    

c0009ade <fp_fraction_part>:
c0009ade:	25 ff 0f 00 00       	and    eax,0xfff
c0009ae3:	c3                   	ret    

c0009ae4 <fp_to_double>:
c0009ae4:	83 ec 1c             	sub    esp,0x1c
c0009ae7:	e8 f2 ff ff ff       	call   c0009ade <fp_fraction_part>
c0009aec:	83 ec 0c             	sub    esp,0xc
c0009aef:	50                   	push   eax
c0009af0:	e8 e6 e8 01 00       	call   c00283db <__floatsidf>
c0009af5:	83 c4 10             	add    esp,0x10
c0009af8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009afc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009b00:	68 00 00 30 3f       	push   0x3f300000
c0009b05:	6a 00                	push   0x0
c0009b07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b0b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b0f:	e8 64 e2 01 00       	call   c0027d78 <__muldf3>
c0009b14:	83 c4 2c             	add    esp,0x2c
c0009b17:	c3                   	ret    

c0009b18 <calc_output_single>:
c0009b18:	55                   	push   ebp
c0009b19:	57                   	push   edi
c0009b1a:	56                   	push   esi
c0009b1b:	89 c6                	mov    esi,eax
c0009b1d:	53                   	push   ebx
c0009b1e:	89 d3                	mov    ebx,edx
c0009b20:	83 ec 4c             	sub    esp,0x4c
c0009b23:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009b27:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009b2a:	e8 a7 ff ff ff       	call   c0009ad6 <int_to_fp>
c0009b2f:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009b32:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b36:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009b3a:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009b3e:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009b41:	99                   	cdq    
c0009b42:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009b4a:	f7 fb                	idiv   ebx
c0009b4c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009b54:	89 da                	mov    edx,ebx
c0009b56:	0f af d0             	imul   edx,eax
c0009b59:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009b5d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009b61:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009b65:	29 c2                	sub    edx,eax
c0009b67:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009b6e:	83 c5 04             	add    ebp,0x4
c0009b71:	e8 6e ff ff ff       	call   c0009ae4 <fp_to_double>
c0009b76:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009b7a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009b7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009b82:	e8 53 ff ff ff       	call   c0009ada <fp_to_int>
c0009b87:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009b8a:	52                   	push   edx
c0009b8b:	52                   	push   edx
c0009b8c:	51                   	push   ecx
c0009b8d:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009b91:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009b95:	e8 f6 d4 01 00       	call   c0027090 <__subsf3>
c0009b9a:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b9d:	e8 cd eb 01 00       	call   c002876f <__extendsfdf2>
c0009ba2:	83 c4 10             	add    esp,0x10
c0009ba5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009ba9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009bad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009bb1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009bb5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009bb9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009bbd:	e8 b6 e1 01 00       	call   c0027d78 <__muldf3>
c0009bc2:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0009bc6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bca:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009bcd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bd1:	e8 99 eb 01 00       	call   c002876f <__extendsfdf2>
c0009bd6:	83 c4 10             	add    esp,0x10
c0009bd9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009bdd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009be1:	52                   	push   edx
c0009be2:	50                   	push   eax
c0009be3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009be7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009beb:	e8 0b db 01 00       	call   c00276fb <__adddf3>
c0009bf0:	59                   	pop    ecx
c0009bf1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0009bf5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009bf9:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009bff:	e8 6b eb 01 00       	call   c002876f <__extendsfdf2>
c0009c04:	83 c4 10             	add    esp,0x10
c0009c07:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009c0b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009c0f:	52                   	push   edx
c0009c10:	50                   	push   eax
c0009c11:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c19:	e8 5a e1 01 00       	call   c0027d78 <__muldf3>
c0009c1e:	83 c4 10             	add    esp,0x10
c0009c21:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009c25:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009c29:	52                   	push   edx
c0009c2a:	50                   	push   eax
c0009c2b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c33:	e8 c3 da 01 00       	call   c00276fb <__adddf3>
c0009c38:	83 c4 10             	add    esp,0x10
c0009c3b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c3f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009c43:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009c47:	0f 89 1d ff ff ff    	jns    c0009b6a <calc_output_single+0x52>
c0009c4d:	89 d9                	mov    ecx,ebx
c0009c4f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009c53:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009c57:	89 dd                	mov    ebp,ebx
c0009c59:	29 c8                	sub    eax,ecx
c0009c5b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009c63:	99                   	cdq    
c0009c64:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c6c:	f7 fb                	idiv   ebx
c0009c6e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009c72:	0f af e8             	imul   ebp,eax
c0009c75:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009c79:	01 cd                	add    ebp,ecx
c0009c7b:	8d 34 86             	lea    esi,[esi+eax*4]
c0009c7e:	89 e8                	mov    eax,ebp
c0009c80:	83 ee 04             	sub    esi,0x4
c0009c83:	e8 5c fe ff ff       	call   c0009ae4 <fp_to_double>
c0009c88:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009c8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009c90:	89 e8                	mov    eax,ebp
c0009c92:	29 dd                	sub    ebp,ebx
c0009c94:	e8 41 fe ff ff       	call   c0009ada <fp_to_int>
c0009c99:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009c9c:	52                   	push   edx
c0009c9d:	52                   	push   edx
c0009c9e:	51                   	push   ecx
c0009c9f:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009ca3:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009ca7:	e8 e4 d3 01 00       	call   c0027090 <__subsf3>
c0009cac:	89 04 24             	mov    DWORD PTR [esp],eax
c0009caf:	e8 bb ea 01 00       	call   c002876f <__extendsfdf2>
c0009cb4:	83 c4 10             	add    esp,0x10
c0009cb7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009cbb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009cbf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ccb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ccf:	e8 a4 e0 01 00       	call   c0027d78 <__muldf3>
c0009cd4:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009cd8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009cdc:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009cdf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ce3:	e8 87 ea 01 00       	call   c002876f <__extendsfdf2>
c0009ce8:	83 c4 10             	add    esp,0x10
c0009ceb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009cef:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009cf3:	52                   	push   edx
c0009cf4:	50                   	push   eax
c0009cf5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009cf9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009cfd:	e8 f9 d9 01 00       	call   c00276fb <__adddf3>
c0009d02:	59                   	pop    ecx
c0009d03:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009d07:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009d0b:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009d11:	e8 59 ea 01 00       	call   c002876f <__extendsfdf2>
c0009d16:	83 c4 10             	add    esp,0x10
c0009d19:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d1d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d21:	52                   	push   edx
c0009d22:	50                   	push   eax
c0009d23:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009d27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009d2b:	e8 48 e0 01 00       	call   c0027d78 <__muldf3>
c0009d30:	83 c4 10             	add    esp,0x10
c0009d33:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d37:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d3b:	52                   	push   edx
c0009d3c:	50                   	push   eax
c0009d3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d45:	e8 b1 d9 01 00       	call   c00276fb <__adddf3>
c0009d4a:	83 c4 10             	add    esp,0x10
c0009d4d:	85 ed                	test   ebp,ebp
c0009d4f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d53:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d57:	0f 8f 21 ff ff ff    	jg     c0009c7e <calc_output_single+0x166>
c0009d5d:	52                   	push   edx
c0009d5e:	50                   	push   eax
c0009d5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d67:	e8 8f d9 01 00       	call   c00276fb <__adddf3>
c0009d6c:	83 c4 5c             	add    esp,0x5c
c0009d6f:	5b                   	pop    ebx
c0009d70:	5e                   	pop    esi
c0009d71:	5f                   	pop    edi
c0009d72:	5d                   	pop    ebp
c0009d73:	c3                   	ret    

c0009d74 <calc_output_stereo>:
c0009d74:	55                   	push   ebp
c0009d75:	89 cd                	mov    ebp,ecx
c0009d77:	57                   	push   edi
c0009d78:	56                   	push   esi
c0009d79:	53                   	push   ebx
c0009d7a:	89 c3                	mov    ebx,eax
c0009d7c:	83 ec 6c             	sub    esp,0x6c
c0009d7f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d83:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009d8a:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009d91:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009d95:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009d99:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009d9c:	e8 35 fd ff ff       	call   c0009ad6 <int_to_fp>
c0009da1:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009da9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dad:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009db5:	29 c8                	sub    eax,ecx
c0009db7:	99                   	cdq    
c0009db8:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009dbc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009dc0:	0f af d0             	imul   edx,eax
c0009dc3:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009dc6:	31 d2                	xor    edx,edx
c0009dc8:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009dcc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009dd0:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009dd3:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009dd7:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009dda:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009dde:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009de2:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009de5:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009dea:	29 c1                	sub    ecx,eax
c0009dec:	31 c0                	xor    eax,eax
c0009dee:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009df1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009df5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009df9:	83 c7 08             	add    edi,0x8
c0009dfc:	e8 e3 fc ff ff       	call   c0009ae4 <fp_to_double>
c0009e01:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009e05:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009e09:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009e0d:	e8 c8 fc ff ff       	call   c0009ada <fp_to_int>
c0009e12:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009e15:	52                   	push   edx
c0009e16:	52                   	push   edx
c0009e17:	51                   	push   ecx
c0009e18:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009e1c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009e20:	e8 6b d2 01 00       	call   c0027090 <__subsf3>
c0009e25:	89 04 24             	mov    DWORD PTR [esp],eax
c0009e28:	e8 42 e9 01 00       	call   c002876f <__extendsfdf2>
c0009e2d:	83 c4 10             	add    esp,0x10
c0009e30:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009e34:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009e38:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009e3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009e40:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009e44:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009e48:	e8 2b df 01 00       	call   c0027d78 <__muldf3>
c0009e4d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009e51:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009e55:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e58:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009e5c:	e8 0e e9 01 00       	call   c002876f <__extendsfdf2>
c0009e61:	83 c4 10             	add    esp,0x10
c0009e64:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009e68:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009e6c:	52                   	push   edx
c0009e6d:	50                   	push   eax
c0009e6e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009e72:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009e76:	e8 80 d8 01 00       	call   c00276fb <__adddf3>
c0009e7b:	59                   	pop    ecx
c0009e7c:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009e80:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009e84:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009e8a:	e8 e0 e8 01 00       	call   c002876f <__extendsfdf2>
c0009e8f:	83 c4 10             	add    esp,0x10
c0009e92:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009e96:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009e9a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009e9e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ea2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009ea6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009eaa:	e8 c9 de 01 00       	call   c0027d78 <__muldf3>
c0009eaf:	83 c4 10             	add    esp,0x10
c0009eb2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009eb6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009eba:	52                   	push   edx
c0009ebb:	50                   	push   eax
c0009ebc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ec0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ec4:	e8 32 d8 01 00       	call   c00276fb <__adddf3>
c0009ec9:	59                   	pop    ecx
c0009eca:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ece:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009ed2:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ed8:	e8 92 e8 01 00       	call   c002876f <__extendsfdf2>
c0009edd:	83 c4 10             	add    esp,0x10
c0009ee0:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ee4:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009ee8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009eec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ef0:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009ef4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009ef8:	e8 7b de 01 00       	call   c0027d78 <__muldf3>
c0009efd:	83 c4 10             	add    esp,0x10
c0009f00:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009f04:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009f08:	52                   	push   edx
c0009f09:	50                   	push   eax
c0009f0a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f12:	e8 e4 d7 01 00       	call   c00276fb <__adddf3>
c0009f17:	83 c4 10             	add    esp,0x10
c0009f1a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009f1e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009f22:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009f26:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009f2a:	0f 89 c5 fe ff ff    	jns    c0009df5 <calc_output_stereo+0x81>
c0009f30:	29 e9                	sub    ecx,ebp
c0009f32:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009f36:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009f3a:	29 c8                	sub    eax,ecx
c0009f3c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009f44:	99                   	cdq    
c0009f45:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f49:	31 d2                	xor    edx,edx
c0009f4b:	0f af f8             	imul   edi,eax
c0009f4e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009f52:	40                   	inc    eax
c0009f53:	01 cf                	add    edi,ecx
c0009f55:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009f5a:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009f5e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009f66:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009f69:	31 c0                	xor    eax,eax
c0009f6b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f6f:	89 f8                	mov    eax,edi
c0009f71:	83 eb 08             	sub    ebx,0x8
c0009f74:	e8 6b fb ff ff       	call   c0009ae4 <fp_to_double>
c0009f79:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009f7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009f81:	89 f8                	mov    eax,edi
c0009f83:	e8 52 fb ff ff       	call   c0009ada <fp_to_int>
c0009f88:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009f8b:	52                   	push   edx
c0009f8c:	52                   	push   edx
c0009f8d:	55                   	push   ebp
c0009f8e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009f92:	e8 f9 d0 01 00       	call   c0027090 <__subsf3>
c0009f97:	89 04 24             	mov    DWORD PTR [esp],eax
c0009f9a:	e8 d0 e7 01 00       	call   c002876f <__extendsfdf2>
c0009f9f:	83 c4 10             	add    esp,0x10
c0009fa2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fa6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009faa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009fae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009fb2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009fb6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009fba:	e8 b9 dd 01 00       	call   c0027d78 <__muldf3>
c0009fbf:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009fc2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009fc6:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009fca:	e8 a0 e7 01 00       	call   c002876f <__extendsfdf2>
c0009fcf:	83 c4 10             	add    esp,0x10
c0009fd2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fd6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fda:	52                   	push   edx
c0009fdb:	50                   	push   eax
c0009fdc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009fe0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009fe4:	e8 12 d7 01 00       	call   c00276fb <__adddf3>
c0009fe9:	59                   	pop    ecx
c0009fea:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009fee:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009ff2:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009ff8:	e8 72 e7 01 00       	call   c002876f <__extendsfdf2>
c0009ffd:	83 c4 10             	add    esp,0x10
c000a000:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a004:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a008:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a00c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a010:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a014:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a018:	e8 5b dd 01 00       	call   c0027d78 <__muldf3>
c000a01d:	83 c4 10             	add    esp,0x10
c000a020:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a024:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a028:	52                   	push   edx
c000a029:	50                   	push   eax
c000a02a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a02e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a032:	e8 c4 d6 01 00       	call   c00276fb <__adddf3>
c000a037:	5d                   	pop    ebp
c000a038:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a03c:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a040:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a046:	e8 24 e7 01 00       	call   c002876f <__extendsfdf2>
c000a04b:	83 c4 10             	add    esp,0x10
c000a04e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a052:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a056:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a05a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a05e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a062:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a066:	e8 0d dd 01 00       	call   c0027d78 <__muldf3>
c000a06b:	83 c4 10             	add    esp,0x10
c000a06e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a072:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a076:	52                   	push   edx
c000a077:	50                   	push   eax
c000a078:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a07c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a080:	e8 76 d6 01 00       	call   c00276fb <__adddf3>
c000a085:	83 c4 10             	add    esp,0x10
c000a088:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c000a08c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a090:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a094:	85 ff                	test   edi,edi
c000a096:	0f 8f d3 fe ff ff    	jg     c0009f6f <calc_output_stereo+0x1fb>
c000a09c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ac:	e8 4a d6 01 00       	call   c00276fb <__adddf3>
c000a0b1:	83 c4 10             	add    esp,0x10
c000a0b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a0b8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a0bc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0c0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a0c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a0cc:	e8 a7 dc 01 00       	call   c0027d78 <__muldf3>
c000a0d1:	59                   	pop    ecx
c000a0d2:	5b                   	pop    ebx
c000a0d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a0d7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a0db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a0df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a0e3:	e8 63 e5 01 00       	call   c002864b <__truncdfsf2>
c000a0e8:	83 c4 10             	add    esp,0x10
c000a0eb:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c000a0f2:	89 03                	mov    DWORD PTR [ebx],eax
c000a0f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a100:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a104:	e8 f2 d5 01 00       	call   c00276fb <__adddf3>
c000a109:	83 c4 10             	add    esp,0x10
c000a10c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a110:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a114:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a118:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a11c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a120:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a124:	e8 4f dc 01 00       	call   c0027d78 <__muldf3>
c000a129:	5e                   	pop    esi
c000a12a:	5f                   	pop    edi
c000a12b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a12f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a133:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a137:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a13b:	e8 0b e5 01 00       	call   c002864b <__truncdfsf2>
c000a140:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c000a147:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000a14a:	83 c4 7c             	add    esp,0x7c
c000a14d:	5b                   	pop    ebx
c000a14e:	5e                   	pop    esi
c000a14f:	5f                   	pop    edi
c000a150:	5d                   	pop    ebp
c000a151:	c3                   	ret    

c000a152 <calc_output_quad>:
c000a152:	55                   	push   ebp
c000a153:	57                   	push   edi
c000a154:	56                   	push   esi
c000a155:	89 c6                	mov    esi,eax
c000a157:	53                   	push   ebx
c000a158:	83 ec 7c             	sub    esp,0x7c
c000a15b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000a15f:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000a163:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c000a16a:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c000a171:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a175:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a179:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000a17c:	e8 55 f9 ff ff       	call   c0009ad6 <int_to_fp>
c000a181:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000a184:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000a187:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a18b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a18f:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000a193:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000a197:	99                   	cdq    
c000a198:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c000a19c:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1a0:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c000a1a3:	31 d2                	xor    edx,edx
c000a1a5:	0f af d8             	imul   ebx,eax
c000a1a8:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000a1b0:	0f af c7             	imul   eax,edi
c000a1b3:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c000a1b7:	29 c1                	sub    ecx,eax
c000a1b9:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c000a1c1:	31 c0                	xor    eax,eax
c000a1c3:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c000a1c6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a1ca:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a1ce:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a1d2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a1d6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a1da:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a1de:	89 d8                	mov    eax,ebx
c000a1e0:	83 c7 10             	add    edi,0x10
c000a1e3:	e8 fc f8 ff ff       	call   c0009ae4 <fp_to_double>
c000a1e8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1ec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1f0:	89 d8                	mov    eax,ebx
c000a1f2:	e8 e3 f8 ff ff       	call   c0009ada <fp_to_int>
c000a1f7:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c000a1fb:	52                   	push   edx
c000a1fc:	52                   	push   edx
c000a1fd:	51                   	push   ecx
c000a1fe:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a202:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a206:	e8 85 ce 01 00       	call   c0027090 <__subsf3>
c000a20b:	89 04 24             	mov    DWORD PTR [esp],eax
c000a20e:	e8 5c e5 01 00       	call   c002876f <__extendsfdf2>
c000a213:	83 c4 10             	add    esp,0x10
c000a216:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a21a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a21e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a222:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a226:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a22a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a22e:	e8 45 db 01 00       	call   c0027d78 <__muldf3>
c000a233:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a237:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a23b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a23e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a242:	e8 28 e5 01 00       	call   c002876f <__extendsfdf2>
c000a247:	83 c4 10             	add    esp,0x10
c000a24a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a24e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a252:	52                   	push   edx
c000a253:	50                   	push   eax
c000a254:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a258:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a25c:	e8 9a d4 01 00       	call   c00276fb <__adddf3>
c000a261:	59                   	pop    ecx
c000a262:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a266:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a26a:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a270:	e8 fa e4 01 00       	call   c002876f <__extendsfdf2>
c000a275:	83 c4 10             	add    esp,0x10
c000a278:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a27c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a280:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a284:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a288:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a28c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a290:	e8 e3 da 01 00       	call   c0027d78 <__muldf3>
c000a295:	83 c4 10             	add    esp,0x10
c000a298:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a29c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a0:	52                   	push   edx
c000a2a1:	50                   	push   eax
c000a2a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a2a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a2aa:	e8 4c d4 01 00       	call   c00276fb <__adddf3>
c000a2af:	59                   	pop    ecx
c000a2b0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a2b4:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a2b8:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a2be:	e8 ac e4 01 00       	call   c002876f <__extendsfdf2>
c000a2c3:	83 c4 10             	add    esp,0x10
c000a2c6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ca:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2d6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2de:	e8 95 da 01 00       	call   c0027d78 <__muldf3>
c000a2e3:	83 c4 10             	add    esp,0x10
c000a2e6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ea:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ee:	52                   	push   edx
c000a2ef:	50                   	push   eax
c000a2f0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a2f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a2f8:	e8 fe d3 01 00       	call   c00276fb <__adddf3>
c000a2fd:	59                   	pop    ecx
c000a2fe:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a302:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a306:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a30c:	e8 5e e4 01 00       	call   c002876f <__extendsfdf2>
c000a311:	83 c4 10             	add    esp,0x10
c000a314:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a318:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a31c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a320:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a324:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a328:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a32c:	e8 47 da 01 00       	call   c0027d78 <__muldf3>
c000a331:	83 c4 10             	add    esp,0x10
c000a334:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a338:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a33c:	52                   	push   edx
c000a33d:	50                   	push   eax
c000a33e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a342:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a346:	e8 b0 d3 01 00       	call   c00276fb <__adddf3>
c000a34b:	59                   	pop    ecx
c000a34c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a350:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a354:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a35a:	e8 10 e4 01 00       	call   c002876f <__extendsfdf2>
c000a35f:	83 c4 10             	add    esp,0x10
c000a362:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a366:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a36a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a36e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a372:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a376:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a37a:	e8 f9 d9 01 00       	call   c0027d78 <__muldf3>
c000a37f:	83 c4 10             	add    esp,0x10
c000a382:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a386:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a38a:	52                   	push   edx
c000a38b:	50                   	push   eax
c000a38c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a390:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a394:	e8 62 d3 01 00       	call   c00276fb <__adddf3>
c000a399:	83 c4 10             	add    esp,0x10
c000a39c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a3a0:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a3a4:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3a8:	0f 89 30 fe ff ff    	jns    c000a1de <calc_output_quad+0x8c>
c000a3ae:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a3b2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a3b6:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a3ba:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a3be:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a3c6:	29 c8                	sub    eax,ecx
c000a3c8:	99                   	cdq    
c000a3c9:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a3cd:	31 d2                	xor    edx,edx
c000a3cf:	0f af d8             	imul   ebx,eax
c000a3d2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a3d6:	40                   	inc    eax
c000a3d7:	01 cb                	add    ebx,ecx
c000a3d9:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a3de:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a3e2:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a3e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a3ea:	8d 34 86             	lea    esi,[esi+eax*4]
c000a3ed:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a3f5:	31 c0                	xor    eax,eax
c000a3f7:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a3fb:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a3ff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a403:	89 d8                	mov    eax,ebx
c000a405:	83 ee 10             	sub    esi,0x10
c000a408:	e8 d7 f6 ff ff       	call   c0009ae4 <fp_to_double>
c000a40d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a411:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a415:	89 d8                	mov    eax,ebx
c000a417:	e8 be f6 ff ff       	call   c0009ada <fp_to_int>
c000a41c:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a420:	52                   	push   edx
c000a421:	52                   	push   edx
c000a422:	57                   	push   edi
c000a423:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a427:	e8 64 cc 01 00       	call   c0027090 <__subsf3>
c000a42c:	89 04 24             	mov    DWORD PTR [esp],eax
c000a42f:	e8 3b e3 01 00       	call   c002876f <__extendsfdf2>
c000a434:	83 c4 10             	add    esp,0x10
c000a437:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a43b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a43f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a443:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a447:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a44b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a44f:	e8 24 d9 01 00       	call   c0027d78 <__muldf3>
c000a454:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a457:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a45b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a45f:	e8 0b e3 01 00       	call   c002876f <__extendsfdf2>
c000a464:	83 c4 10             	add    esp,0x10
c000a467:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a46b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a46f:	52                   	push   edx
c000a470:	50                   	push   eax
c000a471:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a475:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a479:	e8 7d d2 01 00       	call   c00276fb <__adddf3>
c000a47e:	59                   	pop    ecx
c000a47f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a483:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a487:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a48d:	e8 dd e2 01 00       	call   c002876f <__extendsfdf2>
c000a492:	83 c4 10             	add    esp,0x10
c000a495:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a499:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a49d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a4a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a4a5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4a9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4ad:	e8 c6 d8 01 00       	call   c0027d78 <__muldf3>
c000a4b2:	83 c4 10             	add    esp,0x10
c000a4b5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4b9:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4bd:	52                   	push   edx
c000a4be:	50                   	push   eax
c000a4bf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a4c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a4c7:	e8 2f d2 01 00       	call   c00276fb <__adddf3>
c000a4cc:	5f                   	pop    edi
c000a4cd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a4d1:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a4d5:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a4db:	e8 8f e2 01 00       	call   c002876f <__extendsfdf2>
c000a4e0:	83 c4 10             	add    esp,0x10
c000a4e3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4e7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a4ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a4f3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4f7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4fb:	e8 78 d8 01 00       	call   c0027d78 <__muldf3>
c000a500:	83 c4 10             	add    esp,0x10
c000a503:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a507:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a50b:	52                   	push   edx
c000a50c:	50                   	push   eax
c000a50d:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a511:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a515:	e8 e1 d1 01 00       	call   c00276fb <__adddf3>
c000a51a:	59                   	pop    ecx
c000a51b:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a51f:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a523:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a529:	e8 41 e2 01 00       	call   c002876f <__extendsfdf2>
c000a52e:	83 c4 10             	add    esp,0x10
c000a531:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a535:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a539:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a53d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a541:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a545:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a549:	e8 2a d8 01 00       	call   c0027d78 <__muldf3>
c000a54e:	83 c4 10             	add    esp,0x10
c000a551:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a555:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a559:	52                   	push   edx
c000a55a:	50                   	push   eax
c000a55b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a55f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a563:	e8 93 d1 01 00       	call   c00276fb <__adddf3>
c000a568:	5f                   	pop    edi
c000a569:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a56d:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a571:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a577:	e8 f3 e1 01 00       	call   c002876f <__extendsfdf2>
c000a57c:	83 c4 10             	add    esp,0x10
c000a57f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a583:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a587:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a58b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a58f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a593:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a597:	e8 dc d7 01 00       	call   c0027d78 <__muldf3>
c000a59c:	83 c4 10             	add    esp,0x10
c000a59f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5a3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5a7:	52                   	push   edx
c000a5a8:	50                   	push   eax
c000a5a9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a5ad:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a5b1:	e8 45 d1 01 00       	call   c00276fb <__adddf3>
c000a5b6:	83 c4 10             	add    esp,0x10
c000a5b9:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a5bd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a5c1:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a5c5:	85 db                	test   ebx,ebx
c000a5c7:	0f 8f 36 fe ff ff    	jg     c000a403 <calc_output_quad+0x2b1>
c000a5cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a5d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a5d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a5d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a5dd:	e8 19 d1 01 00       	call   c00276fb <__adddf3>
c000a5e2:	83 c4 10             	add    esp,0x10
c000a5e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a5e9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a5ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5fd:	e8 76 d7 01 00       	call   c0027d78 <__muldf3>
c000a602:	59                   	pop    ecx
c000a603:	5b                   	pop    ebx
c000a604:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a608:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a60c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a610:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a614:	e8 32 e0 01 00       	call   c002864b <__truncdfsf2>
c000a619:	83 c4 10             	add    esp,0x10
c000a61c:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a623:	89 06                	mov    DWORD PTR [esi],eax
c000a625:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a629:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a62d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a631:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a635:	e8 c1 d0 01 00       	call   c00276fb <__adddf3>
c000a63a:	83 c4 10             	add    esp,0x10
c000a63d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a641:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a645:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a649:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a64d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a651:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a655:	e8 1e d7 01 00       	call   c0027d78 <__muldf3>
c000a65a:	5e                   	pop    esi
c000a65b:	5f                   	pop    edi
c000a65c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a660:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a664:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a668:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a66c:	e8 da df 01 00       	call   c002864b <__truncdfsf2>
c000a671:	83 c4 10             	add    esp,0x10
c000a674:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a67b:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a67e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a682:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a686:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a68a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a68e:	e8 68 d0 01 00       	call   c00276fb <__adddf3>
c000a693:	83 c4 10             	add    esp,0x10
c000a696:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a69a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a69e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ae:	e8 c5 d6 01 00       	call   c0027d78 <__muldf3>
c000a6b3:	5d                   	pop    ebp
c000a6b4:	59                   	pop    ecx
c000a6b5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a6b9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a6bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6c5:	e8 81 df 01 00       	call   c002864b <__truncdfsf2>
c000a6ca:	83 c4 10             	add    esp,0x10
c000a6cd:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a6d4:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a6d7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6db:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6df:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6e7:	e8 0f d0 01 00       	call   c00276fb <__adddf3>
c000a6ec:	83 c4 10             	add    esp,0x10
c000a6ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a6f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a6f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a703:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a707:	e8 6c d6 01 00       	call   c0027d78 <__muldf3>
c000a70c:	5b                   	pop    ebx
c000a70d:	5e                   	pop    esi
c000a70e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a712:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a716:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a71a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a71e:	e8 28 df 01 00       	call   c002864b <__truncdfsf2>
c000a723:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a72a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a72d:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a733:	5b                   	pop    ebx
c000a734:	5e                   	pop    esi
c000a735:	5f                   	pop    edi
c000a736:	5d                   	pop    ebp
c000a737:	c3                   	ret    

c000a738 <calc_output_hex>:
c000a738:	55                   	push   ebp
c000a739:	89 cd                	mov    ebp,ecx
c000a73b:	57                   	push   edi
c000a73c:	56                   	push   esi
c000a73d:	53                   	push   ebx
c000a73e:	89 c3                	mov    ebx,eax
c000a740:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a746:	89 14 24             	mov    DWORD PTR [esp],edx
c000a749:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a750:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a757:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a75b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a75f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a762:	e8 6f f3 ff ff       	call   c0009ad6 <int_to_fp>
c000a767:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a76a:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a76e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a771:	29 c8                	sub    eax,ecx
c000a773:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a777:	99                   	cdq    
c000a778:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a780:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a783:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a78b:	0f af f8             	imul   edi,eax
c000a78e:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a791:	01 cf                	add    edi,ecx
c000a793:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a797:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a79a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a79e:	0f af c2             	imul   eax,edx
c000a7a1:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a7a5:	29 c1                	sub    ecx,eax
c000a7a7:	31 d2                	xor    edx,edx
c000a7a9:	31 c0                	xor    eax,eax
c000a7ab:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a7ae:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a7b2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a7b6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a7ba:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a7be:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a7c2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a7c6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a7ca:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a7ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a7d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a7d6:	89 f8                	mov    eax,edi
c000a7d8:	e8 07 f3 ff ff       	call   c0009ae4 <fp_to_double>
c000a7dd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a7e1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a7e5:	89 f8                	mov    eax,edi
c000a7e7:	e8 ee f2 ff ff       	call   c0009ada <fp_to_int>
c000a7ec:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a7f0:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a7f3:	52                   	push   edx
c000a7f4:	52                   	push   edx
c000a7f5:	51                   	push   ecx
c000a7f6:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a7fa:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a801:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a805:	e8 86 c8 01 00       	call   c0027090 <__subsf3>
c000a80a:	89 04 24             	mov    DWORD PTR [esp],eax
c000a80d:	e8 5d df 01 00       	call   c002876f <__extendsfdf2>
c000a812:	83 c4 10             	add    esp,0x10
c000a815:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a819:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a81d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a821:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a825:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a829:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a82d:	e8 46 d5 01 00       	call   c0027d78 <__muldf3>
c000a832:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a836:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a83a:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a83d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a841:	e8 29 df 01 00       	call   c002876f <__extendsfdf2>
c000a846:	83 c4 10             	add    esp,0x10
c000a849:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a84d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a851:	52                   	push   edx
c000a852:	50                   	push   eax
c000a853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a857:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a85b:	e8 9b ce 01 00       	call   c00276fb <__adddf3>
c000a860:	59                   	pop    ecx
c000a861:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a865:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a869:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a86f:	e8 fb de 01 00       	call   c002876f <__extendsfdf2>
c000a874:	83 c4 10             	add    esp,0x10
c000a877:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a87b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a87f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a883:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a887:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a88b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a88f:	e8 e4 d4 01 00       	call   c0027d78 <__muldf3>
c000a894:	83 c4 10             	add    esp,0x10
c000a897:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a89b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a89f:	52                   	push   edx
c000a8a0:	50                   	push   eax
c000a8a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8a9:	e8 4d ce 01 00       	call   c00276fb <__adddf3>
c000a8ae:	59                   	pop    ecx
c000a8af:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a8b3:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a8b7:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a8bd:	e8 ad de 01 00       	call   c002876f <__extendsfdf2>
c000a8c2:	83 c4 10             	add    esp,0x10
c000a8c5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a8c9:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a8cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8d5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a8d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a8dd:	e8 96 d4 01 00       	call   c0027d78 <__muldf3>
c000a8e2:	83 c4 10             	add    esp,0x10
c000a8e5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a8e9:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a8ed:	52                   	push   edx
c000a8ee:	50                   	push   eax
c000a8ef:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a8f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a8f7:	e8 ff cd 01 00       	call   c00276fb <__adddf3>
c000a8fc:	59                   	pop    ecx
c000a8fd:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a901:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a905:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a90b:	e8 5f de 01 00       	call   c002876f <__extendsfdf2>
c000a910:	83 c4 10             	add    esp,0x10
c000a913:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a917:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a91b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a91f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a923:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a927:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a92b:	e8 48 d4 01 00       	call   c0027d78 <__muldf3>
c000a930:	83 c4 10             	add    esp,0x10
c000a933:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a937:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a93b:	52                   	push   edx
c000a93c:	50                   	push   eax
c000a93d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a941:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a945:	e8 b1 cd 01 00       	call   c00276fb <__adddf3>
c000a94a:	59                   	pop    ecx
c000a94b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a94f:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a953:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a959:	e8 11 de 01 00       	call   c002876f <__extendsfdf2>
c000a95e:	83 c4 10             	add    esp,0x10
c000a961:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a965:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a969:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a96d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a971:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a975:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a979:	e8 fa d3 01 00       	call   c0027d78 <__muldf3>
c000a97e:	83 c4 10             	add    esp,0x10
c000a981:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a985:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a989:	52                   	push   edx
c000a98a:	50                   	push   eax
c000a98b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a98f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a993:	e8 63 cd 01 00       	call   c00276fb <__adddf3>
c000a998:	59                   	pop    ecx
c000a999:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a99d:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a9a1:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a9a7:	e8 c3 dd 01 00       	call   c002876f <__extendsfdf2>
c000a9ac:	83 c4 10             	add    esp,0x10
c000a9af:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a9b3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a9b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9bf:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9c3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9c7:	e8 ac d3 01 00       	call   c0027d78 <__muldf3>
c000a9cc:	83 c4 10             	add    esp,0x10
c000a9cf:	83 c6 18             	add    esi,0x18
c000a9d2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a9d6:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a9da:	52                   	push   edx
c000a9db:	50                   	push   eax
c000a9dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a9e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a9e4:	e8 12 cd 01 00       	call   c00276fb <__adddf3>
c000a9e9:	59                   	pop    ecx
c000a9ea:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a9ee:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a9f2:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a9f8:	e8 72 dd 01 00       	call   c002876f <__extendsfdf2>
c000a9fd:	83 c4 10             	add    esp,0x10
c000aa00:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000aa04:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000aa08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa10:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa14:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa18:	e8 5b d3 01 00       	call   c0027d78 <__muldf3>
c000aa1d:	83 c4 10             	add    esp,0x10
c000aa20:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aa24:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aa28:	52                   	push   edx
c000aa29:	50                   	push   eax
c000aa2a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa2e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa32:	e8 c4 cc 01 00       	call   c00276fb <__adddf3>
c000aa37:	83 c4 10             	add    esp,0x10
c000aa3a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000aa3e:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000aa42:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000aa45:	0f 89 8b fd ff ff    	jns    c000a7d6 <calc_output_hex+0x9e>
c000aa4b:	31 f6                	xor    esi,esi
c000aa4d:	31 ff                	xor    edi,edi
c000aa4f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000aa53:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000aa56:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000aa5a:	29 e9                	sub    ecx,ebp
c000aa5c:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000aa60:	29 c8                	sub    eax,ecx
c000aa62:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000aa65:	99                   	cdq    
c000aa66:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000aa6a:	f7 3c 24             	idiv   DWORD PTR [esp]
c000aa6d:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000aa71:	0f af e8             	imul   ebp,eax
c000aa74:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000aa78:	40                   	inc    eax
c000aa79:	01 cd                	add    ebp,ecx
c000aa7b:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000aa80:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000aa84:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000aa88:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000aa8c:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000aa8f:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000aa93:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000aa97:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000aa9b:	89 e8                	mov    eax,ebp
c000aa9d:	e8 42 f0 ff ff       	call   c0009ae4 <fp_to_double>
c000aaa2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aaa6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aaaa:	89 e8                	mov    eax,ebp
c000aaac:	e8 29 f0 ff ff       	call   c0009ada <fp_to_int>
c000aab1:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000aab5:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000aab8:	52                   	push   edx
c000aab9:	52                   	push   edx
c000aaba:	51                   	push   ecx
c000aabb:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000aac2:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000aac9:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000aacd:	e8 be c5 01 00       	call   c0027090 <__subsf3>
c000aad2:	89 04 24             	mov    DWORD PTR [esp],eax
c000aad5:	e8 95 dc 01 00       	call   c002876f <__extendsfdf2>
c000aada:	83 c4 10             	add    esp,0x10
c000aadd:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aae1:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aae5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aae9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaed:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaf1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaf5:	e8 7e d2 01 00       	call   c0027d78 <__muldf3>
c000aafa:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000ab01:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ab05:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000ab08:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ab0c:	e8 5e dc 01 00       	call   c002876f <__extendsfdf2>
c000ab11:	83 c4 10             	add    esp,0x10
c000ab14:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ab18:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ab1c:	52                   	push   edx
c000ab1d:	50                   	push   eax
c000ab1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab26:	e8 d0 cb 01 00       	call   c00276fb <__adddf3>
c000ab2b:	59                   	pop    ecx
c000ab2c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ab30:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ab34:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000ab3a:	e8 30 dc 01 00       	call   c002876f <__extendsfdf2>
c000ab3f:	83 c4 10             	add    esp,0x10
c000ab42:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ab46:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ab4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ab4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ab52:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ab56:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ab5a:	e8 19 d2 01 00       	call   c0027d78 <__muldf3>
c000ab5f:	83 c4 10             	add    esp,0x10
c000ab62:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ab66:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ab6a:	52                   	push   edx
c000ab6b:	50                   	push   eax
c000ab6c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ab70:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ab74:	e8 82 cb 01 00       	call   c00276fb <__adddf3>
c000ab79:	59                   	pop    ecx
c000ab7a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ab7e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ab82:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000ab88:	e8 e2 db 01 00       	call   c002876f <__extendsfdf2>
c000ab8d:	83 c4 10             	add    esp,0x10
c000ab90:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ab94:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ab98:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ab9c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aba0:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aba4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aba8:	e8 cb d1 01 00       	call   c0027d78 <__muldf3>
c000abad:	83 c4 10             	add    esp,0x10
c000abb0:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000abb4:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000abb8:	52                   	push   edx
c000abb9:	50                   	push   eax
c000abba:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000abbe:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000abc2:	e8 34 cb 01 00       	call   c00276fb <__adddf3>
c000abc7:	59                   	pop    ecx
c000abc8:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000abcc:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000abd0:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000abd6:	e8 94 db 01 00       	call   c002876f <__extendsfdf2>
c000abdb:	83 c4 10             	add    esp,0x10
c000abde:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000abe2:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000abe6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000abea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000abee:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000abf2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000abf6:	e8 7d d1 01 00       	call   c0027d78 <__muldf3>
c000abfb:	83 c4 10             	add    esp,0x10
c000abfe:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ac02:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ac06:	52                   	push   edx
c000ac07:	50                   	push   eax
c000ac08:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ac0c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ac10:	e8 e6 ca 01 00       	call   c00276fb <__adddf3>
c000ac15:	59                   	pop    ecx
c000ac16:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000ac1a:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000ac1e:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000ac24:	e8 46 db 01 00       	call   c002876f <__extendsfdf2>
c000ac29:	83 c4 10             	add    esp,0x10
c000ac2c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ac30:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ac34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac3c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ac40:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ac44:	e8 2f d1 01 00       	call   c0027d78 <__muldf3>
c000ac49:	83 c4 10             	add    esp,0x10
c000ac4c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ac50:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ac54:	52                   	push   edx
c000ac55:	50                   	push   eax
c000ac56:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ac5a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ac5e:	e8 98 ca 01 00       	call   c00276fb <__adddf3>
c000ac63:	59                   	pop    ecx
c000ac64:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000ac68:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000ac6c:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000ac72:	e8 f8 da 01 00       	call   c002876f <__extendsfdf2>
c000ac77:	83 c4 10             	add    esp,0x10
c000ac7a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ac7e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ac82:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac8a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ac8e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ac92:	e8 e1 d0 01 00       	call   c0027d78 <__muldf3>
c000ac97:	83 c4 10             	add    esp,0x10
c000ac9a:	83 eb 18             	sub    ebx,0x18
c000ac9d:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aca1:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aca5:	52                   	push   edx
c000aca6:	50                   	push   eax
c000aca7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000acab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000acaf:	e8 47 ca 01 00       	call   c00276fb <__adddf3>
c000acb4:	59                   	pop    ecx
c000acb5:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000acb9:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000acbd:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000acc3:	e8 a7 da 01 00       	call   c002876f <__extendsfdf2>
c000acc8:	83 c4 10             	add    esp,0x10
c000accb:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000accf:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000acd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acd7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acdb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000acdf:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ace3:	e8 90 d0 01 00       	call   c0027d78 <__muldf3>
c000ace8:	83 c4 10             	add    esp,0x10
c000aceb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000acef:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000acf3:	52                   	push   edx
c000acf4:	50                   	push   eax
c000acf5:	57                   	push   edi
c000acf6:	56                   	push   esi
c000acf7:	e8 ff c9 01 00       	call   c00276fb <__adddf3>
c000acfc:	83 c4 10             	add    esp,0x10
c000acff:	89 c6                	mov    esi,eax
c000ad01:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ad04:	89 d7                	mov    edi,edx
c000ad06:	85 ed                	test   ebp,ebp
c000ad08:	0f 8f 8d fd ff ff    	jg     c000aa9b <calc_output_hex+0x363>
c000ad0e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ad12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ad16:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ad1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ad1e:	e8 d8 c9 01 00       	call   c00276fb <__adddf3>
c000ad23:	83 c4 10             	add    esp,0x10
c000ad26:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad29:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ad2d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad31:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad35:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad3d:	e8 36 d0 01 00       	call   c0027d78 <__muldf3>
c000ad42:	59                   	pop    ecx
c000ad43:	5b                   	pop    ebx
c000ad44:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad48:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ad4c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad54:	e8 f2 d8 01 00       	call   c002864b <__truncdfsf2>
c000ad59:	83 c4 10             	add    esp,0x10
c000ad5c:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ad63:	89 03                	mov    DWORD PTR [ebx],eax
c000ad65:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ad69:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ad6d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ad71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ad75:	e8 81 c9 01 00       	call   c00276fb <__adddf3>
c000ad7a:	83 c4 10             	add    esp,0x10
c000ad7d:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad80:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ad84:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad94:	e8 df cf 01 00       	call   c0027d78 <__muldf3>
c000ad99:	5d                   	pop    ebp
c000ad9a:	59                   	pop    ecx
c000ad9b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad9f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ada3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ada7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adab:	e8 9b d8 01 00       	call   c002864b <__truncdfsf2>
c000adb0:	83 c4 10             	add    esp,0x10
c000adb3:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000adba:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000adbd:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000adc1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000adc5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adc9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adcd:	e8 29 c9 01 00       	call   c00276fb <__adddf3>
c000add2:	83 c4 10             	add    esp,0x10
c000add5:	89 04 24             	mov    DWORD PTR [esp],eax
c000add8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000addc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ade0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ade4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ade8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adec:	e8 87 cf 01 00       	call   c0027d78 <__muldf3>
c000adf1:	5b                   	pop    ebx
c000adf2:	5d                   	pop    ebp
c000adf3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000adf7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000adfb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae03:	e8 43 d8 01 00       	call   c002864b <__truncdfsf2>
c000ae08:	83 c4 10             	add    esp,0x10
c000ae0b:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ae12:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ae15:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ae19:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ae1d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ae21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ae25:	e8 d1 c8 01 00       	call   c00276fb <__adddf3>
c000ae2a:	83 c4 10             	add    esp,0x10
c000ae2d:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae30:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ae34:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae44:	e8 2f cf 01 00       	call   c0027d78 <__muldf3>
c000ae49:	59                   	pop    ecx
c000ae4a:	5b                   	pop    ebx
c000ae4b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ae4f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ae53:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae57:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae5b:	e8 eb d7 01 00       	call   c002864b <__truncdfsf2>
c000ae60:	83 c4 10             	add    esp,0x10
c000ae63:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ae6a:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ae6d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ae71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ae75:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae7d:	e8 79 c8 01 00       	call   c00276fb <__adddf3>
c000ae82:	83 c4 10             	add    esp,0x10
c000ae85:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae88:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ae8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae9c:	e8 d7 ce 01 00       	call   c0027d78 <__muldf3>
c000aea1:	5d                   	pop    ebp
c000aea2:	59                   	pop    ecx
c000aea3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aea7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aeab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aeaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aeb3:	e8 93 d7 01 00       	call   c002864b <__truncdfsf2>
c000aeb8:	83 c4 10             	add    esp,0x10
c000aebb:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aec2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000aec5:	57                   	push   edi
c000aec6:	56                   	push   esi
c000aec7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aecb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aecf:	e8 27 c8 01 00       	call   c00276fb <__adddf3>
c000aed4:	83 c4 10             	add    esp,0x10
c000aed7:	89 04 24             	mov    DWORD PTR [esp],eax
c000aeda:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aede:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aee2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aee6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aeea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aeee:	e8 85 ce 01 00       	call   c0027d78 <__muldf3>
c000aef3:	5b                   	pop    ebx
c000aef4:	5e                   	pop    esi
c000aef5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aef9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aefd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000af01:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000af05:	e8 41 d7 01 00       	call   c002864b <__truncdfsf2>
c000af0a:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000af11:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000af14:	81 c4 9c 00 00 00    	add    esp,0x9c
c000af1a:	5b                   	pop    ebx
c000af1b:	5e                   	pop    esi
c000af1c:	5f                   	pop    edi
c000af1d:	5d                   	pop    ebp
c000af1e:	c3                   	ret    

c000af1f <sinc_reset>:
c000af1f:	56                   	push   esi
c000af20:	53                   	push   ebx
c000af21:	51                   	push   ecx
c000af22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af26:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000af29:	85 db                	test   ebx,ebx
c000af2b:	74 59                	je     c000af86 <sinc_reset+0x67>
c000af2d:	31 d2                	xor    edx,edx
c000af2f:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000af36:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000af39:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000af3c:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000af43:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000af4a:	31 c0                	xor    eax,eax
c000af4c:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000af52:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000af55:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000af58:	52                   	push   edx
c000af59:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000af5c:	c1 e0 02             	shl    eax,0x2
c000af5f:	50                   	push   eax
c000af60:	6a 00                	push   0x0
c000af62:	56                   	push   esi
c000af63:	e8 e8 57 ff ff       	call   c0000750 <memset>
c000af68:	83 c4 0c             	add    esp,0xc
c000af6b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000af6e:	c1 e0 02             	shl    eax,0x2
c000af71:	50                   	push   eax
c000af72:	68 aa 00 00 00       	push   0xaa
c000af77:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000af7a:	8d 04 86             	lea    eax,[esi+eax*4]
c000af7d:	50                   	push   eax
c000af7e:	e8 cd 57 ff ff       	call   c0000750 <memset>
c000af83:	83 c4 10             	add    esp,0x10
c000af86:	58                   	pop    eax
c000af87:	5b                   	pop    ebx
c000af88:	5e                   	pop    esi
c000af89:	c3                   	ret    

c000af8a <calc_output_multi>:
c000af8a:	55                   	push   ebp
c000af8b:	57                   	push   edi
c000af8c:	56                   	push   esi
c000af8d:	89 c6                	mov    esi,eax
c000af8f:	53                   	push   ebx
c000af90:	83 ec 4c             	sub    esp,0x4c
c000af93:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000af97:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000af9b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000af9f:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000afa3:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000afa7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000afab:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000afaf:	8d 46 44             	lea    eax,[esi+0x44]
c000afb2:	89 04 24             	mov    DWORD PTR [esp],eax
c000afb5:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000afbb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000afbf:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000afc2:	e8 0f eb ff ff       	call   c0009ad6 <int_to_fp>
c000afc7:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000afca:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000afce:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000afd2:	99                   	cdq    
c000afd3:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000afd7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000afdb:	0f af d0             	imul   edx,eax
c000afde:	0f af c3             	imul   eax,ebx
c000afe1:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000afe5:	29 c1                	sub    ecx,eax
c000afe7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000afeb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000afef:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000aff6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000affa:	57                   	push   edi
c000affb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000afff:	6a 00                	push   0x0
c000b001:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b005:	e8 46 57 ff ff       	call   c0000750 <memset>
c000b00a:	83 c4 10             	add    esp,0x10
c000b00d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b011:	89 df                	mov    edi,ebx
c000b013:	e8 cc ea ff ff       	call   c0009ae4 <fp_to_double>
c000b018:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b01c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b020:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b024:	e8 b1 ea ff ff       	call   c0009ada <fp_to_int>
c000b029:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b02c:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b02f:	51                   	push   ecx
c000b030:	51                   	push   ecx
c000b031:	55                   	push   ebp
c000b032:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b036:	e8 55 c0 01 00       	call   c0027090 <__subsf3>
c000b03b:	89 04 24             	mov    DWORD PTR [esp],eax
c000b03e:	e8 2c d7 01 00       	call   c002876f <__extendsfdf2>
c000b043:	83 c4 10             	add    esp,0x10
c000b046:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b04a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b04e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b052:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b056:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b05a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b05e:	e8 15 cd 01 00       	call   c0027d78 <__muldf3>
c000b063:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b066:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b06a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b06e:	e8 fc d6 01 00       	call   c002876f <__extendsfdf2>
c000b073:	83 c4 10             	add    esp,0x10
c000b076:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b07a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b07e:	52                   	push   edx
c000b07f:	50                   	push   eax
c000b080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b088:	e8 6e c6 01 00       	call   c00276fb <__adddf3>
c000b08d:	83 c4 10             	add    esp,0x10
c000b090:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b094:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b098:	89 f8                	mov    eax,edi
c000b09a:	b9 08 00 00 00       	mov    ecx,0x8
c000b09f:	99                   	cdq    
c000b0a0:	f7 f9                	idiv   ecx
c000b0a2:	4a                   	dec    edx
c000b0a3:	83 fa 06             	cmp    edx,0x6
c000b0a6:	77 07                	ja     c000b0af <calc_output_multi+0x125>
c000b0a8:	ff 24 95 44 a0 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5fbc]
c000b0af:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0b2:	4f                   	dec    edi
c000b0b3:	83 ec 0c             	sub    esp,0xc
c000b0b6:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0bd:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c4:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0c8:	e8 a2 d6 01 00       	call   c002876f <__extendsfdf2>
c000b0cd:	83 c4 10             	add    esp,0x10
c000b0d0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d4:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0e4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0e8:	e8 8b cc 01 00       	call   c0027d78 <__muldf3>
c000b0ed:	83 c4 10             	add    esp,0x10
c000b0f0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0f4:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0f8:	52                   	push   edx
c000b0f9:	50                   	push   eax
c000b0fa:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0fd:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b100:	e8 f6 c5 01 00       	call   c00276fb <__adddf3>
c000b105:	83 c4 10             	add    esp,0x10
c000b108:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b10e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b111:	4f                   	dec    edi
c000b112:	83 ec 0c             	sub    esp,0xc
c000b115:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b118:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b11c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b123:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b127:	e8 43 d6 01 00       	call   c002876f <__extendsfdf2>
c000b12c:	83 c4 10             	add    esp,0x10
c000b12f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b133:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b137:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b143:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b147:	e8 2c cc 01 00       	call   c0027d78 <__muldf3>
c000b14c:	83 c4 10             	add    esp,0x10
c000b14f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b153:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b157:	52                   	push   edx
c000b158:	50                   	push   eax
c000b159:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b15c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b15f:	e8 97 c5 01 00       	call   c00276fb <__adddf3>
c000b164:	83 c4 10             	add    esp,0x10
c000b167:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b16d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b170:	4f                   	dec    edi
c000b171:	83 ec 0c             	sub    esp,0xc
c000b174:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b177:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b17b:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b182:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b186:	e8 e4 d5 01 00       	call   c002876f <__extendsfdf2>
c000b18b:	83 c4 10             	add    esp,0x10
c000b18e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b192:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b196:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b19a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b19e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b1a2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b1a6:	e8 cd cb 01 00       	call   c0027d78 <__muldf3>
c000b1ab:	83 c4 10             	add    esp,0x10
c000b1ae:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b1b2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b1b6:	52                   	push   edx
c000b1b7:	50                   	push   eax
c000b1b8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b1bb:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b1be:	e8 38 c5 01 00       	call   c00276fb <__adddf3>
c000b1c3:	83 c4 10             	add    esp,0x10
c000b1c6:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1c9:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1cc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b1cf:	4f                   	dec    edi
c000b1d0:	83 ec 0c             	sub    esp,0xc
c000b1d3:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b1d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b1da:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b1e1:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b1e5:	e8 85 d5 01 00       	call   c002876f <__extendsfdf2>
c000b1ea:	83 c4 10             	add    esp,0x10
c000b1ed:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b1f1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b1f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1fd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b201:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b205:	e8 6e cb 01 00       	call   c0027d78 <__muldf3>
c000b20a:	83 c4 10             	add    esp,0x10
c000b20d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b211:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b215:	52                   	push   edx
c000b216:	50                   	push   eax
c000b217:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b21a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b21d:	e8 d9 c4 01 00       	call   c00276fb <__adddf3>
c000b222:	83 c4 10             	add    esp,0x10
c000b225:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b228:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b22b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b22e:	4f                   	dec    edi
c000b22f:	83 ec 0c             	sub    esp,0xc
c000b232:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b235:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b239:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b240:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b244:	e8 26 d5 01 00       	call   c002876f <__extendsfdf2>
c000b249:	83 c4 10             	add    esp,0x10
c000b24c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b250:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b254:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b258:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b25c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b260:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b264:	e8 0f cb 01 00       	call   c0027d78 <__muldf3>
c000b269:	83 c4 10             	add    esp,0x10
c000b26c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b270:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b274:	52                   	push   edx
c000b275:	50                   	push   eax
c000b276:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b279:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b27c:	e8 7a c4 01 00       	call   c00276fb <__adddf3>
c000b281:	83 c4 10             	add    esp,0x10
c000b284:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b287:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b28a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b28d:	4f                   	dec    edi
c000b28e:	83 ec 0c             	sub    esp,0xc
c000b291:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b294:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b298:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b29f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2a3:	e8 c7 d4 01 00       	call   c002876f <__extendsfdf2>
c000b2a8:	83 c4 10             	add    esp,0x10
c000b2ab:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b2af:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b2b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2bb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b2bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b2c3:	e8 b0 ca 01 00       	call   c0027d78 <__muldf3>
c000b2c8:	83 c4 10             	add    esp,0x10
c000b2cb:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b2cf:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b2d3:	52                   	push   edx
c000b2d4:	50                   	push   eax
c000b2d5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2d8:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2db:	e8 1b c4 01 00       	call   c00276fb <__adddf3>
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2e6:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2e9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b2ec:	4f                   	dec    edi
c000b2ed:	83 ec 0c             	sub    esp,0xc
c000b2f0:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2f7:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2fe:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b302:	e8 68 d4 01 00       	call   c002876f <__extendsfdf2>
c000b307:	83 c4 10             	add    esp,0x10
c000b30a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b30e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b312:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b316:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b31a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b31e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b322:	e8 51 ca 01 00       	call   c0027d78 <__muldf3>
c000b327:	83 c4 10             	add    esp,0x10
c000b32a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b32e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b332:	52                   	push   edx
c000b333:	50                   	push   eax
c000b334:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b337:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b33a:	e8 bc c3 01 00       	call   c00276fb <__adddf3>
c000b33f:	83 c4 10             	add    esp,0x10
c000b342:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b345:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b348:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b34b:	4f                   	dec    edi
c000b34c:	83 ec 0c             	sub    esp,0xc
c000b34f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b352:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b356:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b35d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b361:	e8 09 d4 01 00       	call   c002876f <__extendsfdf2>
c000b366:	83 c4 10             	add    esp,0x10
c000b369:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b36d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b371:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b375:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b379:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b37d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b381:	e8 f2 c9 01 00       	call   c0027d78 <__muldf3>
c000b386:	83 c4 10             	add    esp,0x10
c000b389:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b38d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b391:	52                   	push   edx
c000b392:	50                   	push   eax
c000b393:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b396:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b399:	e8 5d c3 01 00       	call   c00276fb <__adddf3>
c000b39e:	83 c4 10             	add    esp,0x10
c000b3a1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3a4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3a7:	85 ff                	test   edi,edi
c000b3a9:	0f 8f e9 fc ff ff    	jg     c000b098 <calc_output_multi+0x10e>
c000b3af:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b3b3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b3b7:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b3bb:	0f 89 4c fc ff ff    	jns    c000b00d <calc_output_multi+0x83>
c000b3c1:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b3c5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b3c9:	29 c8                	sub    eax,ecx
c000b3cb:	99                   	cdq    
c000b3cc:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b3d0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b3d4:	0f af d0             	imul   edx,eax
c000b3d7:	40                   	inc    eax
c000b3d8:	01 d1                	add    ecx,edx
c000b3da:	0f af c3             	imul   eax,ebx
c000b3dd:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b3e1:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b3e4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3e8:	55                   	push   ebp
c000b3e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3ed:	6a 00                	push   0x0
c000b3ef:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b3f3:	e8 58 53 ff ff       	call   c0000750 <memset>
c000b3f8:	83 c4 10             	add    esp,0x10
c000b3fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b3ff:	e8 e0 e6 ff ff       	call   c0009ae4 <fp_to_double>
c000b404:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b408:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b40c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b410:	e8 c5 e6 ff ff       	call   c0009ada <fp_to_int>
c000b415:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b418:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b41b:	57                   	push   edi
c000b41c:	57                   	push   edi
c000b41d:	89 df                	mov    edi,ebx
c000b41f:	55                   	push   ebp
c000b420:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b424:	e8 67 bc 01 00       	call   c0027090 <__subsf3>
c000b429:	89 04 24             	mov    DWORD PTR [esp],eax
c000b42c:	e8 3e d3 01 00       	call   c002876f <__extendsfdf2>
c000b431:	83 c4 10             	add    esp,0x10
c000b434:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b438:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b43c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b440:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b444:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b448:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b44c:	e8 27 c9 01 00       	call   c0027d78 <__muldf3>
c000b451:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b454:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b458:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b45c:	e8 0e d3 01 00       	call   c002876f <__extendsfdf2>
c000b461:	83 c4 10             	add    esp,0x10
c000b464:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b468:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b46c:	52                   	push   edx
c000b46d:	50                   	push   eax
c000b46e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b472:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b476:	e8 80 c2 01 00       	call   c00276fb <__adddf3>
c000b47b:	83 c4 10             	add    esp,0x10
c000b47e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b482:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b486:	89 f8                	mov    eax,edi
c000b488:	b9 08 00 00 00       	mov    ecx,0x8
c000b48d:	99                   	cdq    
c000b48e:	f7 f9                	idiv   ecx
c000b490:	4a                   	dec    edx
c000b491:	83 fa 06             	cmp    edx,0x6
c000b494:	77 07                	ja     c000b49d <calc_output_multi+0x513>
c000b496:	ff 24 95 60 a0 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5fa0]
c000b49d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4a1:	4f                   	dec    edi
c000b4a2:	83 ec 0c             	sub    esp,0xc
c000b4a5:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4ac:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4b3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4b7:	e8 b3 d2 01 00       	call   c002876f <__extendsfdf2>
c000b4bc:	83 c4 10             	add    esp,0x10
c000b4bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4d7:	e8 9c c8 01 00       	call   c0027d78 <__muldf3>
c000b4dc:	83 c4 10             	add    esp,0x10
c000b4df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4e3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4e7:	52                   	push   edx
c000b4e8:	50                   	push   eax
c000b4e9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4ec:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4ef:	e8 07 c2 01 00       	call   c00276fb <__adddf3>
c000b4f4:	83 c4 10             	add    esp,0x10
c000b4f7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4fa:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b501:	4f                   	dec    edi
c000b502:	83 ec 0c             	sub    esp,0xc
c000b505:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b508:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b50c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b513:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b517:	e8 53 d2 01 00       	call   c002876f <__extendsfdf2>
c000b51c:	83 c4 10             	add    esp,0x10
c000b51f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b523:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b527:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b52b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b52f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b533:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b537:	e8 3c c8 01 00       	call   c0027d78 <__muldf3>
c000b53c:	83 c4 10             	add    esp,0x10
c000b53f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b543:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b547:	52                   	push   edx
c000b548:	50                   	push   eax
c000b549:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b54c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b54f:	e8 a7 c1 01 00       	call   c00276fb <__adddf3>
c000b554:	83 c4 10             	add    esp,0x10
c000b557:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b55a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b55d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b561:	4f                   	dec    edi
c000b562:	83 ec 0c             	sub    esp,0xc
c000b565:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b568:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b56c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b573:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b577:	e8 f3 d1 01 00       	call   c002876f <__extendsfdf2>
c000b57c:	83 c4 10             	add    esp,0x10
c000b57f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b583:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b587:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b58b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b58f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b593:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b597:	e8 dc c7 01 00       	call   c0027d78 <__muldf3>
c000b59c:	83 c4 10             	add    esp,0x10
c000b59f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b5a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b5a7:	52                   	push   edx
c000b5a8:	50                   	push   eax
c000b5a9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b5ac:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b5af:	e8 47 c1 01 00       	call   c00276fb <__adddf3>
c000b5b4:	83 c4 10             	add    esp,0x10
c000b5b7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b5ba:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5c1:	4f                   	dec    edi
c000b5c2:	83 ec 0c             	sub    esp,0xc
c000b5c5:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b5c8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b5cc:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b5d3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b5d7:	e8 93 d1 01 00       	call   c002876f <__extendsfdf2>
c000b5dc:	83 c4 10             	add    esp,0x10
c000b5df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b5e3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5ef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b5f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b5f7:	e8 7c c7 01 00       	call   c0027d78 <__muldf3>
c000b5fc:	83 c4 10             	add    esp,0x10
c000b5ff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b603:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b607:	52                   	push   edx
c000b608:	50                   	push   eax
c000b609:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b60c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b60f:	e8 e7 c0 01 00       	call   c00276fb <__adddf3>
c000b614:	83 c4 10             	add    esp,0x10
c000b617:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b61a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b61d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b621:	4f                   	dec    edi
c000b622:	83 ec 0c             	sub    esp,0xc
c000b625:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b628:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b62c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b633:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b637:	e8 33 d1 01 00       	call   c002876f <__extendsfdf2>
c000b63c:	83 c4 10             	add    esp,0x10
c000b63f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b643:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b647:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b64b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b64f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b653:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b657:	e8 1c c7 01 00       	call   c0027d78 <__muldf3>
c000b65c:	83 c4 10             	add    esp,0x10
c000b65f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b663:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b667:	52                   	push   edx
c000b668:	50                   	push   eax
c000b669:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b66c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b66f:	e8 87 c0 01 00       	call   c00276fb <__adddf3>
c000b674:	83 c4 10             	add    esp,0x10
c000b677:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b67a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b67d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b681:	4f                   	dec    edi
c000b682:	83 ec 0c             	sub    esp,0xc
c000b685:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b688:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b68c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b693:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b697:	e8 d3 d0 01 00       	call   c002876f <__extendsfdf2>
c000b69c:	83 c4 10             	add    esp,0x10
c000b69f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b6a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b6a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b6b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b6b7:	e8 bc c6 01 00       	call   c0027d78 <__muldf3>
c000b6bc:	83 c4 10             	add    esp,0x10
c000b6bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b6c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b6c7:	52                   	push   edx
c000b6c8:	50                   	push   eax
c000b6c9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b6cc:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b6cf:	e8 27 c0 01 00       	call   c00276fb <__adddf3>
c000b6d4:	83 c4 10             	add    esp,0x10
c000b6d7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b6da:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b6dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6e1:	4f                   	dec    edi
c000b6e2:	83 ec 0c             	sub    esp,0xc
c000b6e5:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b6e8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b6ec:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b6f3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b6f7:	e8 73 d0 01 00       	call   c002876f <__extendsfdf2>
c000b6fc:	83 c4 10             	add    esp,0x10
c000b6ff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b703:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b707:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b70b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b70f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b713:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b717:	e8 5c c6 01 00       	call   c0027d78 <__muldf3>
c000b71c:	83 c4 10             	add    esp,0x10
c000b71f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b723:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b727:	52                   	push   edx
c000b728:	50                   	push   eax
c000b729:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b72c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b72f:	e8 c7 bf 01 00       	call   c00276fb <__adddf3>
c000b734:	83 c4 10             	add    esp,0x10
c000b737:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b73a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b73d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b741:	4f                   	dec    edi
c000b742:	83 ec 0c             	sub    esp,0xc
c000b745:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b748:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b74c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b753:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b757:	e8 13 d0 01 00       	call   c002876f <__extendsfdf2>
c000b75c:	83 c4 10             	add    esp,0x10
c000b75f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b763:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b767:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b76b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b76f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b773:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b777:	e8 fc c5 01 00       	call   c0027d78 <__muldf3>
c000b77c:	83 c4 10             	add    esp,0x10
c000b77f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b783:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b787:	52                   	push   edx
c000b788:	50                   	push   eax
c000b789:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b78c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b78f:	e8 67 bf 01 00       	call   c00276fb <__adddf3>
c000b794:	83 c4 10             	add    esp,0x10
c000b797:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b79a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b79d:	85 ff                	test   edi,edi
c000b79f:	0f 8f e1 fc ff ff    	jg     c000b486 <calc_output_multi+0x4fc>
c000b7a5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b7a9:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b7ad:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b7b1:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b7b6:	0f 8f 3f fc ff ff    	jg     c000b3fb <calc_output_multi+0x471>
c000b7bc:	be 08 00 00 00       	mov    esi,0x8
c000b7c1:	89 d8                	mov    eax,ebx
c000b7c3:	99                   	cdq    
c000b7c4:	f7 fe                	idiv   esi
c000b7c6:	4a                   	dec    edx
c000b7c7:	83 fa 06             	cmp    edx,0x6
c000b7ca:	77 07                	ja     c000b7d3 <calc_output_multi+0x849>
c000b7cc:	ff 24 95 7c a0 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5f84]
c000b7d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7d7:	4b                   	dec    ebx
c000b7d8:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7dc:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7e3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7e7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7ea:	e8 0c bf 01 00       	call   c00276fb <__adddf3>
c000b7ef:	83 c4 10             	add    esp,0x10
c000b7f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b802:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b806:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b80a:	e8 69 c5 01 00       	call   c0027d78 <__muldf3>
c000b80f:	5d                   	pop    ebp
c000b810:	59                   	pop    ecx
c000b811:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b815:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b819:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b81d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b821:	e8 25 ce 01 00       	call   c002864b <__truncdfsf2>
c000b826:	83 c4 10             	add    esp,0x10
c000b829:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b82d:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b830:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b834:	4b                   	dec    ebx
c000b835:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b839:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b83c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b840:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b844:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b847:	e8 af be 01 00       	call   c00276fb <__adddf3>
c000b84c:	83 c4 10             	add    esp,0x10
c000b84f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b853:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b857:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b85b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b85f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b863:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b867:	e8 0c c5 01 00       	call   c0027d78 <__muldf3>
c000b86c:	59                   	pop    ecx
c000b86d:	5f                   	pop    edi
c000b86e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b872:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b876:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b87a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b87e:	e8 c8 cd 01 00       	call   c002864b <__truncdfsf2>
c000b883:	83 c4 10             	add    esp,0x10
c000b886:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b88a:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b88d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b891:	4b                   	dec    ebx
c000b892:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b896:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b899:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b89d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b8a1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b8a4:	e8 52 be 01 00       	call   c00276fb <__adddf3>
c000b8a9:	83 c4 10             	add    esp,0x10
c000b8ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b8b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b8b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8c4:	e8 af c4 01 00       	call   c0027d78 <__muldf3>
c000b8c9:	5f                   	pop    edi
c000b8ca:	5d                   	pop    ebp
c000b8cb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8cf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8db:	e8 6b cd 01 00       	call   c002864b <__truncdfsf2>
c000b8e0:	83 c4 10             	add    esp,0x10
c000b8e3:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b8e7:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b8ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8ee:	4b                   	dec    ebx
c000b8ef:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b8f3:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b8f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b8fa:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b8fe:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b901:	e8 f5 bd 01 00       	call   c00276fb <__adddf3>
c000b906:	83 c4 10             	add    esp,0x10
c000b909:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b90d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b911:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b915:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b919:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b91d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b921:	e8 52 c4 01 00       	call   c0027d78 <__muldf3>
c000b926:	5d                   	pop    ebp
c000b927:	59                   	pop    ecx
c000b928:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b92c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b930:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b934:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b938:	e8 0e cd 01 00       	call   c002864b <__truncdfsf2>
c000b93d:	83 c4 10             	add    esp,0x10
c000b940:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b944:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b947:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b94b:	4b                   	dec    ebx
c000b94c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b950:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b953:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b957:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b95b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b95e:	e8 98 bd 01 00       	call   c00276fb <__adddf3>
c000b963:	83 c4 10             	add    esp,0x10
c000b966:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b96a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b96e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b972:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b976:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b97a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b97e:	e8 f5 c3 01 00       	call   c0027d78 <__muldf3>
c000b983:	59                   	pop    ecx
c000b984:	5f                   	pop    edi
c000b985:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b989:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b98d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b991:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b995:	e8 b1 cc 01 00       	call   c002864b <__truncdfsf2>
c000b99a:	83 c4 10             	add    esp,0x10
c000b99d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b9a1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b9a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b9a8:	4b                   	dec    ebx
c000b9a9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b9ad:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b9b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b9b4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b9b8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b9bb:	e8 3b bd 01 00       	call   c00276fb <__adddf3>
c000b9c0:	83 c4 10             	add    esp,0x10
c000b9c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b9c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b9cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9db:	e8 98 c3 01 00       	call   c0027d78 <__muldf3>
c000b9e0:	5f                   	pop    edi
c000b9e1:	5d                   	pop    ebp
c000b9e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b9e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b9ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9f2:	e8 54 cc 01 00       	call   c002864b <__truncdfsf2>
c000b9f7:	83 c4 10             	add    esp,0x10
c000b9fa:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b9fe:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000ba01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba05:	4b                   	dec    ebx
c000ba06:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000ba0a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000ba0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba11:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000ba15:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000ba18:	e8 de bc 01 00       	call   c00276fb <__adddf3>
c000ba1d:	83 c4 10             	add    esp,0x10
c000ba20:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba24:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ba28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba30:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba38:	e8 3b c3 01 00       	call   c0027d78 <__muldf3>
c000ba3d:	5d                   	pop    ebp
c000ba3e:	59                   	pop    ecx
c000ba3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba43:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba4f:	e8 f7 cb 01 00       	call   c002864b <__truncdfsf2>
c000ba54:	83 c4 10             	add    esp,0x10
c000ba57:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000ba5b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000ba5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba62:	4b                   	dec    ebx
c000ba63:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000ba67:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000ba6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba6e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000ba72:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000ba75:	e8 81 bc 01 00       	call   c00276fb <__adddf3>
c000ba7a:	83 c4 10             	add    esp,0x10
c000ba7d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba81:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ba85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba91:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba95:	e8 de c2 01 00       	call   c0027d78 <__muldf3>
c000ba9a:	59                   	pop    ecx
c000ba9b:	5f                   	pop    edi
c000ba9c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000baa0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000baa4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baa8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baac:	e8 9a cb 01 00       	call   c002864b <__truncdfsf2>
c000bab1:	83 c4 10             	add    esp,0x10
c000bab4:	85 db                	test   ebx,ebx
c000bab6:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000baba:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000babd:	0f 8f fe fc ff ff    	jg     c000b7c1 <calc_output_multi+0x837>
c000bac3:	83 c4 4c             	add    esp,0x4c
c000bac6:	5b                   	pop    ebx
c000bac7:	5e                   	pop    esi
c000bac8:	5f                   	pop    edi
c000bac9:	5d                   	pop    ebp
c000baca:	c3                   	ret    

c000bacb <double_to_fp>:
c000bacb:	83 ec 0c             	sub    esp,0xc
c000bace:	68 00 00 b0 40       	push   0x40b00000
c000bad3:	6a 00                	push   0x0
c000bad5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bad9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000badd:	e8 96 c2 01 00       	call   c0027d78 <__muldf3>
c000bae2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bae6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000baea:	83 c4 1c             	add    esp,0x1c
c000baed:	e9 0e cd 01 00       	jmp    c0028800 <lrint>

c000baf2 <prepare_data>:
c000baf2:	55                   	push   ebp
c000baf3:	57                   	push   edi
c000baf4:	56                   	push   esi
c000baf5:	53                   	push   ebx
c000baf6:	83 ec 1c             	sub    esp,0x1c
c000baf9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000bafd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000bb01:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000bb05:	0f 89 57 01 00 00    	jns    c000bc62 <prepare_data+0x170>
c000bb0b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000bb0e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000bb11:	85 d2                	test   edx,edx
c000bb13:	75 0d                	jne    c000bb22 <prepare_data+0x30>
c000bb15:	8d 14 36             	lea    edx,[esi+esi*1]
c000bb18:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000bb1b:	29 d0                	sub    eax,edx
c000bb1d:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000bb20:	eb 44                	jmp    c000bb66 <prepare_data+0x74>
c000bb22:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000bb25:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000bb28:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000bb2b:	39 c1                	cmp    ecx,eax
c000bb2d:	7d 04                	jge    c000bb33 <prepare_data+0x41>
c000bb2f:	29 d0                	sub    eax,edx
c000bb31:	eb 2d                	jmp    c000bb60 <prepare_data+0x6e>
c000bb33:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000bb39:	29 d7                	sub    edi,edx
c000bb3b:	01 f7                	add    edi,esi
c000bb3d:	51                   	push   ecx
c000bb3e:	29 f2                	sub    edx,esi
c000bb40:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000bb47:	8d 14 90             	lea    edx,[eax+edx*4]
c000bb4a:	51                   	push   ecx
c000bb4b:	52                   	push   edx
c000bb4c:	50                   	push   eax
c000bb4d:	e8 36 4b ff ff       	call   c0000688 <memmove>
c000bb52:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000bb55:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000bb58:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000bb5b:	29 f0                	sub    eax,esi
c000bb5d:	83 c4 10             	add    esp,0x10
c000bb60:	29 f0                	sub    eax,esi
c000bb62:	79 02                	jns    c000bb66 <prepare_data+0x74>
c000bb64:	31 c0                	xor    eax,eax
c000bb66:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000bb69:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000bb6c:	29 ef                	sub    edi,ebp
c000bb6e:	39 c7                	cmp    edi,eax
c000bb70:	7e 02                	jle    c000bb74 <prepare_data+0x82>
c000bb72:	89 c7                	mov    edi,eax
c000bb74:	89 f8                	mov    eax,edi
c000bb76:	99                   	cdq    
c000bb77:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb7a:	b8 15 00 00 00       	mov    eax,0x15
c000bb7f:	29 d7                	sub    edi,edx
c000bb81:	0f 88 dd 00 00 00    	js     c000bc64 <prepare_data+0x172>
c000bb87:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000bb8a:	8d 14 39             	lea    edx,[ecx+edi*1]
c000bb8d:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000bb90:	0f 8f ce 00 00 00    	jg     c000bc64 <prepare_data+0x172>
c000bb96:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000bb9c:	50                   	push   eax
c000bb9d:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000bba4:	50                   	push   eax
c000bba5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000bba9:	8b 00                	mov    eax,DWORD PTR [eax]
c000bbab:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000bbae:	50                   	push   eax
c000bbaf:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000bbb2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bbb6:	50                   	push   eax
c000bbb7:	e8 8a 4a ff ff       	call   c0000646 <memcpy>
c000bbbc:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000bbbf:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000bbc2:	01 fd                	add    ebp,edi
c000bbc4:	01 f9                	add    ecx,edi
c000bbc6:	83 c4 10             	add    esp,0x10
c000bbc9:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000bbcc:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000bbcf:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000bbd2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bbd6:	0f 85 86 00 00 00    	jne    c000bc62 <prepare_data+0x170>
c000bbdc:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000bbdf:	89 e8                	mov    eax,ebp
c000bbe1:	8d 3c 36             	lea    edi,[esi+esi*1]
c000bbe4:	29 c8                	sub    eax,ecx
c000bbe6:	39 f8                	cmp    eax,edi
c000bbe8:	7d 78                	jge    c000bc62 <prepare_data+0x170>
c000bbea:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000bbee:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000bbf2:	74 6e                	je     c000bc62 <prepare_data+0x170>
c000bbf4:	8d 7e 04             	lea    edi,[esi+0x4]
c000bbf7:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000bbfb:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000bbfe:	29 ef                	sub    edi,ebp
c000bc00:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000bc04:	7c 29                	jl     c000bc2f <prepare_data+0x13d>
c000bc06:	8d 3c 30             	lea    edi,[eax+esi*1]
c000bc09:	29 f1                	sub    ecx,esi
c000bc0b:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000bc12:	55                   	push   ebp
c000bc13:	50                   	push   eax
c000bc14:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000bc17:	50                   	push   eax
c000bc18:	52                   	push   edx
c000bc19:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc1d:	e8 66 4a ff ff       	call   c0000688 <memmove>
c000bc22:	83 c4 10             	add    esp,0x10
c000bc25:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000bc28:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000bc2b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bc2f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bc32:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bc35:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000bc38:	83 c6 05             	add    esi,0x5
c000bc3b:	78 07                	js     c000bc44 <prepare_data+0x152>
c000bc3d:	8d 3c 30             	lea    edi,[eax+esi*1]
c000bc40:	39 cf                	cmp    edi,ecx
c000bc42:	7e 04                	jle    c000bc48 <prepare_data+0x156>
c000bc44:	89 ce                	mov    esi,ecx
c000bc46:	29 c6                	sub    esi,eax
c000bc48:	8d 04 82             	lea    eax,[edx+eax*4]
c000bc4b:	51                   	push   ecx
c000bc4c:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000bc53:	51                   	push   ecx
c000bc54:	6a 00                	push   0x0
c000bc56:	50                   	push   eax
c000bc57:	e8 f4 4a ff ff       	call   c0000750 <memset>
c000bc5c:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000bc5f:	83 c4 10             	add    esp,0x10
c000bc62:	31 c0                	xor    eax,eax
c000bc64:	83 c4 1c             	add    esp,0x1c
c000bc67:	5b                   	pop    ebx
c000bc68:	5e                   	pop    esi
c000bc69:	5f                   	pop    edi
c000bc6a:	5d                   	pop    ebp
c000bc6b:	c3                   	ret    

c000bc6c <sinc_multichan_vari_process>:
c000bc6c:	55                   	push   ebp
c000bc6d:	ba 05 00 00 00       	mov    edx,0x5
c000bc72:	57                   	push   edi
c000bc73:	56                   	push   esi
c000bc74:	53                   	push   ebx
c000bc75:	83 ec 4c             	sub    esp,0x4c
c000bc78:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000bc7c:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000bc80:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000bc83:	85 db                	test   ebx,ebx
c000bc85:	0f 84 9b 06 00 00    	je     c000c326 <sinc_multichan_vari_process+0x6ba>
c000bc8b:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000bc8e:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc91:	0f af c5             	imul   eax,ebp
c000bc94:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000bc97:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000bc9a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000bca1:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000bca8:	0f af c5             	imul   eax,ebp
c000bcab:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bcae:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bcb1:	8b 06                	mov    eax,DWORD PTR [esi]
c000bcb3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bcb7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bcbb:	68 00 00 70 3f       	push   0x3f700000
c000bcc0:	6a 00                	push   0x0
c000bcc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcca:	e8 78 c9 01 00       	call   c0028647 <__ltdf2>
c000bccf:	83 c4 10             	add    esp,0x10
c000bcd2:	ba 16 00 00 00       	mov    edx,0x16
c000bcd7:	85 c0                	test   eax,eax
c000bcd9:	0f 88 47 06 00 00    	js     c000c326 <sinc_multichan_vari_process+0x6ba>
c000bcdf:	68 00 00 70 40       	push   0x40700000
c000bce4:	6a 00                	push   0x0
c000bce6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcee:	e8 36 c9 01 00       	call   c0028629 <__gtdf2>
c000bcf3:	83 c4 10             	add    esp,0x10
c000bcf6:	ba 16 00 00 00       	mov    edx,0x16
c000bcfb:	85 c0                	test   eax,eax
c000bcfd:	0f 8f 23 06 00 00    	jg     c000c326 <sinc_multichan_vari_process+0x6ba>
c000bd03:	83 ec 0c             	sub    esp,0xc
c000bd06:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bd09:	e8 cd c6 01 00       	call   c00283db <__floatsidf>
c000bd0e:	83 c4 10             	add    esp,0x10
c000bd11:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bd15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bd19:	68 00 00 00 40       	push   0x40000000
c000bd1e:	6a 00                	push   0x0
c000bd20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd28:	e8 ce b9 01 00       	call   c00276fb <__adddf3>
c000bd2d:	59                   	pop    ecx
c000bd2e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bd32:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bd36:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bd39:	e8 9d c6 01 00       	call   c00283db <__floatsidf>
c000bd3e:	83 c4 10             	add    esp,0x10
c000bd41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bd45:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bd49:	52                   	push   edx
c000bd4a:	50                   	push   eax
c000bd4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd53:	e8 04 c3 01 00       	call   c002805c <__divdf3>
c000bd58:	83 c4 10             	add    esp,0x10
c000bd5b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bd5f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bd63:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bd66:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bd69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bd6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bd71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd81:	e8 a3 c8 01 00       	call   c0028629 <__gtdf2>
c000bd86:	83 c4 10             	add    esp,0x10
c000bd89:	85 c0                	test   eax,eax
c000bd8b:	7e 2d                	jle    c000bdba <sinc_multichan_vari_process+0x14e>
c000bd8d:	68 00 00 f0 3f       	push   0x3ff00000
c000bd92:	6a 00                	push   0x0
c000bd94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd9c:	e8 a6 c8 01 00       	call   c0028647 <__ltdf2>
c000bda1:	83 c4 10             	add    esp,0x10
c000bda4:	85 c0                	test   eax,eax
c000bda6:	79 4d                	jns    c000bdf5 <sinc_multichan_vari_process+0x189>
c000bda8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdac:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bdb0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bdb4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bdb8:	eb 1b                	jmp    c000bdd5 <sinc_multichan_vari_process+0x169>
c000bdba:	68 00 00 f0 3f       	push   0x3ff00000
c000bdbf:	6a 00                	push   0x0
c000bdc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bdc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bdc9:	e8 79 c8 01 00       	call   c0028647 <__ltdf2>
c000bdce:	83 c4 10             	add    esp,0x10
c000bdd1:	85 c0                	test   eax,eax
c000bdd3:	79 20                	jns    c000bdf5 <sinc_multichan_vari_process+0x189>
c000bdd5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdd9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bddd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bde1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bde5:	e8 72 c2 01 00       	call   c002805c <__divdf3>
c000bdea:	83 c4 10             	add    esp,0x10
c000bded:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bdf1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bdf5:	50                   	push   eax
c000bdf6:	50                   	push   eax
c000bdf7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bdfb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bdff:	e8 fc c9 01 00       	call   c0028800 <lrint>
c000be04:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000be07:	40                   	inc    eax
c000be08:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be0c:	0f af c5             	imul   eax,ebp
c000be0f:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000be13:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000be16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be1a:	58                   	pop    eax
c000be1b:	5a                   	pop    edx
c000be1c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000be20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000be24:	e8 d7 c9 01 00       	call   c0028800 <lrint>
c000be29:	83 ec 0c             	sub    esp,0xc
c000be2c:	50                   	push   eax
c000be2d:	e8 a9 c5 01 00       	call   c00283db <__floatsidf>
c000be32:	83 c4 10             	add    esp,0x10
c000be35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000be39:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000be3d:	52                   	push   edx
c000be3e:	50                   	push   eax
c000be3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000be43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000be47:	e8 00 bf 01 00       	call   c0027d4c <__subdf3>
c000be4c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be50:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be54:	83 c4 20             	add    esp,0x20
c000be57:	6a 00                	push   0x0
c000be59:	6a 00                	push   0x0
c000be5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be63:	e8 df c7 01 00       	call   c0028647 <__ltdf2>
c000be68:	83 c4 10             	add    esp,0x10
c000be6b:	85 c0                	test   eax,eax
c000be6d:	79 1f                	jns    c000be8e <sinc_multichan_vari_process+0x222>
c000be6f:	68 00 00 f0 3f       	push   0x3ff00000
c000be74:	6a 00                	push   0x0
c000be76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be7e:	e8 78 b8 01 00       	call   c00276fb <__adddf3>
c000be83:	83 c4 10             	add    esp,0x10
c000be86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be8a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000be8e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000be91:	83 ec 10             	sub    esp,0x10
c000be94:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be98:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000be9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bea3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bea7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000beab:	e8 9c be 01 00       	call   c0027d4c <__subdf3>
c000beb0:	83 c4 18             	add    esp,0x18
c000beb3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000beb7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bebb:	52                   	push   edx
c000bebc:	50                   	push   eax
c000bebd:	e8 3e c9 01 00       	call   c0028800 <lrint>
c000bec2:	0f af e8             	imul   ebp,eax
c000bec5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bec9:	01 e8                	add    eax,ebp
c000becb:	99                   	cdq    
c000becc:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000becf:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bed2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bed6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000beda:	68 00 00 f0 3f       	push   0x3ff00000
c000bedf:	6a 00                	push   0x0
c000bee1:	e8 76 c1 01 00       	call   c002805c <__divdf3>
c000bee6:	83 c4 10             	add    esp,0x10
c000bee9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bef1:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bef6:	68 23 42 92 0c       	push   0xc924223
c000befb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000beff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf03:	e8 f3 b7 01 00       	call   c00276fb <__adddf3>
c000bf08:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bf0c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bf10:	83 c4 20             	add    esp,0x20
c000bf13:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bf1b:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bf23:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bf26:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bf29:	7d 50                	jge    c000bf7b <sinc_multichan_vari_process+0x30f>
c000bf2b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bf2e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bf31:	01 c8                	add    eax,ecx
c000bf33:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bf36:	99                   	cdq    
c000bf37:	f7 f9                	idiv   ecx
c000bf39:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bf3d:	7d 0c                	jge    c000bf4b <sinc_multichan_vari_process+0x2df>
c000bf3f:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bf42:	85 ed                	test   ebp,ebp
c000bf44:	79 6b                	jns    c000bfb1 <sinc_multichan_vari_process+0x345>
c000bf46:	e9 e6 00 00 00       	jmp    c000c031 <sinc_multichan_vari_process+0x3c5>
c000bf4b:	50                   	push   eax
c000bf4c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bf50:	57                   	push   edi
c000bf51:	53                   	push   ebx
c000bf52:	e8 9b fb ff ff       	call   c000baf2 <prepare_data>
c000bf57:	83 c4 10             	add    esp,0x10
c000bf5a:	89 c2                	mov    edx,eax
c000bf5c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bf5f:	85 c0                	test   eax,eax
c000bf61:	0f 85 bf 03 00 00    	jne    c000c326 <sinc_multichan_vari_process+0x6ba>
c000bf67:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bf6a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bf6d:	01 c8                	add    eax,ecx
c000bf6f:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bf72:	99                   	cdq    
c000bf73:	f7 f9                	idiv   ecx
c000bf75:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bf79:	7c c4                	jl     c000bf3f <sinc_multichan_vari_process+0x2d3>
c000bf7b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bf7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bf83:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bf86:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bf89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf8d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bf91:	89 06                	mov    DWORD PTR [esi],eax
c000bf93:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bf96:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bf99:	99                   	cdq    
c000bf9a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bf9d:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bfa0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bfa3:	99                   	cdq    
c000bfa4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bfa7:	31 d2                	xor    edx,edx
c000bfa9:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bfac:	e9 75 03 00 00       	jmp    c000c326 <sinc_multichan_vari_process+0x6ba>
c000bfb1:	83 ec 0c             	sub    esp,0xc
c000bfb4:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bfb7:	e8 1f c4 01 00       	call   c00283db <__floatsidf>
c000bfbc:	83 c4 10             	add    esp,0x10
c000bfbf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bfc3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bfc7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfcf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfd7:	e8 1f b7 01 00       	call   c00276fb <__adddf3>
c000bfdc:	83 c4 10             	add    esp,0x10
c000bfdf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bfe3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bfe7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bff3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bff7:	e8 ff b6 01 00       	call   c00276fb <__adddf3>
c000bffc:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bfff:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c003:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c007:	e8 cf c3 01 00       	call   c00283db <__floatsidf>
c000c00c:	83 c4 10             	add    esp,0x10
c000c00f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c013:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c017:	52                   	push   edx
c000c018:	50                   	push   eax
c000c019:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c01d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c021:	e8 1f c6 01 00       	call   c0028645 <__gedf2>
c000c026:	83 c4 10             	add    esp,0x10
c000c029:	85 c0                	test   eax,eax
c000c02b:	0f 89 4a ff ff ff    	jns    c000bf7b <sinc_multichan_vari_process+0x30f>
c000c031:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c035:	0f 8e ed 00 00 00    	jle    c000c128 <sinc_multichan_vari_process+0x4bc>
c000c03b:	83 ec 10             	sub    esp,0x10
c000c03e:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000c041:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000c044:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000c047:	ff 36                	push   DWORD PTR [esi]
c000c049:	e8 fe bc 01 00       	call   c0027d4c <__subdf3>
c000c04e:	83 c4 18             	add    esp,0x18
c000c051:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c055:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c059:	52                   	push   edx
c000c05a:	50                   	push   eax
c000c05b:	e8 80 c7 01 00       	call   c00287e0 <fabs>
c000c060:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c064:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c068:	83 c4 10             	add    esp,0x10
c000c06b:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c070:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c075:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c079:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c07d:	e8 a7 c5 01 00       	call   c0028629 <__gtdf2>
c000c082:	83 c4 10             	add    esp,0x10
c000c085:	85 c0                	test   eax,eax
c000c087:	0f 8e 9b 00 00 00    	jle    c000c128 <sinc_multichan_vari_process+0x4bc>
c000c08d:	8b 06                	mov    eax,DWORD PTR [esi]
c000c08f:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000c092:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c096:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c09a:	52                   	push   edx
c000c09b:	50                   	push   eax
c000c09c:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000c09f:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000c0a2:	e8 a5 bc 01 00       	call   c0027d4c <__subdf3>
c000c0a7:	59                   	pop    ecx
c000c0a8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c0ac:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c0b0:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c0b3:	e8 23 c3 01 00       	call   c00283db <__floatsidf>
c000c0b8:	83 c4 10             	add    esp,0x10
c000c0bb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0bf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0c3:	52                   	push   edx
c000c0c4:	50                   	push   eax
c000c0c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c0c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c0cd:	e8 a6 bc 01 00       	call   c0027d78 <__muldf3>
c000c0d2:	5d                   	pop    ebp
c000c0d3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c0d7:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c0db:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c0de:	e8 f8 c2 01 00       	call   c00283db <__floatsidf>
c000c0e3:	83 c4 10             	add    esp,0x10
c000c0e6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0ee:	52                   	push   edx
c000c0ef:	50                   	push   eax
c000c0f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c0f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c0f8:	e8 5f bf 01 00       	call   c002805c <__divdf3>
c000c0fd:	83 c4 10             	add    esp,0x10
c000c100:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c104:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c108:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c10c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c110:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c114:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c118:	e8 de b5 01 00       	call   c00276fb <__adddf3>
c000c11d:	83 c4 10             	add    esp,0x10
c000c120:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c124:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c128:	83 ec 0c             	sub    esp,0xc
c000c12b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c12e:	e8 a8 c2 01 00       	call   c00283db <__floatsidf>
c000c133:	83 c4 10             	add    esp,0x10
c000c136:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c13a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c13e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c142:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c146:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c14a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c14e:	e8 f4 c4 01 00       	call   c0028647 <__ltdf2>
c000c153:	83 c4 10             	add    esp,0x10
c000c156:	85 c0                	test   eax,eax
c000c158:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c15c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c160:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c164:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c168:	78 10                	js     c000c17a <sinc_multichan_vari_process+0x50e>
c000c16a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c16e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c172:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c176:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c17a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c17e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c182:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c186:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c18a:	e8 e9 bb 01 00       	call   c0027d78 <__muldf3>
c000c18f:	59                   	pop    ecx
c000c190:	5d                   	pop    ebp
c000c191:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c195:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c199:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c19d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c1a1:	e8 25 f9 ff ff       	call   c000bacb <double_to_fp>
c000c1a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c1aa:	89 c5                	mov    ebp,eax
c000c1ac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c1b0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c1b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c1b8:	e8 bb bb 01 00       	call   c0027d78 <__muldf3>
c000c1bd:	83 c4 18             	add    esp,0x18
c000c1c0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c1c4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c1c8:	52                   	push   edx
c000c1c9:	50                   	push   eax
c000c1ca:	e8 fc f8 ff ff       	call   c000bacb <double_to_fp>
c000c1cf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c1d2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c1d6:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c1d9:	8d 04 90             	lea    eax,[eax+edx*4]
c000c1dc:	50                   	push   eax
c000c1dd:	50                   	push   eax
c000c1de:	50                   	push   eax
c000c1df:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c1e2:	e8 f4 c1 01 00       	call   c00283db <__floatsidf>
c000c1e7:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c1eb:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000c1ef:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c1f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c1f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c1fb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c1ff:	e8 58 be 01 00       	call   c002805c <__divdf3>
c000c204:	83 c4 1c             	add    esp,0x1c
c000c207:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c20b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c20f:	52                   	push   edx
c000c210:	89 ea                	mov    edx,ebp
c000c212:	50                   	push   eax
c000c213:	89 d8                	mov    eax,ebx
c000c215:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c218:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c21c:	e8 69 ed ff ff       	call   c000af8a <calc_output_multi>
c000c221:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c224:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c227:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c22b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c22f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c233:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c237:	e8 20 be 01 00       	call   c002805c <__divdf3>
c000c23c:	83 c4 10             	add    esp,0x10
c000c23f:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c243:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c247:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c24b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c24f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c253:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c257:	e8 9f b4 01 00       	call   c00276fb <__adddf3>
c000c25c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c260:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c264:	83 c4 28             	add    esp,0x28
c000c267:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c26b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c26f:	e8 8c c5 01 00       	call   c0028800 <lrint>
c000c274:	83 ec 0c             	sub    esp,0xc
c000c277:	50                   	push   eax
c000c278:	e8 5e c1 01 00       	call   c00283db <__floatsidf>
c000c27d:	83 c4 10             	add    esp,0x10
c000c280:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c284:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c288:	52                   	push   edx
c000c289:	50                   	push   eax
c000c28a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c28e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c292:	e8 b5 ba 01 00       	call   c0027d4c <__subdf3>
c000c297:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c29b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c29f:	83 c4 20             	add    esp,0x20
c000c2a2:	6a 00                	push   0x0
c000c2a4:	6a 00                	push   0x0
c000c2a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2ae:	e8 94 c3 01 00       	call   c0028647 <__ltdf2>
c000c2b3:	83 c4 10             	add    esp,0x10
c000c2b6:	85 c0                	test   eax,eax
c000c2b8:	79 20                	jns    c000c2da <sinc_multichan_vari_process+0x66e>
c000c2ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2ca:	e8 2c b4 01 00       	call   c00276fb <__adddf3>
c000c2cf:	83 c4 10             	add    esp,0x10
c000c2d2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c2d6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c2da:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c2dd:	83 ec 10             	sub    esp,0x10
c000c2e0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c2e4:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c2e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2ef:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c2f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c2f7:	e8 50 ba 01 00       	call   c0027d4c <__subdf3>
c000c2fc:	83 c4 18             	add    esp,0x18
c000c2ff:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c303:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c307:	52                   	push   edx
c000c308:	50                   	push   eax
c000c309:	e8 f2 c4 01 00       	call   c0028800 <lrint>
c000c30e:	0f af e8             	imul   ebp,eax
c000c311:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c315:	83 c4 10             	add    esp,0x10
c000c318:	01 e8                	add    eax,ebp
c000c31a:	99                   	cdq    
c000c31b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c31e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c321:	e9 fd fb ff ff       	jmp    c000bf23 <sinc_multichan_vari_process+0x2b7>
c000c326:	83 c4 4c             	add    esp,0x4c
c000c329:	89 d0                	mov    eax,edx
c000c32b:	5b                   	pop    ebx
c000c32c:	5e                   	pop    esi
c000c32d:	5f                   	pop    edi
c000c32e:	5d                   	pop    ebp
c000c32f:	c3                   	ret    

c000c330 <sinc_hex_vari_process>:
c000c330:	55                   	push   ebp
c000c331:	ba 05 00 00 00       	mov    edx,0x5
c000c336:	57                   	push   edi
c000c337:	56                   	push   esi
c000c338:	53                   	push   ebx
c000c339:	83 ec 4c             	sub    esp,0x4c
c000c33c:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c340:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c344:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c347:	85 db                	test   ebx,ebx
c000c349:	0f 84 9c 06 00 00    	je     c000c9eb <sinc_hex_vari_process+0x6bb>
c000c34f:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c352:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c355:	0f af c7             	imul   eax,edi
c000c358:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c35b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c35e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c365:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c36c:	0f af c7             	imul   eax,edi
c000c36f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c372:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c375:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c378:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c37c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c380:	68 00 00 70 3f       	push   0x3f700000
c000c385:	6a 00                	push   0x0
c000c387:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c38b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c38f:	e8 b3 c2 01 00       	call   c0028647 <__ltdf2>
c000c394:	83 c4 10             	add    esp,0x10
c000c397:	ba 16 00 00 00       	mov    edx,0x16
c000c39c:	85 c0                	test   eax,eax
c000c39e:	0f 88 47 06 00 00    	js     c000c9eb <sinc_hex_vari_process+0x6bb>
c000c3a4:	68 00 00 70 40       	push   0x40700000
c000c3a9:	6a 00                	push   0x0
c000c3ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3b3:	e8 71 c2 01 00       	call   c0028629 <__gtdf2>
c000c3b8:	83 c4 10             	add    esp,0x10
c000c3bb:	ba 16 00 00 00       	mov    edx,0x16
c000c3c0:	85 c0                	test   eax,eax
c000c3c2:	0f 8f 23 06 00 00    	jg     c000c9eb <sinc_hex_vari_process+0x6bb>
c000c3c8:	83 ec 0c             	sub    esp,0xc
c000c3cb:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c3ce:	e8 08 c0 01 00       	call   c00283db <__floatsidf>
c000c3d3:	83 c4 10             	add    esp,0x10
c000c3d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c3da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c3de:	68 00 00 00 40       	push   0x40000000
c000c3e3:	6a 00                	push   0x0
c000c3e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c3e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c3ed:	e8 09 b3 01 00       	call   c00276fb <__adddf3>
c000c3f2:	59                   	pop    ecx
c000c3f3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c3f7:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c3fb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c3fe:	e8 d8 bf 01 00       	call   c00283db <__floatsidf>
c000c403:	83 c4 10             	add    esp,0x10
c000c406:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c40a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c40e:	52                   	push   edx
c000c40f:	50                   	push   eax
c000c410:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c414:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c418:	e8 3f bc 01 00       	call   c002805c <__divdf3>
c000c41d:	83 c4 10             	add    esp,0x10
c000c420:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c424:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c428:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c42b:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c42e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c432:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c436:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c43a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c43e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c442:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c446:	e8 de c1 01 00       	call   c0028629 <__gtdf2>
c000c44b:	83 c4 10             	add    esp,0x10
c000c44e:	85 c0                	test   eax,eax
c000c450:	7e 2d                	jle    c000c47f <sinc_hex_vari_process+0x14f>
c000c452:	68 00 00 f0 3f       	push   0x3ff00000
c000c457:	6a 00                	push   0x0
c000c459:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c45d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c461:	e8 e1 c1 01 00       	call   c0028647 <__ltdf2>
c000c466:	83 c4 10             	add    esp,0x10
c000c469:	85 c0                	test   eax,eax
c000c46b:	79 4d                	jns    c000c4ba <sinc_hex_vari_process+0x18a>
c000c46d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c471:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c475:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c479:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c47d:	eb 1b                	jmp    c000c49a <sinc_hex_vari_process+0x16a>
c000c47f:	68 00 00 f0 3f       	push   0x3ff00000
c000c484:	6a 00                	push   0x0
c000c486:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c48a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c48e:	e8 b4 c1 01 00       	call   c0028647 <__ltdf2>
c000c493:	83 c4 10             	add    esp,0x10
c000c496:	85 c0                	test   eax,eax
c000c498:	79 20                	jns    c000c4ba <sinc_hex_vari_process+0x18a>
c000c49a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c49e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c4a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4aa:	e8 ad bb 01 00       	call   c002805c <__divdf3>
c000c4af:	83 c4 10             	add    esp,0x10
c000c4b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c4b6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c4ba:	50                   	push   eax
c000c4bb:	50                   	push   eax
c000c4bc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4c4:	e8 37 c3 01 00       	call   c0028800 <lrint>
c000c4c9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c4cc:	40                   	inc    eax
c000c4cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4d1:	0f af c7             	imul   eax,edi
c000c4d4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c4d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4df:	58                   	pop    eax
c000c4e0:	5a                   	pop    edx
c000c4e1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4e9:	e8 12 c3 01 00       	call   c0028800 <lrint>
c000c4ee:	83 ec 0c             	sub    esp,0xc
c000c4f1:	50                   	push   eax
c000c4f2:	e8 e4 be 01 00       	call   c00283db <__floatsidf>
c000c4f7:	83 c4 10             	add    esp,0x10
c000c4fa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c4fe:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c502:	52                   	push   edx
c000c503:	50                   	push   eax
c000c504:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c508:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c50c:	e8 3b b8 01 00       	call   c0027d4c <__subdf3>
c000c511:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c515:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c519:	83 c4 20             	add    esp,0x20
c000c51c:	6a 00                	push   0x0
c000c51e:	6a 00                	push   0x0
c000c520:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c524:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c528:	e8 1a c1 01 00       	call   c0028647 <__ltdf2>
c000c52d:	83 c4 10             	add    esp,0x10
c000c530:	85 c0                	test   eax,eax
c000c532:	79 1f                	jns    c000c553 <sinc_hex_vari_process+0x223>
c000c534:	68 00 00 f0 3f       	push   0x3ff00000
c000c539:	6a 00                	push   0x0
c000c53b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c53f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c543:	e8 b3 b1 01 00       	call   c00276fb <__adddf3>
c000c548:	83 c4 10             	add    esp,0x10
c000c54b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c54f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c553:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c556:	83 ec 10             	sub    esp,0x10
c000c559:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c55d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c560:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c564:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c568:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c56c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c570:	e8 d7 b7 01 00       	call   c0027d4c <__subdf3>
c000c575:	83 c4 18             	add    esp,0x18
c000c578:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c57c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	e8 79 c2 01 00       	call   c0028800 <lrint>
c000c587:	0f af f8             	imul   edi,eax
c000c58a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c58e:	01 f8                	add    eax,edi
c000c590:	99                   	cdq    
c000c591:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c594:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c597:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c59b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c59f:	68 00 00 f0 3f       	push   0x3ff00000
c000c5a4:	6a 00                	push   0x0
c000c5a6:	e8 b1 ba 01 00       	call   c002805c <__divdf3>
c000c5ab:	83 c4 10             	add    esp,0x10
c000c5ae:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5b2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5b6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c5bb:	68 23 42 92 0c       	push   0xc924223
c000c5c0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c5c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c5c8:	e8 2e b1 01 00       	call   c00276fb <__adddf3>
c000c5cd:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c5d1:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c5d5:	83 c4 20             	add    esp,0x20
c000c5d8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c5e0:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c5e8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c5eb:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c5ee:	7d 50                	jge    c000c640 <sinc_hex_vari_process+0x310>
c000c5f0:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c5f3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c5f6:	01 c8                	add    eax,ecx
c000c5f8:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c5fb:	99                   	cdq    
c000c5fc:	f7 f9                	idiv   ecx
c000c5fe:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c602:	7d 0c                	jge    c000c610 <sinc_hex_vari_process+0x2e0>
c000c604:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c607:	85 ff                	test   edi,edi
c000c609:	79 6c                	jns    c000c677 <sinc_hex_vari_process+0x347>
c000c60b:	e9 e7 00 00 00       	jmp    c000c6f7 <sinc_hex_vari_process+0x3c7>
c000c610:	50                   	push   eax
c000c611:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c615:	56                   	push   esi
c000c616:	53                   	push   ebx
c000c617:	e8 d6 f4 ff ff       	call   c000baf2 <prepare_data>
c000c61c:	83 c4 10             	add    esp,0x10
c000c61f:	89 c2                	mov    edx,eax
c000c621:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c624:	85 c0                	test   eax,eax
c000c626:	0f 85 bf 03 00 00    	jne    c000c9eb <sinc_hex_vari_process+0x6bb>
c000c62c:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c62f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c632:	01 c8                	add    eax,ecx
c000c634:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c637:	99                   	cdq    
c000c638:	f7 f9                	idiv   ecx
c000c63a:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c63e:	7c c4                	jl     c000c604 <sinc_hex_vari_process+0x2d4>
c000c640:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c644:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c648:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c64b:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c64e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c652:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c656:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c659:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c65c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c65f:	99                   	cdq    
c000c660:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c663:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c666:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c669:	99                   	cdq    
c000c66a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c66d:	31 d2                	xor    edx,edx
c000c66f:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c672:	e9 74 03 00 00       	jmp    c000c9eb <sinc_hex_vari_process+0x6bb>
c000c677:	83 ec 0c             	sub    esp,0xc
c000c67a:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c67d:	e8 59 bd 01 00       	call   c00283db <__floatsidf>
c000c682:	83 c4 10             	add    esp,0x10
c000c685:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c689:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c68d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c691:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c695:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c699:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c69d:	e8 59 b0 01 00       	call   c00276fb <__adddf3>
c000c6a2:	83 c4 10             	add    esp,0x10
c000c6a5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c6a9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c6ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6bd:	e8 39 b0 01 00       	call   c00276fb <__adddf3>
c000c6c2:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c6c5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6c9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c6cd:	e8 09 bd 01 00       	call   c00283db <__floatsidf>
c000c6d2:	83 c4 10             	add    esp,0x10
c000c6d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6dd:	52                   	push   edx
c000c6de:	50                   	push   eax
c000c6df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6e7:	e8 59 bf 01 00       	call   c0028645 <__gedf2>
c000c6ec:	83 c4 10             	add    esp,0x10
c000c6ef:	85 c0                	test   eax,eax
c000c6f1:	0f 89 49 ff ff ff    	jns    c000c640 <sinc_hex_vari_process+0x310>
c000c6f7:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c6fb:	0f 8e ef 00 00 00    	jle    c000c7f0 <sinc_hex_vari_process+0x4c0>
c000c701:	83 ec 10             	sub    esp,0x10
c000c704:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c707:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c70a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c70d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c710:	e8 37 b6 01 00       	call   c0027d4c <__subdf3>
c000c715:	83 c4 18             	add    esp,0x18
c000c718:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c71c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c720:	52                   	push   edx
c000c721:	50                   	push   eax
c000c722:	e8 b9 c0 01 00       	call   c00287e0 <fabs>
c000c727:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c72b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c72f:	83 c4 10             	add    esp,0x10
c000c732:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c737:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c73c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c740:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c744:	e8 e0 be 01 00       	call   c0028629 <__gtdf2>
c000c749:	83 c4 10             	add    esp,0x10
c000c74c:	85 c0                	test   eax,eax
c000c74e:	0f 8e 9c 00 00 00    	jle    c000c7f0 <sinc_hex_vari_process+0x4c0>
c000c754:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c757:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c75a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c75e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c762:	52                   	push   edx
c000c763:	50                   	push   eax
c000c764:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c767:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c76a:	e8 dd b5 01 00       	call   c0027d4c <__subdf3>
c000c76f:	59                   	pop    ecx
c000c770:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c774:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c778:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c77b:	e8 5b bc 01 00       	call   c00283db <__floatsidf>
c000c780:	83 c4 10             	add    esp,0x10
c000c783:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c787:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c78b:	52                   	push   edx
c000c78c:	50                   	push   eax
c000c78d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c791:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c795:	e8 de b5 01 00       	call   c0027d78 <__muldf3>
c000c79a:	5f                   	pop    edi
c000c79b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c79f:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c7a3:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c7a6:	e8 30 bc 01 00       	call   c00283db <__floatsidf>
c000c7ab:	83 c4 10             	add    esp,0x10
c000c7ae:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7b2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7b6:	52                   	push   edx
c000c7b7:	50                   	push   eax
c000c7b8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c7bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c7c0:	e8 97 b8 01 00       	call   c002805c <__divdf3>
c000c7c5:	83 c4 10             	add    esp,0x10
c000c7c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c7cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c7d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7d8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c7dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c7e0:	e8 16 af 01 00       	call   c00276fb <__adddf3>
c000c7e5:	83 c4 10             	add    esp,0x10
c000c7e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c7ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c7f0:	83 ec 0c             	sub    esp,0xc
c000c7f3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c7f6:	e8 e0 bb 01 00       	call   c00283db <__floatsidf>
c000c7fb:	83 c4 10             	add    esp,0x10
c000c7fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c802:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c806:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c80a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c80e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c816:	e8 2c be 01 00       	call   c0028647 <__ltdf2>
c000c81b:	83 c4 10             	add    esp,0x10
c000c81e:	85 c0                	test   eax,eax
c000c820:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c824:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c828:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c82c:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c830:	78 10                	js     c000c842 <sinc_hex_vari_process+0x512>
c000c832:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c836:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c83a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c83e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c842:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c846:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c84a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c84e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c852:	e8 21 b5 01 00       	call   c0027d78 <__muldf3>
c000c857:	59                   	pop    ecx
c000c858:	5f                   	pop    edi
c000c859:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c85d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c861:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c865:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c869:	e8 5d f2 ff ff       	call   c000bacb <double_to_fp>
c000c86e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c872:	89 c7                	mov    edi,eax
c000c874:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c878:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c87c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c880:	e8 f3 b4 01 00       	call   c0027d78 <__muldf3>
c000c885:	83 c4 18             	add    esp,0x18
c000c888:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c88c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c890:	52                   	push   edx
c000c891:	50                   	push   eax
c000c892:	e8 34 f2 ff ff       	call   c000bacb <double_to_fp>
c000c897:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c89a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c89e:	83 c4 0c             	add    esp,0xc
c000c8a1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c8a4:	8d 04 90             	lea    eax,[eax+edx*4]
c000c8a7:	50                   	push   eax
c000c8a8:	50                   	push   eax
c000c8a9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8ac:	e8 2a bb 01 00       	call   c00283db <__floatsidf>
c000c8b1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c8b5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c8b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c8bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c8c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c8c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c8c9:	e8 8e b7 01 00       	call   c002805c <__divdf3>
c000c8ce:	83 c4 18             	add    esp,0x18
c000c8d1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c8d5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c8d9:	52                   	push   edx
c000c8da:	89 fa                	mov    edx,edi
c000c8dc:	50                   	push   eax
c000c8dd:	89 d8                	mov    eax,ebx
c000c8df:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c8e3:	e8 50 de ff ff       	call   c000a738 <calc_output_hex>
c000c8e8:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c8ec:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c8f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c8f4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c8f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c8fc:	e8 5b b7 01 00       	call   c002805c <__divdf3>
c000c901:	83 c4 10             	add    esp,0x10
c000c904:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c908:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c90c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c910:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c914:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c918:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c91c:	e8 da ad 01 00       	call   c00276fb <__adddf3>
c000c921:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c925:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c929:	83 c4 18             	add    esp,0x18
c000c92c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c930:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c934:	e8 c7 be 01 00       	call   c0028800 <lrint>
c000c939:	83 ec 0c             	sub    esp,0xc
c000c93c:	50                   	push   eax
c000c93d:	e8 99 ba 01 00       	call   c00283db <__floatsidf>
c000c942:	83 c4 10             	add    esp,0x10
c000c945:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c949:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c94d:	52                   	push   edx
c000c94e:	50                   	push   eax
c000c94f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c953:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c957:	e8 f0 b3 01 00       	call   c0027d4c <__subdf3>
c000c95c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c960:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c964:	83 c4 20             	add    esp,0x20
c000c967:	6a 00                	push   0x0
c000c969:	6a 00                	push   0x0
c000c96b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c96f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c973:	e8 cf bc 01 00       	call   c0028647 <__ltdf2>
c000c978:	83 c4 10             	add    esp,0x10
c000c97b:	85 c0                	test   eax,eax
c000c97d:	79 20                	jns    c000c99f <sinc_hex_vari_process+0x66f>
c000c97f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c983:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c987:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c98b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c98f:	e8 67 ad 01 00       	call   c00276fb <__adddf3>
c000c994:	83 c4 10             	add    esp,0x10
c000c997:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c99b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c99f:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c9a2:	83 ec 10             	sub    esp,0x10
c000c9a5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c9a9:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c9ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9b4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c9b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c9bc:	e8 8b b3 01 00       	call   c0027d4c <__subdf3>
c000c9c1:	83 c4 18             	add    esp,0x18
c000c9c4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9cc:	52                   	push   edx
c000c9cd:	50                   	push   eax
c000c9ce:	e8 2d be 01 00       	call   c0028800 <lrint>
c000c9d3:	0f af f8             	imul   edi,eax
c000c9d6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c9da:	83 c4 10             	add    esp,0x10
c000c9dd:	01 f8                	add    eax,edi
c000c9df:	99                   	cdq    
c000c9e0:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c9e3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c9e6:	e9 fd fb ff ff       	jmp    c000c5e8 <sinc_hex_vari_process+0x2b8>
c000c9eb:	83 c4 4c             	add    esp,0x4c
c000c9ee:	89 d0                	mov    eax,edx
c000c9f0:	5b                   	pop    ebx
c000c9f1:	5e                   	pop    esi
c000c9f2:	5f                   	pop    edi
c000c9f3:	5d                   	pop    ebp
c000c9f4:	c3                   	ret    

c000c9f5 <sinc_quad_vari_process>:
c000c9f5:	55                   	push   ebp
c000c9f6:	ba 05 00 00 00       	mov    edx,0x5
c000c9fb:	57                   	push   edi
c000c9fc:	56                   	push   esi
c000c9fd:	53                   	push   ebx
c000c9fe:	83 ec 4c             	sub    esp,0x4c
c000ca01:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ca05:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ca09:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ca0c:	85 db                	test   ebx,ebx
c000ca0e:	0f 84 9c 06 00 00    	je     c000d0b0 <sinc_quad_vari_process+0x6bb>
c000ca14:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000ca17:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca1a:	0f af c7             	imul   eax,edi
c000ca1d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ca20:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ca23:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ca2a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ca31:	0f af c7             	imul   eax,edi
c000ca34:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ca37:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ca3a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ca3d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ca41:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca45:	68 00 00 70 3f       	push   0x3f700000
c000ca4a:	6a 00                	push   0x0
c000ca4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca54:	e8 ee bb 01 00       	call   c0028647 <__ltdf2>
c000ca59:	83 c4 10             	add    esp,0x10
c000ca5c:	ba 16 00 00 00       	mov    edx,0x16
c000ca61:	85 c0                	test   eax,eax
c000ca63:	0f 88 47 06 00 00    	js     c000d0b0 <sinc_quad_vari_process+0x6bb>
c000ca69:	68 00 00 70 40       	push   0x40700000
c000ca6e:	6a 00                	push   0x0
c000ca70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca78:	e8 ac bb 01 00       	call   c0028629 <__gtdf2>
c000ca7d:	83 c4 10             	add    esp,0x10
c000ca80:	ba 16 00 00 00       	mov    edx,0x16
c000ca85:	85 c0                	test   eax,eax
c000ca87:	0f 8f 23 06 00 00    	jg     c000d0b0 <sinc_quad_vari_process+0x6bb>
c000ca8d:	83 ec 0c             	sub    esp,0xc
c000ca90:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ca93:	e8 43 b9 01 00       	call   c00283db <__floatsidf>
c000ca98:	83 c4 10             	add    esp,0x10
c000ca9b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca9f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000caa3:	68 00 00 00 40       	push   0x40000000
c000caa8:	6a 00                	push   0x0
c000caaa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000caae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cab2:	e8 44 ac 01 00       	call   c00276fb <__adddf3>
c000cab7:	59                   	pop    ecx
c000cab8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cabc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cac0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cac3:	e8 13 b9 01 00       	call   c00283db <__floatsidf>
c000cac8:	83 c4 10             	add    esp,0x10
c000cacb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cacf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cad3:	52                   	push   edx
c000cad4:	50                   	push   eax
c000cad5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cad9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cadd:	e8 7a b5 01 00       	call   c002805c <__divdf3>
c000cae2:	83 c4 10             	add    esp,0x10
c000cae5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cae9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000caed:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000caf0:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000caf3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000caf7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cafb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000caff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb0b:	e8 19 bb 01 00       	call   c0028629 <__gtdf2>
c000cb10:	83 c4 10             	add    esp,0x10
c000cb13:	85 c0                	test   eax,eax
c000cb15:	7e 2d                	jle    c000cb44 <sinc_quad_vari_process+0x14f>
c000cb17:	68 00 00 f0 3f       	push   0x3ff00000
c000cb1c:	6a 00                	push   0x0
c000cb1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb26:	e8 1c bb 01 00       	call   c0028647 <__ltdf2>
c000cb2b:	83 c4 10             	add    esp,0x10
c000cb2e:	85 c0                	test   eax,eax
c000cb30:	79 4d                	jns    c000cb7f <sinc_quad_vari_process+0x18a>
c000cb32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb36:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb3a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cb3e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cb42:	eb 1b                	jmp    c000cb5f <sinc_quad_vari_process+0x16a>
c000cb44:	68 00 00 f0 3f       	push   0x3ff00000
c000cb49:	6a 00                	push   0x0
c000cb4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb53:	e8 ef ba 01 00       	call   c0028647 <__ltdf2>
c000cb58:	83 c4 10             	add    esp,0x10
c000cb5b:	85 c0                	test   eax,eax
c000cb5d:	79 20                	jns    c000cb7f <sinc_quad_vari_process+0x18a>
c000cb5f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb63:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb67:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb6f:	e8 e8 b4 01 00       	call   c002805c <__divdf3>
c000cb74:	83 c4 10             	add    esp,0x10
c000cb77:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cb7b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cb7f:	50                   	push   eax
c000cb80:	50                   	push   eax
c000cb81:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb85:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb89:	e8 72 bc 01 00       	call   c0028800 <lrint>
c000cb8e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000cb91:	40                   	inc    eax
c000cb92:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb96:	0f af c7             	imul   eax,edi
c000cb99:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000cb9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cba0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cba4:	58                   	pop    eax
c000cba5:	5a                   	pop    edx
c000cba6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cbaa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cbae:	e8 4d bc 01 00       	call   c0028800 <lrint>
c000cbb3:	83 ec 0c             	sub    esp,0xc
c000cbb6:	50                   	push   eax
c000cbb7:	e8 1f b8 01 00       	call   c00283db <__floatsidf>
c000cbbc:	83 c4 10             	add    esp,0x10
c000cbbf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cbc3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cbc7:	52                   	push   edx
c000cbc8:	50                   	push   eax
c000cbc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cbcd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cbd1:	e8 76 b1 01 00       	call   c0027d4c <__subdf3>
c000cbd6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbda:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbde:	83 c4 20             	add    esp,0x20
c000cbe1:	6a 00                	push   0x0
c000cbe3:	6a 00                	push   0x0
c000cbe5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbe9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbed:	e8 55 ba 01 00       	call   c0028647 <__ltdf2>
c000cbf2:	83 c4 10             	add    esp,0x10
c000cbf5:	85 c0                	test   eax,eax
c000cbf7:	79 1f                	jns    c000cc18 <sinc_quad_vari_process+0x223>
c000cbf9:	68 00 00 f0 3f       	push   0x3ff00000
c000cbfe:	6a 00                	push   0x0
c000cc00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc08:	e8 ee aa 01 00       	call   c00276fb <__adddf3>
c000cc0d:	83 c4 10             	add    esp,0x10
c000cc10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cc18:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000cc1b:	83 ec 10             	sub    esp,0x10
c000cc1e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cc22:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc2d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc31:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc35:	e8 12 b1 01 00       	call   c0027d4c <__subdf3>
c000cc3a:	83 c4 18             	add    esp,0x18
c000cc3d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc41:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc45:	52                   	push   edx
c000cc46:	50                   	push   eax
c000cc47:	e8 b4 bb 01 00       	call   c0028800 <lrint>
c000cc4c:	0f af f8             	imul   edi,eax
c000cc4f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cc53:	01 f8                	add    eax,edi
c000cc55:	99                   	cdq    
c000cc56:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cc59:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cc5c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc64:	68 00 00 f0 3f       	push   0x3ff00000
c000cc69:	6a 00                	push   0x0
c000cc6b:	e8 ec b3 01 00       	call   c002805c <__divdf3>
c000cc70:	83 c4 10             	add    esp,0x10
c000cc73:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc77:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc7b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000cc80:	68 23 42 92 0c       	push   0xc924223
c000cc85:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc8d:	e8 69 aa 01 00       	call   c00276fb <__adddf3>
c000cc92:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000cc96:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000cc9a:	83 c4 20             	add    esp,0x20
c000cc9d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000cca5:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000ccad:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ccb0:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000ccb3:	7d 50                	jge    c000cd05 <sinc_quad_vari_process+0x310>
c000ccb5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ccb8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ccbb:	01 c8                	add    eax,ecx
c000ccbd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ccc0:	99                   	cdq    
c000ccc1:	f7 f9                	idiv   ecx
c000ccc3:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000ccc7:	7d 0c                	jge    c000ccd5 <sinc_quad_vari_process+0x2e0>
c000ccc9:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cccc:	85 ff                	test   edi,edi
c000ccce:	79 6c                	jns    c000cd3c <sinc_quad_vari_process+0x347>
c000ccd0:	e9 e7 00 00 00       	jmp    c000cdbc <sinc_quad_vari_process+0x3c7>
c000ccd5:	50                   	push   eax
c000ccd6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ccda:	56                   	push   esi
c000ccdb:	53                   	push   ebx
c000ccdc:	e8 11 ee ff ff       	call   c000baf2 <prepare_data>
c000cce1:	83 c4 10             	add    esp,0x10
c000cce4:	89 c2                	mov    edx,eax
c000cce6:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cce9:	85 c0                	test   eax,eax
c000cceb:	0f 85 bf 03 00 00    	jne    c000d0b0 <sinc_quad_vari_process+0x6bb>
c000ccf1:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ccf4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ccf7:	01 c8                	add    eax,ecx
c000ccf9:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ccfc:	99                   	cdq    
c000ccfd:	f7 f9                	idiv   ecx
c000ccff:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cd03:	7c c4                	jl     c000ccc9 <sinc_quad_vari_process+0x2d4>
c000cd05:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cd09:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cd0d:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cd10:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cd13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd17:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cd1b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cd1e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cd21:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cd24:	99                   	cdq    
c000cd25:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cd28:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cd2b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cd2e:	99                   	cdq    
c000cd2f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cd32:	31 d2                	xor    edx,edx
c000cd34:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cd37:	e9 74 03 00 00       	jmp    c000d0b0 <sinc_quad_vari_process+0x6bb>
c000cd3c:	83 ec 0c             	sub    esp,0xc
c000cd3f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cd42:	e8 94 b6 01 00       	call   c00283db <__floatsidf>
c000cd47:	83 c4 10             	add    esp,0x10
c000cd4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd4e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd52:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cd56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cd5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd62:	e8 94 a9 01 00       	call   c00276fb <__adddf3>
c000cd67:	83 c4 10             	add    esp,0x10
c000cd6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd6e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd72:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd7a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd82:	e8 74 a9 01 00       	call   c00276fb <__adddf3>
c000cd87:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cd8a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd8e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd92:	e8 44 b6 01 00       	call   c00283db <__floatsidf>
c000cd97:	83 c4 10             	add    esp,0x10
c000cd9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cda2:	52                   	push   edx
c000cda3:	50                   	push   eax
c000cda4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cda8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdac:	e8 94 b8 01 00       	call   c0028645 <__gedf2>
c000cdb1:	83 c4 10             	add    esp,0x10
c000cdb4:	85 c0                	test   eax,eax
c000cdb6:	0f 89 49 ff ff ff    	jns    c000cd05 <sinc_quad_vari_process+0x310>
c000cdbc:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cdc0:	0f 8e ef 00 00 00    	jle    c000ceb5 <sinc_quad_vari_process+0x4c0>
c000cdc6:	83 ec 10             	sub    esp,0x10
c000cdc9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cdcc:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cdcf:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cdd2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cdd5:	e8 72 af 01 00       	call   c0027d4c <__subdf3>
c000cdda:	83 c4 18             	add    esp,0x18
c000cddd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cde1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cde5:	52                   	push   edx
c000cde6:	50                   	push   eax
c000cde7:	e8 f4 b9 01 00       	call   c00287e0 <fabs>
c000cdec:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdf0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdf4:	83 c4 10             	add    esp,0x10
c000cdf7:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cdfc:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000ce01:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce09:	e8 1b b8 01 00       	call   c0028629 <__gtdf2>
c000ce0e:	83 c4 10             	add    esp,0x10
c000ce11:	85 c0                	test   eax,eax
c000ce13:	0f 8e 9c 00 00 00    	jle    c000ceb5 <sinc_quad_vari_process+0x4c0>
c000ce19:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ce1c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ce1f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ce23:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ce27:	52                   	push   edx
c000ce28:	50                   	push   eax
c000ce29:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000ce2c:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000ce2f:	e8 18 af 01 00       	call   c0027d4c <__subdf3>
c000ce34:	59                   	pop    ecx
c000ce35:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ce39:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ce3d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ce40:	e8 96 b5 01 00       	call   c00283db <__floatsidf>
c000ce45:	83 c4 10             	add    esp,0x10
c000ce48:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce4c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce50:	52                   	push   edx
c000ce51:	50                   	push   eax
c000ce52:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce5a:	e8 19 af 01 00       	call   c0027d78 <__muldf3>
c000ce5f:	5f                   	pop    edi
c000ce60:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ce64:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ce68:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000ce6b:	e8 6b b5 01 00       	call   c00283db <__floatsidf>
c000ce70:	83 c4 10             	add    esp,0x10
c000ce73:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce77:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce7b:	52                   	push   edx
c000ce7c:	50                   	push   eax
c000ce7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce85:	e8 d2 b1 01 00       	call   c002805c <__divdf3>
c000ce8a:	83 c4 10             	add    esp,0x10
c000ce8d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ce91:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ce95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cea1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cea5:	e8 51 a8 01 00       	call   c00276fb <__adddf3>
c000ceaa:	83 c4 10             	add    esp,0x10
c000cead:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ceb1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ceb5:	83 ec 0c             	sub    esp,0xc
c000ceb8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cebb:	e8 1b b5 01 00       	call   c00283db <__floatsidf>
c000cec0:	83 c4 10             	add    esp,0x10
c000cec3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cec7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cecb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cecf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ced3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ced7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cedb:	e8 67 b7 01 00       	call   c0028647 <__ltdf2>
c000cee0:	83 c4 10             	add    esp,0x10
c000cee3:	85 c0                	test   eax,eax
c000cee5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cee9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ceed:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000cef1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000cef5:	78 10                	js     c000cf07 <sinc_quad_vari_process+0x512>
c000cef7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cefb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ceff:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cf03:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cf07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf0f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf17:	e8 5c ae 01 00       	call   c0027d78 <__muldf3>
c000cf1c:	59                   	pop    ecx
c000cf1d:	5f                   	pop    edi
c000cf1e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cf22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cf26:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cf2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cf2e:	e8 98 eb ff ff       	call   c000bacb <double_to_fp>
c000cf33:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf37:	89 c7                	mov    edi,eax
c000cf39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf3d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf45:	e8 2e ae 01 00       	call   c0027d78 <__muldf3>
c000cf4a:	83 c4 18             	add    esp,0x18
c000cf4d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cf51:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cf55:	52                   	push   edx
c000cf56:	50                   	push   eax
c000cf57:	e8 6f eb ff ff       	call   c000bacb <double_to_fp>
c000cf5c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cf5f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cf63:	83 c4 0c             	add    esp,0xc
c000cf66:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cf69:	8d 04 90             	lea    eax,[eax+edx*4]
c000cf6c:	50                   	push   eax
c000cf6d:	50                   	push   eax
c000cf6e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf71:	e8 65 b4 01 00       	call   c00283db <__floatsidf>
c000cf76:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cf7a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cf7e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf8e:	e8 c9 b0 01 00       	call   c002805c <__divdf3>
c000cf93:	83 c4 18             	add    esp,0x18
c000cf96:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cf9a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cf9e:	52                   	push   edx
c000cf9f:	89 fa                	mov    edx,edi
c000cfa1:	50                   	push   eax
c000cfa2:	89 d8                	mov    eax,ebx
c000cfa4:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cfa8:	e8 a5 d1 ff ff       	call   c000a152 <calc_output_quad>
c000cfad:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cfb1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cfb5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cfb9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfc1:	e8 96 b0 01 00       	call   c002805c <__divdf3>
c000cfc6:	83 c4 10             	add    esp,0x10
c000cfc9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cfcd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cfd1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfd9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cfdd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cfe1:	e8 15 a7 01 00       	call   c00276fb <__adddf3>
c000cfe6:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cfea:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cfee:	83 c4 18             	add    esp,0x18
c000cff1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cff5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cff9:	e8 02 b8 01 00       	call   c0028800 <lrint>
c000cffe:	83 ec 0c             	sub    esp,0xc
c000d001:	50                   	push   eax
c000d002:	e8 d4 b3 01 00       	call   c00283db <__floatsidf>
c000d007:	83 c4 10             	add    esp,0x10
c000d00a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d00e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d012:	52                   	push   edx
c000d013:	50                   	push   eax
c000d014:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d018:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d01c:	e8 2b ad 01 00       	call   c0027d4c <__subdf3>
c000d021:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d025:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d029:	83 c4 20             	add    esp,0x20
c000d02c:	6a 00                	push   0x0
c000d02e:	6a 00                	push   0x0
c000d030:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d034:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d038:	e8 0a b6 01 00       	call   c0028647 <__ltdf2>
c000d03d:	83 c4 10             	add    esp,0x10
c000d040:	85 c0                	test   eax,eax
c000d042:	79 20                	jns    c000d064 <sinc_quad_vari_process+0x66f>
c000d044:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d048:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d04c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d050:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d054:	e8 a2 a6 01 00       	call   c00276fb <__adddf3>
c000d059:	83 c4 10             	add    esp,0x10
c000d05c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d060:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d064:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d067:	83 ec 10             	sub    esp,0x10
c000d06a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d06e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d071:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d075:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d079:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d07d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d081:	e8 c6 ac 01 00       	call   c0027d4c <__subdf3>
c000d086:	83 c4 18             	add    esp,0x18
c000d089:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d08d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d091:	52                   	push   edx
c000d092:	50                   	push   eax
c000d093:	e8 68 b7 01 00       	call   c0028800 <lrint>
c000d098:	0f af f8             	imul   edi,eax
c000d09b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d09f:	83 c4 10             	add    esp,0x10
c000d0a2:	01 f8                	add    eax,edi
c000d0a4:	99                   	cdq    
c000d0a5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d0a8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d0ab:	e9 fd fb ff ff       	jmp    c000ccad <sinc_quad_vari_process+0x2b8>
c000d0b0:	83 c4 4c             	add    esp,0x4c
c000d0b3:	89 d0                	mov    eax,edx
c000d0b5:	5b                   	pop    ebx
c000d0b6:	5e                   	pop    esi
c000d0b7:	5f                   	pop    edi
c000d0b8:	5d                   	pop    ebp
c000d0b9:	c3                   	ret    

c000d0ba <sinc_stereo_vari_process>:
c000d0ba:	55                   	push   ebp
c000d0bb:	ba 05 00 00 00       	mov    edx,0x5
c000d0c0:	57                   	push   edi
c000d0c1:	56                   	push   esi
c000d0c2:	53                   	push   ebx
c000d0c3:	83 ec 4c             	sub    esp,0x4c
c000d0c6:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000d0ca:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d0ce:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000d0d1:	85 db                	test   ebx,ebx
c000d0d3:	0f 84 9c 06 00 00    	je     c000d775 <sinc_stereo_vari_process+0x6bb>
c000d0d9:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d0dc:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0df:	0f af c7             	imul   eax,edi
c000d0e2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d0e5:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d0e8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d0ef:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d0f6:	0f af c7             	imul   eax,edi
c000d0f9:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d0fc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d0ff:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d102:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d106:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d10a:	68 00 00 70 3f       	push   0x3f700000
c000d10f:	6a 00                	push   0x0
c000d111:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d115:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d119:	e8 29 b5 01 00       	call   c0028647 <__ltdf2>
c000d11e:	83 c4 10             	add    esp,0x10
c000d121:	ba 16 00 00 00       	mov    edx,0x16
c000d126:	85 c0                	test   eax,eax
c000d128:	0f 88 47 06 00 00    	js     c000d775 <sinc_stereo_vari_process+0x6bb>
c000d12e:	68 00 00 70 40       	push   0x40700000
c000d133:	6a 00                	push   0x0
c000d135:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d139:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d13d:	e8 e7 b4 01 00       	call   c0028629 <__gtdf2>
c000d142:	83 c4 10             	add    esp,0x10
c000d145:	ba 16 00 00 00       	mov    edx,0x16
c000d14a:	85 c0                	test   eax,eax
c000d14c:	0f 8f 23 06 00 00    	jg     c000d775 <sinc_stereo_vari_process+0x6bb>
c000d152:	83 ec 0c             	sub    esp,0xc
c000d155:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d158:	e8 7e b2 01 00       	call   c00283db <__floatsidf>
c000d15d:	83 c4 10             	add    esp,0x10
c000d160:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d164:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d168:	68 00 00 00 40       	push   0x40000000
c000d16d:	6a 00                	push   0x0
c000d16f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d173:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d177:	e8 7f a5 01 00       	call   c00276fb <__adddf3>
c000d17c:	59                   	pop    ecx
c000d17d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d181:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d185:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d188:	e8 4e b2 01 00       	call   c00283db <__floatsidf>
c000d18d:	83 c4 10             	add    esp,0x10
c000d190:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d194:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d198:	52                   	push   edx
c000d199:	50                   	push   eax
c000d19a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d19e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d1a2:	e8 b5 ae 01 00       	call   c002805c <__divdf3>
c000d1a7:	83 c4 10             	add    esp,0x10
c000d1aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d1ae:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d1b2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d1b5:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d1b8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d1bc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d1c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d1c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d1c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d1cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d1d0:	e8 54 b4 01 00       	call   c0028629 <__gtdf2>
c000d1d5:	83 c4 10             	add    esp,0x10
c000d1d8:	85 c0                	test   eax,eax
c000d1da:	7e 2d                	jle    c000d209 <sinc_stereo_vari_process+0x14f>
c000d1dc:	68 00 00 f0 3f       	push   0x3ff00000
c000d1e1:	6a 00                	push   0x0
c000d1e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1eb:	e8 57 b4 01 00       	call   c0028647 <__ltdf2>
c000d1f0:	83 c4 10             	add    esp,0x10
c000d1f3:	85 c0                	test   eax,eax
c000d1f5:	79 4d                	jns    c000d244 <sinc_stereo_vari_process+0x18a>
c000d1f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1fb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d203:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d207:	eb 1b                	jmp    c000d224 <sinc_stereo_vari_process+0x16a>
c000d209:	68 00 00 f0 3f       	push   0x3ff00000
c000d20e:	6a 00                	push   0x0
c000d210:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d214:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d218:	e8 2a b4 01 00       	call   c0028647 <__ltdf2>
c000d21d:	83 c4 10             	add    esp,0x10
c000d220:	85 c0                	test   eax,eax
c000d222:	79 20                	jns    c000d244 <sinc_stereo_vari_process+0x18a>
c000d224:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d228:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d22c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d230:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d234:	e8 23 ae 01 00       	call   c002805c <__divdf3>
c000d239:	83 c4 10             	add    esp,0x10
c000d23c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d240:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d244:	50                   	push   eax
c000d245:	50                   	push   eax
c000d246:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d24a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d24e:	e8 ad b5 01 00       	call   c0028800 <lrint>
c000d253:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d256:	40                   	inc    eax
c000d257:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d25b:	0f af c7             	imul   eax,edi
c000d25e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d262:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d265:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d269:	58                   	pop    eax
c000d26a:	5a                   	pop    edx
c000d26b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d26f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d273:	e8 88 b5 01 00       	call   c0028800 <lrint>
c000d278:	83 ec 0c             	sub    esp,0xc
c000d27b:	50                   	push   eax
c000d27c:	e8 5a b1 01 00       	call   c00283db <__floatsidf>
c000d281:	83 c4 10             	add    esp,0x10
c000d284:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d288:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d28c:	52                   	push   edx
c000d28d:	50                   	push   eax
c000d28e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d292:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d296:	e8 b1 aa 01 00       	call   c0027d4c <__subdf3>
c000d29b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d29f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2a3:	83 c4 20             	add    esp,0x20
c000d2a6:	6a 00                	push   0x0
c000d2a8:	6a 00                	push   0x0
c000d2aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2b2:	e8 90 b3 01 00       	call   c0028647 <__ltdf2>
c000d2b7:	83 c4 10             	add    esp,0x10
c000d2ba:	85 c0                	test   eax,eax
c000d2bc:	79 1f                	jns    c000d2dd <sinc_stereo_vari_process+0x223>
c000d2be:	68 00 00 f0 3f       	push   0x3ff00000
c000d2c3:	6a 00                	push   0x0
c000d2c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2cd:	e8 29 a4 01 00       	call   c00276fb <__adddf3>
c000d2d2:	83 c4 10             	add    esp,0x10
c000d2d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d2d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d2dd:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d2e0:	83 ec 10             	sub    esp,0x10
c000d2e3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2e7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d2ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2f2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d2f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d2fa:	e8 4d aa 01 00       	call   c0027d4c <__subdf3>
c000d2ff:	83 c4 18             	add    esp,0x18
c000d302:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d306:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	e8 ef b4 01 00       	call   c0028800 <lrint>
c000d311:	0f af f8             	imul   edi,eax
c000d314:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d318:	01 f8                	add    eax,edi
c000d31a:	99                   	cdq    
c000d31b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d31e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d321:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d325:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d329:	68 00 00 f0 3f       	push   0x3ff00000
c000d32e:	6a 00                	push   0x0
c000d330:	e8 27 ad 01 00       	call   c002805c <__divdf3>
c000d335:	83 c4 10             	add    esp,0x10
c000d338:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d33c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d340:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d345:	68 23 42 92 0c       	push   0xc924223
c000d34a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d34e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d352:	e8 a4 a3 01 00       	call   c00276fb <__adddf3>
c000d357:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d35b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d35f:	83 c4 20             	add    esp,0x20
c000d362:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d36a:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d372:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d375:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d378:	7d 50                	jge    c000d3ca <sinc_stereo_vari_process+0x310>
c000d37a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d37d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d380:	01 c8                	add    eax,ecx
c000d382:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d385:	99                   	cdq    
c000d386:	f7 f9                	idiv   ecx
c000d388:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d38c:	7d 0c                	jge    c000d39a <sinc_stereo_vari_process+0x2e0>
c000d38e:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d391:	85 ff                	test   edi,edi
c000d393:	79 6c                	jns    c000d401 <sinc_stereo_vari_process+0x347>
c000d395:	e9 e7 00 00 00       	jmp    c000d481 <sinc_stereo_vari_process+0x3c7>
c000d39a:	50                   	push   eax
c000d39b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d39f:	56                   	push   esi
c000d3a0:	53                   	push   ebx
c000d3a1:	e8 4c e7 ff ff       	call   c000baf2 <prepare_data>
c000d3a6:	83 c4 10             	add    esp,0x10
c000d3a9:	89 c2                	mov    edx,eax
c000d3ab:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d3ae:	85 c0                	test   eax,eax
c000d3b0:	0f 85 bf 03 00 00    	jne    c000d775 <sinc_stereo_vari_process+0x6bb>
c000d3b6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d3b9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d3bc:	01 c8                	add    eax,ecx
c000d3be:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d3c1:	99                   	cdq    
c000d3c2:	f7 f9                	idiv   ecx
c000d3c4:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d3c8:	7c c4                	jl     c000d38e <sinc_stereo_vari_process+0x2d4>
c000d3ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d3ce:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d3d2:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d3d5:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d3d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3dc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d3e0:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d3e3:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d3e6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d3e9:	99                   	cdq    
c000d3ea:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d3ed:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d3f0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d3f3:	99                   	cdq    
c000d3f4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d3f7:	31 d2                	xor    edx,edx
c000d3f9:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d3fc:	e9 74 03 00 00       	jmp    c000d775 <sinc_stereo_vari_process+0x6bb>
c000d401:	83 ec 0c             	sub    esp,0xc
c000d404:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d407:	e8 cf af 01 00       	call   c00283db <__floatsidf>
c000d40c:	83 c4 10             	add    esp,0x10
c000d40f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d413:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d417:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d41b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d41f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d423:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d427:	e8 cf a2 01 00       	call   c00276fb <__adddf3>
c000d42c:	83 c4 10             	add    esp,0x10
c000d42f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d433:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d437:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d43b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d43f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d443:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d447:	e8 af a2 01 00       	call   c00276fb <__adddf3>
c000d44c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d44f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d453:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d457:	e8 7f af 01 00       	call   c00283db <__floatsidf>
c000d45c:	83 c4 10             	add    esp,0x10
c000d45f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d463:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d467:	52                   	push   edx
c000d468:	50                   	push   eax
c000d469:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d46d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d471:	e8 cf b1 01 00       	call   c0028645 <__gedf2>
c000d476:	83 c4 10             	add    esp,0x10
c000d479:	85 c0                	test   eax,eax
c000d47b:	0f 89 49 ff ff ff    	jns    c000d3ca <sinc_stereo_vari_process+0x310>
c000d481:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d485:	0f 8e ef 00 00 00    	jle    c000d57a <sinc_stereo_vari_process+0x4c0>
c000d48b:	83 ec 10             	sub    esp,0x10
c000d48e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d491:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d494:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d497:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d49a:	e8 ad a8 01 00       	call   c0027d4c <__subdf3>
c000d49f:	83 c4 18             	add    esp,0x18
c000d4a2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4a6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4aa:	52                   	push   edx
c000d4ab:	50                   	push   eax
c000d4ac:	e8 2f b3 01 00       	call   c00287e0 <fabs>
c000d4b1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d4b5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d4b9:	83 c4 10             	add    esp,0x10
c000d4bc:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d4c1:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d4c6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4ce:	e8 56 b1 01 00       	call   c0028629 <__gtdf2>
c000d4d3:	83 c4 10             	add    esp,0x10
c000d4d6:	85 c0                	test   eax,eax
c000d4d8:	0f 8e 9c 00 00 00    	jle    c000d57a <sinc_stereo_vari_process+0x4c0>
c000d4de:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d4e1:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d4e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d4e8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d4ec:	52                   	push   edx
c000d4ed:	50                   	push   eax
c000d4ee:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d4f1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d4f4:	e8 53 a8 01 00       	call   c0027d4c <__subdf3>
c000d4f9:	59                   	pop    ecx
c000d4fa:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d4fe:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d502:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d505:	e8 d1 ae 01 00       	call   c00283db <__floatsidf>
c000d50a:	83 c4 10             	add    esp,0x10
c000d50d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d511:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d515:	52                   	push   edx
c000d516:	50                   	push   eax
c000d517:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d51b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d51f:	e8 54 a8 01 00       	call   c0027d78 <__muldf3>
c000d524:	5f                   	pop    edi
c000d525:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d529:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d52d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d530:	e8 a6 ae 01 00       	call   c00283db <__floatsidf>
c000d535:	83 c4 10             	add    esp,0x10
c000d538:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d53c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d540:	52                   	push   edx
c000d541:	50                   	push   eax
c000d542:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d546:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d54a:	e8 0d ab 01 00       	call   c002805c <__divdf3>
c000d54f:	83 c4 10             	add    esp,0x10
c000d552:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d556:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d55a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d55e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d562:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d566:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d56a:	e8 8c a1 01 00       	call   c00276fb <__adddf3>
c000d56f:	83 c4 10             	add    esp,0x10
c000d572:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d576:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d57a:	83 ec 0c             	sub    esp,0xc
c000d57d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d580:	e8 56 ae 01 00       	call   c00283db <__floatsidf>
c000d585:	83 c4 10             	add    esp,0x10
c000d588:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d58c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d590:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d594:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d59c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a0:	e8 a2 b0 01 00       	call   c0028647 <__ltdf2>
c000d5a5:	83 c4 10             	add    esp,0x10
c000d5a8:	85 c0                	test   eax,eax
c000d5aa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d5ae:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d5b2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d5b6:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d5ba:	78 10                	js     c000d5cc <sinc_stereo_vari_process+0x512>
c000d5bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d5c0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d5c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d5c8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d5cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5d4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5dc:	e8 97 a7 01 00       	call   c0027d78 <__muldf3>
c000d5e1:	59                   	pop    ecx
c000d5e2:	5f                   	pop    edi
c000d5e3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d5e7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d5eb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d5ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d5f3:	e8 d3 e4 ff ff       	call   c000bacb <double_to_fp>
c000d5f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5fc:	89 c7                	mov    edi,eax
c000d5fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d602:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d606:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d60a:	e8 69 a7 01 00       	call   c0027d78 <__muldf3>
c000d60f:	83 c4 18             	add    esp,0x18
c000d612:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d616:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d61a:	52                   	push   edx
c000d61b:	50                   	push   eax
c000d61c:	e8 aa e4 ff ff       	call   c000bacb <double_to_fp>
c000d621:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d624:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d628:	83 c4 0c             	add    esp,0xc
c000d62b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d62e:	8d 04 90             	lea    eax,[eax+edx*4]
c000d631:	50                   	push   eax
c000d632:	50                   	push   eax
c000d633:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d636:	e8 a0 ad 01 00       	call   c00283db <__floatsidf>
c000d63b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d63f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d643:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d647:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d64b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d64f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d653:	e8 04 aa 01 00       	call   c002805c <__divdf3>
c000d658:	83 c4 18             	add    esp,0x18
c000d65b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d65f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d663:	52                   	push   edx
c000d664:	89 fa                	mov    edx,edi
c000d666:	50                   	push   eax
c000d667:	89 d8                	mov    eax,ebx
c000d669:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d66d:	e8 02 c7 ff ff       	call   c0009d74 <calc_output_stereo>
c000d672:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d676:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d67a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d67e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d682:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d686:	e8 d1 a9 01 00       	call   c002805c <__divdf3>
c000d68b:	83 c4 10             	add    esp,0x10
c000d68e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d692:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d696:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d69a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d69e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6a6:	e8 50 a0 01 00       	call   c00276fb <__adddf3>
c000d6ab:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d6af:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d6b3:	83 c4 18             	add    esp,0x18
c000d6b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d6ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d6be:	e8 3d b1 01 00       	call   c0028800 <lrint>
c000d6c3:	83 ec 0c             	sub    esp,0xc
c000d6c6:	50                   	push   eax
c000d6c7:	e8 0f ad 01 00       	call   c00283db <__floatsidf>
c000d6cc:	83 c4 10             	add    esp,0x10
c000d6cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d6d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d6d7:	52                   	push   edx
c000d6d8:	50                   	push   eax
c000d6d9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6e1:	e8 66 a6 01 00       	call   c0027d4c <__subdf3>
c000d6e6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6ee:	83 c4 20             	add    esp,0x20
c000d6f1:	6a 00                	push   0x0
c000d6f3:	6a 00                	push   0x0
c000d6f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6fd:	e8 45 af 01 00       	call   c0028647 <__ltdf2>
c000d702:	83 c4 10             	add    esp,0x10
c000d705:	85 c0                	test   eax,eax
c000d707:	79 20                	jns    c000d729 <sinc_stereo_vari_process+0x66f>
c000d709:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d70d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d711:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d715:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d719:	e8 dd 9f 01 00       	call   c00276fb <__adddf3>
c000d71e:	83 c4 10             	add    esp,0x10
c000d721:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d725:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d729:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d72c:	83 ec 10             	sub    esp,0x10
c000d72f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d733:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d736:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d73a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d73e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d742:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d746:	e8 01 a6 01 00       	call   c0027d4c <__subdf3>
c000d74b:	83 c4 18             	add    esp,0x18
c000d74e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d752:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d756:	52                   	push   edx
c000d757:	50                   	push   eax
c000d758:	e8 a3 b0 01 00       	call   c0028800 <lrint>
c000d75d:	0f af f8             	imul   edi,eax
c000d760:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d764:	83 c4 10             	add    esp,0x10
c000d767:	01 f8                	add    eax,edi
c000d769:	99                   	cdq    
c000d76a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d76d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d770:	e9 fd fb ff ff       	jmp    c000d372 <sinc_stereo_vari_process+0x2b8>
c000d775:	83 c4 4c             	add    esp,0x4c
c000d778:	89 d0                	mov    eax,edx
c000d77a:	5b                   	pop    ebx
c000d77b:	5e                   	pop    esi
c000d77c:	5f                   	pop    edi
c000d77d:	5d                   	pop    ebp
c000d77e:	c3                   	ret    

c000d77f <sinc_mono_vari_process>:
c000d77f:	55                   	push   ebp
c000d780:	ba 05 00 00 00       	mov    edx,0x5
c000d785:	57                   	push   edi
c000d786:	56                   	push   esi
c000d787:	53                   	push   ebx
c000d788:	83 ec 4c             	sub    esp,0x4c
c000d78b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d78f:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d793:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d796:	85 db                	test   ebx,ebx
c000d798:	0f 84 c1 06 00 00    	je     c000de5f <sinc_mono_vari_process+0x6e0>
c000d79e:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d7a1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7a4:	0f af c7             	imul   eax,edi
c000d7a7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d7aa:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d7ad:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d7b4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d7bb:	0f af c7             	imul   eax,edi
c000d7be:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d7c1:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d7c5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d7c8:	8b 00                	mov    eax,DWORD PTR [eax]
c000d7ca:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d7ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d7d2:	68 00 00 70 3f       	push   0x3f700000
c000d7d7:	6a 00                	push   0x0
c000d7d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7e1:	e8 61 ae 01 00       	call   c0028647 <__ltdf2>
c000d7e6:	83 c4 10             	add    esp,0x10
c000d7e9:	ba 16 00 00 00       	mov    edx,0x16
c000d7ee:	85 c0                	test   eax,eax
c000d7f0:	0f 88 69 06 00 00    	js     c000de5f <sinc_mono_vari_process+0x6e0>
c000d7f6:	68 00 00 70 40       	push   0x40700000
c000d7fb:	6a 00                	push   0x0
c000d7fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d801:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d805:	e8 1f ae 01 00       	call   c0028629 <__gtdf2>
c000d80a:	83 c4 10             	add    esp,0x10
c000d80d:	ba 16 00 00 00       	mov    edx,0x16
c000d812:	85 c0                	test   eax,eax
c000d814:	0f 8f 45 06 00 00    	jg     c000de5f <sinc_mono_vari_process+0x6e0>
c000d81a:	83 ec 0c             	sub    esp,0xc
c000d81d:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d820:	e8 b6 ab 01 00       	call   c00283db <__floatsidf>
c000d825:	83 c4 10             	add    esp,0x10
c000d828:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d82c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d830:	68 00 00 00 40       	push   0x40000000
c000d835:	6a 00                	push   0x0
c000d837:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d83b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d83f:	e8 b7 9e 01 00       	call   c00276fb <__adddf3>
c000d844:	59                   	pop    ecx
c000d845:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d849:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d84d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d850:	e8 86 ab 01 00       	call   c00283db <__floatsidf>
c000d855:	83 c4 10             	add    esp,0x10
c000d858:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d85c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d860:	52                   	push   edx
c000d861:	50                   	push   eax
c000d862:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d866:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d86a:	e8 ed a7 01 00       	call   c002805c <__divdf3>
c000d86f:	83 c4 10             	add    esp,0x10
c000d872:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d876:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d87a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d87d:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d880:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d884:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d888:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d88c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d890:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d894:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d898:	e8 8c ad 01 00       	call   c0028629 <__gtdf2>
c000d89d:	83 c4 10             	add    esp,0x10
c000d8a0:	85 c0                	test   eax,eax
c000d8a2:	7e 2d                	jle    c000d8d1 <sinc_mono_vari_process+0x152>
c000d8a4:	68 00 00 f0 3f       	push   0x3ff00000
c000d8a9:	6a 00                	push   0x0
c000d8ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8b3:	e8 8f ad 01 00       	call   c0028647 <__ltdf2>
c000d8b8:	83 c4 10             	add    esp,0x10
c000d8bb:	85 c0                	test   eax,eax
c000d8bd:	79 4d                	jns    c000d90c <sinc_mono_vari_process+0x18d>
c000d8bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d8cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d8cf:	eb 1b                	jmp    c000d8ec <sinc_mono_vari_process+0x16d>
c000d8d1:	68 00 00 f0 3f       	push   0x3ff00000
c000d8d6:	6a 00                	push   0x0
c000d8d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d8dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d8e0:	e8 62 ad 01 00       	call   c0028647 <__ltdf2>
c000d8e5:	83 c4 10             	add    esp,0x10
c000d8e8:	85 c0                	test   eax,eax
c000d8ea:	79 20                	jns    c000d90c <sinc_mono_vari_process+0x18d>
c000d8ec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d8f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d8fc:	e8 5b a7 01 00       	call   c002805c <__divdf3>
c000d901:	83 c4 10             	add    esp,0x10
c000d904:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d908:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d90c:	50                   	push   eax
c000d90d:	50                   	push   eax
c000d90e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d912:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d916:	e8 e5 ae 01 00       	call   c0028800 <lrint>
c000d91b:	40                   	inc    eax
c000d91c:	0f af c7             	imul   eax,edi
c000d91f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d923:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d927:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d92a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d92d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d931:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d935:	58                   	pop    eax
c000d936:	5a                   	pop    edx
c000d937:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d93b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d93f:	e8 bc ae 01 00       	call   c0028800 <lrint>
c000d944:	83 ec 0c             	sub    esp,0xc
c000d947:	50                   	push   eax
c000d948:	e8 8e aa 01 00       	call   c00283db <__floatsidf>
c000d94d:	83 c4 10             	add    esp,0x10
c000d950:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d954:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d958:	52                   	push   edx
c000d959:	50                   	push   eax
c000d95a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d962:	e8 e5 a3 01 00       	call   c0027d4c <__subdf3>
c000d967:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d96b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d96f:	83 c4 20             	add    esp,0x20
c000d972:	6a 00                	push   0x0
c000d974:	6a 00                	push   0x0
c000d976:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d97a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d97e:	e8 c4 ac 01 00       	call   c0028647 <__ltdf2>
c000d983:	83 c4 10             	add    esp,0x10
c000d986:	85 c0                	test   eax,eax
c000d988:	79 1f                	jns    c000d9a9 <sinc_mono_vari_process+0x22a>
c000d98a:	68 00 00 f0 3f       	push   0x3ff00000
c000d98f:	6a 00                	push   0x0
c000d991:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d995:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d999:	e8 5d 9d 01 00       	call   c00276fb <__adddf3>
c000d99e:	83 c4 10             	add    esp,0x10
c000d9a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d9a5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d9a9:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d9ac:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d9af:	83 ec 10             	sub    esp,0x10
c000d9b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9ba:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9c2:	e8 85 a3 01 00       	call   c0027d4c <__subdf3>
c000d9c7:	83 c4 18             	add    esp,0x18
c000d9ca:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d9ce:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d9d2:	52                   	push   edx
c000d9d3:	50                   	push   eax
c000d9d4:	e8 27 ae 01 00       	call   c0028800 <lrint>
c000d9d9:	0f af f8             	imul   edi,eax
c000d9dc:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d9df:	31 ff                	xor    edi,edi
c000d9e1:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d9e6:	99                   	cdq    
c000d9e7:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d9ea:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d9ed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d9f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d9f5:	55                   	push   ebp
c000d9f6:	57                   	push   edi
c000d9f7:	e8 60 a6 01 00       	call   c002805c <__divdf3>
c000d9fc:	83 c4 10             	add    esp,0x10
c000d9ff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da03:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da07:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000da0c:	68 23 42 92 0c       	push   0xc924223
c000da11:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da19:	e8 dd 9c 01 00       	call   c00276fb <__adddf3>
c000da1e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000da22:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000da26:	83 c4 20             	add    esp,0x20
c000da29:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000da2d:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000da31:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000da34:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000da37:	7d 54                	jge    c000da8d <sinc_mono_vari_process+0x30e>
c000da39:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000da3c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000da3f:	01 c8                	add    eax,ecx
c000da41:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000da44:	99                   	cdq    
c000da45:	f7 f9                	idiv   ecx
c000da47:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000da4b:	7d 0c                	jge    c000da59 <sinc_mono_vari_process+0x2da>
c000da4d:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000da50:	85 ff                	test   edi,edi
c000da52:	79 73                	jns    c000dac7 <sinc_mono_vari_process+0x348>
c000da54:	e9 ee 00 00 00       	jmp    c000db47 <sinc_mono_vari_process+0x3c8>
c000da59:	50                   	push   eax
c000da5a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000da5e:	56                   	push   esi
c000da5f:	53                   	push   ebx
c000da60:	e8 8d e0 ff ff       	call   c000baf2 <prepare_data>
c000da65:	89 c2                	mov    edx,eax
c000da67:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000da6b:	83 c4 10             	add    esp,0x10
c000da6e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000da71:	85 d2                	test   edx,edx
c000da73:	0f 85 e6 03 00 00    	jne    c000de5f <sinc_mono_vari_process+0x6e0>
c000da79:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000da7c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000da7f:	01 c8                	add    eax,ecx
c000da81:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000da84:	99                   	cdq    
c000da85:	f7 f9                	idiv   ecx
c000da87:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000da8b:	7c c0                	jl     c000da4d <sinc_mono_vari_process+0x2ce>
c000da8d:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000da91:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000da95:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000da99:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000da9c:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000da9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daa3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000daa7:	89 01                	mov    DWORD PTR [ecx],eax
c000daa9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000daac:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000daaf:	99                   	cdq    
c000dab0:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000dab3:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000dab6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000dab9:	99                   	cdq    
c000daba:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000dabd:	31 d2                	xor    edx,edx
c000dabf:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000dac2:	e9 98 03 00 00       	jmp    c000de5f <sinc_mono_vari_process+0x6e0>
c000dac7:	83 ec 0c             	sub    esp,0xc
c000daca:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000dacd:	e8 09 a9 01 00       	call   c00283db <__floatsidf>
c000dad2:	83 c4 10             	add    esp,0x10
c000dad5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dad9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dadd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dae1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dae5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dae9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000daed:	e8 09 9c 01 00       	call   c00276fb <__adddf3>
c000daf2:	83 c4 10             	add    esp,0x10
c000daf5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000daf9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dafd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000db01:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000db05:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db09:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db0d:	e8 e9 9b 01 00       	call   c00276fb <__adddf3>
c000db12:	89 3c 24             	mov    DWORD PTR [esp],edi
c000db15:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db19:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db1d:	e8 b9 a8 01 00       	call   c00283db <__floatsidf>
c000db22:	83 c4 10             	add    esp,0x10
c000db25:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000db29:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000db2d:	52                   	push   edx
c000db2e:	50                   	push   eax
c000db2f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db33:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db37:	e8 ed aa 01 00       	call   c0028629 <__gtdf2>
c000db3c:	83 c4 10             	add    esp,0x10
c000db3f:	85 c0                	test   eax,eax
c000db41:	0f 8f 46 ff ff ff    	jg     c000da8d <sinc_mono_vari_process+0x30e>
c000db47:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000db4b:	0f 8e f5 00 00 00    	jle    c000dc46 <sinc_mono_vari_process+0x4c7>
c000db51:	83 ec 10             	sub    esp,0x10
c000db54:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000db57:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000db5a:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000db5e:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000db61:	ff 30                	push   DWORD PTR [eax]
c000db63:	e8 e4 a1 01 00       	call   c0027d4c <__subdf3>
c000db68:	83 c4 18             	add    esp,0x18
c000db6b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000db6f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000db73:	52                   	push   edx
c000db74:	50                   	push   eax
c000db75:	e8 66 ac 01 00       	call   c00287e0 <fabs>
c000db7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db82:	83 c4 10             	add    esp,0x10
c000db85:	68 df 7c db 3d       	push   0x3ddb7cdf
c000db8a:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000db8f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db93:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db97:	e8 8d aa 01 00       	call   c0028629 <__gtdf2>
c000db9c:	83 c4 10             	add    esp,0x10
c000db9f:	85 c0                	test   eax,eax
c000dba1:	0f 8e 9f 00 00 00    	jle    c000dc46 <sinc_mono_vari_process+0x4c7>
c000dba7:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000dbab:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000dbae:	8b 00                	mov    eax,DWORD PTR [eax]
c000dbb0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dbb4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dbb8:	52                   	push   edx
c000dbb9:	50                   	push   eax
c000dbba:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dbbd:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dbc0:	e8 87 a1 01 00       	call   c0027d4c <__subdf3>
c000dbc5:	5f                   	pop    edi
c000dbc6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000dbca:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000dbce:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dbd1:	e8 05 a8 01 00       	call   c00283db <__floatsidf>
c000dbd6:	83 c4 10             	add    esp,0x10
c000dbd9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dbdd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dbe1:	52                   	push   edx
c000dbe2:	50                   	push   eax
c000dbe3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbe7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbeb:	e8 88 a1 01 00       	call   c0027d78 <__muldf3>
c000dbf0:	5d                   	pop    ebp
c000dbf1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000dbf5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000dbf9:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000dbfc:	e8 da a7 01 00       	call   c00283db <__floatsidf>
c000dc01:	83 c4 10             	add    esp,0x10
c000dc04:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc08:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc0c:	52                   	push   edx
c000dc0d:	50                   	push   eax
c000dc0e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dc12:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dc16:	e8 41 a4 01 00       	call   c002805c <__divdf3>
c000dc1b:	83 c4 10             	add    esp,0x10
c000dc1e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dc22:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dc26:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc2e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dc32:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dc36:	e8 c0 9a 01 00       	call   c00276fb <__adddf3>
c000dc3b:	83 c4 10             	add    esp,0x10
c000dc3e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dc42:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dc46:	83 ec 0c             	sub    esp,0xc
c000dc49:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dc4c:	e8 8a a7 01 00       	call   c00283db <__floatsidf>
c000dc51:	83 c4 10             	add    esp,0x10
c000dc54:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc58:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc6c:	e8 d6 a9 01 00       	call   c0028647 <__ltdf2>
c000dc71:	83 c4 10             	add    esp,0x10
c000dc74:	85 c0                	test   eax,eax
c000dc76:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000dc7a:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000dc7e:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000dc82:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000dc86:	78 10                	js     c000dc98 <sinc_mono_vari_process+0x519>
c000dc88:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dc8c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000dc90:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dc94:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dc98:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dc9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dca0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dca4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dca8:	e8 cb a0 01 00       	call   c0027d78 <__muldf3>
c000dcad:	59                   	pop    ecx
c000dcae:	5f                   	pop    edi
c000dcaf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dcb3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dcb7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dcbb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dcbf:	e8 07 de ff ff       	call   c000bacb <double_to_fp>
c000dcc4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dcc8:	89 c7                	mov    edi,eax
c000dcca:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dcce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dcd2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dcd6:	e8 9d a0 01 00       	call   c0027d78 <__muldf3>
c000dcdb:	83 c4 18             	add    esp,0x18
c000dcde:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dce2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dce6:	52                   	push   edx
c000dce7:	50                   	push   eax
c000dce8:	e8 de dd ff ff       	call   c000bacb <double_to_fp>
c000dced:	83 ec 0c             	sub    esp,0xc
c000dcf0:	89 c5                	mov    ebp,eax
c000dcf2:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dcf5:	e8 e1 a6 01 00       	call   c00283db <__floatsidf>
c000dcfa:	83 c4 10             	add    esp,0x10
c000dcfd:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dd01:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dd05:	52                   	push   edx
c000dd06:	50                   	push   eax
c000dd07:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dd0b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dd0f:	e8 48 a3 01 00       	call   c002805c <__divdf3>
c000dd14:	83 c4 10             	add    esp,0x10
c000dd17:	89 e9                	mov    ecx,ebp
c000dd19:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dd1d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dd21:	89 d8                	mov    eax,ebx
c000dd23:	89 fa                	mov    edx,edi
c000dd25:	e8 ee bd ff ff       	call   c0009b18 <calc_output_single>
c000dd2a:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000dd2d:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000dd30:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dd34:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dd38:	52                   	push   edx
c000dd39:	50                   	push   eax
c000dd3a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000dd3e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000dd42:	e8 31 a0 01 00       	call   c0027d78 <__muldf3>
c000dd47:	59                   	pop    ecx
c000dd48:	59                   	pop    ecx
c000dd49:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dd4d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dd51:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dd55:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dd59:	e8 ed a8 01 00       	call   c002864b <__truncdfsf2>
c000dd5e:	83 c4 10             	add    esp,0x10
c000dd61:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000dd64:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000dd67:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dd6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dd6f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dd73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dd77:	e8 e0 a2 01 00       	call   c002805c <__divdf3>
c000dd7c:	83 c4 10             	add    esp,0x10
c000dd7f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dd83:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dd87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd8f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dd93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dd97:	e8 5f 99 01 00       	call   c00276fb <__adddf3>
c000dd9c:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dda0:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dda4:	83 c4 18             	add    esp,0x18
c000dda7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ddab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ddaf:	e8 4c aa 01 00       	call   c0028800 <lrint>
c000ddb4:	83 ec 0c             	sub    esp,0xc
c000ddb7:	50                   	push   eax
c000ddb8:	e8 1e a6 01 00       	call   c00283db <__floatsidf>
c000ddbd:	83 c4 10             	add    esp,0x10
c000ddc0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ddc4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ddc8:	52                   	push   edx
c000ddc9:	50                   	push   eax
c000ddca:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ddce:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ddd2:	e8 75 9f 01 00       	call   c0027d4c <__subdf3>
c000ddd7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dddb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dddf:	83 c4 20             	add    esp,0x20
c000dde2:	6a 00                	push   0x0
c000dde4:	6a 00                	push   0x0
c000dde6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddee:	e8 54 a8 01 00       	call   c0028647 <__ltdf2>
c000ddf3:	83 c4 10             	add    esp,0x10
c000ddf6:	85 c0                	test   eax,eax
c000ddf8:	79 20                	jns    c000de1a <sinc_mono_vari_process+0x69b>
c000ddfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de0a:	e8 ec 98 01 00       	call   c00276fb <__adddf3>
c000de0f:	83 c4 10             	add    esp,0x10
c000de12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000de16:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000de1a:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000de1d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000de20:	83 ec 10             	sub    esp,0x10
c000de23:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de2b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000de2f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000de33:	e8 14 9f 01 00       	call   c0027d4c <__subdf3>
c000de38:	83 c4 18             	add    esp,0x18
c000de3b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000de3f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000de43:	52                   	push   edx
c000de44:	50                   	push   eax
c000de45:	e8 b6 a9 01 00       	call   c0028800 <lrint>
c000de4a:	83 c4 10             	add    esp,0x10
c000de4d:	0f af f8             	imul   edi,eax
c000de50:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000de53:	99                   	cdq    
c000de54:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000de57:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000de5a:	e9 d2 fb ff ff       	jmp    c000da31 <sinc_mono_vari_process+0x2b2>
c000de5f:	83 c4 4c             	add    esp,0x4c
c000de62:	89 d0                	mov    eax,edx
c000de64:	5b                   	pop    ebx
c000de65:	5e                   	pop    esi
c000de66:	5f                   	pop    edi
c000de67:	5d                   	pop    ebp
c000de68:	c3                   	ret    

c000de69 <sinc_get_name>:
c000de69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000de6d:	31 c0                	xor    eax,eax
c000de6f:	83 fa 02             	cmp    edx,0x2
c000de72:	77 07                	ja     c000de7b <sinc_get_name+0x12>
c000de74:	8b 04 95 a4 a0 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5f5c]
c000de7b:	c3                   	ret    

c000de7c <sinc_get_description>:
c000de7c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000de80:	31 c0                	xor    eax,eax
c000de82:	83 fa 02             	cmp    edx,0x2
c000de85:	77 07                	ja     c000de8e <sinc_get_description+0x12>
c000de87:	8b 04 95 98 a0 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5f68]
c000de8e:	c3                   	ret    

c000de8f <sinc_set_converter>:
c000de8f:	53                   	push   ebx
c000de90:	81 ec 58 08 00 00    	sub    esp,0x858
c000de96:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000de9d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dea0:	85 c0                	test   eax,eax
c000dea2:	74 13                	je     c000deb7 <sinc_set_converter+0x28>
c000dea4:	83 ec 0c             	sub    esp,0xc
c000dea7:	50                   	push   eax
c000dea8:	e8 7c 19 00 00       	call   c000f829 <free>
c000dead:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000deb4:	83 c4 10             	add    esp,0x10
c000deb7:	50                   	push   eax
c000deb8:	68 44 08 00 00       	push   0x844
c000debd:	6a 00                	push   0x0
c000debf:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dec3:	50                   	push   eax
c000dec4:	e8 87 28 ff ff       	call   c0000750 <memset>
c000dec9:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000decc:	83 c4 10             	add    esp,0x10
c000decf:	b8 0b 00 00 00       	mov    eax,0xb
c000ded4:	81 fa 80 00 00 00    	cmp    edx,0x80
c000deda:	7f 6e                	jg     c000df4a <sinc_set_converter+0xbb>
c000dedc:	83 fa 01             	cmp    edx,0x1
c000dedf:	75 10                	jne    c000def1 <sinc_set_converter+0x62>
c000dee1:	c7 43 24 7f d7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d77f
c000dee8:	c7 43 20 7f d7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d77f
c000deef:	eb 4d                	jmp    c000df3e <sinc_set_converter+0xaf>
c000def1:	83 fa 02             	cmp    edx,0x2
c000def4:	75 10                	jne    c000df06 <sinc_set_converter+0x77>
c000def6:	c7 43 24 ba d0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d0ba
c000defd:	c7 43 20 ba d0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d0ba
c000df04:	eb 38                	jmp    c000df3e <sinc_set_converter+0xaf>
c000df06:	83 fa 04             	cmp    edx,0x4
c000df09:	75 10                	jne    c000df1b <sinc_set_converter+0x8c>
c000df0b:	c7 43 24 f5 c9 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c9f5
c000df12:	c7 43 20 f5 c9 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c9f5
c000df19:	eb 23                	jmp    c000df3e <sinc_set_converter+0xaf>
c000df1b:	83 fa 06             	cmp    edx,0x6
c000df1e:	75 10                	jne    c000df30 <sinc_set_converter+0xa1>
c000df20:	c7 43 24 30 c3 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c330
c000df27:	c7 43 20 30 c3 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c330
c000df2e:	eb 0e                	jmp    c000df3e <sinc_set_converter+0xaf>
c000df30:	c7 43 24 6c bc 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000bc6c
c000df37:	c7 43 20 6c bc 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000bc6c
c000df3e:	c7 43 28 1f af 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000af1f
c000df45:	b8 0a 00 00 00       	mov    eax,0xa
c000df4a:	81 c4 58 08 00 00    	add    esp,0x858
c000df50:	5b                   	pop    ebx
c000df51:	c3                   	ret    

c000df52 <zoh_vari_process>:
c000df52:	55                   	push   ebp
c000df53:	31 d2                	xor    edx,edx
c000df55:	57                   	push   edi
c000df56:	56                   	push   esi
c000df57:	53                   	push   ebx
c000df58:	83 ec 3c             	sub    esp,0x3c
c000df5b:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000df5f:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000df63:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000df67:	0f 8e 80 06 00 00    	jle    c000e5ed <zoh_vari_process+0x69b>
c000df6d:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000df70:	ba 05 00 00 00       	mov    edx,0x5
c000df75:	85 db                	test   ebx,ebx
c000df77:	0f 84 70 06 00 00    	je     c000e5ed <zoh_vari_process+0x69b>
c000df7d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000df80:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000df84:	74 19                	je     c000df9f <zoh_vari_process+0x4d>
c000df86:	31 d2                	xor    edx,edx
c000df88:	39 c2                	cmp    edx,eax
c000df8a:	7d 0c                	jge    c000df98 <zoh_vari_process+0x46>
c000df8c:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000df8e:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000df91:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000df95:	42                   	inc    edx
c000df96:	eb f0                	jmp    c000df88 <zoh_vari_process+0x36>
c000df98:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000df9f:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dfa2:	0f af d0             	imul   edx,eax
c000dfa5:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000dfa8:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000dfac:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dfb3:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dfb6:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dfbd:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dfc0:	8b 07                	mov    eax,DWORD PTR [edi]
c000dfc2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfca:	68 00 00 70 3f       	push   0x3f700000
c000dfcf:	6a 00                	push   0x0
c000dfd1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfd9:	e8 69 a6 01 00       	call   c0028647 <__ltdf2>
c000dfde:	83 c4 10             	add    esp,0x10
c000dfe1:	ba 16 00 00 00       	mov    edx,0x16
c000dfe6:	85 c0                	test   eax,eax
c000dfe8:	0f 88 ff 05 00 00    	js     c000e5ed <zoh_vari_process+0x69b>
c000dfee:	68 00 00 70 40       	push   0x40700000
c000dff3:	6a 00                	push   0x0
c000dff5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dffd:	e8 27 a6 01 00       	call   c0028629 <__gtdf2>
c000e002:	83 c4 10             	add    esp,0x10
c000e005:	ba 16 00 00 00       	mov    edx,0x16
c000e00a:	85 c0                	test   eax,eax
c000e00c:	0f 8f db 05 00 00    	jg     c000e5ed <zoh_vari_process+0x69b>
c000e012:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e015:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000e018:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e01c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e020:	68 00 00 f0 3f       	push   0x3ff00000
c000e025:	6a 00                	push   0x0
c000e027:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e02b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e02f:	e8 13 a6 01 00       	call   c0028647 <__ltdf2>
c000e034:	83 c4 10             	add    esp,0x10
c000e037:	85 c0                	test   eax,eax
c000e039:	0f 89 da 01 00 00    	jns    c000e219 <zoh_vari_process+0x2c7>
c000e03f:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000e042:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000e045:	0f 8d ce 01 00 00    	jge    c000e219 <zoh_vari_process+0x2c7>
c000e04b:	83 ec 0c             	sub    esp,0xc
c000e04e:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e051:	e8 85 a3 01 00       	call   c00283db <__floatsidf>
c000e056:	83 c4 10             	add    esp,0x10
c000e059:	89 04 24             	mov    DWORD PTR [esp],eax
c000e05c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e064:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e068:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e06c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e070:	e8 03 9d 01 00       	call   c0027d78 <__muldf3>
c000e075:	59                   	pop    ecx
c000e076:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e07a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e07e:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000e081:	e8 55 a3 01 00       	call   c00283db <__floatsidf>
c000e086:	83 c4 10             	add    esp,0x10
c000e089:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e08d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e091:	52                   	push   edx
c000e092:	50                   	push   eax
c000e093:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e097:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e09b:	e8 5b 96 01 00       	call   c00276fb <__adddf3>
c000e0a0:	59                   	pop    ecx
c000e0a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e0a5:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e0a9:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000e0ac:	e8 2a a3 01 00       	call   c00283db <__floatsidf>
c000e0b1:	83 c4 10             	add    esp,0x10
c000e0b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0bc:	52                   	push   edx
c000e0bd:	50                   	push   eax
c000e0be:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0c2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0c6:	e8 7a a5 01 00       	call   c0028645 <__gedf2>
c000e0cb:	83 c4 10             	add    esp,0x10
c000e0ce:	85 c0                	test   eax,eax
c000e0d0:	0f 89 43 01 00 00    	jns    c000e219 <zoh_vari_process+0x2c7>
c000e0d6:	85 ed                	test   ebp,ebp
c000e0d8:	0f 8e ec 00 00 00    	jle    c000e1ca <zoh_vari_process+0x278>
c000e0de:	83 ec 10             	sub    esp,0x10
c000e0e1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e0e4:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e0e7:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e0ea:	ff 37                	push   DWORD PTR [edi]
c000e0ec:	e8 5b 9c 01 00       	call   c0027d4c <__subdf3>
c000e0f1:	83 c4 18             	add    esp,0x18
c000e0f4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e0f8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e0fc:	52                   	push   edx
c000e0fd:	50                   	push   eax
c000e0fe:	e8 dd a6 01 00       	call   c00287e0 <fabs>
c000e103:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e107:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e10b:	83 c4 10             	add    esp,0x10
c000e10e:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e113:	68 23 42 92 0c       	push   0xc924223
c000e118:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e11c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e120:	e8 04 a5 01 00       	call   c0028629 <__gtdf2>
c000e125:	83 c4 10             	add    esp,0x10
c000e128:	85 c0                	test   eax,eax
c000e12a:	0f 8e 9a 00 00 00    	jle    c000e1ca <zoh_vari_process+0x278>
c000e130:	8b 07                	mov    eax,DWORD PTR [edi]
c000e132:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e135:	89 04 24             	mov    DWORD PTR [esp],eax
c000e138:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e13c:	52                   	push   edx
c000e13d:	50                   	push   eax
c000e13e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e141:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e144:	e8 03 9c 01 00       	call   c0027d4c <__subdf3>
c000e149:	59                   	pop    ecx
c000e14a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e14e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e152:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e155:	e8 81 a2 01 00       	call   c00283db <__floatsidf>
c000e15a:	83 c4 10             	add    esp,0x10
c000e15d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e161:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e165:	52                   	push   edx
c000e166:	50                   	push   eax
c000e167:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e16b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e16f:	e8 04 9c 01 00       	call   c0027d78 <__muldf3>
c000e174:	5d                   	pop    ebp
c000e175:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e179:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e17d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e180:	e8 56 a2 01 00       	call   c00283db <__floatsidf>
c000e185:	83 c4 10             	add    esp,0x10
c000e188:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e18c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e190:	52                   	push   edx
c000e191:	50                   	push   eax
c000e192:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e196:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e19a:	e8 bd 9e 01 00       	call   c002805c <__divdf3>
c000e19f:	83 c4 10             	add    esp,0x10
c000e1a2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e1ae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e1b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e1b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e1ba:	e8 3c 95 01 00       	call   c00276fb <__adddf3>
c000e1bf:	83 c4 10             	add    esp,0x10
c000e1c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1ca:	31 c0                	xor    eax,eax
c000e1cc:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000e1cf:	7e 13                	jle    c000e1e4 <zoh_vari_process+0x292>
c000e1d1:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000e1d5:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e1d8:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000e1db:	40                   	inc    eax
c000e1dc:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000e1df:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e1e2:	eb e8                	jmp    c000e1cc <zoh_vari_process+0x27a>
c000e1e4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e1e8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e1ec:	68 00 00 f0 3f       	push   0x3ff00000
c000e1f1:	6a 00                	push   0x0
c000e1f3:	e8 64 9e 01 00       	call   c002805c <__divdf3>
c000e1f8:	83 c4 10             	add    esp,0x10
c000e1fb:	89 04 24             	mov    DWORD PTR [esp],eax
c000e1fe:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e202:	52                   	push   edx
c000e203:	50                   	push   eax
c000e204:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e208:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20c:	e8 ea 94 01 00       	call   c00276fb <__adddf3>
c000e211:	83 c4 10             	add    esp,0x10
c000e214:	e9 ff fd ff ff       	jmp    c000e018 <zoh_vari_process+0xc6>
c000e219:	55                   	push   ebp
c000e21a:	55                   	push   ebp
c000e21b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e21f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e223:	e8 d8 a5 01 00       	call   c0028800 <lrint>
c000e228:	83 ec 0c             	sub    esp,0xc
c000e22b:	50                   	push   eax
c000e22c:	e8 aa a1 01 00       	call   c00283db <__floatsidf>
c000e231:	83 c4 10             	add    esp,0x10
c000e234:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e238:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e23c:	52                   	push   edx
c000e23d:	50                   	push   eax
c000e23e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e242:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e246:	e8 01 9b 01 00       	call   c0027d4c <__subdf3>
c000e24b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e24f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e253:	83 c4 20             	add    esp,0x20
c000e256:	6a 00                	push   0x0
c000e258:	6a 00                	push   0x0
c000e25a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e25e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e262:	e8 e0 a3 01 00       	call   c0028647 <__ltdf2>
c000e267:	83 c4 10             	add    esp,0x10
c000e26a:	85 c0                	test   eax,eax
c000e26c:	79 1e                	jns    c000e28c <zoh_vari_process+0x33a>
c000e26e:	68 00 00 f0 3f       	push   0x3ff00000
c000e273:	6a 00                	push   0x0
c000e275:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e279:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e27d:	e8 79 94 01 00       	call   c00276fb <__adddf3>
c000e282:	83 c4 10             	add    esp,0x10
c000e285:	89 04 24             	mov    DWORD PTR [esp],eax
c000e288:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e28c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e28f:	83 ec 10             	sub    esp,0x10
c000e292:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e296:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e29a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e29e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2a2:	e8 a5 9a 01 00       	call   c0027d4c <__subdf3>
c000e2a7:	83 c4 18             	add    esp,0x18
c000e2aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2ae:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2b2:	52                   	push   edx
c000e2b3:	50                   	push   eax
c000e2b4:	e8 47 a5 01 00       	call   c0028800 <lrint>
c000e2b9:	83 c4 10             	add    esp,0x10
c000e2bc:	0f af e8             	imul   ebp,eax
c000e2bf:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e2c2:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e2c5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e2c9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e2cc:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e2cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2d3:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e2d6:	0f 8d 7a 02 00 00    	jge    c000e556 <zoh_vari_process+0x604>
c000e2dc:	83 ec 0c             	sub    esp,0xc
c000e2df:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e2e2:	e8 f4 a0 01 00       	call   c00283db <__floatsidf>
c000e2e7:	83 c4 10             	add    esp,0x10
c000e2ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2f2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2f6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2fa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e2fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e302:	e8 71 9a 01 00       	call   c0027d78 <__muldf3>
c000e307:	59                   	pop    ecx
c000e308:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e30c:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e310:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e314:	e8 c2 a0 01 00       	call   c00283db <__floatsidf>
c000e319:	83 c4 10             	add    esp,0x10
c000e31c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e320:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e324:	52                   	push   edx
c000e325:	50                   	push   eax
c000e326:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e32a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e32e:	e8 c8 93 01 00       	call   c00276fb <__adddf3>
c000e333:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e336:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e33a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e33e:	e8 98 a0 01 00       	call   c00283db <__floatsidf>
c000e343:	83 c4 10             	add    esp,0x10
c000e346:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e34a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e34e:	52                   	push   edx
c000e34f:	50                   	push   eax
c000e350:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e354:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e358:	e8 ec a2 01 00       	call   c0028649 <__ledf2>
c000e35d:	83 c4 10             	add    esp,0x10
c000e360:	85 c0                	test   eax,eax
c000e362:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e366:	0f 8f ea 01 00 00    	jg     c000e556 <zoh_vari_process+0x604>
c000e36c:	85 c9                	test   ecx,ecx
c000e36e:	0f 8e ed 00 00 00    	jle    c000e461 <zoh_vari_process+0x50f>
c000e374:	83 ec 10             	sub    esp,0x10
c000e377:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e37a:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e37d:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e380:	ff 37                	push   DWORD PTR [edi]
c000e382:	e8 c5 99 01 00       	call   c0027d4c <__subdf3>
c000e387:	83 c4 18             	add    esp,0x18
c000e38a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e38e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e392:	52                   	push   edx
c000e393:	50                   	push   eax
c000e394:	e8 47 a4 01 00       	call   c00287e0 <fabs>
c000e399:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e39d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e3a1:	83 c4 10             	add    esp,0x10
c000e3a4:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e3a9:	68 23 42 92 0c       	push   0xc924223
c000e3ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3b6:	e8 6e a2 01 00       	call   c0028629 <__gtdf2>
c000e3bb:	83 c4 10             	add    esp,0x10
c000e3be:	85 c0                	test   eax,eax
c000e3c0:	0f 8e 9b 00 00 00    	jle    c000e461 <zoh_vari_process+0x50f>
c000e3c6:	8b 07                	mov    eax,DWORD PTR [edi]
c000e3c8:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e3cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e3cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e3d3:	52                   	push   edx
c000e3d4:	50                   	push   eax
c000e3d5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e3d8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e3db:	e8 6c 99 01 00       	call   c0027d4c <__subdf3>
c000e3e0:	5d                   	pop    ebp
c000e3e1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e3e5:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e3e9:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e3ec:	e8 ea 9f 01 00       	call   c00283db <__floatsidf>
c000e3f1:	83 c4 10             	add    esp,0x10
c000e3f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e3f8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e3fc:	52                   	push   edx
c000e3fd:	50                   	push   eax
c000e3fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e402:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e406:	e8 6d 99 01 00       	call   c0027d78 <__muldf3>
c000e40b:	59                   	pop    ecx
c000e40c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e410:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e414:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e417:	e8 bf 9f 01 00       	call   c00283db <__floatsidf>
c000e41c:	83 c4 10             	add    esp,0x10
c000e41f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e423:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e427:	52                   	push   edx
c000e428:	50                   	push   eax
c000e429:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e42d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e431:	e8 26 9c 01 00       	call   c002805c <__divdf3>
c000e436:	83 c4 10             	add    esp,0x10
c000e439:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e43d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e441:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e445:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e449:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e44d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e451:	e8 a5 92 01 00       	call   c00276fb <__adddf3>
c000e456:	83 c4 10             	add    esp,0x10
c000e459:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e45d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e461:	31 d2                	xor    edx,edx
c000e463:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e466:	39 d0                	cmp    eax,edx
c000e468:	7e 1d                	jle    c000e487 <zoh_vari_process+0x535>
c000e46a:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e46d:	29 c1                	sub    ecx,eax
c000e46f:	89 c8                	mov    eax,ecx
c000e471:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e473:	01 d0                	add    eax,edx
c000e475:	42                   	inc    edx
c000e476:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e479:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e47c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e47f:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e482:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e485:	eb dc                	jmp    c000e463 <zoh_vari_process+0x511>
c000e487:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e48b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e48f:	68 00 00 f0 3f       	push   0x3ff00000
c000e494:	6a 00                	push   0x0
c000e496:	e8 c1 9b 01 00       	call   c002805c <__divdf3>
c000e49b:	83 c4 10             	add    esp,0x10
c000e49e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e4a2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e4a6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e4aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e4ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4b6:	e8 40 92 01 00       	call   c00276fb <__adddf3>
c000e4bb:	5d                   	pop    ebp
c000e4bc:	59                   	pop    ecx
c000e4bd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e4c1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e4c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4cd:	e8 2e a3 01 00       	call   c0028800 <lrint>
c000e4d2:	83 ec 0c             	sub    esp,0xc
c000e4d5:	50                   	push   eax
c000e4d6:	e8 00 9f 01 00       	call   c00283db <__floatsidf>
c000e4db:	83 c4 10             	add    esp,0x10
c000e4de:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e4e2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e4e6:	52                   	push   edx
c000e4e7:	50                   	push   eax
c000e4e8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e4ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e4f0:	e8 57 98 01 00       	call   c0027d4c <__subdf3>
c000e4f5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e4f9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e4fd:	83 c4 20             	add    esp,0x20
c000e500:	6a 00                	push   0x0
c000e502:	6a 00                	push   0x0
c000e504:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e508:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e50c:	e8 36 a1 01 00       	call   c0028647 <__ltdf2>
c000e511:	83 c4 10             	add    esp,0x10
c000e514:	85 c0                	test   eax,eax
c000e516:	79 1e                	jns    c000e536 <zoh_vari_process+0x5e4>
c000e518:	68 00 00 f0 3f       	push   0x3ff00000
c000e51d:	6a 00                	push   0x0
c000e51f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e523:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e527:	e8 cf 91 01 00       	call   c00276fb <__adddf3>
c000e52c:	83 c4 10             	add    esp,0x10
c000e52f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e532:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e536:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e539:	83 ec 10             	sub    esp,0x10
c000e53c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e540:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e544:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e548:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e54c:	e8 fb 97 01 00       	call   c0027d4c <__subdf3>
c000e551:	e9 51 fd ff ff       	jmp    c000e2a7 <zoh_vari_process+0x355>
c000e556:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e55a:	7d 3a                	jge    c000e596 <zoh_vari_process+0x644>
c000e55c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e560:	83 ec 0c             	sub    esp,0xc
c000e563:	29 e8                	sub    eax,ebp
c000e565:	99                   	cdq    
c000e566:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e569:	50                   	push   eax
c000e56a:	e8 6c 9e 01 00       	call   c00283db <__floatsidf>
c000e56f:	83 c4 10             	add    esp,0x10
c000e572:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e576:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e57a:	52                   	push   edx
c000e57b:	50                   	push   eax
c000e57c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e580:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e584:	e8 72 91 01 00       	call   c00276fb <__adddf3>
c000e589:	83 c4 10             	add    esp,0x10
c000e58c:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e58f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e592:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e596:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e599:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e59d:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e5a0:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e5a3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e5a6:	85 c0                	test   eax,eax
c000e5a8:	7f 25                	jg     c000e5cf <zoh_vari_process+0x67d>
c000e5aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e5ae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e5b2:	89 07                	mov    DWORD PTR [edi],eax
c000e5b4:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e5b7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e5ba:	99                   	cdq    
c000e5bb:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e5be:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e5c1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e5c4:	99                   	cdq    
c000e5c5:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e5c8:	31 d2                	xor    edx,edx
c000e5ca:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e5cd:	eb 1e                	jmp    c000e5ed <zoh_vari_process+0x69b>
c000e5cf:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e5d2:	31 d2                	xor    edx,edx
c000e5d4:	29 c8                	sub    eax,ecx
c000e5d6:	c1 e0 02             	shl    eax,0x2
c000e5d9:	39 d1                	cmp    ecx,edx
c000e5db:	7e cd                	jle    c000e5aa <zoh_vari_process+0x658>
c000e5dd:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e5df:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e5e3:	83 c0 04             	add    eax,0x4
c000e5e6:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e5ea:	42                   	inc    edx
c000e5eb:	eb ec                	jmp    c000e5d9 <zoh_vari_process+0x687>
c000e5ed:	83 c4 3c             	add    esp,0x3c
c000e5f0:	89 d0                	mov    eax,edx
c000e5f2:	5b                   	pop    ebx
c000e5f3:	5e                   	pop    esi
c000e5f4:	5f                   	pop    edi
c000e5f5:	5d                   	pop    ebp
c000e5f6:	c3                   	ret    

c000e5f7 <zoh_reset>:
c000e5f7:	83 ec 0c             	sub    esp,0xc
c000e5fa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e5fe:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e601:	85 c0                	test   eax,eax
c000e603:	74 20                	je     c000e625 <zoh_reset+0x2e>
c000e605:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e608:	83 c0 1c             	add    eax,0x1c
c000e60b:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e60e:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e615:	c1 e2 02             	shl    edx,0x2
c000e618:	51                   	push   ecx
c000e619:	52                   	push   edx
c000e61a:	6a 00                	push   0x0
c000e61c:	50                   	push   eax
c000e61d:	e8 2e 21 ff ff       	call   c0000750 <memset>
c000e622:	83 c4 10             	add    esp,0x10
c000e625:	83 c4 0c             	add    esp,0xc
c000e628:	c3                   	ret    

c000e629 <zoh_get_name>:
c000e629:	31 c0                	xor    eax,eax
c000e62b:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e630:	75 05                	jne    c000e637 <zoh_get_name+0xe>
c000e632:	b8 be a1 02 c0       	mov    eax,0xc002a1be
c000e637:	c3                   	ret    

c000e638 <zoh_get_description>:
c000e638:	31 c0                	xor    eax,eax
c000e63a:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e63f:	75 05                	jne    c000e646 <zoh_get_description+0xe>
c000e641:	b8 cf a1 02 c0       	mov    eax,0xc002a1cf
c000e646:	c3                   	ret    

c000e647 <zoh_set_converter>:
c000e647:	53                   	push   ebx
c000e648:	b8 0a 00 00 00       	mov    eax,0xa
c000e64d:	83 ec 08             	sub    esp,0x8
c000e650:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e654:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e659:	75 6e                	jne    c000e6c9 <zoh_set_converter+0x82>
c000e65b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e65e:	85 c0                	test   eax,eax
c000e660:	74 13                	je     c000e675 <zoh_set_converter+0x2e>
c000e662:	83 ec 0c             	sub    esp,0xc
c000e665:	50                   	push   eax
c000e666:	e8 be 11 00 00       	call   c000f829 <free>
c000e66b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e672:	83 c4 10             	add    esp,0x10
c000e675:	50                   	push   eax
c000e676:	50                   	push   eax
c000e677:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e67a:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e681:	50                   	push   eax
c000e682:	6a 01                	push   0x1
c000e684:	e8 c0 11 00 00       	call   c000f849 <calloc>
c000e689:	83 c4 10             	add    esp,0x10
c000e68c:	89 c2                	mov    edx,eax
c000e68e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e691:	85 d2                	test   edx,edx
c000e693:	b8 01 00 00 00       	mov    eax,0x1
c000e698:	74 2f                	je     c000e6c9 <zoh_set_converter+0x82>
c000e69a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e69d:	83 ec 0c             	sub    esp,0xc
c000e6a0:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e6a3:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e6a9:	c7 43 24 52 df 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000df52
c000e6b0:	c7 43 20 52 df 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000df52
c000e6b7:	c7 43 28 f7 e5 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e5f7
c000e6be:	53                   	push   ebx
c000e6bf:	e8 33 ff ff ff       	call   c000e5f7 <zoh_reset>
c000e6c4:	83 c4 10             	add    esp,0x10
c000e6c7:	31 c0                	xor    eax,eax
c000e6c9:	83 c4 08             	add    esp,0x8
c000e6cc:	5b                   	pop    ebx
c000e6cd:	c3                   	ret    

c000e6ce <CPU::current()>:
c000e6ce:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c000e6d3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e6d9:	c3                   	ret    

c000e6da <operator new(unsigned long)>:
c000e6da:	e9 3a 11 00 00       	jmp    c000f819 <malloc>

c000e6df <operator delete(void*)>:
c000e6df:	e9 55 11 00 00       	jmp    c000f839 <rfree>

c000e6e4 <disableIRQs()>:
c000e6e4:	fa                   	cli    
c000e6e5:	ff 05 28 f7 02 c0    	inc    DWORD PTR ds:0xc002f728
c000e6eb:	c3                   	ret    

c000e6ec <enableIRQs()>:
c000e6ec:	a1 28 f7 02 c0       	mov    eax,ds:0xc002f728
c000e6f1:	48                   	dec    eax
c000e6f2:	a3 28 f7 02 c0       	mov    ds:0xc002f728,eax
c000e6f7:	75 01                	jne    c000e6fa <enableIRQs()+0xe>
c000e6f9:	fb                   	sti    
c000e6fa:	c3                   	ret    

c000e6fb <lockScheduler()>:
c000e6fb:	fa                   	cli    
c000e6fc:	ff 05 28 f7 02 c0    	inc    DWORD PTR ds:0xc002f728
c000e702:	c3                   	ret    

c000e703 <unlockScheduler()>:
c000e703:	a1 28 f7 02 c0       	mov    eax,ds:0xc002f728
c000e708:	48                   	dec    eax
c000e709:	a3 28 f7 02 c0       	mov    ds:0xc002f728,eax
c000e70e:	75 01                	jne    c000e711 <unlockScheduler()+0xe>
c000e710:	fb                   	sti    
c000e711:	c3                   	ret    

c000e712 <lockStuff()>:
c000e712:	fa                   	cli    
c000e713:	ff 05 28 f7 02 c0    	inc    DWORD PTR ds:0xc002f728
c000e719:	ff 05 24 f7 02 c0    	inc    DWORD PTR ds:0xc002f724
c000e71f:	c3                   	ret    

c000e720 <unlockStuff()>:
c000e720:	83 ec 0c             	sub    esp,0xc
c000e723:	a1 24 f7 02 c0       	mov    eax,ds:0xc002f724
c000e728:	48                   	dec    eax
c000e729:	a3 24 f7 02 c0       	mov    ds:0xc002f724,eax
c000e72e:	75 18                	jne    c000e748 <unlockStuff()+0x28>
c000e730:	83 3d 20 f7 02 c0 00 	cmp    DWORD PTR ds:0xc002f720,0x0
c000e737:	74 0f                	je     c000e748 <unlockStuff()+0x28>
c000e739:	c7 05 20 f7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f720,0x0
c000e743:	e8 87 f5 00 00       	call   c001dccf <schedule()>
c000e748:	a1 28 f7 02 c0       	mov    eax,ds:0xc002f728
c000e74d:	48                   	dec    eax
c000e74e:	a3 28 f7 02 c0       	mov    ds:0xc002f728,eax
c000e753:	75 01                	jne    c000e756 <unlockStuff()+0x36>
c000e755:	fb                   	sti    
c000e756:	83 c4 0c             	add    esp,0xc
c000e759:	c3                   	ret    

c000e75a <Virt::getAKernelVAS()>:
c000e75a:	a1 90 e3 02 c0       	mov    eax,ds:0xc002e390
c000e75f:	c3                   	ret    

c000e760 <__not_memcpy>:
c000e760:	57                   	push   edi
c000e761:	56                   	push   esi
c000e762:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e766:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e76a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e76e:	89 c7                	mov    edi,eax
c000e770:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e772:	5e                   	pop    esi
c000e773:	5f                   	pop    edi
c000e774:	c3                   	ret    

c000e775 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e775:	83 ec 0c             	sub    esp,0xc
c000e778:	83 ec 08             	sub    esp,0x8
c000e77b:	68 06 a2 02 c0       	push   0xc002a206
c000e780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e784:	e8 0f 21 ff ff       	call   c0000898 <strcmp>
c000e789:	83 c4 10             	add    esp,0x10
c000e78c:	85 c0                	test   eax,eax
c000e78e:	0f 94 c0             	sete   al
c000e791:	84 c0                	test   al,al
c000e793:	74 0a                	je     c000e79f <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e795:	b8 28 e2 02 c0       	mov    eax,0xc002e228
c000e79a:	e9 e3 00 00 00       	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e79f:	83 ec 08             	sub    esp,0x8
c000e7a2:	68 0f a2 02 c0       	push   0xc002a20f
c000e7a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7ab:	e8 e8 20 ff ff       	call   c0000898 <strcmp>
c000e7b0:	83 c4 10             	add    esp,0x10
c000e7b3:	85 c0                	test   eax,eax
c000e7b5:	0f 94 c0             	sete   al
c000e7b8:	84 c0                	test   al,al
c000e7ba:	74 0a                	je     c000e7c6 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e7bc:	b8 74 6b 02 c0       	mov    eax,0xc0026b74
c000e7c1:	e9 bc 00 00 00       	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e7c6:	83 ec 08             	sub    esp,0x8
c000e7c9:	68 19 a2 02 c0       	push   0xc002a219
c000e7ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7d2:	e8 c1 20 ff ff       	call   c0000898 <strcmp>
c000e7d7:	83 c4 10             	add    esp,0x10
c000e7da:	85 c0                	test   eax,eax
c000e7dc:	0f 94 c0             	sete   al
c000e7df:	84 c0                	test   al,al
c000e7e1:	74 0a                	je     c000e7ed <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e7e3:	b8 a8 68 02 c0       	mov    eax,0xc00268a8
c000e7e8:	e9 95 00 00 00       	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e7ed:	83 ec 08             	sub    esp,0x8
c000e7f0:	68 22 a2 02 c0       	push   0xc002a222
c000e7f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7f9:	e8 9a 20 ff ff       	call   c0000898 <strcmp>
c000e7fe:	83 c4 10             	add    esp,0x10
c000e801:	85 c0                	test   eax,eax
c000e803:	0f 94 c0             	sete   al
c000e806:	84 c0                	test   al,al
c000e808:	74 07                	je     c000e811 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e80a:	b8 74 6c 02 c0       	mov    eax,0xc0026c74
c000e80f:	eb 71                	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e811:	83 ec 08             	sub    esp,0x8
c000e814:	68 2c a2 02 c0       	push   0xc002a22c
c000e819:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e81d:	e8 76 20 ff ff       	call   c0000898 <strcmp>
c000e822:	83 c4 10             	add    esp,0x10
c000e825:	85 c0                	test   eax,eax
c000e827:	0f 94 c0             	sete   al
c000e82a:	84 c0                	test   al,al
c000e82c:	74 07                	je     c000e835 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e82e:	b8 f4 69 02 c0       	mov    eax,0xc00269f4
c000e833:	eb 4d                	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e835:	83 ec 08             	sub    esp,0x8
c000e838:	68 35 a2 02 c0       	push   0xc002a235
c000e83d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e841:	e8 52 20 ff ff       	call   c0000898 <strcmp>
c000e846:	83 c4 10             	add    esp,0x10
c000e849:	85 c0                	test   eax,eax
c000e84b:	0f 94 c0             	sete   al
c000e84e:	84 c0                	test   al,al
c000e850:	74 07                	je     c000e859 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e852:	b8 2c e2 02 c0       	mov    eax,0xc002e22c
c000e857:	eb 29                	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e859:	83 ec 08             	sub    esp,0x8
c000e85c:	68 42 a2 02 c0       	push   0xc002a242
c000e861:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e865:	e8 2e 20 ff ff       	call   c0000898 <strcmp>
c000e86a:	83 c4 10             	add    esp,0x10
c000e86d:	85 c0                	test   eax,eax
c000e86f:	0f 94 c0             	sete   al
c000e872:	84 c0                	test   al,al
c000e874:	74 07                	je     c000e87d <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e876:	b8 2d e2 02 c0       	mov    eax,0xc002e22d
c000e87b:	eb 05                	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e87d:	b8 00 00 00 00       	mov    eax,0x0
c000e882:	83 c4 0c             	add    esp,0xc
c000e885:	c3                   	ret    

c000e886 <Computer::close(int, int, void*)>:
c000e886:	57                   	push   edi
c000e887:	56                   	push   esi
c000e888:	53                   	push   ebx
c000e889:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e88d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e891:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e895:	83 ec 0c             	sub    esp,0xc
c000e898:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e89e:	e8 91 55 00 00       	call   c0013e34 <Device::closeAll()>
c000e8a3:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e8a9:	83 c4 10             	add    esp,0x10
c000e8ac:	8b 10                	mov    edx,DWORD PTR [eax]
c000e8ae:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e8b2:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e8ba:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e8be:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e8c2:	5b                   	pop    ebx
c000e8c3:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e8c6:	5e                   	pop    esi
c000e8c7:	5f                   	pop    edi
c000e8c8:	ff e0                	jmp    eax

c000e8ca <Krnl::firstTask()>:
c000e8ca:	53                   	push   ebx
c000e8cb:	83 ec 14             	sub    esp,0x14
c000e8ce:	68 4f a2 02 c0       	push   0xc002a24f
c000e8d3:	e8 9b 0f 00 00       	call   c000f873 <Krnl::setBootMessage(char const*)>
c000e8d8:	fb                   	sti    
c000e8d9:	c7 04 24 66 a2 02 c0 	mov    DWORD PTR [esp],0xc002a266
c000e8e0:	e8 8e 0f 00 00       	call   c000f873 <Krnl::setBootMessage(char const*)>
c000e8e5:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c000e8ec:	e8 28 0f 00 00       	call   c000f819 <malloc>
c000e8f1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e8f8:	89 c3                	mov    ebx,eax
c000e8fa:	ff 35 50 f7 02 c0    	push   DWORD PTR ds:0xc002f750
c000e900:	68 7f a2 02 c0       	push   0xc002a27f
c000e905:	6a 01                	push   0x1
c000e907:	50                   	push   eax
c000e908:	e8 a5 ef 00 00       	call   c001d8b2 <Process::Process(bool, char const*, Process*, char**)>
c000e90d:	83 c4 20             	add    esp,0x20
c000e910:	68 ff 00 00 00       	push   0xff
c000e915:	6a 00                	push   0x0
c000e917:	68 af f1 00 c0       	push   0xc000f1af
c000e91c:	53                   	push   ebx
c000e91d:	e8 88 f1 00 00       	call   c001daaa <Process::createThread(void (*)(void*), void*, int)>
c000e922:	6a 7a                	push   0x7a
c000e924:	6a 00                	push   0x0
c000e926:	68 9d e4 01 c0       	push   0xc001e49d
c000e92b:	ff 35 50 f7 02 c0    	push   DWORD PTR ds:0xc002f750
c000e931:	e8 74 f1 00 00       	call   c001daaa <Process::createThread(void (*)(void*), void*, int)>
c000e936:	83 c4 14             	add    esp,0x14
c000e939:	a3 08 f7 02 c0       	mov    ds:0xc002f708,eax
c000e93e:	68 8c a3 02 c0       	push   0xc002a38c
c000e943:	c6 05 2d e2 02 c0 01 	mov    BYTE PTR ds:0xc002e22d,0x1
c000e94a:	e8 24 0f 00 00       	call   c000f873 <Krnl::setBootMessage(char const*)>
c000e94f:	e8 f5 fe 00 00       	call   c001e849 <Vm::initialise8086()>
c000e954:	e8 a3 42 00 00       	call   c0012bfc <Fs::initVFS()>
c000e959:	c7 04 24 8c a2 02 c0 	mov    DWORD PTR [esp],0xc002a28c
c000e960:	e8 0e 0f 00 00       	call   c000f873 <Krnl::setBootMessage(char const*)>
c000e965:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c000e96a:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e970:	8b 10                	mov    edx,DWORD PTR [eax]
c000e972:	6a 00                	push   0x0
c000e974:	6a 00                	push   0x0
c000e976:	6a 00                	push   0x0
c000e978:	50                   	push   eax
c000e979:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e97c:	83 c4 14             	add    esp,0x14
c000e97f:	68 8c a3 02 c0       	push   0xc002a38c
c000e984:	e8 ea 0e 00 00       	call   c000f873 <Krnl::setBootMessage(char const*)>
c000e989:	e8 ac d7 00 00       	call   c001c13a <Sys::loadSyscalls()>
c000e98e:	e8 a1 b6 00 00       	call   c001a034 <Krnl::loadSystemEnv()>
c000e993:	83 c4 0c             	add    esp,0xc
c000e996:	6a 3a                	push   0x3a
c000e998:	68 a6 a2 02 c0       	push   0xc002a2a6
c000e99d:	68 af a2 02 c0       	push   0xc002a2af
c000e9a2:	e8 52 c5 00 00       	call   c001aef9 <Reg::readIntWithDefault(char*, char*, int)>
c000e9a7:	89 04 24             	mov    DWORD PTR [esp],eax
c000e9aa:	e8 3d 4d 00 00       	call   c00136ec <User::loadClockSettings(int)>
c000e9af:	c7 04 24 b0 a3 02 c0 	mov    DWORD PTR [esp],0xc002a3b0
c000e9b6:	e8 b8 0e 00 00       	call   c000f873 <Krnl::setBootMessage(char const*)>
c000e9bb:	58                   	pop    eax
c000e9bc:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c000e9c1:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e9c7:	e8 28 54 00 00       	call   c0013df4 <Device::loadDriversForAll()>
c000e9cc:	c7 04 24 b7 a2 02 c0 	mov    DWORD PTR [esp],0xc002a2b7
c000e9d3:	e8 9b 0e 00 00       	call   c000f873 <Krnl::setBootMessage(char const*)>
c000e9d8:	e8 bf b1 00 00       	call   c0019b9c <Krnl::startCPUs()>
c000e9dd:	c7 04 24 d1 a2 02 c0 	mov    DWORD PTR [esp],0xc002a2d1
c000e9e4:	e8 8a 0e 00 00       	call   c000f873 <Krnl::setBootMessage(char const*)>
c000e9e9:	5a                   	pop    edx
c000e9ea:	8b 1d 28 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e228
c000e9f0:	59                   	pop    ecx
c000e9f1:	6a 01                	push   0x1
c000e9f3:	68 e2 a2 02 c0       	push   0xc002a2e2
c000e9f8:	e8 0d e9 00 00       	call   c001d30a <Thr::loadDLL(char const*, bool)>
c000e9fd:	5a                   	pop    edx
c000e9fe:	59                   	pop    ecx
c000e9ff:	53                   	push   ebx
c000ea00:	50                   	push   eax
c000ea01:	e8 35 eb 00 00       	call   c001d53b <Thr::executeDLL(unsigned long, void*)>
c000ea06:	83 c4 10             	add    esp,0x10
c000ea09:	83 ec 0c             	sub    esp,0xc
c000ea0c:	6a 02                	push   0x2
c000ea0e:	e8 92 f4 00 00       	call   c001dea5 <blockTask(TaskState)>
c000ea13:	83 c4 10             	add    esp,0x10
c000ea16:	eb f1                	jmp    c000ea09 <Krnl::firstTask()+0x13f>

c000ea18 <Computer::Computer()>:
c000ea18:	83 ec 0c             	sub    esp,0xc
c000ea1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea1f:	83 ec 08             	sub    esp,0x8
c000ea22:	68 fe a2 02 c0       	push   0xc002a2fe
c000ea27:	50                   	push   eax
c000ea28:	e8 81 54 00 00       	call   c0013eae <Device::Device(char const*)>
c000ea2d:	83 c4 10             	add    esp,0x10
c000ea30:	ba 60 a4 02 c0       	mov    edx,0xc002a460
c000ea35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea39:	89 10                	mov    DWORD PTR [eax],edx
c000ea3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea3f:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000ea49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea4d:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000ea57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea5b:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000ea61:	83 ca 04             	or     edx,0x4
c000ea64:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000ea6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea6e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ea74:	0f b6 d0             	movzx  edx,al
c000ea77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea7b:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000ea82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea86:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ea8c:	0f b6 d0             	movzx  edx,al
c000ea8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea93:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000ea98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea9c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000eaa2:	8d 50 01             	lea    edx,[eax+0x1]
c000eaa5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000eaa9:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000eaaf:	0f b6 d0             	movzx  edx,al
c000eab2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eab6:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000eaba:	83 e1 3f             	and    ecx,0x3f
c000eabd:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000eac1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eac5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000eacb:	0f b6 d0             	movzx  edx,al
c000eace:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ead2:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000ead9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eadd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000eae3:	0f b6 d0             	movzx  edx,al
c000eae6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eaea:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000eaef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eaf3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000eaf9:	8d 50 01             	lea    edx,[eax+0x1]
c000eafc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000eb00:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000eb06:	0f b6 d0             	movzx  edx,al
c000eb09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb0d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000eb11:	83 e1 3f             	and    ecx,0x3f
c000eb14:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000eb18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb1c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000eb22:	0f b6 d0             	movzx  edx,al
c000eb25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb29:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000eb30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb34:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000eb3a:	0f b6 d0             	movzx  edx,al
c000eb3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb41:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000eb46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb4a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000eb50:	8d 50 01             	lea    edx,[eax+0x1]
c000eb53:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000eb57:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000eb5d:	0f b6 d0             	movzx  edx,al
c000eb60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb64:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000eb68:	83 e1 3f             	and    ecx,0x3f
c000eb6b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000eb6f:	90                   	nop
c000eb70:	83 c4 0c             	add    esp,0xc
c000eb73:	c3                   	ret    

c000eb74 <Computer::setBootMessage(char const*)>:
c000eb74:	c3                   	ret    
c000eb75:	90                   	nop

c000eb76 <Computer::detectFeatures()>:
c000eb76:	55                   	push   ebp
c000eb77:	57                   	push   edi
c000eb78:	56                   	push   esi
c000eb79:	53                   	push   ebx
c000eb7a:	83 ec 1c             	sub    esp,0x1c
c000eb7d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000eb81:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000eb8b:	e8 54 17 ff ff       	call   c00002e4 <detectCPUID>
c000eb90:	85 c0                	test   eax,eax
c000eb92:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eb98:	0f 95 c2             	setne  dl
c000eb9b:	83 e0 fd             	and    eax,0xfffffffd
c000eb9e:	d1 e2                	shl    edx,1
c000eba0:	09 d0                	or     eax,edx
c000eba2:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eba8:	a8 02                	test   al,0x2
c000ebaa:	75 46                	jne    c000ebf2 <Computer::detectFeatures()+0x7c>
c000ebac:	f6 05 41 e2 02 c0 04 	test   BYTE PTR ds:0xc002e241,0x4
c000ebb3:	74 07                	je     c000ebbc <Computer::detectFeatures()+0x46>
c000ebb5:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000ebbc:	e8 75 7c 01 00       	call   c0026836 <x87Detect>
c000ebc1:	83 e0 01             	and    eax,0x1
c000ebc4:	c1 e0 04             	shl    eax,0x4
c000ebc7:	88 c2                	mov    dl,al
c000ebc9:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ebcf:	83 e0 ef             	and    eax,0xffffffef
c000ebd2:	09 d0                	or     eax,edx
c000ebd4:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ebda:	a8 10                	test   al,0x10
c000ebdc:	0f 85 2a 01 00 00    	jne    c000ed0c <Computer::detectFeatures()+0x196>
c000ebe2:	84 c0                	test   al,al
c000ebe4:	0f 88 45 01 00 00    	js     c000ed2f <Computer::detectFeatures()+0x1b9>
c000ebea:	83 c4 1c             	add    esp,0x1c
c000ebed:	5b                   	pop    ebx
c000ebee:	5e                   	pop    esi
c000ebef:	5f                   	pop    edi
c000ebf0:	5d                   	pop    ebp
c000ebf1:	c3                   	ret    
c000ebf2:	83 ec 0c             	sub    esp,0xc
c000ebf5:	6a 20                	push   0x20
c000ebf7:	e8 a2 9e 00 00       	call   c0018a9e <CPU::cpuidCheckEDX(unsigned int)>
c000ebfc:	83 e0 01             	and    eax,0x1
c000ebff:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000ec06:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ec0c:	83 e0 f7             	and    eax,0xfffffff7
c000ec0f:	09 d0                	or     eax,edx
c000ec11:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ec17:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000ec1e:	e8 7b 9e 00 00       	call   c0018a9e <CPU::cpuidCheckEDX(unsigned int)>
c000ec23:	83 e0 01             	and    eax,0x1
c000ec26:	88 c2                	mov    dl,al
c000ec28:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ec2e:	83 e0 fe             	and    eax,0xfffffffe
c000ec31:	09 d0                	or     eax,edx
c000ec33:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ec39:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000ec40:	e8 59 9e 00 00       	call   c0018a9e <CPU::cpuidCheckEDX(unsigned int)>
c000ec45:	c1 e0 07             	shl    eax,0x7
c000ec48:	88 c2                	mov    dl,al
c000ec4a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ec50:	83 e0 7f             	and    eax,0x7f
c000ec53:	09 d0                	or     eax,edx
c000ec55:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ec5b:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000ec62:	e8 37 9e 00 00       	call   c0018a9e <CPU::cpuidCheckEDX(unsigned int)>
c000ec67:	83 c4 10             	add    esp,0x10
c000ec6a:	83 e0 01             	and    eax,0x1
c000ec6d:	c1 e0 05             	shl    eax,0x5
c000ec70:	88 c2                	mov    dl,al
c000ec72:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ec78:	83 e0 df             	and    eax,0xffffffdf
c000ec7b:	09 d0                	or     eax,edx
c000ec7d:	f7 05 40 e2 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002e240,0x401
c000ec87:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ec8d:	0f 84 c2 00 00 00    	je     c000ed55 <Computer::detectFeatures()+0x1df>
c000ec93:	83 e0 fe             	and    eax,0xfffffffe
c000ec96:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ec9c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eca2:	88 c2                	mov    dl,al
c000eca4:	83 e2 09             	and    edx,0x9
c000eca7:	fe ca                	dec    dl
c000eca9:	75 09                	jne    c000ecb4 <Computer::detectFeatures()+0x13e>
c000ecab:	83 e0 fe             	and    eax,0xfffffffe
c000ecae:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ecb4:	83 ec 0c             	sub    esp,0xc
c000ecb7:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ecbb:	50                   	push   eax
c000ecbc:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000ecc0:	55                   	push   ebp
c000ecc1:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ecc5:	57                   	push   edi
c000ecc6:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ecca:	56                   	push   esi
c000eccb:	68 00 00 00 80       	push   0x80000000
c000ecd0:	e8 45 9d 00 00       	call   c0018a1a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ecd5:	83 c4 20             	add    esp,0x20
c000ecd8:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ecdf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ece3:	0f 86 c3 fe ff ff    	jbe    c000ebac <Computer::detectFeatures()+0x36>
c000ece9:	83 ec 0c             	sub    esp,0xc
c000ecec:	50                   	push   eax
c000eced:	55                   	push   ebp
c000ecee:	57                   	push   edi
c000ecef:	56                   	push   esi
c000ecf0:	68 01 00 00 80       	push   0x80000001
c000ecf5:	e8 20 9d 00 00       	call   c0018a1a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ecfa:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ed04:	83 c4 20             	add    esp,0x20
c000ed07:	e9 a0 fe ff ff       	jmp    c000ebac <Computer::detectFeatures()+0x36>
c000ed0c:	e8 df 7a 01 00       	call   c00267f0 <absolutelyNoChanceInHell>
c000ed11:	88 c2                	mov    dl,al
c000ed13:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ed19:	c1 e2 07             	shl    edx,0x7
c000ed1c:	83 e0 7f             	and    eax,0x7f
c000ed1f:	09 d0                	or     eax,edx
c000ed21:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ed27:	84 c0                	test   al,al
c000ed29:	0f 89 bb fe ff ff    	jns    c000ebea <Computer::detectFeatures()+0x74>
c000ed2f:	e8 9c 7a 01 00       	call   c00267d0 <avxDetect>
c000ed34:	83 e0 01             	and    eax,0x1
c000ed37:	c1 e0 05             	shl    eax,0x5
c000ed3a:	88 c2                	mov    dl,al
c000ed3c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ed42:	83 e0 df             	and    eax,0xffffffdf
c000ed45:	09 d0                	or     eax,edx
c000ed47:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ed4d:	83 c4 1c             	add    esp,0x1c
c000ed50:	5b                   	pop    ebx
c000ed51:	5e                   	pop    esi
c000ed52:	5f                   	pop    edi
c000ed53:	5d                   	pop    ebp
c000ed54:	c3                   	ret    
c000ed55:	83 ec 0c             	sub    esp,0xc
c000ed58:	68 00 02 00 00       	push   0x200
c000ed5d:	e8 3c 9d 00 00       	call   c0018a9e <CPU::cpuidCheckEDX(unsigned int)>
c000ed62:	83 c4 10             	add    esp,0x10
c000ed65:	83 e0 01             	and    eax,0x1
c000ed68:	88 c2                	mov    dl,al
c000ed6a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ed70:	83 e0 fe             	and    eax,0xfffffffe
c000ed73:	09 d0                	or     eax,edx
c000ed75:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ed7b:	e9 1c ff ff ff       	jmp    c000ec9c <Computer::detectFeatures()+0x126>

c000ed80 <Computer::displayFeatures()>:
c000ed80:	c3                   	ret    
c000ed81:	90                   	nop

c000ed82 <Computer::rdmsr(unsigned int)>:
c000ed82:	83 ec 0c             	sub    esp,0xc
c000ed85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed89:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ed90:	74 0a                	je     c000ed9c <Computer::rdmsr(unsigned int)+0x1a>
c000ed92:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ed96:	0f 32                	rdmsr  
c000ed98:	83 c4 0c             	add    esp,0xc
c000ed9b:	c3                   	ret    
c000ed9c:	83 ec 0c             	sub    esp,0xc
c000ed9f:	68 07 a3 02 c0       	push   0xc002a307
c000eda4:	e8 94 b3 00 00       	call   c001a13d <Krnl::panic(char const*)>
c000eda9:	83 c4 10             	add    esp,0x10
c000edac:	eb e4                	jmp    c000ed92 <Computer::rdmsr(unsigned int)+0x10>

c000edae <Computer::wrmsr(unsigned int, unsigned long long)>:
c000edae:	57                   	push   edi
c000edaf:	56                   	push   esi
c000edb0:	52                   	push   edx
c000edb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edb5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000edb9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000edbd:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000edc4:	74 0e                	je     c000edd4 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000edc6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000edca:	89 f0                	mov    eax,esi
c000edcc:	89 fa                	mov    edx,edi
c000edce:	0f 30                	wrmsr  
c000edd0:	58                   	pop    eax
c000edd1:	5e                   	pop    esi
c000edd2:	5f                   	pop    edi
c000edd3:	c3                   	ret    
c000edd4:	83 ec 0c             	sub    esp,0xc
c000edd7:	68 0d a3 02 c0       	push   0xc002a30d
c000eddc:	e8 5c b3 00 00       	call   c001a13d <Krnl::panic(char const*)>
c000ede1:	83 c4 10             	add    esp,0x10
c000ede4:	eb e0                	jmp    c000edc6 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ede6 <Computer::nmiEnabled()>:
c000ede6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edea:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000edf0:	c3                   	ret    
c000edf1:	90                   	nop

c000edf2 <Computer::readCMOS(unsigned char)>:
c000edf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edf6:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000edfd:	19 c0                	sbb    eax,eax
c000edff:	83 e0 80             	and    eax,0xffffff80
c000ee02:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ee06:	e6 70                	out    0x70,al
c000ee08:	e4 71                	in     al,0x71
c000ee0a:	c3                   	ret    
c000ee0b:	90                   	nop

c000ee0c <Computer::enableNMI(bool)>:
c000ee0c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee14:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ee1a:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ee22:	eb ce                	jmp    c000edf2 <Computer::readCMOS(unsigned char)>

c000ee24 <Computer::open(int, int, void*)>:
c000ee24:	56                   	push   esi
c000ee25:	53                   	push   ebx
c000ee26:	83 ec 10             	sub    esp,0x10
c000ee29:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee2d:	68 d0 a3 02 c0       	push   0xc002a3d0
c000ee32:	e8 3c 0a 00 00       	call   c000f873 <Krnl::setBootMessage(char const*)>
c000ee37:	f6 05 40 e2 02 c0 04 	test   BYTE PTR ds:0xc002e240,0x4
c000ee3e:	c7 04 24 13 a3 02 c0 	mov    DWORD PTR [esp],0xc002a313
c000ee45:	0f 94 05 60 d1 02 c0 	sete   BYTE PTR ds:0xc002d160
c000ee4c:	e8 22 0a 00 00       	call   c000f873 <Krnl::setBootMessage(char const*)>
c000ee51:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000ee58:	e8 bc 09 00 00       	call   c000f819 <malloc>
c000ee5d:	89 04 24             	mov    DWORD PTR [esp],eax
c000ee60:	89 c6                	mov    esi,eax
c000ee62:	e8 ab 8e 00 00       	call   c0017d12 <ACPI::ACPI()>
c000ee67:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ee6d:	58                   	pop    eax
c000ee6e:	5a                   	pop    edx
c000ee6f:	56                   	push   esi
c000ee70:	53                   	push   ebx
c000ee71:	e8 34 4e 00 00       	call   c0013caa <Device::addChild(Device*)>
c000ee76:	c7 04 24 f4 a3 02 c0 	mov    DWORD PTR [esp],0xc002a3f4
c000ee7d:	e8 f1 09 00 00       	call   c000f873 <Krnl::setBootMessage(char const*)>
c000ee82:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ee85:	e8 ec fc ff ff       	call   c000eb76 <Computer::detectFeatures()>
c000ee8a:	c7 04 24 14 a4 02 c0 	mov    DWORD PTR [esp],0xc002a414
c000ee91:	e8 dd 09 00 00       	call   c000f873 <Krnl::setBootMessage(char const*)>
c000ee96:	c7 04 24 2b a3 02 c0 	mov    DWORD PTR [esp],0xc002a32b
c000ee9d:	e8 d1 09 00 00       	call   c000f873 <Krnl::setBootMessage(char const*)>
c000eea2:	59                   	pop    ecx
c000eea3:	5e                   	pop    esi
c000eea4:	6a 01                	push   0x1
c000eea6:	53                   	push   ebx
c000eea7:	e8 60 ff ff ff       	call   c000ee0c <Computer::enableNMI(bool)>
c000eeac:	c7 04 24 b7 a2 02 c0 	mov    DWORD PTR [esp],0xc002a2b7
c000eeb3:	e8 bb 09 00 00       	call   c000f873 <Krnl::setBootMessage(char const*)>
c000eeb8:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eebf:	e8 55 09 00 00       	call   c000f819 <malloc>
c000eec4:	89 c6                	mov    esi,eax
c000eec6:	89 04 24             	mov    DWORD PTR [esp],eax
c000eec9:	e8 88 9c 00 00       	call   c0018b56 <CPU::CPU()>
c000eece:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000eed4:	58                   	pop    eax
c000eed5:	5a                   	pop    edx
c000eed6:	56                   	push   esi
c000eed7:	53                   	push   ebx
c000eed8:	e8 cd 4d 00 00       	call   c0013caa <Device::addChild(Device*)>
c000eedd:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000eee3:	8b 10                	mov    edx,DWORD PTR [eax]
c000eee5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000eee9:	6a 00                	push   0x0
c000eeeb:	6a 00                	push   0x0
c000eeed:	50                   	push   eax
c000eeee:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000eef1:	83 c4 14             	add    esp,0x14
c000eef4:	68 34 a4 02 c0       	push   0xc002a434
c000eef9:	e8 75 09 00 00       	call   c000f873 <Krnl::setBootMessage(char const*)>
c000eefe:	e8 3f 53 00 00       	call   c0014242 <setupFPU()>
c000ef03:	83 c4 10             	add    esp,0x10
c000ef06:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef0c:	85 c0                	test   eax,eax
c000ef0e:	74 1f                	je     c000ef2f <Computer::open(int, int, void*)+0x10b>
c000ef10:	83 ec 08             	sub    esp,0x8
c000ef13:	50                   	push   eax
c000ef14:	53                   	push   ebx
c000ef15:	e8 90 4d 00 00       	call   c0013caa <Device::addChild(Device*)>
c000ef1a:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef20:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef22:	6a 00                	push   0x0
c000ef24:	6a 00                	push   0x0
c000ef26:	6a 00                	push   0x0
c000ef28:	50                   	push   eax
c000ef29:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef2c:	83 c4 20             	add    esp,0x20
c000ef2f:	83 ec 0c             	sub    esp,0xc
c000ef32:	68 3c a3 02 c0       	push   0xc002a33c
c000ef37:	e8 37 09 00 00       	call   c000f873 <Krnl::setBootMessage(char const*)>
c000ef3c:	c7 04 24 ca e8 00 c0 	mov    DWORD PTR [esp],0xc000e8ca
c000ef43:	e8 84 ec 00 00       	call   c001dbcc <setupMultitasking(void (*)())>
c000ef48:	83 c4 14             	add    esp,0x14
c000ef4b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef50:	5b                   	pop    ebx
c000ef51:	5e                   	pop    esi
c000ef52:	c3                   	ret    
c000ef53:	90                   	nop

c000ef54 <Computer::disableNMI()>:
c000ef54:	6a 00                	push   0x0
c000ef56:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ef5a:	e8 ad fe ff ff       	call   c000ee0c <Computer::enableNMI(bool)>
c000ef5f:	58                   	pop    eax
c000ef60:	5a                   	pop    edx
c000ef61:	c3                   	ret    

c000ef62 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ef62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef66:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ef6d:	19 c0                	sbb    eax,eax
c000ef6f:	83 e0 80             	and    eax,0xffffff80
c000ef72:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ef76:	e6 70                	out    0x70,al
c000ef78:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef7c:	e6 71                	out    0x71,al
c000ef7e:	c3                   	ret    
c000ef7f:	90                   	nop

c000ef80 <Computer::handleNMI()>:
c000ef80:	56                   	push   esi
c000ef81:	53                   	push   ebx
c000ef82:	83 ec 10             	sub    esp,0x10
c000ef85:	e4 92                	in     al,0x92
c000ef87:	89 c6                	mov    esi,eax
c000ef89:	e4 61                	in     al,0x61
c000ef8b:	68 57 a3 02 c0       	push   0xc002a357
c000ef90:	88 c3                	mov    bl,al
c000ef92:	e8 da 38 00 00       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c000ef97:	83 c4 10             	add    esp,0x10
c000ef9a:	83 e6 10             	and    esi,0x10
c000ef9d:	75 0d                	jne    c000efac <Computer::handleNMI()+0x2c>
c000ef9f:	f6 c3 40             	test   bl,0x40
c000efa2:	75 1d                	jne    c000efc1 <Computer::handleNMI()+0x41>
c000efa4:	84 db                	test   bl,bl
c000efa6:	78 2d                	js     c000efd5 <Computer::handleNMI()+0x55>
c000efa8:	58                   	pop    eax
c000efa9:	5b                   	pop    ebx
c000efaa:	5e                   	pop    esi
c000efab:	c3                   	ret    
c000efac:	83 ec 0c             	sub    esp,0xc
c000efaf:	68 68 a3 02 c0       	push   0xc002a368
c000efb4:	e8 84 b1 00 00       	call   c001a13d <Krnl::panic(char const*)>
c000efb9:	83 c4 10             	add    esp,0x10
c000efbc:	f6 c3 40             	test   bl,0x40
c000efbf:	74 e3                	je     c000efa4 <Computer::handleNMI()+0x24>
c000efc1:	83 ec 0c             	sub    esp,0xc
c000efc4:	68 75 a3 02 c0       	push   0xc002a375
c000efc9:	e8 6f b1 00 00       	call   c001a13d <Krnl::panic(char const*)>
c000efce:	83 c4 10             	add    esp,0x10
c000efd1:	84 db                	test   bl,bl
c000efd3:	79 d3                	jns    c000efa8 <Computer::handleNMI()+0x28>
c000efd5:	c7 44 24 10 7f a3 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a37f
c000efdd:	5a                   	pop    edx
c000efde:	5b                   	pop    ebx
c000efdf:	5e                   	pop    esi
c000efe0:	e9 58 b1 00 00       	jmp    c001a13d <Krnl::panic(char const*)>
c000efe5:	90                   	nop

c000efe6 <Computer::setDiskActivityLight(int, bool)>:
c000efe6:	56                   	push   esi
c000efe7:	53                   	push   ebx
c000efe8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000efec:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000eff1:	77 1b                	ja     c000f00e <Computer::setDiskActivityLight(int, bool)+0x28>
c000eff3:	e4 92                	in     al,0x92
c000eff5:	bb 40 00 00 00       	mov    ebx,0x40
c000effa:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000effe:	89 da                	mov    edx,ebx
c000f000:	d3 e2                	shl    edx,cl
c000f002:	89 f1                	mov    ecx,esi
c000f004:	f7 d2                	not    edx
c000f006:	d3 e3                	shl    ebx,cl
c000f008:	21 d0                	and    eax,edx
c000f00a:	09 d8                	or     eax,ebx
c000f00c:	e6 92                	out    0x92,al
c000f00e:	5b                   	pop    ebx
c000f00f:	5e                   	pop    esi
c000f010:	c3                   	ret    
c000f011:	90                   	nop

c000f012 <GDTEntry::setBase(unsigned int)>:
c000f012:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f016:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f01a:	89 c1                	mov    ecx,eax
c000f01c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f020:	c1 e9 10             	shr    ecx,0x10
c000f023:	c1 e8 18             	shr    eax,0x18
c000f026:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f029:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f02c:	c3                   	ret    
c000f02d:	90                   	nop

c000f02e <GDTEntry::setLimit(unsigned int)>:
c000f02e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f032:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f036:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f039:	66 89 01             	mov    WORD PTR [ecx],ax
c000f03c:	83 e2 f0             	and    edx,0xfffffff0
c000f03f:	c1 e8 10             	shr    eax,0x10
c000f042:	83 e0 0f             	and    eax,0xf
c000f045:	09 d0                	or     eax,edx
c000f047:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f04a:	c3                   	ret    
c000f04b:	90                   	nop

c000f04c <GDT::GDT()>:
c000f04c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f050:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f056:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f05a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f060:	90                   	nop
c000f061:	c3                   	ret    

c000f062 <GDT::addEntry(GDTEntry)>:
c000f062:	53                   	push   ebx
c000f063:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f067:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f06b:	8b 02                	mov    eax,DWORD PTR [edx]
c000f06d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f071:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000f075:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000f079:	8d 48 01             	lea    ecx,[eax+0x1]
c000f07c:	c1 e0 03             	shl    eax,0x3
c000f07f:	89 0a                	mov    DWORD PTR [edx],ecx
c000f081:	5b                   	pop    ebx
c000f082:	c3                   	ret    
c000f083:	90                   	nop

c000f084 <GDT::getNumberOfEntries()>:
c000f084:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f088:	8b 00                	mov    eax,DWORD PTR [eax]
c000f08a:	c3                   	ret    
c000f08b:	90                   	nop

c000f08c <GDT::flush()>:
c000f08c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f090:	8b 10                	mov    edx,DWORD PTR [eax]
c000f092:	83 c0 04             	add    eax,0x4
c000f095:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f09c:	a3 32 e2 02 c0       	mov    ds:0xc002e232,eax
c000f0a1:	66 89 15 30 e2 02 c0 	mov    WORD PTR ds:0xc002e230,dx
c000f0a8:	e9 a3 13 ff ff       	jmp    c0000450 <loadGDT>
c000f0ad:	90                   	nop

c000f0ae <GDT::setup()>:
c000f0ae:	55                   	push   ebp
c000f0af:	57                   	push   edi
c000f0b0:	56                   	push   esi
c000f0b1:	53                   	push   ebx
c000f0b2:	83 ec 3c             	sub    esp,0x3c
c000f0b5:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f0b9:	6a 00                	push   0x0
c000f0bb:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f0bf:	53                   	push   ebx
c000f0c0:	e8 4d ff ff ff       	call   c000f012 <GDTEntry::setBase(unsigned int)>
c000f0c5:	6a 00                	push   0x0
c000f0c7:	53                   	push   ebx
c000f0c8:	e8 61 ff ff ff       	call   c000f02e <GDTEntry::setLimit(unsigned int)>
c000f0cd:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f0d5:	6a 00                	push   0x0
c000f0d7:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f0db:	53                   	push   ebx
c000f0dc:	e8 31 ff ff ff       	call   c000f012 <GDTEntry::setBase(unsigned int)>
c000f0e1:	68 ff ff ff 00       	push   0xffffff
c000f0e6:	53                   	push   ebx
c000f0e7:	e8 42 ff ff ff       	call   c000f02e <GDTEntry::setLimit(unsigned int)>
c000f0ec:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f0f0:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f0f5:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f0fa:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f0fe:	83 c4 20             	add    esp,0x20
c000f101:	6a 00                	push   0x0
c000f103:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f107:	53                   	push   ebx
c000f108:	e8 05 ff ff ff       	call   c000f012 <GDTEntry::setBase(unsigned int)>
c000f10d:	68 ff ff ff 00       	push   0xffffff
c000f112:	53                   	push   ebx
c000f113:	e8 16 ff ff ff       	call   c000f02e <GDTEntry::setLimit(unsigned int)>
c000f118:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f11c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f120:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f124:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f128:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f12c:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f131:	0d 00 92 c0 00       	or     eax,0xc09200
c000f136:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f13a:	89 d8                	mov    eax,ebx
c000f13c:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f140:	80 cc 60             	or     ah,0x60
c000f143:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f147:	83 c4 0c             	add    esp,0xc
c000f14a:	89 f8                	mov    eax,edi
c000f14c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f150:	80 cc 60             	or     ah,0x60
c000f153:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f157:	89 c7                	mov    edi,eax
c000f159:	55                   	push   ebp
c000f15a:	e8 03 ff ff ff       	call   c000f062 <GDT::addEntry(GDTEntry)>
c000f15f:	83 c4 0c             	add    esp,0xc
c000f162:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f166:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f16a:	55                   	push   ebp
c000f16b:	e8 f2 fe ff ff       	call   c000f062 <GDT::addEntry(GDTEntry)>
c000f170:	83 c4 0c             	add    esp,0xc
c000f173:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f177:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f17b:	55                   	push   ebp
c000f17c:	e8 e1 fe ff ff       	call   c000f062 <GDT::addEntry(GDTEntry)>
c000f181:	83 c4 0c             	add    esp,0xc
c000f184:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f188:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f18c:	53                   	push   ebx
c000f18d:	51                   	push   ecx
c000f18e:	55                   	push   ebp
c000f18f:	e8 ce fe ff ff       	call   c000f062 <GDT::addEntry(GDTEntry)>
c000f194:	83 c4 0c             	add    esp,0xc
c000f197:	57                   	push   edi
c000f198:	56                   	push   esi
c000f199:	55                   	push   ebp
c000f19a:	e8 c3 fe ff ff       	call   c000f062 <GDT::addEntry(GDTEntry)>
c000f19f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f1a2:	e8 e5 fe ff ff       	call   c000f08c <GDT::flush()>
c000f1a7:	83 c4 4c             	add    esp,0x4c
c000f1aa:	5b                   	pop    ebx
c000f1ab:	5e                   	pop    esi
c000f1ac:	5f                   	pop    edi
c000f1ad:	5d                   	pop    ebp
c000f1ae:	c3                   	ret    

c000f1af <idleFunction(void*)>:
c000f1af:	53                   	push   ebx
c000f1b0:	83 ec 08             	sub    esp,0x8
c000f1b3:	a1 28 f7 02 c0       	mov    eax,ds:0xc002f728
c000f1b8:	48                   	dec    eax
c000f1b9:	a3 28 f7 02 c0       	mov    ds:0xc002f728,eax
c000f1be:	75 01                	jne    c000f1c1 <idleFunction(void*)+0x12>
c000f1c0:	fb                   	sti    
c000f1c1:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c000f1c6:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f1cc:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f1d3:	74 3c                	je     c000f211 <idleFunction(void*)+0x62>
c000f1d5:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f1dc:	74 33                	je     c000f211 <idleFunction(void*)+0x62>
c000f1de:	31 db                	xor    ebx,ebx
c000f1e0:	52                   	push   edx
c000f1e1:	52                   	push   edx
c000f1e2:	68 e1 00 00 00       	push   0xe1
c000f1e7:	50                   	push   eax
c000f1e8:	e8 95 fb ff ff       	call   c000ed82 <Computer::rdmsr(unsigned int)>
c000f1ed:	53                   	push   ebx
c000f1ee:	83 e0 02             	and    eax,0x2
c000f1f1:	50                   	push   eax
c000f1f2:	68 e1 00 00 00       	push   0xe1
c000f1f7:	ff 35 28 e2 02 c0    	push   DWORD PTR ds:0xc002e228
c000f1fd:	e8 ac fb ff ff       	call   c000edae <Computer::wrmsr(unsigned int, unsigned long long)>
c000f202:	83 c4 20             	add    esp,0x20
c000f205:	e8 75 10 ff ff       	call   c000027f <doTPAUSE>
c000f20a:	e8 71 96 01 00       	call   c0028880 <idleCommon()>
c000f20f:	eb f4                	jmp    c000f205 <idleFunction(void*)+0x56>
c000f211:	fb                   	sti    
c000f212:	f4                   	hlt    
c000f213:	e8 68 96 01 00       	call   c0028880 <idleCommon()>
c000f218:	eb f7                	jmp    c000f211 <idleFunction(void*)+0x62>

c000f21a <IDTEntry::IDTEntry(bool)>:
c000f21a:	83 ec 04             	sub    esp,0x4
c000f21d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f221:	88 04 24             	mov    BYTE PTR [esp],al
c000f224:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f228:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f22e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f232:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f236:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f23a:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f23d:	83 e2 f0             	and    edx,0xfffffff0
c000f240:	83 ca 0e             	or     edx,0xe
c000f243:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f246:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f24a:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f24d:	83 e2 ef             	and    edx,0xffffffef
c000f250:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f253:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f257:	74 04                	je     c000f25d <IDTEntry::IDTEntry(bool)+0x43>
c000f259:	b2 03                	mov    dl,0x3
c000f25b:	eb 02                	jmp    c000f25f <IDTEntry::IDTEntry(bool)+0x45>
c000f25d:	b2 00                	mov    dl,0x0
c000f25f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f263:	83 e2 03             	and    edx,0x3
c000f266:	88 d1                	mov    cl,dl
c000f268:	c1 e1 05             	shl    ecx,0x5
c000f26b:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f26e:	83 e2 9f             	and    edx,0xffffff9f
c000f271:	09 ca                	or     edx,ecx
c000f273:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f276:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f27a:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f27d:	83 ca 80             	or     edx,0xffffff80
c000f280:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f283:	90                   	nop
c000f284:	83 c4 04             	add    esp,0x4
c000f287:	c3                   	ret    

c000f288 <IDTEntry::setOffset(unsigned int)>:
c000f288:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f28c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f290:	66 89 02             	mov    WORD PTR [edx],ax
c000f293:	c1 e8 10             	shr    eax,0x10
c000f296:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f29a:	c3                   	ret    
c000f29b:	90                   	nop

c000f29c <IDT::IDT()>:
c000f29c:	90                   	nop
c000f29d:	c3                   	ret    

c000f29e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f29e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2a2:	83 c0 30             	add    eax,0x30
c000f2a5:	c3                   	ret    

c000f2a6 <IDT::addEntry(IDTEntry, int)>:
c000f2a6:	53                   	push   ebx
c000f2a7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f2af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f2b3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f2b7:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f2ba:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f2be:	5b                   	pop    ebx
c000f2bf:	c3                   	ret    

c000f2c0 <IDT::addEntry(int, void (*)(), bool)>:
c000f2c0:	53                   	push   ebx
c000f2c1:	83 ec 10             	sub    esp,0x10
c000f2c4:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f2c9:	50                   	push   eax
c000f2ca:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f2ce:	53                   	push   ebx
c000f2cf:	e8 46 ff ff ff       	call   c000f21a <IDTEntry::IDTEntry(bool)>
c000f2d4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f2d8:	53                   	push   ebx
c000f2d9:	e8 aa ff ff ff       	call   c000f288 <IDTEntry::setOffset(unsigned int)>
c000f2de:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f2e2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f2e6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f2ea:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f2ee:	e8 b3 ff ff ff       	call   c000f2a6 <IDT::addEntry(IDTEntry, int)>
c000f2f3:	83 c4 30             	add    esp,0x30
c000f2f6:	5b                   	pop    ebx
c000f2f7:	c3                   	ret    

c000f2f8 <IDT::flush()>:
c000f2f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2fc:	66 c7 05 38 e2 02 c0 ff 07 	mov    WORD PTR ds:0xc002e238,0x7ff
c000f305:	a3 3a e2 02 c0       	mov    ds:0xc002e23a,eax
c000f30a:	0f 01 1d 38 e2 02 c0 	lidtd  ds:0xc002e238
c000f311:	c3                   	ret    

c000f312 <IDT::setup()>:
c000f312:	57                   	push   edi
c000f313:	56                   	push   esi
c000f314:	53                   	push   ebx
c000f315:	83 ec 10             	sub    esp,0x10
c000f318:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f31c:	6a 00                	push   0x0
c000f31e:	68 70 04 00 c0       	push   0xc0000470
c000f323:	6a 00                	push   0x0
c000f325:	53                   	push   ebx
c000f326:	e8 95 ff ff ff       	call   c000f2c0 <IDT::addEntry(int, void (*)(), bool)>
c000f32b:	6a 00                	push   0x0
c000f32d:	68 80 04 00 c0       	push   0xc0000480
c000f332:	6a 01                	push   0x1
c000f334:	53                   	push   ebx
c000f335:	e8 86 ff ff ff       	call   c000f2c0 <IDT::addEntry(int, void (*)(), bool)>
c000f33a:	83 c4 20             	add    esp,0x20
c000f33d:	6a 00                	push   0x0
c000f33f:	68 8a 04 00 c0       	push   0xc000048a
c000f344:	6a 02                	push   0x2
c000f346:	53                   	push   ebx
c000f347:	e8 74 ff ff ff       	call   c000f2c0 <IDT::addEntry(int, void (*)(), bool)>
c000f34c:	6a 00                	push   0x0
c000f34e:	68 94 04 00 c0       	push   0xc0000494
c000f353:	6a 03                	push   0x3
c000f355:	53                   	push   ebx
c000f356:	e8 65 ff ff ff       	call   c000f2c0 <IDT::addEntry(int, void (*)(), bool)>
c000f35b:	83 c4 20             	add    esp,0x20
c000f35e:	6a 00                	push   0x0
c000f360:	68 9e 04 00 c0       	push   0xc000049e
c000f365:	6a 04                	push   0x4
c000f367:	53                   	push   ebx
c000f368:	e8 53 ff ff ff       	call   c000f2c0 <IDT::addEntry(int, void (*)(), bool)>
c000f36d:	6a 00                	push   0x0
c000f36f:	68 a8 04 00 c0       	push   0xc00004a8
c000f374:	6a 05                	push   0x5
c000f376:	53                   	push   ebx
c000f377:	e8 44 ff ff ff       	call   c000f2c0 <IDT::addEntry(int, void (*)(), bool)>
c000f37c:	83 c4 20             	add    esp,0x20
c000f37f:	6a 00                	push   0x0
c000f381:	68 b2 04 00 c0       	push   0xc00004b2
c000f386:	6a 06                	push   0x6
c000f388:	53                   	push   ebx
c000f389:	e8 32 ff ff ff       	call   c000f2c0 <IDT::addEntry(int, void (*)(), bool)>
c000f38e:	6a 00                	push   0x0
c000f390:	68 bc 04 00 c0       	push   0xc00004bc
c000f395:	6a 07                	push   0x7
c000f397:	53                   	push   ebx
c000f398:	e8 23 ff ff ff       	call   c000f2c0 <IDT::addEntry(int, void (*)(), bool)>
c000f39d:	83 c4 20             	add    esp,0x20
c000f3a0:	6a 00                	push   0x0
c000f3a2:	68 c6 04 00 c0       	push   0xc00004c6
c000f3a7:	6a 08                	push   0x8
c000f3a9:	53                   	push   ebx
c000f3aa:	e8 11 ff ff ff       	call   c000f2c0 <IDT::addEntry(int, void (*)(), bool)>
c000f3af:	6a 00                	push   0x0
c000f3b1:	68 ce 04 00 c0       	push   0xc00004ce
c000f3b6:	6a 09                	push   0x9
c000f3b8:	53                   	push   ebx
c000f3b9:	e8 02 ff ff ff       	call   c000f2c0 <IDT::addEntry(int, void (*)(), bool)>
c000f3be:	83 c4 20             	add    esp,0x20
c000f3c1:	6a 00                	push   0x0
c000f3c3:	68 d8 04 00 c0       	push   0xc00004d8
c000f3c8:	6a 0a                	push   0xa
c000f3ca:	53                   	push   ebx
c000f3cb:	e8 f0 fe ff ff       	call   c000f2c0 <IDT::addEntry(int, void (*)(), bool)>
c000f3d0:	6a 00                	push   0x0
c000f3d2:	68 e0 04 00 c0       	push   0xc00004e0
c000f3d7:	6a 0b                	push   0xb
c000f3d9:	53                   	push   ebx
c000f3da:	e8 e1 fe ff ff       	call   c000f2c0 <IDT::addEntry(int, void (*)(), bool)>
c000f3df:	83 c4 20             	add    esp,0x20
c000f3e2:	6a 00                	push   0x0
c000f3e4:	68 e8 04 00 c0       	push   0xc00004e8
c000f3e9:	6a 0c                	push   0xc
c000f3eb:	53                   	push   ebx
c000f3ec:	e8 cf fe ff ff       	call   c000f2c0 <IDT::addEntry(int, void (*)(), bool)>
c000f3f1:	6a 00                	push   0x0
c000f3f3:	68 f0 04 00 c0       	push   0xc00004f0
c000f3f8:	6a 0d                	push   0xd
c000f3fa:	53                   	push   ebx
c000f3fb:	e8 c0 fe ff ff       	call   c000f2c0 <IDT::addEntry(int, void (*)(), bool)>
c000f400:	83 c4 20             	add    esp,0x20
c000f403:	6a 00                	push   0x0
c000f405:	68 f8 04 00 c0       	push   0xc00004f8
c000f40a:	6a 0e                	push   0xe
c000f40c:	53                   	push   ebx
c000f40d:	e8 ae fe ff ff       	call   c000f2c0 <IDT::addEntry(int, void (*)(), bool)>
c000f412:	6a 00                	push   0x0
c000f414:	68 00 05 00 c0       	push   0xc0000500
c000f419:	6a 0f                	push   0xf
c000f41b:	53                   	push   ebx
c000f41c:	e8 9f fe ff ff       	call   c000f2c0 <IDT::addEntry(int, void (*)(), bool)>
c000f421:	83 c4 20             	add    esp,0x20
c000f424:	6a 00                	push   0x0
c000f426:	68 0a 05 00 c0       	push   0xc000050a
c000f42b:	6a 10                	push   0x10
c000f42d:	53                   	push   ebx
c000f42e:	e8 8d fe ff ff       	call   c000f2c0 <IDT::addEntry(int, void (*)(), bool)>
c000f433:	6a 00                	push   0x0
c000f435:	68 14 05 00 c0       	push   0xc0000514
c000f43a:	6a 11                	push   0x11
c000f43c:	53                   	push   ebx
c000f43d:	e8 7e fe ff ff       	call   c000f2c0 <IDT::addEntry(int, void (*)(), bool)>
c000f442:	83 c4 20             	add    esp,0x20
c000f445:	6a 00                	push   0x0
c000f447:	68 1e 05 00 c0       	push   0xc000051e
c000f44c:	6a 12                	push   0x12
c000f44e:	53                   	push   ebx
c000f44f:	e8 6c fe ff ff       	call   c000f2c0 <IDT::addEntry(int, void (*)(), bool)>
c000f454:	6a 01                	push   0x1
c000f456:	68 b8 05 00 c0       	push   0xc00005b8
c000f45b:	6a 60                	push   0x60
c000f45d:	53                   	push   ebx
c000f45e:	e8 5d fe ff ff       	call   c000f2c0 <IDT::addEntry(int, void (*)(), bool)>
c000f463:	83 c4 20             	add    esp,0x20
c000f466:	6a 00                	push   0x0
c000f468:	68 bf 05 00 c0       	push   0xc00005bf
c000f46d:	6a 20                	push   0x20
c000f46f:	53                   	push   ebx
c000f470:	e8 4b fe ff ff       	call   c000f2c0 <IDT::addEntry(int, void (*)(), bool)>
c000f475:	6a 00                	push   0x0
c000f477:	68 aa 05 00 c0       	push   0xc00005aa
c000f47c:	6a 21                	push   0x21
c000f47e:	53                   	push   ebx
c000f47f:	e8 3c fe ff ff       	call   c000f2c0 <IDT::addEntry(int, void (*)(), bool)>
c000f484:	83 c4 20             	add    esp,0x20
c000f487:	6a 00                	push   0x0
c000f489:	68 b1 05 00 c0       	push   0xc00005b1
c000f48e:	6a 22                	push   0x22
c000f490:	53                   	push   ebx
c000f491:	e8 2a fe ff ff       	call   c000f2c0 <IDT::addEntry(int, void (*)(), bool)>
c000f496:	6a 00                	push   0x0
c000f498:	68 28 05 00 c0       	push   0xc0000528
c000f49d:	6a 23                	push   0x23
c000f49f:	53                   	push   ebx
c000f4a0:	e8 1b fe ff ff       	call   c000f2c0 <IDT::addEntry(int, void (*)(), bool)>
c000f4a5:	83 c4 20             	add    esp,0x20
c000f4a8:	6a 00                	push   0x0
c000f4aa:	68 32 05 00 c0       	push   0xc0000532
c000f4af:	6a 24                	push   0x24
c000f4b1:	53                   	push   ebx
c000f4b2:	e8 09 fe ff ff       	call   c000f2c0 <IDT::addEntry(int, void (*)(), bool)>
c000f4b7:	6a 00                	push   0x0
c000f4b9:	68 3c 05 00 c0       	push   0xc000053c
c000f4be:	6a 25                	push   0x25
c000f4c0:	53                   	push   ebx
c000f4c1:	e8 fa fd ff ff       	call   c000f2c0 <IDT::addEntry(int, void (*)(), bool)>
c000f4c6:	83 c4 20             	add    esp,0x20
c000f4c9:	6a 00                	push   0x0
c000f4cb:	68 46 05 00 c0       	push   0xc0000546
c000f4d0:	6a 26                	push   0x26
c000f4d2:	53                   	push   ebx
c000f4d3:	e8 e8 fd ff ff       	call   c000f2c0 <IDT::addEntry(int, void (*)(), bool)>
c000f4d8:	6a 00                	push   0x0
c000f4da:	68 50 05 00 c0       	push   0xc0000550
c000f4df:	6a 27                	push   0x27
c000f4e1:	53                   	push   ebx
c000f4e2:	e8 d9 fd ff ff       	call   c000f2c0 <IDT::addEntry(int, void (*)(), bool)>
c000f4e7:	83 c4 20             	add    esp,0x20
c000f4ea:	6a 00                	push   0x0
c000f4ec:	68 5a 05 00 c0       	push   0xc000055a
c000f4f1:	6a 28                	push   0x28
c000f4f3:	53                   	push   ebx
c000f4f4:	e8 c7 fd ff ff       	call   c000f2c0 <IDT::addEntry(int, void (*)(), bool)>
c000f4f9:	6a 00                	push   0x0
c000f4fb:	68 64 05 00 c0       	push   0xc0000564
c000f500:	6a 29                	push   0x29
c000f502:	53                   	push   ebx
c000f503:	e8 b8 fd ff ff       	call   c000f2c0 <IDT::addEntry(int, void (*)(), bool)>
c000f508:	83 c4 20             	add    esp,0x20
c000f50b:	6a 00                	push   0x0
c000f50d:	68 6e 05 00 c0       	push   0xc000056e
c000f512:	6a 2a                	push   0x2a
c000f514:	53                   	push   ebx
c000f515:	e8 a6 fd ff ff       	call   c000f2c0 <IDT::addEntry(int, void (*)(), bool)>
c000f51a:	6a 00                	push   0x0
c000f51c:	68 78 05 00 c0       	push   0xc0000578
c000f521:	6a 2b                	push   0x2b
c000f523:	53                   	push   ebx
c000f524:	e8 97 fd ff ff       	call   c000f2c0 <IDT::addEntry(int, void (*)(), bool)>
c000f529:	83 c4 20             	add    esp,0x20
c000f52c:	6a 00                	push   0x0
c000f52e:	68 82 05 00 c0       	push   0xc0000582
c000f533:	6a 2c                	push   0x2c
c000f535:	53                   	push   ebx
c000f536:	e8 85 fd ff ff       	call   c000f2c0 <IDT::addEntry(int, void (*)(), bool)>
c000f53b:	6a 00                	push   0x0
c000f53d:	68 8c 05 00 c0       	push   0xc000058c
c000f542:	6a 2d                	push   0x2d
c000f544:	53                   	push   ebx
c000f545:	e8 76 fd ff ff       	call   c000f2c0 <IDT::addEntry(int, void (*)(), bool)>
c000f54a:	83 c4 20             	add    esp,0x20
c000f54d:	6a 00                	push   0x0
c000f54f:	68 96 05 00 c0       	push   0xc0000596
c000f554:	6a 2e                	push   0x2e
c000f556:	53                   	push   ebx
c000f557:	e8 64 fd ff ff       	call   c000f2c0 <IDT::addEntry(int, void (*)(), bool)>
c000f55c:	6a 00                	push   0x0
c000f55e:	68 a0 05 00 c0       	push   0xc00005a0
c000f563:	6a 2f                	push   0x2f
c000f565:	53                   	push   ebx
c000f566:	e8 55 fd ff ff       	call   c000f2c0 <IDT::addEntry(int, void (*)(), bool)>
c000f56b:	83 c4 20             	add    esp,0x20
c000f56e:	6a 00                	push   0x0
c000f570:	68 f6 05 00 c0       	push   0xc00005f6
c000f575:	6a 30                	push   0x30
c000f577:	53                   	push   ebx
c000f578:	e8 43 fd ff ff       	call   c000f2c0 <IDT::addEntry(int, void (*)(), bool)>
c000f57d:	6a 00                	push   0x0
c000f57f:	68 00 06 00 c0       	push   0xc0000600
c000f584:	6a 31                	push   0x31
c000f586:	53                   	push   ebx
c000f587:	e8 34 fd ff ff       	call   c000f2c0 <IDT::addEntry(int, void (*)(), bool)>
c000f58c:	83 c4 20             	add    esp,0x20
c000f58f:	6a 00                	push   0x0
c000f591:	68 0a 06 00 c0       	push   0xc000060a
c000f596:	6a 32                	push   0x32
c000f598:	53                   	push   ebx
c000f599:	e8 22 fd ff ff       	call   c000f2c0 <IDT::addEntry(int, void (*)(), bool)>
c000f59e:	6a 00                	push   0x0
c000f5a0:	68 14 06 00 c0       	push   0xc0000614
c000f5a5:	6a 33                	push   0x33
c000f5a7:	53                   	push   ebx
c000f5a8:	e8 13 fd ff ff       	call   c000f2c0 <IDT::addEntry(int, void (*)(), bool)>
c000f5ad:	83 c4 20             	add    esp,0x20
c000f5b0:	6a 00                	push   0x0
c000f5b2:	68 1e 06 00 c0       	push   0xc000061e
c000f5b7:	6a 34                	push   0x34
c000f5b9:	53                   	push   ebx
c000f5ba:	e8 01 fd ff ff       	call   c000f2c0 <IDT::addEntry(int, void (*)(), bool)>
c000f5bf:	6a 00                	push   0x0
c000f5c1:	68 28 06 00 c0       	push   0xc0000628
c000f5c6:	6a 35                	push   0x35
c000f5c8:	53                   	push   ebx
c000f5c9:	e8 f2 fc ff ff       	call   c000f2c0 <IDT::addEntry(int, void (*)(), bool)>
c000f5ce:	83 c4 20             	add    esp,0x20
c000f5d1:	6a 00                	push   0x0
c000f5d3:	68 32 06 00 c0       	push   0xc0000632
c000f5d8:	6a 36                	push   0x36
c000f5da:	53                   	push   ebx
c000f5db:	e8 e0 fc ff ff       	call   c000f2c0 <IDT::addEntry(int, void (*)(), bool)>
c000f5e0:	6a 00                	push   0x0
c000f5e2:	68 3c 06 00 c0       	push   0xc000063c
c000f5e7:	6a 37                	push   0x37
c000f5e9:	53                   	push   ebx
c000f5ea:	e8 d1 fc ff ff       	call   c000f2c0 <IDT::addEntry(int, void (*)(), bool)>
c000f5ef:	83 c4 1c             	add    esp,0x1c
c000f5f2:	6a 03                	push   0x3
c000f5f4:	6a 02                	push   0x2
c000f5f6:	ff 35 90 e3 02 c0    	push   DWORD PTR ds:0xc002e390
c000f5fc:	e8 47 26 00 00       	call   c0011c48 <VAS::allocatePages(int, int)>
c000f601:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f608:	89 c6                	mov    esi,eax
c000f60a:	e8 0a 02 00 00       	call   c000f819 <malloc>
c000f60f:	81 c6 00 20 00 00    	add    esi,0x2000
c000f615:	89 04 24             	mov    DWORD PTR [esp],eax
c000f618:	89 c7                	mov    edi,eax
c000f61a:	e8 c7 17 00 00       	call   c0010de6 <TSS::TSS()>
c000f61f:	83 c4 0c             	add    esp,0xc
c000f622:	68 c6 04 00 c0       	push   0xc00004c6
c000f627:	56                   	push   esi
c000f628:	57                   	push   edi
c000f629:	e8 f8 17 00 00       	call   c0010e26 <TSS::setup(unsigned long, unsigned long)>
c000f62e:	89 c6                	mov    esi,eax
c000f630:	58                   	pop    eax
c000f631:	5a                   	pop    edx
c000f632:	6a 00                	push   0x0
c000f634:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f638:	50                   	push   eax
c000f639:	e8 dc fb ff ff       	call   c000f21a <IDTEntry::IDTEntry(bool)>
c000f63e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f642:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f647:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f64e:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f654:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f658:	80 ce 05             	or     dh,0x5
c000f65b:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f65e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f662:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f666:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f669:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f66c:	e8 87 fc ff ff       	call   c000f2f8 <IDT::flush()>
c000f671:	83 c4 20             	add    esp,0x20
c000f674:	5b                   	pop    ebx
c000f675:	5e                   	pop    esi
c000f676:	5f                   	pop    edi
c000f677:	c3                   	ret    

c000f678 <sbrk>:
c000f678:	55                   	push   ebp
c000f679:	57                   	push   edi
c000f67a:	56                   	push   esi
c000f67b:	53                   	push   ebx
c000f67c:	83 ec 1c             	sub    esp,0x1c
c000f67f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f683:	85 c0                	test   eax,eax
c000f685:	74 3e                	je     c000f6c5 <sbrk+0x4d>
c000f687:	78 43                	js     c000f6cc <sbrk+0x54>
c000f689:	8b 15 28 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e228
c000f68f:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f695:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f69b:	83 e2 01             	and    edx,0x1
c000f69e:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f6a2:	8b 0d e0 cf 02 c0    	mov    ecx,DWORD PTR ds:0xc002cfe0
c000f6a8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f6ac:	05 ff 0f 00 00       	add    eax,0xfff
c000f6b1:	89 c2                	mov    edx,eax
c000f6b3:	78 2f                	js     c000f6e4 <sbrk+0x6c>
c000f6b5:	c1 fa 0c             	sar    edx,0xc
c000f6b8:	89 d7                	mov    edi,edx
c000f6ba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f6be:	be 00 00 00 00       	mov    esi,0x0
c000f6c3:	eb 36                	jmp    c000f6fb <sbrk+0x83>
c000f6c5:	a1 e0 cf 02 c0       	mov    eax,ds:0xc002cfe0
c000f6ca:	eb 73                	jmp    c000f73f <sbrk+0xc7>
c000f6cc:	83 ec 08             	sub    esp,0x8
c000f6cf:	50                   	push   eax
c000f6d0:	68 84 a4 02 c0       	push   0xc002a484
c000f6d5:	e8 97 31 00 00       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c000f6da:	83 c4 10             	add    esp,0x10
c000f6dd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f6e2:	eb 5b                	jmp    c000f73f <sbrk+0xc7>
c000f6e4:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f6ea:	eb c9                	jmp    c000f6b5 <sbrk+0x3d>
c000f6ec:	81 05 e0 cf 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002cfe0,0x1000
c000f6f6:	46                   	inc    esi
c000f6f7:	39 f7                	cmp    edi,esi
c000f6f9:	74 33                	je     c000f72e <sbrk+0xb6>
c000f6fb:	8b 1d 90 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e390
c000f701:	8b 2d e0 cf 02 c0    	mov    ebp,DWORD PTR ds:0xc002cfe0
c000f707:	e8 09 05 00 00       	call   c000fc15 <Phys::allocatePage()>
c000f70c:	68 01 04 00 00       	push   0x401
c000f711:	55                   	push   ebp
c000f712:	50                   	push   eax
c000f713:	53                   	push   ebx
c000f714:	e8 2d 24 00 00       	call   c0011b46 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f719:	83 c4 10             	add    esp,0x10
c000f71c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f721:	74 c9                	je     c000f6ec <sbrk+0x74>
c000f723:	8b 1d e0 cf 02 c0    	mov    ebx,DWORD PTR ds:0xc002cfe0
c000f729:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f72c:	eb be                	jmp    c000f6ec <sbrk+0x74>
c000f72e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f733:	75 12                	jne    c000f747 <sbrk+0xcf>
c000f735:	0f 20 d8             	mov    eax,cr3
c000f738:	0f 22 d8             	mov    cr3,eax
c000f73b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f73f:	83 c4 1c             	add    esp,0x1c
c000f742:	5b                   	pop    ebx
c000f743:	5e                   	pop    esi
c000f744:	5f                   	pop    edi
c000f745:	5d                   	pop    ebp
c000f746:	c3                   	ret    
c000f747:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f74b:	89 cb                	mov    ebx,ecx
c000f74d:	c1 eb 0a             	shr    ebx,0xa
c000f750:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f756:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f75c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f760:	c1 e0 0c             	shl    eax,0xc
c000f763:	01 c8                	add    eax,ecx
c000f765:	c1 e8 0a             	shr    eax,0xa
c000f768:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f76d:	2d 00 00 40 00       	sub    eax,0x400000
c000f772:	39 c3                	cmp    ebx,eax
c000f774:	77 c5                	ja     c000f73b <sbrk+0xc3>
c000f776:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f779:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f77f:	39 d8                	cmp    eax,ebx
c000f781:	73 f3                	jae    c000f776 <sbrk+0xfe>
c000f783:	eb b6                	jmp    c000f73b <sbrk+0xc3>

c000f785 <mmap>:
c000f785:	83 ec 18             	sub    esp,0x18
c000f788:	68 b4 a4 02 c0       	push   0xc002a4b4
c000f78d:	e8 ab a9 00 00       	call   c001a13d <Krnl::panic(char const*)>
c000f792:	b8 00 00 00 00       	mov    eax,0x0
c000f797:	83 c4 1c             	add    esp,0x1c
c000f79a:	c3                   	ret    

c000f79b <munmap>:
c000f79b:	83 ec 18             	sub    esp,0x18
c000f79e:	68 b9 a4 02 c0       	push   0xc002a4b9
c000f7a3:	e8 95 a9 00 00       	call   c001a13d <Krnl::panic(char const*)>
c000f7a8:	b8 00 00 00 00       	mov    eax,0x0
c000f7ad:	83 c4 1c             	add    esp,0x1c
c000f7b0:	c3                   	ret    

c000f7b1 <liballoc_lock()>:
c000f7b1:	fa                   	cli    
c000f7b2:	ff 05 28 f7 02 c0    	inc    DWORD PTR ds:0xc002f728
c000f7b8:	b8 00 00 00 00       	mov    eax,0x0
c000f7bd:	c3                   	ret    

c000f7be <liballoc_unlock()>:
c000f7be:	a1 28 f7 02 c0       	mov    eax,ds:0xc002f728
c000f7c3:	48                   	dec    eax
c000f7c4:	a3 28 f7 02 c0       	mov    ds:0xc002f728,eax
c000f7c9:	75 01                	jne    c000f7cc <liballoc_unlock()+0xe>
c000f7cb:	fb                   	sti    
c000f7cc:	b8 00 00 00 00       	mov    eax,0x0
c000f7d1:	c3                   	ret    

c000f7d2 <liballoc_alloc(int)>:
c000f7d2:	83 ec 10             	sub    esp,0x10
c000f7d5:	6a 01                	push   0x1
c000f7d7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f7db:	ff 35 90 e3 02 c0    	push   DWORD PTR ds:0xc002e390
c000f7e1:	e8 62 24 00 00       	call   c0011c48 <VAS::allocatePages(int, int)>
c000f7e6:	83 c4 1c             	add    esp,0x1c
c000f7e9:	c3                   	ret    

c000f7ea <liballoc_free(void*, int)>:
c000f7ea:	83 ec 14             	sub    esp,0x14
c000f7ed:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f7f1:	ff 35 90 e3 02 c0    	push   DWORD PTR ds:0xc002e390
c000f7f7:	e8 f6 20 00 00       	call   c00118f2 <VAS::freeAllocatedPages(unsigned long)>
c000f7fc:	b8 00 00 00 00       	mov    eax,0x0
c000f801:	83 c4 1c             	add    esp,0x1c
c000f804:	c3                   	ret    

c000f805 <realloc>:
c000f805:	83 ec 14             	sub    esp,0x14
c000f808:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f80c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f810:	e8 17 1e ff ff       	call   c000162c <dlrealloc>
c000f815:	83 c4 1c             	add    esp,0x1c
c000f818:	c3                   	ret    

c000f819 <malloc>:
c000f819:	83 ec 18             	sub    esp,0x18
c000f81c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f820:	e8 ca 18 ff ff       	call   c00010ef <dlmalloc>
c000f825:	83 c4 1c             	add    esp,0x1c
c000f828:	c3                   	ret    

c000f829 <free>:
c000f829:	83 ec 18             	sub    esp,0x18
c000f82c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f830:	e8 5f 15 ff ff       	call   c0000d94 <dlfree>
c000f835:	83 c4 1c             	add    esp,0x1c
c000f838:	c3                   	ret    

c000f839 <rfree>:
c000f839:	83 ec 18             	sub    esp,0x18
c000f83c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f840:	e8 4f 15 ff ff       	call   c0000d94 <dlfree>
c000f845:	83 c4 1c             	add    esp,0x1c
c000f848:	c3                   	ret    

c000f849 <calloc>:
c000f849:	56                   	push   esi
c000f84a:	53                   	push   ebx
c000f84b:	83 ec 10             	sub    esp,0x10
c000f84e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f852:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f857:	53                   	push   ebx
c000f858:	e8 bc ff ff ff       	call   c000f819 <malloc>
c000f85d:	89 c6                	mov    esi,eax
c000f85f:	83 c4 0c             	add    esp,0xc
c000f862:	53                   	push   ebx
c000f863:	6a 00                	push   0x0
c000f865:	50                   	push   eax
c000f866:	e8 e5 0e ff ff       	call   c0000750 <memset>
c000f86b:	89 f0                	mov    eax,esi
c000f86d:	83 c4 14             	add    esp,0x14
c000f870:	5b                   	pop    ebx
c000f871:	5e                   	pop    esi
c000f872:	c3                   	ret    

c000f873 <Krnl::setBootMessage(char const*)>:
c000f873:	57                   	push   edi
c000f874:	56                   	push   esi
c000f875:	53                   	push   ebx
c000f876:	81 ec a4 00 00 00    	sub    esp,0xa4
c000f87c:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000f883:	68 9e 00 00 00       	push   0x9e
c000f888:	6a 00                	push   0x0
c000f88a:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000f88e:	56                   	push   esi
c000f88f:	e8 bc 0e ff ff       	call   c0000750 <memset>
c000f894:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f897:	e8 d0 0e ff ff       	call   c000076c <strlen>
c000f89c:	ba 50 00 00 00       	mov    edx,0x50
c000f8a1:	83 c4 10             	add    esp,0x10
c000f8a4:	29 c2                	sub    edx,eax
c000f8a6:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c000f8aa:	d1 ea                	shr    edx,1
c000f8ac:	84 c0                	test   al,al
c000f8ae:	74 19                	je     c000f8c9 <Krnl::setBootMessage(char const*)+0x56>
c000f8b0:	01 d2                	add    edx,edx
c000f8b2:	43                   	inc    ebx
c000f8b3:	01 f2                	add    edx,esi
c000f8b5:	80 cc 0f             	or     ah,0xf
c000f8b8:	83 c2 02             	add    edx,0x2
c000f8bb:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000f8bf:	43                   	inc    ebx
c000f8c0:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c000f8c5:	84 c0                	test   al,al
c000f8c7:	75 ec                	jne    c000f8b5 <Krnl::setBootMessage(char const*)+0x42>
c000f8c9:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000f8ce:	b9 9e 00 00 00       	mov    ecx,0x9e
c000f8d3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f8d5:	81 c4 a0 00 00 00    	add    esp,0xa0
c000f8db:	5b                   	pop    ebx
c000f8dc:	5e                   	pop    esi
c000f8dd:	5f                   	pop    edi
c000f8de:	c3                   	ret    

c000f8df <kernel_main>:
c000f8df:	57                   	push   edi
c000f8e0:	bf f9 03 00 00       	mov    edi,0x3f9
c000f8e5:	56                   	push   esi
c000f8e6:	89 fa                	mov    edx,edi
c000f8e8:	53                   	push   ebx
c000f8e9:	31 f6                	xor    esi,esi
c000f8eb:	83 ec 2c             	sub    esp,0x2c
c000f8ee:	89 f0                	mov    eax,esi
c000f8f0:	ee                   	out    dx,al
c000f8f1:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f8f6:	b0 80                	mov    al,0x80
c000f8f8:	89 da                	mov    edx,ebx
c000f8fa:	ee                   	out    dx,al
c000f8fb:	b1 03                	mov    cl,0x3
c000f8fd:	ba f8 03 00 00       	mov    edx,0x3f8
c000f902:	88 c8                	mov    al,cl
c000f904:	ee                   	out    dx,al
c000f905:	89 f0                	mov    eax,esi
c000f907:	89 fa                	mov    edx,edi
c000f909:	ee                   	out    dx,al
c000f90a:	88 c8                	mov    al,cl
c000f90c:	89 da                	mov    edx,ebx
c000f90e:	ee                   	out    dx,al
c000f90f:	b0 c7                	mov    al,0xc7
c000f911:	ba fa 03 00 00       	mov    edx,0x3fa
c000f916:	ee                   	out    dx,al
c000f917:	b0 0b                	mov    al,0xb
c000f919:	ba fc 03 00 00       	mov    edx,0x3fc
c000f91e:	ee                   	out    dx,al
c000f91f:	68 c0 a4 02 c0       	push   0xc002a4c0
c000f924:	e8 48 2f 00 00       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c000f929:	e8 b8 09 00 00       	call   c00102e6 <installVgaTextImplementation()>
c000f92e:	0f b6 05 00 d0 02 c0 	movzx  eax,BYTE PTR ds:0xc002d000
c000f935:	83 c4 10             	add    esp,0x10
c000f938:	84 c0                	test   al,al
c000f93a:	74 6c                	je     c000f9a8 <kernel_main+0xc9>
c000f93c:	31 db                	xor    ebx,ebx
c000f93e:	bf 0a 00 00 00       	mov    edi,0xa
c000f943:	be 05 00 00 00       	mov    esi,0x5
c000f948:	31 c9                	xor    ecx,ecx
c000f94a:	eb 2a                	jmp    c000f976 <kernel_main+0x97>
c000f94c:	3c 0d                	cmp    al,0xd
c000f94e:	74 1a                	je     c000f96a <kernel_main+0x8b>
c000f950:	3c 0a                	cmp    al,0xa
c000f952:	74 40                	je     c000f994 <kernel_main+0xb5>
c000f954:	8d 14 b6             	lea    edx,[esi+esi*4]
c000f957:	80 cc 0e             	or     ah,0xe
c000f95a:	c1 e2 04             	shl    edx,0x4
c000f95d:	01 ca                	add    edx,ecx
c000f95f:	41                   	inc    ecx
c000f960:	01 fa                	add    edx,edi
c000f962:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000f96a:	43                   	inc    ebx
c000f96b:	0f b6 83 00 d0 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd3000]
c000f972:	84 c0                	test   al,al
c000f974:	74 32                	je     c000f9a8 <kernel_main+0xc9>
c000f976:	80 b9 36 d0 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd2fca],0xdb
c000f97d:	75 cd                	jne    c000f94c <kernel_main+0x6d>
c000f97f:	0f b6 91 35 d0 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd2fcb]
c000f986:	83 e2 fe             	and    edx,0xfffffffe
c000f989:	81 fa ba 00 00 00    	cmp    edx,0xba
c000f98f:	75 bb                	jne    c000f94c <kernel_main+0x6d>
c000f991:	47                   	inc    edi
c000f992:	eb b8                	jmp    c000f94c <kernel_main+0x6d>
c000f994:	43                   	inc    ebx
c000f995:	46                   	inc    esi
c000f996:	31 c9                	xor    ecx,ecx
c000f998:	0f b6 83 00 d0 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd3000]
c000f99f:	bf 0a 00 00 00       	mov    edi,0xa
c000f9a4:	84 c0                	test   al,al
c000f9a6:	75 ce                	jne    c000f976 <kernel_main+0x97>
c000f9a8:	83 ec 0c             	sub    esp,0xc
c000f9ab:	68 d8 a4 02 c0       	push   0xc002a4d8
c000f9b0:	e8 be fe ff ff       	call   c000f873 <Krnl::setBootMessage(char const*)>
c000f9b5:	a1 00 05 00 00       	mov    eax,ds:0x500
c000f9ba:	a3 40 e2 02 c0       	mov    ds:0xc002e240,eax
c000f9bf:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f9c4:	05 ff 0f 00 00       	add    eax,0xfff
c000f9c9:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f9ce:	89 04 24             	mov    DWORD PTR [esp],eax
c000f9d1:	e8 cb 03 00 00       	call   c000fda1 <Phys::physicalMemorySetup(unsigned int)>
c000f9d6:	e8 83 1c 00 00       	call   c001165e <Virt::virtualMemorySetup()>
c000f9db:	58                   	pop    eax
c000f9dc:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000f9e0:	53                   	push   ebx
c000f9e1:	e8 34 1d 00 00       	call   c001171a <VAS::VAS()>
c000f9e6:	89 1d 90 e3 02 c0    	mov    DWORD PTR ds:0xc002e390,ebx
c000f9ec:	e8 2f 06 ff ff       	call   c0000020 <callGlobalConstructors>
c000f9f1:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f9f8:	e8 1c fe ff ff       	call   c000f819 <malloc>
c000f9fd:	89 04 24             	mov    DWORD PTR [esp],eax
c000fa00:	89 c6                	mov    esi,eax
c000fa02:	e8 11 f0 ff ff       	call   c000ea18 <Computer::Computer()>
c000fa07:	6a 00                	push   0x0
c000fa09:	89 35 28 e2 02 c0    	mov    DWORD PTR ds:0xc002e228,esi
c000fa0f:	6a 00                	push   0x0
c000fa11:	6a 00                	push   0x0
c000fa13:	56                   	push   esi
c000fa14:	e8 0b f4 ff ff       	call   c000ee24 <Computer::open(int, int, void*)>
c000fa19:	83 c4 14             	add    esp,0x14
c000fa1c:	53                   	push   ebx
c000fa1d:	e8 a8 1f 00 00       	call   c00119ca <VAS::~VAS()>
c000fa22:	83 c4 30             	add    esp,0x30
c000fa25:	5b                   	pop    ebx
c000fa26:	5e                   	pop    esi
c000fa27:	5f                   	pop    edi
c000fa28:	c3                   	ret    

c000fa29 <Phys::allocateDMA(unsigned long)>:
c000fa29:	55                   	push   ebp
c000fa2a:	31 ed                	xor    ebp,ebp
c000fa2c:	57                   	push   edi
c000fa2d:	56                   	push   esi
c000fa2e:	53                   	push   ebx
c000fa2f:	31 db                	xor    ebx,ebx
c000fa31:	83 ec 18             	sub    esp,0x18
c000fa34:	68 f7 a4 02 c0       	push   0xc002a4f7
c000fa39:	e8 33 2e 00 00       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c000fa3e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fa42:	31 d2                	xor    edx,edx
c000fa44:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fa4a:	83 c4 10             	add    esp,0x10
c000fa4d:	c1 ee 0c             	shr    esi,0xc
c000fa50:	31 c9                	xor    ecx,ecx
c000fa52:	eb 17                	jmp    c000fa6b <Phys::allocateDMA(unsigned long)+0x42>
c000fa54:	85 c9                	test   ecx,ecx
c000fa56:	75 04                	jne    c000fa5c <Phys::allocateDMA(unsigned long)+0x33>
c000fa58:	89 d5                	mov    ebp,edx
c000fa5a:	89 d3                	mov    ebx,edx
c000fa5c:	8d 41 01             	lea    eax,[ecx+0x1]
c000fa5f:	39 c6                	cmp    esi,eax
c000fa61:	74 23                	je     c000fa86 <Phys::allocateDMA(unsigned long)+0x5d>
c000fa63:	42                   	inc    edx
c000fa64:	89 c1                	mov    ecx,eax
c000fa66:	83 fa 2f             	cmp    edx,0x2f
c000fa69:	7f 11                	jg     c000fa7c <Phys::allocateDMA(unsigned long)+0x53>
c000fa6b:	80 ba 80 e2 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd1d80],0x0
c000fa72:	74 e0                	je     c000fa54 <Phys::allocateDMA(unsigned long)+0x2b>
c000fa74:	31 c9                	xor    ecx,ecx
c000fa76:	42                   	inc    edx
c000fa77:	83 fa 2f             	cmp    edx,0x2f
c000fa7a:	7e ef                	jle    c000fa6b <Phys::allocateDMA(unsigned long)+0x42>
c000fa7c:	83 c4 0c             	add    esp,0xc
c000fa7f:	31 c0                	xor    eax,eax
c000fa81:	5b                   	pop    ebx
c000fa82:	5e                   	pop    esi
c000fa83:	5f                   	pop    edi
c000fa84:	5d                   	pop    ebp
c000fa85:	c3                   	ret    
c000fa86:	8d 14 33             	lea    edx,[ebx+esi*1]
c000fa89:	89 d7                	mov    edi,edx
c000fa8b:	4f                   	dec    edi
c000fa8c:	79 03                	jns    c000fa91 <Phys::allocateDMA(unsigned long)+0x68>
c000fa8e:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fa91:	c1 ff 04             	sar    edi,0x4
c000fa94:	89 da                	mov    edx,ebx
c000fa96:	c1 fa 04             	sar    edx,0x4
c000fa99:	39 fa                	cmp    edx,edi
c000fa9b:	75 43                	jne    c000fae0 <Phys::allocateDMA(unsigned long)+0xb7>
c000fa9d:	85 c0                	test   eax,eax
c000fa9f:	74 1a                	je     c000fabb <Phys::allocateDMA(unsigned long)+0x92>
c000faa1:	be 80 e2 02 c0       	mov    esi,0xc002e280
c000faa6:	8d 93 80 e2 02 c0    	lea    edx,[ebx-0x3ffd1d80]
c000faac:	f7 d6                	not    esi
c000faae:	29 de                	sub    esi,ebx
c000fab0:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fab3:	42                   	inc    edx
c000fab4:	8d 04 16             	lea    eax,[esi+edx*1]
c000fab7:	39 c1                	cmp    ecx,eax
c000fab9:	7f f5                	jg     c000fab0 <Phys::allocateDMA(unsigned long)+0x87>
c000fabb:	83 ec 0c             	sub    esp,0xc
c000fabe:	68 10 a5 02 c0       	push   0xc002a510
c000fac3:	e8 a9 2d 00 00       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c000fac8:	83 c4 10             	add    esp,0x10
c000facb:	85 ff                	test   edi,edi
c000facd:	74 17                	je     c000fae6 <Phys::allocateDMA(unsigned long)+0xbd>
c000facf:	83 c4 0c             	add    esp,0xc
c000fad2:	8d 83 50 20 0c 00    	lea    eax,[ebx+0xc2050]
c000fad8:	5b                   	pop    ebx
c000fad9:	c1 e0 0c             	shl    eax,0xc
c000fadc:	5e                   	pop    esi
c000fadd:	5f                   	pop    edi
c000fade:	5d                   	pop    ebp
c000fadf:	c3                   	ret    
c000fae0:	89 ea                	mov    edx,ebp
c000fae2:	31 c9                	xor    ecx,ecx
c000fae4:	eb 90                	jmp    c000fa76 <Phys::allocateDMA(unsigned long)+0x4d>
c000fae6:	83 c4 0c             	add    esp,0xc
c000fae9:	c1 e3 0c             	shl    ebx,0xc
c000faec:	8d 83 00 00 01 c2    	lea    eax,[ebx-0x3dff0000]
c000faf2:	5b                   	pop    ebx
c000faf3:	5e                   	pop    esi
c000faf4:	5f                   	pop    edi
c000faf5:	5d                   	pop    ebp
c000faf6:	c3                   	ret    

c000faf7 <Phys::freeDMA(unsigned long, unsigned long)>:
c000faf7:	83 ec 18             	sub    esp,0x18
c000fafa:	68 27 a5 02 c0       	push   0xc002a527
c000faff:	e8 6d 2d 00 00       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c000fb04:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fb08:	83 c4 10             	add    esp,0x10
c000fb0b:	8d 88 ff 0f 00 00    	lea    ecx,[eax+0xfff]
c000fb11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb15:	c1 e9 0c             	shr    ecx,0xc
c000fb18:	81 7c 24 10 ff ff 05 c2 	cmp    DWORD PTR [esp+0x10],0xc205ffff
c000fb20:	76 29                	jbe    c000fb4b <Phys::freeDMA(unsigned long, unsigned long)+0x54>
c000fb22:	8d 90 00 00 fa 3d    	lea    edx,[eax+0x3dfa0000]
c000fb28:	c1 ea 0c             	shr    edx,0xc
c000fb2b:	83 c2 10             	add    edx,0x10
c000fb2e:	85 c9                	test   ecx,ecx
c000fb30:	74 15                	je     c000fb47 <Phys::freeDMA(unsigned long, unsigned long)+0x50>
c000fb32:	8d 82 80 e2 02 c0    	lea    eax,[edx-0x3ffd1d80]
c000fb38:	8d 94 11 80 e2 02 c0 	lea    edx,[ecx+edx*1-0x3ffd1d80]
c000fb3f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fb42:	40                   	inc    eax
c000fb43:	39 d0                	cmp    eax,edx
c000fb45:	75 f8                	jne    c000fb3f <Phys::freeDMA(unsigned long, unsigned long)+0x48>
c000fb47:	83 c4 0c             	add    esp,0xc
c000fb4a:	c3                   	ret    
c000fb4b:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fb51:	c1 ea 0c             	shr    edx,0xc
c000fb54:	eb d8                	jmp    c000fb2e <Phys::freeDMA(unsigned long, unsigned long)+0x37>

c000fb56 <Phys::setPageState(unsigned long, bool)>:
c000fb56:	56                   	push   esi
c000fb57:	ba 01 00 00 00       	mov    edx,0x1
c000fb5c:	53                   	push   ebx
c000fb5d:	8b 35 44 d1 02 c0    	mov    esi,DWORD PTR ds:0xc002d144
c000fb63:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fb67:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fb6b:	89 c8                	mov    eax,ecx
c000fb6d:	83 e1 07             	and    ecx,0x7
c000fb70:	c1 e8 03             	shr    eax,0x3
c000fb73:	d3 e3                	shl    ebx,cl
c000fb75:	01 c6                	add    esi,eax
c000fb77:	d3 e2                	shl    edx,cl
c000fb79:	f7 d2                	not    edx
c000fb7b:	20 16                	and    BYTE PTR [esi],dl
c000fb7d:	03 05 44 d1 02 c0    	add    eax,DWORD PTR ds:0xc002d144
c000fb83:	08 18                	or     BYTE PTR [eax],bl
c000fb85:	5b                   	pop    ebx
c000fb86:	5e                   	pop    esi
c000fb87:	c3                   	ret    

c000fb88 <Phys::getPageState(unsigned long)>:
c000fb88:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fb8c:	8b 15 44 d1 02 c0    	mov    edx,DWORD PTR ds:0xc002d144
c000fb92:	89 c8                	mov    eax,ecx
c000fb94:	83 e1 07             	and    ecx,0x7
c000fb97:	c1 e8 03             	shr    eax,0x3
c000fb9a:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fb9e:	d3 f8                	sar    eax,cl
c000fba0:	83 e0 01             	and    eax,0x1
c000fba3:	c3                   	ret    

c000fba4 <Phys::freePage(unsigned long)>:
c000fba4:	53                   	push   ebx
c000fba5:	83 ec 10             	sub    esp,0x10
c000fba8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000fbac:	53                   	push   ebx
c000fbad:	68 3d a5 02 c0       	push   0xc002a53d
c000fbb2:	e8 ba 2c 00 00       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c000fbb7:	83 c4 10             	add    esp,0x10
c000fbba:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fbc0:	76 3d                	jbe    c000fbff <Phys::freePage(unsigned long)+0x5b>
c000fbc2:	83 ec 0c             	sub    esp,0xc
c000fbc5:	c1 eb 0c             	shr    ebx,0xc
c000fbc8:	53                   	push   ebx
c000fbc9:	e8 ba ff ff ff       	call   c000fb88 <Phys::getPageState(unsigned long)>
c000fbce:	83 c4 10             	add    esp,0x10
c000fbd1:	84 c0                	test   al,al
c000fbd3:	74 19                	je     c000fbee <Phys::freePage(unsigned long)+0x4a>
c000fbd5:	83 ec 08             	sub    esp,0x8
c000fbd8:	ff 0d 70 e2 02 c0    	dec    DWORD PTR ds:0xc002e270
c000fbde:	6a 00                	push   0x0
c000fbe0:	53                   	push   ebx
c000fbe1:	e8 70 ff ff ff       	call   c000fb56 <Phys::setPageState(unsigned long, bool)>
c000fbe6:	83 c4 10             	add    esp,0x10
c000fbe9:	83 c4 08             	add    esp,0x8
c000fbec:	5b                   	pop    ebx
c000fbed:	c3                   	ret    
c000fbee:	c7 44 24 10 50 a5 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a550
c000fbf6:	83 c4 08             	add    esp,0x8
c000fbf9:	5b                   	pop    ebx
c000fbfa:	e9 3e a5 00 00       	jmp    c001a13d <Krnl::panic(char const*)>
c000fbff:	83 ec 08             	sub    esp,0x8
c000fc02:	68 00 10 00 00       	push   0x1000
c000fc07:	53                   	push   ebx
c000fc08:	e8 ea fe ff ff       	call   c000faf7 <Phys::freeDMA(unsigned long, unsigned long)>
c000fc0d:	83 c4 10             	add    esp,0x10
c000fc10:	83 c4 08             	add    esp,0x8
c000fc13:	5b                   	pop    ebx
c000fc14:	c3                   	ret    

c000fc15 <Phys::allocatePage()>:
c000fc15:	56                   	push   esi
c000fc16:	53                   	push   ebx
c000fc17:	83 ec 14             	sub    esp,0x14
c000fc1a:	8b 35 64 e2 02 c0    	mov    esi,DWORD PTR ds:0xc002e264
c000fc20:	89 f3                	mov    ebx,esi
c000fc22:	eb 0a                	jmp    c000fc2e <Phys::allocatePage()+0x19>
c000fc24:	89 1d 64 e2 02 c0    	mov    DWORD PTR ds:0xc002e264,ebx
c000fc2a:	39 de                	cmp    esi,ebx
c000fc2c:	74 24                	je     c000fc52 <Phys::allocatePage()+0x3d>
c000fc2e:	53                   	push   ebx
c000fc2f:	e8 54 ff ff ff       	call   c000fb88 <Phys::getPageState(unsigned long)>
c000fc34:	5a                   	pop    edx
c000fc35:	84 c0                	test   al,al
c000fc37:	74 76                	je     c000fcaf <Phys::allocatePage()+0x9a>
c000fc39:	43                   	inc    ebx
c000fc3a:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fc40:	75 e2                	jne    c000fc24 <Phys::allocatePage()+0xf>
c000fc42:	31 db                	xor    ebx,ebx
c000fc44:	c7 05 64 e2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e264,0x0
c000fc4e:	39 de                	cmp    esi,ebx
c000fc50:	75 dc                	jne    c000fc2e <Phys::allocatePage()+0x19>
c000fc52:	83 ec 0c             	sub    esp,0xc
c000fc55:	68 84 a5 02 c0       	push   0xc002a584
c000fc5a:	e8 12 2c 00 00       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c000fc5f:	58                   	pop    eax
c000fc60:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fc65:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fc68:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000fc6e:	e8 8d 28 00 00       	call   c0012500 <VAS::scanForEviction()>
c000fc73:	83 c4 10             	add    esp,0x10
c000fc76:	85 c0                	test   eax,eax
c000fc78:	75 76                	jne    c000fcf0 <Phys::allocatePage()+0xdb>
c000fc7a:	83 ec 0c             	sub    esp,0xc
c000fc7d:	68 00 10 00 00       	push   0x1000
c000fc82:	e8 a2 fd ff ff       	call   c000fa29 <Phys::allocateDMA(unsigned long)>
c000fc87:	83 c4 10             	add    esp,0x10
c000fc8a:	85 c0                	test   eax,eax
c000fc8c:	75 5c                	jne    c000fcea <Phys::allocatePage()+0xd5>
c000fc8e:	83 ec 0c             	sub    esp,0xc
c000fc91:	68 9c a5 02 c0       	push   0xc002a59c
c000fc96:	e8 a2 a4 00 00       	call   c001a13d <Krnl::panic(char const*)>
c000fc9b:	83 c4 10             	add    esp,0x10
c000fc9e:	8b 1d 64 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e264
c000fca4:	53                   	push   ebx
c000fca5:	e8 de fe ff ff       	call   c000fb88 <Phys::getPageState(unsigned long)>
c000fcaa:	5a                   	pop    edx
c000fcab:	84 c0                	test   al,al
c000fcad:	75 8a                	jne    c000fc39 <Phys::allocatePage()+0x24>
c000fcaf:	6a 01                	push   0x1
c000fcb1:	53                   	push   ebx
c000fcb2:	e8 9f fe ff ff       	call   c000fb56 <Phys::setPageState(unsigned long, bool)>
c000fcb7:	5a                   	pop    edx
c000fcb8:	a1 70 e2 02 c0       	mov    eax,ds:0xc002e270
c000fcbd:	59                   	pop    ecx
c000fcbe:	40                   	inc    eax
c000fcbf:	8b 15 64 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e264
c000fcc5:	a3 70 e2 02 c0       	mov    ds:0xc002e270,eax
c000fcca:	c1 e2 0c             	shl    edx,0xc
c000fccd:	52                   	push   edx
c000fcce:	ff 35 74 e2 02 c0    	push   DWORD PTR ds:0xc002e274
c000fcd4:	50                   	push   eax
c000fcd5:	68 66 a5 02 c0       	push   0xc002a566
c000fcda:	e8 92 2b 00 00       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c000fcdf:	a1 64 e2 02 c0       	mov    eax,ds:0xc002e264
c000fce4:	83 c4 10             	add    esp,0x10
c000fce7:	c1 e0 0c             	shl    eax,0xc
c000fcea:	83 c4 14             	add    esp,0x14
c000fced:	5b                   	pop    ebx
c000fcee:	5e                   	pop    esi
c000fcef:	c3                   	ret    
c000fcf0:	83 ec 08             	sub    esp,0x8
c000fcf3:	89 c2                	mov    edx,eax
c000fcf5:	6a 01                	push   0x1
c000fcf7:	c1 ea 0c             	shr    edx,0xc
c000fcfa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fcfe:	52                   	push   edx
c000fcff:	e8 52 fe ff ff       	call   c000fb56 <Phys::setPageState(unsigned long, bool)>
c000fd04:	83 c4 10             	add    esp,0x10
c000fd07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fd0b:	eb dd                	jmp    c000fcea <Phys::allocatePage()+0xd5>

c000fd0d <Phys::allocateContiguousPages(int)>:
c000fd0d:	57                   	push   edi
c000fd0e:	56                   	push   esi
c000fd0f:	53                   	push   ebx
c000fd10:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fd14:	fa                   	cli    
c000fd15:	ff 05 28 f7 02 c0    	inc    DWORD PTR ds:0xc002f728
c000fd1b:	31 db                	xor    ebx,ebx
c000fd1d:	85 db                	test   ebx,ebx
c000fd1f:	75 11                	jne    c000fd32 <Phys::allocateContiguousPages(int)+0x25>
c000fd21:	e8 ef fe ff ff       	call   c000fc15 <Phys::allocatePage()>
c000fd26:	83 fe 01             	cmp    esi,0x1
c000fd29:	89 c7                	mov    edi,eax
c000fd2b:	74 21                	je     c000fd4e <Phys::allocateContiguousPages(int)+0x41>
c000fd2d:	bb 01 00 00 00       	mov    ebx,0x1
c000fd32:	e8 de fe ff ff       	call   c000fc15 <Phys::allocatePage()>
c000fd37:	89 da                	mov    edx,ebx
c000fd39:	c1 e2 0c             	shl    edx,0xc
c000fd3c:	01 fa                	add    edx,edi
c000fd3e:	39 c2                	cmp    edx,eax
c000fd40:	74 20                	je     c000fd62 <Phys::allocateContiguousPages(int)+0x55>
c000fd42:	bb 01 00 00 00       	mov    ebx,0x1
c000fd47:	89 c7                	mov    edi,eax
c000fd49:	83 fe 01             	cmp    esi,0x1
c000fd4c:	75 e4                	jne    c000fd32 <Phys::allocateContiguousPages(int)+0x25>
c000fd4e:	a1 28 f7 02 c0       	mov    eax,ds:0xc002f728
c000fd53:	48                   	dec    eax
c000fd54:	a3 28 f7 02 c0       	mov    ds:0xc002f728,eax
c000fd59:	75 01                	jne    c000fd5c <Phys::allocateContiguousPages(int)+0x4f>
c000fd5b:	fb                   	sti    
c000fd5c:	89 f8                	mov    eax,edi
c000fd5e:	5b                   	pop    ebx
c000fd5f:	5e                   	pop    esi
c000fd60:	5f                   	pop    edi
c000fd61:	c3                   	ret    
c000fd62:	43                   	inc    ebx
c000fd63:	39 f3                	cmp    ebx,esi
c000fd65:	75 b6                	jne    c000fd1d <Phys::allocateContiguousPages(int)+0x10>
c000fd67:	eb e5                	jmp    c000fd4e <Phys::allocateContiguousPages(int)+0x41>

c000fd69 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fd69:	56                   	push   esi
c000fd6a:	53                   	push   ebx
c000fd6b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fd6f:	39 1d 68 e2 02 c0    	cmp    DWORD PTR ds:0xc002e268,ebx
c000fd75:	73 06                	jae    c000fd7d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fd77:	89 1d 68 e2 02 c0    	mov    DWORD PTR ds:0xc002e268,ebx
c000fd7d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fd81:	c1 eb 0c             	shr    ebx,0xc
c000fd84:	c1 e8 0c             	shr    eax,0xc
c000fd87:	39 d8                	cmp    eax,ebx
c000fd89:	73 13                	jae    c000fd9e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fd8b:	6a 00                	push   0x0
c000fd8d:	8d 70 01             	lea    esi,[eax+0x1]
c000fd90:	50                   	push   eax
c000fd91:	e8 c0 fd ff ff       	call   c000fb56 <Phys::setPageState(unsigned long, bool)>
c000fd96:	5a                   	pop    edx
c000fd97:	89 f0                	mov    eax,esi
c000fd99:	59                   	pop    ecx
c000fd9a:	39 f3                	cmp    ebx,esi
c000fd9c:	75 ed                	jne    c000fd8b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fd9e:	5b                   	pop    ebx
c000fd9f:	5e                   	pop    esi
c000fda0:	c3                   	ret    

c000fda1 <Phys::physicalMemorySetup(unsigned int)>:
c000fda1:	55                   	push   ebp
c000fda2:	57                   	push   edi
c000fda3:	56                   	push   esi
c000fda4:	53                   	push   ebx
c000fda5:	83 ec 40             	sub    esp,0x40
c000fda8:	6a 30                	push   0x30
c000fdaa:	6a 00                	push   0x0
c000fdac:	68 80 e2 02 c0       	push   0xc002e280
c000fdb1:	e8 9a 09 ff ff       	call   c0000750 <memset>
c000fdb6:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fdba:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fdbf:	05 00 10 00 00       	add    eax,0x1000
c000fdc4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fdc8:	5b                   	pop    ebx
c000fdc9:	31 db                	xor    ebx,ebx
c000fdcb:	5e                   	pop    esi
c000fdcc:	50                   	push   eax
c000fdcd:	68 aa a5 02 c0       	push   0xc002a5aa
c000fdd2:	e8 9a 2a 00 00       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c000fdd7:	83 c4 10             	add    esp,0x10
c000fdda:	83 ec 08             	sub    esp,0x8
c000fddd:	6a 01                	push   0x1
c000fddf:	53                   	push   ebx
c000fde0:	43                   	inc    ebx
c000fde1:	e8 70 fd ff ff       	call   c000fb56 <Phys::setPageState(unsigned long, bool)>
c000fde6:	83 c4 10             	add    esp,0x10
c000fde9:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fdef:	75 e9                	jne    c000fdda <Phys::physicalMemorySetup(unsigned int)+0x39>
c000fdf1:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fdf8:	66 85 c0             	test   ax,ax
c000fdfb:	0f 84 8e 01 00 00    	je     c000ff8f <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c000fe01:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fe05:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fe0d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe11:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fe16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fe1a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fe22:	eb 15                	jmp    c000fe39 <Phys::physicalMemorySetup(unsigned int)+0x98>
c000fe24:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000fe28:	83 c3 18             	add    ebx,0x18
c000fe2b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fe2f:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000fe33:	0f 84 66 01 00 00    	je     c000ff9f <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000fe39:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000fe3c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fe3f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000fe42:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fe46:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fe4a:	8b 33                	mov    esi,DWORD PTR [ebx]
c000fe4c:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000fe4f:	01 f0                	add    eax,esi
c000fe51:	55                   	push   ebp
c000fe52:	11 fa                	adc    edx,edi
c000fe54:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fe58:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000fe5c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fe60:	56                   	push   esi
c000fe61:	68 ec a5 02 c0       	push   0xc002a5ec
c000fe66:	e8 06 2a 00 00       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c000fe6b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fe6f:	83 c4 10             	add    esp,0x10
c000fe72:	09 f8                	or     eax,edi
c000fe74:	0f 85 25 01 00 00    	jne    c000ff9f <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000fe7a:	4d                   	dec    ebp
c000fe7b:	75 a7                	jne    c000fe24 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fe7d:	ba 00 00 08 00       	mov    edx,0x80000
c000fe82:	89 c1                	mov    ecx,eax
c000fe84:	39 f2                	cmp    edx,esi
c000fe86:	19 f9                	sbb    ecx,edi
c000fe88:	0f 82 a7 00 00 00    	jb     c000ff35 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000fe8e:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000fe92:	89 c1                	mov    ecx,eax
c000fe94:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000fe98:	0f 83 97 00 00 00    	jae    c000ff35 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000fe9e:	ba 00 00 0a 00       	mov    edx,0xa0000
c000fea3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fea7:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000feab:	39 fa                	cmp    edx,edi
c000fead:	19 e8                	sbb    eax,ebp
c000feaf:	0f 82 14 01 00 00    	jb     c000ffc9 <Phys::physicalMemorySetup(unsigned int)+0x228>
c000feb5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000feb9:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000febd:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000fec3:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fec8:	83 d5 ff             	adc    ebp,0xffffffff
c000fecb:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000fecf:	31 c0                	xor    eax,eax
c000fed1:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000fed5:	39 fa                	cmp    edx,edi
c000fed7:	89 c1                	mov    ecx,eax
c000fed9:	19 e9                	sbb    ecx,ebp
c000fedb:	0f 83 43 ff ff ff    	jae    c000fe24 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fee1:	be 00 00 08 00       	mov    esi,0x80000
c000fee6:	50                   	push   eax
c000fee7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000feeb:	57                   	push   edi
c000feec:	56                   	push   esi
c000feed:	68 10 a6 02 c0       	push   0xc002a610
c000fef2:	e8 7a 29 00 00       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c000fef7:	5a                   	pop    edx
c000fef8:	59                   	pop    ecx
c000fef9:	57                   	push   edi
c000fefa:	56                   	push   esi
c000fefb:	e8 69 fe ff ff       	call   c000fd69 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000ff00:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ff04:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ff08:	83 c4 0c             	add    esp,0xc
c000ff0b:	0f ac d0 0c          	shrd   eax,edx,0xc
c000ff0f:	03 05 74 e2 02 c0    	add    eax,DWORD PTR ds:0xc002e274
c000ff15:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000ff1c:	a3 74 e2 02 c0       	mov    ds:0xc002e274,eax
c000ff21:	52                   	push   edx
c000ff22:	50                   	push   eax
c000ff23:	68 d0 a5 02 c0       	push   0xc002a5d0
c000ff28:	e8 44 29 00 00       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c000ff2d:	83 c4 10             	add    esp,0x10
c000ff30:	e9 ef fe ff ff       	jmp    c000fe24 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000ff35:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000ff39:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ff3d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ff41:	39 ea                	cmp    edx,ebp
c000ff43:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000ff47:	0f 82 d7 fe ff ff    	jb     c000fe24 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000ff4d:	ba ff 1f 00 00       	mov    edx,0x1fff
c000ff52:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000ff56:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000ff5a:	0f 83 c4 fe ff ff    	jae    c000fe24 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000ff60:	39 ee                	cmp    esi,ebp
c000ff62:	89 f8                	mov    eax,edi
c000ff64:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000ff68:	0f 83 78 ff ff ff    	jae    c000fee6 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000ff6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ff72:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ff76:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ff7a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000ff7e:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000ff82:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ff86:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ff8a:	e9 57 ff ff ff       	jmp    c000fee6 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000ff8f:	83 ec 0c             	sub    esp,0xc
c000ff92:	68 c2 a5 02 c0       	push   0xc002a5c2
c000ff97:	e8 a1 a1 00 00       	call   c001a13d <Krnl::panic(char const*)>
c000ff9c:	83 c4 10             	add    esp,0x10
c000ff9f:	bb 40 01 00 00       	mov    ebx,0x140
c000ffa4:	83 ec 08             	sub    esp,0x8
c000ffa7:	6a 00                	push   0x0
c000ffa9:	53                   	push   ebx
c000ffaa:	43                   	inc    ebx
c000ffab:	e8 a6 fb ff ff       	call   c000fb56 <Phys::setPageState(unsigned long, bool)>
c000ffb0:	ff 05 74 e2 02 c0    	inc    DWORD PTR ds:0xc002e274
c000ffb6:	83 c4 10             	add    esp,0x10
c000ffb9:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000ffbf:	75 e3                	jne    c000ffa4 <Phys::physicalMemorySetup(unsigned int)+0x203>
c000ffc1:	83 c4 3c             	add    esp,0x3c
c000ffc4:	5b                   	pop    ebx
c000ffc5:	5e                   	pop    esi
c000ffc6:	5f                   	pop    edi
c000ffc7:	5d                   	pop    ebp
c000ffc8:	c3                   	ret    
c000ffc9:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000ffd1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ffd9:	e9 d7 fe ff ff       	jmp    c000feb5 <Phys::physicalMemorySetup(unsigned int)+0x114>

c000ffde <Pipe::isAtty()>:
c000ffde:	31 c0                	xor    eax,eax
c000ffe0:	c3                   	ret    
c000ffe1:	90                   	nop

c000ffe2 <Pipe::~Pipe()>:
c000ffe2:	83 ec 0c             	sub    esp,0xc
c000ffe5:	ba 7c a6 02 c0       	mov    edx,0xc002a67c
c000ffea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffee:	89 10                	mov    DWORD PTR [eax],edx
c000fff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fff4:	83 ec 0c             	sub    esp,0xc
c000fff7:	50                   	push   eax
c000fff8:	e8 41 12 00 00       	call   c001123e <UnixFile::~UnixFile()>
c000fffd:	83 c4 10             	add    esp,0x10
c0010000:	90                   	nop
c0010001:	83 c4 0c             	add    esp,0xc
c0010004:	c3                   	ret    
c0010005:	90                   	nop

c0010006 <Pipe::~Pipe()>:
c0010006:	83 ec 0c             	sub    esp,0xc
c0010009:	83 ec 0c             	sub    esp,0xc
c001000c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010010:	e8 cd ff ff ff       	call   c000ffe2 <Pipe::~Pipe()>
c0010015:	83 c4 10             	add    esp,0x10
c0010018:	83 ec 08             	sub    esp,0x8
c001001b:	6a 20                	push   0x20
c001001d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010021:	e8 73 27 00 00       	call   c0012799 <operator delete(void*, unsigned long)>
c0010026:	83 c4 10             	add    esp,0x10
c0010029:	83 c4 0c             	add    esp,0xc
c001002c:	c3                   	ret    
c001002d:	90                   	nop

c001002e <Pipe::read(unsigned long long, void*, int*)>:
c001002e:	55                   	push   ebp
c001002f:	57                   	push   edi
c0010030:	56                   	push   esi
c0010031:	53                   	push   ebx
c0010032:	83 ec 1c             	sub    esp,0x1c
c0010035:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010039:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001003d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010041:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0010044:	89 c8                	mov    eax,ecx
c0010046:	99                   	cdq    
c0010047:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c001004b:	74 24                	je     c0010071 <Pipe::read(unsigned long long, void*, int*)+0x43>
c001004d:	39 f9                	cmp    ecx,edi
c001004f:	89 d1                	mov    ecx,edx
c0010051:	19 f1                	sbb    ecx,esi
c0010053:	73 1c                	jae    c0010071 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0010055:	fa                   	cli    
c0010056:	ff 05 28 f7 02 c0    	inc    DWORD PTR ds:0xc002f728
c001005c:	e8 6e dc 00 00       	call   c001dccf <schedule()>
c0010061:	a1 28 f7 02 c0       	mov    eax,ds:0xc002f728
c0010066:	48                   	dec    eax
c0010067:	a3 28 f7 02 c0       	mov    ds:0xc002f728,eax
c001006c:	75 d3                	jne    c0010041 <Pipe::read(unsigned long long, void*, int*)+0x13>
c001006e:	fb                   	sti    
c001006f:	eb d0                	jmp    c0010041 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010071:	39 f8                	cmp    eax,edi
c0010073:	89 d1                	mov    ecx,edx
c0010075:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010078:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c001007c:	19 f1                	sbb    ecx,esi
c001007e:	73 07                	jae    c0010087 <Pipe::read(unsigned long long, void*, int*)+0x59>
c0010080:	89 04 24             	mov    DWORD PTR [esp],eax
c0010083:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010087:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c001008a:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c001008d:	29 f7                	sub    edi,esi
c001008f:	89 f8                	mov    eax,edi
c0010091:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0010095:	99                   	cdq    
c0010096:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0010099:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001009d:	19 d0                	sbb    eax,edx
c001009f:	73 07                	jae    c00100a8 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c00100a1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00100a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00100a8:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00100ab:	89 ea                	mov    edx,ebp
c00100ad:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00100b1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00100b6:	74 0d                	je     c00100c5 <Pipe::read(unsigned long long, void*, int*)+0x97>
c00100b8:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00100bb:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00100bf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00100c3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00100c5:	85 d2                	test   edx,edx
c00100c7:	74 11                	je     c00100da <Pipe::read(unsigned long long, void*, int*)+0xac>
c00100c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00100cd:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00100d0:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00100d4:	89 d1                	mov    ecx,edx
c00100d6:	89 c7                	mov    edi,eax
c00100d8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00100da:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00100dd:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00100e0:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00100e3:	99                   	cdq    
c00100e4:	89 f7                	mov    edi,esi
c00100e6:	03 04 24             	add    eax,DWORD PTR [esp]
c00100e9:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c00100ed:	c1 ff 1f             	sar    edi,0x1f
c00100f0:	57                   	push   edi
c00100f1:	56                   	push   esi
c00100f2:	52                   	push   edx
c00100f3:	50                   	push   eax
c00100f4:	e8 7b 6b 01 00       	call   c0026c74 <__umoddi3>
c00100f9:	83 c4 10             	add    esp,0x10
c00100fc:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00100ff:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010104:	75 10                	jne    c0010116 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0010106:	83 ec 0c             	sub    esp,0xc
c0010109:	68 39 a6 02 c0       	push   0xc002a639
c001010e:	e8 2a a0 00 00       	call   c001a13d <Krnl::panic(char const*)>
c0010113:	83 c4 10             	add    esp,0x10
c0010116:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001011a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001011d:	89 10                	mov    DWORD PTR [eax],edx
c001011f:	83 c4 1c             	add    esp,0x1c
c0010122:	31 c0                	xor    eax,eax
c0010124:	5b                   	pop    ebx
c0010125:	5e                   	pop    esi
c0010126:	5f                   	pop    edi
c0010127:	5d                   	pop    ebp
c0010128:	c3                   	ret    
c0010129:	90                   	nop

c001012a <Pipe::write(unsigned long long, void*, int*)>:
c001012a:	55                   	push   ebp
c001012b:	57                   	push   edi
c001012c:	56                   	push   esi
c001012d:	53                   	push   ebx
c001012e:	83 ec 1c             	sub    esp,0x1c
c0010131:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010135:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010139:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001013c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010140:	89 04 24             	mov    DWORD PTR [esp],eax
c0010143:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010147:	89 d8                	mov    eax,ebx
c0010149:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001014c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0010150:	89 d6                	mov    esi,edx
c0010152:	89 d7                	mov    edi,edx
c0010154:	c1 ff 1f             	sar    edi,0x1f
c0010157:	03 34 24             	add    esi,DWORD PTR [esp]
c001015a:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c001015e:	c1 f8 1f             	sar    eax,0x1f
c0010161:	39 f3                	cmp    ebx,esi
c0010163:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010167:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001016b:	19 f8                	sbb    eax,edi
c001016d:	b8 01 00 00 00       	mov    eax,0x1
c0010172:	72 6e                	jb     c00101e2 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0010174:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0010177:	01 d0                	add    eax,edx
c0010179:	99                   	cdq    
c001017a:	f7 fb                	idiv   ebx
c001017c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010180:	29 d3                	sub    ebx,edx
c0010182:	89 d7                	mov    edi,edx
c0010184:	89 de                	mov    esi,ebx
c0010186:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0010189:	c1 fb 1f             	sar    ebx,0x1f
c001018c:	39 f2                	cmp    edx,esi
c001018e:	19 d8                	sbb    eax,ebx
c0010190:	b8 00 00 00 00       	mov    eax,0x0
c0010195:	72 04                	jb     c001019b <Pipe::write(unsigned long long, void*, int*)+0x71>
c0010197:	89 d0                	mov    eax,edx
c0010199:	29 f0                	sub    eax,esi
c001019b:	89 d3                	mov    ebx,edx
c001019d:	29 c3                	sub    ebx,eax
c001019f:	74 0b                	je     c00101ac <Pipe::write(unsigned long long, void*, int*)+0x82>
c00101a1:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00101a4:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00101a8:	89 d9                	mov    ecx,ebx
c00101aa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00101ac:	85 c0                	test   eax,eax
c00101ae:	74 0d                	je     c00101bd <Pipe::write(unsigned long long, void*, int*)+0x93>
c00101b0:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00101b4:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00101b7:	89 de                	mov    esi,ebx
c00101b9:	89 c1                	mov    ecx,eax
c00101bb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00101bd:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c00101c0:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00101c5:	75 10                	jne    c00101d7 <Pipe::write(unsigned long long, void*, int*)+0xad>
c00101c7:	83 ec 0c             	sub    esp,0xc
c00101ca:	68 55 a6 02 c0       	push   0xc002a655
c00101cf:	e8 69 9f 00 00       	call   c001a13d <Krnl::panic(char const*)>
c00101d4:	83 c4 10             	add    esp,0x10
c00101d7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00101db:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00101de:	89 08                	mov    DWORD PTR [eax],ecx
c00101e0:	31 c0                	xor    eax,eax
c00101e2:	83 c4 1c             	add    esp,0x1c
c00101e5:	5b                   	pop    ebx
c00101e6:	5e                   	pop    esi
c00101e7:	5f                   	pop    edi
c00101e8:	5d                   	pop    ebp
c00101e9:	c3                   	ret    

c00101ea <Pipe::Pipe(int)>:
c00101ea:	83 ec 0c             	sub    esp,0xc
c00101ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101f1:	83 ec 08             	sub    esp,0x8
c00101f4:	6a 00                	push   0x0
c00101f6:	50                   	push   eax
c00101f7:	e8 60 0e 00 00       	call   c001105c <UnixFile::UnixFile(int)>
c00101fc:	83 c4 10             	add    esp,0x10
c00101ff:	ba 7c a6 02 c0       	mov    edx,0xc002a67c
c0010204:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010208:	89 10                	mov    DWORD PTR [eax],edx
c001020a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001020e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010212:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010215:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010219:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0010220:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010224:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001022b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001022f:	83 ec 0c             	sub    esp,0xc
c0010232:	50                   	push   eax
c0010233:	e8 e1 f5 ff ff       	call   c000f819 <malloc>
c0010238:	83 c4 10             	add    esp,0x10
c001023b:	89 c2                	mov    edx,eax
c001023d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010241:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010244:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010248:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c001024c:	90                   	nop
c001024d:	83 c4 0c             	add    esp,0xc
c0010250:	c3                   	ret    
c0010251:	90                   	nop

c0010252 <VgaText::isAtty()>:
c0010252:	b0 01                	mov    al,0x1
c0010254:	c3                   	ret    
c0010255:	90                   	nop

c0010256 <VgaText::~VgaText()>:
c0010256:	83 ec 0c             	sub    esp,0xc
c0010259:	ba 04 a7 02 c0       	mov    edx,0xc002a704
c001025e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010262:	89 10                	mov    DWORD PTR [eax],edx
c0010264:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010268:	83 ec 0c             	sub    esp,0xc
c001026b:	50                   	push   eax
c001026c:	e8 cd 0f 00 00       	call   c001123e <UnixFile::~UnixFile()>
c0010271:	83 c4 10             	add    esp,0x10
c0010274:	90                   	nop
c0010275:	83 c4 0c             	add    esp,0xc
c0010278:	c3                   	ret    
c0010279:	90                   	nop

c001027a <VgaText::~VgaText()>:
c001027a:	83 ec 0c             	sub    esp,0xc
c001027d:	83 ec 0c             	sub    esp,0xc
c0010280:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010284:	e8 cd ff ff ff       	call   c0010256 <VgaText::~VgaText()>
c0010289:	83 c4 10             	add    esp,0x10
c001028c:	83 ec 08             	sub    esp,0x8
c001028f:	68 c4 02 00 00       	push   0x2c4
c0010294:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010298:	e8 fc 24 00 00       	call   c0012799 <operator delete(void*, unsigned long)>
c001029d:	83 c4 10             	add    esp,0x10
c00102a0:	83 c4 0c             	add    esp,0xc
c00102a3:	c3                   	ret    

c00102a4 <VgaText::read(unsigned long long, void*, int*)>:
c00102a4:	83 ec 10             	sub    esp,0x10
c00102a7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00102ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00102af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102b3:	e8 86 5a 00 00       	call   c0015d3e <readKeyboard(VgaText*, char*, unsigned long)>
c00102b8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00102bc:	89 02                	mov    DWORD PTR [edx],eax
c00102be:	31 c0                	xor    eax,eax
c00102c0:	83 c4 1c             	add    esp,0x1c
c00102c3:	c3                   	ret    

c00102c4 <setTerminalScrollLock(bool)>:
c00102c4:	c3                   	ret    

c00102c5 <addToTerminalCycle(VgaText*)>:
c00102c5:	8b 15 e0 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e2e0
c00102cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102cf:	85 d2                	test   edx,edx
c00102d1:	75 09                	jne    c00102dc <addToTerminalCycle(VgaText*)+0x17>
c00102d3:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c00102d6:	a3 e0 e2 02 c0       	mov    ds:0xc002e2e0,eax
c00102db:	c3                   	ret    
c00102dc:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c00102df:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c00102e2:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c00102e5:	c3                   	ret    

c00102e6 <installVgaTextImplementation()>:
c00102e6:	83 ec 10             	sub    esp,0x10
c00102e9:	6a 20                	push   0x20
c00102eb:	6a 00                	push   0x0
c00102ed:	68 c0 e2 02 c0       	push   0xc002e2c0
c00102f2:	e8 59 04 ff ff       	call   c0000750 <memset>
c00102f7:	83 c4 1c             	add    esp,0x1c
c00102fa:	c3                   	ret    

c00102fb <scrollTerminalScrollLock(int)>:
c00102fb:	c3                   	ret    

c00102fc <VgaText::updateTitle()>:
c00102fc:	53                   	push   ebx
c00102fd:	31 c0                	xor    eax,eax
c00102ff:	83 ec 58             	sub    esp,0x58
c0010302:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010306:	89 e1                	mov    ecx,esp
c0010308:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c001030c:	40                   	inc    eax
c001030d:	83 f8 50             	cmp    eax,0x50
c0010310:	75 f6                	jne    c0010308 <VgaText::updateTitle()+0xc>
c0010312:	31 c0                	xor    eax,eax
c0010314:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c001031b:	84 db                	test   bl,bl
c001031d:	74 06                	je     c0010325 <VgaText::updateTitle()+0x29>
c001031f:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010322:	40                   	inc    eax
c0010323:	eb ef                	jmp    c0010314 <VgaText::updateTitle()+0x18>
c0010325:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c0010328:	85 c0                	test   eax,eax
c001032a:	74 09                	je     c0010335 <VgaText::updateTitle()+0x39>
c001032c:	53                   	push   ebx
c001032d:	53                   	push   ebx
c001032e:	51                   	push   ecx
c001032f:	52                   	push   edx
c0010330:	ff d0                	call   eax
c0010332:	83 c4 10             	add    esp,0x10
c0010335:	83 c4 58             	add    esp,0x58
c0010338:	5b                   	pop    ebx
c0010339:	c3                   	ret    

c001033a <VgaText::load()>:
c001033a:	53                   	push   ebx
c001033b:	31 c0                	xor    eax,eax
c001033d:	83 ec 58             	sub    esp,0x58
c0010340:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0010344:	89 e2                	mov    edx,esp
c0010346:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c001034a:	40                   	inc    eax
c001034b:	83 f8 50             	cmp    eax,0x50
c001034e:	75 f6                	jne    c0010346 <VgaText::load()+0xc>
c0010350:	31 c0                	xor    eax,eax
c0010352:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c0010359:	84 c9                	test   cl,cl
c001035b:	74 06                	je     c0010363 <VgaText::load()+0x29>
c001035d:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0010360:	40                   	inc    eax
c0010361:	eb ef                	jmp    c0010352 <VgaText::load()+0x18>
c0010363:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c0010366:	85 c0                	test   eax,eax
c0010368:	74 09                	je     c0010373 <VgaText::load()+0x39>
c001036a:	51                   	push   ecx
c001036b:	51                   	push   ecx
c001036c:	52                   	push   edx
c001036d:	53                   	push   ebx
c001036e:	ff d0                	call   eax
c0010370:	83 c4 10             	add    esp,0x10
c0010373:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c0010376:	85 c0                	test   eax,eax
c0010378:	74 09                	je     c0010383 <VgaText::load()+0x49>
c001037a:	83 ec 0c             	sub    esp,0xc
c001037d:	53                   	push   ebx
c001037e:	ff d0                	call   eax
c0010380:	83 c4 10             	add    esp,0x10
c0010383:	83 c4 58             	add    esp,0x58
c0010386:	5b                   	pop    ebx
c0010387:	c3                   	ret    

c0010388 <VgaText::updateCursor()>:
c0010388:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001038c:	39 05 e4 e2 02 c0    	cmp    DWORD PTR ds:0xc002e2e4,eax
c0010392:	75 09                	jne    c001039d <VgaText::updateCursor()+0x15>
c0010394:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c0010397:	85 c0                	test   eax,eax
c0010399:	74 02                	je     c001039d <VgaText::updateCursor()+0x15>
c001039b:	ff e0                	jmp    eax
c001039d:	c3                   	ret    

c001039e <VgaText::doANSI_SGR(int)>:
c001039e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103a6:	85 d2                	test   edx,edx
c00103a8:	75 0b                	jne    c00103b5 <VgaText::doANSI_SGR(int)+0x17>
c00103aa:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00103ad:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00103b0:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00103b3:	eb 59                	jmp    c001040e <VgaText::doANSI_SGR(int)+0x70>
c00103b5:	83 fa 07             	cmp    edx,0x7
c00103b8:	75 0b                	jne    c00103c5 <VgaText::doANSI_SGR(int)+0x27>
c00103ba:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00103bd:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00103c0:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00103c3:	eb 49                	jmp    c001040e <VgaText::doANSI_SGR(int)+0x70>
c00103c5:	83 fa 1b             	cmp    edx,0x1b
c00103c8:	74 e0                	je     c00103aa <VgaText::doANSI_SGR(int)+0xc>
c00103ca:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00103cd:	83 f9 07             	cmp    ecx,0x7
c00103d0:	77 09                	ja     c00103db <VgaText::doANSI_SGR(int)+0x3d>
c00103d2:	8b 14 8d 80 d1 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2e80]
c00103d9:	eb 20                	jmp    c00103fb <VgaText::doANSI_SGR(int)+0x5d>
c00103db:	8d 4a d8             	lea    ecx,[edx-0x28]
c00103de:	83 f9 07             	cmp    ecx,0x7
c00103e1:	77 09                	ja     c00103ec <VgaText::doANSI_SGR(int)+0x4e>
c00103e3:	8b 14 8d 80 d1 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2e80]
c00103ea:	eb 22                	jmp    c001040e <VgaText::doANSI_SGR(int)+0x70>
c00103ec:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00103ef:	83 f9 07             	cmp    ecx,0x7
c00103f2:	77 0b                	ja     c00103ff <VgaText::doANSI_SGR(int)+0x61>
c00103f4:	8b 14 95 38 d0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2fc8]
c00103fb:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00103fe:	c3                   	ret    
c00103ff:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010402:	83 f9 07             	cmp    ecx,0x7
c0010405:	77 0a                	ja     c0010411 <VgaText::doANSI_SGR(int)+0x73>
c0010407:	8b 14 95 10 d0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2ff0]
c001040e:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010411:	c3                   	ret    

c0010412 <VgaText::setDefaultBgColour(VgaColour)>:
c0010412:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010416:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001041a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001041d:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010420:	c3                   	ret    
c0010421:	90                   	nop

c0010422 <VgaText::setDefaultFgColour(VgaColour)>:
c0010422:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010426:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001042a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001042d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010430:	c3                   	ret    
c0010431:	90                   	nop

c0010432 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010432:	53                   	push   ebx
c0010433:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010437:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001043b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001043f:	51                   	push   ecx
c0010440:	e8 cd ff ff ff       	call   c0010412 <VgaText::setDefaultBgColour(VgaColour)>
c0010445:	58                   	pop    eax
c0010446:	5a                   	pop    edx
c0010447:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001044b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001044f:	5b                   	pop    ebx
c0010450:	eb d0                	jmp    c0010422 <VgaText::setDefaultFgColour(VgaColour)>

c0010452 <VgaText::setTitleTextColour(VgaColour)>:
c0010452:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010456:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001045a:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c001045d:	e9 9a fe ff ff       	jmp    c00102fc <VgaText::updateTitle()>

c0010462 <VgaText::setTitleColour(VgaColour)>:
c0010462:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010466:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001046a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001046d:	e9 8a fe ff ff       	jmp    c00102fc <VgaText::updateTitle()>

c0010472 <VgaText::setTitle(char*)>:
c0010472:	53                   	push   ebx
c0010473:	83 ec 10             	sub    esp,0x10
c0010476:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001047a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001047e:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c0010484:	50                   	push   eax
c0010485:	e8 82 03 ff ff       	call   c000080c <strcpy>
c001048a:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001048e:	83 c4 18             	add    esp,0x18
c0010491:	5b                   	pop    ebx
c0010492:	e9 65 fe ff ff       	jmp    c00102fc <VgaText::updateTitle()>
c0010497:	90                   	nop

c0010498 <VgaText::combineColours(unsigned char, unsigned char)>:
c0010498:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001049c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00104a1:	83 e0 0f             	and    eax,0xf
c00104a4:	c1 e2 04             	shl    edx,0x4
c00104a7:	09 d0                	or     eax,edx
c00104a9:	c3                   	ret    

c00104aa <VgaText::scrollScreen()>:
c00104aa:	55                   	push   ebp
c00104ab:	b9 01 00 00 00       	mov    ecx,0x1
c00104b0:	57                   	push   edi
c00104b1:	56                   	push   esi
c00104b2:	53                   	push   ebx
c00104b3:	83 ec 0c             	sub    esp,0xc
c00104b6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00104ba:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c00104c0:	31 ff                	xor    edi,edi
c00104c2:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00104c5:	83 f9 17             	cmp    ecx,0x17
c00104c8:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c00104cb:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c00104d2:	75 27                	jne    c00104fb <VgaText::scrollScreen()+0x51>
c00104d4:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00104d7:	01 f5                	add    ebp,esi
c00104d9:	f7 c7 01 00 00 00    	test   edi,0x1
c00104df:	74 16                	je     c00104f7 <VgaText::scrollScreen()+0x4d>
c00104e1:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00104e5:	50                   	push   eax
c00104e6:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00104ea:	50                   	push   eax
c00104eb:	e8 a8 ff ff ff       	call   c0010498 <VgaText::combineColours(unsigned char, unsigned char)>
c00104f0:	5a                   	pop    edx
c00104f1:	5a                   	pop    edx
c00104f2:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c00104f5:	eb 04                	jmp    c00104fb <VgaText::scrollScreen()+0x51>
c00104f7:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c00104fb:	47                   	inc    edi
c00104fc:	46                   	inc    esi
c00104fd:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010503:	75 bd                	jne    c00104c2 <VgaText::scrollScreen()+0x18>
c0010505:	41                   	inc    ecx
c0010506:	83 f9 18             	cmp    ecx,0x18
c0010509:	75 af                	jne    c00104ba <VgaText::scrollScreen()+0x10>
c001050b:	39 1d e4 e2 02 c0    	cmp    DWORD PTR ds:0xc002e2e4,ebx
c0010511:	75 1b                	jne    c001052e <VgaText::scrollScreen()+0x84>
c0010513:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010517:	74 05                	je     c001051e <VgaText::scrollScreen()+0x74>
c0010519:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c001051c:	eb 10                	jmp    c001052e <VgaText::scrollScreen()+0x84>
c001051e:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c0010521:	85 c0                	test   eax,eax
c0010523:	74 09                	je     c001052e <VgaText::scrollScreen()+0x84>
c0010525:	83 ec 0c             	sub    esp,0xc
c0010528:	53                   	push   ebx
c0010529:	ff d0                	call   eax
c001052b:	83 c4 10             	add    esp,0x10
c001052e:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010532:	83 c4 0c             	add    esp,0xc
c0010535:	5b                   	pop    ebx
c0010536:	5e                   	pop    esi
c0010537:	5f                   	pop    edi
c0010538:	5d                   	pop    ebp
c0010539:	e9 4a fe ff ff       	jmp    c0010388 <VgaText::updateCursor()>

c001053e <VgaText::combineCharAndColour(char, unsigned char)>:
c001053e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0010543:	c1 e0 08             	shl    eax,0x8
c0010546:	89 c2                	mov    edx,eax
c0010548:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001054d:	09 d0                	or     eax,edx
c001054f:	c3                   	ret    

c0010550 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0010550:	56                   	push   esi
c0010551:	53                   	push   ebx
c0010552:	51                   	push   ecx
c0010553:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010557:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001055c:	50                   	push   eax
c001055d:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010562:	50                   	push   eax
c0010563:	e8 30 ff ff ff       	call   c0010498 <VgaText::combineColours(unsigned char, unsigned char)>
c0010568:	5b                   	pop    ebx
c0010569:	0f b6 c0             	movzx  eax,al
c001056c:	5e                   	pop    esi
c001056d:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0010572:	50                   	push   eax
c0010573:	53                   	push   ebx
c0010574:	e8 c5 ff ff ff       	call   c001053e <VgaText::combineCharAndColour(char, unsigned char)>
c0010579:	5a                   	pop    edx
c001057a:	5e                   	pop    esi
c001057b:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c001057e:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010584:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010588:	0f b7 d2             	movzx  edx,dx
c001058b:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c001058f:	39 0d e4 e2 02 c0    	cmp    DWORD PTR ds:0xc002e2e4,ecx
c0010595:	75 10                	jne    c00105a7 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c0010597:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c001059a:	85 c0                	test   eax,eax
c001059c:	74 09                	je     c00105a7 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c001059e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00105a2:	5a                   	pop    edx
c00105a3:	5b                   	pop    ebx
c00105a4:	5e                   	pop    esi
c00105a5:	ff e0                	jmp    eax
c00105a7:	58                   	pop    eax
c00105a8:	5b                   	pop    ebx
c00105a9:	5e                   	pop    esi
c00105aa:	c3                   	ret    
c00105ab:	90                   	nop

c00105ac <VgaText::getCursorX()>:
c00105ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105b0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00105b3:	c3                   	ret    

c00105b4 <VgaText::getCursorY()>:
c00105b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105b8:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00105bb:	c3                   	ret    

c00105bc <VgaText::setCursor(int, int)>:
c00105bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00105c4:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00105c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00105cb:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00105ce:	e9 b5 fd ff ff       	jmp    c0010388 <VgaText::updateCursor()>

c00105d3 <setActiveTerminal(VgaText*)>:
c00105d3:	53                   	push   ebx
c00105d4:	83 ec 08             	sub    esp,0x8
c00105d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00105db:	85 db                	test   ebx,ebx
c00105dd:	75 11                	jne    c00105f0 <setActiveTerminal(VgaText*)+0x1d>
c00105df:	c7 44 24 10 90 a6 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a690
c00105e7:	83 c4 08             	add    esp,0x8
c00105ea:	5b                   	pop    ebx
c00105eb:	e9 4d 9b 00 00       	jmp    c001a13d <Krnl::panic(char const*)>
c00105f0:	a1 e4 e2 02 c0       	mov    eax,ds:0xc002e2e4
c00105f5:	85 c0                	test   eax,eax
c00105f7:	74 0c                	je     c0010605 <setActiveTerminal(VgaText*)+0x32>
c00105f9:	83 ec 0c             	sub    esp,0xc
c00105fc:	50                   	push   eax
c00105fd:	e8 86 fd ff ff       	call   c0010388 <VgaText::updateCursor()>
c0010602:	83 c4 10             	add    esp,0x10
c0010605:	89 1d e4 e2 02 c0    	mov    DWORD PTR ds:0xc002e2e4,ebx
c001060b:	51                   	push   ecx
c001060c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001060f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010612:	53                   	push   ebx
c0010613:	e8 a4 ff ff ff       	call   c00105bc <VgaText::setCursor(int, int)>
c0010618:	83 c4 10             	add    esp,0x10
c001061b:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c001061f:	75 07                	jne    c0010628 <setActiveTerminal(VgaText*)+0x55>
c0010621:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c0010628:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001062c:	83 c4 08             	add    esp,0x8
c001062f:	5b                   	pop    ebx
c0010630:	e9 05 fd ff ff       	jmp    c001033a <VgaText::load()>

c0010635 <doTerminalCycle()>:
c0010635:	83 ec 18             	sub    esp,0x18
c0010638:	a1 e0 e2 02 c0       	mov    eax,ds:0xc002e2e0
c001063d:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010640:	50                   	push   eax
c0010641:	a3 e0 e2 02 c0       	mov    ds:0xc002e2e0,eax
c0010646:	e8 88 ff ff ff       	call   c00105d3 <setActiveTerminal(VgaText*)>
c001064b:	83 c4 1c             	add    esp,0x1c
c001064e:	c3                   	ret    
c001064f:	90                   	nop

c0010650 <VgaText::setCursorX(int)>:
c0010650:	83 ec 10             	sub    esp,0x10
c0010653:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010657:	ff 70 18             	push   DWORD PTR [eax+0x18]
c001065a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001065e:	50                   	push   eax
c001065f:	e8 58 ff ff ff       	call   c00105bc <VgaText::setCursor(int, int)>
c0010664:	83 c4 1c             	add    esp,0x1c
c0010667:	c3                   	ret    

c0010668 <VgaText::setCursorY(int)>:
c0010668:	83 ec 10             	sub    esp,0x10
c001066b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001066f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010673:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0010676:	50                   	push   eax
c0010677:	e8 40 ff ff ff       	call   c00105bc <VgaText::setCursor(int, int)>
c001067c:	83 c4 1c             	add    esp,0x1c
c001067f:	c3                   	ret    

c0010680 <VgaText::incrementCursor(bool)>:
c0010680:	56                   	push   esi
c0010681:	53                   	push   ebx
c0010682:	51                   	push   ecx
c0010683:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010687:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001068b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001068e:	40                   	inc    eax
c001068f:	83 f8 50             	cmp    eax,0x50
c0010692:	74 05                	je     c0010699 <VgaText::incrementCursor(bool)+0x19>
c0010694:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0010697:	eb 24                	jmp    c00106bd <VgaText::incrementCursor(bool)+0x3d>
c0010699:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001069c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00106a3:	8d 50 01             	lea    edx,[eax+0x1]
c00106a6:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00106a9:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00106ac:	75 0f                	jne    c00106bd <VgaText::incrementCursor(bool)+0x3d>
c00106ae:	83 ec 0c             	sub    esp,0xc
c00106b1:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00106b4:	53                   	push   ebx
c00106b5:	e8 f0 fd ff ff       	call   c00104aa <VgaText::scrollScreen()>
c00106ba:	83 c4 10             	add    esp,0x10
c00106bd:	89 f0                	mov    eax,esi
c00106bf:	84 c0                	test   al,al
c00106c1:	74 0c                	je     c00106cf <VgaText::incrementCursor(bool)+0x4f>
c00106c3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00106c7:	5a                   	pop    edx
c00106c8:	5b                   	pop    ebx
c00106c9:	5e                   	pop    esi
c00106ca:	e9 b9 fc ff ff       	jmp    c0010388 <VgaText::updateCursor()>
c00106cf:	58                   	pop    eax
c00106d0:	5b                   	pop    ebx
c00106d1:	5e                   	pop    esi
c00106d2:	c3                   	ret    
c00106d3:	90                   	nop

c00106d4 <VgaText::decrementCursor(bool)>:
c00106d4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00106d8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00106dc:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00106df:	85 c0                	test   eax,eax
c00106e1:	74 04                	je     c00106e7 <VgaText::decrementCursor(bool)+0x13>
c00106e3:	48                   	dec    eax
c00106e4:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00106e7:	84 c9                	test   cl,cl
c00106e9:	74 09                	je     c00106f4 <VgaText::decrementCursor(bool)+0x20>
c00106eb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00106ef:	e9 94 fc ff ff       	jmp    c0010388 <VgaText::updateCursor()>
c00106f4:	c3                   	ret    
c00106f5:	90                   	nop

c00106f6 <VgaText::putchar(char, VgaColour, VgaColour)>:
c00106f6:	53                   	push   ebx
c00106f7:	83 ec 08             	sub    esp,0x8
c00106fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00106fe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010702:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010706:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001070a:	3c 07                	cmp    al,0x7
c001070c:	75 2a                	jne    c0010738 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c001070e:	a1 98 e3 02 c0       	mov    eax,ds:0xc002e398
c0010713:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001071b:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010723:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c001072b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001072f:	83 c4 08             	add    esp,0x8
c0010732:	5b                   	pop    ebx
c0010733:	e9 46 2f 00 00       	jmp    c001367e <Buzzer::beep(int, int, bool)>
c0010738:	3c 0d                	cmp    al,0xd
c001073a:	75 09                	jne    c0010745 <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c001073c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010743:	eb 2c                	jmp    c0010771 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0010745:	3c 0a                	cmp    al,0xa
c0010747:	75 31                	jne    c001077a <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c0010749:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001074c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010753:	8d 50 01             	lea    edx,[eax+0x1]
c0010756:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010759:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c001075c:	75 0f                	jne    c001076d <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c001075e:	83 ec 0c             	sub    esp,0xc
c0010761:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010764:	53                   	push   ebx
c0010765:	e8 40 fd ff ff       	call   c00104aa <VgaText::scrollScreen()>
c001076a:	83 c4 10             	add    esp,0x10
c001076d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010771:	83 c4 08             	add    esp,0x8
c0010774:	5b                   	pop    ebx
c0010775:	e9 0e fc ff ff       	jmp    c0010388 <VgaText::updateCursor()>
c001077a:	3c 08                	cmp    al,0x8
c001077c:	75 25                	jne    c00107a3 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c001077e:	50                   	push   eax
c001077f:	50                   	push   eax
c0010780:	6a 01                	push   0x1
c0010782:	53                   	push   ebx
c0010783:	e8 4c ff ff ff       	call   c00106d4 <VgaText::decrementCursor(bool)>
c0010788:	5a                   	pop    edx
c0010789:	59                   	pop    ecx
c001078a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001078d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010790:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010793:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010796:	6a 20                	push   0x20
c0010798:	53                   	push   ebx
c0010799:	e8 b2 fd ff ff       	call   c0010550 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001079e:	83 c4 28             	add    esp,0x28
c00107a1:	5b                   	pop    ebx
c00107a2:	c3                   	ret    
c00107a3:	83 ec 08             	sub    esp,0x8
c00107a6:	0f be c0             	movsx  eax,al
c00107a9:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00107ac:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00107af:	51                   	push   ecx
c00107b0:	52                   	push   edx
c00107b1:	50                   	push   eax
c00107b2:	53                   	push   ebx
c00107b3:	e8 98 fd ff ff       	call   c0010550 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00107b8:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00107bc:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00107c4:	83 c4 28             	add    esp,0x28
c00107c7:	5b                   	pop    ebx
c00107c8:	e9 b3 fe ff ff       	jmp    c0010680 <VgaText::incrementCursor(bool)>
c00107cd:	90                   	nop

c00107ce <VgaText::doUpdate()>:
c00107ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107d2:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c00107d5:	85 c0                	test   eax,eax
c00107d7:	74 02                	je     c00107db <VgaText::doUpdate()+0xd>
c00107d9:	ff e0                	jmp    eax
c00107db:	c3                   	ret    

c00107dc <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00107dc:	55                   	push   ebp
c00107dd:	31 ed                	xor    ebp,ebp
c00107df:	57                   	push   edi
c00107e0:	56                   	push   esi
c00107e1:	53                   	push   ebx
c00107e2:	83 ec 1c             	sub    esp,0x1c
c00107e5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00107e9:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c00107ee:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00107f5:	50                   	push   eax
c00107f6:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c00107fb:	50                   	push   eax
c00107fc:	e8 97 fc ff ff       	call   c0010498 <VgaText::combineColours(unsigned char, unsigned char)>
c0010801:	59                   	pop    ecx
c0010802:	0f b6 c0             	movzx  eax,al
c0010805:	5e                   	pop    esi
c0010806:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c001080b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001080f:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010812:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010816:	0f b7 f6             	movzx  esi,si
c0010819:	01 f6                	add    esi,esi
c001081b:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001081e:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0010821:	84 c0                	test   al,al
c0010823:	0f 84 fd 00 00 00    	je     c0010926 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c0010829:	3c 0d                	cmp    al,0xd
c001082b:	75 0c                	jne    c0010839 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c001082d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010834:	e9 e7 00 00 00       	jmp    c0010920 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010839:	3c 0a                	cmp    al,0xa
c001083b:	75 47                	jne    c0010884 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c001083d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010840:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010847:	8d 48 01             	lea    ecx,[eax+0x1]
c001084a:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c001084d:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0010850:	75 0f                	jne    c0010861 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c0010852:	83 ec 0c             	sub    esp,0xc
c0010855:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010858:	53                   	push   ebx
c0010859:	e8 4c fc ff ff       	call   c00104aa <VgaText::scrollScreen()>
c001085e:	83 c4 10             	add    esp,0x10
c0010861:	83 ec 0c             	sub    esp,0xc
c0010864:	31 ed                	xor    ebp,ebp
c0010866:	53                   	push   ebx
c0010867:	e8 1c fb ff ff       	call   c0010388 <VgaText::updateCursor()>
c001086c:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010871:	83 c4 10             	add    esp,0x10
c0010874:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010877:	0f b7 f6             	movzx  esi,si
c001087a:	01 f6                	add    esi,esi
c001087c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001087f:	e9 9c 00 00 00       	jmp    c0010920 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010884:	3c 08                	cmp    al,0x8
c0010886:	75 35                	jne    c00108bd <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c0010888:	56                   	push   esi
c0010889:	56                   	push   esi
c001088a:	6a 01                	push   0x1
c001088c:	53                   	push   ebx
c001088d:	e8 42 fe ff ff       	call   c00106d4 <VgaText::decrementCursor(bool)>
c0010892:	58                   	pop    eax
c0010893:	5a                   	pop    edx
c0010894:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010897:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001089a:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001089d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00108a0:	6a 20                	push   0x20
c00108a2:	53                   	push   ebx
c00108a3:	e8 a8 fc ff ff       	call   c0010550 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00108a8:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00108ad:	83 c4 20             	add    esp,0x20
c00108b0:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00108b3:	0f b7 f6             	movzx  esi,si
c00108b6:	01 f6                	add    esi,esi
c00108b8:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00108bb:	eb 63                	jmp    c0010920 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c00108bd:	51                   	push   ecx
c00108be:	51                   	push   ecx
c00108bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00108c3:	50                   	push   eax
c00108c4:	e8 75 fc ff ff       	call   c001053e <VgaText::combineCharAndColour(char, unsigned char)>
c00108c9:	83 c4 10             	add    esp,0x10
c00108cc:	66 89 06             	mov    WORD PTR [esi],ax
c00108cf:	39 1d e4 e2 02 c0    	cmp    DWORD PTR ds:0xc002e2e4,ebx
c00108d5:	75 21                	jne    c00108f8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c00108d7:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c00108da:	85 c0                	test   eax,eax
c00108dc:	74 1a                	je     c00108f8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c00108de:	52                   	push   edx
c00108df:	52                   	push   edx
c00108e0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00108e3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00108e6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00108ea:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00108ee:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c00108f1:	51                   	push   ecx
c00108f2:	53                   	push   ebx
c00108f3:	ff d0                	call   eax
c00108f5:	83 c4 20             	add    esp,0x20
c00108f8:	83 c6 02             	add    esi,0x2
c00108fb:	50                   	push   eax
c00108fc:	50                   	push   eax
c00108fd:	6a 00                	push   0x0
c00108ff:	53                   	push   ebx
c0010900:	e8 7b fd ff ff       	call   c0010680 <VgaText::incrementCursor(bool)>
c0010905:	83 c4 10             	add    esp,0x10
c0010908:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c001090c:	75 0d                	jne    c001091b <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c001090e:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010913:	0f b7 f6             	movzx  esi,si
c0010916:	01 f6                	add    esi,esi
c0010918:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001091b:	bd 01 00 00 00       	mov    ebp,0x1
c0010920:	47                   	inc    edi
c0010921:	e9 f8 fe ff ff       	jmp    c001081e <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c0010926:	83 ec 0c             	sub    esp,0xc
c0010929:	53                   	push   ebx
c001092a:	e8 59 fa ff ff       	call   c0010388 <VgaText::updateCursor()>
c001092f:	83 c4 10             	add    esp,0x10
c0010932:	89 e8                	mov    eax,ebp
c0010934:	84 c0                	test   al,al
c0010936:	74 0c                	je     c0010944 <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c0010938:	83 ec 0c             	sub    esp,0xc
c001093b:	53                   	push   ebx
c001093c:	e8 8d fe ff ff       	call   c00107ce <VgaText::doUpdate()>
c0010941:	83 c4 10             	add    esp,0x10
c0010944:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c001094b:	83 c4 1c             	add    esp,0x1c
c001094e:	5b                   	pop    ebx
c001094f:	5e                   	pop    esi
c0010950:	5f                   	pop    edi
c0010951:	5d                   	pop    ebp
c0010952:	c3                   	ret    
c0010953:	90                   	nop

c0010954 <VgaText::clearScreen()>:
c0010954:	57                   	push   edi
c0010955:	56                   	push   esi
c0010956:	31 f6                	xor    esi,esi
c0010958:	53                   	push   ebx
c0010959:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001095d:	52                   	push   edx
c001095e:	6a 00                	push   0x0
c0010960:	6a 00                	push   0x0
c0010962:	53                   	push   ebx
c0010963:	e8 54 fc ff ff       	call   c00105bc <VgaText::setCursor(int, int)>
c0010968:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c001096f:	83 c4 10             	add    esp,0x10
c0010972:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0010975:	7e 20                	jle    c0010997 <VgaText::clearScreen()+0x43>
c0010977:	31 ff                	xor    edi,edi
c0010979:	50                   	push   eax
c001097a:	50                   	push   eax
c001097b:	56                   	push   esi
c001097c:	57                   	push   edi
c001097d:	47                   	inc    edi
c001097e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010981:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010984:	6a 20                	push   0x20
c0010986:	53                   	push   ebx
c0010987:	e8 c4 fb ff ff       	call   c0010550 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001098c:	83 c4 20             	add    esp,0x20
c001098f:	83 ff 50             	cmp    edi,0x50
c0010992:	75 e5                	jne    c0010979 <VgaText::clearScreen()+0x25>
c0010994:	46                   	inc    esi
c0010995:	eb db                	jmp    c0010972 <VgaText::clearScreen()+0x1e>
c0010997:	83 ec 0c             	sub    esp,0xc
c001099a:	53                   	push   ebx
c001099b:	e8 2e fe ff ff       	call   c00107ce <VgaText::doUpdate()>
c00109a0:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00109a7:	83 c4 10             	add    esp,0x10
c00109aa:	5b                   	pop    ebx
c00109ab:	5e                   	pop    esi
c00109ac:	5f                   	pop    edi
c00109ad:	c3                   	ret    

c00109ae <VgaText::putchar(char)>:
c00109ae:	56                   	push   esi
c00109af:	53                   	push   ebx
c00109b0:	83 ec 14             	sub    esp,0x14
c00109b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00109b7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00109bb:	3c 5b                	cmp    al,0x5b
c00109bd:	75 18                	jne    c00109d7 <VgaText::putchar(char)+0x29>
c00109bf:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c00109c3:	74 1f                	je     c00109e4 <VgaText::putchar(char)+0x36>
c00109c5:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c00109cb:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00109d2:	e9 bd 00 00 00       	jmp    c0010a94 <VgaText::putchar(char)+0xe6>
c00109d7:	3c 1b                	cmp    al,0x1b
c00109d9:	75 09                	jne    c00109e4 <VgaText::putchar(char)+0x36>
c00109db:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00109df:	e9 b0 00 00 00       	jmp    c0010a94 <VgaText::putchar(char)+0xe6>
c00109e4:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00109e7:	84 c9                	test   cl,cl
c00109e9:	0f 84 92 00 00 00    	je     c0010a81 <VgaText::putchar(char)+0xd3>
c00109ef:	8d 50 c0             	lea    edx,[eax-0x40]
c00109f2:	80 fa 3e             	cmp    dl,0x3e
c00109f5:	77 76                	ja     c0010a6d <VgaText::putchar(char)+0xbf>
c00109f7:	3c 6d                	cmp    al,0x6d
c00109f9:	75 47                	jne    c0010a42 <VgaText::putchar(char)+0x94>
c00109fb:	31 f6                	xor    esi,esi
c00109fd:	31 d2                	xor    edx,edx
c00109ff:	31 c0                	xor    eax,eax
c0010a01:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0010a04:	7e 2d                	jle    c0010a33 <VgaText::putchar(char)+0x85>
c0010a06:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0010a0b:	80 fa 3b             	cmp    dl,0x3b
c0010a0e:	75 17                	jne    c0010a27 <VgaText::putchar(char)+0x79>
c0010a10:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010a14:	50                   	push   eax
c0010a15:	53                   	push   ebx
c0010a16:	e8 83 f9 ff ff       	call   c001039e <VgaText::doANSI_SGR(int)>
c0010a1b:	59                   	pop    ecx
c0010a1c:	31 d2                	xor    edx,edx
c0010a1e:	58                   	pop    eax
c0010a1f:	31 c0                	xor    eax,eax
c0010a21:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010a25:	eb 09                	jmp    c0010a30 <VgaText::putchar(char)+0x82>
c0010a27:	6b c0 0a             	imul   eax,eax,0xa
c0010a2a:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010a2e:	88 ca                	mov    dl,cl
c0010a30:	46                   	inc    esi
c0010a31:	eb ce                	jmp    c0010a01 <VgaText::putchar(char)+0x53>
c0010a33:	84 d2                	test   dl,dl
c0010a35:	74 2e                	je     c0010a65 <VgaText::putchar(char)+0xb7>
c0010a37:	50                   	push   eax
c0010a38:	53                   	push   ebx
c0010a39:	e8 60 f9 ff ff       	call   c001039e <VgaText::doANSI_SGR(int)>
c0010a3e:	58                   	pop    eax
c0010a3f:	5a                   	pop    edx
c0010a40:	eb 23                	jmp    c0010a65 <VgaText::putchar(char)+0xb7>
c0010a42:	3c 4a                	cmp    al,0x4a
c0010a44:	75 1f                	jne    c0010a65 <VgaText::putchar(char)+0xb7>
c0010a46:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0010a4a:	75 19                	jne    c0010a65 <VgaText::putchar(char)+0xb7>
c0010a4c:	83 ec 0c             	sub    esp,0xc
c0010a4f:	53                   	push   ebx
c0010a50:	e8 ff fe ff ff       	call   c0010954 <VgaText::clearScreen()>
c0010a55:	83 c4 0c             	add    esp,0xc
c0010a58:	6a 00                	push   0x0
c0010a5a:	6a 00                	push   0x0
c0010a5c:	53                   	push   ebx
c0010a5d:	e8 5a fb ff ff       	call   c00105bc <VgaText::setCursor(int, int)>
c0010a62:	83 c4 10             	add    esp,0x10
c0010a65:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0010a6b:	eb 27                	jmp    c0010a94 <VgaText::putchar(char)+0xe6>
c0010a6d:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0010a70:	83 fa 0e             	cmp    edx,0xe
c0010a73:	7f 1f                	jg     c0010a94 <VgaText::putchar(char)+0xe6>
c0010a75:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010a78:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0010a7b:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0010a7f:	eb 13                	jmp    c0010a94 <VgaText::putchar(char)+0xe6>
c0010a81:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010a84:	0f be c0             	movsx  eax,al
c0010a87:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010a8a:	50                   	push   eax
c0010a8b:	53                   	push   ebx
c0010a8c:	e8 65 fc ff ff       	call   c00106f6 <VgaText::putchar(char, VgaColour, VgaColour)>
c0010a91:	83 c4 10             	add    esp,0x10
c0010a94:	83 c4 14             	add    esp,0x14
c0010a97:	5b                   	pop    ebx
c0010a98:	5e                   	pop    esi
c0010a99:	c3                   	ret    

c0010a9a <VgaText::putx(unsigned int)>:
c0010a9a:	57                   	push   edi
c0010a9b:	b9 11 00 00 00       	mov    ecx,0x11
c0010aa0:	56                   	push   esi
c0010aa1:	be 9e a6 02 c0       	mov    esi,0xc002a69e
c0010aa6:	53                   	push   ebx
c0010aa7:	83 ec 20             	sub    esp,0x20
c0010aaa:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010aae:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010ab2:	fc                   	cld    
c0010ab3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010ab5:	be 08 00 00 00       	mov    esi,0x8
c0010aba:	50                   	push   eax
c0010abb:	50                   	push   eax
c0010abc:	89 d8                	mov    eax,ebx
c0010abe:	c1 e3 04             	shl    ebx,0x4
c0010ac1:	c1 e8 1c             	shr    eax,0x1c
c0010ac4:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010ac9:	50                   	push   eax
c0010aca:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010ace:	e8 db fe ff ff       	call   c00109ae <VgaText::putchar(char)>
c0010ad3:	83 c4 10             	add    esp,0x10
c0010ad6:	4e                   	dec    esi
c0010ad7:	75 e1                	jne    c0010aba <VgaText::putx(unsigned int)+0x20>
c0010ad9:	83 c4 20             	add    esp,0x20
c0010adc:	5b                   	pop    ebx
c0010add:	5e                   	pop    esi
c0010ade:	5f                   	pop    edi
c0010adf:	c3                   	ret    

c0010ae0 <VgaText::puts(char const*)>:
c0010ae0:	53                   	push   ebx
c0010ae1:	83 ec 08             	sub    esp,0x8
c0010ae4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010ae8:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010aeb:	84 c0                	test   al,al
c0010aed:	74 12                	je     c0010b01 <VgaText::puts(char const*)+0x21>
c0010aef:	43                   	inc    ebx
c0010af0:	51                   	push   ecx
c0010af1:	51                   	push   ecx
c0010af2:	50                   	push   eax
c0010af3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010af7:	e8 b2 fe ff ff       	call   c00109ae <VgaText::putchar(char)>
c0010afc:	83 c4 10             	add    esp,0x10
c0010aff:	eb e7                	jmp    c0010ae8 <VgaText::puts(char const*)+0x8>
c0010b01:	83 c4 08             	add    esp,0x8
c0010b04:	5b                   	pop    ebx
c0010b05:	c3                   	ret    

c0010b06 <VgaText::VgaText(char const*)>:
c0010b06:	57                   	push   edi
c0010b07:	56                   	push   esi
c0010b08:	53                   	push   ebx
c0010b09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b0d:	83 ec 08             	sub    esp,0x8
c0010b10:	6a 00                	push   0x0
c0010b12:	50                   	push   eax
c0010b13:	e8 44 05 00 00       	call   c001105c <UnixFile::UnixFile(int)>
c0010b18:	83 c4 10             	add    esp,0x10
c0010b1b:	ba 04 a7 02 c0       	mov    edx,0xc002a704
c0010b20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b24:	89 10                	mov    DWORD PTR [eax],edx
c0010b26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b2a:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0010b31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b35:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0010b3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b40:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0010b44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b48:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0010b4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b50:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0010b57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b5b:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0010b62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b66:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0010b6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b71:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0010b78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b7c:	8d 50 60             	lea    edx,[eax+0x60]
c0010b7f:	bb c0 e2 02 c0       	mov    ebx,0xc002e2c0
c0010b84:	b8 08 00 00 00       	mov    eax,0x8
c0010b89:	fc                   	cld    
c0010b8a:	89 d7                	mov    edi,edx
c0010b8c:	89 de                	mov    esi,ebx
c0010b8e:	89 c1                	mov    ecx,eax
c0010b90:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010b92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b96:	05 82 00 00 00       	add    eax,0x82
c0010b9b:	83 ec 08             	sub    esp,0x8
c0010b9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ba2:	50                   	push   eax
c0010ba3:	e8 64 fc fe ff       	call   c000080c <strcpy>
c0010ba8:	83 c4 10             	add    esp,0x10
c0010bab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010baf:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c0010bb6:	83 ec 0c             	sub    esp,0xc
c0010bb9:	6a 01                	push   0x1
c0010bbb:	e8 df 08 00 00       	call   c001149f <Virt::allocateKernelVirtualPages(int)>
c0010bc0:	83 c4 10             	add    esp,0x10
c0010bc3:	89 c2                	mov    edx,eax
c0010bc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bc9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010bcc:	8b 1d 90 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e390
c0010bd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bd6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010bd9:	89 c6                	mov    esi,eax
c0010bdb:	e8 35 f0 ff ff       	call   c000fc15 <Phys::allocatePage()>
c0010be0:	68 05 0c 00 00       	push   0xc05
c0010be5:	56                   	push   esi
c0010be6:	50                   	push   eax
c0010be7:	53                   	push   ebx
c0010be8:	e8 59 0f 00 00       	call   c0011b46 <VAS::mapPage(unsigned long, unsigned long, int)>
c0010bed:	83 c4 10             	add    esp,0x10
c0010bf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bf4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010bf7:	83 ec 04             	sub    esp,0x4
c0010bfa:	68 00 0f 00 00       	push   0xf00
c0010bff:	6a 00                	push   0x0
c0010c01:	50                   	push   eax
c0010c02:	e8 49 fb fe ff       	call   c0000750 <memset>
c0010c07:	83 c4 10             	add    esp,0x10
c0010c0a:	83 ec 04             	sub    esp,0x4
c0010c0d:	6a 00                	push   0x0
c0010c0f:	6a 07                	push   0x7
c0010c11:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c15:	e8 18 f8 ff ff       	call   c0010432 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010c1a:	83 c4 10             	add    esp,0x10
c0010c1d:	83 ec 04             	sub    esp,0x4
c0010c20:	6a 00                	push   0x0
c0010c22:	6a 00                	push   0x0
c0010c24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c28:	e8 8f f9 ff ff       	call   c00105bc <VgaText::setCursor(int, int)>
c0010c2d:	83 c4 10             	add    esp,0x10
c0010c30:	83 ec 0c             	sub    esp,0xc
c0010c33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c37:	e8 18 fd ff ff       	call   c0010954 <VgaText::clearScreen()>
c0010c3c:	83 c4 10             	add    esp,0x10
c0010c3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c43:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0010c47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c4b:	05 02 01 00 00       	add    eax,0x102
c0010c50:	83 ec 04             	sub    esp,0x4
c0010c53:	68 96 00 00 00       	push   0x96
c0010c58:	6a 00                	push   0x0
c0010c5a:	50                   	push   eax
c0010c5b:	e8 f0 fa fe ff       	call   c0000750 <memset>
c0010c60:	83 c4 10             	add    esp,0x10
c0010c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c67:	05 98 01 00 00       	add    eax,0x198
c0010c6c:	83 ec 04             	sub    esp,0x4
c0010c6f:	68 2c 01 00 00       	push   0x12c
c0010c74:	6a 00                	push   0x0
c0010c76:	50                   	push   eax
c0010c77:	e8 d4 fa fe ff       	call   c0000750 <memset>
c0010c7c:	83 c4 10             	add    esp,0x10
c0010c7f:	90                   	nop
c0010c80:	5b                   	pop    ebx
c0010c81:	5e                   	pop    esi
c0010c82:	5f                   	pop    edi
c0010c83:	c3                   	ret    

c0010c84 <VgaText::receiveKey(unsigned char)>:
c0010c84:	55                   	push   ebp
c0010c85:	57                   	push   edi
c0010c86:	56                   	push   esi
c0010c87:	53                   	push   ebx
c0010c88:	83 ec 1c             	sub    esp,0x1c
c0010c8b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010c8f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010c93:	84 db                	test   bl,bl
c0010c95:	0f 84 c9 00 00 00    	je     c0010d64 <VgaText::receiveKey(unsigned char)+0xe0>
c0010c9b:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c0010ca1:	80 fb 08             	cmp    bl,0x8
c0010ca4:	75 2c                	jne    c0010cd2 <VgaText::receiveKey(unsigned char)+0x4e>
c0010ca6:	83 ec 0c             	sub    esp,0xc
c0010ca9:	57                   	push   edi
c0010caa:	e8 bd fa fe ff       	call   c000076c <strlen>
c0010caf:	83 c4 10             	add    esp,0x10
c0010cb2:	85 c0                	test   eax,eax
c0010cb4:	74 41                	je     c0010cf7 <VgaText::receiveKey(unsigned char)+0x73>
c0010cb6:	50                   	push   eax
c0010cb7:	50                   	push   eax
c0010cb8:	6a 08                	push   0x8
c0010cba:	56                   	push   esi
c0010cbb:	e8 ee fc ff ff       	call   c00109ae <VgaText::putchar(char)>
c0010cc0:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010cc3:	e8 a4 fa fe ff       	call   c000076c <strlen>
c0010cc8:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c0010cd0:	eb 22                	jmp    c0010cf4 <VgaText::receiveKey(unsigned char)+0x70>
c0010cd2:	0f be c3             	movsx  eax,bl
c0010cd5:	52                   	push   edx
c0010cd6:	52                   	push   edx
c0010cd7:	50                   	push   eax
c0010cd8:	56                   	push   esi
c0010cd9:	e8 d0 fc ff ff       	call   c00109ae <VgaText::putchar(char)>
c0010cde:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010ce2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010ce7:	59                   	pop    ecx
c0010ce8:	5d                   	pop    ebp
c0010ce9:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010ced:	50                   	push   eax
c0010cee:	57                   	push   edi
c0010cef:	e8 58 fc fe ff       	call   c000094c <strcat>
c0010cf4:	83 c4 10             	add    esp,0x10
c0010cf7:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0010cfe:	75 05                	jne    c0010d05 <VgaText::receiveKey(unsigned char)+0x81>
c0010d00:	80 fb 0a             	cmp    bl,0xa
c0010d03:	75 53                	jne    c0010d58 <VgaText::receiveKey(unsigned char)+0xd4>
c0010d05:	83 ec 0c             	sub    esp,0xc
c0010d08:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c0010d0e:	53                   	push   ebx
c0010d0f:	e8 58 fa fe ff       	call   c000076c <strlen>
c0010d14:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010d17:	89 c5                	mov    ebp,eax
c0010d19:	e8 4e fa fe ff       	call   c000076c <strlen>
c0010d1e:	83 c4 10             	add    esp,0x10
c0010d21:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010d25:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010d2a:	76 10                	jbe    c0010d3c <VgaText::receiveKey(unsigned char)+0xb8>
c0010d2c:	83 ec 0c             	sub    esp,0xc
c0010d2f:	68 af a6 02 c0       	push   0xc002a6af
c0010d34:	e8 04 94 00 00       	call   c001a13d <Krnl::panic(char const*)>
c0010d39:	83 c4 10             	add    esp,0x10
c0010d3c:	50                   	push   eax
c0010d3d:	50                   	push   eax
c0010d3e:	57                   	push   edi
c0010d3f:	53                   	push   ebx
c0010d40:	e8 07 fc fe ff       	call   c000094c <strcat>
c0010d45:	83 c4 0c             	add    esp,0xc
c0010d48:	68 96 00 00 00       	push   0x96
c0010d4d:	6a 00                	push   0x0
c0010d4f:	57                   	push   edi
c0010d50:	e8 fb f9 fe ff       	call   c0000750 <memset>
c0010d55:	83 c4 10             	add    esp,0x10
c0010d58:	83 ec 0c             	sub    esp,0xc
c0010d5b:	56                   	push   esi
c0010d5c:	e8 6d fa ff ff       	call   c00107ce <VgaText::doUpdate()>
c0010d61:	83 c4 10             	add    esp,0x10
c0010d64:	83 c4 1c             	add    esp,0x1c
c0010d67:	5b                   	pop    ebx
c0010d68:	5e                   	pop    esi
c0010d69:	5f                   	pop    edi
c0010d6a:	5d                   	pop    ebp
c0010d6b:	c3                   	ret    

c0010d6c <VgaText::write(unsigned long long, void*, int*)>:
c0010d6c:	55                   	push   ebp
c0010d6d:	57                   	push   edi
c0010d6e:	56                   	push   esi
c0010d6f:	53                   	push   ebx
c0010d70:	83 ec 0c             	sub    esp,0xc
c0010d73:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010d77:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010d7b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010d7f:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0010d86:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010d89:	39 eb                	cmp    ebx,ebp
c0010d8b:	74 13                	je     c0010da0 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010d8d:	43                   	inc    ebx
c0010d8e:	50                   	push   eax
c0010d8f:	50                   	push   eax
c0010d90:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010d94:	50                   	push   eax
c0010d95:	56                   	push   esi
c0010d96:	e8 13 fc ff ff       	call   c00109ae <VgaText::putchar(char)>
c0010d9b:	83 c4 10             	add    esp,0x10
c0010d9e:	eb e9                	jmp    c0010d89 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010da0:	83 ec 0c             	sub    esp,0xc
c0010da3:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0010daa:	56                   	push   esi
c0010dab:	e8 1e fa ff ff       	call   c00107ce <VgaText::doUpdate()>
c0010db0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010db4:	89 38                	mov    DWORD PTR [eax],edi
c0010db6:	83 c4 1c             	add    esp,0x1c
c0010db9:	31 c0                	xor    eax,eax
c0010dbb:	5b                   	pop    ebx
c0010dbc:	5e                   	pop    esi
c0010dbd:	5f                   	pop    edi
c0010dbe:	5d                   	pop    ebp
c0010dbf:	c3                   	ret    

c0010dc0 <newTerminal(char*)>:
c0010dc0:	83 ec 28             	sub    esp,0x28
c0010dc3:	68 c4 02 00 00       	push   0x2c4
c0010dc8:	e8 4c ea ff ff       	call   c000f819 <malloc>
c0010dcd:	5a                   	pop    edx
c0010dce:	59                   	pop    ecx
c0010dcf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010dd3:	50                   	push   eax
c0010dd4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010dd8:	e8 29 fd ff ff       	call   c0010b06 <VgaText::VgaText(char const*)>
c0010ddd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010de1:	83 c4 2c             	add    esp,0x2c
c0010de4:	c3                   	ret    
c0010de5:	90                   	nop

c0010de6 <TSS::TSS()>:
c0010de6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010dea:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010df1:	90                   	nop
c0010df2:	c3                   	ret    
c0010df3:	90                   	nop

c0010df4 <TSS::setESP(unsigned long)>:
c0010df4:	55                   	push   ebp
c0010df5:	89 e5                	mov    ebp,esp
c0010df7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010dfa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010dfd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010e00:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010e03:	90                   	nop
c0010e04:	5d                   	pop    ebp
c0010e05:	c3                   	ret    

c0010e06 <TSS::flush()>:
c0010e06:	55                   	push   ebp
c0010e07:	89 e5                	mov    ebp,esp
c0010e09:	83 ec 10             	sub    esp,0x10
c0010e0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e0f:	8b 00                	mov    eax,DWORD PTR [eax]
c0010e11:	83 c8 03             	or     eax,0x3
c0010e14:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010e18:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010e1c:	66 89 d0             	mov    ax,dx
c0010e1f:	0f 00 d8             	ltr    ax
c0010e22:	90                   	nop
c0010e23:	c9                   	leave  
c0010e24:	c3                   	ret    
c0010e25:	90                   	nop

c0010e26 <TSS::setup(unsigned long, unsigned long)>:
c0010e26:	55                   	push   ebp
c0010e27:	89 e5                	mov    ebp,esp
c0010e29:	83 ec 18             	sub    esp,0x18
c0010e2c:	83 ec 0c             	sub    esp,0xc
c0010e2f:	6a 68                	push   0x68
c0010e31:	e8 e3 e9 ff ff       	call   c000f819 <malloc>
c0010e36:	83 c4 10             	add    esp,0x10
c0010e39:	89 c2                	mov    edx,eax
c0010e3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e3e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010e41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e44:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e47:	83 ec 04             	sub    esp,0x4
c0010e4a:	6a 68                	push   0x68
c0010e4c:	6a 00                	push   0x0
c0010e4e:	50                   	push   eax
c0010e4f:	e8 fc f8 fe ff       	call   c0000750 <memset>
c0010e54:	83 c4 10             	add    esp,0x10
c0010e57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e5d:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010e63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e66:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e69:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010e6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e72:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e75:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010e78:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010e7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e81:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0010e87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e8a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e8d:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0010e93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e96:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e99:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0010e9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ea2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ea5:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0010eab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010eae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010eb1:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0010eb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010eba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ebd:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0010ec3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ec6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ec9:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0010ecc:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010ecf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ed2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ed5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010ed8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010edb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ede:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ee1:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0010ee8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010eeb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010eee:	0f 20 da             	mov    edx,cr3
c0010ef1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0010ef4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0010ef7:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010efa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010efd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f00:	83 ec 08             	sub    esp,0x8
c0010f03:	50                   	push   eax
c0010f04:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010f07:	50                   	push   eax
c0010f08:	e8 05 e1 ff ff       	call   c000f012 <GDTEntry::setBase(unsigned int)>
c0010f0d:	83 c4 10             	add    esp,0x10
c0010f10:	83 ec 08             	sub    esp,0x8
c0010f13:	6a 68                	push   0x68
c0010f15:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010f18:	50                   	push   eax
c0010f19:	e8 10 e1 ff ff       	call   c000f02e <GDTEntry::setLimit(unsigned int)>
c0010f1e:	83 c4 10             	add    esp,0x10
c0010f21:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0010f25:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010f28:	83 e0 0f             	and    eax,0xf
c0010f2b:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010f2e:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010f31:	83 c8 40             	or     eax,0x40
c0010f34:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010f37:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c0010f3c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010f42:	05 78 01 00 00       	add    eax,0x178
c0010f47:	83 ec 04             	sub    esp,0x4
c0010f4a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0010f4d:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0010f50:	50                   	push   eax
c0010f51:	e8 0c e1 ff ff       	call   c000f062 <GDT::addEntry(GDTEntry)>
c0010f56:	83 c4 10             	add    esp,0x10
c0010f59:	89 c2                	mov    edx,eax
c0010f5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f5e:	89 10                	mov    DWORD PTR [eax],edx
c0010f60:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c0010f65:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010f6b:	05 78 01 00 00       	add    eax,0x178
c0010f70:	83 ec 0c             	sub    esp,0xc
c0010f73:	50                   	push   eax
c0010f74:	e8 13 e1 ff ff       	call   c000f08c <GDT::flush()>
c0010f79:	83 c4 10             	add    esp,0x10
c0010f7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f7f:	8b 00                	mov    eax,DWORD PTR [eax]
c0010f81:	c9                   	leave  
c0010f82:	c3                   	ret    
c0010f83:	90                   	nop

c0010f84 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0010f84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f88:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010f8c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f8f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010f94:	75 08                	jne    c0010f9e <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0010f96:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010f9c:	eb 38                	jmp    c0010fd6 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0010f9e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010fa3:	75 17                	jne    c0010fbc <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0010fa5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010faa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010fad:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010fb3:	8b 10                	mov    edx,DWORD PTR [eax]
c0010fb5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010fb9:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0010fbc:	89 c1                	mov    ecx,eax
c0010fbe:	83 e1 fd             	and    ecx,0xfffffffd
c0010fc1:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0010fc7:	74 cd                	je     c0010f96 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010fc9:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010fce:	83 e0 ef             	and    eax,0xffffffef
c0010fd1:	83 f8 08             	cmp    eax,0x8
c0010fd4:	76 c0                	jbe    c0010f96 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010fd6:	31 c0                	xor    eax,eax
c0010fd8:	c3                   	ret    
c0010fd9:	90                   	nop

c0010fda <ReservedFilename::isAtty()>:
c0010fda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010fde:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010fe1:	31 c0                	xor    eax,eax
c0010fe3:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0010fe9:	74 09                	je     c0010ff4 <ReservedFilename::isAtty()+0x1a>
c0010feb:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0010ff1:	0f 94 c0             	sete   al
c0010ff4:	c3                   	ret    
c0010ff5:	90                   	nop

c0010ff6 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0010ff6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ffa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010ffe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011001:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011005:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001100a:	75 08                	jne    c0011014 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c001100c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011012:	eb 3d                	jmp    c0011051 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011014:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011019:	75 17                	jne    c0011032 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c001101b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011020:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011023:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011029:	8b 10                	mov    edx,DWORD PTR [eax]
c001102b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001102f:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011032:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011037:	75 04                	jne    c001103d <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0011039:	89 0a                	mov    DWORD PTR [edx],ecx
c001103b:	eb 14                	jmp    c0011051 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001103d:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011042:	74 c8                	je     c001100c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011044:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011049:	83 e0 ef             	and    eax,0xffffffef
c001104c:	83 f8 08             	cmp    eax,0x8
c001104f:	76 bb                	jbe    c001100c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011051:	31 c0                	xor    eax,eax
c0011053:	c3                   	ret    

c0011054 <UnixFile::getFileDescriptor()>:
c0011054:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011058:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001105b:	c3                   	ret    

c001105c <UnixFile::UnixFile(int)>:
c001105c:	53                   	push   ebx
c001105d:	83 ec 28             	sub    esp,0x28
c0011060:	ba cc a7 02 c0       	mov    edx,0xc002a7cc
c0011065:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011069:	89 10                	mov    DWORD PTR [eax],edx
c001106b:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0011073:	0f 8f 8c 01 00 00    	jg     c0011205 <UnixFile::UnixFile(int)+0x1a9>
c0011079:	a1 c0 d1 02 c0       	mov    eax,ds:0xc002d1c0
c001107e:	8d 50 01             	lea    edx,[eax+0x1]
c0011081:	89 15 c0 d1 02 c0    	mov    DWORD PTR ds:0xc002d1c0,edx
c0011087:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001108b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001108e:	83 ec 08             	sub    esp,0x8
c0011091:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011095:	68 78 e3 02 c0       	push   0xc002e378
c001109a:	e8 47 78 01 00       	call   c00288e6 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001109f:	83 c4 10             	add    esp,0x10
c00110a2:	a0 74 e3 02 c0       	mov    al,ds:0xc002e374
c00110a7:	83 f0 01             	xor    eax,0x1
c00110aa:	84 c0                	test   al,al
c00110ac:	0f 84 54 01 00 00    	je     c0011206 <UnixFile::UnixFile(int)+0x1aa>
c00110b2:	c6 05 74 e3 02 c0 01 	mov    BYTE PTR ds:0xc002e374,0x1
c00110b9:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00110c1:	83 ec 0c             	sub    esp,0xc
c00110c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00110c8:	e8 4c e7 ff ff       	call   c000f819 <malloc>
c00110cd:	83 c4 10             	add    esp,0x10
c00110d0:	89 c3                	mov    ebx,eax
c00110d2:	83 ec 08             	sub    esp,0x8
c00110d5:	68 03 ff ff 0f       	push   0xfffff03
c00110da:	53                   	push   ebx
c00110db:	e8 2c 01 00 00       	call   c001120c <ReservedFilename::ReservedFilename(int)>
c00110e0:	83 c4 10             	add    esp,0x10
c00110e3:	89 1d 6c e3 02 c0    	mov    DWORD PTR ds:0xc002e36c,ebx
c00110e9:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00110f1:	83 ec 0c             	sub    esp,0xc
c00110f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110f8:	e8 1c e7 ff ff       	call   c000f819 <malloc>
c00110fd:	83 c4 10             	add    esp,0x10
c0011100:	89 c3                	mov    ebx,eax
c0011102:	83 ec 08             	sub    esp,0x8
c0011105:	68 01 ff ff 0f       	push   0xfffff01
c001110a:	53                   	push   ebx
c001110b:	e8 fc 00 00 00       	call   c001120c <ReservedFilename::ReservedFilename(int)>
c0011110:	83 c4 10             	add    esp,0x10
c0011113:	89 1d 70 e3 02 c0    	mov    DWORD PTR ds:0xc002e370,ebx
c0011119:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011121:	83 ec 0c             	sub    esp,0xc
c0011124:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011128:	e8 ec e6 ff ff       	call   c000f819 <malloc>
c001112d:	83 c4 10             	add    esp,0x10
c0011130:	89 c3                	mov    ebx,eax
c0011132:	83 ec 08             	sub    esp,0x8
c0011135:	68 00 ff ff 0f       	push   0xfffff00
c001113a:	53                   	push   ebx
c001113b:	e8 cc 00 00 00       	call   c001120c <ReservedFilename::ReservedFilename(int)>
c0011140:	83 c4 10             	add    esp,0x10
c0011143:	89 1d 64 e3 02 c0    	mov    DWORD PTR ds:0xc002e364,ebx
c0011149:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011151:	83 ec 0c             	sub    esp,0xc
c0011154:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011158:	e8 bc e6 ff ff       	call   c000f819 <malloc>
c001115d:	83 c4 10             	add    esp,0x10
c0011160:	89 c3                	mov    ebx,eax
c0011162:	83 ec 08             	sub    esp,0x8
c0011165:	68 02 ff ff 0f       	push   0xfffff02
c001116a:	53                   	push   ebx
c001116b:	e8 9c 00 00 00       	call   c001120c <ReservedFilename::ReservedFilename(int)>
c0011170:	83 c4 10             	add    esp,0x10
c0011173:	89 1d 68 e3 02 c0    	mov    DWORD PTR ds:0xc002e368,ebx
c0011179:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011181:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011186:	7f 7e                	jg     c0011206 <UnixFile::UnixFile(int)+0x1aa>
c0011188:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011190:	83 ec 0c             	sub    esp,0xc
c0011193:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011197:	e8 7d e6 ff ff       	call   c000f819 <malloc>
c001119c:	83 c4 10             	add    esp,0x10
c001119f:	89 c3                	mov    ebx,eax
c00111a1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00111a5:	05 10 ff ff 0f       	add    eax,0xfffff10
c00111aa:	83 ec 08             	sub    esp,0x8
c00111ad:	50                   	push   eax
c00111ae:	53                   	push   ebx
c00111af:	e8 58 00 00 00       	call   c001120c <ReservedFilename::ReservedFilename(int)>
c00111b4:	83 c4 10             	add    esp,0x10
c00111b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00111bb:	89 1c 85 40 e3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1cc0],ebx
c00111c2:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00111ca:	83 ec 0c             	sub    esp,0xc
c00111cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00111d1:	e8 43 e6 ff ff       	call   c000f819 <malloc>
c00111d6:	83 c4 10             	add    esp,0x10
c00111d9:	89 c3                	mov    ebx,eax
c00111db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00111df:	05 20 ff ff 0f       	add    eax,0xfffff20
c00111e4:	83 ec 08             	sub    esp,0x8
c00111e7:	50                   	push   eax
c00111e8:	53                   	push   ebx
c00111e9:	e8 1e 00 00 00       	call   c001120c <ReservedFilename::ReservedFilename(int)>
c00111ee:	83 c4 10             	add    esp,0x10
c00111f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00111f5:	89 1c 85 00 e3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1d00],ebx
c00111fc:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011200:	e9 7c ff ff ff       	jmp    c0011181 <UnixFile::UnixFile(int)+0x125>
c0011205:	90                   	nop
c0011206:	83 c4 28             	add    esp,0x28
c0011209:	5b                   	pop    ebx
c001120a:	c3                   	ret    
c001120b:	90                   	nop

c001120c <ReservedFilename::ReservedFilename(int)>:
c001120c:	83 ec 0c             	sub    esp,0xc
c001120f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011213:	83 ec 08             	sub    esp,0x8
c0011216:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001121a:	50                   	push   eax
c001121b:	e8 3c fe ff ff       	call   c001105c <UnixFile::UnixFile(int)>
c0011220:	83 c4 10             	add    esp,0x10
c0011223:	ba e8 a7 02 c0       	mov    edx,0xc002a7e8
c0011228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001122c:	89 10                	mov    DWORD PTR [eax],edx
c001122e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011232:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011236:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011239:	90                   	nop
c001123a:	83 c4 0c             	add    esp,0xc
c001123d:	c3                   	ret    

c001123e <UnixFile::~UnixFile()>:
c001123e:	83 ec 1c             	sub    esp,0x1c
c0011241:	ba cc a7 02 c0       	mov    edx,0xc002a7cc
c0011246:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001124a:	89 10                	mov    DWORD PTR [eax],edx
c001124c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011250:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011253:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011258:	7f 73                	jg     c00112cd <UnixFile::~UnixFile()+0x8f>
c001125a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011262:	83 ec 0c             	sub    esp,0xc
c0011265:	68 78 e3 02 c0       	push   0xc002e378
c001126a:	e8 4b 77 01 00       	call   c00289ba <LinkedList<UnixFile>::getFirstElement()>
c001126f:	83 c4 10             	add    esp,0x10
c0011272:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011276:	83 ec 0c             	sub    esp,0xc
c0011279:	68 78 e3 02 c0       	push   0xc002e378
c001127e:	e8 3f 77 01 00       	call   c00289c2 <LinkedList<UnixFile>::removeFirst()>
c0011283:	83 c4 10             	add    esp,0x10
c0011286:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001128a:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001128e:	74 40                	je     c00112d0 <UnixFile::~UnixFile()+0x92>
c0011290:	83 ec 08             	sub    esp,0x8
c0011293:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011297:	68 78 e3 02 c0       	push   0xc002e378
c001129c:	e8 45 76 01 00       	call   c00288e6 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00112a1:	83 c4 10             	add    esp,0x10
c00112a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00112a8:	8d 50 01             	lea    edx,[eax+0x1]
c00112ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00112af:	3d 88 13 00 00       	cmp    eax,0x1388
c00112b4:	0f 94 c0             	sete   al
c00112b7:	84 c0                	test   al,al
c00112b9:	74 a7                	je     c0011262 <UnixFile::~UnixFile()+0x24>
c00112bb:	83 ec 0c             	sub    esp,0xc
c00112be:	68 a4 a7 02 c0       	push   0xc002a7a4
c00112c3:	e8 75 8e 00 00       	call   c001a13d <Krnl::panic(char const*)>
c00112c8:	83 c4 10             	add    esp,0x10
c00112cb:	eb 95                	jmp    c0011262 <UnixFile::~UnixFile()+0x24>
c00112cd:	90                   	nop
c00112ce:	eb 01                	jmp    c00112d1 <UnixFile::~UnixFile()+0x93>
c00112d0:	90                   	nop
c00112d1:	90                   	nop
c00112d2:	83 c4 1c             	add    esp,0x1c
c00112d5:	c3                   	ret    

c00112d6 <UnixFile::~UnixFile()>:
c00112d6:	83 ec 0c             	sub    esp,0xc
c00112d9:	83 ec 0c             	sub    esp,0xc
c00112dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112e0:	e8 59 ff ff ff       	call   c001123e <UnixFile::~UnixFile()>
c00112e5:	83 c4 10             	add    esp,0x10
c00112e8:	83 ec 08             	sub    esp,0x8
c00112eb:	6a 0c                	push   0xc
c00112ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112f1:	e8 a3 14 00 00       	call   c0012799 <operator delete(void*, unsigned long)>
c00112f6:	83 c4 10             	add    esp,0x10
c00112f9:	83 c4 0c             	add    esp,0xc
c00112fc:	c3                   	ret    
c00112fd:	90                   	nop

c00112fe <ReservedFilename::~ReservedFilename()>:
c00112fe:	83 ec 0c             	sub    esp,0xc
c0011301:	ba e8 a7 02 c0       	mov    edx,0xc002a7e8
c0011306:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001130a:	89 10                	mov    DWORD PTR [eax],edx
c001130c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011310:	83 ec 0c             	sub    esp,0xc
c0011313:	50                   	push   eax
c0011314:	e8 25 ff ff ff       	call   c001123e <UnixFile::~UnixFile()>
c0011319:	83 c4 10             	add    esp,0x10
c001131c:	90                   	nop
c001131d:	83 c4 0c             	add    esp,0xc
c0011320:	c3                   	ret    
c0011321:	90                   	nop

c0011322 <ReservedFilename::~ReservedFilename()>:
c0011322:	83 ec 0c             	sub    esp,0xc
c0011325:	83 ec 0c             	sub    esp,0xc
c0011328:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001132c:	e8 cd ff ff ff       	call   c00112fe <ReservedFilename::~ReservedFilename()>
c0011331:	83 c4 10             	add    esp,0x10
c0011334:	83 ec 08             	sub    esp,0x8
c0011337:	6a 0c                	push   0xc
c0011339:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001133d:	e8 57 14 00 00       	call   c0012799 <operator delete(void*, unsigned long)>
c0011342:	83 c4 10             	add    esp,0x10
c0011345:	83 c4 0c             	add    esp,0xc
c0011348:	c3                   	ret    

c0011349 <getFromFileDescriptor(int)>:
c0011349:	53                   	push   ebx
c001134a:	83 ec 08             	sub    esp,0x8
c001134d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011351:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011357:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c001135d:	7f 2c                	jg     c001138b <getFromFileDescriptor(int)+0x42>
c001135f:	83 ec 0c             	sub    esp,0xc
c0011362:	68 78 e3 02 c0       	push   0xc002e378
c0011367:	e8 4e 76 01 00       	call   c00289ba <LinkedList<UnixFile>::getFirstElement()>
c001136c:	83 c4 10             	add    esp,0x10
c001136f:	85 c0                	test   eax,eax
c0011371:	75 04                	jne    c0011377 <getFromFileDescriptor(int)+0x2e>
c0011373:	31 c0                	xor    eax,eax
c0011375:	eb 6e                	jmp    c00113e5 <getFromFileDescriptor(int)+0x9c>
c0011377:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c001137a:	74 69                	je     c00113e5 <getFromFileDescriptor(int)+0x9c>
c001137c:	52                   	push   edx
c001137d:	52                   	push   edx
c001137e:	50                   	push   eax
c001137f:	68 78 e3 02 c0       	push   0xc002e378
c0011384:	e8 db 76 01 00       	call   c0028a64 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011389:	eb e1                	jmp    c001136c <getFromFileDescriptor(int)+0x23>
c001138b:	a1 6c e3 02 c0       	mov    eax,ds:0xc002e36c
c0011390:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011396:	74 4d                	je     c00113e5 <getFromFileDescriptor(int)+0x9c>
c0011398:	a1 70 e3 02 c0       	mov    eax,ds:0xc002e370
c001139d:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00113a3:	74 40                	je     c00113e5 <getFromFileDescriptor(int)+0x9c>
c00113a5:	a1 68 e3 02 c0       	mov    eax,ds:0xc002e368
c00113aa:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00113b0:	74 33                	je     c00113e5 <getFromFileDescriptor(int)+0x9c>
c00113b2:	a1 64 e3 02 c0       	mov    eax,ds:0xc002e364
c00113b7:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00113bd:	74 26                	je     c00113e5 <getFromFileDescriptor(int)+0x9c>
c00113bf:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00113c5:	83 f8 08             	cmp    eax,0x8
c00113c8:	77 09                	ja     c00113d3 <getFromFileDescriptor(int)+0x8a>
c00113ca:	8b 04 85 40 e3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1cc0]
c00113d1:	eb 12                	jmp    c00113e5 <getFromFileDescriptor(int)+0x9c>
c00113d3:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00113d9:	83 fb 08             	cmp    ebx,0x8
c00113dc:	77 95                	ja     c0011373 <getFromFileDescriptor(int)+0x2a>
c00113de:	8b 04 9d 00 e3 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd1d00]
c00113e5:	83 c4 08             	add    esp,0x8
c00113e8:	5b                   	pop    ebx
c00113e9:	c3                   	ret    

c00113ea <__static_initialization_and_destruction_0(int, int)>:
c00113ea:	83 ec 0c             	sub    esp,0xc
c00113ed:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00113f2:	75 34                	jne    c0011428 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00113f4:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00113fc:	75 2a                	jne    c0011428 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00113fe:	83 ec 0c             	sub    esp,0xc
c0011401:	68 78 e3 02 c0       	push   0xc002e378
c0011406:	e8 99 74 01 00       	call   c00288a4 <LinkedList<UnixFile>::LinkedList()>
c001140b:	83 c4 10             	add    esp,0x10
c001140e:	83 ec 04             	sub    esp,0x4
c0011411:	68 dc cf 02 c0       	push   0xc002cfdc
c0011416:	68 78 e3 02 c0       	push   0xc002e378
c001141b:	68 a2 88 02 c0       	push   0xc00288a2
c0011420:	e8 ee 12 00 00       	call   c0012713 <__cxa_atexit>
c0011425:	83 c4 10             	add    esp,0x10
c0011428:	90                   	nop
c0011429:	83 c4 0c             	add    esp,0xc
c001142c:	c3                   	ret    

c001142d <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c001142d:	83 ec 0c             	sub    esp,0xc
c0011430:	83 ec 08             	sub    esp,0x8
c0011433:	68 ff ff 00 00       	push   0xffff
c0011438:	6a 01                	push   0x1
c001143a:	e8 ab ff ff ff       	call   c00113ea <__static_initialization_and_destruction_0(int, int)>
c001143f:	83 c4 10             	add    esp,0x10
c0011442:	83 c4 0c             	add    esp,0xc
c0011445:	c3                   	ret    

c0011446 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011446:	53                   	push   ebx
c0011447:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001144b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001144f:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011455:	89 c8                	mov    eax,ecx
c0011457:	d1 e8                	shr    eax,1
c0011459:	03 05 c8 d1 02 c0    	add    eax,DWORD PTR ds:0xc002d1c8
c001145f:	83 e1 01             	and    ecx,0x1
c0011462:	8a 10                	mov    dl,BYTE PTR [eax]
c0011464:	75 09                	jne    c001146f <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011466:	83 e2 f0             	and    edx,0xfffffff0
c0011469:	09 da                	or     edx,ebx
c001146b:	88 10                	mov    BYTE PTR [eax],dl
c001146d:	5b                   	pop    ebx
c001146e:	c3                   	ret    
c001146f:	c1 e3 04             	shl    ebx,0x4
c0011472:	83 e2 0f             	and    edx,0xf
c0011475:	09 da                	or     edx,ebx
c0011477:	88 10                	mov    BYTE PTR [eax],dl
c0011479:	5b                   	pop    ebx
c001147a:	c3                   	ret    

c001147b <Virt::getPageState(unsigned long)>:
c001147b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001147f:	8b 0d c8 d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d1c8
c0011485:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c001148b:	89 d0                	mov    eax,edx
c001148d:	d1 e8                	shr    eax,1
c001148f:	83 e2 01             	and    edx,0x1
c0011492:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011495:	75 04                	jne    c001149b <Virt::getPageState(unsigned long)+0x20>
c0011497:	83 e0 0f             	and    eax,0xf
c001149a:	c3                   	ret    
c001149b:	c0 e8 04             	shr    al,0x4
c001149e:	c3                   	ret    

c001149f <Virt::allocateKernelVirtualPages(int)>:
c001149f:	55                   	push   ebp
c00114a0:	31 ed                	xor    ebp,ebp
c00114a2:	57                   	push   edi
c00114a3:	56                   	push   esi
c00114a4:	53                   	push   ebx
c00114a5:	31 db                	xor    ebx,ebx
c00114a7:	83 ec 1c             	sub    esp,0x1c
c00114aa:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00114ae:	8b 3d c4 d1 02 c0    	mov    edi,DWORD PTR ds:0xc002d1c4
c00114b4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00114b9:	57                   	push   edi
c00114ba:	e8 bc ff ff ff       	call   c001147b <Virt::getPageState(unsigned long)>
c00114bf:	5a                   	pop    edx
c00114c0:	84 c0                	test   al,al
c00114c2:	75 3a                	jne    c00114fe <Virt::allocateKernelVirtualPages(int)+0x5f>
c00114c4:	85 db                	test   ebx,ebx
c00114c6:	75 02                	jne    c00114ca <Virt::allocateKernelVirtualPages(int)+0x2b>
c00114c8:	89 fd                	mov    ebp,edi
c00114ca:	43                   	inc    ebx
c00114cb:	39 f3                	cmp    ebx,esi
c00114cd:	74 5a                	je     c0011529 <Virt::allocateKernelVirtualPages(int)+0x8a>
c00114cf:	47                   	inc    edi
c00114d0:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00114d6:	76 31                	jbe    c0011509 <Virt::allocateKernelVirtualPages(int)+0x6a>
c00114d8:	c7 05 c4 d1 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002d1c4,0xc8000
c00114e2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00114e7:	75 28                	jne    c0011511 <Virt::allocateKernelVirtualPages(int)+0x72>
c00114e9:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00114ee:	bf 00 80 0c 00       	mov    edi,0xc8000
c00114f3:	57                   	push   edi
c00114f4:	e8 82 ff ff ff       	call   c001147b <Virt::getPageState(unsigned long)>
c00114f9:	5a                   	pop    edx
c00114fa:	84 c0                	test   al,al
c00114fc:	74 c6                	je     c00114c4 <Virt::allocateKernelVirtualPages(int)+0x25>
c00114fe:	31 db                	xor    ebx,ebx
c0011500:	47                   	inc    edi
c0011501:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011507:	77 cf                	ja     c00114d8 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011509:	89 3d c4 d1 02 c0    	mov    DWORD PTR ds:0xc002d1c4,edi
c001150f:	eb a8                	jmp    c00114b9 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011511:	83 ec 0c             	sub    esp,0xc
c0011514:	68 fc a7 02 c0       	push   0xc002a7fc
c0011519:	e8 1f 8c 00 00       	call   c001a13d <Krnl::panic(char const*)>
c001151e:	8b 3d c4 d1 02 c0    	mov    edi,DWORD PTR ds:0xc002d1c4
c0011524:	83 c4 10             	add    esp,0x10
c0011527:	eb 90                	jmp    c00114b9 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011529:	89 2d c4 d1 02 c0    	mov    DWORD PTR ds:0xc002d1c4,ebp
c001152f:	4b                   	dec    ebx
c0011530:	74 5f                	je     c0011591 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011532:	85 f6                	test   esi,esi
c0011534:	74 3d                	je     c0011573 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011536:	89 e8                	mov    eax,ebp
c0011538:	31 db                	xor    ebx,ebx
c001153a:	8d 7e ff             	lea    edi,[esi-0x1]
c001153d:	eb 14                	jmp    c0011553 <Virt::allocateKernelVirtualPages(int)+0xb4>
c001153f:	6a 01                	push   0x1
c0011541:	43                   	inc    ebx
c0011542:	50                   	push   eax
c0011543:	e8 fe fe ff ff       	call   c0011446 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011548:	58                   	pop    eax
c0011549:	39 f3                	cmp    ebx,esi
c001154b:	5a                   	pop    edx
c001154c:	74 25                	je     c0011573 <Virt::allocateKernelVirtualPages(int)+0xd4>
c001154e:	a1 c4 d1 02 c0       	mov    eax,ds:0xc002d1c4
c0011553:	8d 50 01             	lea    edx,[eax+0x1]
c0011556:	85 db                	test   ebx,ebx
c0011558:	89 15 c4 d1 02 c0    	mov    DWORD PTR ds:0xc002d1c4,edx
c001155e:	74 20                	je     c0011580 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011560:	39 df                	cmp    edi,ebx
c0011562:	75 db                	jne    c001153f <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011564:	6a 03                	push   0x3
c0011566:	43                   	inc    ebx
c0011567:	50                   	push   eax
c0011568:	e8 d9 fe ff ff       	call   c0011446 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001156d:	59                   	pop    ecx
c001156e:	39 f3                	cmp    ebx,esi
c0011570:	58                   	pop    eax
c0011571:	75 db                	jne    c001154e <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011573:	83 c4 1c             	add    esp,0x1c
c0011576:	89 e8                	mov    eax,ebp
c0011578:	5b                   	pop    ebx
c0011579:	c1 e0 0c             	shl    eax,0xc
c001157c:	5e                   	pop    esi
c001157d:	5f                   	pop    edi
c001157e:	5d                   	pop    ebp
c001157f:	c3                   	ret    
c0011580:	6a 02                	push   0x2
c0011582:	bb 01 00 00 00       	mov    ebx,0x1
c0011587:	50                   	push   eax
c0011588:	e8 b9 fe ff ff       	call   c0011446 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001158d:	58                   	pop    eax
c001158e:	5a                   	pop    edx
c001158f:	eb bd                	jmp    c001154e <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011591:	6a 04                	push   0x4
c0011593:	8d 45 01             	lea    eax,[ebp+0x1]
c0011596:	55                   	push   ebp
c0011597:	a3 c4 d1 02 c0       	mov    ds:0xc002d1c4,eax
c001159c:	e8 a5 fe ff ff       	call   c0011446 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00115a1:	59                   	pop    ecx
c00115a2:	89 e8                	mov    eax,ebp
c00115a4:	5b                   	pop    ebx
c00115a5:	c1 e0 0c             	shl    eax,0xc
c00115a8:	83 c4 1c             	add    esp,0x1c
c00115ab:	5b                   	pop    ebx
c00115ac:	5e                   	pop    esi
c00115ad:	5f                   	pop    edi
c00115ae:	5d                   	pop    ebp
c00115af:	c3                   	ret    

c00115b0 <Virt::freeSwapfilePage(unsigned long)>:
c00115b0:	53                   	push   ebx
c00115b1:	8b 15 8c e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e38c
c00115b7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00115bb:	b8 01 00 00 00       	mov    eax,0x1
c00115c0:	89 cb                	mov    ebx,ecx
c00115c2:	d3 e0                	shl    eax,cl
c00115c4:	c1 eb 05             	shr    ebx,0x5
c00115c7:	f7 d0                	not    eax
c00115c9:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c00115cc:	5b                   	pop    ebx
c00115cd:	c3                   	ret    

c00115ce <Virt::swapIDToSector(unsigned long)>:
c00115ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115d2:	0f af 05 cc d1 02 c0 	imul   eax,DWORD PTR ds:0xc002d1cc
c00115d9:	03 05 d4 d1 02 c0    	add    eax,DWORD PTR ds:0xc002d1d4
c00115df:	c3                   	ret    

c00115e0 <Virt::allocateSwapfilePage()>:
c00115e0:	55                   	push   ebp
c00115e1:	31 d2                	xor    edx,edx
c00115e3:	57                   	push   edi
c00115e4:	56                   	push   esi
c00115e5:	53                   	push   ebx
c00115e6:	83 ec 0c             	sub    esp,0xc
c00115e9:	8b 0d cc d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d1cc
c00115ef:	a1 d0 d1 02 c0       	mov    eax,ds:0xc002d1d0
c00115f4:	f7 f1                	div    ecx
c00115f6:	39 0d d0 d1 02 c0    	cmp    DWORD PTR ds:0xc002d1d0,ecx
c00115fc:	72 2d                	jb     c001162b <Virt::allocateSwapfilePage()+0x4b>
c00115fe:	8b 35 8c e3 02 c0    	mov    esi,DWORD PTR ds:0xc002e38c
c0011604:	8b 16                	mov    edx,DWORD PTR [esi]
c0011606:	f6 c2 01             	test   dl,0x1
c0011609:	74 3c                	je     c0011647 <Virt::allocateSwapfilePage()+0x67>
c001160b:	31 c9                	xor    ecx,ecx
c001160d:	bf 01 00 00 00       	mov    edi,0x1
c0011612:	eb 12                	jmp    c0011626 <Virt::allocateSwapfilePage()+0x46>
c0011614:	89 fd                	mov    ebp,edi
c0011616:	89 ca                	mov    edx,ecx
c0011618:	d3 e5                	shl    ebp,cl
c001161a:	c1 ea 05             	shr    edx,0x5
c001161d:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011620:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011622:	85 ea                	test   edx,ebp
c0011624:	74 2a                	je     c0011650 <Virt::allocateSwapfilePage()+0x70>
c0011626:	41                   	inc    ecx
c0011627:	39 c8                	cmp    eax,ecx
c0011629:	77 e9                	ja     c0011614 <Virt::allocateSwapfilePage()+0x34>
c001162b:	83 ec 0c             	sub    esp,0xc
c001162e:	68 dc a9 02 c0       	push   0xc002a9dc
c0011633:	e8 05 8b 00 00       	call   c001a13d <Krnl::panic(char const*)>
c0011638:	83 c4 10             	add    esp,0x10
c001163b:	31 c9                	xor    ecx,ecx
c001163d:	83 c4 0c             	add    esp,0xc
c0011640:	89 c8                	mov    eax,ecx
c0011642:	5b                   	pop    ebx
c0011643:	5e                   	pop    esi
c0011644:	5f                   	pop    edi
c0011645:	5d                   	pop    ebp
c0011646:	c3                   	ret    
c0011647:	89 f3                	mov    ebx,esi
c0011649:	bd 01 00 00 00       	mov    ebp,0x1
c001164e:	31 c9                	xor    ecx,ecx
c0011650:	09 ea                	or     edx,ebp
c0011652:	89 c8                	mov    eax,ecx
c0011654:	89 13                	mov    DWORD PTR [ebx],edx
c0011656:	83 c4 0c             	add    esp,0xc
c0011659:	5b                   	pop    ebx
c001165a:	5e                   	pop    esi
c001165b:	5f                   	pop    edi
c001165c:	5d                   	pop    ebp
c001165d:	c3                   	ret    

c001165e <Virt::virtualMemorySetup()>:
c001165e:	53                   	push   ebx
c001165f:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011664:	6a 0f                	push   0xf
c0011666:	53                   	push   ebx
c0011667:	43                   	inc    ebx
c0011668:	e8 d9 fd ff ff       	call   c0011446 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001166d:	58                   	pop    eax
c001166e:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011674:	5a                   	pop    edx
c0011675:	75 ed                	jne    c0011664 <Virt::virtualMemorySetup()+0x6>
c0011677:	bb 00 80 0c 00       	mov    ebx,0xc8000
c001167c:	6a 00                	push   0x0
c001167e:	53                   	push   ebx
c001167f:	43                   	inc    ebx
c0011680:	e8 c1 fd ff ff       	call   c0011446 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011685:	59                   	pop    ecx
c0011686:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001168c:	58                   	pop    eax
c001168d:	75 ed                	jne    c001167c <Virt::virtualMemorySetup()+0x1e>
c001168f:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011694:	6a 0f                	push   0xf
c0011696:	53                   	push   ebx
c0011697:	43                   	inc    ebx
c0011698:	e8 a9 fd ff ff       	call   c0011446 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001169d:	58                   	pop    eax
c001169e:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c00116a4:	5a                   	pop    edx
c00116a5:	75 ed                	jne    c0011694 <Virt::virtualMemorySetup()+0x36>
c00116a7:	5b                   	pop    ebx
c00116a8:	c3                   	ret    

c00116a9 <Virt::setupPageSwapping(int)>:
c00116a9:	53                   	push   ebx
c00116aa:	83 ec 0c             	sub    esp,0xc
c00116ad:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00116b1:	a1 28 e8 02 c0       	mov    eax,ds:0xc002e828
c00116b6:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00116bc:	8b 10                	mov    edx,DWORD PTR [eax]
c00116be:	53                   	push   ebx
c00116bf:	c1 e3 0b             	shl    ebx,0xb
c00116c2:	68 f3 a9 02 c0       	push   0xc002a9f3
c00116c7:	50                   	push   eax
c00116c8:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c00116cb:	89 1d d0 d1 02 c0    	mov    DWORD PTR ds:0xc002d1d0,ebx
c00116d1:	c6 05 d8 d1 02 c0 43 	mov    BYTE PTR ds:0xc002d1d8,0x43
c00116d8:	c1 eb 08             	shr    ebx,0x8
c00116db:	a3 d4 d1 02 c0       	mov    ds:0xc002d1d4,eax
c00116e0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00116e3:	c7 05 cc d1 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002d1cc,0x8
c00116ed:	e8 27 e1 ff ff       	call   c000f819 <malloc>
c00116f2:	83 c4 0c             	add    esp,0xc
c00116f5:	89 c1                	mov    ecx,eax
c00116f7:	a3 8c e3 02 c0       	mov    ds:0xc002e38c,eax
c00116fc:	31 d2                	xor    edx,edx
c00116fe:	a1 d0 d1 02 c0       	mov    eax,ds:0xc002d1d0
c0011703:	f7 35 cc d1 02 c0    	div    DWORD PTR ds:0xc002d1cc
c0011709:	c1 e8 05             	shr    eax,0x5
c001170c:	50                   	push   eax
c001170d:	6a 00                	push   0x0
c001170f:	51                   	push   ecx
c0011710:	e8 3b f0 fe ff       	call   c0000750 <memset>
c0011715:	83 c4 18             	add    esp,0x18
c0011718:	5b                   	pop    ebx
c0011719:	c3                   	ret    

c001171a <VAS::VAS()>:
c001171a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001171e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011725:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011729:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011730:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011734:	a3 90 e3 02 c0       	mov    ds:0xc002e390,eax
c0011739:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001173d:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011741:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011745:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011748:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001174c:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0011753:	90                   	nop
c0011754:	c3                   	ret    
c0011755:	90                   	nop

c0011756 <VAS::VAS(VAS*)>:
c0011756:	83 ec 0c             	sub    esp,0xc
c0011759:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001175d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011764:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011768:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001176f:	83 ec 0c             	sub    esp,0xc
c0011772:	68 1c a8 02 c0       	push   0xc002a81c
c0011777:	e8 c1 89 00 00       	call   c001a13d <Krnl::panic(char const*)>
c001177c:	83 c4 10             	add    esp,0x10
c001177f:	90                   	nop
c0011780:	83 c4 0c             	add    esp,0xc
c0011783:	c3                   	ret    

c0011784 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011784:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011788:	89 c2                	mov    edx,eax
c001178a:	c1 e8 0a             	shr    eax,0xa
c001178d:	c1 ea 16             	shr    edx,0x16
c0011790:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011795:	19 c9                	sbb    ecx,ecx
c0011797:	c1 e2 0c             	shl    edx,0xc
c001179a:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00117a0:	25 fc 0f 00 00       	and    eax,0xffc
c00117a5:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00117ac:	01 d0                	add    eax,edx
c00117ae:	c3                   	ret    
c00117af:	90                   	nop

c00117b0 <VAS::getPageTableEntry(unsigned long)>:
c00117b0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00117b4:	89 ca                	mov    edx,ecx
c00117b6:	c1 e9 0a             	shr    ecx,0xa
c00117b9:	c1 ea 16             	shr    edx,0x16
c00117bc:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00117c2:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00117c8:	c1 e0 0c             	shl    eax,0xc
c00117cb:	8d 04 08             	lea    eax,[eax+ecx*1]
c00117ce:	c3                   	ret    

c00117cf <Virt::freeKernelVirtualPages(unsigned long)>:
c00117cf:	57                   	push   edi
c00117d0:	56                   	push   esi
c00117d1:	be 01 00 00 00       	mov    esi,0x1
c00117d6:	53                   	push   ebx
c00117d7:	83 ec 10             	sub    esp,0x10
c00117da:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00117de:	c1 eb 0c             	shr    ebx,0xc
c00117e1:	eb 3f                	jmp    c0011822 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c00117e3:	83 ec 08             	sub    esp,0x8
c00117e6:	57                   	push   edi
c00117e7:	ff 35 90 e3 02 c0    	push   DWORD PTR ds:0xc002e390
c00117ed:	e8 be ff ff ff       	call   c00117b0 <VAS::getPageTableEntry(unsigned long)>
c00117f2:	83 c4 10             	add    esp,0x10
c00117f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00117f7:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00117fb:	f6 c4 04             	test   ah,0x4
c00117fe:	75 5f                	jne    c001185f <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011800:	80 fa 04             	cmp    dl,0x4
c0011803:	74 78                	je     c001187d <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011805:	80 fa 02             	cmp    dl,0x2
c0011808:	0f 84 88 00 00 00    	je     c0011896 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c001180e:	80 fa 03             	cmp    dl,0x3
c0011811:	0f 84 ad 00 00 00    	je     c00118c4 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011817:	fe ca                	dec    dl
c0011819:	0f 84 92 00 00 00    	je     c00118b1 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c001181f:	43                   	inc    ebx
c0011820:	31 f6                	xor    esi,esi
c0011822:	53                   	push   ebx
c0011823:	89 df                	mov    edi,ebx
c0011825:	e8 51 fc ff ff       	call   c001147b <Virt::getPageState(unsigned long)>
c001182a:	c1 e7 0c             	shl    edi,0xc
c001182d:	59                   	pop    ecx
c001182e:	84 c0                	test   al,al
c0011830:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011834:	75 ad                	jne    c00117e3 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011836:	83 ec 0c             	sub    esp,0xc
c0011839:	68 0a aa 02 c0       	push   0xc002aa0a
c001183e:	e8 fa 88 00 00       	call   c001a13d <Krnl::panic(char const*)>
c0011843:	58                   	pop    eax
c0011844:	5a                   	pop    edx
c0011845:	57                   	push   edi
c0011846:	ff 35 90 e3 02 c0    	push   DWORD PTR ds:0xc002e390
c001184c:	e8 5f ff ff ff       	call   c00117b0 <VAS::getPageTableEntry(unsigned long)>
c0011851:	83 c4 10             	add    esp,0x10
c0011854:	8b 00                	mov    eax,DWORD PTR [eax]
c0011856:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001185a:	f6 c4 04             	test   ah,0x4
c001185d:	74 c0                	je     c001181f <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c001185f:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011863:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011868:	83 ec 0c             	sub    esp,0xc
c001186b:	50                   	push   eax
c001186c:	e8 33 e3 ff ff       	call   c000fba4 <Phys::freePage(unsigned long)>
c0011871:	83 c4 10             	add    esp,0x10
c0011874:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011878:	80 fa 04             	cmp    dl,0x4
c001187b:	75 88                	jne    c0011805 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c001187d:	89 f0                	mov    eax,esi
c001187f:	84 c0                	test   al,al
c0011881:	75 47                	jne    c00118ca <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011883:	c7 44 24 20 40 a8 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a840
c001188b:	83 c4 10             	add    esp,0x10
c001188e:	5b                   	pop    ebx
c001188f:	5e                   	pop    esi
c0011890:	5f                   	pop    edi
c0011891:	e9 a7 88 00 00       	jmp    c001a13d <Krnl::panic(char const*)>
c0011896:	89 f0                	mov    eax,esi
c0011898:	84 c0                	test   al,al
c001189a:	75 15                	jne    c00118b1 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c001189c:	83 ec 0c             	sub    esp,0xc
c001189f:	68 26 aa 02 c0       	push   0xc002aa26
c00118a4:	e8 94 88 00 00       	call   c001a13d <Krnl::panic(char const*)>
c00118a9:	83 c4 10             	add    esp,0x10
c00118ac:	e9 6e ff ff ff       	jmp    c001181f <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00118b1:	83 ec 08             	sub    esp,0x8
c00118b4:	6a 00                	push   0x0
c00118b6:	53                   	push   ebx
c00118b7:	e8 8a fb ff ff       	call   c0011446 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00118bc:	83 c4 10             	add    esp,0x10
c00118bf:	e9 5b ff ff ff       	jmp    c001181f <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00118c4:	89 f0                	mov    eax,esi
c00118c6:	84 c0                	test   al,al
c00118c8:	75 15                	jne    c00118df <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c00118ca:	83 ec 08             	sub    esp,0x8
c00118cd:	6a 00                	push   0x0
c00118cf:	53                   	push   ebx
c00118d0:	e8 71 fb ff ff       	call   c0011446 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00118d5:	83 c4 10             	add    esp,0x10
c00118d8:	83 c4 10             	add    esp,0x10
c00118db:	5b                   	pop    ebx
c00118dc:	5e                   	pop    esi
c00118dd:	5f                   	pop    edi
c00118de:	c3                   	ret    
c00118df:	c7 44 24 20 42 aa 02 c0 	mov    DWORD PTR [esp+0x20],0xc002aa42
c00118e7:	83 c4 10             	add    esp,0x10
c00118ea:	5b                   	pop    ebx
c00118eb:	5e                   	pop    esi
c00118ec:	5f                   	pop    edi
c00118ed:	e9 4b 88 00 00       	jmp    c001a13d <Krnl::panic(char const*)>

c00118f2 <VAS::freeAllocatedPages(unsigned long)>:
c00118f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118f6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00118fa:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c00118fe:	74 09                	je     c0011909 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011900:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011904:	e9 c6 fe ff ff       	jmp    c00117cf <Virt::freeKernelVirtualPages(unsigned long)>
c0011909:	c7 44 24 04 64 a8 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a864
c0011911:	e9 5b 0f 00 00       	jmp    c0012871 <Dbg::kprintf(char const*, ...)>

c0011916 <VAS::virtualToPhysical(unsigned long)>:
c0011916:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001191a:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001191e:	e8 8d fe ff ff       	call   c00117b0 <VAS::getPageTableEntry(unsigned long)>
c0011923:	5a                   	pop    edx
c0011924:	8b 00                	mov    eax,DWORD PTR [eax]
c0011926:	59                   	pop    ecx
c0011927:	25 00 f0 ff ff       	and    eax,0xfffff000
c001192c:	c3                   	ret    
c001192d:	90                   	nop

c001192e <VAS::reflagRange(unsigned long, int, int, int)>:
c001192e:	55                   	push   ebp
c001192f:	57                   	push   edi
c0011930:	56                   	push   esi
c0011931:	53                   	push   ebx
c0011932:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011936:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001193a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001193e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011942:	85 db                	test   ebx,ebx
c0011944:	7e 22                	jle    c0011968 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011946:	c1 e3 0c             	shl    ebx,0xc
c0011949:	01 f3                	add    ebx,esi
c001194b:	56                   	push   esi
c001194c:	81 c6 00 10 00 00    	add    esi,0x1000
c0011952:	55                   	push   ebp
c0011953:	e8 58 fe ff ff       	call   c00117b0 <VAS::getPageTableEntry(unsigned long)>
c0011958:	5a                   	pop    edx
c0011959:	59                   	pop    ecx
c001195a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001195c:	21 f9                	and    ecx,edi
c001195e:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0011962:	39 f3                	cmp    ebx,esi
c0011964:	89 08                	mov    DWORD PTR [eax],ecx
c0011966:	75 e3                	jne    c001194b <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011968:	5b                   	pop    ebx
c0011969:	5e                   	pop    esi
c001196a:	5f                   	pop    edi
c001196b:	5d                   	pop    ebp
c001196c:	c3                   	ret    
c001196d:	90                   	nop

c001196e <VAS::setToWriteCombining(unsigned long, int)>:
c001196e:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c0011973:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011979:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0011980:	75 01                	jne    c0011983 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0011982:	c3                   	ret    
c0011983:	68 80 00 00 00       	push   0x80
c0011988:	6a ff                	push   0xffffffff
c001198a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001198e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011992:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011996:	e8 93 ff ff ff       	call   c001192e <VAS::reflagRange(unsigned long, int, int, int)>
c001199b:	83 c4 14             	add    esp,0x14
c001199e:	c3                   	ret    
c001199f:	90                   	nop

c00119a0 <VAS::mapOtherVASIn(bool, VAS*)>:
c00119a0:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00119a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119a9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00119ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00119b0:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00119b3:	19 c0                	sbb    eax,eax
c00119b5:	83 ca 03             	or     edx,0x3
c00119b8:	83 e0 fc             	and    eax,0xfffffffc
c00119bb:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00119c2:	0f 20 d8             	mov    eax,cr3
c00119c5:	0f 22 d8             	mov    cr3,eax
c00119c8:	c3                   	ret    
c00119c9:	90                   	nop

c00119ca <VAS::~VAS()>:
c00119ca:	83 ec 2c             	sub    esp,0x2c
c00119cd:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00119d5:	fa                   	cli    
c00119d6:	a1 28 f7 02 c0       	mov    eax,ds:0xc002f728
c00119db:	40                   	inc    eax
c00119dc:	a3 28 f7 02 c0       	mov    ds:0xc002f728,eax
c00119e1:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00119e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00119e8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00119eb:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00119f1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00119f5:	6a 01                	push   0x1
c00119f7:	50                   	push   eax
c00119f8:	e8 a3 ff ff ff       	call   c00119a0 <VAS::mapOtherVASIn(bool, VAS*)>
c00119fd:	83 c4 0c             	add    esp,0xc
c0011a00:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011a08:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0011a10:	0f 8f d4 00 00 00    	jg     c0011aea <VAS::~VAS()+0x120>
c0011a16:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011a1a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011a1d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011a21:	c1 e2 02             	shl    edx,0x2
c0011a24:	01 d0                	add    eax,edx
c0011a26:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a28:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011a2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a30:	83 e0 01             	and    eax,0x1
c0011a33:	0f 84 a8 00 00 00    	je     c0011ae1 <VAS::~VAS()+0x117>
c0011a39:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011a41:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011a49:	7f 72                	jg     c0011abd <VAS::~VAS()+0xf3>
c0011a4b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011a4f:	c1 e0 0a             	shl    eax,0xa
c0011a52:	89 c2                	mov    edx,eax
c0011a54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011a58:	01 d0                	add    eax,edx
c0011a5a:	c1 e0 0c             	shl    eax,0xc
c0011a5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011a61:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011a66:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a68:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011a6b:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011a71:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0011a75:	6a 01                	push   0x1
c0011a77:	50                   	push   eax
c0011a78:	e8 07 fd ff ff       	call   c0011784 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011a7d:	83 c4 0c             	add    esp,0xc
c0011a80:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011a84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011a88:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a8a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011a8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a92:	25 01 04 00 00       	and    eax,0x401
c0011a97:	3d 01 04 00 00       	cmp    eax,0x401
c0011a9c:	75 19                	jne    c0011ab7 <VAS::~VAS()+0xed>
c0011a9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011aa2:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011aa7:	83 ec 0c             	sub    esp,0xc
c0011aaa:	50                   	push   eax
c0011aab:	e8 f4 e0 ff ff       	call   c000fba4 <Phys::freePage(unsigned long)>
c0011ab0:	83 c4 10             	add    esp,0x10
c0011ab3:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011ab7:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0011abb:	eb 84                	jmp    c0011a41 <VAS::~VAS()+0x77>
c0011abd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ac1:	25 00 04 00 00       	and    eax,0x400
c0011ac6:	74 19                	je     c0011ae1 <VAS::~VAS()+0x117>
c0011ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011acc:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011ad1:	83 ec 0c             	sub    esp,0xc
c0011ad4:	50                   	push   eax
c0011ad5:	e8 ca e0 ff ff       	call   c000fba4 <Phys::freePage(unsigned long)>
c0011ada:	83 c4 10             	add    esp,0x10
c0011add:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011ae1:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011ae5:	e9 1e ff ff ff       	jmp    c0011a08 <VAS::~VAS()+0x3e>
c0011aea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011aee:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011af1:	83 ec 0c             	sub    esp,0xc
c0011af4:	50                   	push   eax
c0011af5:	e8 d5 fc ff ff       	call   c00117cf <Virt::freeKernelVirtualPages(unsigned long)>
c0011afa:	83 c4 10             	add    esp,0x10
c0011afd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011b01:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011b04:	83 ec 0c             	sub    esp,0xc
c0011b07:	50                   	push   eax
c0011b08:	e8 97 e0 ff ff       	call   c000fba4 <Phys::freePage(unsigned long)>
c0011b0d:	83 c4 10             	add    esp,0x10
c0011b10:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011b14:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011b18:	c1 e0 02             	shl    eax,0x2
c0011b1b:	83 ec 08             	sub    esp,0x8
c0011b1e:	50                   	push   eax
c0011b1f:	68 88 a8 02 c0       	push   0xc002a888
c0011b24:	e8 48 0d 00 00       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c0011b29:	83 c4 10             	add    esp,0x10
c0011b2c:	a1 28 f7 02 c0       	mov    eax,ds:0xc002f728
c0011b31:	48                   	dec    eax
c0011b32:	a3 28 f7 02 c0       	mov    ds:0xc002f728,eax
c0011b37:	a1 28 f7 02 c0       	mov    eax,ds:0xc002f728
c0011b3c:	85 c0                	test   eax,eax
c0011b3e:	75 01                	jne    c0011b41 <VAS::~VAS()+0x177>
c0011b40:	fb                   	sti    
c0011b41:	90                   	nop
c0011b42:	83 c4 2c             	add    esp,0x2c
c0011b45:	c3                   	ret    

c0011b46 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011b46:	55                   	push   ebp
c0011b47:	57                   	push   edi
c0011b48:	56                   	push   esi
c0011b49:	53                   	push   ebx
c0011b4a:	83 ec 1c             	sub    esp,0x1c
c0011b4d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011b51:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011b55:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011b5b:	77 08                	ja     c0011b65 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011b5d:	0f 20 d8             	mov    eax,cr3
c0011b60:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0011b63:	75 47                	jne    c0011bac <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011b65:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011b69:	09 d8                	or     eax,ebx
c0011b6b:	a9 ff 0f 00 00       	test   eax,0xfff
c0011b70:	75 57                	jne    c0011bc9 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011b72:	89 de                	mov    esi,ebx
c0011b74:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011b77:	c1 ee 16             	shr    esi,0x16
c0011b7a:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011b81:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011b85:	74 54                	je     c0011bdb <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011b87:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011b8b:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011b91:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011b95:	c1 e6 0c             	shl    esi,0xc
c0011b98:	c1 eb 0a             	shr    ebx,0xa
c0011b9b:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0011ba1:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0011ba4:	83 c4 1c             	add    esp,0x1c
c0011ba7:	5b                   	pop    ebx
c0011ba8:	5e                   	pop    esi
c0011ba9:	5f                   	pop    edi
c0011baa:	5d                   	pop    ebp
c0011bab:	c3                   	ret    
c0011bac:	83 ec 0c             	sub    esp,0xc
c0011baf:	68 a8 a8 02 c0       	push   0xc002a8a8
c0011bb4:	e8 b8 0c 00 00       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c0011bb9:	83 c4 10             	add    esp,0x10
c0011bbc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011bc0:	09 d8                	or     eax,ebx
c0011bc2:	a9 ff 0f 00 00       	test   eax,0xfff
c0011bc7:	74 a9                	je     c0011b72 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011bc9:	83 ec 0c             	sub    esp,0xc
c0011bcc:	68 10 a9 02 c0       	push   0xc002a910
c0011bd1:	e8 67 85 00 00       	call   c001a13d <Krnl::panic(char const*)>
c0011bd6:	83 c4 10             	add    esp,0x10
c0011bd9:	eb 97                	jmp    c0011b72 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011bdb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011bdf:	e8 31 e0 ff ff       	call   c000fc15 <Phys::allocatePage()>
c0011be4:	83 ec 0c             	sub    esp,0xc
c0011be7:	89 c5                	mov    ebp,eax
c0011be9:	8b 0d 90 e3 02 c0    	mov    ecx,DWORD PTR ds:0xc002e390
c0011bef:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011bf3:	6a 01                	push   0x1
c0011bf5:	e8 a5 f8 ff ff       	call   c001149f <Virt::allocateKernelVirtualPages(int)>
c0011bfa:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011c01:	6a 01                	push   0x1
c0011c03:	50                   	push   eax
c0011c04:	55                   	push   ebp
c0011c05:	81 cd 07 04 00 00    	or     ebp,0x407
c0011c0b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011c0f:	51                   	push   ecx
c0011c10:	e8 27 02 00 00       	call   c0011e3c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011c15:	83 c4 1c             	add    esp,0x1c
c0011c18:	68 00 10 00 00       	push   0x1000
c0011c1d:	6a 00                	push   0x0
c0011c1f:	50                   	push   eax
c0011c20:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011c24:	e8 27 eb fe ff       	call   c0000750 <memset>
c0011c29:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011c2d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011c30:	e8 9a fb ff ff       	call   c00117cf <Virt::freeKernelVirtualPages(unsigned long)>
c0011c35:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011c39:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011c3c:	83 c4 10             	add    esp,0x10
c0011c3f:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011c42:	e9 40 ff ff ff       	jmp    c0011b87 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0011c47:	90                   	nop

c0011c48 <VAS::allocatePages(int, int)>:
c0011c48:	55                   	push   ebp
c0011c49:	57                   	push   edi
c0011c4a:	56                   	push   esi
c0011c4b:	53                   	push   ebx
c0011c4c:	83 ec 1c             	sub    esp,0x1c
c0011c4f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011c53:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c0011c58:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011c5e:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011c64:	83 e0 01             	and    eax,0x1
c0011c67:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011c6b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011c6f:	0f 85 cc 00 00 00    	jne    c0011d41 <VAS::allocatePages(int, int)+0xf9>
c0011c75:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011c78:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011c7c:	85 c0                	test   eax,eax
c0011c7e:	0f 84 a1 00 00 00    	je     c0011d25 <VAS::allocatePages(int, int)+0xdd>
c0011c84:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011c88:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011c8c:	c1 e6 0c             	shl    esi,0xc
c0011c8f:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011c93:	85 c0                	test   eax,eax
c0011c95:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011c98:	7e 33                	jle    c0011ccd <VAS::allocatePages(int, int)+0x85>
c0011c9a:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011c9e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011ca2:	81 cd 00 04 00 00    	or     ebp,0x400
c0011ca8:	e8 68 df ff ff       	call   c000fc15 <Phys::allocatePage()>
c0011cad:	55                   	push   ebp
c0011cae:	53                   	push   ebx
c0011caf:	50                   	push   eax
c0011cb0:	57                   	push   edi
c0011cb1:	e8 90 fe ff ff       	call   c0011b46 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011cb6:	83 c4 10             	add    esp,0x10
c0011cb9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011cbe:	74 03                	je     c0011cc3 <VAS::allocatePages(int, int)+0x7b>
c0011cc0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011cc3:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011cc9:	39 de                	cmp    esi,ebx
c0011ccb:	75 db                	jne    c0011ca8 <VAS::allocatePages(int, int)+0x60>
c0011ccd:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011cd2:	75 12                	jne    c0011ce6 <VAS::allocatePages(int, int)+0x9e>
c0011cd4:	0f 20 d8             	mov    eax,cr3
c0011cd7:	0f 22 d8             	mov    cr3,eax
c0011cda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011cde:	83 c4 1c             	add    esp,0x1c
c0011ce1:	5b                   	pop    ebx
c0011ce2:	5e                   	pop    esi
c0011ce3:	5f                   	pop    edi
c0011ce4:	5d                   	pop    ebp
c0011ce5:	c3                   	ret    
c0011ce6:	c1 ee 0a             	shr    esi,0xa
c0011ce9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011ced:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011cf3:	c1 eb 0a             	shr    ebx,0xa
c0011cf6:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0011cfc:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011d02:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011d08:	39 c3                	cmp    ebx,eax
c0011d0a:	77 ce                	ja     c0011cda <VAS::allocatePages(int, int)+0x92>
c0011d0c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011d0f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011d15:	39 d8                	cmp    eax,ebx
c0011d17:	73 f3                	jae    c0011d0c <VAS::allocatePages(int, int)+0xc4>
c0011d19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d1d:	83 c4 1c             	add    esp,0x1c
c0011d20:	5b                   	pop    ebx
c0011d21:	5e                   	pop    esi
c0011d22:	5f                   	pop    edi
c0011d23:	5d                   	pop    ebp
c0011d24:	c3                   	ret    
c0011d25:	83 ec 0c             	sub    esp,0xc
c0011d28:	68 34 a9 02 c0       	push   0xc002a934
c0011d2d:	e8 0b 84 00 00       	call   c001a13d <Krnl::panic(char const*)>
c0011d32:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011d35:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011d39:	83 c4 10             	add    esp,0x10
c0011d3c:	e9 43 ff ff ff       	jmp    c0011c84 <VAS::allocatePages(int, int)+0x3c>
c0011d41:	83 ec 0c             	sub    esp,0xc
c0011d44:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011d48:	e8 52 f7 ff ff       	call   c001149f <Virt::allocateKernelVirtualPages(int)>
c0011d4d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011d51:	83 c4 10             	add    esp,0x10
c0011d54:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011d59:	0f 87 9b 00 00 00    	ja     c0011dfa <VAS::allocatePages(int, int)+0x1b2>
c0011d5f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011d63:	85 d2                	test   edx,edx
c0011d65:	7e 3c                	jle    c0011da3 <VAS::allocatePages(int, int)+0x15b>
c0011d67:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011d6b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011d6f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011d73:	c1 e5 0c             	shl    ebp,0xc
c0011d76:	81 ce 00 04 00 00    	or     esi,0x400
c0011d7c:	01 dd                	add    ebp,ebx
c0011d7e:	e8 92 de ff ff       	call   c000fc15 <Phys::allocatePage()>
c0011d83:	56                   	push   esi
c0011d84:	53                   	push   ebx
c0011d85:	50                   	push   eax
c0011d86:	57                   	push   edi
c0011d87:	e8 ba fd ff ff       	call   c0011b46 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011d8c:	83 c4 10             	add    esp,0x10
c0011d8f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011d94:	74 03                	je     c0011d99 <VAS::allocatePages(int, int)+0x151>
c0011d96:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011d99:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011d9f:	39 dd                	cmp    ebp,ebx
c0011da1:	75 db                	jne    c0011d7e <VAS::allocatePages(int, int)+0x136>
c0011da3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011da8:	0f 84 26 ff ff ff    	je     c0011cd4 <VAS::allocatePages(int, int)+0x8c>
c0011dae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011db2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011db6:	89 d3                	mov    ebx,edx
c0011db8:	c1 e0 0c             	shl    eax,0xc
c0011dbb:	c1 eb 0a             	shr    ebx,0xa
c0011dbe:	01 d0                	add    eax,edx
c0011dc0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011dc6:	c1 e8 0a             	shr    eax,0xa
c0011dc9:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011dcf:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011dd4:	2d 00 00 40 00       	sub    eax,0x400000
c0011dd9:	39 c3                	cmp    ebx,eax
c0011ddb:	0f 87 f9 fe ff ff    	ja     c0011cda <VAS::allocatePages(int, int)+0x92>
c0011de1:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011de4:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011dea:	39 d8                	cmp    eax,ebx
c0011dec:	73 f3                	jae    c0011de1 <VAS::allocatePages(int, int)+0x199>
c0011dee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011df2:	83 c4 1c             	add    esp,0x1c
c0011df5:	5b                   	pop    ebx
c0011df6:	5e                   	pop    esi
c0011df7:	5f                   	pop    edi
c0011df8:	5d                   	pop    ebp
c0011df9:	c3                   	ret    
c0011dfa:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c0011dff:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011e05:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0011e0c:	0f 84 4d ff ff ff    	je     c0011d5f <VAS::allocatePages(int, int)+0x117>
c0011e12:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0011e1a:	e9 40 ff ff ff       	jmp    c0011d5f <VAS::allocatePages(int, int)+0x117>
c0011e1f:	90                   	nop

c0011e20 <VAS::setCPUSpecific(unsigned long)>:
c0011e20:	83 ec 0c             	sub    esp,0xc
c0011e23:	6a 05                	push   0x5
c0011e25:	68 00 00 40 c2       	push   0xc2400000
c0011e2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011e2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011e32:	e8 0f fd ff ff       	call   c0011b46 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011e37:	83 c4 1c             	add    esp,0x1c
c0011e3a:	c3                   	ret    
c0011e3b:	90                   	nop

c0011e3c <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0011e3c:	55                   	push   ebp
c0011e3d:	57                   	push   edi
c0011e3e:	56                   	push   esi
c0011e3f:	53                   	push   ebx
c0011e40:	83 ec 1c             	sub    esp,0x1c
c0011e43:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c0011e48:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011e4c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011e52:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011e56:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011e5c:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0011e60:	83 e0 01             	and    eax,0x1
c0011e63:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011e67:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011e6b:	85 c0                	test   eax,eax
c0011e6d:	7e 39                	jle    c0011ea8 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0011e6f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011e73:	89 f3                	mov    ebx,esi
c0011e75:	c1 e0 0c             	shl    eax,0xc
c0011e78:	01 f0                	add    eax,esi
c0011e7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011e7e:	55                   	push   ebp
c0011e7f:	53                   	push   ebx
c0011e80:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011e84:	29 f0                	sub    eax,esi
c0011e86:	01 d8                	add    eax,ebx
c0011e88:	50                   	push   eax
c0011e89:	57                   	push   edi
c0011e8a:	e8 b7 fc ff ff       	call   c0011b46 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011e8f:	83 c4 10             	add    esp,0x10
c0011e92:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011e97:	74 03                	je     c0011e9c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0011e99:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011e9c:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011ea2:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0011ea6:	75 d6                	jne    c0011e7e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0011ea8:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ead:	75 10                	jne    c0011ebf <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0011eaf:	0f 20 d8             	mov    eax,cr3
c0011eb2:	0f 22 d8             	mov    cr3,eax
c0011eb5:	83 c4 1c             	add    esp,0x1c
c0011eb8:	89 f0                	mov    eax,esi
c0011eba:	5b                   	pop    ebx
c0011ebb:	5e                   	pop    esi
c0011ebc:	5f                   	pop    edi
c0011ebd:	5d                   	pop    ebp
c0011ebe:	c3                   	ret    
c0011ebf:	89 f3                	mov    ebx,esi
c0011ec1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011ec5:	c1 eb 0a             	shr    ebx,0xa
c0011ec8:	c1 e0 0c             	shl    eax,0xc
c0011ecb:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011ed1:	01 f0                	add    eax,esi
c0011ed3:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011ed9:	c1 e8 0a             	shr    eax,0xa
c0011edc:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011ee1:	2d 00 00 40 00       	sub    eax,0x400000
c0011ee6:	39 c3                	cmp    ebx,eax
c0011ee8:	77 cb                	ja     c0011eb5 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0011eea:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011eed:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011ef3:	39 d8                	cmp    eax,ebx
c0011ef5:	73 f3                	jae    c0011eea <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0011ef7:	83 c4 1c             	add    esp,0x1c
c0011efa:	89 f0                	mov    eax,esi
c0011efc:	5b                   	pop    ebx
c0011efd:	5e                   	pop    esi
c0011efe:	5f                   	pop    edi
c0011eff:	5d                   	pop    ebp
c0011f00:	c3                   	ret    
c0011f01:	90                   	nop

c0011f02 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0011f02:	55                   	push   ebp
c0011f03:	57                   	push   edi
c0011f04:	56                   	push   esi
c0011f05:	53                   	push   ebx
c0011f06:	83 ec 1c             	sub    esp,0x1c
c0011f09:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011f0d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011f11:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0011f15:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0011f19:	a9 ff 0f 00 00       	test   eax,0xfff
c0011f1e:	75 4a                	jne    c0011f6a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0011f20:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011f24:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011f27:	c1 eb 16             	shr    ebx,0x16
c0011f2a:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0011f31:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0011f35:	74 4d                	je     c0011f84 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0011f37:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011f3b:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0011f3f:	c1 e8 0a             	shr    eax,0xa
c0011f42:	80 fa 01             	cmp    dl,0x1
c0011f45:	19 d2                	sbb    edx,edx
c0011f47:	c1 e3 0c             	shl    ebx,0xc
c0011f4a:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0011f4e:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0011f54:	25 fc 0f 00 00       	and    eax,0xffc
c0011f59:	01 d8                	add    eax,ebx
c0011f5b:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0011f62:	83 c4 1c             	add    esp,0x1c
c0011f65:	5b                   	pop    ebx
c0011f66:	5e                   	pop    esi
c0011f67:	5f                   	pop    edi
c0011f68:	5d                   	pop    ebp
c0011f69:	c3                   	ret    
c0011f6a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011f6e:	83 ec 0c             	sub    esp,0xc
c0011f71:	68 60 a9 02 c0       	push   0xc002a960
c0011f76:	e8 c2 81 00 00       	call   c001a13d <Krnl::panic(char const*)>
c0011f7b:	83 c4 10             	add    esp,0x10
c0011f7e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011f82:	eb 9c                	jmp    c0011f20 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0011f84:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011f88:	e8 88 dc ff ff       	call   c000fc15 <Phys::allocatePage()>
c0011f8d:	83 ec 0c             	sub    esp,0xc
c0011f90:	89 c5                	mov    ebp,eax
c0011f92:	8b 0d 90 e3 02 c0    	mov    ecx,DWORD PTR ds:0xc002e390
c0011f98:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011f9c:	6a 01                	push   0x1
c0011f9e:	e8 fc f4 ff ff       	call   c001149f <Virt::allocateKernelVirtualPages(int)>
c0011fa3:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011faa:	6a 01                	push   0x1
c0011fac:	50                   	push   eax
c0011fad:	55                   	push   ebp
c0011fae:	81 cd 07 04 00 00    	or     ebp,0x407
c0011fb4:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011fb8:	51                   	push   ecx
c0011fb9:	e8 7e fe ff ff       	call   c0011e3c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011fbe:	83 c4 1c             	add    esp,0x1c
c0011fc1:	68 00 10 00 00       	push   0x1000
c0011fc6:	6a 00                	push   0x0
c0011fc8:	50                   	push   eax
c0011fc9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011fcd:	e8 7e e7 fe ff       	call   c0000750 <memset>
c0011fd2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011fd6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011fd9:	e8 f1 f7 ff ff       	call   c00117cf <Virt::freeKernelVirtualPages(unsigned long)>
c0011fde:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011fe1:	83 c4 10             	add    esp,0x10
c0011fe4:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0011fe7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011feb:	e9 47 ff ff ff       	jmp    c0011f37 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0011ff0 <VAS::VAS(bool)>:
c0011ff0:	53                   	push   ebx
c0011ff1:	83 ec 28             	sub    esp,0x28
c0011ff4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011ff8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011ffc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012000:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012007:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001200b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0012012:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012016:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001201a:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c001201d:	e8 f3 db ff ff       	call   c000fc15 <Phys::allocatePage()>
c0012022:	89 c2                	mov    edx,eax
c0012024:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012028:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001202b:	8b 1d 90 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e390
c0012031:	83 ec 0c             	sub    esp,0xc
c0012034:	6a 01                	push   0x1
c0012036:	e8 64 f4 ff ff       	call   c001149f <Virt::allocateKernelVirtualPages(int)>
c001203b:	83 c4 10             	add    esp,0x10
c001203e:	89 c2                	mov    edx,eax
c0012040:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012044:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0012047:	83 ec 0c             	sub    esp,0xc
c001204a:	6a 03                	push   0x3
c001204c:	6a 01                	push   0x1
c001204e:	52                   	push   edx
c001204f:	50                   	push   eax
c0012050:	53                   	push   ebx
c0012051:	e8 e6 fd ff ff       	call   c0011e3c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012056:	83 c4 20             	add    esp,0x20
c0012059:	89 c2                	mov    edx,eax
c001205b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001205f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012062:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001206a:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012072:	7f 1c                	jg     c0012090 <VAS::VAS(bool)+0xa0>
c0012074:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012078:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001207b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001207f:	c1 e2 02             	shl    edx,0x2
c0012082:	01 d0                	add    eax,edx
c0012084:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001208a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001208e:	eb da                	jmp    c001206a <VAS::VAS(bool)+0x7a>
c0012090:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0012098:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c00120a0:	7f 7a                	jg     c001211c <VAS::VAS(bool)+0x12c>
c00120a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00120a6:	2d 00 02 00 00       	sub    eax,0x200
c00120ab:	c1 e0 0c             	shl    eax,0xc
c00120ae:	83 c8 03             	or     eax,0x3
c00120b1:	89 c2                	mov    edx,eax
c00120b3:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c00120b8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00120be:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00120c4:	83 e0 10             	and    eax,0x10
c00120c7:	84 c0                	test   al,al
c00120c9:	74 07                	je     c00120d2 <VAS::VAS(bool)+0xe2>
c00120cb:	b8 00 01 00 00       	mov    eax,0x100
c00120d0:	eb 05                	jmp    c00120d7 <VAS::VAS(bool)+0xe7>
c00120d2:	b8 00 00 00 00       	mov    eax,0x0
c00120d7:	09 d0                	or     eax,edx
c00120d9:	89 c1                	mov    ecx,eax
c00120db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00120df:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00120e2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00120e6:	c1 e2 02             	shl    edx,0x2
c00120e9:	01 d0                	add    eax,edx
c00120eb:	89 ca                	mov    edx,ecx
c00120ed:	89 10                	mov    DWORD PTR [eax],edx
c00120ef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00120f3:	2d 40 03 00 00       	sub    eax,0x340
c00120f8:	83 f8 7f             	cmp    eax,0x7f
c00120fb:	77 16                	ja     c0012113 <VAS::VAS(bool)+0x123>
c00120fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012101:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012104:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012108:	c1 e2 02             	shl    edx,0x2
c001210b:	01 d0                	add    eax,edx
c001210d:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012113:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012117:	e9 7c ff ff ff       	jmp    c0012098 <VAS::VAS(bool)+0xa8>
c001211c:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c0012121:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012127:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001212d:	83 e0 10             	and    eax,0x10
c0012130:	84 c0                	test   al,al
c0012132:	74 07                	je     c001213b <VAS::VAS(bool)+0x14b>
c0012134:	b8 03 41 00 00       	mov    eax,0x4103
c0012139:	eb 05                	jmp    c0012140 <VAS::VAS(bool)+0x150>
c001213b:	b8 03 40 00 00       	mov    eax,0x4003
c0012140:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012144:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0012147:	81 c2 20 0c 00 00    	add    edx,0xc20
c001214d:	89 02                	mov    DWORD PTR [edx],eax
c001214f:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c0012154:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001215a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012160:	83 ec 08             	sub    esp,0x8
c0012163:	50                   	push   eax
c0012164:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012168:	e8 b3 fc ff ff       	call   c0011e20 <VAS::setCPUSpecific(unsigned long)>
c001216d:	83 c4 10             	add    esp,0x10
c0012170:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012174:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0012177:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c001217c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012182:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012188:	83 e0 10             	and    eax,0x10
c001218b:	84 c0                	test   al,al
c001218d:	74 07                	je     c0012196 <VAS::VAS(bool)+0x1a6>
c001218f:	b8 00 01 00 00       	mov    eax,0x100
c0012194:	eb 05                	jmp    c001219b <VAS::VAS(bool)+0x1ab>
c0012196:	b8 00 00 00 00       	mov    eax,0x0
c001219b:	09 c2                	or     edx,eax
c001219d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121a1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00121a4:	05 fc 0f 00 00       	add    eax,0xffc
c00121a9:	83 ca 03             	or     edx,0x3
c00121ac:	89 10                	mov    DWORD PTR [eax],edx
c00121ae:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c00121b3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00121b9:	83 ec 0c             	sub    esp,0xc
c00121bc:	50                   	push   eax
c00121bd:	e8 e8 1d 00 00       	call   c0013faa <Device::getName()>
c00121c2:	83 c4 10             	add    esp,0x10
c00121c5:	83 ec 08             	sub    esp,0x8
c00121c8:	68 5c aa 02 c0       	push   0xc002aa5c
c00121cd:	50                   	push   eax
c00121ce:	e8 c5 e6 fe ff       	call   c0000898 <strcmp>
c00121d3:	83 c4 10             	add    esp,0x10
c00121d6:	85 c0                	test   eax,eax
c00121d8:	0f 94 c0             	sete   al
c00121db:	84 c0                	test   al,al
c00121dd:	0f 84 87 00 00 00    	je     c001226a <VAS::VAS(bool)+0x27a>
c00121e3:	fa                   	cli    
c00121e4:	a1 28 f7 02 c0       	mov    eax,ds:0xc002f728
c00121e9:	40                   	inc    eax
c00121ea:	a3 28 f7 02 c0       	mov    ds:0xc002f728,eax
c00121ef:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c00121f4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00121fa:	05 7c 09 00 00       	add    eax,0x97c
c00121ff:	83 ec 0c             	sub    esp,0xc
c0012202:	50                   	push   eax
c0012203:	e8 96 d0 ff ff       	call   c000f29e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012208:	83 c4 10             	add    esp,0x10
c001220b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012210:	89 c3                	mov    ebx,eax
c0012212:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c0012217:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001221d:	05 7c 09 00 00       	add    eax,0x97c
c0012222:	83 ec 0c             	sub    esp,0xc
c0012225:	50                   	push   eax
c0012226:	e8 73 d0 ff ff       	call   c000f29e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001222b:	83 c4 10             	add    esp,0x10
c001222e:	83 ec 08             	sub    esp,0x8
c0012231:	50                   	push   eax
c0012232:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012236:	e8 75 f5 ff ff       	call   c00117b0 <VAS::getPageTableEntry(unsigned long)>
c001223b:	83 c4 10             	add    esp,0x10
c001223e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012240:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012245:	6a 11                	push   0x11
c0012247:	53                   	push   ebx
c0012248:	50                   	push   eax
c0012249:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001224d:	e8 f4 f8 ff ff       	call   c0011b46 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012252:	83 c4 10             	add    esp,0x10
c0012255:	a1 28 f7 02 c0       	mov    eax,ds:0xc002f728
c001225a:	48                   	dec    eax
c001225b:	a3 28 f7 02 c0       	mov    ds:0xc002f728,eax
c0012260:	a1 28 f7 02 c0       	mov    eax,ds:0xc002f728
c0012265:	85 c0                	test   eax,eax
c0012267:	75 01                	jne    c001226a <VAS::VAS(bool)+0x27a>
c0012269:	fb                   	sti    
c001226a:	90                   	nop
c001226b:	83 c4 28             	add    esp,0x28
c001226e:	5b                   	pop    ebx
c001226f:	c3                   	ret    

c0012270 <VAS::evict(unsigned long)>:
c0012270:	55                   	push   ebp
c0012271:	57                   	push   edi
c0012272:	56                   	push   esi
c0012273:	53                   	push   ebx
c0012274:	83 ec 28             	sub    esp,0x28
c0012277:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001227b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001227f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012283:	68 6a aa 02 c0       	push   0xc002aa6a
c0012288:	e8 e4 05 00 00       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c001228d:	e8 4e f3 ff ff       	call   c00115e0 <Virt::allocateSwapfilePage()>
c0012292:	5a                   	pop    edx
c0012293:	89 c7                	mov    edi,eax
c0012295:	59                   	pop    ecx
c0012296:	50                   	push   eax
c0012297:	68 87 aa 02 c0       	push   0xc002aa87
c001229c:	e8 d0 05 00 00       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c00122a1:	83 c4 10             	add    esp,0x10
c00122a4:	8b 1d cc d1 02 c0    	mov    ebx,DWORD PTR ds:0xc002d1cc
c00122aa:	85 db                	test   ebx,ebx
c00122ac:	7e 3d                	jle    c00122eb <VAS::evict(unsigned long)+0x7b>
c00122ae:	89 ee                	mov    esi,ebp
c00122b0:	31 db                	xor    ebx,ebx
c00122b2:	83 ec 0c             	sub    esp,0xc
c00122b5:	57                   	push   edi
c00122b6:	e8 13 f3 ff ff       	call   c00115ce <Virt::swapIDToSector(unsigned long)>
c00122bb:	89 34 24             	mov    DWORD PTR [esp],esi
c00122be:	01 d8                	add    eax,ebx
c00122c0:	6a 01                	push   0x1
c00122c2:	31 d2                	xor    edx,edx
c00122c4:	43                   	inc    ebx
c00122c5:	52                   	push   edx
c00122c6:	81 c6 00 02 00 00    	add    esi,0x200
c00122cc:	50                   	push   eax
c00122cd:	0f be 05 d8 d1 02 c0 	movsx  eax,BYTE PTR ds:0xc002d1d8
c00122d4:	ff 34 85 1c e7 02 c0 	push   DWORD PTR [eax*4-0x3ffd18e4]
c00122db:	e8 58 3f 00 00       	call   c0016238 <LogicalDisk::write(unsigned long long, int, void*)>
c00122e0:	83 c4 20             	add    esp,0x20
c00122e3:	39 1d cc d1 02 c0    	cmp    DWORD PTR ds:0xc002d1cc,ebx
c00122e9:	7f c7                	jg     c00122b2 <VAS::evict(unsigned long)+0x42>
c00122eb:	83 ec 08             	sub    esp,0x8
c00122ee:	c1 e7 0b             	shl    edi,0xb
c00122f1:	55                   	push   ebp
c00122f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00122f6:	e8 b5 f4 ff ff       	call   c00117b0 <VAS::getPageTableEntry(unsigned long)>
c00122fb:	5a                   	pop    edx
c00122fc:	89 c6                	mov    esi,eax
c00122fe:	59                   	pop    ecx
c00122ff:	ff 30                	push   DWORD PTR [eax]
c0012301:	68 97 aa 02 c0       	push   0xc002aa97
c0012306:	e8 66 05 00 00       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c001230b:	8b 16                	mov    edx,DWORD PTR [esi]
c001230d:	89 d3                	mov    ebx,edx
c001230f:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012315:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001231b:	09 d7                	or     edi,edx
c001231d:	89 3e                	mov    DWORD PTR [esi],edi
c001231f:	5e                   	pop    esi
c0012320:	58                   	pop    eax
c0012321:	57                   	push   edi
c0012322:	68 b0 aa 02 c0       	push   0xc002aab0
c0012327:	e8 45 05 00 00       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c001232c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001232f:	ff 05 88 e3 02 c0    	inc    DWORD PTR ds:0xc002e388
c0012335:	e8 6a d8 ff ff       	call   c000fba4 <Phys::freePage(unsigned long)>
c001233a:	0f 20 d8             	mov    eax,cr3
c001233d:	0f 22 d8             	mov    cr3,eax
c0012340:	ff 35 88 e3 02 c0    	push   DWORD PTR ds:0xc002e388
c0012346:	55                   	push   ebp
c0012347:	53                   	push   ebx
c0012348:	68 84 a9 02 c0       	push   0xc002a984
c001234d:	e8 1f 05 00 00       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c0012352:	a1 84 e3 02 c0       	mov    eax,ds:0xc002e384
c0012357:	c7 44 24 50 c9 aa 02 c0 	mov    DWORD PTR [esp+0x50],0xc002aac9
c001235f:	8d 50 01             	lea    edx,[eax+0x1]
c0012362:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0012366:	89 15 84 e3 02 c0    	mov    DWORD PTR ds:0xc002e384,edx
c001236c:	83 c4 3c             	add    esp,0x3c
c001236f:	5b                   	pop    ebx
c0012370:	5e                   	pop    esi
c0012371:	5f                   	pop    edi
c0012372:	5d                   	pop    ebp
c0012373:	e9 f9 04 00 00       	jmp    c0012871 <Dbg::kprintf(char const*, ...)>

c0012378 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012378:	55                   	push   ebp
c0012379:	57                   	push   edi
c001237a:	56                   	push   esi
c001237b:	53                   	push   ebx
c001237c:	83 ec 24             	sub    esp,0x24
c001237f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0012383:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012387:	68 da aa 02 c0       	push   0xc002aada
c001238c:	e8 e0 04 00 00       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c0012391:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0012395:	58                   	pop    eax
c0012396:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c001239c:	5a                   	pop    edx
c001239d:	57                   	push   edi
c001239e:	53                   	push   ebx
c001239f:	e8 0c f4 ff ff       	call   c00117b0 <VAS::getPageTableEntry(unsigned long)>
c00123a4:	59                   	pop    ecx
c00123a5:	5e                   	pop    esi
c00123a6:	89 c6                	mov    esi,eax
c00123a8:	ff 30                	push   DWORD PTR [eax]
c00123aa:	68 ed aa 02 c0       	push   0xc002aaed
c00123af:	e8 bd 04 00 00       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c00123b4:	83 c4 10             	add    esp,0x10
c00123b7:	85 ff                	test   edi,edi
c00123b9:	74 0a                	je     c00123c5 <VAS::tryLoadBackOffDisk(unsigned long)+0x4d>
c00123bb:	8b 2e                	mov    ebp,DWORD PTR [esi]
c00123bd:	f7 c5 01 00 00 00    	test   ebp,0x1
c00123c3:	74 0a                	je     c00123cf <VAS::tryLoadBackOffDisk(unsigned long)+0x57>
c00123c5:	83 c4 1c             	add    esp,0x1c
c00123c8:	31 c0                	xor    eax,eax
c00123ca:	5b                   	pop    ebx
c00123cb:	5e                   	pop    esi
c00123cc:	5f                   	pop    edi
c00123cd:	5d                   	pop    ebp
c00123ce:	c3                   	ret    
c00123cf:	83 ec 08             	sub    esp,0x8
c00123d2:	c1 ed 0b             	shr    ebp,0xb
c00123d5:	55                   	push   ebp
c00123d6:	68 fb aa 02 c0       	push   0xc002aafb
c00123db:	e8 91 04 00 00       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c00123e0:	e8 30 d8 ff ff       	call   c000fc15 <Phys::allocatePage()>
c00123e5:	59                   	pop    ecx
c00123e6:	5a                   	pop    edx
c00123e7:	50                   	push   eax
c00123e8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00123ec:	68 06 ab 02 c0       	push   0xc002ab06
c00123f1:	e8 7b 04 00 00       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c00123f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00123fa:	8b 16                	mov    edx,DWORD PTR [esi]
c00123fc:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012402:	09 d0                	or     eax,edx
c0012404:	0d 01 08 00 00       	or     eax,0x801
c0012409:	89 06                	mov    DWORD PTR [esi],eax
c001240b:	59                   	pop    ecx
c001240c:	5e                   	pop    esi
c001240d:	50                   	push   eax
c001240e:	68 1b ab 02 c0       	push   0xc002ab1b
c0012413:	e8 59 04 00 00       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c0012418:	0f 20 d8             	mov    eax,cr3
c001241b:	83 c4 0c             	add    esp,0xc
c001241e:	53                   	push   ebx
c001241f:	50                   	push   eax
c0012420:	68 33 ab 02 c0       	push   0xc002ab33
c0012425:	e8 47 04 00 00       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c001242a:	c7 04 24 4b ab 02 c0 	mov    DWORD PTR [esp],0xc002ab4b
c0012431:	e8 3b 04 00 00       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c0012436:	83 c4 10             	add    esp,0x10
c0012439:	a1 cc d1 02 c0       	mov    eax,ds:0xc002d1cc
c001243e:	85 c0                	test   eax,eax
c0012440:	7e 3d                	jle    c001247f <VAS::tryLoadBackOffDisk(unsigned long)+0x107>
c0012442:	89 fe                	mov    esi,edi
c0012444:	31 db                	xor    ebx,ebx
c0012446:	83 ec 0c             	sub    esp,0xc
c0012449:	55                   	push   ebp
c001244a:	e8 7f f1 ff ff       	call   c00115ce <Virt::swapIDToSector(unsigned long)>
c001244f:	89 34 24             	mov    DWORD PTR [esp],esi
c0012452:	01 d8                	add    eax,ebx
c0012454:	6a 01                	push   0x1
c0012456:	31 d2                	xor    edx,edx
c0012458:	43                   	inc    ebx
c0012459:	52                   	push   edx
c001245a:	81 c6 00 02 00 00    	add    esi,0x200
c0012460:	50                   	push   eax
c0012461:	0f be 05 d8 d1 02 c0 	movsx  eax,BYTE PTR ds:0xc002d1d8
c0012468:	ff 34 85 1c e7 02 c0 	push   DWORD PTR [eax*4-0x3ffd18e4]
c001246f:	e8 58 3d 00 00       	call   c00161cc <LogicalDisk::read(unsigned long long, int, void*)>
c0012474:	83 c4 20             	add    esp,0x20
c0012477:	39 1d cc d1 02 c0    	cmp    DWORD PTR ds:0xc002d1cc,ebx
c001247d:	7f c7                	jg     c0012446 <VAS::tryLoadBackOffDisk(unsigned long)+0xce>
c001247f:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0012484:	48                   	dec    eax
c0012485:	52                   	push   edx
c0012486:	a3 88 e3 02 c0       	mov    ds:0xc002e388,eax
c001248b:	50                   	push   eax
c001248c:	57                   	push   edi
c001248d:	68 5b ab 02 c0       	push   0xc002ab5b
c0012492:	e8 da 03 00 00       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c0012497:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001249a:	e8 11 f1 ff ff       	call   c00115b0 <Virt::freeSwapfilePage(unsigned long)>
c001249f:	c7 04 24 70 ab 02 c0 	mov    DWORD PTR [esp],0xc002ab70
c00124a6:	e8 c6 03 00 00       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c00124ab:	a1 28 f7 02 c0       	mov    eax,ds:0xc002f728
c00124b0:	83 c4 10             	add    esp,0x10
c00124b3:	48                   	dec    eax
c00124b4:	a3 28 f7 02 c0       	mov    ds:0xc002f728,eax
c00124b9:	85 c0                	test   eax,eax
c00124bb:	75 01                	jne    c00124be <VAS::tryLoadBackOffDisk(unsigned long)+0x146>
c00124bd:	fb                   	sti    
c00124be:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00124c2:	25 ff 0f 00 00       	and    eax,0xfff
c00124c7:	3d e0 0f 00 00       	cmp    eax,0xfe0
c00124cc:	77 20                	ja     c00124ee <VAS::tryLoadBackOffDisk(unsigned long)+0x176>
c00124ce:	0f 20 d8             	mov    eax,cr3
c00124d1:	0f 22 d8             	mov    cr3,eax
c00124d4:	83 ec 0c             	sub    esp,0xc
c00124d7:	68 96 ab 02 c0       	push   0xc002ab96
c00124dc:	e8 90 03 00 00       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c00124e1:	83 c4 10             	add    esp,0x10
c00124e4:	b0 01                	mov    al,0x1
c00124e6:	83 c4 1c             	add    esp,0x1c
c00124e9:	5b                   	pop    ebx
c00124ea:	5e                   	pop    esi
c00124eb:	5f                   	pop    edi
c00124ec:	5d                   	pop    ebp
c00124ed:	c3                   	ret    
c00124ee:	83 ec 0c             	sub    esp,0xc
c00124f1:	68 86 ab 02 c0       	push   0xc002ab86
c00124f6:	e8 76 03 00 00       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c00124fb:	83 c4 10             	add    esp,0x10
c00124fe:	eb ce                	jmp    c00124ce <VAS::tryLoadBackOffDisk(unsigned long)+0x156>

c0012500 <VAS::scanForEviction()>:
c0012500:	55                   	push   ebp
c0012501:	31 ed                	xor    ebp,ebp
c0012503:	57                   	push   edi
c0012504:	56                   	push   esi
c0012505:	53                   	push   ebx
c0012506:	83 ec 0c             	sub    esp,0xc
c0012509:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001250d:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012510:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012516:	75 0e                	jne    c0012526 <VAS::scanForEviction()+0x26>
c0012518:	89 da                	mov    edx,ebx
c001251a:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001251d:	c1 ea 16             	shr    edx,0x16
c0012520:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012524:	74 4e                	je     c0012574 <VAS::scanForEviction()+0x74>
c0012526:	53                   	push   ebx
c0012527:	56                   	push   esi
c0012528:	e8 83 f2 ff ff       	call   c00117b0 <VAS::getPageTableEntry(unsigned long)>
c001252d:	5f                   	pop    edi
c001252e:	8b 38                	mov    edi,DWORD PTR [eax]
c0012530:	5a                   	pop    edx
c0012531:	89 fa                	mov    edx,edi
c0012533:	81 e2 01 08 00 00    	and    edx,0x801
c0012539:	81 fa 01 08 00 00    	cmp    edx,0x801
c001253f:	74 3e                	je     c001257f <VAS::scanForEviction()+0x7f>
c0012541:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012547:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c001254d:	76 2b                	jbe    c001257a <VAS::scanForEviction()+0x7a>
c001254f:	45                   	inc    ebp
c0012550:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0012557:	83 fd 04             	cmp    ebp,0x4
c001255a:	74 35                	je     c0012591 <VAS::scanForEviction()+0x91>
c001255c:	31 db                	xor    ebx,ebx
c001255e:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012564:	75 c0                	jne    c0012526 <VAS::scanForEviction()+0x26>
c0012566:	89 da                	mov    edx,ebx
c0012568:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001256b:	c1 ea 16             	shr    edx,0x16
c001256e:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012572:	75 b2                	jne    c0012526 <VAS::scanForEviction()+0x26>
c0012574:	81 c3 00 00 40 00    	add    ebx,0x400000
c001257a:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c001257d:	eb 91                	jmp    c0012510 <VAS::scanForEviction()+0x10>
c001257f:	f7 c7 20 00 00 00    	test   edi,0x20
c0012585:	74 22                	je     c00125a9 <VAS::scanForEviction()+0xa9>
c0012587:	83 e7 df             	and    edi,0xffffffdf
c001258a:	89 38                	mov    DWORD PTR [eax],edi
c001258c:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c001258f:	eb b0                	jmp    c0012541 <VAS::scanForEviction()+0x41>
c0012591:	83 ec 0c             	sub    esp,0xc
c0012594:	68 b4 a9 02 c0       	push   0xc002a9b4
c0012599:	e8 9f 7b 00 00       	call   c001a13d <Krnl::panic(char const*)>
c001259e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00125a1:	83 c4 10             	add    esp,0x10
c00125a4:	e9 67 ff ff ff       	jmp    c0012510 <VAS::scanForEviction()+0x10>
c00125a9:	83 ec 08             	sub    esp,0x8
c00125ac:	53                   	push   ebx
c00125ad:	68 a4 ab 02 c0       	push   0xc002aba4
c00125b2:	e8 ba 02 00 00       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c00125b7:	58                   	pop    eax
c00125b8:	5a                   	pop    edx
c00125b9:	ff 76 08             	push   DWORD PTR [esi+0x8]
c00125bc:	56                   	push   esi
c00125bd:	e8 ae fc ff ff       	call   c0012270 <VAS::evict(unsigned long)>
c00125c2:	59                   	pop    ecx
c00125c3:	5b                   	pop    ebx
c00125c4:	ff 76 08             	push   DWORD PTR [esi+0x8]
c00125c7:	68 b8 ab 02 c0       	push   0xc002abb8
c00125cc:	e8 a0 02 00 00       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c00125d1:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c00125d8:	89 f8                	mov    eax,edi
c00125da:	83 c4 1c             	add    esp,0x1c
c00125dd:	25 00 f0 ff ff       	and    eax,0xfffff000
c00125e2:	5b                   	pop    ebx
c00125e3:	5e                   	pop    esi
c00125e4:	5f                   	pop    edi
c00125e5:	5d                   	pop    ebp
c00125e6:	c3                   	ret    

c00125e7 <mapVASFirstTime>:
c00125e7:	55                   	push   ebp
c00125e8:	57                   	push   edi
c00125e9:	56                   	push   esi
c00125ea:	53                   	push   ebx
c00125eb:	83 ec 0c             	sub    esp,0xc
c00125ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00125f3:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00125f6:	4a                   	dec    edx
c00125f7:	0f 84 fe 00 00 00    	je     c00126fb <mapVASFirstTime+0x114>
c00125fd:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012600:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012603:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012608:	c1 e5 15             	shl    ebp,0x15
c001260b:	bf 00 90 e7 01       	mov    edi,0x1e79000
c0012610:	8b b2 32 05 00 00    	mov    esi,DWORD PTR [edx+0x532]
c0012616:	29 eb                	sub    ebx,ebp
c0012618:	29 ef                	sub    edi,ebp
c001261a:	83 ec 08             	sub    esp,0x8
c001261d:	53                   	push   ebx
c001261e:	68 e4 ab 02 c0       	push   0xc002abe4
c0012623:	e8 49 02 00 00       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c0012628:	e8 e8 d5 ff ff       	call   c000fc15 <Phys::allocatePage()>
c001262d:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c0012634:	6a 01                	push   0x1
c0012636:	53                   	push   ebx
c0012637:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001263d:	50                   	push   eax
c001263e:	56                   	push   esi
c001263f:	e8 f8 f7 ff ff       	call   c0011e3c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012644:	83 c4 20             	add    esp,0x20
c0012647:	39 fb                	cmp    ebx,edi
c0012649:	75 cf                	jne    c001261a <mapVASFirstTime+0x33>
c001264b:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c0012650:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c0012655:	29 eb                	sub    ebx,ebp
c0012657:	29 ef                	sub    edi,ebp
c0012659:	83 ec 08             	sub    esp,0x8
c001265c:	53                   	push   ebx
c001265d:	68 00 ac 02 c0       	push   0xc002ac00
c0012662:	e8 0a 02 00 00       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c0012667:	58                   	pop    eax
c0012668:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c001266c:	5a                   	pop    edx
c001266d:	19 c0                	sbb    eax,eax
c001266f:	83 e0 04             	and    eax,0x4
c0012672:	05 03 04 00 00       	add    eax,0x403
c0012677:	50                   	push   eax
c0012678:	68 25 ab 02 c0       	push   0xc002ab25
c001267d:	e8 ef 01 00 00       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c0012682:	e8 8e d5 ff ff       	call   c000fc15 <Phys::allocatePage()>
c0012687:	59                   	pop    ecx
c0012688:	89 c5                	mov    ebp,eax
c001268a:	58                   	pop    eax
c001268b:	55                   	push   ebp
c001268c:	68 14 ac 02 c0       	push   0xc002ac14
c0012691:	e8 db 01 00 00       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c0012696:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c001269a:	19 d2                	sbb    edx,edx
c001269c:	83 e2 04             	and    edx,0x4
c001269f:	81 c2 03 04 00 00    	add    edx,0x403
c00126a5:	89 14 24             	mov    DWORD PTR [esp],edx
c00126a8:	6a 01                	push   0x1
c00126aa:	53                   	push   ebx
c00126ab:	55                   	push   ebp
c00126ac:	56                   	push   esi
c00126ad:	e8 8a f7 ff ff       	call   c0011e3c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00126b2:	83 c4 18             	add    esp,0x18
c00126b5:	53                   	push   ebx
c00126b6:	56                   	push   esi
c00126b7:	e8 f4 f0 ff ff       	call   c00117b0 <VAS::getPageTableEntry(unsigned long)>
c00126bc:	5a                   	pop    edx
c00126bd:	59                   	pop    ecx
c00126be:	ff 30                	push   DWORD PTR [eax]
c00126c0:	68 30 ac 02 c0       	push   0xc002ac30
c00126c5:	e8 a7 01 00 00       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c00126ca:	0f 20 d8             	mov    eax,cr3
c00126cd:	83 c4 0c             	add    esp,0xc
c00126d0:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00126d6:	56                   	push   esi
c00126d7:	50                   	push   eax
c00126d8:	68 33 ab 02 c0       	push   0xc002ab33
c00126dd:	e8 8f 01 00 00       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c00126e2:	83 c4 10             	add    esp,0x10
c00126e5:	39 df                	cmp    edi,ebx
c00126e7:	0f 85 6c ff ff ff    	jne    c0012659 <mapVASFirstTime+0x72>
c00126ed:	0f 20 d8             	mov    eax,cr3
c00126f0:	0f 22 d8             	mov    cr3,eax
c00126f3:	83 c4 0c             	add    esp,0xc
c00126f6:	5b                   	pop    ebx
c00126f7:	5e                   	pop    esi
c00126f8:	5f                   	pop    edi
c00126f9:	5d                   	pop    ebp
c00126fa:	c3                   	ret    
c00126fb:	83 ec 0c             	sub    esp,0xc
c00126fe:	68 cb ab 02 c0       	push   0xc002abcb
c0012703:	e8 69 01 00 00       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c0012708:	83 c4 10             	add    esp,0x10
c001270b:	83 c4 0c             	add    esp,0xc
c001270e:	5b                   	pop    ebx
c001270f:	5e                   	pop    esi
c0012710:	5f                   	pop    edi
c0012711:	5d                   	pop    ebp
c0012712:	c3                   	ret    

c0012713 <__cxa_atexit>:
c0012713:	31 c0                	xor    eax,eax
c0012715:	c3                   	ret    

c0012716 <__cxa_finalize>:
c0012716:	c3                   	ret    

c0012717 <__stack_chk_fail>:
c0012717:	55                   	push   ebp
c0012718:	89 e5                	mov    ebp,esp
c001271a:	83 ec 14             	sub    esp,0x14
c001271d:	68 3b ac 02 c0       	push   0xc002ac3b
c0012722:	e8 4a 01 00 00       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c0012727:	58                   	pop    eax
c0012728:	5a                   	pop    edx
c0012729:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001272c:	68 8b ac 02 c0       	push   0xc002ac8b
c0012731:	e8 3b 01 00 00       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c0012736:	59                   	pop    ecx
c0012737:	58                   	pop    eax
c0012738:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001273b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001273e:	68 8b ac 02 c0       	push   0xc002ac8b
c0012743:	e8 29 01 00 00       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c0012748:	5a                   	pop    edx
c0012749:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001274c:	59                   	pop    ecx
c001274d:	8b 00                	mov    eax,DWORD PTR [eax]
c001274f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012752:	68 8b ac 02 c0       	push   0xc002ac8b
c0012757:	e8 15 01 00 00       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c001275c:	5a                   	pop    edx
c001275d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012760:	59                   	pop    ecx
c0012761:	8b 00                	mov    eax,DWORD PTR [eax]
c0012763:	8b 00                	mov    eax,DWORD PTR [eax]
c0012765:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012768:	68 8b ac 02 c0       	push   0xc002ac8b
c001276d:	e8 ff 00 00 00       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c0012772:	c7 04 24 93 ac 02 c0 	mov    DWORD PTR [esp],0xc002ac93
c0012779:	e8 bf 79 00 00       	call   c001a13d <Krnl::panic(char const*)>
c001277e:	83 c4 10             	add    esp,0x10
c0012781:	c9                   	leave  
c0012782:	c3                   	ret    

c0012783 <__cxa_pure_virtual>:
c0012783:	83 ec 18             	sub    esp,0x18
c0012786:	68 ab ac 02 c0       	push   0xc002acab
c001278b:	e8 ad 79 00 00       	call   c001a13d <Krnl::panic(char const*)>
c0012790:	83 c4 1c             	add    esp,0x1c
c0012793:	c3                   	ret    

c0012794 <operator new[](unsigned long)>:
c0012794:	e9 80 d0 ff ff       	jmp    c000f819 <malloc>

c0012799 <operator delete(void*, unsigned long)>:
c0012799:	e9 9b d0 ff ff       	jmp    c000f839 <rfree>

c001279e <operator delete[](void*)>:
c001279e:	e9 96 d0 ff ff       	jmp    c000f839 <rfree>

c00127a3 <operator delete[](void*, unsigned long)>:
c00127a3:	e9 91 d0 ff ff       	jmp    c000f839 <rfree>

c00127a8 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c00127a8:	55                   	push   ebp
c00127a9:	b9 11 00 00 00       	mov    ecx,0x11
c00127ae:	57                   	push   edi
c00127af:	56                   	push   esi
c00127b0:	be 9e a6 02 c0       	mov    esi,0xc002a69e
c00127b5:	53                   	push   ebx
c00127b6:	83 ec 20             	sub    esp,0x20
c00127b9:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00127bd:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00127c1:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00127c5:	fc                   	cld    
c00127c6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00127c8:	89 ee                	mov    esi,ebp
c00127ca:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00127ce:	eb 02                	jmp    c00127d2 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c00127d0:	89 c6                	mov    esi,eax
c00127d2:	31 d2                	xor    edx,edx
c00127d4:	41                   	inc    ecx
c00127d5:	89 f0                	mov    eax,esi
c00127d7:	f7 f3                	div    ebx
c00127d9:	39 de                	cmp    esi,ebx
c00127db:	73 f3                	jae    c00127d0 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c00127dd:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00127e0:	eb 02                	jmp    c00127e4 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c00127e2:	89 c5                	mov    ebp,eax
c00127e4:	31 d2                	xor    edx,edx
c00127e6:	49                   	dec    ecx
c00127e7:	89 e8                	mov    eax,ebp
c00127e9:	f7 f3                	div    ebx
c00127eb:	39 dd                	cmp    ebp,ebx
c00127ed:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c00127f1:	88 11                	mov    BYTE PTR [ecx],dl
c00127f3:	73 ed                	jae    c00127e2 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c00127f5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00127f9:	83 c4 20             	add    esp,0x20
c00127fc:	5b                   	pop    ebx
c00127fd:	5e                   	pop    esi
c00127fe:	5f                   	pop    edi
c00127ff:	5d                   	pop    ebp
c0012800:	c3                   	ret    

c0012801 <Dbg::logc(char)>:
c0012801:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012805:	ba fd 03 00 00       	mov    edx,0x3fd
c001280a:	ec                   	in     al,dx
c001280b:	a8 20                	test   al,0x20
c001280d:	74 fb                	je     c001280a <Dbg::logc(char)+0x9>
c001280f:	ba f8 03 00 00       	mov    edx,0x3f8
c0012814:	88 c8                	mov    al,cl
c0012816:	ee                   	out    dx,al
c0012817:	c3                   	ret    

c0012818 <Dbg::logs(char*)>:
c0012818:	53                   	push   ebx
c0012819:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001281d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012820:	84 c0                	test   al,al
c0012822:	74 0f                	je     c0012833 <Dbg::logs(char*)+0x1b>
c0012824:	50                   	push   eax
c0012825:	43                   	inc    ebx
c0012826:	e8 d6 ff ff ff       	call   c0012801 <Dbg::logc(char)>
c001282b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001282e:	5a                   	pop    edx
c001282f:	84 c0                	test   al,al
c0012831:	75 f1                	jne    c0012824 <Dbg::logs(char*)+0xc>
c0012833:	5b                   	pop    ebx
c0012834:	c3                   	ret    

c0012835 <Dbg::logWriteInt(unsigned int)>:
c0012835:	83 ec 10             	sub    esp,0x10
c0012838:	6a 0a                	push   0xa
c001283a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001283e:	50                   	push   eax
c001283f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012843:	e8 60 ff ff ff       	call   c00127a8 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012848:	50                   	push   eax
c0012849:	e8 ca ff ff ff       	call   c0012818 <Dbg::logs(char*)>
c001284e:	83 c4 20             	add    esp,0x20
c0012851:	c3                   	ret    

c0012852 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012852:	83 ec 10             	sub    esp,0x10
c0012855:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012859:	8d 44 24 08          	lea    eax,[esp+0x8]
c001285d:	50                   	push   eax
c001285e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012862:	e8 41 ff ff ff       	call   c00127a8 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012867:	50                   	push   eax
c0012868:	e8 ab ff ff ff       	call   c0012818 <Dbg::logs(char*)>
c001286d:	83 c4 20             	add    esp,0x20
c0012870:	c3                   	ret    

c0012871 <Dbg::kprintf(char const*, ...)>:
c0012871:	55                   	push   ebp
c0012872:	57                   	push   edi
c0012873:	56                   	push   esi
c0012874:	53                   	push   ebx
c0012875:	83 ec 0c             	sub    esp,0xc
c0012878:	8d 44 24 24          	lea    eax,[esp+0x24]
c001287c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012880:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012884:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012887:	84 c0                	test   al,al
c0012889:	74 4a                	je     c00128d5 <Dbg::kprintf(char const*, ...)+0x64>
c001288b:	31 db                	xor    ebx,ebx
c001288d:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012890:	3c 25                	cmp    al,0x25
c0012892:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012895:	0f 85 e4 00 00 00    	jne    c001297f <Dbg::kprintf(char const*, ...)+0x10e>
c001289b:	83 c3 02             	add    ebx,0x2
c001289e:	8a 07                	mov    al,BYTE PTR [edi]
c00128a0:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c00128a3:	83 e8 25             	sub    eax,0x25
c00128a6:	3c 53                	cmp    al,0x53
c00128a8:	0f 87 ba 00 00 00    	ja     c0012968 <Dbg::kprintf(char const*, ...)+0xf7>
c00128ae:	0f b6 c0             	movzx  eax,al
c00128b1:	ff 24 85 c0 ac 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd5340]
c00128b8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00128bc:	89 c8                	mov    eax,ecx
c00128be:	83 c1 04             	add    ecx,0x4
c00128c1:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00128c5:	ff 30                	push   DWORD PTR [eax]
c00128c7:	e8 69 ff ff ff       	call   c0012835 <Dbg::logWriteInt(unsigned int)>
c00128cc:	5f                   	pop    edi
c00128cd:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00128d1:	84 c0                	test   al,al
c00128d3:	75 b8                	jne    c001288d <Dbg::kprintf(char const*, ...)+0x1c>
c00128d5:	83 c4 0c             	add    esp,0xc
c00128d8:	5b                   	pop    ebx
c00128d9:	5e                   	pop    esi
c00128da:	5f                   	pop    edi
c00128db:	5d                   	pop    ebp
c00128dc:	c3                   	ret    
c00128dd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00128e1:	89 c8                	mov    eax,ecx
c00128e3:	83 c1 04             	add    ecx,0x4
c00128e6:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00128ea:	ff 30                	push   DWORD PTR [eax]
c00128ec:	e8 27 ff ff ff       	call   c0012818 <Dbg::logs(char*)>
c00128f1:	58                   	pop    eax
c00128f2:	eb d9                	jmp    c00128cd <Dbg::kprintf(char const*, ...)+0x5c>
c00128f4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00128f8:	89 d0                	mov    eax,edx
c00128fa:	83 c2 04             	add    edx,0x4
c00128fd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012901:	ff 30                	push   DWORD PTR [eax]
c0012903:	e8 2d ff ff ff       	call   c0012835 <Dbg::logWriteInt(unsigned int)>
c0012908:	58                   	pop    eax
c0012909:	eb c2                	jmp    c00128cd <Dbg::kprintf(char const*, ...)+0x5c>
c001290b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001290f:	89 d0                	mov    eax,edx
c0012911:	83 c2 04             	add    edx,0x4
c0012914:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012917:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001291b:	50                   	push   eax
c001291c:	e8 e0 fe ff ff       	call   c0012801 <Dbg::logc(char)>
c0012921:	58                   	pop    eax
c0012922:	eb a9                	jmp    c00128cd <Dbg::kprintf(char const*, ...)+0x5c>
c0012924:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012928:	89 c8                	mov    eax,ecx
c001292a:	83 c1 04             	add    ecx,0x4
c001292d:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012931:	6a 10                	push   0x10
c0012933:	ff 30                	push   DWORD PTR [eax]
c0012935:	e8 18 ff ff ff       	call   c0012852 <Dbg::logWriteIntBase(unsigned int, int)>
c001293a:	59                   	pop    ecx
c001293b:	5f                   	pop    edi
c001293c:	eb 8f                	jmp    c00128cd <Dbg::kprintf(char const*, ...)+0x5c>
c001293e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012942:	89 d0                	mov    eax,edx
c0012944:	83 c2 08             	add    edx,0x8
c0012947:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001294b:	6a 10                	push   0x10
c001294d:	ff 30                	push   DWORD PTR [eax]
c001294f:	e8 fe fe ff ff       	call   c0012852 <Dbg::logWriteIntBase(unsigned int, int)>
c0012954:	58                   	pop    eax
c0012955:	5a                   	pop    edx
c0012956:	e9 72 ff ff ff       	jmp    c00128cd <Dbg::kprintf(char const*, ...)+0x5c>
c001295b:	6a 25                	push   0x25
c001295d:	e8 9f fe ff ff       	call   c0012801 <Dbg::logc(char)>
c0012962:	58                   	pop    eax
c0012963:	e9 65 ff ff ff       	jmp    c00128cd <Dbg::kprintf(char const*, ...)+0x5c>
c0012968:	6a 25                	push   0x25
c001296a:	e8 92 fe ff ff       	call   c0012801 <Dbg::logc(char)>
c001296f:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012972:	50                   	push   eax
c0012973:	e8 89 fe ff ff       	call   c0012801 <Dbg::logc(char)>
c0012978:	5a                   	pop    edx
c0012979:	59                   	pop    ecx
c001297a:	e9 4e ff ff ff       	jmp    c00128cd <Dbg::kprintf(char const*, ...)+0x5c>
c001297f:	50                   	push   eax
c0012980:	89 eb                	mov    ebx,ebp
c0012982:	e8 7a fe ff ff       	call   c0012801 <Dbg::logc(char)>
c0012987:	89 fd                	mov    ebp,edi
c0012989:	58                   	pop    eax
c001298a:	e9 3e ff ff ff       	jmp    c00128cd <Dbg::kprintf(char const*, ...)+0x5c>
c001298f:	90                   	nop

c0012990 <File::read(unsigned long long, void*, int*)>:
c0012990:	53                   	push   ebx
c0012991:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012995:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012999:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00129a0:	3c 19                	cmp    al,0x19
c00129a2:	77 35                	ja     c00129d9 <File::read(unsigned long long, void*, int*)+0x49>
c00129a4:	8b 04 85 20 e8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd17e0]
c00129ab:	85 c0                	test   eax,eax
c00129ad:	74 2a                	je     c00129d9 <File::read(unsigned long long, void*, int*)+0x49>
c00129af:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00129b5:	85 c0                	test   eax,eax
c00129b7:	74 20                	je     c00129d9 <File::read(unsigned long long, void*, int*)+0x49>
c00129b9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00129bd:	74 21                	je     c00129e0 <File::read(unsigned long long, void*, int*)+0x50>
c00129bf:	8b 08                	mov    ecx,DWORD PTR [eax]
c00129c1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00129c5:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00129cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00129cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00129d3:	5b                   	pop    ebx
c00129d4:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c00129d7:	ff e0                	jmp    eax
c00129d9:	b8 0b 00 00 00       	mov    eax,0xb
c00129de:	eb 05                	jmp    c00129e5 <File::read(unsigned long long, void*, int*)+0x55>
c00129e0:	b8 05 00 00 00       	mov    eax,0x5
c00129e5:	5b                   	pop    ebx
c00129e6:	c3                   	ret    
c00129e7:	90                   	nop

c00129e8 <File::write(unsigned long long, void*, int*)>:
c00129e8:	53                   	push   ebx
c00129e9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00129ed:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00129f1:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00129f8:	3c 19                	cmp    al,0x19
c00129fa:	77 35                	ja     c0012a31 <File::write(unsigned long long, void*, int*)+0x49>
c00129fc:	8b 04 85 20 e8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd17e0]
c0012a03:	85 c0                	test   eax,eax
c0012a05:	74 2a                	je     c0012a31 <File::write(unsigned long long, void*, int*)+0x49>
c0012a07:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012a0d:	85 c0                	test   eax,eax
c0012a0f:	74 20                	je     c0012a31 <File::write(unsigned long long, void*, int*)+0x49>
c0012a11:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012a15:	74 21                	je     c0012a38 <File::write(unsigned long long, void*, int*)+0x50>
c0012a17:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012a19:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012a1d:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012a23:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012a27:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012a2b:	5b                   	pop    ebx
c0012a2c:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012a2f:	ff e0                	jmp    eax
c0012a31:	b8 0b 00 00 00       	mov    eax,0xb
c0012a36:	eb 05                	jmp    c0012a3d <File::write(unsigned long long, void*, int*)+0x55>
c0012a38:	b8 05 00 00 00       	mov    eax,0x5
c0012a3d:	5b                   	pop    ebx
c0012a3e:	c3                   	ret    
c0012a3f:	90                   	nop

c0012a40 <Directory::read(unsigned long long, void*, int*)>:
c0012a40:	53                   	push   ebx
c0012a41:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012a45:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012a49:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012a50:	3c 19                	cmp    al,0x19
c0012a52:	77 35                	ja     c0012a89 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012a54:	8b 04 85 20 e8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd17e0]
c0012a5b:	85 c0                	test   eax,eax
c0012a5d:	74 2a                	je     c0012a89 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012a5f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012a65:	85 c0                	test   eax,eax
c0012a67:	74 20                	je     c0012a89 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012a69:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012a6d:	74 21                	je     c0012a90 <Directory::read(unsigned long long, void*, int*)+0x50>
c0012a6f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012a71:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012a75:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012a7b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012a7f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012a83:	5b                   	pop    ebx
c0012a84:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012a87:	ff e0                	jmp    eax
c0012a89:	b8 0b 00 00 00       	mov    eax,0xb
c0012a8e:	eb 05                	jmp    c0012a95 <Directory::read(unsigned long long, void*, int*)+0x55>
c0012a90:	b8 05 00 00 00       	mov    eax,0x5
c0012a95:	5b                   	pop    ebx
c0012a96:	c3                   	ret    
c0012a97:	90                   	nop

c0012a98 <Directory::write(unsigned long long, void*, int*)>:
c0012a98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a9c:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012aa3:	b8 0b 00 00 00       	mov    eax,0xb
c0012aa8:	80 fa 19             	cmp    dl,0x19
c0012aab:	77 18                	ja     c0012ac5 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012aad:	8b 14 95 20 e8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd17e0]
c0012ab4:	85 d2                	test   edx,edx
c0012ab6:	74 0d                	je     c0012ac5 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012ab8:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012abf:	19 c0                	sbb    eax,eax
c0012ac1:	83 e0 0a             	and    eax,0xa
c0012ac4:	40                   	inc    eax
c0012ac5:	c3                   	ret    

c0012ac6 <File::isAtty()>:
c0012ac6:	31 c0                	xor    eax,eax
c0012ac8:	c3                   	ret    
c0012ac9:	90                   	nop

c0012aca <Directory::isAtty()>:
c0012aca:	31 c0                	xor    eax,eax
c0012acc:	c3                   	ret    
c0012acd:	90                   	nop

c0012ace <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0012ace:	b8 0a 00 00 00       	mov    eax,0xa
c0012ad3:	c3                   	ret    

c0012ad4 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012ad4:	b8 0a 00 00 00       	mov    eax,0xa
c0012ad9:	c3                   	ret    

c0012ada <Filesystem::allocateSwapfile(char const*, int)>:
c0012ada:	31 c0                	xor    eax,eax
c0012adc:	31 d2                	xor    edx,edx
c0012ade:	c3                   	ret    
c0012adf:	90                   	nop

c0012ae0 <File::~File()>:
c0012ae0:	83 ec 0c             	sub    esp,0xc
c0012ae3:	ba 80 ae 02 c0       	mov    edx,0xc002ae80
c0012ae8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012aec:	89 10                	mov    DWORD PTR [eax],edx
c0012aee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012af2:	83 ec 0c             	sub    esp,0xc
c0012af5:	50                   	push   eax
c0012af6:	e8 43 e7 ff ff       	call   c001123e <UnixFile::~UnixFile()>
c0012afb:	83 c4 10             	add    esp,0x10
c0012afe:	90                   	nop
c0012aff:	83 c4 0c             	add    esp,0xc
c0012b02:	c3                   	ret    
c0012b03:	90                   	nop

c0012b04 <File::~File()>:
c0012b04:	83 ec 0c             	sub    esp,0xc
c0012b07:	83 ec 0c             	sub    esp,0xc
c0012b0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b0e:	e8 cd ff ff ff       	call   c0012ae0 <File::~File()>
c0012b13:	83 c4 10             	add    esp,0x10
c0012b16:	83 ec 08             	sub    esp,0x8
c0012b19:	68 14 01 00 00       	push   0x114
c0012b1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b22:	e8 72 fc ff ff       	call   c0012799 <operator delete(void*, unsigned long)>
c0012b27:	83 c4 10             	add    esp,0x10
c0012b2a:	83 c4 0c             	add    esp,0xc
c0012b2d:	c3                   	ret    

c0012b2e <Directory::~Directory()>:
c0012b2e:	83 ec 0c             	sub    esp,0xc
c0012b31:	ba 9c ae 02 c0       	mov    edx,0xc002ae9c
c0012b36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b3a:	89 10                	mov    DWORD PTR [eax],edx
c0012b3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b40:	83 ec 0c             	sub    esp,0xc
c0012b43:	50                   	push   eax
c0012b44:	e8 f5 e6 ff ff       	call   c001123e <UnixFile::~UnixFile()>
c0012b49:	83 c4 10             	add    esp,0x10
c0012b4c:	90                   	nop
c0012b4d:	83 c4 0c             	add    esp,0xc
c0012b50:	c3                   	ret    
c0012b51:	90                   	nop

c0012b52 <Directory::~Directory()>:
c0012b52:	83 ec 0c             	sub    esp,0xc
c0012b55:	83 ec 0c             	sub    esp,0xc
c0012b58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b5c:	e8 cd ff ff ff       	call   c0012b2e <Directory::~Directory()>
c0012b61:	83 c4 10             	add    esp,0x10
c0012b64:	83 ec 08             	sub    esp,0x8
c0012b67:	68 14 01 00 00       	push   0x114
c0012b6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b70:	e8 24 fc ff ff       	call   c0012799 <operator delete(void*, unsigned long)>
c0012b75:	83 c4 10             	add    esp,0x10
c0012b78:	83 c4 0c             	add    esp,0xc
c0012b7b:	c3                   	ret    

c0012b7c <Filesystem::Filesystem()>:
c0012b7c:	ba 18 ae 02 c0       	mov    edx,0xc002ae18
c0012b81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b85:	89 10                	mov    DWORD PTR [eax],edx
c0012b87:	8b 15 94 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e394
c0012b8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b91:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012b94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b98:	a3 94 e3 02 c0       	mov    ds:0xc002e394,eax
c0012b9d:	90                   	nop
c0012b9e:	c3                   	ret    
c0012b9f:	90                   	nop

c0012ba0 <Filesystem::~Filesystem()>:
c0012ba0:	ba 18 ae 02 c0       	mov    edx,0xc002ae18
c0012ba5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012ba9:	89 10                	mov    DWORD PTR [eax],edx
c0012bab:	90                   	nop
c0012bac:	c3                   	ret    
c0012bad:	90                   	nop

c0012bae <Filesystem::~Filesystem()>:
c0012bae:	83 ec 0c             	sub    esp,0xc
c0012bb1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012bb5:	e8 e6 ff ff ff       	call   c0012ba0 <Filesystem::~Filesystem()>
c0012bba:	83 c4 04             	add    esp,0x4
c0012bbd:	83 ec 08             	sub    esp,0x8
c0012bc0:	6a 08                	push   0x8
c0012bc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012bc6:	e8 ce fb ff ff       	call   c0012799 <operator delete(void*, unsigned long)>
c0012bcb:	83 c4 10             	add    esp,0x10
c0012bce:	83 c4 0c             	add    esp,0xc
c0012bd1:	c3                   	ret    

c0012bd2 <Fs::getcwd(Process*, char*, int)>:
c0012bd2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012bd6:	31 c0                	xor    eax,eax
c0012bd8:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012bdb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012bdf:	7d 15                	jge    c0012bf6 <Fs::getcwd(Process*, char*, int)+0x24>
c0012be1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012be5:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012bec:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012bef:	84 c9                	test   cl,cl
c0012bf1:	74 06                	je     c0012bf9 <Fs::getcwd(Process*, char*, int)+0x27>
c0012bf3:	40                   	inc    eax
c0012bf4:	eb e2                	jmp    c0012bd8 <Fs::getcwd(Process*, char*, int)+0x6>
c0012bf6:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012bf9:	31 c0                	xor    eax,eax
c0012bfb:	c3                   	ret    

c0012bfc <Fs::initVFS()>:
c0012bfc:	83 ec 18             	sub    esp,0x18
c0012bff:	6a 08                	push   0x8
c0012c01:	e8 13 cc ff ff       	call   c000f819 <malloc>
c0012c06:	89 04 24             	mov    DWORD PTR [esp],eax
c0012c09:	e8 0a e1 00 00       	call   c0020d18 <FAT::FAT()>
c0012c0e:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012c15:	e8 ff cb ff ff       	call   c000f819 <malloc>
c0012c1a:	89 04 24             	mov    DWORD PTR [esp],eax
c0012c1d:	e8 02 f3 00 00       	call   c0021f24 <ISO9660::ISO9660()>
c0012c22:	83 c4 1c             	add    esp,0x1c
c0012c25:	c3                   	ret    

c0012c26 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0012c26:	55                   	push   ebp
c0012c27:	57                   	push   edi
c0012c28:	56                   	push   esi
c0012c29:	53                   	push   ebx
c0012c2a:	81 ec 10 04 00 00    	sub    esp,0x410
c0012c30:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012c37:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012c3e:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012c45:	68 00 04 00 00       	push   0x400
c0012c4a:	6a 00                	push   0x0
c0012c4c:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012c50:	56                   	push   esi
c0012c51:	e8 fa da fe ff       	call   c0000750 <memset>
c0012c56:	83 c4 10             	add    esp,0x10
c0012c59:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012c5d:	75 0b                	jne    c0012c6a <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0012c5f:	50                   	push   eax
c0012c60:	50                   	push   eax
c0012c61:	57                   	push   edi
c0012c62:	56                   	push   esi
c0012c63:	e8 a4 db fe ff       	call   c000080c <strcpy>
c0012c68:	eb 41                	jmp    c0012cab <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0012c6a:	8a 07                	mov    al,BYTE PTR [edi]
c0012c6c:	3c 5c                	cmp    al,0x5c
c0012c6e:	74 04                	je     c0012c74 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0012c70:	3c 2f                	cmp    al,0x2f
c0012c72:	75 18                	jne    c0012c8c <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0012c74:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012c77:	3c 60                	cmp    al,0x60
c0012c79:	7e 03                	jle    c0012c7e <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0012c7b:	83 e8 20             	sub    eax,0x20
c0012c7e:	88 04 24             	mov    BYTE PTR [esp],al
c0012c81:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012c88:	50                   	push   eax
c0012c89:	50                   	push   eax
c0012c8a:	eb 18                	jmp    c0012ca4 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0012c8c:	50                   	push   eax
c0012c8d:	50                   	push   eax
c0012c8e:	55                   	push   ebp
c0012c8f:	56                   	push   esi
c0012c90:	e8 77 db fe ff       	call   c000080c <strcpy>
c0012c95:	5a                   	pop    edx
c0012c96:	59                   	pop    ecx
c0012c97:	68 c2 c3 02 c0       	push   0xc002c3c2
c0012c9c:	56                   	push   esi
c0012c9d:	e8 aa dc fe ff       	call   c000094c <strcat>
c0012ca2:	5d                   	pop    ebp
c0012ca3:	58                   	pop    eax
c0012ca4:	57                   	push   edi
c0012ca5:	56                   	push   esi
c0012ca6:	e8 a1 dc fe ff       	call   c000094c <strcat>
c0012cab:	83 c4 10             	add    esp,0x10
c0012cae:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012cb1:	3c 60                	cmp    al,0x60
c0012cb3:	7e 03                	jle    c0012cb8 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0012cb5:	83 e8 20             	sub    eax,0x20
c0012cb8:	88 04 24             	mov    BYTE PTR [esp],al
c0012cbb:	88 03                	mov    BYTE PTR [ebx],al
c0012cbd:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012cc4:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012cca:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012cce:	bf 03 00 00 00       	mov    edi,0x3
c0012cd3:	b8 03 00 00 00       	mov    eax,0x3
c0012cd8:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012cdb:	84 d2                	test   dl,dl
c0012cdd:	0f 84 91 00 00 00    	je     c0012d74 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0012ce3:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012ce6:	80 fa 5c             	cmp    dl,0x5c
c0012ce9:	74 05                	je     c0012cf0 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0012ceb:	80 fa 2f             	cmp    dl,0x2f
c0012cee:	75 12                	jne    c0012d02 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012cf0:	89 c5                	mov    ebp,eax
c0012cf2:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012cf7:	74 09                	je     c0012d02 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012cf9:	40                   	inc    eax
c0012cfa:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012cfe:	89 cf                	mov    edi,ecx
c0012d00:	eb d6                	jmp    c0012cd8 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0012d02:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012d07:	75 5b                	jne    c0012d64 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012d09:	80 fa 2e             	cmp    dl,0x2e
c0012d0c:	75 56                	jne    c0012d64 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012d0e:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012d12:	74 19                	je     c0012d2d <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0012d14:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012d19:	74 53                	je     c0012d6e <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012d1b:	89 f9                	mov    ecx,edi
c0012d1d:	41                   	inc    ecx
c0012d1e:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012d21:	80 fa 2f             	cmp    dl,0x2f
c0012d24:	74 f7                	je     c0012d1d <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012d26:	80 fa 5c             	cmp    dl,0x5c
c0012d29:	74 f2                	je     c0012d1d <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012d2b:	eb d1                	jmp    c0012cfe <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012d2d:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012d32:	74 3a                	je     c0012d6e <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012d34:	83 f8 03             	cmp    eax,0x3
c0012d37:	74 c5                	je     c0012cfe <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012d39:	41                   	inc    ecx
c0012d3a:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012d3d:	80 fa 2f             	cmp    dl,0x2f
c0012d40:	74 f7                	je     c0012d39 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012d42:	80 fa 5c             	cmp    dl,0x5c
c0012d45:	74 f2                	je     c0012d39 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012d47:	48                   	dec    eax
c0012d48:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012d4c:	75 06                	jne    c0012d54 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012d4e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012d52:	eb f3                	jmp    c0012d47 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0012d54:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012d58:	74 07                	je     c0012d61 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0012d5a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012d5e:	48                   	dec    eax
c0012d5f:	eb f3                	jmp    c0012d54 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012d61:	40                   	inc    eax
c0012d62:	eb 9a                	jmp    c0012cfe <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012d64:	80 fa 2f             	cmp    dl,0x2f
c0012d67:	74 95                	je     c0012cfe <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012d69:	80 fa 5c             	cmp    dl,0x5c
c0012d6c:	74 90                	je     c0012cfe <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012d6e:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012d71:	40                   	inc    eax
c0012d72:	eb 8a                	jmp    c0012cfe <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012d74:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012d78:	83 ec 0c             	sub    esp,0xc
c0012d7b:	53                   	push   ebx
c0012d7c:	e8 eb d9 fe ff       	call   c000076c <strlen>
c0012d81:	83 c4 10             	add    esp,0x10
c0012d84:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012d89:	75 26                	jne    c0012db1 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0012d8b:	83 ec 0c             	sub    esp,0xc
c0012d8e:	53                   	push   ebx
c0012d8f:	e8 d8 d9 fe ff       	call   c000076c <strlen>
c0012d94:	83 c4 10             	add    esp,0x10
c0012d97:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012d9c:	74 26                	je     c0012dc4 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0012d9e:	83 ec 0c             	sub    esp,0xc
c0012da1:	53                   	push   ebx
c0012da2:	e8 c5 d9 fe ff       	call   c000076c <strlen>
c0012da7:	83 c4 10             	add    esp,0x10
c0012daa:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012daf:	eb c7                	jmp    c0012d78 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0012db1:	83 ec 0c             	sub    esp,0xc
c0012db4:	53                   	push   ebx
c0012db5:	e8 b2 d9 fe ff       	call   c000076c <strlen>
c0012dba:	83 c4 10             	add    esp,0x10
c0012dbd:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012dc2:	74 c7                	je     c0012d8b <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0012dc4:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012dca:	5b                   	pop    ebx
c0012dcb:	5e                   	pop    esi
c0012dcc:	5f                   	pop    edi
c0012dcd:	5d                   	pop    ebp
c0012dce:	c3                   	ret    
c0012dcf:	90                   	nop

c0012dd0 <File::File(char const*, Process*)>:
c0012dd0:	83 ec 0c             	sub    esp,0xc
c0012dd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012dd7:	83 ec 08             	sub    esp,0x8
c0012dda:	6a 00                	push   0x0
c0012ddc:	50                   	push   eax
c0012ddd:	e8 7a e2 ff ff       	call   c001105c <UnixFile::UnixFile(int)>
c0012de2:	83 c4 10             	add    esp,0x10
c0012de5:	ba 80 ae 02 c0       	mov    edx,0xc002ae80
c0012dea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012dee:	89 10                	mov    DWORD PTR [eax],edx
c0012df0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012df4:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012dfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012dfe:	83 c0 0d             	add    eax,0xd
c0012e01:	83 ec 04             	sub    esp,0x4
c0012e04:	52                   	push   edx
c0012e05:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e09:	50                   	push   eax
c0012e0a:	e8 17 fe ff ff       	call   c0012c26 <Fs::standardiseFiles(char*, char const*, char const*)>
c0012e0f:	83 c4 10             	add    esp,0x10
c0012e12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e16:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012e19:	8d 50 bf             	lea    edx,[eax-0x41]
c0012e1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e20:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012e26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e2a:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012e2e:	90                   	nop
c0012e2f:	83 c4 0c             	add    esp,0xc
c0012e32:	c3                   	ret    
c0012e33:	90                   	nop

c0012e34 <File::open(FileOpenMode)>:
c0012e34:	53                   	push   ebx
c0012e35:	b8 0b 00 00 00       	mov    eax,0xb
c0012e3a:	83 ec 08             	sub    esp,0x8
c0012e3d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012e41:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012e48:	80 fa 19             	cmp    dl,0x19
c0012e4b:	77 40                	ja     c0012e8d <File::open(FileOpenMode)+0x59>
c0012e4d:	8b 14 95 20 e8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd17e0]
c0012e54:	85 d2                	test   edx,edx
c0012e56:	74 35                	je     c0012e8d <File::open(FileOpenMode)+0x59>
c0012e58:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012e5e:	85 d2                	test   edx,edx
c0012e60:	74 2b                	je     c0012e8d <File::open(FileOpenMode)+0x59>
c0012e62:	b8 06 00 00 00       	mov    eax,0x6
c0012e67:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012e6b:	75 20                	jne    c0012e8d <File::open(FileOpenMode)+0x59>
c0012e6d:	8b 02                	mov    eax,DWORD PTR [edx]
c0012e6f:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012e75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012e79:	51                   	push   ecx
c0012e7a:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012e7d:	51                   	push   ecx
c0012e7e:	52                   	push   edx
c0012e7f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012e82:	83 c4 10             	add    esp,0x10
c0012e85:	85 c0                	test   eax,eax
c0012e87:	75 04                	jne    c0012e8d <File::open(FileOpenMode)+0x59>
c0012e89:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012e8d:	83 c4 08             	add    esp,0x8
c0012e90:	5b                   	pop    ebx
c0012e91:	c3                   	ret    

c0012e92 <File::close()>:
c0012e92:	53                   	push   ebx
c0012e93:	b8 0b 00 00 00       	mov    eax,0xb
c0012e98:	83 ec 08             	sub    esp,0x8
c0012e9b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012e9f:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012ea6:	80 fa 19             	cmp    dl,0x19
c0012ea9:	77 41                	ja     c0012eec <File::close()+0x5a>
c0012eab:	8b 1c 95 20 e8 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd17e0]
c0012eb2:	85 db                	test   ebx,ebx
c0012eb4:	74 36                	je     c0012eec <File::close()+0x5a>
c0012eb6:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012ebd:	74 2d                	je     c0012eec <File::close()+0x5a>
c0012ebf:	b8 05 00 00 00       	mov    eax,0x5
c0012ec4:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012ec8:	74 22                	je     c0012eec <File::close()+0x5a>
c0012eca:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012ece:	8b 04 95 20 e8 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd17e0]
c0012ed5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012edb:	53                   	push   ebx
c0012edc:	53                   	push   ebx
c0012edd:	8b 10                	mov    edx,DWORD PTR [eax]
c0012edf:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012ee5:	50                   	push   eax
c0012ee6:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012ee9:	83 c4 10             	add    esp,0x10
c0012eec:	83 c4 08             	add    esp,0x8
c0012eef:	5b                   	pop    ebx
c0012ef0:	c3                   	ret    
c0012ef1:	90                   	nop

c0012ef2 <File::seek(unsigned long long)>:
c0012ef2:	56                   	push   esi
c0012ef3:	53                   	push   ebx
c0012ef4:	b8 0b 00 00 00       	mov    eax,0xb
c0012ef9:	51                   	push   ecx
c0012efa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012efe:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012f02:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012f09:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012f0d:	80 fa 19             	cmp    dl,0x19
c0012f10:	77 31                	ja     c0012f43 <File::seek(unsigned long long)+0x51>
c0012f12:	8b 14 95 20 e8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd17e0]
c0012f19:	85 d2                	test   edx,edx
c0012f1b:	74 26                	je     c0012f43 <File::seek(unsigned long long)+0x51>
c0012f1d:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012f23:	85 d2                	test   edx,edx
c0012f25:	74 1c                	je     c0012f43 <File::seek(unsigned long long)+0x51>
c0012f27:	b8 05 00 00 00       	mov    eax,0x5
c0012f2c:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012f30:	74 11                	je     c0012f43 <File::seek(unsigned long long)+0x51>
c0012f32:	8b 02                	mov    eax,DWORD PTR [edx]
c0012f34:	53                   	push   ebx
c0012f35:	51                   	push   ecx
c0012f36:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012f3c:	52                   	push   edx
c0012f3d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012f40:	83 c4 10             	add    esp,0x10
c0012f43:	5a                   	pop    edx
c0012f44:	5b                   	pop    ebx
c0012f45:	5e                   	pop    esi
c0012f46:	c3                   	ret    
c0012f47:	90                   	nop

c0012f48 <File::tell(unsigned long long*)>:
c0012f48:	83 ec 0c             	sub    esp,0xc
c0012f4b:	b8 0b 00 00 00       	mov    eax,0xb
c0012f50:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012f54:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012f5b:	80 fa 19             	cmp    dl,0x19
c0012f5e:	77 34                	ja     c0012f94 <File::tell(unsigned long long*)+0x4c>
c0012f60:	8b 14 95 20 e8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd17e0]
c0012f67:	85 d2                	test   edx,edx
c0012f69:	74 29                	je     c0012f94 <File::tell(unsigned long long*)+0x4c>
c0012f6b:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012f71:	85 d2                	test   edx,edx
c0012f73:	74 1f                	je     c0012f94 <File::tell(unsigned long long*)+0x4c>
c0012f75:	b8 05 00 00 00       	mov    eax,0x5
c0012f7a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012f7e:	74 14                	je     c0012f94 <File::tell(unsigned long long*)+0x4c>
c0012f80:	50                   	push   eax
c0012f81:	8b 02                	mov    eax,DWORD PTR [edx]
c0012f83:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012f87:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012f8d:	52                   	push   edx
c0012f8e:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012f91:	83 c4 10             	add    esp,0x10
c0012f94:	83 c4 0c             	add    esp,0xc
c0012f97:	c3                   	ret    

c0012f98 <File::rewind()>:
c0012f98:	83 ec 10             	sub    esp,0x10
c0012f9b:	6a 00                	push   0x0
c0012f9d:	6a 00                	push   0x0
c0012f9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fa3:	e8 4a ff ff ff       	call   c0012ef2 <File::seek(unsigned long long)>
c0012fa8:	83 c4 1c             	add    esp,0x1c
c0012fab:	c3                   	ret    

c0012fac <File::unlink()>:
c0012fac:	83 ec 0c             	sub    esp,0xc
c0012faf:	b8 0b 00 00 00       	mov    eax,0xb
c0012fb4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012fb8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012fbf:	80 f9 19             	cmp    cl,0x19
c0012fc2:	77 2f                	ja     c0012ff3 <File::unlink()+0x47>
c0012fc4:	8b 0c 8d 20 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd17e0]
c0012fcb:	85 c9                	test   ecx,ecx
c0012fcd:	74 24                	je     c0012ff3 <File::unlink()+0x47>
c0012fcf:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012fd5:	85 c9                	test   ecx,ecx
c0012fd7:	74 1a                	je     c0012ff3 <File::unlink()+0x47>
c0012fd9:	b8 06 00 00 00       	mov    eax,0x6
c0012fde:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012fe2:	75 0f                	jne    c0012ff3 <File::unlink()+0x47>
c0012fe4:	83 c2 0d             	add    edx,0xd
c0012fe7:	50                   	push   eax
c0012fe8:	50                   	push   eax
c0012fe9:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012feb:	52                   	push   edx
c0012fec:	51                   	push   ecx
c0012fed:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012ff0:	83 c4 10             	add    esp,0x10
c0012ff3:	83 c4 0c             	add    esp,0xc
c0012ff6:	c3                   	ret    
c0012ff7:	90                   	nop

c0012ff8 <File::rename(char const*)>:
c0012ff8:	83 ec 0c             	sub    esp,0xc
c0012ffb:	b8 0b 00 00 00       	mov    eax,0xb
c0013000:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013004:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001300b:	80 f9 19             	cmp    cl,0x19
c001300e:	77 32                	ja     c0013042 <File::rename(char const*)+0x4a>
c0013010:	8b 0c 8d 20 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd17e0]
c0013017:	85 c9                	test   ecx,ecx
c0013019:	74 27                	je     c0013042 <File::rename(char const*)+0x4a>
c001301b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013021:	85 c9                	test   ecx,ecx
c0013023:	74 1d                	je     c0013042 <File::rename(char const*)+0x4a>
c0013025:	b8 06 00 00 00       	mov    eax,0x6
c001302a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001302e:	75 12                	jne    c0013042 <File::rename(char const*)+0x4a>
c0013030:	83 c2 0d             	add    edx,0xd
c0013033:	50                   	push   eax
c0013034:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013036:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001303a:	52                   	push   edx
c001303b:	51                   	push   ecx
c001303c:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001303f:	83 c4 10             	add    esp,0x10
c0013042:	83 c4 0c             	add    esp,0xc
c0013045:	c3                   	ret    

c0013046 <File::chfatattr(unsigned char, unsigned char)>:
c0013046:	57                   	push   edi
c0013047:	b8 0b 00 00 00       	mov    eax,0xb
c001304c:	56                   	push   esi
c001304d:	53                   	push   ebx
c001304e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013052:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013056:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001305d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013061:	80 f9 19             	cmp    cl,0x19
c0013064:	77 37                	ja     c001309d <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013066:	8b 0c 8d 20 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd17e0]
c001306d:	85 c9                	test   ecx,ecx
c001306f:	74 2c                	je     c001309d <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013071:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013077:	85 c9                	test   ecx,ecx
c0013079:	74 22                	je     c001309d <File::chfatattr(unsigned char, unsigned char)+0x57>
c001307b:	b8 06 00 00 00       	mov    eax,0x6
c0013080:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013084:	75 17                	jne    c001309d <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013086:	8b 39                	mov    edi,DWORD PTR [ecx]
c0013088:	89 f0                	mov    eax,esi
c001308a:	83 c2 0d             	add    edx,0xd
c001308d:	0f b6 f0             	movzx  esi,al
c0013090:	0f b6 db             	movzx  ebx,bl
c0013093:	56                   	push   esi
c0013094:	53                   	push   ebx
c0013095:	52                   	push   edx
c0013096:	51                   	push   ecx
c0013097:	ff 57 34             	call   DWORD PTR [edi+0x34]
c001309a:	83 c4 10             	add    esp,0x10
c001309d:	5b                   	pop    ebx
c001309e:	5e                   	pop    esi
c001309f:	5f                   	pop    edi
c00130a0:	c3                   	ret    
c00130a1:	90                   	nop

c00130a2 <File::exists()>:
c00130a2:	83 ec 0c             	sub    esp,0xc
c00130a5:	31 c0                	xor    eax,eax
c00130a7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00130ab:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00130b2:	80 f9 19             	cmp    cl,0x19
c00130b5:	77 24                	ja     c00130db <File::exists()+0x39>
c00130b7:	8b 0c 8d 20 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd17e0]
c00130be:	85 c9                	test   ecx,ecx
c00130c0:	74 19                	je     c00130db <File::exists()+0x39>
c00130c2:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00130c8:	85 c9                	test   ecx,ecx
c00130ca:	74 0f                	je     c00130db <File::exists()+0x39>
c00130cc:	83 c2 0d             	add    edx,0xd
c00130cf:	50                   	push   eax
c00130d0:	50                   	push   eax
c00130d1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00130d3:	52                   	push   edx
c00130d4:	51                   	push   ecx
c00130d5:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00130d8:	83 c4 10             	add    esp,0x10
c00130db:	83 c4 0c             	add    esp,0xc
c00130de:	c3                   	ret    
c00130df:	90                   	nop

c00130e0 <File::stat(unsigned long long*, bool*)>:
c00130e0:	56                   	push   esi
c00130e1:	53                   	push   ebx
c00130e2:	50                   	push   eax
c00130e3:	b8 0b 00 00 00       	mov    eax,0xb
c00130e8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00130ec:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00130f0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00130f7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00130fb:	80 f9 19             	cmp    cl,0x19
c00130fe:	77 3d                	ja     c001313d <File::stat(unsigned long long*, bool*)+0x5d>
c0013100:	8b 0c 8d 20 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd17e0]
c0013107:	85 c9                	test   ecx,ecx
c0013109:	74 32                	je     c001313d <File::stat(unsigned long long*, bool*)+0x5d>
c001310b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013111:	85 c9                	test   ecx,ecx
c0013113:	74 28                	je     c001313d <File::stat(unsigned long long*, bool*)+0x5d>
c0013115:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013117:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001311b:	74 13                	je     c0013130 <File::stat(unsigned long long*, bool*)+0x50>
c001311d:	83 ec 04             	sub    esp,0x4
c0013120:	56                   	push   esi
c0013121:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0013127:	51                   	push   ecx
c0013128:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c001312b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001312e:	eb 0a                	jmp    c001313a <File::stat(unsigned long long*, bool*)+0x5a>
c0013130:	53                   	push   ebx
c0013131:	83 c2 0d             	add    edx,0xd
c0013134:	56                   	push   esi
c0013135:	52                   	push   edx
c0013136:	51                   	push   ecx
c0013137:	ff 50 30             	call   DWORD PTR [eax+0x30]
c001313a:	83 c4 10             	add    esp,0x10
c001313d:	5a                   	pop    edx
c001313e:	5b                   	pop    ebx
c001313f:	5e                   	pop    esi
c0013140:	c3                   	ret    

c0013141 <Fs::setcwd(Process*, char*)>:
c0013141:	55                   	push   ebp
c0013142:	57                   	push   edi
c0013143:	56                   	push   esi
c0013144:	53                   	push   ebx
c0013145:	81 ec 20 02 00 00    	sub    esp,0x220
c001314b:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0013152:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0013158:	57                   	push   edi
c0013159:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0013160:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0013164:	56                   	push   esi
c0013165:	e8 bc fa ff ff       	call   c0012c26 <Fs::standardiseFiles(char*, char const*, char const*)>
c001316a:	89 34 24             	mov    DWORD PTR [esp],esi
c001316d:	e8 fa d5 fe ff       	call   c000076c <strlen>
c0013172:	83 c4 10             	add    esp,0x10
c0013175:	83 f8 02             	cmp    eax,0x2
c0013178:	77 17                	ja     c0013191 <Fs::setcwd(Process*, char*)+0x50>
c001317a:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c001317f:	83 e8 41             	sub    eax,0x41
c0013182:	83 f8 19             	cmp    eax,0x19
c0013185:	76 24                	jbe    c00131ab <Fs::setcwd(Process*, char*)+0x6a>
c0013187:	b8 03 00 00 00       	mov    eax,0x3
c001318c:	e9 e0 00 00 00       	jmp    c0013271 <Fs::setcwd(Process*, char*)+0x130>
c0013191:	83 ec 0c             	sub    esp,0xc
c0013194:	56                   	push   esi
c0013195:	e8 d2 d5 fe ff       	call   c000076c <strlen>
c001319a:	83 c4 10             	add    esp,0x10
c001319d:	83 f8 03             	cmp    eax,0x3
c00131a0:	75 34                	jne    c00131d6 <Fs::setcwd(Process*, char*)+0x95>
c00131a2:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c00131a7:	75 2d                	jne    c00131d6 <Fs::setcwd(Process*, char*)+0x95>
c00131a9:	eb cf                	jmp    c001317a <Fs::setcwd(Process*, char*)+0x39>
c00131ab:	8b 14 85 20 e8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd17e0]
c00131b2:	b8 05 00 00 00       	mov    eax,0x5
c00131b7:	85 d2                	test   edx,edx
c00131b9:	0f 84 b2 00 00 00    	je     c0013271 <Fs::setcwd(Process*, char*)+0x130>
c00131bf:	b8 06 00 00 00       	mov    eax,0x6
c00131c4:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00131cb:	0f 85 92 00 00 00    	jne    c0013263 <Fs::setcwd(Process*, char*)+0x122>
c00131d1:	e9 9b 00 00 00       	jmp    c0013271 <Fs::setcwd(Process*, char*)+0x130>
c00131d6:	83 ec 0c             	sub    esp,0xc
c00131d9:	68 14 01 00 00       	push   0x114
c00131de:	e8 36 c6 ff ff       	call   c000f819 <malloc>
c00131e3:	83 c4 0c             	add    esp,0xc
c00131e6:	89 c3                	mov    ebx,eax
c00131e8:	55                   	push   ebp
c00131e9:	56                   	push   esi
c00131ea:	50                   	push   eax
c00131eb:	e8 e0 fb ff ff       	call   c0012dd0 <File::File(char const*, Process*)>
c00131f0:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00131f5:	83 c4 0c             	add    esp,0xc
c00131f8:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00131fc:	50                   	push   eax
c00131fd:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013201:	50                   	push   eax
c0013202:	53                   	push   ebx
c0013203:	e8 d8 fe ff ff       	call   c00130e0 <File::stat(unsigned long long*, bool*)>
c0013208:	83 c4 10             	add    esp,0x10
c001320b:	83 f8 02             	cmp    eax,0x2
c001320e:	74 04                	je     c0013214 <Fs::setcwd(Process*, char*)+0xd3>
c0013210:	85 c0                	test   eax,eax
c0013212:	74 1c                	je     c0013230 <Fs::setcwd(Process*, char*)+0xef>
c0013214:	b8 01 00 00 00       	mov    eax,0x1
c0013219:	85 db                	test   ebx,ebx
c001321b:	74 54                	je     c0013271 <Fs::setcwd(Process*, char*)+0x130>
c001321d:	83 ec 0c             	sub    esp,0xc
c0013220:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013222:	53                   	push   ebx
c0013223:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013226:	83 c4 10             	add    esp,0x10
c0013229:	b8 01 00 00 00       	mov    eax,0x1
c001322e:	eb 41                	jmp    c0013271 <Fs::setcwd(Process*, char*)+0x130>
c0013230:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0013235:	75 1c                	jne    c0013253 <Fs::setcwd(Process*, char*)+0x112>
c0013237:	b8 02 00 00 00       	mov    eax,0x2
c001323c:	85 db                	test   ebx,ebx
c001323e:	74 31                	je     c0013271 <Fs::setcwd(Process*, char*)+0x130>
c0013240:	83 ec 0c             	sub    esp,0xc
c0013243:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013245:	53                   	push   ebx
c0013246:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013249:	83 c4 10             	add    esp,0x10
c001324c:	b8 02 00 00 00       	mov    eax,0x2
c0013251:	eb 1e                	jmp    c0013271 <Fs::setcwd(Process*, char*)+0x130>
c0013253:	85 db                	test   ebx,ebx
c0013255:	74 0c                	je     c0013263 <Fs::setcwd(Process*, char*)+0x122>
c0013257:	83 ec 0c             	sub    esp,0xc
c001325a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001325c:	53                   	push   ebx
c001325d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013260:	83 c4 10             	add    esp,0x10
c0013263:	50                   	push   eax
c0013264:	50                   	push   eax
c0013265:	56                   	push   esi
c0013266:	57                   	push   edi
c0013267:	e8 a0 d5 fe ff       	call   c000080c <strcpy>
c001326c:	83 c4 10             	add    esp,0x10
c001326f:	31 c0                	xor    eax,eax
c0013271:	81 c4 1c 02 00 00    	add    esp,0x21c
c0013277:	5b                   	pop    ebx
c0013278:	5e                   	pop    esi
c0013279:	5f                   	pop    edi
c001327a:	5d                   	pop    ebp
c001327b:	c3                   	ret    

c001327c <Directory::Directory(char const*, Process*)>:
c001327c:	83 ec 0c             	sub    esp,0xc
c001327f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013283:	83 ec 08             	sub    esp,0x8
c0013286:	6a 00                	push   0x0
c0013288:	50                   	push   eax
c0013289:	e8 ce dd ff ff       	call   c001105c <UnixFile::UnixFile(int)>
c001328e:	83 c4 10             	add    esp,0x10
c0013291:	ba 9c ae 02 c0       	mov    edx,0xc002ae9c
c0013296:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001329a:	89 10                	mov    DWORD PTR [eax],edx
c001329c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00132a0:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00132a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132aa:	83 c0 0d             	add    eax,0xd
c00132ad:	83 ec 04             	sub    esp,0x4
c00132b0:	52                   	push   edx
c00132b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132b5:	50                   	push   eax
c00132b6:	e8 6b f9 ff ff       	call   c0012c26 <Fs::standardiseFiles(char*, char const*, char const*)>
c00132bb:	83 c4 10             	add    esp,0x10
c00132be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132c2:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00132c5:	8d 50 bf             	lea    edx,[eax-0x41]
c00132c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132cc:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00132d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132d6:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00132da:	90                   	nop
c00132db:	83 c4 0c             	add    esp,0xc
c00132de:	c3                   	ret    
c00132df:	90                   	nop

c00132e0 <Directory::open()>:
c00132e0:	53                   	push   ebx
c00132e1:	b8 0b 00 00 00       	mov    eax,0xb
c00132e6:	83 ec 08             	sub    esp,0x8
c00132e9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00132ed:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00132f4:	80 fa 19             	cmp    dl,0x19
c00132f7:	77 3d                	ja     c0013336 <Directory::open()+0x56>
c00132f9:	8b 14 95 20 e8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd17e0]
c0013300:	85 d2                	test   edx,edx
c0013302:	74 32                	je     c0013336 <Directory::open()+0x56>
c0013304:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001330a:	85 d2                	test   edx,edx
c001330c:	74 28                	je     c0013336 <Directory::open()+0x56>
c001330e:	b8 06 00 00 00       	mov    eax,0x6
c0013313:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013317:	75 1d                	jne    c0013336 <Directory::open()+0x56>
c0013319:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001331f:	50                   	push   eax
c0013320:	8b 02                	mov    eax,DWORD PTR [edx]
c0013322:	51                   	push   ecx
c0013323:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013326:	51                   	push   ecx
c0013327:	52                   	push   edx
c0013328:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c001332b:	83 c4 10             	add    esp,0x10
c001332e:	85 c0                	test   eax,eax
c0013330:	75 04                	jne    c0013336 <Directory::open()+0x56>
c0013332:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013336:	83 c4 08             	add    esp,0x8
c0013339:	5b                   	pop    ebx
c001333a:	c3                   	ret    
c001333b:	90                   	nop

c001333c <Directory::close()>:
c001333c:	53                   	push   ebx
c001333d:	b8 0b 00 00 00       	mov    eax,0xb
c0013342:	83 ec 08             	sub    esp,0x8
c0013345:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013349:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013350:	80 fa 19             	cmp    dl,0x19
c0013353:	77 41                	ja     c0013396 <Directory::close()+0x5a>
c0013355:	8b 1c 95 20 e8 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd17e0]
c001335c:	85 db                	test   ebx,ebx
c001335e:	74 36                	je     c0013396 <Directory::close()+0x5a>
c0013360:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013367:	74 2d                	je     c0013396 <Directory::close()+0x5a>
c0013369:	b8 05 00 00 00       	mov    eax,0x5
c001336e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013372:	74 22                	je     c0013396 <Directory::close()+0x5a>
c0013374:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013378:	8b 04 95 20 e8 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd17e0]
c001337f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013385:	53                   	push   ebx
c0013386:	53                   	push   ebx
c0013387:	8b 10                	mov    edx,DWORD PTR [eax]
c0013389:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001338f:	50                   	push   eax
c0013390:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013393:	83 c4 10             	add    esp,0x10
c0013396:	83 c4 08             	add    esp,0x8
c0013399:	5b                   	pop    ebx
c001339a:	c3                   	ret    
c001339b:	90                   	nop

c001339c <Directory::unlink()>:
c001339c:	83 ec 0c             	sub    esp,0xc
c001339f:	b8 0b 00 00 00       	mov    eax,0xb
c00133a4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00133a8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00133af:	80 f9 19             	cmp    cl,0x19
c00133b2:	77 2f                	ja     c00133e3 <Directory::unlink()+0x47>
c00133b4:	8b 0c 8d 20 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd17e0]
c00133bb:	85 c9                	test   ecx,ecx
c00133bd:	74 24                	je     c00133e3 <Directory::unlink()+0x47>
c00133bf:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00133c5:	85 c9                	test   ecx,ecx
c00133c7:	74 1a                	je     c00133e3 <Directory::unlink()+0x47>
c00133c9:	b8 06 00 00 00       	mov    eax,0x6
c00133ce:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00133d2:	75 0f                	jne    c00133e3 <Directory::unlink()+0x47>
c00133d4:	83 c2 0d             	add    edx,0xd
c00133d7:	50                   	push   eax
c00133d8:	50                   	push   eax
c00133d9:	8b 01                	mov    eax,DWORD PTR [ecx]
c00133db:	52                   	push   edx
c00133dc:	51                   	push   ecx
c00133dd:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00133e0:	83 c4 10             	add    esp,0x10
c00133e3:	83 c4 0c             	add    esp,0xc
c00133e6:	c3                   	ret    
c00133e7:	90                   	nop

c00133e8 <Directory::rename(char const*)>:
c00133e8:	83 ec 0c             	sub    esp,0xc
c00133eb:	b8 0b 00 00 00       	mov    eax,0xb
c00133f0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00133f4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00133fb:	80 f9 19             	cmp    cl,0x19
c00133fe:	77 32                	ja     c0013432 <Directory::rename(char const*)+0x4a>
c0013400:	8b 0c 8d 20 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd17e0]
c0013407:	85 c9                	test   ecx,ecx
c0013409:	74 27                	je     c0013432 <Directory::rename(char const*)+0x4a>
c001340b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013411:	85 c9                	test   ecx,ecx
c0013413:	74 1d                	je     c0013432 <Directory::rename(char const*)+0x4a>
c0013415:	b8 06 00 00 00       	mov    eax,0x6
c001341a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001341e:	75 12                	jne    c0013432 <Directory::rename(char const*)+0x4a>
c0013420:	83 c2 0d             	add    edx,0xd
c0013423:	50                   	push   eax
c0013424:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013426:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001342a:	52                   	push   edx
c001342b:	51                   	push   ecx
c001342c:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001342f:	83 c4 10             	add    esp,0x10
c0013432:	83 c4 0c             	add    esp,0xc
c0013435:	c3                   	ret    

c0013436 <Directory::exists()>:
c0013436:	83 ec 0c             	sub    esp,0xc
c0013439:	31 c0                	xor    eax,eax
c001343b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001343f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013446:	80 f9 19             	cmp    cl,0x19
c0013449:	77 24                	ja     c001346f <Directory::exists()+0x39>
c001344b:	8b 0c 8d 20 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd17e0]
c0013452:	85 c9                	test   ecx,ecx
c0013454:	74 19                	je     c001346f <Directory::exists()+0x39>
c0013456:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001345c:	85 c9                	test   ecx,ecx
c001345e:	74 0f                	je     c001346f <Directory::exists()+0x39>
c0013460:	83 c2 0d             	add    edx,0xd
c0013463:	50                   	push   eax
c0013464:	50                   	push   eax
c0013465:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013467:	52                   	push   edx
c0013468:	51                   	push   ecx
c0013469:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001346c:	83 c4 10             	add    esp,0x10
c001346f:	83 c4 0c             	add    esp,0xc
c0013472:	c3                   	ret    
c0013473:	90                   	nop

c0013474 <Directory::read(dirent*)>:
c0013474:	83 ec 1c             	sub    esp,0x1c
c0013477:	b8 0b 00 00 00       	mov    eax,0xb
c001347c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013480:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013487:	80 fa 19             	cmp    dl,0x19
c001348a:	77 30                	ja     c00134bc <Directory::read(dirent*)+0x48>
c001348c:	8b 14 95 20 e8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd17e0]
c0013493:	85 d2                	test   edx,edx
c0013495:	74 25                	je     c00134bc <Directory::read(dirent*)+0x48>
c0013497:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c001349e:	74 1c                	je     c00134bc <Directory::read(dirent*)+0x48>
c00134a0:	83 ec 0c             	sub    esp,0xc
c00134a3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00134a5:	8d 54 24 18          	lea    edx,[esp+0x18]
c00134a9:	52                   	push   edx
c00134aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00134ae:	6a 00                	push   0x0
c00134b0:	68 10 01 00 00       	push   0x110
c00134b5:	51                   	push   ecx
c00134b6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00134b9:	83 c4 20             	add    esp,0x20
c00134bc:	83 c4 1c             	add    esp,0x1c
c00134bf:	c3                   	ret    

c00134c0 <Directory::create()>:
c00134c0:	83 ec 0c             	sub    esp,0xc
c00134c3:	b8 0b 00 00 00       	mov    eax,0xb
c00134c8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00134cc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00134d3:	80 f9 19             	cmp    cl,0x19
c00134d6:	77 2f                	ja     c0013507 <Directory::create()+0x47>
c00134d8:	8b 0c 8d 20 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd17e0]
c00134df:	85 c9                	test   ecx,ecx
c00134e1:	74 24                	je     c0013507 <Directory::create()+0x47>
c00134e3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00134e9:	85 c9                	test   ecx,ecx
c00134eb:	74 1a                	je     c0013507 <Directory::create()+0x47>
c00134ed:	b8 06 00 00 00       	mov    eax,0x6
c00134f2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00134f6:	75 0f                	jne    c0013507 <Directory::create()+0x47>
c00134f8:	83 c2 0d             	add    edx,0xd
c00134fb:	50                   	push   eax
c00134fc:	50                   	push   eax
c00134fd:	8b 01                	mov    eax,DWORD PTR [ecx]
c00134ff:	52                   	push   edx
c0013500:	51                   	push   ecx
c0013501:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013504:	83 c4 10             	add    esp,0x10
c0013507:	83 c4 0c             	add    esp,0xc
c001350a:	c3                   	ret    
c001350b:	90                   	nop

c001350c <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c001350c:	b8 0a 00 00 00       	mov    eax,0xa
c0013511:	c3                   	ret    

c0013512 <Bus::Bus(char const*)>:
c0013512:	83 ec 0c             	sub    esp,0xc
c0013515:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013519:	83 ec 08             	sub    esp,0x8
c001351c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013520:	50                   	push   eax
c0013521:	e8 88 09 00 00       	call   c0013eae <Device::Device(char const*)>
c0013526:	83 c4 10             	add    esp,0x10
c0013529:	ba b8 ae 02 c0       	mov    edx,0xc002aeb8
c001352e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013532:	89 10                	mov    DWORD PTR [eax],edx
c0013534:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013538:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013542:	90                   	nop
c0013543:	83 c4 0c             	add    esp,0xc
c0013546:	c3                   	ret    
c0013547:	90                   	nop

c0013548 <Bus::~Bus()>:
c0013548:	83 ec 0c             	sub    esp,0xc
c001354b:	ba b8 ae 02 c0       	mov    edx,0xc002aeb8
c0013550:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013554:	89 10                	mov    DWORD PTR [eax],edx
c0013556:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001355a:	83 ec 0c             	sub    esp,0xc
c001355d:	50                   	push   eax
c001355e:	e8 15 06 00 00       	call   c0013b78 <Device::~Device()>
c0013563:	83 c4 10             	add    esp,0x10
c0013566:	90                   	nop
c0013567:	83 c4 0c             	add    esp,0xc
c001356a:	c3                   	ret    
c001356b:	90                   	nop

c001356c <Bus::~Bus()>:
c001356c:	83 ec 0c             	sub    esp,0xc
c001356f:	83 ec 0c             	sub    esp,0xc
c0013572:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013576:	e8 cd ff ff ff       	call   c0013548 <Bus::~Bus()>
c001357b:	83 c4 10             	add    esp,0x10
c001357e:	83 ec 08             	sub    esp,0x8
c0013581:	68 58 01 00 00       	push   0x158
c0013586:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001358a:	e8 0a f2 ff ff       	call   c0012799 <operator delete(void*, unsigned long)>
c001358f:	83 c4 10             	add    esp,0x10
c0013592:	83 c4 0c             	add    esp,0xc
c0013595:	c3                   	ret    

c0013596 <Buzzer::Buzzer(char const*)>:
c0013596:	83 ec 0c             	sub    esp,0xc
c0013599:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001359d:	83 ec 08             	sub    esp,0x8
c00135a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135a4:	50                   	push   eax
c00135a5:	e8 04 09 00 00       	call   c0013eae <Device::Device(char const*)>
c00135aa:	83 c4 10             	add    esp,0x10
c00135ad:	ba e4 ae 02 c0       	mov    edx,0xc002aee4
c00135b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135b6:	89 10                	mov    DWORD PTR [eax],edx
c00135b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135bc:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00135c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135ca:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c00135d4:	90                   	nop
c00135d5:	83 c4 0c             	add    esp,0xc
c00135d8:	c3                   	ret    
c00135d9:	90                   	nop

c00135da <Buzzer::~Buzzer()>:
c00135da:	83 ec 0c             	sub    esp,0xc
c00135dd:	ba e4 ae 02 c0       	mov    edx,0xc002aee4
c00135e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135e6:	89 10                	mov    DWORD PTR [eax],edx
c00135e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135ec:	83 ec 0c             	sub    esp,0xc
c00135ef:	50                   	push   eax
c00135f0:	e8 83 05 00 00       	call   c0013b78 <Device::~Device()>
c00135f5:	83 c4 10             	add    esp,0x10
c00135f8:	90                   	nop
c00135f9:	83 c4 0c             	add    esp,0xc
c00135fc:	c3                   	ret    
c00135fd:	90                   	nop

c00135fe <Buzzer::~Buzzer()>:
c00135fe:	83 ec 0c             	sub    esp,0xc
c0013601:	83 ec 0c             	sub    esp,0xc
c0013604:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013608:	e8 cd ff ff ff       	call   c00135da <Buzzer::~Buzzer()>
c001360d:	83 c4 10             	add    esp,0x10
c0013610:	83 ec 08             	sub    esp,0x8
c0013613:	68 5c 01 00 00       	push   0x15c
c0013618:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001361c:	e8 78 f1 ff ff       	call   c0012799 <operator delete(void*, unsigned long)>
c0013621:	83 c4 10             	add    esp,0x10
c0013624:	83 c4 0c             	add    esp,0xc
c0013627:	c3                   	ret    

c0013628 <Buzzer::stop()>:
c0013628:	83 ec 14             	sub    esp,0x14
c001362b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001362f:	8b 10                	mov    edx,DWORD PTR [eax]
c0013631:	6a 00                	push   0x0
c0013633:	50                   	push   eax
c0013634:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013637:	83 c4 1c             	add    esp,0x1c
c001363a:	c3                   	ret    

c001363b <beepThread(void*)>:
c001363b:	53                   	push   ebx
c001363c:	83 ec 08             	sub    esp,0x8
c001363f:	a1 28 f7 02 c0       	mov    eax,ds:0xc002f728
c0013644:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013648:	48                   	dec    eax
c0013649:	a3 28 f7 02 c0       	mov    ds:0xc002f728,eax
c001364e:	75 01                	jne    c0013651 <beepThread(void*)+0x16>
c0013650:	fb                   	sti    
c0013651:	50                   	push   eax
c0013652:	50                   	push   eax
c0013653:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013658:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c001365e:	52                   	push   edx
c001365f:	50                   	push   eax
c0013660:	e8 44 a9 00 00       	call   c001dfa9 <nanoSleep(unsigned long long)>
c0013665:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013668:	e8 bb ff ff ff       	call   c0013628 <Buzzer::stop()>
c001366d:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013675:	83 c4 18             	add    esp,0x18
c0013678:	5b                   	pop    ebx
c0013679:	e9 27 a8 00 00       	jmp    c001dea5 <blockTask(TaskState)>

c001367e <Buzzer::beep(int, int, bool)>:
c001367e:	57                   	push   edi
c001367f:	56                   	push   esi
c0013680:	53                   	push   ebx
c0013681:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013685:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013689:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001368d:	52                   	push   edx
c001368e:	52                   	push   edx
c001368f:	8b 06                	mov    eax,DWORD PTR [esi]
c0013691:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013695:	56                   	push   esi
c0013696:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013699:	83 c4 10             	add    esp,0x10
c001369c:	89 f8                	mov    eax,edi
c001369e:	84 c0                	test   al,al
c00136a0:	74 1f                	je     c00136c1 <Buzzer::beep(int, int, bool)+0x43>
c00136a2:	50                   	push   eax
c00136a3:	50                   	push   eax
c00136a4:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c00136aa:	99                   	cdq    
c00136ab:	52                   	push   edx
c00136ac:	50                   	push   eax
c00136ad:	e8 f7 a8 00 00       	call   c001dfa9 <nanoSleep(unsigned long long)>
c00136b2:	83 c4 10             	add    esp,0x10
c00136b5:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00136b9:	5b                   	pop    ebx
c00136ba:	5e                   	pop    esi
c00136bb:	5f                   	pop    edi
c00136bc:	e9 67 ff ff ff       	jmp    c0013628 <Buzzer::stop()>
c00136c1:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c00136c7:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c00136cc:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c00136d4:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c00136d8:	c7 44 24 14 3b 36 01 c0 	mov    DWORD PTR [esp+0x14],0xc001363b
c00136e0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00136e4:	5b                   	pop    ebx
c00136e5:	5e                   	pop    esi
c00136e6:	5f                   	pop    edi
c00136e7:	e9 be a3 00 00       	jmp    c001daaa <Process::createThread(void (*)(void*), void*, int)>

c00136ec <User::loadClockSettings(int)>:
c00136ec:	53                   	push   ebx
c00136ed:	83 ec 14             	sub    esp,0x14
c00136f0:	68 14 01 00 00       	push   0x114
c00136f5:	e8 1f c1 ff ff       	call   c000f819 <malloc>
c00136fa:	83 c4 0c             	add    esp,0xc
c00136fd:	89 c3                	mov    ebx,eax
c00136ff:	ff 35 50 f7 02 c0    	push   DWORD PTR ds:0xc002f750
c0013705:	68 0c af 02 c0       	push   0xc002af0c
c001370a:	50                   	push   eax
c001370b:	e8 c0 f6 ff ff       	call   c0012dd0 <File::File(char const*, Process*)>
c0013710:	58                   	pop    eax
c0013711:	5a                   	pop    edx
c0013712:	6a 01                	push   0x1
c0013714:	53                   	push   ebx
c0013715:	e8 1a f7 ff ff       	call   c0012e34 <File::open(FileOpenMode)>
c001371a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001371d:	e8 70 f7 ff ff       	call   c0012e92 <File::close()>
c0013722:	83 c4 10             	add    esp,0x10
c0013725:	85 db                	test   ebx,ebx
c0013727:	74 0f                	je     c0013738 <User::loadClockSettings(int)+0x4c>
c0013729:	8b 03                	mov    eax,DWORD PTR [ebx]
c001372b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001372f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013732:	83 c4 08             	add    esp,0x8
c0013735:	5b                   	pop    ebx
c0013736:	ff e0                	jmp    eax
c0013738:	83 c4 08             	add    esp,0x8
c001373b:	5b                   	pop    ebx
c001373c:	c3                   	ret    
c001373d:	90                   	nop

c001373e <Clock::Clock(char const*)>:
c001373e:	83 ec 0c             	sub    esp,0xc
c0013741:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013745:	83 ec 08             	sub    esp,0x8
c0013748:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001374c:	50                   	push   eax
c001374d:	e8 5c 07 00 00       	call   c0013eae <Device::Device(char const*)>
c0013752:	83 c4 10             	add    esp,0x10
c0013755:	ba 34 af 02 c0       	mov    edx,0xc002af34
c001375a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001375e:	89 10                	mov    DWORD PTR [eax],edx
c0013760:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013764:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c001376e:	90                   	nop
c001376f:	83 c4 0c             	add    esp,0xc
c0013772:	c3                   	ret    
c0013773:	90                   	nop

c0013774 <Clock::~Clock()>:
c0013774:	83 ec 0c             	sub    esp,0xc
c0013777:	ba 34 af 02 c0       	mov    edx,0xc002af34
c001377c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013780:	89 10                	mov    DWORD PTR [eax],edx
c0013782:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013786:	83 ec 0c             	sub    esp,0xc
c0013789:	50                   	push   eax
c001378a:	e8 e9 03 00 00       	call   c0013b78 <Device::~Device()>
c001378f:	83 c4 10             	add    esp,0x10
c0013792:	90                   	nop
c0013793:	83 c4 0c             	add    esp,0xc
c0013796:	c3                   	ret    
c0013797:	90                   	nop

c0013798 <Clock::~Clock()>:
c0013798:	83 ec 0c             	sub    esp,0xc
c001379b:	83 ec 0c             	sub    esp,0xc
c001379e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00137a2:	e8 cd ff ff ff       	call   c0013774 <Clock::~Clock()>
c00137a7:	83 c4 10             	add    esp,0x10
c00137aa:	83 ec 08             	sub    esp,0x8
c00137ad:	68 58 01 00 00       	push   0x158
c00137b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00137b6:	e8 de ef ff ff       	call   c0012799 <operator delete(void*, unsigned long)>
c00137bb:	83 c4 10             	add    esp,0x10
c00137be:	83 c4 0c             	add    esp,0xc
c00137c1:	c3                   	ret    

c00137c2 <Clock::timeInSecondsLocal()>:
c00137c2:	53                   	push   ebx
c00137c3:	83 ec 14             	sub    esp,0x14
c00137c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00137ca:	8b 10                	mov    edx,DWORD PTR [eax]
c00137cc:	50                   	push   eax
c00137cd:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00137d0:	0f b6 0d 9c e3 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e39c
c00137d7:	03 0d a0 e3 02 c0    	add    ecx,DWORD PTR ds:0xc002e3a0
c00137dd:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00137e3:	89 cb                	mov    ebx,ecx
c00137e5:	c1 fb 1f             	sar    ebx,0x1f
c00137e8:	01 c8                	add    eax,ecx
c00137ea:	11 da                	adc    edx,ebx
c00137ec:	83 c4 10             	add    esp,0x10
c00137ef:	31 c9                	xor    ecx,ecx
c00137f1:	80 3d 9d e3 02 c0 00 	cmp    BYTE PTR ds:0xc002e39d,0x0
c00137f8:	74 05                	je     c00137ff <Clock::timeInSecondsLocal()+0x3d>
c00137fa:	b9 08 07 00 00       	mov    ecx,0x708
c00137ff:	31 db                	xor    ebx,ebx
c0013801:	01 c8                	add    eax,ecx
c0013803:	11 da                	adc    edx,ebx
c0013805:	83 c4 08             	add    esp,0x8
c0013808:	5b                   	pop    ebx
c0013809:	c3                   	ret    

c001380a <Clock::setTimeInSecondsLocal(unsigned long long)>:
c001380a:	57                   	push   edi
c001380b:	56                   	push   esi
c001380c:	53                   	push   ebx
c001380d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013811:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013815:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013817:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001381b:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c001381e:	0f b6 05 9c e3 02 c0 	movzx  eax,BYTE PTR ds:0xc002e39c
c0013825:	03 05 a0 e3 02 c0    	add    eax,DWORD PTR ds:0xc002e3a0
c001382b:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013831:	99                   	cdq    
c0013832:	29 c6                	sub    esi,eax
c0013834:	19 d7                	sbb    edi,edx
c0013836:	89 f0                	mov    eax,esi
c0013838:	89 fa                	mov    edx,edi
c001383a:	31 f6                	xor    esi,esi
c001383c:	80 3d 9d e3 02 c0 00 	cmp    BYTE PTR ds:0xc002e39d,0x0
c0013843:	74 05                	je     c001384a <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013845:	be 08 07 00 00       	mov    esi,0x708
c001384a:	31 ff                	xor    edi,edi
c001384c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013850:	29 f0                	sub    eax,esi
c0013852:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013856:	19 fa                	sbb    edx,edi
c0013858:	89 d8                	mov    eax,ebx
c001385a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001385e:	5b                   	pop    ebx
c001385f:	5e                   	pop    esi
c0013860:	5f                   	pop    edi
c0013861:	ff e0                	jmp    eax

c0013863 <datetimeToSeconds(datetime_t)>:
c0013863:	55                   	push   ebp
c0013864:	57                   	push   edi
c0013865:	56                   	push   esi
c0013866:	53                   	push   ebx
c0013867:	83 ec 14             	sub    esp,0x14
c001386a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001386e:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013872:	89 d3                	mov    ebx,edx
c0013874:	0f b6 c6             	movzx  eax,dh
c0013877:	c1 eb 10             	shr    ebx,0x10
c001387a:	48                   	dec    eax
c001387b:	66 81 eb 6c 07       	sub    bx,0x76c
c0013880:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013884:	0f b6 f5             	movzx  esi,ch
c0013887:	89 cf                	mov    edi,ecx
c0013889:	6b f6 3c             	imul   esi,esi,0x3c
c001388c:	c1 ef 10             	shr    edi,0x10
c001388f:	0f b6 c9             	movzx  ecx,cl
c0013892:	89 f8                	mov    eax,edi
c0013894:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001389a:	0f b6 f8             	movzx  edi,al
c001389d:	0f b6 d2             	movzx  edx,dl
c00138a0:	01 fe                	add    esi,edi
c00138a2:	01 f1                	add    ecx,esi
c00138a4:	0f b7 f3             	movzx  esi,bx
c00138a7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00138ab:	c1 f9 1f             	sar    ecx,0x1f
c00138ae:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c00138b3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00138b7:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c00138bc:	8b 0c 8d 80 af 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5080]
c00138c3:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c00138c7:	76 29                	jbe    c00138f2 <datetimeToSeconds(datetime_t)+0x8f>
c00138c9:	f6 c3 03             	test   bl,0x3
c00138cc:	75 24                	jne    c00138f2 <datetimeToSeconds(datetime_t)+0x8f>
c00138ce:	31 d2                	xor    edx,edx
c00138d0:	bf 64 00 00 00       	mov    edi,0x64
c00138d5:	89 d8                	mov    eax,ebx
c00138d7:	66 f7 f7             	div    di
c00138da:	66 85 d2             	test   dx,dx
c00138dd:	75 12                	jne    c00138f1 <datetimeToSeconds(datetime_t)+0x8e>
c00138df:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c00138e5:	bf 90 01 00 00       	mov    edi,0x190
c00138ea:	99                   	cdq    
c00138eb:	f7 ff                	idiv   edi
c00138ed:	85 d2                	test   edx,edx
c00138ef:	75 01                	jne    c00138f2 <datetimeToSeconds(datetime_t)+0x8f>
c00138f1:	41                   	inc    ecx
c00138f2:	66 83 fb 46          	cmp    bx,0x46
c00138f6:	76 45                	jbe    c001393d <datetimeToSeconds(datetime_t)+0xda>
c00138f8:	bb 46 00 00 00       	mov    ebx,0x46
c00138fd:	bf 64 00 00 00       	mov    edi,0x64
c0013902:	bd 90 01 00 00       	mov    ebp,0x190
c0013907:	b8 6d 01 00 00       	mov    eax,0x16d
c001390c:	f6 c3 03             	test   bl,0x3
c001390f:	75 23                	jne    c0013934 <datetimeToSeconds(datetime_t)+0xd1>
c0013911:	89 d8                	mov    eax,ebx
c0013913:	99                   	cdq    
c0013914:	f7 ff                	idiv   edi
c0013916:	b8 6e 01 00 00       	mov    eax,0x16e
c001391b:	85 d2                	test   edx,edx
c001391d:	75 15                	jne    c0013934 <datetimeToSeconds(datetime_t)+0xd1>
c001391f:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013925:	99                   	cdq    
c0013926:	f7 fd                	idiv   ebp
c0013928:	83 fa 01             	cmp    edx,0x1
c001392b:	19 c0                	sbb    eax,eax
c001392d:	f7 d0                	not    eax
c001392f:	05 6e 01 00 00       	add    eax,0x16e
c0013934:	01 c1                	add    ecx,eax
c0013936:	43                   	inc    ebx
c0013937:	39 f3                	cmp    ebx,esi
c0013939:	7c cc                	jl     c0013907 <datetimeToSeconds(datetime_t)+0xa4>
c001393b:	eb 35                	jmp    c0013972 <datetimeToSeconds(datetime_t)+0x10f>
c001393d:	74 33                	je     c0013972 <datetimeToSeconds(datetime_t)+0x10f>
c001393f:	b8 45 00 00 00       	mov    eax,0x45
c0013944:	89 c2                	mov    edx,eax
c0013946:	83 e2 03             	and    edx,0x3
c0013949:	39 f0                	cmp    eax,esi
c001394b:	7e 0f                	jle    c001395c <datetimeToSeconds(datetime_t)+0xf9>
c001394d:	83 fa 01             	cmp    edx,0x1
c0013950:	19 d2                	sbb    edx,edx
c0013952:	48                   	dec    eax
c0013953:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c001395a:	eb e8                	jmp    c0013944 <datetimeToSeconds(datetime_t)+0xe1>
c001395c:	b8 6d 01 00 00       	mov    eax,0x16d
c0013961:	85 d2                	test   edx,edx
c0013963:	75 0b                	jne    c0013970 <datetimeToSeconds(datetime_t)+0x10d>
c0013965:	66 83 fb 01          	cmp    bx,0x1
c0013969:	19 c0                	sbb    eax,eax
c001396b:	05 6e 01 00 00       	add    eax,0x16e
c0013970:	29 c1                	sub    ecx,eax
c0013972:	b8 80 51 01 00       	mov    eax,0x15180
c0013977:	f7 e9                	imul   ecx
c0013979:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001397d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013981:	83 c4 14             	add    esp,0x14
c0013984:	5b                   	pop    ebx
c0013985:	5e                   	pop    esi
c0013986:	5f                   	pop    edi
c0013987:	5d                   	pop    ebp
c0013988:	c3                   	ret    
c0013989:	90                   	nop

c001398a <Clock::setTimeInDatetimeLocal(datetime_t)>:
c001398a:	57                   	push   edi
c001398b:	56                   	push   esi
c001398c:	53                   	push   ebx
c001398d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013991:	8b 06                	mov    eax,DWORD PTR [esi]
c0013993:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013996:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001399a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001399e:	e8 c0 fe ff ff       	call   c0013863 <datetimeToSeconds(datetime_t)>
c00139a3:	59                   	pop    ecx
c00139a4:	0f b6 0d 9c e3 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e39c
c00139ab:	5b                   	pop    ebx
c00139ac:	03 0d a0 e3 02 c0    	add    ecx,DWORD PTR ds:0xc002e3a0
c00139b2:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00139b8:	89 cb                	mov    ebx,ecx
c00139ba:	c1 fb 1f             	sar    ebx,0x1f
c00139bd:	29 c8                	sub    eax,ecx
c00139bf:	19 da                	sbb    edx,ebx
c00139c1:	31 c9                	xor    ecx,ecx
c00139c3:	80 3d 9d e3 02 c0 00 	cmp    BYTE PTR ds:0xc002e39d,0x0
c00139ca:	74 05                	je     c00139d1 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c00139cc:	b9 08 07 00 00       	mov    ecx,0x708
c00139d1:	31 db                	xor    ebx,ebx
c00139d3:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00139d7:	29 c8                	sub    eax,ecx
c00139d9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00139dd:	19 da                	sbb    edx,ebx
c00139df:	89 f8                	mov    eax,edi
c00139e1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00139e5:	5b                   	pop    ebx
c00139e6:	5e                   	pop    esi
c00139e7:	5f                   	pop    edi
c00139e8:	ff e0                	jmp    eax

c00139ea <secondsToDatetime(unsigned long long)>:
c00139ea:	55                   	push   ebp
c00139eb:	57                   	push   edi
c00139ec:	56                   	push   esi
c00139ed:	53                   	push   ebx
c00139ee:	83 ec 1c             	sub    esp,0x1c
c00139f1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00139f5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00139f9:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00139fd:	6a 00                	push   0x0
c00139ff:	68 80 51 01 00       	push   0x15180
c0013a04:	55                   	push   ebp
c0013a05:	57                   	push   edi
c0013a06:	e8 69 31 01 00       	call   c0026b74 <__udivdi3>
c0013a0b:	83 c4 10             	add    esp,0x10
c0013a0e:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013a14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013a18:	6a 00                	push   0x0
c0013a1a:	68 80 51 01 00       	push   0x15180
c0013a1f:	55                   	push   ebp
c0013a20:	57                   	push   edi
c0013a21:	bf 10 0e 00 00       	mov    edi,0xe10
c0013a26:	e8 49 32 01 00       	call   c0026c74 <__umoddi3>
c0013a2b:	83 c4 10             	add    esp,0x10
c0013a2e:	99                   	cdq    
c0013a2f:	f7 ff                	idiv   edi
c0013a31:	bf 3c 00 00 00       	mov    edi,0x3c
c0013a36:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013a39:	89 d0                	mov    eax,edx
c0013a3b:	99                   	cdq    
c0013a3c:	f7 ff                	idiv   edi
c0013a3e:	85 db                	test   ebx,ebx
c0013a40:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013a43:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013a46:	79 11                	jns    c0013a59 <secondsToDatetime(unsigned long long)+0x6f>
c0013a48:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013a4c:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013a52:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013a57:	eb 07                	jmp    c0013a60 <secondsToDatetime(unsigned long long)+0x76>
c0013a59:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013a5e:	89 d8                	mov    eax,ebx
c0013a60:	bf b4 05 00 00       	mov    edi,0x5b4
c0013a65:	99                   	cdq    
c0013a66:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013a6b:	f7 f9                	idiv   ecx
c0013a6d:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013a72:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013a76:	31 d2                	xor    edx,edx
c0013a78:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013a80:	01 c3                	add    ebx,eax
c0013a82:	89 d8                	mov    eax,ebx
c0013a84:	f7 f1                	div    ecx
c0013a86:	31 d2                	xor    edx,edx
c0013a88:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013a8b:	89 d8                	mov    eax,ebx
c0013a8d:	f7 f7                	div    edi
c0013a8f:	31 d2                	xor    edx,edx
c0013a91:	29 c1                	sub    ecx,eax
c0013a93:	89 d8                	mov    eax,ebx
c0013a95:	f7 f5                	div    ebp
c0013a97:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013a9c:	29 c1                	sub    ecx,eax
c0013a9e:	31 d2                	xor    edx,edx
c0013aa0:	89 c8                	mov    eax,ecx
c0013aa2:	f7 f5                	div    ebp
c0013aa4:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013aa9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013aad:	31 d2                	xor    edx,edx
c0013aaf:	89 c8                	mov    eax,ecx
c0013ab1:	f7 f5                	div    ebp
c0013ab3:	31 d2                	xor    edx,edx
c0013ab5:	01 c3                	add    ebx,eax
c0013ab7:	89 c8                	mov    eax,ecx
c0013ab9:	f7 f7                	div    edi
c0013abb:	bf 99 00 00 00       	mov    edi,0x99
c0013ac0:	29 c3                	sub    ebx,eax
c0013ac2:	31 d2                	xor    edx,edx
c0013ac4:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013acc:	29 c3                	sub    ebx,eax
c0013ace:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013ad1:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013ad4:	bb 05 00 00 00       	mov    ebx,0x5
c0013ad9:	83 c1 02             	add    ecx,0x2
c0013adc:	89 c8                	mov    eax,ecx
c0013ade:	f7 f7                	div    edi
c0013ae0:	31 d2                	xor    edx,edx
c0013ae2:	89 c7                	mov    edi,eax
c0013ae4:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013aea:	83 c0 02             	add    eax,0x2
c0013aed:	f7 f3                	div    ebx
c0013aef:	89 eb                	mov    ebx,ebp
c0013af1:	29 c3                	sub    ebx,eax
c0013af3:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013af9:	88 1e                	mov    BYTE PTR [esi],bl
c0013afb:	19 c0                	sbb    eax,eax
c0013afd:	31 d2                	xor    edx,edx
c0013aff:	83 e0 0c             	and    eax,0xc
c0013b02:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013b06:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013b0e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013b12:	83 f9 01             	cmp    ecx,0x1
c0013b15:	0f 96 c2             	setbe  dl
c0013b18:	41                   	inc    ecx
c0013b19:	01 d0                	add    eax,edx
c0013b1b:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0013b1e:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0013b22:	83 c4 1c             	add    esp,0x1c
c0013b25:	89 f0                	mov    eax,esi
c0013b27:	5b                   	pop    ebx
c0013b28:	5e                   	pop    esi
c0013b29:	5f                   	pop    edi
c0013b2a:	5d                   	pop    ebp
c0013b2b:	c2 04 00             	ret    0x4

c0013b2e <Clock::timeInDatetimeLocal()>:
c0013b2e:	53                   	push   ebx
c0013b2f:	83 ec 14             	sub    esp,0x14
c0013b32:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013b36:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013b3a:	e8 83 fc ff ff       	call   c00137c2 <Clock::timeInSecondsLocal()>
c0013b3f:	83 c4 0c             	add    esp,0xc
c0013b42:	52                   	push   edx
c0013b43:	50                   	push   eax
c0013b44:	53                   	push   ebx
c0013b45:	e8 a0 fe ff ff       	call   c00139ea <secondsToDatetime(unsigned long long)>
c0013b4a:	89 d8                	mov    eax,ebx
c0013b4c:	83 c4 14             	add    esp,0x14
c0013b4f:	5b                   	pop    ebx
c0013b50:	c2 04 00             	ret    0x4
c0013b53:	90                   	nop

c0013b54 <Device::hibernate()>:
c0013b54:	c3                   	ret    
c0013b55:	90                   	nop

c0013b56 <Device::wake()>:
c0013b56:	c3                   	ret    
c0013b57:	90                   	nop

c0013b58 <Device::detect()>:
c0013b58:	c3                   	ret    
c0013b59:	90                   	nop

c0013b5a <Device::disableLegacy()>:
c0013b5a:	c3                   	ret    
c0013b5b:	90                   	nop

c0013b5c <Device::powerSaving(PowerSavingLevel)>:
c0013b5c:	c3                   	ret    
c0013b5d:	90                   	nop

c0013b5e <DriverlessDevice::close(int, int, void*)>:
c0013b5e:	31 c0                	xor    eax,eax
c0013b60:	c3                   	ret    
c0013b61:	90                   	nop

c0013b62 <DriverlessDevice::detect()>:
c0013b62:	c3                   	ret    
c0013b63:	90                   	nop

c0013b64 <DriverlessDevice::open(int, int, void*)>:
c0013b64:	83 ec 18             	sub    esp,0x18
c0013b67:	68 b0 af 02 c0       	push   0xc002afb0
c0013b6c:	e8 cc 65 00 00       	call   c001a13d <Krnl::panic(char const*)>
c0013b71:	83 c8 ff             	or     eax,0xffffffff
c0013b74:	83 c4 1c             	add    esp,0x1c
c0013b77:	c3                   	ret    

c0013b78 <Device::~Device()>:
c0013b78:	ba 10 b0 02 c0       	mov    edx,0xc002b010
c0013b7d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013b81:	89 10                	mov    DWORD PTR [eax],edx
c0013b83:	90                   	nop
c0013b84:	c3                   	ret    
c0013b85:	90                   	nop

c0013b86 <Device::~Device()>:
c0013b86:	83 ec 0c             	sub    esp,0xc
c0013b89:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013b8d:	e8 e6 ff ff ff       	call   c0013b78 <Device::~Device()>
c0013b92:	83 c4 04             	add    esp,0x4
c0013b95:	83 ec 08             	sub    esp,0x8
c0013b98:	68 58 01 00 00       	push   0x158
c0013b9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ba1:	e8 f3 eb ff ff       	call   c0012799 <operator delete(void*, unsigned long)>
c0013ba6:	83 c4 10             	add    esp,0x10
c0013ba9:	83 c4 0c             	add    esp,0xc
c0013bac:	c3                   	ret    
c0013bad:	90                   	nop

c0013bae <Device::findAndLoadDriver()>:
c0013bae:	c7 44 24 04 ce af 02 c0 	mov    DWORD PTR [esp+0x4],0xc002afce
c0013bb6:	e9 b6 ec ff ff       	jmp    c0012871 <Dbg::kprintf(char const*, ...)>
c0013bbb:	90                   	nop

c0013bbc <Device::preOpenPCI(PCIDeviceInfo)>:
c0013bbc:	57                   	push   edi
c0013bbd:	b9 09 00 00 00       	mov    ecx,0x9
c0013bc2:	56                   	push   esi
c0013bc3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013bc7:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013bcb:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013bd5:	81 c7 18 01 00 00    	add    edi,0x118
c0013bdb:	fc                   	cld    
c0013bdc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013bde:	5e                   	pop    esi
c0013bdf:	5f                   	pop    edi
c0013be0:	c3                   	ret    
c0013be1:	90                   	nop

c0013be2 <Device::preOpenACPI(void*, char*, char*)>:
c0013be2:	57                   	push   edi
c0013be3:	b9 1e 00 00 00       	mov    ecx,0x1e
c0013be8:	56                   	push   esi
c0013be9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013bed:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013bf1:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0013bfb:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0013c01:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0013c07:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013c0b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013c0d:	b9 0e 00 00 00       	mov    ecx,0xe
c0013c12:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0013c18:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013c1c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013c1e:	5e                   	pop    esi
c0013c1f:	5f                   	pop    edi
c0013c20:	c3                   	ret    
c0013c21:	90                   	nop

c0013c22 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013c22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013c26:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013c2b:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013c32:	75 0b                	jne    c0013c3f <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013c34:	8b 00                	mov    eax,DWORD PTR [eax]
c0013c36:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013c3a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013c3d:	eb 1e                	jmp    c0013c5d <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013c3f:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c0013c44:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013c4a:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013c50:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013c52:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013c56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013c5a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013c5d:	ff e0                	jmp    eax
c0013c5f:	90                   	nop

c0013c60 <Device::getParent()>:
c0013c60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013c64:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0013c6a:	c3                   	ret    
c0013c6b:	90                   	nop

c0013c6c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013c6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013c70:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013c75:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013c7c:	75 0b                	jne    c0013c89 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013c7e:	8b 00                	mov    eax,DWORD PTR [eax]
c0013c80:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013c84:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013c87:	eb 1e                	jmp    c0013ca7 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013c89:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c0013c8e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013c94:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013c9a:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013c9c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013ca0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013ca4:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013ca7:	ff e0                	jmp    eax
c0013ca9:	90                   	nop

c0013caa <Device::addChild(Device*)>:
c0013caa:	53                   	push   ebx
c0013cab:	83 ec 08             	sub    esp,0x8
c0013cae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013cb2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013cb6:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013cbc:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013cc2:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013cc4:	85 d2                	test   edx,edx
c0013cc6:	74 04                	je     c0013ccc <Device::addChild(Device*)+0x22>
c0013cc8:	89 d3                	mov    ebx,edx
c0013cca:	eb f6                	jmp    c0013cc2 <Device::addChild(Device*)+0x18>
c0013ccc:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013ccf:	83 ec 0c             	sub    esp,0xc
c0013cd2:	6a 08                	push   0x8
c0013cd4:	e8 40 bb ff ff       	call   c000f819 <malloc>
c0013cd9:	89 03                	mov    DWORD PTR [ebx],eax
c0013cdb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013ce1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013ce8:	83 c4 18             	add    esp,0x18
c0013ceb:	5b                   	pop    ebx
c0013cec:	c3                   	ret    
c0013ced:	90                   	nop

c0013cee <Device::removeAllChildren()>:
c0013cee:	56                   	push   esi
c0013cef:	53                   	push   ebx
c0013cf0:	52                   	push   edx
c0013cf1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013cf5:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013cfb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013cfe:	74 17                	je     c0013d17 <Device::removeAllChildren()+0x29>
c0013d00:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013d03:	85 c0                	test   eax,eax
c0013d05:	74 0c                	je     c0013d13 <Device::removeAllChildren()+0x25>
c0013d07:	83 ec 0c             	sub    esp,0xc
c0013d0a:	8b 10                	mov    edx,DWORD PTR [eax]
c0013d0c:	50                   	push   eax
c0013d0d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013d10:	83 c4 10             	add    esp,0x10
c0013d13:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d15:	eb e4                	jmp    c0013cfb <Device::removeAllChildren()+0xd>
c0013d17:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013d1d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013d23:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013d29:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013d30:	58                   	pop    eax
c0013d31:	5b                   	pop    ebx
c0013d32:	5e                   	pop    esi
c0013d33:	c3                   	ret    

c0013d34 <Device::hibernateAll()>:
c0013d34:	53                   	push   ebx
c0013d35:	83 ec 14             	sub    esp,0x14
c0013d38:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013d3c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d3e:	53                   	push   ebx
c0013d3f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013d42:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013d48:	83 c4 10             	add    esp,0x10
c0013d4b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d4e:	74 0f                	je     c0013d5f <Device::hibernateAll()+0x2b>
c0013d50:	83 ec 0c             	sub    esp,0xc
c0013d53:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013d56:	e8 d9 ff ff ff       	call   c0013d34 <Device::hibernateAll()>
c0013d5b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d5d:	eb e9                	jmp    c0013d48 <Device::hibernateAll()+0x14>
c0013d5f:	83 c4 08             	add    esp,0x8
c0013d62:	5b                   	pop    ebx
c0013d63:	c3                   	ret    

c0013d64 <Device::wakeAll()>:
c0013d64:	53                   	push   ebx
c0013d65:	83 ec 14             	sub    esp,0x14
c0013d68:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013d6c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d6e:	53                   	push   ebx
c0013d6f:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013d72:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013d78:	83 c4 10             	add    esp,0x10
c0013d7b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d7e:	74 0f                	je     c0013d8f <Device::wakeAll()+0x2b>
c0013d80:	83 ec 0c             	sub    esp,0xc
c0013d83:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013d86:	e8 d9 ff ff ff       	call   c0013d64 <Device::wakeAll()>
c0013d8b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d8d:	eb e9                	jmp    c0013d78 <Device::wakeAll()+0x14>
c0013d8f:	83 c4 08             	add    esp,0x8
c0013d92:	5b                   	pop    ebx
c0013d93:	c3                   	ret    

c0013d94 <Device::detectAll()>:
c0013d94:	53                   	push   ebx
c0013d95:	83 ec 14             	sub    esp,0x14
c0013d98:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013d9c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d9e:	53                   	push   ebx
c0013d9f:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013da2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013da8:	83 c4 10             	add    esp,0x10
c0013dab:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013dae:	74 0f                	je     c0013dbf <Device::detectAll()+0x2b>
c0013db0:	83 ec 0c             	sub    esp,0xc
c0013db3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013db6:	e8 d9 ff ff ff       	call   c0013d94 <Device::detectAll()>
c0013dbb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013dbd:	eb e9                	jmp    c0013da8 <Device::detectAll()+0x14>
c0013dbf:	83 c4 08             	add    esp,0x8
c0013dc2:	5b                   	pop    ebx
c0013dc3:	c3                   	ret    

c0013dc4 <Device::disableLegacyAll()>:
c0013dc4:	53                   	push   ebx
c0013dc5:	83 ec 14             	sub    esp,0x14
c0013dc8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013dcc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013dce:	53                   	push   ebx
c0013dcf:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013dd2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013dd8:	83 c4 10             	add    esp,0x10
c0013ddb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013dde:	74 0f                	je     c0013def <Device::disableLegacyAll()+0x2b>
c0013de0:	83 ec 0c             	sub    esp,0xc
c0013de3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013de6:	e8 d9 ff ff ff       	call   c0013dc4 <Device::disableLegacyAll()>
c0013deb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ded:	eb e9                	jmp    c0013dd8 <Device::disableLegacyAll()+0x14>
c0013def:	83 c4 08             	add    esp,0x8
c0013df2:	5b                   	pop    ebx
c0013df3:	c3                   	ret    

c0013df4 <Device::loadDriversForAll()>:
c0013df4:	53                   	push   ebx
c0013df5:	83 ec 08             	sub    esp,0x8
c0013df8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013dfc:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c0013e03:	75 0c                	jne    c0013e11 <Device::loadDriversForAll()+0x1d>
c0013e05:	83 ec 0c             	sub    esp,0xc
c0013e08:	53                   	push   ebx
c0013e09:	e8 a0 fd ff ff       	call   c0013bae <Device::findAndLoadDriver()>
c0013e0e:	83 c4 10             	add    esp,0x10
c0013e11:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e17:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e1a:	74 12                	je     c0013e2e <Device::loadDriversForAll()+0x3a>
c0013e1c:	83 ec 0c             	sub    esp,0xc
c0013e1f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e22:	e8 cd ff ff ff       	call   c0013df4 <Device::loadDriversForAll()>
c0013e27:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e29:	83 c4 10             	add    esp,0x10
c0013e2c:	eb e9                	jmp    c0013e17 <Device::loadDriversForAll()+0x23>
c0013e2e:	83 c4 08             	add    esp,0x8
c0013e31:	5b                   	pop    ebx
c0013e32:	c3                   	ret    
c0013e33:	90                   	nop

c0013e34 <Device::closeAll()>:
c0013e34:	53                   	push   ebx
c0013e35:	83 ec 08             	sub    esp,0x8
c0013e38:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013e3c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e3e:	6a 00                	push   0x0
c0013e40:	6a 00                	push   0x0
c0013e42:	6a 00                	push   0x0
c0013e44:	53                   	push   ebx
c0013e45:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013e48:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e4e:	83 c4 10             	add    esp,0x10
c0013e51:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e54:	74 0f                	je     c0013e65 <Device::closeAll()+0x31>
c0013e56:	83 ec 0c             	sub    esp,0xc
c0013e59:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e5c:	e8 d3 ff ff ff       	call   c0013e34 <Device::closeAll()>
c0013e61:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e63:	eb e9                	jmp    c0013e4e <Device::closeAll()+0x1a>
c0013e65:	83 c4 08             	add    esp,0x8
c0013e68:	5b                   	pop    ebx
c0013e69:	c3                   	ret    

c0013e6a <Device::powerSavingAll(PowerSavingLevel)>:
c0013e6a:	56                   	push   esi
c0013e6b:	53                   	push   ebx
c0013e6c:	83 ec 0c             	sub    esp,0xc
c0013e6f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013e73:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013e77:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e79:	56                   	push   esi
c0013e7a:	53                   	push   ebx
c0013e7b:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013e7e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e84:	83 c4 10             	add    esp,0x10
c0013e87:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e8a:	74 0f                	je     c0013e9b <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013e8c:	52                   	push   edx
c0013e8d:	52                   	push   edx
c0013e8e:	56                   	push   esi
c0013e8f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e92:	e8 d3 ff ff ff       	call   c0013e6a <Device::powerSavingAll(PowerSavingLevel)>
c0013e97:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e99:	eb e9                	jmp    c0013e84 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013e9b:	58                   	pop    eax
c0013e9c:	5b                   	pop    ebx
c0013e9d:	5e                   	pop    esi
c0013e9e:	c3                   	ret    
c0013e9f:	90                   	nop

c0013ea0 <Device::setName(char const*)>:
c0013ea0:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013ea8:	e9 5f c9 fe ff       	jmp    c000080c <strcpy>
c0013ead:	90                   	nop

c0013eae <Device::Device(char const*)>:
c0013eae:	83 ec 1c             	sub    esp,0x1c
c0013eb1:	ba 10 b0 02 c0       	mov    edx,0xc002b010
c0013eb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013eba:	89 10                	mov    DWORD PTR [eax],edx
c0013ebc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ec0:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013eca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ece:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013ed8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013edc:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013ee6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013eea:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013ef4:	83 ec 08             	sub    esp,0x8
c0013ef7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013efb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013eff:	e8 9c ff ff ff       	call   c0013ea0 <Device::setName(char const*)>
c0013f04:	83 c4 10             	add    esp,0x10
c0013f07:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013f0f:	83 ec 0c             	sub    esp,0xc
c0013f12:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f16:	e8 fe b8 ff ff       	call   c000f819 <malloc>
c0013f1b:	83 c4 10             	add    esp,0x10
c0013f1e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013f24:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013f2b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013f2f:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013f35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f39:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013f3f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013f45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f49:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013f4f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013f56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f5a:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f65:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f70:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013f7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f7e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013f88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f8c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013f96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f9a:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0013fa4:	90                   	nop
c0013fa5:	83 c4 1c             	add    esp,0x1c
c0013fa8:	c3                   	ret    
c0013fa9:	90                   	nop

c0013faa <Device::getName()>:
c0013faa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013fae:	05 d0 00 00 00       	add    eax,0xd0
c0013fb3:	c3                   	ret    

c0013fb4 <DriverlessDevice::DriverlessDevice(char const*)>:
c0013fb4:	83 ec 0c             	sub    esp,0xc
c0013fb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fbb:	83 ec 08             	sub    esp,0x8
c0013fbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013fc2:	50                   	push   eax
c0013fc3:	e8 e6 fe ff ff       	call   c0013eae <Device::Device(char const*)>
c0013fc8:	83 c4 10             	add    esp,0x10
c0013fcb:	ba 3c b0 02 c0       	mov    edx,0xc002b03c
c0013fd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fd4:	89 10                	mov    DWORD PTR [eax],edx
c0013fd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fda:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013fe4:	90                   	nop
c0013fe5:	83 c4 0c             	add    esp,0xc
c0013fe8:	c3                   	ret    
c0013fe9:	90                   	nop

c0013fea <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013fea:	57                   	push   edi
c0013feb:	56                   	push   esi
c0013fec:	53                   	push   ebx
c0013fed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013ff1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013ff5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013ff9:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0013fff:	75 0c                	jne    c001400d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0014001:	52                   	push   edx
c0014002:	52                   	push   edx
c0014003:	53                   	push   ebx
c0014004:	56                   	push   esi
c0014005:	e8 a6 4a 01 00       	call   c0028ab0 <LinkedList<Device>::addElement(Device*)>
c001400a:	83 c4 10             	add    esp,0x10
c001400d:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014013:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014016:	74 12                	je     c001402a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0014018:	50                   	push   eax
c0014019:	57                   	push   edi
c001401a:	56                   	push   esi
c001401b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001401e:	e8 c7 ff ff ff       	call   c0013fea <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014023:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014025:	83 c4 10             	add    esp,0x10
c0014028:	eb e9                	jmp    c0014013 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c001402a:	5b                   	pop    ebx
c001402b:	5e                   	pop    esi
c001402c:	5f                   	pop    edi
c001402d:	c3                   	ret    

c001402e <getDevicesOfType(DeviceType)>:
c001402e:	53                   	push   ebx
c001402f:	83 ec 14             	sub    esp,0x14
c0014032:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014036:	53                   	push   ebx
c0014037:	e8 50 4b 01 00       	call   c0028b8c <LinkedList<Device>::LinkedList()>
c001403c:	83 c4 0c             	add    esp,0xc
c001403f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014043:	53                   	push   ebx
c0014044:	ff 35 28 e2 02 c0    	push   DWORD PTR ds:0xc002e228
c001404a:	e8 9b ff ff ff       	call   c0013fea <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001404f:	89 d8                	mov    eax,ebx
c0014051:	83 c4 18             	add    esp,0x18
c0014054:	5b                   	pop    ebx
c0014055:	c2 04 00             	ret    0x4

c0014058 <HardDiskController::HardDiskController(char const*)>:
c0014058:	83 ec 0c             	sub    esp,0xc
c001405b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001405f:	83 ec 08             	sub    esp,0x8
c0014062:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014066:	50                   	push   eax
c0014067:	e8 42 fe ff ff       	call   c0013eae <Device::Device(char const*)>
c001406c:	83 c4 10             	add    esp,0x10
c001406f:	ba 68 b0 02 c0       	mov    edx,0xc002b068
c0014074:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014078:	89 10                	mov    DWORD PTR [eax],edx
c001407a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001407e:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0014088:	90                   	nop
c0014089:	83 c4 0c             	add    esp,0xc
c001408c:	c3                   	ret    
c001408d:	90                   	nop

c001408e <HardDiskController::~HardDiskController()>:
c001408e:	83 ec 0c             	sub    esp,0xc
c0014091:	ba 68 b0 02 c0       	mov    edx,0xc002b068
c0014096:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001409a:	89 10                	mov    DWORD PTR [eax],edx
c001409c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140a0:	83 ec 0c             	sub    esp,0xc
c00140a3:	50                   	push   eax
c00140a4:	e8 cf fa ff ff       	call   c0013b78 <Device::~Device()>
c00140a9:	83 c4 10             	add    esp,0x10
c00140ac:	90                   	nop
c00140ad:	83 c4 0c             	add    esp,0xc
c00140b0:	c3                   	ret    
c00140b1:	90                   	nop

c00140b2 <HardDiskController::~HardDiskController()>:
c00140b2:	83 ec 0c             	sub    esp,0xc
c00140b5:	83 ec 0c             	sub    esp,0xc
c00140b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140bc:	e8 cd ff ff ff       	call   c001408e <HardDiskController::~HardDiskController()>
c00140c1:	83 c4 10             	add    esp,0x10
c00140c4:	83 ec 08             	sub    esp,0x8
c00140c7:	68 58 01 00 00       	push   0x158
c00140cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140d0:	e8 c4 e6 ff ff       	call   c0012799 <operator delete(void*, unsigned long)>
c00140d5:	83 c4 10             	add    esp,0x10
c00140d8:	83 c4 0c             	add    esp,0xc
c00140db:	c3                   	ret    

c00140dc <PhysicalDisk::eject()>:
c00140dc:	83 c8 ff             	or     eax,0xffffffff
c00140df:	c3                   	ret    

c00140e0 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c00140e0:	83 ec 0c             	sub    esp,0xc
c00140e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140e7:	83 ec 08             	sub    esp,0x8
c00140ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140ee:	50                   	push   eax
c00140ef:	e8 ba fd ff ff       	call   c0013eae <Device::Device(char const*)>
c00140f4:	83 c4 10             	add    esp,0x10
c00140f7:	ba 94 b0 02 c0       	mov    edx,0xc002b094
c00140fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014100:	89 10                	mov    DWORD PTR [eax],edx
c0014102:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014106:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001410d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014111:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0014118:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001411c:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0014126:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001412a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001412e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0014134:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014138:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014142:	90                   	nop
c0014143:	83 c4 0c             	add    esp,0xc
c0014146:	c3                   	ret    
c0014147:	90                   	nop

c0014148 <PhysicalDisk::startCache()>:
c0014148:	56                   	push   esi
c0014149:	53                   	push   ebx
c001414a:	83 ec 10             	sub    esp,0x10
c001414d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014151:	6a 44                	push   0x44
c0014153:	e8 c1 b6 ff ff       	call   c000f819 <malloc>
c0014158:	89 c6                	mov    esi,eax
c001415a:	58                   	pop    eax
c001415b:	5a                   	pop    edx
c001415c:	53                   	push   ebx
c001415d:	56                   	push   esi
c001415e:	e8 77 28 00 00       	call   c00169da <VCache::VCache(PhysicalDisk*)>
c0014163:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0014169:	83 c4 14             	add    esp,0x14
c001416c:	5b                   	pop    ebx
c001416d:	5e                   	pop    esi
c001416e:	c3                   	ret    
c001416f:	90                   	nop

c0014170 <PhysicalDisk::~PhysicalDisk()>:
c0014170:	83 ec 0c             	sub    esp,0xc
c0014173:	ba 94 b0 02 c0       	mov    edx,0xc002b094
c0014178:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001417c:	89 10                	mov    DWORD PTR [eax],edx
c001417e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014182:	83 ec 0c             	sub    esp,0xc
c0014185:	50                   	push   eax
c0014186:	e8 ed f9 ff ff       	call   c0013b78 <Device::~Device()>
c001418b:	83 c4 10             	add    esp,0x10
c001418e:	90                   	nop
c001418f:	83 c4 0c             	add    esp,0xc
c0014192:	c3                   	ret    
c0014193:	90                   	nop

c0014194 <PhysicalDisk::~PhysicalDisk()>:
c0014194:	83 ec 0c             	sub    esp,0xc
c0014197:	83 ec 0c             	sub    esp,0xc
c001419a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001419e:	e8 cd ff ff ff       	call   c0014170 <PhysicalDisk::~PhysicalDisk()>
c00141a3:	83 c4 10             	add    esp,0x10
c00141a6:	83 ec 08             	sub    esp,0x8
c00141a9:	68 6c 01 00 00       	push   0x16c
c00141ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141b2:	e8 e2 e5 ff ff       	call   c0012799 <operator delete(void*, unsigned long)>
c00141b7:	83 c4 10             	add    esp,0x10
c00141ba:	83 c4 0c             	add    esp,0xc
c00141bd:	c3                   	ret    

c00141be <FPU::FPU(char const*)>:
c00141be:	83 ec 0c             	sub    esp,0xc
c00141c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141c5:	83 ec 08             	sub    esp,0x8
c00141c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141cc:	50                   	push   eax
c00141cd:	e8 dc fc ff ff       	call   c0013eae <Device::Device(char const*)>
c00141d2:	83 c4 10             	add    esp,0x10
c00141d5:	ba d8 b0 02 c0       	mov    edx,0xc002b0d8
c00141da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141de:	89 10                	mov    DWORD PTR [eax],edx
c00141e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141e4:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c00141ee:	90                   	nop
c00141ef:	83 c4 0c             	add    esp,0xc
c00141f2:	c3                   	ret    
c00141f3:	90                   	nop

c00141f4 <FPU::~FPU()>:
c00141f4:	83 ec 0c             	sub    esp,0xc
c00141f7:	ba d8 b0 02 c0       	mov    edx,0xc002b0d8
c00141fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014200:	89 10                	mov    DWORD PTR [eax],edx
c0014202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014206:	83 ec 0c             	sub    esp,0xc
c0014209:	50                   	push   eax
c001420a:	e8 69 f9 ff ff       	call   c0013b78 <Device::~Device()>
c001420f:	83 c4 10             	add    esp,0x10
c0014212:	90                   	nop
c0014213:	83 c4 0c             	add    esp,0xc
c0014216:	c3                   	ret    
c0014217:	90                   	nop

c0014218 <FPU::~FPU()>:
c0014218:	83 ec 0c             	sub    esp,0xc
c001421b:	83 ec 0c             	sub    esp,0xc
c001421e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014222:	e8 cd ff ff ff       	call   c00141f4 <FPU::~FPU()>
c0014227:	83 c4 10             	add    esp,0x10
c001422a:	83 ec 08             	sub    esp,0x8
c001422d:	68 58 01 00 00       	push   0x158
c0014232:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014236:	e8 5e e5 ff ff       	call   c0012799 <operator delete(void*, unsigned long)>
c001423b:	83 c4 10             	add    esp,0x10
c001423e:	83 c4 0c             	add    esp,0xc
c0014241:	c3                   	ret    

c0014242 <setupFPU()>:
c0014242:	53                   	push   ebx
c0014243:	83 ec 08             	sub    esp,0x8
c0014246:	8b 15 28 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e228
c001424c:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0014253:	74 19                	je     c001426e <setupFPU()+0x2c>
c0014255:	83 ec 0c             	sub    esp,0xc
c0014258:	68 58 01 00 00       	push   0x158
c001425d:	e8 b7 b5 ff ff       	call   c000f819 <malloc>
c0014262:	89 c3                	mov    ebx,eax
c0014264:	89 04 24             	mov    DWORD PTR [esp],eax
c0014267:	e8 88 14 01 00       	call   c00256f4 <AVX::AVX()>
c001426c:	eb 5b                	jmp    c00142c9 <setupFPU()+0x87>
c001426e:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0014274:	84 c0                	test   al,al
c0014276:	79 19                	jns    c0014291 <setupFPU()+0x4f>
c0014278:	83 ec 0c             	sub    esp,0xc
c001427b:	68 58 01 00 00       	push   0x158
c0014280:	e8 94 b5 ff ff       	call   c000f819 <malloc>
c0014285:	89 c3                	mov    ebx,eax
c0014287:	89 04 24             	mov    DWORD PTR [esp],eax
c001428a:	e8 8b 15 01 00       	call   c002581a <SSE::SSE()>
c001428f:	eb 38                	jmp    c00142c9 <setupFPU()+0x87>
c0014291:	a8 20                	test   al,0x20
c0014293:	74 19                	je     c00142ae <setupFPU()+0x6c>
c0014295:	83 ec 0c             	sub    esp,0xc
c0014298:	68 58 01 00 00       	push   0x158
c001429d:	e8 77 b5 ff ff       	call   c000f819 <malloc>
c00142a2:	89 c3                	mov    ebx,eax
c00142a4:	89 04 24             	mov    DWORD PTR [esp],eax
c00142a7:	e8 d8 14 01 00       	call   c0025784 <MMX::MMX()>
c00142ac:	eb 1b                	jmp    c00142c9 <setupFPU()+0x87>
c00142ae:	a8 10                	test   al,0x10
c00142b0:	74 1c                	je     c00142ce <setupFPU()+0x8c>
c00142b2:	83 ec 0c             	sub    esp,0xc
c00142b5:	68 58 01 00 00       	push   0x158
c00142ba:	e8 5a b5 ff ff       	call   c000f819 <malloc>
c00142bf:	89 c3                	mov    ebx,eax
c00142c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00142c4:	e8 df 15 01 00       	call   c00258a8 <x87::x87()>
c00142c9:	83 c4 10             	add    esp,0x10
c00142cc:	eb 24                	jmp    c00142f2 <setupFPU()+0xb0>
c00142ce:	83 e0 ef             	and    eax,0xffffffef
c00142d1:	83 ec 0c             	sub    esp,0xc
c00142d4:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00142da:	68 c4 b0 02 c0       	push   0xc002b0c4
c00142df:	e8 8d e5 ff ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c00142e4:	0f 20 c0             	mov    eax,cr0
c00142e7:	83 c8 04             	or     eax,0x4
c00142ea:	0f 22 c0             	mov    cr0,eax
c00142ed:	31 db                	xor    ebx,ebx
c00142ef:	83 c4 10             	add    esp,0x10
c00142f2:	89 d8                	mov    eax,ebx
c00142f4:	83 c4 08             	add    esp,0x8
c00142f7:	5b                   	pop    ebx
c00142f8:	c3                   	ret    
c00142f9:	90                   	nop

c00142fa <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c00142fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00142fe:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014302:	c1 e0 04             	shl    eax,0x4
c0014305:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014309:	8d 50 10             	lea    edx,[eax+0x10]
c001430c:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014312:	74 08                	je     c001431c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014314:	83 c0 04             	add    eax,0x4
c0014317:	39 d0                	cmp    eax,edx
c0014319:	75 f1                	jne    c001430c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c001431b:	c3                   	ret    
c001431c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014326:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014330:	eb e2                	jmp    c0014314 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014332 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014332:	57                   	push   edi
c0014333:	31 c0                	xor    eax,eax
c0014335:	56                   	push   esi
c0014336:	53                   	push   ebx
c0014337:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001433b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001433f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014343:	89 da                	mov    edx,ebx
c0014345:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014349:	c1 e2 04             	shl    edx,0x4
c001434c:	01 ca                	add    edx,ecx
c001434e:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014356:	74 16                	je     c001436e <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0014358:	40                   	inc    eax
c0014359:	83 f8 04             	cmp    eax,0x4
c001435c:	75 f0                	jne    c001434e <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c001435e:	c7 44 24 10 08 b1 02 c0 	mov    DWORD PTR [esp+0x10],0xc002b108
c0014366:	5b                   	pop    ebx
c0014367:	5e                   	pop    esi
c0014368:	5f                   	pop    edi
c0014369:	e9 cf 5d 00 00       	jmp    c001a13d <Krnl::panic(char const*)>
c001436e:	8d 04 98             	lea    eax,[eax+ebx*4]
c0014371:	8d 04 81             	lea    eax,[ecx+eax*4]
c0014374:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c001437a:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014380:	5b                   	pop    ebx
c0014381:	5e                   	pop    esi
c0014382:	5f                   	pop    edi
c0014383:	c3                   	ret    

c0014384 <doubleFault(regs*, void*)>:
c0014384:	55                   	push   ebp
c0014385:	89 e5                	mov    ebp,esp
c0014387:	83 ec 08             	sub    esp,0x8
c001438a:	83 ec 0c             	sub    esp,0xc
c001438d:	68 15 b1 02 c0       	push   0xc002b115
c0014392:	e8 a6 5d 00 00       	call   c001a13d <Krnl::panic(char const*)>
c0014397:	83 c4 10             	add    esp,0x10
c001439a:	90                   	nop
c001439b:	c9                   	leave  
c001439c:	c3                   	ret    
c001439d:	90                   	nop

c001439e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001439e:	56                   	push   esi
c001439f:	53                   	push   ebx
c00143a0:	50                   	push   eax
c00143a1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00143a5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00143a9:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00143ae:	75 35                	jne    c00143e5 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c00143b0:	8d 43 20             	lea    eax,[ebx+0x20]
c00143b3:	31 d2                	xor    edx,edx
c00143b5:	89 c1                	mov    ecx,eax
c00143b7:	c1 e1 04             	shl    ecx,0x4
c00143ba:	01 f1                	add    ecx,esi
c00143bc:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c00143c4:	74 3e                	je     c0014404 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c00143c6:	42                   	inc    edx
c00143c7:	83 fa 04             	cmp    edx,0x4
c00143ca:	75 f0                	jne    c00143bc <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c00143cc:	83 ec 0c             	sub    esp,0xc
c00143cf:	68 2f b1 02 c0       	push   0xc002b12f
c00143d4:	e8 64 5d 00 00       	call   c001a13d <Krnl::panic(char const*)>
c00143d9:	83 c4 10             	add    esp,0x10
c00143dc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00143e1:	5a                   	pop    edx
c00143e2:	5b                   	pop    ebx
c00143e3:	5e                   	pop    esi
c00143e4:	c3                   	ret    
c00143e5:	83 ec 0c             	sub    esp,0xc
c00143e8:	56                   	push   esi
c00143e9:	e8 bc fb ff ff       	call   c0013faa <Device::getName()>
c00143ee:	83 c4 10             	add    esp,0x10
c00143f1:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00143f4:	75 ba                	jne    c00143b0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00143f6:	83 fb 0f             	cmp    ebx,0xf
c00143f9:	7f 29                	jg     c0014424 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c00143fb:	0f b6 9b 80 d4 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd2b80]
c0014402:	eb ac                	jmp    c00143b0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014404:	8d 04 82             	lea    eax,[edx+eax*4]
c0014407:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001440b:	8d 04 86             	lea    eax,[esi+eax*4]
c001440e:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014414:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014418:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c001441e:	89 d8                	mov    eax,ebx
c0014420:	5a                   	pop    edx
c0014421:	5b                   	pop    ebx
c0014422:	5e                   	pop    esi
c0014423:	c3                   	ret    
c0014424:	83 ec 0c             	sub    esp,0xc
c0014427:	68 22 b1 02 c0       	push   0xc002b122
c001442c:	e8 0c 5d 00 00       	call   c001a13d <Krnl::panic(char const*)>
c0014431:	83 c4 10             	add    esp,0x10
c0014434:	e9 77 ff ff ff       	jmp    c00143b0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014439:	90                   	nop

c001443a <InterruptController::clearAllHandlers(int, bool)>:
c001443a:	56                   	push   esi
c001443b:	53                   	push   ebx
c001443c:	52                   	push   edx
c001443d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014441:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014445:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001444a:	75 61                	jne    c00144ad <InterruptController::clearAllHandlers(int, bool)+0x73>
c001444c:	8d 46 20             	lea    eax,[esi+0x20]
c001444f:	c1 e6 04             	shl    esi,0x4
c0014452:	c1 e0 04             	shl    eax,0x4
c0014455:	01 de                	add    esi,ebx
c0014457:	01 d8                	add    eax,ebx
c0014459:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014463:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c001446d:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014477:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014481:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c001448b:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014495:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c001449f:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c00144a9:	58                   	pop    eax
c00144aa:	5b                   	pop    ebx
c00144ab:	5e                   	pop    esi
c00144ac:	c3                   	ret    
c00144ad:	83 ec 0c             	sub    esp,0xc
c00144b0:	53                   	push   ebx
c00144b1:	e8 f4 fa ff ff       	call   c0013faa <Device::getName()>
c00144b6:	83 c4 10             	add    esp,0x10
c00144b9:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00144bc:	75 8e                	jne    c001444c <InterruptController::clearAllHandlers(int, bool)+0x12>
c00144be:	83 fe 0f             	cmp    esi,0xf
c00144c1:	7f 09                	jg     c00144cc <InterruptController::clearAllHandlers(int, bool)+0x92>
c00144c3:	0f b6 b6 80 d4 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd2b80]
c00144ca:	eb 80                	jmp    c001444c <InterruptController::clearAllHandlers(int, bool)+0x12>
c00144cc:	83 ec 0c             	sub    esp,0xc
c00144cf:	68 3c b1 02 c0       	push   0xc002b13c
c00144d4:	e8 64 5c 00 00       	call   c001a13d <Krnl::panic(char const*)>
c00144d9:	83 c4 10             	add    esp,0x10
c00144dc:	e9 6b ff ff ff       	jmp    c001444c <InterruptController::clearAllHandlers(int, bool)+0x12>
c00144e1:	90                   	nop

c00144e2 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c00144e2:	56                   	push   esi
c00144e3:	53                   	push   ebx
c00144e4:	52                   	push   edx
c00144e5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00144e9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00144ed:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00144f2:	75 3a                	jne    c001452e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c00144f4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00144f8:	8d 50 20             	lea    edx,[eax+0x20]
c00144fb:	c1 e2 04             	shl    edx,0x4
c00144fe:	8d 04 16             	lea    eax,[esi+edx*1]
c0014501:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014505:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c001450b:	74 0b                	je     c0014518 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c001450d:	83 c0 04             	add    eax,0x4
c0014510:	39 d0                	cmp    eax,edx
c0014512:	75 f1                	jne    c0014505 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014514:	58                   	pop    eax
c0014515:	5b                   	pop    ebx
c0014516:	5e                   	pop    esi
c0014517:	c3                   	ret    
c0014518:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014522:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c001452c:	eb df                	jmp    c001450d <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c001452e:	83 ec 0c             	sub    esp,0xc
c0014531:	56                   	push   esi
c0014532:	e8 73 fa ff ff       	call   c0013faa <Device::getName()>
c0014537:	83 c4 10             	add    esp,0x10
c001453a:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001453d:	75 b5                	jne    c00144f4 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c001453f:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014544:	7f 11                	jg     c0014557 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014546:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001454a:	0f b6 80 80 d4 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd2b80]
c0014551:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014555:	eb 9d                	jmp    c00144f4 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014557:	83 ec 0c             	sub    esp,0xc
c001455a:	68 49 b1 02 c0       	push   0xc002b149
c001455f:	e8 d9 5b 00 00       	call   c001a13d <Krnl::panic(char const*)>
c0014564:	83 c4 10             	add    esp,0x10
c0014567:	eb 8b                	jmp    c00144f4 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014569 <nmiHandler(regs*, void*)>:
c0014569:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c001456e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014572:	e9 09 aa ff ff       	jmp    c000ef80 <Computer::handleNMI()>

c0014577 <int_handler>:
c0014577:	55                   	push   ebp
c0014578:	57                   	push   edi
c0014579:	56                   	push   esi
c001457a:	53                   	push   ebx
c001457b:	83 ec 0c             	sub    esp,0xc
c001457e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014582:	80 3d 44 ed 02 c0 00 	cmp    BYTE PTR ds:0xc002ed44,0x0
c0014589:	74 0b                	je     c0014596 <int_handler+0x1f>
c001458b:	fa                   	cli    
c001458c:	f4                   	hlt    
c001458d:	80 3d 44 ed 02 c0 00 	cmp    BYTE PTR ds:0xc002ed44,0x0
c0014594:	75 f5                	jne    c001458b <int_handler+0x14>
c0014596:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c001459b:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c001459e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00145a4:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c00145aa:	8d 43 e0             	lea    eax,[ebx-0x20]
c00145ad:	83 f8 17             	cmp    eax,0x17
c00145b0:	77 13                	ja     c00145c5 <int_handler+0x4e>
c00145b2:	83 ec 08             	sub    esp,0x8
c00145b5:	8b 17                	mov    edx,DWORD PTR [edi]
c00145b7:	8d 43 e0             	lea    eax,[ebx-0x20]
c00145ba:	0f b6 c0             	movzx  eax,al
c00145bd:	50                   	push   eax
c00145be:	57                   	push   edi
c00145bf:	ff 52 38             	call   DWORD PTR [edx+0x38]
c00145c2:	83 c4 10             	add    esp,0x10
c00145c5:	83 c3 15             	add    ebx,0x15
c00145c8:	c1 e3 04             	shl    ebx,0x4
c00145cb:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c00145cf:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c00145d6:	31 db                	xor    ebx,ebx
c00145d8:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c00145dc:	85 c0                	test   eax,eax
c00145de:	74 13                	je     c00145f3 <int_handler+0x7c>
c00145e0:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c00145e3:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c00145e7:	74 1c                	je     c0014605 <int_handler+0x8e>
c00145e9:	83 ec 08             	sub    esp,0x8
c00145ec:	52                   	push   edx
c00145ed:	56                   	push   esi
c00145ee:	ff d0                	call   eax
c00145f0:	83 c4 10             	add    esp,0x10
c00145f3:	43                   	inc    ebx
c00145f4:	83 fb 04             	cmp    ebx,0x4
c00145f7:	75 df                	jne    c00145d8 <int_handler+0x61>
c00145f9:	83 c4 0c             	add    esp,0xc
c00145fc:	31 c0                	xor    eax,eax
c00145fe:	5b                   	pop    ebx
c00145ff:	31 d2                	xor    edx,edx
c0014601:	5e                   	pop    esi
c0014602:	5f                   	pop    edi
c0014603:	5d                   	pop    ebp
c0014604:	c3                   	ret    
c0014605:	83 ec 08             	sub    esp,0x8
c0014608:	52                   	push   edx
c0014609:	56                   	push   esi
c001460a:	ff d0                	call   eax
c001460c:	83 c4 10             	add    esp,0x10
c001460f:	83 c4 0c             	add    esp,0xc
c0014612:	5b                   	pop    ebx
c0014613:	5e                   	pop    esi
c0014614:	5f                   	pop    edi
c0014615:	5d                   	pop    ebp
c0014616:	c3                   	ret    
c0014617:	90                   	nop

c0014618 <InterruptController::InterruptController(char const*)>:
c0014618:	83 ec 1c             	sub    esp,0x1c
c001461b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001461f:	83 ec 08             	sub    esp,0x8
c0014622:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014626:	50                   	push   eax
c0014627:	e8 82 f8 ff ff       	call   c0013eae <Device::Device(char const*)>
c001462c:	83 c4 10             	add    esp,0x10
c001462f:	ba 10 b4 02 c0       	mov    edx,0xc002b410
c0014634:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014638:	89 10                	mov    DWORD PTR [eax],edx
c001463a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001463e:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014648:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014650:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014658:	7f 5e                	jg     c00146b8 <InterruptController::InterruptController(char const*)+0xa0>
c001465a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014662:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014667:	7f 49                	jg     c00146b2 <InterruptController::InterruptController(char const*)+0x9a>
c0014669:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001466d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014671:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014678:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001467c:	01 ca                	add    edx,ecx
c001467e:	83 c2 54             	add    edx,0x54
c0014681:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014689:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001468d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014691:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014698:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001469c:	01 ca                	add    edx,ecx
c001469e:	81 c2 54 04 00 00    	add    edx,0x454
c00146a4:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00146ac:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00146b0:	eb b0                	jmp    c0014662 <InterruptController::InterruptController(char const*)+0x4a>
c00146b2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00146b6:	eb 98                	jmp    c0014650 <InterruptController::InterruptController(char const*)+0x38>
c00146b8:	90                   	nop
c00146b9:	83 c4 1c             	add    esp,0x1c
c00146bc:	c3                   	ret    
c00146bd:	90                   	nop

c00146be <InterruptController::~InterruptController()>:
c00146be:	83 ec 0c             	sub    esp,0xc
c00146c1:	ba 10 b4 02 c0       	mov    edx,0xc002b410
c00146c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146ca:	89 10                	mov    DWORD PTR [eax],edx
c00146cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146d0:	83 ec 0c             	sub    esp,0xc
c00146d3:	50                   	push   eax
c00146d4:	e8 9f f4 ff ff       	call   c0013b78 <Device::~Device()>
c00146d9:	83 c4 10             	add    esp,0x10
c00146dc:	90                   	nop
c00146dd:	83 c4 0c             	add    esp,0xc
c00146e0:	c3                   	ret    
c00146e1:	90                   	nop

c00146e2 <InterruptController::~InterruptController()>:
c00146e2:	83 ec 0c             	sub    esp,0xc
c00146e5:	83 ec 0c             	sub    esp,0xc
c00146e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146ec:	e8 cd ff ff ff       	call   c00146be <InterruptController::~InterruptController()>
c00146f1:	83 c4 10             	add    esp,0x10
c00146f4:	83 ec 08             	sub    esp,0x8
c00146f7:	68 58 21 00 00       	push   0x2158
c00146fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014700:	e8 94 e0 ff ff       	call   c0012799 <operator delete(void*, unsigned long)>
c0014705:	83 c4 10             	add    esp,0x10
c0014708:	83 c4 0c             	add    esp,0xc
c001470b:	c3                   	ret    

c001470c <displayDebugInfo(regs*)>:
c001470c:	55                   	push   ebp
c001470d:	57                   	push   edi
c001470e:	56                   	push   esi
c001470f:	53                   	push   ebx
c0014710:	83 ec 24             	sub    esp,0x24
c0014713:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014717:	0f 20 c2             	mov    edx,cr0
c001471a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001471e:	0f 20 d7             	mov    edi,cr2
c0014721:	0f 20 de             	mov    esi,cr3
c0014724:	0f 20 e5             	mov    ebp,cr4
c0014727:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001472a:	68 56 b1 02 c0       	push   0xc002b156
c001472f:	e8 3d e1 ff ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c0014734:	59                   	pop    ecx
c0014735:	58                   	pop    eax
c0014736:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014739:	68 61 b1 02 c0       	push   0xc002b161
c001473e:	e8 2e e1 ff ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c0014743:	58                   	pop    eax
c0014744:	5a                   	pop    edx
c0014745:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014748:	68 6c b1 02 c0       	push   0xc002b16c
c001474d:	e8 1f e1 ff ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c0014752:	59                   	pop    ecx
c0014753:	58                   	pop    eax
c0014754:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014757:	68 77 b1 02 c0       	push   0xc002b177
c001475c:	e8 10 e1 ff ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c0014761:	58                   	pop    eax
c0014762:	5a                   	pop    edx
c0014763:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014766:	68 82 b1 02 c0       	push   0xc002b182
c001476b:	e8 01 e1 ff ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c0014770:	59                   	pop    ecx
c0014771:	58                   	pop    eax
c0014772:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014775:	68 8d b1 02 c0       	push   0xc002b18d
c001477a:	e8 f2 e0 ff ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c001477f:	58                   	pop    eax
c0014780:	5a                   	pop    edx
c0014781:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014784:	68 98 b1 02 c0       	push   0xc002b198
c0014789:	e8 e3 e0 ff ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c001478e:	59                   	pop    ecx
c001478f:	58                   	pop    eax
c0014790:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014793:	68 a3 b1 02 c0       	push   0xc002b1a3
c0014798:	e8 d4 e0 ff ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c001479d:	58                   	pop    eax
c001479e:	5a                   	pop    edx
c001479f:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00147a2:	68 ae b1 02 c0       	push   0xc002b1ae
c00147a7:	e8 c5 e0 ff ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c00147ac:	59                   	pop    ecx
c00147ad:	58                   	pop    eax
c00147ae:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00147b1:	68 bd b1 02 c0       	push   0xc002b1bd
c00147b6:	e8 b6 e0 ff ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c00147bb:	58                   	pop    eax
c00147bc:	5a                   	pop    edx
c00147bd:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00147c0:	68 c8 b1 02 c0       	push   0xc002b1c8
c00147c5:	e8 a7 e0 ff ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c00147ca:	59                   	pop    ecx
c00147cb:	58                   	pop    eax
c00147cc:	57                   	push   edi
c00147cd:	68 d3 b1 02 c0       	push   0xc002b1d3
c00147d2:	e8 9a e0 ff ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c00147d7:	58                   	pop    eax
c00147d8:	5a                   	pop    edx
c00147d9:	56                   	push   esi
c00147da:	68 de b1 02 c0       	push   0xc002b1de
c00147df:	e8 8d e0 ff ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c00147e4:	59                   	pop    ecx
c00147e5:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c00147ea:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147f0:	e8 de bd ff ff       	call   c00105d3 <setActiveTerminal(VgaText*)>
c00147f5:	58                   	pop    eax
c00147f6:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00147f9:	5a                   	pop    edx
c00147fa:	c1 e0 05             	shl    eax,0x5
c00147fd:	05 e0 d1 02 c0       	add    eax,0xc002d1e0
c0014802:	50                   	push   eax
c0014803:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c0014808:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001480e:	e8 cd c2 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c0014813:	59                   	pop    ecx
c0014814:	58                   	pop    eax
c0014815:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c001481a:	68 e9 b1 02 c0       	push   0xc002b1e9
c001481f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014825:	e8 b6 c2 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c001482a:	58                   	pop    eax
c001482b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014830:	5a                   	pop    edx
c0014831:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014834:	83 c0 0c             	add    eax,0xc
c0014837:	50                   	push   eax
c0014838:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c001483d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014843:	e8 98 c2 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c0014848:	59                   	pop    ecx
c0014849:	58                   	pop    eax
c001484a:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c001484f:	68 f2 b1 02 c0       	push   0xc002b1f2
c0014854:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001485a:	e8 81 c2 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c001485f:	58                   	pop    eax
c0014860:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c0014865:	5a                   	pop    edx
c0014866:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014869:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001486f:	e8 26 c2 ff ff       	call   c0010a9a <VgaText::putx(unsigned int)>
c0014874:	59                   	pop    ecx
c0014875:	58                   	pop    eax
c0014876:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c001487b:	68 fa b1 02 c0       	push   0xc002b1fa
c0014880:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014886:	e8 55 c2 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c001488b:	58                   	pop    eax
c001488c:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c0014891:	5a                   	pop    edx
c0014892:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014895:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001489b:	e8 fa c1 ff ff       	call   c0010a9a <VgaText::putx(unsigned int)>
c00148a0:	59                   	pop    ecx
c00148a1:	58                   	pop    eax
c00148a2:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c00148a7:	68 02 b2 02 c0       	push   0xc002b202
c00148ac:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148b2:	e8 29 c2 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c00148b7:	58                   	pop    eax
c00148b8:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c00148bd:	5a                   	pop    edx
c00148be:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00148c1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148c7:	e8 ce c1 ff ff       	call   c0010a9a <VgaText::putx(unsigned int)>
c00148cc:	59                   	pop    ecx
c00148cd:	58                   	pop    eax
c00148ce:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c00148d3:	68 0a b2 02 c0       	push   0xc002b20a
c00148d8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148de:	e8 fd c1 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c00148e3:	58                   	pop    eax
c00148e4:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c00148e9:	5a                   	pop    edx
c00148ea:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00148ed:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148f3:	e8 a2 c1 ff ff       	call   c0010a9a <VgaText::putx(unsigned int)>
c00148f8:	59                   	pop    ecx
c00148f9:	58                   	pop    eax
c00148fa:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c00148ff:	68 12 b2 02 c0       	push   0xc002b212
c0014904:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001490a:	e8 d1 c1 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c001490f:	58                   	pop    eax
c0014910:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c0014915:	5a                   	pop    edx
c0014916:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014919:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001491f:	e8 76 c1 ff ff       	call   c0010a9a <VgaText::putx(unsigned int)>
c0014924:	59                   	pop    ecx
c0014925:	58                   	pop    eax
c0014926:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c001492b:	68 1a b2 02 c0       	push   0xc002b21a
c0014930:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014936:	e8 a5 c1 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c001493b:	58                   	pop    eax
c001493c:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c0014941:	5a                   	pop    edx
c0014942:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014945:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001494b:	e8 4a c1 ff ff       	call   c0010a9a <VgaText::putx(unsigned int)>
c0014950:	59                   	pop    ecx
c0014951:	58                   	pop    eax
c0014952:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c0014957:	68 22 b2 02 c0       	push   0xc002b222
c001495c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014962:	e8 79 c1 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c0014967:	58                   	pop    eax
c0014968:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c001496d:	5a                   	pop    edx
c001496e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014972:	52                   	push   edx
c0014973:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014979:	e8 1c c1 ff ff       	call   c0010a9a <VgaText::putx(unsigned int)>
c001497e:	59                   	pop    ecx
c001497f:	58                   	pop    eax
c0014980:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c0014985:	68 2b b2 02 c0       	push   0xc002b22b
c001498a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014990:	e8 4b c1 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c0014995:	58                   	pop    eax
c0014996:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c001499b:	5a                   	pop    edx
c001499c:	57                   	push   edi
c001499d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149a3:	e8 f2 c0 ff ff       	call   c0010a9a <VgaText::putx(unsigned int)>
c00149a8:	59                   	pop    ecx
c00149a9:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c00149ae:	5f                   	pop    edi
c00149af:	68 33 b2 02 c0       	push   0xc002b233
c00149b4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149ba:	e8 21 c1 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c00149bf:	58                   	pop    eax
c00149c0:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c00149c5:	5a                   	pop    edx
c00149c6:	56                   	push   esi
c00149c7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149cd:	e8 c8 c0 ff ff       	call   c0010a9a <VgaText::putx(unsigned int)>
c00149d2:	59                   	pop    ecx
c00149d3:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c00149d8:	5e                   	pop    esi
c00149d9:	68 3b b2 02 c0       	push   0xc002b23b
c00149de:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149e4:	e8 f7 c0 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c00149e9:	5f                   	pop    edi
c00149ea:	58                   	pop    eax
c00149eb:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c00149f0:	55                   	push   ebp
c00149f1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149f7:	e8 9e c0 ff ff       	call   c0010a9a <VgaText::putx(unsigned int)>
c00149fc:	58                   	pop    eax
c00149fd:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c0014a02:	5a                   	pop    edx
c0014a03:	68 43 b2 02 c0       	push   0xc002b243
c0014a08:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a0e:	e8 cd c0 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c0014a13:	0f 21 c0             	mov    eax,db0
c0014a16:	59                   	pop    ecx
c0014a17:	5e                   	pop    esi
c0014a18:	50                   	push   eax
c0014a19:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c0014a1e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a24:	e8 71 c0 ff ff       	call   c0010a9a <VgaText::putx(unsigned int)>
c0014a29:	5f                   	pop    edi
c0014a2a:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c0014a2f:	5d                   	pop    ebp
c0014a30:	68 4c b2 02 c0       	push   0xc002b24c
c0014a35:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a3b:	e8 a0 c0 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c0014a40:	0f 21 c8             	mov    eax,db1
c0014a43:	5a                   	pop    edx
c0014a44:	59                   	pop    ecx
c0014a45:	50                   	push   eax
c0014a46:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c0014a4b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a51:	e8 44 c0 ff ff       	call   c0010a9a <VgaText::putx(unsigned int)>
c0014a56:	5e                   	pop    esi
c0014a57:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c0014a5c:	5f                   	pop    edi
c0014a5d:	68 54 b2 02 c0       	push   0xc002b254
c0014a62:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a68:	e8 73 c0 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c0014a6d:	0f 21 d0             	mov    eax,db2
c0014a70:	5d                   	pop    ebp
c0014a71:	5a                   	pop    edx
c0014a72:	50                   	push   eax
c0014a73:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c0014a78:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a7e:	e8 17 c0 ff ff       	call   c0010a9a <VgaText::putx(unsigned int)>
c0014a83:	59                   	pop    ecx
c0014a84:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c0014a89:	5e                   	pop    esi
c0014a8a:	68 5c b2 02 c0       	push   0xc002b25c
c0014a8f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a95:	e8 46 c0 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c0014a9a:	0f 21 d8             	mov    eax,db3
c0014a9d:	5f                   	pop    edi
c0014a9e:	5d                   	pop    ebp
c0014a9f:	50                   	push   eax
c0014aa0:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c0014aa5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014aab:	e8 ea bf ff ff       	call   c0010a9a <VgaText::putx(unsigned int)>
c0014ab0:	58                   	pop    eax
c0014ab1:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c0014ab6:	5a                   	pop    edx
c0014ab7:	68 64 b2 02 c0       	push   0xc002b264
c0014abc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ac2:	e8 19 c0 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c0014ac7:	0f 21 f0             	mov    eax,db6
c0014aca:	59                   	pop    ecx
c0014acb:	5e                   	pop    esi
c0014acc:	50                   	push   eax
c0014acd:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c0014ad2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ad8:	e8 bd bf ff ff       	call   c0010a9a <VgaText::putx(unsigned int)>
c0014add:	5f                   	pop    edi
c0014ade:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c0014ae3:	5d                   	pop    ebp
c0014ae4:	68 6c b2 02 c0       	push   0xc002b26c
c0014ae9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014aef:	e8 ec bf ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c0014af4:	0f 21 f8             	mov    eax,db7
c0014af7:	5a                   	pop    edx
c0014af8:	59                   	pop    ecx
c0014af9:	50                   	push   eax
c0014afa:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c0014aff:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b05:	e8 90 bf ff ff       	call   c0010a9a <VgaText::putx(unsigned int)>
c0014b0a:	5e                   	pop    esi
c0014b0b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014b0e:	e8 a6 87 00 00       	call   c001d2b9 <Thr::getDriverNameFromAddress(unsigned long)>
c0014b13:	83 c4 10             	add    esp,0x10
c0014b16:	85 c0                	test   eax,eax
c0014b18:	74 7d                	je     c0014b97 <displayDebugInfo(regs*)+0x48b>
c0014b1a:	89 c6                	mov    esi,eax
c0014b1c:	50                   	push   eax
c0014b1d:	50                   	push   eax
c0014b1e:	56                   	push   esi
c0014b1f:	68 74 b2 02 c0       	push   0xc002b274
c0014b24:	e8 48 dd ff ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c0014b29:	5a                   	pop    edx
c0014b2a:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c0014b2f:	59                   	pop    ecx
c0014b30:	68 82 b2 02 c0       	push   0xc002b282
c0014b35:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b3b:	e8 a0 bf ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c0014b40:	5f                   	pop    edi
c0014b41:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c0014b46:	5d                   	pop    ebp
c0014b47:	56                   	push   esi
c0014b48:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b4e:	e8 8d bf ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c0014b53:	58                   	pop    eax
c0014b54:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c0014b59:	5a                   	pop    edx
c0014b5a:	68 8e b2 02 c0       	push   0xc002b28e
c0014b5f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b65:	e8 76 bf ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c0014b6a:	59                   	pop    ecx
c0014b6b:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c0014b70:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c0014b76:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014b79:	e8 72 87 00 00       	call   c001d2f0 <Thr::getDriverOffsetFromAddress(unsigned long)>
c0014b7e:	5b                   	pop    ebx
c0014b7f:	5d                   	pop    ebp
c0014b80:	50                   	push   eax
c0014b81:	57                   	push   edi
c0014b82:	e8 13 bf ff ff       	call   c0010a9a <VgaText::putx(unsigned int)>
c0014b87:	58                   	pop    eax
c0014b88:	5a                   	pop    edx
c0014b89:	56                   	push   esi
c0014b8a:	68 9a b2 02 c0       	push   0xc002b29a
c0014b8f:	e8 dd dc ff ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c0014b94:	83 c4 10             	add    esp,0x10
c0014b97:	fa                   	cli    
c0014b98:	f4                   	hlt    
c0014b99:	eb fe                	jmp    c0014b99 <displayDebugInfo(regs*)+0x48d>

c0014b9b <x87EmulHandler(regs*, void*)>:
c0014b9b:	83 ec 0c             	sub    esp,0xc
c0014b9e:	0f 20 c2             	mov    edx,cr0
c0014ba1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ba6:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c0014baa:	75 4b                	jne    c0014bf7 <x87EmulHandler(regs*, void*)+0x5c>
c0014bac:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c0014bb1:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c0014bb7:	85 c0                	test   eax,eax
c0014bb9:	74 05                	je     c0014bc0 <x87EmulHandler(regs*, void*)+0x25>
c0014bbb:	83 e2 08             	and    edx,0x8
c0014bbe:	75 17                	jne    c0014bd7 <x87EmulHandler(regs*, void*)+0x3c>
c0014bc0:	83 ec 0c             	sub    esp,0xc
c0014bc3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014bc7:	e8 d3 aa 00 00       	call   c001f69f <Vm::x87Handler(regs*)>
c0014bcc:	83 c4 10             	add    esp,0x10
c0014bcf:	84 c0                	test   al,al
c0014bd1:	74 24                	je     c0014bf7 <x87EmulHandler(regs*, void*)+0x5c>
c0014bd3:	83 c4 0c             	add    esp,0xc
c0014bd6:	c3                   	ret    
c0014bd7:	83 ec 0c             	sub    esp,0xc
c0014bda:	68 c0 b2 02 c0       	push   0xc002b2c0
c0014bdf:	e8 8d dc ff ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c0014be4:	0f 06                	clts   
c0014be6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014beb:	83 c4 10             	add    esp,0x10
c0014bee:	a3 a8 e3 02 c0       	mov    ds:0xc002e3a8,eax
c0014bf3:	83 c4 0c             	add    esp,0xc
c0014bf6:	c3                   	ret    
c0014bf7:	83 ec 0c             	sub    esp,0xc
c0014bfa:	68 aa b2 02 c0       	push   0xc002b2aa
c0014bff:	e8 6d dc ff ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c0014c04:	5a                   	pop    edx
c0014c05:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c09:	e8 fe fa ff ff       	call   c001470c <displayDebugInfo(regs*)>

c0014c0e <gpFault(regs*, void*)>:
c0014c0e:	53                   	push   ebx
c0014c0f:	83 ec 14             	sub    esp,0x14
c0014c12:	c7 05 a4 e3 02 c0 78 eb 01 c0 	mov    DWORD PTR ds:0xc002e3a4,0xc001eb78
c0014c1c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014c20:	53                   	push   ebx
c0014c21:	e8 52 9f 00 00       	call   c001eb78 <Vm::faultHandler(regs*)>
c0014c26:	83 c4 10             	add    esp,0x10
c0014c29:	84 c0                	test   al,al
c0014c2b:	74 05                	je     c0014c32 <gpFault(regs*, void*)+0x24>
c0014c2d:	83 c4 08             	add    esp,0x8
c0014c30:	5b                   	pop    ebx
c0014c31:	c3                   	ret    
c0014c32:	83 ec 0c             	sub    esp,0xc
c0014c35:	68 cd b2 02 c0       	push   0xc002b2cd
c0014c3a:	e8 32 dc ff ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c0014c3f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c42:	e8 c5 fa ff ff       	call   c001470c <displayDebugInfo(regs*)>

c0014c47 <pgFault(regs*, void*)>:
c0014c47:	53                   	push   ebx
c0014c48:	83 ec 10             	sub    esp,0x10
c0014c4b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014c4f:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014c52:	68 e8 b2 02 c0       	push   0xc002b2e8
c0014c57:	e8 15 dc ff ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c0014c5c:	0f 20 d0             	mov    eax,cr2
c0014c5f:	5a                   	pop    edx
c0014c60:	59                   	pop    ecx
c0014c61:	50                   	push   eax
c0014c62:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c67:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014c6a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0014c70:	e8 03 d7 ff ff       	call   c0012378 <VAS::tryLoadBackOffDisk(unsigned long)>
c0014c75:	83 c4 10             	add    esp,0x10
c0014c78:	84 c0                	test   al,al
c0014c7a:	74 05                	je     c0014c81 <pgFault(regs*, void*)+0x3a>
c0014c7c:	83 c4 08             	add    esp,0x8
c0014c7f:	5b                   	pop    ebx
c0014c80:	c3                   	ret    
c0014c81:	83 ec 0c             	sub    esp,0xc
c0014c84:	68 fd b2 02 c0       	push   0xc002b2fd
c0014c89:	e8 e3 db ff ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c0014c8e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c91:	e8 76 fa ff ff       	call   c001470c <displayDebugInfo(regs*)>

c0014c96 <otherISRHandler(regs*, void*)>:
c0014c96:	53                   	push   ebx
c0014c97:	83 ec 0c             	sub    esp,0xc
c0014c9a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014c9e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014ca1:	50                   	push   eax
c0014ca2:	50                   	push   eax
c0014ca3:	68 0a b3 02 c0       	push   0xc002b30a
c0014ca8:	e8 c4 db ff ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c0014cad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014cb0:	e8 57 fa ff ff       	call   c001470c <displayDebugInfo(regs*)>

c0014cb5 <opcodeFault(regs*, void*)>:
c0014cb5:	55                   	push   ebp
c0014cb6:	89 e5                	mov    ebp,esp
c0014cb8:	56                   	push   esi
c0014cb9:	53                   	push   ebx
c0014cba:	83 ec 40             	sub    esp,0x40
c0014cbd:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c0014cc2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014cc8:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014cce:	84 c0                	test   al,al
c0014cd0:	74 24                	je     c0014cf6 <opcodeFault(regs*, void*)+0x41>
c0014cd2:	83 ec 0c             	sub    esp,0xc
c0014cd5:	68 28 b3 02 c0       	push   0xc002b328
c0014cda:	e8 92 db ff ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c0014cdf:	83 c4 10             	add    esp,0x10
c0014ce2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ce5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ce8:	8d 50 19             	lea    edx,[eax+0x19]
c0014ceb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cee:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014cf1:	e9 d5 05 00 00       	jmp    c00152cb <opcodeFault(regs*, void*)+0x616>
c0014cf6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cf9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cfc:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014cff:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014d03:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014d07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d0a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d0d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014d10:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d13:	8a 00                	mov    al,BYTE PTR [eax]
c0014d15:	3c f0                	cmp    al,0xf0
c0014d17:	75 17                	jne    c0014d30 <opcodeFault(regs*, void*)+0x7b>
c0014d19:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d1f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d22:	8d 50 01             	lea    edx,[eax+0x1]
c0014d25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d28:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d2b:	e9 da 00 00 00       	jmp    c0014e0a <opcodeFault(regs*, void*)+0x155>
c0014d30:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d33:	8a 00                	mov    al,BYTE PTR [eax]
c0014d35:	3c f2                	cmp    al,0xf2
c0014d37:	74 09                	je     c0014d42 <opcodeFault(regs*, void*)+0x8d>
c0014d39:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d3c:	8a 00                	mov    al,BYTE PTR [eax]
c0014d3e:	3c f3                	cmp    al,0xf3
c0014d40:	75 1b                	jne    c0014d5d <opcodeFault(regs*, void*)+0xa8>
c0014d42:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014d46:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d4c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d4f:	8d 50 01             	lea    edx,[eax+0x1]
c0014d52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d55:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d58:	e9 ad 00 00 00       	jmp    c0014e0a <opcodeFault(regs*, void*)+0x155>
c0014d5d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d60:	8a 00                	mov    al,BYTE PTR [eax]
c0014d62:	3c 66                	cmp    al,0x66
c0014d64:	75 1f                	jne    c0014d85 <opcodeFault(regs*, void*)+0xd0>
c0014d66:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014d6a:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014d6e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d74:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d77:	8d 50 01             	lea    edx,[eax+0x1]
c0014d7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d7d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d80:	e9 85 00 00 00       	jmp    c0014e0a <opcodeFault(regs*, void*)+0x155>
c0014d85:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d88:	8a 00                	mov    al,BYTE PTR [eax]
c0014d8a:	3c 67                	cmp    al,0x67
c0014d8c:	75 18                	jne    c0014da6 <opcodeFault(regs*, void*)+0xf1>
c0014d8e:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014d92:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d98:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d9b:	8d 50 01             	lea    edx,[eax+0x1]
c0014d9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014da1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014da4:	eb 64                	jmp    c0014e0a <opcodeFault(regs*, void*)+0x155>
c0014da6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014da9:	8a 00                	mov    al,BYTE PTR [eax]
c0014dab:	3c 2e                	cmp    al,0x2e
c0014dad:	74 09                	je     c0014db8 <opcodeFault(regs*, void*)+0x103>
c0014daf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014db2:	8a 00                	mov    al,BYTE PTR [eax]
c0014db4:	3c 3e                	cmp    al,0x3e
c0014db6:	75 18                	jne    c0014dd0 <opcodeFault(regs*, void*)+0x11b>
c0014db8:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014dbc:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014dbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dc2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014dc5:	8d 50 01             	lea    edx,[eax+0x1]
c0014dc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dcb:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014dce:	eb 3a                	jmp    c0014e0a <opcodeFault(regs*, void*)+0x155>
c0014dd0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dd3:	8a 00                	mov    al,BYTE PTR [eax]
c0014dd5:	3c 36                	cmp    al,0x36
c0014dd7:	74 1b                	je     c0014df4 <opcodeFault(regs*, void*)+0x13f>
c0014dd9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ddc:	8a 00                	mov    al,BYTE PTR [eax]
c0014dde:	3c 26                	cmp    al,0x26
c0014de0:	74 12                	je     c0014df4 <opcodeFault(regs*, void*)+0x13f>
c0014de2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014de5:	8a 00                	mov    al,BYTE PTR [eax]
c0014de7:	3c 64                	cmp    al,0x64
c0014de9:	74 09                	je     c0014df4 <opcodeFault(regs*, void*)+0x13f>
c0014deb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dee:	8a 00                	mov    al,BYTE PTR [eax]
c0014df0:	3c 65                	cmp    al,0x65
c0014df2:	75 16                	jne    c0014e0a <opcodeFault(regs*, void*)+0x155>
c0014df4:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014df8:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014dfb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dfe:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e01:	8d 50 01             	lea    edx,[eax+0x1]
c0014e04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e07:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e0a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e0d:	8a 00                	mov    al,BYTE PTR [eax]
c0014e0f:	3c 0f                	cmp    al,0xf
c0014e11:	0f 85 ad 00 00 00    	jne    c0014ec4 <opcodeFault(regs*, void*)+0x20f>
c0014e17:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e1a:	40                   	inc    eax
c0014e1b:	8a 00                	mov    al,BYTE PTR [eax]
c0014e1d:	3c c2                	cmp    al,0xc2
c0014e1f:	74 0e                	je     c0014e2f <opcodeFault(regs*, void*)+0x17a>
c0014e21:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e24:	40                   	inc    eax
c0014e25:	8a 00                	mov    al,BYTE PTR [eax]
c0014e27:	3c c3                	cmp    al,0xc3
c0014e29:	0f 85 95 00 00 00    	jne    c0014ec4 <opcodeFault(regs*, void*)+0x20f>
c0014e2f:	83 ec 0c             	sub    esp,0xc
c0014e32:	68 4b b3 02 c0       	push   0xc002b34b
c0014e37:	e8 35 da ff ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c0014e3c:	83 c4 10             	add    esp,0x10
c0014e3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e42:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e45:	8d 50 01             	lea    edx,[eax+0x1]
c0014e48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e4b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e4e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014e51:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e54:	8a 00                	mov    al,BYTE PTR [eax]
c0014e56:	8d 50 fe             	lea    edx,[eax-0x2]
c0014e59:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e5c:	88 10                	mov    BYTE PTR [eax],dl
c0014e5e:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014e61:	50                   	push   eax
c0014e62:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014e65:	50                   	push   eax
c0014e66:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014e69:	50                   	push   eax
c0014e6a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014e6d:	e8 e4 49 00 00       	call   c0019856 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014e72:	83 c4 10             	add    esp,0x10
c0014e75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e78:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e7b:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014e7e:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014e81:	01 d0                	add    eax,edx
c0014e83:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014e86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e89:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e8c:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014e8f:	48                   	dec    eax
c0014e90:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014e93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e96:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014e99:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e9f:	83 ec 04             	sub    esp,0x4
c0014ea2:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014ea5:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014ea8:	50                   	push   eax
c0014ea9:	e8 06 b3 fe ff       	call   c00001b4 <voodooXADD>
c0014eae:	83 c4 10             	add    esp,0x10
c0014eb1:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014eb4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014eb7:	01 c2                	add    edx,eax
c0014eb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ebc:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ebf:	e9 07 04 00 00       	jmp    c00152cb <opcodeFault(regs*, void*)+0x616>
c0014ec4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ec7:	8a 00                	mov    al,BYTE PTR [eax]
c0014ec9:	3c 0f                	cmp    al,0xf
c0014ecb:	0f 85 8b 01 00 00    	jne    c001505c <opcodeFault(regs*, void*)+0x3a7>
c0014ed1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ed4:	40                   	inc    eax
c0014ed5:	8a 00                	mov    al,BYTE PTR [eax]
c0014ed7:	3c c7                	cmp    al,0xc7
c0014ed9:	0f 86 7d 01 00 00    	jbe    c001505c <opcodeFault(regs*, void*)+0x3a7>
c0014edf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ee2:	40                   	inc    eax
c0014ee3:	8a 00                	mov    al,BYTE PTR [eax]
c0014ee5:	3c cf                	cmp    al,0xcf
c0014ee7:	0f 87 6f 01 00 00    	ja     c001505c <opcodeFault(regs*, void*)+0x3a7>
c0014eed:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ef0:	40                   	inc    eax
c0014ef1:	8a 00                	mov    al,BYTE PTR [eax]
c0014ef3:	83 c0 38             	add    eax,0x38
c0014ef6:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014ef9:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014efd:	75 0b                	jne    c0014f0a <opcodeFault(regs*, void*)+0x255>
c0014eff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f02:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014f05:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f08:	eb 75                	jmp    c0014f7f <opcodeFault(regs*, void*)+0x2ca>
c0014f0a:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014f0e:	75 0b                	jne    c0014f1b <opcodeFault(regs*, void*)+0x266>
c0014f10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f13:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014f16:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f19:	eb 64                	jmp    c0014f7f <opcodeFault(regs*, void*)+0x2ca>
c0014f1b:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014f1f:	75 0b                	jne    c0014f2c <opcodeFault(regs*, void*)+0x277>
c0014f21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f24:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014f27:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f2a:	eb 53                	jmp    c0014f7f <opcodeFault(regs*, void*)+0x2ca>
c0014f2c:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014f30:	75 0b                	jne    c0014f3d <opcodeFault(regs*, void*)+0x288>
c0014f32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f35:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014f38:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f3b:	eb 42                	jmp    c0014f7f <opcodeFault(regs*, void*)+0x2ca>
c0014f3d:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014f41:	75 0b                	jne    c0014f4e <opcodeFault(regs*, void*)+0x299>
c0014f43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f46:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014f49:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f4c:	eb 31                	jmp    c0014f7f <opcodeFault(regs*, void*)+0x2ca>
c0014f4e:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014f52:	75 0b                	jne    c0014f5f <opcodeFault(regs*, void*)+0x2aa>
c0014f54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f57:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014f5a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f5d:	eb 20                	jmp    c0014f7f <opcodeFault(regs*, void*)+0x2ca>
c0014f5f:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014f63:	75 0b                	jne    c0014f70 <opcodeFault(regs*, void*)+0x2bb>
c0014f65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f68:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014f6b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f6e:	eb 0f                	jmp    c0014f7f <opcodeFault(regs*, void*)+0x2ca>
c0014f70:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014f74:	75 09                	jne    c0014f7f <opcodeFault(regs*, void*)+0x2ca>
c0014f76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f79:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014f7c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f7f:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014f83:	74 10                	je     c0014f95 <opcodeFault(regs*, void*)+0x2e0>
c0014f85:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014f8c:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014f93:	eb 2d                	jmp    c0014fc2 <opcodeFault(regs*, void*)+0x30d>
c0014f95:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014f98:	c1 e0 18             	shl    eax,0x18
c0014f9b:	89 c2                	mov    edx,eax
c0014f9d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014fa0:	c1 e0 08             	shl    eax,0x8
c0014fa3:	25 00 00 ff 00       	and    eax,0xff0000
c0014fa8:	09 c2                	or     edx,eax
c0014faa:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014fad:	c1 e8 08             	shr    eax,0x8
c0014fb0:	25 00 ff 00 00       	and    eax,0xff00
c0014fb5:	09 c2                	or     edx,eax
c0014fb7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014fba:	c1 e8 18             	shr    eax,0x18
c0014fbd:	09 d0                	or     eax,edx
c0014fbf:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014fc2:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014fc6:	75 0b                	jne    c0014fd3 <opcodeFault(regs*, void*)+0x31e>
c0014fc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fcb:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014fce:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014fd1:	eb 75                	jmp    c0015048 <opcodeFault(regs*, void*)+0x393>
c0014fd3:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014fd7:	75 0b                	jne    c0014fe4 <opcodeFault(regs*, void*)+0x32f>
c0014fd9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fdc:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014fdf:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014fe2:	eb 64                	jmp    c0015048 <opcodeFault(regs*, void*)+0x393>
c0014fe4:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014fe8:	75 0b                	jne    c0014ff5 <opcodeFault(regs*, void*)+0x340>
c0014fea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fed:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014ff0:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014ff3:	eb 53                	jmp    c0015048 <opcodeFault(regs*, void*)+0x393>
c0014ff5:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014ff9:	75 0b                	jne    c0015006 <opcodeFault(regs*, void*)+0x351>
c0014ffb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ffe:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015001:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0015004:	eb 42                	jmp    c0015048 <opcodeFault(regs*, void*)+0x393>
c0015006:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c001500a:	75 0b                	jne    c0015017 <opcodeFault(regs*, void*)+0x362>
c001500c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001500f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015012:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0015015:	eb 31                	jmp    c0015048 <opcodeFault(regs*, void*)+0x393>
c0015017:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c001501b:	75 0b                	jne    c0015028 <opcodeFault(regs*, void*)+0x373>
c001501d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015020:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015023:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015026:	eb 20                	jmp    c0015048 <opcodeFault(regs*, void*)+0x393>
c0015028:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c001502c:	75 0b                	jne    c0015039 <opcodeFault(regs*, void*)+0x384>
c001502e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015031:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015034:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0015037:	eb 0f                	jmp    c0015048 <opcodeFault(regs*, void*)+0x393>
c0015039:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c001503d:	75 09                	jne    c0015048 <opcodeFault(regs*, void*)+0x393>
c001503f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015042:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015045:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0015048:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001504b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001504e:	8d 50 02             	lea    edx,[eax+0x2]
c0015051:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015054:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015057:	e9 6f 02 00 00       	jmp    c00152cb <opcodeFault(regs*, void*)+0x616>
c001505c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001505f:	8a 00                	mov    al,BYTE PTR [eax]
c0015061:	3c 0f                	cmp    al,0xf
c0015063:	0f 85 8d 01 00 00    	jne    c00151f6 <opcodeFault(regs*, void*)+0x541>
c0015069:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001506c:	40                   	inc    eax
c001506d:	8a 00                	mov    al,BYTE PTR [eax]
c001506f:	3c c7                	cmp    al,0xc7
c0015071:	0f 85 7f 01 00 00    	jne    c00151f6 <opcodeFault(regs*, void*)+0x541>
c0015077:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001507a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001507d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015080:	8d 50 01             	lea    edx,[eax+0x1]
c0015083:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015086:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015089:	8d 45 ba             	lea    eax,[ebp-0x46]
c001508c:	50                   	push   eax
c001508d:	8d 45 bb             	lea    eax,[ebp-0x45]
c0015090:	50                   	push   eax
c0015091:	8d 45 bc             	lea    eax,[ebp-0x44]
c0015094:	50                   	push   eax
c0015095:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015098:	e8 b9 47 00 00       	call   c0019856 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001509d:	83 c4 10             	add    esp,0x10
c00150a0:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00150a3:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c00150a6:	83 f0 01             	xor    eax,0x1
c00150a9:	84 c0                	test   al,al
c00150ab:	0f 84 45 01 00 00    	je     c00151f6 <opcodeFault(regs*, void*)+0x541>
c00150b1:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c00150b4:	3c 01                	cmp    al,0x1
c00150b6:	0f 85 3a 01 00 00    	jne    c00151f6 <opcodeFault(regs*, void*)+0x541>
c00150bc:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c00150bf:	83 f0 01             	xor    eax,0x1
c00150c2:	84 c0                	test   al,al
c00150c4:	0f 84 2c 01 00 00    	je     c00151f6 <opcodeFault(regs*, void*)+0x541>
c00150ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150cd:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00150d0:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00150d3:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c00150da:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00150dd:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00150e0:	89 c2                	mov    edx,eax
c00150e2:	b8 00 00 00 00       	mov    eax,0x0
c00150e7:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00150ea:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00150ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150f0:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00150f3:	ba 00 00 00 00       	mov    edx,0x0
c00150f8:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c00150fb:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c00150fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015101:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015104:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015107:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c001510e:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015111:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015114:	89 c2                	mov    edx,eax
c0015116:	b8 00 00 00 00       	mov    eax,0x0
c001511b:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001511e:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0015121:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015124:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015127:	ba 00 00 00 00       	mov    edx,0x0
c001512c:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c001512f:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0015132:	fa                   	cli    
c0015133:	a1 28 f7 02 c0       	mov    eax,ds:0xc002f728
c0015138:	40                   	inc    eax
c0015139:	a3 28 f7 02 c0       	mov    ds:0xc002f728,eax
c001513e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015141:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015144:	8b 00                	mov    eax,DWORD PTR [eax]
c0015146:	89 c1                	mov    ecx,eax
c0015148:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c001514b:	89 cb                	mov    ebx,ecx
c001514d:	89 d0                	mov    eax,edx
c001514f:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0015152:	89 c6                	mov    esi,eax
c0015154:	89 f0                	mov    eax,esi
c0015156:	09 d8                	or     eax,ebx
c0015158:	85 c0                	test   eax,eax
c001515a:	75 21                	jne    c001517d <opcodeFault(regs*, void*)+0x4c8>
c001515c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c001515f:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015162:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015165:	89 01                	mov    DWORD PTR [ecx],eax
c0015167:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001516a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001516d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015170:	83 c8 40             	or     eax,0x40
c0015173:	89 c2                	mov    edx,eax
c0015175:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015178:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001517b:	eb 3e                	jmp    c00151bb <opcodeFault(regs*, void*)+0x506>
c001517d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015180:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015183:	8b 00                	mov    eax,DWORD PTR [eax]
c0015185:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015188:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001518b:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c001518e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015191:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015194:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015197:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001519a:	89 d0                	mov    eax,edx
c001519c:	31 d2                	xor    edx,edx
c001519e:	89 c3                	mov    ebx,eax
c00151a0:	89 d6                	mov    esi,edx
c00151a2:	89 da                	mov    edx,ebx
c00151a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151a7:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00151aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151ad:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00151b0:	83 e0 bf             	and    eax,0xffffffbf
c00151b3:	89 c2                	mov    edx,eax
c00151b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151b8:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00151bb:	a1 28 f7 02 c0       	mov    eax,ds:0xc002f728
c00151c0:	48                   	dec    eax
c00151c1:	a3 28 f7 02 c0       	mov    ds:0xc002f728,eax
c00151c6:	a1 28 f7 02 c0       	mov    eax,ds:0xc002f728
c00151cb:	85 c0                	test   eax,eax
c00151cd:	75 01                	jne    c00151d0 <opcodeFault(regs*, void*)+0x51b>
c00151cf:	fb                   	sti    
c00151d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151d3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00151d6:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c00151d9:	01 c2                	add    edx,eax
c00151db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151de:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00151e1:	83 ec 0c             	sub    esp,0xc
c00151e4:	68 5a b3 02 c0       	push   0xc002b35a
c00151e9:	e8 83 d6 ff ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c00151ee:	83 c4 10             	add    esp,0x10
c00151f1:	e9 d5 00 00 00       	jmp    c00152cb <opcodeFault(regs*, void*)+0x616>
c00151f6:	83 ec 0c             	sub    esp,0xc
c00151f9:	68 6d b3 02 c0       	push   0xc002b36d
c00151fe:	e8 6e d6 ff ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c0015203:	83 c4 10             	add    esp,0x10
c0015206:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015209:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001520c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001520f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015212:	c1 e0 04             	shl    eax,0x4
c0015215:	01 d0                	add    eax,edx
c0015217:	83 c0 03             	add    eax,0x3
c001521a:	8a 00                	mov    al,BYTE PTR [eax]
c001521c:	0f b6 d8             	movzx  ebx,al
c001521f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015222:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015225:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015228:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001522b:	c1 e0 04             	shl    eax,0x4
c001522e:	01 d0                	add    eax,edx
c0015230:	83 c0 02             	add    eax,0x2
c0015233:	8a 00                	mov    al,BYTE PTR [eax]
c0015235:	0f b6 c8             	movzx  ecx,al
c0015238:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001523b:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001523e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015241:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015244:	c1 e0 04             	shl    eax,0x4
c0015247:	01 d0                	add    eax,edx
c0015249:	40                   	inc    eax
c001524a:	8a 00                	mov    al,BYTE PTR [eax]
c001524c:	0f b6 d0             	movzx  edx,al
c001524f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015252:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0015255:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015258:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001525b:	c1 e0 04             	shl    eax,0x4
c001525e:	01 f0                	add    eax,esi
c0015260:	8a 00                	mov    al,BYTE PTR [eax]
c0015262:	0f b6 c0             	movzx  eax,al
c0015265:	83 ec 0c             	sub    esp,0xc
c0015268:	53                   	push   ebx
c0015269:	51                   	push   ecx
c001526a:	52                   	push   edx
c001526b:	50                   	push   eax
c001526c:	68 80 b3 02 c0       	push   0xc002b380
c0015271:	e8 fb d5 ff ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c0015276:	83 c4 20             	add    esp,0x20
c0015279:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001527c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001527f:	83 c0 03             	add    eax,0x3
c0015282:	8a 00                	mov    al,BYTE PTR [eax]
c0015284:	0f b6 d8             	movzx  ebx,al
c0015287:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001528a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001528d:	83 c0 02             	add    eax,0x2
c0015290:	8a 00                	mov    al,BYTE PTR [eax]
c0015292:	0f b6 c8             	movzx  ecx,al
c0015295:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015298:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001529b:	40                   	inc    eax
c001529c:	8a 00                	mov    al,BYTE PTR [eax]
c001529e:	0f b6 d0             	movzx  edx,al
c00152a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152a4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152a7:	8a 00                	mov    al,BYTE PTR [eax]
c00152a9:	0f b6 c0             	movzx  eax,al
c00152ac:	83 ec 0c             	sub    esp,0xc
c00152af:	53                   	push   ebx
c00152b0:	51                   	push   ecx
c00152b1:	52                   	push   edx
c00152b2:	50                   	push   eax
c00152b3:	68 a8 b3 02 c0       	push   0xc002b3a8
c00152b8:	e8 b4 d5 ff ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c00152bd:	83 c4 20             	add    esp,0x20
c00152c0:	83 ec 0c             	sub    esp,0xc
c00152c3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00152c6:	e8 41 f4 ff ff       	call   c001470c <displayDebugInfo(regs*)>
c00152cb:	8d 65 f8             	lea    esp,[ebp-0x8]
c00152ce:	5b                   	pop    ebx
c00152cf:	5e                   	pop    esi
c00152d0:	5d                   	pop    ebp
c00152d1:	c3                   	ret    

c00152d2 <displayProgramFault(char const*)>:
c00152d2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152d7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00152da:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00152e0:	85 c0                	test   eax,eax
c00152e2:	74 15                	je     c00152f9 <displayProgramFault(char const*)+0x27>
c00152e4:	83 ec 0c             	sub    esp,0xc
c00152e7:	6a 04                	push   0x4
c00152e9:	6a 0f                	push   0xf
c00152eb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00152ef:	50                   	push   eax
c00152f0:	e8 e7 b4 ff ff       	call   c00107dc <VgaText::puts(char const*, VgaColour, VgaColour)>
c00152f5:	83 c4 1c             	add    esp,0x1c
c00152f8:	c3                   	ret    
c00152f9:	c3                   	ret    

c00152fa <setupInterruptController()>:
c00152fa:	55                   	push   ebp
c00152fb:	89 e5                	mov    ebp,esp
c00152fd:	53                   	push   ebx
c00152fe:	83 ec 24             	sub    esp,0x24
c0015301:	b8 00 00 00 00       	mov    eax,0x0
c0015306:	85 c0                	test   eax,eax
c0015308:	0f 95 c0             	setne  al
c001530b:	84 c0                	test   al,al
c001530d:	74 5b                	je     c001536a <setupInterruptController()+0x70>
c001530f:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0015316:	83 ec 0c             	sub    esp,0xc
c0015319:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c001531c:	e8 f8 a4 ff ff       	call   c000f819 <malloc>
c0015321:	83 c4 10             	add    esp,0x10
c0015324:	89 c3                	mov    ebx,eax
c0015326:	83 ec 0c             	sub    esp,0xc
c0015329:	53                   	push   ebx
c001532a:	e8 b7 07 01 00       	call   c0025ae6 <APIC::APIC()>
c001532f:	83 c4 10             	add    esp,0x10
c0015332:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0015335:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0015338:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001533b:	8b 00                	mov    eax,DWORD PTR [eax]
c001533d:	83 c0 08             	add    eax,0x8
c0015340:	8b 00                	mov    eax,DWORD PTR [eax]
c0015342:	6a 00                	push   0x0
c0015344:	6a 00                	push   0x0
c0015346:	6a 00                	push   0x0
c0015348:	52                   	push   edx
c0015349:	ff d0                	call   eax
c001534b:	83 c4 10             	add    esp,0x10
c001534e:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c0015353:	83 ec 08             	sub    esp,0x8
c0015356:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015359:	50                   	push   eax
c001535a:	e8 4b e9 ff ff       	call   c0013caa <Device::addChild(Device*)>
c001535f:	83 c4 10             	add    esp,0x10
c0015362:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015365:	e9 79 03 00 00       	jmp    c00156e3 <setupInterruptController()+0x3e9>
c001536a:	a0 80 eb 02 c0       	mov    al,ds:0xc002eb80
c001536f:	84 c0                	test   al,al
c0015371:	75 14                	jne    c0015387 <setupInterruptController()+0x8d>
c0015373:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c0015378:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001537e:	83 e2 fe             	and    edx,0xfffffffe
c0015381:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0015387:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c001538c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015392:	83 e0 01             	and    eax,0x1
c0015395:	84 c0                	test   al,al
c0015397:	0f 95 c0             	setne  al
c001539a:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001539d:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c00153a4:	83 ec 0c             	sub    esp,0xc
c00153a7:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00153aa:	e8 6a a4 ff ff       	call   c000f819 <malloc>
c00153af:	83 c4 10             	add    esp,0x10
c00153b2:	89 c3                	mov    ebx,eax
c00153b4:	83 ec 0c             	sub    esp,0xc
c00153b7:	53                   	push   ebx
c00153b8:	e8 81 0c 01 00       	call   c002603e <PIC::PIC()>
c00153bd:	83 c4 10             	add    esp,0x10
c00153c0:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00153c3:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00153c6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00153cb:	83 c0 08             	add    eax,0x8
c00153ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00153d0:	6a 00                	push   0x0
c00153d2:	6a 00                	push   0x0
c00153d4:	6a 00                	push   0x0
c00153d6:	52                   	push   edx
c00153d7:	ff d0                	call   eax
c00153d9:	83 c4 10             	add    esp,0x10
c00153dc:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c00153e0:	74 73                	je     c0015455 <setupInterruptController()+0x15b>
c00153e2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00153e5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00153ea:	83 c0 0c             	add    eax,0xc
c00153ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00153ef:	6a 00                	push   0x0
c00153f1:	6a 00                	push   0x0
c00153f3:	6a 00                	push   0x0
c00153f5:	52                   	push   edx
c00153f6:	ff d0                	call   eax
c00153f8:	83 c4 10             	add    esp,0x10
c00153fb:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00153ff:	74 15                	je     c0015416 <setupInterruptController()+0x11c>
c0015401:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015404:	8b 00                	mov    eax,DWORD PTR [eax]
c0015406:	83 c0 04             	add    eax,0x4
c0015409:	8b 00                	mov    eax,DWORD PTR [eax]
c001540b:	83 ec 0c             	sub    esp,0xc
c001540e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015411:	ff d0                	call   eax
c0015413:	83 c4 10             	add    esp,0x10
c0015416:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c001541d:	83 ec 0c             	sub    esp,0xc
c0015420:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015423:	e8 f1 a3 ff ff       	call   c000f819 <malloc>
c0015428:	83 c4 10             	add    esp,0x10
c001542b:	89 c3                	mov    ebx,eax
c001542d:	83 ec 0c             	sub    esp,0xc
c0015430:	53                   	push   ebx
c0015431:	e8 b0 06 01 00       	call   c0025ae6 <APIC::APIC()>
c0015436:	83 c4 10             	add    esp,0x10
c0015439:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c001543c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001543f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015442:	8b 00                	mov    eax,DWORD PTR [eax]
c0015444:	83 c0 08             	add    eax,0x8
c0015447:	8b 00                	mov    eax,DWORD PTR [eax]
c0015449:	6a 00                	push   0x0
c001544b:	6a 00                	push   0x0
c001544d:	6a 00                	push   0x0
c001544f:	52                   	push   edx
c0015450:	ff d0                	call   eax
c0015452:	83 c4 10             	add    esp,0x10
c0015455:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c001545a:	83 ec 08             	sub    esp,0x8
c001545d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015460:	50                   	push   eax
c0015461:	e8 44 e8 ff ff       	call   c0013caa <Device::addChild(Device*)>
c0015466:	83 c4 10             	add    esp,0x10
c0015469:	c7 05 a8 e3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e3a8,0x0
c0015473:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015476:	8b 00                	mov    eax,DWORD PTR [eax]
c0015478:	83 c0 24             	add    eax,0x24
c001547b:	8b 00                	mov    eax,DWORD PTR [eax]
c001547d:	6a 00                	push   0x0
c001547f:	68 96 4c 01 c0       	push   0xc0014c96
c0015484:	6a 00                	push   0x0
c0015486:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015489:	ff d0                	call   eax
c001548b:	83 c4 10             	add    esp,0x10
c001548e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015491:	8b 00                	mov    eax,DWORD PTR [eax]
c0015493:	83 c0 24             	add    eax,0x24
c0015496:	8b 00                	mov    eax,DWORD PTR [eax]
c0015498:	6a 00                	push   0x0
c001549a:	68 96 4c 01 c0       	push   0xc0014c96
c001549f:	6a 01                	push   0x1
c00154a1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154a4:	ff d0                	call   eax
c00154a6:	83 c4 10             	add    esp,0x10
c00154a9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00154ae:	83 c0 24             	add    eax,0x24
c00154b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00154b3:	6a 00                	push   0x0
c00154b5:	68 69 45 01 c0       	push   0xc0014569
c00154ba:	6a 02                	push   0x2
c00154bc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154bf:	ff d0                	call   eax
c00154c1:	83 c4 10             	add    esp,0x10
c00154c4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00154c9:	83 c0 24             	add    eax,0x24
c00154cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00154ce:	6a 00                	push   0x0
c00154d0:	68 96 4c 01 c0       	push   0xc0014c96
c00154d5:	6a 03                	push   0x3
c00154d7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154da:	ff d0                	call   eax
c00154dc:	83 c4 10             	add    esp,0x10
c00154df:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00154e4:	83 c0 24             	add    eax,0x24
c00154e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00154e9:	6a 00                	push   0x0
c00154eb:	68 96 4c 01 c0       	push   0xc0014c96
c00154f0:	6a 04                	push   0x4
c00154f2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154f5:	ff d0                	call   eax
c00154f7:	83 c4 10             	add    esp,0x10
c00154fa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00154ff:	83 c0 24             	add    eax,0x24
c0015502:	8b 00                	mov    eax,DWORD PTR [eax]
c0015504:	6a 00                	push   0x0
c0015506:	68 96 4c 01 c0       	push   0xc0014c96
c001550b:	6a 05                	push   0x5
c001550d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015510:	ff d0                	call   eax
c0015512:	83 c4 10             	add    esp,0x10
c0015515:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015518:	8b 00                	mov    eax,DWORD PTR [eax]
c001551a:	83 c0 24             	add    eax,0x24
c001551d:	8b 00                	mov    eax,DWORD PTR [eax]
c001551f:	6a 00                	push   0x0
c0015521:	68 b5 4c 01 c0       	push   0xc0014cb5
c0015526:	6a 06                	push   0x6
c0015528:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001552b:	ff d0                	call   eax
c001552d:	83 c4 10             	add    esp,0x10
c0015530:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015533:	8b 00                	mov    eax,DWORD PTR [eax]
c0015535:	83 c0 24             	add    eax,0x24
c0015538:	8b 00                	mov    eax,DWORD PTR [eax]
c001553a:	6a 00                	push   0x0
c001553c:	68 9b 4b 01 c0       	push   0xc0014b9b
c0015541:	6a 07                	push   0x7
c0015543:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015546:	ff d0                	call   eax
c0015548:	83 c4 10             	add    esp,0x10
c001554b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001554e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015550:	83 c0 24             	add    eax,0x24
c0015553:	8b 00                	mov    eax,DWORD PTR [eax]
c0015555:	6a 00                	push   0x0
c0015557:	68 84 43 01 c0       	push   0xc0014384
c001555c:	6a 08                	push   0x8
c001555e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015561:	ff d0                	call   eax
c0015563:	83 c4 10             	add    esp,0x10
c0015566:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015569:	8b 00                	mov    eax,DWORD PTR [eax]
c001556b:	83 c0 24             	add    eax,0x24
c001556e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015570:	6a 00                	push   0x0
c0015572:	68 96 4c 01 c0       	push   0xc0014c96
c0015577:	6a 09                	push   0x9
c0015579:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001557c:	ff d0                	call   eax
c001557e:	83 c4 10             	add    esp,0x10
c0015581:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015584:	8b 00                	mov    eax,DWORD PTR [eax]
c0015586:	83 c0 24             	add    eax,0x24
c0015589:	8b 00                	mov    eax,DWORD PTR [eax]
c001558b:	6a 00                	push   0x0
c001558d:	68 96 4c 01 c0       	push   0xc0014c96
c0015592:	6a 0a                	push   0xa
c0015594:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015597:	ff d0                	call   eax
c0015599:	83 c4 10             	add    esp,0x10
c001559c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001559f:	8b 00                	mov    eax,DWORD PTR [eax]
c00155a1:	83 c0 24             	add    eax,0x24
c00155a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00155a6:	6a 00                	push   0x0
c00155a8:	68 96 4c 01 c0       	push   0xc0014c96
c00155ad:	6a 0b                	push   0xb
c00155af:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155b2:	ff d0                	call   eax
c00155b4:	83 c4 10             	add    esp,0x10
c00155b7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00155bc:	83 c0 24             	add    eax,0x24
c00155bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00155c1:	6a 00                	push   0x0
c00155c3:	68 96 4c 01 c0       	push   0xc0014c96
c00155c8:	6a 0c                	push   0xc
c00155ca:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155cd:	ff d0                	call   eax
c00155cf:	83 c4 10             	add    esp,0x10
c00155d2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00155d7:	83 c0 24             	add    eax,0x24
c00155da:	8b 00                	mov    eax,DWORD PTR [eax]
c00155dc:	6a 00                	push   0x0
c00155de:	68 0e 4c 01 c0       	push   0xc0014c0e
c00155e3:	6a 0d                	push   0xd
c00155e5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155e8:	ff d0                	call   eax
c00155ea:	83 c4 10             	add    esp,0x10
c00155ed:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00155f2:	83 c0 24             	add    eax,0x24
c00155f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00155f7:	6a 00                	push   0x0
c00155f9:	68 47 4c 01 c0       	push   0xc0014c47
c00155fe:	6a 0e                	push   0xe
c0015600:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015603:	ff d0                	call   eax
c0015605:	83 c4 10             	add    esp,0x10
c0015608:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001560b:	8b 00                	mov    eax,DWORD PTR [eax]
c001560d:	83 c0 24             	add    eax,0x24
c0015610:	8b 00                	mov    eax,DWORD PTR [eax]
c0015612:	6a 00                	push   0x0
c0015614:	68 96 4c 01 c0       	push   0xc0014c96
c0015619:	6a 0f                	push   0xf
c001561b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001561e:	ff d0                	call   eax
c0015620:	83 c4 10             	add    esp,0x10
c0015623:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015626:	8b 00                	mov    eax,DWORD PTR [eax]
c0015628:	83 c0 24             	add    eax,0x24
c001562b:	8b 00                	mov    eax,DWORD PTR [eax]
c001562d:	6a 00                	push   0x0
c001562f:	68 96 4c 01 c0       	push   0xc0014c96
c0015634:	6a 10                	push   0x10
c0015636:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015639:	ff d0                	call   eax
c001563b:	83 c4 10             	add    esp,0x10
c001563e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015641:	8b 00                	mov    eax,DWORD PTR [eax]
c0015643:	83 c0 24             	add    eax,0x24
c0015646:	8b 00                	mov    eax,DWORD PTR [eax]
c0015648:	6a 00                	push   0x0
c001564a:	68 96 4c 01 c0       	push   0xc0014c96
c001564f:	6a 11                	push   0x11
c0015651:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015654:	ff d0                	call   eax
c0015656:	83 c4 10             	add    esp,0x10
c0015659:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001565c:	8b 00                	mov    eax,DWORD PTR [eax]
c001565e:	83 c0 24             	add    eax,0x24
c0015661:	8b 00                	mov    eax,DWORD PTR [eax]
c0015663:	6a 00                	push   0x0
c0015665:	68 96 4c 01 c0       	push   0xc0014c96
c001566a:	6a 12                	push   0x12
c001566c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001566f:	ff d0                	call   eax
c0015671:	83 c4 10             	add    esp,0x10
c0015674:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015677:	8b 00                	mov    eax,DWORD PTR [eax]
c0015679:	83 c0 24             	add    eax,0x24
c001567c:	8b 00                	mov    eax,DWORD PTR [eax]
c001567e:	6a 00                	push   0x0
c0015680:	68 96 4c 01 c0       	push   0xc0014c96
c0015685:	6a 13                	push   0x13
c0015687:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001568a:	ff d0                	call   eax
c001568c:	83 c4 10             	add    esp,0x10
c001568f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015692:	8b 00                	mov    eax,DWORD PTR [eax]
c0015694:	83 c0 24             	add    eax,0x24
c0015697:	8b 00                	mov    eax,DWORD PTR [eax]
c0015699:	6a 00                	push   0x0
c001569b:	68 96 4c 01 c0       	push   0xc0014c96
c00156a0:	6a 14                	push   0x14
c00156a2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156a5:	ff d0                	call   eax
c00156a7:	83 c4 10             	add    esp,0x10
c00156aa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156ad:	8b 00                	mov    eax,DWORD PTR [eax]
c00156af:	83 c0 24             	add    eax,0x24
c00156b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00156b4:	6a 00                	push   0x0
c00156b6:	68 96 4c 01 c0       	push   0xc0014c96
c00156bb:	6a 1e                	push   0x1e
c00156bd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156c0:	ff d0                	call   eax
c00156c2:	83 c4 10             	add    esp,0x10
c00156c5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00156ca:	83 c0 24             	add    eax,0x24
c00156cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00156cf:	6a 00                	push   0x0
c00156d1:	68 2f c3 01 c0       	push   0xc001c32f
c00156d6:	6a 60                	push   0x60
c00156d8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156db:	ff d0                	call   eax
c00156dd:	83 c4 10             	add    esp,0x10
c00156e0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156e3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00156e6:	c9                   	leave  
c00156e7:	c3                   	ret    

c00156e8 <InterruptController::convertLegacyIRQNumber(int)>:
c00156e8:	55                   	push   ebp
c00156e9:	89 e5                	mov    ebp,esp
c00156eb:	83 ec 08             	sub    esp,0x8
c00156ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156f1:	83 ec 0c             	sub    esp,0xc
c00156f4:	50                   	push   eax
c00156f5:	e8 b0 e8 ff ff       	call   c0013faa <Device::getName()>
c00156fa:	83 c4 10             	add    esp,0x10
c00156fd:	8a 00                	mov    al,BYTE PTR [eax]
c00156ff:	3c 41                	cmp    al,0x41
c0015701:	0f 94 c0             	sete   al
c0015704:	84 c0                	test   al,al
c0015706:	74 28                	je     c0015730 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015708:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001570c:	7f 12                	jg     c0015720 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c001570e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015711:	05 80 d4 02 c0       	add    eax,0xc002d480
c0015716:	8a 00                	mov    al,BYTE PTR [eax]
c0015718:	0f b6 c0             	movzx  eax,al
c001571b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001571e:	eb 10                	jmp    c0015730 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015720:	83 ec 0c             	sub    esp,0xc
c0015723:	68 d0 b3 02 c0       	push   0xc002b3d0
c0015728:	e8 10 4a 00 00       	call   c001a13d <Krnl::panic(char const*)>
c001572d:	83 c4 10             	add    esp,0x10
c0015730:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015733:	c9                   	leave  
c0015734:	c3                   	ret    
c0015735:	90                   	nop

c0015736 <startGUI(void*)>:
c0015736:	55                   	push   ebp
c0015737:	89 e5                	mov    ebp,esp
c0015739:	53                   	push   ebx
c001573a:	83 ec 04             	sub    esp,0x4
c001573d:	a1 28 f7 02 c0       	mov    eax,ds:0xc002f728
c0015742:	48                   	dec    eax
c0015743:	a3 28 f7 02 c0       	mov    ds:0xc002f728,eax
c0015748:	a1 28 f7 02 c0       	mov    eax,ds:0xc002f728
c001574d:	85 c0                	test   eax,eax
c001574f:	75 01                	jne    c0015752 <startGUI(void*)+0x1c>
c0015751:	fb                   	sti    
c0015752:	8b 1d 28 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e228
c0015758:	83 ec 08             	sub    esp,0x8
c001575b:	6a 01                	push   0x1
c001575d:	68 50 b4 02 c0       	push   0xc002b450
c0015762:	e8 a3 7b 00 00       	call   c001d30a <Thr::loadDLL(char const*, bool)>
c0015767:	83 c4 10             	add    esp,0x10
c001576a:	83 ec 08             	sub    esp,0x8
c001576d:	53                   	push   ebx
c001576e:	50                   	push   eax
c001576f:	e8 c7 7d 00 00       	call   c001d53b <Thr::executeDLL(unsigned long, void*)>
c0015774:	83 c4 10             	add    esp,0x10
c0015777:	8b 1d 28 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e228
c001577d:	83 ec 08             	sub    esp,0x8
c0015780:	6a 01                	push   0x1
c0015782:	68 6a b4 02 c0       	push   0xc002b46a
c0015787:	e8 7e 7b 00 00       	call   c001d30a <Thr::loadDLL(char const*, bool)>
c001578c:	83 c4 10             	add    esp,0x10
c001578f:	83 ec 08             	sub    esp,0x8
c0015792:	53                   	push   ebx
c0015793:	50                   	push   eax
c0015794:	e8 a2 7d 00 00       	call   c001d53b <Thr::executeDLL(unsigned long, void*)>
c0015799:	83 c4 10             	add    esp,0x10
c001579c:	90                   	nop
c001579d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00157a0:	c9                   	leave  
c00157a1:	c3                   	ret    

c00157a2 <startGUIVESA(void*)>:
c00157a2:	55                   	push   ebp
c00157a3:	89 e5                	mov    ebp,esp
c00157a5:	53                   	push   ebx
c00157a6:	83 ec 04             	sub    esp,0x4
c00157a9:	a1 28 f7 02 c0       	mov    eax,ds:0xc002f728
c00157ae:	48                   	dec    eax
c00157af:	a3 28 f7 02 c0       	mov    ds:0xc002f728,eax
c00157b4:	a1 28 f7 02 c0       	mov    eax,ds:0xc002f728
c00157b9:	85 c0                	test   eax,eax
c00157bb:	75 01                	jne    c00157be <startGUIVESA(void*)+0x1c>
c00157bd:	fb                   	sti    
c00157be:	8b 1d 28 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e228
c00157c4:	83 ec 08             	sub    esp,0x8
c00157c7:	6a 01                	push   0x1
c00157c9:	68 84 b4 02 c0       	push   0xc002b484
c00157ce:	e8 37 7b 00 00       	call   c001d30a <Thr::loadDLL(char const*, bool)>
c00157d3:	83 c4 10             	add    esp,0x10
c00157d6:	83 ec 08             	sub    esp,0x8
c00157d9:	53                   	push   ebx
c00157da:	50                   	push   eax
c00157db:	e8 5b 7d 00 00       	call   c001d53b <Thr::executeDLL(unsigned long, void*)>
c00157e0:	83 c4 10             	add    esp,0x10
c00157e3:	8b 1d 28 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e228
c00157e9:	83 ec 08             	sub    esp,0x8
c00157ec:	6a 01                	push   0x1
c00157ee:	68 6a b4 02 c0       	push   0xc002b46a
c00157f3:	e8 12 7b 00 00       	call   c001d30a <Thr::loadDLL(char const*, bool)>
c00157f8:	83 c4 10             	add    esp,0x10
c00157fb:	83 ec 08             	sub    esp,0x8
c00157fe:	53                   	push   ebx
c00157ff:	50                   	push   eax
c0015800:	e8 36 7d 00 00       	call   c001d53b <Thr::executeDLL(unsigned long, void*)>
c0015805:	83 c4 10             	add    esp,0x10
c0015808:	90                   	nop
c0015809:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001580c:	c9                   	leave  
c001580d:	c3                   	ret    

c001580e <sendKeyToTerminal(unsigned char)>:
c001580e:	55                   	push   ebp
c001580f:	89 e5                	mov    ebp,esp
c0015811:	83 ec 28             	sub    esp,0x28
c0015814:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015817:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001581a:	a1 e4 e2 02 c0       	mov    eax,ds:0xc002e2e4
c001581f:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015823:	83 ec 08             	sub    esp,0x8
c0015826:	52                   	push   edx
c0015827:	50                   	push   eax
c0015828:	e8 57 b4 ff ff       	call   c0010c84 <VgaText::receiveKey(unsigned char)>
c001582d:	83 c4 10             	add    esp,0x10
c0015830:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015834:	0f 85 8f 00 00 00    	jne    c00158c9 <sendKeyToTerminal(unsigned char)+0xbb>
c001583a:	fa                   	cli    
c001583b:	a1 28 f7 02 c0       	mov    eax,ds:0xc002f728
c0015840:	40                   	inc    eax
c0015841:	a3 28 f7 02 c0       	mov    ds:0xc002f728,eax
c0015846:	a1 24 f7 02 c0       	mov    eax,ds:0xc002f724
c001584b:	40                   	inc    eax
c001584c:	a3 24 f7 02 c0       	mov    ds:0xc002f724,eax
c0015851:	a1 c0 e3 02 c0       	mov    eax,ds:0xc002e3c0
c0015856:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015859:	c7 05 c0 e3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e3c0,0x0
c0015863:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015867:	74 1f                	je     c0015888 <sendKeyToTerminal(unsigned char)+0x7a>
c0015869:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001586c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001586f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015872:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015875:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015878:	83 ec 0c             	sub    esp,0xc
c001587b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001587e:	e8 de 88 00 00       	call   c001e161 <unblockTask(ThreadControlBlock*)>
c0015883:	83 c4 10             	add    esp,0x10
c0015886:	eb db                	jmp    c0015863 <sendKeyToTerminal(unsigned char)+0x55>
c0015888:	a1 24 f7 02 c0       	mov    eax,ds:0xc002f724
c001588d:	48                   	dec    eax
c001588e:	a3 24 f7 02 c0       	mov    ds:0xc002f724,eax
c0015893:	a1 24 f7 02 c0       	mov    eax,ds:0xc002f724
c0015898:	85 c0                	test   eax,eax
c001589a:	75 18                	jne    c00158b4 <sendKeyToTerminal(unsigned char)+0xa6>
c001589c:	a1 20 f7 02 c0       	mov    eax,ds:0xc002f720
c00158a1:	85 c0                	test   eax,eax
c00158a3:	74 0f                	je     c00158b4 <sendKeyToTerminal(unsigned char)+0xa6>
c00158a5:	c7 05 20 f7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f720,0x0
c00158af:	e8 1b 84 00 00       	call   c001dccf <schedule()>
c00158b4:	a1 28 f7 02 c0       	mov    eax,ds:0xc002f728
c00158b9:	48                   	dec    eax
c00158ba:	a3 28 f7 02 c0       	mov    ds:0xc002f728,eax
c00158bf:	a1 28 f7 02 c0       	mov    eax,ds:0xc002f728
c00158c4:	85 c0                	test   eax,eax
c00158c6:	75 01                	jne    c00158c9 <sendKeyToTerminal(unsigned char)+0xbb>
c00158c8:	fb                   	sti    
c00158c9:	90                   	nop
c00158ca:	c9                   	leave  
c00158cb:	c3                   	ret    

c00158cc <sendKeyboardToken(KeyboardToken)>:
c00158cc:	55                   	push   ebp
c00158cd:	89 e5                	mov    ebp,esp
c00158cf:	83 ec 18             	sub    esp,0x18
c00158d2:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c00158d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158d8:	0f b7 c0             	movzx  eax,ax
c00158db:	83 f2 01             	xor    edx,0x1
c00158de:	88 90 e0 e3 02 c0    	mov    BYTE PTR [eax-0x3ffd1c20],dl
c00158e4:	a1 c8 e3 02 c0       	mov    eax,ds:0xc002e3c8
c00158e9:	85 c0                	test   eax,eax
c00158eb:	74 24                	je     c0015911 <sendKeyboardToken(KeyboardToken)+0x45>
c00158ed:	8b 0d c8 e3 02 c0    	mov    ecx,DWORD PTR ds:0xc002e3c8
c00158f3:	83 ec 04             	sub    esp,0x4
c00158f6:	68 e0 e3 02 c0       	push   0xc002e3e0
c00158fb:	83 ec 08             	sub    esp,0x8
c00158fe:	89 e2                	mov    edx,esp
c0015900:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015903:	89 02                	mov    DWORD PTR [edx],eax
c0015905:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015908:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c001590c:	ff d1                	call   ecx
c001590e:	83 c4 10             	add    esp,0x10
c0015911:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015914:	66 3d 03 02          	cmp    ax,0x203
c0015918:	75 07                	jne    c0015921 <sendKeyboardToken(KeyboardToken)+0x55>
c001591a:	a0 e0 e4 02 c0       	mov    al,ds:0xc002e4e0
c001591f:	84 c0                	test   al,al
c0015921:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015925:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015928:	a0 e8 e7 02 c0       	mov    al,ds:0xc002e7e8
c001592d:	38 c2                	cmp    dl,al
c001592f:	74 1c                	je     c001594d <sendKeyboardToken(KeyboardToken)+0x81>
c0015931:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015934:	a2 e8 e7 02 c0       	mov    ds:0xc002e7e8,al
c0015939:	a0 e8 e7 02 c0       	mov    al,ds:0xc002e7e8
c001593e:	0f b6 c0             	movzx  eax,al
c0015941:	83 ec 0c             	sub    esp,0xc
c0015944:	50                   	push   eax
c0015945:	e8 7a a9 ff ff       	call   c00102c4 <setTerminalScrollLock(bool)>
c001594a:	83 c4 10             	add    esp,0x10
c001594d:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015950:	84 c0                	test   al,al
c0015952:	0f 84 ae 00 00 00    	je     c0015a06 <sendKeyboardToken(KeyboardToken)+0x13a>
c0015958:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001595b:	66 3d 10 03          	cmp    ax,0x310
c001595f:	75 06                	jne    c0015967 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015961:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015967:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001596a:	66 3d 11 03          	cmp    ax,0x311
c001596e:	75 06                	jne    c0015976 <sendKeyboardToken(KeyboardToken)+0xaa>
c0015970:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015976:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015979:	66 3d 12 03          	cmp    ax,0x312
c001597d:	75 06                	jne    c0015985 <sendKeyboardToken(KeyboardToken)+0xb9>
c001597f:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015985:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015988:	66 3d 13 03          	cmp    ax,0x313
c001598c:	75 06                	jne    c0015994 <sendKeyboardToken(KeyboardToken)+0xc8>
c001598e:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015994:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015997:	66 3d 14 03          	cmp    ax,0x314
c001599b:	75 06                	jne    c00159a3 <sendKeyboardToken(KeyboardToken)+0xd7>
c001599d:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c00159a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159a6:	66 3d 15 03          	cmp    ax,0x315
c00159aa:	75 06                	jne    c00159b2 <sendKeyboardToken(KeyboardToken)+0xe6>
c00159ac:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00159b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159b5:	66 3d 16 03          	cmp    ax,0x316
c00159b9:	75 06                	jne    c00159c1 <sendKeyboardToken(KeyboardToken)+0xf5>
c00159bb:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c00159c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159c4:	66 3d 17 03          	cmp    ax,0x317
c00159c8:	75 06                	jne    c00159d0 <sendKeyboardToken(KeyboardToken)+0x104>
c00159ca:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c00159d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159d3:	66 3d 18 03          	cmp    ax,0x318
c00159d7:	75 06                	jne    c00159df <sendKeyboardToken(KeyboardToken)+0x113>
c00159d9:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c00159df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159e2:	66 3d 19 03          	cmp    ax,0x319
c00159e6:	75 06                	jne    c00159ee <sendKeyboardToken(KeyboardToken)+0x122>
c00159e8:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c00159ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159f1:	66 3d 1a 03          	cmp    ax,0x31a
c00159f5:	0f 85 c9 00 00 00    	jne    c0015ac4 <sendKeyboardToken(KeyboardToken)+0x1f8>
c00159fb:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015a01:	e9 be 00 00 00       	jmp    c0015ac4 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015a06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a09:	66 3d 10 03          	cmp    ax,0x310
c0015a0d:	75 0a                	jne    c0015a19 <sendKeyboardToken(KeyboardToken)+0x14d>
c0015a0f:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015a15:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015a19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a1c:	66 3d 11 03          	cmp    ax,0x311
c0015a20:	75 0a                	jne    c0015a2c <sendKeyboardToken(KeyboardToken)+0x160>
c0015a22:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015a28:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015a2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a2f:	66 3d 12 03          	cmp    ax,0x312
c0015a33:	75 0a                	jne    c0015a3f <sendKeyboardToken(KeyboardToken)+0x173>
c0015a35:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015a3b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015a3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a42:	66 3d 13 03          	cmp    ax,0x313
c0015a46:	75 0a                	jne    c0015a52 <sendKeyboardToken(KeyboardToken)+0x186>
c0015a48:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015a4e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015a52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a55:	66 3d 14 03          	cmp    ax,0x314
c0015a59:	75 0a                	jne    c0015a65 <sendKeyboardToken(KeyboardToken)+0x199>
c0015a5b:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015a61:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015a65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a68:	66 3d 15 03          	cmp    ax,0x315
c0015a6c:	75 0a                	jne    c0015a78 <sendKeyboardToken(KeyboardToken)+0x1ac>
c0015a6e:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015a74:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015a78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a7b:	66 3d 16 03          	cmp    ax,0x316
c0015a7f:	75 0a                	jne    c0015a8b <sendKeyboardToken(KeyboardToken)+0x1bf>
c0015a81:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015a87:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015a8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a8e:	66 3d 17 03          	cmp    ax,0x317
c0015a92:	75 0a                	jne    c0015a9e <sendKeyboardToken(KeyboardToken)+0x1d2>
c0015a94:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015a9a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015a9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015aa1:	66 3d 18 03          	cmp    ax,0x318
c0015aa5:	75 0a                	jne    c0015ab1 <sendKeyboardToken(KeyboardToken)+0x1e5>
c0015aa7:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015aad:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ab1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ab4:	66 3d 19 03          	cmp    ax,0x319
c0015ab8:	75 0a                	jne    c0015ac4 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015aba:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015ac0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ac4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ac7:	66 3d 00 02          	cmp    ax,0x200
c0015acb:	75 2c                	jne    c0015af9 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015acd:	a0 e0 e7 02 c0       	mov    al,ds:0xc002e7e0
c0015ad2:	83 f0 01             	xor    eax,0x1
c0015ad5:	84 c0                	test   al,al
c0015ad7:	74 20                	je     c0015af9 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015ad9:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c0015ade:	6a 01                	push   0x1
c0015ae0:	6a 00                	push   0x0
c0015ae2:	68 36 57 01 c0       	push   0xc0015736
c0015ae7:	50                   	push   eax
c0015ae8:	e8 bd 7f 00 00       	call   c001daaa <Process::createThread(void (*)(void*), void*, int)>
c0015aed:	83 c4 10             	add    esp,0x10
c0015af0:	c6 05 e0 e7 02 c0 01 	mov    BYTE PTR ds:0xc002e7e0,0x1
c0015af7:	eb 33                	jmp    c0015b2c <sendKeyboardToken(KeyboardToken)+0x260>
c0015af9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015afc:	66 3d 01 02          	cmp    ax,0x201
c0015b00:	75 2a                	jne    c0015b2c <sendKeyboardToken(KeyboardToken)+0x260>
c0015b02:	a0 e0 e7 02 c0       	mov    al,ds:0xc002e7e0
c0015b07:	83 f0 01             	xor    eax,0x1
c0015b0a:	84 c0                	test   al,al
c0015b0c:	74 1e                	je     c0015b2c <sendKeyboardToken(KeyboardToken)+0x260>
c0015b0e:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c0015b13:	6a 01                	push   0x1
c0015b15:	6a 00                	push   0x0
c0015b17:	68 a2 57 01 c0       	push   0xc00157a2
c0015b1c:	50                   	push   eax
c0015b1d:	e8 88 7f 00 00       	call   c001daaa <Process::createThread(void (*)(void*), void*, int)>
c0015b22:	83 c4 10             	add    esp,0x10
c0015b25:	c6 05 e0 e7 02 c0 01 	mov    BYTE PTR ds:0xc002e7e0,0x1
c0015b2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b2f:	66 3d 1d 03          	cmp    ax,0x31d
c0015b33:	75 06                	jne    c0015b3b <sendKeyboardToken(KeyboardToken)+0x26f>
c0015b35:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015b3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b3e:	66 3d 1c 03          	cmp    ax,0x31c
c0015b42:	75 06                	jne    c0015b4a <sendKeyboardToken(KeyboardToken)+0x27e>
c0015b44:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015b4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b4d:	66 3d 1b 03          	cmp    ax,0x31b
c0015b51:	75 06                	jne    c0015b59 <sendKeyboardToken(KeyboardToken)+0x28d>
c0015b53:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015b59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b5c:	66 3d 1e 03          	cmp    ax,0x31e
c0015b60:	75 06                	jne    c0015b68 <sendKeyboardToken(KeyboardToken)+0x29c>
c0015b62:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0015b68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b6b:	66 3d 1f 03          	cmp    ax,0x31f
c0015b6f:	75 06                	jne    c0015b77 <sendKeyboardToken(KeyboardToken)+0x2ab>
c0015b71:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015b77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b7a:	66 3d 1a 03          	cmp    ax,0x31a
c0015b7e:	75 06                	jne    c0015b86 <sendKeyboardToken(KeyboardToken)+0x2ba>
c0015b80:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015b86:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015b8a:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015b8d:	83 f0 01             	xor    eax,0x1
c0015b90:	84 c0                	test   al,al
c0015b92:	74 77                	je     c0015c0b <sendKeyboardToken(KeyboardToken)+0x33f>
c0015b94:	a0 e1 e4 02 c0       	mov    al,ds:0xc002e4e1
c0015b99:	84 c0                	test   al,al
c0015b9b:	74 41                	je     c0015bde <sendKeyboardToken(KeyboardToken)+0x312>
c0015b9d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015ba1:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015ba5:	74 2b                	je     c0015bd2 <sendKeyboardToken(KeyboardToken)+0x306>
c0015ba7:	8b 15 e4 e7 02 c0    	mov    edx,DWORD PTR ds:0xc002e7e4
c0015bad:	89 d0                	mov    eax,edx
c0015baf:	c1 e0 02             	shl    eax,0x2
c0015bb2:	01 d0                	add    eax,edx
c0015bb4:	01 c0                	add    eax,eax
c0015bb6:	a3 e4 e7 02 c0       	mov    ds:0xc002e7e4,eax
c0015bbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bbe:	0f b7 c0             	movzx  eax,ax
c0015bc1:	8d 50 d0             	lea    edx,[eax-0x30]
c0015bc4:	a1 e4 e7 02 c0       	mov    eax,ds:0xc002e7e4
c0015bc9:	01 d0                	add    eax,edx
c0015bcb:	a3 e4 e7 02 c0       	mov    ds:0xc002e7e4,eax
c0015bd0:	eb 6d                	jmp    c0015c3f <sendKeyboardToken(KeyboardToken)+0x373>
c0015bd2:	c7 05 e4 e7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e7e4,0x0
c0015bdc:	eb 61                	jmp    c0015c3f <sendKeyboardToken(KeyboardToken)+0x373>
c0015bde:	a1 e4 e7 02 c0       	mov    eax,ds:0xc002e7e4
c0015be3:	85 c0                	test   eax,eax
c0015be5:	74 18                	je     c0015bff <sendKeyboardToken(KeyboardToken)+0x333>
c0015be7:	a1 e4 e7 02 c0       	mov    eax,ds:0xc002e7e4
c0015bec:	0f b6 c0             	movzx  eax,al
c0015bef:	83 ec 0c             	sub    esp,0xc
c0015bf2:	50                   	push   eax
c0015bf3:	e8 16 fc ff ff       	call   c001580e <sendKeyToTerminal(unsigned char)>
c0015bf8:	83 c4 10             	add    esp,0x10
c0015bfb:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015bff:	c7 05 e4 e7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e7e4,0x0
c0015c09:	eb 34                	jmp    c0015c3f <sendKeyboardToken(KeyboardToken)+0x373>
c0015c0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c0e:	66 3d 01 01          	cmp    ax,0x101
c0015c12:	75 2b                	jne    c0015c3f <sendKeyboardToken(KeyboardToken)+0x373>
c0015c14:	a1 e4 e7 02 c0       	mov    eax,ds:0xc002e7e4
c0015c19:	85 c0                	test   eax,eax
c0015c1b:	74 18                	je     c0015c35 <sendKeyboardToken(KeyboardToken)+0x369>
c0015c1d:	a1 e4 e7 02 c0       	mov    eax,ds:0xc002e7e4
c0015c22:	0f b6 c0             	movzx  eax,al
c0015c25:	83 ec 0c             	sub    esp,0xc
c0015c28:	50                   	push   eax
c0015c29:	e8 e0 fb ff ff       	call   c001580e <sendKeyToTerminal(unsigned char)>
c0015c2e:	83 c4 10             	add    esp,0x10
c0015c31:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015c35:	c7 05 e4 e7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e7e4,0x0
c0015c3f:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015c42:	83 f0 01             	xor    eax,0x1
c0015c45:	84 c0                	test   al,al
c0015c47:	74 4c                	je     c0015c95 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015c49:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015c4c:	83 f0 01             	xor    eax,0x1
c0015c4f:	84 c0                	test   al,al
c0015c51:	74 42                	je     c0015c95 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015c53:	a0 e0 e4 02 c0       	mov    al,ds:0xc002e4e0
c0015c58:	83 f0 01             	xor    eax,0x1
c0015c5b:	84 c0                	test   al,al
c0015c5d:	74 36                	je     c0015c95 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015c5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c62:	66 83 f8 1f          	cmp    ax,0x1f
c0015c66:	76 09                	jbe    c0015c71 <sendKeyboardToken(KeyboardToken)+0x3a5>
c0015c68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c6b:	66 83 f8 7e          	cmp    ax,0x7e
c0015c6f:	76 12                	jbe    c0015c83 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015c71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c74:	66 83 f8 0a          	cmp    ax,0xa
c0015c78:	74 09                	je     c0015c83 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015c7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c7d:	66 83 f8 08          	cmp    ax,0x8
c0015c81:	75 12                	jne    c0015c95 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015c83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c86:	0f b6 c0             	movzx  eax,al
c0015c89:	83 ec 0c             	sub    esp,0xc
c0015c8c:	50                   	push   eax
c0015c8d:	e8 7c fb ff ff       	call   c001580e <sendKeyToTerminal(unsigned char)>
c0015c92:	83 c4 10             	add    esp,0x10
c0015c95:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015c98:	83 f0 01             	xor    eax,0x1
c0015c9b:	84 c0                	test   al,al
c0015c9d:	74 4f                	je     c0015cee <sendKeyboardToken(KeyboardToken)+0x422>
c0015c9f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015ca2:	83 f0 01             	xor    eax,0x1
c0015ca5:	84 c0                	test   al,al
c0015ca7:	74 45                	je     c0015cee <sendKeyboardToken(KeyboardToken)+0x422>
c0015ca9:	a0 e0 e4 02 c0       	mov    al,ds:0xc002e4e0
c0015cae:	84 c0                	test   al,al
c0015cb0:	74 3c                	je     c0015cee <sendKeyboardToken(KeyboardToken)+0x422>
c0015cb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cb5:	66 83 f8 3f          	cmp    ax,0x3f
c0015cb9:	76 33                	jbe    c0015cee <sendKeyboardToken(KeyboardToken)+0x422>
c0015cbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cbe:	66 83 f8 7f          	cmp    ax,0x7f
c0015cc2:	77 2a                	ja     c0015cee <sendKeyboardToken(KeyboardToken)+0x422>
c0015cc4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cc7:	88 c2                	mov    dl,al
c0015cc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ccc:	66 83 f8 5f          	cmp    ax,0x5f
c0015cd0:	76 04                	jbe    c0015cd6 <sendKeyboardToken(KeyboardToken)+0x40a>
c0015cd2:	b0 20                	mov    al,0x20
c0015cd4:	eb 02                	jmp    c0015cd8 <sendKeyboardToken(KeyboardToken)+0x40c>
c0015cd6:	b0 00                	mov    al,0x0
c0015cd8:	29 c2                	sub    edx,eax
c0015cda:	88 d0                	mov    al,dl
c0015cdc:	83 e8 40             	sub    eax,0x40
c0015cdf:	0f b6 c0             	movzx  eax,al
c0015ce2:	83 ec 0c             	sub    esp,0xc
c0015ce5:	50                   	push   eax
c0015ce6:	e8 23 fb ff ff       	call   c001580e <sendKeyToTerminal(unsigned char)>
c0015ceb:	83 c4 10             	add    esp,0x10
c0015cee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cf1:	66 3d 00 03          	cmp    ax,0x300
c0015cf5:	75 0f                	jne    c0015d06 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015cf7:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015cfa:	83 f0 01             	xor    eax,0x1
c0015cfd:	84 c0                	test   al,al
c0015cff:	74 05                	je     c0015d06 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015d01:	e8 2f a9 ff ff       	call   c0010635 <doTerminalCycle()>
c0015d06:	90                   	nop
c0015d07:	c9                   	leave  
c0015d08:	c3                   	ret    

c0015d09 <clearInternalKeybuffer(VgaText*)>:
c0015d09:	55                   	push   ebp
c0015d0a:	89 e5                	mov    ebp,esp
c0015d0c:	83 ec 08             	sub    esp,0x8
c0015d0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d12:	05 98 01 00 00       	add    eax,0x198
c0015d17:	83 ec 0c             	sub    esp,0xc
c0015d1a:	50                   	push   eax
c0015d1b:	e8 4c aa fe ff       	call   c000076c <strlen>
c0015d20:	83 c4 10             	add    esp,0x10
c0015d23:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015d26:	81 c2 98 01 00 00    	add    edx,0x198
c0015d2c:	83 ec 04             	sub    esp,0x4
c0015d2f:	50                   	push   eax
c0015d30:	6a 00                	push   0x0
c0015d32:	52                   	push   edx
c0015d33:	e8 18 aa fe ff       	call   c0000750 <memset>
c0015d38:	83 c4 10             	add    esp,0x10
c0015d3b:	90                   	nop
c0015d3c:	c9                   	leave  
c0015d3d:	c3                   	ret    

c0015d3e <readKeyboard(VgaText*, char*, unsigned long)>:
c0015d3e:	55                   	push   ebp
c0015d3f:	89 e5                	mov    ebp,esp
c0015d41:	83 ec 18             	sub    esp,0x18
c0015d44:	a1 c8 e3 02 c0       	mov    eax,ds:0xc002e3c8
c0015d49:	85 c0                	test   eax,eax
c0015d4b:	74 2a                	je     c0015d77 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0015d4d:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0015d53:	8b 0d c8 e3 02 c0    	mov    ecx,DWORD PTR ds:0xc002e3c8
c0015d59:	83 ec 04             	sub    esp,0x4
c0015d5c:	68 e0 e3 02 c0       	push   0xc002e3e0
c0015d61:	83 ec 08             	sub    esp,0x8
c0015d64:	89 e2                	mov    edx,esp
c0015d66:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015d69:	89 02                	mov    DWORD PTR [edx],eax
c0015d6b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015d6e:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015d72:	ff d1                	call   ecx
c0015d74:	83 c4 10             	add    esp,0x10
c0015d77:	fb                   	sti    
c0015d78:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015d7f:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015d83:	0f 84 a1 00 00 00    	je     c0015e2a <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c0015d89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d8c:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015d92:	84 c0                	test   al,al
c0015d94:	75 28                	jne    c0015dbe <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c0015d96:	fa                   	cli    
c0015d97:	a1 28 f7 02 c0       	mov    eax,ds:0xc002f728
c0015d9c:	40                   	inc    eax
c0015d9d:	a3 28 f7 02 c0       	mov    ds:0xc002f728,eax
c0015da2:	e8 28 7f 00 00       	call   c001dccf <schedule()>
c0015da7:	a1 28 f7 02 c0       	mov    eax,ds:0xc002f728
c0015dac:	48                   	dec    eax
c0015dad:	a3 28 f7 02 c0       	mov    ds:0xc002f728,eax
c0015db2:	a1 28 f7 02 c0       	mov    eax,ds:0xc002f728
c0015db7:	85 c0                	test   eax,eax
c0015db9:	75 ce                	jne    c0015d89 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015dbb:	fb                   	sti    
c0015dbc:	eb cb                	jmp    c0015d89 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015dbe:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015dc1:	8d 50 01             	lea    edx,[eax+0x1]
c0015dc4:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015dc7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015dca:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c0015dd0:	88 10                	mov    BYTE PTR [eax],dl
c0015dd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015dd5:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015ddb:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015dde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015de1:	05 98 01 00 00       	add    eax,0x198
c0015de6:	83 ec 0c             	sub    esp,0xc
c0015de9:	50                   	push   eax
c0015dea:	e8 7d a9 fe ff       	call   c000076c <strlen>
c0015def:	83 c4 10             	add    esp,0x10
c0015df2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015df5:	81 c2 98 01 00 00    	add    edx,0x198
c0015dfb:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015dfe:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015e01:	81 c2 98 01 00 00    	add    edx,0x198
c0015e07:	83 ec 04             	sub    esp,0x4
c0015e0a:	50                   	push   eax
c0015e0b:	51                   	push   ecx
c0015e0c:	52                   	push   edx
c0015e0d:	e8 76 a8 fe ff       	call   c0000688 <memmove>
c0015e12:	83 c4 10             	add    esp,0x10
c0015e15:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015e18:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015e1b:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015e1f:	0f 85 5a ff ff ff    	jne    c0015d7f <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c0015e25:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015e28:	eb 03                	jmp    c0015e2d <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c0015e2a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015e2d:	c9                   	leave  
c0015e2e:	c3                   	ret    
c0015e2f:	90                   	nop

c0015e30 <Keyboard::Keyboard(char const*)>:
c0015e30:	83 ec 0c             	sub    esp,0xc
c0015e33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e37:	83 ec 08             	sub    esp,0x8
c0015e3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015e3e:	50                   	push   eax
c0015e3f:	e8 6a e0 ff ff       	call   c0013eae <Device::Device(char const*)>
c0015e44:	83 c4 10             	add    esp,0x10
c0015e47:	ba a8 b4 02 c0       	mov    edx,0xc002b4a8
c0015e4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e50:	89 10                	mov    DWORD PTR [eax],edx
c0015e52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e56:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015e60:	c6 05 c4 e3 02 c0 01 	mov    BYTE PTR ds:0xc002e3c4,0x1
c0015e67:	90                   	nop
c0015e68:	83 c4 0c             	add    esp,0xc
c0015e6b:	c3                   	ret    

c0015e6c <Keyboard::~Keyboard()>:
c0015e6c:	83 ec 0c             	sub    esp,0xc
c0015e6f:	ba a8 b4 02 c0       	mov    edx,0xc002b4a8
c0015e74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e78:	89 10                	mov    DWORD PTR [eax],edx
c0015e7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e7e:	83 ec 0c             	sub    esp,0xc
c0015e81:	50                   	push   eax
c0015e82:	e8 f1 dc ff ff       	call   c0013b78 <Device::~Device()>
c0015e87:	83 c4 10             	add    esp,0x10
c0015e8a:	90                   	nop
c0015e8b:	83 c4 0c             	add    esp,0xc
c0015e8e:	c3                   	ret    
c0015e8f:	90                   	nop

c0015e90 <Keyboard::~Keyboard()>:
c0015e90:	83 ec 0c             	sub    esp,0xc
c0015e93:	83 ec 0c             	sub    esp,0xc
c0015e96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015e9a:	e8 cd ff ff ff       	call   c0015e6c <Keyboard::~Keyboard()>
c0015e9f:	83 c4 10             	add    esp,0x10
c0015ea2:	83 ec 08             	sub    esp,0x8
c0015ea5:	68 5c 01 00 00       	push   0x15c
c0015eaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015eae:	e8 e6 c8 ff ff       	call   c0012799 <operator delete(void*, unsigned long)>
c0015eb3:	83 c4 10             	add    esp,0x10
c0015eb6:	83 c4 0c             	add    esp,0xc
c0015eb9:	c3                   	ret    

c0015eba <LogicalDisk::close(int, int, void*)>:
c0015eba:	83 c8 ff             	or     eax,0xffffffff
c0015ebd:	c3                   	ret    

c0015ebe <LogicalDisk::~LogicalDisk()>:
c0015ebe:	83 ec 0c             	sub    esp,0xc
c0015ec1:	ba 20 b5 02 c0       	mov    edx,0xc002b520
c0015ec6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015eca:	89 10                	mov    DWORD PTR [eax],edx
c0015ecc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ed0:	83 ec 0c             	sub    esp,0xc
c0015ed3:	50                   	push   eax
c0015ed4:	e8 9f dc ff ff       	call   c0013b78 <Device::~Device()>
c0015ed9:	83 c4 10             	add    esp,0x10
c0015edc:	90                   	nop
c0015edd:	83 c4 0c             	add    esp,0xc
c0015ee0:	c3                   	ret    
c0015ee1:	90                   	nop

c0015ee2 <LogicalDisk::~LogicalDisk()>:
c0015ee2:	83 ec 0c             	sub    esp,0xc
c0015ee5:	83 ec 0c             	sub    esp,0xc
c0015ee8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015eec:	e8 cd ff ff ff       	call   c0015ebe <LogicalDisk::~LogicalDisk()>
c0015ef1:	83 c4 10             	add    esp,0x10
c0015ef4:	83 ec 08             	sub    esp,0x8
c0015ef7:	68 74 01 00 00       	push   0x174
c0015efc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f00:	e8 94 c8 ff ff       	call   c0012799 <operator delete(void*, unsigned long)>
c0015f05:	83 c4 10             	add    esp,0x10
c0015f08:	83 c4 0c             	add    esp,0xc
c0015f0b:	c3                   	ret    

c0015f0c <LogicalDisk::open(int, int, void*)>:
c0015f0c:	83 ec 18             	sub    esp,0x18
c0015f0f:	68 d4 b4 02 c0       	push   0xc002b4d4
c0015f14:	e8 24 42 00 00       	call   c001a13d <Krnl::panic(char const*)>
c0015f19:	83 c8 ff             	or     eax,0xffffffff
c0015f1c:	83 c4 1c             	add    esp,0x1c
c0015f1f:	c3                   	ret    

c0015f20 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015f20:	53                   	push   ebx
c0015f21:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015f25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015f29:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015f2d:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0015f33:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0015f39:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0015f3f:	77 10                	ja     c0015f51 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015f41:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015f47:	89 d3                	mov    ebx,edx
c0015f49:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015f4f:	72 05                	jb     c0015f56 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015f51:	83 c8 ff             	or     eax,0xffffffff
c0015f54:	89 c2                	mov    edx,eax
c0015f56:	5b                   	pop    ebx
c0015f57:	c3                   	ret    

c0015f58 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015f58:	56                   	push   esi
c0015f59:	83 c8 ff             	or     eax,0xffffffff
c0015f5c:	53                   	push   ebx
c0015f5d:	89 c2                	mov    edx,eax
c0015f5f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015f63:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015f67:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015f6b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015f71:	77 27                	ja     c0015f9a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015f73:	89 d8                	mov    eax,ebx
c0015f75:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015f7b:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015f81:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015f86:	89 c2                	mov    edx,eax
c0015f88:	73 10                	jae    c0015f9a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015f8a:	89 c8                	mov    eax,ecx
c0015f8c:	89 da                	mov    edx,ebx
c0015f8e:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015f94:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015f9a:	5b                   	pop    ebx
c0015f9b:	5e                   	pop    esi
c0015f9c:	c3                   	ret    
c0015f9d:	90                   	nop

c0015f9e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015f9e:	83 ec 1c             	sub    esp,0x1c
c0015fa1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015fa5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015fa9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015fad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015fb1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015fb5:	89 04 24             	mov    DWORD PTR [esp],eax
c0015fb8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015fbc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015fc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015fc4:	83 ec 08             	sub    esp,0x8
c0015fc7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015fcb:	50                   	push   eax
c0015fcc:	e8 dd de ff ff       	call   c0013eae <Device::Device(char const*)>
c0015fd1:	83 c4 10             	add    esp,0x10
c0015fd4:	ba 20 b5 02 c0       	mov    edx,0xc002b520
c0015fd9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015fdd:	89 10                	mov    DWORD PTR [eax],edx
c0015fdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015fe3:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015fea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015fee:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015ff5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ff9:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0016003:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016007:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001600b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001600f:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0016015:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c001601b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001601f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016022:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016026:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c001602c:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0016032:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016036:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001603a:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0016040:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016044:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001604e:	90                   	nop
c001604f:	83 c4 1c             	add    esp,0x1c
c0016052:	c3                   	ret    
c0016053:	90                   	nop

c0016054 <LogicalDisk::assignDriveLetter()>:
c0016054:	55                   	push   ebp
c0016055:	57                   	push   edi
c0016056:	56                   	push   esi
c0016057:	53                   	push   ebx
c0016058:	83 ec 14             	sub    esp,0x14
c001605b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001605f:	8b 3d 00 e8 02 c0    	mov    edi,DWORD PTR ds:0xc002e800
c0016065:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001606b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001606f:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0016075:	8b 3d 04 e8 02 c0    	mov    edi,DWORD PTR ds:0xc002e804
c001607b:	3c 01                	cmp    al,0x1
c001607d:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0016081:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016085:	19 c0                	sbb    eax,eax
c0016087:	83 e0 02             	and    eax,0x2
c001608a:	83 c0 41             	add    eax,0x41
c001608d:	0f be e8             	movsx  ebp,al
c0016090:	3c 43                	cmp    al,0x43
c0016092:	75 10                	jne    c00160a4 <LogicalDisk::assignDriveLetter()+0x50>
c0016094:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001609b:	75 5d                	jne    c00160fa <LogicalDisk::assignDriveLetter()+0xa6>
c001609d:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00160a2:	75 56                	jne    c00160fa <LogicalDisk::assignDriveLetter()+0xa6>
c00160a4:	8d 75 bf             	lea    esi,[ebp-0x41]
c00160a7:	ba 01 00 00 00       	mov    edx,0x1
c00160ac:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00160b0:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00160b4:	d3 e2                	shl    edx,cl
c00160b6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00160ba:	89 d7                	mov    edi,edx
c00160bc:	89 d6                	mov    esi,edx
c00160be:	c1 ff 1f             	sar    edi,0x1f
c00160c1:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c00160c5:	21 f9                	and    ecx,edi
c00160c7:	09 d1                	or     ecx,edx
c00160c9:	75 2f                	jne    c00160fa <LogicalDisk::assignDriveLetter()+0xa6>
c00160cb:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00160cf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00160d3:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c00160d9:	09 f2                	or     edx,esi
c00160db:	89 15 00 e8 02 c0    	mov    DWORD PTR ds:0xc002e800,edx
c00160e1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00160e5:	09 fa                	or     edx,edi
c00160e7:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00160eb:	89 15 04 e8 02 c0    	mov    DWORD PTR ds:0xc002e804,edx
c00160f1:	89 1c bd 20 e8 02 c0 	mov    DWORD PTR [edi*4-0x3ffd17e0],ebx
c00160f8:	eb 08                	jmp    c0016102 <LogicalDisk::assignDriveLetter()+0xae>
c00160fa:	45                   	inc    ebp
c00160fb:	40                   	inc    eax
c00160fc:	3c 5b                	cmp    al,0x5b
c00160fe:	75 90                	jne    c0016090 <LogicalDisk::assignDriveLetter()+0x3c>
c0016100:	31 c0                	xor    eax,eax
c0016102:	83 c4 14             	add    esp,0x14
c0016105:	5b                   	pop    ebx
c0016106:	5e                   	pop    esi
c0016107:	5f                   	pop    edi
c0016108:	5d                   	pop    ebp
c0016109:	c3                   	ret    

c001610a <LogicalDisk::mount()>:
c001610a:	56                   	push   esi
c001610b:	53                   	push   ebx
c001610c:	53                   	push   ebx
c001610d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016111:	8b 1d 94 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e394
c0016117:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0016121:	85 db                	test   ebx,ebx
c0016123:	74 27                	je     c001614c <LogicalDisk::mount()+0x42>
c0016125:	51                   	push   ecx
c0016126:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c001612d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001612f:	83 e8 41             	sub    eax,0x41
c0016132:	50                   	push   eax
c0016133:	56                   	push   esi
c0016134:	53                   	push   ebx
c0016135:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016138:	83 c4 10             	add    esp,0x10
c001613b:	84 c0                	test   al,al
c001613d:	74 08                	je     c0016147 <LogicalDisk::mount()+0x3d>
c001613f:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0016145:	eb 07                	jmp    c001614e <LogicalDisk::mount()+0x44>
c0016147:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001614a:	eb d5                	jmp    c0016121 <LogicalDisk::mount()+0x17>
c001614c:	31 c0                	xor    eax,eax
c001614e:	5a                   	pop    edx
c001614f:	5b                   	pop    ebx
c0016150:	5e                   	pop    esi
c0016151:	c3                   	ret    

c0016152 <LogicalDisk::unmount()>:
c0016152:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016156:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016160:	c3                   	ret    
c0016161:	90                   	nop

c0016162 <LogicalDisk::eject()>:
c0016162:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016166:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001616c:	8b 10                	mov    edx,DWORD PTR [eax]
c001616e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016172:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0016175:	90                   	nop

c0016176 <LogicalDisk::unassignDriveLetter()>:
c0016176:	57                   	push   edi
c0016177:	56                   	push   esi
c0016178:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001617c:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0016183:	84 c9                	test   cl,cl
c0016185:	75 0f                	jne    c0016196 <LogicalDisk::unassignDriveLetter()+0x20>
c0016187:	c7 44 24 0c f8 b4 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b4f8
c001618f:	5e                   	pop    esi
c0016190:	5f                   	pop    edi
c0016191:	e9 a7 3f 00 00       	jmp    c001a13d <Krnl::panic(char const*)>
c0016196:	83 e9 41             	sub    ecx,0x41
c0016199:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c00161a0:	b8 01 00 00 00       	mov    eax,0x1
c00161a5:	c7 04 8d 20 e8 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd17e0],0x0
c00161b0:	d3 e0                	shl    eax,cl
c00161b2:	89 c7                	mov    edi,eax
c00161b4:	f7 d0                	not    eax
c00161b6:	c1 ff 1f             	sar    edi,0x1f
c00161b9:	21 05 00 e8 02 c0    	and    DWORD PTR ds:0xc002e800,eax
c00161bf:	89 fe                	mov    esi,edi
c00161c1:	f7 d6                	not    esi
c00161c3:	21 35 04 e8 02 c0    	and    DWORD PTR ds:0xc002e804,esi
c00161c9:	5e                   	pop    esi
c00161ca:	5f                   	pop    edi
c00161cb:	c3                   	ret    

c00161cc <LogicalDisk::read(unsigned long long, int, void*)>:
c00161cc:	57                   	push   edi
c00161cd:	56                   	push   esi
c00161ce:	53                   	push   ebx
c00161cf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00161d3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00161d7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00161db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00161df:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00161e5:	77 41                	ja     c0016228 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00161e7:	99                   	cdq    
c00161e8:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00161ee:	01 c8                	add    eax,ecx
c00161f0:	11 da                	adc    edx,ebx
c00161f2:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00161f8:	19 d7                	sbb    edi,edx
c00161fa:	72 33                	jb     c001622f <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00161fc:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016202:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016208:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001620c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016210:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016216:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001621c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016220:	5b                   	pop    ebx
c0016221:	5e                   	pop    esi
c0016222:	5f                   	pop    edi
c0016223:	e9 1c 0b 00 00       	jmp    c0016d44 <VCache::read(unsigned long long, int, void*)>
c0016228:	b8 05 00 00 00       	mov    eax,0x5
c001622d:	eb 05                	jmp    c0016234 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c001622f:	b8 07 00 00 00       	mov    eax,0x7
c0016234:	5b                   	pop    ebx
c0016235:	5e                   	pop    esi
c0016236:	5f                   	pop    edi
c0016237:	c3                   	ret    

c0016238 <LogicalDisk::write(unsigned long long, int, void*)>:
c0016238:	57                   	push   edi
c0016239:	56                   	push   esi
c001623a:	53                   	push   ebx
c001623b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001623f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016243:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016247:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001624b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016251:	77 41                	ja     c0016294 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0016253:	99                   	cdq    
c0016254:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001625a:	01 c8                	add    eax,ecx
c001625c:	11 da                	adc    edx,ebx
c001625e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016264:	19 d7                	sbb    edi,edx
c0016266:	72 33                	jb     c001629b <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0016268:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001626e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016274:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016278:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001627c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016282:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016288:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001628c:	5b                   	pop    ebx
c001628d:	5e                   	pop    esi
c001628e:	5f                   	pop    edi
c001628f:	e9 86 09 00 00       	jmp    c0016c1a <VCache::write(unsigned long long, int, void*)>
c0016294:	b8 05 00 00 00       	mov    eax,0x5
c0016299:	eb 05                	jmp    c00162a0 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c001629b:	b8 07 00 00 00       	mov    eax,0x7
c00162a0:	5b                   	pop    ebx
c00162a1:	5e                   	pop    esi
c00162a2:	5f                   	pop    edi
c00162a3:	c3                   	ret    

c00162a4 <Mouse::Mouse(char const*)>:
c00162a4:	83 ec 0c             	sub    esp,0xc
c00162a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162ab:	83 ec 08             	sub    esp,0x8
c00162ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00162b2:	50                   	push   eax
c00162b3:	e8 f6 db ff ff       	call   c0013eae <Device::Device(char const*)>
c00162b8:	83 c4 10             	add    esp,0x10
c00162bb:	ba 4c b5 02 c0       	mov    edx,0xc002b54c
c00162c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162c4:	89 10                	mov    DWORD PTR [eax],edx
c00162c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162ca:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00162d4:	90                   	nop
c00162d5:	83 c4 0c             	add    esp,0xc
c00162d8:	c3                   	ret    
c00162d9:	90                   	nop

c00162da <Mouse::~Mouse()>:
c00162da:	83 ec 0c             	sub    esp,0xc
c00162dd:	ba 4c b5 02 c0       	mov    edx,0xc002b54c
c00162e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162e6:	89 10                	mov    DWORD PTR [eax],edx
c00162e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162ec:	83 ec 0c             	sub    esp,0xc
c00162ef:	50                   	push   eax
c00162f0:	e8 83 d8 ff ff       	call   c0013b78 <Device::~Device()>
c00162f5:	83 c4 10             	add    esp,0x10
c00162f8:	90                   	nop
c00162f9:	83 c4 0c             	add    esp,0xc
c00162fc:	c3                   	ret    
c00162fd:	90                   	nop

c00162fe <Mouse::~Mouse()>:
c00162fe:	83 ec 0c             	sub    esp,0xc
c0016301:	83 ec 0c             	sub    esp,0xc
c0016304:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016308:	e8 cd ff ff ff       	call   c00162da <Mouse::~Mouse()>
c001630d:	83 c4 10             	add    esp,0x10
c0016310:	83 ec 08             	sub    esp,0x8
c0016313:	68 58 01 00 00       	push   0x158
c0016318:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001631c:	e8 78 c4 ff ff       	call   c0012799 <operator delete(void*, unsigned long)>
c0016321:	83 c4 10             	add    esp,0x10
c0016324:	83 c4 0c             	add    esp,0xc
c0016327:	c3                   	ret    

c0016328 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016328:	55                   	push   ebp
c0016329:	57                   	push   edi
c001632a:	56                   	push   esi
c001632b:	53                   	push   ebx
c001632c:	81 ec 28 01 00 00    	sub    esp,0x128
c0016332:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0016339:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0016340:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0016347:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c001634e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016352:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0016356:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001635d:	e8 48 dc ff ff       	call   c0013faa <Device::getName()>
c0016362:	5a                   	pop    edx
c0016363:	59                   	pop    ecx
c0016364:	50                   	push   eax
c0016365:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0016369:	55                   	push   ebp
c001636a:	e8 9d a4 fe ff       	call   c000080c <strcpy>
c001636f:	5b                   	pop    ebx
c0016370:	58                   	pop    eax
c0016371:	68 70 b5 02 c0       	push   0xc002b570
c0016376:	55                   	push   ebp
c0016377:	e8 d0 a5 fe ff       	call   c000094c <strcat>
c001637c:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0016383:	e8 91 94 ff ff       	call   c000f819 <malloc>
c0016388:	83 c4 0c             	add    esp,0xc
c001638b:	89 c3                	mov    ebx,eax
c001638d:	57                   	push   edi
c001638e:	56                   	push   esi
c001638f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016393:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016397:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001639e:	55                   	push   ebp
c001639f:	50                   	push   eax
c00163a0:	e8 f9 fb ff ff       	call   c0015f9e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00163a5:	83 c4 14             	add    esp,0x14
c00163a8:	53                   	push   ebx
c00163a9:	e8 a6 fc ff ff       	call   c0016054 <LogicalDisk::assignDriveLetter()>
c00163ae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00163b1:	e8 54 fd ff ff       	call   c001610a <LogicalDisk::mount()>
c00163b6:	58                   	pop    eax
c00163b7:	5a                   	pop    edx
c00163b8:	53                   	push   ebx
c00163b9:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00163c0:	e8 e5 d8 ff ff       	call   c0013caa <Device::addChild(Device*)>
c00163c5:	81 c4 2c 01 00 00    	add    esp,0x12c
c00163cb:	5b                   	pop    ebx
c00163cc:	5e                   	pop    esi
c00163cd:	5f                   	pop    edi
c00163ce:	5d                   	pop    ebp
c00163cf:	c3                   	ret    

c00163d0 <createPartitionsForDisk(PhysicalDisk*)>:
c00163d0:	55                   	push   ebp
c00163d1:	57                   	push   edi
c00163d2:	56                   	push   esi
c00163d3:	53                   	push   ebx
c00163d4:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00163da:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00163e1:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00163e7:	3d 00 02 00 00       	cmp    eax,0x200
c00163ec:	74 27                	je     c0016415 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00163ee:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c00163f4:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c00163fa:	83 ec 10             	sub    esp,0x10
c00163fd:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016401:	99                   	cdq    
c0016402:	c1 e6 0a             	shl    esi,0xa
c0016405:	52                   	push   edx
c0016406:	89 fd                	mov    ebp,edi
c0016408:	50                   	push   eax
c0016409:	55                   	push   ebp
c001640a:	56                   	push   esi
c001640b:	e8 64 07 01 00       	call   c0026b74 <__udivdi3>
c0016410:	e9 b1 00 00 00       	jmp    c00164c6 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016415:	83 ec 0c             	sub    esp,0xc
c0016418:	8b 03                	mov    eax,DWORD PTR [ebx]
c001641a:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c001641e:	56                   	push   esi
c001641f:	6a 01                	push   0x1
c0016421:	6a 00                	push   0x0
c0016423:	6a 00                	push   0x0
c0016425:	53                   	push   ebx
c0016426:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016429:	83 c4 20             	add    esp,0x20
c001642c:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016434:	75 0a                	jne    c0016440 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016436:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c001643e:	74 2c                	je     c001646c <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016440:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016446:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001644c:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016452:	83 ec 10             	sub    esp,0x10
c0016455:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016459:	89 f7                	mov    edi,esi
c001645b:	c1 e0 0a             	shl    eax,0xa
c001645e:	c1 ff 1f             	sar    edi,0x1f
c0016461:	57                   	push   edi
c0016462:	56                   	push   esi
c0016463:	52                   	push   edx
c0016464:	50                   	push   eax
c0016465:	e8 0a 07 01 00       	call   c0026b74 <__udivdi3>
c001646a:	eb 5a                	jmp    c00164c6 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001646c:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016473:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c001647a:	83 e1 7f             	and    ecx,0x7f
c001647d:	83 e0 7f             	and    eax,0x7f
c0016480:	01 c1                	add    ecx,eax
c0016482:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016489:	83 e0 7f             	and    eax,0x7f
c001648c:	01 c1                	add    ecx,eax
c001648e:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016495:	83 e0 7f             	and    eax,0x7f
c0016498:	00 c1                	add    cl,al
c001649a:	74 41                	je     c00164dd <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c001649c:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00164a2:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00164a8:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00164ae:	83 ec 10             	sub    esp,0x10
c00164b1:	0f a4 c2 0a          	shld   edx,eax,0xa
c00164b5:	89 f7                	mov    edi,esi
c00164b7:	c1 e0 0a             	shl    eax,0xa
c00164ba:	c1 ff 1f             	sar    edi,0x1f
c00164bd:	57                   	push   edi
c00164be:	56                   	push   esi
c00164bf:	52                   	push   edx
c00164c0:	50                   	push   eax
c00164c1:	e8 ae 06 01 00       	call   c0026b74 <__udivdi3>
c00164c6:	83 c4 14             	add    esp,0x14
c00164c9:	52                   	push   edx
c00164ca:	50                   	push   eax
c00164cb:	6a 00                	push   0x0
c00164cd:	6a 00                	push   0x0
c00164cf:	53                   	push   ebx
c00164d0:	e8 53 fe ff ff       	call   c0016328 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00164d5:	83 c4 20             	add    esp,0x20
c00164d8:	e9 79 01 00 00       	jmp    c0016656 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c00164dd:	89 f0                	mov    eax,esi
c00164df:	31 f6                	xor    esi,esi
c00164e1:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c00164e8:	75 02                	jne    c00164ec <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c00164ea:	89 f1                	mov    ecx,esi
c00164ec:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c00164f3:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c00164fa:	c1 e2 08             	shl    edx,0x8
c00164fd:	c1 e7 10             	shl    edi,0x10
c0016500:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016508:	09 fa                	or     edx,edi
c001650a:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016512:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016519:	83 c0 10             	add    eax,0x10
c001651c:	09 fa                	or     edx,edi
c001651e:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016525:	c1 e7 18             	shl    edi,0x18
c0016528:	09 fa                	or     edx,edi
c001652a:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016531:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016535:	c1 e7 10             	shl    edi,0x10
c0016538:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c001653f:	c1 e2 08             	shl    edx,0x8
c0016542:	09 fa                	or     edx,edi
c0016544:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c001654b:	09 fa                	or     edx,edi
c001654d:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016554:	c1 e7 18             	shl    edi,0x18
c0016557:	09 fa                	or     edx,edi
c0016559:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c001655d:	46                   	inc    esi
c001655e:	83 fe 04             	cmp    esi,0x4
c0016561:	0f 85 7a ff ff ff    	jne    c00164e1 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016567:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001656b:	83 f0 01             	xor    eax,0x1
c001656e:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016572:	75 57                	jne    c00165cb <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016574:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016578:	83 f0 01             	xor    eax,0x1
c001657b:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001657f:	75 4a                	jne    c00165cb <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016581:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016585:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001658d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016595:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001659b:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00165a1:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00165a7:	0f a4 c2 0a          	shld   edx,eax,0xa
c00165ab:	89 f7                	mov    edi,esi
c00165ad:	c1 e0 0a             	shl    eax,0xa
c00165b0:	c1 ff 1f             	sar    edi,0x1f
c00165b3:	57                   	push   edi
c00165b4:	56                   	push   esi
c00165b5:	52                   	push   edx
c00165b6:	50                   	push   eax
c00165b7:	e8 b8 05 01 00       	call   c0026b74 <__udivdi3>
c00165bc:	83 c4 10             	add    esp,0x10
c00165bf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00165c3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00165c7:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00165cb:	84 c9                	test   cl,cl
c00165cd:	74 53                	je     c0016622 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c00165cf:	0f b6 c9             	movzx  ecx,cl
c00165d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165d6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00165da:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00165de:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00165e2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00165e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00165ea:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c00165ee:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c00165f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00165f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00165fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00165fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016602:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016606:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c001660a:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c001660e:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016612:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016616:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001661a:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c001661e:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016622:	31 ed                	xor    ebp,ebp
c0016624:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016628:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001662c:	89 f8                	mov    eax,edi
c001662e:	09 f0                	or     eax,esi
c0016630:	74 1e                	je     c0016650 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016632:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016636:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001663a:	89 d1                	mov    ecx,edx
c001663c:	09 c1                	or     ecx,eax
c001663e:	74 10                	je     c0016650 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016640:	83 ec 0c             	sub    esp,0xc
c0016643:	57                   	push   edi
c0016644:	56                   	push   esi
c0016645:	52                   	push   edx
c0016646:	50                   	push   eax
c0016647:	53                   	push   ebx
c0016648:	e8 db fc ff ff       	call   c0016328 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001664d:	83 c4 20             	add    esp,0x20
c0016650:	45                   	inc    ebp
c0016651:	83 fd 04             	cmp    ebp,0x4
c0016654:	75 ce                	jne    c0016624 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016656:	81 c4 5c 02 00 00    	add    esp,0x25c
c001665c:	5b                   	pop    ebx
c001665d:	5e                   	pop    esi
c001665e:	5f                   	pop    edi
c001665f:	5d                   	pop    ebp
c0016660:	c3                   	ret    
c0016661:	90                   	nop

c0016662 <Serial::Serial(char const*)>:
c0016662:	83 ec 0c             	sub    esp,0xc
c0016665:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016669:	83 ec 08             	sub    esp,0x8
c001666c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016670:	50                   	push   eax
c0016671:	e8 38 d8 ff ff       	call   c0013eae <Device::Device(char const*)>
c0016676:	83 c4 10             	add    esp,0x10
c0016679:	ba 84 b5 02 c0       	mov    edx,0xc002b584
c001667e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016682:	89 10                	mov    DWORD PTR [eax],edx
c0016684:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016688:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016692:	90                   	nop
c0016693:	83 c4 0c             	add    esp,0xc
c0016696:	c3                   	ret    
c0016697:	90                   	nop

c0016698 <Serial::~Serial()>:
c0016698:	83 ec 0c             	sub    esp,0xc
c001669b:	ba 84 b5 02 c0       	mov    edx,0xc002b584
c00166a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166a4:	89 10                	mov    DWORD PTR [eax],edx
c00166a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166aa:	83 ec 0c             	sub    esp,0xc
c00166ad:	50                   	push   eax
c00166ae:	e8 c5 d4 ff ff       	call   c0013b78 <Device::~Device()>
c00166b3:	83 c4 10             	add    esp,0x10
c00166b6:	90                   	nop
c00166b7:	83 c4 0c             	add    esp,0xc
c00166ba:	c3                   	ret    
c00166bb:	90                   	nop

c00166bc <Serial::~Serial()>:
c00166bc:	83 ec 0c             	sub    esp,0xc
c00166bf:	83 ec 0c             	sub    esp,0xc
c00166c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00166c6:	e8 cd ff ff ff       	call   c0016698 <Serial::~Serial()>
c00166cb:	83 c4 10             	add    esp,0x10
c00166ce:	83 ec 08             	sub    esp,0x8
c00166d1:	68 58 01 00 00       	push   0x158
c00166d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00166da:	e8 ba c0 ff ff       	call   c0012799 <operator delete(void*, unsigned long)>
c00166df:	83 c4 10             	add    esp,0x10
c00166e2:	83 c4 0c             	add    esp,0xc
c00166e5:	c3                   	ret    

c00166e6 <Timer::Timer(char const*)>:
c00166e6:	83 ec 0c             	sub    esp,0xc
c00166e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166ed:	83 ec 08             	sub    esp,0x8
c00166f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00166f4:	50                   	push   eax
c00166f5:	e8 b4 d7 ff ff       	call   c0013eae <Device::Device(char const*)>
c00166fa:	83 c4 10             	add    esp,0x10
c00166fd:	ba c8 b5 02 c0       	mov    edx,0xc002b5c8
c0016702:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016706:	89 10                	mov    DWORD PTR [eax],edx
c0016708:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001670c:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016716:	90                   	nop
c0016717:	83 c4 0c             	add    esp,0xc
c001671a:	c3                   	ret    
c001671b:	90                   	nop

c001671c <Timer::~Timer()>:
c001671c:	83 ec 0c             	sub    esp,0xc
c001671f:	ba c8 b5 02 c0       	mov    edx,0xc002b5c8
c0016724:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016728:	89 10                	mov    DWORD PTR [eax],edx
c001672a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001672e:	83 ec 0c             	sub    esp,0xc
c0016731:	50                   	push   eax
c0016732:	e8 41 d4 ff ff       	call   c0013b78 <Device::~Device()>
c0016737:	83 c4 10             	add    esp,0x10
c001673a:	90                   	nop
c001673b:	83 c4 0c             	add    esp,0xc
c001673e:	c3                   	ret    
c001673f:	90                   	nop

c0016740 <Timer::~Timer()>:
c0016740:	83 ec 0c             	sub    esp,0xc
c0016743:	83 ec 0c             	sub    esp,0xc
c0016746:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001674a:	e8 cd ff ff ff       	call   c001671c <Timer::~Timer()>
c001674f:	83 c4 10             	add    esp,0x10
c0016752:	83 ec 08             	sub    esp,0x8
c0016755:	68 5c 01 00 00       	push   0x15c
c001675a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001675e:	e8 36 c0 ff ff       	call   c0012799 <operator delete(void*, unsigned long)>
c0016763:	83 c4 10             	add    esp,0x10
c0016766:	83 c4 0c             	add    esp,0xc
c0016769:	c3                   	ret    

c001676a <Timer::read()>:
c001676a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001676e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016774:	c3                   	ret    

c0016775 <timerHandler(unsigned long long)>:
c0016775:	55                   	push   ebp
c0016776:	57                   	push   edi
c0016777:	56                   	push   esi
c0016778:	53                   	push   ebx
c0016779:	83 ec 0c             	sub    esp,0xc
c001677c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016780:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016784:	01 35 90 e8 02 c0    	add    DWORD PTR ds:0xc002e890,esi
c001678a:	11 3d 94 e8 02 c0    	adc    DWORD PTR ds:0xc002e894,edi
c0016790:	80 3d 2d e2 02 c0 00 	cmp    BYTE PTR ds:0xc002e22d,0x0
c0016797:	0f 84 42 01 00 00    	je     c00168df <timerHandler(unsigned long long)+0x16a>
c001679d:	fa                   	cli    
c001679e:	ff 05 28 f7 02 c0    	inc    DWORD PTR ds:0xc002f728
c00167a4:	83 ec 0c             	sub    esp,0xc
c00167a7:	ff 05 24 f7 02 c0    	inc    DWORD PTR ds:0xc002f724
c00167ad:	68 38 f7 02 c0       	push   0xc002f738
c00167b2:	e8 17 24 01 00       	call   c0028bce <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00167b7:	83 c4 10             	add    esp,0x10
c00167ba:	84 c0                	test   al,al
c00167bc:	0f 85 a2 00 00 00    	jne    c0016864 <timerHandler(unsigned long long)+0xef>
c00167c2:	83 ec 0c             	sub    esp,0xc
c00167c5:	68 38 f7 02 c0       	push   0xc002f738
c00167ca:	e8 1b 24 01 00       	call   c0028bea <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00167cf:	83 c4 10             	add    esp,0x10
c00167d2:	89 c3                	mov    ebx,eax
c00167d4:	83 ec 0c             	sub    esp,0xc
c00167d7:	68 38 f7 02 c0       	push   0xc002f738
c00167dc:	e8 09 24 01 00       	call   c0028bea <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00167e1:	c7 04 24 38 f7 02 c0 	mov    DWORD PTR [esp],0xc002f738
c00167e8:	89 c5                	mov    ebp,eax
c00167ea:	e8 03 24 01 00       	call   c0028bf2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00167ef:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c00167f2:	83 c4 10             	add    esp,0x10
c00167f5:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c00167f8:	39 15 90 e8 02 c0    	cmp    DWORD PTR ds:0xc002e890,edx
c00167fe:	a1 94 e8 02 c0       	mov    eax,ds:0xc002e894
c0016803:	19 c8                	sbb    eax,ecx
c0016805:	72 21                	jb     c0016828 <timerHandler(unsigned long long)+0xb3>
c0016807:	83 ec 0c             	sub    esp,0xc
c001680a:	55                   	push   ebp
c001680b:	e8 51 79 00 00       	call   c001e161 <unblockTask(ThreadControlBlock*)>
c0016810:	83 c4 10             	add    esp,0x10
c0016813:	39 eb                	cmp    ebx,ebp
c0016815:	75 21                	jne    c0016838 <timerHandler(unsigned long long)+0xc3>
c0016817:	83 ec 0c             	sub    esp,0xc
c001681a:	68 38 f7 02 c0       	push   0xc002f738
c001681f:	e8 c6 23 01 00       	call   c0028bea <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016824:	89 c3                	mov    ebx,eax
c0016826:	eb 0d                	jmp    c0016835 <timerHandler(unsigned long long)+0xc0>
c0016828:	50                   	push   eax
c0016829:	50                   	push   eax
c001682a:	55                   	push   ebp
c001682b:	68 38 f7 02 c0       	push   0xc002f738
c0016830:	e8 6b 24 01 00       	call   c0028ca0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016835:	83 c4 10             	add    esp,0x10
c0016838:	83 ec 0c             	sub    esp,0xc
c001683b:	68 38 f7 02 c0       	push   0xc002f738
c0016840:	e8 89 23 01 00       	call   c0028bce <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016845:	83 c4 10             	add    esp,0x10
c0016848:	84 c0                	test   al,al
c001684a:	75 18                	jne    c0016864 <timerHandler(unsigned long long)+0xef>
c001684c:	83 ec 0c             	sub    esp,0xc
c001684f:	68 38 f7 02 c0       	push   0xc002f738
c0016854:	e8 91 23 01 00       	call   c0028bea <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016859:	83 c4 10             	add    esp,0x10
c001685c:	39 d8                	cmp    eax,ebx
c001685e:	0f 85 70 ff ff ff    	jne    c00167d4 <timerHandler(unsigned long long)+0x5f>
c0016864:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016869:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c001686d:	74 3d                	je     c00168ac <timerHandler(unsigned long long)+0x137>
c001686f:	80 3d 2c e2 02 c0 00 	cmp    BYTE PTR ds:0xc002e22c,0x0
c0016876:	74 34                	je     c00168ac <timerHandler(unsigned long long)+0x137>
c0016878:	fa                   	cli    
c0016879:	ff 05 28 f7 02 c0    	inc    DWORD PTR ds:0xc002f728
c001687f:	31 d2                	xor    edx,edx
c0016881:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016886:	89 f9                	mov    ecx,edi
c0016888:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c001688b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016890:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016893:	39 c6                	cmp    esi,eax
c0016895:	19 d1                	sbb    ecx,edx
c0016897:	72 05                	jb     c001689e <timerHandler(unsigned long long)+0x129>
c0016899:	e8 31 74 00 00       	call   c001dccf <schedule()>
c001689e:	a1 28 f7 02 c0       	mov    eax,ds:0xc002f728
c00168a3:	48                   	dec    eax
c00168a4:	a3 28 f7 02 c0       	mov    ds:0xc002f728,eax
c00168a9:	75 01                	jne    c00168ac <timerHandler(unsigned long long)+0x137>
c00168ab:	fb                   	sti    
c00168ac:	a1 24 f7 02 c0       	mov    eax,ds:0xc002f724
c00168b1:	48                   	dec    eax
c00168b2:	a3 24 f7 02 c0       	mov    ds:0xc002f724,eax
c00168b7:	75 18                	jne    c00168d1 <timerHandler(unsigned long long)+0x15c>
c00168b9:	83 3d 20 f7 02 c0 00 	cmp    DWORD PTR ds:0xc002f720,0x0
c00168c0:	74 0f                	je     c00168d1 <timerHandler(unsigned long long)+0x15c>
c00168c2:	c7 05 20 f7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f720,0x0
c00168cc:	e8 fe 73 00 00       	call   c001dccf <schedule()>
c00168d1:	a1 28 f7 02 c0       	mov    eax,ds:0xc002f728
c00168d6:	48                   	dec    eax
c00168d7:	a3 28 f7 02 c0       	mov    ds:0xc002f728,eax
c00168dc:	75 01                	jne    c00168df <timerHandler(unsigned long long)+0x16a>
c00168de:	fb                   	sti    
c00168df:	83 c4 0c             	add    esp,0xc
c00168e2:	5b                   	pop    ebx
c00168e3:	5e                   	pop    esi
c00168e4:	5f                   	pop    edi
c00168e5:	5d                   	pop    ebp
c00168e6:	c3                   	ret    

c00168e7 <setupTimer(int)>:
c00168e7:	57                   	push   edi
c00168e8:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c00168ed:	56                   	push   esi
c00168ee:	53                   	push   ebx
c00168ef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00168f3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00168f9:	83 ec 0c             	sub    esp,0xc
c00168fc:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016902:	e8 a3 d6 ff ff       	call   c0013faa <Device::getName()>
c0016907:	83 c4 10             	add    esp,0x10
c001690a:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001690d:	0f 85 8d 00 00 00    	jne    c00169a0 <setupTimer(int)+0xb9>
c0016913:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c0016918:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c001691f:	74 7f                	je     c00169a0 <setupTimer(int)+0xb9>
c0016921:	83 ec 0c             	sub    esp,0xc
c0016924:	68 5c 01 00 00       	push   0x15c
c0016929:	e8 eb 8e ff ff       	call   c000f819 <malloc>
c001692e:	89 04 24             	mov    DWORD PTR [esp],eax
c0016931:	89 c3                	mov    ebx,eax
c0016933:	e8 10 fe 00 00       	call   c0026748 <PIT::PIT()>
c0016938:	59                   	pop    ecx
c0016939:	5f                   	pop    edi
c001693a:	53                   	push   ebx
c001693b:	ff 35 28 e2 02 c0    	push   DWORD PTR ds:0xc002e228
c0016941:	e8 64 d3 ff ff       	call   c0013caa <Device::addChild(Device*)>
c0016946:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016948:	6a 00                	push   0x0
c001694a:	6a 00                	push   0x0
c001694c:	56                   	push   esi
c001694d:	53                   	push   ebx
c001694e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016951:	83 c4 14             	add    esp,0x14
c0016954:	68 60 01 00 00       	push   0x160
c0016959:	e8 bb 8e ff ff       	call   c000f819 <malloc>
c001695e:	89 04 24             	mov    DWORD PTR [esp],eax
c0016961:	89 c7                	mov    edi,eax
c0016963:	e8 90 fc 00 00       	call   c00265f8 <APICTimer::APICTimer()>
c0016968:	6a 00                	push   0x0
c001696a:	6a 00                	push   0x0
c001696c:	56                   	push   esi
c001696d:	57                   	push   edi
c001696e:	e8 87 fb 00 00       	call   c00264fa <APICTimer::open(int, int, void*)>
c0016973:	83 c4 20             	add    esp,0x20
c0016976:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016978:	6a 00                	push   0x0
c001697a:	6a 00                	push   0x0
c001697c:	6a 00                	push   0x0
c001697e:	53                   	push   ebx
c001697f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016982:	58                   	pop    eax
c0016983:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c0016988:	5a                   	pop    edx
c0016989:	57                   	push   edi
c001698a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016990:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016996:	e8 0f d3 ff ff       	call   c0013caa <Device::addChild(Device*)>
c001699b:	83 c4 10             	add    esp,0x10
c001699e:	eb 33                	jmp    c00169d3 <setupTimer(int)+0xec>
c00169a0:	83 ec 0c             	sub    esp,0xc
c00169a3:	68 5c 01 00 00       	push   0x15c
c00169a8:	e8 6c 8e ff ff       	call   c000f819 <malloc>
c00169ad:	89 04 24             	mov    DWORD PTR [esp],eax
c00169b0:	89 c3                	mov    ebx,eax
c00169b2:	e8 91 fd 00 00       	call   c0026748 <PIT::PIT()>
c00169b7:	58                   	pop    eax
c00169b8:	5a                   	pop    edx
c00169b9:	53                   	push   ebx
c00169ba:	ff 35 28 e2 02 c0    	push   DWORD PTR ds:0xc002e228
c00169c0:	e8 e5 d2 ff ff       	call   c0013caa <Device::addChild(Device*)>
c00169c5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00169c7:	6a 00                	push   0x0
c00169c9:	6a 00                	push   0x0
c00169cb:	56                   	push   esi
c00169cc:	53                   	push   ebx
c00169cd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00169d0:	83 c4 20             	add    esp,0x20
c00169d3:	89 d8                	mov    eax,ebx
c00169d5:	5b                   	pop    ebx
c00169d6:	5e                   	pop    esi
c00169d7:	5f                   	pop    edi
c00169d8:	c3                   	ret    
c00169d9:	90                   	nop

c00169da <VCache::VCache(PhysicalDisk*)>:
c00169da:	53                   	push   ebx
c00169db:	83 ec 18             	sub    esp,0x18
c00169de:	ba 18 b7 02 c0       	mov    edx,0xc002b718
c00169e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169e7:	89 10                	mov    DWORD PTR [eax],edx
c00169e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169ed:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c00169f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169f8:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c00169ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a03:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016a0a:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016a11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a15:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016a1c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016a23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a27:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016a2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a32:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016a36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a3a:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016a41:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016a48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a4c:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016a50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a54:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016a58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a5c:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a64:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016a6b:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016a73:	83 ec 0c             	sub    esp,0xc
c0016a76:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016a7a:	e8 9a 8d ff ff       	call   c000f819 <malloc>
c0016a7f:	83 c4 10             	add    esp,0x10
c0016a82:	89 c3                	mov    ebx,eax
c0016a84:	83 ec 0c             	sub    esp,0xc
c0016a87:	53                   	push   ebx
c0016a88:	e8 0b 70 00 00       	call   c001da98 <Mutex::Mutex()>
c0016a8d:	83 c4 10             	add    esp,0x10
c0016a90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a94:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016a97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a9b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016a9f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016aa2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016aa6:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016aad:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016ab1:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016ab7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016abb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016abe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016ac2:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016ac8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016ace:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016ad2:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016ad5:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016ad8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016adc:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016ae0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016ae4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016aea:	05 00 01 00 00       	add    eax,0x100
c0016aef:	c1 e0 04             	shl    eax,0x4
c0016af2:	83 ec 0c             	sub    esp,0xc
c0016af5:	50                   	push   eax
c0016af6:	e8 1e 8d ff ff       	call   c000f819 <malloc>
c0016afb:	83 c4 10             	add    esp,0x10
c0016afe:	89 c2                	mov    edx,eax
c0016b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b04:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016b07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b0b:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016b12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b16:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016b1a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016b1e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016b24:	c1 e0 07             	shl    eax,0x7
c0016b27:	83 ec 0c             	sub    esp,0xc
c0016b2a:	50                   	push   eax
c0016b2b:	e8 e9 8c ff ff       	call   c000f819 <malloc>
c0016b30:	83 c4 10             	add    esp,0x10
c0016b33:	89 c2                	mov    edx,eax
c0016b35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b39:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016b3c:	90                   	nop
c0016b3d:	83 c4 18             	add    esp,0x18
c0016b40:	5b                   	pop    ebx
c0016b41:	c3                   	ret    

c0016b42 <VCache::invalidateReadBuffer()>:
c0016b42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016b46:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0016b4c:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016b50:	c3                   	ret    
c0016b51:	90                   	nop

c0016b52 <VCache::writeWriteBuffer()>:
c0016b52:	53                   	push   ebx
c0016b53:	83 ec 0c             	sub    esp,0xc
c0016b56:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0016b5a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016b5d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016b60:	68 f0 b5 02 c0       	push   0xc002b5f0
c0016b65:	e8 07 bd ff ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c0016b6a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016b6d:	5a                   	pop    edx
c0016b6e:	8b 10                	mov    edx,DWORD PTR [eax]
c0016b70:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016b73:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016b76:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016b79:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016b7c:	50                   	push   eax
c0016b7d:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016b80:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0016b87:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016b8e:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016b92:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016b99:	83 c4 28             	add    esp,0x28
c0016b9c:	5b                   	pop    ebx
c0016b9d:	c3                   	ret    

c0016b9e <VCache::~VCache()>:
c0016b9e:	83 ec 0c             	sub    esp,0xc
c0016ba1:	ba 18 b7 02 c0       	mov    edx,0xc002b718
c0016ba6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016baa:	89 10                	mov    DWORD PTR [eax],edx
c0016bac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bb0:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016bb3:	84 c0                	test   al,al
c0016bb5:	74 0f                	je     c0016bc6 <VCache::~VCache()+0x28>
c0016bb7:	83 ec 0c             	sub    esp,0xc
c0016bba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016bbe:	e8 8f ff ff ff       	call   c0016b52 <VCache::writeWriteBuffer()>
c0016bc3:	83 c4 10             	add    esp,0x10
c0016bc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bca:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016bcd:	83 ec 0c             	sub    esp,0xc
c0016bd0:	50                   	push   eax
c0016bd1:	e8 53 8c ff ff       	call   c000f829 <free>
c0016bd6:	83 c4 10             	add    esp,0x10
c0016bd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bdd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016be0:	83 ec 0c             	sub    esp,0xc
c0016be3:	50                   	push   eax
c0016be4:	e8 40 8c ff ff       	call   c000f829 <free>
c0016be9:	83 c4 10             	add    esp,0x10
c0016bec:	90                   	nop
c0016bed:	83 c4 0c             	add    esp,0xc
c0016bf0:	c3                   	ret    
c0016bf1:	90                   	nop

c0016bf2 <VCache::~VCache()>:
c0016bf2:	83 ec 0c             	sub    esp,0xc
c0016bf5:	83 ec 0c             	sub    esp,0xc
c0016bf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016bfc:	e8 9d ff ff ff       	call   c0016b9e <VCache::~VCache()>
c0016c01:	83 c4 10             	add    esp,0x10
c0016c04:	83 ec 08             	sub    esp,0x8
c0016c07:	6a 44                	push   0x44
c0016c09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c0d:	e8 87 bb ff ff       	call   c0012799 <operator delete(void*, unsigned long)>
c0016c12:	83 c4 10             	add    esp,0x10
c0016c15:	83 c4 0c             	add    esp,0xc
c0016c18:	c3                   	ret    
c0016c19:	90                   	nop

c0016c1a <VCache::write(unsigned long long, int, void*)>:
c0016c1a:	55                   	push   ebp
c0016c1b:	57                   	push   edi
c0016c1c:	56                   	push   esi
c0016c1d:	53                   	push   ebx
c0016c1e:	83 ec 18             	sub    esp,0x18
c0016c21:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016c25:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016c29:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016c2d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0016c31:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016c34:	e8 a5 73 00 00       	call   c001dfde <Semaphore::acquire()>
c0016c39:	c7 04 24 14 b6 02 c0 	mov    DWORD PTR [esp],0xc002b614
c0016c40:	e8 2c bc ff ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c0016c45:	83 c4 10             	add    esp,0x10
c0016c48:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016c4c:	74 0c                	je     c0016c5a <VCache::write(unsigned long long, int, void*)+0x40>
c0016c4e:	83 ec 0c             	sub    esp,0xc
c0016c51:	53                   	push   ebx
c0016c52:	e8 eb fe ff ff       	call   c0016b42 <VCache::invalidateReadBuffer()>
c0016c57:	83 c4 10             	add    esp,0x10
c0016c5a:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016c5e:	74 66                	je     c0016cc6 <VCache::write(unsigned long long, int, void*)+0xac>
c0016c60:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016c63:	99                   	cdq    
c0016c64:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0016c67:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0016c6a:	31 f0                	xor    eax,esi
c0016c6c:	89 d1                	mov    ecx,edx
c0016c6e:	89 ca                	mov    edx,ecx
c0016c70:	31 fa                	xor    edx,edi
c0016c72:	09 d0                	or     eax,edx
c0016c74:	75 44                	jne    c0016cba <VCache::write(unsigned long long, int, void*)+0xa0>
c0016c76:	83 fd 01             	cmp    ebp,0x1
c0016c79:	75 3f                	jne    c0016cba <VCache::write(unsigned long long, int, void*)+0xa0>
c0016c7b:	83 ec 0c             	sub    esp,0xc
c0016c7e:	68 3b b6 02 c0       	push   0xc002b63b
c0016c83:	e8 e9 bb ff ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c0016c88:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016c8b:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0016c8e:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016c94:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016c98:	0f af f9             	imul   edi,ecx
c0016c9b:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0016c9e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016ca0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016ca3:	83 c4 10             	add    esp,0x10
c0016ca6:	40                   	inc    eax
c0016ca7:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016caa:	83 c0 80             	add    eax,0xffffff80
c0016cad:	75 75                	jne    c0016d24 <VCache::write(unsigned long long, int, void*)+0x10a>
c0016caf:	83 ec 0c             	sub    esp,0xc
c0016cb2:	53                   	push   ebx
c0016cb3:	e8 9a fe ff ff       	call   c0016b52 <VCache::writeWriteBuffer()>
c0016cb8:	eb 41                	jmp    c0016cfb <VCache::write(unsigned long long, int, void*)+0xe1>
c0016cba:	83 ec 0c             	sub    esp,0xc
c0016cbd:	53                   	push   ebx
c0016cbe:	e8 8f fe ff ff       	call   c0016b52 <VCache::writeWriteBuffer()>
c0016cc3:	83 c4 10             	add    esp,0x10
c0016cc6:	83 fd 7f             	cmp    ebp,0x7f
c0016cc9:	7f 35                	jg     c0016d00 <VCache::write(unsigned long long, int, void*)+0xe6>
c0016ccb:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016cce:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016cd1:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0016cd4:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016cd8:	56                   	push   esi
c0016cd9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016cdd:	6a 01                	push   0x1
c0016cdf:	68 51 b6 02 c0       	push   0xc002b651
c0016ce4:	e8 88 bb ff ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c0016ce9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016cec:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0016cef:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016cf5:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016cf9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016cfb:	83 c4 10             	add    esp,0x10
c0016cfe:	eb 24                	jmp    c0016d24 <VCache::write(unsigned long long, int, void*)+0x10a>
c0016d00:	52                   	push   edx
c0016d01:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016d05:	55                   	push   ebp
c0016d06:	68 72 b6 02 c0       	push   0xc002b672
c0016d0b:	e8 61 bb ff ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c0016d10:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016d13:	59                   	pop    ecx
c0016d14:	8b 10                	mov    edx,DWORD PTR [eax]
c0016d16:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016d1a:	55                   	push   ebp
c0016d1b:	57                   	push   edi
c0016d1c:	56                   	push   esi
c0016d1d:	50                   	push   eax
c0016d1e:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016d21:	83 c4 20             	add    esp,0x20
c0016d24:	83 ec 0c             	sub    esp,0xc
c0016d27:	68 8f b6 02 c0       	push   0xc002b68f
c0016d2c:	e8 40 bb ff ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c0016d31:	58                   	pop    eax
c0016d32:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016d35:	e8 10 79 00 00       	call   c001e64a <Semaphore::release()>
c0016d3a:	83 c4 1c             	add    esp,0x1c
c0016d3d:	31 c0                	xor    eax,eax
c0016d3f:	5b                   	pop    ebx
c0016d40:	5e                   	pop    esi
c0016d41:	5f                   	pop    edi
c0016d42:	5d                   	pop    ebp
c0016d43:	c3                   	ret    

c0016d44 <VCache::read(unsigned long long, int, void*)>:
c0016d44:	55                   	push   ebp
c0016d45:	57                   	push   edi
c0016d46:	56                   	push   esi
c0016d47:	53                   	push   ebx
c0016d48:	83 ec 28             	sub    esp,0x28
c0016d4b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016d4f:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0016d53:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016d57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d5b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016d5f:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0016d63:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0016d67:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016d6a:	e8 6f 72 00 00       	call   c001dfde <Semaphore::acquire()>
c0016d6f:	c7 04 24 af b6 02 c0 	mov    DWORD PTR [esp],0xc002b6af
c0016d76:	e8 f6 ba ff ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c0016d7b:	83 c4 10             	add    esp,0x10
c0016d7e:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016d82:	74 0c                	je     c0016d90 <VCache::read(unsigned long long, int, void*)+0x4c>
c0016d84:	83 ec 0c             	sub    esp,0xc
c0016d87:	53                   	push   ebx
c0016d88:	e8 c5 fd ff ff       	call   c0016b52 <VCache::writeWriteBuffer()>
c0016d8d:	83 c4 10             	add    esp,0x10
c0016d90:	83 fe 01             	cmp    esi,0x1
c0016d93:	75 79                	jne    c0016e0e <VCache::read(unsigned long long, int, void*)+0xca>
c0016d95:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016d98:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0016d9f:	75 6d                	jne    c0016e0e <VCache::read(unsigned long long, int, void*)+0xca>
c0016da1:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0016da4:	89 d1                	mov    ecx,edx
c0016da6:	f7 d9                	neg    ecx
c0016da8:	89 cf                	mov    edi,ecx
c0016daa:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016dae:	c1 ff 1f             	sar    edi,0x1f
c0016db1:	23 0c 24             	and    ecx,DWORD PTR [esp]
c0016db4:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016db8:	89 ce                	mov    esi,ecx
c0016dba:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016dbe:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c0016dc2:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016dc6:	89 cf                	mov    edi,ecx
c0016dc8:	74 0a                	je     c0016dd4 <VCache::read(unsigned long long, int, void*)+0x90>
c0016dca:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0016dcd:	75 05                	jne    c0016dd4 <VCache::read(unsigned long long, int, void*)+0x90>
c0016dcf:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c0016dd2:	74 1c                	je     c0016df0 <VCache::read(unsigned long long, int, void*)+0xac>
c0016dd4:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0016dd8:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0016ddb:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c0016dde:	83 ec 0c             	sub    esp,0xc
c0016de1:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016de3:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0016de6:	52                   	push   edx
c0016de7:	57                   	push   edi
c0016de8:	56                   	push   esi
c0016de9:	50                   	push   eax
c0016dea:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0016ded:	83 c4 20             	add    esp,0x20
c0016df0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016df3:	89 ef                	mov    edi,ebp
c0016df5:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016dfb:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016dfe:	8d 70 ff             	lea    esi,[eax-0x1]
c0016e01:	23 34 24             	and    esi,DWORD PTR [esp]
c0016e04:	0f af f1             	imul   esi,ecx
c0016e07:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0016e0a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016e0c:	eb 30                	jmp    c0016e3e <VCache::read(unsigned long long, int, void*)+0xfa>
c0016e0e:	83 ec 0c             	sub    esp,0xc
c0016e11:	53                   	push   ebx
c0016e12:	e8 2b fd ff ff       	call   c0016b42 <VCache::invalidateReadBuffer()>
c0016e17:	83 c4 0c             	add    esp,0xc
c0016e1a:	55                   	push   ebp
c0016e1b:	56                   	push   esi
c0016e1c:	68 d5 b6 02 c0       	push   0xc002b6d5
c0016e21:	e8 4b ba ff ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c0016e26:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016e29:	8b 10                	mov    edx,DWORD PTR [eax]
c0016e2b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016e2e:	56                   	push   esi
c0016e2f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016e33:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016e37:	50                   	push   eax
c0016e38:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016e3b:	83 c4 20             	add    esp,0x20
c0016e3e:	83 ec 0c             	sub    esp,0xc
c0016e41:	68 f1 b6 02 c0       	push   0xc002b6f1
c0016e46:	e8 26 ba ff ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c0016e4b:	58                   	pop    eax
c0016e4c:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016e4f:	e8 f6 77 00 00       	call   c001e64a <Semaphore::release()>
c0016e54:	83 c4 2c             	add    esp,0x2c
c0016e57:	31 c0                	xor    eax,eax
c0016e59:	5b                   	pop    ebx
c0016e5a:	5e                   	pop    esi
c0016e5b:	5f                   	pop    edi
c0016e5c:	5d                   	pop    ebp
c0016e5d:	c3                   	ret    

c0016e5e <Video::putrect(int, int, int, int, unsigned int)>:
c0016e5e:	55                   	push   ebp
c0016e5f:	57                   	push   edi
c0016e60:	56                   	push   esi
c0016e61:	53                   	push   ebx
c0016e62:	83 ec 1c             	sub    esp,0x1c
c0016e65:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016e69:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016e6d:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016e71:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016e75:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016e79:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e7d:	01 df                	add    edi,ebx
c0016e7f:	39 fb                	cmp    ebx,edi
c0016e81:	7d 1f                	jge    c0016ea2 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0016e83:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016e87:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016e8b:	7d 12                	jge    c0016e9f <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0016e8d:	8b 16                	mov    edx,DWORD PTR [esi]
c0016e8f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016e93:	53                   	push   ebx
c0016e94:	55                   	push   ebp
c0016e95:	45                   	inc    ebp
c0016e96:	56                   	push   esi
c0016e97:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016e9a:	83 c4 10             	add    esp,0x10
c0016e9d:	eb e8                	jmp    c0016e87 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0016e9f:	43                   	inc    ebx
c0016ea0:	eb dd                	jmp    c0016e7f <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016ea2:	83 c4 1c             	add    esp,0x1c
c0016ea5:	5b                   	pop    ebx
c0016ea6:	5e                   	pop    esi
c0016ea7:	5f                   	pop    edi
c0016ea8:	5d                   	pop    ebp
c0016ea9:	c3                   	ret    

c0016eaa <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016eaa:	55                   	push   ebp
c0016eab:	57                   	push   edi
c0016eac:	31 ff                	xor    edi,edi
c0016eae:	56                   	push   esi
c0016eaf:	53                   	push   ebx
c0016eb0:	83 ec 1c             	sub    esp,0x1c
c0016eb3:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016eb7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016ebb:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0016ec2:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0016ec7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016ecb:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016ecf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016ed3:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0016ed6:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016eda:	01 f9                	add    ecx,edi
c0016edc:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0016ee0:	7d 2f                	jge    c0016f11 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0016ee2:	31 f6                	xor    esi,esi
c0016ee4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016ee8:	01 f2                	add    edx,esi
c0016eea:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0016eee:	7d 1a                	jge    c0016f0a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0016ef0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016ef3:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0016ef6:	46                   	inc    esi
c0016ef7:	51                   	push   ecx
c0016ef8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016efc:	52                   	push   edx
c0016efd:	55                   	push   ebp
c0016efe:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016f01:	83 c4 10             	add    esp,0x10
c0016f04:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016f08:	eb da                	jmp    c0016ee4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0016f0a:	47                   	inc    edi
c0016f0b:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0016f0f:	eb c5                	jmp    c0016ed6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0016f11:	83 c4 1c             	add    esp,0x1c
c0016f14:	5b                   	pop    ebx
c0016f15:	5e                   	pop    esi
c0016f16:	5f                   	pop    edi
c0016f17:	5d                   	pop    ebp
c0016f18:	c3                   	ret    
c0016f19:	90                   	nop

c0016f1a <Video::blit(unsigned int*, int, int, int, int)>:
c0016f1a:	55                   	push   ebp
c0016f1b:	57                   	push   edi
c0016f1c:	56                   	push   esi
c0016f1d:	53                   	push   ebx
c0016f1e:	83 ec 1c             	sub    esp,0x1c
c0016f21:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016f25:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016f29:	85 c0                	test   eax,eax
c0016f2b:	79 02                	jns    c0016f2f <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0016f2d:	31 c0                	xor    eax,eax
c0016f2f:	c1 e0 02             	shl    eax,0x2
c0016f32:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016f36:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f3a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016f3e:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0016f42:	39 d8                	cmp    eax,ebx
c0016f44:	7e 49                	jle    c0016f8f <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016f46:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016f4c:	7c 41                	jl     c0016f8f <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016f4e:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016f52:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016f56:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016f5a:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0016f5e:	39 f9                	cmp    ecx,edi
c0016f60:	7e 22                	jle    c0016f84 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016f62:	83 c5 04             	add    ebp,0x4
c0016f65:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016f6b:	7c 14                	jl     c0016f81 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0016f6d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016f6f:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016f72:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016f76:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016f7a:	56                   	push   esi
c0016f7b:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0016f7e:	83 c4 10             	add    esp,0x10
c0016f81:	47                   	inc    edi
c0016f82:	eb d2                	jmp    c0016f56 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0016f84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f88:	43                   	inc    ebx
c0016f89:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0016f8d:	eb ab                	jmp    c0016f3a <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0016f8f:	83 c4 1c             	add    esp,0x1c
c0016f92:	5b                   	pop    ebx
c0016f93:	5e                   	pop    esi
c0016f94:	5f                   	pop    edi
c0016f95:	5d                   	pop    ebp
c0016f96:	c3                   	ret    
c0016f97:	90                   	nop

c0016f98 <Video::clearScreen(unsigned int)>:
c0016f98:	57                   	push   edi
c0016f99:	56                   	push   esi
c0016f9a:	53                   	push   ebx
c0016f9b:	31 db                	xor    ebx,ebx
c0016f9d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016fa1:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016fa7:	7e 1f                	jle    c0016fc8 <Video::clearScreen(unsigned int)+0x30>
c0016fa9:	31 ff                	xor    edi,edi
c0016fab:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016fb1:	7e 12                	jle    c0016fc5 <Video::clearScreen(unsigned int)+0x2d>
c0016fb3:	8b 06                	mov    eax,DWORD PTR [esi]
c0016fb5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016fb9:	53                   	push   ebx
c0016fba:	57                   	push   edi
c0016fbb:	47                   	inc    edi
c0016fbc:	56                   	push   esi
c0016fbd:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016fc0:	83 c4 10             	add    esp,0x10
c0016fc3:	eb e6                	jmp    c0016fab <Video::clearScreen(unsigned int)+0x13>
c0016fc5:	43                   	inc    ebx
c0016fc6:	eb d9                	jmp    c0016fa1 <Video::clearScreen(unsigned int)+0x9>
c0016fc8:	5b                   	pop    ebx
c0016fc9:	5e                   	pop    esi
c0016fca:	5f                   	pop    edi
c0016fcb:	c3                   	ret    

c0016fcc <Video::putpixel(int, int, unsigned int)>:
c0016fcc:	c7 44 24 04 20 b7 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b720
c0016fd4:	e9 64 31 00 00       	jmp    c001a13d <Krnl::panic(char const*)>
c0016fd9:	90                   	nop

c0016fda <Video::Video(char const*)>:
c0016fda:	83 ec 0c             	sub    esp,0xc
c0016fdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016fe1:	83 ec 08             	sub    esp,0x8
c0016fe4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016fe8:	50                   	push   eax
c0016fe9:	e8 c0 ce ff ff       	call   c0013eae <Device::Device(char const*)>
c0016fee:	83 c4 10             	add    esp,0x10
c0016ff1:	ba 90 b7 02 c0       	mov    edx,0xc002b790
c0016ff6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ffa:	89 10                	mov    DWORD PTR [eax],edx
c0016ffc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017000:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001700a:	90                   	nop
c001700b:	83 c4 0c             	add    esp,0xc
c001700e:	c3                   	ret    
c001700f:	90                   	nop

c0017010 <Video::~Video()>:
c0017010:	83 ec 0c             	sub    esp,0xc
c0017013:	ba 90 b7 02 c0       	mov    edx,0xc002b790
c0017018:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001701c:	89 10                	mov    DWORD PTR [eax],edx
c001701e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017022:	83 ec 0c             	sub    esp,0xc
c0017025:	50                   	push   eax
c0017026:	e8 4d cb ff ff       	call   c0013b78 <Device::~Device()>
c001702b:	83 c4 10             	add    esp,0x10
c001702e:	90                   	nop
c001702f:	83 c4 0c             	add    esp,0xc
c0017032:	c3                   	ret    
c0017033:	90                   	nop

c0017034 <Video::~Video()>:
c0017034:	83 ec 0c             	sub    esp,0xc
c0017037:	83 ec 0c             	sub    esp,0xc
c001703a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001703e:	e8 cd ff ff ff       	call   c0017010 <Video::~Video()>
c0017043:	83 c4 10             	add    esp,0x10
c0017046:	83 ec 08             	sub    esp,0x8
c0017049:	68 64 01 00 00       	push   0x164
c001704e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017052:	e8 42 b7 ff ff       	call   c0012799 <operator delete(void*, unsigned long)>
c0017057:	83 c4 10             	add    esp,0x10
c001705a:	83 c4 0c             	add    esp,0xc
c001705d:	c3                   	ret    

c001705e <Video::isMonochrome()>:
c001705e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017062:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0017068:	c3                   	ret    
c0017069:	90                   	nop

c001706a <Video::getWidth()>:
c001706a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001706e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0017074:	c3                   	ret    
c0017075:	90                   	nop

c0017076 <Video::getHeight()>:
c0017076:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001707a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017080:	c3                   	ret    
c0017081:	90                   	nop

c0017082 <Video::drawCursor(int, int, unsigned char*, int)>:
c0017082:	55                   	push   ebp
c0017083:	57                   	push   edi
c0017084:	56                   	push   esi
c0017085:	53                   	push   ebx
c0017086:	83 ec 2c             	sub    esp,0x2c
c0017089:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001708d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017091:	83 f8 01             	cmp    eax,0x1
c0017094:	19 c9                	sbb    ecx,ecx
c0017096:	31 db                	xor    ebx,ebx
c0017098:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001709c:	89 cd                	mov    ebp,ecx
c001709e:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00170a6:	f7 d5                	not    ebp
c00170a8:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00170ae:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00170b2:	01 d8                	add    eax,ebx
c00170b4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00170b8:	56                   	push   esi
c00170b9:	e8 b8 ff ff ff       	call   c0017076 <Video::getHeight()>
c00170be:	59                   	pop    ecx
c00170bf:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00170c3:	7e 70                	jle    c0017135 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c00170c5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00170c9:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00170cd:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c00170d0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00170d4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00170d8:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c00170df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00170e3:	89 f8                	mov    eax,edi
c00170e5:	83 c0 20             	add    eax,0x20
c00170e8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00170ec:	56                   	push   esi
c00170ed:	e8 78 ff ff ff       	call   c001706a <Video::getWidth()>
c00170f2:	5a                   	pop    edx
c00170f3:	39 c7                	cmp    edi,eax
c00170f5:	7d 34                	jge    c001712b <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00170f7:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00170fc:	74 05                	je     c0017103 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00170fe:	8b 06                	mov    eax,DWORD PTR [esi]
c0017100:	55                   	push   ebp
c0017101:	eb 0d                	jmp    c0017110 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0017103:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0017108:	74 12                	je     c001711c <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c001710a:	8b 06                	mov    eax,DWORD PTR [esi]
c001710c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017110:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017114:	57                   	push   edi
c0017115:	56                   	push   esi
c0017116:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017119:	83 c4 10             	add    esp,0x10
c001711c:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0017120:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0017124:	47                   	inc    edi
c0017125:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0017129:	75 c1                	jne    c00170ec <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c001712b:	43                   	inc    ebx
c001712c:	83 fb 20             	cmp    ebx,0x20
c001712f:	0f 85 79 ff ff ff    	jne    c00170ae <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0017135:	83 c4 2c             	add    esp,0x2c
c0017138:	5b                   	pop    ebx
c0017139:	5e                   	pop    esi
c001713a:	5f                   	pop    edi
c001713b:	5d                   	pop    ebp
c001713c:	c3                   	ret    
c001713d:	90                   	nop

c001713e <Video::tgaParse(unsigned char*, int, int*, int*)>:
c001713e:	55                   	push   ebp
c001713f:	57                   	push   edi
c0017140:	56                   	push   esi
c0017141:	53                   	push   ebx
c0017142:	83 ec 28             	sub    esp,0x28
c0017145:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0017149:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c001714d:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c0017151:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0017155:	c1 e6 08             	shl    esi,0x8
c0017158:	01 c6                	add    esi,eax
c001715a:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c001715e:	c1 e0 08             	shl    eax,0x8
c0017161:	01 d0                	add    eax,edx
c0017163:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017167:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001716b:	0f af c6             	imul   eax,esi
c001716e:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0017175:	50                   	push   eax
c0017176:	e8 9e 86 ff ff       	call   c000f819 <malloc>
c001717b:	83 c4 10             	add    esp,0x10
c001717e:	89 c7                	mov    edi,eax
c0017180:	85 c0                	test   eax,eax
c0017182:	75 10                	jne    c0017194 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c0017184:	83 ec 0c             	sub    esp,0xc
c0017187:	68 41 b7 02 c0       	push   0xc002b741
c001718c:	e8 ac 2f 00 00       	call   c001a13d <Krnl::panic(char const*)>
c0017191:	83 c4 10             	add    esp,0x10
c0017194:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0017197:	ba 12 00 00 00       	mov    edx,0x12
c001719c:	84 c0                	test   al,al
c001719e:	74 11                	je     c00171b1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c00171a0:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c00171a4:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c00171a8:	c1 fa 03             	sar    edx,0x3
c00171ab:	0f af d1             	imul   edx,ecx
c00171ae:	83 c2 12             	add    edx,0x12
c00171b1:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00171b5:	74 04                	je     c00171bb <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c00171b7:	85 f6                	test   esi,esi
c00171b9:	75 12                	jne    c00171cd <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c00171bb:	83 ec 0c             	sub    esp,0xc
c00171be:	68 51 b7 02 c0       	push   0xc002b751
c00171c3:	e8 a9 b6 ff ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c00171c8:	e9 b8 00 00 00       	jmp    c0017285 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c00171cd:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c00171d1:	80 f9 02             	cmp    cl,0x2
c00171d4:	0f 85 96 00 00 00    	jne    c0017270 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c00171da:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c00171df:	75 0e                	jne    c00171ef <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c00171e1:	84 c0                	test   al,al
c00171e3:	75 0a                	jne    c00171ef <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c00171e5:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00171e8:	83 e8 18             	sub    eax,0x18
c00171eb:	a8 f7                	test   al,0xf7
c00171ed:	74 0a                	je     c00171f9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c00171ef:	83 ec 0c             	sub    esp,0xc
c00171f2:	68 66 b7 02 c0       	push   0xc002b766
c00171f7:	eb 7f                	jmp    c0017278 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c00171f9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017201:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017209:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c001720d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017215:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0017219:	75 0c                	jne    c0017227 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c001721b:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c0017220:	c1 e0 18             	shl    eax,0x18
c0017223:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017227:	45                   	inc    ebp
c0017228:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c001722d:	c1 e1 10             	shl    ecx,0x10
c0017230:	89 c8                	mov    eax,ecx
c0017232:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c0017237:	c1 e1 08             	shl    ecx,0x8
c001723a:	09 c1                	or     ecx,eax
c001723c:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c0017240:	09 c1                	or     ecx,eax
c0017242:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c0017246:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c001724a:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001724e:	c1 f8 03             	sar    eax,0x3
c0017251:	01 c2                	add    edx,eax
c0017253:	89 e8                	mov    eax,ebp
c0017255:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0017259:	39 c6                	cmp    esi,eax
c001725b:	7f b0                	jg     c001720d <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c001725d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017261:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017265:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0017268:	7e 22                	jle    c001728c <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c001726a:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c001726e:	eb 99                	jmp    c0017209 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017270:	50                   	push   eax
c0017271:	50                   	push   eax
c0017272:	51                   	push   ecx
c0017273:	68 74 b7 02 c0       	push   0xc002b774
c0017278:	e8 f4 b5 ff ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c001727d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017280:	e8 a4 85 ff ff       	call   c000f829 <free>
c0017285:	83 c4 10             	add    esp,0x10
c0017288:	31 ff                	xor    edi,edi
c001728a:	eb 0f                	jmp    c001729b <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c001728c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017290:	89 30                	mov    DWORD PTR [eax],esi
c0017292:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017296:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0017299:	89 30                	mov    DWORD PTR [eax],esi
c001729b:	83 c4 1c             	add    esp,0x1c
c001729e:	89 f8                	mov    eax,edi
c00172a0:	5b                   	pop    ebx
c00172a1:	5e                   	pop    esi
c00172a2:	5f                   	pop    edi
c00172a3:	5d                   	pop    ebp
c00172a4:	c3                   	ret    
c00172a5:	90                   	nop

c00172a6 <Video::putTGA(int, int, unsigned char*, int)>:
c00172a6:	55                   	push   ebp
c00172a7:	57                   	push   edi
c00172a8:	56                   	push   esi
c00172a9:	53                   	push   ebx
c00172aa:	83 ec 28             	sub    esp,0x28
c00172ad:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00172b1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00172b5:	50                   	push   eax
c00172b6:	8d 44 24 18          	lea    eax,[esp+0x18]
c00172ba:	50                   	push   eax
c00172bb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00172bf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00172c3:	56                   	push   esi
c00172c4:	e8 75 fe ff ff       	call   c001713e <Video::tgaParse(unsigned char*, int, int*, int*)>
c00172c9:	83 c4 20             	add    esp,0x20
c00172cc:	85 c0                	test   eax,eax
c00172ce:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00172d2:	74 35                	je     c0017309 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00172d4:	89 c7                	mov    edi,eax
c00172d6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00172da:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00172de:	39 d8                	cmp    eax,ebx
c00172e0:	7e 27                	jle    c0017309 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00172e2:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00172e6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00172ea:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00172ee:	39 e8                	cmp    eax,ebp
c00172f0:	7e 14                	jle    c0017306 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c00172f2:	8b 06                	mov    eax,DWORD PTR [esi]
c00172f4:	83 c7 04             	add    edi,0x4
c00172f7:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c00172fa:	53                   	push   ebx
c00172fb:	55                   	push   ebp
c00172fc:	45                   	inc    ebp
c00172fd:	56                   	push   esi
c00172fe:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017301:	83 c4 10             	add    esp,0x10
c0017304:	eb e0                	jmp    c00172e6 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0017306:	43                   	inc    ebx
c0017307:	eb cd                	jmp    c00172d6 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0017309:	83 c4 1c             	add    esp,0x1c
c001730c:	5b                   	pop    ebx
c001730d:	5e                   	pop    esi
c001730e:	5f                   	pop    edi
c001730f:	5d                   	pop    ebp
c0017310:	c3                   	ret    
c0017311:	90                   	nop

c0017312 <ACPI::close(int, int, void*)>:
c0017312:	83 ec 1c             	sub    esp,0x1c
c0017315:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001731d:	74 0a                	je     c0017329 <ACPI::close(int, int, void*)+0x17>
c001731f:	b8 00 00 00 00       	mov    eax,0x0
c0017324:	e9 8a 00 00 00       	jmp    c00173b3 <ACPI::close(int, int, void*)+0xa1>
c0017329:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001732e:	75 27                	jne    c0017357 <ACPI::close(int, int, void*)+0x45>
c0017330:	a1 a8 e8 02 c0       	mov    eax,ds:0xc002e8a8
c0017335:	85 c0                	test   eax,eax
c0017337:	74 07                	je     c0017340 <ACPI::close(int, int, void*)+0x2e>
c0017339:	a1 a8 e8 02 c0       	mov    eax,ds:0xc002e8a8
c001733e:	ff d0                	call   eax
c0017340:	83 ec 0c             	sub    esp,0xc
c0017343:	68 d0 b7 02 c0       	push   0xc002b7d0
c0017348:	e8 f0 2d 00 00       	call   c001a13d <Krnl::panic(char const*)>
c001734d:	83 c4 10             	add    esp,0x10
c0017350:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017355:	eb 5c                	jmp    c00173b3 <ACPI::close(int, int, void*)+0xa1>
c0017357:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001735c:	75 50                	jne    c00173ae <ACPI::close(int, int, void*)+0x9c>
c001735e:	a1 a4 e8 02 c0       	mov    eax,ds:0xc002e8a4
c0017363:	85 c0                	test   eax,eax
c0017365:	74 07                	je     c001736e <ACPI::close(int, int, void*)+0x5c>
c0017367:	a1 a4 e8 02 c0       	mov    eax,ds:0xc002e8a4
c001736c:	ff d0                	call   eax
c001736e:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0017373:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017378:	83 e0 02             	and    eax,0x2
c001737b:	74 1c                	je     c0017399 <ACPI::close(int, int, void*)+0x87>
c001737d:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0017384:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017388:	89 c2                	mov    edx,eax
c001738a:	ec                   	in     al,dx
c001738b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001738f:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0017393:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017397:	eb da                	jmp    c0017373 <ACPI::close(int, int, void*)+0x61>
c0017399:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00173a0:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00173a5:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00173a9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00173ad:	ee                   	out    dx,al
c00173ae:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00173b3:	83 c4 1c             	add    esp,0x1c
c00173b6:	c3                   	ret    

c00173b7 <findRSDP()>:
c00173b7:	83 ec 1c             	sub    esp,0x1c
c00173ba:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c00173bf:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00173c5:	83 e0 04             	and    eax,0x4
c00173c8:	84 c0                	test   al,al
c00173ca:	75 07                	jne    c00173d3 <findRSDP()+0x1c>
c00173cc:	b8 00 00 00 00       	mov    eax,0x0
c00173d1:	eb 6a                	jmp    c001743d <findRSDP()+0x86>
c00173d3:	a1 74 e2 02 c0       	mov    eax,ds:0xc002e274
c00173d8:	3d ff 07 00 00       	cmp    eax,0x7ff
c00173dd:	7f 1b                	jg     c00173fa <findRSDP()+0x43>
c00173df:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c00173e4:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00173ea:	83 e2 fb             	and    edx,0xfffffffb
c00173ed:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00173f3:	b8 00 00 00 00       	mov    eax,0x0
c00173f8:	eb 43                	jmp    c001743d <findRSDP()+0x86>
c00173fa:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0017402:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001740a:	77 2c                	ja     c0017438 <findRSDP()+0x81>
c001740c:	83 ec 04             	sub    esp,0x4
c001740f:	6a 08                	push   0x8
c0017411:	68 ab b8 02 c0       	push   0xc002b8ab
c0017416:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001741a:	e8 2d 92 fe ff       	call   c000064c <memcmp>
c001741f:	83 c4 10             	add    esp,0x10
c0017422:	85 c0                	test   eax,eax
c0017424:	0f 94 c0             	sete   al
c0017427:	84 c0                	test   al,al
c0017429:	74 06                	je     c0017431 <findRSDP()+0x7a>
c001742b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001742f:	eb 0c                	jmp    c001743d <findRSDP()+0x86>
c0017431:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017436:	eb ca                	jmp    c0017402 <findRSDP()+0x4b>
c0017438:	b8 00 00 00 00       	mov    eax,0x0
c001743d:	83 c4 1c             	add    esp,0x1c
c0017440:	c3                   	ret    

c0017441 <loadACPITables(unsigned char*)>:
c0017441:	57                   	push   edi
c0017442:	56                   	push   esi
c0017443:	53                   	push   ebx
c0017444:	83 ec 60             	sub    esp,0x60
c0017447:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c001744c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017452:	83 e0 04             	and    eax,0x4
c0017455:	84 c0                	test   al,al
c0017457:	0f 84 33 02 00 00    	je     c0017690 <loadACPITables(unsigned char*)+0x24f>
c001745d:	a0 c0 ea 02 c0       	mov    al,ds:0xc002eac0
c0017462:	84 c0                	test   al,al
c0017464:	74 75                	je     c00174db <loadACPITables(unsigned char*)+0x9a>
c0017466:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001746a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001746e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017472:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017475:	83 e8 24             	sub    eax,0x24
c0017478:	c1 e8 03             	shr    eax,0x3
c001747b:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001747f:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0017487:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001748b:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c001748f:	0f 8d b2 00 00 00    	jge    c0017547 <loadACPITables(unsigned char*)+0x106>
c0017495:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017499:	83 c0 24             	add    eax,0x24
c001749c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00174a0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00174a4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00174a8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00174ac:	c1 e0 03             	shl    eax,0x3
c00174af:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c00174b3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00174b7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00174ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00174bc:	89 c1                	mov    ecx,eax
c00174be:	a1 ac e8 02 c0       	mov    eax,ds:0xc002e8ac
c00174c3:	8d 50 01             	lea    edx,[eax+0x1]
c00174c6:	89 15 ac e8 02 c0    	mov    DWORD PTR ds:0xc002e8ac,edx
c00174cc:	89 ca                	mov    edx,ecx
c00174ce:	89 14 c5 c4 e8 02 c0 	mov    DWORD PTR [eax*8-0x3ffd173c],edx
c00174d5:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c00174d9:	eb ac                	jmp    c0017487 <loadACPITables(unsigned char*)+0x46>
c00174db:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00174df:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00174e3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00174e7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00174ea:	83 e8 24             	sub    eax,0x24
c00174ed:	c1 e8 02             	shr    eax,0x2
c00174f0:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00174f4:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00174fc:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0017500:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c0017504:	7d 41                	jge    c0017547 <loadACPITables(unsigned char*)+0x106>
c0017506:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001750a:	83 c0 24             	add    eax,0x24
c001750d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017511:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017515:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017519:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001751d:	c1 e0 02             	shl    eax,0x2
c0017520:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017524:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017528:	8b 08                	mov    ecx,DWORD PTR [eax]
c001752a:	a1 ac e8 02 c0       	mov    eax,ds:0xc002e8ac
c001752f:	8d 50 01             	lea    edx,[eax+0x1]
c0017532:	89 15 ac e8 02 c0    	mov    DWORD PTR ds:0xc002e8ac,edx
c0017538:	89 ca                	mov    edx,ecx
c001753a:	89 14 c5 c4 e8 02 c0 	mov    DWORD PTR [eax*8-0x3ffd173c],edx
c0017541:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c0017545:	eb b5                	jmp    c00174fc <loadACPITables(unsigned char*)+0xbb>
c0017547:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c001754f:	a1 ac e8 02 c0       	mov    eax,ds:0xc002e8ac
c0017554:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0017558:	0f 8d 33 01 00 00    	jge    c0017691 <loadACPITables(unsigned char*)+0x250>
c001755e:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017562:	8b 04 c5 c4 e8 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd173c]
c0017569:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001756d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017571:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017575:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017579:	25 ff 0f 00 00       	and    eax,0xfff
c001757e:	89 c6                	mov    esi,eax
c0017580:	8b 1d 90 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e390
c0017586:	83 ec 0c             	sub    esp,0xc
c0017589:	6a 01                	push   0x1
c001758b:	e8 0f 9f ff ff       	call   c001149f <Virt::allocateKernelVirtualPages(int)>
c0017590:	83 c4 10             	add    esp,0x10
c0017593:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017597:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001759d:	83 ec 0c             	sub    esp,0xc
c00175a0:	6a 01                	push   0x1
c00175a2:	6a 01                	push   0x1
c00175a4:	50                   	push   eax
c00175a5:	52                   	push   edx
c00175a6:	53                   	push   ebx
c00175a7:	e8 90 a8 ff ff       	call   c0011e3c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00175ac:	83 c4 20             	add    esp,0x20
c00175af:	09 f0                	or     eax,esi
c00175b1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00175b5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00175b9:	c1 e0 03             	shl    eax,0x3
c00175bc:	05 c0 e8 02 c0       	add    eax,0xc002e8c0
c00175c1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00175c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00175c9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00175cd:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c00175d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00175d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00175dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00175e1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00175e5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00175e9:	89 c6                	mov    esi,eax
c00175eb:	89 d7                	mov    edi,edx
c00175ed:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00175ef:	89 c8                	mov    eax,ecx
c00175f1:	89 fa                	mov    edx,edi
c00175f3:	89 f3                	mov    ebx,esi
c00175f5:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00175f9:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00175fd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017601:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017605:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017608:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001760c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017610:	05 00 10 00 00       	add    eax,0x1000
c0017615:	c1 e8 0c             	shr    eax,0xc
c0017618:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001761c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017620:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017624:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017628:	25 ff 0f 00 00       	and    eax,0xfff
c001762d:	89 c6                	mov    esi,eax
c001762f:	8b 1d 90 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e390
c0017635:	83 ec 0c             	sub    esp,0xc
c0017638:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001763c:	e8 5e 9e ff ff       	call   c001149f <Virt::allocateKernelVirtualPages(int)>
c0017641:	83 c4 10             	add    esp,0x10
c0017644:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017648:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001764e:	83 ec 0c             	sub    esp,0xc
c0017651:	6a 01                	push   0x1
c0017653:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017657:	50                   	push   eax
c0017658:	52                   	push   edx
c0017659:	53                   	push   ebx
c001765a:	e8 dd a7 ff ff       	call   c0011e3c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001765f:	83 c4 20             	add    esp,0x20
c0017662:	09 f0                	or     eax,esi
c0017664:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017668:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001766c:	83 ec 0c             	sub    esp,0xc
c001766f:	50                   	push   eax
c0017670:	e8 5a a1 ff ff       	call   c00117cf <Virt::freeKernelVirtualPages(unsigned long)>
c0017675:	83 c4 10             	add    esp,0x10
c0017678:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001767c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017680:	89 14 c5 c4 e8 02 c0 	mov    DWORD PTR [eax*8-0x3ffd173c],edx
c0017687:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c001768b:	e9 bf fe ff ff       	jmp    c001754f <loadACPITables(unsigned char*)+0x10e>
c0017690:	90                   	nop
c0017691:	83 c4 60             	add    esp,0x60
c0017694:	5b                   	pop    ebx
c0017695:	5e                   	pop    esi
c0017696:	5f                   	pop    edi
c0017697:	c3                   	ret    

c0017698 <findRSDT(unsigned char*)>:
c0017698:	57                   	push   edi
c0017699:	56                   	push   esi
c001769a:	53                   	push   ebx
c001769b:	83 ec 50             	sub    esp,0x50
c001769e:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c00176a3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00176a9:	83 e0 04             	and    eax,0x4
c00176ac:	84 c0                	test   al,al
c00176ae:	75 0a                	jne    c00176ba <findRSDT(unsigned char*)+0x22>
c00176b0:	b8 00 00 00 00       	mov    eax,0x0
c00176b5:	e9 51 01 00 00       	jmp    c001780b <findRSDT(unsigned char*)+0x173>
c00176ba:	89 e0                	mov    eax,esp
c00176bc:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00176c0:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00176c4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00176c8:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c00176d0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00176d4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00176d8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00176dc:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00176e0:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00176e4:	89 c6                	mov    esi,eax
c00176e6:	89 d7                	mov    edi,edx
c00176e8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00176ea:	89 c8                	mov    eax,ecx
c00176ec:	89 fa                	mov    edx,edi
c00176ee:	89 f3                	mov    ebx,esi
c00176f0:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00176f4:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00176f8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00176fc:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017700:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c0017704:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c001770c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017710:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017714:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017718:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001771c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017720:	83 ec 04             	sub    esp,0x4
c0017723:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017727:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001772b:	68 f4 b7 02 c0       	push   0xc002b7f4
c0017730:	e8 3c b1 ff ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c0017735:	83 c4 10             	add    esp,0x10
c0017738:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001773c:	25 ff 0f 00 00       	and    eax,0xfff
c0017741:	89 c6                	mov    esi,eax
c0017743:	8b 1d 90 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e390
c0017749:	83 ec 0c             	sub    esp,0xc
c001774c:	6a 02                	push   0x2
c001774e:	e8 4c 9d ff ff       	call   c001149f <Virt::allocateKernelVirtualPages(int)>
c0017753:	83 c4 10             	add    esp,0x10
c0017756:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001775a:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017760:	83 ec 0c             	sub    esp,0xc
c0017763:	6a 01                	push   0x1
c0017765:	6a 02                	push   0x2
c0017767:	50                   	push   eax
c0017768:	52                   	push   edx
c0017769:	53                   	push   ebx
c001776a:	e8 cd a6 ff ff       	call   c0011e3c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001776f:	83 c4 20             	add    esp,0x20
c0017772:	09 f0                	or     eax,esi
c0017774:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017778:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001777c:	25 ff 0f 00 00       	and    eax,0xfff
c0017781:	89 c6                	mov    esi,eax
c0017783:	8b 1d 90 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e390
c0017789:	83 ec 0c             	sub    esp,0xc
c001778c:	6a 02                	push   0x2
c001778e:	e8 0c 9d ff ff       	call   c001149f <Virt::allocateKernelVirtualPages(int)>
c0017793:	83 c4 10             	add    esp,0x10
c0017796:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001779a:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00177a0:	83 ec 0c             	sub    esp,0xc
c00177a3:	6a 01                	push   0x1
c00177a5:	6a 02                	push   0x2
c00177a7:	50                   	push   eax
c00177a8:	52                   	push   edx
c00177a9:	53                   	push   ebx
c00177aa:	e8 8d a6 ff ff       	call   c0011e3c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00177af:	83 c4 20             	add    esp,0x20
c00177b2:	09 f0                	or     eax,esi
c00177b4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00177b8:	83 ec 04             	sub    esp,0x4
c00177bb:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00177bf:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00177c3:	68 14 b8 02 c0       	push   0xc002b814
c00177c8:	e8 a4 b0 ff ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c00177cd:	83 c4 10             	add    esp,0x10
c00177d0:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00177d5:	75 11                	jne    c00177e8 <findRSDT(unsigned char*)+0x150>
c00177d7:	c6 05 c0 ea 02 c0 00 	mov    BYTE PTR ds:0xc002eac0,0x0
c00177de:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00177e2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00177e6:	eb 1f                	jmp    c0017807 <findRSDT(unsigned char*)+0x16f>
c00177e8:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c00177ed:	75 11                	jne    c0017800 <findRSDT(unsigned char*)+0x168>
c00177ef:	c6 05 c0 ea 02 c0 01 	mov    BYTE PTR ds:0xc002eac0,0x1
c00177f6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00177fa:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00177fe:	eb 07                	jmp    c0017807 <findRSDT(unsigned char*)+0x16f>
c0017800:	b8 00 00 00 00       	mov    eax,0x0
c0017805:	eb 04                	jmp    c001780b <findRSDT(unsigned char*)+0x173>
c0017807:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001780b:	83 c4 50             	add    esp,0x50
c001780e:	5b                   	pop    ebx
c001780f:	5e                   	pop    esi
c0017810:	5f                   	pop    edi
c0017811:	c3                   	ret    

c0017812 <findDataTable(unsigned char*, char*)>:
c0017812:	83 ec 1c             	sub    esp,0x1c
c0017815:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c001781a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017820:	83 e0 04             	and    eax,0x4
c0017823:	84 c0                	test   al,al
c0017825:	75 07                	jne    c001782e <findDataTable(unsigned char*, char*)+0x1c>
c0017827:	b8 00 00 00 00       	mov    eax,0x0
c001782c:	eb 52                	jmp    c0017880 <findDataTable(unsigned char*, char*)+0x6e>
c001782e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017836:	a1 ac e8 02 c0       	mov    eax,ds:0xc002e8ac
c001783b:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001783f:	7d 3a                	jge    c001787b <findDataTable(unsigned char*, char*)+0x69>
c0017841:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017845:	c1 e0 03             	shl    eax,0x3
c0017848:	05 c0 e8 02 c0       	add    eax,0xc002e8c0
c001784d:	83 ec 04             	sub    esp,0x4
c0017850:	6a 04                	push   0x4
c0017852:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017856:	50                   	push   eax
c0017857:	e8 f0 8d fe ff       	call   c000064c <memcmp>
c001785c:	83 c4 10             	add    esp,0x10
c001785f:	85 c0                	test   eax,eax
c0017861:	0f 94 c0             	sete   al
c0017864:	84 c0                	test   al,al
c0017866:	74 0d                	je     c0017875 <findDataTable(unsigned char*, char*)+0x63>
c0017868:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001786c:	8b 04 c5 c4 e8 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd173c]
c0017873:	eb 0b                	jmp    c0017880 <findDataTable(unsigned char*, char*)+0x6e>
c0017875:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017879:	eb bb                	jmp    c0017836 <findDataTable(unsigned char*, char*)+0x24>
c001787b:	b8 00 00 00 00       	mov    eax,0x0
c0017880:	83 c4 1c             	add    esp,0x1c
c0017883:	c3                   	ret    

c0017884 <scanMADT()>:
c0017884:	53                   	push   ebx
c0017885:	83 ec 38             	sub    esp,0x38
c0017888:	a1 40 e2 02 c0       	mov    eax,ds:0xc002e240
c001788d:	25 00 04 00 00       	and    eax,0x400
c0017892:	74 14                	je     c00178a8 <scanMADT()+0x24>
c0017894:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c0017899:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001789f:	83 e2 fb             	and    edx,0xfffffffb
c00178a2:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00178a8:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c00178ad:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00178b3:	83 e0 04             	and    eax,0x4
c00178b6:	84 c0                	test   al,al
c00178b8:	0f 84 4a 04 00 00    	je     c0017d08 <scanMADT()+0x484>
c00178be:	e8 f4 fa ff ff       	call   c00173b7 <findRSDP()>
c00178c3:	a3 cc ea 02 c0       	mov    ds:0xc002eacc,eax
c00178c8:	a1 cc ea 02 c0       	mov    eax,ds:0xc002eacc
c00178cd:	85 c0                	test   eax,eax
c00178cf:	75 19                	jne    c00178ea <scanMADT()+0x66>
c00178d1:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c00178d6:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00178dc:	83 e2 fb             	and    edx,0xfffffffb
c00178df:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00178e5:	e9 22 04 00 00       	jmp    c0017d0c <scanMADT()+0x488>
c00178ea:	a1 cc ea 02 c0       	mov    eax,ds:0xc002eacc
c00178ef:	83 ec 0c             	sub    esp,0xc
c00178f2:	50                   	push   eax
c00178f3:	e8 a0 fd ff ff       	call   c0017698 <findRSDT(unsigned char*)>
c00178f8:	83 c4 10             	add    esp,0x10
c00178fb:	a3 c8 ea 02 c0       	mov    ds:0xc002eac8,eax
c0017900:	a1 c8 ea 02 c0       	mov    eax,ds:0xc002eac8
c0017905:	85 c0                	test   eax,eax
c0017907:	75 19                	jne    c0017922 <scanMADT()+0x9e>
c0017909:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c001790e:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017914:	83 e2 fb             	and    edx,0xfffffffb
c0017917:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001791d:	e9 ea 03 00 00       	jmp    c0017d0c <scanMADT()+0x488>
c0017922:	a1 c8 ea 02 c0       	mov    eax,ds:0xc002eac8
c0017927:	83 ec 0c             	sub    esp,0xc
c001792a:	50                   	push   eax
c001792b:	e8 11 fb ff ff       	call   c0017441 <loadACPITables(unsigned char*)>
c0017930:	83 c4 10             	add    esp,0x10
c0017933:	a1 c8 ea 02 c0       	mov    eax,ds:0xc002eac8
c0017938:	83 ec 08             	sub    esp,0x8
c001793b:	68 b4 b8 02 c0       	push   0xc002b8b4
c0017940:	50                   	push   eax
c0017941:	e8 cc fe ff ff       	call   c0017812 <findDataTable(unsigned char*, char*)>
c0017946:	83 c4 10             	add    esp,0x10
c0017949:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001794d:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017952:	75 19                	jne    c001796d <scanMADT()+0xe9>
c0017954:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c0017959:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001795f:	83 e2 fe             	and    edx,0xfffffffe
c0017962:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017968:	e9 9f 03 00 00       	jmp    c0017d0c <scanMADT()+0x488>
c001796d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017975:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017979:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001797c:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017980:	0f 87 86 03 00 00    	ja     c0017d0c <scanMADT()+0x488>
c0017986:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c001798e:	0f 87 78 03 00 00    	ja     c0017d0c <scanMADT()+0x488>
c0017994:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017998:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001799c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179a0:	8d 50 01             	lea    edx,[eax+0x1]
c00179a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00179a7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00179ab:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00179af:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c00179b3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179b7:	8d 50 01             	lea    edx,[eax+0x1]
c00179ba:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00179be:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00179c2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00179c6:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c00179ca:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c00179cf:	0f 86 36 03 00 00    	jbe    c0017d0b <scanMADT()+0x487>
c00179d5:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c00179da:	75 57                	jne    c0017a33 <scanMADT()+0x1af>
c00179dc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179e0:	8d 50 01             	lea    edx,[eax+0x1]
c00179e3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00179e7:	8a 15 c0 ec 02 c0    	mov    dl,BYTE PTR ds:0xc002ecc0
c00179ed:	0f b6 d2             	movzx  edx,dl
c00179f0:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00179f4:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00179f8:	88 82 00 ed 02 c0    	mov    BYTE PTR [edx-0x3ffd1300],al
c00179fe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a02:	8d 50 01             	lea    edx,[eax+0x1]
c0017a05:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a09:	8a 15 c0 ec 02 c0    	mov    dl,BYTE PTR ds:0xc002ecc0
c0017a0f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017a12:	88 0d c0 ec 02 c0    	mov    BYTE PTR ds:0xc002ecc0,cl
c0017a18:	0f b6 d2             	movzx  edx,dl
c0017a1b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017a1f:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017a23:	88 82 e0 ec 02 c0    	mov    BYTE PTR [edx-0x3ffd1320],al
c0017a29:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017a2e:	e9 c1 02 00 00       	jmp    c0017cf4 <scanMADT()+0x470>
c0017a33:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017a38:	0f 85 14 01 00 00    	jne    c0017b52 <scanMADT()+0x2ce>
c0017a3e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a42:	8d 50 01             	lea    edx,[eax+0x1]
c0017a45:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a49:	8a 15 80 eb 02 c0    	mov    dl,BYTE PTR ds:0xc002eb80
c0017a4f:	0f b6 d2             	movzx  edx,dl
c0017a52:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017a56:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017a5a:	88 82 a0 eb 02 c0    	mov    BYTE PTR [edx-0x3ffd1460],al
c0017a60:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017a64:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a68:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a6c:	01 d0                	add    eax,edx
c0017a6e:	83 c0 2c             	add    eax,0x2c
c0017a71:	8a 00                	mov    al,BYTE PTR [eax]
c0017a73:	0f b6 d0             	movzx  edx,al
c0017a76:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a7a:	8d 48 01             	lea    ecx,[eax+0x1]
c0017a7d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a81:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017a85:	0f b6 c0             	movzx  eax,al
c0017a88:	c1 e0 08             	shl    eax,0x8
c0017a8b:	89 d1                	mov    ecx,edx
c0017a8d:	09 c1                	or     ecx,eax
c0017a8f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a93:	8d 50 02             	lea    edx,[eax+0x2]
c0017a96:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a9a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017a9e:	0f b6 c0             	movzx  eax,al
c0017aa1:	c1 e0 10             	shl    eax,0x10
c0017aa4:	09 c1                	or     ecx,eax
c0017aa6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017aaa:	8d 50 03             	lea    edx,[eax+0x3]
c0017aad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ab1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017ab5:	0f b6 c0             	movzx  eax,al
c0017ab8:	c1 e0 18             	shl    eax,0x18
c0017abb:	09 c1                	or     ecx,eax
c0017abd:	89 ca                	mov    edx,ecx
c0017abf:	a0 80 eb 02 c0       	mov    al,ds:0xc002eb80
c0017ac4:	0f b6 c0             	movzx  eax,al
c0017ac7:	89 14 85 c0 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1440],edx
c0017ace:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017ad3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ad7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017adb:	01 d0                	add    eax,edx
c0017add:	83 c0 2c             	add    eax,0x2c
c0017ae0:	8a 00                	mov    al,BYTE PTR [eax]
c0017ae2:	0f b6 d0             	movzx  edx,al
c0017ae5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ae9:	8d 48 01             	lea    ecx,[eax+0x1]
c0017aec:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017af0:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017af4:	0f b6 c0             	movzx  eax,al
c0017af7:	c1 e0 08             	shl    eax,0x8
c0017afa:	89 d1                	mov    ecx,edx
c0017afc:	09 c1                	or     ecx,eax
c0017afe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b02:	8d 50 02             	lea    edx,[eax+0x2]
c0017b05:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b09:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017b0d:	0f b6 c0             	movzx  eax,al
c0017b10:	c1 e0 10             	shl    eax,0x10
c0017b13:	09 c1                	or     ecx,eax
c0017b15:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b19:	8d 50 03             	lea    edx,[eax+0x3]
c0017b1c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b20:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017b24:	0f b6 c0             	movzx  eax,al
c0017b27:	c1 e0 18             	shl    eax,0x18
c0017b2a:	09 c1                	or     ecx,eax
c0017b2c:	89 ca                	mov    edx,ecx
c0017b2e:	a0 80 eb 02 c0       	mov    al,ds:0xc002eb80
c0017b33:	0f b6 c0             	movzx  eax,al
c0017b36:	89 14 85 40 ec 02 c0 	mov    DWORD PTR [eax*4-0x3ffd13c0],edx
c0017b3d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017b42:	a0 80 eb 02 c0       	mov    al,ds:0xc002eb80
c0017b47:	40                   	inc    eax
c0017b48:	a2 80 eb 02 c0       	mov    ds:0xc002eb80,al
c0017b4d:	e9 a2 01 00 00       	jmp    c0017cf4 <scanMADT()+0x470>
c0017b52:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017b57:	0f 85 e9 00 00 00    	jne    c0017c46 <scanMADT()+0x3c2>
c0017b5d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b61:	8d 50 01             	lea    edx,[eax+0x1]
c0017b64:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017b68:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017b6c:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017b70:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017b74:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b78:	8d 50 01             	lea    edx,[eax+0x1]
c0017b7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017b7f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017b83:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017b87:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017b8b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017b8f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b93:	01 d0                	add    eax,edx
c0017b95:	83 c0 2c             	add    eax,0x2c
c0017b98:	8a 00                	mov    al,BYTE PTR [eax]
c0017b9a:	0f b6 d0             	movzx  edx,al
c0017b9d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ba1:	8d 48 01             	lea    ecx,[eax+0x1]
c0017ba4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ba8:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017bac:	0f b6 c0             	movzx  eax,al
c0017baf:	c1 e0 08             	shl    eax,0x8
c0017bb2:	89 d1                	mov    ecx,edx
c0017bb4:	09 c1                	or     ecx,eax
c0017bb6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bba:	8d 50 02             	lea    edx,[eax+0x2]
c0017bbd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017bc1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017bc5:	0f b6 c0             	movzx  eax,al
c0017bc8:	c1 e0 10             	shl    eax,0x10
c0017bcb:	09 c1                	or     ecx,eax
c0017bcd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bd1:	8d 50 03             	lea    edx,[eax+0x3]
c0017bd4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017bd8:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017bdc:	0f b6 c0             	movzx  eax,al
c0017bdf:	c1 e0 18             	shl    eax,0x18
c0017be2:	09 c8                	or     eax,ecx
c0017be4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017be8:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017bed:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017bf1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bf5:	01 d0                	add    eax,edx
c0017bf7:	83 c0 2c             	add    eax,0x2c
c0017bfa:	8a 00                	mov    al,BYTE PTR [eax]
c0017bfc:	0f b6 c0             	movzx  eax,al
c0017bff:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017c03:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017c06:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c0a:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0017c0e:	0f b6 d2             	movzx  edx,dl
c0017c11:	c1 e2 08             	shl    edx,0x8
c0017c14:	09 d0                	or     eax,edx
c0017c16:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0017c1b:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017c20:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017c25:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017c29:	88 90 80 d4 02 c0    	mov    BYTE PTR [eax-0x3ffd2b80],dl
c0017c2f:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0017c34:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0017c39:	66 89 84 12 60 eb 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd14a0],ax
c0017c41:	e9 ae 00 00 00       	jmp    c0017cf4 <scanMADT()+0x470>
c0017c46:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0017c4b:	0f 85 97 00 00 00    	jne    c0017ce8 <scanMADT()+0x464>
c0017c51:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c55:	8d 50 01             	lea    edx,[eax+0x1]
c0017c58:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017c5c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c60:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017c64:	0f b6 c0             	movzx  eax,al
c0017c67:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017c6b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c6f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c73:	01 d0                	add    eax,edx
c0017c75:	83 c0 2c             	add    eax,0x2c
c0017c78:	8a 00                	mov    al,BYTE PTR [eax]
c0017c7a:	0f b6 d0             	movzx  edx,al
c0017c7d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c81:	8d 48 01             	lea    ecx,[eax+0x1]
c0017c84:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017c88:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017c8c:	0f b6 c0             	movzx  eax,al
c0017c8f:	c1 e0 08             	shl    eax,0x8
c0017c92:	09 d0                	or     eax,edx
c0017c94:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017c98:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017c9d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ca1:	8d 50 01             	lea    edx,[eax+0x1]
c0017ca4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ca8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017cac:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017cb0:	0f b6 c0             	movzx  eax,al
c0017cb3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017cb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017cbb:	c1 e0 08             	shl    eax,0x8
c0017cbe:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0017cc2:	89 c1                	mov    ecx,eax
c0017cc4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017cc8:	c1 e0 18             	shl    eax,0x18
c0017ccb:	89 c3                	mov    ebx,eax
c0017ccd:	a1 d0 ea 02 c0       	mov    eax,ds:0xc002ead0
c0017cd2:	8d 50 01             	lea    edx,[eax+0x1]
c0017cd5:	89 15 d0 ea 02 c0    	mov    DWORD PTR ds:0xc002ead0,edx
c0017cdb:	09 d9                	or     ecx,ebx
c0017cdd:	89 ca                	mov    edx,ecx
c0017cdf:	89 14 85 e0 ea 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1520],edx
c0017ce6:	eb 0c                	jmp    c0017cf4 <scanMADT()+0x470>
c0017ce8:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0017ced:	75 05                	jne    c0017cf4 <scanMADT()+0x470>
c0017cef:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0017cf4:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0017cf9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017cfd:	01 d0                	add    eax,edx
c0017cff:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017d03:	e9 6d fc ff ff       	jmp    c0017975 <scanMADT()+0xf1>
c0017d08:	90                   	nop
c0017d09:	eb 01                	jmp    c0017d0c <scanMADT()+0x488>
c0017d0b:	90                   	nop
c0017d0c:	83 c4 38             	add    esp,0x38
c0017d0f:	5b                   	pop    ebx
c0017d10:	c3                   	ret    
c0017d11:	90                   	nop

c0017d12 <ACPI::ACPI()>:
c0017d12:	83 ec 0c             	sub    esp,0xc
c0017d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d19:	83 ec 08             	sub    esp,0x8
c0017d1c:	68 b9 b8 02 c0       	push   0xc002b8b9
c0017d21:	50                   	push   eax
c0017d22:	e8 87 c1 ff ff       	call   c0013eae <Device::Device(char const*)>
c0017d27:	83 c4 10             	add    esp,0x10
c0017d2a:	ba 14 ba 02 c0       	mov    edx,0xc002ba14
c0017d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d33:	89 10                	mov    DWORD PTR [eax],edx
c0017d35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d39:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0017d40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d44:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0017d4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d52:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0017d5c:	e8 23 fb ff ff       	call   c0017884 <scanMADT()>
c0017d61:	90                   	nop
c0017d62:	83 c4 0c             	add    esp,0xc
c0017d65:	c3                   	ret    

c0017d66 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0017d66:	83 ec 2c             	sub    esp,0x2c
c0017d69:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017d6d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017d71:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017d75:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017d79:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017d7e:	88 d0                	mov    al,dl
c0017d80:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017d84:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017d89:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017d91:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017d95:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017d9b:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0017d9f:	0f 8d 97 00 00 00    	jge    c0017e3c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0017da5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017da9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017dad:	83 c2 2a             	add    edx,0x2a
c0017db0:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0017db4:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0017db9:	75 78                	jne    c0017e33 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017dbb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017dbf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017dc3:	83 c2 2a             	add    edx,0x2a
c0017dc6:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0017dca:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0017dce:	75 63                	jne    c0017e33 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017dd0:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017dd5:	74 3a                	je     c0017e11 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017dd7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017ddb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017ddf:	83 c2 2a             	add    edx,0x2a
c0017de2:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0017de6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017dea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017ded:	39 c2                	cmp    edx,eax
c0017def:	74 10                	je     c0017e01 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0017df1:	83 ec 0c             	sub    esp,0xc
c0017df4:	68 34 b8 02 c0       	push   0xc002b834
c0017df9:	e8 3f 23 00 00       	call   c001a13d <Krnl::panic(char const*)>
c0017dfe:	83 c4 10             	add    esp,0x10
c0017e01:	83 ec 0c             	sub    esp,0xc
c0017e04:	68 be b8 02 c0       	push   0xc002b8be
c0017e09:	e8 2f 23 00 00       	call   c001a13d <Krnl::panic(char const*)>
c0017e0e:	83 c4 10             	add    esp,0x10
c0017e11:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017e15:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017e19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017e1d:	83 c2 2a             	add    edx,0x2a
c0017e20:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0017e24:	8b 02                	mov    eax,DWORD PTR [edx]
c0017e26:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0017e29:	89 01                	mov    DWORD PTR [ecx],eax
c0017e2b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017e2e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017e33:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0017e37:	e9 55 ff ff ff       	jmp    c0017d91 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0017e3c:	90                   	nop
c0017e3d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017e41:	83 c4 2c             	add    esp,0x2c
c0017e44:	c2 04 00             	ret    0x4
c0017e47:	90                   	nop

c0017e48 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017e48:	83 ec 1c             	sub    esp,0x1c
c0017e4b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e4f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017e53:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017e57:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017e5c:	88 c8                	mov    al,cl
c0017e5e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017e62:	88 d0                	mov    al,dl
c0017e64:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017e68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e6c:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017e72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e76:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017e79:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0017e7d:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017e81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e85:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017e8b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017e8f:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0017e92:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017e96:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017e9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e9f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017ea5:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017ea9:	8d 48 01             	lea    ecx,[eax+0x1]
c0017eac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017eb0:	83 c2 2a             	add    edx,0x2a
c0017eb3:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0017eb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ebb:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017ec1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ec5:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017ec8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017ecc:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017ed0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ed4:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017eda:	8d 50 01             	lea    edx,[eax+0x1]
c0017edd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ee1:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0017ee7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017eeb:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017ef1:	3d 00 02 00 00       	cmp    eax,0x200
c0017ef6:	75 10                	jne    c0017f08 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0017ef8:	83 ec 0c             	sub    esp,0xc
c0017efb:	68 cd b8 02 c0       	push   0xc002b8cd
c0017f00:	e8 38 22 00 00       	call   c001a13d <Krnl::panic(char const*)>
c0017f05:	83 c4 10             	add    esp,0x10
c0017f08:	90                   	nop
c0017f09:	83 c4 1c             	add    esp,0x1c
c0017f0c:	c3                   	ret    
c0017f0d:	90                   	nop

c0017f0e <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017f0e:	b8 00 00 00 00       	mov    eax,0x0
c0017f13:	c3                   	ret    

c0017f14 <ACPI::detectPCI()>:
c0017f14:	53                   	push   ebx
c0017f15:	83 ec 28             	sub    esp,0x28
c0017f18:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017f1d:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c0017f22:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c0017f27:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017f2d:	83 e0 04             	and    eax,0x4
c0017f30:	84 c0                	test   al,al
c0017f32:	74 2b                	je     c0017f5f <ACPI::detectPCI()+0x4b>
c0017f34:	a1 c8 ea 02 c0       	mov    eax,ds:0xc002eac8
c0017f39:	83 ec 08             	sub    esp,0x8
c0017f3c:	68 ea b8 02 c0       	push   0xc002b8ea
c0017f41:	50                   	push   eax
c0017f42:	e8 cb f8 ff ff       	call   c0017812 <findDataTable(unsigned char*, char*)>
c0017f47:	83 c4 10             	add    esp,0x10
c0017f4a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017f4e:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017f53:	74 0a                	je     c0017f5f <ACPI::detectPCI()+0x4b>
c0017f55:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017f5a:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017f5f:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c0017f67:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017f6b:	8a 00                	mov    al,BYTE PTR [eax]
c0017f6d:	3c 01                	cmp    al,0x1
c0017f6f:	75 0c                	jne    c0017f7d <ACPI::detectPCI()+0x69>
c0017f71:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017f76:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017f7b:	eb 26                	jmp    c0017fa3 <ACPI::detectPCI()+0x8f>
c0017f7d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017f81:	8a 00                	mov    al,BYTE PTR [eax]
c0017f83:	3c 02                	cmp    al,0x2
c0017f85:	75 1c                	jne    c0017fa3 <ACPI::detectPCI()+0x8f>
c0017f87:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017f8c:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017f91:	74 10                	je     c0017fa3 <ACPI::detectPCI()+0x8f>
c0017f93:	83 ec 0c             	sub    esp,0xc
c0017f96:	68 64 b8 02 c0       	push   0xc002b864
c0017f9b:	e8 9d 21 00 00       	call   c001a13d <Krnl::panic(char const*)>
c0017fa0:	83 c4 10             	add    esp,0x10
c0017fa3:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017fa7:	83 f0 01             	xor    eax,0x1
c0017faa:	84 c0                	test   al,al
c0017fac:	74 3f                	je     c0017fed <ACPI::detectPCI()+0xd9>
c0017fae:	e8 9d 81 fe ff       	call   c0000150 <manualPCIProbe>
c0017fb3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017fb7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0017fbc:	75 0c                	jne    c0017fca <ACPI::detectPCI()+0xb6>
c0017fbe:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017fc3:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017fc8:	eb 23                	jmp    c0017fed <ACPI::detectPCI()+0xd9>
c0017fca:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c0017fcf:	75 1c                	jne    c0017fed <ACPI::detectPCI()+0xd9>
c0017fd1:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017fd6:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017fdb:	74 10                	je     c0017fed <ACPI::detectPCI()+0xd9>
c0017fdd:	83 ec 0c             	sub    esp,0xc
c0017fe0:	68 64 b8 02 c0       	push   0xc002b864
c0017fe5:	e8 53 21 00 00       	call   c001a13d <Krnl::panic(char const*)>
c0017fea:	83 c4 10             	add    esp,0x10
c0017fed:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017ff2:	74 7e                	je     c0018072 <ACPI::detectPCI()+0x15e>
c0017ff4:	83 ec 0c             	sub    esp,0xc
c0017ff7:	68 ef b8 02 c0       	push   0xc002b8ef
c0017ffc:	e8 72 78 ff ff       	call   c000f873 <Krnl::setBootMessage(char const*)>
c0018001:	83 c4 10             	add    esp,0x10
c0018004:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c001800c:	83 ec 0c             	sub    esp,0xc
c001800f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018013:	e8 01 78 ff ff       	call   c000f819 <malloc>
c0018018:	83 c4 10             	add    esp,0x10
c001801b:	89 c3                	mov    ebx,eax
c001801d:	83 ec 0c             	sub    esp,0xc
c0018020:	53                   	push   ebx
c0018021:	e8 18 a7 00 00       	call   c002273e <PCI::PCI()>
c0018026:	83 c4 10             	add    esp,0x10
c0018029:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001802d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018031:	83 ec 08             	sub    esp,0x8
c0018034:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018038:	50                   	push   eax
c0018039:	e8 6c bc ff ff       	call   c0013caa <Device::addChild(Device*)>
c001803e:	83 c4 10             	add    esp,0x10
c0018041:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018045:	8b 00                	mov    eax,DWORD PTR [eax]
c0018047:	83 c0 08             	add    eax,0x8
c001804a:	8b 00                	mov    eax,DWORD PTR [eax]
c001804c:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0018051:	74 07                	je     c001805a <ACPI::detectPCI()+0x146>
c0018053:	ba 01 00 00 00       	mov    edx,0x1
c0018058:	eb 05                	jmp    c001805f <ACPI::detectPCI()+0x14b>
c001805a:	ba 02 00 00 00       	mov    edx,0x2
c001805f:	6a 00                	push   0x0
c0018061:	6a 00                	push   0x0
c0018063:	52                   	push   edx
c0018064:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018068:	ff d0                	call   eax
c001806a:	83 c4 10             	add    esp,0x10
c001806d:	e9 9e 00 00 00       	jmp    c0018110 <ACPI::detectPCI()+0x1fc>
c0018072:	83 ec 0c             	sub    esp,0xc
c0018075:	68 07 b9 02 c0       	push   0xc002b907
c001807a:	e8 f2 a7 ff ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c001807f:	83 c4 10             	add    esp,0x10
c0018082:	83 ec 0c             	sub    esp,0xc
c0018085:	68 12 b9 02 c0       	push   0xc002b912
c001808a:	e8 e4 77 ff ff       	call   c000f873 <Krnl::setBootMessage(char const*)>
c001808f:	83 c4 10             	add    esp,0x10
c0018092:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c0018099:	83 ec 0c             	sub    esp,0xc
c001809c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00180a0:	e8 74 77 ff ff       	call   c000f819 <malloc>
c00180a5:	83 c4 10             	add    esp,0x10
c00180a8:	89 c3                	mov    ebx,eax
c00180aa:	83 ec 0c             	sub    esp,0xc
c00180ad:	53                   	push   ebx
c00180ae:	e8 f5 b1 00 00       	call   c00232a8 <IDE::IDE()>
c00180b3:	83 c4 10             	add    esp,0x10
c00180b6:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00180ba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00180be:	83 ec 08             	sub    esp,0x8
c00180c1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00180c5:	50                   	push   eax
c00180c6:	e8 df bb ff ff       	call   c0013caa <Device::addChild(Device*)>
c00180cb:	83 c4 10             	add    esp,0x10
c00180ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00180d2:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c00180dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00180e0:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c00180e9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00180ed:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c00180f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00180fa:	8b 00                	mov    eax,DWORD PTR [eax]
c00180fc:	83 c0 08             	add    eax,0x8
c00180ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0018101:	6a 00                	push   0x0
c0018103:	6a 00                	push   0x0
c0018105:	6a 00                	push   0x0
c0018107:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001810b:	ff d0                	call   eax
c001810d:	83 c4 10             	add    esp,0x10
c0018110:	90                   	nop
c0018111:	83 c4 28             	add    esp,0x28
c0018114:	5b                   	pop    ebx
c0018115:	c3                   	ret    

c0018116 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0018116:	83 ec 1c             	sub    esp,0x1c
c0018119:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001811d:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0018120:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018124:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c0018129:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001812e:	83 ec 08             	sub    esp,0x8
c0018131:	52                   	push   edx
c0018132:	50                   	push   eax
c0018133:	e8 ba 6c ff ff       	call   c000edf2 <Computer::readCMOS(unsigned char)>
c0018138:	83 c4 10             	add    esp,0x10
c001813b:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001813f:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c0018144:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018149:	83 ec 04             	sub    esp,0x4
c001814c:	6a 01                	push   0x1
c001814e:	52                   	push   edx
c001814f:	50                   	push   eax
c0018150:	e8 0d 6e ff ff       	call   c000ef62 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018155:	83 c4 10             	add    esp,0x10
c0018158:	90                   	nop
c0018159:	83 c4 1c             	add    esp,0x1c
c001815c:	c3                   	ret    
c001815d:	90                   	nop

c001815e <ACPI::sleep()>:
c001815e:	83 ec 0c             	sub    esp,0xc
c0018161:	a1 a0 e8 02 c0       	mov    eax,ds:0xc002e8a0
c0018166:	85 c0                	test   eax,eax
c0018168:	74 07                	je     c0018171 <ACPI::sleep()+0x13>
c001816a:	a1 a0 e8 02 c0       	mov    eax,ds:0xc002e8a0
c001816f:	ff d0                	call   eax
c0018171:	90                   	nop
c0018172:	83 c4 0c             	add    esp,0xc
c0018175:	c3                   	ret    

c0018176 <ACPI::open(int, int, void*)>:
c0018176:	57                   	push   edi
c0018177:	56                   	push   esi
c0018178:	53                   	push   ebx
c0018179:	81 ec 60 01 00 00    	sub    esp,0x160
c001817f:	83 ec 0c             	sub    esp,0xc
c0018182:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c0018189:	e8 86 fd ff ff       	call   c0017f14 <ACPI::detectPCI()>
c001818e:	83 c4 10             	add    esp,0x10
c0018191:	83 ec 0c             	sub    esp,0xc
c0018194:	68 8c b8 02 c0       	push   0xc002b88c
c0018199:	e8 d5 76 ff ff       	call   c000f873 <Krnl::setBootMessage(char const*)>
c001819e:	83 c4 10             	add    esp,0x10
c00181a1:	83 ec 0c             	sub    esp,0xc
c00181a4:	68 27 b9 02 c0       	push   0xc002b927
c00181a9:	e8 e5 46 00 00       	call   c001c893 <Thr::loadKernelSymbolTable(char const*)>
c00181ae:	83 c4 10             	add    esp,0x10
c00181b1:	83 ec 0c             	sub    esp,0xc
c00181b4:	68 45 b9 02 c0       	push   0xc002b945
c00181b9:	e8 b5 76 ff ff       	call   c000f873 <Krnl::setBootMessage(char const*)>
c00181be:	83 c4 10             	add    esp,0x10
c00181c1:	83 ec 04             	sub    esp,0x4
c00181c4:	6a 0c                	push   0xc
c00181c6:	68 60 b9 02 c0       	push   0xc002b960
c00181cb:	68 71 b9 02 c0       	push   0xc002b971
c00181d0:	e8 24 2d 00 00       	call   c001aef9 <Reg::readIntWithDefault(char*, char*, int)>
c00181d5:	83 c4 10             	add    esp,0x10
c00181d8:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c00181df:	83 ec 0c             	sub    esp,0xc
c00181e2:	ff b4 24 68 01 00 00 	push   DWORD PTR [esp+0x168]
c00181e9:	e8 bb 94 ff ff       	call   c00116a9 <Virt::setupPageSwapping(int)>
c00181ee:	83 c4 10             	add    esp,0x10
c00181f1:	83 ec 0c             	sub    esp,0xc
c00181f4:	68 8c a2 02 c0       	push   0xc002a28c
c00181f9:	e8 75 76 ff ff       	call   c000f873 <Krnl::setBootMessage(char const*)>
c00181fe:	83 c4 10             	add    esp,0x10
c0018201:	8b 1d 28 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e228
c0018207:	83 ec 08             	sub    esp,0x8
c001820a:	6a 01                	push   0x1
c001820c:	68 78 b9 02 c0       	push   0xc002b978
c0018211:	e8 f4 50 00 00       	call   c001d30a <Thr::loadDLL(char const*, bool)>
c0018216:	83 c4 10             	add    esp,0x10
c0018219:	83 ec 08             	sub    esp,0x8
c001821c:	53                   	push   ebx
c001821d:	50                   	push   eax
c001821e:	e8 18 53 00 00       	call   c001d53b <Thr::executeDLL(unsigned long, void*)>
c0018223:	83 c4 10             	add    esp,0x10
c0018226:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c001822d:	83 ec 08             	sub    esp,0x8
c0018230:	6a 12                	push   0x12
c0018232:	50                   	push   eax
c0018233:	e8 f6 bd ff ff       	call   c001402e <getDevicesOfType(DeviceType)>
c0018238:	83 c4 0c             	add    esp,0xc
c001823b:	83 ec 0c             	sub    esp,0xc
c001823e:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0018245:	50                   	push   eax
c0018246:	e8 79 0b 01 00       	call   c0028dc4 <LinkedList<Device>::isEmpty()>
c001824b:	83 c4 10             	add    esp,0x10
c001824e:	83 f0 01             	xor    eax,0x1
c0018251:	84 c0                	test   al,al
c0018253:	0f 84 43 01 00 00    	je     c001839c <ACPI::open(int, int, void*)+0x226>
c0018259:	83 ec 0c             	sub    esp,0xc
c001825c:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0018263:	50                   	push   eax
c0018264:	e8 77 0b 01 00       	call   c0028de0 <LinkedList<Device>::getFirstElement()>
c0018269:	83 c4 10             	add    esp,0x10
c001826c:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0018273:	83 ec 0c             	sub    esp,0xc
c0018276:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001827d:	50                   	push   eax
c001827e:	e8 65 0b 01 00       	call   c0028de8 <LinkedList<Device>::removeFirst()>
c0018283:	83 c4 10             	add    esp,0x10
c0018286:	8b 84 24 58 01 00 00 	mov    eax,DWORD PTR [esp+0x158]
c001828d:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c0018294:	8b 94 24 54 01 00 00 	mov    edx,DWORD PTR [esp+0x154]
c001829b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001829f:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c00182a5:	ba 09 00 00 00       	mov    edx,0x9
c00182aa:	fc                   	cld    
c00182ab:	89 c7                	mov    edi,eax
c00182ad:	89 de                	mov    esi,ebx
c00182af:	89 d1                	mov    ecx,edx
c00182b1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00182b3:	83 ec 08             	sub    esp,0x8
c00182b6:	8d 44 24 38          	lea    eax,[esp+0x38]
c00182ba:	50                   	push   eax
c00182bb:	83 ec 24             	sub    esp,0x24
c00182be:	89 e0                	mov    eax,esp
c00182c0:	89 c3                	mov    ebx,eax
c00182c2:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00182c6:	ba 09 00 00 00       	mov    edx,0x9
c00182cb:	89 df                	mov    edi,ebx
c00182cd:	89 c6                	mov    esi,eax
c00182cf:	89 d1                	mov    ecx,edx
c00182d1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00182d3:	e8 44 a9 00 00       	call   c0022c1c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c00182d8:	83 c4 30             	add    esp,0x30
c00182db:	89 84 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],eax
c00182e2:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c00182ea:	0f 84 4b ff ff ff    	je     c001823b <ACPI::open(int, int, void*)+0xc5>
c00182f0:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c00182fb:	83 ec 0c             	sub    esp,0xc
c00182fe:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0018305:	e8 0f 75 ff ff       	call   c000f819 <malloc>
c001830a:	83 c4 10             	add    esp,0x10
c001830d:	89 c3                	mov    ebx,eax
c001830f:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c0018314:	83 ec 04             	sub    esp,0x4
c0018317:	50                   	push   eax
c0018318:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001831f:	53                   	push   ebx
c0018320:	e8 ab aa ff ff       	call   c0012dd0 <File::File(char const*, Process*)>
c0018325:	83 c4 10             	add    esp,0x10
c0018328:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c001832f:	83 ec 0c             	sub    esp,0xc
c0018332:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0018339:	e8 64 ad ff ff       	call   c00130a2 <File::exists()>
c001833e:	83 c4 10             	add    esp,0x10
c0018341:	84 c0                	test   al,al
c0018343:	74 27                	je     c001836c <ACPI::open(int, int, void*)+0x1f6>
c0018345:	83 ec 08             	sub    esp,0x8
c0018348:	6a 01                	push   0x1
c001834a:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0018351:	e8 b4 4f 00 00       	call   c001d30a <Thr::loadDLL(char const*, bool)>
c0018356:	83 c4 10             	add    esp,0x10
c0018359:	83 ec 08             	sub    esp,0x8
c001835c:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0018363:	50                   	push   eax
c0018364:	e8 d2 51 00 00       	call   c001d53b <Thr::executeDLL(unsigned long, void*)>
c0018369:	83 c4 10             	add    esp,0x10
c001836c:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0018374:	0f 84 c1 fe ff ff    	je     c001823b <ACPI::open(int, int, void*)+0xc5>
c001837a:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c0018381:	8b 00                	mov    eax,DWORD PTR [eax]
c0018383:	83 c0 08             	add    eax,0x8
c0018386:	8b 00                	mov    eax,DWORD PTR [eax]
c0018388:	83 ec 0c             	sub    esp,0xc
c001838b:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0018392:	ff d0                	call   eax
c0018394:	83 c4 10             	add    esp,0x10
c0018397:	e9 9f fe ff ff       	jmp    c001823b <ACPI::open(int, int, void*)+0xc5>
c001839c:	83 ec 0c             	sub    esp,0xc
c001839f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00183a6:	50                   	push   eax
c00183a7:	e8 16 0a 01 00       	call   c0028dc2 <LinkedList<Device>::~LinkedList()>
c00183ac:	83 c4 10             	add    esp,0x10
c00183af:	8b 1d 28 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e228
c00183b5:	83 ec 08             	sub    esp,0x8
c00183b8:	6a 01                	push   0x1
c00183ba:	68 93 b9 02 c0       	push   0xc002b993
c00183bf:	e8 46 4f 00 00       	call   c001d30a <Thr::loadDLL(char const*, bool)>
c00183c4:	83 c4 10             	add    esp,0x10
c00183c7:	83 ec 08             	sub    esp,0x8
c00183ca:	53                   	push   ebx
c00183cb:	50                   	push   eax
c00183cc:	e8 6a 51 00 00       	call   c001d53b <Thr::executeDLL(unsigned long, void*)>
c00183d1:	83 c4 10             	add    esp,0x10
c00183d4:	8b 1d 28 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e228
c00183da:	83 ec 08             	sub    esp,0x8
c00183dd:	6a 01                	push   0x1
c00183df:	68 b0 b9 02 c0       	push   0xc002b9b0
c00183e4:	e8 21 4f 00 00       	call   c001d30a <Thr::loadDLL(char const*, bool)>
c00183e9:	83 c4 10             	add    esp,0x10
c00183ec:	83 ec 08             	sub    esp,0x8
c00183ef:	53                   	push   ebx
c00183f0:	50                   	push   eax
c00183f1:	e8 45 51 00 00       	call   c001d53b <Thr::executeDLL(unsigned long, void*)>
c00183f6:	83 c4 10             	add    esp,0x10
c00183f9:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c00183fe:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018404:	83 e0 04             	and    eax,0x4
c0018407:	84 c0                	test   al,al
c0018409:	0f 84 0d 01 00 00    	je     c001851c <ACPI::open(int, int, void*)+0x3a6>
c001840f:	83 ec 0c             	sub    esp,0xc
c0018412:	68 cd b9 02 c0       	push   0xc002b9cd
c0018417:	e8 57 74 ff ff       	call   c000f873 <Krnl::setBootMessage(char const*)>
c001841c:	83 c4 10             	add    esp,0x10
c001841f:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c001842a:	83 ec 0c             	sub    esp,0xc
c001842d:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c0018434:	e8 e0 73 ff ff       	call   c000f819 <malloc>
c0018439:	83 c4 10             	add    esp,0x10
c001843c:	89 c3                	mov    ebx,eax
c001843e:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c0018443:	83 ec 04             	sub    esp,0x4
c0018446:	50                   	push   eax
c0018447:	68 ea b9 02 c0       	push   0xc002b9ea
c001844c:	53                   	push   ebx
c001844d:	e8 7e a9 ff ff       	call   c0012dd0 <File::File(char const*, Process*)>
c0018452:	83 c4 10             	add    esp,0x10
c0018455:	89 9c 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],ebx
c001845c:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0018464:	74 1a                	je     c0018480 <ACPI::open(int, int, void*)+0x30a>
c0018466:	83 ec 0c             	sub    esp,0xc
c0018469:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0018470:	e8 2d ac ff ff       	call   c00130a2 <File::exists()>
c0018475:	83 c4 10             	add    esp,0x10
c0018478:	84 c0                	test   al,al
c001847a:	74 04                	je     c0018480 <ACPI::open(int, int, void*)+0x30a>
c001847c:	b0 01                	mov    al,0x1
c001847e:	eb 02                	jmp    c0018482 <ACPI::open(int, int, void*)+0x30c>
c0018480:	b0 00                	mov    al,0x0
c0018482:	84 c0                	test   al,al
c0018484:	74 25                	je     c00184ab <ACPI::open(int, int, void*)+0x335>
c0018486:	83 ec 08             	sub    esp,0x8
c0018489:	6a 01                	push   0x1
c001848b:	68 ea b9 02 c0       	push   0xc002b9ea
c0018490:	e8 75 4e 00 00       	call   c001d30a <Thr::loadDLL(char const*, bool)>
c0018495:	83 c4 10             	add    esp,0x10
c0018498:	83 ec 08             	sub    esp,0x8
c001849b:	ff b4 24 78 01 00 00 	push   DWORD PTR [esp+0x178]
c00184a2:	50                   	push   eax
c00184a3:	e8 93 50 00 00       	call   c001d53b <Thr::executeDLL(unsigned long, void*)>
c00184a8:	83 c4 10             	add    esp,0x10
c00184ab:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00184b3:	74 27                	je     c00184dc <ACPI::open(int, int, void*)+0x366>
c00184b5:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00184bd:	74 1d                	je     c00184dc <ACPI::open(int, int, void*)+0x366>
c00184bf:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c00184c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00184c8:	83 c0 08             	add    eax,0x8
c00184cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00184cd:	83 ec 0c             	sub    esp,0xc
c00184d0:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00184d7:	ff d0                	call   eax
c00184d9:	83 c4 10             	add    esp,0x10
c00184dc:	a1 c8 ea 02 c0       	mov    eax,ds:0xc002eac8
c00184e1:	83 ec 08             	sub    esp,0x8
c00184e4:	68 07 ba 02 c0       	push   0xc002ba07
c00184e9:	50                   	push   eax
c00184ea:	e8 23 f3 ff ff       	call   c0017812 <findDataTable(unsigned char*, char*)>
c00184ef:	83 c4 10             	add    esp,0x10
c00184f2:	89 84 24 44 01 00 00 	mov    DWORD PTR [esp+0x144],eax
c00184f9:	83 bc 24 44 01 00 00 00 	cmp    DWORD PTR [esp+0x144],0x0
c0018501:	74 19                	je     c001851c <ACPI::open(int, int, void*)+0x3a6>
c0018503:	83 ec 08             	sub    esp,0x8
c0018506:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001850d:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c0018514:	e8 fd fb ff ff       	call   c0018116 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0018519:	83 c4 10             	add    esp,0x10
c001851c:	b8 00 00 00 00       	mov    eax,0x0
c0018521:	81 c4 60 01 00 00    	add    esp,0x160
c0018527:	5b                   	pop    ebx
c0018528:	5e                   	pop    esi
c0018529:	5f                   	pop    edi
c001852a:	c3                   	ret    
c001852b:	90                   	nop

c001852c <CPU::close(int, int, void*)>:
c001852c:	31 c0                	xor    eax,eax
c001852e:	c3                   	ret    
c001852f:	90                   	nop

c0018530 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0018530:	55                   	push   ebp
c0018531:	57                   	push   edi
c0018532:	56                   	push   esi
c0018533:	53                   	push   ebx
c0018534:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018538:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001853c:	89 ce                	mov    esi,ecx
c001853e:	89 d5                	mov    ebp,edx
c0018540:	80 f9 04             	cmp    cl,0x4
c0018543:	75 28                	jne    c001856d <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0018545:	8d 42 f9             	lea    eax,[edx-0x7]
c0018548:	3c 03                	cmp    al,0x3
c001854a:	0f 86 63 01 00 00    	jbe    c00186b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018550:	80 fa 03             	cmp    dl,0x3
c0018553:	0f 84 5a 01 00 00    	je     c00186b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018559:	8d 7a f2             	lea    edi,[edx-0xe]
c001855c:	b8 50 d6 02 c0       	mov    eax,0xc002d650
c0018561:	89 fb                	mov    ebx,edi
c0018563:	80 fb 01             	cmp    bl,0x1
c0018566:	77 4e                	ja     c00185b6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0018568:	e9 52 01 00 00       	jmp    c00186bf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001856d:	80 f9 05             	cmp    cl,0x5
c0018570:	75 4d                	jne    c00185bf <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0018572:	b8 60 d6 02 c0       	mov    eax,0xc002d660
c0018577:	80 fa 03             	cmp    dl,0x3
c001857a:	0f 86 3f 01 00 00    	jbe    c00186bf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018580:	8d 7a fa             	lea    edi,[edx-0x6]
c0018583:	b8 70 d6 02 c0       	mov    eax,0xc002d670
c0018588:	89 fb                	mov    ebx,edi
c001858a:	80 fb 01             	cmp    bl,0x1
c001858d:	0f 86 2c 01 00 00    	jbe    c00186bf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018593:	b8 80 d6 02 c0       	mov    eax,0xc002d680
c0018598:	80 fa 08             	cmp    dl,0x8
c001859b:	0f 84 1e 01 00 00    	je     c00186bf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00185a1:	89 d7                	mov    edi,edx
c00185a3:	b8 90 d6 02 c0       	mov    eax,0xc002d690
c00185a8:	83 e7 fb             	and    edi,0xfffffffb
c00185ab:	89 fb                	mov    ebx,edi
c00185ad:	80 fb 09             	cmp    bl,0x9
c00185b0:	0f 84 09 01 00 00    	je     c00186bf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00185b6:	31 c0                	xor    eax,eax
c00185b8:	89 eb                	mov    ebx,ebp
c00185ba:	0f b6 fb             	movzx  edi,bl
c00185bd:	eb 30                	jmp    c00185ef <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c00185bf:	31 c0                	xor    eax,eax
c00185c1:	80 f9 06             	cmp    cl,0x6
c00185c4:	75 f2                	jne    c00185b8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00185c6:	80 fa 0a             	cmp    dl,0xa
c00185c9:	77 ed                	ja     c00185b8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00185cb:	bf de 05 00 00       	mov    edi,0x5de
c00185d0:	0f a3 d7             	bt     edi,edx
c00185d3:	73 e3                	jae    c00185b8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00185d5:	b8 a0 d6 02 c0       	mov    eax,0xc002d6a0
c00185da:	e9 e0 00 00 00       	jmp    c00186bf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00185df:	39 c7                	cmp    edi,eax
c00185e1:	0f 84 d3 00 00 00    	je     c00186ba <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00185e7:	40                   	inc    eax
c00185e8:	3d d0 00 00 00       	cmp    eax,0xd0
c00185ed:	74 09                	je     c00185f8 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c00185ef:	89 f3                	mov    ebx,esi
c00185f1:	80 fb 0f             	cmp    bl,0xf
c00185f4:	75 f1                	jne    c00185e7 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c00185f6:	eb e7                	jmp    c00185df <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c00185f8:	80 f9 10             	cmp    cl,0x10
c00185fb:	75 14                	jne    c0018611 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c00185fd:	8d 42 fc             	lea    eax,[edx-0x4]
c0018600:	83 e0 fb             	and    eax,0xfffffffb
c0018603:	3c 02                	cmp    al,0x2
c0018605:	76 34                	jbe    c001863b <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0018607:	b8 8d bb 02 c0       	mov    eax,0xc002bb8d
c001860c:	80 fa 02             	cmp    dl,0x2
c001860f:	eb 24                	jmp    c0018635 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0018611:	80 f9 11             	cmp    cl,0x11
c0018614:	75 13                	jne    c0018629 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0018616:	b8 8d bb 02 c0       	mov    eax,0xc002bb8d
c001861b:	80 fa 03             	cmp    dl,0x3
c001861e:	0f 85 9b 00 00 00    	jne    c00186bf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018624:	e9 91 00 00 00       	jmp    c00186ba <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018629:	80 f9 12             	cmp    cl,0x12
c001862c:	75 14                	jne    c0018642 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c001862e:	b8 8d bb 02 c0       	mov    eax,0xc002bb8d
c0018633:	fe ca                	dec    dl
c0018635:	0f 85 84 00 00 00    	jne    c00186bf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001863b:	b8 c0 d6 02 c0       	mov    eax,0xc002d6c0
c0018640:	eb 7d                	jmp    c00186bf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018642:	80 f9 14             	cmp    cl,0x14
c0018645:	75 12                	jne    c0018659 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0018647:	4a                   	dec    edx
c0018648:	b8 8d bb 02 c0       	mov    eax,0xc002bb8d
c001864d:	80 fa 01             	cmp    dl,0x1
c0018650:	77 6d                	ja     c00186bf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018652:	b8 d0 d6 02 c0       	mov    eax,0xc002d6d0
c0018657:	eb 66                	jmp    c00186bf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018659:	80 f9 15             	cmp    cl,0x15
c001865c:	75 31                	jne    c001868f <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c001865e:	b8 e0 d6 02 c0       	mov    eax,0xc002d6e0
c0018663:	80 fa 01             	cmp    dl,0x1
c0018666:	74 57                	je     c00186bf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018668:	b8 8d bb 02 c0       	mov    eax,0xc002bb8d
c001866d:	80 fa 13             	cmp    dl,0x13
c0018670:	76 0c                	jbe    c001867e <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0018672:	80 fa 30             	cmp    dl,0x30
c0018675:	75 48                	jne    c00186bf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018677:	b8 00 d7 02 c0       	mov    eax,0xc002d700
c001867c:	eb 41                	jmp    c00186bf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001867e:	b9 04 00 09 00       	mov    ecx,0x90004
c0018683:	0f a3 d1             	bt     ecx,edx
c0018686:	73 37                	jae    c00186bf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018688:	b8 f0 d6 02 c0       	mov    eax,0xc002d6f0
c001868d:	eb 30                	jmp    c00186bf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001868f:	b8 8d bb 02 c0       	mov    eax,0xc002bb8d
c0018694:	80 f9 16             	cmp    cl,0x16
c0018697:	75 26                	jne    c00186bf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018699:	b8 10 d7 02 c0       	mov    eax,0xc002d710
c001869e:	84 d2                	test   dl,dl
c00186a0:	74 1d                	je     c00186bf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00186a2:	b8 8d bb 02 c0       	mov    eax,0xc002bb8d
c00186a7:	80 fa 30             	cmp    dl,0x30
c00186aa:	75 13                	jne    c00186bf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00186ac:	b8 20 d7 02 c0       	mov    eax,0xc002d720
c00186b1:	eb 0c                	jmp    c00186bf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00186b3:	b8 40 d6 02 c0       	mov    eax,0xc002d640
c00186b8:	eb 05                	jmp    c00186bf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00186ba:	b8 b0 d6 02 c0       	mov    eax,0xc002d6b0
c00186bf:	5b                   	pop    ebx
c00186c0:	5e                   	pop    esi
c00186c1:	5f                   	pop    edi
c00186c2:	5d                   	pop    ebp
c00186c3:	c3                   	ret    

c00186c4 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c00186c4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00186c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00186cc:	80 f9 04             	cmp    cl,0x4
c00186cf:	75 6b                	jne    c001873c <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c00186d1:	b8 a0 d4 02 c0       	mov    eax,0xc002d4a0
c00186d6:	80 fa 01             	cmp    dl,0x1
c00186d9:	0f 86 92 02 00 00    	jbe    c0018971 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186df:	b8 b0 d4 02 c0       	mov    eax,0xc002d4b0
c00186e4:	80 fa 02             	cmp    dl,0x2
c00186e7:	0f 84 84 02 00 00    	je     c0018971 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186ed:	b8 c0 d4 02 c0       	mov    eax,0xc002d4c0
c00186f2:	80 fa 03             	cmp    dl,0x3
c00186f5:	0f 84 76 02 00 00    	je     c0018971 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186fb:	b8 d0 d4 02 c0       	mov    eax,0xc002d4d0
c0018700:	80 fa 04             	cmp    dl,0x4
c0018703:	0f 84 68 02 00 00    	je     c0018971 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018709:	b8 e0 d4 02 c0       	mov    eax,0xc002d4e0
c001870e:	80 fa 05             	cmp    dl,0x5
c0018711:	0f 84 5a 02 00 00    	je     c0018971 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018717:	b8 c0 d4 02 c0       	mov    eax,0xc002d4c0
c001871c:	80 fa 07             	cmp    dl,0x7
c001871f:	0f 84 4c 02 00 00    	je     c0018971 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018725:	83 ea 08             	sub    edx,0x8
c0018728:	b8 8d bb 02 c0       	mov    eax,0xc002bb8d
c001872d:	80 fa 01             	cmp    dl,0x1
c0018730:	0f 87 3b 02 00 00    	ja     c0018971 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018736:	b8 f0 d4 02 c0       	mov    eax,0xc002d4f0
c001873b:	c3                   	ret    
c001873c:	80 f9 05             	cmp    cl,0x5
c001873f:	75 45                	jne    c0018786 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018741:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018744:	b8 00 d5 02 c0       	mov    eax,0xc002d500
c0018749:	80 f9 02             	cmp    cl,0x2
c001874c:	0f 86 1f 02 00 00    	jbe    c0018971 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018752:	80 fa 04             	cmp    dl,0x4
c0018755:	0f 84 f3 01 00 00    	je     c001894e <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c001875b:	80 fa 07             	cmp    dl,0x7
c001875e:	0f 84 0d 02 00 00    	je     c0018971 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018764:	b8 10 d5 02 c0       	mov    eax,0xc002d510
c0018769:	80 fa 08             	cmp    dl,0x8
c001876c:	0f 84 ff 01 00 00    	je     c0018971 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018772:	b8 8d bb 02 c0       	mov    eax,0xc002bb8d
c0018777:	80 fa 09             	cmp    dl,0x9
c001877a:	0f 85 f1 01 00 00    	jne    c0018971 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018780:	b8 20 d5 02 c0       	mov    eax,0xc002d520
c0018785:	c3                   	ret    
c0018786:	80 f9 06             	cmp    cl,0x6
c0018789:	0f 85 85 01 00 00    	jne    c0018914 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c001878f:	b8 30 d5 02 c0       	mov    eax,0xc002d530
c0018794:	80 fa 01             	cmp    dl,0x1
c0018797:	0f 84 d4 01 00 00    	je     c0018971 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001879d:	8d 42 fb             	lea    eax,[edx-0x5]
c00187a0:	3c 01                	cmp    al,0x1
c00187a2:	0f 86 ac 01 00 00    	jbe    c0018954 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00187a8:	80 fa 03             	cmp    dl,0x3
c00187ab:	0f 84 a3 01 00 00    	je     c0018954 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00187b1:	8d 4a f9             	lea    ecx,[edx-0x7]
c00187b4:	b8 50 d5 02 c0       	mov    eax,0xc002d550
c00187b9:	80 f9 01             	cmp    cl,0x1
c00187bc:	0f 86 af 01 00 00    	jbe    c0018971 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187c2:	80 fa 09             	cmp    dl,0x9
c00187c5:	0f 84 8f 01 00 00    	je     c001895a <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c00187cb:	8d 4a f6             	lea    ecx,[edx-0xa]
c00187ce:	80 f9 01             	cmp    cl,0x1
c00187d1:	0f 86 9a 01 00 00    	jbe    c0018971 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187d7:	b8 60 d5 02 c0       	mov    eax,0xc002d560
c00187dc:	80 fa 0d             	cmp    dl,0xd
c00187df:	0f 84 8c 01 00 00    	je     c0018971 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187e5:	b8 70 d5 02 c0       	mov    eax,0xc002d570
c00187ea:	80 fa 0e             	cmp    dl,0xe
c00187ed:	0f 84 7e 01 00 00    	je     c0018971 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187f3:	b8 80 d5 02 c0       	mov    eax,0xc002d580
c00187f8:	80 fa 0f             	cmp    dl,0xf
c00187fb:	0f 84 70 01 00 00    	je     c0018971 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018801:	b8 60 d5 02 c0       	mov    eax,0xc002d560
c0018806:	80 fa 15             	cmp    dl,0x15
c0018809:	0f 84 62 01 00 00    	je     c0018971 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001880f:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018812:	b8 80 d5 02 c0       	mov    eax,0xc002d580
c0018817:	80 f9 01             	cmp    cl,0x1
c001881a:	0f 86 51 01 00 00    	jbe    c0018971 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018820:	80 fa 1a             	cmp    dl,0x1a
c0018823:	0f 84 37 01 00 00    	je     c0018960 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018829:	80 fa 1c             	cmp    dl,0x1c
c001882c:	0f 84 34 01 00 00    	je     c0018966 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018832:	80 fa 1d             	cmp    dl,0x1d
c0018835:	0f 84 36 01 00 00    	je     c0018971 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001883b:	b8 b0 d5 02 c0       	mov    eax,0xc002d5b0
c0018840:	80 fa 25             	cmp    dl,0x25
c0018843:	0f 84 28 01 00 00    	je     c0018971 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018849:	8d 4a da             	lea    ecx,[edx-0x26]
c001884c:	b8 a0 d5 02 c0       	mov    eax,0xc002d5a0
c0018851:	80 f9 01             	cmp    cl,0x1
c0018854:	0f 86 17 01 00 00    	jbe    c0018971 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001885a:	b8 c0 d5 02 c0       	mov    eax,0xc002d5c0
c001885f:	80 fa 2a             	cmp    dl,0x2a
c0018862:	0f 84 09 01 00 00    	je     c0018971 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018868:	b8 b0 d5 02 c0       	mov    eax,0xc002d5b0
c001886d:	80 fa 2c             	cmp    dl,0x2c
c0018870:	0f 84 fb 00 00 00    	je     c0018971 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018876:	b8 c0 d5 02 c0       	mov    eax,0xc002d5c0
c001887b:	80 fa 2d             	cmp    dl,0x2d
c001887e:	0f 84 ed 00 00 00    	je     c0018971 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018884:	b8 90 d5 02 c0       	mov    eax,0xc002d590
c0018889:	80 fa 2e             	cmp    dl,0x2e
c001888c:	0f 84 df 00 00 00    	je     c0018971 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018892:	b8 b0 d5 02 c0       	mov    eax,0xc002d5b0
c0018897:	80 fa 2f             	cmp    dl,0x2f
c001889a:	0f 84 d1 00 00 00    	je     c0018971 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188a0:	8d 4a cb             	lea    ecx,[edx-0x35]
c00188a3:	b8 a0 d5 02 c0       	mov    eax,0xc002d5a0
c00188a8:	80 f9 01             	cmp    cl,0x1
c00188ab:	0f 86 c0 00 00 00    	jbe    c0018971 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188b1:	b8 d0 d5 02 c0       	mov    eax,0xc002d5d0
c00188b6:	80 fa 37             	cmp    dl,0x37
c00188b9:	0f 84 b2 00 00 00    	je     c0018971 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188bf:	b8 e0 d5 02 c0       	mov    eax,0xc002d5e0
c00188c4:	80 fa 3a             	cmp    dl,0x3a
c00188c7:	0f 84 a4 00 00 00    	je     c0018971 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188cd:	b8 f0 d5 02 c0       	mov    eax,0xc002d5f0
c00188d2:	80 fa 3c             	cmp    dl,0x3c
c00188d5:	0f 84 96 00 00 00    	je     c0018971 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188db:	b8 00 d6 02 c0       	mov    eax,0xc002d600
c00188e0:	80 fa 3d             	cmp    dl,0x3d
c00188e3:	0f 84 88 00 00 00    	je     c0018971 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188e9:	b8 e0 d5 02 c0       	mov    eax,0xc002d5e0
c00188ee:	80 fa 3e             	cmp    dl,0x3e
c00188f1:	74 7e                	je     c0018971 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188f3:	8d 42 bb             	lea    eax,[edx-0x45]
c00188f6:	3c 01                	cmp    al,0x1
c00188f8:	76 72                	jbe    c001896c <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00188fa:	80 fa 3f             	cmp    dl,0x3f
c00188fd:	74 6d                	je     c001896c <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00188ff:	80 fa 4a             	cmp    dl,0x4a
c0018902:	74 0a                	je     c001890e <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018904:	b8 8d bb 02 c0       	mov    eax,0xc002bb8d
c0018909:	80 fa 4d             	cmp    dl,0x4d
c001890c:	75 63                	jne    c0018971 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001890e:	b8 d0 d5 02 c0       	mov    eax,0xc002d5d0
c0018913:	c3                   	ret    
c0018914:	b8 8d bb 02 c0       	mov    eax,0xc002bb8d
c0018919:	80 f9 0b             	cmp    cl,0xb
c001891c:	75 0a                	jne    c0018928 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c001891e:	fe ca                	dec    dl
c0018920:	75 4f                	jne    c0018971 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018922:	b8 10 d6 02 c0       	mov    eax,0xc002d610
c0018927:	c3                   	ret    
c0018928:	80 f9 0f             	cmp    cl,0xf
c001892b:	75 44                	jne    c0018971 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001892d:	b8 20 d6 02 c0       	mov    eax,0xc002d620
c0018932:	80 fa 02             	cmp    dl,0x2
c0018935:	76 3a                	jbe    c0018971 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018937:	8d 42 fd             	lea    eax,[edx-0x3]
c001893a:	3c 01                	cmp    al,0x1
c001893c:	76 0a                	jbe    c0018948 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c001893e:	b8 8d bb 02 c0       	mov    eax,0xc002bb8d
c0018943:	80 fa 06             	cmp    dl,0x6
c0018946:	75 29                	jne    c0018971 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018948:	b8 30 d6 02 c0       	mov    eax,0xc002d630
c001894d:	c3                   	ret    
c001894e:	b8 10 d5 02 c0       	mov    eax,0xc002d510
c0018953:	c3                   	ret    
c0018954:	b8 40 d5 02 c0       	mov    eax,0xc002d540
c0018959:	c3                   	ret    
c001895a:	b8 60 d5 02 c0       	mov    eax,0xc002d560
c001895f:	c3                   	ret    
c0018960:	b8 90 d5 02 c0       	mov    eax,0xc002d590
c0018965:	c3                   	ret    
c0018966:	b8 a0 d5 02 c0       	mov    eax,0xc002d5a0
c001896b:	c3                   	ret    
c001896c:	b8 f0 d5 02 c0       	mov    eax,0xc002d5f0
c0018971:	c3                   	ret    

c0018972 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018972:	60                   	pusha  
c0018973:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018977:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001897b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001897f:	9c                   	pushf  
c0018980:	fa                   	cli    
c0018981:	0f 09                	wbinvd 
c0018983:	0f 30                	wrmsr  
c0018985:	9d                   	popf   
c0018986:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001898a:	89 02                	mov    DWORD PTR [edx],eax
c001898c:	61                   	popa   
c001898d:	c3                   	ret    

c001898e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c001898e:	60                   	pusha  
c001898f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018993:	9c                   	pushf  
c0018994:	fa                   	cli    
c0018995:	0f 09                	wbinvd 
c0018997:	31 c0                	xor    eax,eax
c0018999:	31 d2                	xor    edx,edx
c001899b:	0f 32                	rdmsr  
c001899d:	9d                   	popf   
c001899e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00189a2:	89 02                	mov    DWORD PTR [edx],eax
c00189a4:	61                   	popa   
c00189a5:	c3                   	ret    

c00189a6 <CPU::AMD_K6_writeback(int, int, int)>:
c00189a6:	56                   	push   esi
c00189a7:	53                   	push   ebx
c00189a8:	83 ec 10             	sub    esp,0x10
c00189ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189af:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c00189b4:	75 5d                	jne    c0018a13 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00189b6:	83 f8 08             	cmp    eax,0x8
c00189b9:	75 09                	jne    c00189c4 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c00189bb:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c00189c0:	7e 13                	jle    c00189d5 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00189c2:	eb 30                	jmp    c00189f4 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00189c4:	83 f8 06             	cmp    eax,0x6
c00189c7:	7c 4a                	jl     c0018a13 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00189c9:	83 f8 07             	cmp    eax,0x7
c00189cc:	7e 07                	jle    c00189d5 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00189ce:	83 f8 09             	cmp    eax,0x9
c00189d1:	74 21                	je     c00189f4 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00189d3:	eb 3e                	jmp    c0018a13 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00189d5:	89 e6                	mov    esi,esp
c00189d7:	8b 1d 68 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e268
c00189dd:	56                   	push   esi
c00189de:	c1 eb 15             	shr    ebx,0x15
c00189e1:	68 82 00 00 c0       	push   0xc0000082
c00189e6:	83 e3 7e             	and    ebx,0x7e
c00189e9:	e8 a0 ff ff ff       	call   c001898e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00189ee:	56                   	push   esi
c00189ef:	6a 00                	push   0x0
c00189f1:	53                   	push   ebx
c00189f2:	eb 12                	jmp    c0018a06 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c00189f4:	89 e3                	mov    ebx,esp
c00189f6:	53                   	push   ebx
c00189f7:	68 82 00 00 c0       	push   0xc0000082
c00189fc:	e8 8d ff ff ff       	call   c001898e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018a01:	53                   	push   ebx
c0018a02:	6a 00                	push   0x0
c0018a04:	6a 00                	push   0x0
c0018a06:	68 82 00 00 c0       	push   0xc0000082
c0018a0b:	e8 62 ff ff ff       	call   c0018972 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018a10:	83 c4 18             	add    esp,0x18
c0018a13:	83 c4 10             	add    esp,0x10
c0018a16:	5b                   	pop    ebx
c0018a17:	5e                   	pop    esi
c0018a18:	c3                   	ret    
c0018a19:	90                   	nop

c0018a1a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018a1a:	55                   	push   ebp
c0018a1b:	57                   	push   edi
c0018a1c:	56                   	push   esi
c0018a1d:	53                   	push   ebx
c0018a1e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018a22:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018a26:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018a2a:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018a2e:	39 05 40 d7 02 c0    	cmp    DWORD PTR ds:0xc002d740,eax
c0018a34:	75 23                	jne    c0018a59 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018a36:	a1 2c ed 02 c0       	mov    eax,ds:0xc002ed2c
c0018a3b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018a3f:	89 06                	mov    DWORD PTR [esi],eax
c0018a41:	a1 28 ed 02 c0       	mov    eax,ds:0xc002ed28
c0018a46:	89 07                	mov    DWORD PTR [edi],eax
c0018a48:	a1 24 ed 02 c0       	mov    eax,ds:0xc002ed24
c0018a4d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018a50:	a1 20 ed 02 c0       	mov    eax,ds:0xc002ed20
c0018a55:	89 02                	mov    DWORD PTR [edx],eax
c0018a57:	eb 3f                	jmp    c0018a98 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018a59:	31 c9                	xor    ecx,ecx
c0018a5b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018a5f:	0f a2                	cpuid  
c0018a61:	89 06                	mov    DWORD PTR [esi],eax
c0018a63:	89 1f                	mov    DWORD PTR [edi],ebx
c0018a65:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018a69:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018a6c:	89 10                	mov    DWORD PTR [eax],edx
c0018a6e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018a72:	a3 40 d7 02 c0       	mov    ds:0xc002d740,eax
c0018a77:	8b 06                	mov    eax,DWORD PTR [esi]
c0018a79:	a3 2c ed 02 c0       	mov    ds:0xc002ed2c,eax
c0018a7e:	8b 07                	mov    eax,DWORD PTR [edi]
c0018a80:	a3 28 ed 02 c0       	mov    ds:0xc002ed28,eax
c0018a85:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018a88:	a3 24 ed 02 c0       	mov    ds:0xc002ed24,eax
c0018a8d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018a91:	8b 00                	mov    eax,DWORD PTR [eax]
c0018a93:	a3 20 ed 02 c0       	mov    ds:0xc002ed20,eax
c0018a98:	5b                   	pop    ebx
c0018a99:	5e                   	pop    esi
c0018a9a:	5f                   	pop    edi
c0018a9b:	5d                   	pop    ebp
c0018a9c:	c3                   	ret    
c0018a9d:	90                   	nop

c0018a9e <CPU::cpuidCheckEDX(unsigned int)>:
c0018a9e:	83 ec 10             	sub    esp,0x10
c0018aa1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018aa5:	50                   	push   eax
c0018aa6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018aaa:	50                   	push   eax
c0018aab:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018aaf:	50                   	push   eax
c0018ab0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ab4:	50                   	push   eax
c0018ab5:	6a 01                	push   0x1
c0018ab7:	e8 5e ff ff ff       	call   c0018a1a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018abc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018ac0:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018ac4:	0f 95 c0             	setne  al
c0018ac7:	83 c4 24             	add    esp,0x24
c0018aca:	c3                   	ret    
c0018acb:	90                   	nop

c0018acc <CPU::cpuidCheckECX(unsigned int)>:
c0018acc:	83 ec 10             	sub    esp,0x10
c0018acf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ad3:	50                   	push   eax
c0018ad4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ad8:	50                   	push   eax
c0018ad9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018add:	50                   	push   eax
c0018ade:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ae2:	50                   	push   eax
c0018ae3:	6a 01                	push   0x1
c0018ae5:	e8 30 ff ff ff       	call   c0018a1a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018aea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018aee:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018af2:	0f 95 c0             	setne  al
c0018af5:	83 c4 24             	add    esp,0x24
c0018af8:	c3                   	ret    
c0018af9:	90                   	nop

c0018afa <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018afa:	83 ec 10             	sub    esp,0x10
c0018afd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b01:	50                   	push   eax
c0018b02:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b06:	50                   	push   eax
c0018b07:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b0b:	50                   	push   eax
c0018b0c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b10:	50                   	push   eax
c0018b11:	6a 07                	push   0x7
c0018b13:	e8 02 ff ff ff       	call   c0018a1a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018b18:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018b1c:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018b20:	0f 95 c0             	setne  al
c0018b23:	83 c4 24             	add    esp,0x24
c0018b26:	c3                   	ret    
c0018b27:	90                   	nop

c0018b28 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018b28:	83 ec 10             	sub    esp,0x10
c0018b2b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b2f:	50                   	push   eax
c0018b30:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b34:	50                   	push   eax
c0018b35:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b39:	50                   	push   eax
c0018b3a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b3e:	50                   	push   eax
c0018b3f:	6a 07                	push   0x7
c0018b41:	e8 d4 fe ff ff       	call   c0018a1a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018b46:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018b4a:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018b4e:	0f 95 c0             	setne  al
c0018b51:	83 c4 24             	add    esp,0x24
c0018b54:	c3                   	ret    
c0018b55:	90                   	nop

c0018b56 <CPU::CPU()>:
c0018b56:	83 ec 0c             	sub    esp,0xc
c0018b59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b5d:	83 ec 08             	sub    esp,0x8
c0018b60:	68 8d bb 02 c0       	push   0xc002bb8d
c0018b65:	50                   	push   eax
c0018b66:	e8 43 b3 ff ff       	call   c0013eae <Device::Device(char const*)>
c0018b6b:	83 c4 10             	add    esp,0x10
c0018b6e:	ba b0 bd 02 c0       	mov    edx,0xc002bdb0
c0018b73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b77:	89 10                	mov    DWORD PTR [eax],edx
c0018b79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b7d:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018b87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b8b:	05 78 01 00 00       	add    eax,0x178
c0018b90:	83 ec 0c             	sub    esp,0xc
c0018b93:	50                   	push   eax
c0018b94:	e8 b3 64 ff ff       	call   c000f04c <GDT::GDT()>
c0018b99:	83 c4 10             	add    esp,0x10
c0018b9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ba0:	05 7c 09 00 00       	add    eax,0x97c
c0018ba5:	83 ec 0c             	sub    esp,0xc
c0018ba8:	50                   	push   eax
c0018ba9:	e8 ee 66 ff ff       	call   c000f29c <IDT::IDT()>
c0018bae:	83 c4 10             	add    esp,0x10
c0018bb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018bb5:	05 7c 11 00 00       	add    eax,0x117c
c0018bba:	83 ec 0c             	sub    esp,0xc
c0018bbd:	50                   	push   eax
c0018bbe:	e8 23 82 ff ff       	call   c0010de6 <TSS::TSS()>
c0018bc3:	83 c4 10             	add    esp,0x10
c0018bc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018bca:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018bd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018bd5:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018bdf:	90                   	nop
c0018be0:	83 c4 0c             	add    esp,0xc
c0018be3:	c3                   	ret    

c0018be4 <CPU::displayFeatures()>:
c0018be4:	c3                   	ret    
c0018be5:	90                   	nop

c0018be6 <CPU::detectFeatures()>:
c0018be6:	55                   	push   ebp
c0018be7:	57                   	push   edi
c0018be8:	56                   	push   esi
c0018be9:	53                   	push   ebx
c0018bea:	83 ec 50             	sub    esp,0x50
c0018bed:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018bf1:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0018bfb:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0018c02:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0018c08:	6a 0d                	push   0xd
c0018c0a:	6a 00                	push   0x0
c0018c0c:	55                   	push   ebp
c0018c0d:	e8 3e 7b fe ff       	call   c0000750 <memset>
c0018c12:	83 c4 10             	add    esp,0x10
c0018c15:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c0018c1a:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0018c21:	0f 84 22 09 00 00    	je     c0019549 <CPU::detectFeatures()+0x963>
c0018c27:	83 ec 0c             	sub    esp,0xc
c0018c2a:	89 ef                	mov    edi,ebp
c0018c2c:	6a 10                	push   0x10
c0018c2e:	e8 6b fe ff ff       	call   c0018a9e <CPU::cpuidCheckEDX(unsigned int)>
c0018c33:	83 e0 01             	and    eax,0x1
c0018c36:	8d 14 00             	lea    edx,[eax+eax*1]
c0018c39:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018c3f:	83 e0 fd             	and    eax,0xfffffffd
c0018c42:	09 d0                	or     eax,edx
c0018c44:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018c4a:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0018c51:	e8 48 fe ff ff       	call   c0018a9e <CPU::cpuidCheckEDX(unsigned int)>
c0018c56:	83 e0 01             	and    eax,0x1
c0018c59:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018c60:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018c66:	83 e0 fb             	and    eax,0xfffffffb
c0018c69:	09 d0                	or     eax,edx
c0018c6b:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018c71:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018c78:	e8 21 fe ff ff       	call   c0018a9e <CPU::cpuidCheckEDX(unsigned int)>
c0018c7d:	83 e0 01             	and    eax,0x1
c0018c80:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018c87:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018c8d:	83 e0 f7             	and    eax,0xfffffff7
c0018c90:	09 d0                	or     eax,edx
c0018c92:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018c98:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0018c9f:	e8 fa fd ff ff       	call   c0018a9e <CPU::cpuidCheckEDX(unsigned int)>
c0018ca4:	83 e0 01             	and    eax,0x1
c0018ca7:	c1 e0 04             	shl    eax,0x4
c0018caa:	88 c2                	mov    dl,al
c0018cac:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018cb2:	83 e0 ef             	and    eax,0xffffffef
c0018cb5:	09 d0                	or     eax,edx
c0018cb7:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018cbd:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0018cc4:	e8 d5 fd ff ff       	call   c0018a9e <CPU::cpuidCheckEDX(unsigned int)>
c0018cc9:	83 e0 01             	and    eax,0x1
c0018ccc:	c1 e0 05             	shl    eax,0x5
c0018ccf:	88 c2                	mov    dl,al
c0018cd1:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018cd7:	83 e0 df             	and    eax,0xffffffdf
c0018cda:	09 d0                	or     eax,edx
c0018cdc:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018ce2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0018ce9:	e8 b0 fd ff ff       	call   c0018a9e <CPU::cpuidCheckEDX(unsigned int)>
c0018cee:	83 e0 01             	and    eax,0x1
c0018cf1:	8d 14 00             	lea    edx,[eax+eax*1]
c0018cf4:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018cfa:	83 e0 fd             	and    eax,0xfffffffd
c0018cfd:	09 d0                	or     eax,edx
c0018cff:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018d05:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0018d0c:	e8 8d fd ff ff       	call   c0018a9e <CPU::cpuidCheckEDX(unsigned int)>
c0018d11:	83 e0 01             	and    eax,0x1
c0018d14:	c1 e0 06             	shl    eax,0x6
c0018d17:	88 c2                	mov    dl,al
c0018d19:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018d1f:	83 e0 bf             	and    eax,0xffffffbf
c0018d22:	09 d0                	or     eax,edx
c0018d24:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018d2a:	58                   	pop    eax
c0018d2b:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018d2f:	50                   	push   eax
c0018d30:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018d34:	50                   	push   eax
c0018d35:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018d39:	56                   	push   esi
c0018d3a:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018d3e:	50                   	push   eax
c0018d3f:	6a 00                	push   0x0
c0018d41:	e8 d4 fc ff ff       	call   c0018a1a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d46:	b8 04 00 00 00       	mov    eax,0x4
c0018d4b:	89 c1                	mov    ecx,eax
c0018d4d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018d4f:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0018d55:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0018d59:	89 c1                	mov    ecx,eax
c0018d5b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018d5d:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0018d63:	8d 74 24 38          	lea    esi,[esp+0x38]
c0018d67:	89 c1                	mov    ecx,eax
c0018d69:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018d6b:	83 c4 18             	add    esp,0x18
c0018d6e:	68 38 ba 02 c0       	push   0xc002ba38
c0018d73:	55                   	push   ebp
c0018d74:	e8 1f 7b fe ff       	call   c0000898 <strcmp>
c0018d79:	83 c4 10             	add    esp,0x10
c0018d7c:	85 c0                	test   eax,eax
c0018d7e:	75 0f                	jne    c0018d8f <CPU::detectFeatures()+0x1a9>
c0018d80:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0018d8a:	e9 22 02 00 00       	jmp    c0018fb1 <CPU::detectFeatures()+0x3cb>
c0018d8f:	50                   	push   eax
c0018d90:	50                   	push   eax
c0018d91:	68 45 ba 02 c0       	push   0xc002ba45
c0018d96:	55                   	push   ebp
c0018d97:	e8 fc 7a fe ff       	call   c0000898 <strcmp>
c0018d9c:	83 c4 10             	add    esp,0x10
c0018d9f:	85 c0                	test   eax,eax
c0018da1:	74 dd                	je     c0018d80 <CPU::detectFeatures()+0x19a>
c0018da3:	50                   	push   eax
c0018da4:	50                   	push   eax
c0018da5:	68 52 ba 02 c0       	push   0xc002ba52
c0018daa:	55                   	push   ebp
c0018dab:	e8 e8 7a fe ff       	call   c0000898 <strcmp>
c0018db0:	83 c4 10             	add    esp,0x10
c0018db3:	85 c0                	test   eax,eax
c0018db5:	74 2a                	je     c0018de1 <CPU::detectFeatures()+0x1fb>
c0018db7:	50                   	push   eax
c0018db8:	50                   	push   eax
c0018db9:	68 5f ba 02 c0       	push   0xc002ba5f
c0018dbe:	55                   	push   ebp
c0018dbf:	e8 d4 7a fe ff       	call   c0000898 <strcmp>
c0018dc4:	83 c4 10             	add    esp,0x10
c0018dc7:	85 c0                	test   eax,eax
c0018dc9:	74 16                	je     c0018de1 <CPU::detectFeatures()+0x1fb>
c0018dcb:	50                   	push   eax
c0018dcc:	50                   	push   eax
c0018dcd:	68 6c ba 02 c0       	push   0xc002ba6c
c0018dd2:	55                   	push   ebp
c0018dd3:	e8 c0 7a fe ff       	call   c0000898 <strcmp>
c0018dd8:	83 c4 10             	add    esp,0x10
c0018ddb:	85 c0                	test   eax,eax
c0018ddd:	74 48                	je     c0018e27 <CPU::detectFeatures()+0x241>
c0018ddf:	eb 0f                	jmp    c0018df0 <CPU::detectFeatures()+0x20a>
c0018de1:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0018deb:	e9 c1 01 00 00       	jmp    c0018fb1 <CPU::detectFeatures()+0x3cb>
c0018df0:	50                   	push   eax
c0018df1:	50                   	push   eax
c0018df2:	68 79 ba 02 c0       	push   0xc002ba79
c0018df7:	55                   	push   ebp
c0018df8:	e8 9b 7a fe ff       	call   c0000898 <strcmp>
c0018dfd:	83 c4 10             	add    esp,0x10
c0018e00:	85 c0                	test   eax,eax
c0018e02:	74 23                	je     c0018e27 <CPU::detectFeatures()+0x241>
c0018e04:	57                   	push   edi
c0018e05:	57                   	push   edi
c0018e06:	68 86 ba 02 c0       	push   0xc002ba86
c0018e0b:	55                   	push   ebp
c0018e0c:	e8 87 7a fe ff       	call   c0000898 <strcmp>
c0018e11:	83 c4 10             	add    esp,0x10
c0018e14:	85 c0                	test   eax,eax
c0018e16:	75 1e                	jne    c0018e36 <CPU::detectFeatures()+0x250>
c0018e18:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018e22:	e9 8a 01 00 00       	jmp    c0018fb1 <CPU::detectFeatures()+0x3cb>
c0018e27:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0018e31:	e9 7b 01 00 00       	jmp    c0018fb1 <CPU::detectFeatures()+0x3cb>
c0018e36:	56                   	push   esi
c0018e37:	56                   	push   esi
c0018e38:	68 93 ba 02 c0       	push   0xc002ba93
c0018e3d:	55                   	push   ebp
c0018e3e:	e8 55 7a fe ff       	call   c0000898 <strcmp>
c0018e43:	83 c4 10             	add    esp,0x10
c0018e46:	85 c0                	test   eax,eax
c0018e48:	75 0f                	jne    c0018e59 <CPU::detectFeatures()+0x273>
c0018e4a:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0018e54:	e9 58 01 00 00       	jmp    c0018fb1 <CPU::detectFeatures()+0x3cb>
c0018e59:	51                   	push   ecx
c0018e5a:	51                   	push   ecx
c0018e5b:	68 52 ba 02 c0       	push   0xc002ba52
c0018e60:	55                   	push   ebp
c0018e61:	e8 32 7a fe ff       	call   c0000898 <strcmp>
c0018e66:	83 c4 10             	add    esp,0x10
c0018e69:	85 c0                	test   eax,eax
c0018e6b:	75 0f                	jne    c0018e7c <CPU::detectFeatures()+0x296>
c0018e6d:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0018e77:	e9 35 01 00 00       	jmp    c0018fb1 <CPU::detectFeatures()+0x3cb>
c0018e7c:	52                   	push   edx
c0018e7d:	52                   	push   edx
c0018e7e:	68 a0 ba 02 c0       	push   0xc002baa0
c0018e83:	55                   	push   ebp
c0018e84:	e8 0f 7a fe ff       	call   c0000898 <strcmp>
c0018e89:	83 c4 10             	add    esp,0x10
c0018e8c:	85 c0                	test   eax,eax
c0018e8e:	75 0f                	jne    c0018e9f <CPU::detectFeatures()+0x2b9>
c0018e90:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0018e9a:	e9 12 01 00 00       	jmp    c0018fb1 <CPU::detectFeatures()+0x3cb>
c0018e9f:	50                   	push   eax
c0018ea0:	50                   	push   eax
c0018ea1:	68 ad ba 02 c0       	push   0xc002baad
c0018ea6:	55                   	push   ebp
c0018ea7:	e8 ec 79 fe ff       	call   c0000898 <strcmp>
c0018eac:	83 c4 10             	add    esp,0x10
c0018eaf:	85 c0                	test   eax,eax
c0018eb1:	75 0f                	jne    c0018ec2 <CPU::detectFeatures()+0x2dc>
c0018eb3:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0018ebd:	e9 ef 00 00 00       	jmp    c0018fb1 <CPU::detectFeatures()+0x3cb>
c0018ec2:	50                   	push   eax
c0018ec3:	50                   	push   eax
c0018ec4:	68 ba ba 02 c0       	push   0xc002baba
c0018ec9:	55                   	push   ebp
c0018eca:	e8 c9 79 fe ff       	call   c0000898 <strcmp>
c0018ecf:	83 c4 10             	add    esp,0x10
c0018ed2:	85 c0                	test   eax,eax
c0018ed4:	75 0f                	jne    c0018ee5 <CPU::detectFeatures()+0x2ff>
c0018ed6:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0018ee0:	e9 cc 00 00 00       	jmp    c0018fb1 <CPU::detectFeatures()+0x3cb>
c0018ee5:	50                   	push   eax
c0018ee6:	50                   	push   eax
c0018ee7:	68 c7 ba 02 c0       	push   0xc002bac7
c0018eec:	55                   	push   ebp
c0018eed:	e8 a6 79 fe ff       	call   c0000898 <strcmp>
c0018ef2:	83 c4 10             	add    esp,0x10
c0018ef5:	85 c0                	test   eax,eax
c0018ef7:	75 0f                	jne    c0018f08 <CPU::detectFeatures()+0x322>
c0018ef9:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0018f03:	e9 a9 00 00 00       	jmp    c0018fb1 <CPU::detectFeatures()+0x3cb>
c0018f08:	50                   	push   eax
c0018f09:	50                   	push   eax
c0018f0a:	68 d4 ba 02 c0       	push   0xc002bad4
c0018f0f:	55                   	push   ebp
c0018f10:	e8 83 79 fe ff       	call   c0000898 <strcmp>
c0018f15:	83 c4 10             	add    esp,0x10
c0018f18:	85 c0                	test   eax,eax
c0018f1a:	75 0f                	jne    c0018f2b <CPU::detectFeatures()+0x345>
c0018f1c:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0018f26:	e9 86 00 00 00       	jmp    c0018fb1 <CPU::detectFeatures()+0x3cb>
c0018f2b:	50                   	push   eax
c0018f2c:	50                   	push   eax
c0018f2d:	68 e1 ba 02 c0       	push   0xc002bae1
c0018f32:	55                   	push   ebp
c0018f33:	e8 60 79 fe ff       	call   c0000898 <strcmp>
c0018f38:	83 c4 10             	add    esp,0x10
c0018f3b:	85 c0                	test   eax,eax
c0018f3d:	75 0c                	jne    c0018f4b <CPU::detectFeatures()+0x365>
c0018f3f:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0018f49:	eb 66                	jmp    c0018fb1 <CPU::detectFeatures()+0x3cb>
c0018f4b:	50                   	push   eax
c0018f4c:	50                   	push   eax
c0018f4d:	68 ee ba 02 c0       	push   0xc002baee
c0018f52:	55                   	push   ebp
c0018f53:	e8 40 79 fe ff       	call   c0000898 <strcmp>
c0018f58:	83 c4 10             	add    esp,0x10
c0018f5b:	85 c0                	test   eax,eax
c0018f5d:	75 0c                	jne    c0018f6b <CPU::detectFeatures()+0x385>
c0018f5f:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0018f69:	eb 46                	jmp    c0018fb1 <CPU::detectFeatures()+0x3cb>
c0018f6b:	57                   	push   edi
c0018f6c:	57                   	push   edi
c0018f6d:	68 fb ba 02 c0       	push   0xc002bafb
c0018f72:	55                   	push   ebp
c0018f73:	e8 20 79 fe ff       	call   c0000898 <strcmp>
c0018f78:	83 c4 10             	add    esp,0x10
c0018f7b:	85 c0                	test   eax,eax
c0018f7d:	74 e0                	je     c0018f5f <CPU::detectFeatures()+0x379>
c0018f7f:	56                   	push   esi
c0018f80:	56                   	push   esi
c0018f81:	68 08 bb 02 c0       	push   0xc002bb08
c0018f86:	55                   	push   ebp
c0018f87:	e8 0c 79 fe ff       	call   c0000898 <strcmp>
c0018f8c:	83 c4 10             	add    esp,0x10
c0018f8f:	85 c0                	test   eax,eax
c0018f91:	74 cc                	je     c0018f5f <CPU::detectFeatures()+0x379>
c0018f93:	51                   	push   ecx
c0018f94:	51                   	push   ecx
c0018f95:	68 15 bb 02 c0       	push   0xc002bb15
c0018f9a:	55                   	push   ebp
c0018f9b:	e8 f8 78 fe ff       	call   c0000898 <strcmp>
c0018fa0:	83 c4 10             	add    esp,0x10
c0018fa3:	85 c0                	test   eax,eax
c0018fa5:	74 b8                	je     c0018f5f <CPU::detectFeatures()+0x379>
c0018fa7:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0018fb1:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0018fb6:	0f 86 be 00 00 00    	jbe    c001907a <CPU::detectFeatures()+0x494>
c0018fbc:	83 ec 0c             	sub    esp,0xc
c0018fbf:	68 80 00 00 00       	push   0x80
c0018fc4:	e8 31 fb ff ff       	call   c0018afa <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018fc9:	83 e0 01             	and    eax,0x1
c0018fcc:	c1 e0 06             	shl    eax,0x6
c0018fcf:	88 c2                	mov    dl,al
c0018fd1:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018fd7:	83 e0 bf             	and    eax,0xffffffbf
c0018fda:	09 d0                	or     eax,edx
c0018fdc:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018fe2:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0018fe9:	e8 0c fb ff ff       	call   c0018afa <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018fee:	83 e0 01             	and    eax,0x1
c0018ff1:	c1 e0 04             	shl    eax,0x4
c0018ff4:	88 c2                	mov    dl,al
c0018ff6:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018ffc:	83 e0 ef             	and    eax,0xffffffef
c0018fff:	09 d0                	or     eax,edx
c0019001:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019007:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001900e:	e8 e7 fa ff ff       	call   c0018afa <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019013:	c1 e0 07             	shl    eax,0x7
c0019016:	88 c2                	mov    dl,al
c0019018:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001901e:	83 e0 7f             	and    eax,0x7f
c0019021:	09 d0                	or     eax,edx
c0019023:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019029:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0019030:	e8 f3 fa ff ff       	call   c0018b28 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019035:	83 e0 01             	and    eax,0x1
c0019038:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001903f:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019045:	83 e0 f7             	and    eax,0xfffffff7
c0019048:	09 d0                	or     eax,edx
c001904a:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019050:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0019057:	e8 cc fa ff ff       	call   c0018b28 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001905c:	83 c4 10             	add    esp,0x10
c001905f:	83 e0 01             	and    eax,0x1
c0019062:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0019069:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001906f:	83 e0 fb             	and    eax,0xfffffffb
c0019072:	09 d0                	or     eax,edx
c0019074:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001907a:	83 ec 0c             	sub    esp,0xc
c001907d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019081:	50                   	push   eax
c0019082:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019086:	50                   	push   eax
c0019087:	8d 74 24 28          	lea    esi,[esp+0x28]
c001908b:	56                   	push   esi
c001908c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019090:	50                   	push   eax
c0019091:	6a 01                	push   0x1
c0019093:	e8 82 f9 ff ff       	call   c0018a1a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019098:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001909c:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00190a2:	88 ca                	mov    dl,cl
c00190a4:	83 e0 f0             	and    eax,0xfffffff0
c00190a7:	83 e2 0f             	and    edx,0xf
c00190aa:	09 d0                	or     eax,edx
c00190ac:	88 ca                	mov    dl,cl
c00190ae:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00190b4:	c0 ea 04             	shr    dl,0x4
c00190b7:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00190bb:	0f b6 c2             	movzx  eax,dl
c00190be:	83 c4 20             	add    esp,0x20
c00190c1:	c1 e0 06             	shl    eax,0x6
c00190c4:	89 c7                	mov    edi,eax
c00190c6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00190cc:	66 25 3f c0          	and    ax,0xc03f
c00190d0:	09 f8                	or     eax,edi
c00190d2:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00190d9:	89 c8                	mov    eax,ecx
c00190db:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c00190e2:	c1 e8 08             	shr    eax,0x8
c00190e5:	83 e5 3f             	and    ebp,0x3f
c00190e8:	83 e0 0f             	and    eax,0xf
c00190eb:	89 c7                	mov    edi,eax
c00190ed:	c1 e7 06             	shl    edi,0x6
c00190f0:	09 ef                	or     edi,ebp
c00190f2:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c00190f9:	89 fa                	mov    edx,edi
c00190fb:	83 e5 c0             	and    ebp,0xffffffc0
c00190fe:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0019104:	88 c2                	mov    dl,al
c0019106:	c0 ea 02             	shr    dl,0x2
c0019109:	89 d7                	mov    edi,edx
c001910b:	09 ef                	or     edi,ebp
c001910d:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0019113:	89 fa                	mov    edx,edi
c0019115:	83 e5 cf             	and    ebp,0xffffffcf
c0019118:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c001911e:	89 cf                	mov    edi,ecx
c0019120:	c1 ef 0c             	shr    edi,0xc
c0019123:	83 e7 03             	and    edi,0x3
c0019126:	c1 e7 04             	shl    edi,0x4
c0019129:	09 ef                	or     edi,ebp
c001912b:	3c 06                	cmp    al,0x6
c001912d:	89 fa                	mov    edx,edi
c001912f:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0019135:	74 04                	je     c001913b <CPU::detectFeatures()+0x555>
c0019137:	3c 0f                	cmp    al,0xf
c0019139:	75 5c                	jne    c0019197 <CPU::detectFeatures()+0x5b1>
c001913b:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001913f:	89 cf                	mov    edi,ecx
c0019141:	c1 ef 10             	shr    edi,0x10
c0019144:	c1 e7 04             	shl    edi,0x4
c0019147:	09 fa                	or     edx,edi
c0019149:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c001914f:	0f b6 d2             	movzx  edx,dl
c0019152:	66 81 e7 3f c0       	and    di,0xc03f
c0019157:	c1 e2 06             	shl    edx,0x6
c001915a:	09 fa                	or     edx,edi
c001915c:	3c 0f                	cmp    al,0xf
c001915e:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0019165:	75 30                	jne    c0019197 <CPU::detectFeatures()+0x5b1>
c0019167:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c001916d:	c1 e9 14             	shr    ecx,0x14
c0019170:	83 e0 3f             	and    eax,0x3f
c0019173:	83 c1 0f             	add    ecx,0xf
c0019176:	88 ca                	mov    dl,cl
c0019178:	c0 e9 02             	shr    cl,0x2
c001917b:	c1 e2 06             	shl    edx,0x6
c001917e:	09 d0                	or     eax,edx
c0019180:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0019186:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c001918c:	83 e0 c0             	and    eax,0xffffffc0
c001918f:	09 c1                	or     ecx,eax
c0019191:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0019197:	83 ec 0c             	sub    esp,0xc
c001919a:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00191a1:	8d 44 24 28          	lea    eax,[esp+0x28]
c00191a5:	50                   	push   eax
c00191a6:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00191aa:	55                   	push   ebp
c00191ab:	56                   	push   esi
c00191ac:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00191b0:	57                   	push   edi
c00191b1:	68 00 00 00 80       	push   0x80000000
c00191b6:	e8 5f f8 ff ff       	call   c0018a1a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00191bb:	83 c4 20             	add    esp,0x20
c00191be:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00191c6:	76 22                	jbe    c00191ea <CPU::detectFeatures()+0x604>
c00191c8:	83 ec 0c             	sub    esp,0xc
c00191cb:	8d 44 24 28          	lea    eax,[esp+0x28]
c00191cf:	50                   	push   eax
c00191d0:	55                   	push   ebp
c00191d1:	56                   	push   esi
c00191d2:	57                   	push   edi
c00191d3:	68 01 00 00 80       	push   0x80000001
c00191d8:	e8 3d f8 ff ff       	call   c0018a1a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00191dd:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00191e7:	83 c4 20             	add    esp,0x20
c00191ea:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00191f0:	83 f8 01             	cmp    eax,0x1
c00191f3:	75 6f                	jne    c0019264 <CPU::detectFeatures()+0x67e>
c00191f5:	51                   	push   ecx
c00191f6:	51                   	push   ecx
c00191f7:	68 21 bb 02 c0       	push   0xc002bb21
c00191fc:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019200:	56                   	push   esi
c0019201:	e8 06 76 fe ff       	call   c000080c <strcpy>
c0019206:	5f                   	pop    edi
c0019207:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001920d:	5d                   	pop    ebp
c001920e:	66 c1 e8 06          	shr    ax,0x6
c0019212:	0f b6 c0             	movzx  eax,al
c0019215:	50                   	push   eax
c0019216:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001921c:	c1 e8 0e             	shr    eax,0xe
c001921f:	0f b6 c0             	movzx  eax,al
c0019222:	50                   	push   eax
c0019223:	e8 9c f4 ff ff       	call   c00186c4 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0019228:	5a                   	pop    edx
c0019229:	59                   	pop    ecx
c001922a:	50                   	push   eax
c001922b:	56                   	push   esi
c001922c:	e8 1b 77 fe ff       	call   c000094c <strcat>
c0019231:	5f                   	pop    edi
c0019232:	5d                   	pop    ebp
c0019233:	56                   	push   esi
c0019234:	53                   	push   ebx
c0019235:	e8 66 ac ff ff       	call   c0013ea0 <Device::setName(char const*)>
c001923a:	58                   	pop    eax
c001923b:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019241:	5a                   	pop    edx
c0019242:	68 28 bb 02 c0       	push   0xc002bb28
c0019247:	50                   	push   eax
c0019248:	e8 4b 76 fe ff       	call   c0000898 <strcmp>
c001924d:	83 c4 10             	add    esp,0x10
c0019250:	85 c0                	test   eax,eax
c0019252:	0f 85 71 03 00 00    	jne    c00195c9 <CPU::detectFeatures()+0x9e3>
c0019258:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c001925f:	e9 65 03 00 00       	jmp    c00195c9 <CPU::detectFeatures()+0x9e3>
c0019264:	83 f8 02             	cmp    eax,0x2
c0019267:	0f 85 b5 00 00 00    	jne    c0019322 <CPU::detectFeatures()+0x73c>
c001926d:	57                   	push   edi
c001926e:	57                   	push   edi
c001926f:	68 3a bb 02 c0       	push   0xc002bb3a
c0019274:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019278:	56                   	push   esi
c0019279:	e8 8e 75 fe ff       	call   c000080c <strcpy>
c001927e:	5d                   	pop    ebp
c001927f:	58                   	pop    eax
c0019280:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019286:	66 c1 e8 06          	shr    ax,0x6
c001928a:	0f b6 c0             	movzx  eax,al
c001928d:	50                   	push   eax
c001928e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019294:	c1 e8 0e             	shr    eax,0xe
c0019297:	0f b6 c0             	movzx  eax,al
c001929a:	50                   	push   eax
c001929b:	e8 90 f2 ff ff       	call   c0018530 <CPU::lookupAMDName(unsigned char, unsigned char)>
c00192a0:	5a                   	pop    edx
c00192a1:	59                   	pop    ecx
c00192a2:	50                   	push   eax
c00192a3:	56                   	push   esi
c00192a4:	e8 a3 76 fe ff       	call   c000094c <strcat>
c00192a9:	5f                   	pop    edi
c00192aa:	5d                   	pop    ebp
c00192ab:	56                   	push   esi
c00192ac:	53                   	push   ebx
c00192ad:	e8 ee ab ff ff       	call   c0013ea0 <Device::setName(char const*)>
c00192b2:	58                   	pop    eax
c00192b3:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00192b9:	5a                   	pop    edx
c00192ba:	68 3f bb 02 c0       	push   0xc002bb3f
c00192bf:	50                   	push   eax
c00192c0:	e8 d3 75 fe ff       	call   c0000898 <strcmp>
c00192c5:	83 c4 10             	add    esp,0x10
c00192c8:	85 c0                	test   eax,eax
c00192ca:	75 20                	jne    c00192ec <CPU::detectFeatures()+0x706>
c00192cc:	8b 15 28 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e228
c00192d2:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00192d8:	a8 01                	test   al,0x1
c00192da:	74 10                	je     c00192ec <CPU::detectFeatures()+0x706>
c00192dc:	83 e0 fe             	and    eax,0xfffffffe
c00192df:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00192e5:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00192ec:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00192f2:	c1 e8 0e             	shr    eax,0xe
c00192f5:	3c 05                	cmp    al,0x5
c00192f7:	0f 85 cc 02 00 00    	jne    c00195c9 <CPU::detectFeatures()+0x9e3>
c00192fd:	56                   	push   esi
c00192fe:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019304:	83 e0 0f             	and    eax,0xf
c0019307:	50                   	push   eax
c0019308:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001930e:	66 c1 e8 06          	shr    ax,0x6
c0019312:	0f b6 c0             	movzx  eax,al
c0019315:	50                   	push   eax
c0019316:	6a 05                	push   0x5
c0019318:	e8 89 f6 ff ff       	call   c00189a6 <CPU::AMD_K6_writeback(int, int, int)>
c001931d:	e9 1f 02 00 00       	jmp    c0019541 <CPU::detectFeatures()+0x95b>
c0019322:	8d 50 fd             	lea    edx,[eax-0x3]
c0019325:	83 fa 01             	cmp    edx,0x1
c0019328:	76 09                	jbe    c0019333 <CPU::detectFeatures()+0x74d>
c001932a:	83 f8 06             	cmp    eax,0x6
c001932d:	0f 85 91 01 00 00    	jne    c00194c4 <CPU::detectFeatures()+0x8de>
c0019333:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019339:	c1 ea 0e             	shr    edx,0xe
c001933c:	80 fa 05             	cmp    dl,0x5
c001933f:	75 7b                	jne    c00193bc <CPU::detectFeatures()+0x7d6>
c0019341:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019347:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001934c:	66 81 fa 00 01       	cmp    dx,0x100
c0019351:	75 0c                	jne    c001935f <CPU::detectFeatures()+0x779>
c0019353:	51                   	push   ecx
c0019354:	51                   	push   ecx
c0019355:	68 46 bb 02 c0       	push   0xc002bb46
c001935a:	e9 dc 01 00 00       	jmp    c001953b <CPU::detectFeatures()+0x955>
c001935f:	66 81 fa 00 02       	cmp    dx,0x200
c0019364:	75 0c                	jne    c0019372 <CPU::detectFeatures()+0x78c>
c0019366:	52                   	push   edx
c0019367:	52                   	push   edx
c0019368:	68 59 bb 02 c0       	push   0xc002bb59
c001936d:	e9 c9 01 00 00       	jmp    c001953b <CPU::detectFeatures()+0x955>
c0019372:	66 81 fa 40 02       	cmp    dx,0x240
c0019377:	75 0c                	jne    c0019385 <CPU::detectFeatures()+0x79f>
c0019379:	50                   	push   eax
c001937a:	50                   	push   eax
c001937b:	68 6b bb 02 c0       	push   0xc002bb6b
c0019380:	e9 b6 01 00 00       	jmp    c001953b <CPU::detectFeatures()+0x955>
c0019385:	83 f8 06             	cmp    eax,0x6
c0019388:	75 0c                	jne    c0019396 <CPU::detectFeatures()+0x7b0>
c001938a:	50                   	push   eax
c001938b:	50                   	push   eax
c001938c:	68 7d bb 02 c0       	push   0xc002bb7d
c0019391:	e9 a5 01 00 00       	jmp    c001953b <CPU::detectFeatures()+0x955>
c0019396:	83 f8 04             	cmp    eax,0x4
c0019399:	75 0c                	jne    c00193a7 <CPU::detectFeatures()+0x7c1>
c001939b:	50                   	push   eax
c001939c:	50                   	push   eax
c001939d:	68 89 bb 02 c0       	push   0xc002bb89
c00193a2:	e9 94 01 00 00       	jmp    c001953b <CPU::detectFeatures()+0x955>
c00193a7:	83 f8 03             	cmp    eax,0x3
c00193aa:	0f 85 19 02 00 00    	jne    c00195c9 <CPU::detectFeatures()+0x9e3>
c00193b0:	50                   	push   eax
c00193b1:	50                   	push   eax
c00193b2:	68 91 bb 02 c0       	push   0xc002bb91
c00193b7:	e9 7f 01 00 00       	jmp    c001953b <CPU::detectFeatures()+0x955>
c00193bc:	80 fa 06             	cmp    dl,0x6
c00193bf:	0f 85 db 00 00 00    	jne    c00194a0 <CPU::detectFeatures()+0x8ba>
c00193c5:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00193cb:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00193d0:	66 81 fa 80 01       	cmp    dx,0x180
c00193d5:	75 0c                	jne    c00193e3 <CPU::detectFeatures()+0x7fd>
c00193d7:	50                   	push   eax
c00193d8:	50                   	push   eax
c00193d9:	68 9c bb 02 c0       	push   0xc002bb9c
c00193de:	e9 58 01 00 00       	jmp    c001953b <CPU::detectFeatures()+0x955>
c00193e3:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c00193e9:	66 f7 c1 80 ff       	test   cx,0xff80
c00193ee:	75 0c                	jne    c00193fc <CPU::detectFeatures()+0x816>
c00193f0:	50                   	push   eax
c00193f1:	50                   	push   eax
c00193f2:	68 ac bb 02 c0       	push   0xc002bbac
c00193f7:	e9 3f 01 00 00       	jmp    c001953b <CPU::detectFeatures()+0x955>
c00193fc:	66 81 fa 40 02       	cmp    dx,0x240
c0019401:	75 0c                	jne    c001940f <CPU::detectFeatures()+0x829>
c0019403:	55                   	push   ebp
c0019404:	55                   	push   ebp
c0019405:	68 b3 bb 02 c0       	push   0xc002bbb3
c001940a:	e9 2c 01 00 00       	jmp    c001953b <CPU::detectFeatures()+0x955>
c001940f:	66 81 fa 80 02       	cmp    dx,0x280
c0019414:	75 0c                	jne    c0019422 <CPU::detectFeatures()+0x83c>
c0019416:	57                   	push   edi
c0019417:	57                   	push   edi
c0019418:	68 bc bb 02 c0       	push   0xc002bbbc
c001941d:	e9 19 01 00 00       	jmp    c001953b <CPU::detectFeatures()+0x955>
c0019422:	66 81 fa 40 03       	cmp    dx,0x340
c0019427:	74 ed                	je     c0019416 <CPU::detectFeatures()+0x830>
c0019429:	66 81 fa c0 03       	cmp    dx,0x3c0
c001942e:	75 0c                	jne    c001943c <CPU::detectFeatures()+0x856>
c0019430:	56                   	push   esi
c0019431:	56                   	push   esi
c0019432:	68 c3 bb 02 c0       	push   0xc002bbc3
c0019437:	e9 ff 00 00 00       	jmp    c001953b <CPU::detectFeatures()+0x955>
c001943c:	83 f8 06             	cmp    eax,0x6
c001943f:	0f 84 45 ff ff ff    	je     c001938a <CPU::detectFeatures()+0x7a4>
c0019445:	83 f8 04             	cmp    eax,0x4
c0019448:	0f 84 4d ff ff ff    	je     c001939b <CPU::detectFeatures()+0x7b5>
c001944e:	83 f8 03             	cmp    eax,0x3
c0019451:	0f 85 72 01 00 00    	jne    c00195c9 <CPU::detectFeatures()+0x9e3>
c0019457:	51                   	push   ecx
c0019458:	51                   	push   ecx
c0019459:	68 cc bb 02 c0       	push   0xc002bbcc
c001945e:	53                   	push   ebx
c001945f:	e8 3c aa ff ff       	call   c0013ea0 <Device::setName(char const*)>
c0019464:	b1 c1                	mov    cl,0xc1
c0019466:	88 c8                	mov    al,cl
c0019468:	e6 22                	out    0x22,al
c001946a:	e4 23                	in     al,0x23
c001946c:	88 c2                	mov    dl,al
c001946e:	88 c8                	mov    al,cl
c0019470:	e6 22                	out    0x22,al
c0019472:	88 d0                	mov    al,dl
c0019474:	83 c8 10             	or     eax,0x10
c0019477:	e6 23                	out    0x23,al
c0019479:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019480:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019483:	89 d0                	mov    eax,edx
c0019485:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c001948b:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c001948f:	40                   	inc    eax
c0019490:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019496:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001949b:	e9 a1 00 00 00       	jmp    c0019541 <CPU::detectFeatures()+0x95b>
c00194a0:	83 f8 06             	cmp    eax,0x6
c00194a3:	0f 84 e1 fe ff ff    	je     c001938a <CPU::detectFeatures()+0x7a4>
c00194a9:	83 f8 04             	cmp    eax,0x4
c00194ac:	0f 84 e9 fe ff ff    	je     c001939b <CPU::detectFeatures()+0x7b5>
c00194b2:	83 f8 03             	cmp    eax,0x3
c00194b5:	0f 85 0e 01 00 00    	jne    c00195c9 <CPU::detectFeatures()+0x9e3>
c00194bb:	52                   	push   edx
c00194bc:	52                   	push   edx
c00194bd:	68 d7 bb 02 c0       	push   0xc002bbd7
c00194c2:	eb 77                	jmp    c001953b <CPU::detectFeatures()+0x955>
c00194c4:	83 f8 07             	cmp    eax,0x7
c00194c7:	75 09                	jne    c00194d2 <CPU::detectFeatures()+0x8ec>
c00194c9:	50                   	push   eax
c00194ca:	50                   	push   eax
c00194cb:	68 e1 bb 02 c0       	push   0xc002bbe1
c00194d0:	eb 69                	jmp    c001953b <CPU::detectFeatures()+0x955>
c00194d2:	83 f8 0a             	cmp    eax,0xa
c00194d5:	75 09                	jne    c00194e0 <CPU::detectFeatures()+0x8fa>
c00194d7:	50                   	push   eax
c00194d8:	50                   	push   eax
c00194d9:	68 ec bb 02 c0       	push   0xc002bbec
c00194de:	eb 5b                	jmp    c001953b <CPU::detectFeatures()+0x955>
c00194e0:	83 f8 0b             	cmp    eax,0xb
c00194e3:	75 09                	jne    c00194ee <CPU::detectFeatures()+0x908>
c00194e5:	50                   	push   eax
c00194e6:	50                   	push   eax
c00194e7:	68 f4 bb 02 c0       	push   0xc002bbf4
c00194ec:	eb 4d                	jmp    c001953b <CPU::detectFeatures()+0x955>
c00194ee:	83 f8 08             	cmp    eax,0x8
c00194f1:	75 09                	jne    c00194fc <CPU::detectFeatures()+0x916>
c00194f3:	50                   	push   eax
c00194f4:	50                   	push   eax
c00194f5:	68 fd bb 02 c0       	push   0xc002bbfd
c00194fa:	eb 3f                	jmp    c001953b <CPU::detectFeatures()+0x955>
c00194fc:	83 f8 09             	cmp    eax,0x9
c00194ff:	75 09                	jne    c001950a <CPU::detectFeatures()+0x924>
c0019501:	50                   	push   eax
c0019502:	50                   	push   eax
c0019503:	68 05 bc 02 c0       	push   0xc002bc05
c0019508:	eb 31                	jmp    c001953b <CPU::detectFeatures()+0x955>
c001950a:	83 f8 05             	cmp    eax,0x5
c001950d:	75 09                	jne    c0019518 <CPU::detectFeatures()+0x932>
c001950f:	50                   	push   eax
c0019510:	50                   	push   eax
c0019511:	68 0d bc 02 c0       	push   0xc002bc0d
c0019516:	eb 23                	jmp    c001953b <CPU::detectFeatures()+0x955>
c0019518:	83 f8 0c             	cmp    eax,0xc
c001951b:	75 09                	jne    c0019526 <CPU::detectFeatures()+0x940>
c001951d:	55                   	push   ebp
c001951e:	55                   	push   ebp
c001951f:	68 1b bc 02 c0       	push   0xc002bc1b
c0019524:	eb 15                	jmp    c001953b <CPU::detectFeatures()+0x955>
c0019526:	83 f8 0d             	cmp    eax,0xd
c0019529:	75 09                	jne    c0019534 <CPU::detectFeatures()+0x94e>
c001952b:	57                   	push   edi
c001952c:	57                   	push   edi
c001952d:	68 26 bc 02 c0       	push   0xc002bc26
c0019532:	eb 07                	jmp    c001953b <CPU::detectFeatures()+0x955>
c0019534:	56                   	push   esi
c0019535:	56                   	push   esi
c0019536:	68 3a bc 02 c0       	push   0xc002bc3a
c001953b:	53                   	push   ebx
c001953c:	e8 5f a9 ff ff       	call   c0013ea0 <Device::setName(char const*)>
c0019541:	83 c4 10             	add    esp,0x10
c0019544:	e9 80 00 00 00       	jmp    c00195c9 <CPU::detectFeatures()+0x9e3>
c0019549:	51                   	push   ecx
c001954a:	51                   	push   ecx
c001954b:	68 86 ba 02 c0       	push   0xc002ba86
c0019550:	55                   	push   ebp
c0019551:	e8 b6 72 fe ff       	call   c000080c <strcpy>
c0019556:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019560:	e8 49 6d fe ff       	call   c00002ae <is486>
c0019565:	83 c4 10             	add    esp,0x10
c0019568:	85 c0                	test   eax,eax
c001956a:	74 2b                	je     c0019597 <CPU::detectFeatures()+0x9b1>
c001956c:	52                   	push   edx
c001956d:	52                   	push   edx
c001956e:	68 46 bc 02 c0       	push   0xc002bc46
c0019573:	53                   	push   ebx
c0019574:	e8 27 a9 ff ff       	call   c0013ea0 <Device::setName(char const*)>
c0019579:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019580:	0f 20 c0             	mov    eax,cr0
c0019583:	83 e0 14             	and    eax,0x14
c0019586:	83 c4 10             	add    esp,0x10
c0019589:	83 f8 04             	cmp    eax,0x4
c001958c:	75 1f                	jne    c00195ad <CPU::detectFeatures()+0x9c7>
c001958e:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019595:	eb 32                	jmp    c00195c9 <CPU::detectFeatures()+0x9e3>
c0019597:	50                   	push   eax
c0019598:	50                   	push   eax
c0019599:	68 51 bc 02 c0       	push   0xc002bc51
c001959e:	53                   	push   ebx
c001959f:	e8 fc a8 ff ff       	call   c0013ea0 <Device::setName(char const*)>
c00195a4:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c00195ab:	eb d3                	jmp    c0019580 <CPU::detectFeatures()+0x99a>
c00195ad:	e8 d7 6c fe ff       	call   c0000289 <hasLegacyFPU>
c00195b2:	83 e0 01             	and    eax,0x1
c00195b5:	8d 14 00             	lea    edx,[eax+eax*1]
c00195b8:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00195be:	83 e0 fd             	and    eax,0xfffffffd
c00195c1:	09 d0                	or     eax,edx
c00195c3:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00195c9:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c00195d0:	83 c4 4c             	add    esp,0x4c
c00195d3:	5b                   	pop    ebx
c00195d4:	5e                   	pop    esi
c00195d5:	5f                   	pop    edi
c00195d6:	5d                   	pop    ebp
c00195d7:	c3                   	ret    

c00195d8 <CPU::setupSMEP()>:
c00195d8:	0f 20 e0             	mov    eax,cr4
c00195db:	0d 00 00 10 00       	or     eax,0x100000
c00195e0:	0f 22 e0             	mov    cr4,eax
c00195e3:	c3                   	ret    

c00195e4 <CPU::setupUMIP()>:
c00195e4:	0f 20 e0             	mov    eax,cr4
c00195e7:	80 cc 08             	or     ah,0x8
c00195ea:	0f 22 e0             	mov    cr4,eax
c00195ed:	c3                   	ret    

c00195ee <CPU::setupTSC()>:
c00195ee:	0f 20 e0             	mov    eax,cr4
c00195f1:	83 c8 04             	or     eax,0x4
c00195f4:	0f 22 e0             	mov    cr4,eax
c00195f7:	c3                   	ret    

c00195f8 <CPU::setupLargePages()>:
c00195f8:	0f 20 e0             	mov    eax,cr4
c00195fb:	83 c8 10             	or     eax,0x10
c00195fe:	0f 22 e0             	mov    cr4,eax
c0019601:	c3                   	ret    

c0019602 <CPU::setupPAT()>:
c0019602:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c0019607:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c001960e:	74 2c                	je     c001963c <CPU::setupPAT()+0x3a>
c0019610:	53                   	push   ebx
c0019611:	83 ec 10             	sub    esp,0x10
c0019614:	68 77 02 00 00       	push   0x277
c0019619:	50                   	push   eax
c001961a:	e8 63 57 ff ff       	call   c000ed82 <Computer::rdmsr(unsigned int)>
c001961f:	83 e2 f8             	and    edx,0xfffffff8
c0019622:	83 ca 01             	or     edx,0x1
c0019625:	52                   	push   edx
c0019626:	50                   	push   eax
c0019627:	68 77 02 00 00       	push   0x277
c001962c:	ff 35 28 e2 02 c0    	push   DWORD PTR ds:0xc002e228
c0019632:	e8 77 57 ff ff       	call   c000edae <Computer::wrmsr(unsigned int, unsigned long long)>
c0019637:	83 c4 28             	add    esp,0x28
c001963a:	5b                   	pop    ebx
c001963b:	c3                   	ret    
c001963c:	c3                   	ret    
c001963d:	90                   	nop

c001963e <CPU::setupMTRR()>:
c001963e:	c3                   	ret    
c001963f:	90                   	nop

c0019640 <CPU::setupGlobalPages()>:
c0019640:	0f 20 e0             	mov    eax,cr4
c0019643:	0c 80                	or     al,0x80
c0019645:	0f 22 e0             	mov    cr4,eax
c0019648:	c3                   	ret    
c0019649:	90                   	nop

c001964a <CPU::allowUsermodeDataAccess()>:
c001964a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001964e:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019655:	74 03                	je     c001965a <CPU::allowUsermodeDataAccess()+0x10>
c0019657:	0f 01 cb             	stac   
c001965a:	c3                   	ret    
c001965b:	90                   	nop

c001965c <CPU::prohibitUsermodeDataAccess()>:
c001965c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019660:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019667:	74 03                	je     c001966c <CPU::prohibitUsermodeDataAccess()+0x10>
c0019669:	0f 01 ca             	clac   
c001966c:	c3                   	ret    
c001966d:	90                   	nop

c001966e <CPU::setupSMAP()>:
c001966e:	0f 20 e0             	mov    eax,cr4
c0019671:	0d 00 00 20 00       	or     eax,0x200000
c0019676:	0f 22 e0             	mov    cr4,eax
c0019679:	eb e1                	jmp    c001965c <CPU::prohibitUsermodeDataAccess()>
c001967b:	90                   	nop

c001967c <CPU::setupFeatures()>:
c001967c:	83 ec 0c             	sub    esp,0xc
c001967f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019683:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c001968a:	74 07                	je     c0019693 <CPU::setupFeatures()+0x17>
c001968c:	52                   	push   edx
c001968d:	e8 46 ff ff ff       	call   c00195d8 <CPU::setupSMEP()>
c0019692:	58                   	pop    eax
c0019693:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c001969a:	74 07                	je     c00196a3 <CPU::setupFeatures()+0x27>
c001969c:	52                   	push   edx
c001969d:	e8 cc ff ff ff       	call   c001966e <CPU::setupSMAP()>
c00196a2:	58                   	pop    eax
c00196a3:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c00196aa:	74 07                	je     c00196b3 <CPU::setupFeatures()+0x37>
c00196ac:	52                   	push   edx
c00196ad:	e8 32 ff ff ff       	call   c00195e4 <CPU::setupUMIP()>
c00196b2:	58                   	pop    eax
c00196b3:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c00196ba:	74 07                	je     c00196c3 <CPU::setupFeatures()+0x47>
c00196bc:	52                   	push   edx
c00196bd:	e8 2c ff ff ff       	call   c00195ee <CPU::setupTSC()>
c00196c2:	58                   	pop    eax
c00196c3:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c00196ca:	74 07                	je     c00196d3 <CPU::setupFeatures()+0x57>
c00196cc:	52                   	push   edx
c00196cd:	e8 26 ff ff ff       	call   c00195f8 <CPU::setupLargePages()>
c00196d2:	59                   	pop    ecx
c00196d3:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c00196da:	74 07                	je     c00196e3 <CPU::setupFeatures()+0x67>
c00196dc:	52                   	push   edx
c00196dd:	e8 5e ff ff ff       	call   c0019640 <CPU::setupGlobalPages()>
c00196e2:	58                   	pop    eax
c00196e3:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c00196ea:	74 0c                	je     c00196f8 <CPU::setupFeatures()+0x7c>
c00196ec:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00196f0:	83 c4 0c             	add    esp,0xc
c00196f3:	e9 0a ff ff ff       	jmp    c0019602 <CPU::setupPAT()>
c00196f8:	83 c4 0c             	add    esp,0xc
c00196fb:	c3                   	ret    

c00196fc <CPU::open(int, int, void*)>:
c00196fc:	57                   	push   edi
c00196fd:	56                   	push   esi
c00196fe:	53                   	push   ebx
c00196ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019703:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019707:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c001970d:	83 ec 0c             	sub    esp,0xc
c0019710:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019716:	68 5c bc 02 c0       	push   0xc002bc5c
c001971b:	e8 53 61 ff ff       	call   c000f873 <Krnl::setBootMessage(char const*)>
c0019720:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019726:	89 04 24             	mov    DWORD PTR [esp],eax
c0019729:	e8 80 59 ff ff       	call   c000f0ae <GDT::setup()>
c001972e:	c7 04 24 6e bc 02 c0 	mov    DWORD PTR [esp],0xc002bc6e
c0019735:	e8 39 61 ff ff       	call   c000f873 <Krnl::setBootMessage(char const*)>
c001973a:	83 c4 0c             	add    esp,0xc
c001973d:	6a 00                	push   0x0
c001973f:	68 ef be ad de       	push   0xdeadbeef
c0019744:	57                   	push   edi
c0019745:	e8 dc 76 ff ff       	call   c0010e26 <TSS::setup(unsigned long, unsigned long)>
c001974a:	c7 04 24 80 bc 02 c0 	mov    DWORD PTR [esp],0xc002bc80
c0019751:	e8 1d 61 ff ff       	call   c000f873 <Krnl::setBootMessage(char const*)>
c0019756:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019759:	e8 a8 76 ff ff       	call   c0010e06 <TSS::flush()>
c001975e:	c7 04 24 94 bc 02 c0 	mov    DWORD PTR [esp],0xc002bc94
c0019765:	e8 09 61 ff ff       	call   c000f873 <Krnl::setBootMessage(char const*)>
c001976a:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019770:	89 04 24             	mov    DWORD PTR [esp],eax
c0019773:	e8 9a 5b ff ff       	call   c000f312 <IDT::setup()>
c0019778:	c7 04 24 a6 bc 02 c0 	mov    DWORD PTR [esp],0xc002bca6
c001977f:	e8 ef 60 ff ff       	call   c000f873 <Krnl::setBootMessage(char const*)>
c0019784:	b8 00 04 00 00       	mov    eax,0x400
c0019789:	0f 23 f8             	mov    db7,eax
c001978c:	c7 04 24 c4 bc 02 c0 	mov    DWORD PTR [esp],0xc002bcc4
c0019793:	e8 db 60 ff ff       	call   c000f873 <Krnl::setBootMessage(char const*)>
c0019798:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00197a2:	e8 6e 64 ff ff       	call   c000fc15 <Phys::allocatePage()>
c00197a7:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00197ad:	89 30                	mov    DWORD PTR [eax],esi
c00197af:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00197b5:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00197b8:	c7 04 24 e6 bc 02 c0 	mov    DWORD PTR [esp],0xc002bce6
c00197bf:	e8 af 60 ff ff       	call   c000f873 <Krnl::setBootMessage(char const*)>
c00197c4:	58                   	pop    eax
c00197c5:	5a                   	pop    edx
c00197c6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00197cc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00197d0:	e8 4b 86 ff ff       	call   c0011e20 <VAS::setCPUSpecific(unsigned long)>
c00197d5:	c7 04 24 0e bd 02 c0 	mov    DWORD PTR [esp],0xc002bd0e
c00197dc:	e8 92 60 ff ff       	call   c000f873 <Krnl::setBootMessage(char const*)>
c00197e1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00197e4:	e8 fd f3 ff ff       	call   c0018be6 <CPU::detectFeatures()>
c00197e9:	c7 04 24 31 bd 02 c0 	mov    DWORD PTR [esp],0xc002bd31
c00197f0:	e8 7e 60 ff ff       	call   c000f873 <Krnl::setBootMessage(char const*)>
c00197f5:	e8 00 bb ff ff       	call   c00152fa <setupInterruptController()>
c00197fa:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019800:	c7 04 24 55 bd 02 c0 	mov    DWORD PTR [esp],0xc002bd55
c0019807:	e8 67 60 ff ff       	call   c000f873 <Krnl::setBootMessage(char const*)>
c001980c:	a1 40 e2 02 c0       	mov    eax,ds:0xc002e240
c0019811:	83 e0 10             	and    eax,0x10
c0019814:	83 f8 01             	cmp    eax,0x1
c0019817:	19 c0                	sbb    eax,eax
c0019819:	83 e0 46             	and    eax,0x46
c001981c:	83 c0 1e             	add    eax,0x1e
c001981f:	89 04 24             	mov    DWORD PTR [esp],eax
c0019822:	e8 c0 d0 ff ff       	call   c00168e7 <setupTimer(int)>
c0019827:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c001982d:	c7 04 24 70 bd 02 c0 	mov    DWORD PTR [esp],0xc002bd70
c0019834:	e8 3a 60 ff ff       	call   c000f873 <Krnl::setBootMessage(char const*)>
c0019839:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001983c:	e8 3b fe ff ff       	call   c001967c <CPU::setupFeatures()>
c0019841:	c7 04 24 8b bd 02 c0 	mov    DWORD PTR [esp],0xc002bd8b
c0019848:	e8 26 60 ff ff       	call   c000f873 <Krnl::setBootMessage(char const*)>
c001984d:	83 c4 10             	add    esp,0x10
c0019850:	31 c0                	xor    eax,eax
c0019852:	5b                   	pop    ebx
c0019853:	5e                   	pop    esi
c0019854:	5f                   	pop    edi
c0019855:	c3                   	ret    

c0019856 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019856:	57                   	push   edi
c0019857:	56                   	push   esi
c0019858:	53                   	push   ebx
c0019859:	51                   	push   ecx
c001985a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001985e:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019861:	0f 02 c0             	lar    eax,ax
c0019864:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019867:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001986b:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c001986e:	88 ca                	mov    dl,cl
c0019870:	c0 ea 06             	shr    dl,0x6
c0019873:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019877:	89 ca                	mov    edx,ecx
c0019879:	66 c1 ea 03          	shr    dx,0x3
c001987d:	83 e2 07             	and    edx,0x7
c0019880:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019885:	88 17                	mov    BYTE PTR [edi],dl
c0019887:	0f 84 a6 01 00 00    	je     c0019a33 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c001988d:	83 e1 07             	and    ecx,0x7
c0019890:	80 f9 04             	cmp    cl,0x4
c0019893:	0f 84 98 00 00 00    	je     c0019931 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019899:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001989e:	0f 95 c0             	setne  al
c00198a1:	80 f9 05             	cmp    cl,0x5
c00198a4:	0f 95 c2             	setne  dl
c00198a7:	08 c2                	or     dl,al
c00198a9:	74 79                	je     c0019924 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c00198ab:	84 c9                	test   cl,cl
c00198ad:	75 05                	jne    c00198b4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c00198af:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c00198b2:	eb 3c                	jmp    c00198f0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00198b4:	80 f9 01             	cmp    cl,0x1
c00198b7:	75 05                	jne    c00198be <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c00198b9:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00198bc:	eb 32                	jmp    c00198f0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00198be:	80 f9 02             	cmp    cl,0x2
c00198c1:	75 05                	jne    c00198c8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c00198c3:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00198c6:	eb 28                	jmp    c00198f0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00198c8:	31 c0                	xor    eax,eax
c00198ca:	80 f9 03             	cmp    cl,0x3
c00198cd:	75 05                	jne    c00198d4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c00198cf:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00198d2:	eb 1c                	jmp    c00198f0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00198d4:	80 f9 05             	cmp    cl,0x5
c00198d7:	75 05                	jne    c00198de <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c00198d9:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00198dc:	eb 12                	jmp    c00198f0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00198de:	80 f9 06             	cmp    cl,0x6
c00198e1:	75 05                	jne    c00198e8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c00198e3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00198e6:	eb 08                	jmp    c00198f0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00198e8:	80 f9 07             	cmp    cl,0x7
c00198eb:	75 03                	jne    c00198f0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00198ed:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00198f0:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00198f5:	75 10                	jne    c0019907 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c00198f7:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c00198fb:	b9 03 00 00 00       	mov    ecx,0x3
c0019900:	01 d0                	add    eax,edx
c0019902:	e9 37 01 00 00       	jmp    c0019a3e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019907:	b9 02 00 00 00       	mov    ecx,0x2
c001990c:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019911:	0f 85 27 01 00 00    	jne    c0019a3e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019917:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c001991a:	b9 06 00 00 00       	mov    ecx,0x6
c001991f:	e9 1a 01 00 00       	jmp    c0019a3e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019924:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019927:	b9 06 00 00 00       	mov    ecx,0x6
c001992c:	e9 0f 01 00 00       	jmp    c0019a40 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019931:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019934:	88 ca                	mov    dl,cl
c0019936:	c0 ea 06             	shr    dl,0x6
c0019939:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c001993d:	89 ca                	mov    edx,ecx
c001993f:	66 c1 ea 03          	shr    dx,0x3
c0019943:	83 e2 07             	and    edx,0x7
c0019946:	80 e1 07             	and    cl,0x7
c0019949:	75 05                	jne    c0019950 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c001994b:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c001994e:	eb 4c                	jmp    c001999c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019950:	80 f9 01             	cmp    cl,0x1
c0019953:	75 05                	jne    c001995a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019955:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019958:	eb 42                	jmp    c001999c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001995a:	80 f9 02             	cmp    cl,0x2
c001995d:	75 05                	jne    c0019964 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c001995f:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019962:	eb 38                	jmp    c001999c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019964:	80 f9 03             	cmp    cl,0x3
c0019967:	75 05                	jne    c001996e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019969:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001996c:	eb 2e                	jmp    c001999c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001996e:	80 f9 04             	cmp    cl,0x4
c0019971:	75 12                	jne    c0019985 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019973:	f6 c4 60             	test   ah,0x60
c0019976:	75 08                	jne    c0019980 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019978:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c001997b:	8d 78 14             	lea    edi,[eax+0x14]
c001997e:	eb 1c                	jmp    c001999c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019980:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019983:	eb 17                	jmp    c001999c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019985:	80 f9 05             	cmp    cl,0x5
c0019988:	75 05                	jne    c001998f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c001998a:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c001998d:	eb 0d                	jmp    c001999c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001998f:	80 f9 06             	cmp    cl,0x6
c0019992:	75 05                	jne    c0019999 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019994:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019997:	eb 03                	jmp    c001999c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019999:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001999c:	84 d2                	test   dl,dl
c001999e:	75 05                	jne    c00199a5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c00199a0:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c00199a3:	eb 3c                	jmp    c00199e1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00199a5:	80 fa 01             	cmp    dl,0x1
c00199a8:	75 05                	jne    c00199af <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c00199aa:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00199ad:	eb 32                	jmp    c00199e1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00199af:	80 fa 02             	cmp    dl,0x2
c00199b2:	75 05                	jne    c00199b9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c00199b4:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00199b7:	eb 28                	jmp    c00199e1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00199b9:	80 fa 03             	cmp    dl,0x3
c00199bc:	75 05                	jne    c00199c3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c00199be:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00199c1:	eb 1e                	jmp    c00199e1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00199c3:	31 c0                	xor    eax,eax
c00199c5:	80 fa 04             	cmp    dl,0x4
c00199c8:	74 17                	je     c00199e1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00199ca:	80 fa 05             	cmp    dl,0x5
c00199cd:	75 05                	jne    c00199d4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c00199cf:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00199d2:	eb 0d                	jmp    c00199e1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00199d4:	80 fa 06             	cmp    dl,0x6
c00199d7:	75 05                	jne    c00199de <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c00199d9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00199dc:	eb 03                	jmp    c00199e1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00199de:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00199e1:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00199e6:	0f 94 c2             	sete   dl
c00199e9:	80 f9 05             	cmp    cl,0x5
c00199ec:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c00199f0:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c00199f5:	d3 e0                	shl    eax,cl
c00199f7:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c00199fb:	74 0a                	je     c0019a07 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c00199fd:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019a00:	b9 07 00 00 00       	mov    ecx,0x7
c0019a05:	eb 37                	jmp    c0019a3e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019a07:	01 f8                	add    eax,edi
c0019a09:	b9 03 00 00 00       	mov    ecx,0x3
c0019a0e:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019a13:	74 2b                	je     c0019a40 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019a15:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019a1a:	75 0d                	jne    c0019a29 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019a1c:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019a20:	01 c8                	add    eax,ecx
c0019a22:	b9 04 00 00 00       	mov    ecx,0x4
c0019a27:	eb 17                	jmp    c0019a40 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019a29:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019a2c:	b9 07 00 00 00       	mov    ecx,0x7
c0019a31:	eb 0d                	jmp    c0019a40 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019a33:	b9 02 00 00 00       	mov    ecx,0x2
c0019a38:	b2 01                	mov    dl,0x1
c0019a3a:	31 c0                	xor    eax,eax
c0019a3c:	eb 02                	jmp    c0019a40 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019a3e:	31 d2                	xor    edx,edx
c0019a40:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019a44:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019a46:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019a4a:	88 11                	mov    BYTE PTR [ecx],dl
c0019a4c:	5a                   	pop    edx
c0019a4d:	5b                   	pop    ebx
c0019a4e:	5e                   	pop    esi
c0019a4f:	5f                   	pop    edi
c0019a50:	c3                   	ret    

c0019a51 <Krnl::smpEntry()>:
c0019a51:	eb fe                	jmp    c0019a51 <Krnl::smpEntry()>

c0019a53 <Krnl::startCPU(int)>:
c0019a53:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c0019a58:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019a5f:	0f 84 36 01 00 00    	je     c0019b9b <Krnl::startCPU(int)+0x148>
c0019a65:	53                   	push   ebx
c0019a66:	83 ec 10             	sub    esp,0x10
c0019a69:	fa                   	cli    
c0019a6a:	ff 05 28 f7 02 c0    	inc    DWORD PTR ds:0xc002f728
c0019a70:	6a 1b                	push   0x1b
c0019a72:	ff 35 28 e2 02 c0    	push   DWORD PTR ds:0xc002e228
c0019a78:	e8 05 53 ff ff       	call   c000ed82 <Computer::rdmsr(unsigned int)>
c0019a7d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019a82:	89 c3                	mov    ebx,eax
c0019a84:	58                   	pop    eax
c0019a85:	5a                   	pop    edx
c0019a86:	53                   	push   ebx
c0019a87:	68 d4 bd 02 c0       	push   0xc002bdd4
c0019a8c:	e8 e0 8d ff ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c0019a91:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019a9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a9f:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019aa9:	c1 e0 18             	shl    eax,0x18
c0019aac:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019ab2:	83 c4 10             	add    esp,0x10
c0019ab5:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019abb:	09 c2                	or     edx,eax
c0019abd:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019ac3:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019ac9:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019acf:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019ad5:	80 cd c5             	or     ch,0xc5
c0019ad8:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019ade:	f3 90                	pause  
c0019ae0:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019ae2:	0f ba e1 0c          	bt     ecx,0xc
c0019ae6:	72 f6                	jb     c0019ade <Krnl::startCPU(int)+0x8b>
c0019ae8:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019aee:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019af4:	09 c1                	or     ecx,eax
c0019af6:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019afc:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019b02:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019b08:	80 cd 85             	or     ch,0x85
c0019b0b:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019b11:	f3 90                	pause  
c0019b13:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019b15:	0f ba e1 0c          	bt     ecx,0xc
c0019b19:	72 f6                	jb     c0019b11 <Krnl::startCPU(int)+0xbe>
c0019b1b:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019b25:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019b2b:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019b31:	09 c1                	or     ecx,eax
c0019b33:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019b39:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019b3f:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019b45:	81 c9 02 06 00 00    	or     ecx,0x602
c0019b4b:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019b51:	f3 90                	pause  
c0019b53:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019b55:	0f ba e1 0c          	bt     ecx,0xc
c0019b59:	72 f6                	jb     c0019b51 <Krnl::startCPU(int)+0xfe>
c0019b5b:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019b65:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019b6b:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019b71:	09 c8                	or     eax,ecx
c0019b73:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0019b79:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0019b7f:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0019b84:	0d 02 06 00 00       	or     eax,0x602
c0019b89:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0019b8f:	f3 90                	pause  
c0019b91:	8b 02                	mov    eax,DWORD PTR [edx]
c0019b93:	0f ba e0 0c          	bt     eax,0xc
c0019b97:	72 f6                	jb     c0019b8f <Krnl::startCPU(int)+0x13c>
c0019b99:	eb fe                	jmp    c0019b99 <Krnl::startCPU(int)+0x146>
c0019b9b:	c3                   	ret    

c0019b9c <Krnl::startCPUs()>:
c0019b9c:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c0019ba1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0019ba7:	88 c2                	mov    dl,al
c0019ba9:	83 e2 0a             	and    edx,0xa
c0019bac:	80 fa 0a             	cmp    dl,0xa
c0019baf:	75 09                	jne    c0019bba <Krnl::startCPUs()+0x1e>
c0019bb1:	a8 01                	test   al,0x1
c0019bb3:	74 05                	je     c0019bba <Krnl::startCPUs()+0x1e>
c0019bb5:	e9 e1 65 fe ff       	jmp    c000019b <prepareTramp>
c0019bba:	c3                   	ret    
c0019bbb:	90                   	nop

c0019bbc <EnvVarContainer::getEnv(char const*)>:
c0019bbc:	57                   	push   edi
c0019bbd:	56                   	push   esi
c0019bbe:	53                   	push   ebx
c0019bbf:	31 db                	xor    ebx,ebx
c0019bc1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019bc5:	39 1e                	cmp    DWORD PTR [esi],ebx
c0019bc7:	7e 2b                	jle    c0019bf4 <EnvVarContainer::getEnv(char const*)+0x38>
c0019bc9:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0019bd0:	50                   	push   eax
c0019bd1:	50                   	push   eax
c0019bd2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019bd5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0019bd8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019bdc:	e8 b7 6c fe ff       	call   c0000898 <strcmp>
c0019be1:	83 c4 10             	add    esp,0x10
c0019be4:	85 c0                	test   eax,eax
c0019be6:	75 09                	jne    c0019bf1 <EnvVarContainer::getEnv(char const*)+0x35>
c0019be8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019beb:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0019bef:	eb 05                	jmp    c0019bf6 <EnvVarContainer::getEnv(char const*)+0x3a>
c0019bf1:	43                   	inc    ebx
c0019bf2:	eb d1                	jmp    c0019bc5 <EnvVarContainer::getEnv(char const*)+0x9>
c0019bf4:	31 c0                	xor    eax,eax
c0019bf6:	5b                   	pop    ebx
c0019bf7:	5e                   	pop    esi
c0019bf8:	5f                   	pop    edi
c0019bf9:	c3                   	ret    

c0019bfa <EnvVarContainer::setEnv(char const*, char const*)>:
c0019bfa:	55                   	push   ebp
c0019bfb:	57                   	push   edi
c0019bfc:	56                   	push   esi
c0019bfd:	53                   	push   ebx
c0019bfe:	83 ec 28             	sub    esp,0x28
c0019c01:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0019c05:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0019c09:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0019c0d:	56                   	push   esi
c0019c0e:	e8 59 6b fe ff       	call   c000076c <strlen>
c0019c13:	40                   	inc    eax
c0019c14:	89 04 24             	mov    DWORD PTR [esp],eax
c0019c17:	e8 fd 5b ff ff       	call   c000f819 <malloc>
c0019c1c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c1f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019c23:	e8 44 6b fe ff       	call   c000076c <strlen>
c0019c28:	40                   	inc    eax
c0019c29:	89 04 24             	mov    DWORD PTR [esp],eax
c0019c2c:	e8 e8 5b ff ff       	call   c000f819 <malloc>
c0019c31:	89 34 24             	mov    DWORD PTR [esp],esi
c0019c34:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019c38:	e8 2f 6b fe ff       	call   c000076c <strlen>
c0019c3d:	83 c4 0c             	add    esp,0xc
c0019c40:	40                   	inc    eax
c0019c41:	50                   	push   eax
c0019c42:	6a 00                	push   0x0
c0019c44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019c48:	e8 03 6b fe ff       	call   c0000750 <memset>
c0019c4d:	89 34 24             	mov    DWORD PTR [esp],esi
c0019c50:	e8 17 6b fe ff       	call   c000076c <strlen>
c0019c55:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0019c59:	8d 48 01             	lea    ecx,[eax+0x1]
c0019c5c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019c5e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c61:	89 de                	mov    esi,ebx
c0019c63:	e8 04 6b fe ff       	call   c000076c <strlen>
c0019c68:	83 c4 0c             	add    esp,0xc
c0019c6b:	40                   	inc    eax
c0019c6c:	50                   	push   eax
c0019c6d:	6a 00                	push   0x0
c0019c6f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019c73:	e8 d8 6a fe ff       	call   c0000750 <memset>
c0019c78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c7b:	e8 ec 6a fe ff       	call   c000076c <strlen>
c0019c80:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019c84:	8d 48 01             	lea    ecx,[eax+0x1]
c0019c87:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019c89:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019c8c:	40                   	inc    eax
c0019c8d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019c90:	c1 e0 03             	shl    eax,0x3
c0019c93:	5a                   	pop    edx
c0019c94:	59                   	pop    ecx
c0019c95:	50                   	push   eax
c0019c96:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019c99:	e8 67 5b ff ff       	call   c000f805 <realloc>
c0019c9e:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019ca2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019ca5:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0019ca8:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0019cac:	b9 08 00 00 00       	mov    ecx,0x8
c0019cb1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019cb3:	83 c4 2c             	add    esp,0x2c
c0019cb6:	5b                   	pop    ebx
c0019cb7:	5e                   	pop    esi
c0019cb8:	5f                   	pop    edi
c0019cb9:	5d                   	pop    ebp
c0019cba:	c3                   	ret    
c0019cbb:	90                   	nop

c0019cbc <EnvVarContainer::deleteEnv(char const*)>:
c0019cbc:	c3                   	ret    
c0019cbd:	90                   	nop

c0019cbe <EnvVarContainer::loadFrom(char const*, char const*)>:
c0019cbe:	55                   	push   ebp
c0019cbf:	57                   	push   edi
c0019cc0:	56                   	push   esi
c0019cc1:	53                   	push   ebx
c0019cc2:	81 ec 38 01 00 00    	sub    esp,0x138
c0019cc8:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0019ccf:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0019cd6:	68 14 01 00 00       	push   0x114
c0019cdb:	e8 39 5b ff ff       	call   c000f819 <malloc>
c0019ce0:	83 c4 0c             	add    esp,0xc
c0019ce3:	89 c3                	mov    ebx,eax
c0019ce5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0019ce8:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0019cef:	50                   	push   eax
c0019cf0:	e8 db 90 ff ff       	call   c0012dd0 <File::File(char const*, Process*)>
c0019cf5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019cf8:	e8 a5 93 ff ff       	call   c00130a2 <File::exists()>
c0019cfd:	83 c4 10             	add    esp,0x10
c0019d00:	84 c0                	test   al,al
c0019d02:	75 31                	jne    c0019d35 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0019d04:	50                   	push   eax
c0019d05:	50                   	push   eax
c0019d06:	6a 12                	push   0x12
c0019d08:	53                   	push   ebx
c0019d09:	e8 26 91 ff ff       	call   c0012e34 <File::open(FileOpenMode)>
c0019d0e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019d10:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0019d13:	89 34 24             	mov    DWORD PTR [esp],esi
c0019d16:	e8 51 6a fe ff       	call   c000076c <strlen>
c0019d1b:	5a                   	pop    edx
c0019d1c:	31 d2                	xor    edx,edx
c0019d1e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019d22:	51                   	push   ecx
c0019d23:	56                   	push   esi
c0019d24:	52                   	push   edx
c0019d25:	50                   	push   eax
c0019d26:	53                   	push   ebx
c0019d27:	ff d7                	call   edi
c0019d29:	83 c4 14             	add    esp,0x14
c0019d2c:	53                   	push   ebx
c0019d2d:	e8 60 91 ff ff       	call   c0012e92 <File::close()>
c0019d32:	83 c4 10             	add    esp,0x10
c0019d35:	56                   	push   esi
c0019d36:	31 f6                	xor    esi,esi
c0019d38:	68 00 01 00 00       	push   0x100
c0019d3d:	6a 00                	push   0x0
c0019d3f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019d43:	50                   	push   eax
c0019d44:	e8 07 6a fe ff       	call   c0000750 <memset>
c0019d49:	5f                   	pop    edi
c0019d4a:	58                   	pop    eax
c0019d4b:	6a 01                	push   0x1
c0019d4d:	53                   	push   ebx
c0019d4e:	e8 e1 90 ff ff       	call   c0012e34 <File::open(FileOpenMode)>
c0019d53:	83 c4 10             	add    esp,0x10
c0019d56:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019d5e:	83 ec 0c             	sub    esp,0xc
c0019d61:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019d63:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019d67:	51                   	push   ecx
c0019d68:	8d 54 24 23          	lea    edx,[esp+0x23]
c0019d6c:	52                   	push   edx
c0019d6d:	6a 00                	push   0x0
c0019d6f:	6a 01                	push   0x1
c0019d71:	53                   	push   ebx
c0019d72:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019d75:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0019d79:	83 c4 20             	add    esp,0x20
c0019d7c:	3c 0d                	cmp    al,0xd
c0019d7e:	0f 84 09 01 00 00    	je     c0019e8d <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019d84:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019d89:	0f 84 ef 00 00 00    	je     c0019e7e <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0019d8f:	3c 0a                	cmp    al,0xa
c0019d91:	74 13                	je     c0019da6 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0019d93:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019d98:	74 0c                	je     c0019da6 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0019d9a:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0019da0:	0f 8e d8 00 00 00    	jle    c0019e7e <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0019da6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019daa:	83 ec 0c             	sub    esp,0xc
c0019dad:	8d 78 01             	lea    edi,[eax+0x1]
c0019db0:	57                   	push   edi
c0019db1:	e8 63 5a ff ff       	call   c000f819 <malloc>
c0019db6:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0019dba:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019dbe:	8d 56 04             	lea    edx,[esi+0x4]
c0019dc1:	89 14 24             	mov    DWORD PTR [esp],edx
c0019dc4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019dc8:	e8 4c 5a ff ff       	call   c000f819 <malloc>
c0019dcd:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019dd1:	83 c4 0c             	add    esp,0xc
c0019dd4:	57                   	push   edi
c0019dd5:	6a 00                	push   0x0
c0019dd7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019ddb:	e8 70 69 fe ff       	call   c0000750 <memset>
c0019de0:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019de4:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0019de8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0019dec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019dee:	83 c4 0c             	add    esp,0xc
c0019df1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019df5:	52                   	push   edx
c0019df6:	6a 00                	push   0x0
c0019df8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019dfc:	e8 4f 69 fe ff       	call   c0000750 <memset>
c0019e01:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019e05:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0019e09:	89 34 24             	mov    DWORD PTR [esp],esi
c0019e0c:	e8 5b 69 fe ff       	call   c000076c <strlen>
c0019e11:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0019e15:	89 c1                	mov    ecx,eax
c0019e17:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019e19:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019e1c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0019e1f:	40                   	inc    eax
c0019e20:	83 c4 10             	add    esp,0x10
c0019e23:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019e26:	85 d2                	test   edx,edx
c0019e28:	75 0c                	jne    c0019e36 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0019e2a:	83 ec 0c             	sub    esp,0xc
c0019e2d:	6a 08                	push   0x8
c0019e2f:	e8 e5 59 ff ff       	call   c000f819 <malloc>
c0019e34:	eb 0c                	jmp    c0019e42 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0019e36:	c1 e0 03             	shl    eax,0x3
c0019e39:	51                   	push   ecx
c0019e3a:	51                   	push   ecx
c0019e3b:	50                   	push   eax
c0019e3c:	52                   	push   edx
c0019e3d:	e8 c3 59 ff ff       	call   c000f805 <realloc>
c0019e42:	83 c4 10             	add    esp,0x10
c0019e45:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0019e48:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019e4b:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0019e4e:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019e52:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0019e56:	b9 08 00 00 00       	mov    ecx,0x8
c0019e5b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019e5d:	31 f6                	xor    esi,esi
c0019e5f:	50                   	push   eax
c0019e60:	68 00 01 00 00       	push   0x100
c0019e65:	6a 00                	push   0x0
c0019e67:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019e6b:	50                   	push   eax
c0019e6c:	e8 df 68 fe ff       	call   c0000750 <memset>
c0019e71:	83 c4 10             	add    esp,0x10
c0019e74:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019e7c:	eb 0f                	jmp    c0019e8d <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019e7e:	3c 3d                	cmp    al,0x3d
c0019e80:	74 07                	je     c0019e89 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0019e82:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0019e86:	46                   	inc    esi
c0019e87:	eb 04                	jmp    c0019e8d <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019e89:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0019e8d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019e92:	0f 85 c6 fe ff ff    	jne    c0019d5e <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0019e98:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019e9e:	5b                   	pop    ebx
c0019e9f:	5e                   	pop    esi
c0019ea0:	5f                   	pop    edi
c0019ea1:	5d                   	pop    ebp
c0019ea2:	c3                   	ret    
c0019ea3:	90                   	nop

c0019ea4 <EnvVarContainer::__loadSystem()>:
c0019ea4:	83 ec 10             	sub    esp,0x10
c0019ea7:	68 60 d7 02 c0       	push   0xc002d760
c0019eac:	68 e5 bd 02 c0       	push   0xc002bde5
c0019eb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019eb5:	e8 04 fe ff ff       	call   c0019cbe <EnvVarContainer::loadFrom(char const*, char const*)>
c0019eba:	83 c4 1c             	add    esp,0x1c
c0019ebd:	c3                   	ret    

c0019ebe <EnvVarContainer::__loadUser()>:
c0019ebe:	c3                   	ret    
c0019ebf:	90                   	nop

c0019ec0 <EnvVarContainer::EnvVarContainer(Process*)>:
c0019ec0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ec4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019eca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ece:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019ed2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019ed5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ed9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019ee0:	90                   	nop
c0019ee1:	c3                   	ret    

c0019ee2 <EnvVarContainer::~EnvVarContainer()>:
c0019ee2:	83 ec 0c             	sub    esp,0xc
c0019ee5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ee9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019eec:	85 c0                	test   eax,eax
c0019eee:	74 1d                	je     c0019f0d <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019ef0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ef4:	8b 00                	mov    eax,DWORD PTR [eax]
c0019ef6:	85 c0                	test   eax,eax
c0019ef8:	74 13                	je     c0019f0d <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019efa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019efe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019f01:	83 ec 0c             	sub    esp,0xc
c0019f04:	50                   	push   eax
c0019f05:	e8 1f 59 ff ff       	call   c000f829 <free>
c0019f0a:	83 c4 10             	add    esp,0x10
c0019f0d:	90                   	nop
c0019f0e:	83 c4 0c             	add    esp,0xc
c0019f11:	c3                   	ret    

c0019f12 <Krnl::getEnv(Process*, char const*)>:
c0019f12:	53                   	push   ebx
c0019f13:	83 ec 08             	sub    esp,0x8
c0019f16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f1a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019f1e:	39 05 50 f7 02 c0    	cmp    DWORD PTR ds:0xc002f750,eax
c0019f24:	74 04                	je     c0019f2a <Krnl::getEnv(Process*, char const*)+0x18>
c0019f26:	85 c0                	test   eax,eax
c0019f28:	75 0b                	jne    c0019f35 <Krnl::getEnv(Process*, char const*)+0x23>
c0019f2a:	a1 34 ed 02 c0       	mov    eax,ds:0xc002ed34
c0019f2f:	85 c0                	test   eax,eax
c0019f31:	75 19                	jne    c0019f4c <Krnl::getEnv(Process*, char const*)+0x3a>
c0019f33:	eb 27                	jmp    c0019f5c <Krnl::getEnv(Process*, char const*)+0x4a>
c0019f35:	52                   	push   edx
c0019f36:	52                   	push   edx
c0019f37:	53                   	push   ebx
c0019f38:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c0019f3e:	e8 79 fc ff ff       	call   c0019bbc <EnvVarContainer::getEnv(char const*)>
c0019f43:	83 c4 10             	add    esp,0x10
c0019f46:	85 c0                	test   eax,eax
c0019f48:	75 28                	jne    c0019f72 <Krnl::getEnv(Process*, char const*)+0x60>
c0019f4a:	eb de                	jmp    c0019f2a <Krnl::getEnv(Process*, char const*)+0x18>
c0019f4c:	52                   	push   edx
c0019f4d:	52                   	push   edx
c0019f4e:	53                   	push   ebx
c0019f4f:	50                   	push   eax
c0019f50:	e8 67 fc ff ff       	call   c0019bbc <EnvVarContainer::getEnv(char const*)>
c0019f55:	83 c4 10             	add    esp,0x10
c0019f58:	85 c0                	test   eax,eax
c0019f5a:	75 16                	jne    c0019f72 <Krnl::getEnv(Process*, char const*)+0x60>
c0019f5c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0019f60:	a1 38 ed 02 c0       	mov    eax,ds:0xc002ed38
c0019f65:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019f69:	83 c4 08             	add    esp,0x8
c0019f6c:	5b                   	pop    ebx
c0019f6d:	e9 4a fc ff ff       	jmp    c0019bbc <EnvVarContainer::getEnv(char const*)>
c0019f72:	83 c4 08             	add    esp,0x8
c0019f75:	5b                   	pop    ebx
c0019f76:	c3                   	ret    

c0019f77 <Krnl::setEnvSystem(char const*, char const*)>:
c0019f77:	83 ec 10             	sub    esp,0x10
c0019f7a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019f7e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019f82:	ff 35 38 ed 02 c0    	push   DWORD PTR ds:0xc002ed38
c0019f88:	e8 6d fc ff ff       	call   c0019bfa <EnvVarContainer::setEnv(char const*, char const*)>
c0019f8d:	83 c4 1c             	add    esp,0x1c
c0019f90:	c3                   	ret    

c0019f91 <Krnl::setEnvUser(char const*, char const*)>:
c0019f91:	a1 34 ed 02 c0       	mov    eax,ds:0xc002ed34
c0019f96:	85 c0                	test   eax,eax
c0019f98:	74 15                	je     c0019faf <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0019f9a:	83 ec 10             	sub    esp,0x10
c0019f9d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019fa1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019fa5:	50                   	push   eax
c0019fa6:	e8 4f fc ff ff       	call   c0019bfa <EnvVarContainer::setEnv(char const*, char const*)>
c0019fab:	83 c4 1c             	add    esp,0x1c
c0019fae:	c3                   	ret    
c0019faf:	c3                   	ret    

c0019fb0 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0019fb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019fb4:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c0019fba:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019fbe:	e9 37 fc ff ff       	jmp    c0019bfa <EnvVarContainer::setEnv(char const*, char const*)>

c0019fc3 <Krnl::deleteEnvSystem(char const*)>:
c0019fc3:	c3                   	ret    

c0019fc4 <Krnl::deleteEnvUser(char const*)>:
c0019fc4:	c3                   	ret    

c0019fc5 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0019fc5:	c3                   	ret    

c0019fc6 <Krnl::newProcessEnv(Process*)>:
c0019fc6:	83 ec 28             	sub    esp,0x28
c0019fc9:	6a 0c                	push   0xc
c0019fcb:	e8 49 58 ff ff       	call   c000f819 <malloc>
c0019fd0:	5a                   	pop    edx
c0019fd1:	59                   	pop    ecx
c0019fd2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019fd6:	50                   	push   eax
c0019fd7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019fdb:	e8 e0 fe ff ff       	call   c0019ec0 <EnvVarContainer::EnvVarContainer(Process*)>
c0019fe0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019fe4:	83 c4 2c             	add    esp,0x2c
c0019fe7:	c3                   	ret    

c0019fe8 <Krnl::copyProcessEnv(Process*, Process*)>:
c0019fe8:	57                   	push   edi
c0019fe9:	56                   	push   esi
c0019fea:	53                   	push   ebx
c0019feb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fef:	83 ec 0c             	sub    esp,0xc
c0019ff2:	8b b8 3a 07 00 00    	mov    edi,DWORD PTR [eax+0x73a]
c0019ff8:	6a 0c                	push   0xc
c0019ffa:	e8 1a 58 ff ff       	call   c000f819 <malloc>
c0019fff:	89 c3                	mov    ebx,eax
c001a001:	58                   	pop    eax
c001a002:	5a                   	pop    edx
c001a003:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a007:	53                   	push   ebx
c001a008:	e8 b3 fe ff ff       	call   c0019ec0 <EnvVarContainer::EnvVarContainer(Process*)>
c001a00d:	8b 07                	mov    eax,DWORD PTR [edi]
c001a00f:	89 03                	mov    DWORD PTR [ebx],eax
c001a011:	c1 e0 03             	shl    eax,0x3
c001a014:	89 04 24             	mov    DWORD PTR [esp],eax
c001a017:	e8 fd 57 ff ff       	call   c000f819 <malloc>
c001a01c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a01f:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001a021:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001a024:	c1 e1 03             	shl    ecx,0x3
c001a027:	89 c7                	mov    edi,eax
c001a029:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a02b:	83 c4 10             	add    esp,0x10
c001a02e:	89 d8                	mov    eax,ebx
c001a030:	5b                   	pop    ebx
c001a031:	5e                   	pop    esi
c001a032:	5f                   	pop    edi
c001a033:	c3                   	ret    

c001a034 <Krnl::loadSystemEnv()>:
c001a034:	53                   	push   ebx
c001a035:	83 ec 14             	sub    esp,0x14
c001a038:	6a 0c                	push   0xc
c001a03a:	e8 da 57 ff ff       	call   c000f819 <malloc>
c001a03f:	89 c3                	mov    ebx,eax
c001a041:	58                   	pop    eax
c001a042:	5a                   	pop    edx
c001a043:	ff 35 50 f7 02 c0    	push   DWORD PTR ds:0xc002f750
c001a049:	53                   	push   ebx
c001a04a:	e8 71 fe ff ff       	call   c0019ec0 <EnvVarContainer::EnvVarContainer(Process*)>
c001a04f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a052:	89 1d 38 ed 02 c0    	mov    DWORD PTR ds:0xc002ed38,ebx
c001a058:	e8 47 fe ff ff       	call   c0019ea4 <EnvVarContainer::__loadSystem()>
c001a05d:	83 c4 18             	add    esp,0x18
c001a060:	5b                   	pop    ebx
c001a061:	c3                   	ret    

c001a062 <Krnl::loadUserEnv()>:
c001a062:	53                   	push   ebx
c001a063:	83 ec 14             	sub    esp,0x14
c001a066:	6a 0c                	push   0xc
c001a068:	e8 ac 57 ff ff       	call   c000f819 <malloc>
c001a06d:	89 c3                	mov    ebx,eax
c001a06f:	58                   	pop    eax
c001a070:	5a                   	pop    edx
c001a071:	ff 35 50 f7 02 c0    	push   DWORD PTR ds:0xc002f750
c001a077:	53                   	push   ebx
c001a078:	e8 43 fe ff ff       	call   c0019ec0 <EnvVarContainer::EnvVarContainer(Process*)>
c001a07d:	89 1d 34 ed 02 c0    	mov    DWORD PTR ds:0xc002ed34,ebx
c001a083:	83 c4 18             	add    esp,0x18
c001a086:	5b                   	pop    ebx
c001a087:	c3                   	ret    

c001a088 <Krnl::flushEnv()>:
c001a088:	c3                   	ret    

c001a089 <Krnl::getProcessTotalEnvCount(Process*)>:
c001a089:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a08d:	8b 15 34 ed 02 c0    	mov    edx,DWORD PTR ds:0xc002ed34
c001a093:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a099:	a1 38 ed 02 c0       	mov    eax,ds:0xc002ed38
c001a09e:	8b 00                	mov    eax,DWORD PTR [eax]
c001a0a0:	03 01                	add    eax,DWORD PTR [ecx]
c001a0a2:	85 d2                	test   edx,edx
c001a0a4:	74 02                	je     c001a0a8 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a0a6:	03 02                	add    eax,DWORD PTR [edx]
c001a0a8:	c3                   	ret    

c001a0a9 <Krnl::getProcessEnvPair(Process*, int)>:
c001a0a9:	57                   	push   edi
c001a0aa:	56                   	push   esi
c001a0ab:	8b 35 34 ed 02 c0    	mov    esi,DWORD PTR ds:0xc002ed34
c001a0b1:	53                   	push   ebx
c001a0b2:	85 f6                	test   esi,esi
c001a0b4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a0b8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a0bc:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a0c2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a0c6:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a0c8:	75 16                	jne    c001a0e0 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c001a0ca:	39 c2                	cmp    edx,eax
c001a0cc:	7c 16                	jl     c001a0e4 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c001a0ce:	8b 0d 38 ed 02 c0    	mov    ecx,DWORD PTR ds:0xc002ed38
c001a0d4:	8b 31                	mov    esi,DWORD PTR [ecx]
c001a0d6:	01 c6                	add    esi,eax
c001a0d8:	39 d6                	cmp    esi,edx
c001a0da:	7e 3c                	jle    c001a118 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c001a0dc:	29 c2                	sub    edx,eax
c001a0de:	eb 04                	jmp    c001a0e4 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c001a0e0:	39 c2                	cmp    edx,eax
c001a0e2:	7d 05                	jge    c001a0e9 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c001a0e4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a0e7:	eb 20                	jmp    c001a109 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c001a0e9:	8b 3e                	mov    edi,DWORD PTR [esi]
c001a0eb:	8d 0c 07             	lea    ecx,[edi+eax*1]
c001a0ee:	39 d1                	cmp    ecx,edx
c001a0f0:	7e 04                	jle    c001a0f6 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c001a0f2:	29 c2                	sub    edx,eax
c001a0f4:	eb 10                	jmp    c001a106 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c001a0f6:	8b 35 38 ed 02 c0    	mov    esi,DWORD PTR ds:0xc002ed38
c001a0fc:	03 0e                	add    ecx,DWORD PTR [esi]
c001a0fe:	39 d1                	cmp    ecx,edx
c001a100:	7e 16                	jle    c001a118 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c001a102:	29 c2                	sub    edx,eax
c001a104:	29 fa                	sub    edx,edi
c001a106:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a109:	8d 14 d0             	lea    edx,[eax+edx*8]
c001a10c:	8b 02                	mov    eax,DWORD PTR [edx]
c001a10e:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001a111:	89 03                	mov    DWORD PTR [ebx],eax
c001a113:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001a116:	eb 1d                	jmp    c001a135 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c001a118:	83 ec 0c             	sub    esp,0xc
c001a11b:	68 07 be 02 c0       	push   0xc002be07
c001a120:	e8 18 00 00 00       	call   c001a13d <Krnl::panic(char const*)>
c001a125:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001a12b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a132:	83 c4 10             	add    esp,0x10
c001a135:	89 d8                	mov    eax,ebx
c001a137:	5b                   	pop    ebx
c001a138:	5e                   	pop    esi
c001a139:	5f                   	pop    edi
c001a13a:	c2 04 00             	ret    0x4

c001a13d <Krnl::panic(char const*)>:
c001a13d:	55                   	push   ebp
c001a13e:	89 e5                	mov    ebp,esp
c001a140:	53                   	push   ebx
c001a141:	83 ec 10             	sub    esp,0x10
c001a144:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a147:	fa                   	cli    
c001a148:	c6 05 44 ed 02 c0 01 	mov    BYTE PTR ds:0xc002ed44,0x1
c001a14f:	53                   	push   ebx
c001a150:	e8 1e 57 ff ff       	call   c000f873 <Krnl::setBootMessage(char const*)>
c001a155:	58                   	pop    eax
c001a156:	c6 05 60 d1 02 c0 00 	mov    BYTE PTR ds:0xc002d160,0x0
c001a15d:	5a                   	pop    edx
c001a15e:	53                   	push   ebx
c001a15f:	68 21 be 02 c0       	push   0xc002be21
c001a164:	e8 08 87 ff ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c001a169:	59                   	pop    ecx
c001a16a:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c001a16f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a175:	e8 59 64 ff ff       	call   c00105d3 <setActiveTerminal(VgaText*)>
c001a17a:	83 c4 0c             	add    esp,0xc
c001a17d:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c001a182:	6a 01                	push   0x1
c001a184:	6a 0f                	push   0xf
c001a186:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a18c:	e8 a1 62 ff ff       	call   c0010432 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a191:	58                   	pop    eax
c001a192:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c001a197:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a19d:	e8 b2 67 ff ff       	call   c0010954 <VgaText::clearScreen()>
c001a1a2:	58                   	pop    eax
c001a1a3:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c001a1a8:	5a                   	pop    edx
c001a1a9:	68 3a be 02 c0       	push   0xc002be3a
c001a1ae:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1b4:	e8 27 69 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c001a1b9:	59                   	pop    ecx
c001a1ba:	58                   	pop    eax
c001a1bb:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c001a1c0:	68 e0 be 02 c0       	push   0xc002bee0
c001a1c5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1cb:	e8 10 69 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c001a1d0:	58                   	pop    eax
c001a1d1:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c001a1d6:	5a                   	pop    edx
c001a1d7:	68 56 be 02 c0       	push   0xc002be56
c001a1dc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1e2:	e8 f9 68 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c001a1e7:	59                   	pop    ecx
c001a1e8:	58                   	pop    eax
c001a1e9:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c001a1ee:	53                   	push   ebx
c001a1ef:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1f5:	e8 e6 68 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c001a1fa:	58                   	pop    eax
c001a1fb:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c001a200:	5a                   	pop    edx
c001a201:	68 76 be 02 c0       	push   0xc002be76
c001a206:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a20c:	e8 cf 68 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c001a211:	a1 40 ed 02 c0       	mov    eax,ds:0xc002ed40
c001a216:	83 c4 10             	add    esp,0x10
c001a219:	85 c0                	test   eax,eax
c001a21b:	74 02                	je     c001a21f <Krnl::panic(char const*)+0xe2>
c001a21d:	ff d0                	call   eax
c001a21f:	83 ec 0c             	sub    esp,0xc
c001a222:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a225:	e8 8f 30 00 00       	call   c001d2b9 <Thr::getDriverNameFromAddress(unsigned long)>
c001a22a:	83 c4 10             	add    esp,0x10
c001a22d:	89 c3                	mov    ebx,eax
c001a22f:	85 c0                	test   eax,eax
c001a231:	0f 84 4e 02 00 00    	je     c001a485 <Krnl::panic(char const*)+0x348>
c001a237:	83 ec 08             	sub    esp,0x8
c001a23a:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c001a23f:	68 1c bf 02 c0       	push   0xc002bf1c
c001a244:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a24a:	e8 91 68 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c001a24f:	58                   	pop    eax
c001a250:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c001a255:	5a                   	pop    edx
c001a256:	68 56 be 02 c0       	push   0xc002be56
c001a25b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a261:	e8 7a 68 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c001a266:	59                   	pop    ecx
c001a267:	58                   	pop    eax
c001a268:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c001a26d:	53                   	push   ebx
c001a26e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a274:	e8 67 68 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c001a279:	83 c4 10             	add    esp,0x10
c001a27c:	83 ec 08             	sub    esp,0x8
c001a27f:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c001a284:	68 75 be 02 c0       	push   0xc002be75
c001a289:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a28f:	e8 4c 68 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c001a294:	58                   	pop    eax
c001a295:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c001a29a:	5a                   	pop    edx
c001a29b:	68 74 bf 02 c0       	push   0xc002bf74
c001a2a0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a2a6:	e8 35 68 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c001a2ab:	59                   	pop    ecx
c001a2ac:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c001a2b1:	5b                   	pop    ebx
c001a2b2:	68 b4 bf 02 c0       	push   0xc002bfb4
c001a2b7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a2bd:	e8 1e 68 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c001a2c2:	58                   	pop    eax
c001a2c3:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c001a2c8:	5a                   	pop    edx
c001a2c9:	68 61 be 02 c0       	push   0xc002be61
c001a2ce:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a2d4:	e8 07 68 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c001a2d9:	59                   	pop    ecx
c001a2da:	5b                   	pop    ebx
c001a2db:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a2de:	68 79 be 02 c0       	push   0xc002be79
c001a2e3:	e8 89 85 ff ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c001a2e8:	58                   	pop    eax
c001a2e9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a2ec:	5a                   	pop    edx
c001a2ed:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a2f0:	68 82 be 02 c0       	push   0xc002be82
c001a2f5:	e8 77 85 ff ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c001a2fa:	59                   	pop    ecx
c001a2fb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a2fe:	5b                   	pop    ebx
c001a2ff:	8b 00                	mov    eax,DWORD PTR [eax]
c001a301:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a304:	68 8b be 02 c0       	push   0xc002be8b
c001a309:	e8 63 85 ff ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c001a30e:	58                   	pop    eax
c001a30f:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c001a314:	5a                   	pop    edx
c001a315:	68 f8 bf 02 c0       	push   0xc002bff8
c001a31a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a320:	e8 bb 67 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c001a325:	59                   	pop    ecx
c001a326:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c001a32b:	5b                   	pop    ebx
c001a32c:	68 94 be 02 c0       	push   0xc002be94
c001a331:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a337:	e8 a4 67 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c001a33c:	0f 20 c0             	mov    eax,cr0
c001a33f:	5a                   	pop    edx
c001a340:	59                   	pop    ecx
c001a341:	50                   	push   eax
c001a342:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c001a347:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a34d:	e8 48 67 ff ff       	call   c0010a9a <VgaText::putx(unsigned int)>
c001a352:	5b                   	pop    ebx
c001a353:	58                   	pop    eax
c001a354:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c001a359:	68 9e be 02 c0       	push   0xc002be9e
c001a35e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a364:	e8 77 67 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c001a369:	0f 20 d0             	mov    eax,cr2
c001a36c:	5a                   	pop    edx
c001a36d:	59                   	pop    ecx
c001a36e:	50                   	push   eax
c001a36f:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c001a374:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a37a:	e8 1b 67 ff ff       	call   c0010a9a <VgaText::putx(unsigned int)>
c001a37f:	5b                   	pop    ebx
c001a380:	58                   	pop    eax
c001a381:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c001a386:	68 a8 be 02 c0       	push   0xc002bea8
c001a38b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a391:	e8 4a 67 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c001a396:	0f 20 d8             	mov    eax,cr3
c001a399:	5a                   	pop    edx
c001a39a:	59                   	pop    ecx
c001a39b:	50                   	push   eax
c001a39c:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c001a3a1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a3a7:	e8 ee 66 ff ff       	call   c0010a9a <VgaText::putx(unsigned int)>
c001a3ac:	5b                   	pop    ebx
c001a3ad:	58                   	pop    eax
c001a3ae:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c001a3b3:	68 bb be 02 c0       	push   0xc002bebb
c001a3b8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a3be:	e8 1d 67 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c001a3c3:	0f 20 e0             	mov    eax,cr4
c001a3c6:	5a                   	pop    edx
c001a3c7:	59                   	pop    ecx
c001a3c8:	50                   	push   eax
c001a3c9:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c001a3ce:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a3d4:	e8 c1 66 ff ff       	call   c0010a9a <VgaText::putx(unsigned int)>
c001a3d9:	5b                   	pop    ebx
c001a3da:	58                   	pop    eax
c001a3db:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c001a3e0:	68 c5 be 02 c0       	push   0xc002bec5
c001a3e5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a3eb:	e8 f0 66 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c001a3f0:	5a                   	pop    edx
c001a3f1:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c001a3f6:	59                   	pop    ecx
c001a3f7:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a3fd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a400:	50                   	push   eax
c001a401:	e8 94 66 ff ff       	call   c0010a9a <VgaText::putx(unsigned int)>
c001a406:	5b                   	pop    ebx
c001a407:	58                   	pop    eax
c001a408:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c001a40d:	68 dc be 02 c0       	push   0xc002bedc
c001a412:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a418:	e8 c3 66 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c001a41d:	5a                   	pop    edx
c001a41e:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c001a423:	59                   	pop    ecx
c001a424:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a42a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a42d:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a430:	50                   	push   eax
c001a431:	e8 64 66 ff ff       	call   c0010a9a <VgaText::putx(unsigned int)>
c001a436:	5b                   	pop    ebx
c001a437:	58                   	pop    eax
c001a438:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c001a43d:	68 dc be 02 c0       	push   0xc002bedc
c001a442:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a448:	e8 93 66 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c001a44d:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c001a452:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a455:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a45b:	8b 12                	mov    edx,DWORD PTR [edx]
c001a45d:	59                   	pop    ecx
c001a45e:	5b                   	pop    ebx
c001a45f:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a462:	50                   	push   eax
c001a463:	e8 32 66 ff ff       	call   c0010a9a <VgaText::putx(unsigned int)>
c001a468:	83 c4 10             	add    esp,0x10
c001a46b:	b2 fe                	mov    dl,0xfe
c001a46d:	e4 60                	in     al,0x60
c001a46f:	3c 1c                	cmp    al,0x1c
c001a471:	74 04                	je     c001a477 <Krnl::panic(char const*)+0x33a>
c001a473:	3c 5a                	cmp    al,0x5a
c001a475:	75 f6                	jne    c001a46d <Krnl::panic(char const*)+0x330>
c001a477:	e4 64                	in     al,0x64
c001a479:	a8 02                	test   al,0x2
c001a47b:	75 fa                	jne    c001a477 <Krnl::panic(char const*)+0x33a>
c001a47d:	88 d0                	mov    al,dl
c001a47f:	e6 64                	out    0x64,al
c001a481:	fa                   	cli    
c001a482:	f4                   	hlt    
c001a483:	eb e8                	jmp    c001a46d <Krnl::panic(char const*)+0x330>
c001a485:	50                   	push   eax
c001a486:	50                   	push   eax
c001a487:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c001a48c:	68 48 bf 02 c0       	push   0xc002bf48
c001a491:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a497:	e8 44 66 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c001a49c:	58                   	pop    eax
c001a49d:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c001a4a2:	5a                   	pop    edx
c001a4a3:	68 56 be 02 c0       	push   0xc002be56
c001a4a8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a4ae:	e8 2d 66 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c001a4b3:	59                   	pop    ecx
c001a4b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a4b9:	5b                   	pop    ebx
c001a4ba:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a4bd:	83 c0 0c             	add    eax,0xc
c001a4c0:	50                   	push   eax
c001a4c1:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c001a4c6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a4cc:	e8 0f 66 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c001a4d1:	83 c4 10             	add    esp,0x10
c001a4d4:	e9 a3 fd ff ff       	jmp    c001a27c <Krnl::panic(char const*)+0x13f>

c001a4d9 <Net::switchEndian16(unsigned short)>:
c001a4d9:	83 ec 04             	sub    esp,0x4
c001a4dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a4e0:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a4e4:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a4e8:	c1 f8 08             	sar    eax,0x8
c001a4eb:	89 c2                	mov    edx,eax
c001a4ed:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a4f1:	c1 e0 08             	shl    eax,0x8
c001a4f4:	09 d0                	or     eax,edx
c001a4f6:	83 c4 04             	add    esp,0x4
c001a4f9:	c3                   	ret    

c001a4fa <Net::switchEndian32(unsigned int)>:
c001a4fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a4fe:	c1 e8 18             	shr    eax,0x18
c001a501:	89 c2                	mov    edx,eax
c001a503:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a507:	c1 e0 08             	shl    eax,0x8
c001a50a:	25 00 00 ff 00       	and    eax,0xff0000
c001a50f:	09 c2                	or     edx,eax
c001a511:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a515:	c1 e8 08             	shr    eax,0x8
c001a518:	25 00 ff 00 00       	and    eax,0xff00
c001a51d:	09 c2                	or     edx,eax
c001a51f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a523:	c1 e0 18             	shl    eax,0x18
c001a526:	09 d0                	or     eax,edx
c001a528:	c3                   	ret    

c001a529 <Net::crc32Calc(unsigned char*, int)>:
c001a529:	83 ec 10             	sub    esp,0x10
c001a52c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a531:	75 07                	jne    c001a53a <Net::crc32Calc(unsigned char*, int)+0x11>
c001a533:	b8 00 00 00 00       	mov    eax,0x0
c001a538:	eb 7c                	jmp    c001a5b6 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a53a:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a53f:	7f 07                	jg     c001a548 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a541:	b8 00 00 00 00       	mov    eax,0x0
c001a546:	eb 6e                	jmp    c001a5b6 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a548:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a550:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a558:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a55c:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a560:	7d 4e                	jge    c001a5b0 <Net::crc32Calc(unsigned char*, int)+0x87>
c001a562:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a566:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a56a:	01 d0                	add    eax,edx
c001a56c:	8a 00                	mov    al,BYTE PTR [eax]
c001a56e:	0f b6 c0             	movzx  eax,al
c001a571:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a575:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a57d:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a582:	7f 26                	jg     c001a5aa <Net::crc32Calc(unsigned char*, int)+0x81>
c001a584:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a588:	83 e0 01             	and    eax,0x1
c001a58b:	74 0d                	je     c001a59a <Net::crc32Calc(unsigned char*, int)+0x71>
c001a58d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a591:	d1 e8                	shr    eax,1
c001a593:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a598:	eb 06                	jmp    c001a5a0 <Net::crc32Calc(unsigned char*, int)+0x77>
c001a59a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a59e:	d1 e8                	shr    eax,1
c001a5a0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a5a4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a5a8:	eb d3                	jmp    c001a57d <Net::crc32Calc(unsigned char*, int)+0x54>
c001a5aa:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a5ae:	eb a8                	jmp    c001a558 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a5b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a5b4:	f7 d0                	not    eax
c001a5b6:	83 c4 10             	add    esp,0x10
c001a5b9:	c3                   	ret    

c001a5ba <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a5ba:	57                   	push   edi
c001a5bb:	56                   	push   esi
c001a5bc:	53                   	push   ebx
c001a5bd:	83 ec 60             	sub    esp,0x60
c001a5c0:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a5c7:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a5cb:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001a5d3:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c001a5d8:	7f 1a                	jg     c001a5f4 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x3a>
c001a5da:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a5e1:	8d 50 01             	lea    edx,[eax+0x1]
c001a5e4:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a5eb:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a5ee:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001a5f2:	eb df                	jmp    c001a5d3 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x19>
c001a5f4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a5fb:	8d 50 01             	lea    edx,[eax+0x1]
c001a5fe:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a605:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a608:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a60f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a613:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c001a617:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a61b:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001a623:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a627:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a62b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a62f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a633:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a637:	89 c6                	mov    esi,eax
c001a639:	89 d7                	mov    edi,edx
c001a63b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a63d:	89 c8                	mov    eax,ecx
c001a63f:	89 fa                	mov    edx,edi
c001a641:	89 f3                	mov    ebx,esi
c001a643:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a647:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a64b:	89 04 24             	mov    DWORD PTR [esp],eax
c001a64e:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a656:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a65d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a661:	8d 44 24 78          	lea    eax,[esp+0x78]
c001a665:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a669:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a671:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a675:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a679:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a67d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a681:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a685:	89 c6                	mov    esi,eax
c001a687:	89 d7                	mov    edi,edx
c001a689:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a68b:	89 c8                	mov    eax,ecx
c001a68d:	89 fa                	mov    edx,edi
c001a68f:	89 f3                	mov    ebx,esi
c001a691:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a695:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a699:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a69d:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a6a5:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a6ac:	0f b7 c0             	movzx  eax,ax
c001a6af:	c1 f8 08             	sar    eax,0x8
c001a6b2:	89 c1                	mov    ecx,eax
c001a6b4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a6bb:	8d 50 01             	lea    edx,[eax+0x1]
c001a6be:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a6c5:	88 ca                	mov    dl,cl
c001a6c7:	88 10                	mov    BYTE PTR [eax],dl
c001a6c9:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a6d0:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a6d7:	8d 48 01             	lea    ecx,[eax+0x1]
c001a6da:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c001a6e1:	88 10                	mov    BYTE PTR [eax],dl
c001a6e3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a6e7:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001a6eb:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001a6f2:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c001a6f6:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001a6fa:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001a6fe:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a702:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a706:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a70a:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a70e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a712:	89 c6                	mov    esi,eax
c001a714:	89 d7                	mov    edi,edx
c001a716:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a718:	89 c8                	mov    eax,ecx
c001a71a:	89 fa                	mov    edx,edi
c001a71c:	89 f3                	mov    ebx,esi
c001a71e:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a722:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a726:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a72a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a72e:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c001a735:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a73c:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001a740:	50                   	push   eax
c001a741:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a745:	e8 df fd ff ff       	call   c001a529 <Net::crc32Calc(unsigned char*, int)>
c001a74a:	83 c4 08             	add    esp,0x8
c001a74d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a751:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a755:	c1 e8 18             	shr    eax,0x18
c001a758:	89 c1                	mov    ecx,eax
c001a75a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a761:	8d 50 01             	lea    edx,[eax+0x1]
c001a764:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a76b:	88 ca                	mov    dl,cl
c001a76d:	88 10                	mov    BYTE PTR [eax],dl
c001a76f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a773:	c1 e8 10             	shr    eax,0x10
c001a776:	89 c1                	mov    ecx,eax
c001a778:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a77f:	8d 50 01             	lea    edx,[eax+0x1]
c001a782:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a789:	88 ca                	mov    dl,cl
c001a78b:	88 10                	mov    BYTE PTR [eax],dl
c001a78d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a791:	c1 e8 08             	shr    eax,0x8
c001a794:	89 c1                	mov    ecx,eax
c001a796:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a79d:	8d 50 01             	lea    edx,[eax+0x1]
c001a7a0:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a7a7:	88 ca                	mov    dl,cl
c001a7a9:	88 10                	mov    BYTE PTR [eax],dl
c001a7ab:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a7b2:	8d 50 01             	lea    edx,[eax+0x1]
c001a7b5:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a7bc:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001a7c0:	88 10                	mov    BYTE PTR [eax],dl
c001a7c2:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a7c6:	83 c4 60             	add    esp,0x60
c001a7c9:	5b                   	pop    ebx
c001a7ca:	5e                   	pop    esi
c001a7cb:	5f                   	pop    edi
c001a7cc:	c3                   	ret    

c001a7cd <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001a7cd:	57                   	push   edi
c001a7ce:	56                   	push   esi
c001a7cf:	53                   	push   ebx
c001a7d0:	83 ec 70             	sub    esp,0x70
c001a7d3:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a7da:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c001a7de:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c001a7e6:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a7ed:	83 c0 0e             	add    eax,0xe
c001a7f0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a7f4:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a7fb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a7ff:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a807:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a80b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a80f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a813:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a817:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a81b:	89 c6                	mov    esi,eax
c001a81d:	89 d7                	mov    edi,edx
c001a81f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a821:	89 c8                	mov    eax,ecx
c001a823:	89 fa                	mov    edx,edi
c001a825:	89 f3                	mov    ebx,esi
c001a827:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a82b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a82f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a833:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a83b:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a842:	83 c0 08             	add    eax,0x8
c001a845:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001a849:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a850:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a854:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c001a85c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a860:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a864:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a868:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a86c:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a870:	89 c6                	mov    esi,eax
c001a872:	89 d7                	mov    edi,edx
c001a874:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a876:	89 c8                	mov    eax,ecx
c001a878:	89 fa                	mov    edx,edi
c001a87a:	89 f3                	mov    ebx,esi
c001a87c:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a880:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a884:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a888:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a890:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a897:	8d 50 01             	lea    edx,[eax+0x1]
c001a89a:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a8a1:	8a 00                	mov    al,BYTE PTR [eax]
c001a8a3:	0f b6 c0             	movzx  eax,al
c001a8a6:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c001a8ab:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a8b2:	8d 50 01             	lea    edx,[eax+0x1]
c001a8b5:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a8bc:	8a 00                	mov    al,BYTE PTR [eax]
c001a8be:	0f b6 c0             	movzx  eax,al
c001a8c1:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c001a8c6:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c001a8cb:	c1 e0 08             	shl    eax,0x8
c001a8ce:	89 c2                	mov    edx,eax
c001a8d0:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a8d4:	09 d0                	or     eax,edx
c001a8d6:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001a8dd:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001a8e1:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c001a8e9:	75 46                	jne    c001a931 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001a8eb:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a8f2:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a8f5:	66 3d dc 05          	cmp    ax,0x5dc
c001a8f9:	77 16                	ja     c001a911 <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c001a8fb:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a902:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a905:	0f b7 c0             	movzx  eax,ax
c001a908:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001a90f:	eb 20                	jmp    c001a931 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001a911:	83 ec 0c             	sub    esp,0xc
c001a914:	68 20 c0 02 c0       	push   0xc002c020
c001a919:	e8 53 7f ff ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c001a91e:	83 c4 10             	add    esp,0x10
c001a921:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a928:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001a92c:	e9 17 01 00 00       	jmp    c001aa48 <Net::unwrapEthernetFrame(unsigned char*, int)+0x27b>
c001a931:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a938:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001a93f:	8b 12                	mov    edx,DWORD PTR [edx]
c001a941:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001a945:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a94c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001a950:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a954:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a958:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a95c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a960:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a964:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a968:	89 c6                	mov    esi,eax
c001a96a:	89 d7                	mov    edi,edx
c001a96c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a96e:	89 c8                	mov    eax,ecx
c001a970:	89 fa                	mov    edx,edi
c001a972:	89 f3                	mov    ebx,esi
c001a974:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a978:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a97c:	89 04 24             	mov    DWORD PTR [esp],eax
c001a97f:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a986:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c001a98d:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a994:	8d 50 01             	lea    edx,[eax+0x1]
c001a997:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a99e:	8a 00                	mov    al,BYTE PTR [eax]
c001a9a0:	0f b6 c0             	movzx  eax,al
c001a9a3:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001a9a7:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a9ae:	8d 50 01             	lea    edx,[eax+0x1]
c001a9b1:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a9b8:	8a 00                	mov    al,BYTE PTR [eax]
c001a9ba:	0f b6 c0             	movzx  eax,al
c001a9bd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001a9c1:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a9c8:	8d 50 01             	lea    edx,[eax+0x1]
c001a9cb:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a9d2:	8a 00                	mov    al,BYTE PTR [eax]
c001a9d4:	0f b6 c0             	movzx  eax,al
c001a9d7:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c001a9db:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a9e2:	8d 50 01             	lea    edx,[eax+0x1]
c001a9e5:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a9ec:	8a 00                	mov    al,BYTE PTR [eax]
c001a9ee:	0f b6 c0             	movzx  eax,al
c001a9f1:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a9f5:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001a9f9:	c1 e0 18             	shl    eax,0x18
c001a9fc:	89 c2                	mov    edx,eax
c001a9fe:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001aa02:	c1 e0 10             	shl    eax,0x10
c001aa05:	09 c2                	or     edx,eax
c001aa07:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001aa0b:	c1 e0 08             	shl    eax,0x8
c001aa0e:	09 d0                	or     eax,edx
c001aa10:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c001aa14:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001aa18:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aa1f:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c001aa23:	83 e8 04             	sub    eax,0x4
c001aa26:	83 ec 08             	sub    esp,0x8
c001aa29:	50                   	push   eax
c001aa2a:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001aa2e:	e8 f6 fa ff ff       	call   c001a529 <Net::crc32Calc(unsigned char*, int)>
c001aa33:	83 c4 10             	add    esp,0x10
c001aa36:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001aa3a:	0f 94 c2             	sete   dl
c001aa3d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001aa44:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001aa47:	90                   	nop
c001aa48:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001aa4f:	83 c4 70             	add    esp,0x70
c001aa52:	5b                   	pop    ebx
c001aa53:	5e                   	pop    esi
c001aa54:	5f                   	pop    edi
c001aa55:	c2 04 00             	ret    0x4

c001aa58 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001aa58:	55                   	push   ebp
c001aa59:	57                   	push   edi
c001aa5a:	56                   	push   esi
c001aa5b:	53                   	push   ebx
c001aa5c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001aa62:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001aa69:	8a 1e                	mov    bl,BYTE PTR [esi]
c001aa6b:	8d 6e 01             	lea    ebp,[esi+0x1]
c001aa6e:	80 fb 40             	cmp    bl,0x40
c001aa71:	75 1b                	jne    c001aa8e <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001aa73:	8a 16                	mov    dl,BYTE PTR [esi]
c001aa75:	84 d2                	test   dl,dl
c001aa77:	0f 84 f1 00 00 00    	je     c001ab6e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001aa7d:	8d 46 01             	lea    eax,[esi+0x1]
c001aa80:	80 fa 3a             	cmp    dl,0x3a
c001aa83:	74 04                	je     c001aa89 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001aa85:	89 c6                	mov    esi,eax
c001aa87:	eb ea                	jmp    c001aa73 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001aa89:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001aa8c:	89 c6                	mov    esi,eax
c001aa8e:	50                   	push   eax
c001aa8f:	6a 40                	push   0x40
c001aa91:	6a 00                	push   0x0
c001aa93:	8d 44 24 24          	lea    eax,[esp+0x24]
c001aa97:	50                   	push   eax
c001aa98:	e8 b3 5c fe ff       	call   c0000750 <memset>
c001aa9d:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001aaa4:	31 c0                	xor    eax,eax
c001aaa6:	83 c4 10             	add    esp,0x10
c001aaa9:	8a 0f                	mov    cl,BYTE PTR [edi]
c001aaab:	84 c9                	test   cl,cl
c001aaad:	0f 84 bb 00 00 00    	je     c001ab6e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001aab3:	3d c7 00 00 00       	cmp    eax,0xc7
c001aab8:	0f 8f b0 00 00 00    	jg     c001ab6e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001aabe:	80 f9 0a             	cmp    cl,0xa
c001aac1:	0f 85 98 00 00 00    	jne    c001ab5f <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001aac7:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001aacc:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001aad0:	a8 df                	test   al,0xdf
c001aad2:	0f 94 c1             	sete   cl
c001aad5:	3c 23                	cmp    al,0x23
c001aad7:	0f 94 c2             	sete   dl
c001aada:	08 d1                	or     cl,dl
c001aadc:	75 4a                	jne    c001ab28 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001aade:	8d 50 f7             	lea    edx,[eax-0x9]
c001aae1:	80 fa 01             	cmp    dl,0x1
c001aae4:	76 42                	jbe    c001ab28 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001aae6:	3c 5b                	cmp    al,0x5b
c001aae8:	75 42                	jne    c001ab2c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001aaea:	80 fb 40             	cmp    bl,0x40
c001aaed:	75 39                	jne    c001ab28 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001aaef:	83 ec 0c             	sub    esp,0xc
c001aaf2:	8d 54 24 65          	lea    edx,[esp+0x65]
c001aaf6:	52                   	push   edx
c001aaf7:	e8 70 5c fe ff       	call   c000076c <strlen>
c001aafc:	83 c4 10             	add    esp,0x10
c001aaff:	83 f8 3f             	cmp    eax,0x3f
c001ab02:	77 6a                	ja     c001ab6e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ab04:	50                   	push   eax
c001ab05:	50                   	push   eax
c001ab06:	8d 54 24 61          	lea    edx,[esp+0x61]
c001ab0a:	52                   	push   edx
c001ab0b:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ab0f:	52                   	push   edx
c001ab10:	e8 f7 5c fe ff       	call   c000080c <strcpy>
c001ab15:	58                   	pop    eax
c001ab16:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ab1a:	52                   	push   edx
c001ab1b:	e8 4c 5c fe ff       	call   c000076c <strlen>
c001ab20:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001ab25:	83 c4 10             	add    esp,0x10
c001ab28:	31 d2                	xor    edx,edx
c001ab2a:	eb 3a                	jmp    c001ab66 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001ab2c:	80 fb 40             	cmp    bl,0x40
c001ab2f:	74 06                	je     c001ab37 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001ab31:	8d 44 24 58          	lea    eax,[esp+0x58]
c001ab35:	eb 20                	jmp    c001ab57 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001ab37:	50                   	push   eax
c001ab38:	50                   	push   eax
c001ab39:	55                   	push   ebp
c001ab3a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ab3e:	50                   	push   eax
c001ab3f:	e8 54 5d fe ff       	call   c0000898 <strcmp>
c001ab44:	83 c4 10             	add    esp,0x10
c001ab47:	85 c0                	test   eax,eax
c001ab49:	75 dd                	jne    c001ab28 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ab4b:	eb e4                	jmp    c001ab31 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001ab4d:	8d 50 01             	lea    edx,[eax+0x1]
c001ab50:	80 f9 3d             	cmp    cl,0x3d
c001ab53:	74 1d                	je     c001ab72 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001ab55:	89 d0                	mov    eax,edx
c001ab57:	8a 08                	mov    cl,BYTE PTR [eax]
c001ab59:	84 c9                	test   cl,cl
c001ab5b:	75 f0                	jne    c001ab4d <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001ab5d:	eb 0f                	jmp    c001ab6e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ab5f:	8d 50 01             	lea    edx,[eax+0x1]
c001ab62:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001ab66:	47                   	inc    edi
c001ab67:	89 d0                	mov    eax,edx
c001ab69:	e9 3b ff ff ff       	jmp    c001aaa9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001ab6e:	31 c0                	xor    eax,eax
c001ab70:	eb 33                	jmp    c001aba5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001ab72:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ab76:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001ab79:	50                   	push   eax
c001ab7a:	50                   	push   eax
c001ab7b:	8d 44 24 60          	lea    eax,[esp+0x60]
c001ab7f:	50                   	push   eax
c001ab80:	56                   	push   esi
c001ab81:	e8 12 5d fe ff       	call   c0000898 <strcmp>
c001ab86:	83 c4 10             	add    esp,0x10
c001ab89:	85 c0                	test   eax,eax
c001ab8b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ab8f:	75 97                	jne    c001ab28 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ab91:	51                   	push   ecx
c001ab92:	51                   	push   ecx
c001ab93:	52                   	push   edx
c001ab94:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001ab9b:	e8 6c 5c fe ff       	call   c000080c <strcpy>
c001aba0:	83 c4 10             	add    esp,0x10
c001aba3:	b0 01                	mov    al,0x1
c001aba5:	81 c4 2c 01 00 00    	add    esp,0x12c
c001abab:	5b                   	pop    ebx
c001abac:	5e                   	pop    esi
c001abad:	5f                   	pop    edi
c001abae:	5d                   	pop    ebp
c001abaf:	c3                   	ret    

c001abb0 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001abb0:	57                   	push   edi
c001abb1:	56                   	push   esi
c001abb2:	53                   	push   ebx
c001abb3:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001abb9:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001abc0:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001abc7:	53                   	push   ebx
c001abc8:	e8 9f 5b fe ff       	call   c000076c <strlen>
c001abcd:	89 34 24             	mov    DWORD PTR [esp],esi
c001abd0:	89 c7                	mov    edi,eax
c001abd2:	e8 95 5b fe ff       	call   c000076c <strlen>
c001abd7:	83 c4 10             	add    esp,0x10
c001abda:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001abde:	3d ff 00 00 00       	cmp    eax,0xff
c001abe3:	0f 87 d3 00 00 00    	ja     c001acbc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001abe9:	57                   	push   edi
c001abea:	57                   	push   edi
c001abeb:	56                   	push   esi
c001abec:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001abf0:	56                   	push   esi
c001abf1:	e8 16 5c fe ff       	call   c000080c <strcpy>
c001abf6:	58                   	pop    eax
c001abf7:	5a                   	pop    edx
c001abf8:	68 c2 c3 02 c0       	push   0xc002c3c2
c001abfd:	56                   	push   esi
c001abfe:	e8 49 5d fe ff       	call   c000094c <strcat>
c001ac03:	59                   	pop    ecx
c001ac04:	5f                   	pop    edi
c001ac05:	53                   	push   ebx
c001ac06:	56                   	push   esi
c001ac07:	e8 40 5d fe ff       	call   c000094c <strcat>
c001ac0c:	58                   	pop    eax
c001ac0d:	5a                   	pop    edx
c001ac0e:	68 6c c0 02 c0       	push   0xc002c06c
c001ac13:	56                   	push   esi
c001ac14:	e8 33 5d fe ff       	call   c000094c <strcat>
c001ac19:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ac20:	e8 f4 4b ff ff       	call   c000f819 <malloc>
c001ac25:	83 c4 0c             	add    esp,0xc
c001ac28:	89 c3                	mov    ebx,eax
c001ac2a:	ff 35 50 f7 02 c0    	push   DWORD PTR ds:0xc002f750
c001ac30:	56                   	push   esi
c001ac31:	50                   	push   eax
c001ac32:	e8 99 81 ff ff       	call   c0012dd0 <File::File(char const*, Process*)>
c001ac37:	83 c4 10             	add    esp,0x10
c001ac3a:	85 db                	test   ebx,ebx
c001ac3c:	74 7e                	je     c001acbc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001ac3e:	51                   	push   ecx
c001ac3f:	51                   	push   ecx
c001ac40:	6a 01                	push   0x1
c001ac42:	53                   	push   ebx
c001ac43:	e8 ec 81 ff ff       	call   c0012e34 <File::open(FileOpenMode)>
c001ac48:	83 c4 10             	add    esp,0x10
c001ac4b:	85 c0                	test   eax,eax
c001ac4d:	74 08                	je     c001ac57 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001ac4f:	83 ec 0c             	sub    esp,0xc
c001ac52:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ac54:	53                   	push   ebx
c001ac55:	eb 5f                	jmp    c001acb6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001ac57:	52                   	push   edx
c001ac58:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ac5c:	50                   	push   eax
c001ac5d:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ac61:	50                   	push   eax
c001ac62:	53                   	push   ebx
c001ac63:	e8 78 84 ff ff       	call   c00130e0 <File::stat(unsigned long long*, bool*)>
c001ac68:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ac6c:	83 c4 10             	add    esp,0x10
c001ac6f:	89 c1                	mov    ecx,eax
c001ac71:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001ac75:	74 31                	je     c001aca8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001ac77:	83 ec 0c             	sub    esp,0xc
c001ac7a:	50                   	push   eax
c001ac7b:	e8 99 4b ff ff       	call   c000f819 <malloc>
c001ac80:	89 c6                	mov    esi,eax
c001ac82:	58                   	pop    eax
c001ac83:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ac85:	8d 54 24 20          	lea    edx,[esp+0x20]
c001ac89:	52                   	push   edx
c001ac8a:	56                   	push   esi
c001ac8b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ac8f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ac93:	53                   	push   ebx
c001ac94:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ac97:	83 c4 20             	add    esp,0x20
c001ac9a:	85 c0                	test   eax,eax
c001ac9c:	75 0a                	jne    c001aca8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001ac9e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aca2:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001aca6:	74 18                	je     c001acc0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001aca8:	83 ec 0c             	sub    esp,0xc
c001acab:	53                   	push   ebx
c001acac:	e8 e1 81 ff ff       	call   c0012e92 <File::close()>
c001acb1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001acb3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001acb6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001acb9:	83 c4 10             	add    esp,0x10
c001acbc:	31 c0                	xor    eax,eax
c001acbe:	eb 3b                	jmp    c001acfb <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001acc0:	83 ec 0c             	sub    esp,0xc
c001acc3:	53                   	push   ebx
c001acc4:	e8 c9 81 ff ff       	call   c0012e92 <File::close()>
c001acc9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001accb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001acce:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001acd1:	83 c4 0c             	add    esp,0xc
c001acd4:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001acdb:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001ace2:	56                   	push   esi
c001ace3:	e8 70 fd ff ff       	call   c001aa58 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001ace8:	89 34 24             	mov    DWORD PTR [esp],esi
c001aceb:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001acef:	e8 35 4b ff ff       	call   c000f829 <free>
c001acf4:	83 c4 10             	add    esp,0x10
c001acf7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001acfb:	81 c4 20 01 00 00    	add    esp,0x120
c001ad01:	5b                   	pop    ebx
c001ad02:	5e                   	pop    esi
c001ad03:	5f                   	pop    edi
c001ad04:	c3                   	ret    

c001ad05 <Reg::getLine(char*, char*, char*)>:
c001ad05:	57                   	push   edi
c001ad06:	56                   	push   esi
c001ad07:	53                   	push   ebx
c001ad08:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ad0c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ad10:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ad14:	57                   	push   edi
c001ad15:	56                   	push   esi
c001ad16:	53                   	push   ebx
c001ad17:	68 71 c0 02 c0       	push   0xc002c071
c001ad1c:	e8 8f fe ff ff       	call   c001abb0 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001ad21:	83 c4 10             	add    esp,0x10
c001ad24:	84 c0                	test   al,al
c001ad26:	75 10                	jne    c001ad38 <Reg::getLine(char*, char*, char*)+0x33>
c001ad28:	57                   	push   edi
c001ad29:	56                   	push   esi
c001ad2a:	53                   	push   ebx
c001ad2b:	68 96 c0 02 c0       	push   0xc002c096
c001ad30:	e8 7b fe ff ff       	call   c001abb0 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001ad35:	83 c4 10             	add    esp,0x10
c001ad38:	5b                   	pop    ebx
c001ad39:	5e                   	pop    esi
c001ad3a:	5f                   	pop    edi
c001ad3b:	c3                   	ret    

c001ad3c <Reg::readInt(char*, char*, int*)>:
c001ad3c:	55                   	push   ebp
c001ad3d:	57                   	push   edi
c001ad3e:	56                   	push   esi
c001ad3f:	53                   	push   ebx
c001ad40:	81 ec f0 00 00 00    	sub    esp,0xf0
c001ad46:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001ad4a:	57                   	push   edi
c001ad4b:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001ad52:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001ad59:	e8 a7 ff ff ff       	call   c001ad05 <Reg::getLine(char*, char*, char*)>
c001ad5e:	83 c4 10             	add    esp,0x10
c001ad61:	84 c0                	test   al,al
c001ad63:	0f 84 b3 00 00 00    	je     c001ae1c <Reg::readInt(char*, char*, int*)+0xe0>
c001ad69:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001ad6d:	80 fa 2b             	cmp    dl,0x2b
c001ad70:	74 0c                	je     c001ad7e <Reg::readInt(char*, char*, int*)+0x42>
c001ad72:	80 fa 2d             	cmp    dl,0x2d
c001ad75:	75 0e                	jne    c001ad85 <Reg::readInt(char*, char*, int*)+0x49>
c001ad77:	ba 01 00 00 00       	mov    edx,0x1
c001ad7c:	eb 0b                	jmp    c001ad89 <Reg::readInt(char*, char*, int*)+0x4d>
c001ad7e:	ba 01 00 00 00       	mov    edx,0x1
c001ad83:	eb 02                	jmp    c001ad87 <Reg::readInt(char*, char*, int*)+0x4b>
c001ad85:	31 d2                	xor    edx,edx
c001ad87:	31 c0                	xor    eax,eax
c001ad89:	be 0a 00 00 00       	mov    esi,0xa
c001ad8e:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001ad93:	75 20                	jne    c001adb5 <Reg::readInt(char*, char*, int*)+0x79>
c001ad95:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001ad99:	80 f9 78             	cmp    cl,0x78
c001ad9c:	75 0a                	jne    c001ada8 <Reg::readInt(char*, char*, int*)+0x6c>
c001ad9e:	83 c2 02             	add    edx,0x2
c001ada1:	be 10 00 00 00       	mov    esi,0x10
c001ada6:	eb 0d                	jmp    c001adb5 <Reg::readInt(char*, char*, int*)+0x79>
c001ada8:	80 f9 62             	cmp    cl,0x62
c001adab:	75 08                	jne    c001adb5 <Reg::readInt(char*, char*, int*)+0x79>
c001adad:	83 c2 02             	add    edx,0x2
c001adb0:	be 02 00 00 00       	mov    esi,0x2
c001adb5:	01 d7                	add    edi,edx
c001adb7:	31 d2                	xor    edx,edx
c001adb9:	8a 1f                	mov    bl,BYTE PTR [edi]
c001adbb:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001adbf:	80 fb 0d             	cmp    bl,0xd
c001adc2:	0f 94 c3             	sete   bl
c001adc5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001adca:	0f 94 c1             	sete   cl
c001adcd:	08 cb                	or     bl,cl
c001adcf:	75 3a                	jne    c001ae0b <Reg::readInt(char*, char*, int*)+0xcf>
c001add1:	0f af d6             	imul   edx,esi
c001add4:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001add9:	83 fe 10             	cmp    esi,0x10
c001addc:	75 26                	jne    c001ae04 <Reg::readInt(char*, char*, int*)+0xc8>
c001adde:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001ade2:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001ade5:	89 e9                	mov    ecx,ebp
c001ade7:	80 f9 05             	cmp    cl,0x5
c001adea:	77 06                	ja     c001adf2 <Reg::readInt(char*, char*, int*)+0xb6>
c001adec:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001adf0:	eb 16                	jmp    c001ae08 <Reg::readInt(char*, char*, int*)+0xcc>
c001adf2:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001adf6:	83 e9 61             	sub    ecx,0x61
c001adf9:	80 f9 05             	cmp    cl,0x5
c001adfc:	77 06                	ja     c001ae04 <Reg::readInt(char*, char*, int*)+0xc8>
c001adfe:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001ae02:	eb 04                	jmp    c001ae08 <Reg::readInt(char*, char*, int*)+0xcc>
c001ae04:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001ae08:	47                   	inc    edi
c001ae09:	eb ae                	jmp    c001adb9 <Reg::readInt(char*, char*, int*)+0x7d>
c001ae0b:	84 c0                	test   al,al
c001ae0d:	74 02                	je     c001ae11 <Reg::readInt(char*, char*, int*)+0xd5>
c001ae0f:	f7 da                	neg    edx
c001ae11:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001ae18:	89 10                	mov    DWORD PTR [eax],edx
c001ae1a:	88 d8                	mov    al,bl
c001ae1c:	81 c4 ec 00 00 00    	add    esp,0xec
c001ae22:	5b                   	pop    ebx
c001ae23:	5e                   	pop    esi
c001ae24:	5f                   	pop    edi
c001ae25:	5d                   	pop    ebp
c001ae26:	c3                   	ret    

c001ae27 <Reg::readString(char*, char*, char*, int)>:
c001ae27:	57                   	push   edi
c001ae28:	56                   	push   esi
c001ae29:	53                   	push   ebx
c001ae2a:	81 ec d4 00 00 00    	sub    esp,0xd4
c001ae30:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001ae37:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001ae3b:	57                   	push   edi
c001ae3c:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001ae43:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001ae4a:	e8 b6 fe ff ff       	call   c001ad05 <Reg::getLine(char*, char*, char*)>
c001ae4f:	83 c4 10             	add    esp,0x10
c001ae52:	89 c6                	mov    esi,eax
c001ae54:	84 c0                	test   al,al
c001ae56:	74 44                	je     c001ae9c <Reg::readString(char*, char*, char*, int)+0x75>
c001ae58:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001ae5f:	31 c0                	xor    eax,eax
c001ae61:	4a                   	dec    edx
c001ae62:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001ae65:	84 c9                	test   cl,cl
c001ae67:	74 0f                	je     c001ae78 <Reg::readString(char*, char*, char*, int)+0x51>
c001ae69:	39 c2                	cmp    edx,eax
c001ae6b:	7e 0b                	jle    c001ae78 <Reg::readString(char*, char*, char*, int)+0x51>
c001ae6d:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001ae70:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001ae75:	40                   	inc    eax
c001ae76:	eb ea                	jmp    c001ae62 <Reg::readString(char*, char*, char*, int)+0x3b>
c001ae78:	83 ec 0c             	sub    esp,0xc
c001ae7b:	53                   	push   ebx
c001ae7c:	e8 eb 58 fe ff       	call   c000076c <strlen>
c001ae81:	83 c4 10             	add    esp,0x10
c001ae84:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001ae89:	75 11                	jne    c001ae9c <Reg::readString(char*, char*, char*, int)+0x75>
c001ae8b:	83 ec 0c             	sub    esp,0xc
c001ae8e:	53                   	push   ebx
c001ae8f:	e8 d8 58 fe ff       	call   c000076c <strlen>
c001ae94:	83 c4 10             	add    esp,0x10
c001ae97:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001ae9c:	81 c4 d0 00 00 00    	add    esp,0xd0
c001aea2:	89 f0                	mov    eax,esi
c001aea4:	5b                   	pop    ebx
c001aea5:	5e                   	pop    esi
c001aea6:	5f                   	pop    edi
c001aea7:	c3                   	ret    

c001aea8 <Reg::readBool(char*, char*, bool*)>:
c001aea8:	83 ec 20             	sub    esp,0x20
c001aeab:	8d 44 24 10          	lea    eax,[esp+0x10]
c001aeaf:	50                   	push   eax
c001aeb0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aeb4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aeb8:	e8 7f fe ff ff       	call   c001ad3c <Reg::readInt(char*, char*, int*)>
c001aebd:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001aec2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001aec6:	0f 95 02             	setne  BYTE PTR [edx]
c001aec9:	83 c4 2c             	add    esp,0x2c
c001aecc:	c3                   	ret    

c001aecd <Reg::readBoolWithDefault(char*, char*, bool)>:
c001aecd:	53                   	push   ebx
c001aece:	83 ec 1c             	sub    esp,0x1c
c001aed1:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001aed5:	8d 44 24 13          	lea    eax,[esp+0x13]
c001aed9:	50                   	push   eax
c001aeda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aede:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aee2:	e8 c1 ff ff ff       	call   c001aea8 <Reg::readBool(char*, char*, bool*)>
c001aee7:	83 c4 10             	add    esp,0x10
c001aeea:	84 c0                	test   al,al
c001aeec:	74 04                	je     c001aef2 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001aeee:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001aef2:	88 d8                	mov    al,bl
c001aef4:	83 c4 18             	add    esp,0x18
c001aef7:	5b                   	pop    ebx
c001aef8:	c3                   	ret    

c001aef9 <Reg::readIntWithDefault(char*, char*, int)>:
c001aef9:	53                   	push   ebx
c001aefa:	83 ec 1c             	sub    esp,0x1c
c001aefd:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001af01:	8d 44 24 10          	lea    eax,[esp+0x10]
c001af05:	50                   	push   eax
c001af06:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001af0a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001af0e:	e8 29 fe ff ff       	call   c001ad3c <Reg::readInt(char*, char*, int*)>
c001af13:	83 c4 10             	add    esp,0x10
c001af16:	84 c0                	test   al,al
c001af18:	74 04                	je     c001af1e <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001af1a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001af1e:	89 d8                	mov    eax,ebx
c001af20:	83 c4 18             	add    esp,0x18
c001af23:	5b                   	pop    ebx
c001af24:	c3                   	ret    

c001af25 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001af25:	57                   	push   edi
c001af26:	56                   	push   esi
c001af27:	56                   	push   esi
c001af28:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001af2c:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001af30:	56                   	push   esi
c001af31:	57                   	push   edi
c001af32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001af36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001af3a:	e8 e8 fe ff ff       	call   c001ae27 <Reg::readString(char*, char*, char*, int)>
c001af3f:	83 c4 10             	add    esp,0x10
c001af42:	84 c0                	test   al,al
c001af44:	75 1a                	jne    c001af60 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001af46:	51                   	push   ecx
c001af47:	56                   	push   esi
c001af48:	6a 00                	push   0x0
c001af4a:	57                   	push   edi
c001af4b:	e8 00 58 fe ff       	call   c0000750 <memset>
c001af50:	8d 4e ff             	lea    ecx,[esi-0x1]
c001af53:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001af57:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001af59:	83 c4 10             	add    esp,0x10
c001af5c:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001af60:	89 f8                	mov    eax,edi
c001af62:	5a                   	pop    edx
c001af63:	5e                   	pop    esi
c001af64:	5f                   	pop    edi
c001af65:	c3                   	ret    

c001af66 <Sys::eject(regs*)>:
c001af66:	83 ec 0c             	sub    esp,0xc
c001af69:	83 ca ff             	or     edx,0xffffffff
c001af6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af70:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001af73:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001af78:	83 e9 41             	sub    ecx,0x41
c001af7b:	83 f9 19             	cmp    ecx,0x19
c001af7e:	77 18                	ja     c001af98 <Sys::eject(regs*)+0x32>
c001af80:	8b 0c 8d 20 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd17e0]
c001af87:	85 c9                	test   ecx,ecx
c001af89:	74 0d                	je     c001af98 <Sys::eject(regs*)+0x32>
c001af8b:	83 ec 0c             	sub    esp,0xc
c001af8e:	51                   	push   ecx
c001af8f:	e8 ce b1 ff ff       	call   c0016162 <LogicalDisk::eject()>
c001af94:	83 c4 10             	add    esp,0x10
c001af97:	99                   	cdq    
c001af98:	83 c4 0c             	add    esp,0xc
c001af9b:	c3                   	ret    

c001af9c <Sys::exit(regs*)>:
c001af9c:	83 ec 18             	sub    esp,0x18
c001af9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001afa3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001afa6:	e8 d3 35 00 00       	call   c001e57e <terminateTask(int)>
c001afab:	83 c8 ff             	or     eax,0xffffffff
c001afae:	83 c4 1c             	add    esp,0x1c
c001afb1:	89 c2                	mov    edx,eax
c001afb3:	c3                   	ret    

c001afb4 <Sys::getCwd(regs*)>:
c001afb4:	83 ec 10             	sub    esp,0x10
c001afb7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001afbb:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001afbe:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001afc1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001afc6:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001afc9:	e8 04 7c ff ff       	call   c0012bd2 <Fs::getcwd(Process*, char*, int)>
c001afce:	83 c4 1c             	add    esp,0x1c
c001afd1:	99                   	cdq    
c001afd2:	c3                   	ret    

c001afd3 <Sys::getPID(regs*)>:
c001afd3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001afd8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001afdb:	8b 00                	mov    eax,DWORD PTR [eax]
c001afdd:	99                   	cdq    
c001afde:	c3                   	ret    

c001afdf <Sys::getRAMData(regs*)>:
c001afdf:	8b 0d 74 e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e274
c001afe5:	69 05 70 e2 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc002e270,0xc8
c001afef:	99                   	cdq    
c001aff0:	f7 f9                	idiv   ecx
c001aff2:	c1 e0 18             	shl    eax,0x18
c001aff5:	09 c8                	or     eax,ecx
c001aff7:	99                   	cdq    
c001aff8:	c3                   	ret    

c001aff9 <Sys::getVGAPtr(regs*)>:
c001aff9:	55                   	push   ebp
c001affa:	57                   	push   edi
c001affb:	56                   	push   esi
c001affc:	53                   	push   ebx
c001affd:	83 ec 18             	sub    esp,0x18
c001b000:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b004:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001b007:	e8 be 30 00 00       	call   c001e0ca <Thr::processFromPID(int)>
c001b00c:	83 c4 10             	add    esp,0x10
c001b00f:	89 c1                	mov    ecx,eax
c001b011:	b8 01 00 00 00       	mov    eax,0x1
c001b016:	85 c9                	test   ecx,ecx
c001b018:	74 59                	je     c001b073 <Sys::getVGAPtr(regs*)+0x7a>
c001b01a:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001b020:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001b024:	74 0c                	je     c001b032 <Sys::getVGAPtr(regs*)+0x39>
c001b026:	83 ec 0c             	sub    esp,0xc
c001b029:	53                   	push   ebx
c001b02a:	e8 a4 55 ff ff       	call   c00105d3 <setActiveTerminal(VgaText*)>
c001b02f:	83 c4 10             	add    esp,0x10
c001b032:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001b035:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001b038:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001b03d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b03f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001b042:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b045:	81 c3 82 00 00 00    	add    ebx,0x82
c001b04b:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001b051:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b054:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001b057:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001b05d:	50                   	push   eax
c001b05e:	50                   	push   eax
c001b05f:	53                   	push   ebx
c001b060:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b063:	05 a8 0f 00 00       	add    eax,0xfa8
c001b068:	50                   	push   eax
c001b069:	e8 9e 57 fe ff       	call   c000080c <strcpy>
c001b06e:	83 c4 10             	add    esp,0x10
c001b071:	31 c0                	xor    eax,eax
c001b073:	83 c4 0c             	add    esp,0xc
c001b076:	31 d2                	xor    edx,edx
c001b078:	5b                   	pop    ebx
c001b079:	5e                   	pop    esi
c001b07a:	5f                   	pop    edi
c001b07b:	5d                   	pop    ebp
c001b07c:	c3                   	ret    

c001b07d <Sys::loadDLL(regs*)>:
c001b07d:	56                   	push   esi
c001b07e:	53                   	push   ebx
c001b07f:	31 d2                	xor    edx,edx
c001b081:	51                   	push   ecx
c001b082:	b8 01 00 00 00       	mov    eax,0x1
c001b087:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b08b:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b08f:	0f 84 8c 00 00 00    	je     c001b121 <Sys::loadDLL(regs*)+0xa4>
c001b095:	83 ec 0c             	sub    esp,0xc
c001b098:	68 14 01 00 00       	push   0x114
c001b09d:	e8 77 47 ff ff       	call   c000f819 <malloc>
c001b0a2:	83 c4 0c             	add    esp,0xc
c001b0a5:	89 c3                	mov    ebx,eax
c001b0a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b0ac:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b0af:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b0b2:	53                   	push   ebx
c001b0b3:	e8 18 7d ff ff       	call   c0012dd0 <File::File(char const*, Process*)>
c001b0b8:	83 c4 10             	add    esp,0x10
c001b0bb:	31 d2                	xor    edx,edx
c001b0bd:	b8 02 00 00 00       	mov    eax,0x2
c001b0c2:	85 db                	test   ebx,ebx
c001b0c4:	74 5b                	je     c001b121 <Sys::loadDLL(regs*)+0xa4>
c001b0c6:	83 ec 0c             	sub    esp,0xc
c001b0c9:	53                   	push   ebx
c001b0ca:	e8 d3 7f ff ff       	call   c00130a2 <File::exists()>
c001b0cf:	83 c4 10             	add    esp,0x10
c001b0d2:	84 c0                	test   al,al
c001b0d4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b0d6:	75 11                	jne    c001b0e9 <Sys::loadDLL(regs*)+0x6c>
c001b0d8:	83 ec 0c             	sub    esp,0xc
c001b0db:	53                   	push   ebx
c001b0dc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b0df:	83 c4 10             	add    esp,0x10
c001b0e2:	b8 03 00 00 00       	mov    eax,0x3
c001b0e7:	eb 36                	jmp    c001b11f <Sys::loadDLL(regs*)+0xa2>
c001b0e9:	83 ec 0c             	sub    esp,0xc
c001b0ec:	53                   	push   ebx
c001b0ed:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b0f0:	58                   	pop    eax
c001b0f1:	5a                   	pop    edx
c001b0f2:	6a 00                	push   0x0
c001b0f4:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b0f7:	e8 0e 22 00 00       	call   c001d30a <Thr::loadDLL(char const*, bool)>
c001b0fc:	83 c4 10             	add    esp,0x10
c001b0ff:	89 c1                	mov    ecx,eax
c001b101:	31 d2                	xor    edx,edx
c001b103:	b8 04 00 00 00       	mov    eax,0x4
c001b108:	85 c9                	test   ecx,ecx
c001b10a:	74 15                	je     c001b121 <Sys::loadDLL(regs*)+0xa4>
c001b10c:	53                   	push   ebx
c001b10d:	53                   	push   ebx
c001b10e:	ff 35 28 e2 02 c0    	push   DWORD PTR ds:0xc002e228
c001b114:	51                   	push   ecx
c001b115:	e8 21 24 00 00       	call   c001d53b <Thr::executeDLL(unsigned long, void*)>
c001b11a:	83 c4 10             	add    esp,0x10
c001b11d:	31 c0                	xor    eax,eax
c001b11f:	31 d2                	xor    edx,edx
c001b121:	59                   	pop    ecx
c001b122:	5b                   	pop    ebx
c001b123:	5e                   	pop    esi
c001b124:	c3                   	ret    

c001b125 <Sys::read(regs*)>:
c001b125:	57                   	push   edi
c001b126:	56                   	push   esi
c001b127:	53                   	push   ebx
c001b128:	83 ec 10             	sub    esp,0x10
c001b12b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b12f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b132:	83 f8 02             	cmp    eax,0x2
c001b135:	77 10                	ja     c001b147 <Sys::read(regs*)+0x22>
c001b137:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b13c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b13f:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b145:	eb 0e                	jmp    c001b155 <Sys::read(regs*)+0x30>
c001b147:	83 ec 0c             	sub    esp,0xc
c001b14a:	50                   	push   eax
c001b14b:	e8 f9 61 ff ff       	call   c0011349 <getFromFileDescriptor(int)>
c001b150:	83 c4 10             	add    esp,0x10
c001b153:	89 c1                	mov    ecx,eax
c001b155:	83 c8 ff             	or     eax,0xffffffff
c001b158:	85 c9                	test   ecx,ecx
c001b15a:	89 c2                	mov    edx,eax
c001b15c:	74 28                	je     c001b186 <Sys::read(regs*)+0x61>
c001b15e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b166:	31 ff                	xor    edi,edi
c001b168:	83 ec 0c             	sub    esp,0xc
c001b16b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b16d:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b171:	52                   	push   edx
c001b172:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b175:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b178:	57                   	push   edi
c001b179:	56                   	push   esi
c001b17a:	51                   	push   ecx
c001b17b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b17e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b182:	83 c4 20             	add    esp,0x20
c001b185:	99                   	cdq    
c001b186:	83 c4 10             	add    esp,0x10
c001b189:	5b                   	pop    ebx
c001b18a:	5e                   	pop    esi
c001b18b:	5f                   	pop    edi
c001b18c:	c3                   	ret    

c001b18d <Sys::sbrk(regs*)>:
c001b18d:	56                   	push   esi
c001b18e:	53                   	push   ebx
c001b18f:	50                   	push   eax
c001b190:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b195:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b199:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b19c:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b19f:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001b1a5:	85 db                	test   ebx,ebx
c001b1a7:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b1aa:	74 02                	je     c001b1ae <Sys::sbrk(regs*)+0x21>
c001b1ac:	79 06                	jns    c001b1b4 <Sys::sbrk(regs*)+0x27>
c001b1ae:	89 f0                	mov    eax,esi
c001b1b0:	31 d2                	xor    edx,edx
c001b1b2:	eb 2a                	jmp    c001b1de <Sys::sbrk(regs*)+0x51>
c001b1b4:	83 c8 ff             	or     eax,0xffffffff
c001b1b7:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b1bd:	89 c2                	mov    edx,eax
c001b1bf:	77 1d                	ja     c001b1de <Sys::sbrk(regs*)+0x51>
c001b1c1:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b1c7:	50                   	push   eax
c001b1c8:	c1 ea 0c             	shr    edx,0xc
c001b1cb:	68 07 0c 00 00       	push   0xc07
c001b1d0:	52                   	push   edx
c001b1d1:	51                   	push   ecx
c001b1d2:	e8 71 6a ff ff       	call   c0011c48 <VAS::allocatePages(int, int)>
c001b1d7:	89 f0                	mov    eax,esi
c001b1d9:	31 d2                	xor    edx,edx
c001b1db:	83 c4 10             	add    esp,0x10
c001b1de:	59                   	pop    ecx
c001b1df:	5b                   	pop    ebx
c001b1e0:	5e                   	pop    esi
c001b1e1:	c3                   	ret    

c001b1e2 <Sys::setCwd(regs*)>:
c001b1e2:	83 ec 14             	sub    esp,0x14
c001b1e5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b1e9:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b1ec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b1f1:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b1f4:	e8 48 7f ff ff       	call   c0013141 <Fs::setcwd(Process*, char*)>
c001b1f9:	83 c4 1c             	add    esp,0x1c
c001b1fc:	99                   	cdq    
c001b1fd:	c3                   	ret    

c001b1fe <Sys::setTime(regs*)>:
c001b1fe:	55                   	push   ebp
c001b1ff:	31 c9                	xor    ecx,ecx
c001b201:	57                   	push   edi
c001b202:	bd 0c 00 00 00       	mov    ebp,0xc
c001b207:	56                   	push   esi
c001b208:	53                   	push   ebx
c001b209:	31 db                	xor    ebx,ebx
c001b20b:	83 ec 10             	sub    esp,0x10
c001b20e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b212:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001b215:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001b218:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c001b21b:	89 c2                	mov    edx,eax
c001b21d:	66 81 ef 6c 07       	sub    di,0x76c
c001b222:	83 e2 1f             	and    edx,0x1f
c001b225:	c1 e7 10             	shl    edi,0x10
c001b228:	42                   	inc    edx
c001b229:	c1 e8 05             	shr    eax,0x5
c001b22c:	88 d1                	mov    cl,dl
c001b22e:	31 d2                	xor    edx,edx
c001b230:	f7 f5                	div    ebp
c001b232:	89 dd                	mov    ebp,ebx
c001b234:	88 d5                	mov    ch,dl
c001b236:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001b23c:	0f b7 c1             	movzx  eax,cx
c001b23f:	31 d2                	xor    edx,edx
c001b241:	09 f8                	or     eax,edi
c001b243:	bf 3c 00 00 00       	mov    edi,0x3c
c001b248:	89 c1                	mov    ecx,eax
c001b24a:	89 f0                	mov    eax,esi
c001b24c:	f7 f7                	div    edi
c001b24e:	c1 e2 10             	shl    edx,0x10
c001b251:	09 d5                	or     ebp,edx
c001b253:	31 d2                	xor    edx,edx
c001b255:	89 eb                	mov    ebx,ebp
c001b257:	f7 f7                	div    edi
c001b259:	bf 10 0e 00 00       	mov    edi,0xe10
c001b25e:	88 d7                	mov    bh,dl
c001b260:	89 f0                	mov    eax,esi
c001b262:	31 d2                	xor    edx,edx
c001b264:	f7 f7                	div    edi
c001b266:	bf 18 00 00 00       	mov    edi,0x18
c001b26b:	31 d2                	xor    edx,edx
c001b26d:	f7 f7                	div    edi
c001b26f:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c001b274:	88 d3                	mov    bl,dl
c001b276:	53                   	push   ebx
c001b277:	51                   	push   ecx
c001b278:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b27e:	e8 07 87 ff ff       	call   c001398a <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b283:	83 c4 1c             	add    esp,0x1c
c001b286:	83 f0 01             	xor    eax,0x1
c001b289:	5b                   	pop    ebx
c001b28a:	0f b6 c0             	movzx  eax,al
c001b28d:	5e                   	pop    esi
c001b28e:	31 d2                	xor    edx,edx
c001b290:	5f                   	pop    edi
c001b291:	5d                   	pop    ebp
c001b292:	c3                   	ret    

c001b293 <Sys::timezone(regs*)>:
c001b293:	53                   	push   ebx
c001b294:	83 ec 08             	sub    esp,0x8
c001b297:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b29b:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b29f:	75 17                	jne    c001b2b8 <Sys::timezone(regs*)+0x25>
c001b2a1:	83 ec 0c             	sub    esp,0xc
c001b2a4:	68 b1 c0 02 c0       	push   0xc002c0b1
c001b2a9:	e8 c3 75 ff ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c001b2ae:	83 c8 ff             	or     eax,0xffffffff
c001b2b1:	83 c4 10             	add    esp,0x10
c001b2b4:	89 c2                	mov    edx,eax
c001b2b6:	eb 20                	jmp    c001b2d8 <Sys::timezone(regs*)+0x45>
c001b2b8:	83 ec 0c             	sub    esp,0xc
c001b2bb:	68 c6 c0 02 c0       	push   0xc002c0c6
c001b2c0:	e8 ac 75 ff ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c001b2c5:	58                   	pop    eax
c001b2c6:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b2c9:	e8 1e 84 ff ff       	call   c00136ec <User::loadClockSettings(int)>
c001b2ce:	83 c4 10             	add    esp,0x10
c001b2d1:	b8 01 00 00 00       	mov    eax,0x1
c001b2d6:	31 d2                	xor    edx,edx
c001b2d8:	83 c4 08             	add    esp,0x8
c001b2db:	5b                   	pop    ebx
c001b2dc:	c3                   	ret    

c001b2dd <Sys::write(regs*)>:
c001b2dd:	57                   	push   edi
c001b2de:	56                   	push   esi
c001b2df:	53                   	push   ebx
c001b2e0:	83 ec 10             	sub    esp,0x10
c001b2e3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b2e7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b2ea:	83 f8 02             	cmp    eax,0x2
c001b2ed:	77 10                	ja     c001b2ff <Sys::write(regs*)+0x22>
c001b2ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2f4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b2f7:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b2fd:	eb 0e                	jmp    c001b30d <Sys::write(regs*)+0x30>
c001b2ff:	83 ec 0c             	sub    esp,0xc
c001b302:	50                   	push   eax
c001b303:	e8 41 60 ff ff       	call   c0011349 <getFromFileDescriptor(int)>
c001b308:	83 c4 10             	add    esp,0x10
c001b30b:	89 c1                	mov    ecx,eax
c001b30d:	83 c8 ff             	or     eax,0xffffffff
c001b310:	85 c9                	test   ecx,ecx
c001b312:	89 c2                	mov    edx,eax
c001b314:	74 28                	je     c001b33e <Sys::write(regs*)+0x61>
c001b316:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b31e:	31 ff                	xor    edi,edi
c001b320:	83 ec 0c             	sub    esp,0xc
c001b323:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b325:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b329:	52                   	push   edx
c001b32a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b32d:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b330:	57                   	push   edi
c001b331:	56                   	push   esi
c001b332:	51                   	push   ecx
c001b333:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b336:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b33a:	83 c4 20             	add    esp,0x20
c001b33d:	99                   	cdq    
c001b33e:	83 c4 10             	add    esp,0x10
c001b341:	5b                   	pop    ebx
c001b342:	5e                   	pop    esi
c001b343:	5f                   	pop    edi
c001b344:	c3                   	ret    

c001b345 <Sys::wsbe(regs*)>:
c001b345:	57                   	push   edi
c001b346:	b9 0b 00 00 00       	mov    ecx,0xb
c001b34b:	56                   	push   esi
c001b34c:	be 05 c1 02 c0       	mov    esi,0xc002c105
c001b351:	53                   	push   ebx
c001b352:	83 ec 30             	sub    esp,0x30
c001b355:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b359:	fc                   	cld    
c001b35a:	83 ec 0c             	sub    esp,0xc
c001b35d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b35f:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b363:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b368:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b36b:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b371:	8b 06                	mov    eax,DWORD PTR [esi]
c001b373:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b376:	57                   	push   edi
c001b377:	e8 f0 53 fe ff       	call   c000076c <strlen>
c001b37c:	5a                   	pop    edx
c001b37d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b381:	52                   	push   edx
c001b382:	31 d2                	xor    edx,edx
c001b384:	57                   	push   edi
c001b385:	52                   	push   edx
c001b386:	50                   	push   eax
c001b387:	56                   	push   esi
c001b388:	ff d3                	call   ebx
c001b38a:	83 c4 14             	add    esp,0x14
c001b38d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b391:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b394:	e8 e5 31 00 00       	call   c001e57e <terminateTask(int)>
c001b399:	83 c4 40             	add    esp,0x40
c001b39c:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b3a1:	5b                   	pop    ebx
c001b3a2:	31 d2                	xor    edx,edx
c001b3a4:	5e                   	pop    esi
c001b3a5:	5f                   	pop    edi
c001b3a6:	c3                   	ret    

c001b3a7 <Sys::yield(regs*)>:
c001b3a7:	57                   	push   edi
c001b3a8:	56                   	push   esi
c001b3a9:	53                   	push   ebx
c001b3aa:	fa                   	cli    
c001b3ab:	ff 05 28 f7 02 c0    	inc    DWORD PTR ds:0xc002f728
c001b3b1:	e8 19 29 00 00       	call   c001dccf <schedule()>
c001b3b6:	a1 28 f7 02 c0       	mov    eax,ds:0xc002f728
c001b3bb:	48                   	dec    eax
c001b3bc:	a3 28 f7 02 c0       	mov    ds:0xc002f728,eax
c001b3c1:	75 01                	jne    c001b3c4 <Sys::yield(regs*)+0x1d>
c001b3c3:	fb                   	sti    
c001b3c4:	8b 35 90 e8 02 c0    	mov    esi,DWORD PTR ds:0xc002e890
c001b3ca:	8b 3d 94 e8 02 c0    	mov    edi,DWORD PTR ds:0xc002e894
c001b3d0:	89 f0                	mov    eax,esi
c001b3d2:	89 fb                	mov    ebx,edi
c001b3d4:	89 f1                	mov    ecx,esi
c001b3d6:	c1 e0 07             	shl    eax,0x7
c001b3d9:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b3dd:	25 80 30 0f 00       	and    eax,0xf3080
c001b3e2:	c1 eb 17             	shr    ebx,0x17
c001b3e5:	31 c8                	xor    eax,ecx
c001b3e7:	89 da                	mov    edx,ebx
c001b3e9:	5b                   	pop    ebx
c001b3ea:	5e                   	pop    esi
c001b3eb:	5f                   	pop    edi
c001b3ec:	c3                   	ret    

c001b3ed <sysCallSeekDir(regs*)>:
c001b3ed:	31 c0                	xor    eax,eax
c001b3ef:	31 d2                	xor    edx,edx
c001b3f1:	c3                   	ret    

c001b3f2 <sysCallTellDir(regs*)>:
c001b3f2:	31 c0                	xor    eax,eax
c001b3f4:	31 d2                	xor    edx,edx
c001b3f6:	c3                   	ret    

c001b3f7 <sysCallVerify(regs*)>:
c001b3f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b3fb:	31 d2                	xor    edx,edx
c001b3fd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b400:	c3                   	ret    

c001b401 <sysCallGetArgc(regs*)>:
c001b401:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b406:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b409:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b40f:	99                   	cdq    
c001b410:	c3                   	ret    

c001b411 <sysFormatDisk(regs*)>:
c001b411:	56                   	push   esi
c001b412:	53                   	push   ebx
c001b413:	53                   	push   ebx
c001b414:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b418:	8b 1d 94 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e394
c001b41e:	eb 25                	jmp    c001b445 <sysFormatDisk(regs*)+0x34>
c001b420:	83 ec 0c             	sub    esp,0xc
c001b423:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b426:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b428:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b42b:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b42e:	50                   	push   eax
c001b42f:	ff 34 85 20 e8 02 c0 	push   DWORD PTR [eax*4-0x3ffd17e0]
c001b436:	53                   	push   ebx
c001b437:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b43a:	83 c4 20             	add    esp,0x20
c001b43d:	83 f8 08             	cmp    eax,0x8
c001b440:	75 12                	jne    c001b454 <sysFormatDisk(regs*)+0x43>
c001b442:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b445:	85 db                	test   ebx,ebx
c001b447:	75 d7                	jne    c001b420 <sysFormatDisk(regs*)+0xf>
c001b449:	59                   	pop    ecx
c001b44a:	b8 03 00 00 00       	mov    eax,0x3
c001b44f:	31 d2                	xor    edx,edx
c001b451:	5b                   	pop    ebx
c001b452:	5e                   	pop    esi
c001b453:	c3                   	ret    
c001b454:	85 c0                	test   eax,eax
c001b456:	74 1b                	je     c001b473 <sysFormatDisk(regs*)+0x62>
c001b458:	83 f8 09             	cmp    eax,0x9
c001b45b:	74 0b                	je     c001b468 <sysFormatDisk(regs*)+0x57>
c001b45d:	59                   	pop    ecx
c001b45e:	b8 02 00 00 00       	mov    eax,0x2
c001b463:	31 d2                	xor    edx,edx
c001b465:	5b                   	pop    ebx
c001b466:	5e                   	pop    esi
c001b467:	c3                   	ret    
c001b468:	59                   	pop    ecx
c001b469:	b8 01 00 00 00       	mov    eax,0x1
c001b46e:	31 d2                	xor    edx,edx
c001b470:	5b                   	pop    ebx
c001b471:	5e                   	pop    esi
c001b472:	c3                   	ret    
c001b473:	59                   	pop    ecx
c001b474:	31 c0                	xor    eax,eax
c001b476:	31 d2                	xor    edx,edx
c001b478:	5b                   	pop    ebx
c001b479:	5e                   	pop    esi
c001b47a:	c3                   	ret    

c001b47b <sysSetDiskVolumeLabel(regs*)>:
c001b47b:	56                   	push   esi
c001b47c:	53                   	push   ebx
c001b47d:	53                   	push   ebx
c001b47e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b482:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b485:	83 f8 19             	cmp    eax,0x19
c001b488:	77 29                	ja     c001b4b3 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b48a:	8b 0c 85 20 e8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd17e0]
c001b491:	85 c9                	test   ecx,ecx
c001b493:	74 1e                	je     c001b4b3 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b495:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b498:	85 d2                	test   edx,edx
c001b49a:	74 17                	je     c001b4b3 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b49c:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b4a2:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b4a4:	52                   	push   edx
c001b4a5:	50                   	push   eax
c001b4a6:	51                   	push   ecx
c001b4a7:	53                   	push   ebx
c001b4a8:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b4ab:	83 c4 10             	add    esp,0x10
c001b4ae:	99                   	cdq    
c001b4af:	59                   	pop    ecx
c001b4b0:	5b                   	pop    ebx
c001b4b1:	5e                   	pop    esi
c001b4b2:	c3                   	ret    
c001b4b3:	59                   	pop    ecx
c001b4b4:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b4b9:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b4be:	5b                   	pop    ebx
c001b4bf:	5e                   	pop    esi
c001b4c0:	c3                   	ret    

c001b4c1 <sysGetDiskVolumeLabel(regs*)>:
c001b4c1:	57                   	push   edi
c001b4c2:	56                   	push   esi
c001b4c3:	53                   	push   ebx
c001b4c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4c8:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b4cb:	83 fa 19             	cmp    edx,0x19
c001b4ce:	77 34                	ja     c001b504 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b4d0:	8b 0c 95 20 e8 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd17e0]
c001b4d7:	85 c9                	test   ecx,ecx
c001b4d9:	74 29                	je     c001b504 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b4db:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b4de:	85 db                	test   ebx,ebx
c001b4e0:	74 22                	je     c001b504 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b4e2:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b4e5:	85 c0                	test   eax,eax
c001b4e7:	74 1b                	je     c001b504 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b4e9:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b4ef:	83 ec 0c             	sub    esp,0xc
c001b4f2:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b4f4:	50                   	push   eax
c001b4f5:	53                   	push   ebx
c001b4f6:	52                   	push   edx
c001b4f7:	51                   	push   ecx
c001b4f8:	56                   	push   esi
c001b4f9:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b4fc:	83 c4 20             	add    esp,0x20
c001b4ff:	99                   	cdq    
c001b500:	5b                   	pop    ebx
c001b501:	5e                   	pop    esi
c001b502:	5f                   	pop    edi
c001b503:	c3                   	ret    
c001b504:	5b                   	pop    ebx
c001b505:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b50a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b50f:	5e                   	pop    esi
c001b510:	5f                   	pop    edi
c001b511:	c3                   	ret    

c001b512 <sysShutdown(regs*)>:
c001b512:	83 ec 0c             	sub    esp,0xc
c001b515:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b519:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b51c:	85 c0                	test   eax,eax
c001b51e:	74 18                	je     c001b538 <sysShutdown(regs*)+0x26>
c001b520:	83 f8 01             	cmp    eax,0x1
c001b523:	74 38                	je     c001b55d <sysShutdown(regs*)+0x4b>
c001b525:	83 f8 02             	cmp    eax,0x2
c001b528:	74 24                	je     c001b54e <sysShutdown(regs*)+0x3c>
c001b52a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b52f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b534:	83 c4 0c             	add    esp,0xc
c001b537:	c3                   	ret    
c001b538:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c001b53d:	8b 10                	mov    edx,DWORD PTR [eax]
c001b53f:	6a 00                	push   0x0
c001b541:	6a 00                	push   0x0
c001b543:	6a 00                	push   0x0
c001b545:	50                   	push   eax
c001b546:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b549:	83 c4 10             	add    esp,0x10
c001b54c:	eb dc                	jmp    c001b52a <sysShutdown(regs*)+0x18>
c001b54e:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c001b553:	8b 10                	mov    edx,DWORD PTR [eax]
c001b555:	6a 00                	push   0x0
c001b557:	6a 00                	push   0x0
c001b559:	6a 01                	push   0x1
c001b55b:	eb e8                	jmp    c001b545 <sysShutdown(regs*)+0x33>
c001b55d:	a1 a0 e8 02 c0       	mov    eax,ds:0xc002e8a0
c001b562:	85 c0                	test   eax,eax
c001b564:	74 02                	je     c001b568 <sysShutdown(regs*)+0x56>
c001b566:	ff d0                	call   eax
c001b568:	31 c0                	xor    eax,eax
c001b56a:	31 d2                	xor    edx,edx
c001b56c:	83 c4 0c             	add    esp,0xc
c001b56f:	c3                   	ret    

c001b570 <sysCallRealpath(regs*)>:
c001b570:	83 ec 0c             	sub    esp,0xc
c001b573:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b577:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b57a:	85 d2                	test   edx,edx
c001b57c:	74 07                	je     c001b585 <sysCallRealpath(regs*)+0x15>
c001b57e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b581:	85 c0                	test   eax,eax
c001b583:	75 0b                	jne    c001b590 <sysCallRealpath(regs*)+0x20>
c001b585:	b8 01 00 00 00       	mov    eax,0x1
c001b58a:	31 d2                	xor    edx,edx
c001b58c:	83 c4 0c             	add    esp,0xc
c001b58f:	c3                   	ret    
c001b590:	51                   	push   ecx
c001b591:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b597:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b59a:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b5a0:	51                   	push   ecx
c001b5a1:	52                   	push   edx
c001b5a2:	50                   	push   eax
c001b5a3:	e8 7e 76 ff ff       	call   c0012c26 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b5a8:	83 c4 10             	add    esp,0x10
c001b5ab:	31 c0                	xor    eax,eax
c001b5ad:	31 d2                	xor    edx,edx
c001b5af:	83 c4 0c             	add    esp,0xc
c001b5b2:	c3                   	ret    

c001b5b3 <sysCallReadDir(regs*)>:
c001b5b3:	53                   	push   ebx
c001b5b4:	83 ec 18             	sub    esp,0x18
c001b5b7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b5bb:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b5be:	83 f8 02             	cmp    eax,0x2
c001b5c1:	76 60                	jbe    c001b623 <sysCallReadDir(regs*)+0x70>
c001b5c3:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c001b5ca:	77 48                	ja     c001b614 <sysCallReadDir(regs*)+0x61>
c001b5cc:	83 ec 0c             	sub    esp,0xc
c001b5cf:	50                   	push   eax
c001b5d0:	e8 74 5d ff ff       	call   c0011349 <getFromFileDescriptor(int)>
c001b5d5:	83 c4 10             	add    esp,0x10
c001b5d8:	85 c0                	test   eax,eax
c001b5da:	74 38                	je     c001b614 <sysCallReadDir(regs*)+0x61>
c001b5dc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b5e4:	83 ec 0c             	sub    esp,0xc
c001b5e7:	8b 10                	mov    edx,DWORD PTR [eax]
c001b5e9:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b5ed:	51                   	push   ecx
c001b5ee:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b5f1:	6a 00                	push   0x0
c001b5f3:	68 10 01 00 00       	push   0x110
c001b5f8:	50                   	push   eax
c001b5f9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b5fc:	83 c4 20             	add    esp,0x20
c001b5ff:	85 c0                	test   eax,eax
c001b601:	74 29                	je     c001b62c <sysCallReadDir(regs*)+0x79>
c001b603:	83 f8 07             	cmp    eax,0x7
c001b606:	74 1b                	je     c001b623 <sysCallReadDir(regs*)+0x70>
c001b608:	b8 02 00 00 00       	mov    eax,0x2
c001b60d:	31 d2                	xor    edx,edx
c001b60f:	83 c4 18             	add    esp,0x18
c001b612:	5b                   	pop    ebx
c001b613:	c3                   	ret    
c001b614:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b619:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b61e:	83 c4 18             	add    esp,0x18
c001b621:	5b                   	pop    ebx
c001b622:	c3                   	ret    
c001b623:	b8 01 00 00 00       	mov    eax,0x1
c001b628:	31 d2                	xor    edx,edx
c001b62a:	eb e3                	jmp    c001b60f <sysCallReadDir(regs*)+0x5c>
c001b62c:	31 c0                	xor    eax,eax
c001b62e:	31 d2                	xor    edx,edx
c001b630:	eb dd                	jmp    c001b60f <sysCallReadDir(regs*)+0x5c>

c001b632 <sysCallIsATTY(regs*)>:
c001b632:	83 ec 0c             	sub    esp,0xc
c001b635:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b639:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b63c:	83 f8 02             	cmp    eax,0x2
c001b63f:	76 07                	jbe    c001b648 <sysCallIsATTY(regs*)+0x16>
c001b641:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b646:	75 26                	jne    c001b66e <sysCallIsATTY(regs*)+0x3c>
c001b648:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b64d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b650:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b656:	85 c0                	test   eax,eax
c001b658:	74 24                	je     c001b67e <sysCallIsATTY(regs*)+0x4c>
c001b65a:	83 ec 0c             	sub    esp,0xc
c001b65d:	8b 10                	mov    edx,DWORD PTR [eax]
c001b65f:	50                   	push   eax
c001b660:	ff 12                	call   DWORD PTR [edx]
c001b662:	31 d2                	xor    edx,edx
c001b664:	0f b6 c0             	movzx  eax,al
c001b667:	83 c4 10             	add    esp,0x10
c001b66a:	83 c4 0c             	add    esp,0xc
c001b66d:	c3                   	ret    
c001b66e:	83 ec 0c             	sub    esp,0xc
c001b671:	50                   	push   eax
c001b672:	e8 d2 5c ff ff       	call   c0011349 <getFromFileDescriptor(int)>
c001b677:	83 c4 10             	add    esp,0x10
c001b67a:	85 c0                	test   eax,eax
c001b67c:	75 dc                	jne    c001b65a <sysCallIsATTY(regs*)+0x28>
c001b67e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b683:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b688:	83 c4 0c             	add    esp,0xc
c001b68b:	c3                   	ret    

c001b68c <sysCallSeek(regs*)>:
c001b68c:	53                   	push   ebx
c001b68d:	83 ec 08             	sub    esp,0x8
c001b690:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b694:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b697:	8d 50 fd             	lea    edx,[eax-0x3]
c001b69a:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001b6a0:	77 32                	ja     c001b6d4 <sysCallSeek(regs*)+0x48>
c001b6a2:	83 ec 0c             	sub    esp,0xc
c001b6a5:	50                   	push   eax
c001b6a6:	e8 9e 5c ff ff       	call   c0011349 <getFromFileDescriptor(int)>
c001b6ab:	83 c4 0c             	add    esp,0xc
c001b6ae:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b6b1:	31 db                	xor    ebx,ebx
c001b6b3:	53                   	push   ebx
c001b6b4:	51                   	push   ecx
c001b6b5:	50                   	push   eax
c001b6b6:	e8 37 78 ff ff       	call   c0012ef2 <File::seek(unsigned long long)>
c001b6bb:	83 c4 10             	add    esp,0x10
c001b6be:	85 c0                	test   eax,eax
c001b6c0:	0f 95 c0             	setne  al
c001b6c3:	31 d2                	xor    edx,edx
c001b6c5:	0f b6 c0             	movzx  eax,al
c001b6c8:	f7 d8                	neg    eax
c001b6ca:	83 d2 00             	adc    edx,0x0
c001b6cd:	83 c4 08             	add    esp,0x8
c001b6d0:	f7 da                	neg    edx
c001b6d2:	5b                   	pop    ebx
c001b6d3:	c3                   	ret    
c001b6d4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b6d9:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b6de:	83 c4 08             	add    esp,0x8
c001b6e1:	5b                   	pop    ebx
c001b6e2:	c3                   	ret    

c001b6e3 <sysCallTell(regs*)>:
c001b6e3:	53                   	push   ebx
c001b6e4:	83 ec 08             	sub    esp,0x8
c001b6e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b6eb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b6ee:	83 f8 02             	cmp    eax,0x2
c001b6f1:	76 4d                	jbe    c001b740 <sysCallTell(regs*)+0x5d>
c001b6f3:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b6f8:	76 19                	jbe    c001b713 <sysCallTell(regs*)+0x30>
c001b6fa:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b6fd:	31 d2                	xor    edx,edx
c001b6ff:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b705:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b70c:	31 c0                	xor    eax,eax
c001b70e:	83 c4 08             	add    esp,0x8
c001b711:	5b                   	pop    ebx
c001b712:	c3                   	ret    
c001b713:	83 ec 0c             	sub    esp,0xc
c001b716:	50                   	push   eax
c001b717:	e8 2d 5c ff ff       	call   c0011349 <getFromFileDescriptor(int)>
c001b71c:	5a                   	pop    edx
c001b71d:	59                   	pop    ecx
c001b71e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b721:	50                   	push   eax
c001b722:	e8 21 78 ff ff       	call   c0012f48 <File::tell(unsigned long long*)>
c001b727:	83 c4 10             	add    esp,0x10
c001b72a:	85 c0                	test   eax,eax
c001b72c:	0f 95 c0             	setne  al
c001b72f:	31 d2                	xor    edx,edx
c001b731:	0f b6 c0             	movzx  eax,al
c001b734:	f7 d8                	neg    eax
c001b736:	83 d2 00             	adc    edx,0x0
c001b739:	83 c4 08             	add    esp,0x8
c001b73c:	f7 da                	neg    edx
c001b73e:	5b                   	pop    ebx
c001b73f:	c3                   	ret    
c001b740:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b745:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b74a:	83 c4 08             	add    esp,0x8
c001b74d:	5b                   	pop    ebx
c001b74e:	c3                   	ret    

c001b74f <sysCallSize(regs*)>:
c001b74f:	53                   	push   ebx
c001b750:	83 ec 18             	sub    esp,0x18
c001b753:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b757:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b75a:	83 f8 02             	cmp    eax,0x2
c001b75d:	76 53                	jbe    c001b7b2 <sysCallSize(regs*)+0x63>
c001b75f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b764:	76 19                	jbe    c001b77f <sysCallSize(regs*)+0x30>
c001b766:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b769:	31 d2                	xor    edx,edx
c001b76b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b771:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b778:	31 c0                	xor    eax,eax
c001b77a:	83 c4 18             	add    esp,0x18
c001b77d:	5b                   	pop    ebx
c001b77e:	c3                   	ret    
c001b77f:	83 ec 0c             	sub    esp,0xc
c001b782:	50                   	push   eax
c001b783:	e8 c1 5b ff ff       	call   c0011349 <getFromFileDescriptor(int)>
c001b788:	83 c4 0c             	add    esp,0xc
c001b78b:	8d 54 24 13          	lea    edx,[esp+0x13]
c001b78f:	52                   	push   edx
c001b790:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b793:	50                   	push   eax
c001b794:	e8 47 79 ff ff       	call   c00130e0 <File::stat(unsigned long long*, bool*)>
c001b799:	83 c4 10             	add    esp,0x10
c001b79c:	85 c0                	test   eax,eax
c001b79e:	0f 95 c0             	setne  al
c001b7a1:	31 d2                	xor    edx,edx
c001b7a3:	0f b6 c0             	movzx  eax,al
c001b7a6:	f7 d8                	neg    eax
c001b7a8:	83 d2 00             	adc    edx,0x0
c001b7ab:	83 c4 18             	add    esp,0x18
c001b7ae:	f7 da                	neg    edx
c001b7b0:	5b                   	pop    ebx
c001b7b1:	c3                   	ret    
c001b7b2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b7b7:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b7bc:	83 c4 18             	add    esp,0x18
c001b7bf:	5b                   	pop    ebx
c001b7c0:	c3                   	ret    

c001b7c1 <sysCallSizeFromFilename(regs*)>:
c001b7c1:	57                   	push   edi
c001b7c2:	56                   	push   esi
c001b7c3:	53                   	push   ebx
c001b7c4:	83 ec 20             	sub    esp,0x20
c001b7c7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b7cb:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c001b7ce:	83 fb 02             	cmp    ebx,0x2
c001b7d1:	0f 86 88 00 00 00    	jbe    c001b85f <sysCallSizeFromFilename(regs*)+0x9e>
c001b7d7:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001b7dd:	76 1b                	jbe    c001b7fa <sysCallSizeFromFilename(regs*)+0x39>
c001b7df:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001b7e2:	31 d2                	xor    edx,edx
c001b7e4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b7ea:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b7f1:	83 c4 20             	add    esp,0x20
c001b7f4:	31 c0                	xor    eax,eax
c001b7f6:	5b                   	pop    ebx
c001b7f7:	5e                   	pop    esi
c001b7f8:	5f                   	pop    edi
c001b7f9:	c3                   	ret    
c001b7fa:	83 ec 0c             	sub    esp,0xc
c001b7fd:	68 14 01 00 00       	push   0x114
c001b802:	e8 12 40 ff ff       	call   c000f819 <malloc>
c001b807:	83 c4 0c             	add    esp,0xc
c001b80a:	89 c7                	mov    edi,eax
c001b80c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b811:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b814:	53                   	push   ebx
c001b815:	57                   	push   edi
c001b816:	e8 b5 75 ff ff       	call   c0012dd0 <File::File(char const*, Process*)>
c001b81b:	83 c4 0c             	add    esp,0xc
c001b81e:	8d 44 24 23          	lea    eax,[esp+0x23]
c001b822:	50                   	push   eax
c001b823:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b826:	57                   	push   edi
c001b827:	e8 b4 78 ff ff       	call   c00130e0 <File::stat(unsigned long long*, bool*)>
c001b82c:	83 c4 10             	add    esp,0x10
c001b82f:	85 ff                	test   edi,edi
c001b831:	74 14                	je     c001b847 <sysCallSizeFromFilename(regs*)+0x86>
c001b833:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b837:	8b 17                	mov    edx,DWORD PTR [edi]
c001b839:	83 ec 0c             	sub    esp,0xc
c001b83c:	57                   	push   edi
c001b83d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b840:	83 c4 10             	add    esp,0x10
c001b843:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b847:	85 c0                	test   eax,eax
c001b849:	0f 95 c0             	setne  al
c001b84c:	31 d2                	xor    edx,edx
c001b84e:	0f b6 c0             	movzx  eax,al
c001b851:	f7 d8                	neg    eax
c001b853:	83 d2 00             	adc    edx,0x0
c001b856:	83 c4 20             	add    esp,0x20
c001b859:	f7 da                	neg    edx
c001b85b:	5b                   	pop    ebx
c001b85c:	5e                   	pop    esi
c001b85d:	5f                   	pop    edi
c001b85e:	c3                   	ret    
c001b85f:	83 c4 20             	add    esp,0x20
c001b862:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b867:	5b                   	pop    ebx
c001b868:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b86d:	5e                   	pop    esi
c001b86e:	5f                   	pop    edi
c001b86f:	c3                   	ret    

c001b870 <sysCallClose(regs*)>:
c001b870:	53                   	push   ebx
c001b871:	83 ec 08             	sub    esp,0x8
c001b874:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b878:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b87b:	83 f8 02             	cmp    eax,0x2
c001b87e:	76 41                	jbe    c001b8c1 <sysCallClose(regs*)+0x51>
c001b880:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001b886:	83 fa 01             	cmp    edx,0x1
c001b889:	76 2d                	jbe    c001b8b8 <sysCallClose(regs*)+0x48>
c001b88b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b890:	77 2f                	ja     c001b8c1 <sysCallClose(regs*)+0x51>
c001b892:	83 ec 0c             	sub    esp,0xc
c001b895:	50                   	push   eax
c001b896:	e8 ae 5a ff ff       	call   c0011349 <getFromFileDescriptor(int)>
c001b89b:	89 c3                	mov    ebx,eax
c001b89d:	89 04 24             	mov    DWORD PTR [esp],eax
c001b8a0:	e8 ed 75 ff ff       	call   c0012e92 <File::close()>
c001b8a5:	83 c4 10             	add    esp,0x10
c001b8a8:	85 db                	test   ebx,ebx
c001b8aa:	74 0c                	je     c001b8b8 <sysCallClose(regs*)+0x48>
c001b8ac:	83 ec 0c             	sub    esp,0xc
c001b8af:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b8b1:	53                   	push   ebx
c001b8b2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b8b5:	83 c4 10             	add    esp,0x10
c001b8b8:	31 c0                	xor    eax,eax
c001b8ba:	31 d2                	xor    edx,edx
c001b8bc:	83 c4 08             	add    esp,0x8
c001b8bf:	5b                   	pop    ebx
c001b8c0:	c3                   	ret    
c001b8c1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b8c6:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b8cb:	83 c4 08             	add    esp,0x8
c001b8ce:	5b                   	pop    ebx
c001b8cf:	c3                   	ret    

c001b8d0 <sysCallOpenDir(regs*)>:
c001b8d0:	56                   	push   esi
c001b8d1:	53                   	push   ebx
c001b8d2:	53                   	push   ebx
c001b8d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b8d7:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001b8da:	85 f6                	test   esi,esi
c001b8dc:	74 59                	je     c001b937 <sysCallOpenDir(regs*)+0x67>
c001b8de:	83 ec 0c             	sub    esp,0xc
c001b8e1:	68 14 01 00 00       	push   0x114
c001b8e6:	e8 2e 3f ff ff       	call   c000f819 <malloc>
c001b8eb:	83 c4 0c             	add    esp,0xc
c001b8ee:	89 c6                	mov    esi,eax
c001b8f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8f5:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b8f8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b8fb:	56                   	push   esi
c001b8fc:	e8 7b 79 ff ff       	call   c001327c <Directory::Directory(char const*, Process*)>
c001b901:	83 c4 10             	add    esp,0x10
c001b904:	85 f6                	test   esi,esi
c001b906:	74 2f                	je     c001b937 <sysCallOpenDir(regs*)+0x67>
c001b908:	83 ec 0c             	sub    esp,0xc
c001b90b:	56                   	push   esi
c001b90c:	e8 cf 79 ff ff       	call   c00132e0 <Directory::open()>
c001b911:	83 c4 10             	add    esp,0x10
c001b914:	85 c0                	test   eax,eax
c001b916:	75 1f                	jne    c001b937 <sysCallOpenDir(regs*)+0x67>
c001b918:	83 ec 0c             	sub    esp,0xc
c001b91b:	56                   	push   esi
c001b91c:	e8 33 57 ff ff       	call   c0011054 <UnixFile::getFileDescriptor()>
c001b921:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b924:	83 c4 10             	add    esp,0x10
c001b927:	89 02                	mov    DWORD PTR [edx],eax
c001b929:	c1 f8 1f             	sar    eax,0x1f
c001b92c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b92f:	31 c0                	xor    eax,eax
c001b931:	59                   	pop    ecx
c001b932:	31 d2                	xor    edx,edx
c001b934:	5b                   	pop    ebx
c001b935:	5e                   	pop    esi
c001b936:	c3                   	ret    
c001b937:	59                   	pop    ecx
c001b938:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b93d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b942:	5b                   	pop    ebx
c001b943:	5e                   	pop    esi
c001b944:	c3                   	ret    

c001b945 <sysCallCloseDir(regs*)>:
c001b945:	53                   	push   ebx
c001b946:	83 ec 08             	sub    esp,0x8
c001b949:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b94d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b950:	8d 50 fd             	lea    edx,[eax-0x3]
c001b953:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001b959:	77 2f                	ja     c001b98a <sysCallCloseDir(regs*)+0x45>
c001b95b:	83 ec 0c             	sub    esp,0xc
c001b95e:	50                   	push   eax
c001b95f:	e8 e5 59 ff ff       	call   c0011349 <getFromFileDescriptor(int)>
c001b964:	89 c3                	mov    ebx,eax
c001b966:	89 04 24             	mov    DWORD PTR [esp],eax
c001b969:	e8 ce 79 ff ff       	call   c001333c <Directory::close()>
c001b96e:	83 c4 10             	add    esp,0x10
c001b971:	85 db                	test   ebx,ebx
c001b973:	74 0c                	je     c001b981 <sysCallCloseDir(regs*)+0x3c>
c001b975:	83 ec 0c             	sub    esp,0xc
c001b978:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b97a:	53                   	push   ebx
c001b97b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b97e:	83 c4 10             	add    esp,0x10
c001b981:	31 c0                	xor    eax,eax
c001b983:	31 d2                	xor    edx,edx
c001b985:	83 c4 08             	add    esp,0x8
c001b988:	5b                   	pop    ebx
c001b989:	c3                   	ret    
c001b98a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b98f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b994:	83 c4 08             	add    esp,0x8
c001b997:	5b                   	pop    ebx
c001b998:	c3                   	ret    

c001b999 <sysCallMakeDir(regs*)>:
c001b999:	56                   	push   esi
c001b99a:	53                   	push   ebx
c001b99b:	83 ec 10             	sub    esp,0x10
c001b99e:	68 14 01 00 00       	push   0x114
c001b9a3:	e8 71 3e ff ff       	call   c000f819 <malloc>
c001b9a8:	83 c4 0c             	add    esp,0xc
c001b9ab:	89 c3                	mov    ebx,eax
c001b9ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9b2:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b9b5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b9b9:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b9bc:	53                   	push   ebx
c001b9bd:	e8 ba 78 ff ff       	call   c001327c <Directory::Directory(char const*, Process*)>
c001b9c2:	83 c4 10             	add    esp,0x10
c001b9c5:	85 db                	test   ebx,ebx
c001b9c7:	74 32                	je     c001b9fb <sysCallMakeDir(regs*)+0x62>
c001b9c9:	83 ec 0c             	sub    esp,0xc
c001b9cc:	53                   	push   ebx
c001b9cd:	e8 ee 7a ff ff       	call   c00134c0 <Directory::create()>
c001b9d2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b9d5:	89 c6                	mov    esi,eax
c001b9d7:	e8 60 79 ff ff       	call   c001333c <Directory::close()>
c001b9dc:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b9de:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b9e1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b9e4:	83 c4 10             	add    esp,0x10
c001b9e7:	31 c0                	xor    eax,eax
c001b9e9:	59                   	pop    ecx
c001b9ea:	85 f6                	test   esi,esi
c001b9ec:	5b                   	pop    ebx
c001b9ed:	0f 95 c0             	setne  al
c001b9f0:	5e                   	pop    esi
c001b9f1:	31 d2                	xor    edx,edx
c001b9f3:	f7 d8                	neg    eax
c001b9f5:	83 d2 00             	adc    edx,0x0
c001b9f8:	f7 da                	neg    edx
c001b9fa:	c3                   	ret    
c001b9fb:	59                   	pop    ecx
c001b9fc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba01:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba06:	5b                   	pop    ebx
c001ba07:	5e                   	pop    esi
c001ba08:	c3                   	ret    

c001ba09 <sysCallWait(regs*)>:
c001ba09:	83 ec 10             	sub    esp,0x10
c001ba0c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ba10:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001ba13:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001ba16:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001ba19:	e8 b4 24 00 00       	call   c001ded2 <waitTask(int, int*, int)>
c001ba1e:	83 c4 1c             	add    esp,0x1c
c001ba21:	99                   	cdq    
c001ba22:	c3                   	ret    

c001ba23 <sysCallNotImpl(regs*)>:
c001ba23:	83 ec 18             	sub    esp,0x18
c001ba26:	68 31 c1 02 c0       	push   0xc002c131
c001ba2b:	e8 0d e7 ff ff       	call   c001a13d <Krnl::panic(char const*)>
c001ba30:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba35:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba3a:	83 c4 1c             	add    esp,0x1c
c001ba3d:	c3                   	ret    

c001ba3e <sysPanic(regs*)>:
c001ba3e:	83 ec 18             	sub    esp,0x18
c001ba41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ba45:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001ba48:	e8 f0 e6 ff ff       	call   c001a13d <Krnl::panic(char const*)>
c001ba4d:	b8 01 00 00 00       	mov    eax,0x1
c001ba52:	31 d2                	xor    edx,edx
c001ba54:	83 c4 1c             	add    esp,0x1c
c001ba57:	c3                   	ret    

c001ba58 <sysCallRmdir(regs*)>:
c001ba58:	56                   	push   esi
c001ba59:	53                   	push   ebx
c001ba5a:	83 ec 20             	sub    esp,0x20
c001ba5d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ba61:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001ba64:	68 14 01 00 00       	push   0x114
c001ba69:	e8 ab 3d ff ff       	call   c000f819 <malloc>
c001ba6e:	83 c4 0c             	add    esp,0xc
c001ba71:	89 c3                	mov    ebx,eax
c001ba73:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba78:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ba7b:	56                   	push   esi
c001ba7c:	53                   	push   ebx
c001ba7d:	e8 4e 73 ff ff       	call   c0012dd0 <File::File(char const*, Process*)>
c001ba82:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ba85:	e8 22 75 ff ff       	call   c0012fac <File::unlink()>
c001ba8a:	83 c4 10             	add    esp,0x10
c001ba8d:	85 db                	test   ebx,ebx
c001ba8f:	74 14                	je     c001baa5 <sysCallRmdir(regs*)+0x4d>
c001ba91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ba95:	8b 13                	mov    edx,DWORD PTR [ebx]
c001ba97:	83 ec 0c             	sub    esp,0xc
c001ba9a:	53                   	push   ebx
c001ba9b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001ba9e:	83 c4 10             	add    esp,0x10
c001baa1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001baa5:	85 c0                	test   eax,eax
c001baa7:	0f 95 c0             	setne  al
c001baaa:	31 d2                	xor    edx,edx
c001baac:	0f b6 c0             	movzx  eax,al
c001baaf:	f7 d8                	neg    eax
c001bab1:	83 d2 00             	adc    edx,0x0
c001bab4:	83 c4 14             	add    esp,0x14
c001bab7:	f7 da                	neg    edx
c001bab9:	5b                   	pop    ebx
c001baba:	5e                   	pop    esi
c001babb:	c3                   	ret    

c001babc <sysCallUnlink(regs*)>:
c001babc:	56                   	push   esi
c001babd:	53                   	push   ebx
c001babe:	83 ec 20             	sub    esp,0x20
c001bac1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bac5:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bac8:	68 14 01 00 00       	push   0x114
c001bacd:	e8 47 3d ff ff       	call   c000f819 <malloc>
c001bad2:	83 c4 0c             	add    esp,0xc
c001bad5:	89 c3                	mov    ebx,eax
c001bad7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001badc:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001badf:	56                   	push   esi
c001bae0:	53                   	push   ebx
c001bae1:	e8 ea 72 ff ff       	call   c0012dd0 <File::File(char const*, Process*)>
c001bae6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bae9:	e8 be 74 ff ff       	call   c0012fac <File::unlink()>
c001baee:	83 c4 10             	add    esp,0x10
c001baf1:	85 db                	test   ebx,ebx
c001baf3:	74 14                	je     c001bb09 <sysCallUnlink(regs*)+0x4d>
c001baf5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001baf9:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bafb:	83 ec 0c             	sub    esp,0xc
c001bafe:	53                   	push   ebx
c001baff:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bb02:	83 c4 10             	add    esp,0x10
c001bb05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb09:	85 c0                	test   eax,eax
c001bb0b:	0f 95 c0             	setne  al
c001bb0e:	31 d2                	xor    edx,edx
c001bb10:	0f b6 c0             	movzx  eax,al
c001bb13:	f7 d8                	neg    eax
c001bb15:	83 d2 00             	adc    edx,0x0
c001bb18:	83 c4 14             	add    esp,0x14
c001bb1b:	f7 da                	neg    edx
c001bb1d:	5b                   	pop    ebx
c001bb1e:	5e                   	pop    esi
c001bb1f:	c3                   	ret    

c001bb20 <sysCallGetArgv(regs*)>:
c001bb20:	83 ec 0c             	sub    esp,0xc
c001bb23:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bb27:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001bb2a:	85 c0                	test   eax,eax
c001bb2c:	78 2b                	js     c001bb59 <sysCallGetArgv(regs*)+0x39>
c001bb2e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bb34:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bb37:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001bb3d:	7d 1a                	jge    c001bb59 <sysCallGetArgv(regs*)+0x39>
c001bb3f:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001bb46:	85 c0                	test   eax,eax
c001bb48:	74 17                	je     c001bb61 <sysCallGetArgv(regs*)+0x41>
c001bb4a:	83 ec 08             	sub    esp,0x8
c001bb4d:	50                   	push   eax
c001bb4e:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001bb51:	e8 b6 4c fe ff       	call   c000080c <strcpy>
c001bb56:	83 c4 10             	add    esp,0x10
c001bb59:	31 c0                	xor    eax,eax
c001bb5b:	31 d2                	xor    edx,edx
c001bb5d:	83 c4 0c             	add    esp,0xc
c001bb60:	c3                   	ret    
c001bb61:	b8 01 00 00 00       	mov    eax,0x1
c001bb66:	31 d2                	xor    edx,edx
c001bb68:	83 c4 0c             	add    esp,0xc
c001bb6b:	c3                   	ret    

c001bb6c <sysCallTTYName(regs*)>:
c001bb6c:	56                   	push   esi
c001bb6d:	53                   	push   ebx
c001bb6e:	53                   	push   ebx
c001bb6f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bb73:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001bb76:	85 c0                	test   eax,eax
c001bb78:	74 5f                	je     c001bbd9 <sysCallTTYName(regs*)+0x6d>
c001bb7a:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001bb7d:	83 f8 02             	cmp    eax,0x2
c001bb80:	77 3e                	ja     c001bbc0 <sysCallTTYName(regs*)+0x54>
c001bb82:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb87:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bb8a:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001bb90:	85 db                	test   ebx,ebx
c001bb92:	74 45                	je     c001bbd9 <sysCallTTYName(regs*)+0x6d>
c001bb94:	83 ec 0c             	sub    esp,0xc
c001bb97:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bb99:	53                   	push   ebx
c001bb9a:	ff 10                	call   DWORD PTR [eax]
c001bb9c:	83 c4 10             	add    esp,0x10
c001bb9f:	84 c0                	test   al,al
c001bba1:	74 41                	je     c001bbe4 <sysCallTTYName(regs*)+0x78>
c001bba3:	83 ec 08             	sub    esp,0x8
c001bba6:	81 c3 82 00 00 00    	add    ebx,0x82
c001bbac:	53                   	push   ebx
c001bbad:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001bbb0:	e8 57 4c fe ff       	call   c000080c <strcpy>
c001bbb5:	83 c4 10             	add    esp,0x10
c001bbb8:	31 c0                	xor    eax,eax
c001bbba:	59                   	pop    ecx
c001bbbb:	31 d2                	xor    edx,edx
c001bbbd:	5b                   	pop    ebx
c001bbbe:	5e                   	pop    esi
c001bbbf:	c3                   	ret    
c001bbc0:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bbc5:	74 bb                	je     c001bb82 <sysCallTTYName(regs*)+0x16>
c001bbc7:	83 ec 0c             	sub    esp,0xc
c001bbca:	50                   	push   eax
c001bbcb:	e8 79 57 ff ff       	call   c0011349 <getFromFileDescriptor(int)>
c001bbd0:	83 c4 10             	add    esp,0x10
c001bbd3:	89 c3                	mov    ebx,eax
c001bbd5:	85 db                	test   ebx,ebx
c001bbd7:	75 bb                	jne    c001bb94 <sysCallTTYName(regs*)+0x28>
c001bbd9:	59                   	pop    ecx
c001bbda:	b8 01 00 00 00       	mov    eax,0x1
c001bbdf:	31 d2                	xor    edx,edx
c001bbe1:	5b                   	pop    ebx
c001bbe2:	5e                   	pop    esi
c001bbe3:	c3                   	ret    
c001bbe4:	59                   	pop    ecx
c001bbe5:	b8 02 00 00 00       	mov    eax,0x2
c001bbea:	31 d2                	xor    edx,edx
c001bbec:	5b                   	pop    ebx
c001bbed:	5e                   	pop    esi
c001bbee:	c3                   	ret    

c001bbef <sysCallUSleep(regs*)>:
c001bbef:	83 ec 14             	sub    esp,0x14
c001bbf2:	b8 e8 03 00 00       	mov    eax,0x3e8
c001bbf7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bbfb:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001bc02:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001bc05:	01 ca                	add    edx,ecx
c001bc07:	52                   	push   edx
c001bc08:	50                   	push   eax
c001bc09:	e8 9b 23 00 00       	call   c001dfa9 <nanoSleep(unsigned long long)>
c001bc0e:	31 c0                	xor    eax,eax
c001bc10:	31 d2                	xor    edx,edx
c001bc12:	83 c4 1c             	add    esp,0x1c
c001bc15:	c3                   	ret    

c001bc16 <sysCallSpawn(regs*)>:
c001bc16:	56                   	push   esi
c001bc17:	53                   	push   ebx
c001bc18:	50                   	push   eax
c001bc19:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bc1d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001bc20:	85 c0                	test   eax,eax
c001bc22:	75 08                	jne    c001bc2c <sysCallSpawn(regs*)+0x16>
c001bc24:	59                   	pop    ecx
c001bc25:	31 c0                	xor    eax,eax
c001bc27:	31 d2                	xor    edx,edx
c001bc29:	5b                   	pop    ebx
c001bc2a:	5e                   	pop    esi
c001bc2b:	c3                   	ret    
c001bc2c:	83 ec 0c             	sub    esp,0xc
c001bc2f:	68 3f 07 00 00       	push   0x73f
c001bc34:	e8 e0 3b ff ff       	call   c000f819 <malloc>
c001bc39:	83 c4 10             	add    esp,0x10
c001bc3c:	89 c6                	mov    esi,eax
c001bc3e:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001bc41:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bc44:	85 c0                	test   eax,eax
c001bc46:	75 32                	jne    c001bc7a <sysCallSpawn(regs*)+0x64>
c001bc48:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc4d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bc50:	52                   	push   edx
c001bc51:	50                   	push   eax
c001bc52:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bc55:	56                   	push   esi
c001bc56:	e8 73 1a 00 00       	call   c001d6ce <Process::Process(char const*, Process*, char**)>
c001bc5b:	83 c4 10             	add    esp,0x10
c001bc5e:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001bc65:	75 bd                	jne    c001bc24 <sysCallSpawn(regs*)+0xe>
c001bc67:	83 ec 0c             	sub    esp,0xc
c001bc6a:	56                   	push   esi
c001bc6b:	e8 40 1f 00 00       	call   c001dbb0 <Process::createUserThread()>
c001bc70:	8b 06                	mov    eax,DWORD PTR [esi]
c001bc72:	83 c4 10             	add    esp,0x10
c001bc75:	99                   	cdq    
c001bc76:	59                   	pop    ecx
c001bc77:	5b                   	pop    ebx
c001bc78:	5e                   	pop    esi
c001bc79:	c3                   	ret    
c001bc7a:	31 c0                	xor    eax,eax
c001bc7c:	eb d2                	jmp    c001bc50 <sysCallSpawn(regs*)+0x3a>

c001bc7e <sysCallGetEnv(regs*)>:
c001bc7e:	57                   	push   edi
c001bc7f:	56                   	push   esi
c001bc80:	53                   	push   ebx
c001bc81:	83 ec 1c             	sub    esp,0x1c
c001bc84:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001bc88:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc8d:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001bc90:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001bc93:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bc96:	e8 ee e3 ff ff       	call   c001a089 <Krnl::getProcessTotalEnvCount(Process*)>
c001bc9b:	83 c4 10             	add    esp,0x10
c001bc9e:	39 c7                	cmp    edi,eax
c001bca0:	7c 14                	jl     c001bcb6 <sysCallGetEnv(regs*)+0x38>
c001bca2:	85 f6                	test   esi,esi
c001bca4:	75 0b                	jne    c001bcb1 <sysCallGetEnv(regs*)+0x33>
c001bca6:	83 c4 10             	add    esp,0x10
c001bca9:	31 c0                	xor    eax,eax
c001bcab:	5b                   	pop    ebx
c001bcac:	31 d2                	xor    edx,edx
c001bcae:	5e                   	pop    esi
c001bcaf:	5f                   	pop    edi
c001bcb0:	c3                   	ret    
c001bcb1:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001bcb4:	eb f0                	jmp    c001bca6 <sysCallGetEnv(regs*)+0x28>
c001bcb6:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bcba:	52                   	push   edx
c001bcbb:	57                   	push   edi
c001bcbc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001bcc2:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001bcc5:	50                   	push   eax
c001bcc6:	e8 de e3 ff ff       	call   c001a0a9 <Krnl::getProcessEnvPair(Process*, int)>
c001bccb:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001bcce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bcd2:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001bcd6:	83 c4 0c             	add    esp,0xc
c001bcd9:	85 c9                	test   ecx,ecx
c001bcdb:	75 23                	jne    c001bd00 <sysCallGetEnv(regs*)+0x82>
c001bcdd:	83 ec 0c             	sub    esp,0xc
c001bce0:	50                   	push   eax
c001bce1:	e8 86 4a fe ff       	call   c000076c <strlen>
c001bce6:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bce9:	89 c3                	mov    ebx,eax
c001bceb:	e8 7c 4a fe ff       	call   c000076c <strlen>
c001bcf0:	83 c4 10             	add    esp,0x10
c001bcf3:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001bcf7:	83 c4 10             	add    esp,0x10
c001bcfa:	31 d2                	xor    edx,edx
c001bcfc:	5b                   	pop    ebx
c001bcfd:	5e                   	pop    esi
c001bcfe:	5f                   	pop    edi
c001bcff:	c3                   	ret    
c001bd00:	83 ec 08             	sub    esp,0x8
c001bd03:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001bd06:	50                   	push   eax
c001bd07:	56                   	push   esi
c001bd08:	e8 ff 4a fe ff       	call   c000080c <strcpy>
c001bd0d:	58                   	pop    eax
c001bd0e:	5a                   	pop    edx
c001bd0f:	68 4b c1 02 c0       	push   0xc002c14b
c001bd14:	56                   	push   esi
c001bd15:	e8 32 4c fe ff       	call   c000094c <strcat>
c001bd1a:	59                   	pop    ecx
c001bd1b:	5b                   	pop    ebx
c001bd1c:	57                   	push   edi
c001bd1d:	56                   	push   esi
c001bd1e:	e8 29 4c fe ff       	call   c000094c <strcat>
c001bd23:	83 c4 10             	add    esp,0x10
c001bd26:	e9 7b ff ff ff       	jmp    c001bca6 <sysCallGetEnv(regs*)+0x28>

c001bd2b <sysAppSettings(regs*)>:
c001bd2b:	57                   	push   edi
c001bd2c:	56                   	push   esi
c001bd2d:	56                   	push   esi
c001bd2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd32:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bd35:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c001bd3b:	25 e0 1f 00 00       	and    eax,0x1fe0
c001bd40:	66 3d c0 09          	cmp    ax,0x9c0
c001bd44:	75 2e                	jne    c001bd74 <sysAppSettings(regs*)+0x49>
c001bd46:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c001bd4c:	83 e0 1f             	and    eax,0x1f
c001bd4f:	3c 01                	cmp    al,0x1
c001bd51:	74 2c                	je     c001bd7f <sysAppSettings(regs*)+0x54>
c001bd53:	3c 07                	cmp    al,0x7
c001bd55:	0f 84 b3 00 00 00    	je     c001be0e <sysAppSettings(regs*)+0xe3>
c001bd5b:	84 c0                	test   al,al
c001bd5d:	0f 84 d2 00 00 00    	je     c001be35 <sysAppSettings(regs*)+0x10a>
c001bd63:	3c 08                	cmp    al,0x8
c001bd65:	74 63                	je     c001bdca <sysAppSettings(regs*)+0x9f>
c001bd67:	59                   	pop    ecx
c001bd68:	0f b6 c0             	movzx  eax,al
c001bd6b:	5e                   	pop    esi
c001bd6c:	05 e8 03 00 00       	add    eax,0x3e8
c001bd71:	5f                   	pop    edi
c001bd72:	99                   	cdq    
c001bd73:	c3                   	ret    
c001bd74:	b8 01 00 00 00       	mov    eax,0x1
c001bd79:	59                   	pop    ecx
c001bd7a:	31 d2                	xor    edx,edx
c001bd7c:	5e                   	pop    esi
c001bd7d:	5f                   	pop    edi
c001bd7e:	c3                   	ret    
c001bd7f:	50                   	push   eax
c001bd80:	68 00 01 00 00       	push   0x100
c001bd85:	6a 00                	push   0x0
c001bd87:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd8c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bd8f:	83 c0 0c             	add    eax,0xc
c001bd92:	50                   	push   eax
c001bd93:	e8 b8 49 fe ff       	call   c0000750 <memset>
c001bd98:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd9d:	b9 ff 00 00 00       	mov    ecx,0xff
c001bda2:	8b 78 40             	mov    edi,DWORD PTR [eax+0x40]
c001bda5:	83 c7 0c             	add    edi,0xc
c001bda8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bdaa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bdaf:	5a                   	pop    edx
c001bdb0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bdb3:	59                   	pop    ecx
c001bdb4:	8d 50 0c             	lea    edx,[eax+0xc]
c001bdb7:	52                   	push   edx
c001bdb8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bdbe:	e8 af 46 ff ff       	call   c0010472 <VgaText::setTitle(char*)>
c001bdc3:	83 c4 10             	add    esp,0x10
c001bdc6:	31 c0                	xor    eax,eax
c001bdc8:	eb af                	jmp    c001bd79 <sysAppSettings(regs*)+0x4e>
c001bdca:	83 ec 08             	sub    esp,0x8
c001bdcd:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001bdd3:	83 e0 0f             	and    eax,0xf
c001bdd6:	50                   	push   eax
c001bdd7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bddc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bddf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bde5:	e8 78 46 ff ff       	call   c0010462 <VgaText::setTitleColour(VgaColour)>
c001bdea:	5f                   	pop    edi
c001bdeb:	58                   	pop    eax
c001bdec:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001bdf2:	c1 e8 04             	shr    eax,0x4
c001bdf5:	83 e0 0f             	and    eax,0xf
c001bdf8:	50                   	push   eax
c001bdf9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bdfe:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001be01:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001be07:	e8 46 46 ff ff       	call   c0010452 <VgaText::setTitleTextColour(VgaColour)>
c001be0c:	eb b5                	jmp    c001bdc3 <sysAppSettings(regs*)+0x98>
c001be0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be13:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001be16:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001be1c:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001be22:	c0 e8 06             	shr    al,0x6
c001be25:	83 e0 01             	and    eax,0x1
c001be28:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001be2e:	31 c0                	xor    eax,eax
c001be30:	e9 44 ff ff ff       	jmp    c001bd79 <sysAppSettings(regs*)+0x4e>
c001be35:	b8 02 00 00 00       	mov    eax,0x2
c001be3a:	e9 3a ff ff ff       	jmp    c001bd79 <sysAppSettings(regs*)+0x4e>

c001be3f <sysSetFatAttrib(regs*)>:
c001be3f:	57                   	push   edi
c001be40:	56                   	push   esi
c001be41:	53                   	push   ebx
c001be42:	83 ec 1c             	sub    esp,0x1c
c001be45:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001be49:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001be4c:	68 14 01 00 00       	push   0x114
c001be51:	e8 c3 39 ff ff       	call   c000f819 <malloc>
c001be56:	83 c4 0c             	add    esp,0xc
c001be59:	89 c3                	mov    ebx,eax
c001be5b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be60:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001be63:	57                   	push   edi
c001be64:	53                   	push   ebx
c001be65:	e8 66 6f ff ff       	call   c0012dd0 <File::File(char const*, Process*)>
c001be6a:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001be6d:	83 c4 0c             	add    esp,0xc
c001be70:	0f b6 d4             	movzx  edx,ah
c001be73:	0f b6 c0             	movzx  eax,al
c001be76:	52                   	push   edx
c001be77:	50                   	push   eax
c001be78:	53                   	push   ebx
c001be79:	e8 c8 71 ff ff       	call   c0013046 <File::chfatattr(unsigned char, unsigned char)>
c001be7e:	83 c4 10             	add    esp,0x10
c001be81:	85 db                	test   ebx,ebx
c001be83:	74 14                	je     c001be99 <sysSetFatAttrib(regs*)+0x5a>
c001be85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001be89:	8b 13                	mov    edx,DWORD PTR [ebx]
c001be8b:	83 ec 0c             	sub    esp,0xc
c001be8e:	53                   	push   ebx
c001be8f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001be92:	83 c4 10             	add    esp,0x10
c001be95:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001be99:	85 c0                	test   eax,eax
c001be9b:	0f 95 c0             	setne  al
c001be9e:	31 d2                	xor    edx,edx
c001bea0:	0f b6 c0             	movzx  eax,al
c001bea3:	f7 d8                	neg    eax
c001bea5:	83 d2 00             	adc    edx,0x0
c001bea8:	83 c4 10             	add    esp,0x10
c001beab:	f7 da                	neg    edx
c001bead:	5b                   	pop    ebx
c001beae:	5e                   	pop    esi
c001beaf:	5f                   	pop    edi
c001beb0:	c3                   	ret    

c001beb1 <sysPipe(regs*)>:
c001beb1:	57                   	push   edi
c001beb2:	56                   	push   esi
c001beb3:	53                   	push   ebx
c001beb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001beb8:	83 ec 0c             	sub    esp,0xc
c001bebb:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001bebe:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001bec1:	6a 20                	push   0x20
c001bec3:	e8 51 39 ff ff       	call   c000f819 <malloc>
c001bec8:	89 c3                	mov    ebx,eax
c001beca:	58                   	pop    eax
c001becb:	5a                   	pop    edx
c001becc:	68 00 50 00 00       	push   0x5000
c001bed1:	53                   	push   ebx
c001bed2:	e8 13 43 ff ff       	call   c00101ea <Pipe::Pipe(int)>
c001bed7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001beda:	e8 75 51 ff ff       	call   c0011054 <UnixFile::getFileDescriptor()>
c001bedf:	89 07                	mov    DWORD PTR [edi],eax
c001bee1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bee4:	e8 6b 51 ff ff       	call   c0011054 <UnixFile::getFileDescriptor()>
c001bee9:	83 c4 10             	add    esp,0x10
c001beec:	89 06                	mov    DWORD PTR [esi],eax
c001beee:	31 d2                	xor    edx,edx
c001bef0:	5b                   	pop    ebx
c001bef1:	31 c0                	xor    eax,eax
c001bef3:	5e                   	pop    esi
c001bef4:	5f                   	pop    edi
c001bef5:	c3                   	ret    

c001bef6 <sysGetUnixTime(regs*)>:
c001bef6:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c001befb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001bf01:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bf05:	e9 b8 78 ff ff       	jmp    c00137c2 <Clock::timeInSecondsLocal()>

c001bf0a <string_ends_with(char const*, char const*)>:
c001bf0a:	57                   	push   edi
c001bf0b:	56                   	push   esi
c001bf0c:	53                   	push   ebx
c001bf0d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bf11:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001bf15:	83 ec 0c             	sub    esp,0xc
c001bf18:	53                   	push   ebx
c001bf19:	e8 4e 48 fe ff       	call   c000076c <strlen>
c001bf1e:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bf21:	89 c6                	mov    esi,eax
c001bf23:	e8 44 48 fe ff       	call   c000076c <strlen>
c001bf28:	83 c4 10             	add    esp,0x10
c001bf2b:	39 c6                	cmp    esi,eax
c001bf2d:	7d 06                	jge    c001bf35 <string_ends_with(char const*, char const*)+0x2b>
c001bf2f:	5b                   	pop    ebx
c001bf30:	31 c0                	xor    eax,eax
c001bf32:	5e                   	pop    esi
c001bf33:	5f                   	pop    edi
c001bf34:	c3                   	ret    
c001bf35:	83 ec 08             	sub    esp,0x8
c001bf38:	29 c6                	sub    esi,eax
c001bf3a:	57                   	push   edi
c001bf3b:	01 f3                	add    ebx,esi
c001bf3d:	53                   	push   ebx
c001bf3e:	e8 55 49 fe ff       	call   c0000898 <strcmp>
c001bf43:	83 c4 10             	add    esp,0x10
c001bf46:	85 c0                	test   eax,eax
c001bf48:	5b                   	pop    ebx
c001bf49:	0f 94 c0             	sete   al
c001bf4c:	5e                   	pop    esi
c001bf4d:	0f b6 c0             	movzx  eax,al
c001bf50:	5f                   	pop    edi
c001bf51:	c3                   	ret    

c001bf52 <sysCallOpen(regs*)>:
c001bf52:	56                   	push   esi
c001bf53:	53                   	push   ebx
c001bf54:	81 ec 04 01 00 00    	sub    esp,0x104
c001bf5a:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001bf61:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001bf64:	85 c9                	test   ecx,ecx
c001bf66:	0f 84 ad 01 00 00    	je     c001c119 <sysCallOpen(regs*)+0x1c7>
c001bf6c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001bf6f:	85 c0                	test   eax,eax
c001bf71:	0f 84 a2 01 00 00    	je     c001c119 <sysCallOpen(regs*)+0x1c7>
c001bf77:	52                   	push   edx
c001bf78:	68 4d c1 02 c0       	push   0xc002c14d
c001bf7d:	50                   	push   eax
c001bf7e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001bf82:	56                   	push   esi
c001bf83:	e8 9e 6c ff ff       	call   c0012c26 <Fs::standardiseFiles(char*, char const*, char const*)>
c001bf88:	89 34 24             	mov    DWORD PTR [esp],esi
c001bf8b:	e8 dc 47 fe ff       	call   c000076c <strlen>
c001bf90:	83 c4 10             	add    esp,0x10
c001bf93:	48                   	dec    eax
c001bf94:	74 1d                	je     c001bfb3 <sysCallOpen(regs*)+0x61>
c001bf96:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001bf99:	eb 0f                	jmp    c001bfaa <sysCallOpen(regs*)+0x58>
c001bf9b:	80 fa 3a             	cmp    dl,0x3a
c001bf9e:	74 0f                	je     c001bfaf <sysCallOpen(regs*)+0x5d>
c001bfa0:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001bfa4:	48                   	dec    eax
c001bfa5:	74 0c                	je     c001bfb3 <sysCallOpen(regs*)+0x61>
c001bfa7:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001bfaa:	80 fa 2e             	cmp    dl,0x2e
c001bfad:	75 ec                	jne    c001bf9b <sysCallOpen(regs*)+0x49>
c001bfaf:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001bfb3:	83 ec 08             	sub    esp,0x8
c001bfb6:	68 51 c1 02 c0       	push   0xc002c151
c001bfbb:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bfbe:	e8 47 ff ff ff       	call   c001bf0a <string_ends_with(char const*, char const*)>
c001bfc3:	83 c4 10             	add    esp,0x10
c001bfc6:	85 c0                	test   eax,eax
c001bfc8:	74 1d                	je     c001bfe7 <sysCallOpen(regs*)+0x95>
c001bfca:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bfcd:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001bfd3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bfda:	81 c4 04 01 00 00    	add    esp,0x104
c001bfe0:	31 c0                	xor    eax,eax
c001bfe2:	31 d2                	xor    edx,edx
c001bfe4:	5b                   	pop    ebx
c001bfe5:	5e                   	pop    esi
c001bfe6:	c3                   	ret    
c001bfe7:	83 ec 08             	sub    esp,0x8
c001bfea:	68 56 c1 02 c0       	push   0xc002c156
c001bfef:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bff2:	e8 13 ff ff ff       	call   c001bf0a <string_ends_with(char const*, char const*)>
c001bff7:	83 c4 10             	add    esp,0x10
c001bffa:	85 c0                	test   eax,eax
c001bffc:	75 cc                	jne    c001bfca <sysCallOpen(regs*)+0x78>
c001bffe:	83 ec 08             	sub    esp,0x8
c001c001:	68 52 c1 02 c0       	push   0xc002c152
c001c006:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c009:	e8 8a 48 fe ff       	call   c0000898 <strcmp>
c001c00e:	83 c4 10             	add    esp,0x10
c001c011:	85 c0                	test   eax,eax
c001c013:	74 b5                	je     c001bfca <sysCallOpen(regs*)+0x78>
c001c015:	83 ec 08             	sub    esp,0x8
c001c018:	68 51 c1 02 c0       	push   0xc002c151
c001c01d:	56                   	push   esi
c001c01e:	e8 e7 fe ff ff       	call   c001bf0a <string_ends_with(char const*, char const*)>
c001c023:	83 c4 10             	add    esp,0x10
c001c026:	85 c0                	test   eax,eax
c001c028:	75 a0                	jne    c001bfca <sysCallOpen(regs*)+0x78>
c001c02a:	83 ec 08             	sub    esp,0x8
c001c02d:	68 5b c1 02 c0       	push   0xc002c15b
c001c032:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c035:	e8 d0 fe ff ff       	call   c001bf0a <string_ends_with(char const*, char const*)>
c001c03a:	83 c4 10             	add    esp,0x10
c001c03d:	85 c0                	test   eax,eax
c001c03f:	0f 85 e7 00 00 00    	jne    c001c12c <sysCallOpen(regs*)+0x1da>
c001c045:	83 ec 08             	sub    esp,0x8
c001c048:	68 60 c1 02 c0       	push   0xc002c160
c001c04d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c050:	e8 b5 fe ff ff       	call   c001bf0a <string_ends_with(char const*, char const*)>
c001c055:	83 c4 10             	add    esp,0x10
c001c058:	85 c0                	test   eax,eax
c001c05a:	0f 85 cc 00 00 00    	jne    c001c12c <sysCallOpen(regs*)+0x1da>
c001c060:	83 ec 08             	sub    esp,0x8
c001c063:	68 5c c1 02 c0       	push   0xc002c15c
c001c068:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c06b:	e8 28 48 fe ff       	call   c0000898 <strcmp>
c001c070:	83 c4 10             	add    esp,0x10
c001c073:	85 c0                	test   eax,eax
c001c075:	0f 84 b1 00 00 00    	je     c001c12c <sysCallOpen(regs*)+0x1da>
c001c07b:	83 ec 08             	sub    esp,0x8
c001c07e:	68 5b c1 02 c0       	push   0xc002c15b
c001c083:	56                   	push   esi
c001c084:	e8 81 fe ff ff       	call   c001bf0a <string_ends_with(char const*, char const*)>
c001c089:	83 c4 10             	add    esp,0x10
c001c08c:	85 c0                	test   eax,eax
c001c08e:	0f 85 98 00 00 00    	jne    c001c12c <sysCallOpen(regs*)+0x1da>
c001c094:	83 ec 0c             	sub    esp,0xc
c001c097:	68 14 01 00 00       	push   0x114
c001c09c:	e8 78 37 ff ff       	call   c000f819 <malloc>
c001c0a1:	83 c4 0c             	add    esp,0xc
c001c0a4:	89 c6                	mov    esi,eax
c001c0a6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0ab:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c0ae:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c0b1:	56                   	push   esi
c001c0b2:	e8 19 6d ff ff       	call   c0012dd0 <File::File(char const*, Process*)>
c001c0b7:	83 c4 10             	add    esp,0x10
c001c0ba:	85 f6                	test   esi,esi
c001c0bc:	74 5b                	je     c001c119 <sysCallOpen(regs*)+0x1c7>
c001c0be:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c0c1:	0f b6 c2             	movzx  eax,dl
c001c0c4:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c0c7:	89 d0                	mov    eax,edx
c001c0c9:	83 e0 01             	and    eax,0x1
c001c0cc:	f6 c2 02             	test   dl,0x2
c001c0cf:	74 03                	je     c001c0d4 <sysCallOpen(regs*)+0x182>
c001c0d1:	83 c8 02             	or     eax,0x2
c001c0d4:	f6 c2 04             	test   dl,0x4
c001c0d7:	74 03                	je     c001c0dc <sysCallOpen(regs*)+0x18a>
c001c0d9:	83 c8 04             	or     eax,0x4
c001c0dc:	f6 c2 08             	test   dl,0x8
c001c0df:	74 03                	je     c001c0e4 <sysCallOpen(regs*)+0x192>
c001c0e1:	83 c8 0a             	or     eax,0xa
c001c0e4:	83 e2 10             	and    edx,0x10
c001c0e7:	74 03                	je     c001c0ec <sysCallOpen(regs*)+0x19a>
c001c0e9:	83 c8 12             	or     eax,0x12
c001c0ec:	83 ec 08             	sub    esp,0x8
c001c0ef:	50                   	push   eax
c001c0f0:	56                   	push   esi
c001c0f1:	e8 3e 6d ff ff       	call   c0012e34 <File::open(FileOpenMode)>
c001c0f6:	83 c4 10             	add    esp,0x10
c001c0f9:	85 c0                	test   eax,eax
c001c0fb:	75 1c                	jne    c001c119 <sysCallOpen(regs*)+0x1c7>
c001c0fd:	83 ec 0c             	sub    esp,0xc
c001c100:	56                   	push   esi
c001c101:	e8 4e 4f ff ff       	call   c0011054 <UnixFile::getFileDescriptor()>
c001c106:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c109:	83 c4 10             	add    esp,0x10
c001c10c:	89 02                	mov    DWORD PTR [edx],eax
c001c10e:	c1 f8 1f             	sar    eax,0x1f
c001c111:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c114:	e9 c1 fe ff ff       	jmp    c001bfda <sysCallOpen(regs*)+0x88>
c001c119:	81 c4 04 01 00 00    	add    esp,0x104
c001c11f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c124:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c129:	5b                   	pop    ebx
c001c12a:	5e                   	pop    esi
c001c12b:	c3                   	ret    
c001c12c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c12f:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c135:	e9 99 fe ff ff       	jmp    c001bfd3 <sysCallOpen(regs*)+0x81>

c001c13a <Sys::loadSyscalls()>:
c001c13a:	c7 05 60 ed 02 c0 a7 b3 01 c0 	mov    DWORD PTR ds:0xc002ed60,0xc001b3a7
c001c144:	c7 05 64 ed 02 c0 9c af 01 c0 	mov    DWORD PTR ds:0xc002ed64,0xc001af9c
c001c14e:	c7 05 68 ed 02 c0 8d b1 01 c0 	mov    DWORD PTR ds:0xc002ed68,0xc001b18d
c001c158:	c7 05 6c ed 02 c0 dd b2 01 c0 	mov    DWORD PTR ds:0xc002ed6c,0xc001b2dd
c001c162:	c7 05 70 ed 02 c0 25 b1 01 c0 	mov    DWORD PTR ds:0xc002ed70,0xc001b125
c001c16c:	c7 05 74 ed 02 c0 d3 af 01 c0 	mov    DWORD PTR ds:0xc002ed74,0xc001afd3
c001c176:	c7 05 78 ed 02 c0 b4 af 01 c0 	mov    DWORD PTR ds:0xc002ed78,0xc001afb4
c001c180:	c7 05 7c ed 02 c0 e2 b1 01 c0 	mov    DWORD PTR ds:0xc002ed7c,0xc001b1e2
c001c18a:	c7 05 84 ed 02 c0 70 b8 01 c0 	mov    DWORD PTR ds:0xc002ed84,0xc001b870
c001c194:	c7 05 80 ed 02 c0 52 bf 01 c0 	mov    DWORD PTR ds:0xc002ed80,0xc001bf52
c001c19e:	c7 05 88 ed 02 c0 d0 b8 01 c0 	mov    DWORD PTR ds:0xc002ed88,0xc001b8d0
c001c1a8:	c7 05 8c ed 02 c0 b3 b5 01 c0 	mov    DWORD PTR ds:0xc002ed8c,0xc001b5b3
c001c1b2:	c7 05 90 ed 02 c0 ed b3 01 c0 	mov    DWORD PTR ds:0xc002ed90,0xc001b3ed
c001c1bc:	c7 05 94 ed 02 c0 f2 b3 01 c0 	mov    DWORD PTR ds:0xc002ed94,0xc001b3f2
c001c1c6:	c7 05 98 ed 02 c0 99 b9 01 c0 	mov    DWORD PTR ds:0xc002ed98,0xc001b999
c001c1d0:	c7 05 9c ed 02 c0 45 b9 01 c0 	mov    DWORD PTR ds:0xc002ed9c,0xc001b945
c001c1da:	c7 05 a0 ed 02 c0 8c b6 01 c0 	mov    DWORD PTR ds:0xc002eda0,0xc001b68c
c001c1e4:	c7 05 a4 ed 02 c0 e3 b6 01 c0 	mov    DWORD PTR ds:0xc002eda4,0xc001b6e3
c001c1ee:	c7 05 a8 ed 02 c0 4f b7 01 c0 	mov    DWORD PTR ds:0xc002eda8,0xc001b74f
c001c1f8:	c7 05 ac ed 02 c0 f7 b3 01 c0 	mov    DWORD PTR ds:0xc002edac,0xc001b3f7
c001c202:	c7 05 b0 ed 02 c0 09 ba 01 c0 	mov    DWORD PTR ds:0xc002edb0,0xc001ba09
c001c20c:	c7 05 b4 ed 02 c0 23 ba 01 c0 	mov    DWORD PTR ds:0xc002edb4,0xc001ba23
c001c216:	c7 05 b8 ed 02 c0 23 ba 01 c0 	mov    DWORD PTR ds:0xc002edb8,0xc001ba23
c001c220:	c7 05 bc ed 02 c0 58 ba 01 c0 	mov    DWORD PTR ds:0xc002edbc,0xc001ba58
c001c22a:	c7 05 c0 ed 02 c0 bc ba 01 c0 	mov    DWORD PTR ds:0xc002edc0,0xc001babc
c001c234:	c7 05 c4 ed 02 c0 01 b4 01 c0 	mov    DWORD PTR ds:0xc002edc4,0xc001b401
c001c23e:	c7 05 c8 ed 02 c0 20 bb 01 c0 	mov    DWORD PTR ds:0xc002edc8,0xc001bb20
c001c248:	c7 05 cc ed 02 c0 70 b5 01 c0 	mov    DWORD PTR ds:0xc002edcc,0xc001b570
c001c252:	c7 05 d0 ed 02 c0 6c bb 01 c0 	mov    DWORD PTR ds:0xc002edd0,0xc001bb6c
c001c25c:	c7 05 d4 ed 02 c0 32 b6 01 c0 	mov    DWORD PTR ds:0xc002edd4,0xc001b632
c001c266:	c7 05 d8 ed 02 c0 ef bb 01 c0 	mov    DWORD PTR ds:0xc002edd8,0xc001bbef
c001c270:	c7 05 dc ed 02 c0 c1 b7 01 c0 	mov    DWORD PTR ds:0xc002eddc,0xc001b7c1
c001c27a:	c7 05 e0 ed 02 c0 16 bc 01 c0 	mov    DWORD PTR ds:0xc002ede0,0xc001bc16
c001c284:	c7 05 e4 ed 02 c0 7e bc 01 c0 	mov    DWORD PTR ds:0xc002ede4,0xc001bc7e
c001c28e:	c7 05 e8 ed 02 c0 2b bd 01 c0 	mov    DWORD PTR ds:0xc002ede8,0xc001bd2b
c001c298:	c7 05 ec ed 02 c0 11 b4 01 c0 	mov    DWORD PTR ds:0xc002edec,0xc001b411
c001c2a2:	c7 05 f0 ed 02 c0 7b b4 01 c0 	mov    DWORD PTR ds:0xc002edf0,0xc001b47b
c001c2ac:	c7 05 f4 ed 02 c0 c1 b4 01 c0 	mov    DWORD PTR ds:0xc002edf4,0xc001b4c1
c001c2b6:	c7 05 f8 ed 02 c0 3f be 01 c0 	mov    DWORD PTR ds:0xc002edf8,0xc001be3f
c001c2c0:	c7 05 fc ed 02 c0 3e ba 01 c0 	mov    DWORD PTR ds:0xc002edfc,0xc001ba3e
c001c2ca:	c7 05 00 ee 02 c0 12 b5 01 c0 	mov    DWORD PTR ds:0xc002ee00,0xc001b512
c001c2d4:	c7 05 04 ee 02 c0 b1 be 01 c0 	mov    DWORD PTR ds:0xc002ee04,0xc001beb1
c001c2de:	c7 05 08 ee 02 c0 f6 be 01 c0 	mov    DWORD PTR ds:0xc002ee08,0xc001bef6
c001c2e8:	c7 05 0c ee 02 c0 7d b0 01 c0 	mov    DWORD PTR ds:0xc002ee0c,0xc001b07d
c001c2f2:	c7 05 10 ee 02 c0 fe b1 01 c0 	mov    DWORD PTR ds:0xc002ee10,0xc001b1fe
c001c2fc:	c7 05 14 ee 02 c0 93 b2 01 c0 	mov    DWORD PTR ds:0xc002ee14,0xc001b293
c001c306:	c7 05 18 ee 02 c0 66 af 01 c0 	mov    DWORD PTR ds:0xc002ee18,0xc001af66
c001c310:	c7 05 1c ee 02 c0 45 b3 01 c0 	mov    DWORD PTR ds:0xc002ee1c,0xc001b345
c001c31a:	c7 05 20 ee 02 c0 df af 01 c0 	mov    DWORD PTR ds:0xc002ee20,0xc001afdf
c001c324:	c7 05 24 ee 02 c0 f9 af 01 c0 	mov    DWORD PTR ds:0xc002ee24,0xc001aff9
c001c32e:	c3                   	ret    

c001c32f <Sys::systemCall(regs*, void*)>:
c001c32f:	53                   	push   ebx
c001c330:	83 ec 08             	sub    esp,0x8
c001c333:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c337:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c33a:	83 f8 7f             	cmp    eax,0x7f
c001c33d:	77 16                	ja     c001c355 <Sys::systemCall(regs*, void*)+0x26>
c001c33f:	8b 14 85 60 ed 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd12a0]
c001c346:	85 d2                	test   edx,edx
c001c348:	74 0b                	je     c001c355 <Sys::systemCall(regs*, void*)+0x26>
c001c34a:	83 ec 0c             	sub    esp,0xc
c001c34d:	53                   	push   ebx
c001c34e:	ff d2                	call   edx
c001c350:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c353:	eb 0d                	jmp    c001c362 <Sys::systemCall(regs*, void*)+0x33>
c001c355:	52                   	push   edx
c001c356:	52                   	push   edx
c001c357:	50                   	push   eax
c001c358:	68 65 c1 02 c0       	push   0xc002c165
c001c35d:	e8 0f 65 ff ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c001c362:	83 c4 10             	add    esp,0x10
c001c365:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c36a:	31 d2                	xor    edx,edx
c001c36c:	83 c4 08             	add    esp,0x8
c001c36f:	5b                   	pop    ebx
c001c370:	c3                   	ret    

c001c371 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c371:	55                   	push   ebp
c001c372:	57                   	push   edi
c001c373:	56                   	push   esi
c001c374:	53                   	push   ebx
c001c375:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c37b:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c382:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c389:	85 c0                	test   eax,eax
c001c38b:	0f 95 c1             	setne  cl
c001c38e:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c396:	0f 94 c2             	sete   dl
c001c399:	84 d1                	test   cl,dl
c001c39b:	74 23                	je     c001c3c0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c39d:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c3a3:	74 1b                	je     c001c3c0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c3a5:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c3ab:	89 da                	mov    edx,ebx
c001c3ad:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c3b3:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c3b9:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c3c0:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c001c3c7:	05 ff 0f 00 00       	add    eax,0xfff
c001c3cc:	83 ec 0c             	sub    esp,0xc
c001c3cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c3d3:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c001c3d9:	c1 e8 0c             	shr    eax,0xc
c001c3dc:	89 fe                	mov    esi,edi
c001c3de:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c3e2:	c1 ee 0c             	shr    esi,0xc
c001c3e5:	6a 01                	push   0x1
c001c3e7:	e8 b3 50 ff ff       	call   c001149f <Virt::allocateKernelVirtualPages(int)>
c001c3ec:	89 c5                	mov    ebp,eax
c001c3ee:	58                   	pop    eax
c001c3ef:	5a                   	pop    edx
c001c3f0:	56                   	push   esi
c001c3f1:	68 79 c1 02 c0       	push   0xc002c179
c001c3f6:	e8 76 64 ff ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c001c3fb:	59                   	pop    ecx
c001c3fc:	58                   	pop    eax
c001c3fd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c401:	68 8b c1 02 c0       	push   0xc002c18b
c001c406:	e8 66 64 ff ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c001c40b:	83 c4 10             	add    esp,0x10
c001c40e:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c001c414:	0f 86 31 01 00 00    	jbe    c001c54b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001c41a:	c1 e6 0c             	shl    esi,0xc
c001c41d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c420:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001c423:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c427:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001c42e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c431:	01 df                	add    edi,ebx
c001c433:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c001c436:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001c43a:	0f 84 08 01 00 00    	je     c001c548 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c001c440:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001c446:	76 05                	jbe    c001c44d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c001c448:	bf 00 10 00 00       	mov    edi,0x1000
c001c44d:	83 ec 0c             	sub    esp,0xc
c001c450:	31 d2                	xor    edx,edx
c001c452:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c459:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c45b:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c45f:	50                   	push   eax
c001c460:	8d 74 24 30          	lea    esi,[esp+0x30]
c001c464:	56                   	push   esi
c001c465:	52                   	push   edx
c001c466:	57                   	push   edi
c001c467:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c46e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c471:	83 c4 20             	add    esp,0x20
c001c474:	85 c0                	test   eax,eax
c001c476:	74 0a                	je     c001c482 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c001c478:	53                   	push   ebx
c001c479:	53                   	push   ebx
c001c47a:	50                   	push   eax
c001c47b:	68 9d c1 02 c0       	push   0xc002c19d
c001c480:	eb 0f                	jmp    c001c491 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001c482:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001c486:	74 20                	je     c001c4a8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c001c488:	51                   	push   ecx
c001c489:	51                   	push   ecx
c001c48a:	6a 00                	push   0x0
c001c48c:	68 c8 c1 02 c0       	push   0xc002c1c8
c001c491:	e8 db 63 ff ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c001c496:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c499:	e8 31 53 ff ff       	call   c00117cf <Virt::freeKernelVirtualPages(unsigned long)>
c001c49e:	83 c4 10             	add    esp,0x10
c001c4a1:	31 c0                	xor    eax,eax
c001c4a3:	e9 68 01 00 00       	jmp    c001c610 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c001c4a8:	fa                   	cli    
c001c4a9:	ff 05 28 f7 02 c0    	inc    DWORD PTR ds:0xc002f728
c001c4af:	e8 61 37 ff ff       	call   c000fc15 <Phys::allocatePage()>
c001c4b4:	6a 07                	push   0x7
c001c4b6:	89 c7                	mov    edi,eax
c001c4b8:	55                   	push   ebp
c001c4b9:	50                   	push   eax
c001c4ba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c4bf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c4c2:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c4c8:	e8 79 56 ff ff       	call   c0011b46 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c4cd:	83 c4 0c             	add    esp,0xc
c001c4d0:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c4d7:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c4dd:	6a 00                	push   0x0
c001c4df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c4e4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c4e7:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c4ed:	e8 ae 54 ff ff       	call   c00119a0 <VAS::mapOtherVASIn(bool, VAS*)>
c001c4f2:	58                   	pop    eax
c001c4f3:	5a                   	pop    edx
c001c4f4:	68 07 0c 00 00       	push   0xc07
c001c4f9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001c4fd:	57                   	push   edi
c001c4fe:	89 ef                	mov    edi,ebp
c001c500:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c507:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c50d:	6a 00                	push   0x0
c001c50f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c514:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c517:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c51d:	e8 e0 59 ff ff       	call   c0011f02 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c522:	b9 00 10 00 00       	mov    ecx,0x1000
c001c527:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c529:	a1 28 f7 02 c0       	mov    eax,ds:0xc002f728
c001c52e:	83 c4 20             	add    esp,0x20
c001c531:	48                   	dec    eax
c001c532:	a3 28 f7 02 c0       	mov    ds:0xc002f728,eax
c001c537:	85 c0                	test   eax,eax
c001c539:	75 01                	jne    c001c53c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c53b:	fb                   	sti    
c001c53c:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001c543:	e9 df fe ff ff       	jmp    c001c427 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c001c548:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001c54b:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c553:	0f 86 a9 00 00 00    	jbe    c001c602 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c559:	fa                   	cli    
c001c55a:	ff 05 28 f7 02 c0    	inc    DWORD PTR ds:0xc002f728
c001c560:	51                   	push   ecx
c001c561:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c568:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c56e:	6a 00                	push   0x0
c001c570:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c575:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c578:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c57e:	e8 1d 54 ff ff       	call   c00119a0 <VAS::mapOtherVASIn(bool, VAS*)>
c001c583:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c587:	c1 e6 0c             	shl    esi,0xc
c001c58a:	01 de                	add    esi,ebx
c001c58c:	83 c4 10             	add    esp,0x10
c001c58f:	39 de                	cmp    esi,ebx
c001c591:	74 61                	je     c001c5f4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001c593:	e8 7d 36 ff ff       	call   c000fc15 <Phys::allocatePage()>
c001c598:	6a 07                	push   0x7
c001c59a:	89 c7                	mov    edi,eax
c001c59c:	55                   	push   ebp
c001c59d:	50                   	push   eax
c001c59e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c5a3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c5a6:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c5ac:	e8 95 55 ff ff       	call   c0011b46 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c5b1:	58                   	pop    eax
c001c5b2:	5a                   	pop    edx
c001c5b3:	68 07 0c 00 00       	push   0xc07
c001c5b8:	53                   	push   ebx
c001c5b9:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c5bf:	57                   	push   edi
c001c5c0:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c5c7:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c5cd:	6a 00                	push   0x0
c001c5cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c5d4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c5d7:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c5dd:	e8 20 59 ff ff       	call   c0011f02 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c5e2:	83 c4 1c             	add    esp,0x1c
c001c5e5:	68 00 10 00 00       	push   0x1000
c001c5ea:	6a 00                	push   0x0
c001c5ec:	55                   	push   ebp
c001c5ed:	e8 5e 41 fe ff       	call   c0000750 <memset>
c001c5f2:	eb 98                	jmp    c001c58c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c001c5f4:	a1 28 f7 02 c0       	mov    eax,ds:0xc002f728
c001c5f9:	48                   	dec    eax
c001c5fa:	a3 28 f7 02 c0       	mov    ds:0xc002f728,eax
c001c5ff:	75 01                	jne    c001c602 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c601:	fb                   	sti    
c001c602:	83 ec 0c             	sub    esp,0xc
c001c605:	55                   	push   ebp
c001c606:	e8 c4 51 ff ff       	call   c00117cf <Virt::freeKernelVirtualPages(unsigned long)>
c001c60b:	83 c4 10             	add    esp,0x10
c001c60e:	b0 01                	mov    al,0x1
c001c610:	81 c4 2c 10 00 00    	add    esp,0x102c
c001c616:	5b                   	pop    ebx
c001c617:	5e                   	pop    esi
c001c618:	5f                   	pop    edi
c001c619:	5d                   	pop    ebp
c001c61a:	c3                   	ret    

c001c61b <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001c61b:	55                   	push   ebp
c001c61c:	57                   	push   edi
c001c61d:	56                   	push   esi
c001c61e:	53                   	push   ebx
c001c61f:	83 ec 48             	sub    esp,0x48
c001c622:	68 14 01 00 00       	push   0x114
c001c627:	e8 ed 31 ff ff       	call   c000f819 <malloc>
c001c62c:	83 c4 0c             	add    esp,0xc
c001c62f:	89 c6                	mov    esi,eax
c001c631:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001c635:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c639:	50                   	push   eax
c001c63a:	e8 91 67 ff ff       	call   c0012dd0 <File::File(char const*, Process*)>
c001c63f:	58                   	pop    eax
c001c640:	5a                   	pop    edx
c001c641:	6a 01                	push   0x1
c001c643:	56                   	push   esi
c001c644:	e8 eb 67 ff ff       	call   c0012e34 <File::open(FileOpenMode)>
c001c649:	83 c4 10             	add    esp,0x10
c001c64c:	85 c0                	test   eax,eax
c001c64e:	0f 85 47 01 00 00    	jne    c001c79b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c654:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001c65c:	83 ec 0c             	sub    esp,0xc
c001c65f:	6a 34                	push   0x34
c001c661:	e8 b3 31 ff ff       	call   c000f819 <malloc>
c001c666:	89 c3                	mov    ebx,eax
c001c668:	58                   	pop    eax
c001c669:	8b 06                	mov    eax,DWORD PTR [esi]
c001c66b:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c66f:	57                   	push   edi
c001c670:	53                   	push   ebx
c001c671:	6a 00                	push   0x0
c001c673:	6a 34                	push   0x34
c001c675:	56                   	push   esi
c001c676:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c679:	83 c4 20             	add    esp,0x20
c001c67c:	85 c0                	test   eax,eax
c001c67e:	0f 85 17 01 00 00    	jne    c001c79b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c684:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001c68a:	0f 85 0b 01 00 00    	jne    c001c79b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c690:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c693:	85 c0                	test   eax,eax
c001c695:	0f 84 00 01 00 00    	je     c001c79b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c69b:	31 d2                	xor    edx,edx
c001c69d:	55                   	push   ebp
c001c69e:	52                   	push   edx
c001c69f:	50                   	push   eax
c001c6a0:	56                   	push   esi
c001c6a1:	e8 4c 68 ff ff       	call   c0012ef2 <File::seek(unsigned long long)>
c001c6a6:	83 c4 10             	add    esp,0x10
c001c6a9:	85 c0                	test   eax,eax
c001c6ab:	0f 85 ea 00 00 00    	jne    c001c79b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c6b1:	83 ec 0c             	sub    esp,0xc
c001c6b4:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c6b7:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c6bb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c6bf:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c6c3:	0f af c2             	imul   eax,edx
c001c6c6:	50                   	push   eax
c001c6c7:	e8 4d 31 ff ff       	call   c000f819 <malloc>
c001c6cc:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c6ce:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c6d2:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c6d5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c6d9:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c6dd:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c6e1:	0f af c2             	imul   eax,edx
c001c6e4:	99                   	cdq    
c001c6e5:	52                   	push   edx
c001c6e6:	50                   	push   eax
c001c6e7:	56                   	push   esi
c001c6e8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c6eb:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001c6ee:	83 c4 20             	add    esp,0x20
c001c6f1:	85 c0                	test   eax,eax
c001c6f3:	0f 84 a2 00 00 00    	je     c001c79b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c6f9:	31 d2                	xor    edx,edx
c001c6fb:	51                   	push   ecx
c001c6fc:	52                   	push   edx
c001c6fd:	50                   	push   eax
c001c6fe:	56                   	push   esi
c001c6ff:	e8 ee 67 ff ff       	call   c0012ef2 <File::seek(unsigned long long)>
c001c704:	83 c4 10             	add    esp,0x10
c001c707:	85 c0                	test   eax,eax
c001c709:	0f 85 8c 00 00 00    	jne    c001c79b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c70f:	83 ec 0c             	sub    esp,0xc
c001c712:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c716:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c71a:	31 ed                	xor    ebp,ebp
c001c71c:	0f af c2             	imul   eax,edx
c001c71f:	50                   	push   eax
c001c720:	e8 f4 30 ff ff       	call   c000f819 <malloc>
c001c725:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c727:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c72b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c72e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c732:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c736:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c73a:	0f af c2             	imul   eax,edx
c001c73d:	99                   	cdq    
c001c73e:	52                   	push   edx
c001c73f:	50                   	push   eax
c001c740:	56                   	push   esi
c001c741:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c744:	83 c4 20             	add    esp,0x20
c001c747:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c74f:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001c753:	0f 86 80 00 00 00    	jbe    c001c7d9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001c759:	0f b7 fd             	movzx  edi,bp
c001c75c:	c1 e7 05             	shl    edi,0x5
c001c75f:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001c763:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001c766:	75 6b                	jne    c001c7d3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c768:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001c76b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c76f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001c772:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c776:	52                   	push   edx
c001c777:	31 d2                	xor    edx,edx
c001c779:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001c77c:	52                   	push   edx
c001c77d:	50                   	push   eax
c001c77e:	56                   	push   esi
c001c77f:	e8 6e 67 ff ff       	call   c0012ef2 <File::seek(unsigned long long)>
c001c784:	83 c4 10             	add    esp,0x10
c001c787:	85 c0                	test   eax,eax
c001c789:	74 17                	je     c001c7a2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001c78b:	83 ec 0c             	sub    esp,0xc
c001c78e:	68 f4 c1 02 c0       	push   0xc002c1f4
c001c793:	e8 d9 60 ff ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c001c798:	83 c4 10             	add    esp,0x10
c001c79b:	31 c0                	xor    eax,eax
c001c79d:	e9 87 00 00 00       	jmp    c001c829 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001c7a2:	83 ec 0c             	sub    esp,0xc
c001c7a5:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001c7a8:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001c7ab:	50                   	push   eax
c001c7ac:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c7b0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c7b4:	56                   	push   esi
c001c7b5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001c7b9:	e8 b3 fb ff ff       	call   c001c371 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001c7be:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c7c2:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001c7c6:	83 c4 20             	add    esp,0x20
c001c7c9:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001c7cd:	73 04                	jae    c001c7d3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c7cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c7d3:	45                   	inc    ebp
c001c7d4:	e9 76 ff ff ff       	jmp    c001c74f <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001c7d9:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001c7dd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c7e1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c7e5:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001c7eb:	83 ec 0c             	sub    esp,0xc
c001c7ee:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001c7f4:	25 00 f0 ff ff       	and    eax,0xfffff000
c001c7f9:	05 00 10 00 00       	add    eax,0x1000
c001c7fe:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c801:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c805:	e8 1f 30 ff ff       	call   c000f829 <free>
c001c80a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c80d:	e8 17 30 ff ff       	call   c000f829 <free>
c001c812:	58                   	pop    eax
c001c813:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c817:	e8 0d 30 ff ff       	call   c000f829 <free>
c001c81c:	89 34 24             	mov    DWORD PTR [esp],esi
c001c81f:	e8 6e 66 ff ff       	call   c0012e92 <File::close()>
c001c824:	83 c4 10             	add    esp,0x10
c001c827:	b0 01                	mov    al,0x1
c001c829:	83 c4 3c             	add    esp,0x3c
c001c82c:	5b                   	pop    ebx
c001c82d:	5e                   	pop    esi
c001c82e:	5f                   	pop    edi
c001c82f:	5d                   	pop    ebp
c001c830:	c3                   	ret    

c001c831 <Thr::runtimeReferenceHelper()>:
c001c831:	83 ec 18             	sub    esp,0x18
c001c834:	68 fc c1 02 c0       	push   0xc002c1fc
c001c839:	e8 33 60 ff ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c001c83e:	fa                   	cli    
c001c83f:	83 c4 10             	add    esp,0x10
c001c842:	eb fe                	jmp    c001c842 <Thr::runtimeReferenceHelper()+0x11>

c001c844 <Thr::getAddressOfKernelSymbol(char const*)>:
c001c844:	57                   	push   edi
c001c845:	56                   	push   esi
c001c846:	53                   	push   ebx
c001c847:	31 db                	xor    ebx,ebx
c001c849:	39 1d 00 f7 02 c0    	cmp    DWORD PTR ds:0xc002f700,ebx
c001c84f:	7e 3c                	jle    c001c88d <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001c851:	8b 34 9d 80 f6 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd0980]
c001c858:	31 ff                	xor    edi,edi
c001c85a:	39 3c 9d 80 f5 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd0a80],edi
c001c861:	7e 27                	jle    c001c88a <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001c863:	50                   	push   eax
c001c864:	50                   	push   eax
c001c865:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c869:	8b 06                	mov    eax,DWORD PTR [esi]
c001c86b:	03 04 9d 00 f6 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd0a00]
c001c872:	50                   	push   eax
c001c873:	e8 20 40 fe ff       	call   c0000898 <strcmp>
c001c878:	83 c4 10             	add    esp,0x10
c001c87b:	85 c0                	test   eax,eax
c001c87d:	75 05                	jne    c001c884 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001c87f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001c882:	eb 0b                	jmp    c001c88f <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001c884:	83 c6 10             	add    esi,0x10
c001c887:	47                   	inc    edi
c001c888:	eb d0                	jmp    c001c85a <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001c88a:	43                   	inc    ebx
c001c88b:	eb bc                	jmp    c001c849 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001c88d:	31 c0                	xor    eax,eax
c001c88f:	5b                   	pop    ebx
c001c890:	5e                   	pop    esi
c001c891:	5f                   	pop    edi
c001c892:	c3                   	ret    

c001c893 <Thr::loadKernelSymbolTable(char const*)>:
c001c893:	55                   	push   ebp
c001c894:	57                   	push   edi
c001c895:	56                   	push   esi
c001c896:	53                   	push   ebx
c001c897:	83 ec 68             	sub    esp,0x68
c001c89a:	8b 35 50 f7 02 c0    	mov    esi,DWORD PTR ds:0xc002f750
c001c8a0:	68 14 01 00 00       	push   0x114
c001c8a5:	e8 6f 2f ff ff       	call   c000f819 <malloc>
c001c8aa:	83 c4 0c             	add    esp,0xc
c001c8ad:	89 c3                	mov    ebx,eax
c001c8af:	56                   	push   esi
c001c8b0:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001c8b4:	50                   	push   eax
c001c8b5:	e8 16 65 ff ff       	call   c0012dd0 <File::File(char const*, Process*)>
c001c8ba:	5e                   	pop    esi
c001c8bb:	5f                   	pop    edi
c001c8bc:	6a 01                	push   0x1
c001c8be:	53                   	push   ebx
c001c8bf:	e8 70 65 ff ff       	call   c0012e34 <File::open(FileOpenMode)>
c001c8c4:	83 c4 10             	add    esp,0x10
c001c8c7:	85 c0                	test   eax,eax
c001c8c9:	74 0a                	je     c001c8d5 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001c8cb:	83 ec 0c             	sub    esp,0xc
c001c8ce:	68 1e c2 02 c0       	push   0xc002c21e
c001c8d3:	eb 34                	jmp    c001c909 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001c8d5:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001c8dd:	83 ec 0c             	sub    esp,0xc
c001c8e0:	6a 34                	push   0x34
c001c8e2:	e8 32 2f ff ff       	call   c000f819 <malloc>
c001c8e7:	59                   	pop    ecx
c001c8e8:	89 c7                	mov    edi,eax
c001c8ea:	8d 74 24 34          	lea    esi,[esp+0x34]
c001c8ee:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c8f0:	56                   	push   esi
c001c8f1:	57                   	push   edi
c001c8f2:	6a 00                	push   0x0
c001c8f4:	6a 34                	push   0x34
c001c8f6:	53                   	push   ebx
c001c8f7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c8fa:	83 c4 20             	add    esp,0x20
c001c8fd:	85 c0                	test   eax,eax
c001c8ff:	74 17                	je     c001c918 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001c901:	83 ec 0c             	sub    esp,0xc
c001c904:	68 35 c2 02 c0       	push   0xc002c235
c001c909:	e8 2f d8 ff ff       	call   c001a13d <Krnl::panic(char const*)>
c001c90e:	83 c4 10             	add    esp,0x10
c001c911:	31 c0                	xor    eax,eax
c001c913:	e9 31 02 00 00       	jmp    c001cb49 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001c918:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c91e:	75 e1                	jne    c001c901 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c920:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c923:	85 c0                	test   eax,eax
c001c925:	74 da                	je     c001c901 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c927:	52                   	push   edx
c001c928:	31 d2                	xor    edx,edx
c001c92a:	52                   	push   edx
c001c92b:	50                   	push   eax
c001c92c:	53                   	push   ebx
c001c92d:	e8 c0 65 ff ff       	call   c0012ef2 <File::seek(unsigned long long)>
c001c932:	83 c4 10             	add    esp,0x10
c001c935:	85 c0                	test   eax,eax
c001c937:	75 c8                	jne    c001c901 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c939:	83 ec 0c             	sub    esp,0xc
c001c93c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c940:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c944:	31 ed                	xor    ebp,ebp
c001c946:	0f af c2             	imul   eax,edx
c001c949:	50                   	push   eax
c001c94a:	e8 ca 2e ff ff       	call   c000f819 <malloc>
c001c94f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c951:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c955:	89 34 24             	mov    DWORD PTR [esp],esi
c001c958:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c95c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c960:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c964:	0f af c2             	imul   eax,edx
c001c967:	99                   	cdq    
c001c968:	52                   	push   edx
c001c969:	50                   	push   eax
c001c96a:	53                   	push   ebx
c001c96b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c96e:	83 c4 20             	add    esp,0x20
c001c971:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c979:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c981:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c989:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c991:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001c995:	0f 86 aa 00 00 00    	jbe    c001ca45 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001c99b:	0f b7 f5             	movzx  esi,bp
c001c99e:	6b f6 28             	imul   esi,esi,0x28
c001c9a1:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c9a5:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c9a8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c9ac:	50                   	push   eax
c001c9ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c9b1:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001c9b5:	8b 16                	mov    edx,DWORD PTR [esi]
c001c9b7:	6b c0 28             	imul   eax,eax,0x28
c001c9ba:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001c9be:	89 d0                	mov    eax,edx
c001c9c0:	31 d2                	xor    edx,edx
c001c9c2:	52                   	push   edx
c001c9c3:	50                   	push   eax
c001c9c4:	53                   	push   ebx
c001c9c5:	e8 28 65 ff ff       	call   c0012ef2 <File::seek(unsigned long long)>
c001c9ca:	83 c4 0c             	add    esp,0xc
c001c9cd:	6a 20                	push   0x20
c001c9cf:	6a 00                	push   0x0
c001c9d1:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c9d5:	52                   	push   edx
c001c9d6:	e8 75 3d fe ff       	call   c0000750 <memset>
c001c9db:	58                   	pop    eax
c001c9dc:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c9de:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001c9e2:	51                   	push   ecx
c001c9e3:	8d 54 24 40          	lea    edx,[esp+0x40]
c001c9e7:	52                   	push   edx
c001c9e8:	6a 00                	push   0x0
c001c9ea:	6a 1f                	push   0x1f
c001c9ec:	53                   	push   ebx
c001c9ed:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c9f0:	83 c4 18             	add    esp,0x18
c001c9f3:	68 4c c2 02 c0       	push   0xc002c24c
c001c9f8:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c9fc:	52                   	push   edx
c001c9fd:	e8 96 3e fe ff       	call   c0000898 <strcmp>
c001ca02:	83 c4 10             	add    esp,0x10
c001ca05:	85 c0                	test   eax,eax
c001ca07:	75 0f                	jne    c001ca18 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001ca09:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ca0c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ca10:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ca14:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ca18:	50                   	push   eax
c001ca19:	50                   	push   eax
c001ca1a:	68 54 c2 02 c0       	push   0xc002c254
c001ca1f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001ca23:	50                   	push   eax
c001ca24:	e8 6f 3e fe ff       	call   c0000898 <strcmp>
c001ca29:	83 c4 10             	add    esp,0x10
c001ca2c:	85 c0                	test   eax,eax
c001ca2e:	75 0f                	jne    c001ca3f <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001ca30:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ca33:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ca37:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ca3b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ca3f:	45                   	inc    ebp
c001ca40:	e9 4c ff ff ff       	jmp    c001c991 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001ca45:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ca4a:	75 10                	jne    c001ca5c <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001ca4c:	83 ec 0c             	sub    esp,0xc
c001ca4f:	68 5c c2 02 c0       	push   0xc002c25c
c001ca54:	e8 e4 d6 ff ff       	call   c001a13d <Krnl::panic(char const*)>
c001ca59:	83 c4 10             	add    esp,0x10
c001ca5c:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001ca61:	75 10                	jne    c001ca73 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001ca63:	83 ec 0c             	sub    esp,0xc
c001ca66:	68 5c c2 02 c0       	push   0xc002c25c
c001ca6b:	e8 cd d6 ff ff       	call   c001a13d <Krnl::panic(char const*)>
c001ca70:	83 c4 10             	add    esp,0x10
c001ca73:	31 d2                	xor    edx,edx
c001ca75:	50                   	push   eax
c001ca76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca7a:	52                   	push   edx
c001ca7b:	50                   	push   eax
c001ca7c:	53                   	push   ebx
c001ca7d:	e8 70 64 ff ff       	call   c0012ef2 <File::seek(unsigned long long)>
c001ca82:	5a                   	pop    edx
c001ca83:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ca87:	e8 8d 2d ff ff       	call   c000f819 <malloc>
c001ca8c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ca90:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ca94:	31 c9                	xor    ecx,ecx
c001ca96:	5e                   	pop    esi
c001ca97:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ca99:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001ca9d:	55                   	push   ebp
c001ca9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001caa2:	51                   	push   ecx
c001caa3:	52                   	push   edx
c001caa4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001caa8:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001caac:	53                   	push   ebx
c001caad:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cab0:	83 c4 14             	add    esp,0x14
c001cab3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cab7:	e8 5d 2d ff ff       	call   c000f819 <malloc>
c001cabc:	89 c6                	mov    esi,eax
c001cabe:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cac0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cac3:	56                   	push   esi
c001cac4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cac8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001cacc:	51                   	push   ecx
c001cacd:	52                   	push   edx
c001cace:	53                   	push   ebx
c001cacf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cad2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cad6:	8b 15 00 f7 02 c0    	mov    edx,DWORD PTR ds:0xc002f700
c001cadc:	83 c4 1c             	add    esp,0x1c
c001cadf:	c1 e8 04             	shr    eax,0x4
c001cae2:	89 04 95 80 f5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd0a80],eax
c001cae9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001caed:	31 d2                	xor    edx,edx
c001caef:	52                   	push   edx
c001caf0:	50                   	push   eax
c001caf1:	53                   	push   ebx
c001caf2:	e8 fb 63 ff ff       	call   c0012ef2 <File::seek(unsigned long long)>
c001caf7:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001caf9:	31 d2                	xor    edx,edx
c001cafb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cafe:	56                   	push   esi
c001caff:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cb03:	52                   	push   edx
c001cb04:	50                   	push   eax
c001cb05:	53                   	push   ebx
c001cb06:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cb09:	83 c4 14             	add    esp,0x14
c001cb0c:	53                   	push   ebx
c001cb0d:	e8 80 63 ff ff       	call   c0012e92 <File::close()>
c001cb12:	5d                   	pop    ebp
c001cb13:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cb17:	e8 0d 2d ff ff       	call   c000f829 <free>
c001cb1c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cb1f:	e8 05 2d ff ff       	call   c000f829 <free>
c001cb24:	a1 00 f7 02 c0       	mov    eax,ds:0xc002f700
c001cb29:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cb2d:	8d 50 01             	lea    edx,[eax+0x1]
c001cb30:	89 0c 85 80 f6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0980],ecx
c001cb37:	89 34 85 00 f6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0a00],esi
c001cb3e:	89 15 00 f7 02 c0    	mov    DWORD PTR ds:0xc002f700,edx
c001cb44:	83 c4 10             	add    esp,0x10
c001cb47:	b0 01                	mov    al,0x1
c001cb49:	83 c4 5c             	add    esp,0x5c
c001cb4c:	5b                   	pop    ebx
c001cb4d:	5e                   	pop    esi
c001cb4e:	5f                   	pop    edi
c001cb4f:	5d                   	pop    ebp
c001cb50:	c3                   	ret    

c001cb51 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001cb51:	55                   	push   ebp
c001cb52:	57                   	push   edi
c001cb53:	56                   	push   esi
c001cb54:	53                   	push   ebx
c001cb55:	81 ec 68 03 00 00    	sub    esp,0x368
c001cb5b:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001cb62:	8b 1d 50 f7 02 c0    	mov    ebx,DWORD PTR ds:0xc002f750
c001cb68:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001cb6c:	68 14 01 00 00       	push   0x114
c001cb71:	e8 a3 2c ff ff       	call   c000f819 <malloc>
c001cb76:	83 c4 0c             	add    esp,0xc
c001cb79:	89 c5                	mov    ebp,eax
c001cb7b:	53                   	push   ebx
c001cb7c:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001cb83:	50                   	push   eax
c001cb84:	e8 47 62 ff ff       	call   c0012dd0 <File::File(char const*, Process*)>
c001cb89:	5e                   	pop    esi
c001cb8a:	5f                   	pop    edi
c001cb8b:	6a 01                	push   0x1
c001cb8d:	55                   	push   ebp
c001cb8e:	e8 a1 62 ff ff       	call   c0012e34 <File::open(FileOpenMode)>
c001cb93:	83 c4 10             	add    esp,0x10
c001cb96:	85 c0                	test   eax,eax
c001cb98:	0f 85 a7 06 00 00    	jne    c001d245 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cb9e:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001cba6:	83 ec 0c             	sub    esp,0xc
c001cba9:	6a 34                	push   0x34
c001cbab:	e8 69 2c ff ff       	call   c000f819 <malloc>
c001cbb0:	5b                   	pop    ebx
c001cbb1:	89 c7                	mov    edi,eax
c001cbb3:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001cbb7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cbba:	53                   	push   ebx
c001cbbb:	57                   	push   edi
c001cbbc:	6a 00                	push   0x0
c001cbbe:	6a 34                	push   0x34
c001cbc0:	55                   	push   ebp
c001cbc1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cbc4:	83 c4 20             	add    esp,0x20
c001cbc7:	85 c0                	test   eax,eax
c001cbc9:	0f 85 76 06 00 00    	jne    c001d245 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cbcf:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cbd5:	0f 85 6a 06 00 00    	jne    c001d245 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cbdb:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cbde:	85 c0                	test   eax,eax
c001cbe0:	0f 84 5f 06 00 00    	je     c001d245 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cbe6:	31 d2                	xor    edx,edx
c001cbe8:	51                   	push   ecx
c001cbe9:	52                   	push   edx
c001cbea:	50                   	push   eax
c001cbeb:	55                   	push   ebp
c001cbec:	e8 01 63 ff ff       	call   c0012ef2 <File::seek(unsigned long long)>
c001cbf1:	83 c4 10             	add    esp,0x10
c001cbf4:	85 c0                	test   eax,eax
c001cbf6:	0f 85 49 06 00 00    	jne    c001d245 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cbfc:	83 ec 0c             	sub    esp,0xc
c001cbff:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001cc02:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cc06:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001cc0a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cc0e:	0f af c2             	imul   eax,edx
c001cc11:	50                   	push   eax
c001cc12:	e8 02 2c ff ff       	call   c000f819 <malloc>
c001cc17:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cc1a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cc1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cc21:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cc25:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cc29:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cc2d:	0f af c2             	imul   eax,edx
c001cc30:	99                   	cdq    
c001cc31:	52                   	push   edx
c001cc32:	50                   	push   eax
c001cc33:	55                   	push   ebp
c001cc34:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cc37:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001cc3a:	83 c4 20             	add    esp,0x20
c001cc3d:	85 c0                	test   eax,eax
c001cc3f:	0f 84 00 06 00 00    	je     c001d245 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cc45:	52                   	push   edx
c001cc46:	31 d2                	xor    edx,edx
c001cc48:	52                   	push   edx
c001cc49:	50                   	push   eax
c001cc4a:	55                   	push   ebp
c001cc4b:	e8 a2 62 ff ff       	call   c0012ef2 <File::seek(unsigned long long)>
c001cc50:	83 c4 10             	add    esp,0x10
c001cc53:	85 c0                	test   eax,eax
c001cc55:	0f 85 ea 05 00 00    	jne    c001d245 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cc5b:	83 ec 0c             	sub    esp,0xc
c001cc5e:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001cc62:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001cc66:	31 f6                	xor    esi,esi
c001cc68:	0f af c2             	imul   eax,edx
c001cc6b:	50                   	push   eax
c001cc6c:	e8 a8 2b ff ff       	call   c000f819 <malloc>
c001cc71:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cc74:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cc78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cc7b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cc7f:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001cc83:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001cc87:	0f af c2             	imul   eax,edx
c001cc8a:	99                   	cdq    
c001cc8b:	52                   	push   edx
c001cc8c:	50                   	push   eax
c001cc8d:	55                   	push   ebp
c001cc8e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cc91:	83 c4 20             	add    esp,0x20
c001cc94:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001cc98:	0f 86 8a 00 00 00    	jbe    c001cd28 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001cc9e:	0f b7 de             	movzx  ebx,si
c001cca1:	c1 e3 05             	shl    ebx,0x5
c001cca4:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001cca8:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001ccab:	75 75                	jne    c001cd22 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001ccad:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001ccb0:	31 d2                	xor    edx,edx
c001ccb2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ccb6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ccb9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ccbd:	50                   	push   eax
c001ccbe:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001ccc1:	52                   	push   edx
c001ccc2:	50                   	push   eax
c001ccc3:	55                   	push   ebp
c001ccc4:	e8 29 62 ff ff       	call   c0012ef2 <File::seek(unsigned long long)>
c001ccc9:	83 c4 10             	add    esp,0x10
c001cccc:	85 c0                	test   eax,eax
c001ccce:	0f 85 71 05 00 00    	jne    c001d245 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001ccd4:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001ccdb:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001ccde:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001cce2:	31 d2                	xor    edx,edx
c001cce4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001cce8:	83 ec 0c             	sub    esp,0xc
c001cceb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ccef:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ccf6:	50                   	push   eax
c001ccf7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ccfb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ccff:	52                   	push   edx
c001cd00:	50                   	push   eax
c001cd01:	55                   	push   ebp
c001cd02:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cd05:	83 c4 1c             	add    esp,0x1c
c001cd08:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001cd0b:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001cd0e:	50                   	push   eax
c001cd0f:	6a 00                	push   0x0
c001cd11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd15:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001cd19:	50                   	push   eax
c001cd1a:	e8 31 3a fe ff       	call   c0000750 <memset>
c001cd1f:	83 c4 10             	add    esp,0x10
c001cd22:	46                   	inc    esi
c001cd23:	e9 6c ff ff ff       	jmp    c001cc94 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001cd28:	53                   	push   ebx
c001cd29:	31 db                	xor    ebx,ebx
c001cd2b:	68 00 01 00 00       	push   0x100
c001cd30:	6a 00                	push   0x0
c001cd32:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001cd36:	50                   	push   eax
c001cd37:	e8 14 3a fe ff       	call   c0000750 <memset>
c001cd3c:	83 c4 0c             	add    esp,0xc
c001cd3f:	68 00 01 00 00       	push   0x100
c001cd44:	6a 00                	push   0x0
c001cd46:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001cd4d:	50                   	push   eax
c001cd4e:	e8 fd 39 fe ff       	call   c0000750 <memset>
c001cd53:	83 c4 10             	add    esp,0x10
c001cd56:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cd5e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001cd66:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001cd6e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cd76:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001cd7e:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001cd82:	0f 86 30 01 00 00    	jbe    c001ceb8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001cd88:	0f b7 f3             	movzx  esi,bx
c001cd8b:	6b f6 28             	imul   esi,esi,0x28
c001cd8e:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cd92:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001cd95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cd99:	52                   	push   edx
c001cd9a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cd9e:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001cda2:	8b 06                	mov    eax,DWORD PTR [esi]
c001cda4:	6b d2 28             	imul   edx,edx,0x28
c001cda7:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001cdab:	31 d2                	xor    edx,edx
c001cdad:	52                   	push   edx
c001cdae:	50                   	push   eax
c001cdaf:	55                   	push   ebp
c001cdb0:	e8 3d 61 ff ff       	call   c0012ef2 <File::seek(unsigned long long)>
c001cdb5:	83 c4 0c             	add    esp,0xc
c001cdb8:	6a 20                	push   0x20
c001cdba:	6a 00                	push   0x0
c001cdbc:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001cdc3:	51                   	push   ecx
c001cdc4:	e8 87 39 fe ff       	call   c0000750 <memset>
c001cdc9:	59                   	pop    ecx
c001cdca:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cdcd:	8d 54 24 58          	lea    edx,[esp+0x58]
c001cdd1:	52                   	push   edx
c001cdd2:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001cdd9:	51                   	push   ecx
c001cdda:	6a 00                	push   0x0
c001cddc:	6a 1f                	push   0x1f
c001cdde:	55                   	push   ebp
c001cddf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cde2:	83 c4 1c             	add    esp,0x1c
c001cde5:	6a 09                	push   0x9
c001cde7:	68 76 c2 02 c0       	push   0xc002c276
c001cdec:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001cdf3:	51                   	push   ecx
c001cdf4:	e8 53 38 fe ff       	call   c000064c <memcmp>
c001cdf9:	83 c4 10             	add    esp,0x10
c001cdfc:	85 c0                	test   eax,eax
c001cdfe:	75 21                	jne    c001ce21 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001ce00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce04:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ce08:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001ce0c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ce10:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ce13:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001ce1a:	89 d0                	mov    eax,edx
c001ce1c:	40                   	inc    eax
c001ce1d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ce21:	50                   	push   eax
c001ce22:	6a 09                	push   0x9
c001ce24:	68 80 c2 02 c0       	push   0xc002c280
c001ce29:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ce30:	50                   	push   eax
c001ce31:	e8 16 38 fe ff       	call   c000064c <memcmp>
c001ce36:	83 c4 10             	add    esp,0x10
c001ce39:	85 c0                	test   eax,eax
c001ce3b:	75 21                	jne    c001ce5e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001ce3d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce41:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ce45:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001ce49:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ce4d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ce50:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001ce57:	89 d0                	mov    eax,edx
c001ce59:	40                   	inc    eax
c001ce5a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ce5e:	50                   	push   eax
c001ce5f:	50                   	push   eax
c001ce60:	68 4c c2 02 c0       	push   0xc002c24c
c001ce65:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ce6c:	50                   	push   eax
c001ce6d:	e8 26 3a fe ff       	call   c0000898 <strcmp>
c001ce72:	83 c4 10             	add    esp,0x10
c001ce75:	85 c0                	test   eax,eax
c001ce77:	75 0f                	jne    c001ce88 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001ce79:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ce7c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ce80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ce84:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ce88:	50                   	push   eax
c001ce89:	50                   	push   eax
c001ce8a:	68 54 c2 02 c0       	push   0xc002c254
c001ce8f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ce96:	50                   	push   eax
c001ce97:	e8 fc 39 fe ff       	call   c0000898 <strcmp>
c001ce9c:	83 c4 10             	add    esp,0x10
c001ce9f:	85 c0                	test   eax,eax
c001cea1:	75 0f                	jne    c001ceb2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001cea3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cea6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ceaa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ceae:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001ceb2:	43                   	inc    ebx
c001ceb3:	e9 c6 fe ff ff       	jmp    c001cd7e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001ceb8:	31 d2                	xor    edx,edx
c001ceba:	50                   	push   eax
c001cebb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cebf:	52                   	push   edx
c001cec0:	50                   	push   eax
c001cec1:	55                   	push   ebp
c001cec2:	e8 2b 60 ff ff       	call   c0012ef2 <File::seek(unsigned long long)>
c001cec7:	58                   	pop    eax
c001cec8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cecc:	e8 48 29 ff ff       	call   c000f819 <malloc>
c001ced1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001ced4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001ced8:	31 d2                	xor    edx,edx
c001ceda:	58                   	pop    eax
c001cedb:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001cedf:	53                   	push   ebx
c001cee0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001cee4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cee8:	52                   	push   edx
c001cee9:	50                   	push   eax
c001ceea:	55                   	push   ebp
c001ceeb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ceee:	83 c4 14             	add    esp,0x14
c001cef1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cef5:	e8 1f 29 ff ff       	call   c000f819 <malloc>
c001cefa:	31 d2                	xor    edx,edx
c001cefc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cf00:	83 c4 0c             	add    esp,0xc
c001cf03:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cf07:	52                   	push   edx
c001cf08:	50                   	push   eax
c001cf09:	55                   	push   ebp
c001cf0a:	e8 e3 5f ff ff       	call   c0012ef2 <File::seek(unsigned long long)>
c001cf0f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cf12:	31 d2                	xor    edx,edx
c001cf14:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cf17:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001cf1b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cf1f:	52                   	push   edx
c001cf20:	50                   	push   eax
c001cf21:	55                   	push   ebp
c001cf22:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cf25:	83 c4 20             	add    esp,0x20
c001cf28:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cf30:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001cf34:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001cf38:	0f 84 0b 03 00 00    	je     c001d249 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001cf3e:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001cf45:	31 d2                	xor    edx,edx
c001cf47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cf4b:	c1 e8 03             	shr    eax,0x3
c001cf4e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001cf52:	51                   	push   ecx
c001cf53:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cf57:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001cf5b:	52                   	push   edx
c001cf5c:	50                   	push   eax
c001cf5d:	55                   	push   ebp
c001cf5e:	e8 8f 5f ff ff       	call   c0012ef2 <File::seek(unsigned long long)>
c001cf63:	5b                   	pop    ebx
c001cf64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf68:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001cf6f:	e8 a5 28 ff ff       	call   c000f819 <malloc>
c001cf74:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cf77:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cf7b:	31 d2                	xor    edx,edx
c001cf7d:	5e                   	pop    esi
c001cf7e:	8d 44 24 58          	lea    eax,[esp+0x58]
c001cf82:	50                   	push   eax
c001cf83:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf87:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cf8b:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001cf92:	52                   	push   edx
c001cf93:	50                   	push   eax
c001cf94:	55                   	push   ebp
c001cf95:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cf98:	83 c4 20             	add    esp,0x20
c001cf9b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001cfa3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001cfa7:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001cfab:	0f 8d 7c 02 00 00    	jge    c001d22d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001cfb1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cfb5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cfb9:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001cfbe:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001cfc1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001cfc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cfc9:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001cfcd:	89 d8                	mov    eax,ebx
c001cfcf:	c1 e8 08             	shr    eax,0x8
c001cfd2:	89 c6                	mov    esi,eax
c001cfd4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001cfd8:	c1 e6 04             	shl    esi,0x4
c001cfdb:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001cfdf:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001cfe2:	85 d2                	test   edx,edx
c001cfe4:	0f 85 bf 00 00 00    	jne    c001d0a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cfea:	83 ec 0c             	sub    esp,0xc
c001cfed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cff1:	03 06                	add    eax,DWORD PTR [esi]
c001cff3:	50                   	push   eax
c001cff4:	e8 4b f8 ff ff       	call   c001c844 <Thr::getAddressOfKernelSymbol(char const*)>
c001cff9:	83 c4 10             	add    esp,0x10
c001cffc:	89 c2                	mov    edx,eax
c001cffe:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d003:	85 c0                	test   eax,eax
c001d005:	0f 85 9e 00 00 00    	jne    c001d0a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d00b:	83 ec 0c             	sub    esp,0xc
c001d00e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d012:	03 06                	add    eax,DWORD PTR [esi]
c001d014:	50                   	push   eax
c001d015:	e8 5b 17 ff ff       	call   c000e775 <Krnl::resolveCompatibilitySymbol(char*)>
c001d01a:	83 c4 10             	add    esp,0x10
c001d01d:	89 c2                	mov    edx,eax
c001d01f:	85 c0                	test   eax,eax
c001d021:	0f 85 82 00 00 00    	jne    c001d0a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d027:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d02b:	50                   	push   eax
c001d02c:	50                   	push   eax
c001d02d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d031:	03 06                	add    eax,DWORD PTR [esi]
c001d033:	50                   	push   eax
c001d034:	68 8a c2 02 c0       	push   0xc002c28a
c001d039:	e8 33 58 ff ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c001d03e:	58                   	pop    eax
c001d03f:	5a                   	pop    edx
c001d040:	68 a4 c2 02 c0       	push   0xc002c2a4
c001d045:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d04c:	50                   	push   eax
c001d04d:	e8 ba 37 fe ff       	call   c000080c <strcpy>
c001d052:	59                   	pop    ecx
c001d053:	58                   	pop    eax
c001d054:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d058:	03 06                	add    eax,DWORD PTR [esi]
c001d05a:	50                   	push   eax
c001d05b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d062:	50                   	push   eax
c001d063:	e8 e4 38 fe ff       	call   c000094c <strcat>
c001d068:	58                   	pop    eax
c001d069:	5a                   	pop    edx
c001d06a:	68 3a c3 02 c0       	push   0xc002c33a
c001d06f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d076:	50                   	push   eax
c001d077:	e8 d0 38 fe ff       	call   c000094c <strcat>
c001d07c:	83 c4 10             	add    esp,0x10
c001d07f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d084:	0f 84 5d 01 00 00    	je     c001d1e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d08a:	83 ec 0c             	sub    esp,0xc
c001d08d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d094:	50                   	push   eax
c001d095:	e8 a3 d0 ff ff       	call   c001a13d <Krnl::panic(char const*)>
c001d09a:	83 c4 10             	add    esp,0x10
c001d09d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d0a1:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d0a5:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d0a9:	80 fb 01             	cmp    bl,0x1
c001d0ac:	0f 85 88 00 00 00    	jne    c001d13a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001d0b2:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d0b9:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d0bd:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d0c1:	01 ce                	add    esi,ecx
c001d0c3:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d0c9:	0f 94 c0             	sete   al
c001d0cc:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d0d2:	0f 94 c3             	sete   bl
c001d0d5:	09 c3                	or     ebx,eax
c001d0d7:	8b 06                	mov    eax,DWORD PTR [esi]
c001d0d9:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d0de:	74 41                	je     c001d121 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001d0e0:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d0e3:	84 db                	test   bl,bl
c001d0e5:	75 15                	jne    c001d0fc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001d0e7:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d0eb:	66 83 f8 0c          	cmp    ax,0xc
c001d0ef:	76 05                	jbe    c001d0f6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001d0f1:	b8 0c 00 00 00       	mov    eax,0xc
c001d0f6:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d0fa:	76 37                	jbe    c001d133 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d0fc:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d100:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d105:	0f 84 dc 00 00 00    	je     c001d1e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d10b:	83 ec 0c             	sub    esp,0xc
c001d10e:	68 bb c2 02 c0       	push   0xc002c2bb
c001d113:	e8 25 d0 ff ff       	call   c001a13d <Krnl::panic(char const*)>
c001d118:	83 c4 10             	add    esp,0x10
c001d11b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d11f:	eb 12                	jmp    c001d133 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d121:	01 c1                	add    ecx,eax
c001d123:	84 db                	test   bl,bl
c001d125:	75 0c                	jne    c001d133 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d127:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d12b:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d12f:	77 02                	ja     c001d133 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d131:	01 d1                	add    ecx,edx
c001d133:	89 0e                	mov    DWORD PTR [esi],ecx
c001d135:	e9 ea 00 00 00       	jmp    c001d224 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d13a:	80 fb 02             	cmp    bl,0x2
c001d13d:	75 7c                	jne    c001d1bb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001d13f:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d146:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d14a:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d14e:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d154:	74 20                	je     c001d176 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001d156:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d15c:	74 18                	je     c001d176 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001d15e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d162:	b9 0a 00 00 00       	mov    ecx,0xa
c001d167:	66 83 f8 0e          	cmp    ax,0xe
c001d16b:	77 03                	ja     c001d170 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001d16d:	8d 48 fc             	lea    ecx,[eax-0x4]
c001d170:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001d174:	76 1f                	jbe    c001d195 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001d176:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d17a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d17f:	74 66                	je     c001d1e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d181:	83 ec 0c             	sub    esp,0xc
c001d184:	68 d7 c2 02 c0       	push   0xc002c2d7
c001d189:	e8 af cf ff ff       	call   c001a13d <Krnl::panic(char const*)>
c001d18e:	83 c4 10             	add    esp,0x10
c001d191:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d195:	8b 06                	mov    eax,DWORD PTR [esi]
c001d197:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d19c:	74 13                	je     c001d1b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001d19e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d1a2:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d1a9:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d1ad:	01 c8                	add    eax,ecx
c001d1af:	eb 04                	jmp    c001d1b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001d1b1:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d1b5:	01 c2                	add    edx,eax
c001d1b7:	89 16                	mov    DWORD PTR [esi],edx
c001d1b9:	eb 69                	jmp    c001d224 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d1bb:	0f b6 db             	movzx  ebx,bl
c001d1be:	50                   	push   eax
c001d1bf:	50                   	push   eax
c001d1c0:	53                   	push   ebx
c001d1c1:	68 f3 c2 02 c0       	push   0xc002c2f3
c001d1c6:	e8 a6 56 ff ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c001d1cb:	83 c4 10             	add    esp,0x10
c001d1ce:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d1d3:	74 12                	je     c001d1e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d1d5:	83 ec 0c             	sub    esp,0xc
c001d1d8:	68 fe c2 02 c0       	push   0xc002c2fe
c001d1dd:	e8 5b cf ff ff       	call   c001a13d <Krnl::panic(char const*)>
c001d1e2:	83 c4 10             	add    esp,0x10
c001d1e5:	eb 3d                	jmp    c001d224 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d1e7:	83 ec 0c             	sub    esp,0xc
c001d1ea:	55                   	push   ebp
c001d1eb:	e8 a2 5c ff ff       	call   c0012e92 <File::close()>
c001d1f0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d1f3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d1f6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d1f9:	59                   	pop    ecx
c001d1fa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d1fe:	e8 26 26 ff ff       	call   c000f829 <free>
c001d203:	5b                   	pop    ebx
c001d204:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d208:	e8 1c 26 ff ff       	call   c000f829 <free>
c001d20d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d210:	e8 14 26 ff ff       	call   c000f829 <free>
c001d215:	5e                   	pop    esi
c001d216:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d21a:	e8 0a 26 ff ff       	call   c000f829 <free>
c001d21f:	83 c4 10             	add    esp,0x10
c001d222:	eb 21                	jmp    c001d245 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d224:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d228:	e9 76 fd ff ff       	jmp    c001cfa3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d22d:	83 ec 0c             	sub    esp,0xc
c001d230:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d234:	e8 f0 25 ff ff       	call   c000f829 <free>
c001d239:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d23d:	83 c4 10             	add    esp,0x10
c001d240:	e9 eb fc ff ff       	jmp    c001cf30 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d245:	31 c0                	xor    eax,eax
c001d247:	eb 33                	jmp    c001d27c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001d249:	83 ec 0c             	sub    esp,0xc
c001d24c:	55                   	push   ebp
c001d24d:	e8 40 5c ff ff       	call   c0012e92 <File::close()>
c001d252:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d255:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d258:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d25b:	58                   	pop    eax
c001d25c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d260:	e8 c4 25 ff ff       	call   c000f829 <free>
c001d265:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d268:	e8 bc 25 ff ff       	call   c000f829 <free>
c001d26d:	5a                   	pop    edx
c001d26e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d272:	e8 b2 25 ff ff       	call   c000f829 <free>
c001d277:	83 c4 10             	add    esp,0x10
c001d27a:	b0 01                	mov    al,0x1
c001d27c:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d282:	5b                   	pop    ebx
c001d283:	5e                   	pop    esi
c001d284:	5f                   	pop    edi
c001d285:	5d                   	pop    ebp
c001d286:	c3                   	ret    

c001d287 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d287:	56                   	push   esi
c001d288:	31 d2                	xor    edx,edx
c001d28a:	53                   	push   ebx
c001d28b:	8b 1d 60 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002ef60
c001d291:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d295:	39 d3                	cmp    ebx,edx
c001d297:	7e 1b                	jle    c001d2b4 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d299:	8b 04 95 80 f1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0e80]
c001d2a0:	39 c8                	cmp    eax,ecx
c001d2a2:	77 0d                	ja     c001d2b1 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d2a4:	8b 34 95 80 ef 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd1080]
c001d2ab:	01 c6                	add    esi,eax
c001d2ad:	39 ce                	cmp    esi,ecx
c001d2af:	77 05                	ja     c001d2b6 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d2b1:	42                   	inc    edx
c001d2b2:	eb e1                	jmp    c001d295 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d2b4:	31 c0                	xor    eax,eax
c001d2b6:	5b                   	pop    ebx
c001d2b7:	5e                   	pop    esi
c001d2b8:	c3                   	ret    

c001d2b9 <Thr::getDriverNameFromAddress(unsigned long)>:
c001d2b9:	53                   	push   ebx
c001d2ba:	31 c0                	xor    eax,eax
c001d2bc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d2c0:	8b 1d 60 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002ef60
c001d2c6:	39 c3                	cmp    ebx,eax
c001d2c8:	7e 22                	jle    c001d2ec <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d2ca:	8b 14 85 80 f1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0e80]
c001d2d1:	39 ca                	cmp    edx,ecx
c001d2d3:	77 14                	ja     c001d2e9 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d2d5:	03 14 85 80 ef 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd1080]
c001d2dc:	39 ca                	cmp    edx,ecx
c001d2de:	76 09                	jbe    c001d2e9 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d2e0:	8b 04 85 80 f3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0c80]
c001d2e7:	eb 05                	jmp    c001d2ee <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d2e9:	40                   	inc    eax
c001d2ea:	eb da                	jmp    c001d2c6 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d2ec:	31 c0                	xor    eax,eax
c001d2ee:	5b                   	pop    ebx
c001d2ef:	c3                   	ret    

c001d2f0 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d2f0:	53                   	push   ebx
c001d2f1:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d2f5:	53                   	push   ebx
c001d2f6:	e8 8c ff ff ff       	call   c001d287 <Thr::getDriverBaseFromAddress(unsigned long)>
c001d2fb:	5a                   	pop    edx
c001d2fc:	31 d2                	xor    edx,edx
c001d2fe:	85 c0                	test   eax,eax
c001d300:	74 04                	je     c001d306 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d302:	89 da                	mov    edx,ebx
c001d304:	29 c2                	sub    edx,eax
c001d306:	89 d0                	mov    eax,edx
c001d308:	5b                   	pop    ebx
c001d309:	c3                   	ret    

c001d30a <Thr::loadDLL(char const*, bool)>:
c001d30a:	55                   	push   ebp
c001d30b:	57                   	push   edi
c001d30c:	56                   	push   esi
c001d30d:	53                   	push   ebx
c001d30e:	81 ec 34 01 00 00    	sub    esp,0x134
c001d314:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d31b:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001d322:	56                   	push   esi
c001d323:	68 16 c3 02 c0       	push   0xc002c316
c001d328:	e8 44 55 ff ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c001d32d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d334:	e8 e0 24 ff ff       	call   c000f819 <malloc>
c001d339:	83 c4 0c             	add    esp,0xc
c001d33c:	89 c3                	mov    ebx,eax
c001d33e:	ff 35 50 f7 02 c0    	push   DWORD PTR ds:0xc002f750
c001d344:	56                   	push   esi
c001d345:	50                   	push   eax
c001d346:	e8 85 5a ff ff       	call   c0012dd0 <File::File(char const*, Process*)>
c001d34b:	83 c4 10             	add    esp,0x10
c001d34e:	85 db                	test   ebx,ebx
c001d350:	75 3c                	jne    c001d38e <Thr::loadDLL(char const*, bool)+0x84>
c001d352:	89 f8                	mov    eax,edi
c001d354:	84 c0                	test   al,al
c001d356:	0f 84 d2 01 00 00    	je     c001d52e <Thr::loadDLL(char const*, bool)+0x224>
c001d35c:	55                   	push   ebp
c001d35d:	55                   	push   ebp
c001d35e:	68 27 c3 02 c0       	push   0xc002c327
c001d363:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001d367:	55                   	push   ebp
c001d368:	e8 9f 34 fe ff       	call   c000080c <strcpy>
c001d36d:	58                   	pop    eax
c001d36e:	5a                   	pop    edx
c001d36f:	56                   	push   esi
c001d370:	55                   	push   ebp
c001d371:	e8 d6 35 fe ff       	call   c000094c <strcat>
c001d376:	59                   	pop    ecx
c001d377:	58                   	pop    eax
c001d378:	68 3a c3 02 c0       	push   0xc002c33a
c001d37d:	55                   	push   ebp
c001d37e:	e8 c9 35 fe ff       	call   c000094c <strcat>
c001d383:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d386:	e8 b2 cd ff ff       	call   c001a13d <Krnl::panic(char const*)>
c001d38b:	83 c4 10             	add    esp,0x10
c001d38e:	51                   	push   ecx
c001d38f:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d393:	50                   	push   eax
c001d394:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d398:	50                   	push   eax
c001d399:	53                   	push   ebx
c001d39a:	e8 41 5d ff ff       	call   c00130e0 <File::stat(unsigned long long*, bool*)>
c001d39f:	83 c4 10             	add    esp,0x10
c001d3a2:	85 db                	test   ebx,ebx
c001d3a4:	74 0c                	je     c001d3b2 <Thr::loadDLL(char const*, bool)+0xa8>
c001d3a6:	83 ec 0c             	sub    esp,0xc
c001d3a9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d3ab:	53                   	push   ebx
c001d3ac:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d3af:	83 c4 10             	add    esp,0x10
c001d3b2:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d3b7:	75 0a                	jne    c001d3c3 <Thr::loadDLL(char const*, bool)+0xb9>
c001d3b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d3bd:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d3c1:	75 3c                	jne    c001d3ff <Thr::loadDLL(char const*, bool)+0xf5>
c001d3c3:	89 f8                	mov    eax,edi
c001d3c5:	84 c0                	test   al,al
c001d3c7:	0f 84 49 01 00 00    	je     c001d516 <Thr::loadDLL(char const*, bool)+0x20c>
c001d3cd:	51                   	push   ecx
c001d3ce:	51                   	push   ecx
c001d3cf:	68 27 c3 02 c0       	push   0xc002c327
c001d3d4:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d3d8:	53                   	push   ebx
c001d3d9:	e8 2e 34 fe ff       	call   c000080c <strcpy>
c001d3de:	5d                   	pop    ebp
c001d3df:	58                   	pop    eax
c001d3e0:	56                   	push   esi
c001d3e1:	53                   	push   ebx
c001d3e2:	e8 65 35 fe ff       	call   c000094c <strcat>
c001d3e7:	58                   	pop    eax
c001d3e8:	5a                   	pop    edx
c001d3e9:	68 3a c3 02 c0       	push   0xc002c33a
c001d3ee:	53                   	push   ebx
c001d3ef:	e8 58 35 fe ff       	call   c000094c <strcat>
c001d3f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d3f7:	e8 41 cd ff ff       	call   c001a13d <Krnl::panic(char const*)>
c001d3fc:	83 c4 10             	add    esp,0x10
c001d3ff:	52                   	push   edx
c001d400:	6a 03                	push   0x3
c001d402:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d406:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001d40a:	05 ff 0f 00 00       	add    eax,0xfff
c001d40f:	83 d2 00             	adc    edx,0x0
c001d412:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d416:	50                   	push   eax
c001d417:	ff 35 90 e3 02 c0    	push   DWORD PTR ds:0xc002e390
c001d41d:	e8 26 48 ff ff       	call   c0011c48 <VAS::allocatePages(int, int)>
c001d422:	59                   	pop    ecx
c001d423:	89 c3                	mov    ebx,eax
c001d425:	5d                   	pop    ebp
c001d426:	50                   	push   eax
c001d427:	68 b5 a5 02 c0       	push   0xc002a5b5
c001d42c:	e8 40 54 ff ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c001d431:	89 34 24             	mov    DWORD PTR [esp],esi
c001d434:	e8 33 33 fe ff       	call   c000076c <strlen>
c001d439:	8b 2d 60 ef 02 c0    	mov    ebp,DWORD PTR ds:0xc002ef60
c001d43f:	40                   	inc    eax
c001d440:	89 04 24             	mov    DWORD PTR [esp],eax
c001d443:	e8 d1 23 ff ff       	call   c000f819 <malloc>
c001d448:	89 04 ad 80 f3 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd0c80],eax
c001d44f:	58                   	pop    eax
c001d450:	a1 60 ef 02 c0       	mov    eax,ds:0xc002ef60
c001d455:	5a                   	pop    edx
c001d456:	56                   	push   esi
c001d457:	ff 34 85 80 f3 02 c0 	push   DWORD PTR [eax*4-0x3ffd0c80]
c001d45e:	e8 a9 33 fe ff       	call   c000080c <strcpy>
c001d463:	a1 60 ef 02 c0       	mov    eax,ds:0xc002ef60
c001d468:	8d 50 01             	lea    edx,[eax+0x1]
c001d46b:	89 1c 85 80 f1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0e80],ebx
c001d472:	89 15 60 ef 02 c0    	mov    DWORD PTR ds:0xc002ef60,edx
c001d478:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d47c:	83 c4 0c             	add    esp,0xc
c001d47f:	89 14 85 80 ef 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1080],edx
c001d486:	6a 01                	push   0x1
c001d488:	53                   	push   ebx
c001d489:	56                   	push   esi
c001d48a:	e8 c2 f6 ff ff       	call   c001cb51 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d48f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d493:	83 c4 10             	add    esp,0x10
c001d496:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d49b:	0f 85 89 00 00 00    	jne    c001d52a <Thr::loadDLL(char const*, bool)+0x220>
c001d4a1:	89 f8                	mov    eax,edi
c001d4a3:	84 c0                	test   al,al
c001d4a5:	74 73                	je     c001d51a <Thr::loadDLL(char const*, bool)+0x210>
c001d4a7:	83 ec 0c             	sub    esp,0xc
c001d4aa:	68 3c c3 02 c0       	push   0xc002c33c
c001d4af:	e8 89 cc ff ff       	call   c001a13d <Krnl::panic(char const*)>
c001d4b4:	83 c4 10             	add    esp,0x10
c001d4b7:	eb 61                	jmp    c001d51a <Thr::loadDLL(char const*, bool)+0x210>
c001d4b9:	50                   	push   eax
c001d4ba:	50                   	push   eax
c001d4bb:	89 e8                	mov    eax,ebp
c001d4bd:	c1 e0 0c             	shl    eax,0xc
c001d4c0:	01 d8                	add    eax,ebx
c001d4c2:	50                   	push   eax
c001d4c3:	ff 35 90 e3 02 c0    	push   DWORD PTR ds:0xc002e390
c001d4c9:	e8 e2 42 ff ff       	call   c00117b0 <VAS::getPageTableEntry(unsigned long)>
c001d4ce:	83 c4 10             	add    esp,0x10
c001d4d1:	8b 00                	mov    eax,DWORD PTR [eax]
c001d4d3:	a8 60                	test   al,0x60
c001d4d5:	75 11                	jne    c001d4e8 <Thr::loadDLL(char const*, bool)+0x1de>
c001d4d7:	83 ec 0c             	sub    esp,0xc
c001d4da:	25 00 f0 ff ff       	and    eax,0xfffff000
c001d4df:	50                   	push   eax
c001d4e0:	e8 bf 26 ff ff       	call   c000fba4 <Phys::freePage(unsigned long)>
c001d4e5:	83 c4 10             	add    esp,0x10
c001d4e8:	45                   	inc    ebp
c001d4e9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d4ed:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d4f1:	05 ff 0f 00 00       	add    eax,0xfff
c001d4f6:	bf 00 00 00 00       	mov    edi,0x0
c001d4fb:	83 d2 00             	adc    edx,0x0
c001d4fe:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d502:	c1 ea 0c             	shr    edx,0xc
c001d505:	39 c5                	cmp    ebp,eax
c001d507:	89 d1                	mov    ecx,edx
c001d509:	89 f8                	mov    eax,edi
c001d50b:	19 c8                	sbb    eax,ecx
c001d50d:	72 aa                	jb     c001d4b9 <Thr::loadDLL(char const*, bool)+0x1af>
c001d50f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d514:	75 18                	jne    c001d52e <Thr::loadDLL(char const*, bool)+0x224>
c001d516:	31 db                	xor    ebx,ebx
c001d518:	eb 14                	jmp    c001d52e <Thr::loadDLL(char const*, bool)+0x224>
c001d51a:	83 ec 0c             	sub    esp,0xc
c001d51d:	68 5b c3 02 c0       	push   0xc002c35b
c001d522:	e8 16 cc ff ff       	call   c001a13d <Krnl::panic(char const*)>
c001d527:	83 c4 10             	add    esp,0x10
c001d52a:	31 ed                	xor    ebp,ebp
c001d52c:	eb bb                	jmp    c001d4e9 <Thr::loadDLL(char const*, bool)+0x1df>
c001d52e:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d534:	89 d8                	mov    eax,ebx
c001d536:	5b                   	pop    ebx
c001d537:	5e                   	pop    esi
c001d538:	5f                   	pop    edi
c001d539:	5d                   	pop    ebp
c001d53a:	c3                   	ret    

c001d53b <Thr::executeDLL(unsigned long, void*)>:
c001d53b:	56                   	push   esi
c001d53c:	53                   	push   ebx
c001d53d:	52                   	push   edx
c001d53e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d542:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d546:	85 db                	test   ebx,ebx
c001d548:	75 10                	jne    c001d55a <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d54a:	83 ec 0c             	sub    esp,0xc
c001d54d:	68 77 c3 02 c0       	push   0xc002c377
c001d552:	e8 e6 cb ff ff       	call   c001a13d <Krnl::panic(char const*)>
c001d557:	83 c4 10             	add    esp,0x10
c001d55a:	50                   	push   eax
c001d55b:	50                   	push   eax
c001d55c:	53                   	push   ebx
c001d55d:	68 a1 c3 02 c0       	push   0xc002c3a1
c001d562:	e8 0a 53 ff ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c001d567:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d56b:	89 d8                	mov    eax,ebx
c001d56d:	83 c4 14             	add    esp,0x14
c001d570:	5b                   	pop    ebx
c001d571:	5e                   	pop    esi
c001d572:	ff e0                	jmp    eax

c001d574 <userModeEntryPoint(void*)>:
c001d574:	a1 28 f7 02 c0       	mov    eax,ds:0xc002f728
c001d579:	48                   	dec    eax
c001d57a:	a3 28 f7 02 c0       	mov    ds:0xc002f728,eax
c001d57f:	75 01                	jne    c001d582 <userModeEntryPoint(void*)+0xe>
c001d581:	fb                   	sti    
c001d582:	fb                   	sti    
c001d583:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d588:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d58b:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001d591:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d595:	e9 90 2d fe ff       	jmp    c000032a <goToUsermode>

c001d59a <changeTSS>:
c001d59a:	83 ec 14             	sub    esp,0x14
c001d59d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d5a2:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d5a5:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d5aa:	c1 e2 15             	shl    edx,0x15
c001d5ad:	29 d0                	sub    eax,edx
c001d5af:	50                   	push   eax
c001d5b0:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c001d5b5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d5bb:	05 7c 11 00 00       	add    eax,0x117c
c001d5c0:	50                   	push   eax
c001d5c1:	e8 2e 38 ff ff       	call   c0010df4 <TSS::setESP(unsigned long)>
c001d5c6:	83 c4 1c             	add    esp,0x1c
c001d5c9:	c3                   	ret    

c001d5ca <switchToThread(ThreadControlBlock*)>:
c001d5ca:	57                   	push   edi
c001d5cb:	a1 24 f7 02 c0       	mov    eax,ds:0xc002f724
c001d5d0:	56                   	push   esi
c001d5d1:	85 c0                	test   eax,eax
c001d5d3:	53                   	push   ebx
c001d5d4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d5d8:	0f 85 88 00 00 00    	jne    c001d666 <switchToThread(ThreadControlBlock*)+0x9c>
c001d5de:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c001d5e1:	3c ff                	cmp    al,0xff
c001d5e3:	74 7d                	je     c001d662 <switchToThread(ThreadControlBlock*)+0x98>
c001d5e5:	0f b6 d0             	movzx  edx,al
c001d5e8:	b8 84 03 00 00       	mov    eax,0x384
c001d5ed:	29 d0                	sub    eax,edx
c001d5ef:	c1 e0 10             	shl    eax,0x10
c001d5f2:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c001d5f5:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001d5f8:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c001d5fd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d603:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001d60a:	74 4a                	je     c001d656 <switchToThread(ThreadControlBlock*)+0x8c>
c001d60c:	0f 31                	rdtsc  
c001d60e:	a3 68 f7 02 c0       	mov    ds:0xc002f768,eax
c001d613:	89 c6                	mov    esi,eax
c001d615:	89 d7                	mov    edi,edx
c001d617:	2b 35 58 f7 02 c0    	sub    esi,DWORD PTR ds:0xc002f758
c001d61d:	89 15 6c f7 02 c0    	mov    DWORD PTR ds:0xc002f76c,edx
c001d623:	1b 3d 5c f7 02 c0    	sbb    edi,DWORD PTR ds:0xc002f75c
c001d629:	89 35 60 f7 02 c0    	mov    DWORD PTR ds:0xc002f760,esi
c001d62f:	a3 58 f7 02 c0       	mov    ds:0xc002f758,eax
c001d634:	89 3d 64 f7 02 c0    	mov    DWORD PTR ds:0xc002f764,edi
c001d63a:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001d640:	89 15 5c f7 02 c0    	mov    DWORD PTR ds:0xc002f75c,edx
c001d646:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d649:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001d64c:	01 c6                	add    esi,eax
c001d64e:	11 d7                	adc    edi,edx
c001d650:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001d653:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001d656:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001d65a:	5b                   	pop    ebx
c001d65b:	5e                   	pop    esi
c001d65c:	5f                   	pop    edi
c001d65d:	e9 00 2d fe ff       	jmp    c0000362 <switchToThreadASM>
c001d662:	31 c0                	xor    eax,eax
c001d664:	eb 8f                	jmp    c001d5f5 <switchToThread(ThreadControlBlock*)+0x2b>
c001d666:	5b                   	pop    ebx
c001d667:	c7 05 20 f7 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002f720,0x1
c001d671:	5e                   	pop    esi
c001d672:	5f                   	pop    edi
c001d673:	c3                   	ret    

c001d674 <Process::addArgs(char**)>:
c001d674:	57                   	push   edi
c001d675:	56                   	push   esi
c001d676:	53                   	push   ebx
c001d677:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d67b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d67f:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001d689:	85 ff                	test   edi,edi
c001d68b:	74 3d                	je     c001d6ca <Process::addArgs(char**)+0x56>
c001d68d:	8b 07                	mov    eax,DWORD PTR [edi]
c001d68f:	85 c0                	test   eax,eax
c001d691:	74 37                	je     c001d6ca <Process::addArgs(char**)+0x56>
c001d693:	31 db                	xor    ebx,ebx
c001d695:	83 ec 0c             	sub    esp,0xc
c001d698:	50                   	push   eax
c001d699:	e8 ce 30 fe ff       	call   c000076c <strlen>
c001d69e:	40                   	inc    eax
c001d69f:	89 04 24             	mov    DWORD PTR [esp],eax
c001d6a2:	e8 72 21 ff ff       	call   c000f819 <malloc>
c001d6a7:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001d6ae:	5a                   	pop    edx
c001d6af:	59                   	pop    ecx
c001d6b0:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001d6b3:	43                   	inc    ebx
c001d6b4:	50                   	push   eax
c001d6b5:	e8 52 31 fe ff       	call   c000080c <strcpy>
c001d6ba:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001d6c0:	83 c4 10             	add    esp,0x10
c001d6c3:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d6c6:	85 c0                	test   eax,eax
c001d6c8:	75 cb                	jne    c001d695 <Process::addArgs(char**)+0x21>
c001d6ca:	5b                   	pop    ebx
c001d6cb:	5e                   	pop    esi
c001d6cc:	5f                   	pop    edi
c001d6cd:	c3                   	ret    

c001d6ce <Process::Process(char const*, Process*, char**)>:
c001d6ce:	56                   	push   esi
c001d6cf:	53                   	push   ebx
c001d6d0:	83 ec 14             	sub    esp,0x14
c001d6d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d6d7:	05 0c 02 00 00       	add    eax,0x20c
c001d6dc:	bb 07 00 00 00       	mov    ebx,0x7
c001d6e1:	89 c6                	mov    esi,eax
c001d6e3:	85 db                	test   ebx,ebx
c001d6e5:	78 12                	js     c001d6f9 <Process::Process(char const*, Process*, char**)+0x2b>
c001d6e7:	83 ec 0c             	sub    esp,0xc
c001d6ea:	56                   	push   esi
c001d6eb:	e8 f6 b7 00 00       	call   c0028ee6 <ThreadControlBlock::ThreadControlBlock()>
c001d6f0:	83 c4 10             	add    esp,0x10
c001d6f3:	83 c6 63             	add    esi,0x63
c001d6f6:	4b                   	dec    ebx
c001d6f7:	eb ea                	jmp    c001d6e3 <Process::Process(char const*, Process*, char**)+0x15>
c001d6f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d6fd:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d704:	83 ec 0c             	sub    esp,0xc
c001d707:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d70b:	e8 b6 c8 ff ff       	call   c0019fc6 <Krnl::newProcessEnv(Process*)>
c001d710:	83 c4 10             	add    esp,0x10
c001d713:	89 c2                	mov    edx,eax
c001d715:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d719:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d71f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d723:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d72c:	a1 b0 d7 02 c0       	mov    eax,ds:0xc002d7b0
c001d731:	8d 50 01             	lea    edx,[eax+0x1]
c001d734:	89 15 b0 d7 02 c0    	mov    DWORD PTR ds:0xc002d7b0,edx
c001d73a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d73e:	89 02                	mov    DWORD PTR [edx],eax
c001d740:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001d748:	83 ec 0c             	sub    esp,0xc
c001d74b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d74f:	e8 c5 20 ff ff       	call   c000f819 <malloc>
c001d754:	83 c4 10             	add    esp,0x10
c001d757:	89 c3                	mov    ebx,eax
c001d759:	83 ec 08             	sub    esp,0x8
c001d75c:	6a 00                	push   0x0
c001d75e:	53                   	push   ebx
c001d75f:	e8 8c 48 ff ff       	call   c0011ff0 <VAS::VAS(bool)>
c001d764:	83 c4 10             	add    esp,0x10
c001d767:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d76b:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d771:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d775:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d77f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d783:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d787:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d78d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d791:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d797:	85 c0                	test   eax,eax
c001d799:	74 42                	je     c001d7dd <Process::Process(char const*, Process*, char**)+0x10f>
c001d79b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d79f:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d7a5:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d7ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d7af:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d7b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d7b9:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d7bf:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d7c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d7c9:	05 0c 01 00 00       	add    eax,0x10c
c001d7ce:	83 ec 08             	sub    esp,0x8
c001d7d1:	52                   	push   edx
c001d7d2:	50                   	push   eax
c001d7d3:	e8 34 30 fe ff       	call   c000080c <strcpy>
c001d7d8:	83 c4 10             	add    esp,0x10
c001d7db:	eb 63                	jmp    c001d840 <Process::Process(char const*, Process*, char**)+0x172>
c001d7dd:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001d7e5:	83 ec 0c             	sub    esp,0xc
c001d7e8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d7ec:	e8 28 20 ff ff       	call   c000f819 <malloc>
c001d7f1:	83 c4 10             	add    esp,0x10
c001d7f4:	89 c3                	mov    ebx,eax
c001d7f6:	83 ec 08             	sub    esp,0x8
c001d7f9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d7fd:	53                   	push   ebx
c001d7fe:	e8 03 33 ff ff       	call   c0010b06 <VgaText::VgaText(char const*)>
c001d803:	83 c4 10             	add    esp,0x10
c001d806:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d80a:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d810:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d814:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d81a:	83 ec 0c             	sub    esp,0xc
c001d81d:	50                   	push   eax
c001d81e:	e8 a2 2a ff ff       	call   c00102c5 <addToTerminalCycle(VgaText*)>
c001d823:	83 c4 10             	add    esp,0x10
c001d826:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d82a:	05 0c 01 00 00       	add    eax,0x10c
c001d82f:	83 ec 08             	sub    esp,0x8
c001d832:	68 c0 c3 02 c0       	push   0xc002c3c0
c001d837:	50                   	push   eax
c001d838:	e8 cf 2f fe ff       	call   c000080c <strcpy>
c001d83d:	83 c4 10             	add    esp,0x10
c001d840:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d844:	83 c0 0c             	add    eax,0xc
c001d847:	83 ec 08             	sub    esp,0x8
c001d84a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d84e:	50                   	push   eax
c001d84f:	e8 b8 2f fe ff       	call   c000080c <strcpy>
c001d854:	83 c4 10             	add    esp,0x10
c001d857:	83 ec 08             	sub    esp,0x8
c001d85a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001d85e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d862:	e8 0d fe ff ff       	call   c001d674 <Process::addArgs(char**)>
c001d867:	83 c4 10             	add    esp,0x10
c001d86a:	83 ec 08             	sub    esp,0x8
c001d86d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d871:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d875:	e8 a1 ed ff ff       	call   c001c61b <Thr::loadProgramIntoMemory(Process*, char const*)>
c001d87a:	83 c4 10             	add    esp,0x10
c001d87d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d881:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d885:	83 f0 01             	xor    eax,0x1
c001d888:	88 c2                	mov    dl,al
c001d88a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d88e:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001d894:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d899:	83 ec 08             	sub    esp,0x8
c001d89c:	50                   	push   eax
c001d89d:	68 18 c4 02 c0       	push   0xc002c418
c001d8a2:	e8 ca 4f ff ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c001d8a7:	83 c4 10             	add    esp,0x10
c001d8aa:	90                   	nop
c001d8ab:	83 c4 14             	add    esp,0x14
c001d8ae:	5b                   	pop    ebx
c001d8af:	5e                   	pop    esi
c001d8b0:	c3                   	ret    
c001d8b1:	90                   	nop

c001d8b2 <Process::Process(bool, char const*, Process*, char**)>:
c001d8b2:	56                   	push   esi
c001d8b3:	53                   	push   ebx
c001d8b4:	83 ec 24             	sub    esp,0x24
c001d8b7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d8bb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d8bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d8c3:	05 0c 02 00 00       	add    eax,0x20c
c001d8c8:	bb 07 00 00 00       	mov    ebx,0x7
c001d8cd:	89 c6                	mov    esi,eax
c001d8cf:	85 db                	test   ebx,ebx
c001d8d1:	78 12                	js     c001d8e5 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001d8d3:	83 ec 0c             	sub    esp,0xc
c001d8d6:	56                   	push   esi
c001d8d7:	e8 0a b6 00 00       	call   c0028ee6 <ThreadControlBlock::ThreadControlBlock()>
c001d8dc:	83 c4 10             	add    esp,0x10
c001d8df:	83 c6 63             	add    esi,0x63
c001d8e2:	4b                   	dec    ebx
c001d8e3:	eb ea                	jmp    c001d8cf <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001d8e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d8e9:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d8f0:	83 ec 0c             	sub    esp,0xc
c001d8f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d8f7:	e8 ca c6 ff ff       	call   c0019fc6 <Krnl::newProcessEnv(Process*)>
c001d8fc:	83 c4 10             	add    esp,0x10
c001d8ff:	89 c2                	mov    edx,eax
c001d901:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d905:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d90b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d90f:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d918:	a1 b0 d7 02 c0       	mov    eax,ds:0xc002d7b0
c001d91d:	8d 50 01             	lea    edx,[eax+0x1]
c001d920:	89 15 b0 d7 02 c0    	mov    DWORD PTR ds:0xc002d7b0,edx
c001d926:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d92a:	89 02                	mov    DWORD PTR [edx],eax
c001d92c:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001d934:	83 ec 0c             	sub    esp,0xc
c001d937:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d93b:	e8 d9 1e ff ff       	call   c000f819 <malloc>
c001d940:	83 c4 10             	add    esp,0x10
c001d943:	89 c3                	mov    ebx,eax
c001d945:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d94a:	83 ec 08             	sub    esp,0x8
c001d94d:	50                   	push   eax
c001d94e:	53                   	push   ebx
c001d94f:	e8 9c 46 ff ff       	call   c0011ff0 <VAS::VAS(bool)>
c001d954:	83 c4 10             	add    esp,0x10
c001d957:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d95b:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d961:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d965:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d96f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d973:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d977:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d97d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d981:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d987:	85 c0                	test   eax,eax
c001d989:	74 42                	je     c001d9cd <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001d98b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d98f:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d995:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d99b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d99f:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d9a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d9a9:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d9af:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d9b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d9b9:	05 0c 01 00 00       	add    eax,0x10c
c001d9be:	83 ec 08             	sub    esp,0x8
c001d9c1:	52                   	push   edx
c001d9c2:	50                   	push   eax
c001d9c3:	e8 44 2e fe ff       	call   c000080c <strcpy>
c001d9c8:	83 c4 10             	add    esp,0x10
c001d9cb:	eb 63                	jmp    c001da30 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001d9cd:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001d9d5:	83 ec 0c             	sub    esp,0xc
c001d9d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d9dc:	e8 38 1e ff ff       	call   c000f819 <malloc>
c001d9e1:	83 c4 10             	add    esp,0x10
c001d9e4:	89 c3                	mov    ebx,eax
c001d9e6:	83 ec 08             	sub    esp,0x8
c001d9e9:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d9ed:	53                   	push   ebx
c001d9ee:	e8 13 31 ff ff       	call   c0010b06 <VgaText::VgaText(char const*)>
c001d9f3:	83 c4 10             	add    esp,0x10
c001d9f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d9fa:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001da00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001da04:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001da0a:	83 ec 0c             	sub    esp,0xc
c001da0d:	50                   	push   eax
c001da0e:	e8 b2 28 ff ff       	call   c00102c5 <addToTerminalCycle(VgaText*)>
c001da13:	83 c4 10             	add    esp,0x10
c001da16:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001da1a:	05 0c 01 00 00       	add    eax,0x10c
c001da1f:	83 ec 08             	sub    esp,0x8
c001da22:	68 c0 c3 02 c0       	push   0xc002c3c0
c001da27:	50                   	push   eax
c001da28:	e8 df 2d fe ff       	call   c000080c <strcpy>
c001da2d:	83 c4 10             	add    esp,0x10
c001da30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001da34:	83 c0 0c             	add    eax,0xc
c001da37:	83 ec 08             	sub    esp,0x8
c001da3a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001da3e:	50                   	push   eax
c001da3f:	e8 c8 2d fe ff       	call   c000080c <strcpy>
c001da44:	83 c4 10             	add    esp,0x10
c001da47:	83 ec 08             	sub    esp,0x8
c001da4a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001da4e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001da52:	e8 1d fc ff ff       	call   c001d674 <Process::addArgs(char**)>
c001da57:	83 c4 10             	add    esp,0x10
c001da5a:	90                   	nop
c001da5b:	83 c4 24             	add    esp,0x24
c001da5e:	5b                   	pop    ebx
c001da5f:	5e                   	pop    esi
c001da60:	c3                   	ret    

c001da61 <taskStartupFunction>:
c001da61:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001da66:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001da69:	c3                   	ret    

c001da6a <Semaphore::Semaphore(int)>:
c001da6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001da6e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001da72:	89 10                	mov    DWORD PTR [eax],edx
c001da74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001da78:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001da7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001da83:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001da8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001da8e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001da95:	90                   	nop
c001da96:	c3                   	ret    
c001da97:	90                   	nop

c001da98 <Mutex::Mutex()>:
c001da98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001da9c:	6a 01                	push   0x1
c001da9e:	50                   	push   eax
c001da9f:	e8 c6 ff ff ff       	call   c001da6a <Semaphore::Semaphore(int)>
c001daa4:	83 c4 08             	add    esp,0x8
c001daa7:	90                   	nop
c001daa8:	c3                   	ret    
c001daa9:	90                   	nop

c001daaa <Process::createThread(void (*)(void*), void*, int)>:
c001daaa:	55                   	push   ebp
c001daab:	31 c9                	xor    ecx,ecx
c001daad:	57                   	push   edi
c001daae:	56                   	push   esi
c001daaf:	53                   	push   ebx
c001dab0:	83 ec 1c             	sub    esp,0x1c
c001dab3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dab7:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001dabe:	89 f2                	mov    edx,esi
c001dac0:	0f b7 c2             	movzx  eax,dx
c001dac3:	83 e2 01             	and    edx,0x1
c001dac6:	74 16                	je     c001dade <Process::createThread(void (*)(void*), void*, int)+0x34>
c001dac8:	d1 f8                	sar    eax,1
c001daca:	41                   	inc    ecx
c001dacb:	89 c2                	mov    edx,eax
c001dacd:	83 f9 10             	cmp    ecx,0x10
c001dad0:	75 ee                	jne    c001dac0 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001dad2:	83 c4 1c             	add    esp,0x1c
c001dad5:	31 db                	xor    ebx,ebx
c001dad7:	89 d8                	mov    eax,ebx
c001dad9:	5b                   	pop    ebx
c001dada:	5e                   	pop    esi
c001dadb:	5f                   	pop    edi
c001dadc:	5d                   	pop    ebp
c001dadd:	c3                   	ret    
c001dade:	b8 01 00 00 00       	mov    eax,0x1
c001dae3:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001dae6:	d3 e0                	shl    eax,cl
c001dae8:	09 c6                	or     esi,eax
c001daea:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001daed:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001daf4:	89 c6                	mov    esi,eax
c001daf6:	c1 e6 05             	shl    esi,0x5
c001daf9:	01 f0                	add    eax,esi
c001dafb:	01 d8                	add    eax,ebx
c001dafd:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001db04:	75 0a                	jne    c001db10 <Process::createThread(void (*)(void*), void*, int)+0x66>
c001db06:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001db10:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001db16:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001db1a:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001db1d:	01 ca                	add    edx,ecx
c001db1f:	83 ec 08             	sub    esp,0x8
c001db22:	89 d0                	mov    eax,edx
c001db24:	c1 e0 05             	shl    eax,0x5
c001db27:	01 d0                	add    eax,edx
c001db29:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001db2d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001db31:	01 d8                	add    eax,ebx
c001db33:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001db39:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001db3f:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001db45:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001db4b:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001db51:	89 cd                	mov    ebp,ecx
c001db53:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001db57:	f7 dd                	neg    ebp
c001db59:	c1 e5 15             	shl    ebp,0x15
c001db5c:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001db62:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001db68:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001db72:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001db78:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001db82:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001db8c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001db90:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001db97:	53                   	push   ebx
c001db98:	68 44 f7 02 c0       	push   0xc002f744
c001db9d:	e8 fe b0 00 00       	call   c0028ca0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dba2:	89 d8                	mov    eax,ebx
c001dba4:	83 c4 10             	add    esp,0x10
c001dba7:	83 c4 1c             	add    esp,0x1c
c001dbaa:	5b                   	pop    ebx
c001dbab:	5e                   	pop    esi
c001dbac:	5f                   	pop    edi
c001dbad:	5d                   	pop    ebp
c001dbae:	c3                   	ret    
c001dbaf:	90                   	nop

c001dbb0 <Process::createUserThread()>:
c001dbb0:	83 ec 0c             	sub    esp,0xc
c001dbb3:	68 80 00 00 00       	push   0x80
c001dbb8:	6a 00                	push   0x0
c001dbba:	68 74 d5 01 c0       	push   0xc001d574
c001dbbf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dbc3:	e8 e2 fe ff ff       	call   c001daaa <Process::createThread(void (*)(void*), void*, int)>
c001dbc8:	83 c4 1c             	add    esp,0x1c
c001dbcb:	c3                   	ret    

c001dbcc <setupMultitasking(void (*)())>:
c001dbcc:	56                   	push   esi
c001dbcd:	53                   	push   ebx
c001dbce:	51                   	push   ecx
c001dbcf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dbd3:	eb 10                	jmp    c001dbe5 <setupMultitasking(void (*)())+0x19>
c001dbd5:	83 ec 0c             	sub    esp,0xc
c001dbd8:	68 44 f7 02 c0       	push   0xc002f744
c001dbdd:	e8 10 b0 00 00       	call   c0028bf2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001dbe2:	83 c4 10             	add    esp,0x10
c001dbe5:	83 ec 0c             	sub    esp,0xc
c001dbe8:	68 44 f7 02 c0       	push   0xc002f744
c001dbed:	e8 dc af 00 00       	call   c0028bce <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001dbf2:	83 c4 10             	add    esp,0x10
c001dbf5:	84 c0                	test   al,al
c001dbf7:	74 dc                	je     c001dbd5 <setupMultitasking(void (*)())+0x9>
c001dbf9:	83 ec 0c             	sub    esp,0xc
c001dbfc:	68 3f 07 00 00       	push   0x73f
c001dc01:	e8 13 1c ff ff       	call   c000f819 <malloc>
c001dc06:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dc0d:	89 c3                	mov    ebx,eax
c001dc0f:	6a 00                	push   0x0
c001dc11:	68 c4 c3 02 c0       	push   0xc002c3c4
c001dc16:	6a 01                	push   0x1
c001dc18:	50                   	push   eax
c001dc19:	e8 94 fc ff ff       	call   c001d8b2 <Process::Process(bool, char const*, Process*, char**)>
c001dc1e:	83 c4 14             	add    esp,0x14
c001dc21:	89 1d 50 f7 02 c0    	mov    DWORD PTR ds:0xc002f750,ebx
c001dc27:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001dc2d:	e8 a1 29 ff ff       	call   c00105d3 <setActiveTerminal(VgaText*)>
c001dc32:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001dc3a:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001dc44:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001dc4a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001dc4d:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001dc57:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001dc5d:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001dc63:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001dc6d:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001dc77:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001dc81:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001dc87:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001dc91:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001dc97:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001dca1:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001dca7:	58                   	pop    eax
c001dca8:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001dcae:	5a                   	pop    edx
c001dcaf:	68 c0 c3 02 c0       	push   0xc002c3c0
c001dcb4:	50                   	push   eax
c001dcb5:	e8 52 2b fe ff       	call   c000080c <strcpy>
c001dcba:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001dcc1:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001dcc5:	83 c4 14             	add    esp,0x14
c001dcc8:	5b                   	pop    ebx
c001dcc9:	5e                   	pop    esi
c001dcca:	e9 85 26 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001dccf <schedule()>:
c001dccf:	a1 24 f7 02 c0       	mov    eax,ds:0xc002f724
c001dcd4:	85 c0                	test   eax,eax
c001dcd6:	74 0b                	je     c001dce3 <schedule()+0x14>
c001dcd8:	c7 05 20 f7 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002f720,0x1
c001dce2:	c3                   	ret    
c001dce3:	53                   	push   ebx
c001dce4:	83 ec 14             	sub    esp,0x14
c001dce7:	68 44 f7 02 c0       	push   0xc002f744
c001dcec:	e8 dd ae 00 00       	call   c0028bce <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001dcf1:	83 c4 10             	add    esp,0x10
c001dcf4:	84 c0                	test   al,al
c001dcf6:	75 38                	jne    c001dd30 <schedule()+0x61>
c001dcf8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dcfd:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001dd00:	4a                   	dec    edx
c001dd01:	74 32                	je     c001dd35 <schedule()+0x66>
c001dd03:	83 ec 0c             	sub    esp,0xc
c001dd06:	68 44 f7 02 c0       	push   0xc002f744
c001dd0b:	e8 da ae 00 00       	call   c0028bea <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dd10:	c7 04 24 44 f7 02 c0 	mov    DWORD PTR [esp],0xc002f744
c001dd17:	89 c3                	mov    ebx,eax
c001dd19:	e8 d4 ae 00 00       	call   c0028bf2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001dd1e:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001dd25:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dd28:	e8 9d f8 ff ff       	call   c001d5ca <switchToThread(ThreadControlBlock*)>
c001dd2d:	83 c4 10             	add    esp,0x10
c001dd30:	83 c4 08             	add    esp,0x8
c001dd33:	5b                   	pop    ebx
c001dd34:	c3                   	ret    
c001dd35:	83 ec 08             	sub    esp,0x8
c001dd38:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001dd3f:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001dd45:	68 44 f7 02 c0       	push   0xc002f744
c001dd4a:	e8 51 af 00 00       	call   c0028ca0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dd4f:	83 c4 10             	add    esp,0x10
c001dd52:	eb af                	jmp    c001dd03 <schedule()+0x34>

c001dd54 <Semaphore::tryAcquire()>:
c001dd54:	53                   	push   ebx
c001dd55:	83 ec 08             	sub    esp,0x8
c001dd58:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dd5c:	fa                   	cli    
c001dd5d:	a1 28 f7 02 c0       	mov    eax,ds:0xc002f728
c001dd62:	8d 50 01             	lea    edx,[eax+0x1]
c001dd65:	89 15 28 f7 02 c0    	mov    DWORD PTR ds:0xc002f728,edx
c001dd6b:	8b 15 24 f7 02 c0    	mov    edx,DWORD PTR ds:0xc002f724
c001dd71:	8d 5a 01             	lea    ebx,[edx+0x1]
c001dd74:	89 1d 24 f7 02 c0    	mov    DWORD PTR ds:0xc002f724,ebx
c001dd7a:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001dd7d:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001dd7f:	7c 2a                	jl     c001ddab <Semaphore::tryAcquire()+0x57>
c001dd81:	89 15 24 f7 02 c0    	mov    DWORD PTR ds:0xc002f724,edx
c001dd87:	85 d2                	test   edx,edx
c001dd89:	75 0a                	jne    c001dd95 <Semaphore::tryAcquire()+0x41>
c001dd8b:	8b 15 20 f7 02 c0    	mov    edx,DWORD PTR ds:0xc002f720
c001dd91:	85 d2                	test   edx,edx
c001dd93:	75 5b                	jne    c001ddf0 <Semaphore::tryAcquire()+0x9c>
c001dd95:	a3 28 f7 02 c0       	mov    ds:0xc002f728,eax
c001dd9a:	85 c0                	test   eax,eax
c001dd9c:	74 07                	je     c001dda5 <Semaphore::tryAcquire()+0x51>
c001dd9e:	31 c0                	xor    eax,eax
c001dda0:	83 c4 08             	add    esp,0x8
c001dda3:	5b                   	pop    ebx
c001dda4:	c3                   	ret    
c001dda5:	fb                   	sti    
c001dda6:	83 c4 08             	add    esp,0x8
c001dda9:	5b                   	pop    ebx
c001ddaa:	c3                   	ret    
c001ddab:	43                   	inc    ebx
c001ddac:	89 15 24 f7 02 c0    	mov    DWORD PTR ds:0xc002f724,edx
c001ddb2:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001ddb5:	85 d2                	test   edx,edx
c001ddb7:	75 1f                	jne    c001ddd8 <Semaphore::tryAcquire()+0x84>
c001ddb9:	8b 0d 20 f7 02 c0    	mov    ecx,DWORD PTR ds:0xc002f720
c001ddbf:	85 c9                	test   ecx,ecx
c001ddc1:	74 15                	je     c001ddd8 <Semaphore::tryAcquire()+0x84>
c001ddc3:	c7 05 20 f7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f720,0x0
c001ddcd:	e8 fd fe ff ff       	call   c001dccf <schedule()>
c001ddd2:	a1 28 f7 02 c0       	mov    eax,ds:0xc002f728
c001ddd7:	48                   	dec    eax
c001ddd8:	a3 28 f7 02 c0       	mov    ds:0xc002f728,eax
c001dddd:	85 c0                	test   eax,eax
c001dddf:	75 08                	jne    c001dde9 <Semaphore::tryAcquire()+0x95>
c001dde1:	fb                   	sti    
c001dde2:	b0 01                	mov    al,0x1
c001dde4:	83 c4 08             	add    esp,0x8
c001dde7:	5b                   	pop    ebx
c001dde8:	c3                   	ret    
c001dde9:	b0 01                	mov    al,0x1
c001ddeb:	83 c4 08             	add    esp,0x8
c001ddee:	5b                   	pop    ebx
c001ddef:	c3                   	ret    
c001ddf0:	c7 05 20 f7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f720,0x0
c001ddfa:	e8 d0 fe ff ff       	call   c001dccf <schedule()>
c001ddff:	a1 28 f7 02 c0       	mov    eax,ds:0xc002f728
c001de04:	48                   	dec    eax
c001de05:	a3 28 f7 02 c0       	mov    ds:0xc002f728,eax
c001de0a:	85 c0                	test   eax,eax
c001de0c:	75 90                	jne    c001dd9e <Semaphore::tryAcquire()+0x4a>
c001de0e:	eb 95                	jmp    c001dda5 <Semaphore::tryAcquire()+0x51>

c001de10 <Semaphore::assertLocked(char const*)>:
c001de10:	83 ec 0c             	sub    esp,0xc
c001de13:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001de17:	fa                   	cli    
c001de18:	ff 05 28 f7 02 c0    	inc    DWORD PTR ds:0xc002f728
c001de1e:	a1 24 f7 02 c0       	mov    eax,ds:0xc002f724
c001de23:	8d 48 01             	lea    ecx,[eax+0x1]
c001de26:	89 0d 24 f7 02 c0    	mov    DWORD PTR ds:0xc002f724,ecx
c001de2c:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001de2e:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001de31:	7c 24                	jl     c001de57 <Semaphore::assertLocked(char const*)+0x47>
c001de33:	a3 24 f7 02 c0       	mov    ds:0xc002f724,eax
c001de38:	85 c0                	test   eax,eax
c001de3a:	75 09                	jne    c001de45 <Semaphore::assertLocked(char const*)+0x35>
c001de3c:	a1 20 f7 02 c0       	mov    eax,ds:0xc002f720
c001de41:	85 c0                	test   eax,eax
c001de43:	75 29                	jne    c001de6e <Semaphore::assertLocked(char const*)+0x5e>
c001de45:	a1 28 f7 02 c0       	mov    eax,ds:0xc002f728
c001de4a:	48                   	dec    eax
c001de4b:	a3 28 f7 02 c0       	mov    ds:0xc002f728,eax
c001de50:	75 01                	jne    c001de53 <Semaphore::assertLocked(char const*)+0x43>
c001de52:	fb                   	sti    
c001de53:	83 c4 0c             	add    esp,0xc
c001de56:	c3                   	ret    
c001de57:	83 ec 0c             	sub    esp,0xc
c001de5a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001de5e:	e8 da c2 ff ff       	call   c001a13d <Krnl::panic(char const*)>
c001de63:	a1 24 f7 02 c0       	mov    eax,ds:0xc002f724
c001de68:	83 c4 10             	add    esp,0x10
c001de6b:	48                   	dec    eax
c001de6c:	eb c5                	jmp    c001de33 <Semaphore::assertLocked(char const*)+0x23>
c001de6e:	c7 05 20 f7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f720,0x0
c001de78:	e8 52 fe ff ff       	call   c001dccf <schedule()>
c001de7d:	eb c6                	jmp    c001de45 <Semaphore::assertLocked(char const*)+0x35>

c001de7f <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001de7f:	83 ec 0c             	sub    esp,0xc
c001de82:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de87:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001de8b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001de8e:	e8 3c fe ff ff       	call   c001dccf <schedule()>
c001de93:	a1 28 f7 02 c0       	mov    eax,ds:0xc002f728
c001de98:	48                   	dec    eax
c001de99:	a3 28 f7 02 c0       	mov    ds:0xc002f728,eax
c001de9e:	75 01                	jne    c001dea1 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x22>
c001dea0:	fb                   	sti    
c001dea1:	83 c4 0c             	add    esp,0xc
c001dea4:	c3                   	ret    

c001dea5 <blockTask(TaskState)>:
c001dea5:	83 ec 0c             	sub    esp,0xc
c001dea8:	fa                   	cli    
c001dea9:	ff 05 28 f7 02 c0    	inc    DWORD PTR ds:0xc002f728
c001deaf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001deb3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001deb8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001debb:	e8 0f fe ff ff       	call   c001dccf <schedule()>
c001dec0:	a1 28 f7 02 c0       	mov    eax,ds:0xc002f728
c001dec5:	48                   	dec    eax
c001dec6:	a3 28 f7 02 c0       	mov    ds:0xc002f728,eax
c001decb:	75 01                	jne    c001dece <blockTask(TaskState)+0x29>
c001decd:	fb                   	sti    
c001dece:	83 c4 0c             	add    esp,0xc
c001ded1:	c3                   	ret    

c001ded2 <waitTask(int, int*, int)>:
c001ded2:	83 ec 18             	sub    esp,0x18
c001ded5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001deda:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dede:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001dee1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dee5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001deea:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001deed:	6a 07                	push   0x7
c001deef:	e8 b1 ff ff ff       	call   c001dea5 <blockTask(TaskState)>
c001def4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001def9:	83 c4 10             	add    esp,0x10
c001defc:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001deff:	85 d2                	test   edx,edx
c001df01:	74 0a                	je     c001df0d <waitTask(int, int*, int)+0x3b>
c001df03:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001df06:	89 02                	mov    DWORD PTR [edx],eax
c001df08:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df0d:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001df10:	83 c4 0c             	add    esp,0xc
c001df13:	c3                   	ret    

c001df14 <nanoSleepUntil(unsigned long long)>:
c001df14:	83 ec 0c             	sub    esp,0xc
c001df17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001df1f:	3b 05 90 e8 02 c0    	cmp    eax,DWORD PTR ds:0xc002e890
c001df25:	89 d1                	mov    ecx,edx
c001df27:	1b 0d 94 e8 02 c0    	sbb    ecx,DWORD PTR ds:0xc002e894
c001df2d:	73 04                	jae    c001df33 <nanoSleepUntil(unsigned long long)+0x1f>
c001df2f:	83 c4 0c             	add    esp,0xc
c001df32:	c3                   	ret    
c001df33:	fa                   	cli    
c001df34:	ff 05 28 f7 02 c0    	inc    DWORD PTR ds:0xc002f728
c001df3a:	83 ec 08             	sub    esp,0x8
c001df3d:	ff 05 24 f7 02 c0    	inc    DWORD PTR ds:0xc002f724
c001df43:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001df49:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001df4c:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001df4f:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001df55:	68 38 f7 02 c0       	push   0xc002f738
c001df5a:	e8 41 ad 00 00       	call   c0028ca0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001df5f:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001df66:	e8 3a ff ff ff       	call   c001dea5 <blockTask(TaskState)>
c001df6b:	a1 24 f7 02 c0       	mov    eax,ds:0xc002f724
c001df70:	83 c4 10             	add    esp,0x10
c001df73:	48                   	dec    eax
c001df74:	a3 24 f7 02 c0       	mov    ds:0xc002f724,eax
c001df79:	85 c0                	test   eax,eax
c001df7b:	75 09                	jne    c001df86 <nanoSleepUntil(unsigned long long)+0x72>
c001df7d:	a1 20 f7 02 c0       	mov    eax,ds:0xc002f720
c001df82:	85 c0                	test   eax,eax
c001df84:	75 12                	jne    c001df98 <nanoSleepUntil(unsigned long long)+0x84>
c001df86:	a1 28 f7 02 c0       	mov    eax,ds:0xc002f728
c001df8b:	48                   	dec    eax
c001df8c:	a3 28 f7 02 c0       	mov    ds:0xc002f728,eax
c001df91:	75 9c                	jne    c001df2f <nanoSleepUntil(unsigned long long)+0x1b>
c001df93:	fb                   	sti    
c001df94:	83 c4 0c             	add    esp,0xc
c001df97:	c3                   	ret    
c001df98:	c7 05 20 f7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f720,0x0
c001dfa2:	e8 28 fd ff ff       	call   c001dccf <schedule()>
c001dfa7:	eb dd                	jmp    c001df86 <nanoSleepUntil(unsigned long long)+0x72>

c001dfa9 <nanoSleep(unsigned long long)>:
c001dfa9:	a1 90 e8 02 c0       	mov    eax,ds:0xc002e890
c001dfae:	8b 15 94 e8 02 c0    	mov    edx,DWORD PTR ds:0xc002e894
c001dfb4:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001dfb8:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001dfbc:	e9 53 ff ff ff       	jmp    c001df14 <nanoSleepUntil(unsigned long long)>

c001dfc1 <sleep(unsigned long long)>:
c001dfc1:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001dfc9:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001dfce:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001dfd2:	01 ca                	add    edx,ecx
c001dfd4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001dfd8:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001dfdc:	eb cb                	jmp    c001dfa9 <nanoSleep(unsigned long long)>

c001dfde <Semaphore::acquire()>:
c001dfde:	83 ec 0c             	sub    esp,0xc
c001dfe1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dfe5:	fa                   	cli    
c001dfe6:	a1 24 f7 02 c0       	mov    eax,ds:0xc002f724
c001dfeb:	ff 05 28 f7 02 c0    	inc    DWORD PTR ds:0xc002f728
c001dff1:	8d 48 01             	lea    ecx,[eax+0x1]
c001dff4:	89 0d 24 f7 02 c0    	mov    DWORD PTR ds:0xc002f724,ecx
c001dffa:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001dffd:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001dfff:	7d 28                	jge    c001e029 <Semaphore::acquire()+0x4b>
c001e001:	41                   	inc    ecx
c001e002:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001e005:	a3 24 f7 02 c0       	mov    ds:0xc002f724,eax
c001e00a:	85 c0                	test   eax,eax
c001e00c:	75 09                	jne    c001e017 <Semaphore::acquire()+0x39>
c001e00e:	a1 20 f7 02 c0       	mov    eax,ds:0xc002f720
c001e013:	85 c0                	test   eax,eax
c001e015:	75 5d                	jne    c001e074 <Semaphore::acquire()+0x96>
c001e017:	a1 28 f7 02 c0       	mov    eax,ds:0xc002f728
c001e01c:	48                   	dec    eax
c001e01d:	a3 28 f7 02 c0       	mov    ds:0xc002f728,eax
c001e022:	75 01                	jne    c001e025 <Semaphore::acquire()+0x47>
c001e024:	fb                   	sti    
c001e025:	83 c4 0c             	add    esp,0xc
c001e028:	c3                   	ret    
c001e029:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e02e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e035:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e038:	85 c9                	test   ecx,ecx
c001e03a:	74 49                	je     c001e085 <Semaphore::acquire()+0xa7>
c001e03c:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001e03f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e045:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001e048:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e04d:	83 ec 0c             	sub    esp,0xc
c001e050:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001e053:	68 40 c4 02 c0       	push   0xc002c440
c001e058:	e8 14 48 ff ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c001e05d:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c001e064:	e8 3c fe ff ff       	call   c001dea5 <blockTask(TaskState)>
c001e069:	a1 24 f7 02 c0       	mov    eax,ds:0xc002f724
c001e06e:	83 c4 10             	add    esp,0x10
c001e071:	48                   	dec    eax
c001e072:	eb 91                	jmp    c001e005 <Semaphore::acquire()+0x27>
c001e074:	c7 05 20 f7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f720,0x0
c001e07e:	e8 4c fc ff ff       	call   c001dccf <schedule()>
c001e083:	eb 92                	jmp    c001e017 <Semaphore::acquire()+0x39>
c001e085:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e08a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e08d:	eb b9                	jmp    c001e048 <Semaphore::acquire()+0x6a>

c001e08f <taskReturned>:
c001e08f:	83 ec 18             	sub    esp,0x18
c001e092:	68 60 c4 02 c0       	push   0xc002c460
c001e097:	e8 a1 c0 ff ff       	call   c001a13d <Krnl::panic(char const*)>
c001e09c:	83 c4 10             	add    esp,0x10
c001e09f:	83 ec 0c             	sub    esp,0xc
c001e0a2:	6a 02                	push   0x2
c001e0a4:	e8 fc fd ff ff       	call   c001dea5 <blockTask(TaskState)>
c001e0a9:	fa                   	cli    
c001e0aa:	ff 05 28 f7 02 c0    	inc    DWORD PTR ds:0xc002f728
c001e0b0:	e8 1a fc ff ff       	call   c001dccf <schedule()>
c001e0b5:	a1 28 f7 02 c0       	mov    eax,ds:0xc002f728
c001e0ba:	83 c4 10             	add    esp,0x10
c001e0bd:	48                   	dec    eax
c001e0be:	a3 28 f7 02 c0       	mov    ds:0xc002f728,eax
c001e0c3:	85 c0                	test   eax,eax
c001e0c5:	75 d8                	jne    c001e09f <taskReturned+0x10>
c001e0c7:	fb                   	sti    
c001e0c8:	eb d5                	jmp    c001e09f <taskReturned+0x10>

c001e0ca <Thr::processFromPID(int)>:
c001e0ca:	57                   	push   edi
c001e0cb:	56                   	push   esi
c001e0cc:	53                   	push   ebx
c001e0cd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e0d1:	fa                   	cli    
c001e0d2:	ff 05 28 f7 02 c0    	inc    DWORD PTR ds:0xc002f728
c001e0d8:	83 ec 0c             	sub    esp,0xc
c001e0db:	68 44 f7 02 c0       	push   0xc002f744
c001e0e0:	e8 05 ab 00 00       	call   c0028bea <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e0e5:	83 c4 10             	add    esp,0x10
c001e0e8:	89 c7                	mov    edi,eax
c001e0ea:	eb 14                	jmp    c001e100 <Thr::processFromPID(int)+0x36>
c001e0ec:	83 ec 0c             	sub    esp,0xc
c001e0ef:	68 44 f7 02 c0       	push   0xc002f744
c001e0f4:	e8 f1 aa 00 00       	call   c0028bea <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e0f9:	83 c4 10             	add    esp,0x10
c001e0fc:	39 f8                	cmp    eax,edi
c001e0fe:	74 49                	je     c001e149 <Thr::processFromPID(int)+0x7f>
c001e100:	83 ec 0c             	sub    esp,0xc
c001e103:	68 44 f7 02 c0       	push   0xc002f744
c001e108:	e8 dd aa 00 00       	call   c0028bea <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e10d:	c7 04 24 44 f7 02 c0 	mov    DWORD PTR [esp],0xc002f744
c001e114:	89 c3                	mov    ebx,eax
c001e116:	e8 d7 aa 00 00       	call   c0028bf2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e11b:	58                   	pop    eax
c001e11c:	5a                   	pop    edx
c001e11d:	53                   	push   ebx
c001e11e:	68 44 f7 02 c0       	push   0xc002f744
c001e123:	e8 78 ab 00 00       	call   c0028ca0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e128:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e12b:	83 c4 10             	add    esp,0x10
c001e12e:	39 30                	cmp    DWORD PTR [eax],esi
c001e130:	75 ba                	jne    c001e0ec <Thr::processFromPID(int)+0x22>
c001e132:	a1 28 f7 02 c0       	mov    eax,ds:0xc002f728
c001e137:	48                   	dec    eax
c001e138:	a3 28 f7 02 c0       	mov    ds:0xc002f728,eax
c001e13d:	74 07                	je     c001e146 <Thr::processFromPID(int)+0x7c>
c001e13f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e142:	5b                   	pop    ebx
c001e143:	5e                   	pop    esi
c001e144:	5f                   	pop    edi
c001e145:	c3                   	ret    
c001e146:	fb                   	sti    
c001e147:	eb f6                	jmp    c001e13f <Thr::processFromPID(int)+0x75>
c001e149:	a1 28 f7 02 c0       	mov    eax,ds:0xc002f728
c001e14e:	48                   	dec    eax
c001e14f:	a3 28 f7 02 c0       	mov    ds:0xc002f728,eax
c001e154:	75 05                	jne    c001e15b <Thr::processFromPID(int)+0x91>
c001e156:	fb                   	sti    
c001e157:	5b                   	pop    ebx
c001e158:	5e                   	pop    esi
c001e159:	5f                   	pop    edi
c001e15a:	c3                   	ret    
c001e15b:	5b                   	pop    ebx
c001e15c:	31 c0                	xor    eax,eax
c001e15e:	5e                   	pop    esi
c001e15f:	5f                   	pop    edi
c001e160:	c3                   	ret    

c001e161 <unblockTask(ThreadControlBlock*)>:
c001e161:	53                   	push   ebx
c001e162:	83 ec 08             	sub    esp,0x8
c001e165:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e169:	fa                   	cli    
c001e16a:	ff 05 28 f7 02 c0    	inc    DWORD PTR ds:0xc002f728
c001e170:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e173:	85 c0                	test   eax,eax
c001e175:	74 5a                	je     c001e1d1 <unblockTask(ThreadControlBlock*)+0x70>
c001e177:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e17a:	48                   	dec    eax
c001e17b:	74 31                	je     c001e1ae <unblockTask(ThreadControlBlock*)+0x4d>
c001e17d:	83 ec 0c             	sub    esp,0xc
c001e180:	68 44 f7 02 c0       	push   0xc002f744
c001e185:	e8 60 aa 00 00       	call   c0028bea <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e18a:	83 c4 10             	add    esp,0x10
c001e18d:	85 c0                	test   eax,eax
c001e18f:	75 17                	jne    c001e1a8 <unblockTask(ThreadControlBlock*)+0x47>
c001e191:	eb 50                	jmp    c001e1e3 <unblockTask(ThreadControlBlock*)+0x82>
c001e193:	83 ec 08             	sub    esp,0x8
c001e196:	50                   	push   eax
c001e197:	68 44 f7 02 c0       	push   0xc002f744
c001e19c:	e8 d1 ad 00 00       	call   c0028f72 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e1a1:	83 c4 10             	add    esp,0x10
c001e1a4:	85 c0                	test   eax,eax
c001e1a6:	74 3b                	je     c001e1e3 <unblockTask(ThreadControlBlock*)+0x82>
c001e1a8:	39 c3                	cmp    ebx,eax
c001e1aa:	75 e7                	jne    c001e193 <unblockTask(ThreadControlBlock*)+0x32>
c001e1ac:	eb 10                	jmp    c001e1be <unblockTask(ThreadControlBlock*)+0x5d>
c001e1ae:	83 ec 0c             	sub    esp,0xc
c001e1b1:	68 e2 c3 02 c0       	push   0xc002c3e2
c001e1b6:	e8 b6 46 ff ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c001e1bb:	83 c4 10             	add    esp,0x10
c001e1be:	a1 28 f7 02 c0       	mov    eax,ds:0xc002f728
c001e1c3:	48                   	dec    eax
c001e1c4:	a3 28 f7 02 c0       	mov    ds:0xc002f728,eax
c001e1c9:	75 01                	jne    c001e1cc <unblockTask(ThreadControlBlock*)+0x6b>
c001e1cb:	fb                   	sti    
c001e1cc:	83 c4 08             	add    esp,0x8
c001e1cf:	5b                   	pop    ebx
c001e1d0:	c3                   	ret    
c001e1d1:	83 ec 0c             	sub    esp,0xc
c001e1d4:	68 cb c3 02 c0       	push   0xc002c3cb
c001e1d9:	e8 93 46 ff ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c001e1de:	83 c4 10             	add    esp,0x10
c001e1e1:	eb db                	jmp    c001e1be <unblockTask(ThreadControlBlock*)+0x5d>
c001e1e3:	83 ec 08             	sub    esp,0x8
c001e1e6:	53                   	push   ebx
c001e1e7:	68 44 f7 02 c0       	push   0xc002f744
c001e1ec:	e8 af aa 00 00       	call   c0028ca0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e1f1:	83 c4 10             	add    esp,0x10
c001e1f4:	eb c8                	jmp    c001e1be <unblockTask(ThreadControlBlock*)+0x5d>

c001e1f6 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e1f6:	55                   	push   ebp
c001e1f7:	57                   	push   edi
c001e1f8:	56                   	push   esi
c001e1f9:	53                   	push   ebx
c001e1fa:	83 ec 1c             	sub    esp,0x1c
c001e1fd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e201:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e204:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e20a:	85 ff                	test   edi,edi
c001e20c:	7e 20                	jle    c001e22e <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e20e:	31 f6                	xor    esi,esi
c001e210:	83 ec 0c             	sub    esp,0xc
c001e213:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e21a:	46                   	inc    esi
c001e21b:	e8 09 16 ff ff       	call   c000f829 <free>
c001e220:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e223:	83 c4 10             	add    esp,0x10
c001e226:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e22c:	7f e2                	jg     c001e210 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e22e:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e238:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e23d:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e240:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e243:	d3 c0                	rol    eax,cl
c001e245:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001e24c:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e24f:	89 f7                	mov    edi,esi
c001e251:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e259:	0f 85 64 01 00 00    	jne    c001e3c3 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e25f:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e265:	85 ed                	test   ebp,ebp
c001e267:	74 1b                	je     c001e284 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e269:	83 ec 0c             	sub    esp,0xc
c001e26c:	55                   	push   ebp
c001e26d:	e8 70 bc ff ff       	call   c0019ee2 <EnvVarContainer::~EnvVarContainer()>
c001e272:	59                   	pop    ecx
c001e273:	5e                   	pop    esi
c001e274:	6a 0c                	push   0xc
c001e276:	55                   	push   ebp
c001e277:	e8 1d 45 ff ff       	call   c0012799 <operator delete(void*, unsigned long)>
c001e27c:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e27f:	83 c4 10             	add    esp,0x10
c001e282:	89 f7                	mov    edi,esi
c001e284:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e28a:	85 c0                	test   eax,eax
c001e28c:	0f 84 aa 00 00 00    	je     c001e33c <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e292:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e295:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e299:	31 c9                	xor    ecx,ecx
c001e29b:	eb 10                	jmp    c001e2ad <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e29d:	41                   	inc    ecx
c001e29e:	83 f9 10             	cmp    ecx,0x10
c001e2a1:	0f 84 95 00 00 00    	je     c001e33c <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e2a7:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e2ad:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e2b4:	d3 fa                	sar    edx,cl
c001e2b6:	83 e2 01             	and    edx,0x1
c001e2b9:	74 e2                	je     c001e29d <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e2bb:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e2be:	01 ca                	add    edx,ecx
c001e2c0:	89 d5                	mov    ebp,edx
c001e2c2:	c1 e5 05             	shl    ebp,0x5
c001e2c5:	01 ea                	add    edx,ebp
c001e2c7:	01 d0                	add    eax,edx
c001e2c9:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e2cf:	83 fd 07             	cmp    ebp,0x7
c001e2d2:	75 c9                	jne    c001e29d <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e2d4:	05 40 02 00 00       	add    eax,0x240
c001e2d9:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e2dc:	83 fd ff             	cmp    ebp,0xffffffff
c001e2df:	0f 8c e6 00 00 00    	jl     c001e3cb <cleanupTerminatedTask(ThreadControlBlock*)+0x1d5>
c001e2e5:	0f 84 97 01 00 00    	je     c001e482 <cleanupTerminatedTask(ThreadControlBlock*)+0x28c>
c001e2eb:	85 ed                	test   ebp,ebp
c001e2ed:	0f 84 7e 01 00 00    	je     c001e471 <cleanupTerminatedTask(ThreadControlBlock*)+0x27b>
c001e2f3:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e2f5:	75 a6                	jne    c001e29d <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e2f7:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e2fd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e301:	01 d0                	add    eax,edx
c001e303:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e307:	83 ec 0c             	sub    esp,0xc
c001e30a:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e310:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e313:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e319:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e320:	50                   	push   eax
c001e321:	e8 3b fe ff ff       	call   c001e161 <unblockTask(ThreadControlBlock*)>
c001e326:	83 c4 10             	add    esp,0x10
c001e329:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e32c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e330:	89 f7                	mov    edi,esi
c001e332:	41                   	inc    ecx
c001e333:	83 f9 10             	cmp    ecx,0x10
c001e336:	0f 85 6b ff ff ff    	jne    c001e2a7 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e33c:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e342:	85 c0                	test   eax,eax
c001e344:	74 5d                	je     c001e3a3 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e346:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e34c:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e352:	74 4f                	je     c001e3a3 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e354:	83 ec 0c             	sub    esp,0xc
c001e357:	68 44 f7 02 c0       	push   0xc002f744
c001e35c:	e8 89 a8 00 00       	call   c0028bea <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e361:	c7 04 24 44 f7 02 c0 	mov    DWORD PTR [esp],0xc002f744
c001e368:	89 c7                	mov    edi,eax
c001e36a:	e8 5f a8 00 00       	call   c0028bce <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e36f:	83 c4 10             	add    esp,0x10
c001e372:	84 c0                	test   al,al
c001e374:	0f 84 c2 00 00 00    	je     c001e43c <cleanupTerminatedTask(ThreadControlBlock*)+0x246>
c001e37a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e37d:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e383:	85 d2                	test   edx,edx
c001e385:	74 0f                	je     c001e396 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e387:	83 ec 0c             	sub    esp,0xc
c001e38a:	8b 02                	mov    eax,DWORD PTR [edx]
c001e38c:	52                   	push   edx
c001e38d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e390:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e393:	83 c4 10             	add    esp,0x10
c001e396:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e3a0:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e3a3:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e3a9:	85 db                	test   ebx,ebx
c001e3ab:	74 16                	je     c001e3c3 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e3ad:	83 ec 0c             	sub    esp,0xc
c001e3b0:	53                   	push   ebx
c001e3b1:	e8 14 36 ff ff       	call   c00119ca <VAS::~VAS()>
c001e3b6:	58                   	pop    eax
c001e3b7:	5a                   	pop    edx
c001e3b8:	6a 14                	push   0x14
c001e3ba:	53                   	push   ebx
c001e3bb:	e8 d9 43 ff ff       	call   c0012799 <operator delete(void*, unsigned long)>
c001e3c0:	83 c4 10             	add    esp,0x10
c001e3c3:	83 c4 1c             	add    esp,0x1c
c001e3c6:	5b                   	pop    ebx
c001e3c7:	5e                   	pop    esi
c001e3c8:	5f                   	pop    edi
c001e3c9:	5d                   	pop    ebp
c001e3ca:	c3                   	ret    
c001e3cb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e3cf:	83 ec 0c             	sub    esp,0xc
c001e3d2:	68 94 c4 02 c0       	push   0xc002c494
c001e3d7:	e8 61 bd ff ff       	call   c001a13d <Krnl::panic(char const*)>
c001e3dc:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e3df:	83 c4 10             	add    esp,0x10
c001e3e2:	89 f7                	mov    edi,esi
c001e3e4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e3e8:	e9 b0 fe ff ff       	jmp    c001e29d <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e3ed:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e3f3:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e3f9:	75 1c                	jne    c001e417 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e3fb:	83 ec 0c             	sub    esp,0xc
c001e3fe:	68 fc c4 02 c0       	push   0xc002c4fc
c001e403:	e8 69 44 ff ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c001e408:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e40f:	e8 91 fa ff ff       	call   c001dea5 <blockTask(TaskState)>
c001e414:	83 c4 10             	add    esp,0x10
c001e417:	83 ec 08             	sub    esp,0x8
c001e41a:	56                   	push   esi
c001e41b:	68 44 f7 02 c0       	push   0xc002f744
c001e420:	e8 7b a8 00 00       	call   c0028ca0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e425:	c7 04 24 44 f7 02 c0 	mov    DWORD PTR [esp],0xc002f744
c001e42c:	e8 b9 a7 00 00       	call   c0028bea <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e431:	83 c4 10             	add    esp,0x10
c001e434:	39 f8                	cmp    eax,edi
c001e436:	0f 84 3e ff ff ff    	je     c001e37a <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e43c:	83 ec 0c             	sub    esp,0xc
c001e43f:	68 44 f7 02 c0       	push   0xc002f744
c001e444:	e8 a1 a7 00 00       	call   c0028bea <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e449:	c7 04 24 44 f7 02 c0 	mov    DWORD PTR [esp],0xc002f744
c001e450:	89 c6                	mov    esi,eax
c001e452:	e8 9b a7 00 00       	call   c0028bf2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e457:	83 c4 10             	add    esp,0x10
c001e45a:	39 f3                	cmp    ebx,esi
c001e45c:	74 b9                	je     c001e417 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e45e:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e461:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e464:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e46a:	75 ab                	jne    c001e417 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e46c:	e9 7c ff ff ff       	jmp    c001e3ed <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e471:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e475:	83 ec 0c             	sub    esp,0xc
c001e478:	68 c8 c4 02 c0       	push   0xc002c4c8
c001e47d:	e9 55 ff ff ff       	jmp    c001e3d7 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e1>
c001e482:	8b 36                	mov    esi,DWORD PTR [esi]
c001e484:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e488:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e48b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e48e:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e494:	01 d7                	add    edi,edx
c001e496:	89 f8                	mov    eax,edi
c001e498:	e9 66 fe ff ff       	jmp    c001e303 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e49d <cleanerTaskFunction(void*)>:
c001e49d:	53                   	push   ebx
c001e49e:	83 ec 08             	sub    esp,0x8
c001e4a1:	a1 28 f7 02 c0       	mov    eax,ds:0xc002f728
c001e4a6:	48                   	dec    eax
c001e4a7:	a3 28 f7 02 c0       	mov    ds:0xc002f728,eax
c001e4ac:	75 01                	jne    c001e4af <cleanerTaskFunction(void*)+0x12>
c001e4ae:	fb                   	sti    
c001e4af:	fa                   	cli    
c001e4b0:	a1 28 f7 02 c0       	mov    eax,ds:0xc002f728
c001e4b5:	80 3d 0c f7 02 c0 00 	cmp    BYTE PTR ds:0xc002f70c,0x0
c001e4bc:	8d 50 01             	lea    edx,[eax+0x1]
c001e4bf:	89 15 28 f7 02 c0    	mov    DWORD PTR ds:0xc002f728,edx
c001e4c5:	0f 84 a1 00 00 00    	je     c001e56c <cleanerTaskFunction(void*)+0xcf>
c001e4cb:	a3 28 f7 02 c0       	mov    ds:0xc002f728,eax
c001e4d0:	85 c0                	test   eax,eax
c001e4d2:	75 01                	jne    c001e4d5 <cleanerTaskFunction(void*)+0x38>
c001e4d4:	fb                   	sti    
c001e4d5:	c6 05 0c f7 02 c0 00 	mov    BYTE PTR ds:0xc002f70c,0x0
c001e4dc:	fa                   	cli    
c001e4dd:	ff 05 28 f7 02 c0    	inc    DWORD PTR ds:0xc002f728
c001e4e3:	ff 05 24 f7 02 c0    	inc    DWORD PTR ds:0xc002f724
c001e4e9:	fa                   	cli    
c001e4ea:	ff 05 28 f7 02 c0    	inc    DWORD PTR ds:0xc002f728
c001e4f0:	eb 26                	jmp    c001e518 <cleanerTaskFunction(void*)+0x7b>
c001e4f2:	83 ec 0c             	sub    esp,0xc
c001e4f5:	68 2c f7 02 c0       	push   0xc002f72c
c001e4fa:	e8 eb a6 00 00       	call   c0028bea <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e4ff:	c7 04 24 2c f7 02 c0 	mov    DWORD PTR [esp],0xc002f72c
c001e506:	89 c3                	mov    ebx,eax
c001e508:	e8 e5 a6 00 00       	call   c0028bf2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e50d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e510:	e8 e1 fc ff ff       	call   c001e1f6 <cleanupTerminatedTask(ThreadControlBlock*)>
c001e515:	83 c4 10             	add    esp,0x10
c001e518:	83 ec 0c             	sub    esp,0xc
c001e51b:	68 2c f7 02 c0       	push   0xc002f72c
c001e520:	e8 a9 a6 00 00       	call   c0028bce <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e525:	83 c4 10             	add    esp,0x10
c001e528:	84 c0                	test   al,al
c001e52a:	74 c6                	je     c001e4f2 <cleanerTaskFunction(void*)+0x55>
c001e52c:	a1 28 f7 02 c0       	mov    eax,ds:0xc002f728
c001e531:	48                   	dec    eax
c001e532:	a3 28 f7 02 c0       	mov    ds:0xc002f728,eax
c001e537:	75 01                	jne    c001e53a <cleanerTaskFunction(void*)+0x9d>
c001e539:	fb                   	sti    
c001e53a:	a1 24 f7 02 c0       	mov    eax,ds:0xc002f724
c001e53f:	48                   	dec    eax
c001e540:	a3 24 f7 02 c0       	mov    ds:0xc002f724,eax
c001e545:	0f 85 56 ff ff ff    	jne    c001e4a1 <cleanerTaskFunction(void*)+0x4>
c001e54b:	a1 20 f7 02 c0       	mov    eax,ds:0xc002f720
c001e550:	85 c0                	test   eax,eax
c001e552:	0f 84 49 ff ff ff    	je     c001e4a1 <cleanerTaskFunction(void*)+0x4>
c001e558:	c7 05 20 f7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f720,0x0
c001e562:	e8 68 f7 ff ff       	call   c001dccf <schedule()>
c001e567:	e9 35 ff ff ff       	jmp    c001e4a1 <cleanerTaskFunction(void*)+0x4>
c001e56c:	83 ec 0c             	sub    esp,0xc
c001e56f:	6a 02                	push   0x2
c001e571:	e8 09 f9 ff ff       	call   c001de7f <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e576:	83 c4 10             	add    esp,0x10
c001e579:	e9 57 ff ff ff       	jmp    c001e4d5 <cleanerTaskFunction(void*)+0x38>

c001e57e <terminateTask(int)>:
c001e57e:	83 ec 14             	sub    esp,0x14
c001e581:	fa                   	cli    
c001e582:	ff 05 28 f7 02 c0    	inc    DWORD PTR ds:0xc002f728
c001e588:	ff 05 24 f7 02 c0    	inc    DWORD PTR ds:0xc002f724
c001e58e:	fa                   	cli    
c001e58f:	ff 05 28 f7 02 c0    	inc    DWORD PTR ds:0xc002f728
c001e595:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e599:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e59e:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e5a1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e5a6:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e5a9:	50                   	push   eax
c001e5aa:	68 2c f7 02 c0       	push   0xc002f72c
c001e5af:	e8 ec a6 00 00       	call   c0028ca0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e5b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e5b9:	83 c4 10             	add    esp,0x10
c001e5bc:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e5c3:	a1 08 f7 02 c0       	mov    eax,ds:0xc002f708
c001e5c8:	85 c0                	test   eax,eax
c001e5ca:	74 53                	je     c001e61f <terminateTask(int)+0xa1>
c001e5cc:	83 ec 0c             	sub    esp,0xc
c001e5cf:	c6 05 0c f7 02 c0 01 	mov    BYTE PTR ds:0xc002f70c,0x1
c001e5d6:	50                   	push   eax
c001e5d7:	e8 85 fb ff ff       	call   c001e161 <unblockTask(ThreadControlBlock*)>
c001e5dc:	83 c4 10             	add    esp,0x10
c001e5df:	a1 28 f7 02 c0       	mov    eax,ds:0xc002f728
c001e5e4:	48                   	dec    eax
c001e5e5:	a3 28 f7 02 c0       	mov    ds:0xc002f728,eax
c001e5ea:	75 01                	jne    c001e5ed <terminateTask(int)+0x6f>
c001e5ec:	fb                   	sti    
c001e5ed:	a1 24 f7 02 c0       	mov    eax,ds:0xc002f724
c001e5f2:	48                   	dec    eax
c001e5f3:	a3 24 f7 02 c0       	mov    ds:0xc002f724,eax
c001e5f8:	75 09                	jne    c001e603 <terminateTask(int)+0x85>
c001e5fa:	83 3d 20 f7 02 c0 00 	cmp    DWORD PTR ds:0xc002f720,0x0
c001e601:	75 2e                	jne    c001e631 <terminateTask(int)+0xb3>
c001e603:	a1 28 f7 02 c0       	mov    eax,ds:0xc002f728
c001e608:	48                   	dec    eax
c001e609:	a3 28 f7 02 c0       	mov    ds:0xc002f728,eax
c001e60e:	75 01                	jne    c001e611 <terminateTask(int)+0x93>
c001e610:	fb                   	sti    
c001e611:	fa                   	cli    
c001e612:	ff 05 28 f7 02 c0    	inc    DWORD PTR ds:0xc002f728
c001e618:	e8 b2 f6 ff ff       	call   c001dccf <schedule()>
c001e61d:	eb e4                	jmp    c001e603 <terminateTask(int)+0x85>
c001e61f:	83 ec 0c             	sub    esp,0xc
c001e622:	68 f9 c3 02 c0       	push   0xc002c3f9
c001e627:	e8 45 42 ff ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c001e62c:	83 c4 10             	add    esp,0x10
c001e62f:	eb ae                	jmp    c001e5df <terminateTask(int)+0x61>
c001e631:	c7 05 20 f7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f720,0x0
c001e63b:	eb db                	jmp    c001e618 <terminateTask(int)+0x9a>

c001e63d <Thr::terminateFromIRQ(int)>:
c001e63d:	83 ec 18             	sub    esp,0x18
c001e640:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e644:	e8 35 ff ff ff       	call   c001e57e <terminateTask(int)>
c001e649:	90                   	nop

c001e64a <Semaphore::release()>:
c001e64a:	83 ec 0c             	sub    esp,0xc
c001e64d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e651:	fa                   	cli    
c001e652:	a1 24 f7 02 c0       	mov    eax,ds:0xc002f724
c001e657:	ff 05 28 f7 02 c0    	inc    DWORD PTR ds:0xc002f728
c001e65d:	8d 48 01             	lea    ecx,[eax+0x1]
c001e660:	89 0d 24 f7 02 c0    	mov    DWORD PTR ds:0xc002f724,ecx
c001e666:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e669:	85 c9                	test   ecx,ecx
c001e66b:	74 3c                	je     c001e6a9 <Semaphore::release()+0x5f>
c001e66d:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001e670:	83 ec 0c             	sub    esp,0xc
c001e673:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e676:	51                   	push   ecx
c001e677:	e8 e5 fa ff ff       	call   c001e161 <unblockTask(ThreadControlBlock*)>
c001e67c:	a1 24 f7 02 c0       	mov    eax,ds:0xc002f724
c001e681:	83 c4 10             	add    esp,0x10
c001e684:	48                   	dec    eax
c001e685:	a3 24 f7 02 c0       	mov    ds:0xc002f724,eax
c001e68a:	85 c0                	test   eax,eax
c001e68c:	75 09                	jne    c001e697 <Semaphore::release()+0x4d>
c001e68e:	a1 20 f7 02 c0       	mov    eax,ds:0xc002f720
c001e693:	85 c0                	test   eax,eax
c001e695:	75 17                	jne    c001e6ae <Semaphore::release()+0x64>
c001e697:	a1 28 f7 02 c0       	mov    eax,ds:0xc002f728
c001e69c:	48                   	dec    eax
c001e69d:	a3 28 f7 02 c0       	mov    ds:0xc002f728,eax
c001e6a2:	75 01                	jne    c001e6a5 <Semaphore::release()+0x5b>
c001e6a4:	fb                   	sti    
c001e6a5:	83 c4 0c             	add    esp,0xc
c001e6a8:	c3                   	ret    
c001e6a9:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001e6ac:	eb d7                	jmp    c001e685 <Semaphore::release()+0x3b>
c001e6ae:	c7 05 20 f7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f720,0x0
c001e6b8:	e8 12 f6 ff ff       	call   c001dccf <schedule()>
c001e6bd:	eb d8                	jmp    c001e697 <Semaphore::release()+0x4d>

c001e6bf <__static_initialization_and_destruction_0(int, int)>:
c001e6bf:	83 ec 0c             	sub    esp,0xc
c001e6c2:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e6c7:	0f 85 88 00 00 00    	jne    c001e755 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e6cd:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e6d5:	75 7e                	jne    c001e755 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e6d7:	83 ec 0c             	sub    esp,0xc
c001e6da:	68 44 f7 02 c0       	push   0xc002f744
c001e6df:	e8 4c a8 00 00       	call   c0028f30 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e6e4:	83 c4 10             	add    esp,0x10
c001e6e7:	83 ec 04             	sub    esp,0x4
c001e6ea:	68 dc cf 02 c0       	push   0xc002cfdc
c001e6ef:	68 44 f7 02 c0       	push   0xc002f744
c001e6f4:	68 e4 8e 02 c0       	push   0xc0028ee4
c001e6f9:	e8 15 40 ff ff       	call   c0012713 <__cxa_atexit>
c001e6fe:	83 c4 10             	add    esp,0x10
c001e701:	83 ec 0c             	sub    esp,0xc
c001e704:	68 38 f7 02 c0       	push   0xc002f738
c001e709:	e8 22 a8 00 00       	call   c0028f30 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e70e:	83 c4 10             	add    esp,0x10
c001e711:	83 ec 04             	sub    esp,0x4
c001e714:	68 dc cf 02 c0       	push   0xc002cfdc
c001e719:	68 38 f7 02 c0       	push   0xc002f738
c001e71e:	68 e4 8e 02 c0       	push   0xc0028ee4
c001e723:	e8 eb 3f ff ff       	call   c0012713 <__cxa_atexit>
c001e728:	83 c4 10             	add    esp,0x10
c001e72b:	83 ec 0c             	sub    esp,0xc
c001e72e:	68 2c f7 02 c0       	push   0xc002f72c
c001e733:	e8 f8 a7 00 00       	call   c0028f30 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e738:	83 c4 10             	add    esp,0x10
c001e73b:	83 ec 04             	sub    esp,0x4
c001e73e:	68 dc cf 02 c0       	push   0xc002cfdc
c001e743:	68 2c f7 02 c0       	push   0xc002f72c
c001e748:	68 e4 8e 02 c0       	push   0xc0028ee4
c001e74d:	e8 c1 3f ff ff       	call   c0012713 <__cxa_atexit>
c001e752:	83 c4 10             	add    esp,0x10
c001e755:	90                   	nop
c001e756:	83 c4 0c             	add    esp,0xc
c001e759:	c3                   	ret    

c001e75a <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e75a:	83 ec 0c             	sub    esp,0xc
c001e75d:	83 ec 08             	sub    esp,0x8
c001e760:	68 ff ff 00 00       	push   0xffff
c001e765:	6a 01                	push   0x1
c001e767:	e8 53 ff ff ff       	call   c001e6bf <__static_initialization_and_destruction_0(int, int)>
c001e76c:	83 c4 10             	add    esp,0x10
c001e76f:	83 c4 0c             	add    esp,0xc
c001e772:	c3                   	ret    

c001e773 <Vm::inbv(unsigned short)>:
c001e773:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e777:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e77c:	75 06                	jne    c001e784 <Vm::inbv(unsigned short)+0x11>
c001e77e:	a0 8c f7 02 c0       	mov    al,ds:0xc002f78c
c001e783:	c3                   	ret    
c001e784:	ec                   	in     al,dx
c001e785:	c3                   	ret    

c001e786 <Vm::outbv(unsigned short, unsigned char)>:
c001e786:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e78a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e78e:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e793:	75 25                	jne    c001e7ba <Vm::outbv(unsigned short, unsigned char)+0x34>
c001e795:	8b 0d 8c f7 02 c0    	mov    ecx,DWORD PTR ds:0xc002f78c
c001e79b:	8d 51 01             	lea    edx,[ecx+0x1]
c001e79e:	88 81 a0 f7 02 c0    	mov    BYTE PTR [ecx-0x3ffd0860],al
c001e7a4:	89 15 8c f7 02 c0    	mov    DWORD PTR ds:0xc002f78c,edx
c001e7aa:	83 fa 20             	cmp    edx,0x20
c001e7ad:	75 0c                	jne    c001e7bb <Vm::outbv(unsigned short, unsigned char)+0x35>
c001e7af:	c7 05 8c f7 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002f78c,0x1f
c001e7b9:	c3                   	ret    
c001e7ba:	ee                   	out    dx,al
c001e7bb:	c3                   	ret    

c001e7bc <Vm::realToLinear(unsigned short, unsigned short)>:
c001e7bc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e7c1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e7c6:	c1 e0 04             	shl    eax,0x4
c001e7c9:	01 d0                	add    eax,edx
c001e7cb:	c3                   	ret    

c001e7cc <Vm::getSegment(unsigned int)>:
c001e7cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e7d0:	c1 e8 10             	shr    eax,0x10
c001e7d3:	c3                   	ret    

c001e7d4 <Vm::getOffset(unsigned int)>:
c001e7d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e7d8:	c3                   	ret    

c001e7d9 <Vm::mainloop2()>:
c001e7d9:	83 ec 18             	sub    esp,0x18
c001e7dc:	fa                   	cli    
c001e7dd:	ff 05 28 f7 02 c0    	inc    DWORD PTR ds:0xc002f728
c001e7e3:	6a 02                	push   0x2
c001e7e5:	c6 05 85 f7 02 c0 01 	mov    BYTE PTR ds:0xc002f785,0x1
c001e7ec:	e8 8e f6 ff ff       	call   c001de7f <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e7f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e7f6:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001e7fa:	52                   	push   edx
c001e7fb:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001e7ff:	52                   	push   edx
c001e800:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001e804:	52                   	push   edx
c001e805:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001e809:	50                   	push   eax
c001e80a:	e8 eb 1a fe ff       	call   c00002fa <goToVM86>
c001e80f:	83 c4 2c             	add    esp,0x2c
c001e812:	c3                   	ret    

c001e813 <Vm::mainVm8086Loop(void*)>:
c001e813:	a1 28 f7 02 c0       	mov    eax,ds:0xc002f728
c001e818:	48                   	dec    eax
c001e819:	a3 28 f7 02 c0       	mov    ds:0xc002f728,eax
c001e81e:	75 01                	jne    c001e821 <Vm::mainVm8086Loop(void*)+0xe>
c001e820:	fb                   	sti    
c001e821:	eb b6                	jmp    c001e7d9 <Vm::mainloop2()>

c001e823 <Vm::mainloop3(unsigned long)>:
c001e823:	83 ec 18             	sub    esp,0x18
c001e826:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e82a:	fa                   	cli    
c001e82b:	ff 05 28 f7 02 c0    	inc    DWORD PTR ds:0xc002f728
c001e831:	6a 02                	push   0x2
c001e833:	c6 05 84 f7 02 c0 01 	mov    BYTE PTR ds:0xc002f784,0x1
c001e83a:	a3 80 f7 02 c0       	mov    ds:0xc002f780,eax
c001e83f:	e8 3b f6 ff ff       	call   c001de7f <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e844:	83 c4 1c             	add    esp,0x1c
c001e847:	eb 90                	jmp    c001e7d9 <Vm::mainloop2()>

c001e849 <Vm::initialise8086()>:
c001e849:	83 ec 0c             	sub    esp,0xc
c001e84c:	68 80 00 00 00       	push   0x80
c001e851:	6a 00                	push   0x0
c001e853:	68 13 e8 01 c0       	push   0xc001e813
c001e858:	ff 35 50 f7 02 c0    	push   DWORD PTR ds:0xc002f750
c001e85e:	e8 47 f2 ff ff       	call   c001daaa <Process::createThread(void (*)(void*), void*, int)>
c001e863:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001e86a:	a3 88 f7 02 c0       	mov    ds:0xc002f788,eax
c001e86f:	68 00 01 00 00       	push   0x100
c001e874:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c001e879:	6a 00                	push   0x0
c001e87b:	6a 00                	push   0x0
c001e87d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001e883:	e8 b4 35 ff ff       	call   c0011e3c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e888:	83 c4 2c             	add    esp,0x2c
c001e88b:	c3                   	ret    

c001e88c <Vm::finish8086()>:
c001e88c:	53                   	push   ebx
c001e88d:	83 ec 08             	sub    esp,0x8
c001e890:	fa                   	cli    
c001e891:	ff 05 28 f7 02 c0    	inc    DWORD PTR ds:0xc002f728
c001e897:	80 3d 84 f7 02 c0 00 	cmp    BYTE PTR ds:0xc002f784,0x0
c001e89e:	75 15                	jne    c001e8b5 <Vm::finish8086()+0x29>
c001e8a0:	e8 2a f4 ff ff       	call   c001dccf <schedule()>
c001e8a5:	a1 28 f7 02 c0       	mov    eax,ds:0xc002f728
c001e8aa:	48                   	dec    eax
c001e8ab:	a3 28 f7 02 c0       	mov    ds:0xc002f728,eax
c001e8b0:	75 de                	jne    c001e890 <Vm::finish8086()+0x4>
c001e8b2:	fb                   	sti    
c001e8b3:	eb db                	jmp    c001e890 <Vm::finish8086()+0x4>
c001e8b5:	83 ec 0c             	sub    esp,0xc
c001e8b8:	8b 1d 80 f7 02 c0    	mov    ebx,DWORD PTR ds:0xc002f780
c001e8be:	ff 35 88 f7 02 c0    	push   DWORD PTR ds:0xc002f788
c001e8c4:	c6 05 84 f7 02 c0 00 	mov    BYTE PTR ds:0xc002f784,0x0
c001e8cb:	e8 91 f8 ff ff       	call   c001e161 <unblockTask(ThreadControlBlock*)>
c001e8d0:	a1 28 f7 02 c0       	mov    eax,ds:0xc002f728
c001e8d5:	83 c4 10             	add    esp,0x10
c001e8d8:	8d 50 ff             	lea    edx,[eax-0x1]
c001e8db:	89 15 28 f7 02 c0    	mov    DWORD PTR ds:0xc002f728,edx
c001e8e1:	85 d2                	test   edx,edx
c001e8e3:	75 01                	jne    c001e8e6 <Vm::finish8086()+0x5a>
c001e8e5:	fb                   	sti    
c001e8e6:	89 d8                	mov    eax,ebx
c001e8e8:	83 c4 08             	add    esp,0x8
c001e8eb:	5b                   	pop    ebx
c001e8ec:	c3                   	ret    

c001e8ed <Vm::getOutput8086(unsigned char*)>:
c001e8ed:	57                   	push   edi
c001e8ee:	8b 0d 8c f7 02 c0    	mov    ecx,DWORD PTR ds:0xc002f78c
c001e8f4:	56                   	push   esi
c001e8f5:	be a0 f7 02 c0       	mov    esi,0xc002f7a0
c001e8fa:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e8fe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e900:	a1 8c f7 02 c0       	mov    eax,ds:0xc002f78c
c001e905:	5e                   	pop    esi
c001e906:	c7 05 8c f7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f78c,0x0
c001e910:	5f                   	pop    edi
c001e911:	c3                   	ret    

c001e912 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001e912:	55                   	push   ebp
c001e913:	57                   	push   edi
c001e914:	56                   	push   esi
c001e915:	53                   	push   ebx
c001e916:	83 ec 2c             	sub    esp,0x2c
c001e919:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001e91d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001e921:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e925:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001e929:	fa                   	cli    
c001e92a:	ff 05 28 f7 02 c0    	inc    DWORD PTR ds:0xc002f728
c001e930:	0f b6 35 85 f7 02 c0 	movzx  esi,BYTE PTR ds:0xc002f785
c001e937:	89 f0                	mov    eax,esi
c001e939:	84 c0                	test   al,al
c001e93b:	75 1d                	jne    c001e95a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001e93d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e941:	e8 89 f3 ff ff       	call   c001dccf <schedule()>
c001e946:	a1 28 f7 02 c0       	mov    eax,ds:0xc002f728
c001e94b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e94f:	48                   	dec    eax
c001e950:	a3 28 f7 02 c0       	mov    ds:0xc002f728,eax
c001e955:	75 d2                	jne    c001e929 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e957:	fb                   	sti    
c001e958:	eb cf                	jmp    c001e929 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e95a:	a1 88 f7 02 c0       	mov    eax,ds:0xc002f788
c001e95f:	c7 05 8c f7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f78c,0x0
c001e969:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001e96d:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001e971:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001e975:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c001e979:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001e97d:	50                   	push   eax
c001e97e:	6a 20                	push   0x20
c001e980:	6a 00                	push   0x0
c001e982:	68 a0 f7 02 c0       	push   0xc002f7a0
c001e987:	e8 c4 1d fe ff       	call   c0000750 <memset>
c001e98c:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001e993:	e8 81 0e ff ff       	call   c000f819 <malloc>
c001e998:	83 c4 0c             	add    esp,0xc
c001e99b:	89 c3                	mov    ebx,eax
c001e99d:	ff 35 50 f7 02 c0    	push   DWORD PTR ds:0xc002f750
c001e9a3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e9a7:	50                   	push   eax
c001e9a8:	e8 23 44 ff ff       	call   c0012dd0 <File::File(char const*, Process*)>
c001e9ad:	83 c4 10             	add    esp,0x10
c001e9b0:	85 db                	test   ebx,ebx
c001e9b2:	75 0a                	jne    c001e9be <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001e9b4:	83 ec 0c             	sub    esp,0xc
c001e9b7:	68 24 c5 02 c0       	push   0xc002c524
c001e9bc:	eb 3e                	jmp    c001e9fc <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001e9be:	50                   	push   eax
c001e9bf:	8d 44 24 17          	lea    eax,[esp+0x17]
c001e9c3:	50                   	push   eax
c001e9c4:	8d 44 24 20          	lea    eax,[esp+0x20]
c001e9c8:	50                   	push   eax
c001e9c9:	53                   	push   ebx
c001e9ca:	e8 11 47 ff ff       	call   c00130e0 <File::stat(unsigned long long*, bool*)>
c001e9cf:	83 c4 10             	add    esp,0x10
c001e9d2:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001e9d7:	74 0a                	je     c001e9e3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001e9d9:	83 ec 0c             	sub    esp,0xc
c001e9dc:	68 38 c5 02 c0       	push   0xc002c538
c001e9e1:	eb 19                	jmp    c001e9fc <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001e9e3:	51                   	push   ecx
c001e9e4:	51                   	push   ecx
c001e9e5:	6a 01                	push   0x1
c001e9e7:	53                   	push   ebx
c001e9e8:	e8 47 44 ff ff       	call   c0012e34 <File::open(FileOpenMode)>
c001e9ed:	83 c4 10             	add    esp,0x10
c001e9f0:	85 c0                	test   eax,eax
c001e9f2:	74 24                	je     c001ea18 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001e9f4:	83 ec 0c             	sub    esp,0xc
c001e9f7:	68 51 c5 02 c0       	push   0xc002c551
c001e9fc:	e8 3c b7 ff ff       	call   c001a13d <Krnl::panic(char const*)>
c001ea01:	a1 28 f7 02 c0       	mov    eax,ds:0xc002f728
c001ea06:	83 c4 10             	add    esp,0x10
c001ea09:	48                   	dec    eax
c001ea0a:	a3 28 f7 02 c0       	mov    ds:0xc002f728,eax
c001ea0f:	85 c0                	test   eax,eax
c001ea11:	75 01                	jne    c001ea14 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001ea13:	fb                   	sti    
c001ea14:	31 f6                	xor    esi,esi
c001ea16:	eb 58                	jmp    c001ea70 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001ea18:	0f b7 ed             	movzx  ebp,bp
c001ea1b:	50                   	push   eax
c001ea1c:	0f b7 ff             	movzx  edi,di
c001ea1f:	50                   	push   eax
c001ea20:	55                   	push   ebp
c001ea21:	57                   	push   edi
c001ea22:	e8 95 fd ff ff       	call   c001e7bc <Vm::realToLinear(unsigned short, unsigned short)>
c001ea27:	5a                   	pop    edx
c001ea28:	8b 13                	mov    edx,DWORD PTR [ebx]
c001ea2a:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001ea2e:	51                   	push   ecx
c001ea2f:	50                   	push   eax
c001ea30:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ea34:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ea38:	53                   	push   ebx
c001ea39:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001ea3c:	83 c4 14             	add    esp,0x14
c001ea3f:	53                   	push   ebx
c001ea40:	e8 4d 44 ff ff       	call   c0012e92 <File::close()>
c001ea45:	a1 28 f7 02 c0       	mov    eax,ds:0xc002f728
c001ea4a:	83 c4 10             	add    esp,0x10
c001ea4d:	48                   	dec    eax
c001ea4e:	c6 05 85 f7 02 c0 00 	mov    BYTE PTR ds:0xc002f785,0x0
c001ea55:	a3 28 f7 02 c0       	mov    ds:0xc002f728,eax
c001ea5a:	85 c0                	test   eax,eax
c001ea5c:	75 01                	jne    c001ea5f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001ea5e:	fb                   	sti    
c001ea5f:	83 ec 0c             	sub    esp,0xc
c001ea62:	ff 35 88 f7 02 c0    	push   DWORD PTR ds:0xc002f788
c001ea68:	e8 f4 f6 ff ff       	call   c001e161 <unblockTask(ThreadControlBlock*)>
c001ea6d:	83 c4 10             	add    esp,0x10
c001ea70:	83 c4 2c             	add    esp,0x2c
c001ea73:	89 f0                	mov    eax,esi
c001ea75:	5b                   	pop    ebx
c001ea76:	5e                   	pop    esi
c001ea77:	5f                   	pop    edi
c001ea78:	5d                   	pop    ebp
c001ea79:	c3                   	ret    

c001ea7a <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001ea7a:	57                   	push   edi
c001ea7b:	56                   	push   esi
c001ea7c:	53                   	push   ebx
c001ea7d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ea81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea85:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ea89:	83 e8 06             	sub    eax,0x6
c001ea8c:	0f b7 c0             	movzx  eax,ax
c001ea8f:	50                   	push   eax
c001ea90:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001ea95:	50                   	push   eax
c001ea96:	e8 21 fd ff ff       	call   c001e7bc <Vm::realToLinear(unsigned short, unsigned short)>
c001ea9b:	5a                   	pop    edx
c001ea9c:	5e                   	pop    esi
c001ea9d:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001eaa0:	8d 56 fa             	lea    edx,[esi-0x6]
c001eaa3:	81 e2 ff ff 00 00    	and    edx,0xffff
c001eaa9:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001eaac:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001eaaf:	83 c2 02             	add    edx,0x2
c001eab2:	66 89 10             	mov    WORD PTR [eax],dx
c001eab5:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001eab8:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001eabc:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001eabf:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001eac3:	89 d6                	mov    esi,edx
c001eac5:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001eacb:	66 81 e6 ff fd       	and    si,0xfdff
c001ead0:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001ead4:	74 07                	je     c001eadd <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001ead6:	89 d6                	mov    esi,edx
c001ead8:	66 81 ce 00 02       	or     si,0x200
c001eadd:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001eae1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eae6:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001eaea:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001eaf2:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001eaf5:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001eafd:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001eb00:	5b                   	pop    ebx
c001eb01:	5e                   	pop    esi
c001eb02:	5f                   	pop    edi
c001eb03:	c3                   	ret    

c001eb04 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001eb04:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001eb09:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001eb0e:	c1 e0 04             	shl    eax,0x4
c001eb11:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001eb14:	c3                   	ret    

c001eb15 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001eb15:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001eb1a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001eb1f:	c1 e0 04             	shl    eax,0x4
c001eb22:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001eb26:	c3                   	ret    

c001eb27 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001eb27:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001eb2c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001eb31:	c1 e0 04             	shl    eax,0x4
c001eb34:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001eb37:	c3                   	ret    

c001eb38 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001eb38:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001eb3d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001eb42:	c1 e0 04             	shl    eax,0x4
c001eb45:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001eb49:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001eb4c:	c3                   	ret    

c001eb4d <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001eb4d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001eb52:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001eb57:	c1 e0 04             	shl    eax,0x4
c001eb5a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001eb5e:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001eb62:	c3                   	ret    

c001eb63 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001eb63:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001eb68:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001eb6d:	c1 e0 04             	shl    eax,0x4
c001eb70:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001eb74:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001eb77:	c3                   	ret    

c001eb78 <Vm::faultHandler(regs*)>:
c001eb78:	55                   	push   ebp
c001eb79:	57                   	push   edi
c001eb7a:	56                   	push   esi
c001eb7b:	53                   	push   ebx
c001eb7c:	83 ec 1c             	sub    esp,0x1c
c001eb7f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001eb83:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001eb86:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001eb8a:	0f b7 f8             	movzx  edi,ax
c001eb8d:	52                   	push   edx
c001eb8e:	0f b7 c0             	movzx  eax,ax
c001eb91:	50                   	push   eax
c001eb92:	e8 25 fc ff ff       	call   c001e7bc <Vm::realToLinear(unsigned short, unsigned short)>
c001eb97:	5a                   	pop    edx
c001eb98:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001eb9b:	59                   	pop    ecx
c001eb9c:	89 c1                	mov    ecx,eax
c001eb9e:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001eba1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001eba5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ebaa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ebae:	0f b7 c5             	movzx  eax,bp
c001ebb1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ebb5:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001ebb9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ebbd:	e8 fa fb ff ff       	call   c001e7bc <Vm::realToLinear(unsigned short, unsigned short)>
c001ebc2:	5e                   	pop    esi
c001ebc3:	be 06 00 00 00       	mov    esi,0x6
c001ebc8:	5a                   	pop    edx
c001ebc9:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001ebce:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001ebd3:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001ebd6:	80 fa 9d             	cmp    dl,0x9d
c001ebd9:	0f 84 2c 02 00 00    	je     c001ee0b <Vm::faultHandler(regs*)+0x293>
c001ebdf:	0f 87 91 00 00 00    	ja     c001ec76 <Vm::faultHandler(regs*)+0xfe>
c001ebe5:	80 fa 66             	cmp    dl,0x66
c001ebe8:	0f 84 98 01 00 00    	je     c001ed86 <Vm::faultHandler(regs*)+0x20e>
c001ebee:	77 47                	ja     c001ec37 <Vm::faultHandler(regs*)+0xbf>
c001ebf0:	80 fa 36             	cmp    dl,0x36
c001ebf3:	0f 84 80 01 00 00    	je     c001ed79 <Vm::faultHandler(regs*)+0x201>
c001ebf9:	77 1a                	ja     c001ec15 <Vm::faultHandler(regs*)+0x9d>
c001ebfb:	80 fa 26             	cmp    dl,0x26
c001ebfe:	0f 84 4e 01 00 00    	je     c001ed52 <Vm::faultHandler(regs*)+0x1da>
c001ec04:	80 fa 2e             	cmp    dl,0x2e
c001ec07:	0f 85 e2 05 00 00    	jne    c001f1ef <Vm::faultHandler(regs*)+0x677>
c001ec0d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ec10:	31 f6                	xor    esi,esi
c001ec12:	41                   	inc    ecx
c001ec13:	eb be                	jmp    c001ebd3 <Vm::faultHandler(regs*)+0x5b>
c001ec15:	80 fa 64             	cmp    dl,0x64
c001ec18:	0f 84 41 01 00 00    	je     c001ed5f <Vm::faultHandler(regs*)+0x1e7>
c001ec1e:	0f 87 48 01 00 00    	ja     c001ed6c <Vm::faultHandler(regs*)+0x1f4>
c001ec24:	80 fa 3e             	cmp    dl,0x3e
c001ec27:	0f 85 c2 05 00 00    	jne    c001f1ef <Vm::faultHandler(regs*)+0x677>
c001ec2d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ec30:	be 01 00 00 00       	mov    esi,0x1
c001ec35:	eb db                	jmp    c001ec12 <Vm::faultHandler(regs*)+0x9a>
c001ec37:	80 fa 6d             	cmp    dl,0x6d
c001ec3a:	0f 84 ec 02 00 00    	je     c001ef2c <Vm::faultHandler(regs*)+0x3b4>
c001ec40:	77 17                	ja     c001ec59 <Vm::faultHandler(regs*)+0xe1>
c001ec42:	80 fa 67             	cmp    dl,0x67
c001ec45:	0f 84 48 01 00 00    	je     c001ed93 <Vm::faultHandler(regs*)+0x21b>
c001ec4b:	80 fa 6c             	cmp    dl,0x6c
c001ec4e:	0f 84 69 02 00 00    	je     c001eebd <Vm::faultHandler(regs*)+0x345>
c001ec54:	e9 96 05 00 00       	jmp    c001f1ef <Vm::faultHandler(regs*)+0x677>
c001ec59:	80 fa 6f             	cmp    dl,0x6f
c001ec5c:	0f 84 f4 03 00 00    	je     c001f056 <Vm::faultHandler(regs*)+0x4de>
c001ec62:	0f 82 59 03 00 00    	jb     c001efc1 <Vm::faultHandler(regs*)+0x449>
c001ec68:	80 fa 9c             	cmp    dl,0x9c
c001ec6b:	0f 84 2f 01 00 00    	je     c001eda0 <Vm::faultHandler(regs*)+0x228>
c001ec71:	e9 79 05 00 00       	jmp    c001f1ef <Vm::faultHandler(regs*)+0x677>
c001ec76:	80 fa ec             	cmp    dl,0xec
c001ec79:	0f 84 14 05 00 00    	je     c001f193 <Vm::faultHandler(regs*)+0x61b>
c001ec7f:	77 7b                	ja     c001ecfc <Vm::faultHandler(regs*)+0x184>
c001ec81:	80 fa e4             	cmp    dl,0xe4
c001ec84:	0f 84 93 04 00 00    	je     c001f11d <Vm::faultHandler(regs*)+0x5a5>
c001ec8a:	77 53                	ja     c001ecdf <Vm::faultHandler(regs*)+0x167>
c001ec8c:	80 fa cd             	cmp    dl,0xcd
c001ec8f:	0f 84 d9 01 00 00    	je     c001ee6e <Vm::faultHandler(regs*)+0x2f6>
c001ec95:	80 fa cf             	cmp    dl,0xcf
c001ec98:	0f 85 51 05 00 00    	jne    c001f1ef <Vm::faultHandler(regs*)+0x677>
c001ec9e:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001eca1:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001eca4:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001eca8:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001ecab:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001ecaf:	81 ca 00 02 02 00    	or     edx,0x20200
c001ecb5:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001ecb8:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001ecbc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ecc2:	66 c1 e8 09          	shr    ax,0x9
c001ecc6:	83 e0 01             	and    eax,0x1
c001ecc9:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001eccc:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001eccf:	83 c0 06             	add    eax,0x6
c001ecd2:	25 ff ff 00 00       	and    eax,0xffff
c001ecd7:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001ecda:	e9 0c 05 00 00       	jmp    c001f1eb <Vm::faultHandler(regs*)+0x673>
c001ecdf:	80 fa e6             	cmp    dl,0xe6
c001ece2:	0f 84 7f 04 00 00    	je     c001f167 <Vm::faultHandler(regs*)+0x5ef>
c001ece8:	0f 82 4b 04 00 00    	jb     c001f139 <Vm::faultHandler(regs*)+0x5c1>
c001ecee:	80 fa e7             	cmp    dl,0xe7
c001ecf1:	0f 84 87 04 00 00    	je     c001f17e <Vm::faultHandler(regs*)+0x606>
c001ecf7:	e9 f3 04 00 00       	jmp    c001f1ef <Vm::faultHandler(regs*)+0x677>
c001ecfc:	80 fa ef             	cmp    dl,0xef
c001ecff:	0f 84 d1 04 00 00    	je     c001f1d6 <Vm::faultHandler(regs*)+0x65e>
c001ed05:	77 28                	ja     c001ed2f <Vm::faultHandler(regs*)+0x1b7>
c001ed07:	80 fa ed             	cmp    dl,0xed
c001ed0a:	0f 84 9f 04 00 00    	je     c001f1af <Vm::faultHandler(regs*)+0x637>
c001ed10:	80 fa ee             	cmp    dl,0xee
c001ed13:	0f 85 d6 04 00 00    	jne    c001f1ef <Vm::faultHandler(regs*)+0x677>
c001ed19:	50                   	push   eax
c001ed1a:	50                   	push   eax
c001ed1b:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001ed1f:	50                   	push   eax
c001ed20:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ed24:	50                   	push   eax
c001ed25:	e8 5c fa ff ff       	call   c001e786 <Vm::outbv(unsigned short, unsigned char)>
c001ed2a:	e9 9f 04 00 00       	jmp    c001f1ce <Vm::faultHandler(regs*)+0x656>
c001ed2f:	80 fa fa             	cmp    dl,0xfa
c001ed32:	0f 84 69 01 00 00    	je     c001eea1 <Vm::faultHandler(regs*)+0x329>
c001ed38:	80 fa fb             	cmp    dl,0xfb
c001ed3b:	0f 84 6e 01 00 00    	je     c001eeaf <Vm::faultHandler(regs*)+0x337>
c001ed41:	80 fa f3             	cmp    dl,0xf3
c001ed44:	0f 85 a5 04 00 00    	jne    c001f1ef <Vm::faultHandler(regs*)+0x677>
c001ed4a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ed4d:	e9 c0 fe ff ff       	jmp    c001ec12 <Vm::faultHandler(regs*)+0x9a>
c001ed52:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ed55:	be 02 00 00 00       	mov    esi,0x2
c001ed5a:	e9 b3 fe ff ff       	jmp    c001ec12 <Vm::faultHandler(regs*)+0x9a>
c001ed5f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ed62:	be 03 00 00 00       	mov    esi,0x3
c001ed67:	e9 a6 fe ff ff       	jmp    c001ec12 <Vm::faultHandler(regs*)+0x9a>
c001ed6c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ed6f:	be 04 00 00 00       	mov    esi,0x4
c001ed74:	e9 99 fe ff ff       	jmp    c001ec12 <Vm::faultHandler(regs*)+0x9a>
c001ed79:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ed7c:	be 05 00 00 00       	mov    esi,0x5
c001ed81:	e9 8c fe ff ff       	jmp    c001ec12 <Vm::faultHandler(regs*)+0x9a>
c001ed86:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ed89:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001ed8e:	e9 7f fe ff ff       	jmp    c001ec12 <Vm::faultHandler(regs*)+0x9a>
c001ed93:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ed96:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001ed9b:	e9 72 fe ff ff       	jmp    c001ec12 <Vm::faultHandler(regs*)+0x9a>
c001eda0:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001eda3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001eda7:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001edac:	74 30                	je     c001edde <Vm::faultHandler(regs*)+0x266>
c001edae:	83 e9 04             	sub    ecx,0x4
c001edb1:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001edb7:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001edbd:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001edc0:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001edc3:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001edc9:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001edcd:	0f 84 15 04 00 00    	je     c001f1e8 <Vm::faultHandler(regs*)+0x670>
c001edd3:	80 ce 02             	or     dh,0x2
c001edd6:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001edd9:	e9 0a 04 00 00       	jmp    c001f1e8 <Vm::faultHandler(regs*)+0x670>
c001edde:	83 e9 02             	sub    ecx,0x2
c001ede1:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001ede7:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001edea:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001edee:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001edf4:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001edf8:	74 05                	je     c001edff <Vm::faultHandler(regs*)+0x287>
c001edfa:	80 ce 02             	or     dh,0x2
c001edfd:	eb 03                	jmp    c001ee02 <Vm::faultHandler(regs*)+0x28a>
c001edff:	80 e6 fd             	and    dh,0xfd
c001ee02:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001ee06:	e9 dd 03 00 00       	jmp    c001f1e8 <Vm::faultHandler(regs*)+0x670>
c001ee0b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ee10:	74 2a                	je     c001ee3c <Vm::faultHandler(regs*)+0x2c4>
c001ee12:	8b 10                	mov    edx,DWORD PTR [eax]
c001ee14:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001ee1a:	81 ca 00 02 02 00    	or     edx,0x20200
c001ee20:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001ee23:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee25:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ee2b:	c1 e8 09             	shr    eax,0x9
c001ee2e:	83 e0 01             	and    eax,0x1
c001ee31:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ee34:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001ee37:	83 c0 04             	add    eax,0x4
c001ee3a:	eb 25                	jmp    c001ee61 <Vm::faultHandler(regs*)+0x2e9>
c001ee3c:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001ee3f:	81 ca 00 02 02 00    	or     edx,0x20200
c001ee45:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001ee48:	66 8b 00             	mov    ax,WORD PTR [eax]
c001ee4b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ee51:	66 c1 e8 09          	shr    ax,0x9
c001ee55:	83 e0 01             	and    eax,0x1
c001ee58:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ee5b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001ee5e:	83 c0 02             	add    eax,0x2
c001ee61:	25 ff ff 00 00       	and    eax,0xffff
c001ee66:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001ee69:	e9 7a 03 00 00       	jmp    c001f1e8 <Vm::faultHandler(regs*)+0x670>
c001ee6e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ee72:	3c ee                	cmp    al,0xee
c001ee74:	75 10                	jne    c001ee86 <Vm::faultHandler(regs*)+0x30e>
c001ee76:	83 ec 0c             	sub    esp,0xc
c001ee79:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001ee7c:	e8 a2 f9 ff ff       	call   c001e823 <Vm::mainloop3(unsigned long)>
c001ee81:	e9 4b 03 00 00       	jmp    c001f1d1 <Vm::faultHandler(regs*)+0x659>
c001ee86:	83 ec 0c             	sub    esp,0xc
c001ee89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ee8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee91:	51                   	push   ecx
c001ee92:	50                   	push   eax
c001ee93:	53                   	push   ebx
c001ee94:	e8 e1 fb ff ff       	call   c001ea7a <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001ee99:	83 c4 20             	add    esp,0x20
c001ee9c:	e9 4a 03 00 00       	jmp    c001f1eb <Vm::faultHandler(regs*)+0x673>
c001eea1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eea6:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001eeaa:	e9 39 03 00 00       	jmp    c001f1e8 <Vm::faultHandler(regs*)+0x670>
c001eeaf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eeb4:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001eeb8:	e9 2b 03 00 00       	jmp    c001f1e8 <Vm::faultHandler(regs*)+0x670>
c001eebd:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001eec0:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001eec5:	74 2b                	je     c001eef2 <Vm::faultHandler(regs*)+0x37a>
c001eec7:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001eece:	76 22                	jbe    c001eef2 <Vm::faultHandler(regs*)+0x37a>
c001eed0:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001eed4:	50                   	push   eax
c001eed5:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001eed9:	50                   	push   eax
c001eeda:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001eede:	50                   	push   eax
c001eedf:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001eee3:	50                   	push   eax
c001eee4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001eee8:	50                   	push   eax
c001eee9:	6a 6c                	push   0x6c
c001eeeb:	6a 6c                	push   0x6c
c001eeed:	e9 b9 01 00 00       	jmp    c001f0ab <Vm::faultHandler(regs*)+0x533>
c001eef2:	83 ec 0c             	sub    esp,0xc
c001eef5:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001eef9:	0f b7 f6             	movzx  esi,si
c001eefc:	50                   	push   eax
c001eefd:	e8 71 f8 ff ff       	call   c001e773 <Vm::inbv(unsigned short)>
c001ef02:	83 c4 0c             	add    esp,0xc
c001ef05:	0f b6 c0             	movzx  eax,al
c001ef08:	50                   	push   eax
c001ef09:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001ef0d:	50                   	push   eax
c001ef0e:	56                   	push   esi
c001ef0f:	e8 24 fc ff ff       	call   c001eb38 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001ef14:	83 c4 10             	add    esp,0x10
c001ef17:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ef1a:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ef1e:	74 03                	je     c001ef23 <Vm::faultHandler(regs*)+0x3ab>
c001ef20:	48                   	dec    eax
c001ef21:	eb 01                	jmp    c001ef24 <Vm::faultHandler(regs*)+0x3ac>
c001ef23:	40                   	inc    eax
c001ef24:	0f b7 c0             	movzx  eax,ax
c001ef27:	e9 8d 00 00 00       	jmp    c001efb9 <Vm::faultHandler(regs*)+0x441>
c001ef2c:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001ef2f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ef32:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ef37:	74 29                	je     c001ef62 <Vm::faultHandler(regs*)+0x3ea>
c001ef39:	3d ff ff 00 00       	cmp    eax,0xffff
c001ef3e:	76 22                	jbe    c001ef62 <Vm::faultHandler(regs*)+0x3ea>
c001ef40:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ef44:	50                   	push   eax
c001ef45:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ef49:	50                   	push   eax
c001ef4a:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ef4e:	50                   	push   eax
c001ef4f:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ef53:	50                   	push   eax
c001ef54:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ef58:	50                   	push   eax
c001ef59:	6a 6d                	push   0x6d
c001ef5b:	6a 6d                	push   0x6d
c001ef5d:	e9 49 01 00 00       	jmp    c001f0ab <Vm::faultHandler(regs*)+0x533>
c001ef62:	0f b7 c8             	movzx  ecx,ax
c001ef65:	0f b7 f6             	movzx  esi,si
c001ef68:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001ef6b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ef70:	74 20                	je     c001ef92 <Vm::faultHandler(regs*)+0x41a>
c001ef72:	ed                   	in     eax,dx
c001ef73:	55                   	push   ebp
c001ef74:	50                   	push   eax
c001ef75:	51                   	push   ecx
c001ef76:	56                   	push   esi
c001ef77:	e8 e7 fb ff ff       	call   c001eb63 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001ef7c:	83 c4 10             	add    esp,0x10
c001ef7f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ef82:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ef86:	74 05                	je     c001ef8d <Vm::faultHandler(regs*)+0x415>
c001ef88:	83 e8 04             	sub    eax,0x4
c001ef8b:	eb 27                	jmp    c001efb4 <Vm::faultHandler(regs*)+0x43c>
c001ef8d:	83 c0 04             	add    eax,0x4
c001ef90:	eb 22                	jmp    c001efb4 <Vm::faultHandler(regs*)+0x43c>
c001ef92:	66 ed                	in     ax,dx
c001ef94:	0f b7 c0             	movzx  eax,ax
c001ef97:	57                   	push   edi
c001ef98:	50                   	push   eax
c001ef99:	51                   	push   ecx
c001ef9a:	56                   	push   esi
c001ef9b:	e8 ad fb ff ff       	call   c001eb4d <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001efa0:	83 c4 10             	add    esp,0x10
c001efa3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001efa6:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001efaa:	74 05                	je     c001efb1 <Vm::faultHandler(regs*)+0x439>
c001efac:	83 e8 02             	sub    eax,0x2
c001efaf:	eb 03                	jmp    c001efb4 <Vm::faultHandler(regs*)+0x43c>
c001efb1:	83 c0 02             	add    eax,0x2
c001efb4:	25 ff ff 00 00       	and    eax,0xffff
c001efb9:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001efbc:	e9 27 02 00 00       	jmp    c001f1e8 <Vm::faultHandler(regs*)+0x670>
c001efc1:	8d 46 ff             	lea    eax,[esi-0x1]
c001efc4:	3c 05                	cmp    al,0x5
c001efc6:	77 24                	ja     c001efec <Vm::faultHandler(regs*)+0x474>
c001efc8:	0f b6 c0             	movzx  eax,al
c001efcb:	ff 24 85 c4 c5 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd3a3c]
c001efd2:	0f b7 fd             	movzx  edi,bp
c001efd5:	eb 15                	jmp    c001efec <Vm::faultHandler(regs*)+0x474>
c001efd7:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001efdb:	eb 0f                	jmp    c001efec <Vm::faultHandler(regs*)+0x474>
c001efdd:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001efe1:	eb 09                	jmp    c001efec <Vm::faultHandler(regs*)+0x474>
c001efe3:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001efe7:	eb 03                	jmp    c001efec <Vm::faultHandler(regs*)+0x474>
c001efe9:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001efec:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001efef:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001eff4:	74 29                	je     c001f01f <Vm::faultHandler(regs*)+0x4a7>
c001eff6:	3d ff ff 00 00       	cmp    eax,0xffff
c001effb:	76 22                	jbe    c001f01f <Vm::faultHandler(regs*)+0x4a7>
c001effd:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f001:	50                   	push   eax
c001f002:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f006:	50                   	push   eax
c001f007:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f00b:	50                   	push   eax
c001f00c:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f010:	50                   	push   eax
c001f011:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f015:	50                   	push   eax
c001f016:	6a 6e                	push   0x6e
c001f018:	6a 6e                	push   0x6e
c001f01a:	e9 8c 00 00 00       	jmp    c001f0ab <Vm::faultHandler(regs*)+0x533>
c001f01f:	0f b7 c0             	movzx  eax,ax
c001f022:	52                   	push   edx
c001f023:	52                   	push   edx
c001f024:	50                   	push   eax
c001f025:	57                   	push   edi
c001f026:	e8 d9 fa ff ff       	call   c001eb04 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f02b:	59                   	pop    ecx
c001f02c:	0f b6 c0             	movzx  eax,al
c001f02f:	5e                   	pop    esi
c001f030:	50                   	push   eax
c001f031:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f035:	50                   	push   eax
c001f036:	e8 4b f7 ff ff       	call   c001e786 <Vm::outbv(unsigned short, unsigned char)>
c001f03b:	83 c4 10             	add    esp,0x10
c001f03e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001f041:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f045:	74 03                	je     c001f04a <Vm::faultHandler(regs*)+0x4d2>
c001f047:	48                   	dec    eax
c001f048:	eb 01                	jmp    c001f04b <Vm::faultHandler(regs*)+0x4d3>
c001f04a:	40                   	inc    eax
c001f04b:	0f b7 c0             	movzx  eax,ax
c001f04e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001f051:	e9 92 01 00 00       	jmp    c001f1e8 <Vm::faultHandler(regs*)+0x670>
c001f056:	8d 46 ff             	lea    eax,[esi-0x1]
c001f059:	3c 05                	cmp    al,0x5
c001f05b:	77 1f                	ja     c001f07c <Vm::faultHandler(regs*)+0x504>
c001f05d:	0f b6 c0             	movzx  eax,al
c001f060:	ff 24 85 dc c5 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd3a24]
c001f067:	89 ef                	mov    edi,ebp
c001f069:	eb 11                	jmp    c001f07c <Vm::faultHandler(regs*)+0x504>
c001f06b:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001f06e:	eb 0c                	jmp    c001f07c <Vm::faultHandler(regs*)+0x504>
c001f070:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001f073:	eb 07                	jmp    c001f07c <Vm::faultHandler(regs*)+0x504>
c001f075:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001f078:	eb 02                	jmp    c001f07c <Vm::faultHandler(regs*)+0x504>
c001f07a:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001f07c:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001f07f:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f084:	74 37                	je     c001f0bd <Vm::faultHandler(regs*)+0x545>
c001f086:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001f08c:	76 2f                	jbe    c001f0bd <Vm::faultHandler(regs*)+0x545>
c001f08e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f092:	50                   	push   eax
c001f093:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f097:	50                   	push   eax
c001f098:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f09c:	50                   	push   eax
c001f09d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f0a1:	50                   	push   eax
c001f0a2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f0a6:	50                   	push   eax
c001f0a7:	6a 6f                	push   0x6f
c001f0a9:	6a 6f                	push   0x6f
c001f0ab:	68 6a c5 02 c0       	push   0xc002c56a
c001f0b0:	e8 bc 37 ff ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c001f0b5:	83 c4 20             	add    esp,0x20
c001f0b8:	e9 86 01 00 00       	jmp    c001f243 <Vm::faultHandler(regs*)+0x6cb>
c001f0bd:	0f b7 d7             	movzx  edx,di
c001f0c0:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001f0c3:	0f b7 c6             	movzx  eax,si
c001f0c6:	81 e1 00 04 00 00    	and    ecx,0x400
c001f0cc:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001f0cf:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f0d4:	74 1d                	je     c001f0f3 <Vm::faultHandler(regs*)+0x57b>
c001f0d6:	55                   	push   ebp
c001f0d7:	55                   	push   ebp
c001f0d8:	50                   	push   eax
c001f0d9:	52                   	push   edx
c001f0da:	e8 48 fa ff ff       	call   c001eb27 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f0df:	83 c4 10             	add    esp,0x10
c001f0e2:	89 fa                	mov    edx,edi
c001f0e4:	ef                   	out    dx,eax
c001f0e5:	85 c9                	test   ecx,ecx
c001f0e7:	74 05                	je     c001f0ee <Vm::faultHandler(regs*)+0x576>
c001f0e9:	83 ee 04             	sub    esi,0x4
c001f0ec:	eb 21                	jmp    c001f10f <Vm::faultHandler(regs*)+0x597>
c001f0ee:	83 c6 04             	add    esi,0x4
c001f0f1:	eb 1c                	jmp    c001f10f <Vm::faultHandler(regs*)+0x597>
c001f0f3:	55                   	push   ebp
c001f0f4:	55                   	push   ebp
c001f0f5:	50                   	push   eax
c001f0f6:	52                   	push   edx
c001f0f7:	e8 19 fa ff ff       	call   c001eb15 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f0fc:	83 c4 10             	add    esp,0x10
c001f0ff:	89 fa                	mov    edx,edi
c001f101:	66 ef                	out    dx,ax
c001f103:	85 c9                	test   ecx,ecx
c001f105:	74 05                	je     c001f10c <Vm::faultHandler(regs*)+0x594>
c001f107:	83 ee 02             	sub    esi,0x2
c001f10a:	eb 03                	jmp    c001f10f <Vm::faultHandler(regs*)+0x597>
c001f10c:	83 c6 02             	add    esi,0x2
c001f10f:	81 e6 ff ff 00 00    	and    esi,0xffff
c001f115:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001f118:	e9 cb 00 00 00       	jmp    c001f1e8 <Vm::faultHandler(regs*)+0x670>
c001f11d:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001f124:	83 ec 0c             	sub    esp,0xc
c001f127:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f12b:	50                   	push   eax
c001f12c:	e8 42 f6 ff ff       	call   c001e773 <Vm::inbv(unsigned short)>
c001f131:	0f b6 c0             	movzx  eax,al
c001f134:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001f137:	eb 3f                	jmp    c001f178 <Vm::faultHandler(regs*)+0x600>
c001f139:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f13e:	74 07                	je     c001f147 <Vm::faultHandler(regs*)+0x5cf>
c001f140:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f144:	ed                   	in     eax,dx
c001f145:	eb 14                	jmp    c001f15b <Vm::faultHandler(regs*)+0x5e3>
c001f147:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001f14a:	66 31 f6             	xor    si,si
c001f14d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001f150:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f154:	66 ed                	in     ax,dx
c001f156:	0f b7 c0             	movzx  eax,ax
c001f159:	09 f0                	or     eax,esi
c001f15b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001f15e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f162:	e9 84 00 00 00       	jmp    c001f1eb <Vm::faultHandler(regs*)+0x673>
c001f167:	52                   	push   edx
c001f168:	52                   	push   edx
c001f169:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001f16d:	50                   	push   eax
c001f16e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f172:	50                   	push   eax
c001f173:	e8 0e f6 ff ff       	call   c001e786 <Vm::outbv(unsigned short, unsigned char)>
c001f178:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f17c:	eb 53                	jmp    c001f1d1 <Vm::faultHandler(regs*)+0x659>
c001f17e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001f181:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f185:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f18a:	74 03                	je     c001f18f <Vm::faultHandler(regs*)+0x617>
c001f18c:	ef                   	out    dx,eax
c001f18d:	eb cf                	jmp    c001f15e <Vm::faultHandler(regs*)+0x5e6>
c001f18f:	66 ef                	out    dx,ax
c001f191:	eb cb                	jmp    c001f15e <Vm::faultHandler(regs*)+0x5e6>
c001f193:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001f19a:	83 ec 0c             	sub    esp,0xc
c001f19d:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f1a1:	50                   	push   eax
c001f1a2:	e8 cc f5 ff ff       	call   c001e773 <Vm::inbv(unsigned short)>
c001f1a7:	0f b6 c0             	movzx  eax,al
c001f1aa:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001f1ad:	eb 1f                	jmp    c001f1ce <Vm::faultHandler(regs*)+0x656>
c001f1af:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001f1b2:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f1b7:	74 03                	je     c001f1bc <Vm::faultHandler(regs*)+0x644>
c001f1b9:	ed                   	in     eax,dx
c001f1ba:	eb 0d                	jmp    c001f1c9 <Vm::faultHandler(regs*)+0x651>
c001f1bc:	66 ed                	in     ax,dx
c001f1be:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001f1c1:	0f b7 c0             	movzx  eax,ax
c001f1c4:	66 31 d2             	xor    dx,dx
c001f1c7:	09 d0                	or     eax,edx
c001f1c9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001f1cc:	eb 1a                	jmp    c001f1e8 <Vm::faultHandler(regs*)+0x670>
c001f1ce:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f1d1:	83 c4 10             	add    esp,0x10
c001f1d4:	eb 15                	jmp    c001f1eb <Vm::faultHandler(regs*)+0x673>
c001f1d6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001f1d9:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001f1dc:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f1e1:	74 03                	je     c001f1e6 <Vm::faultHandler(regs*)+0x66e>
c001f1e3:	ef                   	out    dx,eax
c001f1e4:	eb 02                	jmp    c001f1e8 <Vm::faultHandler(regs*)+0x670>
c001f1e6:	66 ef                	out    dx,ax
c001f1e8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f1eb:	b0 01                	mov    al,0x1
c001f1ed:	eb 56                	jmp    c001f245 <Vm::faultHandler(regs*)+0x6cd>
c001f1ef:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f1f3:	50                   	push   eax
c001f1f4:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f1f8:	50                   	push   eax
c001f1f9:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f1fd:	50                   	push   eax
c001f1fe:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f202:	50                   	push   eax
c001f203:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f207:	50                   	push   eax
c001f208:	52                   	push   edx
c001f209:	52                   	push   edx
c001f20a:	68 97 c5 02 c0       	push   0xc002c597
c001f20f:	e8 5d 36 ff ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c001f214:	83 c4 20             	add    esp,0x20
c001f217:	83 ec 0c             	sub    esp,0xc
c001f21a:	6a 60                	push   0x60
c001f21c:	e8 52 f5 ff ff       	call   c001e773 <Vm::inbv(unsigned short)>
c001f221:	83 c4 10             	add    esp,0x10
c001f224:	3c 1c                	cmp    al,0x1c
c001f226:	74 04                	je     c001f22c <Vm::faultHandler(regs*)+0x6b4>
c001f228:	3c 5a                	cmp    al,0x5a
c001f22a:	75 eb                	jne    c001f217 <Vm::faultHandler(regs*)+0x69f>
c001f22c:	3c 5a                	cmp    al,0x5a
c001f22e:	74 04                	je     c001f234 <Vm::faultHandler(regs*)+0x6bc>
c001f230:	3c 1c                	cmp    al,0x1c
c001f232:	75 0f                	jne    c001f243 <Vm::faultHandler(regs*)+0x6cb>
c001f234:	83 ec 0c             	sub    esp,0xc
c001f237:	6a 60                	push   0x60
c001f239:	e8 35 f5 ff ff       	call   c001e773 <Vm::inbv(unsigned short)>
c001f23e:	83 c4 10             	add    esp,0x10
c001f241:	eb e9                	jmp    c001f22c <Vm::faultHandler(regs*)+0x6b4>
c001f243:	31 c0                	xor    eax,eax
c001f245:	83 c4 1c             	add    esp,0x1c
c001f248:	5b                   	pop    ebx
c001f249:	5e                   	pop    esi
c001f24a:	5f                   	pop    edi
c001f24b:	5d                   	pop    ebp
c001f24c:	c3                   	ret    

c001f24d <Vm::fpuInternalTo32(unsigned long long)>:
c001f24d:	57                   	push   edi
c001f24e:	56                   	push   esi
c001f24f:	53                   	push   ebx
c001f250:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f254:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f258:	89 d6                	mov    esi,edx
c001f25a:	89 d7                	mov    edi,edx
c001f25c:	89 c1                	mov    ecx,eax
c001f25e:	c1 ef 14             	shr    edi,0x14
c001f261:	89 d3                	mov    ebx,edx
c001f263:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f269:	31 d2                	xor    edx,edx
c001f26b:	89 f8                	mov    eax,edi
c001f26d:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f273:	bf ff 00 00 00       	mov    edi,0xff
c001f278:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f27d:	83 d2 ff             	adc    edx,0xffffffff
c001f280:	39 c7                	cmp    edi,eax
c001f282:	bf 00 00 00 00       	mov    edi,0x0
c001f287:	19 d7                	sbb    edi,edx
c001f289:	72 15                	jb     c001f2a0 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f28b:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f28f:	c1 e0 17             	shl    eax,0x17
c001f292:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f298:	09 f1                	or     ecx,esi
c001f29a:	09 c1                	or     ecx,eax
c001f29c:	89 cf                	mov    edi,ecx
c001f29e:	eb 02                	jmp    c001f2a2 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f2a0:	31 ff                	xor    edi,edi
c001f2a2:	89 f8                	mov    eax,edi
c001f2a4:	5b                   	pop    ebx
c001f2a5:	5e                   	pop    esi
c001f2a6:	5f                   	pop    edi
c001f2a7:	c3                   	ret    

c001f2a8 <Vm::fpuInternalTo64(unsigned long long)>:
c001f2a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f2ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f2b0:	c3                   	ret    

c001f2b1 <Vm::fpu32ToInternal(unsigned int)>:
c001f2b1:	57                   	push   edi
c001f2b2:	31 ff                	xor    edi,edi
c001f2b4:	56                   	push   esi
c001f2b5:	53                   	push   ebx
c001f2b6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f2ba:	89 cb                	mov    ebx,ecx
c001f2bc:	89 ce                	mov    esi,ecx
c001f2be:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f2c4:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f2ca:	c1 e9 17             	shr    ecx,0x17
c001f2cd:	89 f0                	mov    eax,esi
c001f2cf:	0f b6 d1             	movzx  edx,cl
c001f2d2:	81 c2 80 03 00 00    	add    edx,0x380
c001f2d8:	89 d1                	mov    ecx,edx
c001f2da:	89 fa                	mov    edx,edi
c001f2dc:	c1 e1 14             	shl    ecx,0x14
c001f2df:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f2e3:	c1 e0 1d             	shl    eax,0x1d
c001f2e6:	89 d7                	mov    edi,edx
c001f2e8:	89 c6                	mov    esi,eax
c001f2ea:	89 ca                	mov    edx,ecx
c001f2ec:	89 f0                	mov    eax,esi
c001f2ee:	09 fa                	or     edx,edi
c001f2f0:	09 da                	or     edx,ebx
c001f2f2:	5b                   	pop    ebx
c001f2f3:	5e                   	pop    esi
c001f2f4:	5f                   	pop    edi
c001f2f5:	c3                   	ret    

c001f2f6 <Vm::fpu64ToInternal(unsigned long long)>:
c001f2f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f2fa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f2fe:	c3                   	ret    

c001f2ff <Vm::fpuFloatToLong(unsigned long long)>:
c001f2ff:	57                   	push   edi
c001f300:	31 c0                	xor    eax,eax
c001f302:	56                   	push   esi
c001f303:	31 d2                	xor    edx,edx
c001f305:	53                   	push   ebx
c001f306:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f30a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f30e:	89 d9                	mov    ecx,ebx
c001f310:	c1 e9 14             	shr    ecx,0x14
c001f313:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f319:	89 cf                	mov    edi,ecx
c001f31b:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f321:	78 33                	js     c001f356 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f323:	89 d9                	mov    ecx,ebx
c001f325:	89 f0                	mov    eax,esi
c001f327:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f32d:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f333:	89 ca                	mov    edx,ecx
c001f335:	b9 34 00 00 00       	mov    ecx,0x34
c001f33a:	29 f9                	sub    ecx,edi
c001f33c:	0f ad d0             	shrd   eax,edx,cl
c001f33f:	d3 fa                	sar    edx,cl
c001f341:	f6 c1 20             	test   cl,0x20
c001f344:	74 05                	je     c001f34b <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f346:	89 d0                	mov    eax,edx
c001f348:	c1 fa 1f             	sar    edx,0x1f
c001f34b:	85 db                	test   ebx,ebx
c001f34d:	79 07                	jns    c001f356 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f34f:	f7 d8                	neg    eax
c001f351:	83 d2 00             	adc    edx,0x0
c001f354:	f7 da                	neg    edx
c001f356:	5b                   	pop    ebx
c001f357:	5e                   	pop    esi
c001f358:	5f                   	pop    edi
c001f359:	c3                   	ret    

c001f35a <Vm::fpuULongToFloat(unsigned long long)>:
c001f35a:	57                   	push   edi
c001f35b:	31 c9                	xor    ecx,ecx
c001f35d:	56                   	push   esi
c001f35e:	53                   	push   ebx
c001f35f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f363:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f367:	0f ba e7 14          	bt     edi,0x14
c001f36b:	72 07                	jb     c001f374 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f36d:	01 f6                	add    esi,esi
c001f36f:	11 ff                	adc    edi,edi
c001f371:	41                   	inc    ecx
c001f372:	eb f3                	jmp    c001f367 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f374:	89 fa                	mov    edx,edi
c001f376:	89 f0                	mov    eax,esi
c001f378:	bb 33 04 00 00       	mov    ebx,0x433
c001f37d:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f383:	29 cb                	sub    ebx,ecx
c001f385:	89 d9                	mov    ecx,ebx
c001f387:	5b                   	pop    ebx
c001f388:	c1 e1 14             	shl    ecx,0x14
c001f38b:	5e                   	pop    esi
c001f38c:	09 ca                	or     edx,ecx
c001f38e:	5f                   	pop    edi
c001f38f:	c3                   	ret    

c001f390 <Vm::fpuLongToFloat(long long)>:
c001f390:	56                   	push   esi
c001f391:	31 c0                	xor    eax,eax
c001f393:	53                   	push   ebx
c001f394:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f398:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f39c:	39 c8                	cmp    eax,ecx
c001f39e:	19 d8                	sbb    eax,ebx
c001f3a0:	7d 04                	jge    c001f3a6 <Vm::fpuLongToFloat(long long)+0x16>
c001f3a2:	31 f6                	xor    esi,esi
c001f3a4:	eb 0c                	jmp    c001f3b2 <Vm::fpuLongToFloat(long long)+0x22>
c001f3a6:	f7 d9                	neg    ecx
c001f3a8:	be 01 00 00 00       	mov    esi,0x1
c001f3ad:	83 d3 00             	adc    ebx,0x0
c001f3b0:	f7 db                	neg    ebx
c001f3b2:	31 c0                	xor    eax,eax
c001f3b4:	0f ba e3 14          	bt     ebx,0x14
c001f3b8:	72 07                	jb     c001f3c1 <Vm::fpuLongToFloat(long long)+0x31>
c001f3ba:	01 c9                	add    ecx,ecx
c001f3bc:	11 db                	adc    ebx,ebx
c001f3be:	40                   	inc    eax
c001f3bf:	eb f3                	jmp    c001f3b4 <Vm::fpuLongToFloat(long long)+0x24>
c001f3c1:	ba 33 04 00 00       	mov    edx,0x433
c001f3c6:	29 c2                	sub    edx,eax
c001f3c8:	89 c8                	mov    eax,ecx
c001f3ca:	c1 e2 14             	shl    edx,0x14
c001f3cd:	89 d9                	mov    ecx,ebx
c001f3cf:	89 f3                	mov    ebx,esi
c001f3d1:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f3d7:	09 ca                	or     edx,ecx
c001f3d9:	84 db                	test   bl,bl
c001f3db:	74 06                	je     c001f3e3 <Vm::fpuLongToFloat(long long)+0x53>
c001f3dd:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f3e3:	5b                   	pop    ebx
c001f3e4:	5e                   	pop    esi
c001f3e5:	c3                   	ret    

c001f3e6 <Vm::fpuGet0()>:
c001f3e6:	31 c0                	xor    eax,eax
c001f3e8:	31 d2                	xor    edx,edx
c001f3ea:	c3                   	ret    

c001f3eb <Vm::fpuGet1()>:
c001f3eb:	b8 01 00 00 00       	mov    eax,0x1
c001f3f0:	31 d2                	xor    edx,edx
c001f3f2:	c3                   	ret    

c001f3f3 <Vm::fpuGetPi()>:
c001f3f3:	b8 03 00 00 00       	mov    eax,0x3
c001f3f8:	31 d2                	xor    edx,edx
c001f3fa:	c3                   	ret    

c001f3fb <Vm::fpuGetLog2E()>:
c001f3fb:	83 ec 18             	sub    esp,0x18
c001f3fe:	68 f4 c5 02 c0       	push   0xc002c5f4
c001f403:	e8 35 ad ff ff       	call   c001a13d <Krnl::panic(char const*)>
c001f408:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f40d:	31 d2                	xor    edx,edx
c001f40f:	83 c4 1c             	add    esp,0x1c
c001f412:	c3                   	ret    

c001f413 <Vm::fpuGetLogE2()>:
c001f413:	83 ec 18             	sub    esp,0x18
c001f416:	68 00 c6 02 c0       	push   0xc002c600
c001f41b:	e8 1d ad ff ff       	call   c001a13d <Krnl::panic(char const*)>
c001f420:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f425:	31 d2                	xor    edx,edx
c001f427:	83 c4 1c             	add    esp,0x1c
c001f42a:	c3                   	ret    

c001f42b <Vm::fpuGetLog210()>:
c001f42b:	83 ec 18             	sub    esp,0x18
c001f42e:	68 0c c6 02 c0       	push   0xc002c60c
c001f433:	e8 05 ad ff ff       	call   c001a13d <Krnl::panic(char const*)>
c001f438:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f43d:	31 d2                	xor    edx,edx
c001f43f:	83 c4 1c             	add    esp,0x1c
c001f442:	c3                   	ret    

c001f443 <Vm::fpuGetLog102()>:
c001f443:	83 ec 18             	sub    esp,0x18
c001f446:	68 19 c6 02 c0       	push   0xc002c619
c001f44b:	e8 ed ac ff ff       	call   c001a13d <Krnl::panic(char const*)>
c001f450:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f455:	31 d2                	xor    edx,edx
c001f457:	83 c4 1c             	add    esp,0x1c
c001f45a:	c3                   	ret    

c001f45b <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f45b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f45f:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f463:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f467:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f46b:	0f 92 c0             	setb   al
c001f46e:	c3                   	ret    

c001f46f <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f46f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f473:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f477:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f47b:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f47f:	09 c2                	or     edx,eax
c001f481:	0f 94 c0             	sete   al
c001f484:	c3                   	ret    

c001f485 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f485:	57                   	push   edi
c001f486:	56                   	push   esi
c001f487:	53                   	push   ebx
c001f488:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f48c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f490:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f494:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f498:	57                   	push   edi
c001f499:	56                   	push   esi
c001f49a:	53                   	push   ebx
c001f49b:	51                   	push   ecx
c001f49c:	e8 ce ff ff ff       	call   c001f46f <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f4a1:	83 c4 10             	add    esp,0x10
c001f4a4:	88 c2                	mov    dl,al
c001f4a6:	31 c0                	xor    eax,eax
c001f4a8:	84 d2                	test   dl,dl
c001f4aa:	75 0c                	jne    c001f4b8 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f4ac:	57                   	push   edi
c001f4ad:	56                   	push   esi
c001f4ae:	53                   	push   ebx
c001f4af:	51                   	push   ecx
c001f4b0:	e8 a6 ff ff ff       	call   c001f45b <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f4b5:	83 c4 10             	add    esp,0x10
c001f4b8:	83 e0 01             	and    eax,0x1
c001f4bb:	5b                   	pop    ebx
c001f4bc:	88 c1                	mov    cl,al
c001f4be:	83 e2 01             	and    edx,0x1
c001f4c1:	a0 c1 f7 02 c0       	mov    al,ds:0xc002f7c1
c001f4c6:	c1 e2 06             	shl    edx,0x6
c001f4c9:	83 e0 ba             	and    eax,0xffffffba
c001f4cc:	5e                   	pop    esi
c001f4cd:	09 c8                	or     eax,ecx
c001f4cf:	5f                   	pop    edi
c001f4d0:	09 d0                	or     eax,edx
c001f4d2:	a2 c1 f7 02 c0       	mov    ds:0xc002f7c1,al
c001f4d7:	c3                   	ret    

c001f4d8 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f4d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f4dc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f4e0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f4e4:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f4e8:	c3                   	ret    

c001f4e9 <Vm::fpuAbs(unsigned long long)>:
c001f4e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f4ed:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f4f1:	c3                   	ret    

c001f4f2 <Vm::fpuChs(unsigned long long)>:
c001f4f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f4f6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f4fa:	f7 d8                	neg    eax
c001f4fc:	83 d2 00             	adc    edx,0x0
c001f4ff:	f7 da                	neg    edx
c001f501:	c3                   	ret    

c001f502 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f502:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f506:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f50b:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f50f:	eb c7                	jmp    c001f4d8 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f511 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f511:	53                   	push   ebx
c001f512:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f516:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f51a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f51e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f522:	0f af ca             	imul   ecx,edx
c001f525:	0f af d8             	imul   ebx,eax
c001f528:	f7 e2                	mul    edx
c001f52a:	01 d9                	add    ecx,ebx
c001f52c:	5b                   	pop    ebx
c001f52d:	01 ca                	add    edx,ecx
c001f52f:	c3                   	ret    

c001f530 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f530:	83 ec 0c             	sub    esp,0xc
c001f533:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f537:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f53b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f53f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f543:	e8 2c 76 00 00       	call   c0026b74 <__udivdi3>
c001f548:	83 c4 1c             	add    esp,0x1c
c001f54b:	c3                   	ret    

c001f54c <Vm::fpuSquare(unsigned long long)>:
c001f54c:	50                   	push   eax
c001f54d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f551:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f555:	52                   	push   edx
c001f556:	50                   	push   eax
c001f557:	52                   	push   edx
c001f558:	50                   	push   eax
c001f559:	e8 b3 ff ff ff       	call   c001f511 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f55e:	83 c4 14             	add    esp,0x14
c001f561:	c3                   	ret    

c001f562 <Vm::fpuGetReg(int)>:
c001f562:	83 ec 0c             	sub    esp,0xc
c001f565:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f56a:	76 10                	jbe    c001f57c <Vm::fpuGetReg(int)+0x1a>
c001f56c:	83 ec 0c             	sub    esp,0xc
c001f56f:	68 26 c6 02 c0       	push   0xc002c626
c001f574:	e8 c4 ab ff ff       	call   c001a13d <Krnl::panic(char const*)>
c001f579:	83 c4 10             	add    esp,0x10
c001f57c:	a0 c1 f7 02 c0       	mov    al,ds:0xc002f7c1
c001f581:	b9 08 00 00 00       	mov    ecx,0x8
c001f586:	c0 e8 03             	shr    al,0x3
c001f589:	83 e0 07             	and    eax,0x7
c001f58c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f590:	99                   	cdq    
c001f591:	f7 f9                	idiv   ecx
c001f593:	8b 04 d5 c4 f7 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd083c]
c001f59a:	8b 14 d5 c8 f7 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd0838]
c001f5a1:	83 c4 0c             	add    esp,0xc
c001f5a4:	c3                   	ret    

c001f5a5 <Vm::fpuSetReg(int, unsigned long long)>:
c001f5a5:	57                   	push   edi
c001f5a6:	56                   	push   esi
c001f5a7:	52                   	push   edx
c001f5a8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f5ac:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f5b0:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f5b5:	76 10                	jbe    c001f5c7 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f5b7:	83 ec 0c             	sub    esp,0xc
c001f5ba:	68 39 c6 02 c0       	push   0xc002c639
c001f5bf:	e8 79 ab ff ff       	call   c001a13d <Krnl::panic(char const*)>
c001f5c4:	83 c4 10             	add    esp,0x10
c001f5c7:	a0 c1 f7 02 c0       	mov    al,ds:0xc002f7c1
c001f5cc:	b9 08 00 00 00       	mov    ecx,0x8
c001f5d1:	c0 e8 03             	shr    al,0x3
c001f5d4:	83 e0 07             	and    eax,0x7
c001f5d7:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f5db:	99                   	cdq    
c001f5dc:	f7 f9                	idiv   ecx
c001f5de:	89 34 d5 c4 f7 02 c0 	mov    DWORD PTR [edx*8-0x3ffd083c],esi
c001f5e5:	89 3c d5 c8 f7 02 c0 	mov    DWORD PTR [edx*8-0x3ffd0838],edi
c001f5ec:	58                   	pop    eax
c001f5ed:	5e                   	pop    esi
c001f5ee:	5f                   	pop    edi
c001f5ef:	c3                   	ret    

c001f5f0 <Vm::fpuPush(unsigned long long)>:
c001f5f0:	a0 c1 f7 02 c0       	mov    al,ds:0xc002f7c1
c001f5f5:	c0 e8 03             	shr    al,0x3
c001f5f8:	83 e0 07             	and    eax,0x7
c001f5fb:	83 c0 07             	add    eax,0x7
c001f5fe:	88 c2                	mov    dl,al
c001f600:	83 e0 07             	and    eax,0x7
c001f603:	83 e2 07             	and    edx,0x7
c001f606:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f60d:	8a 15 c1 f7 02 c0    	mov    dl,BYTE PTR ds:0xc002f7c1
c001f613:	83 e2 c7             	and    edx,0xffffffc7
c001f616:	09 ca                	or     edx,ecx
c001f618:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f61c:	88 15 c1 f7 02 c0    	mov    BYTE PTR ds:0xc002f7c1,dl
c001f622:	89 0c c5 c8 f7 02 c0 	mov    DWORD PTR [eax*8-0x3ffd0838],ecx
c001f629:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f62d:	89 14 c5 c4 f7 02 c0 	mov    DWORD PTR [eax*8-0x3ffd083c],edx
c001f634:	a1 04 f8 02 c0       	mov    eax,ds:0xc002f804
c001f639:	83 f8 08             	cmp    eax,0x8
c001f63c:	75 08                	jne    c001f646 <Vm::fpuPush(unsigned long long)+0x56>
c001f63e:	80 0d c0 f7 02 c0 40 	or     BYTE PTR ds:0xc002f7c0,0x40
c001f645:	c3                   	ret    
c001f646:	40                   	inc    eax
c001f647:	a3 04 f8 02 c0       	mov    ds:0xc002f804,eax
c001f64c:	c3                   	ret    

c001f64d <Vm::fpuPop()>:
c001f64d:	8a 0d c1 f7 02 c0    	mov    cl,BYTE PTR ds:0xc002f7c1
c001f653:	53                   	push   ebx
c001f654:	c0 e9 03             	shr    cl,0x3
c001f657:	8a 1d c1 f7 02 c0    	mov    bl,BYTE PTR ds:0xc002f7c1
c001f65d:	83 e1 07             	and    ecx,0x7
c001f660:	83 e3 c7             	and    ebx,0xffffffc7
c001f663:	8b 04 cd c4 f7 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd083c]
c001f66a:	8b 14 cd c8 f7 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd0838]
c001f671:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001f678:	83 e1 38             	and    ecx,0x38
c001f67b:	09 d9                	or     ecx,ebx
c001f67d:	88 0d c1 f7 02 c0    	mov    BYTE PTR ds:0xc002f7c1,cl
c001f683:	8b 0d 04 f8 02 c0    	mov    ecx,DWORD PTR ds:0xc002f804
c001f689:	85 c9                	test   ecx,ecx
c001f68b:	74 09                	je     c001f696 <Vm::fpuPop()+0x49>
c001f68d:	49                   	dec    ecx
c001f68e:	89 0d 04 f8 02 c0    	mov    DWORD PTR ds:0xc002f804,ecx
c001f694:	eb 07                	jmp    c001f69d <Vm::fpuPop()+0x50>
c001f696:	80 0d c0 f7 02 c0 40 	or     BYTE PTR ds:0xc002f7c0,0x40
c001f69d:	5b                   	pop    ebx
c001f69e:	c3                   	ret    

c001f69f <Vm::x87Handler(regs*)>:
c001f69f:	55                   	push   ebp
c001f6a0:	57                   	push   edi
c001f6a1:	56                   	push   esi
c001f6a2:	53                   	push   ebx
c001f6a3:	83 ec 1c             	sub    esp,0x1c
c001f6a6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f6aa:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001f6af:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001f6b2:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001f6ba:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001f6be:	50                   	push   eax
c001f6bf:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001f6c3:	50                   	push   eax
c001f6c4:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f6c8:	50                   	push   eax
c001f6c9:	53                   	push   ebx
c001f6ca:	e8 87 a1 ff ff       	call   c0019856 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001f6cf:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001f6d2:	83 c4 10             	add    esp,0x10
c001f6d5:	89 c6                	mov    esi,eax
c001f6d7:	80 fa d9             	cmp    dl,0xd9
c001f6da:	0f 85 52 01 00 00    	jne    c001f832 <Vm::x87Handler(regs*)+0x193>
c001f6e0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f6e4:	8d 50 20             	lea    edx,[eax+0x20]
c001f6e7:	80 fa 0e             	cmp    dl,0xe
c001f6ea:	0f 87 86 00 00 00    	ja     c001f776 <Vm::x87Handler(regs*)+0xd7>
c001f6f0:	0f b6 d2             	movzx  edx,dl
c001f6f3:	ff 24 95 4c c6 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd39b4]
c001f6fa:	e8 e7 fc ff ff       	call   c001f3e6 <Vm::fpuGet0()>
c001f6ff:	eb 05                	jmp    c001f706 <Vm::x87Handler(regs*)+0x67>
c001f701:	e8 e5 fc ff ff       	call   c001f3eb <Vm::fpuGet1()>
c001f706:	57                   	push   edi
c001f707:	57                   	push   edi
c001f708:	52                   	push   edx
c001f709:	50                   	push   eax
c001f70a:	e8 e1 fe ff ff       	call   c001f5f0 <Vm::fpuPush(unsigned long long)>
c001f70f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f713:	83 c4 10             	add    esp,0x10
c001f716:	b0 01                	mov    al,0x1
c001f718:	e9 e3 09 00 00       	jmp    c0020100 <Vm::x87Handler(regs*)+0xa61>
c001f71d:	83 ec 0c             	sub    esp,0xc
c001f720:	6a 00                	push   0x0
c001f722:	e8 3b fe ff ff       	call   c001f562 <Vm::fpuGetReg(int)>
c001f727:	59                   	pop    ecx
c001f728:	5e                   	pop    esi
c001f729:	52                   	push   edx
c001f72a:	50                   	push   eax
c001f72b:	e8 c2 fd ff ff       	call   c001f4f2 <Vm::fpuChs(unsigned long long)>
c001f730:	eb 13                	jmp    c001f745 <Vm::x87Handler(regs*)+0xa6>
c001f732:	83 ec 0c             	sub    esp,0xc
c001f735:	6a 00                	push   0x0
c001f737:	e8 26 fe ff ff       	call   c001f562 <Vm::fpuGetReg(int)>
c001f73c:	5f                   	pop    edi
c001f73d:	5d                   	pop    ebp
c001f73e:	52                   	push   edx
c001f73f:	50                   	push   eax
c001f740:	e8 a4 fd ff ff       	call   c001f4e9 <Vm::fpuAbs(unsigned long long)>
c001f745:	83 c4 0c             	add    esp,0xc
c001f748:	52                   	push   edx
c001f749:	50                   	push   eax
c001f74a:	6a 00                	push   0x0
c001f74c:	e8 54 fe ff ff       	call   c001f5a5 <Vm::fpuSetReg(int, unsigned long long)>
c001f751:	eb bc                	jmp    c001f70f <Vm::x87Handler(regs*)+0x70>
c001f753:	e8 d3 fc ff ff       	call   c001f42b <Vm::fpuGetLog210()>
c001f758:	eb ac                	jmp    c001f706 <Vm::x87Handler(regs*)+0x67>
c001f75a:	e8 9c fc ff ff       	call   c001f3fb <Vm::fpuGetLog2E()>
c001f75f:	eb a5                	jmp    c001f706 <Vm::x87Handler(regs*)+0x67>
c001f761:	e8 8d fc ff ff       	call   c001f3f3 <Vm::fpuGetPi()>
c001f766:	eb 9e                	jmp    c001f706 <Vm::x87Handler(regs*)+0x67>
c001f768:	e8 d6 fc ff ff       	call   c001f443 <Vm::fpuGetLog102()>
c001f76d:	eb 97                	jmp    c001f706 <Vm::x87Handler(regs*)+0x67>
c001f76f:	e8 9f fc ff ff       	call   c001f413 <Vm::fpuGetLogE2()>
c001f774:	eb 90                	jmp    c001f706 <Vm::x87Handler(regs*)+0x67>
c001f776:	8d 50 40             	lea    edx,[eax+0x40]
c001f779:	80 fa 07             	cmp    dl,0x7
c001f77c:	77 15                	ja     c001f793 <Vm::x87Handler(regs*)+0xf4>
c001f77e:	83 ec 0c             	sub    esp,0xc
c001f781:	2d c0 00 00 00       	sub    eax,0xc0
c001f786:	50                   	push   eax
c001f787:	e8 d6 fd ff ff       	call   c001f562 <Vm::fpuGetReg(int)>
c001f78c:	59                   	pop    ecx
c001f78d:	5e                   	pop    esi
c001f78e:	e9 75 ff ff ff       	jmp    c001f708 <Vm::x87Handler(regs*)+0x69>
c001f793:	8d 50 38             	lea    edx,[eax+0x38]
c001f796:	80 fa 07             	cmp    dl,0x7
c001f799:	77 3c                	ja     c001f7d7 <Vm::x87Handler(regs*)+0x138>
c001f79b:	83 ec 0c             	sub    esp,0xc
c001f79e:	2d c8 00 00 00       	sub    eax,0xc8
c001f7a3:	50                   	push   eax
c001f7a4:	e8 b9 fd ff ff       	call   c001f562 <Vm::fpuGetReg(int)>
c001f7a9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f7b0:	89 c6                	mov    esi,eax
c001f7b2:	89 d7                	mov    edi,edx
c001f7b4:	e8 a9 fd ff ff       	call   c001f562 <Vm::fpuGetReg(int)>
c001f7b9:	83 c4 0c             	add    esp,0xc
c001f7bc:	52                   	push   edx
c001f7bd:	50                   	push   eax
c001f7be:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7c2:	2d c8 00 00 00       	sub    eax,0xc8
c001f7c7:	50                   	push   eax
c001f7c8:	e8 d8 fd ff ff       	call   c001f5a5 <Vm::fpuSetReg(int, unsigned long long)>
c001f7cd:	83 c4 0c             	add    esp,0xc
c001f7d0:	57                   	push   edi
c001f7d1:	56                   	push   esi
c001f7d2:	e9 73 ff ff ff       	jmp    c001f74a <Vm::x87Handler(regs*)+0xab>
c001f7d7:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f7db:	84 d2                	test   dl,dl
c001f7dd:	75 0f                	jne    c001f7ee <Vm::x87Handler(regs*)+0x14f>
c001f7df:	83 ec 0c             	sub    esp,0xc
c001f7e2:	ff 36                	push   DWORD PTR [esi]
c001f7e4:	e8 c8 fa ff ff       	call   c001f2b1 <Vm::fpu32ToInternal(unsigned int)>
c001f7e9:	e9 bf 00 00 00       	jmp    c001f8ad <Vm::x87Handler(regs*)+0x20e>
c001f7ee:	80 fa 03             	cmp    dl,0x3
c001f7f1:	75 13                	jne    c001f806 <Vm::x87Handler(regs*)+0x167>
c001f7f3:	e8 55 fe ff ff       	call   c001f64d <Vm::fpuPop()>
c001f7f8:	55                   	push   ebp
c001f7f9:	55                   	push   ebp
c001f7fa:	52                   	push   edx
c001f7fb:	50                   	push   eax
c001f7fc:	e8 4c fa ff ff       	call   c001f24d <Vm::fpuInternalTo32(unsigned long long)>
c001f801:	e9 88 00 00 00       	jmp    c001f88e <Vm::x87Handler(regs*)+0x1ef>
c001f806:	80 fa 05             	cmp    dl,0x5
c001f809:	75 0e                	jne    c001f819 <Vm::x87Handler(regs*)+0x17a>
c001f80b:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f80e:	66 a3 c2 f7 02 c0    	mov    ds:0xc002f7c2,ax
c001f814:	e9 df 00 00 00       	jmp    c001f8f8 <Vm::x87Handler(regs*)+0x259>
c001f819:	31 c0                	xor    eax,eax
c001f81b:	80 fa 07             	cmp    dl,0x7
c001f81e:	0f 85 dc 08 00 00    	jne    c0020100 <Vm::x87Handler(regs*)+0xa61>
c001f824:	66 a1 c2 f7 02 c0    	mov    ax,ds:0xc002f7c2
c001f82a:	66 89 06             	mov    WORD PTR [esi],ax
c001f82d:	e9 c6 00 00 00       	jmp    c001f8f8 <Vm::x87Handler(regs*)+0x259>
c001f832:	80 fa d8             	cmp    dl,0xd8
c001f835:	0f 84 c9 00 00 00    	je     c001f904 <Vm::x87Handler(regs*)+0x265>
c001f83b:	80 fa dc             	cmp    dl,0xdc
c001f83e:	0f 84 0d 02 00 00    	je     c001fa51 <Vm::x87Handler(regs*)+0x3b2>
c001f844:	80 fa de             	cmp    dl,0xde
c001f847:	0f 84 cd 02 00 00    	je     c001fb1a <Vm::x87Handler(regs*)+0x47b>
c001f84d:	80 fa dd             	cmp    dl,0xdd
c001f850:	0f 84 5f 04 00 00    	je     c001fcb5 <Vm::x87Handler(regs*)+0x616>
c001f856:	80 fa da             	cmp    dl,0xda
c001f859:	0f 84 24 05 00 00    	je     c001fd83 <Vm::x87Handler(regs*)+0x6e4>
c001f85f:	80 fa df             	cmp    dl,0xdf
c001f862:	0f 84 68 05 00 00    	je     c001fdd0 <Vm::x87Handler(regs*)+0x731>
c001f868:	31 c0                	xor    eax,eax
c001f86a:	80 fa db             	cmp    dl,0xdb
c001f86d:	0f 85 8d 08 00 00    	jne    c0020100 <Vm::x87Handler(regs*)+0xa61>
c001f873:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f877:	80 fa 03             	cmp    dl,0x3
c001f87a:	0f 85 70 06 00 00    	jne    c001fef0 <Vm::x87Handler(regs*)+0x851>
c001f880:	e8 c8 fd ff ff       	call   c001f64d <Vm::fpuPop()>
c001f885:	55                   	push   ebp
c001f886:	55                   	push   ebp
c001f887:	52                   	push   edx
c001f888:	50                   	push   eax
c001f889:	e8 71 fa ff ff       	call   c001f2ff <Vm::fpuFloatToLong(unsigned long long)>
c001f88e:	83 c4 10             	add    esp,0x10
c001f891:	89 06                	mov    DWORD PTR [esi],eax
c001f893:	eb 63                	jmp    c001f8f8 <Vm::x87Handler(regs*)+0x259>
c001f895:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f899:	84 d2                	test   dl,dl
c001f89b:	0f 85 e6 05 00 00    	jne    c001fe87 <Vm::x87Handler(regs*)+0x7e8>
c001f8a1:	57                   	push   edi
c001f8a2:	57                   	push   edi
c001f8a3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f8a6:	ff 36                	push   DWORD PTR [esi]
c001f8a8:	e8 49 fa ff ff       	call   c001f2f6 <Vm::fpu64ToInternal(unsigned long long)>
c001f8ad:	5e                   	pop    esi
c001f8ae:	5f                   	pop    edi
c001f8af:	52                   	push   edx
c001f8b0:	50                   	push   eax
c001f8b1:	e8 3a fd ff ff       	call   c001f5f0 <Vm::fpuPush(unsigned long long)>
c001f8b6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f8ba:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f8bd:	e9 51 fe ff ff       	jmp    c001f713 <Vm::x87Handler(regs*)+0x74>
c001f8c2:	80 fa 03             	cmp    dl,0x3
c001f8c5:	0f 85 d7 06 00 00    	jne    c001ffa2 <Vm::x87Handler(regs*)+0x903>
c001f8cb:	57                   	push   edi
c001f8cc:	57                   	push   edi
c001f8cd:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f8d0:	ff 36                	push   DWORD PTR [esi]
c001f8d2:	e8 1f fa ff ff       	call   c001f2f6 <Vm::fpu64ToInternal(unsigned long long)>
c001f8d7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f8de:	89 c6                	mov    esi,eax
c001f8e0:	89 d7                	mov    edi,edx
c001f8e2:	e8 7b fc ff ff       	call   c001f562 <Vm::fpuGetReg(int)>
c001f8e7:	57                   	push   edi
c001f8e8:	56                   	push   esi
c001f8e9:	52                   	push   edx
c001f8ea:	50                   	push   eax
c001f8eb:	e8 95 fb ff ff       	call   c001f485 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f8f0:	83 c4 20             	add    esp,0x20
c001f8f3:	e8 55 fd ff ff       	call   c001f64d <Vm::fpuPop()>
c001f8f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f8fc:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f8ff:	e9 12 fe ff ff       	jmp    c001f716 <Vm::x87Handler(regs*)+0x77>
c001f904:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f908:	8d 50 40             	lea    edx,[eax+0x40]
c001f90b:	80 fa 07             	cmp    dl,0x7
c001f90e:	77 29                	ja     c001f939 <Vm::x87Handler(regs*)+0x29a>
c001f910:	83 ec 0c             	sub    esp,0xc
c001f913:	2d c0 00 00 00       	sub    eax,0xc0
c001f918:	50                   	push   eax
c001f919:	e8 44 fc ff ff       	call   c001f562 <Vm::fpuGetReg(int)>
c001f91e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f925:	89 c6                	mov    esi,eax
c001f927:	89 d7                	mov    edi,edx
c001f929:	e8 34 fc ff ff       	call   c001f562 <Vm::fpuGetReg(int)>
c001f92e:	57                   	push   edi
c001f92f:	56                   	push   esi
c001f930:	52                   	push   edx
c001f931:	50                   	push   eax
c001f932:	e8 a1 fb ff ff       	call   c001f4d8 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f937:	eb 2f                	jmp    c001f968 <Vm::x87Handler(regs*)+0x2c9>
c001f939:	8d 50 38             	lea    edx,[eax+0x38]
c001f93c:	80 fa 07             	cmp    dl,0x7
c001f93f:	77 2f                	ja     c001f970 <Vm::x87Handler(regs*)+0x2d1>
c001f941:	83 ec 0c             	sub    esp,0xc
c001f944:	2d c8 00 00 00       	sub    eax,0xc8
c001f949:	50                   	push   eax
c001f94a:	e8 13 fc ff ff       	call   c001f562 <Vm::fpuGetReg(int)>
c001f94f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f956:	89 c6                	mov    esi,eax
c001f958:	89 d7                	mov    edi,edx
c001f95a:	e8 03 fc ff ff       	call   c001f562 <Vm::fpuGetReg(int)>
c001f95f:	57                   	push   edi
c001f960:	56                   	push   esi
c001f961:	52                   	push   edx
c001f962:	50                   	push   eax
c001f963:	e8 a9 fb ff ff       	call   c001f511 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f968:	83 c4 1c             	add    esp,0x1c
c001f96b:	e9 d8 fd ff ff       	jmp    c001f748 <Vm::x87Handler(regs*)+0xa9>
c001f970:	8d 50 30             	lea    edx,[eax+0x30]
c001f973:	80 fa 07             	cmp    dl,0x7
c001f976:	77 0d                	ja     c001f985 <Vm::x87Handler(regs*)+0x2e6>
c001f978:	83 ec 0c             	sub    esp,0xc
c001f97b:	2d d0 00 00 00       	sub    eax,0xd0
c001f980:	e9 99 03 00 00       	jmp    c001fd1e <Vm::x87Handler(regs*)+0x67f>
c001f985:	8d 50 28             	lea    edx,[eax+0x28]
c001f988:	80 fa 07             	cmp    dl,0x7
c001f98b:	77 0d                	ja     c001f99a <Vm::x87Handler(regs*)+0x2fb>
c001f98d:	83 ec 0c             	sub    esp,0xc
c001f990:	2d d8 00 00 00       	sub    eax,0xd8
c001f995:	e9 c0 03 00 00       	jmp    c001fd5a <Vm::x87Handler(regs*)+0x6bb>
c001f99a:	8d 50 20             	lea    edx,[eax+0x20]
c001f99d:	80 fa 07             	cmp    dl,0x7
c001f9a0:	77 1b                	ja     c001f9bd <Vm::x87Handler(regs*)+0x31e>
c001f9a2:	83 ec 0c             	sub    esp,0xc
c001f9a5:	2d e0 00 00 00       	sub    eax,0xe0
c001f9aa:	50                   	push   eax
c001f9ab:	e8 b2 fb ff ff       	call   c001f562 <Vm::fpuGetReg(int)>
c001f9b0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f9b7:	89 c6                	mov    esi,eax
c001f9b9:	89 d7                	mov    edi,edx
c001f9bb:	eb 22                	jmp    c001f9df <Vm::x87Handler(regs*)+0x340>
c001f9bd:	8d 50 18             	lea    edx,[eax+0x18]
c001f9c0:	80 fa 07             	cmp    dl,0x7
c001f9c3:	77 2d                	ja     c001f9f2 <Vm::x87Handler(regs*)+0x353>
c001f9c5:	83 ec 0c             	sub    esp,0xc
c001f9c8:	6a 00                	push   0x0
c001f9ca:	e8 93 fb ff ff       	call   c001f562 <Vm::fpuGetReg(int)>
c001f9cf:	89 c6                	mov    esi,eax
c001f9d1:	89 d7                	mov    edi,edx
c001f9d3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f9d7:	2d e8 00 00 00       	sub    eax,0xe8
c001f9dc:	89 04 24             	mov    DWORD PTR [esp],eax
c001f9df:	e8 7e fb ff ff       	call   c001f562 <Vm::fpuGetReg(int)>
c001f9e4:	57                   	push   edi
c001f9e5:	56                   	push   esi
c001f9e6:	52                   	push   edx
c001f9e7:	50                   	push   eax
c001f9e8:	e8 15 fb ff ff       	call   c001f502 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f9ed:	e9 76 ff ff ff       	jmp    c001f968 <Vm::x87Handler(regs*)+0x2c9>
c001f9f2:	8d 50 10             	lea    edx,[eax+0x10]
c001f9f5:	80 fa 07             	cmp    dl,0x7
c001f9f8:	77 1b                	ja     c001fa15 <Vm::x87Handler(regs*)+0x376>
c001f9fa:	83 ec 0c             	sub    esp,0xc
c001f9fd:	2d f0 00 00 00       	sub    eax,0xf0
c001fa02:	50                   	push   eax
c001fa03:	e8 5a fb ff ff       	call   c001f562 <Vm::fpuGetReg(int)>
c001fa08:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa0f:	89 c6                	mov    esi,eax
c001fa11:	89 d7                	mov    edi,edx
c001fa13:	eb 22                	jmp    c001fa37 <Vm::x87Handler(regs*)+0x398>
c001fa15:	3c f7                	cmp    al,0xf7
c001fa17:	0f 86 d1 03 00 00    	jbe    c001fdee <Vm::x87Handler(regs*)+0x74f>
c001fa1d:	83 ec 0c             	sub    esp,0xc
c001fa20:	6a 00                	push   0x0
c001fa22:	e8 3b fb ff ff       	call   c001f562 <Vm::fpuGetReg(int)>
c001fa27:	89 c6                	mov    esi,eax
c001fa29:	89 d7                	mov    edi,edx
c001fa2b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa2f:	2d f8 00 00 00       	sub    eax,0xf8
c001fa34:	89 04 24             	mov    DWORD PTR [esp],eax
c001fa37:	e8 26 fb ff ff       	call   c001f562 <Vm::fpuGetReg(int)>
c001fa3c:	57                   	push   edi
c001fa3d:	56                   	push   esi
c001fa3e:	52                   	push   edx
c001fa3f:	50                   	push   eax
c001fa40:	e8 eb fa ff ff       	call   c001f530 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fa45:	83 c4 1c             	add    esp,0x1c
c001fa48:	52                   	push   edx
c001fa49:	50                   	push   eax
c001fa4a:	6a 00                	push   0x0
c001fa4c:	e9 51 02 00 00       	jmp    c001fca2 <Vm::x87Handler(regs*)+0x603>
c001fa51:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa55:	8d 50 40             	lea    edx,[eax+0x40]
c001fa58:	80 fa 07             	cmp    dl,0x7
c001fa5b:	77 37                	ja     c001fa94 <Vm::x87Handler(regs*)+0x3f5>
c001fa5d:	83 ec 0c             	sub    esp,0xc
c001fa60:	2d c0 00 00 00       	sub    eax,0xc0
c001fa65:	50                   	push   eax
c001fa66:	e8 f7 fa ff ff       	call   c001f562 <Vm::fpuGetReg(int)>
c001fa6b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa72:	89 c6                	mov    esi,eax
c001fa74:	89 d7                	mov    edi,edx
c001fa76:	e8 e7 fa ff ff       	call   c001f562 <Vm::fpuGetReg(int)>
c001fa7b:	57                   	push   edi
c001fa7c:	56                   	push   esi
c001fa7d:	52                   	push   edx
c001fa7e:	50                   	push   eax
c001fa7f:	e8 54 fa ff ff       	call   c001f4d8 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fa84:	83 c4 1c             	add    esp,0x1c
c001fa87:	52                   	push   edx
c001fa88:	50                   	push   eax
c001fa89:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa8d:	2d c0 00 00 00       	sub    eax,0xc0
c001fa92:	eb 3d                	jmp    c001fad1 <Vm::x87Handler(regs*)+0x432>
c001fa94:	8d 50 38             	lea    edx,[eax+0x38]
c001fa97:	80 fa 07             	cmp    dl,0x7
c001fa9a:	77 3b                	ja     c001fad7 <Vm::x87Handler(regs*)+0x438>
c001fa9c:	83 ec 0c             	sub    esp,0xc
c001fa9f:	2d c8 00 00 00       	sub    eax,0xc8
c001faa4:	50                   	push   eax
c001faa5:	e8 b8 fa ff ff       	call   c001f562 <Vm::fpuGetReg(int)>
c001faaa:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fab1:	89 c6                	mov    esi,eax
c001fab3:	89 d7                	mov    edi,edx
c001fab5:	e8 a8 fa ff ff       	call   c001f562 <Vm::fpuGetReg(int)>
c001faba:	57                   	push   edi
c001fabb:	56                   	push   esi
c001fabc:	52                   	push   edx
c001fabd:	50                   	push   eax
c001fabe:	e8 4e fa ff ff       	call   c001f511 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fac3:	83 c4 1c             	add    esp,0x1c
c001fac6:	52                   	push   edx
c001fac7:	50                   	push   eax
c001fac8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001facc:	2d c8 00 00 00       	sub    eax,0xc8
c001fad1:	50                   	push   eax
c001fad2:	e9 75 fc ff ff       	jmp    c001f74c <Vm::x87Handler(regs*)+0xad>
c001fad7:	83 c0 18             	add    eax,0x18
c001fada:	3c 07                	cmp    al,0x7
c001fadc:	0f 87 3b 04 00 00    	ja     c001ff1d <Vm::x87Handler(regs*)+0x87e>
c001fae2:	83 ec 0c             	sub    esp,0xc
c001fae5:	6a 00                	push   0x0
c001fae7:	e8 76 fa ff ff       	call   c001f562 <Vm::fpuGetReg(int)>
c001faec:	89 c6                	mov    esi,eax
c001faee:	89 d7                	mov    edi,edx
c001faf0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001faf4:	2d e8 00 00 00       	sub    eax,0xe8
c001faf9:	89 04 24             	mov    DWORD PTR [esp],eax
c001fafc:	e8 61 fa ff ff       	call   c001f562 <Vm::fpuGetReg(int)>
c001fb01:	57                   	push   edi
c001fb02:	56                   	push   esi
c001fb03:	52                   	push   edx
c001fb04:	50                   	push   eax
c001fb05:	e8 f8 f9 ff ff       	call   c001f502 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fb0a:	83 c4 1c             	add    esp,0x1c
c001fb0d:	52                   	push   edx
c001fb0e:	50                   	push   eax
c001fb0f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb13:	2d e8 00 00 00       	sub    eax,0xe8
c001fb18:	eb b7                	jmp    c001fad1 <Vm::x87Handler(regs*)+0x432>
c001fb1a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb1e:	8d 50 40             	lea    edx,[eax+0x40]
c001fb21:	80 fa 07             	cmp    dl,0x7
c001fb24:	77 3a                	ja     c001fb60 <Vm::x87Handler(regs*)+0x4c1>
c001fb26:	83 ec 0c             	sub    esp,0xc
c001fb29:	2d c0 00 00 00       	sub    eax,0xc0
c001fb2e:	50                   	push   eax
c001fb2f:	e8 2e fa ff ff       	call   c001f562 <Vm::fpuGetReg(int)>
c001fb34:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb3b:	89 c6                	mov    esi,eax
c001fb3d:	89 d7                	mov    edi,edx
c001fb3f:	e8 1e fa ff ff       	call   c001f562 <Vm::fpuGetReg(int)>
c001fb44:	57                   	push   edi
c001fb45:	56                   	push   esi
c001fb46:	52                   	push   edx
c001fb47:	50                   	push   eax
c001fb48:	e8 8b f9 ff ff       	call   c001f4d8 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fb4d:	83 c4 1c             	add    esp,0x1c
c001fb50:	52                   	push   edx
c001fb51:	50                   	push   eax
c001fb52:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb56:	2d c0 00 00 00       	sub    eax,0xc0
c001fb5b:	e9 9e 01 00 00       	jmp    c001fcfe <Vm::x87Handler(regs*)+0x65f>
c001fb60:	8d 50 20             	lea    edx,[eax+0x20]
c001fb63:	80 fa 07             	cmp    dl,0x7
c001fb66:	77 3a                	ja     c001fba2 <Vm::x87Handler(regs*)+0x503>
c001fb68:	83 ec 0c             	sub    esp,0xc
c001fb6b:	2d e0 00 00 00       	sub    eax,0xe0
c001fb70:	50                   	push   eax
c001fb71:	e8 ec f9 ff ff       	call   c001f562 <Vm::fpuGetReg(int)>
c001fb76:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb7d:	89 c6                	mov    esi,eax
c001fb7f:	89 d7                	mov    edi,edx
c001fb81:	e8 dc f9 ff ff       	call   c001f562 <Vm::fpuGetReg(int)>
c001fb86:	57                   	push   edi
c001fb87:	56                   	push   esi
c001fb88:	52                   	push   edx
c001fb89:	50                   	push   eax
c001fb8a:	e8 73 f9 ff ff       	call   c001f502 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fb8f:	83 c4 1c             	add    esp,0x1c
c001fb92:	52                   	push   edx
c001fb93:	50                   	push   eax
c001fb94:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb98:	2d e0 00 00 00       	sub    eax,0xe0
c001fb9d:	e9 5c 01 00 00       	jmp    c001fcfe <Vm::x87Handler(regs*)+0x65f>
c001fba2:	8d 50 18             	lea    edx,[eax+0x18]
c001fba5:	80 fa 07             	cmp    dl,0x7
c001fba8:	77 3b                	ja     c001fbe5 <Vm::x87Handler(regs*)+0x546>
c001fbaa:	83 ec 0c             	sub    esp,0xc
c001fbad:	6a 00                	push   0x0
c001fbaf:	e8 ae f9 ff ff       	call   c001f562 <Vm::fpuGetReg(int)>
c001fbb4:	89 c6                	mov    esi,eax
c001fbb6:	89 d7                	mov    edi,edx
c001fbb8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fbbc:	2d e8 00 00 00       	sub    eax,0xe8
c001fbc1:	89 04 24             	mov    DWORD PTR [esp],eax
c001fbc4:	e8 99 f9 ff ff       	call   c001f562 <Vm::fpuGetReg(int)>
c001fbc9:	57                   	push   edi
c001fbca:	56                   	push   esi
c001fbcb:	52                   	push   edx
c001fbcc:	50                   	push   eax
c001fbcd:	e8 30 f9 ff ff       	call   c001f502 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fbd2:	83 c4 1c             	add    esp,0x1c
c001fbd5:	52                   	push   edx
c001fbd6:	50                   	push   eax
c001fbd7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fbdb:	2d e8 00 00 00       	sub    eax,0xe8
c001fbe0:	e9 19 01 00 00       	jmp    c001fcfe <Vm::x87Handler(regs*)+0x65f>
c001fbe5:	8d 50 38             	lea    edx,[eax+0x38]
c001fbe8:	80 fa 07             	cmp    dl,0x7
c001fbeb:	77 37                	ja     c001fc24 <Vm::x87Handler(regs*)+0x585>
c001fbed:	83 ec 0c             	sub    esp,0xc
c001fbf0:	2d c8 00 00 00       	sub    eax,0xc8
c001fbf5:	50                   	push   eax
c001fbf6:	e8 67 f9 ff ff       	call   c001f562 <Vm::fpuGetReg(int)>
c001fbfb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc02:	89 c6                	mov    esi,eax
c001fc04:	89 d7                	mov    edi,edx
c001fc06:	e8 57 f9 ff ff       	call   c001f562 <Vm::fpuGetReg(int)>
c001fc0b:	57                   	push   edi
c001fc0c:	56                   	push   esi
c001fc0d:	52                   	push   edx
c001fc0e:	50                   	push   eax
c001fc0f:	e8 fd f8 ff ff       	call   c001f511 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fc14:	83 c4 1c             	add    esp,0x1c
c001fc17:	52                   	push   edx
c001fc18:	50                   	push   eax
c001fc19:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc1d:	2d c8 00 00 00       	sub    eax,0xc8
c001fc22:	eb 7d                	jmp    c001fca1 <Vm::x87Handler(regs*)+0x602>
c001fc24:	3c f7                	cmp    al,0xf7
c001fc26:	76 38                	jbe    c001fc60 <Vm::x87Handler(regs*)+0x5c1>
c001fc28:	83 ec 0c             	sub    esp,0xc
c001fc2b:	6a 00                	push   0x0
c001fc2d:	e8 30 f9 ff ff       	call   c001f562 <Vm::fpuGetReg(int)>
c001fc32:	89 c6                	mov    esi,eax
c001fc34:	89 d7                	mov    edi,edx
c001fc36:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc3a:	2d f8 00 00 00       	sub    eax,0xf8
c001fc3f:	89 04 24             	mov    DWORD PTR [esp],eax
c001fc42:	e8 1b f9 ff ff       	call   c001f562 <Vm::fpuGetReg(int)>
c001fc47:	57                   	push   edi
c001fc48:	56                   	push   esi
c001fc49:	52                   	push   edx
c001fc4a:	50                   	push   eax
c001fc4b:	e8 e0 f8 ff ff       	call   c001f530 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fc50:	83 c4 1c             	add    esp,0x1c
c001fc53:	52                   	push   edx
c001fc54:	50                   	push   eax
c001fc55:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc59:	2d f8 00 00 00       	sub    eax,0xf8
c001fc5e:	eb 41                	jmp    c001fca1 <Vm::x87Handler(regs*)+0x602>
c001fc60:	8d 50 10             	lea    edx,[eax+0x10]
c001fc63:	80 fa 07             	cmp    dl,0x7
c001fc66:	0f 87 5a 01 00 00    	ja     c001fdc6 <Vm::x87Handler(regs*)+0x727>
c001fc6c:	83 ec 0c             	sub    esp,0xc
c001fc6f:	2d f0 00 00 00       	sub    eax,0xf0
c001fc74:	50                   	push   eax
c001fc75:	e8 e8 f8 ff ff       	call   c001f562 <Vm::fpuGetReg(int)>
c001fc7a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc81:	89 c6                	mov    esi,eax
c001fc83:	89 d7                	mov    edi,edx
c001fc85:	e8 d8 f8 ff ff       	call   c001f562 <Vm::fpuGetReg(int)>
c001fc8a:	57                   	push   edi
c001fc8b:	56                   	push   esi
c001fc8c:	52                   	push   edx
c001fc8d:	50                   	push   eax
c001fc8e:	e8 9d f8 ff ff       	call   c001f530 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fc93:	83 c4 1c             	add    esp,0x1c
c001fc96:	52                   	push   edx
c001fc97:	50                   	push   eax
c001fc98:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc9c:	2d f0 00 00 00       	sub    eax,0xf0
c001fca1:	50                   	push   eax
c001fca2:	e8 fe f8 ff ff       	call   c001f5a5 <Vm::fpuSetReg(int, unsigned long long)>
c001fca7:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fcab:	e8 9d f9 ff ff       	call   c001f64d <Vm::fpuPop()>
c001fcb0:	e9 5e fa ff ff       	jmp    c001f713 <Vm::x87Handler(regs*)+0x74>
c001fcb5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fcb9:	8d 50 30             	lea    edx,[eax+0x30]
c001fcbc:	80 fa 07             	cmp    dl,0x7
c001fcbf:	77 1d                	ja     c001fcde <Vm::x87Handler(regs*)+0x63f>
c001fcc1:	83 ec 0c             	sub    esp,0xc
c001fcc4:	6a 00                	push   0x0
c001fcc6:	e8 97 f8 ff ff       	call   c001f562 <Vm::fpuGetReg(int)>
c001fccb:	83 c4 0c             	add    esp,0xc
c001fcce:	52                   	push   edx
c001fccf:	50                   	push   eax
c001fcd0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fcd4:	2d d0 00 00 00       	sub    eax,0xd0
c001fcd9:	e9 f3 fd ff ff       	jmp    c001fad1 <Vm::x87Handler(regs*)+0x432>
c001fcde:	8d 50 28             	lea    edx,[eax+0x28]
c001fce1:	80 fa 07             	cmp    dl,0x7
c001fce4:	77 28                	ja     c001fd0e <Vm::x87Handler(regs*)+0x66f>
c001fce6:	83 ec 0c             	sub    esp,0xc
c001fce9:	6a 00                	push   0x0
c001fceb:	e8 72 f8 ff ff       	call   c001f562 <Vm::fpuGetReg(int)>
c001fcf0:	83 c4 0c             	add    esp,0xc
c001fcf3:	52                   	push   edx
c001fcf4:	50                   	push   eax
c001fcf5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fcf9:	2d d8 00 00 00       	sub    eax,0xd8
c001fcfe:	50                   	push   eax
c001fcff:	e8 a1 f8 ff ff       	call   c001f5a5 <Vm::fpuSetReg(int, unsigned long long)>
c001fd04:	e8 44 f9 ff ff       	call   c001f64d <Vm::fpuPop()>
c001fd09:	e9 01 fa ff ff       	jmp    c001f70f <Vm::x87Handler(regs*)+0x70>
c001fd0e:	8d 50 20             	lea    edx,[eax+0x20]
c001fd11:	80 fa 07             	cmp    dl,0x7
c001fd14:	77 30                	ja     c001fd46 <Vm::x87Handler(regs*)+0x6a7>
c001fd16:	83 ec 0c             	sub    esp,0xc
c001fd19:	2d e0 00 00 00       	sub    eax,0xe0
c001fd1e:	50                   	push   eax
c001fd1f:	e8 3e f8 ff ff       	call   c001f562 <Vm::fpuGetReg(int)>
c001fd24:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd2b:	89 c6                	mov    esi,eax
c001fd2d:	89 d7                	mov    edi,edx
c001fd2f:	e8 2e f8 ff ff       	call   c001f562 <Vm::fpuGetReg(int)>
c001fd34:	57                   	push   edi
c001fd35:	56                   	push   esi
c001fd36:	52                   	push   edx
c001fd37:	50                   	push   eax
c001fd38:	e8 48 f7 ff ff       	call   c001f485 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fd3d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fd41:	e9 54 02 00 00       	jmp    c001ff9a <Vm::x87Handler(regs*)+0x8fb>
c001fd46:	8d 50 18             	lea    edx,[eax+0x18]
c001fd49:	80 fa 07             	cmp    dl,0x7
c001fd4c:	0f 87 43 fb ff ff    	ja     c001f895 <Vm::x87Handler(regs*)+0x1f6>
c001fd52:	83 ec 0c             	sub    esp,0xc
c001fd55:	2d e8 00 00 00       	sub    eax,0xe8
c001fd5a:	50                   	push   eax
c001fd5b:	e8 02 f8 ff ff       	call   c001f562 <Vm::fpuGetReg(int)>
c001fd60:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd67:	89 c6                	mov    esi,eax
c001fd69:	89 d7                	mov    edi,edx
c001fd6b:	e8 f2 f7 ff ff       	call   c001f562 <Vm::fpuGetReg(int)>
c001fd70:	57                   	push   edi
c001fd71:	56                   	push   esi
c001fd72:	52                   	push   edx
c001fd73:	50                   	push   eax
c001fd74:	e8 0c f7 ff ff       	call   c001f485 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fd79:	83 c4 20             	add    esp,0x20
c001fd7c:	e8 cc f8 ff ff       	call   c001f64d <Vm::fpuPop()>
c001fd81:	eb 62                	jmp    c001fde5 <Vm::x87Handler(regs*)+0x746>
c001fd83:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001fd87:	0f 85 0f 01 00 00    	jne    c001fe9c <Vm::x87Handler(regs*)+0x7fd>
c001fd8d:	83 ec 0c             	sub    esp,0xc
c001fd90:	6a 01                	push   0x1
c001fd92:	e8 cb f7 ff ff       	call   c001f562 <Vm::fpuGetReg(int)>
c001fd97:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd9e:	89 c6                	mov    esi,eax
c001fda0:	89 d7                	mov    edi,edx
c001fda2:	e8 bb f7 ff ff       	call   c001f562 <Vm::fpuGetReg(int)>
c001fda7:	57                   	push   edi
c001fda8:	56                   	push   esi
c001fda9:	52                   	push   edx
c001fdaa:	50                   	push   eax
c001fdab:	e8 d5 f6 ff ff       	call   c001f485 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fdb0:	83 c4 20             	add    esp,0x20
c001fdb3:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fdb7:	e8 91 f8 ff ff       	call   c001f64d <Vm::fpuPop()>
c001fdbc:	e8 8c f8 ff ff       	call   c001f64d <Vm::fpuPop()>
c001fdc1:	e9 50 f9 ff ff       	jmp    c001f716 <Vm::x87Handler(regs*)+0x77>
c001fdc6:	3c d9                	cmp    al,0xd9
c001fdc8:	0f 85 b5 02 00 00    	jne    c0020083 <Vm::x87Handler(regs*)+0x9e4>
c001fdce:	eb bd                	jmp    c001fd8d <Vm::x87Handler(regs*)+0x6ee>
c001fdd0:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001fdd4:	0f 85 ea 02 00 00    	jne    c00200c4 <Vm::x87Handler(regs*)+0xa25>
c001fdda:	0f b7 05 c0 f7 02 c0 	movzx  eax,WORD PTR ds:0xc002f7c0
c001fde1:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001fde5:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fde9:	e9 28 f9 ff ff       	jmp    c001f716 <Vm::x87Handler(regs*)+0x77>
c001fdee:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fdf2:	84 d2                	test   dl,dl
c001fdf4:	75 0f                	jne    c001fe05 <Vm::x87Handler(regs*)+0x766>
c001fdf6:	83 ec 0c             	sub    esp,0xc
c001fdf9:	ff 36                	push   DWORD PTR [esi]
c001fdfb:	e8 b1 f4 ff ff       	call   c001f2b1 <Vm::fpu32ToInternal(unsigned int)>
c001fe00:	e9 2c 01 00 00       	jmp    c001ff31 <Vm::x87Handler(regs*)+0x892>
c001fe05:	80 fa 01             	cmp    dl,0x1
c001fe08:	75 0f                	jne    c001fe19 <Vm::x87Handler(regs*)+0x77a>
c001fe0a:	83 ec 0c             	sub    esp,0xc
c001fe0d:	ff 36                	push   DWORD PTR [esi]
c001fe0f:	e8 9d f4 ff ff       	call   c001f2b1 <Vm::fpu32ToInternal(unsigned int)>
c001fe14:	e9 81 02 00 00       	jmp    c002009a <Vm::x87Handler(regs*)+0x9fb>
c001fe19:	80 fa 04             	cmp    dl,0x4
c001fe1c:	75 0f                	jne    c001fe2d <Vm::x87Handler(regs*)+0x78e>
c001fe1e:	83 ec 0c             	sub    esp,0xc
c001fe21:	ff 36                	push   DWORD PTR [esi]
c001fe23:	e8 89 f4 ff ff       	call   c001f2b1 <Vm::fpu32ToInternal(unsigned int)>
c001fe28:	e9 86 01 00 00       	jmp    c001ffb3 <Vm::x87Handler(regs*)+0x914>
c001fe2d:	80 fa 05             	cmp    dl,0x5
c001fe30:	75 1b                	jne    c001fe4d <Vm::x87Handler(regs*)+0x7ae>
c001fe32:	83 ec 0c             	sub    esp,0xc
c001fe35:	6a 00                	push   0x0
c001fe37:	e8 26 f7 ff ff       	call   c001f562 <Vm::fpuGetReg(int)>
c001fe3c:	89 c7                	mov    edi,eax
c001fe3e:	89 d5                	mov    ebp,edx
c001fe40:	58                   	pop    eax
c001fe41:	ff 36                	push   DWORD PTR [esi]
c001fe43:	e8 69 f4 ff ff       	call   c001f2b1 <Vm::fpu32ToInternal(unsigned int)>
c001fe48:	e9 a3 01 00 00       	jmp    c001fff0 <Vm::x87Handler(regs*)+0x951>
c001fe4d:	80 fa 06             	cmp    dl,0x6
c001fe50:	75 0f                	jne    c001fe61 <Vm::x87Handler(regs*)+0x7c2>
c001fe52:	83 ec 0c             	sub    esp,0xc
c001fe55:	ff 36                	push   DWORD PTR [esi]
c001fe57:	e8 55 f4 ff ff       	call   c001f2b1 <Vm::fpu32ToInternal(unsigned int)>
c001fe5c:	e9 ae 01 00 00       	jmp    c002000f <Vm::x87Handler(regs*)+0x970>
c001fe61:	31 c0                	xor    eax,eax
c001fe63:	80 fa 07             	cmp    dl,0x7
c001fe66:	0f 85 94 02 00 00    	jne    c0020100 <Vm::x87Handler(regs*)+0xa61>
c001fe6c:	83 ec 0c             	sub    esp,0xc
c001fe6f:	6a 00                	push   0x0
c001fe71:	e8 ec f6 ff ff       	call   c001f562 <Vm::fpuGetReg(int)>
c001fe76:	89 c7                	mov    edi,eax
c001fe78:	89 d5                	mov    ebp,edx
c001fe7a:	58                   	pop    eax
c001fe7b:	ff 36                	push   DWORD PTR [esi]
c001fe7d:	e8 2f f4 ff ff       	call   c001f2b1 <Vm::fpu32ToInternal(unsigned int)>
c001fe82:	e9 cb 01 00 00       	jmp    c0020052 <Vm::x87Handler(regs*)+0x9b3>
c001fe87:	80 fa 03             	cmp    dl,0x3
c001fe8a:	0f 85 d3 01 00 00    	jne    c0020063 <Vm::x87Handler(regs*)+0x9c4>
c001fe90:	e8 b8 f7 ff ff       	call   c001f64d <Vm::fpuPop()>
c001fe95:	51                   	push   ecx
c001fe96:	51                   	push   ecx
c001fe97:	e9 de 01 00 00       	jmp    c002007a <Vm::x87Handler(regs*)+0x9db>
c001fe9c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fea0:	80 fa 01             	cmp    dl,0x1
c001fea3:	75 09                	jne    c001feae <Vm::x87Handler(regs*)+0x80f>
c001fea5:	57                   	push   edi
c001fea6:	57                   	push   edi
c001fea7:	8b 06                	mov    eax,DWORD PTR [esi]
c001fea9:	e9 e3 01 00 00       	jmp    c0020091 <Vm::x87Handler(regs*)+0x9f2>
c001feae:	80 fa 04             	cmp    dl,0x4
c001feb1:	75 12                	jne    c001fec5 <Vm::x87Handler(regs*)+0x826>
c001feb3:	31 d2                	xor    edx,edx
c001feb5:	51                   	push   ecx
c001feb6:	51                   	push   ecx
c001feb7:	8b 06                	mov    eax,DWORD PTR [esi]
c001feb9:	52                   	push   edx
c001feba:	50                   	push   eax
c001febb:	e8 d0 f4 ff ff       	call   c001f390 <Vm::fpuLongToFloat(long long)>
c001fec0:	e9 ee 00 00 00       	jmp    c001ffb3 <Vm::x87Handler(regs*)+0x914>
c001fec5:	31 c0                	xor    eax,eax
c001fec7:	80 fa 07             	cmp    dl,0x7
c001feca:	0f 85 30 02 00 00    	jne    c0020100 <Vm::x87Handler(regs*)+0xa61>
c001fed0:	83 ec 0c             	sub    esp,0xc
c001fed3:	6a 00                	push   0x0
c001fed5:	e8 88 f6 ff ff       	call   c001f562 <Vm::fpuGetReg(int)>
c001feda:	89 c7                	mov    edi,eax
c001fedc:	89 d5                	mov    ebp,edx
c001fede:	58                   	pop    eax
c001fedf:	8b 06                	mov    eax,DWORD PTR [esi]
c001fee1:	5a                   	pop    edx
c001fee2:	31 d2                	xor    edx,edx
c001fee4:	52                   	push   edx
c001fee5:	50                   	push   eax
c001fee6:	e8 a5 f4 ff ff       	call   c001f390 <Vm::fpuLongToFloat(long long)>
c001feeb:	e9 62 01 00 00       	jmp    c0020052 <Vm::x87Handler(regs*)+0x9b3>
c001fef0:	84 d2                	test   dl,dl
c001fef2:	75 0d                	jne    c001ff01 <Vm::x87Handler(regs*)+0x862>
c001fef4:	31 d2                	xor    edx,edx
c001fef6:	55                   	push   ebp
c001fef7:	55                   	push   ebp
c001fef8:	8b 06                	mov    eax,DWORD PTR [esi]
c001fefa:	52                   	push   edx
c001fefb:	50                   	push   eax
c001fefc:	e9 d3 01 00 00       	jmp    c00200d4 <Vm::x87Handler(regs*)+0xa35>
c001ff01:	31 c0                	xor    eax,eax
c001ff03:	80 fa 02             	cmp    dl,0x2
c001ff06:	0f 85 f4 01 00 00    	jne    c0020100 <Vm::x87Handler(regs*)+0xa61>
c001ff0c:	83 ec 0c             	sub    esp,0xc
c001ff0f:	6a 00                	push   0x0
c001ff11:	e8 4c f6 ff ff       	call   c001f562 <Vm::fpuGetReg(int)>
c001ff16:	59                   	pop    ecx
c001ff17:	5f                   	pop    edi
c001ff18:	e9 6a f9 ff ff       	jmp    c001f887 <Vm::x87Handler(regs*)+0x1e8>
c001ff1d:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001ff21:	84 d2                	test   dl,dl
c001ff23:	75 2a                	jne    c001ff4f <Vm::x87Handler(regs*)+0x8b0>
c001ff25:	50                   	push   eax
c001ff26:	50                   	push   eax
c001ff27:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ff2a:	ff 36                	push   DWORD PTR [esi]
c001ff2c:	e8 c5 f3 ff ff       	call   c001f2f6 <Vm::fpu64ToInternal(unsigned long long)>
c001ff31:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff38:	89 c6                	mov    esi,eax
c001ff3a:	89 d7                	mov    edi,edx
c001ff3c:	e8 21 f6 ff ff       	call   c001f562 <Vm::fpuGetReg(int)>
c001ff41:	57                   	push   edi
c001ff42:	56                   	push   esi
c001ff43:	52                   	push   edx
c001ff44:	50                   	push   eax
c001ff45:	e8 8e f5 ff ff       	call   c001f4d8 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ff4a:	e9 64 01 00 00       	jmp    c00200b3 <Vm::x87Handler(regs*)+0xa14>
c001ff4f:	80 fa 01             	cmp    dl,0x1
c001ff52:	75 11                	jne    c001ff65 <Vm::x87Handler(regs*)+0x8c6>
c001ff54:	50                   	push   eax
c001ff55:	50                   	push   eax
c001ff56:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ff59:	ff 36                	push   DWORD PTR [esi]
c001ff5b:	e8 96 f3 ff ff       	call   c001f2f6 <Vm::fpu64ToInternal(unsigned long long)>
c001ff60:	e9 35 01 00 00       	jmp    c002009a <Vm::x87Handler(regs*)+0x9fb>
c001ff65:	80 fa 02             	cmp    dl,0x2
c001ff68:	0f 85 54 f9 ff ff    	jne    c001f8c2 <Vm::x87Handler(regs*)+0x223>
c001ff6e:	55                   	push   ebp
c001ff6f:	55                   	push   ebp
c001ff70:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ff73:	ff 36                	push   DWORD PTR [esi]
c001ff75:	e8 7c f3 ff ff       	call   c001f2f6 <Vm::fpu64ToInternal(unsigned long long)>
c001ff7a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff81:	89 c6                	mov    esi,eax
c001ff83:	89 d7                	mov    edi,edx
c001ff85:	e8 d8 f5 ff ff       	call   c001f562 <Vm::fpuGetReg(int)>
c001ff8a:	57                   	push   edi
c001ff8b:	56                   	push   esi
c001ff8c:	52                   	push   edx
c001ff8d:	50                   	push   eax
c001ff8e:	e8 f2 f4 ff ff       	call   c001f485 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001ff93:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ff97:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001ff9a:	83 c4 20             	add    esp,0x20
c001ff9d:	e9 74 f7 ff ff       	jmp    c001f716 <Vm::x87Handler(regs*)+0x77>
c001ffa2:	80 fa 04             	cmp    dl,0x4
c001ffa5:	75 2a                	jne    c001ffd1 <Vm::x87Handler(regs*)+0x932>
c001ffa7:	51                   	push   ecx
c001ffa8:	51                   	push   ecx
c001ffa9:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ffac:	ff 36                	push   DWORD PTR [esi]
c001ffae:	e8 43 f3 ff ff       	call   c001f2f6 <Vm::fpu64ToInternal(unsigned long long)>
c001ffb3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ffba:	89 c6                	mov    esi,eax
c001ffbc:	89 d7                	mov    edi,edx
c001ffbe:	e8 9f f5 ff ff       	call   c001f562 <Vm::fpuGetReg(int)>
c001ffc3:	57                   	push   edi
c001ffc4:	56                   	push   esi
c001ffc5:	52                   	push   edx
c001ffc6:	50                   	push   eax
c001ffc7:	e8 36 f5 ff ff       	call   c001f502 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ffcc:	e9 e2 00 00 00       	jmp    c00200b3 <Vm::x87Handler(regs*)+0xa14>
c001ffd1:	80 fa 05             	cmp    dl,0x5
c001ffd4:	75 28                	jne    c001fffe <Vm::x87Handler(regs*)+0x95f>
c001ffd6:	83 ec 0c             	sub    esp,0xc
c001ffd9:	6a 00                	push   0x0
c001ffdb:	e8 82 f5 ff ff       	call   c001f562 <Vm::fpuGetReg(int)>
c001ffe0:	89 c7                	mov    edi,eax
c001ffe2:	89 d5                	mov    ebp,edx
c001ffe4:	58                   	pop    eax
c001ffe5:	5a                   	pop    edx
c001ffe6:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ffe9:	ff 36                	push   DWORD PTR [esi]
c001ffeb:	e8 06 f3 ff ff       	call   c001f2f6 <Vm::fpu64ToInternal(unsigned long long)>
c001fff0:	83 c4 10             	add    esp,0x10
c001fff3:	55                   	push   ebp
c001fff4:	57                   	push   edi
c001fff5:	52                   	push   edx
c001fff6:	50                   	push   eax
c001fff7:	e8 06 f5 ff ff       	call   c001f502 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fffc:	eb 60                	jmp    c002005e <Vm::x87Handler(regs*)+0x9bf>
c001fffe:	80 fa 06             	cmp    dl,0x6
c0020001:	75 2a                	jne    c002002d <Vm::x87Handler(regs*)+0x98e>
c0020003:	51                   	push   ecx
c0020004:	51                   	push   ecx
c0020005:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020008:	ff 36                	push   DWORD PTR [esi]
c002000a:	e8 e7 f2 ff ff       	call   c001f2f6 <Vm::fpu64ToInternal(unsigned long long)>
c002000f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020016:	89 c6                	mov    esi,eax
c0020018:	89 d7                	mov    edi,edx
c002001a:	e8 43 f5 ff ff       	call   c001f562 <Vm::fpuGetReg(int)>
c002001f:	57                   	push   edi
c0020020:	56                   	push   esi
c0020021:	52                   	push   edx
c0020022:	50                   	push   eax
c0020023:	e8 08 f5 ff ff       	call   c001f530 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020028:	e9 86 00 00 00       	jmp    c00200b3 <Vm::x87Handler(regs*)+0xa14>
c002002d:	31 c0                	xor    eax,eax
c002002f:	80 fa 07             	cmp    dl,0x7
c0020032:	0f 85 c8 00 00 00    	jne    c0020100 <Vm::x87Handler(regs*)+0xa61>
c0020038:	83 ec 0c             	sub    esp,0xc
c002003b:	6a 00                	push   0x0
c002003d:	e8 20 f5 ff ff       	call   c001f562 <Vm::fpuGetReg(int)>
c0020042:	89 c7                	mov    edi,eax
c0020044:	89 d5                	mov    ebp,edx
c0020046:	58                   	pop    eax
c0020047:	5a                   	pop    edx
c0020048:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002004b:	ff 36                	push   DWORD PTR [esi]
c002004d:	e8 a4 f2 ff ff       	call   c001f2f6 <Vm::fpu64ToInternal(unsigned long long)>
c0020052:	83 c4 10             	add    esp,0x10
c0020055:	55                   	push   ebp
c0020056:	57                   	push   edi
c0020057:	52                   	push   edx
c0020058:	50                   	push   eax
c0020059:	e8 d2 f4 ff ff       	call   c001f530 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002005e:	83 c4 0c             	add    esp,0xc
c0020061:	eb 53                	jmp    c00200b6 <Vm::x87Handler(regs*)+0xa17>
c0020063:	31 c0                	xor    eax,eax
c0020065:	80 fa 02             	cmp    dl,0x2
c0020068:	0f 85 92 00 00 00    	jne    c0020100 <Vm::x87Handler(regs*)+0xa61>
c002006e:	83 ec 0c             	sub    esp,0xc
c0020071:	6a 00                	push   0x0
c0020073:	e8 ea f4 ff ff       	call   c001f562 <Vm::fpuGetReg(int)>
c0020078:	59                   	pop    ecx
c0020079:	5f                   	pop    edi
c002007a:	52                   	push   edx
c002007b:	50                   	push   eax
c002007c:	e8 27 f2 ff ff       	call   c001f2a8 <Vm::fpuInternalTo64(unsigned long long)>
c0020081:	eb 70                	jmp    c00200f3 <Vm::x87Handler(regs*)+0xa54>
c0020083:	31 c0                	xor    eax,eax
c0020085:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c002008a:	75 74                	jne    c0020100 <Vm::x87Handler(regs*)+0xa61>
c002008c:	50                   	push   eax
c002008d:	50                   	push   eax
c002008e:	0f b7 06             	movzx  eax,WORD PTR [esi]
c0020091:	31 d2                	xor    edx,edx
c0020093:	52                   	push   edx
c0020094:	50                   	push   eax
c0020095:	e8 f6 f2 ff ff       	call   c001f390 <Vm::fpuLongToFloat(long long)>
c002009a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00200a1:	89 c6                	mov    esi,eax
c00200a3:	89 d7                	mov    edi,edx
c00200a5:	e8 b8 f4 ff ff       	call   c001f562 <Vm::fpuGetReg(int)>
c00200aa:	57                   	push   edi
c00200ab:	56                   	push   esi
c00200ac:	52                   	push   edx
c00200ad:	50                   	push   eax
c00200ae:	e8 5e f4 ff ff       	call   c001f511 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00200b3:	83 c4 1c             	add    esp,0x1c
c00200b6:	52                   	push   edx
c00200b7:	50                   	push   eax
c00200b8:	6a 00                	push   0x0
c00200ba:	e8 e6 f4 ff ff       	call   c001f5a5 <Vm::fpuSetReg(int, unsigned long long)>
c00200bf:	e9 f2 f7 ff ff       	jmp    c001f8b6 <Vm::x87Handler(regs*)+0x217>
c00200c4:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00200c8:	80 fa 05             	cmp    dl,0x5
c00200cb:	75 11                	jne    c00200de <Vm::x87Handler(regs*)+0xa3f>
c00200cd:	55                   	push   ebp
c00200ce:	55                   	push   ebp
c00200cf:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00200d2:	ff 36                	push   DWORD PTR [esi]
c00200d4:	e8 81 f2 ff ff       	call   c001f35a <Vm::fpuULongToFloat(unsigned long long)>
c00200d9:	e9 cf f7 ff ff       	jmp    c001f8ad <Vm::x87Handler(regs*)+0x20e>
c00200de:	31 c0                	xor    eax,eax
c00200e0:	80 fa 07             	cmp    dl,0x7
c00200e3:	75 1b                	jne    c0020100 <Vm::x87Handler(regs*)+0xa61>
c00200e5:	e8 63 f5 ff ff       	call   c001f64d <Vm::fpuPop()>
c00200ea:	51                   	push   ecx
c00200eb:	51                   	push   ecx
c00200ec:	52                   	push   edx
c00200ed:	50                   	push   eax
c00200ee:	e8 0c f2 ff ff       	call   c001f2ff <Vm::fpuFloatToLong(unsigned long long)>
c00200f3:	83 c4 10             	add    esp,0x10
c00200f6:	89 06                	mov    DWORD PTR [esi],eax
c00200f8:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c00200fb:	e9 f8 f7 ff ff       	jmp    c001f8f8 <Vm::x87Handler(regs*)+0x259>
c0020100:	83 c4 1c             	add    esp,0x1c
c0020103:	5b                   	pop    ebx
c0020104:	5e                   	pop    esi
c0020105:	5f                   	pop    edi
c0020106:	5d                   	pop    ebp
c0020107:	c3                   	ret    

c0020108 <__static_initialization_and_destruction_0(int, int)>:
c0020108:	83 ec 0c             	sub    esp,0xc
c002010b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0020110:	75 1a                	jne    c002012c <__static_initialization_and_destruction_0(int, int)+0x24>
c0020112:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c002011a:	75 10                	jne    c002012c <__static_initialization_and_destruction_0(int, int)+0x24>
c002011c:	83 ec 0c             	sub    esp,0xc
c002011f:	68 c0 f7 02 c0       	push   0xc002f7c0
c0020124:	e8 51 8e 00 00       	call   c0028f7a <Vm::_FPUState::_FPUState()>
c0020129:	83 c4 10             	add    esp,0x10
c002012c:	90                   	nop
c002012d:	83 c4 0c             	add    esp,0xc
c0020130:	c3                   	ret    

c0020131 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c0020131:	83 ec 0c             	sub    esp,0xc
c0020134:	83 ec 08             	sub    esp,0x8
c0020137:	68 ff ff 00 00       	push   0xffff
c002013c:	6a 01                	push   0x1
c002013e:	e8 c5 ff ff ff       	call   c0020108 <__static_initialization_and_destruction_0(int, int)>
c0020143:	83 c4 10             	add    esp,0x10
c0020146:	83 c4 0c             	add    esp,0xc
c0020149:	c3                   	ret    

c002014a <FAT::getName()>:
c002014a:	b8 88 c6 02 c0       	mov    eax,0xc002c688
c002014f:	c3                   	ret    

c0020150 <FAT::tell(void*, unsigned long long*)>:
c0020150:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020155:	75 06                	jne    c002015d <FAT::tell(void*, unsigned long long*)+0xd>
c0020157:	b8 04 00 00 00       	mov    eax,0x4
c002015c:	c3                   	ret    
c002015d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020162:	75 06                	jne    c002016a <FAT::tell(void*, unsigned long long*)+0x1a>
c0020164:	b8 04 00 00 00       	mov    eax,0x4
c0020169:	c3                   	ret    
c002016a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002016e:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0020171:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0020174:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020178:	89 01                	mov    DWORD PTR [ecx],eax
c002017a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002017d:	b8 00 00 00 00       	mov    eax,0x0
c0020182:	c3                   	ret    
c0020183:	90                   	nop

c0020184 <FAT::stat(void*, unsigned long long*)>:
c0020184:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020189:	75 06                	jne    c0020191 <FAT::stat(void*, unsigned long long*)+0xd>
c002018b:	b8 04 00 00 00       	mov    eax,0x4
c0020190:	c3                   	ret    
c0020191:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020196:	75 06                	jne    c002019e <FAT::stat(void*, unsigned long long*)+0x1a>
c0020198:	b8 04 00 00 00       	mov    eax,0x4
c002019d:	c3                   	ret    
c002019e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00201a2:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00201a5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00201a8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00201ac:	89 01                	mov    DWORD PTR [ecx],eax
c00201ae:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00201b1:	b8 00 00 00 00       	mov    eax,0x0
c00201b6:	c3                   	ret    
c00201b7:	90                   	nop

c00201b8 <FAT::~FAT()>:
c00201b8:	83 ec 0c             	sub    esp,0xc
c00201bb:	ba d4 c6 02 c0       	mov    edx,0xc002c6d4
c00201c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201c4:	89 10                	mov    DWORD PTR [eax],edx
c00201c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201ca:	83 ec 0c             	sub    esp,0xc
c00201cd:	50                   	push   eax
c00201ce:	e8 cd 29 ff ff       	call   c0012ba0 <Filesystem::~Filesystem()>
c00201d3:	83 c4 10             	add    esp,0x10
c00201d6:	90                   	nop
c00201d7:	83 c4 0c             	add    esp,0xc
c00201da:	c3                   	ret    
c00201db:	90                   	nop

c00201dc <FAT::~FAT()>:
c00201dc:	83 ec 0c             	sub    esp,0xc
c00201df:	83 ec 0c             	sub    esp,0xc
c00201e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201e6:	e8 cd ff ff ff       	call   c00201b8 <FAT::~FAT()>
c00201eb:	83 c4 10             	add    esp,0x10
c00201ee:	83 ec 08             	sub    esp,0x8
c00201f1:	6a 08                	push   0x8
c00201f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201f7:	e8 9d 25 ff ff       	call   c0012799 <operator delete(void*, unsigned long)>
c00201fc:	83 c4 10             	add    esp,0x10
c00201ff:	83 c4 0c             	add    esp,0xc
c0020202:	c3                   	ret    
c0020203:	90                   	nop

c0020204 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0020204:	83 ec 1c             	sub    esp,0x1c
c0020207:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c002020e:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0020213:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020217:	8b 04 85 40 f8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd07c0]
c002021e:	83 f8 ff             	cmp    eax,0xffffffff
c0020221:	75 34                	jne    c0020257 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0020223:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020227:	88 c2                	mov    dl,al
c0020229:	a1 20 f8 02 c0       	mov    eax,ds:0xc002f820
c002022e:	01 d0                	add    eax,edx
c0020230:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020234:	8b 15 20 f8 02 c0    	mov    edx,DWORD PTR ds:0xc002f820
c002023a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002023e:	89 14 85 40 f8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd07c0],edx
c0020245:	a1 20 f8 02 c0       	mov    eax,ds:0xc002f820
c002024a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002024e:	89 14 85 c0 f8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0740],edx
c0020255:	eb 17                	jmp    c002026e <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0020257:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002025b:	88 c2                	mov    dl,al
c002025d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020261:	8b 04 85 40 f8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd07c0]
c0020268:	01 d0                	add    eax,edx
c002026a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002026e:	83 ec 04             	sub    esp,0x4
c0020271:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020275:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020279:	8d 44 24 15          	lea    eax,[esp+0x15]
c002027d:	50                   	push   eax
c002027e:	e8 7b 6a fe ff       	call   c0006cfe <f_getlabel>
c0020283:	83 c4 10             	add    esp,0x10
c0020286:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002028a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002028f:	75 07                	jne    c0020298 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0020291:	b8 00 00 00 00       	mov    eax,0x0
c0020296:	eb 05                	jmp    c002029d <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0020298:	b8 01 00 00 00       	mov    eax,0x1
c002029d:	83 c4 1c             	add    esp,0x1c
c00202a0:	c3                   	ret    
c00202a1:	90                   	nop

c00202a2 <FAT::setlabel(LogicalDisk*, int, char*)>:
c00202a2:	57                   	push   edi
c00202a3:	83 ec 58             	sub    esp,0x58
c00202a6:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c00202ae:	8d 54 24 10          	lea    edx,[esp+0x10]
c00202b2:	b9 0f 00 00 00       	mov    ecx,0xf
c00202b7:	b8 00 00 00 00       	mov    eax,0x0
c00202bc:	fc                   	cld    
c00202bd:	89 d7                	mov    edi,edx
c00202bf:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00202c1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00202c5:	8b 04 85 40 f8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd07c0]
c00202cc:	83 f8 ff             	cmp    eax,0xffffffff
c00202cf:	75 34                	jne    c0020305 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c00202d1:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00202d5:	88 c2                	mov    dl,al
c00202d7:	a1 20 f8 02 c0       	mov    eax,ds:0xc002f820
c00202dc:	01 d0                	add    eax,edx
c00202de:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00202e2:	8b 15 20 f8 02 c0    	mov    edx,DWORD PTR ds:0xc002f820
c00202e8:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00202ec:	89 14 85 40 f8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd07c0],edx
c00202f3:	a1 20 f8 02 c0       	mov    eax,ds:0xc002f820
c00202f8:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00202fc:	89 14 85 c0 f8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0740],edx
c0020303:	eb 17                	jmp    c002031c <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0020305:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020309:	88 c2                	mov    dl,al
c002030b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002030f:	8b 04 85 40 f8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd07c0]
c0020316:	01 d0                	add    eax,edx
c0020318:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002031c:	83 ec 08             	sub    esp,0x8
c002031f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0020323:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020327:	50                   	push   eax
c0020328:	e8 1f 06 fe ff       	call   c000094c <strcat>
c002032d:	83 c4 10             	add    esp,0x10
c0020330:	83 ec 0c             	sub    esp,0xc
c0020333:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020337:	50                   	push   eax
c0020338:	e8 af 6b fe ff       	call   c0006eec <f_setlabel>
c002033d:	83 c4 10             	add    esp,0x10
c0020340:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020344:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0020349:	75 07                	jne    c0020352 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c002034b:	b8 00 00 00 00       	mov    eax,0x0
c0020350:	eb 05                	jmp    c0020357 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0020352:	b8 01 00 00 00       	mov    eax,0x1
c0020357:	83 c4 58             	add    esp,0x58
c002035a:	5f                   	pop    edi
c002035b:	c3                   	ret    

c002035c <FAT::format(LogicalDisk*, int, char const*, int)>:
c002035c:	83 ec 2c             	sub    esp,0x2c
c002035f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0020367:	83 ec 08             	sub    esp,0x8
c002036a:	68 ac c6 02 c0       	push   0xc002c6ac
c002036f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020373:	e8 20 05 fe ff       	call   c0000898 <strcmp>
c0020378:	83 c4 10             	add    esp,0x10
c002037b:	85 c0                	test   eax,eax
c002037d:	0f 94 c0             	sete   al
c0020380:	84 c0                	test   al,al
c0020382:	74 0d                	je     c0020391 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0020384:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002038c:	e9 a6 00 00 00       	jmp    c0020437 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020391:	83 ec 08             	sub    esp,0x8
c0020394:	68 9e c6 02 c0       	push   0xc002c69e
c0020399:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002039d:	e8 f6 04 fe ff       	call   c0000898 <strcmp>
c00203a2:	83 c4 10             	add    esp,0x10
c00203a5:	85 c0                	test   eax,eax
c00203a7:	0f 94 c0             	sete   al
c00203aa:	84 c0                	test   al,al
c00203ac:	74 0a                	je     c00203b8 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c00203ae:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00203b6:	eb 7f                	jmp    c0020437 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00203b8:	83 ec 08             	sub    esp,0x8
c00203bb:	68 a4 c6 02 c0       	push   0xc002c6a4
c00203c0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00203c4:	e8 cf 04 fe ff       	call   c0000898 <strcmp>
c00203c9:	83 c4 10             	add    esp,0x10
c00203cc:	85 c0                	test   eax,eax
c00203ce:	0f 94 c0             	sete   al
c00203d1:	84 c0                	test   al,al
c00203d3:	74 0a                	je     c00203df <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c00203d5:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00203dd:	eb 58                	jmp    c0020437 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00203df:	83 ec 08             	sub    esp,0x8
c00203e2:	68 ec 96 02 c0       	push   0xc00296ec
c00203e7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00203eb:	e8 a8 04 fe ff       	call   c0000898 <strcmp>
c00203f0:	83 c4 10             	add    esp,0x10
c00203f3:	85 c0                	test   eax,eax
c00203f5:	0f 94 c0             	sete   al
c00203f8:	84 c0                	test   al,al
c00203fa:	74 0a                	je     c0020406 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c00203fc:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0020404:	eb 31                	jmp    c0020437 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020406:	83 ec 08             	sub    esp,0x8
c0020409:	68 aa c6 02 c0       	push   0xc002c6aa
c002040e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020412:	e8 81 04 fe ff       	call   c0000898 <strcmp>
c0020417:	83 c4 10             	add    esp,0x10
c002041a:	85 c0                	test   eax,eax
c002041c:	0f 94 c0             	sete   al
c002041f:	84 c0                	test   al,al
c0020421:	74 0a                	je     c002042d <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0020423:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c002042b:	eb 0a                	jmp    c0020437 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002042d:	b8 08 00 00 00       	mov    eax,0x8
c0020432:	e9 df 00 00 00       	jmp    c0020516 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c0020437:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c002043e:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0020443:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020447:	8b 04 85 40 f8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd07c0]
c002044e:	83 f8 ff             	cmp    eax,0xffffffff
c0020451:	75 34                	jne    c0020487 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0020453:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020457:	88 c2                	mov    dl,al
c0020459:	a1 20 f8 02 c0       	mov    eax,ds:0xc002f820
c002045e:	01 d0                	add    eax,edx
c0020460:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020464:	8b 15 20 f8 02 c0    	mov    edx,DWORD PTR ds:0xc002f820
c002046a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002046e:	89 14 85 40 f8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd07c0],edx
c0020475:	a1 20 f8 02 c0       	mov    eax,ds:0xc002f820
c002047a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c002047e:	89 14 85 c0 f8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0740],edx
c0020485:	eb 17                	jmp    c002049e <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0020487:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c002048b:	88 c2                	mov    dl,al
c002048d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020491:	8b 04 85 40 f8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd07c0]
c0020498:	01 d0                	add    eax,edx
c002049a:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c002049e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00204a2:	88 04 24             	mov    BYTE PTR [esp],al
c00204a5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00204a9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00204ad:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00204b5:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00204ba:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00204c2:	83 ec 0c             	sub    esp,0xc
c00204c5:	68 00 20 00 00       	push   0x2000
c00204ca:	e8 4a f3 fe ff       	call   c000f819 <malloc>
c00204cf:	83 c4 10             	add    esp,0x10
c00204d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00204d6:	68 00 20 00 00       	push   0x2000
c00204db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00204df:	8d 44 24 08          	lea    eax,[esp+0x8]
c00204e3:	50                   	push   eax
c00204e4:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00204e8:	50                   	push   eax
c00204e9:	e8 7f 70 fe ff       	call   c000756d <f_mkfs>
c00204ee:	83 c4 10             	add    esp,0x10
c00204f1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00204f5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00204fa:	75 07                	jne    c0020503 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c00204fc:	b8 00 00 00 00       	mov    eax,0x0
c0020501:	eb 13                	jmp    c0020516 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c0020503:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0020508:	75 07                	jne    c0020511 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b5>
c002050a:	b8 09 00 00 00       	mov    eax,0x9
c002050f:	eb 05                	jmp    c0020516 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c0020511:	b8 01 00 00 00       	mov    eax,0x1
c0020516:	83 c4 2c             	add    esp,0x2c
c0020519:	c3                   	ret    

c002051a <FAT::tryMount(LogicalDisk*, int)>:
c002051a:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0020520:	a1 20 f8 02 c0       	mov    eax,ds:0xc002f820
c0020525:	83 f8 14             	cmp    eax,0x14
c0020528:	75 17                	jne    c0020541 <FAT::tryMount(LogicalDisk*, int)+0x27>
c002052a:	83 ec 0c             	sub    esp,0xc
c002052d:	68 b0 c6 02 c0       	push   0xc002c6b0
c0020532:	e8 06 9c ff ff       	call   c001a13d <Krnl::panic(char const*)>
c0020537:	83 c4 10             	add    esp,0x10
c002053a:	b0 00                	mov    al,0x0
c002053c:	e9 d7 01 00 00       	jmp    c0020718 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020541:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0020548:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002054e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020554:	3d 00 02 00 00       	cmp    eax,0x200
c0020559:	74 07                	je     c0020562 <FAT::tryMount(LogicalDisk*, int)+0x48>
c002055b:	b0 00                	mov    al,0x0
c002055d:	e9 b6 01 00 00       	jmp    c0020718 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020562:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c002056a:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020571:	8b 04 85 40 f8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd07c0]
c0020578:	83 f8 ff             	cmp    eax,0xffffffff
c002057b:	74 07                	je     c0020584 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c002057d:	b0 01                	mov    al,0x1
c002057f:	e9 94 01 00 00       	jmp    c0020718 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020584:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c002058e:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020596:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c002059d:	88 c2                	mov    dl,al
c002059f:	a1 20 f8 02 c0       	mov    eax,ds:0xc002f820
c00205a4:	01 d0                	add    eax,edx
c00205a6:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c00205ad:	8b 15 20 f8 02 c0    	mov    edx,DWORD PTR ds:0xc002f820
c00205b3:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00205ba:	89 14 85 40 f8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd07c0],edx
c00205c1:	a1 20 f8 02 c0       	mov    eax,ds:0xc002f820
c00205c6:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c00205cd:	89 14 85 c0 f8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0740],edx
c00205d4:	83 ec 0c             	sub    esp,0xc
c00205d7:	68 54 02 00 00       	push   0x254
c00205dc:	e8 38 f2 fe ff       	call   c000f819 <malloc>
c00205e1:	83 c4 10             	add    esp,0x10
c00205e4:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c00205eb:	83 ec 04             	sub    esp,0x4
c00205ee:	6a 00                	push   0x0
c00205f0:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00205f7:	50                   	push   eax
c00205f8:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00205ff:	e8 f1 48 fe ff       	call   c0004ef5 <f_mount>
c0020604:	83 c4 10             	add    esp,0x10
c0020607:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c002060e:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020616:	74 19                	je     c0020631 <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020618:	83 ec 0c             	sub    esp,0xc
c002061b:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020622:	e8 12 f2 fe ff       	call   c000f839 <rfree>
c0020627:	83 c4 10             	add    esp,0x10
c002062a:	b0 00                	mov    al,0x0
c002062c:	e9 e7 00 00 00       	jmp    c0020718 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020631:	83 ec 04             	sub    esp,0x4
c0020634:	68 00 01 00 00       	push   0x100
c0020639:	6a 00                	push   0x0
c002063b:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020642:	50                   	push   eax
c0020643:	e8 08 01 fe ff       	call   c0000750 <memset>
c0020648:	83 c4 10             	add    esp,0x10
c002064b:	83 ec 08             	sub    esp,0x8
c002064e:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020655:	50                   	push   eax
c0020656:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c002065d:	50                   	push   eax
c002065e:	e8 e9 02 fe ff       	call   c000094c <strcat>
c0020663:	83 c4 10             	add    esp,0x10
c0020666:	83 ec 08             	sub    esp,0x8
c0020669:	68 be c6 02 c0       	push   0xc002c6be
c002066e:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020675:	50                   	push   eax
c0020676:	e8 d1 02 fe ff       	call   c000094c <strcat>
c002067b:	83 c4 10             	add    esp,0x10
c002067e:	83 ec 04             	sub    esp,0x4
c0020681:	6a 01                	push   0x1
c0020683:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c002068a:	50                   	push   eax
c002068b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002068f:	50                   	push   eax
c0020690:	e8 c2 48 fe ff       	call   c0004f57 <f_open>
c0020695:	83 c4 10             	add    esp,0x10
c0020698:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c002069f:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00206a6:	85 c0                	test   eax,eax
c00206a8:	74 0a                	je     c00206b4 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c00206aa:	78 2d                	js     c00206d9 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00206ac:	83 e8 04             	sub    eax,0x4
c00206af:	83 f8 01             	cmp    eax,0x1
c00206b2:	77 25                	ja     c00206d9 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00206b4:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c00206bc:	83 ec 0c             	sub    esp,0xc
c00206bf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00206c3:	50                   	push   eax
c00206c4:	e8 e0 53 fe ff       	call   c0005aa9 <f_close>
c00206c9:	83 c4 10             	add    esp,0x10
c00206cc:	90                   	nop
c00206cd:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c00206d5:	74 3a                	je     c0020711 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c00206d7:	eb 2d                	jmp    c0020706 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c00206d9:	83 ec 0c             	sub    esp,0xc
c00206dc:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00206e3:	e8 51 f1 fe ff       	call   c000f839 <rfree>
c00206e8:	83 c4 10             	add    esp,0x10
c00206eb:	83 ec 04             	sub    esp,0x4
c00206ee:	6a 00                	push   0x0
c00206f0:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00206f7:	50                   	push   eax
c00206f8:	6a 00                	push   0x0
c00206fa:	e8 f6 47 fe ff       	call   c0004ef5 <f_mount>
c00206ff:	83 c4 10             	add    esp,0x10
c0020702:	b0 00                	mov    al,0x0
c0020704:	eb 12                	jmp    c0020718 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020706:	a1 20 f8 02 c0       	mov    eax,ds:0xc002f820
c002070b:	40                   	inc    eax
c002070c:	a3 20 f8 02 c0       	mov    ds:0xc002f820,eax
c0020711:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020718:	81 c4 6c 03 00 00    	add    esp,0x36c
c002071e:	c3                   	ret    
c002071f:	90                   	nop

c0020720 <FAT::allocateSwapfile(char const*, int)>:
c0020720:	53                   	push   ebx
c0020721:	81 ec 28 04 00 00    	sub    esp,0x428
c0020727:	c7 84 24 10 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x410],0x114
c0020732:	83 ec 0c             	sub    esp,0xc
c0020735:	ff b4 24 1c 04 00 00 	push   DWORD PTR [esp+0x41c]
c002073c:	e8 d8 f0 fe ff       	call   c000f819 <malloc>
c0020741:	83 c4 10             	add    esp,0x10
c0020744:	89 c3                	mov    ebx,eax
c0020746:	a1 50 f7 02 c0       	mov    eax,ds:0xc002f750
c002074b:	83 ec 04             	sub    esp,0x4
c002074e:	50                   	push   eax
c002074f:	ff b4 24 3c 04 00 00 	push   DWORD PTR [esp+0x43c]
c0020756:	53                   	push   ebx
c0020757:	e8 74 26 ff ff       	call   c0012dd0 <File::File(char const*, Process*)>
c002075c:	83 c4 10             	add    esp,0x10
c002075f:	89 9c 24 1c 04 00 00 	mov    DWORD PTR [esp+0x41c],ebx
c0020766:	83 ec 0c             	sub    esp,0xc
c0020769:	ff b4 24 28 04 00 00 	push   DWORD PTR [esp+0x428]
c0020770:	e8 37 28 ff ff       	call   c0012fac <File::unlink()>
c0020775:	83 c4 10             	add    esp,0x10
c0020778:	83 ec 08             	sub    esp,0x8
c002077b:	6a 12                	push   0x12
c002077d:	ff b4 24 28 04 00 00 	push   DWORD PTR [esp+0x428]
c0020784:	e8 ab 26 ff ff       	call   c0012e34 <File::open(FileOpenMode)>
c0020789:	83 c4 10             	add    esp,0x10
c002078c:	8b 84 24 1c 04 00 00 	mov    eax,DWORD PTR [esp+0x41c]
c0020793:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0020799:	89 84 24 18 04 00 00 	mov    DWORD PTR [esp+0x418],eax
c00207a0:	8b 84 24 38 04 00 00 	mov    eax,DWORD PTR [esp+0x438]
c00207a7:	c1 e0 14             	shl    eax,0x14
c00207aa:	99                   	cdq    
c00207ab:	6a 01                	push   0x1
c00207ad:	52                   	push   edx
c00207ae:	50                   	push   eax
c00207af:	ff b4 24 24 04 00 00 	push   DWORD PTR [esp+0x424]
c00207b6:	e8 9e 69 fe ff       	call   c0007159 <f_expand>
c00207bb:	83 c4 10             	add    esp,0x10
c00207be:	8b 84 24 1c 04 00 00 	mov    eax,DWORD PTR [esp+0x41c]
c00207c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00207c7:	83 c0 10             	add    eax,0x10
c00207ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00207cc:	83 ec 0c             	sub    esp,0xc
c00207cf:	8d 54 24 14          	lea    edx,[esp+0x14]
c00207d3:	52                   	push   edx
c00207d4:	8d 54 24 20          	lea    edx,[esp+0x20]
c00207d8:	52                   	push   edx
c00207d9:	6a 00                	push   0x0
c00207db:	68 00 04 00 00       	push   0x400
c00207e0:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00207e7:	ff d0                	call   eax
c00207e9:	83 c4 20             	add    esp,0x20
c00207ec:	83 ec 0c             	sub    esp,0xc
c00207ef:	ff b4 24 28 04 00 00 	push   DWORD PTR [esp+0x428]
c00207f6:	e8 97 26 ff ff       	call   c0012e92 <File::close()>
c00207fb:	83 c4 10             	add    esp,0x10
c00207fe:	83 ec 08             	sub    esp,0x8
c0020801:	6a 01                	push   0x1
c0020803:	ff b4 24 28 04 00 00 	push   DWORD PTR [esp+0x428]
c002080a:	e8 25 26 ff ff       	call   c0012e34 <File::open(FileOpenMode)>
c002080f:	83 c4 10             	add    esp,0x10
c0020812:	8b 84 24 1c 04 00 00 	mov    eax,DWORD PTR [esp+0x41c]
c0020819:	8b 00                	mov    eax,DWORD PTR [eax]
c002081b:	83 c0 0c             	add    eax,0xc
c002081e:	8b 00                	mov    eax,DWORD PTR [eax]
c0020820:	83 ec 0c             	sub    esp,0xc
c0020823:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020827:	52                   	push   edx
c0020828:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c002082c:	52                   	push   edx
c002082d:	6a 00                	push   0x0
c002082f:	6a 04                	push   0x4
c0020831:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0020838:	ff d0                	call   eax
c002083a:	83 c4 20             	add    esp,0x20
c002083d:	8b 84 24 1c 04 00 00 	mov    eax,DWORD PTR [esp+0x41c]
c0020844:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c002084a:	89 84 24 18 04 00 00 	mov    DWORD PTR [esp+0x418],eax
c0020851:	8b 84 24 18 04 00 00 	mov    eax,DWORD PTR [esp+0x418]
c0020858:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c002085b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c002085e:	89 84 24 14 04 00 00 	mov    DWORD PTR [esp+0x414],eax
c0020865:	83 ec 0c             	sub    esp,0xc
c0020868:	ff b4 24 28 04 00 00 	push   DWORD PTR [esp+0x428]
c002086f:	e8 1e 26 ff ff       	call   c0012e92 <File::close()>
c0020874:	83 c4 10             	add    esp,0x10
c0020877:	8b 84 24 14 04 00 00 	mov    eax,DWORD PTR [esp+0x414]
c002087e:	ba 00 00 00 00       	mov    edx,0x0
c0020883:	81 c4 28 04 00 00    	add    esp,0x428
c0020889:	5b                   	pop    ebx
c002088a:	c3                   	ret    
c002088b:	90                   	nop

c002088c <FAT::readDir(void*, unsigned long, void*, int*)>:
c002088c:	57                   	push   edi
c002088d:	56                   	push   esi
c002088e:	53                   	push   ebx
c002088f:	81 ec 50 02 00 00    	sub    esp,0x250
c0020895:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c002089d:	74 0a                	je     c00208a9 <FAT::readDir(void*, unsigned long, void*, int*)+0x1d>
c002089f:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c00208a7:	75 0a                	jne    c00208b3 <FAT::readDir(void*, unsigned long, void*, int*)+0x27>
c00208a9:	b8 04 00 00 00       	mov    eax,0x4
c00208ae:	e9 29 01 00 00       	jmp    c00209dc <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c00208b3:	83 ec 08             	sub    esp,0x8
c00208b6:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c00208bd:	50                   	push   eax
c00208be:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c00208c5:	e8 e9 57 fe ff       	call   c00060b3 <f_readdir>
c00208ca:	83 c4 10             	add    esp,0x10
c00208cd:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c00208d4:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c00208db:	83 ec 0c             	sub    esp,0xc
c00208de:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00208e5:	83 c0 1a             	add    eax,0x1a
c00208e8:	50                   	push   eax
c00208e9:	e8 7e fe fd ff       	call   c000076c <strlen>
c00208ee:	83 c4 10             	add    esp,0x10
c00208f1:	ba 00 00 00 00       	mov    edx,0x0
c00208f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00208fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00208fe:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0020905:	0f b6 c0             	movzx  eax,al
c0020908:	83 e0 10             	and    eax,0x10
c002090b:	74 07                	je     c0020914 <FAT::readDir(void*, unsigned long, void*, int*)+0x88>
c002090d:	b8 02 00 00 00       	mov    eax,0x2
c0020912:	eb 05                	jmp    c0020919 <FAT::readDir(void*, unsigned long, void*, int*)+0x8d>
c0020914:	b8 01 00 00 00       	mov    eax,0x1
c0020919:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002091d:	83 ec 08             	sub    esp,0x8
c0020920:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020927:	83 c0 1a             	add    eax,0x1a
c002092a:	50                   	push   eax
c002092b:	8d 44 24 10          	lea    eax,[esp+0x10]
c002092f:	83 c0 10             	add    eax,0x10
c0020932:	50                   	push   eax
c0020933:	e8 d4 fe fd ff       	call   c000080c <strcpy>
c0020938:	83 c4 10             	add    esp,0x10
c002093b:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0020942:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0020949:	8d 44 24 04          	lea    eax,[esp+0x4]
c002094d:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0020954:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c002095b:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0020962:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0020969:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0020970:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0020977:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c002097e:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0020985:	89 c6                	mov    esi,eax
c0020987:	89 d7                	mov    edi,edx
c0020989:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002098b:	89 c8                	mov    eax,ecx
c002098d:	89 fa                	mov    edx,edi
c002098f:	89 f3                	mov    ebx,esi
c0020991:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0020998:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c002099f:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c00209a6:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c00209ad:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00209b3:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c00209ba:	84 c0                	test   al,al
c00209bc:	75 07                	jne    c00209c5 <FAT::readDir(void*, unsigned long, void*, int*)+0x139>
c00209be:	b8 07 00 00 00       	mov    eax,0x7
c00209c3:	eb 17                	jmp    c00209dc <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c00209c5:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c00209cc:	85 c0                	test   eax,eax
c00209ce:	75 07                	jne    c00209d7 <FAT::readDir(void*, unsigned long, void*, int*)+0x14b>
c00209d0:	b8 00 00 00 00       	mov    eax,0x0
c00209d5:	eb 05                	jmp    c00209dc <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c00209d7:	b8 01 00 00 00       	mov    eax,0x1
c00209dc:	81 c4 50 02 00 00    	add    esp,0x250
c00209e2:	5b                   	pop    ebx
c00209e3:	5e                   	pop    esi
c00209e4:	5f                   	pop    edi
c00209e5:	c3                   	ret    

c00209e6 <FAT::read(void*, unsigned long, void*, int*)>:
c00209e6:	83 ec 1c             	sub    esp,0x1c
c00209e9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00209ee:	74 07                	je     c00209f7 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c00209f0:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00209f5:	75 07                	jne    c00209fe <FAT::read(void*, unsigned long, void*, int*)+0x18>
c00209f7:	b8 04 00 00 00       	mov    eax,0x4
c00209fc:	eb 3d                	jmp    c0020a3b <FAT::read(void*, unsigned long, void*, int*)+0x55>
c00209fe:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020a02:	50                   	push   eax
c0020a03:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020a07:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020a0b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020a0f:	e8 7f 49 fe ff       	call   c0005393 <f_read>
c0020a14:	83 c4 10             	add    esp,0x10
c0020a17:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020a1b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020a1f:	89 c2                	mov    edx,eax
c0020a21:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020a25:	89 10                	mov    DWORD PTR [eax],edx
c0020a27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020a2b:	85 c0                	test   eax,eax
c0020a2d:	75 07                	jne    c0020a36 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020a2f:	b8 00 00 00 00       	mov    eax,0x0
c0020a34:	eb 05                	jmp    c0020a3b <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020a36:	b8 01 00 00 00       	mov    eax,0x1
c0020a3b:	83 c4 1c             	add    esp,0x1c
c0020a3e:	c3                   	ret    
c0020a3f:	90                   	nop

c0020a40 <FAT::write(void*, unsigned long, void*, int*)>:
c0020a40:	83 ec 1c             	sub    esp,0x1c
c0020a43:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020a48:	74 07                	je     c0020a51 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020a4a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020a4f:	75 07                	jne    c0020a58 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020a51:	b8 04 00 00 00       	mov    eax,0x4
c0020a56:	eb 3d                	jmp    c0020a95 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020a58:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020a5c:	50                   	push   eax
c0020a5d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020a61:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020a65:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020a69:	e8 a5 4b fe ff       	call   c0005613 <f_write>
c0020a6e:	83 c4 10             	add    esp,0x10
c0020a71:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020a75:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020a79:	89 c2                	mov    edx,eax
c0020a7b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020a7f:	89 10                	mov    DWORD PTR [eax],edx
c0020a81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020a85:	85 c0                	test   eax,eax
c0020a87:	75 07                	jne    c0020a90 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020a89:	b8 00 00 00 00       	mov    eax,0x0
c0020a8e:	eb 05                	jmp    c0020a95 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020a90:	b8 01 00 00 00       	mov    eax,0x1
c0020a95:	83 c4 1c             	add    esp,0x1c
c0020a98:	c3                   	ret    
c0020a99:	90                   	nop

c0020a9a <FAT::close(void*)>:
c0020a9a:	83 ec 1c             	sub    esp,0x1c
c0020a9d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020aa2:	75 07                	jne    c0020aab <FAT::close(void*)+0x11>
c0020aa4:	b8 04 00 00 00       	mov    eax,0x4
c0020aa9:	eb 36                	jmp    c0020ae1 <FAT::close(void*)+0x47>
c0020aab:	83 ec 0c             	sub    esp,0xc
c0020aae:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020ab2:	e8 f2 4f fe ff       	call   c0005aa9 <f_close>
c0020ab7:	83 c4 10             	add    esp,0x10
c0020aba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020abe:	83 ec 0c             	sub    esp,0xc
c0020ac1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020ac5:	e8 5f ed fe ff       	call   c000f829 <free>
c0020aca:	83 c4 10             	add    esp,0x10
c0020acd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020ad1:	85 c0                	test   eax,eax
c0020ad3:	75 07                	jne    c0020adc <FAT::close(void*)+0x42>
c0020ad5:	b8 00 00 00 00       	mov    eax,0x0
c0020ada:	eb 05                	jmp    c0020ae1 <FAT::close(void*)+0x47>
c0020adc:	b8 01 00 00 00       	mov    eax,0x1
c0020ae1:	83 c4 1c             	add    esp,0x1c
c0020ae4:	c3                   	ret    
c0020ae5:	90                   	nop

c0020ae6 <FAT::closeDir(void*)>:
c0020ae6:	83 ec 1c             	sub    esp,0x1c
c0020ae9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020aee:	75 07                	jne    c0020af7 <FAT::closeDir(void*)+0x11>
c0020af0:	b8 04 00 00 00       	mov    eax,0x4
c0020af5:	eb 36                	jmp    c0020b2d <FAT::closeDir(void*)+0x47>
c0020af7:	83 ec 0c             	sub    esp,0xc
c0020afa:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020afe:	e8 8e 55 fe ff       	call   c0006091 <f_closedir>
c0020b03:	83 c4 10             	add    esp,0x10
c0020b06:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020b0a:	83 ec 0c             	sub    esp,0xc
c0020b0d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020b11:	e8 13 ed fe ff       	call   c000f829 <free>
c0020b16:	83 c4 10             	add    esp,0x10
c0020b19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020b1d:	85 c0                	test   eax,eax
c0020b1f:	75 07                	jne    c0020b28 <FAT::closeDir(void*)+0x42>
c0020b21:	b8 00 00 00 00       	mov    eax,0x0
c0020b26:	eb 05                	jmp    c0020b2d <FAT::closeDir(void*)+0x47>
c0020b28:	b8 01 00 00 00       	mov    eax,0x1
c0020b2d:	83 c4 1c             	add    esp,0x1c
c0020b30:	c3                   	ret    
c0020b31:	90                   	nop

c0020b32 <FAT::seek(void*, unsigned long long)>:
c0020b32:	83 ec 2c             	sub    esp,0x2c
c0020b35:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020b39:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020b3d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020b41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020b45:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020b4a:	75 07                	jne    c0020b53 <FAT::seek(void*, unsigned long long)+0x21>
c0020b4c:	b8 04 00 00 00       	mov    eax,0x4
c0020b51:	eb 2f                	jmp    c0020b82 <FAT::seek(void*, unsigned long long)+0x50>
c0020b53:	83 ec 04             	sub    esp,0x4
c0020b56:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020b5a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020b5e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020b62:	e8 71 4f fe ff       	call   c0005ad8 <f_lseek>
c0020b67:	83 c4 10             	add    esp,0x10
c0020b6a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020b6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020b72:	85 c0                	test   eax,eax
c0020b74:	75 07                	jne    c0020b7d <FAT::seek(void*, unsigned long long)+0x4b>
c0020b76:	b8 00 00 00 00       	mov    eax,0x0
c0020b7b:	eb 05                	jmp    c0020b82 <FAT::seek(void*, unsigned long long)+0x50>
c0020b7d:	b8 01 00 00 00       	mov    eax,0x1
c0020b82:	83 c4 2c             	add    esp,0x2c
c0020b85:	c3                   	ret    

c0020b86 <fatWrapperReadDisk>:
c0020b86:	83 ec 1c             	sub    esp,0x1c
c0020b89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020b8d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020b91:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020b95:	89 04 24             	mov    DWORD PTR [esp],eax
c0020b98:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020b9c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020ba0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020ba5:	8b 04 85 20 e8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd17e0]
c0020bac:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020bb0:	83 ec 0c             	sub    esp,0xc
c0020bb3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020bb7:	52                   	push   edx
c0020bb8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020bbc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020bc0:	50                   	push   eax
c0020bc1:	e8 06 56 ff ff       	call   c00161cc <LogicalDisk::read(unsigned long long, int, void*)>
c0020bc6:	83 c4 20             	add    esp,0x20
c0020bc9:	83 c4 1c             	add    esp,0x1c
c0020bcc:	c3                   	ret    

c0020bcd <fatWrapperWriteDisk>:
c0020bcd:	83 ec 1c             	sub    esp,0x1c
c0020bd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020bd4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020bd8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020bdc:	89 04 24             	mov    DWORD PTR [esp],eax
c0020bdf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020be3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020be7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020bec:	8b 04 85 20 e8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd17e0]
c0020bf3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020bf7:	83 ec 0c             	sub    esp,0xc
c0020bfa:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020bfe:	52                   	push   edx
c0020bff:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020c03:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020c07:	50                   	push   eax
c0020c08:	e8 2b 56 ff ff       	call   c0016238 <LogicalDisk::write(unsigned long long, int, void*)>
c0020c0d:	83 c4 20             	add    esp,0x20
c0020c10:	83 c4 1c             	add    esp,0x1c
c0020c13:	c3                   	ret    

c0020c14 <fatWrapperIoctl>:
c0020c14:	53                   	push   ebx
c0020c15:	83 ec 28             	sub    esp,0x28
c0020c18:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020c1c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020c20:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020c24:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020c28:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020c2d:	75 31                	jne    c0020c60 <fatWrapperIoctl+0x4c>
c0020c2f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020c33:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020c37:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020c3c:	8b 04 85 20 e8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd17e0]
c0020c43:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020c49:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020c4f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020c53:	66 89 02             	mov    WORD PTR [edx],ax
c0020c56:	b8 00 00 00 00       	mov    eax,0x0
c0020c5b:	e9 b2 00 00 00       	jmp    c0020d12 <fatWrapperIoctl+0xfe>
c0020c60:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020c65:	75 6a                	jne    c0020cd1 <fatWrapperIoctl+0xbd>
c0020c67:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020c6b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020c6f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020c74:	8b 04 85 20 e8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd17e0]
c0020c7b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020c81:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020c87:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020c8d:	89 c8                	mov    eax,ecx
c0020c8f:	89 da                	mov    edx,ebx
c0020c91:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020c95:	c1 e0 0a             	shl    eax,0xa
c0020c98:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020c9d:	8b 0c 8d 20 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd17e0]
c0020ca4:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020caa:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020cb0:	89 cb                	mov    ebx,ecx
c0020cb2:	c1 fb 1f             	sar    ebx,0x1f
c0020cb5:	53                   	push   ebx
c0020cb6:	51                   	push   ecx
c0020cb7:	52                   	push   edx
c0020cb8:	50                   	push   eax
c0020cb9:	e8 b6 5e 00 00       	call   c0026b74 <__udivdi3>
c0020cbe:	83 c4 10             	add    esp,0x10
c0020cc1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020cc5:	89 01                	mov    DWORD PTR [ecx],eax
c0020cc7:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020cca:	b8 00 00 00 00       	mov    eax,0x0
c0020ccf:	eb 41                	jmp    c0020d12 <fatWrapperIoctl+0xfe>
c0020cd1:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020cd6:	75 07                	jne    c0020cdf <fatWrapperIoctl+0xcb>
c0020cd8:	b8 00 00 00 00       	mov    eax,0x0
c0020cdd:	eb 33                	jmp    c0020d12 <fatWrapperIoctl+0xfe>
c0020cdf:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020ce4:	75 19                	jne    c0020cff <fatWrapperIoctl+0xeb>
c0020ce6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020cea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020cee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020cf2:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020cf8:	b8 00 00 00 00       	mov    eax,0x0
c0020cfd:	eb 13                	jmp    c0020d12 <fatWrapperIoctl+0xfe>
c0020cff:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020d04:	75 07                	jne    c0020d0d <fatWrapperIoctl+0xf9>
c0020d06:	b8 00 00 00 00       	mov    eax,0x0
c0020d0b:	eb 05                	jmp    c0020d12 <fatWrapperIoctl+0xfe>
c0020d0d:	b8 04 00 00 00       	mov    eax,0x4
c0020d12:	83 c4 28             	add    esp,0x28
c0020d15:	5b                   	pop    ebx
c0020d16:	c3                   	ret    
c0020d17:	90                   	nop

c0020d18 <FAT::FAT()>:
c0020d18:	83 ec 1c             	sub    esp,0x1c
c0020d1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020d1f:	83 ec 0c             	sub    esp,0xc
c0020d22:	50                   	push   eax
c0020d23:	e8 54 1e ff ff       	call   c0012b7c <Filesystem::Filesystem()>
c0020d28:	83 c4 10             	add    esp,0x10
c0020d2b:	ba d4 c6 02 c0       	mov    edx,0xc002c6d4
c0020d30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020d34:	89 10                	mov    DWORD PTR [eax],edx
c0020d36:	c7 05 20 f8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f820,0x0
c0020d40:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020d48:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020d4d:	7f 15                	jg     c0020d64 <FAT::FAT()+0x4c>
c0020d4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d53:	c7 04 85 40 f8 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd07c0],0xffffffff
c0020d5e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020d62:	eb e4                	jmp    c0020d48 <FAT::FAT()+0x30>
c0020d64:	90                   	nop
c0020d65:	83 c4 1c             	add    esp,0x1c
c0020d68:	c3                   	ret    
c0020d69:	90                   	nop

c0020d6a <FAT::fixFilepath(char*)>:
c0020d6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020d6e:	8a 00                	mov    al,BYTE PTR [eax]
c0020d70:	3c 40                	cmp    al,0x40
c0020d72:	7e 2c                	jle    c0020da0 <FAT::fixFilepath(char*)+0x36>
c0020d74:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020d78:	8a 00                	mov    al,BYTE PTR [eax]
c0020d7a:	83 e8 41             	sub    eax,0x41
c0020d7d:	88 c2                	mov    dl,al
c0020d7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020d83:	88 10                	mov    BYTE PTR [eax],dl
c0020d85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020d89:	8a 00                	mov    al,BYTE PTR [eax]
c0020d8b:	0f be c0             	movsx  eax,al
c0020d8e:	8b 04 85 40 f8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd07c0]
c0020d95:	83 c0 30             	add    eax,0x30
c0020d98:	88 c2                	mov    dl,al
c0020d9a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020d9e:	88 10                	mov    BYTE PTR [eax],dl
c0020da0:	90                   	nop
c0020da1:	c3                   	ret    

c0020da2 <FAT::open(char const*, void**, FileOpenMode)>:
c0020da2:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020da8:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020db0:	74 0a                	je     c0020dbc <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0020db2:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020dba:	75 0a                	jne    c0020dc6 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0020dbc:	b8 04 00 00 00       	mov    eax,0x4
c0020dc1:	e9 fd 00 00 00       	jmp    c0020ec3 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020dc6:	83 ec 08             	sub    esp,0x8
c0020dc9:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020dd0:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020dd4:	50                   	push   eax
c0020dd5:	e8 32 fa fd ff       	call   c000080c <strcpy>
c0020dda:	83 c4 10             	add    esp,0x10
c0020ddd:	83 ec 08             	sub    esp,0x8
c0020de0:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020de4:	50                   	push   eax
c0020de5:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020dec:	e8 79 ff ff ff       	call   c0020d6a <FAT::fixFilepath(char*)>
c0020df1:	83 c4 10             	add    esp,0x10
c0020df4:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0020dfc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020e03:	83 e0 01             	and    eax,0x1
c0020e06:	74 08                	je     c0020e10 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0020e08:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0020e10:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020e17:	83 e0 04             	and    eax,0x4
c0020e1a:	74 10                	je     c0020e2c <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0020e1c:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0020e24:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020e2c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020e33:	83 e0 02             	and    eax,0x2
c0020e36:	74 08                	je     c0020e40 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0020e38:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020e40:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020e47:	83 e0 08             	and    eax,0x8
c0020e4a:	74 08                	je     c0020e54 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0020e4c:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0020e54:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020e5b:	83 e0 10             	and    eax,0x10
c0020e5e:	74 08                	je     c0020e68 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0020e60:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0020e68:	83 ec 0c             	sub    esp,0xc
c0020e6b:	68 50 02 00 00       	push   0x250
c0020e70:	e8 a4 e9 fe ff       	call   c000f819 <malloc>
c0020e75:	83 c4 10             	add    esp,0x10
c0020e78:	89 c2                	mov    edx,eax
c0020e7a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020e81:	89 10                	mov    DWORD PTR [eax],edx
c0020e83:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0020e8b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020e92:	8b 00                	mov    eax,DWORD PTR [eax]
c0020e94:	83 ec 04             	sub    esp,0x4
c0020e97:	52                   	push   edx
c0020e98:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020e9c:	52                   	push   edx
c0020e9d:	50                   	push   eax
c0020e9e:	e8 b4 40 fe ff       	call   c0004f57 <f_open>
c0020ea3:	83 c4 10             	add    esp,0x10
c0020ea6:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0020ead:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0020eb5:	74 07                	je     c0020ebe <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0020eb7:	b8 01 00 00 00       	mov    eax,0x1
c0020ebc:	eb 05                	jmp    c0020ec3 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020ebe:	b8 00 00 00 00       	mov    eax,0x0
c0020ec3:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020ec9:	c3                   	ret    

c0020eca <FAT::openDir(char const*, void**)>:
c0020eca:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020ed0:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020ed8:	74 0a                	je     c0020ee4 <FAT::openDir(char const*, void**)+0x1a>
c0020eda:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020ee2:	75 07                	jne    c0020eeb <FAT::openDir(char const*, void**)+0x21>
c0020ee4:	b8 04 00 00 00       	mov    eax,0x4
c0020ee9:	eb 7d                	jmp    c0020f68 <FAT::openDir(char const*, void**)+0x9e>
c0020eeb:	83 ec 08             	sub    esp,0x8
c0020eee:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020ef5:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020ef9:	50                   	push   eax
c0020efa:	e8 0d f9 fd ff       	call   c000080c <strcpy>
c0020eff:	83 c4 10             	add    esp,0x10
c0020f02:	83 ec 08             	sub    esp,0x8
c0020f05:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020f09:	50                   	push   eax
c0020f0a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020f11:	e8 54 fe ff ff       	call   c0020d6a <FAT::fixFilepath(char*)>
c0020f16:	83 c4 10             	add    esp,0x10
c0020f19:	83 ec 0c             	sub    esp,0xc
c0020f1c:	6a 4c                	push   0x4c
c0020f1e:	e8 f6 e8 fe ff       	call   c000f819 <malloc>
c0020f23:	83 c4 10             	add    esp,0x10
c0020f26:	89 c2                	mov    edx,eax
c0020f28:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020f2f:	89 10                	mov    DWORD PTR [eax],edx
c0020f31:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020f38:	8b 00                	mov    eax,DWORD PTR [eax]
c0020f3a:	83 ec 08             	sub    esp,0x8
c0020f3d:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020f41:	52                   	push   edx
c0020f42:	50                   	push   eax
c0020f43:	e8 47 50 fe ff       	call   c0005f8f <f_opendir>
c0020f48:	83 c4 10             	add    esp,0x10
c0020f4b:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020f52:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0020f5a:	74 07                	je     c0020f63 <FAT::openDir(char const*, void**)+0x99>
c0020f5c:	b8 01 00 00 00       	mov    eax,0x1
c0020f61:	eb 05                	jmp    c0020f68 <FAT::openDir(char const*, void**)+0x9e>
c0020f63:	b8 00 00 00 00       	mov    eax,0x0
c0020f68:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020f6e:	c3                   	ret    
c0020f6f:	90                   	nop

c0020f70 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0020f70:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020f76:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0020f7e:	75 0a                	jne    c0020f8a <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0020f80:	b8 04 00 00 00       	mov    eax,0x4
c0020f85:	e9 c9 00 00 00       	jmp    c0021053 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020f8a:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0020f92:	75 0a                	jne    c0020f9e <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0020f94:	b8 04 00 00 00       	mov    eax,0x4
c0020f99:	e9 b5 00 00 00       	jmp    c0021053 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020f9e:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0020fa6:	75 0a                	jne    c0020fb2 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0020fa8:	b8 04 00 00 00       	mov    eax,0x4
c0020fad:	e9 a1 00 00 00       	jmp    c0021053 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020fb2:	83 ec 08             	sub    esp,0x8
c0020fb5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020fbc:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020fc3:	50                   	push   eax
c0020fc4:	e8 43 f8 fd ff       	call   c000080c <strcpy>
c0020fc9:	83 c4 10             	add    esp,0x10
c0020fcc:	83 ec 08             	sub    esp,0x8
c0020fcf:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0020fd6:	50                   	push   eax
c0020fd7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020fde:	e8 87 fd ff ff       	call   c0020d6a <FAT::fixFilepath(char*)>
c0020fe3:	83 c4 10             	add    esp,0x10
c0020fe6:	83 ec 08             	sub    esp,0x8
c0020fe9:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020fed:	50                   	push   eax
c0020fee:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020ff5:	50                   	push   eax
c0020ff6:	e8 53 51 fe ff       	call   c000614e <f_stat>
c0020ffb:	83 c4 10             	add    esp,0x10
c0020ffe:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021005:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c002100c:	85 c0                	test   eax,eax
c002100e:	74 07                	je     c0021017 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0021010:	83 f8 04             	cmp    eax,0x4
c0021013:	74 32                	je     c0021047 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0021015:	eb 37                	jmp    c002104e <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0021017:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002101b:	0f b6 c0             	movzx  eax,al
c002101e:	83 e0 10             	and    eax,0x10
c0021021:	0f 95 c2             	setne  dl
c0021024:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c002102b:	88 10                	mov    BYTE PTR [eax],dl
c002102d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021030:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021034:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c002103b:	89 01                	mov    DWORD PTR [ecx],eax
c002103d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0021040:	b8 00 00 00 00       	mov    eax,0x0
c0021045:	eb 0c                	jmp    c0021053 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021047:	b8 02 00 00 00       	mov    eax,0x2
c002104c:	eb 05                	jmp    c0021053 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002104e:	b8 01 00 00 00       	mov    eax,0x1
c0021053:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021059:	c3                   	ret    

c002105a <FAT::unlink(char const*)>:
c002105a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021060:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021068:	75 07                	jne    c0021071 <FAT::unlink(char const*)+0x17>
c002106a:	b8 04 00 00 00       	mov    eax,0x4
c002106f:	eb 5c                	jmp    c00210cd <FAT::unlink(char const*)+0x73>
c0021071:	83 ec 08             	sub    esp,0x8
c0021074:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002107b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002107f:	50                   	push   eax
c0021080:	e8 87 f7 fd ff       	call   c000080c <strcpy>
c0021085:	83 c4 10             	add    esp,0x10
c0021088:	83 ec 08             	sub    esp,0x8
c002108b:	8d 44 24 14          	lea    eax,[esp+0x14]
c002108f:	50                   	push   eax
c0021090:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021097:	e8 ce fc ff ff       	call   c0020d6a <FAT::fixFilepath(char*)>
c002109c:	83 c4 10             	add    esp,0x10
c002109f:	83 ec 0c             	sub    esp,0xc
c00210a2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00210a6:	50                   	push   eax
c00210a7:	e8 f4 53 fe ff       	call   c00064a0 <f_unlink>
c00210ac:	83 c4 10             	add    esp,0x10
c00210af:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00210b6:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00210bd:	85 c0                	test   eax,eax
c00210bf:	75 07                	jne    c00210c8 <FAT::unlink(char const*)+0x6e>
c00210c1:	b8 00 00 00 00       	mov    eax,0x0
c00210c6:	eb 05                	jmp    c00210cd <FAT::unlink(char const*)+0x73>
c00210c8:	b8 01 00 00 00       	mov    eax,0x1
c00210cd:	81 c4 1c 01 00 00    	add    esp,0x11c
c00210d3:	c3                   	ret    

c00210d4 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00210d4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00210da:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00210e1:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c00210e8:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00210ec:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00210f0:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00210f8:	75 0a                	jne    c0021104 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c00210fa:	b8 04 00 00 00       	mov    eax,0x4
c00210ff:	e9 1c 01 00 00       	jmp    c0021220 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021104:	83 ec 08             	sub    esp,0x8
c0021107:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c002110e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021112:	50                   	push   eax
c0021113:	e8 f4 f6 fd ff       	call   c000080c <strcpy>
c0021118:	83 c4 10             	add    esp,0x10
c002111b:	83 ec 08             	sub    esp,0x8
c002111e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0021122:	50                   	push   eax
c0021123:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c002112a:	e8 3b fc ff ff       	call   c0020d6a <FAT::fixFilepath(char*)>
c002112f:	83 c4 10             	add    esp,0x10
c0021132:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c002113a:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0021142:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021147:	83 e0 01             	and    eax,0x1
c002114a:	74 08                	je     c0021154 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c002114c:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0021154:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021159:	83 e0 02             	and    eax,0x2
c002115c:	74 08                	je     c0021166 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c002115e:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0021166:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002116b:	83 e0 04             	and    eax,0x4
c002116e:	74 08                	je     c0021178 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0021170:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0021178:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002117d:	83 e0 08             	and    eax,0x8
c0021180:	74 08                	je     c002118a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0021182:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c002118a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002118f:	83 e0 01             	and    eax,0x1
c0021192:	74 08                	je     c002119c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0021194:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c002119c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00211a1:	83 e0 02             	and    eax,0x2
c00211a4:	74 08                	je     c00211ae <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c00211a6:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c00211ae:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00211b3:	83 e0 04             	and    eax,0x4
c00211b6:	74 08                	je     c00211c0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c00211b8:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c00211c0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00211c5:	83 e0 08             	and    eax,0x8
c00211c8:	74 08                	je     c00211d2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c00211ca:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c00211d2:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00211d9:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c00211e0:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c00211e8:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c00211f0:	83 ec 04             	sub    esp,0x4
c00211f3:	52                   	push   edx
c00211f4:	50                   	push   eax
c00211f5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00211f9:	50                   	push   eax
c00211fa:	e8 43 59 fe ff       	call   c0006b42 <f_chmod>
c00211ff:	83 c4 10             	add    esp,0x10
c0021202:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0021209:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0021210:	85 c0                	test   eax,eax
c0021212:	75 07                	jne    c002121b <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0021214:	b8 00 00 00 00       	mov    eax,0x0
c0021219:	eb 05                	jmp    c0021220 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c002121b:	b8 01 00 00 00       	mov    eax,0x1
c0021220:	81 c4 2c 01 00 00    	add    esp,0x12c
c0021226:	c3                   	ret    
c0021227:	90                   	nop

c0021228 <FAT::rename(char const*, char const*)>:
c0021228:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002122e:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0021236:	74 0a                	je     c0021242 <FAT::rename(char const*, char const*)+0x1a>
c0021238:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0021240:	75 0a                	jne    c002124c <FAT::rename(char const*, char const*)+0x24>
c0021242:	b8 04 00 00 00       	mov    eax,0x4
c0021247:	e9 98 00 00 00       	jmp    c00212e4 <FAT::rename(char const*, char const*)+0xbc>
c002124c:	83 ec 08             	sub    esp,0x8
c002124f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021256:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002125d:	50                   	push   eax
c002125e:	e8 a9 f5 fd ff       	call   c000080c <strcpy>
c0021263:	83 c4 10             	add    esp,0x10
c0021266:	83 ec 08             	sub    esp,0x8
c0021269:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0021270:	50                   	push   eax
c0021271:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021278:	e8 ed fa ff ff       	call   c0020d6a <FAT::fixFilepath(char*)>
c002127d:	83 c4 10             	add    esp,0x10
c0021280:	83 ec 08             	sub    esp,0x8
c0021283:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c002128a:	8d 44 24 18          	lea    eax,[esp+0x18]
c002128e:	50                   	push   eax
c002128f:	e8 78 f5 fd ff       	call   c000080c <strcpy>
c0021294:	83 c4 10             	add    esp,0x10
c0021297:	83 ec 08             	sub    esp,0x8
c002129a:	8d 44 24 14          	lea    eax,[esp+0x14]
c002129e:	50                   	push   eax
c002129f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00212a6:	e8 bf fa ff ff       	call   c0020d6a <FAT::fixFilepath(char*)>
c00212ab:	83 c4 10             	add    esp,0x10
c00212ae:	83 ec 08             	sub    esp,0x8
c00212b1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00212b5:	50                   	push   eax
c00212b6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00212bd:	50                   	push   eax
c00212be:	e8 8c 55 fe ff       	call   c000684f <f_rename>
c00212c3:	83 c4 10             	add    esp,0x10
c00212c6:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00212cd:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00212d4:	85 c0                	test   eax,eax
c00212d6:	75 07                	jne    c00212df <FAT::rename(char const*, char const*)+0xb7>
c00212d8:	b8 00 00 00 00       	mov    eax,0x0
c00212dd:	eb 05                	jmp    c00212e4 <FAT::rename(char const*, char const*)+0xbc>
c00212df:	b8 01 00 00 00       	mov    eax,0x1
c00212e4:	81 c4 1c 02 00 00    	add    esp,0x21c
c00212ea:	c3                   	ret    
c00212eb:	90                   	nop

c00212ec <FAT::mkdir(char const*)>:
c00212ec:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00212f2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00212fa:	75 07                	jne    c0021303 <FAT::mkdir(char const*)+0x17>
c00212fc:	b8 04 00 00 00       	mov    eax,0x4
c0021301:	eb 5c                	jmp    c002135f <FAT::mkdir(char const*)+0x73>
c0021303:	83 ec 08             	sub    esp,0x8
c0021306:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002130d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021311:	50                   	push   eax
c0021312:	e8 f5 f4 fd ff       	call   c000080c <strcpy>
c0021317:	83 c4 10             	add    esp,0x10
c002131a:	83 ec 08             	sub    esp,0x8
c002131d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021321:	50                   	push   eax
c0021322:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021329:	e8 3c fa ff ff       	call   c0020d6a <FAT::fixFilepath(char*)>
c002132e:	83 c4 10             	add    esp,0x10
c0021331:	83 ec 0c             	sub    esp,0xc
c0021334:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021338:	50                   	push   eax
c0021339:	e8 e5 52 fe ff       	call   c0006623 <f_mkdir>
c002133e:	83 c4 10             	add    esp,0x10
c0021341:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021348:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c002134f:	85 c0                	test   eax,eax
c0021351:	75 07                	jne    c002135a <FAT::mkdir(char const*)+0x6e>
c0021353:	b8 00 00 00 00       	mov    eax,0x0
c0021358:	eb 05                	jmp    c002135f <FAT::mkdir(char const*)+0x73>
c002135a:	b8 01 00 00 00       	mov    eax,0x1
c002135f:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021365:	c3                   	ret    

c0021366 <FAT::exists(char const*)>:
c0021366:	81 ec 2c 02 00 00    	sub    esp,0x22c
c002136c:	83 ec 08             	sub    esp,0x8
c002136f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021376:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002137a:	50                   	push   eax
c002137b:	e8 8c f4 fd ff       	call   c000080c <strcpy>
c0021380:	83 c4 10             	add    esp,0x10
c0021383:	83 ec 08             	sub    esp,0x8
c0021386:	8d 44 24 08          	lea    eax,[esp+0x8]
c002138a:	50                   	push   eax
c002138b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021392:	e8 d3 f9 ff ff       	call   c0020d6a <FAT::fixFilepath(char*)>
c0021397:	83 c4 10             	add    esp,0x10
c002139a:	83 ec 08             	sub    esp,0x8
c002139d:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c00213a4:	50                   	push   eax
c00213a5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00213a9:	50                   	push   eax
c00213aa:	e8 9f 4d fe ff       	call   c000614e <f_stat>
c00213af:	83 c4 10             	add    esp,0x10
c00213b2:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00213b9:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00213c0:	85 c0                	test   eax,eax
c00213c2:	75 04                	jne    c00213c8 <FAT::exists(char const*)+0x62>
c00213c4:	b0 01                	mov    al,0x1
c00213c6:	eb 02                	jmp    c00213ca <FAT::exists(char const*)+0x64>
c00213c8:	b0 00                	mov    al,0x0
c00213ca:	81 c4 2c 02 00 00    	add    esp,0x22c
c00213d0:	c3                   	ret    
c00213d1:	90                   	nop

c00213d2 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00213d2:	b8 08 00 00 00       	mov    eax,0x8
c00213d7:	c3                   	ret    

c00213d8 <ISO9660::seek(void*, unsigned long long)>:
c00213d8:	53                   	push   ebx
c00213d9:	b8 04 00 00 00       	mov    eax,0x4
c00213de:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00213e2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00213e6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00213ea:	85 d2                	test   edx,edx
c00213ec:	74 17                	je     c0021405 <ISO9660::seek(void*, unsigned long long)+0x2d>
c00213ee:	89 c8                	mov    eax,ecx
c00213f0:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c00213f3:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c00213f6:	b8 01 00 00 00       	mov    eax,0x1
c00213fb:	73 08                	jae    c0021405 <ISO9660::seek(void*, unsigned long long)+0x2d>
c00213fd:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0021400:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0021403:	31 c0                	xor    eax,eax
c0021405:	5b                   	pop    ebx
c0021406:	c3                   	ret    
c0021407:	90                   	nop

c0021408 <ISO9660::tell(void*, unsigned long long*)>:
c0021408:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002140c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021410:	85 d2                	test   edx,edx
c0021412:	74 12                	je     c0021426 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021414:	85 c0                	test   eax,eax
c0021416:	74 0e                	je     c0021426 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021418:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002141b:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c002141e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021421:	89 10                	mov    DWORD PTR [eax],edx
c0021423:	31 c0                	xor    eax,eax
c0021425:	c3                   	ret    
c0021426:	b8 04 00 00 00       	mov    eax,0x4
c002142b:	c3                   	ret    

c002142c <ISO9660::getName()>:
c002142c:	b8 34 c7 02 c0       	mov    eax,0xc002c734
c0021431:	c3                   	ret    

c0021432 <ISO9660::stat(void*, unsigned long long*)>:
c0021432:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021436:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002143a:	85 d2                	test   edx,edx
c002143c:	74 12                	je     c0021450 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c002143e:	85 c0                	test   eax,eax
c0021440:	74 0e                	je     c0021450 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021442:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0021445:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0021448:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c002144b:	89 10                	mov    DWORD PTR [eax],edx
c002144d:	31 c0                	xor    eax,eax
c002144f:	c3                   	ret    
c0021450:	b8 04 00 00 00       	mov    eax,0x4
c0021455:	c3                   	ret    

c0021456 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0021456:	b8 01 00 00 00       	mov    eax,0x1
c002145b:	c3                   	ret    

c002145c <ISO9660::unlink(char const*)>:
c002145c:	b8 01 00 00 00       	mov    eax,0x1
c0021461:	c3                   	ret    

c0021462 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0021462:	b8 01 00 00 00       	mov    eax,0x1
c0021467:	c3                   	ret    

c0021468 <ISO9660::rename(char const*, char const*)>:
c0021468:	b8 01 00 00 00       	mov    eax,0x1
c002146d:	c3                   	ret    

c002146e <ISO9660::mkdir(char const*)>:
c002146e:	b8 01 00 00 00       	mov    eax,0x1
c0021473:	c3                   	ret    

c0021474 <ISO9660::close(void*)>:
c0021474:	83 ec 0c             	sub    esp,0xc
c0021477:	b8 04 00 00 00       	mov    eax,0x4
c002147c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021480:	85 d2                	test   edx,edx
c0021482:	74 0e                	je     c0021492 <ISO9660::close(void*)+0x1e>
c0021484:	83 ec 0c             	sub    esp,0xc
c0021487:	52                   	push   edx
c0021488:	e8 9c e3 fe ff       	call   c000f829 <free>
c002148d:	83 c4 10             	add    esp,0x10
c0021490:	31 c0                	xor    eax,eax
c0021492:	83 c4 0c             	add    esp,0xc
c0021495:	c3                   	ret    

c0021496 <ISO9660::closeDir(void*)>:
c0021496:	83 ec 0c             	sub    esp,0xc
c0021499:	b8 04 00 00 00       	mov    eax,0x4
c002149e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00214a2:	85 d2                	test   edx,edx
c00214a4:	74 0e                	je     c00214b4 <ISO9660::closeDir(void*)+0x1e>
c00214a6:	83 ec 0c             	sub    esp,0xc
c00214a9:	52                   	push   edx
c00214aa:	e8 7a e3 fe ff       	call   c000f829 <free>
c00214af:	83 c4 10             	add    esp,0x10
c00214b2:	31 c0                	xor    eax,eax
c00214b4:	83 c4 0c             	add    esp,0xc
c00214b7:	c3                   	ret    

c00214b8 <ISO9660::~ISO9660()>:
c00214b8:	83 ec 0c             	sub    esp,0xc
c00214bb:	ba 58 c7 02 c0       	mov    edx,0xc002c758
c00214c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214c4:	89 10                	mov    DWORD PTR [eax],edx
c00214c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214ca:	83 ec 0c             	sub    esp,0xc
c00214cd:	50                   	push   eax
c00214ce:	e8 cd 16 ff ff       	call   c0012ba0 <Filesystem::~Filesystem()>
c00214d3:	83 c4 10             	add    esp,0x10
c00214d6:	90                   	nop
c00214d7:	83 c4 0c             	add    esp,0xc
c00214da:	c3                   	ret    
c00214db:	90                   	nop

c00214dc <ISO9660::~ISO9660()>:
c00214dc:	83 ec 0c             	sub    esp,0xc
c00214df:	83 ec 0c             	sub    esp,0xc
c00214e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00214e6:	e8 cd ff ff ff       	call   c00214b8 <ISO9660::~ISO9660()>
c00214eb:	83 c4 10             	add    esp,0x10
c00214ee:	83 ec 08             	sub    esp,0x8
c00214f1:	6a 08                	push   0x8
c00214f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00214f7:	e8 9d 12 ff ff       	call   c0012799 <operator delete(void*, unsigned long)>
c00214fc:	83 c4 10             	add    esp,0x10
c00214ff:	83 c4 0c             	add    esp,0xc
c0021502:	c3                   	ret    

c0021503 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0021503:	55                   	push   ebp
c0021504:	31 c9                	xor    ecx,ecx
c0021506:	57                   	push   edi
c0021507:	56                   	push   esi
c0021508:	53                   	push   ebx
c0021509:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c002150d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0021511:	89 eb                	mov    ebx,ebp
c0021513:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0021517:	39 ce                	cmp    esi,ecx
c0021519:	7e 17                	jle    c0021532 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c002151b:	31 d2                	xor    edx,edx
c002151d:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0021521:	7d 13                	jge    c0021536 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0021523:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021527:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c002152a:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c002152d:	75 0d                	jne    c002153c <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c002152f:	42                   	inc    edx
c0021530:	eb eb                	jmp    c002151d <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0021532:	31 c0                	xor    eax,eax
c0021534:	eb 0a                	jmp    c0021540 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021536:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c002153a:	eb 04                	jmp    c0021540 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c002153c:	41                   	inc    ecx
c002153d:	43                   	inc    ebx
c002153e:	eb d7                	jmp    c0021517 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0021540:	5b                   	pop    ebx
c0021541:	5e                   	pop    esi
c0021542:	5f                   	pop    edi
c0021543:	5d                   	pop    ebp
c0021544:	c3                   	ret    

c0021545 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0021545:	57                   	push   edi
c0021546:	56                   	push   esi
c0021547:	53                   	push   ebx
c0021548:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002154c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021550:	39 0d 20 f9 02 c0    	cmp    DWORD PTR ds:0xc002f920,ecx
c0021556:	75 08                	jne    c0021560 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c0021558:	38 05 b4 d7 02 c0    	cmp    BYTE PTR ds:0xc002d7b4,al
c002155e:	74 2b                	je     c002158b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c0021560:	83 ec 0c             	sub    esp,0xc
c0021563:	a2 b4 d7 02 c0       	mov    ds:0xc002d7b4,al
c0021568:	68 40 f9 02 c0       	push   0xc002f940
c002156d:	0f be c0             	movsx  eax,al
c0021570:	6a 01                	push   0x1
c0021572:	89 0d 20 f9 02 c0    	mov    DWORD PTR ds:0xc002f920,ecx
c0021578:	31 db                	xor    ebx,ebx
c002157a:	53                   	push   ebx
c002157b:	51                   	push   ecx
c002157c:	ff 34 85 1c e7 02 c0 	push   DWORD PTR [eax*4-0x3ffd18e4]
c0021583:	e8 44 4c ff ff       	call   c00161cc <LogicalDisk::read(unsigned long long, int, void*)>
c0021588:	83 c4 20             	add    esp,0x20
c002158b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c002158f:	be 40 f9 02 c0       	mov    esi,0xc002f940
c0021594:	b9 00 08 00 00       	mov    ecx,0x800
c0021599:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002159b:	5b                   	pop    ebx
c002159c:	5e                   	pop    esi
c002159d:	5f                   	pop    edi
c002159e:	c3                   	ret    
c002159f:	90                   	nop

c00215a0 <ISO9660::tryMount(LogicalDisk*, int)>:
c00215a0:	81 ec 10 08 00 00    	sub    esp,0x810
c00215a6:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c00215ad:	83 c0 41             	add    eax,0x41
c00215b0:	0f be c0             	movsx  eax,al
c00215b3:	50                   	push   eax
c00215b4:	8d 44 24 08          	lea    eax,[esp+0x8]
c00215b8:	50                   	push   eax
c00215b9:	6a 10                	push   0x10
c00215bb:	e8 85 ff ff ff       	call   c0021545 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00215c0:	83 c4 10             	add    esp,0x10
c00215c3:	31 c0                	xor    eax,eax
c00215c5:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c00215ca:	75 1d                	jne    c00215e9 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00215cc:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c00215d1:	75 16                	jne    c00215e9 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00215d3:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c00215d8:	75 0f                	jne    c00215e9 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00215da:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c00215df:	75 08                	jne    c00215e9 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00215e1:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c00215e6:	0f 94 c0             	sete   al
c00215e9:	81 c4 0c 08 00 00    	add    esp,0x80c
c00215ef:	c3                   	ret    

c00215f0 <ISO9660::read(void*, unsigned long, void*, int*)>:
c00215f0:	55                   	push   ebp
c00215f1:	57                   	push   edi
c00215f2:	56                   	push   esi
c00215f3:	53                   	push   ebx
c00215f4:	81 ec 2c 08 00 00    	sub    esp,0x82c
c00215fa:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0021601:	85 ed                	test   ebp,ebp
c0021603:	0f 84 da 01 00 00    	je     c00217e3 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0021609:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0021611:	0f 84 cc 01 00 00    	je     c00217e3 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0021617:	b8 01 00 00 00       	mov    eax,0x1
c002161c:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0021620:	0f 85 c2 01 00 00    	jne    c00217e8 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0021626:	31 d2                	xor    edx,edx
c0021628:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c002162f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0021632:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0021635:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0021638:	89 04 24             	mov    DWORD PTR [esp],eax
c002163b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002163f:	01 c8                	add    eax,ecx
c0021641:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0021644:	11 da                	adc    edx,ebx
c0021646:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c002164a:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002164e:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0021652:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021656:	19 d7                	sbb    edi,edx
c0021658:	72 11                	jb     c002166b <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c002165a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c002165d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0021661:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021665:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021669:	eb 0c                	jmp    c0021677 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c002166b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c002166f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021673:	29 ce                	sub    esi,ecx
c0021675:	19 df                	sbb    edi,ebx
c0021677:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002167a:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c002167d:	0f a4 c2 0b          	shld   edx,eax,0xb
c0021681:	c1 e0 0b             	shl    eax,0xb
c0021684:	01 c8                	add    eax,ecx
c0021686:	11 da                	adc    edx,ebx
c0021688:	89 04 24             	mov    DWORD PTR [esp],eax
c002168b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002168f:	51                   	push   ecx
c0021690:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021694:	50                   	push   eax
c0021695:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0021699:	53                   	push   ebx
c002169a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002169e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00216a2:	0f ac d0 0b          	shrd   eax,edx,0xb
c00216a6:	50                   	push   eax
c00216a7:	e8 99 fe ff ff       	call   c0021545 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00216ac:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00216af:	b8 00 08 00 00       	mov    eax,0x800
c00216b4:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00216ba:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c00216be:	29 d0                	sub    eax,edx
c00216c0:	83 c4 10             	add    esp,0x10
c00216c3:	89 f9                	mov    ecx,edi
c00216c5:	39 c6                	cmp    esi,eax
c00216c7:	83 d9 00             	sbb    ecx,0x0
c00216ca:	7d 1b                	jge    c00216e7 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c00216cc:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00216d1:	75 12                	jne    c00216e5 <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c00216d3:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00216da:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00216e0:	e9 fa 00 00 00       	jmp    c00217df <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c00216e5:	89 f0                	mov    eax,esi
c00216e7:	01 d3                	add    ebx,edx
c00216e9:	31 d2                	xor    edx,edx
c00216eb:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00216ef:	39 c2                	cmp    edx,eax
c00216f1:	7d 14                	jge    c0021707 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c00216f3:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c00216fa:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00216fe:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0021701:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0021704:	42                   	inc    edx
c0021705:	eb e8                	jmp    c00216ef <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c0021707:	89 c2                	mov    edx,eax
c0021709:	85 c0                	test   eax,eax
c002170b:	79 02                	jns    c002170f <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c002170d:	31 d2                	xor    edx,edx
c002170f:	01 c2                	add    edx,eax
c0021711:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0021714:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c002171b:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c002171f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0021723:	99                   	cdq    
c0021724:	01 c1                	add    ecx,eax
c0021726:	11 d3                	adc    ebx,edx
c0021728:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c002172c:	29 c6                	sub    esi,eax
c002172e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0021732:	19 d7                	sbb    edi,edx
c0021734:	89 34 24             	mov    DWORD PTR [esp],esi
c0021737:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c002173b:	b8 ff 07 00 00       	mov    eax,0x7ff
c0021740:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0021743:	b8 00 00 00 00       	mov    eax,0x0
c0021748:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c002174c:	7d 43                	jge    c0021791 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c002174e:	52                   	push   edx
c002174f:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021753:	50                   	push   eax
c0021754:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021758:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002175c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021760:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021764:	50                   	push   eax
c0021765:	e8 db fd ff ff       	call   c0021545 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002176a:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0021772:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0021777:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c002177f:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0021787:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c002178c:	83 c4 10             	add    esp,0x10
c002178f:	eb aa                	jmp    c002173b <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c0021791:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021795:	0b 04 24             	or     eax,DWORD PTR [esp]
c0021798:	74 2a                	je     c00217c4 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c002179a:	50                   	push   eax
c002179b:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002179f:	50                   	push   eax
c00217a0:	8d 74 24 28          	lea    esi,[esp+0x28]
c00217a4:	56                   	push   esi
c00217a5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00217a9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00217ad:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c00217b1:	51                   	push   ecx
c00217b2:	e8 8e fd ff ff       	call   c0021545 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00217b7:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00217bb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00217bf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00217c1:	83 c4 10             	add    esp,0x10
c00217c4:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00217cb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00217cf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00217d3:	89 18                	mov    DWORD PTR [eax],ebx
c00217d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00217d9:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00217dc:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00217df:	31 c0                	xor    eax,eax
c00217e1:	eb 05                	jmp    c00217e8 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c00217e3:	b8 04 00 00 00       	mov    eax,0x4
c00217e8:	81 c4 2c 08 00 00    	add    esp,0x82c
c00217ee:	5b                   	pop    ebx
c00217ef:	5e                   	pop    esi
c00217f0:	5f                   	pop    edi
c00217f1:	5d                   	pop    ebp
c00217f2:	c3                   	ret    
c00217f3:	90                   	nop

c00217f4 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c00217f4:	55                   	push   ebp
c00217f5:	57                   	push   edi
c00217f6:	56                   	push   esi
c00217f7:	53                   	push   ebx
c00217f8:	81 ec 5c 09 00 00    	sub    esp,0x95c
c00217fe:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c0021805:	85 ed                	test   ebp,ebp
c0021807:	0f 84 51 02 00 00    	je     c0021a5e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c002180d:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021815:	0f 84 43 02 00 00    	je     c0021a5e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c002181b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002181e:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c0021821:	75 0a                	jne    c002182d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021823:	b8 07 00 00 00       	mov    eax,0x7
c0021828:	e9 36 02 00 00       	jmp    c0021a63 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c002182d:	50                   	push   eax
c002182e:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021832:	50                   	push   eax
c0021833:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c002183a:	53                   	push   ebx
c002183b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002183e:	c1 e0 0b             	shl    eax,0xb
c0021841:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c0021844:	c1 e8 0b             	shr    eax,0xb
c0021847:	50                   	push   eax
c0021848:	e8 f8 fc ff ff       	call   c0021545 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002184d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021850:	83 c4 10             	add    esp,0x10
c0021853:	89 c1                	mov    ecx,eax
c0021855:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0021858:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c002185e:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021861:	84 db                	test   bl,bl
c0021863:	0f 85 8b 00 00 00    	jne    c00218f4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c0021869:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c002186f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0021872:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0021878:	29 c6                	sub    esi,eax
c002187a:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c002187e:	89 f3                	mov    ebx,esi
c0021880:	89 f1                	mov    ecx,esi
c0021882:	c1 fb 1f             	sar    ebx,0x1f
c0021885:	01 f0                	add    eax,esi
c0021887:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c002188a:	11 da                	adc    edx,ebx
c002188c:	89 04 24             	mov    DWORD PTR [esp],eax
c002188f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021893:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021896:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021899:	89 d8                	mov    eax,ebx
c002189b:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c002189f:	ba 00 00 00 00       	mov    edx,0x0
c00218a4:	19 f8                	sbb    eax,edi
c00218a6:	b8 00 00 00 00       	mov    eax,0x0
c00218ab:	73 08                	jae    c00218b5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c00218ad:	89 f0                	mov    eax,esi
c00218af:	89 fa                	mov    edx,edi
c00218b1:	29 c8                	sub    eax,ecx
c00218b3:	19 da                	sbb    edx,ebx
c00218b5:	89 d7                	mov    edi,edx
c00218b7:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c00218ba:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00218bd:	09 c7                	or     edi,eax
c00218bf:	0f 84 5e ff ff ff    	je     c0021823 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c00218c5:	57                   	push   edi
c00218c6:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00218ca:	50                   	push   eax
c00218cb:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c00218d2:	53                   	push   ebx
c00218d3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00218d6:	c1 e0 0b             	shl    eax,0xb
c00218d9:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00218dd:	c1 e8 0b             	shr    eax,0xb
c00218e0:	50                   	push   eax
c00218e1:	e8 5f fc ff ff       	call   c0021545 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00218e6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00218e9:	83 c4 10             	add    esp,0x10
c00218ec:	25 ff 07 00 00       	and    eax,0x7ff
c00218f1:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c00218f4:	31 ff                	xor    edi,edi
c00218f6:	56                   	push   esi
c00218f7:	6a 28                	push   0x28
c00218f9:	6a 00                	push   0x0
c00218fb:	8d 44 24 24          	lea    eax,[esp+0x24]
c00218ff:	50                   	push   eax
c0021900:	e8 4b ee fd ff       	call   c0000750 <memset>
c0021905:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021908:	25 ff 07 00 00       	and    eax,0x7ff
c002190d:	89 c6                	mov    esi,eax
c002190f:	83 c6 21             	add    esi,0x21
c0021912:	83 d7 00             	adc    edi,0x0
c0021915:	83 c4 10             	add    esp,0x10
c0021918:	31 c9                	xor    ecx,ecx
c002191a:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c0021921:	83 f9 28             	cmp    ecx,0x28
c0021924:	88 04 24             	mov    BYTE PTR [esp],al
c0021927:	0f 94 c2             	sete   dl
c002192a:	88 d0                	mov    al,dl
c002192c:	ba ff 07 00 00       	mov    edx,0x7ff
c0021931:	39 f2                	cmp    edx,esi
c0021933:	ba 00 00 00 00       	mov    edx,0x0
c0021938:	19 fa                	sbb    edx,edi
c002193a:	0f 92 c2             	setb   dl
c002193d:	09 c2                	or     edx,eax
c002193f:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021943:	0f 94 c0             	sete   al
c0021946:	08 d0                	or     al,dl
c0021948:	75 16                	jne    c0021960 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c002194a:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c002194e:	74 10                	je     c0021960 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0021950:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021953:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021957:	41                   	inc    ecx
c0021958:	83 c6 01             	add    esi,0x1
c002195b:	83 d7 00             	adc    edi,0x0
c002195e:	eb ba                	jmp    c002191a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c0021960:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021967:	83 ec 0c             	sub    esp,0xc
c002196a:	8d 74 24 24          	lea    esi,[esp+0x24]
c002196e:	56                   	push   esi
c002196f:	e8 f8 ed fd ff       	call   c000076c <strlen>
c0021974:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c002197b:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c002197f:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021987:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002198a:	5a                   	pop    edx
c002198b:	25 ff 07 00 00       	and    eax,0x7ff
c0021990:	59                   	pop    ecx
c0021991:	01 f8                	add    eax,edi
c0021993:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021999:	83 e0 02             	and    eax,0x2
c002199c:	3c 01                	cmp    al,0x1
c002199e:	19 c0                	sbb    eax,eax
c00219a0:	83 c0 02             	add    eax,0x2
c00219a3:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00219a7:	56                   	push   esi
c00219a8:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00219ac:	50                   	push   eax
c00219ad:	e8 5a ee fd ff       	call   c000080c <strcpy>
c00219b2:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c00219b6:	83 c4 10             	add    esp,0x10
c00219b9:	84 c0                	test   al,al
c00219bb:	75 21                	jne    c00219de <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c00219bd:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c00219c5:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00219cd:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c00219d5:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c00219dc:	eb 28                	jmp    c0021a06 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c00219de:	fe c8                	dec    al
c00219e0:	75 24                	jne    c0021a06 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c00219e2:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c00219ea:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00219f2:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c00219fa:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021a01:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021a06:	8d 74 24 40          	lea    esi,[esp+0x40]
c0021a0a:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c0021a11:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c0021a18:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021a1a:	0f b6 f3             	movzx  esi,bl
c0021a1d:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c0021a24:	31 db                	xor    ebx,ebx
c0021a26:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021a2c:	89 df                	mov    edi,ebx
c0021a2e:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c0021a31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021a34:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c0021a37:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021a3a:	39 c6                	cmp    esi,eax
c0021a3c:	19 d7                	sbb    edi,edx
c0021a3e:	72 10                	jb     c0021a50 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c0021a40:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0021a47:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c0021a4e:	eb 0a                	jmp    c0021a5a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c0021a50:	29 f0                	sub    eax,esi
c0021a52:	19 da                	sbb    edx,ebx
c0021a54:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0021a57:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0021a5a:	31 c0                	xor    eax,eax
c0021a5c:	eb 05                	jmp    c0021a63 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021a5e:	b8 04 00 00 00       	mov    eax,0x4
c0021a63:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021a69:	5b                   	pop    ebx
c0021a6a:	5e                   	pop    esi
c0021a6b:	5f                   	pop    edi
c0021a6c:	5d                   	pop    ebp
c0021a6d:	c3                   	ret    

c0021a6e <readRoot(unsigned int*, unsigned int*, char)>:
c0021a6e:	57                   	push   edi
c0021a6f:	56                   	push   esi
c0021a70:	81 ec 38 08 00 00    	sub    esp,0x838
c0021a76:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021a7e:	50                   	push   eax
c0021a7f:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021a83:	50                   	push   eax
c0021a84:	6a 10                	push   0x10
c0021a86:	e8 ba fa ff ff       	call   c0021545 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021a8b:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c0021a92:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c0021a96:	b9 22 00 00 00       	mov    ecx,0x22
c0021a9b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021a9d:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021aa4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021aa8:	89 10                	mov    DWORD PTR [eax],edx
c0021aaa:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021ab1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021ab5:	89 10                	mov    DWORD PTR [eax],edx
c0021ab7:	81 c4 44 08 00 00    	add    esp,0x844
c0021abd:	b0 01                	mov    al,0x1
c0021abf:	5e                   	pop    esi
c0021ac0:	5f                   	pop    edi
c0021ac1:	c3                   	ret    

c0021ac2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021ac2:	55                   	push   ebp
c0021ac3:	57                   	push   edi
c0021ac4:	56                   	push   esi
c0021ac5:	53                   	push   ebx
c0021ac6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021acc:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021ad3:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021ada:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021ade:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021ae2:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021ae6:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021aea:	75 03                	jne    c0021aef <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021aec:	83 c3 02             	add    ebx,0x2
c0021aef:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021af2:	75 03                	jne    c0021af7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021af4:	43                   	inc    ebx
c0021af5:	eb f8                	jmp    c0021aef <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021af7:	51                   	push   ecx
c0021af8:	68 00 01 00 00       	push   0x100
c0021afd:	6a 00                	push   0x0
c0021aff:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021b03:	50                   	push   eax
c0021b04:	e8 47 ec fd ff       	call   c0000750 <memset>
c0021b09:	83 c4 10             	add    esp,0x10
c0021b0c:	31 d2                	xor    edx,edx
c0021b0e:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021b11:	84 c0                	test   al,al
c0021b13:	74 21                	je     c0021b36 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021b15:	3c 2f                	cmp    al,0x2f
c0021b17:	75 0b                	jne    c0021b24 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021b19:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021b1d:	bd 01 00 00 00       	mov    ebp,0x1
c0021b22:	eb 14                	jmp    c0021b38 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021b24:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021b27:	80 f9 19             	cmp    cl,0x19
c0021b2a:	77 03                	ja     c0021b2f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021b2c:	83 e8 20             	sub    eax,0x20
c0021b2f:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021b33:	42                   	inc    edx
c0021b34:	eb d8                	jmp    c0021b0e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021b36:	31 ed                	xor    ebp,ebp
c0021b38:	83 ec 0c             	sub    esp,0xc
c0021b3b:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021b42:	e8 d2 dc fe ff       	call   c000f819 <malloc>
c0021b47:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021b4e:	89 c6                	mov    esi,eax
c0021b50:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021b56:	c1 ef 0b             	shr    edi,0xb
c0021b59:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021b60:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021b64:	83 c4 10             	add    esp,0x10
c0021b67:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021b6c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021b70:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021b77:	74 28                	je     c0021ba1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021b79:	52                   	push   edx
c0021b7a:	57                   	push   edi
c0021b7b:	50                   	push   eax
c0021b7c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021b80:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021b87:	e8 b9 f9 ff ff       	call   c0021545 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021b8c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021b90:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021b97:	05 00 08 00 00       	add    eax,0x800
c0021b9c:	83 c4 10             	add    esp,0x10
c0021b9f:	eb cb                	jmp    c0021b6c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021ba1:	83 ec 0c             	sub    esp,0xc
c0021ba4:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021ba8:	57                   	push   edi
c0021ba9:	e8 be eb fd ff       	call   c000076c <strlen>
c0021bae:	50                   	push   eax
c0021baf:	57                   	push   edi
c0021bb0:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021bb7:	56                   	push   esi
c0021bb8:	e8 46 f9 ff ff       	call   c0021503 <__memmem(unsigned char*, int, unsigned char*, int)>
c0021bbd:	83 c4 20             	add    esp,0x20
c0021bc0:	85 c0                	test   eax,eax
c0021bc2:	75 13                	jne    c0021bd7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021bc4:	83 ec 0c             	sub    esp,0xc
c0021bc7:	56                   	push   esi
c0021bc8:	e8 5c dc fe ff       	call   c000f829 <free>
c0021bcd:	83 c4 10             	add    esp,0x10
c0021bd0:	31 c0                	xor    eax,eax
c0021bd2:	e9 b3 00 00 00       	jmp    c0021c8a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021bd7:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021bdb:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021bdf:	c1 e7 08             	shl    edi,0x8
c0021be2:	c1 e2 10             	shl    edx,0x10
c0021be5:	09 d7                	or     edi,edx
c0021be7:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021beb:	09 d7                	or     edi,edx
c0021bed:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021bf1:	c1 e2 18             	shl    edx,0x18
c0021bf4:	09 d7                	or     edi,edx
c0021bf6:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021bfa:	89 d1                	mov    ecx,edx
c0021bfc:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021c00:	c1 e1 08             	shl    ecx,0x8
c0021c03:	c1 e2 10             	shl    edx,0x10
c0021c06:	09 ca                	or     edx,ecx
c0021c08:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021c0c:	09 ca                	or     edx,ecx
c0021c0e:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021c12:	c1 e1 18             	shl    ecx,0x18
c0021c15:	09 ca                	or     edx,ecx
c0021c17:	89 e9                	mov    ecx,ebp
c0021c19:	84 c9                	test   cl,cl
c0021c1b:	74 3c                	je     c0021c59 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021c1d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021c21:	83 ec 0c             	sub    esp,0xc
c0021c24:	56                   	push   esi
c0021c25:	e8 ff db fe ff       	call   c000f829 <free>
c0021c2a:	83 c4 0c             	add    esp,0xc
c0021c2d:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021c34:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021c39:	50                   	push   eax
c0021c3a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021c41:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021c48:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021c4c:	52                   	push   edx
c0021c4d:	57                   	push   edi
c0021c4e:	53                   	push   ebx
c0021c4f:	e8 6e fe ff ff       	call   c0021ac2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021c54:	83 c4 20             	add    esp,0x20
c0021c57:	eb 31                	jmp    c0021c8a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021c59:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021c5c:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021c63:	d0 e8                	shr    al,1
c0021c65:	89 3b                	mov    DWORD PTR [ebx],edi
c0021c67:	83 e0 01             	and    eax,0x1
c0021c6a:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021c71:	83 ec 0c             	sub    esp,0xc
c0021c74:	89 13                	mov    DWORD PTR [ebx],edx
c0021c76:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021c7d:	89 03                	mov    DWORD PTR [ebx],eax
c0021c7f:	56                   	push   esi
c0021c80:	e8 a4 db fe ff       	call   c000f829 <free>
c0021c85:	83 c4 10             	add    esp,0x10
c0021c88:	b0 01                	mov    al,0x1
c0021c8a:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021c90:	5b                   	pop    ebx
c0021c91:	5e                   	pop    esi
c0021c92:	5f                   	pop    edi
c0021c93:	5d                   	pop    ebp
c0021c94:	c3                   	ret    

c0021c95 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021c95:	55                   	push   ebp
c0021c96:	57                   	push   edi
c0021c97:	56                   	push   esi
c0021c98:	53                   	push   ebx
c0021c99:	83 ec 20             	sub    esp,0x20
c0021c9c:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021ca0:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021ca4:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021ca8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021cb0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021cb8:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021cbd:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021cc3:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021cc9:	57                   	push   edi
c0021cca:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021cce:	50                   	push   eax
c0021ccf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021cd3:	50                   	push   eax
c0021cd4:	e8 95 fd ff ff       	call   c0021a6e <readRoot(unsigned int*, unsigned int*, char)>
c0021cd9:	5a                   	pop    edx
c0021cda:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021cde:	e8 89 ea fd ff       	call   c000076c <strlen>
c0021ce3:	83 c4 10             	add    esp,0x10
c0021ce6:	83 f8 03             	cmp    eax,0x3
c0021ce9:	77 17                	ja     c0021d02 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021ceb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021cef:	89 03                	mov    DWORD PTR [ebx],eax
c0021cf1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021cf5:	89 06                	mov    DWORD PTR [esi],eax
c0021cf7:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021cfe:	b0 01                	mov    al,0x1
c0021d00:	eb 19                	jmp    c0021d1b <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0021d02:	50                   	push   eax
c0021d03:	55                   	push   ebp
c0021d04:	57                   	push   edi
c0021d05:	56                   	push   esi
c0021d06:	53                   	push   ebx
c0021d07:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021d0b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021d0f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021d13:	e8 aa fd ff ff       	call   c0021ac2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021d18:	83 c4 20             	add    esp,0x20
c0021d1b:	83 c4 1c             	add    esp,0x1c
c0021d1e:	5b                   	pop    ebx
c0021d1f:	5e                   	pop    esi
c0021d20:	5f                   	pop    edi
c0021d21:	5d                   	pop    ebp
c0021d22:	c3                   	ret    
c0021d23:	90                   	nop

c0021d24 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021d24:	57                   	push   edi
c0021d25:	56                   	push   esi
c0021d26:	53                   	push   ebx
c0021d27:	83 ec 10             	sub    esp,0x10
c0021d2a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021d2e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021d32:	85 ff                	test   edi,edi
c0021d34:	0f 84 8b 00 00 00    	je     c0021dc5 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c0021d3a:	85 f6                	test   esi,esi
c0021d3c:	0f 84 83 00 00 00    	je     c0021dc5 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c0021d42:	b8 03 00 00 00       	mov    eax,0x3
c0021d47:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021d4c:	75 7c                	jne    c0021dca <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0021d4e:	83 ec 0c             	sub    esp,0xc
c0021d51:	6a 1c                	push   0x1c
c0021d53:	e8 c1 da fe ff       	call   c000f819 <malloc>
c0021d58:	89 07                	mov    DWORD PTR [edi],eax
c0021d5a:	89 c3                	mov    ebx,eax
c0021d5c:	58                   	pop    eax
c0021d5d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021d61:	50                   	push   eax
c0021d62:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021d65:	50                   	push   eax
c0021d66:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021d6a:	50                   	push   eax
c0021d6b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021d6f:	50                   	push   eax
c0021d70:	56                   	push   esi
c0021d71:	e8 1f ff ff ff       	call   c0021c95 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021d76:	83 c4 20             	add    esp,0x20
c0021d79:	84 c0                	test   al,al
c0021d7b:	74 07                	je     c0021d84 <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c0021d7d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021d82:	74 0b                	je     c0021d8f <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c0021d84:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021d88:	b8 01 00 00 00       	mov    eax,0x1
c0021d8d:	eb 3b                	jmp    c0021dca <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0021d8f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d93:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021d97:	89 03                	mov    DWORD PTR [ebx],eax
c0021d99:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021da0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021da4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021dab:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021db2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021db5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021dbc:	8a 06                	mov    al,BYTE PTR [esi]
c0021dbe:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021dc1:	31 c0                	xor    eax,eax
c0021dc3:	eb 05                	jmp    c0021dca <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0021dc5:	b8 04 00 00 00       	mov    eax,0x4
c0021dca:	83 c4 10             	add    esp,0x10
c0021dcd:	5b                   	pop    ebx
c0021dce:	5e                   	pop    esi
c0021dcf:	5f                   	pop    edi
c0021dd0:	c3                   	ret    
c0021dd1:	90                   	nop

c0021dd2 <ISO9660::exists(char const*)>:
c0021dd2:	83 ec 28             	sub    esp,0x28
c0021dd5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021dd9:	8d 54 24 18          	lea    edx,[esp+0x18]
c0021ddd:	52                   	push   edx
c0021dde:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0021de1:	52                   	push   edx
c0021de2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021de6:	52                   	push   edx
c0021de7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021deb:	52                   	push   edx
c0021dec:	50                   	push   eax
c0021ded:	e8 a3 fe ff ff       	call   c0021c95 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021df2:	83 c4 3c             	add    esp,0x3c
c0021df5:	c3                   	ret    

c0021df6 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0021df6:	56                   	push   esi
c0021df7:	53                   	push   ebx
c0021df8:	83 ec 14             	sub    esp,0x14
c0021dfb:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0021dff:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0021e03:	85 db                	test   ebx,ebx
c0021e05:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0021e09:	0f 94 c2             	sete   dl
c0021e0c:	85 f6                	test   esi,esi
c0021e0e:	0f 94 c0             	sete   al
c0021e11:	08 c2                	or     dl,al
c0021e13:	75 68                	jne    c0021e7d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021e15:	85 c9                	test   ecx,ecx
c0021e17:	74 64                	je     c0021e7d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021e19:	83 ec 0c             	sub    esp,0xc
c0021e1c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021e1f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021e23:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021e29:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021e30:	50                   	push   eax
c0021e31:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0021e34:	50                   	push   eax
c0021e35:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021e39:	50                   	push   eax
c0021e3a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021e3e:	50                   	push   eax
c0021e3f:	51                   	push   ecx
c0021e40:	e8 50 fe ff ff       	call   c0021c95 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021e45:	83 c4 20             	add    esp,0x20
c0021e48:	ba 01 00 00 00       	mov    edx,0x1
c0021e4d:	84 c0                	test   al,al
c0021e4f:	74 31                	je     c0021e82 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021e51:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021e55:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021e5c:	89 03                	mov    DWORD PTR [ebx],eax
c0021e5e:	ba 00 00 00 00       	mov    edx,0x0
c0021e63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021e67:	85 c0                	test   eax,eax
c0021e69:	0f 95 06             	setne  BYTE PTR [esi]
c0021e6c:	74 14                	je     c0021e82 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021e6e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021e74:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021e7b:	eb 05                	jmp    c0021e82 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021e7d:	ba 04 00 00 00       	mov    edx,0x4
c0021e82:	83 c4 14             	add    esp,0x14
c0021e85:	89 d0                	mov    eax,edx
c0021e87:	5b                   	pop    ebx
c0021e88:	5e                   	pop    esi
c0021e89:	c3                   	ret    

c0021e8a <ISO9660::openDir(char const*, void**)>:
c0021e8a:	57                   	push   edi
c0021e8b:	56                   	push   esi
c0021e8c:	53                   	push   ebx
c0021e8d:	83 ec 10             	sub    esp,0x10
c0021e90:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021e94:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021e98:	85 ff                	test   edi,edi
c0021e9a:	74 7b                	je     c0021f17 <ISO9660::openDir(char const*, void**)+0x8d>
c0021e9c:	85 f6                	test   esi,esi
c0021e9e:	74 77                	je     c0021f17 <ISO9660::openDir(char const*, void**)+0x8d>
c0021ea0:	83 ec 0c             	sub    esp,0xc
c0021ea3:	6a 1c                	push   0x1c
c0021ea5:	e8 6f d9 fe ff       	call   c000f819 <malloc>
c0021eaa:	89 07                	mov    DWORD PTR [edi],eax
c0021eac:	89 c3                	mov    ebx,eax
c0021eae:	58                   	pop    eax
c0021eaf:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021eb3:	50                   	push   eax
c0021eb4:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021eb7:	50                   	push   eax
c0021eb8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021ebc:	50                   	push   eax
c0021ebd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021ec1:	50                   	push   eax
c0021ec2:	56                   	push   esi
c0021ec3:	e8 cd fd ff ff       	call   c0021c95 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021ec8:	83 c4 20             	add    esp,0x20
c0021ecb:	84 c0                	test   al,al
c0021ecd:	74 07                	je     c0021ed6 <ISO9660::openDir(char const*, void**)+0x4c>
c0021ecf:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021ed4:	75 0b                	jne    c0021ee1 <ISO9660::openDir(char const*, void**)+0x57>
c0021ed6:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021eda:	b8 01 00 00 00       	mov    eax,0x1
c0021edf:	eb 3b                	jmp    c0021f1c <ISO9660::openDir(char const*, void**)+0x92>
c0021ee1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ee5:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021ee9:	89 03                	mov    DWORD PTR [ebx],eax
c0021eeb:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021ef2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021ef6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021efd:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021f04:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021f07:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021f0e:	8a 06                	mov    al,BYTE PTR [esi]
c0021f10:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021f13:	31 c0                	xor    eax,eax
c0021f15:	eb 05                	jmp    c0021f1c <ISO9660::openDir(char const*, void**)+0x92>
c0021f17:	b8 04 00 00 00       	mov    eax,0x4
c0021f1c:	83 c4 10             	add    esp,0x10
c0021f1f:	5b                   	pop    ebx
c0021f20:	5e                   	pop    esi
c0021f21:	5f                   	pop    edi
c0021f22:	c3                   	ret    
c0021f23:	90                   	nop

c0021f24 <ISO9660::ISO9660()>:
c0021f24:	83 ec 0c             	sub    esp,0xc
c0021f27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f2b:	83 ec 0c             	sub    esp,0xc
c0021f2e:	50                   	push   eax
c0021f2f:	e8 48 0c ff ff       	call   c0012b7c <Filesystem::Filesystem()>
c0021f34:	83 c4 10             	add    esp,0x10
c0021f37:	ba 58 c7 02 c0       	mov    edx,0xc002c758
c0021f3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f40:	89 10                	mov    DWORD PTR [eax],edx
c0021f42:	90                   	nop
c0021f43:	83 c4 0c             	add    esp,0xc
c0021f46:	c3                   	ret    
c0021f47:	90                   	nop

c0021f48 <SoundChannel::SoundChannel(int, int, int, int)>:
c0021f48:	83 ec 1c             	sub    esp,0x1c
c0021f4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f4f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0021f53:	89 10                	mov    DWORD PTR [eax],edx
c0021f55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f59:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021f5d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021f60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f64:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021f68:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021f6b:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0021f70:	75 23                	jne    c0021f95 <SoundChannel::SoundChannel(int, int, int, int)+0x4d>
c0021f72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f76:	8b 10                	mov    edx,DWORD PTR [eax]
c0021f78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021f7f:	0f af c2             	imul   eax,edx
c0021f82:	85 c0                	test   eax,eax
c0021f84:	79 03                	jns    c0021f89 <SoundChannel::SoundChannel(int, int, int, int)+0x41>
c0021f86:	83 c0 03             	add    eax,0x3
c0021f89:	c1 f8 02             	sar    eax,0x2
c0021f8c:	05 a0 0f 00 00       	add    eax,0xfa0
c0021f91:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021f95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f99:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021f9d:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0021fa0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021fa4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0021fab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021faf:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0021fb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021fba:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021fbd:	c1 e0 02             	shl    eax,0x2
c0021fc0:	83 ec 0c             	sub    esp,0xc
c0021fc3:	50                   	push   eax
c0021fc4:	e8 50 d8 fe ff       	call   c000f819 <malloc>
c0021fc9:	83 c4 10             	add    esp,0x10
c0021fcc:	89 c2                	mov    edx,eax
c0021fce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021fd2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0021fd5:	83 ec 04             	sub    esp,0x4
c0021fd8:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021fdc:	50                   	push   eax
c0021fdd:	6a 01                	push   0x1
c0021fdf:	6a 04                	push   0x4
c0021fe1:	e8 b5 6d fe ff       	call   c0008d9b <src_new>
c0021fe6:	83 c4 10             	add    esp,0x10
c0021fe9:	89 c2                	mov    edx,eax
c0021feb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021fef:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0021ff2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ff6:	85 c0                	test   eax,eax
c0021ff8:	74 10                	je     c002200a <SoundChannel::SoundChannel(int, int, int, int)+0xc2>
c0021ffa:	83 ec 0c             	sub    esp,0xc
c0021ffd:	68 b8 c7 02 c0       	push   0xc002c7b8
c0022002:	e8 36 81 ff ff       	call   c001a13d <Krnl::panic(char const*)>
c0022007:	83 c4 10             	add    esp,0x10
c002200a:	a0 40 05 03 c0       	mov    al,ds:0xc0030540
c002200f:	83 f0 01             	xor    eax,0x1
c0022012:	84 c0                	test   al,al
c0022014:	74 57                	je     c002206d <SoundChannel::SoundChannel(int, int, int, int)+0x125>
c0022016:	a1 d4 c7 02 c0       	mov    eax,ds:0xc002c7d4
c002201b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002201f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022027:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c002202f:	7f 35                	jg     c0022066 <SoundChannel::SoundChannel(int, int, int, int)+0x11e>
c0022031:	83 ec 0c             	sub    esp,0xc
c0022034:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022038:	e8 62 54 00 00       	call   c002749f <__floatsisf>
c002203d:	83 c4 10             	add    esp,0x10
c0022040:	8b 15 d4 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c7d4
c0022046:	83 ec 08             	sub    esp,0x8
c0022049:	52                   	push   edx
c002204a:	50                   	push   eax
c002204b:	e8 61 50 00 00       	call   c00270b1 <__mulsf3>
c0022050:	83 c4 10             	add    esp,0x10
c0022053:	89 c2                	mov    edx,eax
c0022055:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022059:	89 14 85 40 01 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfec0],edx
c0022060:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022064:	eb c1                	jmp    c0022027 <SoundChannel::SoundChannel(int, int, int, int)+0xdf>
c0022066:	c6 05 40 05 03 c0 01 	mov    BYTE PTR ds:0xc0030540,0x1
c002206d:	90                   	nop
c002206e:	83 c4 1c             	add    esp,0x1c
c0022071:	c3                   	ret    

c0022072 <SoundChannel::~SoundChannel()>:
c0022072:	83 ec 0c             	sub    esp,0xc
c0022075:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022079:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002207c:	83 ec 0c             	sub    esp,0xc
c002207f:	50                   	push   eax
c0022080:	e8 a4 d7 fe ff       	call   c000f829 <free>
c0022085:	83 c4 10             	add    esp,0x10
c0022088:	90                   	nop
c0022089:	83 c4 0c             	add    esp,0xc
c002208c:	c3                   	ret    
c002208d:	90                   	nop

c002208e <SoundChannel::getSampleRate()>:
c002208e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022092:	8b 00                	mov    eax,DWORD PTR [eax]
c0022094:	c3                   	ret    
c0022095:	90                   	nop

c0022096 <SoundChannel::getBits()>:
c0022096:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002209a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002209d:	c3                   	ret    

c002209e <SoundChannel::getBufferUsed()>:
c002209e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220a2:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00220a5:	c3                   	ret    

c00220a6 <SoundChannel::getBufferSize()>:
c00220a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220aa:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00220ad:	c3                   	ret    

c00220ae <SoundChannel::unbuffer(float*, int, int)>:
c00220ae:	56                   	push   esi
c00220af:	53                   	push   ebx
c00220b0:	83 ec 40             	sub    esp,0x40
c00220b3:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00220b7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00220ba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00220be:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00220c1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00220c5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00220c9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00220cd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00220d1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00220d5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00220d9:	e8 c1 53 00 00       	call   c002749f <__floatsisf>
c00220de:	5a                   	pop    edx
c00220df:	89 c6                	mov    esi,eax
c00220e1:	ff 33                	push   DWORD PTR [ebx]
c00220e3:	e8 b7 53 00 00       	call   c002749f <__floatsisf>
c00220e8:	59                   	pop    ecx
c00220e9:	5a                   	pop    edx
c00220ea:	50                   	push   eax
c00220eb:	56                   	push   esi
c00220ec:	e8 83 51 00 00       	call   c0027274 <__divsf3>
c00220f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00220f4:	e8 76 66 00 00       	call   c002876f <__extendsfdf2>
c00220f9:	59                   	pop    ecx
c00220fa:	5e                   	pop    esi
c00220fb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00220ff:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0022103:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c002210b:	8d 44 24 14          	lea    eax,[esp+0x14]
c002210f:	50                   	push   eax
c0022110:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0022113:	e8 78 68 fe ff       	call   c0008990 <src_process>
c0022118:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002211c:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c002211f:	83 c4 0c             	add    esp,0xc
c0022122:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0022125:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0022128:	29 d0                	sub    eax,edx
c002212a:	c1 e0 02             	shl    eax,0x2
c002212d:	50                   	push   eax
c002212e:	8d 04 91             	lea    eax,[ecx+edx*4]
c0022131:	50                   	push   eax
c0022132:	51                   	push   ecx
c0022133:	e8 50 e5 fd ff       	call   c0000688 <memmove>
c0022138:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002213c:	83 c4 44             	add    esp,0x44
c002213f:	5b                   	pop    ebx
c0022140:	5e                   	pop    esi
c0022141:	c3                   	ret    

c0022142 <SoundChannel::buffer16(short*, int)>:
c0022142:	55                   	push   ebp
c0022143:	57                   	push   edi
c0022144:	56                   	push   esi
c0022145:	53                   	push   ebx
c0022146:	83 ec 1c             	sub    esp,0x1c
c0022149:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002214d:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0022150:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0022153:	0f 84 d2 00 00 00    	je     c002222b <SoundChannel::buffer16(short*, int)+0xe9>
c0022159:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c002215d:	85 ed                	test   ebp,ebp
c002215f:	0f 8e c6 00 00 00    	jle    c002222b <SoundChannel::buffer16(short*, int)+0xe9>
c0022165:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0022169:	bd 00 00 00 38       	mov    ebp,0x38000000
c002216e:	83 ec 0c             	sub    esp,0xc
c0022171:	0f bf 00             	movsx  eax,WORD PTR [eax]
c0022174:	50                   	push   eax
c0022175:	e8 25 53 00 00       	call   c002749f <__floatsisf>
c002217a:	59                   	pop    ecx
c002217b:	8d 4e 01             	lea    ecx,[esi+0x1]
c002217e:	5f                   	pop    edi
c002217f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0022182:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0022185:	55                   	push   ebp
c0022186:	50                   	push   eax
c0022187:	e8 25 4f 00 00       	call   c00270b1 <__mulsf3>
c002218c:	83 c4 10             	add    esp,0x10
c002218f:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0022192:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0022195:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0022198:	0f 84 99 00 00 00    	je     c0022237 <SoundChannel::buffer16(short*, int)+0xf5>
c002219e:	83 7c 24 38 01       	cmp    DWORD PTR [esp+0x38],0x1
c00221a3:	74 78                	je     c002221d <SoundChannel::buffer16(short*, int)+0xdb>
c00221a5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00221a9:	83 ec 0c             	sub    esp,0xc
c00221ac:	0f bf 40 02          	movsx  eax,WORD PTR [eax+0x2]
c00221b0:	50                   	push   eax
c00221b1:	e8 e9 52 00 00       	call   c002749f <__floatsisf>
c00221b6:	5f                   	pop    edi
c00221b7:	8d 4e 01             	lea    ecx,[esi+0x1]
c00221ba:	5a                   	pop    edx
c00221bb:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c00221be:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c00221c1:	55                   	push   ebp
c00221c2:	50                   	push   eax
c00221c3:	e8 e9 4e 00 00       	call   c00270b1 <__mulsf3>
c00221c8:	83 c4 10             	add    esp,0x10
c00221cb:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c00221ce:	be 02 00 00 00       	mov    esi,0x2
c00221d3:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c00221d6:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c00221d9:	74 46                	je     c0022221 <SoundChannel::buffer16(short*, int)+0xdf>
c00221db:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00221df:	eb 36                	jmp    c0022217 <SoundChannel::buffer16(short*, int)+0xd5>
c00221e1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00221e5:	83 ec 0c             	sub    esp,0xc
c00221e8:	0f bf 04 70          	movsx  eax,WORD PTR [eax+esi*2]
c00221ec:	46                   	inc    esi
c00221ed:	50                   	push   eax
c00221ee:	e8 ac 52 00 00       	call   c002749f <__floatsisf>
c00221f3:	5a                   	pop    edx
c00221f4:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c00221f7:	59                   	pop    ecx
c00221f8:	8d 4f 01             	lea    ecx,[edi+0x1]
c00221fb:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c00221fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022202:	50                   	push   eax
c0022203:	e8 a9 4e 00 00       	call   c00270b1 <__mulsf3>
c0022208:	83 c4 10             	add    esp,0x10
c002220b:	89 44 bd 00          	mov    DWORD PTR [ebp+edi*4+0x0],eax
c002220f:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0022212:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0022215:	74 0a                	je     c0022221 <SoundChannel::buffer16(short*, int)+0xdf>
c0022217:	39 74 24 38          	cmp    DWORD PTR [esp+0x38],esi
c002221b:	75 c4                	jne    c00221e1 <SoundChannel::buffer16(short*, int)+0x9f>
c002221d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0022221:	83 c4 1c             	add    esp,0x1c
c0022224:	89 f0                	mov    eax,esi
c0022226:	5b                   	pop    ebx
c0022227:	5e                   	pop    esi
c0022228:	5f                   	pop    edi
c0022229:	5d                   	pop    ebp
c002222a:	c3                   	ret    
c002222b:	83 c4 1c             	add    esp,0x1c
c002222e:	31 f6                	xor    esi,esi
c0022230:	5b                   	pop    ebx
c0022231:	89 f0                	mov    eax,esi
c0022233:	5e                   	pop    esi
c0022234:	5f                   	pop    edi
c0022235:	5d                   	pop    ebp
c0022236:	c3                   	ret    
c0022237:	be 01 00 00 00       	mov    esi,0x1
c002223c:	eb e3                	jmp    c0022221 <SoundChannel::buffer16(short*, int)+0xdf>

c002223e <SoundChannel::buffer8(unsigned char*, int)>:
c002223e:	55                   	push   ebp
c002223f:	57                   	push   edi
c0022240:	56                   	push   esi
c0022241:	53                   	push   ebx
c0022242:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022246:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c002224a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c002224d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0022251:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022254:	74 7a                	je     c00222d0 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022256:	85 ff                	test   edi,edi
c0022258:	7e 76                	jle    c00222d0 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c002225a:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c002225e:	8d 70 01             	lea    esi,[eax+0x1]
c0022261:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022264:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022267:	8b 1c 9d 40 01 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcfec0]
c002226e:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022271:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022274:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022277:	74 5e                	je     c00222d7 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0022279:	83 ff 01             	cmp    edi,0x1
c002227c:	74 4b                	je     c00222c9 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c002227e:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0022282:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022285:	8d 70 01             	lea    esi,[eax+0x1]
c0022288:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002228b:	8b 1c 9d 40 01 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcfec0]
c0022292:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022295:	b8 02 00 00 00       	mov    eax,0x2
c002229a:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c002229d:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c00222a0:	75 23                	jne    c00222c5 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c00222a2:	eb 27                	jmp    c00222cb <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c00222a4:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c00222a9:	8d 71 01             	lea    esi,[ecx+0x1]
c00222ac:	40                   	inc    eax
c00222ad:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00222b0:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c00222b3:	8b 1c 9d 40 01 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcfec0]
c00222ba:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c00222bd:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c00222c0:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c00222c3:	74 06                	je     c00222cb <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c00222c5:	39 c7                	cmp    edi,eax
c00222c7:	75 db                	jne    c00222a4 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c00222c9:	89 f8                	mov    eax,edi
c00222cb:	5b                   	pop    ebx
c00222cc:	5e                   	pop    esi
c00222cd:	5f                   	pop    edi
c00222ce:	5d                   	pop    ebp
c00222cf:	c3                   	ret    
c00222d0:	5b                   	pop    ebx
c00222d1:	31 c0                	xor    eax,eax
c00222d3:	5e                   	pop    esi
c00222d4:	5f                   	pop    edi
c00222d5:	5d                   	pop    ebp
c00222d6:	c3                   	ret    
c00222d7:	b8 01 00 00 00       	mov    eax,0x1
c00222dc:	eb ed                	jmp    c00222cb <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c00222de <SoundDevice::SoundDevice(char const*)>:
c00222de:	83 ec 1c             	sub    esp,0x1c
c00222e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222e5:	83 ec 08             	sub    esp,0x8
c00222e8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00222ec:	50                   	push   eax
c00222ed:	e8 bc 1b ff ff       	call   c0013eae <Device::Device(char const*)>
c00222f2:	83 c4 10             	add    esp,0x10
c00222f5:	ba e0 c7 02 c0       	mov    edx,0xc002c7e0
c00222fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222fe:	89 10                	mov    DWORD PTR [eax],edx
c0022300:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022304:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c002230e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022312:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c002231c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022324:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022329:	7f 19                	jg     c0022344 <SoundDevice::SoundDevice(char const*)+0x66>
c002232b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002232f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022333:	83 c2 54             	add    edx,0x54
c0022336:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c002233e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022342:	eb e0                	jmp    c0022324 <SoundDevice::SoundDevice(char const*)+0x46>
c0022344:	90                   	nop
c0022345:	83 c4 1c             	add    esp,0x1c
c0022348:	c3                   	ret    
c0022349:	90                   	nop

c002234a <SoundDevice::~SoundDevice()>:
c002234a:	53                   	push   ebx
c002234b:	83 ec 18             	sub    esp,0x18
c002234e:	ba e0 c7 02 c0       	mov    edx,0xc002c7e0
c0022353:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022357:	89 10                	mov    DWORD PTR [eax],edx
c0022359:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022361:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022366:	7f 46                	jg     c00223ae <SoundDevice::~SoundDevice()+0x64>
c0022368:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002236c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022370:	83 c2 54             	add    edx,0x54
c0022373:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0022377:	85 c0                	test   eax,eax
c0022379:	74 2d                	je     c00223a8 <SoundDevice::~SoundDevice()+0x5e>
c002237b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002237f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022383:	83 c2 54             	add    edx,0x54
c0022386:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c002238a:	85 db                	test   ebx,ebx
c002238c:	74 1a                	je     c00223a8 <SoundDevice::~SoundDevice()+0x5e>
c002238e:	83 ec 0c             	sub    esp,0xc
c0022391:	53                   	push   ebx
c0022392:	e8 db fc ff ff       	call   c0022072 <SoundChannel::~SoundChannel()>
c0022397:	83 c4 10             	add    esp,0x10
c002239a:	83 ec 08             	sub    esp,0x8
c002239d:	6a 2c                	push   0x2c
c002239f:	53                   	push   ebx
c00223a0:	e8 f4 03 ff ff       	call   c0012799 <operator delete(void*, unsigned long)>
c00223a5:	83 c4 10             	add    esp,0x10
c00223a8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00223ac:	eb b3                	jmp    c0022361 <SoundDevice::~SoundDevice()+0x17>
c00223ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223b2:	83 ec 0c             	sub    esp,0xc
c00223b5:	50                   	push   eax
c00223b6:	e8 bd 17 ff ff       	call   c0013b78 <Device::~Device()>
c00223bb:	83 c4 10             	add    esp,0x10
c00223be:	90                   	nop
c00223bf:	83 c4 18             	add    esp,0x18
c00223c2:	5b                   	pop    ebx
c00223c3:	c3                   	ret    

c00223c4 <SoundDevice::~SoundDevice()>:
c00223c4:	83 ec 0c             	sub    esp,0xc
c00223c7:	83 ec 0c             	sub    esp,0xc
c00223ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00223ce:	e8 77 ff ff ff       	call   c002234a <SoundDevice::~SoundDevice()>
c00223d3:	83 c4 10             	add    esp,0x10
c00223d6:	83 ec 08             	sub    esp,0x8
c00223d9:	68 e4 01 00 00       	push   0x1e4
c00223de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00223e2:	e8 b2 03 ff ff       	call   c0012799 <operator delete(void*, unsigned long)>
c00223e7:	83 c4 10             	add    esp,0x10
c00223ea:	83 c4 0c             	add    esp,0xc
c00223ed:	c3                   	ret    

c00223ee <SoundDevice::getFreeChannelNum()>:
c00223ee:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00223f2:	31 c0                	xor    eax,eax
c00223f4:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c00223fc:	74 09                	je     c0022407 <SoundDevice::getFreeChannelNum()+0x19>
c00223fe:	40                   	inc    eax
c00223ff:	83 f8 20             	cmp    eax,0x20
c0022402:	75 f0                	jne    c00223f4 <SoundDevice::getFreeChannelNum()+0x6>
c0022404:	83 c8 ff             	or     eax,0xffffffff
c0022407:	c3                   	ret    

c0022408 <SoundDevice::addChannel(SoundChannel*)>:
c0022408:	56                   	push   esi
c0022409:	53                   	push   ebx
c002240a:	51                   	push   ecx
c002240b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002240f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0022413:	53                   	push   ebx
c0022414:	e8 d5 ff ff ff       	call   c00223ee <SoundDevice::getFreeChannelNum()>
c0022419:	5a                   	pop    edx
c002241a:	83 f8 ff             	cmp    eax,0xffffffff
c002241d:	74 51                	je     c0022470 <SoundDevice::addChannel(SoundChannel*)+0x68>
c002241f:	85 f6                	test   esi,esi
c0022421:	74 4d                	je     c0022470 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022423:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c002242a:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0022431:	75 30                	jne    c0022463 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0022433:	83 ec 0c             	sub    esp,0xc
c0022436:	56                   	push   esi
c0022437:	e8 52 fc ff ff       	call   c002208e <SoundChannel::getSampleRate()>
c002243c:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0022442:	89 34 24             	mov    DWORD PTR [esp],esi
c0022445:	e8 4c fc ff ff       	call   c0022096 <SoundChannel::getBits()>
c002244a:	83 c4 0c             	add    esp,0xc
c002244d:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0022453:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022455:	50                   	push   eax
c0022456:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c002245c:	53                   	push   ebx
c002245d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0022460:	83 c4 10             	add    esp,0x10
c0022463:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0022469:	b8 01 00 00 00       	mov    eax,0x1
c002246e:	eb 03                	jmp    c0022473 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0022470:	83 c8 ff             	or     eax,0xffffffff
c0022473:	5a                   	pop    edx
c0022474:	5b                   	pop    ebx
c0022475:	5e                   	pop    esi
c0022476:	c3                   	ret    
c0022477:	90                   	nop

c0022478 <SoundDevice::removeChannel(int)>:
c0022478:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002247c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022480:	83 fa 1f             	cmp    edx,0x1f
c0022483:	77 23                	ja     c00224a8 <SoundDevice::removeChannel(int)+0x30>
c0022485:	8d 14 90             	lea    edx,[eax+edx*4]
c0022488:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c002248f:	74 17                	je     c00224a8 <SoundDevice::removeChannel(int)+0x30>
c0022491:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c002249b:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c00224a1:	75 05                	jne    c00224a8 <SoundDevice::removeChannel(int)+0x30>
c00224a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00224a5:	ff 60 28             	jmp    DWORD PTR [eax+0x28]
c00224a8:	c3                   	ret    
c00224a9:	90                   	nop

c00224aa <SoundDevice::floatTo16(float*, short*, int)>:
c00224aa:	57                   	push   edi
c00224ab:	56                   	push   esi
c00224ac:	53                   	push   ebx
c00224ad:	31 db                	xor    ebx,ebx
c00224af:	83 ec 10             	sub    esp,0x10
c00224b2:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00224b6:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c00224ba:	0f 8d d0 00 00 00    	jge    c0022590 <SoundDevice::floatTo16(float*, short*, int)+0xe6>
c00224c0:	83 ec 0c             	sub    esp,0xc
c00224c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00224c7:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c00224ca:	e8 a0 62 00 00       	call   c002876f <__extendsfdf2>
c00224cf:	83 c4 10             	add    esp,0x10
c00224d2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00224d6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00224da:	68 00 00 f0 3f       	push   0x3ff00000
c00224df:	6a 00                	push   0x0
c00224e1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00224e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00224e9:	e8 0d 52 00 00       	call   c00276fb <__adddf3>
c00224ee:	83 c4 10             	add    esp,0x10
c00224f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00224f5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00224f9:	68 00 00 e0 3f       	push   0x3fe00000
c00224fe:	6a 00                	push   0x0
c0022500:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022504:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022508:	e8 6b 58 00 00       	call   c0027d78 <__muldf3>
c002250d:	83 c4 10             	add    esp,0x10
c0022510:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022514:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022518:	68 c0 ff df 40       	push   0x40dfffc0
c002251d:	6a 00                	push   0x0
c002251f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022523:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022527:	e8 4c 58 00 00       	call   c0027d78 <__muldf3>
c002252c:	59                   	pop    ecx
c002252d:	5f                   	pop    edi
c002252e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022532:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022536:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002253a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002253e:	e8 08 61 00 00       	call   c002864b <__truncdfsf2>
c0022543:	5a                   	pop    edx
c0022544:	89 c7                	mov    edi,eax
c0022546:	59                   	pop    ecx
c0022547:	68 00 fe ff 46       	push   0x46fffe00
c002254c:	50                   	push   eax
c002254d:	e8 a3 51 00 00       	call   c00276f5 <__gesf2>
c0022552:	83 c4 10             	add    esp,0x10
c0022555:	85 c0                	test   eax,eax
c0022557:	78 08                	js     c0022561 <SoundDevice::floatTo16(float*, short*, int)+0xb7>
c0022559:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c002255f:	eb 29                	jmp    c002258a <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c0022561:	50                   	push   eax
c0022562:	50                   	push   eax
c0022563:	6a 00                	push   0x0
c0022565:	57                   	push   edi
c0022566:	e8 8e 51 00 00       	call   c00276f9 <__lesf2>
c002256b:	83 c4 10             	add    esp,0x10
c002256e:	85 c0                	test   eax,eax
c0022570:	7f 08                	jg     c002257a <SoundDevice::floatTo16(float*, short*, int)+0xd0>
c0022572:	66 c7 04 5e 00 00    	mov    WORD PTR [esi+ebx*2],0x0
c0022578:	eb 10                	jmp    c002258a <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c002257a:	83 ec 0c             	sub    esp,0xc
c002257d:	57                   	push   edi
c002257e:	e8 89 62 00 00       	call   c002880c <lrintf>
c0022583:	83 c4 10             	add    esp,0x10
c0022586:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c002258a:	43                   	inc    ebx
c002258b:	e9 26 ff ff ff       	jmp    c00224b6 <SoundDevice::floatTo16(float*, short*, int)+0xc>
c0022590:	83 c4 10             	add    esp,0x10
c0022593:	5b                   	pop    ebx
c0022594:	5e                   	pop    esi
c0022595:	5f                   	pop    edi
c0022596:	c3                   	ret    
c0022597:	90                   	nop

c0022598 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0022598:	57                   	push   edi
c0022599:	56                   	push   esi
c002259a:	53                   	push   ebx
c002259b:	31 db                	xor    ebx,ebx
c002259d:	83 ec 10             	sub    esp,0x10
c00225a0:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00225a4:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c00225a8:	0f 8d cb 00 00 00    	jge    c0022679 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c00225ae:	83 ec 0c             	sub    esp,0xc
c00225b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00225b5:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c00225b8:	e8 b2 61 00 00       	call   c002876f <__extendsfdf2>
c00225bd:	83 c4 10             	add    esp,0x10
c00225c0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00225c4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00225c8:	68 00 00 f0 3f       	push   0x3ff00000
c00225cd:	6a 00                	push   0x0
c00225cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00225d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00225d7:	e8 1f 51 00 00       	call   c00276fb <__adddf3>
c00225dc:	83 c4 10             	add    esp,0x10
c00225df:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00225e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00225e7:	68 00 00 e0 3f       	push   0x3fe00000
c00225ec:	6a 00                	push   0x0
c00225ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00225f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00225f6:	e8 7d 57 00 00       	call   c0027d78 <__muldf3>
c00225fb:	83 c4 10             	add    esp,0x10
c00225fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022602:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022606:	68 00 00 60 40       	push   0x40600000
c002260b:	6a 00                	push   0x0
c002260d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022611:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022615:	e8 5e 57 00 00       	call   c0027d78 <__muldf3>
c002261a:	59                   	pop    ecx
c002261b:	5f                   	pop    edi
c002261c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022620:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022624:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022628:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002262c:	e8 1a 60 00 00       	call   c002864b <__truncdfsf2>
c0022631:	5a                   	pop    edx
c0022632:	89 c7                	mov    edi,eax
c0022634:	59                   	pop    ecx
c0022635:	68 00 00 fe 42       	push   0x42fe0000
c002263a:	50                   	push   eax
c002263b:	e8 b5 50 00 00       	call   c00276f5 <__gesf2>
c0022640:	83 c4 10             	add    esp,0x10
c0022643:	85 c0                	test   eax,eax
c0022645:	78 06                	js     c002264d <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0022647:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c002264b:	eb 26                	jmp    c0022673 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c002264d:	50                   	push   eax
c002264e:	50                   	push   eax
c002264f:	6a 00                	push   0x0
c0022651:	57                   	push   edi
c0022652:	e8 a2 50 00 00       	call   c00276f9 <__lesf2>
c0022657:	83 c4 10             	add    esp,0x10
c002265a:	85 c0                	test   eax,eax
c002265c:	7f 06                	jg     c0022664 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c002265e:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0022662:	eb 0f                	jmp    c0022673 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022664:	83 ec 0c             	sub    esp,0xc
c0022667:	57                   	push   edi
c0022668:	e8 9f 61 00 00       	call   c002880c <lrintf>
c002266d:	83 c4 10             	add    esp,0x10
c0022670:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022673:	43                   	inc    ebx
c0022674:	e9 2b ff ff ff       	jmp    c00225a4 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0022679:	83 c4 10             	add    esp,0x10
c002267c:	5b                   	pop    ebx
c002267d:	5e                   	pop    esi
c002267e:	5f                   	pop    edi
c002267f:	c3                   	ret    

c0022680 <SoundDevice::getAudio(int, float*, float*)>:
c0022680:	55                   	push   ebp
c0022681:	31 ed                	xor    ebp,ebp
c0022683:	57                   	push   edi
c0022684:	56                   	push   esi
c0022685:	31 f6                	xor    esi,esi
c0022687:	53                   	push   ebx
c0022688:	83 ec 20             	sub    esp,0x20
c002268b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002268f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022693:	c1 e0 02             	shl    eax,0x2
c0022696:	50                   	push   eax
c0022697:	6a 00                	push   0x0
c0022699:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002269d:	e8 ae e0 fd ff       	call   c0000750 <memset>
c00226a2:	83 c4 10             	add    esp,0x10
c00226a5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00226ad:	8b 8c b3 5c 01 00 00 	mov    ecx,DWORD PTR [ebx+esi*4+0x15c]
c00226b4:	85 c9                	test   ecx,ecx
c00226b6:	74 52                	je     c002270a <SoundDevice::getAudio(int, float*, float*)+0x8a>
c00226b8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00226bc:	99                   	cdq    
c00226bd:	f7 bb 58 01 00 00    	idiv   DWORD PTR [ebx+0x158]
c00226c3:	50                   	push   eax
c00226c4:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c00226ca:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00226ce:	51                   	push   ecx
c00226cf:	e8 da f9 ff ff       	call   c00220ae <SoundChannel::unbuffer(float*, int, int)>
c00226d4:	31 d2                	xor    edx,edx
c00226d6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00226da:	83 c4 10             	add    esp,0x10
c00226dd:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c00226e1:	7d 1e                	jge    c0022701 <SoundDevice::getAudio(int, float*, float*)+0x81>
c00226e3:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00226e7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00226eb:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c00226ee:	89 cf                	mov    edi,ecx
c00226f0:	8b 8b 58 01 00 00    	mov    ecx,DWORD PTR [ebx+0x158]
c00226f6:	0f af ca             	imul   ecx,edx
c00226f9:	42                   	inc    edx
c00226fa:	01 e9                	add    ecx,ebp
c00226fc:	89 3c 88             	mov    DWORD PTR [eax+ecx*4],edi
c00226ff:	eb dc                	jmp    c00226dd <SoundDevice::getAudio(int, float*, float*)+0x5d>
c0022701:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0022705:	45                   	inc    ebp
c0022706:	01 7c 24 0c          	add    DWORD PTR [esp+0xc],edi
c002270a:	46                   	inc    esi
c002270b:	83 fe 20             	cmp    esi,0x20
c002270e:	75 9d                	jne    c00226ad <SoundDevice::getAudio(int, float*, float*)+0x2d>
c0022710:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022714:	83 c4 1c             	add    esp,0x1c
c0022717:	5b                   	pop    ebx
c0022718:	5e                   	pop    esi
c0022719:	5f                   	pop    edi
c002271a:	5d                   	pop    ebp
c002271b:	c3                   	ret    

c002271c <PCI::open(int, int, void*)>:
c002271c:	83 ec 18             	sub    esp,0x18
c002271f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022723:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0022727:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002272d:	8b 10                	mov    edx,DWORD PTR [eax]
c002272f:	50                   	push   eax
c0022730:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0022733:	31 c0                	xor    eax,eax
c0022735:	83 c4 1c             	add    esp,0x1c
c0022738:	c3                   	ret    
c0022739:	90                   	nop

c002273a <PCI::close(int, int, void*)>:
c002273a:	31 c0                	xor    eax,eax
c002273c:	c3                   	ret    
c002273d:	90                   	nop

c002273e <PCI::PCI()>:
c002273e:	83 ec 0c             	sub    esp,0xc
c0022741:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022745:	83 ec 08             	sub    esp,0x8
c0022748:	68 10 c8 02 c0       	push   0xc002c810
c002274d:	50                   	push   eax
c002274e:	e8 bf 0d ff ff       	call   c0013512 <Bus::Bus(char const*)>
c0022753:	83 c4 10             	add    esp,0x10
c0022756:	ba fc c8 02 c0       	mov    edx,0xc002c8fc
c002275b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002275f:	89 10                	mov    DWORD PTR [eax],edx
c0022761:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022765:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c002276f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022773:	a3 44 05 03 c0       	mov    ds:0xc0030544,eax
c0022778:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002277c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022782:	0f b6 d0             	movzx  edx,al
c0022785:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022789:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0022790:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022794:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002279a:	0f b6 d0             	movzx  edx,al
c002279d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227a1:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00227a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227aa:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00227b0:	8d 50 01             	lea    edx,[eax+0x1]
c00227b3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00227b7:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00227bd:	0f b6 d0             	movzx  edx,al
c00227c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227c4:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00227c8:	83 c9 c0             	or     ecx,0xffffffc0
c00227cb:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00227cf:	90                   	nop
c00227d0:	83 c4 0c             	add    esp,0xc
c00227d3:	c3                   	ret    

c00227d4 <PCI::readBAR8(unsigned int, int)>:
c00227d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00227d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00227dc:	f6 c2 01             	test   dl,0x1
c00227df:	74 07                	je     c00227e8 <PCI::readBAR8(unsigned int, int)+0x14>
c00227e1:	83 e2 fc             	and    edx,0xfffffffc
c00227e4:	01 c2                	add    edx,eax
c00227e6:	ec                   	in     al,dx
c00227e7:	c3                   	ret    
c00227e8:	83 e2 f0             	and    edx,0xfffffff0
c00227eb:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c00227ee:	c3                   	ret    
c00227ef:	90                   	nop

c00227f0 <PCI::readBAR16(unsigned int, int)>:
c00227f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00227f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00227f8:	f6 c2 01             	test   dl,0x1
c00227fb:	74 08                	je     c0022805 <PCI::readBAR16(unsigned int, int)+0x15>
c00227fd:	83 e2 fc             	and    edx,0xfffffffc
c0022800:	01 c2                	add    edx,eax
c0022802:	66 ed                	in     ax,dx
c0022804:	c3                   	ret    
c0022805:	83 e2 f0             	and    edx,0xfffffff0
c0022808:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c002280c:	c3                   	ret    
c002280d:	90                   	nop

c002280e <PCI::readBAR32(unsigned int, int)>:
c002280e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022812:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022816:	f6 c2 01             	test   dl,0x1
c0022819:	74 07                	je     c0022822 <PCI::readBAR32(unsigned int, int)+0x14>
c002281b:	83 e2 fc             	and    edx,0xfffffffc
c002281e:	01 c2                	add    edx,eax
c0022820:	ed                   	in     eax,dx
c0022821:	c3                   	ret    
c0022822:	83 e2 f0             	and    edx,0xfffffff0
c0022825:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0022828:	c3                   	ret    
c0022829:	90                   	nop

c002282a <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c002282a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002282e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022832:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022836:	f6 c2 01             	test   dl,0x1
c0022839:	74 07                	je     c0022842 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c002283b:	83 e2 fc             	and    edx,0xfffffffc
c002283e:	01 ca                	add    edx,ecx
c0022840:	ee                   	out    dx,al
c0022841:	c3                   	ret    
c0022842:	83 e2 f0             	and    edx,0xfffffff0
c0022845:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0022848:	c3                   	ret    
c0022849:	90                   	nop

c002284a <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c002284a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002284e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022852:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022856:	f6 c2 01             	test   dl,0x1
c0022859:	74 08                	je     c0022863 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c002285b:	83 e2 fc             	and    edx,0xfffffffc
c002285e:	01 ca                	add    edx,ecx
c0022860:	66 ef                	out    dx,ax
c0022862:	c3                   	ret    
c0022863:	83 e2 f0             	and    edx,0xfffffff0
c0022866:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c002286a:	c3                   	ret    
c002286b:	90                   	nop

c002286c <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c002286c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022870:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022874:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022878:	f6 c2 01             	test   dl,0x1
c002287b:	74 07                	je     c0022884 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c002287d:	83 e2 fc             	and    edx,0xfffffffc
c0022880:	01 ca                	add    edx,ecx
c0022882:	ef                   	out    dx,eax
c0022883:	c3                   	ret    
c0022884:	83 e2 f0             	and    edx,0xfffffff0
c0022887:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c002288a:	c3                   	ret    
c002288b:	90                   	nop

c002288c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002288c:	55                   	push   ebp
c002288d:	57                   	push   edi
c002288e:	56                   	push   esi
c002288f:	53                   	push   ebx
c0022890:	83 ec 0c             	sub    esp,0xc
c0022893:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022897:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c002289b:	89 f0                	mov    eax,esi
c002289d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00228a1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00228a5:	3c 07                	cmp    al,0x7
c00228a7:	76 10                	jbe    c00228b9 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c00228a9:	83 ec 0c             	sub    esp,0xc
c00228ac:	68 18 c8 02 c0       	push   0xc002c818
c00228b1:	e8 87 78 ff ff       	call   c001a13d <Krnl::panic(char const*)>
c00228b6:	83 c4 10             	add    esp,0x10
c00228b9:	80 fb 0f             	cmp    bl,0xf
c00228bc:	76 10                	jbe    c00228ce <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c00228be:	83 ec 0c             	sub    esp,0xc
c00228c1:	68 48 c8 02 c0       	push   0xc002c848
c00228c6:	e8 72 78 ff ff       	call   c001a13d <Krnl::panic(char const*)>
c00228cb:	83 c4 10             	add    esp,0x10
c00228ce:	8d 04 36             	lea    eax,[esi+esi*1]
c00228d1:	ba f8 0c 00 00       	mov    edx,0xcf8
c00228d6:	83 c8 f0             	or     eax,0xfffffff0
c00228d9:	ee                   	out    dx,al
c00228da:	ba fa 0c 00 00       	mov    edx,0xcfa
c00228df:	89 e8                	mov    eax,ebp
c00228e1:	ee                   	out    dx,al
c00228e2:	83 c4 0c             	add    esp,0xc
c00228e5:	89 d8                	mov    eax,ebx
c00228e7:	66 81 e7 fc 00       	and    di,0xfc
c00228ec:	5b                   	pop    ebx
c00228ed:	c1 e0 08             	shl    eax,0x8
c00228f0:	5e                   	pop    esi
c00228f1:	09 f8                	or     eax,edi
c00228f3:	5f                   	pop    edi
c00228f4:	66 0d 00 c0          	or     ax,0xc000
c00228f8:	5d                   	pop    ebp
c00228f9:	c3                   	ret    

c00228fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00228fa:	57                   	push   edi
c00228fb:	56                   	push   esi
c00228fc:	53                   	push   ebx
c00228fd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022901:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022905:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c002290b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002290f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022913:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0022917:	83 ff 01             	cmp    edi,0x1
c002291a:	75 3e                	jne    c002295a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c002291c:	89 de                	mov    esi,ebx
c002291e:	0f b6 c0             	movzx  eax,al
c0022921:	81 e6 fc 00 00 00    	and    esi,0xfc
c0022927:	c1 e0 10             	shl    eax,0x10
c002292a:	0f b6 c9             	movzx  ecx,cl
c002292d:	09 f0                	or     eax,esi
c002292f:	c1 e1 08             	shl    ecx,0x8
c0022932:	0f b6 d2             	movzx  edx,dl
c0022935:	09 c8                	or     eax,ecx
c0022937:	c1 e2 0b             	shl    edx,0xb
c002293a:	09 d0                	or     eax,edx
c002293c:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022941:	0d 00 00 00 80       	or     eax,0x80000000
c0022946:	ef                   	out    dx,eax
c0022947:	ba fc 0c 00 00       	mov    edx,0xcfc
c002294c:	ed                   	in     eax,dx
c002294d:	83 e3 02             	and    ebx,0x2
c0022950:	0f b6 cb             	movzx  ecx,bl
c0022953:	c1 e1 03             	shl    ecx,0x3
c0022956:	d3 e8                	shr    eax,cl
c0022958:	eb 43                	jmp    c002299d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c002295a:	83 ff 02             	cmp    edi,0x2
c002295d:	75 2c                	jne    c002298b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c002295f:	83 ec 0c             	sub    esp,0xc
c0022962:	0f b6 c9             	movzx  ecx,cl
c0022965:	0f b6 d2             	movzx  edx,dl
c0022968:	0f b6 fb             	movzx  edi,bl
c002296b:	0f b6 c0             	movzx  eax,al
c002296e:	57                   	push   edi
c002296f:	51                   	push   ecx
c0022970:	52                   	push   edx
c0022971:	50                   	push   eax
c0022972:	56                   	push   esi
c0022973:	e8 14 ff ff ff       	call   c002288c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022978:	89 c2                	mov    edx,eax
c002297a:	ed                   	in     eax,dx
c002297b:	83 e3 02             	and    ebx,0x2
c002297e:	83 c4 20             	add    esp,0x20
c0022981:	0f b6 cb             	movzx  ecx,bl
c0022984:	c1 e1 03             	shl    ecx,0x3
c0022987:	d3 e8                	shr    eax,cl
c0022989:	eb 12                	jmp    c002299d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c002298b:	83 ec 0c             	sub    esp,0xc
c002298e:	68 78 c8 02 c0       	push   0xc002c878
c0022993:	e8 a5 77 ff ff       	call   c001a13d <Krnl::panic(char const*)>
c0022998:	83 c4 10             	add    esp,0x10
c002299b:	31 c0                	xor    eax,eax
c002299d:	5b                   	pop    ebx
c002299e:	5e                   	pop    esi
c002299f:	5f                   	pop    edi
c00229a0:	c3                   	ret    
c00229a1:	90                   	nop

c00229a2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00229a2:	83 ec 18             	sub    esp,0x18
c00229a5:	6a 00                	push   0x0
c00229a7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00229ac:	50                   	push   eax
c00229ad:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00229b2:	50                   	push   eax
c00229b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00229b8:	50                   	push   eax
c00229b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00229bd:	e8 38 ff ff ff       	call   c00228fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00229c2:	83 c4 2c             	add    esp,0x2c
c00229c5:	c3                   	ret    

c00229c6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00229c6:	83 ec 18             	sub    esp,0x18
c00229c9:	6a 0e                	push   0xe
c00229cb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00229d0:	50                   	push   eax
c00229d1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00229d6:	50                   	push   eax
c00229d7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00229dc:	50                   	push   eax
c00229dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00229e1:	e8 14 ff ff ff       	call   c00228fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00229e6:	83 c4 2c             	add    esp,0x2c
c00229e9:	0f b6 c0             	movzx  eax,al
c00229ec:	c3                   	ret    
c00229ed:	90                   	nop

c00229ee <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00229ee:	55                   	push   ebp
c00229ef:	57                   	push   edi
c00229f0:	56                   	push   esi
c00229f1:	53                   	push   ebx
c00229f2:	83 ec 18             	sub    esp,0x18
c00229f5:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c00229fa:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c00229ff:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0022a04:	6a 0a                	push   0xa
c0022a06:	56                   	push   esi
c0022a07:	55                   	push   ebp
c0022a08:	57                   	push   edi
c0022a09:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022a0d:	e8 e8 fe ff ff       	call   c00228fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a12:	83 c4 14             	add    esp,0x14
c0022a15:	89 c3                	mov    ebx,eax
c0022a17:	6a 0a                	push   0xa
c0022a19:	0f b6 db             	movzx  ebx,bl
c0022a1c:	56                   	push   esi
c0022a1d:	55                   	push   ebp
c0022a1e:	57                   	push   edi
c0022a1f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022a23:	e8 d2 fe ff ff       	call   c00228fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a28:	83 c4 2c             	add    esp,0x2c
c0022a2b:	25 00 ff 00 00       	and    eax,0xff00
c0022a30:	09 d8                	or     eax,ebx
c0022a32:	5b                   	pop    ebx
c0022a33:	5e                   	pop    esi
c0022a34:	5f                   	pop    edi
c0022a35:	5d                   	pop    ebp
c0022a36:	c3                   	ret    
c0022a37:	90                   	nop

c0022a38 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022a38:	83 ec 18             	sub    esp,0x18
c0022a3b:	6a 08                	push   0x8
c0022a3d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022a42:	50                   	push   eax
c0022a43:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022a48:	50                   	push   eax
c0022a49:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022a4e:	50                   	push   eax
c0022a4f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022a53:	e8 a2 fe ff ff       	call   c00228fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a58:	83 c4 2c             	add    esp,0x2c
c0022a5b:	0f b6 c4             	movzx  eax,ah
c0022a5e:	c3                   	ret    
c0022a5f:	90                   	nop

c0022a60 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022a60:	83 ec 18             	sub    esp,0x18
c0022a63:	6a 08                	push   0x8
c0022a65:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022a6a:	50                   	push   eax
c0022a6b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022a70:	50                   	push   eax
c0022a71:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022a76:	50                   	push   eax
c0022a77:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022a7b:	e8 7a fe ff ff       	call   c00228fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a80:	83 c4 2c             	add    esp,0x2c
c0022a83:	c3                   	ret    

c0022a84 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0022a84:	83 ec 18             	sub    esp,0x18
c0022a87:	6a 3c                	push   0x3c
c0022a89:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022a8e:	50                   	push   eax
c0022a8f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022a94:	50                   	push   eax
c0022a95:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022a9a:	50                   	push   eax
c0022a9b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022a9f:	e8 56 fe ff ff       	call   c00228fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022aa4:	83 c4 2c             	add    esp,0x2c
c0022aa7:	c3                   	ret    

c0022aa8 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0022aa8:	83 ec 18             	sub    esp,0x18
c0022aab:	6a 18                	push   0x18
c0022aad:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022ab2:	50                   	push   eax
c0022ab3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022ab8:	50                   	push   eax
c0022ab9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022abe:	50                   	push   eax
c0022abf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022ac3:	e8 32 fe ff ff       	call   c00228fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ac8:	83 c4 2c             	add    esp,0x2c
c0022acb:	0f b6 c4             	movzx  eax,ah
c0022ace:	c3                   	ret    
c0022acf:	90                   	nop

c0022ad0 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022ad0:	55                   	push   ebp
c0022ad1:	57                   	push   edi
c0022ad2:	56                   	push   esi
c0022ad3:	53                   	push   ebx
c0022ad4:	83 ec 28             	sub    esp,0x28
c0022ad7:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0022adb:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0022ae0:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0022ae5:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c0022aea:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0022af1:	8d 43 12             	lea    eax,[ebx+0x12]
c0022af4:	83 c3 10             	add    ebx,0x10
c0022af7:	0f b6 c0             	movzx  eax,al
c0022afa:	0f b6 db             	movzx  ebx,bl
c0022afd:	50                   	push   eax
c0022afe:	51                   	push   ecx
c0022aff:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0022b03:	57                   	push   edi
c0022b04:	55                   	push   ebp
c0022b05:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022b09:	e8 ec fd ff ff       	call   c00228fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b0e:	83 c4 14             	add    esp,0x14
c0022b11:	89 c6                	mov    esi,eax
c0022b13:	53                   	push   ebx
c0022b14:	c1 e6 10             	shl    esi,0x10
c0022b17:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022b1b:	51                   	push   ecx
c0022b1c:	57                   	push   edi
c0022b1d:	55                   	push   ebp
c0022b1e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022b22:	e8 d3 fd ff ff       	call   c00228fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b27:	83 c4 3c             	add    esp,0x3c
c0022b2a:	0f b7 c0             	movzx  eax,ax
c0022b2d:	5b                   	pop    ebx
c0022b2e:	09 f0                	or     eax,esi
c0022b30:	5e                   	pop    esi
c0022b31:	5f                   	pop    edi
c0022b32:	5d                   	pop    ebp
c0022b33:	c3                   	ret    

c0022b34 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022b34:	55                   	push   ebp
c0022b35:	57                   	push   edi
c0022b36:	56                   	push   esi
c0022b37:	53                   	push   ebx
c0022b38:	83 ec 0c             	sub    esp,0xc
c0022b3b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022b3f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0022b43:	89 f5                	mov    ebp,esi
c0022b45:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c0022b4b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0022b4f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022b53:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022b57:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022b5b:	83 f9 01             	cmp    ecx,0x1
c0022b5e:	75 5d                	jne    c0022bbd <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c0022b60:	0f b6 c8             	movzx  ecx,al
c0022b63:	0f b6 d2             	movzx  edx,dl
c0022b66:	c1 e1 10             	shl    ecx,0x10
c0022b69:	c1 e2 0b             	shl    edx,0xb
c0022b6c:	89 f0                	mov    eax,esi
c0022b6e:	25 fc 00 00 00       	and    eax,0xfc
c0022b73:	09 c1                	or     ecx,eax
c0022b75:	89 e8                	mov    eax,ebp
c0022b77:	0f b6 c0             	movzx  eax,al
c0022b7a:	c1 e0 08             	shl    eax,0x8
c0022b7d:	09 c1                	or     ecx,eax
c0022b7f:	09 d1                	or     ecx,edx
c0022b81:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022b86:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022b8c:	89 c8                	mov    eax,ecx
c0022b8e:	ef                   	out    dx,eax
c0022b8f:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022b94:	ed                   	in     eax,dx
c0022b95:	0f b7 db             	movzx  ebx,bx
c0022b98:	83 e6 02             	and    esi,0x2
c0022b9b:	74 0a                	je     c0022ba7 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c0022b9d:	0f b7 d0             	movzx  edx,ax
c0022ba0:	c1 e3 10             	shl    ebx,0x10
c0022ba3:	09 d3                	or     ebx,edx
c0022ba5:	eb 05                	jmp    c0022bac <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c0022ba7:	66 31 c0             	xor    ax,ax
c0022baa:	09 c3                	or     ebx,eax
c0022bac:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022bb1:	89 c8                	mov    eax,ecx
c0022bb3:	ef                   	out    dx,eax
c0022bb4:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022bb9:	89 d8                	mov    eax,ebx
c0022bbb:	eb 41                	jmp    c0022bfe <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0022bbd:	83 f9 02             	cmp    ecx,0x2
c0022bc0:	75 45                	jne    c0022c07 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c0022bc2:	83 ec 0c             	sub    esp,0xc
c0022bc5:	0f b6 d2             	movzx  edx,dl
c0022bc8:	89 f1                	mov    ecx,esi
c0022bca:	0f b6 c0             	movzx  eax,al
c0022bcd:	0f b6 f1             	movzx  esi,cl
c0022bd0:	89 e9                	mov    ecx,ebp
c0022bd2:	56                   	push   esi
c0022bd3:	0f b6 c9             	movzx  ecx,cl
c0022bd6:	51                   	push   ecx
c0022bd7:	52                   	push   edx
c0022bd8:	50                   	push   eax
c0022bd9:	57                   	push   edi
c0022bda:	e8 ad fc ff ff       	call   c002288c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022bdf:	89 c2                	mov    edx,eax
c0022be1:	ed                   	in     eax,dx
c0022be2:	83 c4 20             	add    esp,0x20
c0022be5:	0f b7 db             	movzx  ebx,bx
c0022be8:	f6 c2 02             	test   dl,0x2
c0022beb:	74 0c                	je     c0022bf9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0022bed:	0f b7 c8             	movzx  ecx,ax
c0022bf0:	89 d8                	mov    eax,ebx
c0022bf2:	c1 e0 10             	shl    eax,0x10
c0022bf5:	09 c8                	or     eax,ecx
c0022bf7:	eb 05                	jmp    c0022bfe <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0022bf9:	66 31 c0             	xor    ax,ax
c0022bfc:	09 d8                	or     eax,ebx
c0022bfe:	ef                   	out    dx,eax
c0022bff:	83 c4 0c             	add    esp,0xc
c0022c02:	5b                   	pop    ebx
c0022c03:	5e                   	pop    esi
c0022c04:	5f                   	pop    edi
c0022c05:	5d                   	pop    ebp
c0022c06:	c3                   	ret    
c0022c07:	c7 44 24 20 78 c8 02 c0 	mov    DWORD PTR [esp+0x20],0xc002c878
c0022c0f:	83 c4 0c             	add    esp,0xc
c0022c12:	5b                   	pop    ebx
c0022c13:	5e                   	pop    esi
c0022c14:	5f                   	pop    edi
c0022c15:	5d                   	pop    ebp
c0022c16:	e9 22 75 ff ff       	jmp    c001a13d <Krnl::panic(char const*)>
c0022c1b:	90                   	nop

c0022c1c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0022c1c:	55                   	push   ebp
c0022c1d:	57                   	push   edi
c0022c1e:	56                   	push   esi
c0022c1f:	53                   	push   ebx
c0022c20:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0022c26:	80 3d 50 05 03 c0 00 	cmp    BYTE PTR ds:0xc0030550,0x0
c0022c2d:	0f 85 84 00 00 00    	jne    c0022cb7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c0022c33:	83 ec 0c             	sub    esp,0xc
c0022c36:	68 14 01 00 00       	push   0x114
c0022c3b:	e8 d9 cb fe ff       	call   c000f819 <malloc>
c0022c40:	83 c4 0c             	add    esp,0xc
c0022c43:	89 c3                	mov    ebx,eax
c0022c45:	ff 35 50 f7 02 c0    	push   DWORD PTR ds:0xc002f750
c0022c4b:	68 7e c8 02 c0       	push   0xc002c87e
c0022c50:	50                   	push   eax
c0022c51:	e8 7a 01 ff ff       	call   c0012dd0 <File::File(char const*, Process*)>
c0022c56:	5a                   	pop    edx
c0022c57:	59                   	pop    ecx
c0022c58:	6a 01                	push   0x1
c0022c5a:	53                   	push   ebx
c0022c5b:	e8 d4 01 ff ff       	call   c0012e34 <File::open(FileOpenMode)>
c0022c60:	83 c4 0c             	add    esp,0xc
c0022c63:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0022c67:	50                   	push   eax
c0022c68:	8d 44 24 28          	lea    eax,[esp+0x28]
c0022c6c:	50                   	push   eax
c0022c6d:	53                   	push   ebx
c0022c6e:	e8 6d 04 ff ff       	call   c00130e0 <File::stat(unsigned long long*, bool*)>
c0022c73:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022c77:	40                   	inc    eax
c0022c78:	89 04 24             	mov    DWORD PTR [esp],eax
c0022c7b:	e8 99 cb fe ff       	call   c000f819 <malloc>
c0022c80:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022c84:	a3 4c 05 03 c0       	mov    ds:0xc003054c,eax
c0022c89:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0022c8d:	5e                   	pop    esi
c0022c8e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022c90:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0022c94:	51                   	push   ecx
c0022c95:	50                   	push   eax
c0022c96:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022c9a:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022c9e:	53                   	push   ebx
c0022c9f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0022ca2:	83 c4 14             	add    esp,0x14
c0022ca5:	53                   	push   ebx
c0022ca6:	e8 e7 01 ff ff       	call   c0012e92 <File::close()>
c0022cab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022caf:	83 c4 10             	add    esp,0x10
c0022cb2:	a3 48 05 03 c0       	mov    ds:0xc0030548,eax
c0022cb7:	a1 48 05 03 c0       	mov    eax,ds:0xc0030548
c0022cbc:	8b 15 4c 05 03 c0    	mov    edx,DWORD PTR ds:0xc003054c
c0022cc2:	89 04 24             	mov    DWORD PTR [esp],eax
c0022cc5:	31 ff                	xor    edi,edi
c0022cc7:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0022ccf:	31 f6                	xor    esi,esi
c0022cd1:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0022cd6:	31 db                	xor    ebx,ebx
c0022cd8:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0022ce0:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0022ce5:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0022cec:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0022cf0:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0022cf7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0022cfb:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0022cfe:	0f 8e 6b 01 00 00    	jle    c0022e6f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0022d04:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0022d07:	d4 40                	aam    0x40
c0022d09:	d5 39                	aad    0x39
c0022d0b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0022d0f:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0022d13:	d4 40                	aam    0x40
c0022d15:	d5 39                	aad    0x39
c0022d17:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0022d1b:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0022d1f:	d4 40                	aam    0x40
c0022d21:	d5 39                	aad    0x39
c0022d23:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0022d27:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0022d2b:	d4 40                	aam    0x40
c0022d2d:	d5 39                	aad    0x39
c0022d2f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0022d33:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0022d37:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0022d3b:	3c 56                	cmp    al,0x56
c0022d3d:	74 45                	je     c0022d84 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0022d3f:	d4 40                	aam    0x40
c0022d41:	d5 39                	aad    0x39
c0022d43:	8d 48 d0             	lea    ecx,[eax-0x30]
c0022d46:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0022d4a:	0f b6 c9             	movzx  ecx,cl
c0022d4d:	c1 e1 04             	shl    ecx,0x4
c0022d50:	d4 40                	aam    0x40
c0022d52:	d5 39                	aad    0x39
c0022d54:	8d 58 d0             	lea    ebx,[eax-0x30]
c0022d57:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0022d5b:	0f b6 db             	movzx  ebx,bl
c0022d5e:	09 cb                	or     ebx,ecx
c0022d60:	c1 e3 04             	shl    ebx,0x4
c0022d63:	d4 40                	aam    0x40
c0022d65:	d5 39                	aad    0x39
c0022d67:	8d 48 d0             	lea    ecx,[eax-0x30]
c0022d6a:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0022d6e:	0f b6 c9             	movzx  ecx,cl
c0022d71:	09 cb                	or     ebx,ecx
c0022d73:	c1 e3 04             	shl    ebx,0x4
c0022d76:	89 d9                	mov    ecx,ebx
c0022d78:	d4 40                	aam    0x40
c0022d7a:	d5 39                	aad    0x39
c0022d7c:	8d 58 d0             	lea    ebx,[eax-0x30]
c0022d7f:	0f b6 db             	movzx  ebx,bl
c0022d82:	09 cb                	or     ebx,ecx
c0022d84:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0022d88:	80 f9 44             	cmp    cl,0x44
c0022d8b:	74 47                	je     c0022dd4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0022d8d:	88 c8                	mov    al,cl
c0022d8f:	d4 40                	aam    0x40
c0022d91:	d5 39                	aad    0x39
c0022d93:	83 e8 30             	sub    eax,0x30
c0022d96:	0f b6 e8             	movzx  ebp,al
c0022d99:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0022d9d:	c1 e5 04             	shl    ebp,0x4
c0022da0:	d4 40                	aam    0x40
c0022da2:	d5 39                	aad    0x39
c0022da4:	83 e8 30             	sub    eax,0x30
c0022da7:	0f b6 f0             	movzx  esi,al
c0022daa:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0022dae:	09 ee                	or     esi,ebp
c0022db0:	c1 e6 04             	shl    esi,0x4
c0022db3:	d4 40                	aam    0x40
c0022db5:	d5 39                	aad    0x39
c0022db7:	83 e8 30             	sub    eax,0x30
c0022dba:	0f b6 e8             	movzx  ebp,al
c0022dbd:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0022dc1:	09 ee                	or     esi,ebp
c0022dc3:	c1 e6 04             	shl    esi,0x4
c0022dc6:	89 f5                	mov    ebp,esi
c0022dc8:	d4 40                	aam    0x40
c0022dca:	d5 39                	aad    0x39
c0022dcc:	83 e8 30             	sub    eax,0x30
c0022dcf:	0f b6 f0             	movzx  esi,al
c0022dd2:	09 ee                	or     esi,ebp
c0022dd4:	83 c7 10             	add    edi,0x10
c0022dd7:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0022ddb:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0022dde:	3c 0a                	cmp    al,0xa
c0022de0:	74 09                	je     c0022deb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0022de2:	45                   	inc    ebp
c0022de3:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0022de6:	75 16                	jne    c0022dfe <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0022de8:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0022deb:	3c 0a                	cmp    al,0xa
c0022ded:	0f 94 c0             	sete   al
c0022df0:	0f b6 c0             	movzx  eax,al
c0022df3:	01 c7                	add    edi,eax
c0022df5:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0022dfa:	75 0c                	jne    c0022e08 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0022dfc:	eb 15                	jmp    c0022e13 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0022dfe:	47                   	inc    edi
c0022dff:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0022e02:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0022e06:	eb d3                	jmp    c0022ddb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0022e08:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0022e0d:	0f 85 e8 fe ff ff    	jne    c0022cfb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022e13:	80 f9 44             	cmp    cl,0x44
c0022e16:	74 0b                	je     c0022e23 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0022e18:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0022e1d:	0f 85 d8 fe ff ff    	jne    c0022cfb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022e23:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0022e27:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0022e2b:	c1 e1 04             	shl    ecx,0x4
c0022e2e:	83 e8 30             	sub    eax,0x30
c0022e31:	09 c8                	or     eax,ecx
c0022e33:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0022e37:	0f 85 be fe ff ff    	jne    c0022cfb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022e3d:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0022e41:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022e45:	c1 e1 04             	shl    ecx,0x4
c0022e48:	83 e8 30             	sub    eax,0x30
c0022e4b:	09 c8                	or     eax,ecx
c0022e4d:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0022e51:	0f 85 a4 fe ff ff    	jne    c0022cfb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022e57:	50                   	push   eax
c0022e58:	50                   	push   eax
c0022e59:	8d 44 24 28          	lea    eax,[esp+0x28]
c0022e5d:	50                   	push   eax
c0022e5e:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0022e65:	e8 a2 d9 fd ff       	call   c000080c <strcpy>
c0022e6a:	83 c4 10             	add    esp,0x10
c0022e6d:	eb 15                	jmp    c0022e84 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0022e6f:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0022e76:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0022e81:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0022e84:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0022e8b:	81 c4 2c 01 00 00    	add    esp,0x12c
c0022e91:	5b                   	pop    ebx
c0022e92:	5e                   	pop    esi
c0022e93:	5f                   	pop    edi
c0022e94:	5d                   	pop    ebp
c0022e95:	c3                   	ret    

c0022e96 <PCI::checkBus(unsigned char)>:
c0022e96:	56                   	push   esi
c0022e97:	53                   	push   ebx
c0022e98:	31 db                	xor    ebx,ebx
c0022e9a:	51                   	push   ecx
c0022e9b:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022ea0:	52                   	push   edx
c0022ea1:	53                   	push   ebx
c0022ea2:	43                   	inc    ebx
c0022ea3:	56                   	push   esi
c0022ea4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022ea8:	e8 37 03 00 00       	call   c00231e4 <PCI::checkDevice(unsigned char, unsigned char)>
c0022ead:	83 c4 10             	add    esp,0x10
c0022eb0:	83 fb 20             	cmp    ebx,0x20
c0022eb3:	75 eb                	jne    c0022ea0 <PCI::checkBus(unsigned char)+0xa>
c0022eb5:	58                   	pop    eax
c0022eb6:	5b                   	pop    ebx
c0022eb7:	5e                   	pop    esi
c0022eb8:	c3                   	ret    
c0022eb9:	90                   	nop

c0022eba <PCI::foundDevice(PCIDeviceInfo)>:
c0022eba:	55                   	push   ebp
c0022ebb:	57                   	push   edi
c0022ebc:	56                   	push   esi
c0022ebd:	53                   	push   ebx
c0022ebe:	83 ec 1c             	sub    esp,0x1c
c0022ec1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022ec5:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022ecb:	0f 84 52 01 00 00    	je     c0023023 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022ed1:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022ed5:	66 81 f9 06 04       	cmp    cx,0x406
c0022eda:	75 2c                	jne    c0022f08 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022edc:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022ee1:	50                   	push   eax
c0022ee2:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022ee7:	50                   	push   eax
c0022ee8:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022eed:	50                   	push   eax
c0022eee:	56                   	push   esi
c0022eef:	e8 b4 fb ff ff       	call   c0022aa8 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022ef4:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022ef8:	0f b6 c0             	movzx  eax,al
c0022efb:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022eff:	83 c4 2c             	add    esp,0x2c
c0022f02:	5b                   	pop    ebx
c0022f03:	5e                   	pop    esi
c0022f04:	5f                   	pop    edi
c0022f05:	5d                   	pop    ebp
c0022f06:	eb 8e                	jmp    c0022e96 <PCI::checkBus(unsigned char)>
c0022f08:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022f0c:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022f12:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022f16:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022f1a:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022f1e:	88 d3                	mov    bl,dl
c0022f20:	85 c0                	test   eax,eax
c0022f22:	74 33                	je     c0022f57 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022f24:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022f27:	85 d2                	test   edx,edx
c0022f29:	74 28                	je     c0022f53 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022f2b:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022f31:	31 ef                	xor    edi,ebp
c0022f33:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022f39:	75 18                	jne    c0022f53 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022f3b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022f3f:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022f45:	75 0c                	jne    c0022f53 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022f47:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022f4d:	0f 84 d0 00 00 00    	je     c0023023 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022f53:	8b 00                	mov    eax,DWORD PTR [eax]
c0022f55:	eb c9                	jmp    c0022f20 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022f57:	66 81 f9 01 06       	cmp    cx,0x601
c0022f5c:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022f60:	75 19                	jne    c0022f7b <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022f62:	83 ec 0c             	sub    esp,0xc
c0022f65:	68 64 01 00 00       	push   0x164
c0022f6a:	e8 aa c8 fe ff       	call   c000f819 <malloc>
c0022f6f:	89 c5                	mov    ebp,eax
c0022f71:	89 04 24             	mov    DWORD PTR [esp],eax
c0022f74:	e8 85 0e 00 00       	call   c0023dfe <SATABus::SATABus()>
c0022f79:	eb 1e                	jmp    c0022f99 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022f7b:	66 81 f9 01 01       	cmp    cx,0x101
c0022f80:	75 60                	jne    c0022fe2 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022f82:	83 ec 0c             	sub    esp,0xc
c0022f85:	68 70 02 00 00       	push   0x270
c0022f8a:	e8 8a c8 fe ff       	call   c000f819 <malloc>
c0022f8f:	89 c5                	mov    ebp,eax
c0022f91:	89 04 24             	mov    DWORD PTR [esp],eax
c0022f94:	e8 0f 03 00 00       	call   c00232a8 <IDE::IDE()>
c0022f99:	58                   	pop    eax
c0022f9a:	5a                   	pop    edx
c0022f9b:	55                   	push   ebp
c0022f9c:	56                   	push   esi
c0022f9d:	e8 08 0d ff ff       	call   c0013caa <Device::addChild(Device*)>
c0022fa2:	83 ec 1c             	sub    esp,0x1c
c0022fa5:	b9 09 00 00 00       	mov    ecx,0x9
c0022faa:	fc                   	cld    
c0022fab:	89 e7                	mov    edi,esp
c0022fad:	89 de                	mov    esi,ebx
c0022faf:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022fb1:	55                   	push   ebp
c0022fb2:	e8 05 0c ff ff       	call   c0013bbc <Device::preOpenPCI(PCIDeviceInfo)>
c0022fb7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022fba:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022fbe:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022fc6:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022fce:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022fd6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022fd9:	83 c4 4c             	add    esp,0x4c
c0022fdc:	5b                   	pop    ebx
c0022fdd:	5e                   	pop    esi
c0022fde:	5f                   	pop    edi
c0022fdf:	5d                   	pop    ebp
c0022fe0:	ff e0                	jmp    eax
c0022fe2:	83 ec 0c             	sub    esp,0xc
c0022fe5:	68 58 01 00 00       	push   0x158
c0022fea:	e8 2a c8 fe ff       	call   c000f819 <malloc>
c0022fef:	89 c5                	mov    ebp,eax
c0022ff1:	58                   	pop    eax
c0022ff2:	5a                   	pop    edx
c0022ff3:	68 97 c8 02 c0       	push   0xc002c897
c0022ff8:	55                   	push   ebp
c0022ff9:	e8 b6 0f ff ff       	call   c0013fb4 <DriverlessDevice::DriverlessDevice(char const*)>
c0022ffe:	59                   	pop    ecx
c0022fff:	5f                   	pop    edi
c0023000:	55                   	push   ebp
c0023001:	56                   	push   esi
c0023002:	e8 a3 0c ff ff       	call   c0013caa <Device::addChild(Device*)>
c0023007:	b9 09 00 00 00       	mov    ecx,0x9
c002300c:	fc                   	cld    
c002300d:	89 df                	mov    edi,ebx
c002300f:	89 de                	mov    esi,ebx
c0023011:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023013:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0023017:	83 c4 2c             	add    esp,0x2c
c002301a:	5b                   	pop    ebx
c002301b:	5e                   	pop    esi
c002301c:	5f                   	pop    edi
c002301d:	5d                   	pop    ebp
c002301e:	e9 99 0b ff ff       	jmp    c0013bbc <Device::preOpenPCI(PCIDeviceInfo)>
c0023023:	83 c4 1c             	add    esp,0x1c
c0023026:	5b                   	pop    ebx
c0023027:	5e                   	pop    esi
c0023028:	5f                   	pop    edi
c0023029:	5d                   	pop    ebp
c002302a:	c3                   	ret    
c002302b:	90                   	nop

c002302c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c002302c:	55                   	push   ebp
c002302d:	57                   	push   edi
c002302e:	56                   	push   esi
c002302f:	53                   	push   ebx
c0023030:	83 ec 68             	sub    esp,0x68
c0023033:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0023037:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c002303e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0023042:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0023049:	0f b6 74 24 18       	movzx  esi,BYTE PTR [esp+0x18]
c002304e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023052:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0023059:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c002305e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0023062:	0f b6 7c 24 20       	movzx  edi,BYTE PTR [esp+0x20]
c0023067:	6a 0c                	push   0xc
c0023069:	57                   	push   edi
c002306a:	53                   	push   ebx
c002306b:	56                   	push   esi
c002306c:	55                   	push   ebp
c002306d:	e8 88 f8 ff ff       	call   c00228fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023072:	83 c4 20             	add    esp,0x20
c0023075:	57                   	push   edi
c0023076:	53                   	push   ebx
c0023077:	56                   	push   esi
c0023078:	55                   	push   ebp
c0023079:	e8 70 f9 ff ff       	call   c00229ee <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c002307e:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c0023083:	57                   	push   edi
c0023084:	53                   	push   ebx
c0023085:	56                   	push   esi
c0023086:	55                   	push   ebp
c0023087:	e8 f8 f9 ff ff       	call   c0022a84 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c002308c:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0023090:	83 c4 14             	add    esp,0x14
c0023093:	6a 3c                	push   0x3c
c0023095:	57                   	push   edi
c0023096:	53                   	push   ebx
c0023097:	56                   	push   esi
c0023098:	55                   	push   ebp
c0023099:	e8 5c f8 ff ff       	call   c00228fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002309e:	0f b6 c4             	movzx  eax,ah
c00230a1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00230a5:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00230a9:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c00230ad:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c00230b2:	83 c4 20             	add    esp,0x20
c00230b5:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00230bb:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c00230c2:	74 7c                	je     c0023140 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c00230c4:	31 c0                	xor    eax,eax
c00230c6:	8b 15 28 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e228
c00230cc:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c00230d2:	39 82 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],eax
c00230d8:	7e 66                	jle    c0023140 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c00230da:	8d 14 c2             	lea    edx,[edx+eax*8]
c00230dd:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c00230e4:	39 cb                	cmp    ebx,ecx
c00230e6:	75 55                	jne    c002313d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c00230e8:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c00230ef:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c00230f3:	75 48                	jne    c002313d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c00230f5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00230f9:	83 ec 0c             	sub    esp,0xc
c00230fc:	68 b1 c8 02 c0       	push   0xc002c8b1
c0023101:	e8 6b f7 fe ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c0023106:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002310a:	8b 15 28 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e228
c0023110:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0023114:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c002311a:	0f b6 94 c2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+eax*8+0x15f]
c0023122:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c0023126:	52                   	push   edx
c0023127:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002312b:	53                   	push   ebx
c002312c:	68 d6 c8 02 c0       	push   0xc002c8d6
c0023131:	e8 3b f7 fe ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c0023136:	83 c4 20             	add    esp,0x20
c0023139:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002313d:	40                   	inc    eax
c002313e:	eb 86                	jmp    c00230c6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9a>
c0023140:	31 d2                	xor    edx,edx
c0023142:	83 ec 0c             	sub    esp,0xc
c0023145:	57                   	push   edi
c0023146:	53                   	push   ebx
c0023147:	56                   	push   esi
c0023148:	52                   	push   edx
c0023149:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c002314d:	55                   	push   ebp
c002314e:	e8 7d f9 ff ff       	call   c0022ad0 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023153:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0023157:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c002315b:	42                   	inc    edx
c002315c:	83 c4 20             	add    esp,0x20
c002315f:	83 fa 06             	cmp    edx,0x6
c0023162:	75 de                	jne    c0023142 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x116>
c0023164:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0023169:	83 ec 0c             	sub    esp,0xc
c002316c:	86 e0                	xchg   al,ah
c002316e:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0023173:	6a 02                	push   0x2
c0023175:	57                   	push   edi
c0023176:	53                   	push   ebx
c0023177:	56                   	push   esi
c0023178:	55                   	push   ebp
c0023179:	e8 7c f7 ff ff       	call   c00228fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002317e:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0023183:	83 c4 20             	add    esp,0x20
c0023186:	57                   	push   edi
c0023187:	53                   	push   ebx
c0023188:	56                   	push   esi
c0023189:	55                   	push   ebp
c002318a:	e8 a9 f8 ff ff       	call   c0022a38 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c002318f:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0023193:	57                   	push   edi
c0023194:	53                   	push   ebx
c0023195:	56                   	push   esi
c0023196:	55                   	push   ebp
c0023197:	e8 06 f8 ff ff       	call   c00229a2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002319c:	b9 09 00 00 00       	mov    ecx,0x9
c00231a1:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c00231a6:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c00231aa:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c00231ae:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c00231b2:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c00231b6:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c00231ba:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c00231be:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c00231c2:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c00231c6:	83 ec 0c             	sub    esp,0xc
c00231c9:	fc                   	cld    
c00231ca:	89 e7                	mov    edi,esp
c00231cc:	8d 74 24 58          	lea    esi,[esp+0x58]
c00231d0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00231d2:	55                   	push   ebp
c00231d3:	e8 e2 fc ff ff       	call   c0022eba <PCI::foundDevice(PCIDeviceInfo)>
c00231d8:	81 c4 8c 00 00 00    	add    esp,0x8c
c00231de:	5b                   	pop    ebx
c00231df:	5e                   	pop    esi
c00231e0:	5f                   	pop    edi
c00231e1:	5d                   	pop    ebp
c00231e2:	c3                   	ret    
c00231e3:	90                   	nop

c00231e4 <PCI::checkDevice(unsigned char, unsigned char)>:
c00231e4:	55                   	push   ebp
c00231e5:	57                   	push   edi
c00231e6:	56                   	push   esi
c00231e7:	53                   	push   ebx
c00231e8:	83 ec 0c             	sub    esp,0xc
c00231eb:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00231ef:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c00231f4:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00231f9:	6a 00                	push   0x0
c00231fb:	56                   	push   esi
c00231fc:	57                   	push   edi
c00231fd:	55                   	push   ebp
c00231fe:	e8 9f f7 ff ff       	call   c00229a2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023203:	6a 00                	push   0x0
c0023205:	56                   	push   esi
c0023206:	57                   	push   edi
c0023207:	55                   	push   ebp
c0023208:	e8 1f fe ff ff       	call   c002302c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002320d:	83 c4 20             	add    esp,0x20
c0023210:	6a 00                	push   0x0
c0023212:	56                   	push   esi
c0023213:	57                   	push   edi
c0023214:	55                   	push   ebp
c0023215:	e8 ac f7 ff ff       	call   c00229c6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002321a:	83 c4 10             	add    esp,0x10
c002321d:	84 c0                	test   al,al
c002321f:	79 27                	jns    c0023248 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0023221:	bb 01 00 00 00       	mov    ebx,0x1
c0023226:	53                   	push   ebx
c0023227:	56                   	push   esi
c0023228:	57                   	push   edi
c0023229:	55                   	push   ebp
c002322a:	e8 73 f7 ff ff       	call   c00229a2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002322f:	83 c4 10             	add    esp,0x10
c0023232:	66 40                	inc    ax
c0023234:	74 0c                	je     c0023242 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0023236:	53                   	push   ebx
c0023237:	56                   	push   esi
c0023238:	57                   	push   edi
c0023239:	55                   	push   ebp
c002323a:	e8 ed fd ff ff       	call   c002302c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002323f:	83 c4 10             	add    esp,0x10
c0023242:	43                   	inc    ebx
c0023243:	83 fb 08             	cmp    ebx,0x8
c0023246:	75 de                	jne    c0023226 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0023248:	83 c4 0c             	add    esp,0xc
c002324b:	5b                   	pop    ebx
c002324c:	5e                   	pop    esi
c002324d:	5f                   	pop    edi
c002324e:	5d                   	pop    ebp
c002324f:	c3                   	ret    

c0023250 <PCI::detect()>:
c0023250:	56                   	push   esi
c0023251:	53                   	push   ebx
c0023252:	53                   	push   ebx
c0023253:	31 db                	xor    ebx,ebx
c0023255:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023259:	6a 00                	push   0x0
c002325b:	6a 00                	push   0x0
c002325d:	6a 00                	push   0x0
c002325f:	56                   	push   esi
c0023260:	e8 61 f7 ff ff       	call   c00229c6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0023265:	83 c4 10             	add    esp,0x10
c0023268:	a8 80                	test   al,0x80
c002326a:	75 21                	jne    c002328d <PCI::detect()+0x3d>
c002326c:	51                   	push   ecx
c002326d:	51                   	push   ecx
c002326e:	6a 00                	push   0x0
c0023270:	56                   	push   esi
c0023271:	e8 20 fc ff ff       	call   c0022e96 <PCI::checkBus(unsigned char)>
c0023276:	83 c4 10             	add    esp,0x10
c0023279:	eb 24                	jmp    c002329f <PCI::detect()+0x4f>
c002327b:	52                   	push   edx
c002327c:	52                   	push   edx
c002327d:	53                   	push   ebx
c002327e:	43                   	inc    ebx
c002327f:	56                   	push   esi
c0023280:	e8 11 fc ff ff       	call   c0022e96 <PCI::checkBus(unsigned char)>
c0023285:	83 c4 10             	add    esp,0x10
c0023288:	83 fb 08             	cmp    ebx,0x8
c002328b:	74 12                	je     c002329f <PCI::detect()+0x4f>
c002328d:	53                   	push   ebx
c002328e:	6a 00                	push   0x0
c0023290:	6a 00                	push   0x0
c0023292:	56                   	push   esi
c0023293:	e8 0a f7 ff ff       	call   c00229a2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023298:	83 c4 10             	add    esp,0x10
c002329b:	66 40                	inc    ax
c002329d:	74 dc                	je     c002327b <PCI::detect()+0x2b>
c002329f:	58                   	pop    eax
c00232a0:	5b                   	pop    ebx
c00232a1:	5e                   	pop    esi
c00232a2:	c3                   	ret    
c00232a3:	90                   	nop

c00232a4 <IDE::close(int, int, void*)>:
c00232a4:	83 c8 ff             	or     eax,0xffffffff
c00232a7:	c3                   	ret    

c00232a8 <IDE::IDE()>:
c00232a8:	83 ec 0c             	sub    esp,0xc
c00232ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232af:	83 ec 08             	sub    esp,0x8
c00232b2:	68 20 c9 02 c0       	push   0xc002c920
c00232b7:	50                   	push   eax
c00232b8:	e8 9b 0d ff ff       	call   c0014058 <HardDiskController::HardDiskController(char const*)>
c00232bd:	83 c4 10             	add    esp,0x10
c00232c0:	ba b0 c9 02 c0       	mov    edx,0xc002c9b0
c00232c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232c9:	89 10                	mov    DWORD PTR [eax],edx
c00232cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232cf:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00232d6:	90                   	nop
c00232d7:	83 c4 0c             	add    esp,0xc
c00232da:	c3                   	ret    
c00232db:	90                   	nop

c00232dc <IDE::prepareInterrupt(unsigned char)>:
c00232dc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00232e1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00232e5:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c00232ed:	c3                   	ret    

c00232ee <selectDrive(unsigned char, unsigned char)>:
c00232ee:	c3                   	ret    
c00232ef:	90                   	nop

c00232f0 <IDE::getBase(unsigned char)>:
c00232f0:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00232f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00232f9:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0023301:	c3                   	ret    

c0023302 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0023302:	55                   	push   ebp
c0023303:	57                   	push   edi
c0023304:	56                   	push   esi
c0023305:	53                   	push   ebx
c0023306:	83 ec 1c             	sub    esp,0x1c
c0023309:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002330d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023311:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0023314:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023318:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002331c:	80 f9 03             	cmp    cl,0x3
c002331f:	77 51                	ja     c0023372 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0023321:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023325:	0f b6 f2             	movzx  esi,dl
c0023328:	0f b6 db             	movzx  ebx,bl
c002332b:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c002332e:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0023332:	83 ca 80             	or     edx,0xffffff80
c0023335:	0f b6 d2             	movzx  edx,dl
c0023338:	52                   	push   edx
c0023339:	6a 0c                	push   0xc
c002333b:	56                   	push   esi
c002333c:	57                   	push   edi
c002333d:	e8 c0 ff ff ff       	call   c0023302 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023342:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0023347:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002334b:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c002334f:	ee                   	out    dx,al
c0023350:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0023355:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0023359:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c002335d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023361:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023369:	83 c4 2c             	add    esp,0x2c
c002336c:	5b                   	pop    ebx
c002336d:	5e                   	pop    esi
c002336e:	5f                   	pop    edi
c002336f:	5d                   	pop    ebp
c0023370:	eb 90                	jmp    c0023302 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023372:	80 fb 07             	cmp    bl,0x7
c0023375:	77 12                	ja     c0023389 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0023377:	0f b6 d2             	movzx  edx,dl
c002337a:	0f b6 db             	movzx  ebx,bl
c002337d:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0023385:	89 da                	mov    edx,ebx
c0023387:	eb 2f                	jmp    c00233b8 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023389:	80 fb 0d             	cmp    bl,0xd
c002338c:	77 13                	ja     c00233a1 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c002338e:	0f b6 d2             	movzx  edx,dl
c0023391:	0f b6 db             	movzx  ebx,bl
c0023394:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c002339b:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c002339f:	eb 17                	jmp    c00233b8 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00233a1:	80 fb 15             	cmp    bl,0x15
c00233a4:	77 13                	ja     c00233b9 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c00233a6:	0f b6 d2             	movzx  edx,dl
c00233a9:	0f b6 db             	movzx  ebx,bl
c00233ac:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c00233b4:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c00233b8:	ee                   	out    dx,al
c00233b9:	83 c4 1c             	add    esp,0x1c
c00233bc:	5b                   	pop    ebx
c00233bd:	5e                   	pop    esi
c00233be:	5f                   	pop    edi
c00233bf:	5d                   	pop    ebp
c00233c0:	c3                   	ret    
c00233c1:	90                   	nop

c00233c2 <IDE::read(unsigned char, unsigned char)>:
c00233c2:	55                   	push   ebp
c00233c3:	57                   	push   edi
c00233c4:	56                   	push   esi
c00233c5:	53                   	push   ebx
c00233c6:	83 ec 1c             	sub    esp,0x1c
c00233c9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00233cd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00233d1:	8d 43 f8             	lea    eax,[ebx-0x8]
c00233d4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00233d8:	3c 03                	cmp    al,0x3
c00233da:	77 43                	ja     c002341f <IDE::read(unsigned char, unsigned char)+0x5d>
c00233dc:	0f b6 f2             	movzx  esi,dl
c00233df:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00233e2:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00233e6:	83 c8 80             	or     eax,0xffffff80
c00233e9:	0f b6 c0             	movzx  eax,al
c00233ec:	50                   	push   eax
c00233ed:	6a 0c                	push   0xc
c00233ef:	56                   	push   esi
c00233f0:	57                   	push   edi
c00233f1:	e8 0c ff ff ff       	call   c0023302 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00233f6:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00233fb:	0f b6 c3             	movzx  eax,bl
c00233fe:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0023402:	ec                   	in     al,dx
c0023403:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023407:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c002340c:	52                   	push   edx
c002340d:	6a 0c                	push   0xc
c002340f:	56                   	push   esi
c0023410:	57                   	push   edi
c0023411:	e8 ec fe ff ff       	call   c0023302 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023416:	83 c4 20             	add    esp,0x20
c0023419:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002341d:	eb 49                	jmp    c0023468 <IDE::read(unsigned char, unsigned char)+0xa6>
c002341f:	80 fb 07             	cmp    bl,0x7
c0023422:	77 12                	ja     c0023436 <IDE::read(unsigned char, unsigned char)+0x74>
c0023424:	0f b6 d2             	movzx  edx,dl
c0023427:	0f b6 c3             	movzx  eax,bl
c002342a:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0023432:	89 c2                	mov    edx,eax
c0023434:	eb 31                	jmp    c0023467 <IDE::read(unsigned char, unsigned char)+0xa5>
c0023436:	80 fb 0d             	cmp    bl,0xd
c0023439:	77 13                	ja     c002344e <IDE::read(unsigned char, unsigned char)+0x8c>
c002343b:	0f b6 d2             	movzx  edx,dl
c002343e:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0023445:	0f b6 d3             	movzx  edx,bl
c0023448:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002344c:	eb 19                	jmp    c0023467 <IDE::read(unsigned char, unsigned char)+0xa5>
c002344e:	31 c0                	xor    eax,eax
c0023450:	80 fb 15             	cmp    bl,0x15
c0023453:	77 13                	ja     c0023468 <IDE::read(unsigned char, unsigned char)+0xa6>
c0023455:	0f b6 d2             	movzx  edx,dl
c0023458:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0023460:	0f b6 d3             	movzx  edx,bl
c0023463:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0023467:	ec                   	in     al,dx
c0023468:	83 c4 1c             	add    esp,0x1c
c002346b:	5b                   	pop    ebx
c002346c:	5e                   	pop    esi
c002346d:	5f                   	pop    edi
c002346e:	5d                   	pop    ebp
c002346f:	c3                   	ret    

c0023470 <IDE::waitInterrupt(unsigned char)>:
c0023470:	55                   	push   ebp
c0023471:	57                   	push   edi
c0023472:	56                   	push   esi
c0023473:	53                   	push   ebx
c0023474:	31 db                	xor    ebx,ebx
c0023476:	83 ec 0c             	sub    esp,0xc
c0023479:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002347d:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0023482:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c002348a:	89 e8                	mov    eax,ebp
c002348c:	84 c0                	test   al,al
c002348e:	75 34                	jne    c00234c4 <IDE::waitInterrupt(unsigned char)+0x54>
c0023490:	52                   	push   edx
c0023491:	6a 0c                	push   0xc
c0023493:	56                   	push   esi
c0023494:	57                   	push   edi
c0023495:	e8 28 ff ff ff       	call   c00233c2 <IDE::read(unsigned char, unsigned char)>
c002349a:	83 c4 10             	add    esp,0x10
c002349d:	a8 01                	test   al,0x1
c002349f:	75 2b                	jne    c00234cc <IDE::waitInterrupt(unsigned char)+0x5c>
c00234a1:	f6 c3 04             	test   bl,0x4
c00234a4:	75 16                	jne    c00234bc <IDE::waitInterrupt(unsigned char)+0x4c>
c00234a6:	83 fb 32             	cmp    ebx,0x32
c00234a9:	7e 11                	jle    c00234bc <IDE::waitInterrupt(unsigned char)+0x4c>
c00234ab:	50                   	push   eax
c00234ac:	50                   	push   eax
c00234ad:	6a 00                	push   0x0
c00234af:	68 80 96 98 00       	push   0x989680
c00234b4:	e8 f0 aa ff ff       	call   c001dfa9 <nanoSleep(unsigned long long)>
c00234b9:	83 c4 10             	add    esp,0x10
c00234bc:	83 fb 3c             	cmp    ebx,0x3c
c00234bf:	74 0b                	je     c00234cc <IDE::waitInterrupt(unsigned char)+0x5c>
c00234c1:	43                   	inc    ebx
c00234c2:	eb be                	jmp    c0023482 <IDE::waitInterrupt(unsigned char)+0x12>
c00234c4:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c00234cc:	83 c4 0c             	add    esp,0xc
c00234cf:	89 e8                	mov    eax,ebp
c00234d1:	5b                   	pop    ebx
c00234d2:	5e                   	pop    esi
c00234d3:	5f                   	pop    edi
c00234d4:	5d                   	pop    ebp
c00234d5:	c3                   	ret    

c00234d6 <ideChannel0IRQHandler(regs*, void*)>:
c00234d6:	83 ec 10             	sub    esp,0x10
c00234d9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00234dd:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00234e4:	6a 07                	push   0x7
c00234e6:	6a 00                	push   0x0
c00234e8:	50                   	push   eax
c00234e9:	e8 d4 fe ff ff       	call   c00233c2 <IDE::read(unsigned char, unsigned char)>
c00234ee:	83 c4 1c             	add    esp,0x1c
c00234f1:	c3                   	ret    

c00234f2 <ideChannel1IRQHandler(regs*, void*)>:
c00234f2:	83 ec 10             	sub    esp,0x10
c00234f5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00234f9:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0023500:	6a 07                	push   0x7
c0023502:	6a 01                	push   0x1
c0023504:	50                   	push   eax
c0023505:	e8 b8 fe ff ff       	call   c00233c2 <IDE::read(unsigned char, unsigned char)>
c002350a:	83 c4 1c             	add    esp,0x1c
c002350d:	c3                   	ret    

c002350e <IDE::enableIRQs(unsigned char, bool)>:
c002350e:	57                   	push   edi
c002350f:	56                   	push   esi
c0023510:	be 04 00 00 00       	mov    esi,0x4
c0023515:	53                   	push   ebx
c0023516:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c002351b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002351f:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0023524:	0f 94 c0             	sete   al
c0023527:	d1 e0                	shl    eax,1
c0023529:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0023530:	0f b6 c0             	movzx  eax,al
c0023533:	50                   	push   eax
c0023534:	6a 0c                	push   0xc
c0023536:	57                   	push   edi
c0023537:	53                   	push   ebx
c0023538:	e8 c5 fd ff ff       	call   c0023302 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002353d:	83 c4 10             	add    esp,0x10
c0023540:	50                   	push   eax
c0023541:	6a 0c                	push   0xc
c0023543:	57                   	push   edi
c0023544:	53                   	push   ebx
c0023545:	e8 78 fe ff ff       	call   c00233c2 <IDE::read(unsigned char, unsigned char)>
c002354a:	83 c4 10             	add    esp,0x10
c002354d:	4e                   	dec    esi
c002354e:	75 f0                	jne    c0023540 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0023550:	5b                   	pop    ebx
c0023551:	5e                   	pop    esi
c0023552:	5f                   	pop    edi
c0023553:	c3                   	ret    

c0023554 <IDE::open(int, int, void*)>:
c0023554:	55                   	push   ebp
c0023555:	57                   	push   edi
c0023556:	56                   	push   esi
c0023557:	53                   	push   ebx
c0023558:	83 ec 1c             	sub    esp,0x1c
c002355b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002355f:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0023568:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023571:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0023578:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c002357f:	0f 85 b0 02 00 00    	jne    c0023835 <IDE::open(int, int, void*)+0x2e1>
c0023585:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c002358b:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c002358f:	83 e0 7f             	and    eax,0x7f
c0023592:	3c 05                	cmp    al,0x5
c0023594:	74 04                	je     c002359a <IDE::open(int, int, void*)+0x46>
c0023596:	3c 0f                	cmp    al,0xf
c0023598:	75 32                	jne    c00235cc <IDE::open(int, int, void*)+0x78>
c002359a:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c00235a0:	83 e0 fc             	and    eax,0xfffffffc
c00235a3:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00235aa:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c00235b0:	83 e0 fc             	and    eax,0xfffffffc
c00235b3:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00235ba:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c00235c0:	83 e0 fc             	and    eax,0xfffffffc
c00235c3:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00235ca:	eb 14                	jmp    c00235e0 <IDE::open(int, int, void*)+0x8c>
c00235cc:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00235d6:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00235e0:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c00235e7:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c00235ee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00235f2:	89 c6                	mov    esi,eax
c00235f4:	bf f8 0c 00 00       	mov    edi,0xcf8
c00235f9:	c1 e6 10             	shl    esi,0x10
c00235fc:	89 e8                	mov    eax,ebp
c00235fe:	89 fa                	mov    edx,edi
c0023600:	c1 e0 0b             	shl    eax,0xb
c0023603:	09 f0                	or     eax,esi
c0023605:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c002360c:	c1 e6 08             	shl    esi,0x8
c002360f:	09 c6                	or     esi,eax
c0023611:	89 f0                	mov    eax,esi
c0023613:	0d 08 00 00 80       	or     eax,0x80000008
c0023618:	ef                   	out    dx,eax
c0023619:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c002361e:	89 ca                	mov    edx,ecx
c0023620:	ed                   	in     eax,dx
c0023621:	c1 e8 10             	shr    eax,0x10
c0023624:	3d ff ff 00 00       	cmp    eax,0xffff
c0023629:	0f 84 f5 00 00 00    	je     c0023724 <IDE::open(int, int, void*)+0x1d0>
c002362f:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0023635:	89 fa                	mov    edx,edi
c0023637:	89 f0                	mov    eax,esi
c0023639:	ef                   	out    dx,eax
c002363a:	b0 fe                	mov    al,0xfe
c002363c:	89 ca                	mov    edx,ecx
c002363e:	ee                   	out    dx,al
c002363f:	89 f0                	mov    eax,esi
c0023641:	89 fa                	mov    edx,edi
c0023643:	ef                   	out    dx,eax
c0023644:	89 ca                	mov    edx,ecx
c0023646:	ed                   	in     eax,dx
c0023647:	3c fe                	cmp    al,0xfe
c0023649:	0f 85 a9 00 00 00    	jne    c00236f8 <IDE::open(int, int, void*)+0x1a4>
c002364f:	8b 15 28 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e228
c0023655:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c002365c:	74 33                	je     c0023691 <IDE::open(int, int, void*)+0x13d>
c002365e:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0023664:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0023668:	40                   	inc    eax
c0023669:	83 ec 0c             	sub    esp,0xc
c002366c:	0f b6 c0             	movzx  eax,al
c002366f:	50                   	push   eax
c0023670:	55                   	push   ebp
c0023671:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023675:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c002367b:	51                   	push   ecx
c002367c:	e8 e5 46 ff ff       	call   c0017d66 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0023681:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0023686:	83 c4 1c             	add    esp,0x1c
c0023689:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002368f:	eb 0a                	jmp    c002369b <IDE::open(int, int, void*)+0x147>
c0023691:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c002369b:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c00236a2:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c00236a9:	c1 e1 10             	shl    ecx,0x10
c00236ac:	c1 e0 08             	shl    eax,0x8
c00236af:	bf f8 0c 00 00       	mov    edi,0xcf8
c00236b4:	09 c1                	or     ecx,eax
c00236b6:	89 fa                	mov    edx,edi
c00236b8:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00236bf:	c1 e0 0b             	shl    eax,0xb
c00236c2:	09 c1                	or     ecx,eax
c00236c4:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c00236ca:	89 c8                	mov    eax,ecx
c00236cc:	ef                   	out    dx,eax
c00236cd:	be fc 0c 00 00       	mov    esi,0xcfc
c00236d2:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c00236d8:	89 f2                	mov    edx,esi
c00236da:	ee                   	out    dx,al
c00236db:	89 c8                	mov    eax,ecx
c00236dd:	89 fa                	mov    edx,edi
c00236df:	ef                   	out    dx,eax
c00236e0:	89 f2                	mov    edx,esi
c00236e2:	ed                   	in     eax,dx
c00236e3:	0f b6 c0             	movzx  eax,al
c00236e6:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c00236ec:	74 46                	je     c0023734 <IDE::open(int, int, void*)+0x1e0>
c00236ee:	83 ec 0c             	sub    esp,0xc
c00236f1:	68 38 c9 02 c0       	push   0xc002c938
c00236f6:	eb 34                	jmp    c002372c <IDE::open(int, int, void*)+0x1d8>
c00236f8:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0023701:	75 17                	jne    c002371a <IDE::open(int, int, void*)+0x1c6>
c0023703:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0023708:	74 07                	je     c0023711 <IDE::open(int, int, void*)+0x1bd>
c002370a:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c002370f:	75 09                	jne    c002371a <IDE::open(int, int, void*)+0x1c6>
c0023711:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023718:	eb 1a                	jmp    c0023734 <IDE::open(int, int, void*)+0x1e0>
c002371a:	83 ec 0c             	sub    esp,0xc
c002371d:	68 40 c9 02 c0       	push   0xc002c940
c0023722:	eb 08                	jmp    c002372c <IDE::open(int, int, void*)+0x1d8>
c0023724:	83 ec 0c             	sub    esp,0xc
c0023727:	68 71 c9 02 c0       	push   0xc002c971
c002372c:	e8 0c 6a ff ff       	call   c001a13d <Krnl::panic(char const*)>
c0023731:	83 c4 10             	add    esp,0x10
c0023734:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c002373b:	79 1a                	jns    c0023757 <IDE::open(int, int, void*)+0x203>
c002373d:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0023743:	83 e0 fc             	and    eax,0xfffffffc
c0023746:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c002374d:	83 c0 08             	add    eax,0x8
c0023750:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0023757:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c002375d:	89 c2                	mov    edx,eax
c002375f:	83 e2 0f             	and    edx,0xf
c0023762:	66 83 fa 08          	cmp    dx,0x8
c0023766:	75 0a                	jne    c0023772 <IDE::open(int, int, void*)+0x21e>
c0023768:	83 e8 02             	sub    eax,0x2
c002376b:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023772:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0023778:	89 c2                	mov    edx,eax
c002377a:	83 e2 0f             	and    edx,0xf
c002377d:	66 83 fa 08          	cmp    dx,0x8
c0023781:	75 0a                	jne    c002378d <IDE::open(int, int, void*)+0x239>
c0023783:	83 e8 02             	sub    eax,0x2
c0023786:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002378d:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0023794:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c002379b:	89 d0                	mov    eax,edx
c002379d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00237a0:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00237a4:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c00237a8:	8d 4a 01             	lea    ecx,[edx+0x1]
c00237ab:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00237b0:	0f b6 c9             	movzx  ecx,cl
c00237b3:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c00237ba:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00237bd:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00237c1:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c00237c5:	8d 50 02             	lea    edx,[eax+0x2]
c00237c8:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00237cd:	0f b6 d2             	movzx  edx,dl
c00237d0:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00237d6:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00237d9:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00237dd:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c00237e1:	8d 48 03             	lea    ecx,[eax+0x3]
c00237e4:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00237e9:	0f b6 c9             	movzx  ecx,cl
c00237ec:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c00237f2:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00237f5:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00237f9:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c00237fd:	8d 50 04             	lea    edx,[eax+0x4]
c0023800:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0023806:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c002380b:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0023812:	66 85 f6             	test   si,si
c0023815:	74 5b                	je     c0023872 <IDE::open(int, int, void*)+0x31e>
c0023817:	0f b6 d2             	movzx  edx,dl
c002381a:	83 c0 05             	add    eax,0x5
c002381d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023820:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023824:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0023828:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c002382e:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023833:	eb 3d                	jmp    c0023872 <IDE::open(int, int, void*)+0x31e>
c0023835:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c002383b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023842:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023849:	66 05 06 02          	add    ax,0x206
c002384d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023854:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c002385b:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023862:	66 05 06 02          	add    ax,0x206
c0023866:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002386d:	e9 e5 fe ff ff       	jmp    c0023757 <IDE::open(int, int, void*)+0x203>
c0023872:	50                   	push   eax
c0023873:	50                   	push   eax
c0023874:	6a 00                	push   0x0
c0023876:	53                   	push   ebx
c0023877:	e8 60 fa ff ff       	call   c00232dc <IDE::prepareInterrupt(unsigned char)>
c002387c:	5a                   	pop    edx
c002387d:	59                   	pop    ecx
c002387e:	6a 01                	push   0x1
c0023880:	53                   	push   ebx
c0023881:	e8 56 fa ff ff       	call   c00232dc <IDE::prepareInterrupt(unsigned char)>
c0023886:	83 c4 0c             	add    esp,0xc
c0023889:	6a 00                	push   0x0
c002388b:	6a 00                	push   0x0
c002388d:	53                   	push   ebx
c002388e:	e8 7b fc ff ff       	call   c002350e <IDE::enableIRQs(unsigned char, bool)>
c0023893:	83 c4 0c             	add    esp,0xc
c0023896:	6a 00                	push   0x0
c0023898:	6a 01                	push   0x1
c002389a:	53                   	push   ebx
c002389b:	e8 6e fc ff ff       	call   c002350e <IDE::enableIRQs(unsigned char, bool)>
c00238a0:	83 c4 10             	add    esp,0x10
c00238a3:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00238aa:	74 34                	je     c00238e0 <IDE::open(int, int, void*)+0x38c>
c00238ac:	83 ec 0c             	sub    esp,0xc
c00238af:	53                   	push   ebx
c00238b0:	6a 01                	push   0x1
c00238b2:	68 d6 34 02 c0       	push   0xc00234d6
c00238b7:	6a 0e                	push   0xe
c00238b9:	53                   	push   ebx
c00238ba:	e8 63 03 ff ff       	call   c0013c22 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00238bf:	83 c4 14             	add    esp,0x14
c00238c2:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00238c8:	53                   	push   ebx
c00238c9:	6a 01                	push   0x1
c00238cb:	68 f2 34 02 c0       	push   0xc00234f2
c00238d0:	6a 0f                	push   0xf
c00238d2:	53                   	push   ebx
c00238d3:	e8 4a 03 ff ff       	call   c0013c22 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00238d8:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c00238de:	eb 38                	jmp    c0023918 <IDE::open(int, int, void*)+0x3c4>
c00238e0:	83 ec 0c             	sub    esp,0xc
c00238e3:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c00238ed:	53                   	push   ebx
c00238ee:	6a 00                	push   0x0
c00238f0:	68 d6 34 02 c0       	push   0xc00234d6
c00238f5:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00238fb:	53                   	push   ebx
c00238fc:	e8 21 03 ff ff       	call   c0013c22 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023901:	83 c4 14             	add    esp,0x14
c0023904:	53                   	push   ebx
c0023905:	6a 00                	push   0x0
c0023907:	68 f2 34 02 c0       	push   0xc00234f2
c002390c:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0023912:	53                   	push   ebx
c0023913:	e8 0a 03 ff ff       	call   c0013c22 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023918:	8b 03                	mov    eax,DWORD PTR [ebx]
c002391a:	83 c4 20             	add    esp,0x20
c002391d:	83 ec 0c             	sub    esp,0xc
c0023920:	53                   	push   ebx
c0023921:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0023924:	83 c4 0c             	add    esp,0xc
c0023927:	6a 07                	push   0x7
c0023929:	6a 00                	push   0x0
c002392b:	53                   	push   ebx
c002392c:	e8 91 fa ff ff       	call   c00233c2 <IDE::read(unsigned char, unsigned char)>
c0023931:	83 c4 0c             	add    esp,0xc
c0023934:	6a 07                	push   0x7
c0023936:	6a 01                	push   0x1
c0023938:	53                   	push   ebx
c0023939:	e8 84 fa ff ff       	call   c00233c2 <IDE::read(unsigned char, unsigned char)>
c002393e:	83 c4 0c             	add    esp,0xc
c0023941:	6a 01                	push   0x1
c0023943:	6a 00                	push   0x0
c0023945:	53                   	push   ebx
c0023946:	e8 c3 fb ff ff       	call   c002350e <IDE::enableIRQs(unsigned char, bool)>
c002394b:	83 c4 0c             	add    esp,0xc
c002394e:	6a 01                	push   0x1
c0023950:	6a 01                	push   0x1
c0023952:	53                   	push   ebx
c0023953:	e8 b6 fb ff ff       	call   c002350e <IDE::enableIRQs(unsigned char, bool)>
c0023958:	83 c4 2c             	add    esp,0x2c
c002395b:	31 c0                	xor    eax,eax
c002395d:	5b                   	pop    ebx
c002395e:	5e                   	pop    esi
c002395f:	5f                   	pop    edi
c0023960:	5d                   	pop    ebp
c0023961:	c3                   	ret    

c0023962 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0023962:	55                   	push   ebp
c0023963:	57                   	push   edi
c0023964:	56                   	push   esi
c0023965:	53                   	push   ebx
c0023966:	83 ec 1c             	sub    esp,0x1c
c0023969:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002396d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023971:	8d 50 f8             	lea    edx,[eax-0x8]
c0023974:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023978:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c002397c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023980:	80 fa 03             	cmp    dl,0x3
c0023983:	77 5d                	ja     c00239e2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0023985:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023989:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002398d:	0f b6 db             	movzx  ebx,bl
c0023990:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0023993:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0023997:	83 ca 80             	or     edx,0xffffff80
c002399a:	0f b6 d2             	movzx  edx,dl
c002399d:	52                   	push   edx
c002399e:	6a 0c                	push   0xc
c00239a0:	53                   	push   ebx
c00239a1:	56                   	push   esi
c00239a2:	e8 5b f9 ff ff       	call   c0023302 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00239a7:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c00239ac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00239b0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00239b4:	0f b6 c0             	movzx  eax,al
c00239b7:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c00239bb:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00239bd:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00239c2:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c00239c6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00239ca:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00239ce:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00239d6:	83 c4 2c             	add    esp,0x2c
c00239d9:	5b                   	pop    ebx
c00239da:	5e                   	pop    esi
c00239db:	5f                   	pop    edi
c00239dc:	5d                   	pop    ebp
c00239dd:	e9 20 f9 ff ff       	jmp    c0023302 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00239e2:	3c 07                	cmp    al,0x7
c00239e4:	77 10                	ja     c00239f6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c00239e6:	0f b6 db             	movzx  ebx,bl
c00239e9:	0f b6 d0             	movzx  edx,al
c00239ec:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c00239f4:	eb 2d                	jmp    c0023a23 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00239f6:	3c 0d                	cmp    al,0xd
c00239f8:	77 13                	ja     c0023a0d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c00239fa:	0f b6 db             	movzx  ebx,bl
c00239fd:	0f b6 c0             	movzx  eax,al
c0023a00:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0023a07:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0023a0b:	eb 16                	jmp    c0023a23 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023a0d:	3c 15                	cmp    al,0x15
c0023a0f:	77 14                	ja     c0023a25 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0023a11:	0f b6 db             	movzx  ebx,bl
c0023a14:	0f b6 c0             	movzx  eax,al
c0023a17:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0023a1f:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0023a23:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023a25:	83 c4 1c             	add    esp,0x1c
c0023a28:	5b                   	pop    ebx
c0023a29:	5e                   	pop    esi
c0023a2a:	5f                   	pop    edi
c0023a2b:	5d                   	pop    ebp
c0023a2c:	c3                   	ret    
c0023a2d:	90                   	nop

c0023a2e <IDE::detect()>:
c0023a2e:	55                   	push   ebp
c0023a2f:	57                   	push   edi
c0023a30:	56                   	push   esi
c0023a31:	53                   	push   ebx
c0023a32:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0023a38:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0023a3f:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0023a46:	0f 85 9d 02 00 00    	jne    c0023ce9 <IDE::detect()+0x2bb>
c0023a4c:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0023a53:	31 f6                	xor    esi,esi
c0023a55:	31 ed                	xor    ebp,ebp
c0023a57:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0023a5f:	89 e8                	mov    eax,ebp
c0023a61:	c1 e0 06             	shl    eax,0x6
c0023a64:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0023a6c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0023a70:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0023a74:	c1 e0 04             	shl    eax,0x4
c0023a77:	83 c8 a0             	or     eax,0xffffffa0
c0023a7a:	0f b6 c0             	movzx  eax,al
c0023a7d:	50                   	push   eax
c0023a7e:	6a 06                	push   0x6
c0023a80:	56                   	push   esi
c0023a81:	53                   	push   ebx
c0023a82:	e8 7b f8 ff ff       	call   c0023302 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a87:	83 c4 0c             	add    esp,0xc
c0023a8a:	6a 0c                	push   0xc
c0023a8c:	56                   	push   esi
c0023a8d:	53                   	push   ebx
c0023a8e:	e8 2f f9 ff ff       	call   c00233c2 <IDE::read(unsigned char, unsigned char)>
c0023a93:	83 c4 0c             	add    esp,0xc
c0023a96:	6a 0c                	push   0xc
c0023a98:	56                   	push   esi
c0023a99:	53                   	push   ebx
c0023a9a:	e8 23 f9 ff ff       	call   c00233c2 <IDE::read(unsigned char, unsigned char)>
c0023a9f:	83 c4 0c             	add    esp,0xc
c0023aa2:	6a 0c                	push   0xc
c0023aa4:	56                   	push   esi
c0023aa5:	53                   	push   ebx
c0023aa6:	e8 17 f9 ff ff       	call   c00233c2 <IDE::read(unsigned char, unsigned char)>
c0023aab:	83 c4 0c             	add    esp,0xc
c0023aae:	6a 0c                	push   0xc
c0023ab0:	56                   	push   esi
c0023ab1:	53                   	push   ebx
c0023ab2:	e8 0b f9 ff ff       	call   c00233c2 <IDE::read(unsigned char, unsigned char)>
c0023ab7:	68 ec 00 00 00       	push   0xec
c0023abc:	6a 07                	push   0x7
c0023abe:	56                   	push   esi
c0023abf:	53                   	push   ebx
c0023ac0:	e8 3d f8 ff ff       	call   c0023302 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ac5:	83 c4 1c             	add    esp,0x1c
c0023ac8:	6a 0c                	push   0xc
c0023aca:	56                   	push   esi
c0023acb:	53                   	push   ebx
c0023acc:	e8 f1 f8 ff ff       	call   c00233c2 <IDE::read(unsigned char, unsigned char)>
c0023ad1:	83 c4 0c             	add    esp,0xc
c0023ad4:	6a 0c                	push   0xc
c0023ad6:	56                   	push   esi
c0023ad7:	53                   	push   ebx
c0023ad8:	e8 e5 f8 ff ff       	call   c00233c2 <IDE::read(unsigned char, unsigned char)>
c0023add:	83 c4 0c             	add    esp,0xc
c0023ae0:	6a 0c                	push   0xc
c0023ae2:	56                   	push   esi
c0023ae3:	53                   	push   ebx
c0023ae4:	e8 d9 f8 ff ff       	call   c00233c2 <IDE::read(unsigned char, unsigned char)>
c0023ae9:	83 c4 0c             	add    esp,0xc
c0023aec:	6a 0c                	push   0xc
c0023aee:	56                   	push   esi
c0023aef:	53                   	push   ebx
c0023af0:	e8 cd f8 ff ff       	call   c00233c2 <IDE::read(unsigned char, unsigned char)>
c0023af5:	83 c4 0c             	add    esp,0xc
c0023af8:	6a 0c                	push   0xc
c0023afa:	56                   	push   esi
c0023afb:	53                   	push   ebx
c0023afc:	e8 c1 f8 ff ff       	call   c00233c2 <IDE::read(unsigned char, unsigned char)>
c0023b01:	83 c4 10             	add    esp,0x10
c0023b04:	84 c0                	test   al,al
c0023b06:	0f 84 63 01 00 00    	je     c0023c6f <IDE::detect()+0x241>
c0023b0c:	31 ff                	xor    edi,edi
c0023b0e:	50                   	push   eax
c0023b0f:	6a 0c                	push   0xc
c0023b11:	56                   	push   esi
c0023b12:	53                   	push   ebx
c0023b13:	e8 aa f8 ff ff       	call   c00233c2 <IDE::read(unsigned char, unsigned char)>
c0023b18:	83 c4 10             	add    esp,0x10
c0023b1b:	a8 01                	test   al,0x1
c0023b1d:	0f 85 6d 01 00 00    	jne    c0023c90 <IDE::detect()+0x262>
c0023b23:	84 c0                	test   al,al
c0023b25:	78 04                	js     c0023b2b <IDE::detect()+0xfd>
c0023b27:	a8 08                	test   al,0x8
c0023b29:	75 27                	jne    c0023b52 <IDE::detect()+0x124>
c0023b2b:	47                   	inc    edi
c0023b2c:	81 ff 17 01 00 00    	cmp    edi,0x117
c0023b32:	7e da                	jle    c0023b0e <IDE::detect()+0xe0>
c0023b34:	50                   	push   eax
c0023b35:	50                   	push   eax
c0023b36:	6a 00                	push   0x0
c0023b38:	68 40 4b 4c 00       	push   0x4c4b40
c0023b3d:	e8 67 a4 ff ff       	call   c001dfa9 <nanoSleep(unsigned long long)>
c0023b42:	83 c4 10             	add    esp,0x10
c0023b45:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0023b4b:	75 c1                	jne    c0023b0e <IDE::detect()+0xe0>
c0023b4d:	e9 3e 01 00 00       	jmp    c0023c90 <IDE::detect()+0x262>
c0023b52:	31 c9                	xor    ecx,ecx
c0023b54:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0023b58:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0023b5c:	83 ec 0c             	sub    esp,0xc
c0023b5f:	68 80 00 00 00       	push   0x80
c0023b64:	57                   	push   edi
c0023b65:	6a 00                	push   0x0
c0023b67:	56                   	push   esi
c0023b68:	53                   	push   ebx
c0023b69:	e8 f4 fd ff ff       	call   c0023962 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0023b6e:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0023b73:	89 e8                	mov    eax,ebp
c0023b75:	89 d1                	mov    ecx,edx
c0023b77:	c1 e0 06             	shl    eax,0x6
c0023b7a:	01 d8                	add    eax,ebx
c0023b7c:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0023b83:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0023b8a:	89 f2                	mov    edx,esi
c0023b8c:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0023b92:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0023b96:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0023b9c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023ba0:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0023ba7:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0023baf:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0023bb6:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0023bbe:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0023bc4:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0023bcb:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0023bd1:	8d 54 24 58          	lea    edx,[esp+0x58]
c0023bd5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0023bd9:	83 c4 20             	add    esp,0x20
c0023bdc:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0023bdf:	83 c0 02             	add    eax,0x2
c0023be2:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0023be8:	83 c7 02             	add    edi,0x2
c0023beb:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0023bee:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0023bf4:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0023bf8:	75 e2                	jne    c0023bdc <IDE::detect()+0x1ae>
c0023bfa:	89 e8                	mov    eax,ebp
c0023bfc:	c1 e0 06             	shl    eax,0x6
c0023bff:	01 d8                	add    eax,ebx
c0023c01:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0023c07:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0023c0e:	66 c1 ea 09          	shr    dx,0x9
c0023c12:	83 e2 01             	and    edx,0x1
c0023c15:	84 c9                	test   cl,cl
c0023c17:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0023c1d:	75 22                	jne    c0023c41 <IDE::detect()+0x213>
c0023c1f:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c0023c26:	74 46                	je     c0023c6e <IDE::detect()+0x240>
c0023c28:	83 ec 0c             	sub    esp,0xc
c0023c2b:	68 7c 01 00 00       	push   0x17c
c0023c30:	e8 e4 bb fe ff       	call   c000f819 <malloc>
c0023c35:	89 c7                	mov    edi,eax
c0023c37:	89 04 24             	mov    DWORD PTR [esp],eax
c0023c3a:	e8 15 05 00 00       	call   c0024154 <ATA::ATA()>
c0023c3f:	eb 17                	jmp    c0023c58 <IDE::detect()+0x22a>
c0023c41:	83 ec 0c             	sub    esp,0xc
c0023c44:	68 80 01 00 00       	push   0x180
c0023c49:	e8 cb bb fe ff       	call   c000f819 <malloc>
c0023c4e:	89 c7                	mov    edi,eax
c0023c50:	89 04 24             	mov    DWORD PTR [esp],eax
c0023c53:	e8 88 0b 00 00       	call   c00247e0 <ATAPI::ATAPI()>
c0023c58:	5a                   	pop    edx
c0023c59:	59                   	pop    ecx
c0023c5a:	57                   	push   edi
c0023c5b:	53                   	push   ebx
c0023c5c:	e8 49 00 ff ff       	call   c0013caa <Device::addChild(Device*)>
c0023c61:	8b 07                	mov    eax,DWORD PTR [edi]
c0023c63:	53                   	push   ebx
c0023c64:	55                   	push   ebp
c0023c65:	6a 00                	push   0x0
c0023c67:	57                   	push   edi
c0023c68:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023c6b:	83 c4 20             	add    esp,0x20
c0023c6e:	45                   	inc    ebp
c0023c6f:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0023c74:	74 0d                	je     c0023c83 <IDE::detect()+0x255>
c0023c76:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0023c7e:	e9 dc fd ff ff       	jmp    c0023a5f <IDE::detect()+0x31>
c0023c83:	4e                   	dec    esi
c0023c84:	74 63                	je     c0023ce9 <IDE::detect()+0x2bb>
c0023c86:	be 01 00 00 00       	mov    esi,0x1
c0023c8b:	e9 c7 fd ff ff       	jmp    c0023a57 <IDE::detect()+0x29>
c0023c90:	50                   	push   eax
c0023c91:	6a 04                	push   0x4
c0023c93:	56                   	push   esi
c0023c94:	53                   	push   ebx
c0023c95:	e8 28 f7 ff ff       	call   c00233c2 <IDE::read(unsigned char, unsigned char)>
c0023c9a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023c9e:	83 c4 0c             	add    esp,0xc
c0023ca1:	6a 05                	push   0x5
c0023ca3:	56                   	push   esi
c0023ca4:	53                   	push   ebx
c0023ca5:	e8 18 f7 ff ff       	call   c00233c2 <IDE::read(unsigned char, unsigned char)>
c0023caa:	83 c4 10             	add    esp,0x10
c0023cad:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0023cb1:	80 fa 14             	cmp    dl,0x14
c0023cb4:	75 04                	jne    c0023cba <IDE::detect()+0x28c>
c0023cb6:	3c eb                	cmp    al,0xeb
c0023cb8:	eb 07                	jmp    c0023cc1 <IDE::detect()+0x293>
c0023cba:	3c 96                	cmp    al,0x96
c0023cbc:	75 b1                	jne    c0023c6f <IDE::detect()+0x241>
c0023cbe:	80 fa 69             	cmp    dl,0x69
c0023cc1:	75 ac                	jne    c0023c6f <IDE::detect()+0x241>
c0023cc3:	68 a1 00 00 00       	push   0xa1
c0023cc8:	6a 07                	push   0x7
c0023cca:	56                   	push   esi
c0023ccb:	53                   	push   ebx
c0023ccc:	e8 31 f6 ff ff       	call   c0023302 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023cd1:	5f                   	pop    edi
c0023cd2:	58                   	pop    eax
c0023cd3:	6a 00                	push   0x0
c0023cd5:	68 40 42 0f 00       	push   0xf4240
c0023cda:	e8 ca a2 ff ff       	call   c001dfa9 <nanoSleep(unsigned long long)>
c0023cdf:	83 c4 10             	add    esp,0x10
c0023ce2:	b1 01                	mov    cl,0x1
c0023ce4:	e9 6b fe ff ff       	jmp    c0023b54 <IDE::detect()+0x126>
c0023ce9:	81 c4 1c 02 00 00    	add    esp,0x21c
c0023cef:	5b                   	pop    ebx
c0023cf0:	5e                   	pop    esi
c0023cf1:	5f                   	pop    edi
c0023cf2:	5d                   	pop    ebp
c0023cf3:	c3                   	ret    

c0023cf4 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0023cf4:	55                   	push   ebp
c0023cf5:	57                   	push   edi
c0023cf6:	56                   	push   esi
c0023cf7:	53                   	push   ebx
c0023cf8:	83 ec 1c             	sub    esp,0x1c
c0023cfb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023cff:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023d03:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023d07:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0023d0b:	88 c3                	mov    bl,al
c0023d0d:	84 c0                	test   al,al
c0023d0f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023d13:	0f 84 81 00 00 00    	je     c0023d9a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023d19:	83 ec 0c             	sub    esp,0xc
c0023d1c:	68 9b c9 02 c0       	push   0xc002c99b
c0023d21:	e8 4b eb fe ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c0023d26:	83 c4 10             	add    esp,0x10
c0023d29:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023d2d:	3c 01                	cmp    al,0x1
c0023d2f:	74 63                	je     c0023d94 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c0023d31:	3c 02                	cmp    al,0x2
c0023d33:	75 53                	jne    c0023d88 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0023d35:	d1 e6                	shl    esi,1
c0023d37:	09 ee                	or     esi,ebp
c0023d39:	50                   	push   eax
c0023d3a:	89 f0                	mov    eax,esi
c0023d3c:	6a 01                	push   0x1
c0023d3e:	0f b6 f0             	movzx  esi,al
c0023d41:	c1 e6 06             	shl    esi,0x6
c0023d44:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023d4c:	50                   	push   eax
c0023d4d:	57                   	push   edi
c0023d4e:	e8 6f f6 ff ff       	call   c00233c2 <IDE::read(unsigned char, unsigned char)>
c0023d53:	83 c4 10             	add    esp,0x10
c0023d56:	a8 01                	test   al,0x1
c0023d58:	74 02                	je     c0023d5c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0023d5a:	b3 07                	mov    bl,0x7
c0023d5c:	a8 02                	test   al,0x2
c0023d5e:	74 02                	je     c0023d62 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c0023d60:	b3 03                	mov    bl,0x3
c0023d62:	a8 04                	test   al,0x4
c0023d64:	74 02                	je     c0023d68 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0023d66:	b3 14                	mov    bl,0x14
c0023d68:	a8 08                	test   al,0x8
c0023d6a:	74 02                	je     c0023d6e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c0023d6c:	b3 03                	mov    bl,0x3
c0023d6e:	a8 10                	test   al,0x10
c0023d70:	74 02                	je     c0023d74 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c0023d72:	b3 15                	mov    bl,0x15
c0023d74:	a8 20                	test   al,0x20
c0023d76:	74 02                	je     c0023d7a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c0023d78:	b3 03                	mov    bl,0x3
c0023d7a:	a8 40                	test   al,0x40
c0023d7c:	74 02                	je     c0023d80 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c0023d7e:	b3 16                	mov    bl,0x16
c0023d80:	84 c0                	test   al,al
c0023d82:	79 16                	jns    c0023d9a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023d84:	b3 0d                	mov    bl,0xd
c0023d86:	eb 12                	jmp    c0023d9a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023d88:	3c 03                	cmp    al,0x3
c0023d8a:	74 0c                	je     c0023d98 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c0023d8c:	3c 04                	cmp    al,0x4
c0023d8e:	75 0a                	jne    c0023d9a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023d90:	b3 08                	mov    bl,0x8
c0023d92:	eb 06                	jmp    c0023d9a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023d94:	b3 13                	mov    bl,0x13
c0023d96:	eb 02                	jmp    c0023d9a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023d98:	b3 17                	mov    bl,0x17
c0023d9a:	83 c4 1c             	add    esp,0x1c
c0023d9d:	88 d8                	mov    al,bl
c0023d9f:	5b                   	pop    ebx
c0023da0:	5e                   	pop    esi
c0023da1:	5f                   	pop    edi
c0023da2:	5d                   	pop    ebp
c0023da3:	c3                   	ret    

c0023da4 <IDE::polling(unsigned char, unsigned int)>:
c0023da4:	57                   	push   edi
c0023da5:	56                   	push   esi
c0023da6:	53                   	push   ebx
c0023da7:	bb 04 00 00 00       	mov    ebx,0x4
c0023dac:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023db0:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023db5:	52                   	push   edx
c0023db6:	6a 0c                	push   0xc
c0023db8:	56                   	push   esi
c0023db9:	57                   	push   edi
c0023dba:	e8 03 f6 ff ff       	call   c00233c2 <IDE::read(unsigned char, unsigned char)>
c0023dbf:	83 c4 10             	add    esp,0x10
c0023dc2:	4b                   	dec    ebx
c0023dc3:	75 f0                	jne    c0023db5 <IDE::polling(unsigned char, unsigned int)+0x11>
c0023dc5:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023dca:	50                   	push   eax
c0023dcb:	6a 0c                	push   0xc
c0023dcd:	56                   	push   esi
c0023dce:	57                   	push   edi
c0023dcf:	e8 ee f5 ff ff       	call   c00233c2 <IDE::read(unsigned char, unsigned char)>
c0023dd4:	83 c4 10             	add    esp,0x10
c0023dd7:	a8 01                	test   al,0x1
c0023dd9:	75 17                	jne    c0023df2 <IDE::polling(unsigned char, unsigned int)+0x4e>
c0023ddb:	a8 20                	test   al,0x20
c0023ddd:	75 0f                	jne    c0023dee <IDE::polling(unsigned char, unsigned int)+0x4a>
c0023ddf:	4b                   	dec    ebx
c0023de0:	74 10                	je     c0023df2 <IDE::polling(unsigned char, unsigned int)+0x4e>
c0023de2:	84 c0                	test   al,al
c0023de4:	78 e4                	js     c0023dca <IDE::polling(unsigned char, unsigned int)+0x26>
c0023de6:	a8 08                	test   al,0x8
c0023de8:	74 e0                	je     c0023dca <IDE::polling(unsigned char, unsigned int)+0x26>
c0023dea:	31 c0                	xor    eax,eax
c0023dec:	eb 06                	jmp    c0023df4 <IDE::polling(unsigned char, unsigned int)+0x50>
c0023dee:	b0 01                	mov    al,0x1
c0023df0:	eb 02                	jmp    c0023df4 <IDE::polling(unsigned char, unsigned int)+0x50>
c0023df2:	b0 02                	mov    al,0x2
c0023df4:	5b                   	pop    ebx
c0023df5:	5e                   	pop    esi
c0023df6:	5f                   	pop    edi
c0023df7:	c3                   	ret    

c0023df8 <SATABus::close(int, int, void*)>:
c0023df8:	31 c0                	xor    eax,eax
c0023dfa:	c3                   	ret    
c0023dfb:	90                   	nop

c0023dfc <SATABus::detect()>:
c0023dfc:	c3                   	ret    
c0023dfd:	90                   	nop

c0023dfe <SATABus::SATABus()>:
c0023dfe:	83 ec 0c             	sub    esp,0xc
c0023e01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e05:	83 ec 08             	sub    esp,0x8
c0023e08:	68 d4 c9 02 c0       	push   0xc002c9d4
c0023e0d:	50                   	push   eax
c0023e0e:	e8 45 02 ff ff       	call   c0014058 <HardDiskController::HardDiskController(char const*)>
c0023e13:	83 c4 10             	add    esp,0x10
c0023e16:	ba 28 ca 02 c0       	mov    edx,0xc002ca28
c0023e1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e1f:	89 10                	mov    DWORD PTR [eax],edx
c0023e21:	83 ec 0c             	sub    esp,0xc
c0023e24:	6a 50                	push   0x50
c0023e26:	e8 e2 be fe ff       	call   c000fd0d <Phys::allocateContiguousPages(int)>
c0023e2b:	83 c4 10             	add    esp,0x10
c0023e2e:	89 c2                	mov    edx,eax
c0023e30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e34:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023e3a:	83 ec 0c             	sub    esp,0xc
c0023e3d:	6a 50                	push   0x50
c0023e3f:	e8 5b d6 fe ff       	call   c001149f <Virt::allocateKernelVirtualPages(int)>
c0023e44:	83 c4 10             	add    esp,0x10
c0023e47:	89 c2                	mov    edx,eax
c0023e49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e4d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023e53:	a1 90 e3 02 c0       	mov    eax,ds:0xc002e390
c0023e58:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023e5c:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023e62:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023e66:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023e6c:	83 ec 0c             	sub    esp,0xc
c0023e6f:	6a 03                	push   0x3
c0023e71:	6a 50                	push   0x50
c0023e73:	51                   	push   ecx
c0023e74:	52                   	push   edx
c0023e75:	50                   	push   eax
c0023e76:	e8 c1 df fe ff       	call   c0011e3c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023e7b:	83 c4 20             	add    esp,0x20
c0023e7e:	90                   	nop
c0023e7f:	83 c4 0c             	add    esp,0xc
c0023e82:	c3                   	ret    
c0023e83:	90                   	nop

c0023e84 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023e84:	83 ec 0c             	sub    esp,0xc
c0023e87:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023e8b:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023e8e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023e91:	09 c2                	or     edx,eax
c0023e93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e97:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023e9d:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023e9f:	31 c0                	xor    eax,eax
c0023ea1:	c1 e9 08             	shr    ecx,0x8
c0023ea4:	83 e1 0f             	and    ecx,0xf
c0023ea7:	39 c8                	cmp    eax,ecx
c0023ea9:	74 0a                	je     c0023eb5 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023eab:	f6 c2 01             	test   dl,0x1
c0023eae:	74 18                	je     c0023ec8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023eb0:	d1 ea                	shr    edx,1
c0023eb2:	40                   	inc    eax
c0023eb3:	eb f2                	jmp    c0023ea7 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023eb5:	83 ec 0c             	sub    esp,0xc
c0023eb8:	68 f8 c9 02 c0       	push   0xc002c9f8
c0023ebd:	e8 7b 62 ff ff       	call   c001a13d <Krnl::panic(char const*)>
c0023ec2:	83 c4 10             	add    esp,0x10
c0023ec5:	83 c8 ff             	or     eax,0xffffffff
c0023ec8:	83 c4 0c             	add    esp,0xc
c0023ecb:	c3                   	ret    

c0023ecc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023ecc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023ed0:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023ed3:	89 c2                	mov    edx,eax
c0023ed5:	c1 ea 08             	shr    edx,0x8
c0023ed8:	83 e2 0f             	and    edx,0xf
c0023edb:	fe ca                	dec    dl
c0023edd:	75 31                	jne    c0023f10 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023edf:	83 e0 0f             	and    eax,0xf
c0023ee2:	3c 03                	cmp    al,0x3
c0023ee4:	75 2a                	jne    c0023f10 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023ee6:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023ee9:	b8 02 00 00 00       	mov    eax,0x2
c0023eee:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023ef4:	74 1c                	je     c0023f12 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023ef6:	b8 04 00 00 00       	mov    eax,0x4
c0023efb:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023f01:	74 0f                	je     c0023f12 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023f03:	31 c0                	xor    eax,eax
c0023f05:	83 fa 03             	cmp    edx,0x3
c0023f08:	0f 94 c0             	sete   al
c0023f0b:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023f0f:	c3                   	ret    
c0023f10:	31 c0                	xor    eax,eax
c0023f12:	c3                   	ret    
c0023f13:	90                   	nop

c0023f14 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023f14:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023f18:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023f1b:	0f ba e2 0f          	bt     edx,0xf
c0023f1f:	72 f7                	jb     c0023f18 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023f21:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023f24:	83 ca 10             	or     edx,0x10
c0023f27:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023f2a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023f2d:	83 ca 01             	or     edx,0x1
c0023f30:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023f33:	c3                   	ret    

c0023f34 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023f34:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023f38:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023f3b:	83 e2 fe             	and    edx,0xfffffffe
c0023f3e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023f41:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023f44:	83 e2 ef             	and    edx,0xffffffef
c0023f47:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023f4a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023f4d:	0f ba e2 0e          	bt     edx,0xe
c0023f51:	72 f7                	jb     c0023f4a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023f53:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023f56:	0f ba e2 0f          	bt     edx,0xf
c0023f5a:	72 ee                	jb     c0023f4a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023f5c:	c3                   	ret    
c0023f5d:	90                   	nop

c0023f5e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023f5e:	55                   	push   ebp
c0023f5f:	57                   	push   edi
c0023f60:	56                   	push   esi
c0023f61:	53                   	push   ebx
c0023f62:	83 ec 1c             	sub    esp,0x1c
c0023f65:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023f69:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023f6d:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023f71:	53                   	push   ebx
c0023f72:	89 fd                	mov    ebp,edi
c0023f74:	56                   	push   esi
c0023f75:	c1 e5 0a             	shl    ebp,0xa
c0023f78:	e8 b7 ff ff ff       	call   c0023f34 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023f7d:	83 ec 0c             	sub    esp,0xc
c0023f80:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023f86:	01 e8                	add    eax,ebp
c0023f88:	89 03                	mov    DWORD PTR [ebx],eax
c0023f8a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023f8c:	68 00 04 00 00       	push   0x400
c0023f91:	6a 00                	push   0x0
c0023f93:	50                   	push   eax
c0023f94:	e8 b7 c7 fd ff       	call   c0000750 <memset>
c0023f99:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023f9f:	89 fa                	mov    edx,edi
c0023fa1:	01 e8                	add    eax,ebp
c0023fa3:	c1 e7 0d             	shl    edi,0xd
c0023fa6:	89 03                	mov    DWORD PTR [ebx],eax
c0023fa8:	c1 e2 08             	shl    edx,0x8
c0023fab:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023fb2:	81 c2 00 80 00 00    	add    edx,0x8000
c0023fb8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023fbc:	89 d0                	mov    eax,edx
c0023fbe:	83 c4 1c             	add    esp,0x1c
c0023fc1:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023fc7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023fca:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023fcd:	68 00 01 00 00       	push   0x100
c0023fd2:	6a 00                	push   0x0
c0023fd4:	50                   	push   eax
c0023fd5:	e8 76 c7 fd ff       	call   c0000750 <memset>
c0023fda:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023fde:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023fe4:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023fea:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023fee:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023ff1:	83 c4 10             	add    esp,0x10
c0023ff4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023ffb:	31 ff                	xor    edi,edi
c0023ffd:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0024003:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0024009:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002400d:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0024013:	83 c5 20             	add    ebp,0x20
c0024016:	01 f8                	add    eax,edi
c0024018:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002401b:	52                   	push   edx
c002401c:	68 00 01 00 00       	push   0x100
c0024021:	6a 00                	push   0x0
c0024023:	50                   	push   eax
c0024024:	e8 27 c7 fd ff       	call   c0000750 <memset>
c0024029:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002402d:	83 c4 10             	add    esp,0x10
c0024030:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0024036:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c002403d:	01 f8                	add    eax,edi
c002403f:	81 c7 00 01 00 00    	add    edi,0x100
c0024045:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0024048:	81 ff 00 20 00 00    	cmp    edi,0x2000
c002404e:	75 b3                	jne    c0024003 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0024050:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0024054:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0024058:	83 c4 1c             	add    esp,0x1c
c002405b:	5b                   	pop    ebx
c002405c:	5e                   	pop    esi
c002405d:	5f                   	pop    edi
c002405e:	5d                   	pop    ebp
c002405f:	e9 b0 fe ff ff       	jmp    c0023f14 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0024064 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0024064:	55                   	push   ebp
c0024065:	57                   	push   edi
c0024066:	56                   	push   esi
c0024067:	53                   	push   ebx
c0024068:	31 db                	xor    ebx,ebx
c002406a:	83 ec 0c             	sub    esp,0xc
c002406d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024071:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024075:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0024078:	f7 c7 01 00 00 00    	test   edi,0x1
c002407e:	74 7a                	je     c00240fa <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0024080:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0024084:	89 d8                	mov    eax,ebx
c0024086:	c1 e0 07             	shl    eax,0x7
c0024089:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0024090:	55                   	push   ebp
c0024091:	56                   	push   esi
c0024092:	e8 35 fe ff ff       	call   c0023ecc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0024097:	5a                   	pop    edx
c0024098:	83 f8 01             	cmp    eax,0x1
c002409b:	59                   	pop    ecx
c002409c:	75 21                	jne    c00240bf <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c002409e:	50                   	push   eax
c002409f:	53                   	push   ebx
c00240a0:	55                   	push   ebp
c00240a1:	56                   	push   esi
c00240a2:	e8 b7 fe ff ff       	call   c0023f5e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00240a7:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00240ae:	e8 66 b7 fe ff       	call   c000f819 <malloc>
c00240b3:	89 c5                	mov    ebp,eax
c00240b5:	89 04 24             	mov    DWORD PTR [esp],eax
c00240b8:	e8 87 0d 00 00       	call   c0024e44 <SATA::SATA()>
c00240bd:	eb 24                	jmp    c00240e3 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c00240bf:	83 f8 04             	cmp    eax,0x4
c00240c2:	75 36                	jne    c00240fa <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c00240c4:	51                   	push   ecx
c00240c5:	53                   	push   ebx
c00240c6:	55                   	push   ebp
c00240c7:	56                   	push   esi
c00240c8:	e8 91 fe ff ff       	call   c0023f5e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00240cd:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c00240d4:	e8 40 b7 fe ff       	call   c000f819 <malloc>
c00240d9:	89 c5                	mov    ebp,eax
c00240db:	89 04 24             	mov    DWORD PTR [esp],eax
c00240de:	e8 d7 10 00 00       	call   c00251ba <SATAPI::SATAPI()>
c00240e3:	58                   	pop    eax
c00240e4:	5a                   	pop    edx
c00240e5:	55                   	push   ebp
c00240e6:	56                   	push   esi
c00240e7:	e8 be fb fe ff       	call   c0013caa <Device::addChild(Device*)>
c00240ec:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00240ef:	56                   	push   esi
c00240f0:	6a 00                	push   0x0
c00240f2:	53                   	push   ebx
c00240f3:	55                   	push   ebp
c00240f4:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00240f7:	83 c4 20             	add    esp,0x20
c00240fa:	d1 ef                	shr    edi,1
c00240fc:	43                   	inc    ebx
c00240fd:	83 fb 20             	cmp    ebx,0x20
c0024100:	0f 85 72 ff ff ff    	jne    c0024078 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0024106:	83 c4 0c             	add    esp,0xc
c0024109:	5b                   	pop    ebx
c002410a:	5e                   	pop    esi
c002410b:	5f                   	pop    edi
c002410c:	5d                   	pop    ebp
c002410d:	c3                   	ret    

c002410e <SATABus::open(int, int, void*)>:
c002410e:	83 ec 14             	sub    esp,0x14
c0024111:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024115:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c002411b:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0024121:	52                   	push   edx
c0024122:	50                   	push   eax
c0024123:	e8 3c ff ff ff       	call   c0024064 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0024128:	31 c0                	xor    eax,eax
c002412a:	83 c4 1c             	add    esp,0x1c
c002412d:	c3                   	ret    

c002412e <ATA::close(int, int, void*)>:
c002412e:	83 ec 0c             	sub    esp,0xc
c0024131:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024135:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002413b:	85 c0                	test   eax,eax
c002413d:	74 0c                	je     c002414b <ATA::close(int, int, void*)+0x1d>
c002413f:	83 ec 0c             	sub    esp,0xc
c0024142:	8b 10                	mov    edx,DWORD PTR [eax]
c0024144:	50                   	push   eax
c0024145:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024148:	83 c4 10             	add    esp,0x10
c002414b:	31 c0                	xor    eax,eax
c002414d:	83 c4 0c             	add    esp,0xc
c0024150:	c3                   	ret    
c0024151:	90                   	nop

c0024152 <ATA::powerSaving(PowerSavingLevel)>:
c0024152:	c3                   	ret    
c0024153:	90                   	nop

c0024154 <ATA::ATA()>:
c0024154:	83 ec 0c             	sub    esp,0xc
c0024157:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002415b:	83 ec 04             	sub    esp,0x4
c002415e:	68 00 02 00 00       	push   0x200
c0024163:	68 1d cb 02 c0       	push   0xc002cb1d
c0024168:	50                   	push   eax
c0024169:	e8 72 ff fe ff       	call   c00140e0 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002416e:	83 c4 10             	add    esp,0x10
c0024171:	ba a0 ca 02 c0       	mov    edx,0xc002caa0
c0024176:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002417a:	89 10                	mov    DWORD PTR [eax],edx
c002417c:	90                   	nop
c002417d:	83 c4 0c             	add    esp,0xc
c0024180:	c3                   	ret    
c0024181:	90                   	nop

c0024182 <ATA::flush(bool)>:
c0024182:	53                   	push   ebx
c0024183:	83 ec 08             	sub    esp,0x8
c0024186:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c002418b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002418f:	19 c0                	sbb    eax,eax
c0024191:	83 e0 fd             	and    eax,0xfffffffd
c0024194:	05 ea 00 00 00       	add    eax,0xea
c0024199:	50                   	push   eax
c002419a:	6a 07                	push   0x7
c002419c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241a3:	50                   	push   eax
c00241a4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241aa:	e8 53 f1 ff ff       	call   c0023302 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241af:	83 c4 0c             	add    esp,0xc
c00241b2:	6a 00                	push   0x0
c00241b4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241bb:	50                   	push   eax
c00241bc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241c2:	e8 dd fb ff ff       	call   c0023da4 <IDE::polling(unsigned char, unsigned int)>
c00241c7:	83 c4 18             	add    esp,0x18
c00241ca:	5b                   	pop    ebx
c00241cb:	c3                   	ret    

c00241cc <ATA::readyForCommand()>:
c00241cc:	56                   	push   esi
c00241cd:	53                   	push   ebx
c00241ce:	31 db                	xor    ebx,ebx
c00241d0:	50                   	push   eax
c00241d1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00241d5:	50                   	push   eax
c00241d6:	6a 0c                	push   0xc
c00241d8:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00241df:	50                   	push   eax
c00241e0:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00241e6:	e8 d7 f1 ff ff       	call   c00233c2 <IDE::read(unsigned char, unsigned char)>
c00241eb:	83 c4 10             	add    esp,0x10
c00241ee:	a8 88                	test   al,0x88
c00241f0:	74 23                	je     c0024215 <ATA::readyForCommand()+0x49>
c00241f2:	43                   	inc    ebx
c00241f3:	83 fb 63             	cmp    ebx,0x63
c00241f6:	7e dd                	jle    c00241d5 <ATA::readyForCommand()+0x9>
c00241f8:	51                   	push   ecx
c00241f9:	51                   	push   ecx
c00241fa:	6a 00                	push   0x0
c00241fc:	68 40 42 0f 00       	push   0xf4240
c0024201:	e8 a3 9d ff ff       	call   c001dfa9 <nanoSleep(unsigned long long)>
c0024206:	83 c4 10             	add    esp,0x10
c0024209:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002420f:	75 c4                	jne    c00241d5 <ATA::readyForCommand()+0x9>
c0024211:	31 c0                	xor    eax,eax
c0024213:	eb 02                	jmp    c0024217 <ATA::readyForCommand()+0x4b>
c0024215:	b0 01                	mov    al,0x1
c0024217:	5a                   	pop    edx
c0024218:	5b                   	pop    ebx
c0024219:	5e                   	pop    esi
c002421a:	c3                   	ret    
c002421b:	90                   	nop

c002421c <ATA::access(unsigned long long, int, void*, bool)>:
c002421c:	55                   	push   ebp
c002421d:	57                   	push   edi
c002421e:	56                   	push   esi
c002421f:	53                   	push   ebx
c0024220:	83 ec 38             	sub    esp,0x38
c0024223:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0024227:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c002422b:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c002422f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024233:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0024237:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002423b:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c002423f:	68 4c ca 02 c0       	push   0xc002ca4c
c0024244:	e8 28 e6 fe ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c0024249:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002424f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024253:	83 c4 10             	add    esp,0x10
c0024256:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002425c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024260:	c1 e0 06             	shl    eax,0x6
c0024263:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c002426b:	74 5d                	je     c00242ca <ATA::access(unsigned long long, int, void*, bool)+0xae>
c002426d:	89 fa                	mov    edx,edi
c002426f:	89 f0                	mov    eax,esi
c0024271:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0024275:	c1 ea 1c             	shr    edx,0x1c
c0024278:	89 d1                	mov    ecx,edx
c002427a:	09 c1                	or     ecx,eax
c002427c:	74 25                	je     c00242a3 <ATA::access(unsigned long long, int, void*, bool)+0x87>
c002427e:	31 ed                	xor    ebp,ebp
c0024280:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0024287:	89 fa                	mov    edx,edi
c0024289:	89 f0                	mov    eax,esi
c002428b:	0f ad d0             	shrd   eax,edx,cl
c002428e:	d3 ea                	shr    edx,cl
c0024290:	f6 c1 20             	test   cl,0x20
c0024293:	74 02                	je     c0024297 <ATA::access(unsigned long long, int, void*, bool)+0x7b>
c0024295:	89 d0                	mov    eax,edx
c0024297:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c002429b:	45                   	inc    ebp
c002429c:	83 fd 06             	cmp    ebp,0x6
c002429f:	75 df                	jne    c0024280 <ATA::access(unsigned long long, int, void*, bool)+0x64>
c00242a1:	eb 76                	jmp    c0024319 <ATA::access(unsigned long long, int, void*, bool)+0xfd>
c00242a3:	89 f0                	mov    eax,esi
c00242a5:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00242aa:	89 fa                	mov    edx,edi
c00242ac:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00242b3:	0f ac d0 10          	shrd   eax,edx,0x10
c00242b7:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00242bc:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00242c0:	c1 ee 18             	shr    esi,0x18
c00242c3:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c00242c8:	eb 56                	jmp    c0024320 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c00242ca:	6a 00                	push   0x0
c00242cc:	6a 3f                	push   0x3f
c00242ce:	57                   	push   edi
c00242cf:	56                   	push   esi
c00242d0:	e8 9f 29 00 00       	call   c0026c74 <__umoddi3>
c00242d5:	83 c4 10             	add    esp,0x10
c00242d8:	40                   	inc    eax
c00242d9:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00242dd:	6a 00                	push   0x0
c00242df:	68 f0 03 00 00       	push   0x3f0
c00242e4:	57                   	push   edi
c00242e5:	56                   	push   esi
c00242e6:	e8 89 28 00 00       	call   c0026b74 <__udivdi3>
c00242eb:	83 c4 10             	add    esp,0x10
c00242ee:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c00242f3:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00242fa:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00242ff:	6a 00                	push   0x0
c0024301:	6a 3f                	push   0x3f
c0024303:	57                   	push   edi
c0024304:	56                   	push   esi
c0024305:	e8 6a 28 00 00       	call   c0026b74 <__udivdi3>
c002430a:	83 c4 10             	add    esp,0x10
c002430d:	89 c6                	mov    esi,eax
c002430f:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0024314:	83 e6 0f             	and    esi,0xf
c0024317:	eb 07                	jmp    c0024320 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c0024319:	31 f6                	xor    esi,esi
c002431b:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0024320:	bf 01 00 00 00       	mov    edi,0x1
c0024325:	50                   	push   eax
c0024326:	6a 00                	push   0x0
c0024328:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002432f:	50                   	push   eax
c0024330:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024334:	e8 d5 f1 ff ff       	call   c002350e <IDE::enableIRQs(unsigned char, bool)>
c0024339:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002433c:	e8 8b fe ff ff       	call   c00241cc <ATA::readyForCommand()>
c0024341:	83 c4 10             	add    esp,0x10
c0024344:	84 c0                	test   al,al
c0024346:	0f 84 bc 02 00 00    	je     c0024608 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c002434c:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024352:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024358:	c1 e0 04             	shl    eax,0x4
c002435b:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0024362:	09 c6                	or     esi,eax
c0024364:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0024369:	75 05                	jne    c0024370 <ATA::access(unsigned long long, int, void*, bool)+0x154>
c002436b:	83 ce a0             	or     esi,0xffffffa0
c002436e:	eb 03                	jmp    c0024373 <ATA::access(unsigned long long, int, void*, bool)+0x157>
c0024370:	83 ce e0             	or     esi,0xffffffe0
c0024373:	89 f0                	mov    eax,esi
c0024375:	0f b6 f0             	movzx  esi,al
c0024378:	56                   	push   esi
c0024379:	6a 06                	push   0x6
c002437b:	51                   	push   ecx
c002437c:	52                   	push   edx
c002437d:	e8 80 ef ff ff       	call   c0023302 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024382:	83 c4 10             	add    esp,0x10
c0024385:	6a 00                	push   0x0
c0024387:	6a 01                	push   0x1
c0024389:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024390:	50                   	push   eax
c0024391:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024397:	e8 66 ef ff ff       	call   c0023302 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002439c:	83 c4 10             	add    esp,0x10
c002439f:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00243a4:	75 6e                	jne    c0024414 <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c00243a6:	6a 00                	push   0x0
c00243a8:	6a 08                	push   0x8
c00243aa:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00243b1:	50                   	push   eax
c00243b2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243b8:	e8 45 ef ff ff       	call   c0023302 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00243bd:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00243c2:	50                   	push   eax
c00243c3:	6a 09                	push   0x9
c00243c5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00243cc:	50                   	push   eax
c00243cd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243d3:	e8 2a ef ff ff       	call   c0023302 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00243d8:	83 c4 20             	add    esp,0x20
c00243db:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c00243e0:	50                   	push   eax
c00243e1:	6a 0a                	push   0xa
c00243e3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00243ea:	50                   	push   eax
c00243eb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243f1:	e8 0c ef ff ff       	call   c0023302 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00243f6:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c00243fb:	50                   	push   eax
c00243fc:	6a 0b                	push   0xb
c00243fe:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024405:	50                   	push   eax
c0024406:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002440c:	e8 f1 ee ff ff       	call   c0023302 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024411:	83 c4 20             	add    esp,0x20
c0024414:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024419:	50                   	push   eax
c002441a:	6a 02                	push   0x2
c002441c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024423:	50                   	push   eax
c0024424:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002442a:	e8 d3 ee ff ff       	call   c0023302 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002442f:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0024434:	50                   	push   eax
c0024435:	6a 03                	push   0x3
c0024437:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002443e:	50                   	push   eax
c002443f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024445:	e8 b8 ee ff ff       	call   c0023302 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002444a:	83 c4 20             	add    esp,0x20
c002444d:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0024452:	50                   	push   eax
c0024453:	6a 04                	push   0x4
c0024455:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002445c:	50                   	push   eax
c002445d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024463:	e8 9a ee ff ff       	call   c0023302 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024468:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002446d:	50                   	push   eax
c002446e:	6a 05                	push   0x5
c0024470:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024477:	50                   	push   eax
c0024478:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002447e:	e8 7f ee ff ff       	call   c0023302 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024483:	83 c4 20             	add    esp,0x20
c0024486:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c002448b:	0f 94 c0             	sete   al
c002448e:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024493:	74 09                	je     c002449e <ATA::access(unsigned long long, int, void*, bool)+0x282>
c0024495:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c002449c:	eb 07                	jmp    c00244a5 <ATA::access(unsigned long long, int, void*, bool)+0x289>
c002449e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c00244a5:	0f b6 c0             	movzx  eax,al
c00244a8:	50                   	push   eax
c00244a9:	6a 07                	push   0x7
c00244ab:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00244b2:	50                   	push   eax
c00244b3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00244b9:	e8 44 ee ff ff       	call   c0023302 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00244be:	c7 04 24 59 ca 02 c0 	mov    DWORD PTR [esp],0xc002ca59
c00244c5:	e8 a7 e3 fe ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c00244ca:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00244ce:	83 c4 10             	add    esp,0x10
c00244d1:	85 f6                	test   esi,esi
c00244d3:	0f 84 f7 00 00 00    	je     c00245d0 <ATA::access(unsigned long long, int, void*, bool)+0x3b4>
c00244d9:	83 ec 0c             	sub    esp,0xc
c00244dc:	68 5c ca 02 c0       	push   0xc002ca5c
c00244e1:	e8 8b e3 fe ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c00244e6:	83 c4 0c             	add    esp,0xc
c00244e9:	6a 01                	push   0x1
c00244eb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00244f2:	50                   	push   eax
c00244f3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00244f9:	e8 a6 f8 ff ff       	call   c0023da4 <IDE::polling(unsigned char, unsigned int)>
c00244fe:	c7 04 24 5f ca 02 c0 	mov    DWORD PTR [esp],0xc002ca5f
c0024505:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0024509:	e8 63 e3 fe ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c002450e:	83 c4 10             	add    esp,0x10
c0024511:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0024515:	84 c0                	test   al,al
c0024517:	74 2b                	je     c0024544 <ATA::access(unsigned long long, int, void*, bool)+0x328>
c0024519:	0f b6 f8             	movzx  edi,al
c002451c:	57                   	push   edi
c002451d:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0024524:	50                   	push   eax
c0024525:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002452c:	50                   	push   eax
c002452d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024533:	e8 bc f7 ff ff       	call   c0023cf4 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024538:	c7 04 24 62 ca 02 c0 	mov    DWORD PTR [esp],0xc002ca62
c002453f:	e9 bc 00 00 00       	jmp    c0024600 <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c0024544:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0024549:	74 50                	je     c002459b <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c002454b:	83 ec 0c             	sub    esp,0xc
c002454e:	31 ed                	xor    ebp,ebp
c0024550:	68 6d ca 02 c0       	push   0xc002ca6d
c0024555:	e8 17 e3 fe ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c002455a:	83 c4 10             	add    esp,0x10
c002455d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024561:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0024565:	50                   	push   eax
c0024566:	50                   	push   eax
c0024567:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002456e:	50                   	push   eax
c002456f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024575:	e8 76 ed ff ff       	call   c00232f0 <IDE::getBase(unsigned char)>
c002457a:	89 c2                	mov    edx,eax
c002457c:	89 f8                	mov    eax,edi
c002457e:	66 ef                	out    dx,ax
c0024580:	45                   	inc    ebp
c0024581:	83 c4 10             	add    esp,0x10
c0024584:	81 fd 00 01 00 00    	cmp    ebp,0x100
c002458a:	75 d1                	jne    c002455d <ATA::access(unsigned long long, int, void*, bool)+0x341>
c002458c:	83 ec 0c             	sub    esp,0xc
c002458f:	68 70 ca 02 c0       	push   0xc002ca70
c0024594:	e8 d8 e2 fe ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c0024599:	eb 24                	jmp    c00245bf <ATA::access(unsigned long long, int, void*, bool)+0x3a3>
c002459b:	51                   	push   ecx
c002459c:	51                   	push   ecx
c002459d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00245a4:	50                   	push   eax
c00245a5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00245ab:	e8 40 ed ff ff       	call   c00232f0 <IDE::getBase(unsigned char)>
c00245b0:	b9 00 01 00 00       	mov    ecx,0x100
c00245b5:	89 c2                	mov    edx,eax
c00245b7:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c00245bb:	fc                   	cld    
c00245bc:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c00245bf:	83 c4 10             	add    esp,0x10
c00245c2:	4e                   	dec    esi
c00245c3:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c00245cb:	e9 01 ff ff ff       	jmp    c00244d1 <ATA::access(unsigned long long, int, void*, bool)+0x2b5>
c00245d0:	31 ff                	xor    edi,edi
c00245d2:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00245d7:	74 2f                	je     c0024608 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c00245d9:	83 ec 0c             	sub    esp,0xc
c00245dc:	68 73 ca 02 c0       	push   0xc002ca73
c00245e1:	e8 8b e2 fe ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c00245e6:	58                   	pop    eax
c00245e7:	31 c0                	xor    eax,eax
c00245e9:	5a                   	pop    edx
c00245ea:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c00245ef:	0f 94 c0             	sete   al
c00245f2:	50                   	push   eax
c00245f3:	53                   	push   ebx
c00245f4:	e8 89 fb ff ff       	call   c0024182 <ATA::flush(bool)>
c00245f9:	c7 04 24 76 ca 02 c0 	mov    DWORD PTR [esp],0xc002ca76
c0024600:	e8 6c e2 fe ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c0024605:	83 c4 10             	add    esp,0x10
c0024608:	83 c4 2c             	add    esp,0x2c
c002460b:	89 f8                	mov    eax,edi
c002460d:	5b                   	pop    ebx
c002460e:	5e                   	pop    esi
c002460f:	5f                   	pop    edi
c0024610:	5d                   	pop    ebp
c0024611:	c3                   	ret    

c0024612 <ATA::read(unsigned long long, int, void*)>:
c0024612:	57                   	push   edi
c0024613:	b8 04 00 00 00       	mov    eax,0x4
c0024618:	56                   	push   esi
c0024619:	53                   	push   ebx
c002461a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002461e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024622:	8d 7a ff             	lea    edi,[edx-0x1]
c0024625:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024629:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002462d:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024633:	77 25                	ja     c002465a <ATA::read(unsigned long long, int, void*)+0x48>
c0024635:	b8 06 00 00 00       	mov    eax,0x6
c002463a:	85 f6                	test   esi,esi
c002463c:	74 1c                	je     c002465a <ATA::read(unsigned long long, int, void*)+0x48>
c002463e:	50                   	push   eax
c002463f:	50                   	push   eax
c0024640:	6a 00                	push   0x0
c0024642:	56                   	push   esi
c0024643:	52                   	push   edx
c0024644:	53                   	push   ebx
c0024645:	51                   	push   ecx
c0024646:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002464a:	e8 cd fb ff ff       	call   c002421c <ATA::access(unsigned long long, int, void*, bool)>
c002464f:	83 c4 20             	add    esp,0x20
c0024652:	85 c0                	test   eax,eax
c0024654:	0f 95 c0             	setne  al
c0024657:	0f b6 c0             	movzx  eax,al
c002465a:	5b                   	pop    ebx
c002465b:	5e                   	pop    esi
c002465c:	5f                   	pop    edi
c002465d:	c3                   	ret    

c002465e <ATA::write(unsigned long long, int, void*)>:
c002465e:	55                   	push   ebp
c002465f:	57                   	push   edi
c0024660:	56                   	push   esi
c0024661:	53                   	push   ebx
c0024662:	83 ec 18             	sub    esp,0x18
c0024665:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0024669:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002466d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0024671:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0024675:	68 79 ca 02 c0       	push   0xc002ca79
c002467a:	e8 f2 e1 fe ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c002467f:	8d 53 ff             	lea    edx,[ebx-0x1]
c0024682:	83 c4 10             	add    esp,0x10
c0024685:	b8 04 00 00 00       	mov    eax,0x4
c002468a:	81 fa fe 00 00 00    	cmp    edx,0xfe
c0024690:	77 25                	ja     c00246b7 <ATA::write(unsigned long long, int, void*)+0x59>
c0024692:	b8 06 00 00 00       	mov    eax,0x6
c0024697:	85 f6                	test   esi,esi
c0024699:	74 1c                	je     c00246b7 <ATA::write(unsigned long long, int, void*)+0x59>
c002469b:	50                   	push   eax
c002469c:	50                   	push   eax
c002469d:	6a 01                	push   0x1
c002469f:	56                   	push   esi
c00246a0:	53                   	push   ebx
c00246a1:	55                   	push   ebp
c00246a2:	57                   	push   edi
c00246a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00246a7:	e8 70 fb ff ff       	call   c002421c <ATA::access(unsigned long long, int, void*, bool)>
c00246ac:	83 c4 20             	add    esp,0x20
c00246af:	85 c0                	test   eax,eax
c00246b1:	0f 95 c0             	setne  al
c00246b4:	0f b6 c0             	movzx  eax,al
c00246b7:	83 c4 0c             	add    esp,0xc
c00246ba:	5b                   	pop    ebx
c00246bb:	5e                   	pop    esi
c00246bc:	5f                   	pop    edi
c00246bd:	5d                   	pop    ebp
c00246be:	c3                   	ret    
c00246bf:	90                   	nop

c00246c0 <ATA::detectCHS()>:
c00246c0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00246c4:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c00246ca:	c1 e0 06             	shl    eax,0x6
c00246cd:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c00246d3:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c00246dd:	c7 44 24 04 85 ca 02 c0 	mov    DWORD PTR [esp+0x4],0xc002ca85
c00246e5:	e9 53 5a ff ff       	jmp    c001a13d <Krnl::panic(char const*)>

c00246ea <ATA::open(int, int, void*)>:
c00246ea:	53                   	push   ebx
c00246eb:	83 ec 08             	sub    esp,0x8
c00246ee:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00246f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00246f6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00246fa:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024700:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024706:	c1 e0 06             	shl    eax,0x6
c0024709:	01 d0                	add    eax,edx
c002470b:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0024712:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0024718:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c002471f:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024729:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c002472f:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024736:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c002473d:	75 0c                	jne    c002474b <ATA::open(int, int, void*)+0x61>
c002473f:	83 ec 0c             	sub    esp,0xc
c0024742:	53                   	push   ebx
c0024743:	e8 78 ff ff ff       	call   c00246c0 <ATA::detectCHS()>
c0024748:	83 c4 10             	add    esp,0x10
c002474b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024751:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024757:	c1 e0 06             	shl    eax,0x6
c002475a:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0024761:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002476b:	d1 e8                	shr    eax,1
c002476d:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0024773:	6a 04                	push   0x4
c0024775:	6a 0c                	push   0xc
c0024777:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002477e:	50                   	push   eax
c002477f:	52                   	push   edx
c0024780:	e8 7d eb ff ff       	call   c0023302 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024785:	90                   	nop
c0024786:	90                   	nop
c0024787:	6a 00                	push   0x0
c0024789:	6a 0c                	push   0xc
c002478b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024792:	50                   	push   eax
c0024793:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024799:	e8 64 eb ff ff       	call   c0023302 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002479e:	83 c4 14             	add    esp,0x14
c00247a1:	53                   	push   ebx
c00247a2:	e8 a1 f9 fe ff       	call   c0014148 <PhysicalDisk::startCache()>
c00247a7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00247aa:	e8 21 1c ff ff       	call   c00163d0 <createPartitionsForDisk(PhysicalDisk*)>
c00247af:	31 c0                	xor    eax,eax
c00247b1:	83 c4 18             	add    esp,0x18
c00247b4:	5b                   	pop    ebx
c00247b5:	c3                   	ret    

c00247b6 <ATAPI::write(unsigned long long, int, void*)>:
c00247b6:	b8 03 00 00 00       	mov    eax,0x3
c00247bb:	c3                   	ret    

c00247bc <ATAPI::close(int, int, void*)>:
c00247bc:	83 ec 0c             	sub    esp,0xc
c00247bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00247c3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00247c9:	85 c0                	test   eax,eax
c00247cb:	74 0c                	je     c00247d9 <ATAPI::close(int, int, void*)+0x1d>
c00247cd:	83 ec 0c             	sub    esp,0xc
c00247d0:	8b 10                	mov    edx,DWORD PTR [eax]
c00247d2:	50                   	push   eax
c00247d3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00247d6:	83 c4 10             	add    esp,0x10
c00247d9:	31 c0                	xor    eax,eax
c00247db:	83 c4 0c             	add    esp,0xc
c00247de:	c3                   	ret    
c00247df:	90                   	nop

c00247e0 <ATAPI::ATAPI()>:
c00247e0:	83 ec 0c             	sub    esp,0xc
c00247e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00247e7:	83 ec 04             	sub    esp,0x4
c00247ea:	68 00 08 00 00       	push   0x800
c00247ef:	68 bd cb 02 c0       	push   0xc002cbbd
c00247f4:	50                   	push   eax
c00247f5:	e8 e6 f8 fe ff       	call   c00140e0 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00247fa:	83 c4 10             	add    esp,0x10
c00247fd:	ba d8 ca 02 c0       	mov    edx,0xc002cad8
c0024802:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024806:	89 10                	mov    DWORD PTR [eax],edx
c0024808:	90                   	nop
c0024809:	83 c4 0c             	add    esp,0xc
c002480c:	c3                   	ret    
c002480d:	90                   	nop

c002480e <ATAPI::readyForCommand()>:
c002480e:	56                   	push   esi
c002480f:	53                   	push   ebx
c0024810:	31 db                	xor    ebx,ebx
c0024812:	50                   	push   eax
c0024813:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024817:	50                   	push   eax
c0024818:	6a 0c                	push   0xc
c002481a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024821:	50                   	push   eax
c0024822:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024828:	e8 95 eb ff ff       	call   c00233c2 <IDE::read(unsigned char, unsigned char)>
c002482d:	83 c4 10             	add    esp,0x10
c0024830:	a8 88                	test   al,0x88
c0024832:	74 23                	je     c0024857 <ATAPI::readyForCommand()+0x49>
c0024834:	43                   	inc    ebx
c0024835:	83 fb 63             	cmp    ebx,0x63
c0024838:	7e dd                	jle    c0024817 <ATAPI::readyForCommand()+0x9>
c002483a:	51                   	push   ecx
c002483b:	51                   	push   ecx
c002483c:	6a 00                	push   0x0
c002483e:	68 40 42 0f 00       	push   0xf4240
c0024843:	e8 61 97 ff ff       	call   c001dfa9 <nanoSleep(unsigned long long)>
c0024848:	83 c4 10             	add    esp,0x10
c002484b:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024851:	75 c4                	jne    c0024817 <ATAPI::readyForCommand()+0x9>
c0024853:	31 c0                	xor    eax,eax
c0024855:	eb 02                	jmp    c0024859 <ATAPI::readyForCommand()+0x4b>
c0024857:	b0 01                	mov    al,0x1
c0024859:	5a                   	pop    edx
c002485a:	5b                   	pop    ebx
c002485b:	5e                   	pop    esi
c002485c:	c3                   	ret    
c002485d:	90                   	nop

c002485e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c002485e:	55                   	push   ebp
c002485f:	57                   	push   edi
c0024860:	56                   	push   esi
c0024861:	53                   	push   ebx
c0024862:	83 ec 20             	sub    esp,0x20
c0024865:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0024869:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c002486d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0024871:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024875:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024879:	6a 01                	push   0x1
c002487b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024882:	50                   	push   eax
c0024883:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024889:	e8 80 ec ff ff       	call   c002350e <IDE::enableIRQs(unsigned char, bool)>
c002488e:	5e                   	pop    esi
c002488f:	58                   	pop    eax
c0024890:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024897:	50                   	push   eax
c0024898:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002489e:	e8 39 ea ff ff       	call   c00232dc <IDE::prepareInterrupt(unsigned char)>
c00248a3:	89 3c 24             	mov    DWORD PTR [esp],edi
c00248a6:	e8 63 ff ff ff       	call   c002480e <ATAPI::readyForCommand()>
c00248ab:	83 c4 10             	add    esp,0x10
c00248ae:	84 c0                	test   al,al
c00248b0:	75 0a                	jne    c00248bc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c00248b2:	bb 01 00 00 00       	mov    ebx,0x1
c00248b7:	e9 57 02 00 00       	jmp    c0024b13 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00248bc:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c00248c2:	c1 e0 04             	shl    eax,0x4
c00248c5:	0f b6 c0             	movzx  eax,al
c00248c8:	50                   	push   eax
c00248c9:	6a 06                	push   0x6
c00248cb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00248d2:	50                   	push   eax
c00248d3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00248d9:	e8 24 ea ff ff       	call   c0023302 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00248de:	6a 00                	push   0x0
c00248e0:	6a 01                	push   0x1
c00248e2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00248e9:	50                   	push   eax
c00248ea:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00248f0:	e8 0d ea ff ff       	call   c0023302 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00248f5:	83 c4 20             	add    esp,0x20
c00248f8:	0f b6 c3             	movzx  eax,bl
c00248fb:	0f b6 df             	movzx  ebx,bh
c00248fe:	50                   	push   eax
c00248ff:	6a 04                	push   0x4
c0024901:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024908:	50                   	push   eax
c0024909:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002490f:	e8 ee e9 ff ff       	call   c0023302 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024914:	53                   	push   ebx
c0024915:	6a 05                	push   0x5
c0024917:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002491e:	50                   	push   eax
c002491f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024925:	e8 d8 e9 ff ff       	call   c0023302 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002492a:	83 c4 20             	add    esp,0x20
c002492d:	68 a0 00 00 00       	push   0xa0
c0024932:	6a 07                	push   0x7
c0024934:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002493b:	50                   	push   eax
c002493c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024942:	e8 bb e9 ff ff       	call   c0023302 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024947:	83 c4 0c             	add    esp,0xc
c002494a:	6a 01                	push   0x1
c002494c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024953:	50                   	push   eax
c0024954:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002495a:	e8 45 f4 ff ff       	call   c0023da4 <IDE::polling(unsigned char, unsigned int)>
c002495f:	83 c4 10             	add    esp,0x10
c0024962:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0024968:	84 c0                	test   al,al
c002496a:	74 23                	je     c002498f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c002496c:	0f b6 d8             	movzx  ebx,al
c002496f:	0f b6 d2             	movzx  edx,dl
c0024972:	53                   	push   ebx
c0024973:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c002497a:	50                   	push   eax
c002497b:	52                   	push   edx
c002497c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024982:	e8 6d f3 ff ff       	call   c0023cf4 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024987:	83 c4 10             	add    esp,0x10
c002498a:	e9 84 01 00 00       	jmp    c0024b13 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002498f:	0f b6 d2             	movzx  edx,dl
c0024992:	53                   	push   ebx
c0024993:	53                   	push   ebx
c0024994:	52                   	push   edx
c0024995:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002499b:	e8 50 e9 ff ff       	call   c00232f0 <IDE::getBase(unsigned char)>
c00249a0:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00249a4:	b9 06 00 00 00       	mov    ecx,0x6
c00249a9:	89 c2                	mov    edx,eax
c00249ab:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c00249ae:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00249b2:	83 c4 10             	add    esp,0x10
c00249b5:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00249bb:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00249c2:	85 db                	test   ebx,ebx
c00249c4:	0f 84 ec 00 00 00    	je     c0024ab6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c00249ca:	51                   	push   ecx
c00249cb:	51                   	push   ecx
c00249cc:	52                   	push   edx
c00249cd:	50                   	push   eax
c00249ce:	e8 9d ea ff ff       	call   c0023470 <IDE::waitInterrupt(unsigned char)>
c00249d3:	83 c4 10             	add    esp,0x10
c00249d6:	84 c0                	test   al,al
c00249d8:	0f 84 d4 fe ff ff    	je     c00248b2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00249de:	56                   	push   esi
c00249df:	56                   	push   esi
c00249e0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00249e7:	50                   	push   eax
c00249e8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00249ee:	e8 e9 e8 ff ff       	call   c00232dc <IDE::prepareInterrupt(unsigned char)>
c00249f3:	83 c4 0c             	add    esp,0xc
c00249f6:	6a 04                	push   0x4
c00249f8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00249ff:	50                   	push   eax
c0024a00:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024a06:	e8 b7 e9 ff ff       	call   c00233c2 <IDE::read(unsigned char, unsigned char)>
c0024a0b:	83 c4 0c             	add    esp,0xc
c0024a0e:	89 c6                	mov    esi,eax
c0024a10:	6a 05                	push   0x5
c0024a12:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024a19:	50                   	push   eax
c0024a1a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024a20:	e8 9d e9 ff ff       	call   c00233c2 <IDE::read(unsigned char, unsigned char)>
c0024a25:	89 f1                	mov    ecx,esi
c0024a27:	0f b6 c0             	movzx  eax,al
c0024a2a:	0f b6 f1             	movzx  esi,cl
c0024a2d:	c1 e0 08             	shl    eax,0x8
c0024a30:	09 c6                	or     esi,eax
c0024a32:	d1 fe                	sar    esi,1
c0024a34:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0024a38:	83 c4 10             	add    esp,0x10
c0024a3b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0024a40:	74 41                	je     c0024a83 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0024a42:	31 c9                	xor    ecx,ecx
c0024a44:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024a4a:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024a51:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0024a55:	75 0a                	jne    c0024a61 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0024a57:	01 c9                	add    ecx,ecx
c0024a59:	01 cd                	add    ebp,ecx
c0024a5b:	4b                   	dec    ebx
c0024a5c:	e9 54 ff ff ff       	jmp    c00249b5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0024a61:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0024a66:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0024a6a:	51                   	push   ecx
c0024a6b:	51                   	push   ecx
c0024a6c:	52                   	push   edx
c0024a6d:	50                   	push   eax
c0024a6e:	e8 7d e8 ff ff       	call   c00232f0 <IDE::getBase(unsigned char)>
c0024a73:	89 c2                	mov    edx,eax
c0024a75:	89 f0                	mov    eax,esi
c0024a77:	66 ef                	out    dx,ax
c0024a79:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0024a7d:	83 c4 10             	add    esp,0x10
c0024a80:	41                   	inc    ecx
c0024a81:	eb c1                	jmp    c0024a44 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0024a83:	31 f6                	xor    esi,esi
c0024a85:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024a8b:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024a92:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0024a96:	75 06                	jne    c0024a9e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0024a98:	01 f6                	add    esi,esi
c0024a9a:	01 f5                	add    ebp,esi
c0024a9c:	eb bd                	jmp    c0024a5b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0024a9e:	51                   	push   ecx
c0024a9f:	51                   	push   ecx
c0024aa0:	52                   	push   edx
c0024aa1:	50                   	push   eax
c0024aa2:	e8 49 e8 ff ff       	call   c00232f0 <IDE::getBase(unsigned char)>
c0024aa7:	89 c2                	mov    edx,eax
c0024aa9:	66 ed                	in     ax,dx
c0024aab:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0024ab0:	83 c4 10             	add    esp,0x10
c0024ab3:	46                   	inc    esi
c0024ab4:	eb cf                	jmp    c0024a85 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0024ab6:	51                   	push   ecx
c0024ab7:	51                   	push   ecx
c0024ab8:	52                   	push   edx
c0024ab9:	50                   	push   eax
c0024aba:	e8 b1 e9 ff ff       	call   c0023470 <IDE::waitInterrupt(unsigned char)>
c0024abf:	83 c4 10             	add    esp,0x10
c0024ac2:	84 c0                	test   al,al
c0024ac4:	0f 84 e8 fd ff ff    	je     c00248b2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024aca:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024acf:	52                   	push   edx
c0024ad0:	52                   	push   edx
c0024ad1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024ad8:	50                   	push   eax
c0024ad9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024adf:	e8 f8 e7 ff ff       	call   c00232dc <IDE::prepareInterrupt(unsigned char)>
c0024ae4:	83 c4 10             	add    esp,0x10
c0024ae7:	50                   	push   eax
c0024ae8:	50                   	push   eax
c0024ae9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024af0:	50                   	push   eax
c0024af1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024af7:	e8 f4 e7 ff ff       	call   c00232f0 <IDE::getBase(unsigned char)>
c0024afc:	8d 50 07             	lea    edx,[eax+0x7]
c0024aff:	ec                   	in     al,dx
c0024b00:	83 c4 10             	add    esp,0x10
c0024b03:	a8 88                	test   al,0x88
c0024b05:	74 0a                	je     c0024b11 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0024b07:	4b                   	dec    ebx
c0024b08:	75 dd                	jne    c0024ae7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0024b0a:	bb 02 00 00 00       	mov    ebx,0x2
c0024b0f:	eb 02                	jmp    c0024b13 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024b11:	31 db                	xor    ebx,ebx
c0024b13:	83 c4 1c             	add    esp,0x1c
c0024b16:	89 d8                	mov    eax,ebx
c0024b18:	5b                   	pop    ebx
c0024b19:	5e                   	pop    esi
c0024b1a:	5f                   	pop    edi
c0024b1b:	5d                   	pop    ebp
c0024b1c:	c3                   	ret    
c0024b1d:	90                   	nop

c0024b1e <ATAPI::diskRemoved()>:
c0024b1e:	83 ec 18             	sub    esp,0x18
c0024b21:	68 c9 cb 02 c0       	push   0xc002cbc9
c0024b26:	e8 46 dd fe ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c0024b2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024b2f:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0024b36:	83 c4 1c             	add    esp,0x1c
c0024b39:	c3                   	ret    

c0024b3a <ATAPI::eject()>:
c0024b3a:	57                   	push   edi
c0024b3b:	b9 03 00 00 00       	mov    ecx,0x3
c0024b40:	53                   	push   ebx
c0024b41:	83 ec 14             	sub    esp,0x14
c0024b44:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024b48:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024b4c:	fc                   	cld    
c0024b4d:	31 c0                	xor    eax,eax
c0024b4f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024b51:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024b56:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024b5b:	50                   	push   eax
c0024b5c:	50                   	push   eax
c0024b5d:	6a 00                	push   0x0
c0024b5f:	6a 00                	push   0x0
c0024b61:	6a 00                	push   0x0
c0024b63:	6a 02                	push   0x2
c0024b65:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024b69:	50                   	push   eax
c0024b6a:	53                   	push   ebx
c0024b6b:	e8 ee fc ff ff       	call   c002485e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024b70:	83 c4 14             	add    esp,0x14
c0024b73:	53                   	push   ebx
c0024b74:	e8 a5 ff ff ff       	call   c0024b1e <ATAPI::diskRemoved()>
c0024b79:	83 c4 24             	add    esp,0x24
c0024b7c:	31 c0                	xor    eax,eax
c0024b7e:	5b                   	pop    ebx
c0024b7f:	5f                   	pop    edi
c0024b80:	c3                   	ret    
c0024b81:	90                   	nop

c0024b82 <ATAPI::diskInserted()>:
c0024b82:	53                   	push   ebx
c0024b83:	83 ec 14             	sub    esp,0x14
c0024b86:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024b8a:	68 e0 cb 02 c0       	push   0xc002cbe0
c0024b8f:	e8 dd dc fe ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c0024b94:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0024b9b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024b9e:	e8 a5 f5 fe ff       	call   c0014148 <PhysicalDisk::startCache()>
c0024ba3:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024ba7:	83 c4 18             	add    esp,0x18
c0024baa:	5b                   	pop    ebx
c0024bab:	e9 20 18 ff ff       	jmp    c00163d0 <createPartitionsForDisk(PhysicalDisk*)>

c0024bb0 <ATAPI::detectMedia()>:
c0024bb0:	56                   	push   esi
c0024bb1:	53                   	push   ebx
c0024bb2:	83 ec 28             	sub    esp,0x28
c0024bb5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024bb9:	6a 0c                	push   0xc
c0024bbb:	6a 00                	push   0x0
c0024bbd:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024bc1:	56                   	push   esi
c0024bc2:	e8 89 bb fd ff       	call   c0000750 <memset>
c0024bc7:	58                   	pop    eax
c0024bc8:	5a                   	pop    edx
c0024bc9:	6a 00                	push   0x0
c0024bcb:	6a 00                	push   0x0
c0024bcd:	6a 00                	push   0x0
c0024bcf:	6a 00                	push   0x0
c0024bd1:	56                   	push   esi
c0024bd2:	53                   	push   ebx
c0024bd3:	e8 86 fc ff ff       	call   c002485e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024bd8:	83 c4 1c             	add    esp,0x1c
c0024bdb:	6a 0c                	push   0xc
c0024bdd:	6a 00                	push   0x0
c0024bdf:	56                   	push   esi
c0024be0:	e8 6b bb fd ff       	call   c0000750 <memset>
c0024be5:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024bea:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024bef:	59                   	pop    ecx
c0024bf0:	58                   	pop    eax
c0024bf1:	6a 01                	push   0x1
c0024bf3:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0024bf7:	50                   	push   eax
c0024bf8:	6a 00                	push   0x0
c0024bfa:	6a 12                	push   0x12
c0024bfc:	56                   	push   esi
c0024bfd:	53                   	push   ebx
c0024bfe:	e8 5b fc ff ff       	call   c002485e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024c03:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024c07:	83 c4 20             	add    esp,0x20
c0024c0a:	83 e0 7f             	and    eax,0x7f
c0024c0d:	3c 70                	cmp    al,0x70
c0024c0f:	74 15                	je     c0024c26 <ATAPI::detectMedia()+0x76>
c0024c11:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024c18:	75 0c                	jne    c0024c26 <ATAPI::detectMedia()+0x76>
c0024c1a:	83 ec 0c             	sub    esp,0xc
c0024c1d:	53                   	push   ebx
c0024c1e:	e8 5f ff ff ff       	call   c0024b82 <ATAPI::diskInserted()>
c0024c23:	83 c4 10             	add    esp,0x10
c0024c26:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024c2a:	83 e0 0f             	and    eax,0xf
c0024c2d:	3c 02                	cmp    al,0x2
c0024c2f:	75 1b                	jne    c0024c4c <ATAPI::detectMedia()+0x9c>
c0024c31:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024c36:	75 2d                	jne    c0024c65 <ATAPI::detectMedia()+0xb5>
c0024c38:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024c3f:	74 24                	je     c0024c65 <ATAPI::detectMedia()+0xb5>
c0024c41:	83 ec 0c             	sub    esp,0xc
c0024c44:	53                   	push   ebx
c0024c45:	e8 d4 fe ff ff       	call   c0024b1e <ATAPI::diskRemoved()>
c0024c4a:	eb 16                	jmp    c0024c62 <ATAPI::detectMedia()+0xb2>
c0024c4c:	84 c0                	test   al,al
c0024c4e:	75 15                	jne    c0024c65 <ATAPI::detectMedia()+0xb5>
c0024c50:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024c57:	75 0c                	jne    c0024c65 <ATAPI::detectMedia()+0xb5>
c0024c59:	83 ec 0c             	sub    esp,0xc
c0024c5c:	53                   	push   ebx
c0024c5d:	e8 20 ff ff ff       	call   c0024b82 <ATAPI::diskInserted()>
c0024c62:	83 c4 10             	add    esp,0x10
c0024c65:	83 c4 24             	add    esp,0x24
c0024c68:	5b                   	pop    ebx
c0024c69:	5e                   	pop    esi
c0024c6a:	c3                   	ret    
c0024c6b:	90                   	nop

c0024c6c <ATAPI::open(int, int, void*)>:
c0024c6c:	53                   	push   ebx
c0024c6d:	83 ec 08             	sub    esp,0x8
c0024c70:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024c74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024c78:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024c7c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024c82:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024c88:	c1 e0 06             	shl    eax,0x6
c0024c8b:	01 d0                	add    eax,edx
c0024c8d:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024c94:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024c9a:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024ca1:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024cab:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024cb1:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024cb8:	6a 04                	push   0x4
c0024cba:	6a 0c                	push   0xc
c0024cbc:	51                   	push   ecx
c0024cbd:	52                   	push   edx
c0024cbe:	e8 3f e6 ff ff       	call   c0023302 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024cc3:	90                   	nop
c0024cc4:	90                   	nop
c0024cc5:	6a 00                	push   0x0
c0024cc7:	6a 0c                	push   0xc
c0024cc9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024cd0:	50                   	push   eax
c0024cd1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024cd7:	e8 26 e6 ff ff       	call   c0023302 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024cdc:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024ce3:	83 c4 14             	add    esp,0x14
c0024ce6:	53                   	push   ebx
c0024ce7:	e8 c4 fe ff ff       	call   c0024bb0 <ATAPI::detectMedia()>
c0024cec:	31 c0                	xor    eax,eax
c0024cee:	83 c4 18             	add    esp,0x18
c0024cf1:	5b                   	pop    ebx
c0024cf2:	c3                   	ret    
c0024cf3:	90                   	nop

c0024cf4 <ATAPI::read(unsigned long long, int, void*)>:
c0024cf4:	55                   	push   ebp
c0024cf5:	57                   	push   edi
c0024cf6:	56                   	push   esi
c0024cf7:	53                   	push   ebx
c0024cf8:	83 ec 1c             	sub    esp,0x1c
c0024cfb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024cff:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024d03:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024d07:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024d0e:	74 41                	je     c0024d51 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024d10:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024d14:	b9 03 00 00 00       	mov    ecx,0x3
c0024d19:	fc                   	cld    
c0024d1a:	31 c0                	xor    eax,eax
c0024d1c:	86 fb                	xchg   bl,bh
c0024d1e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024d20:	c1 c3 10             	rol    ebx,0x10
c0024d23:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024d28:	89 e8                	mov    eax,ebp
c0024d2a:	86 fb                	xchg   bl,bh
c0024d2c:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024d30:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024d34:	50                   	push   eax
c0024d35:	50                   	push   eax
c0024d36:	55                   	push   ebp
c0024d37:	c1 e5 0b             	shl    ebp,0xb
c0024d3a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024d3e:	6a 00                	push   0x0
c0024d40:	55                   	push   ebp
c0024d41:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024d45:	50                   	push   eax
c0024d46:	56                   	push   esi
c0024d47:	e8 12 fb ff ff       	call   c002485e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024d4c:	83 c4 20             	add    esp,0x20
c0024d4f:	eb 1a                	jmp    c0024d6b <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024d51:	83 ec 0c             	sub    esp,0xc
c0024d54:	56                   	push   esi
c0024d55:	e8 56 fe ff ff       	call   c0024bb0 <ATAPI::detectMedia()>
c0024d5a:	83 c4 10             	add    esp,0x10
c0024d5d:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024d64:	75 aa                	jne    c0024d10 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024d66:	b8 02 00 00 00       	mov    eax,0x2
c0024d6b:	83 c4 1c             	add    esp,0x1c
c0024d6e:	5b                   	pop    ebx
c0024d6f:	5e                   	pop    esi
c0024d70:	5f                   	pop    edi
c0024d71:	5d                   	pop    ebp
c0024d72:	c3                   	ret    
c0024d73:	90                   	nop

c0024d74 <SATA::close(int, int, void*)>:
c0024d74:	83 ec 0c             	sub    esp,0xc
c0024d77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d7b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024d81:	85 c0                	test   eax,eax
c0024d83:	74 0c                	je     c0024d91 <SATA::close(int, int, void*)+0x1d>
c0024d85:	83 ec 0c             	sub    esp,0xc
c0024d88:	8b 10                	mov    edx,DWORD PTR [eax]
c0024d8a:	50                   	push   eax
c0024d8b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024d8e:	83 c4 10             	add    esp,0x10
c0024d91:	31 c0                	xor    eax,eax
c0024d93:	83 c4 0c             	add    esp,0xc
c0024d96:	c3                   	ret    
c0024d97:	90                   	nop

c0024d98 <SATA::powerSaving(PowerSavingLevel)>:
c0024d98:	c3                   	ret    
c0024d99:	90                   	nop

c0024d9a <SATA::open(int, int, void*)>:
c0024d9a:	56                   	push   esi
c0024d9b:	53                   	push   ebx
c0024d9c:	50                   	push   eax
c0024d9d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024da1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024da5:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024daf:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024db5:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024dbf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024dc3:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024dcd:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024dd3:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024dda:	e8 36 ae fe ff       	call   c000fc15 <Phys::allocatePage()>
c0024ddf:	89 c6                	mov    esi,eax
c0024de1:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024de7:	81 c6 00 10 00 00    	add    esi,0x1000
c0024ded:	e8 23 ae fe ff       	call   c000fc15 <Phys::allocatePage()>
c0024df2:	39 c6                	cmp    esi,eax
c0024df4:	74 10                	je     c0024e06 <SATA::open(int, int, void*)+0x6c>
c0024df6:	83 ec 0c             	sub    esp,0xc
c0024df9:	68 08 cb 02 c0       	push   0xc002cb08
c0024dfe:	e8 3a 53 ff ff       	call   c001a13d <Krnl::panic(char const*)>
c0024e03:	83 c4 10             	add    esp,0x10
c0024e06:	83 ec 0c             	sub    esp,0xc
c0024e09:	6a 02                	push   0x2
c0024e0b:	e8 8f c6 fe ff       	call   c001149f <Virt::allocateKernelVirtualPages(int)>
c0024e10:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024e16:	6a 03                	push   0x3
c0024e18:	50                   	push   eax
c0024e19:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024e1f:	ff 35 90 e3 02 c0    	push   DWORD PTR ds:0xc002e390
c0024e25:	e8 1c cd fe ff       	call   c0011b46 <VAS::mapPage(unsigned long, unsigned long, int)>
c0024e2a:	83 c4 14             	add    esp,0x14
c0024e2d:	53                   	push   ebx
c0024e2e:	e8 15 f3 fe ff       	call   c0014148 <PhysicalDisk::startCache()>
c0024e33:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024e36:	e8 95 15 ff ff       	call   c00163d0 <createPartitionsForDisk(PhysicalDisk*)>
c0024e3b:	83 c4 14             	add    esp,0x14
c0024e3e:	31 c0                	xor    eax,eax
c0024e40:	5b                   	pop    ebx
c0024e41:	5e                   	pop    esi
c0024e42:	c3                   	ret    
c0024e43:	90                   	nop

c0024e44 <SATA::SATA()>:
c0024e44:	83 ec 0c             	sub    esp,0xc
c0024e47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e4b:	83 ec 04             	sub    esp,0x4
c0024e4e:	68 00 02 00 00       	push   0x200
c0024e53:	68 1c cb 02 c0       	push   0xc002cb1c
c0024e58:	50                   	push   eax
c0024e59:	e8 82 f2 fe ff       	call   c00140e0 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024e5e:	83 c4 10             	add    esp,0x10
c0024e61:	ba 8c cb 02 c0       	mov    edx,0xc002cb8c
c0024e66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e6a:	89 10                	mov    DWORD PTR [eax],edx
c0024e6c:	90                   	nop
c0024e6d:	83 c4 0c             	add    esp,0xc
c0024e70:	c3                   	ret    
c0024e71:	90                   	nop

c0024e72 <SATA::access(unsigned long long, int, void*, bool)>:
c0024e72:	55                   	push   ebp
c0024e73:	57                   	push   edi
c0024e74:	56                   	push   esi
c0024e75:	53                   	push   ebx
c0024e76:	83 ec 2c             	sub    esp,0x2c
c0024e79:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024e7d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0024e81:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024e85:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024e89:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024e8d:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024e92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024e96:	7e 10                	jle    c0024ea8 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024e98:	83 ec 0c             	sub    esp,0xc
c0024e9b:	68 2c cb 02 c0       	push   0xc002cb2c
c0024ea0:	e8 98 52 ff ff       	call   c001a13d <Krnl::panic(char const*)>
c0024ea5:	83 c4 10             	add    esp,0x10
c0024ea8:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024eae:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0024eb4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024eba:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024ebe:	89 d0                	mov    eax,edx
c0024ec0:	c1 e0 07             	shl    eax,0x7
c0024ec3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024ec7:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024ed1:	51                   	push   ecx
c0024ed2:	8d 42 02             	lea    eax,[edx+0x2]
c0024ed5:	51                   	push   ecx
c0024ed6:	c1 e0 07             	shl    eax,0x7
c0024ed9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0024edd:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0024ee1:	50                   	push   eax
c0024ee2:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0024ee8:	e8 97 ef ff ff       	call   c0023e84 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024eed:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024ef1:	83 c4 10             	add    esp,0x10
c0024ef4:	b8 01 00 00 00       	mov    eax,0x1
c0024ef9:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0024efe:	0f 84 cb 01 00 00    	je     c00250cf <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024f04:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024f08:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024f0c:	c1 e0 09             	shl    eax,0x9
c0024f0f:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0024f14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024f18:	74 0e                	je     c0024f28 <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c0024f1a:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0024f20:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0024f24:	89 c1                	mov    ecx,eax
c0024f26:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024f28:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0024f2c:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0024f32:	8d 42 02             	lea    eax,[edx+0x2]
c0024f35:	c1 e0 07             	shl    eax,0x7
c0024f38:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024f3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0024f3e:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024f44:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024f4a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024f4e:	c1 e1 05             	shl    ecx,0x5
c0024f51:	01 c8                	add    eax,ecx
c0024f53:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0024f57:	83 e1 01             	and    ecx,0x1
c0024f5a:	89 ce                	mov    esi,ecx
c0024f5c:	8a 08                	mov    cl,BYTE PTR [eax]
c0024f5e:	c1 e6 06             	shl    esi,0x6
c0024f61:	83 e1 bf             	and    ecx,0xffffffbf
c0024f64:	09 f1                	or     ecx,esi
c0024f66:	88 08                	mov    BYTE PTR [eax],cl
c0024f68:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024f6a:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024f70:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024f76:	89 08                	mov    DWORD PTR [eax],ecx
c0024f78:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0024f7e:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c0024f84:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c0024f8a:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c0024f8d:	50                   	push   eax
c0024f8e:	68 90 00 00 00       	push   0x90
c0024f93:	6a 00                	push   0x0
c0024f95:	56                   	push   esi
c0024f96:	e8 b5 b7 fd ff       	call   c0000750 <memset>
c0024f9b:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024fa1:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c0024fa5:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0024fab:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0024faf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024fb3:	83 c4 10             	add    esp,0x10
c0024fb6:	48                   	dec    eax
c0024fb7:	25 ff ff 3f 00       	and    eax,0x3fffff
c0024fbc:	89 c1                	mov    ecx,eax
c0024fbe:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0024fc4:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024fc9:	09 c8                	or     eax,ecx
c0024fcb:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0024fd1:	66 8b 06             	mov    ax,WORD PTR [esi]
c0024fd4:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c0024fdb:	66 25 00 7f          	and    ax,0x7f00
c0024fdf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024fe3:	66 0d 27 80          	or     ax,0x8027
c0024fe7:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c0024fec:	66 89 06             	mov    WORD PTR [esi],ax
c0024fef:	19 c0                	sbb    eax,eax
c0024ff1:	83 e0 f0             	and    eax,0xfffffff0
c0024ff4:	83 c0 35             	add    eax,0x35
c0024ff7:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0024ffa:	89 e8                	mov    eax,ebp
c0024ffc:	c1 e8 10             	shr    eax,0x10
c0024fff:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0025002:	89 e8                	mov    eax,ebp
c0025004:	c1 e8 18             	shr    eax,0x18
c0025007:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c002500a:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c002500e:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0025011:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0025015:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0025018:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002501c:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0025020:	89 d6                	mov    esi,edx
c0025022:	31 c0                	xor    eax,eax
c0025024:	c1 e6 07             	shl    esi,0x7
c0025027:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c002502b:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c0025031:	80 e1 88             	and    cl,0x88
c0025034:	74 0a                	je     c0025040 <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c0025036:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002503b:	74 0a                	je     c0025047 <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c002503d:	40                   	inc    eax
c002503e:	eb eb                	jmp    c002502b <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c0025040:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025045:	75 0a                	jne    c0025051 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c0025047:	83 ec 0c             	sub    esp,0xc
c002504a:	68 65 cb 02 c0       	push   0xc002cb65
c002504f:	eb 56                	jmp    c00250a7 <SATA::access(unsigned long long, int, void*, bool)+0x235>
c0025051:	b8 01 00 00 00       	mov    eax,0x1
c0025056:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c002505a:	c1 e2 07             	shl    edx,0x7
c002505d:	d3 e0                	shl    eax,cl
c002505f:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0025063:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c0025069:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c002506f:	85 c8                	test   eax,ecx
c0025071:	74 20                	je     c0025093 <SATA::access(unsigned long long, int, void*, bool)+0x221>
c0025073:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c0025079:	0f ba e1 1e          	bt     ecx,0x1e
c002507d:	73 ea                	jae    c0025069 <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c002507f:	83 ec 0c             	sub    esp,0xc
c0025082:	68 73 cb 02 c0       	push   0xc002cb73
c0025087:	e8 b1 50 ff ff       	call   c001a13d <Krnl::panic(char const*)>
c002508c:	83 c4 10             	add    esp,0x10
c002508f:	31 c0                	xor    eax,eax
c0025091:	eb 3c                	jmp    c00250cf <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0025093:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c0025099:	0f ba e0 1e          	bt     eax,0x1e
c002509d:	73 17                	jae    c00250b6 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c002509f:	83 ec 0c             	sub    esp,0xc
c00250a2:	68 73 cb 02 c0       	push   0xc002cb73
c00250a7:	e8 91 50 ff ff       	call   c001a13d <Krnl::panic(char const*)>
c00250ac:	83 c4 10             	add    esp,0x10
c00250af:	b8 01 00 00 00       	mov    eax,0x1
c00250b4:	eb 19                	jmp    c00250cf <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c00250b6:	31 c0                	xor    eax,eax
c00250b8:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00250bd:	75 10                	jne    c00250cf <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c00250bf:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c00250c5:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c00250c9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00250cd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00250cf:	83 c4 2c             	add    esp,0x2c
c00250d2:	5b                   	pop    ebx
c00250d3:	5e                   	pop    esi
c00250d4:	5f                   	pop    edi
c00250d5:	5d                   	pop    ebp
c00250d6:	c3                   	ret    
c00250d7:	90                   	nop

c00250d8 <SATA::read(unsigned long long, int, void*)>:
c00250d8:	57                   	push   edi
c00250d9:	b8 04 00 00 00       	mov    eax,0x4
c00250de:	56                   	push   esi
c00250df:	53                   	push   ebx
c00250e0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00250e4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00250e8:	8d 7a ff             	lea    edi,[edx-0x1]
c00250eb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00250ef:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00250f3:	81 ff fe 00 00 00    	cmp    edi,0xfe
c00250f9:	77 25                	ja     c0025120 <SATA::read(unsigned long long, int, void*)+0x48>
c00250fb:	b8 06 00 00 00       	mov    eax,0x6
c0025100:	85 f6                	test   esi,esi
c0025102:	74 1c                	je     c0025120 <SATA::read(unsigned long long, int, void*)+0x48>
c0025104:	50                   	push   eax
c0025105:	50                   	push   eax
c0025106:	6a 00                	push   0x0
c0025108:	56                   	push   esi
c0025109:	52                   	push   edx
c002510a:	53                   	push   ebx
c002510b:	51                   	push   ecx
c002510c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0025110:	e8 5d fd ff ff       	call   c0024e72 <SATA::access(unsigned long long, int, void*, bool)>
c0025115:	83 c4 20             	add    esp,0x20
c0025118:	85 c0                	test   eax,eax
c002511a:	0f 95 c0             	setne  al
c002511d:	0f b6 c0             	movzx  eax,al
c0025120:	5b                   	pop    ebx
c0025121:	5e                   	pop    esi
c0025122:	5f                   	pop    edi
c0025123:	c3                   	ret    

c0025124 <SATA::write(unsigned long long, int, void*)>:
c0025124:	55                   	push   ebp
c0025125:	b8 04 00 00 00       	mov    eax,0x4
c002512a:	57                   	push   edi
c002512b:	56                   	push   esi
c002512c:	53                   	push   ebx
c002512d:	83 ec 0c             	sub    esp,0xc
c0025130:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0025134:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0025138:	8d 73 ff             	lea    esi,[ebx-0x1]
c002513b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c002513f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025143:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0025149:	77 3d                	ja     c0025188 <SATA::write(unsigned long long, int, void*)+0x64>
c002514b:	b8 06 00 00 00       	mov    eax,0x6
c0025150:	85 ed                	test   ebp,ebp
c0025152:	74 34                	je     c0025188 <SATA::write(unsigned long long, int, void*)+0x64>
c0025154:	c1 e3 09             	shl    ebx,0x9
c0025157:	01 eb                	add    ebx,ebp
c0025159:	89 d6                	mov    esi,edx
c002515b:	89 cf                	mov    edi,ecx
c002515d:	83 c6 01             	add    esi,0x1
c0025160:	83 d7 00             	adc    edi,0x0
c0025163:	50                   	push   eax
c0025164:	50                   	push   eax
c0025165:	6a 01                	push   0x1
c0025167:	55                   	push   ebp
c0025168:	81 c5 00 02 00 00    	add    ebp,0x200
c002516e:	6a 01                	push   0x1
c0025170:	51                   	push   ecx
c0025171:	52                   	push   edx
c0025172:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025176:	e8 f7 fc ff ff       	call   c0024e72 <SATA::access(unsigned long long, int, void*, bool)>
c002517b:	83 c4 20             	add    esp,0x20
c002517e:	89 f2                	mov    edx,esi
c0025180:	89 f9                	mov    ecx,edi
c0025182:	39 dd                	cmp    ebp,ebx
c0025184:	75 d3                	jne    c0025159 <SATA::write(unsigned long long, int, void*)+0x35>
c0025186:	31 c0                	xor    eax,eax
c0025188:	83 c4 0c             	add    esp,0xc
c002518b:	5b                   	pop    ebx
c002518c:	5e                   	pop    esi
c002518d:	5f                   	pop    edi
c002518e:	5d                   	pop    ebp
c002518f:	c3                   	ret    

c0025190 <SATAPI::write(unsigned long long, int, void*)>:
c0025190:	b8 03 00 00 00       	mov    eax,0x3
c0025195:	c3                   	ret    

c0025196 <SATAPI::close(int, int, void*)>:
c0025196:	83 ec 0c             	sub    esp,0xc
c0025199:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002519d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00251a3:	85 c0                	test   eax,eax
c00251a5:	74 0c                	je     c00251b3 <SATAPI::close(int, int, void*)+0x1d>
c00251a7:	83 ec 0c             	sub    esp,0xc
c00251aa:	8b 10                	mov    edx,DWORD PTR [eax]
c00251ac:	50                   	push   eax
c00251ad:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00251b0:	83 c4 10             	add    esp,0x10
c00251b3:	31 c0                	xor    eax,eax
c00251b5:	83 c4 0c             	add    esp,0xc
c00251b8:	c3                   	ret    
c00251b9:	90                   	nop

c00251ba <SATAPI::SATAPI()>:
c00251ba:	83 ec 0c             	sub    esp,0xc
c00251bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251c1:	83 ec 04             	sub    esp,0x4
c00251c4:	68 00 08 00 00       	push   0x800
c00251c9:	68 bc cb 02 c0       	push   0xc002cbbc
c00251ce:	50                   	push   eax
c00251cf:	e8 0c ef fe ff       	call   c00140e0 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00251d4:	83 c4 10             	add    esp,0x10
c00251d7:	ba 68 cc 02 c0       	mov    edx,0xc002cc68
c00251dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251e0:	89 10                	mov    DWORD PTR [eax],edx
c00251e2:	90                   	nop
c00251e3:	83 c4 0c             	add    esp,0xc
c00251e6:	c3                   	ret    
c00251e7:	90                   	nop

c00251e8 <SATAPI::diskRemoved()>:
c00251e8:	83 ec 18             	sub    esp,0x18
c00251eb:	68 c8 cb 02 c0       	push   0xc002cbc8
c00251f0:	e8 7c d6 fe ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c00251f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00251f9:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0025200:	83 c4 1c             	add    esp,0x1c
c0025203:	c3                   	ret    

c0025204 <SATAPI::diskInserted()>:
c0025204:	53                   	push   ebx
c0025205:	83 ec 14             	sub    esp,0x14
c0025208:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002520c:	68 df cb 02 c0       	push   0xc002cbdf
c0025211:	e8 5b d6 fe ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c0025216:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c002521d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025220:	e8 23 ef fe ff       	call   c0014148 <PhysicalDisk::startCache()>
c0025225:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0025229:	83 c4 18             	add    esp,0x18
c002522c:	5b                   	pop    ebx
c002522d:	e9 9e 11 ff ff       	jmp    c00163d0 <createPartitionsForDisk(PhysicalDisk*)>

c0025232 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0025232:	55                   	push   ebp
c0025233:	57                   	push   edi
c0025234:	56                   	push   esi
c0025235:	53                   	push   ebx
c0025236:	83 ec 34             	sub    esp,0x34
c0025239:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c002523d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025241:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0025245:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0025249:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c002524d:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0025253:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025259:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002525d:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0025263:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025267:	c1 e0 07             	shl    eax,0x7
c002526a:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002526e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025272:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002527c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025280:	8d 58 02             	lea    ebx,[eax+0x2]
c0025283:	c1 e3 07             	shl    ebx,0x7
c0025286:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c002528a:	53                   	push   ebx
c002528b:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0025291:	e8 ee eb ff ff       	call   c0023e84 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0025296:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002529a:	83 c4 10             	add    esp,0x10
c002529d:	b8 01 00 00 00       	mov    eax,0x1
c00252a2:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c00252a7:	0f 84 85 01 00 00    	je     c0025432 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c00252ad:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c00252b3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00252b5:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00252bb:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00252c1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00252c5:	c1 e1 05             	shl    ecx,0x5
c00252c8:	01 c8                	add    eax,ecx
c00252ca:	8b 08                	mov    ecx,DWORD PTR [eax]
c00252cc:	81 e1 80 ff 00 00    	and    ecx,0xff80
c00252d2:	81 c9 25 00 01 00    	or     ecx,0x10025
c00252d8:	89 08                	mov    DWORD PTR [eax],ecx
c00252da:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c00252e0:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c00252e6:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c00252ec:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c00252ef:	8d 7b 40             	lea    edi,[ebx+0x40]
c00252f2:	50                   	push   eax
c00252f3:	68 90 00 00 00       	push   0x90
c00252f8:	6a 00                	push   0x0
c00252fa:	53                   	push   ebx
c00252fb:	e8 50 b4 fd ff       	call   c0000750 <memset>
c0025300:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0025304:	b9 0c 00 00 00       	mov    ecx,0xc
c0025309:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002530b:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c0025311:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0025315:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c002531b:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c002531f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025323:	48                   	dec    eax
c0025324:	25 ff ff 3f 00       	and    eax,0x3fffff
c0025329:	89 c1                	mov    ecx,eax
c002532b:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0025331:	25 00 00 c0 ff       	and    eax,0xffc00000
c0025336:	09 c8                	or     eax,ecx
c0025338:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c002533e:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0025341:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0025348:	66 25 00 7f          	and    ax,0x7f00
c002534c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0025350:	66 0d 27 80          	or     ax,0x8027
c0025354:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0025358:	66 89 03             	mov    WORD PTR [ebx],ax
c002535b:	89 d0                	mov    eax,edx
c002535d:	c1 ea 18             	shr    edx,0x18
c0025360:	c1 e8 10             	shr    eax,0x10
c0025363:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0025366:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0025369:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c002536d:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0025370:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0025374:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0025377:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002537b:	83 c4 10             	add    esp,0x10
c002537e:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0025382:	31 c0                	xor    eax,eax
c0025384:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0025388:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c002538e:	80 e2 88             	and    dl,0x88
c0025391:	74 0a                	je     c002539d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0025393:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025398:	74 0a                	je     c00253a4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c002539a:	40                   	inc    eax
c002539b:	eb eb                	jmp    c0025388 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c002539d:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00253a2:	75 0f                	jne    c00253b3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c00253a4:	83 ec 0c             	sub    esp,0xc
c00253a7:	68 65 cb 02 c0       	push   0xc002cb65
c00253ac:	e8 8c 4d ff ff       	call   c001a13d <Krnl::panic(char const*)>
c00253b1:	eb 3f                	jmp    c00253f2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c00253b3:	ba 01 00 00 00       	mov    edx,0x1
c00253b8:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00253bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00253c0:	d3 e2                	shl    edx,cl
c00253c2:	c1 e0 07             	shl    eax,0x7
c00253c5:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c00253cb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00253cf:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c00253d5:	85 ca                	test   edx,ecx
c00253d7:	74 23                	je     c00253fc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c00253d9:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c00253df:	0f ba e1 1e          	bt     ecx,0x1e
c00253e3:	73 ea                	jae    c00253cf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c00253e5:	83 ec 0c             	sub    esp,0xc
c00253e8:	68 f7 cb 02 c0       	push   0xc002cbf7
c00253ed:	e8 7f d4 fe ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c00253f2:	83 c4 10             	add    esp,0x10
c00253f5:	b8 01 00 00 00       	mov    eax,0x1
c00253fa:	eb 36                	jmp    c0025432 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c00253fc:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0025402:	0f ba e0 1e          	bt     eax,0x1e
c0025406:	73 0a                	jae    c0025412 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c0025408:	83 ec 0c             	sub    esp,0xc
c002540b:	68 0a cc 02 c0       	push   0xc002cc0a
c0025410:	eb db                	jmp    c00253ed <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c0025412:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0025417:	74 17                	je     c0025430 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0025419:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c002541e:	74 10                	je     c0025430 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0025420:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c0025426:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c002542a:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c002542e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025430:	31 c0                	xor    eax,eax
c0025432:	83 c4 2c             	add    esp,0x2c
c0025435:	5b                   	pop    ebx
c0025436:	5e                   	pop    esi
c0025437:	5f                   	pop    edi
c0025438:	5d                   	pop    ebp
c0025439:	c3                   	ret    

c002543a <SATAPI::eject()>:
c002543a:	57                   	push   edi
c002543b:	b9 03 00 00 00       	mov    ecx,0x3
c0025440:	53                   	push   ebx
c0025441:	83 ec 14             	sub    esp,0x14
c0025444:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025448:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002544c:	fc                   	cld    
c002544d:	31 c0                	xor    eax,eax
c002544f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025451:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0025456:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002545b:	50                   	push   eax
c002545c:	6a 00                	push   0x0
c002545e:	6a 00                	push   0x0
c0025460:	6a 00                	push   0x0
c0025462:	6a 00                	push   0x0
c0025464:	6a 02                	push   0x2
c0025466:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002546a:	50                   	push   eax
c002546b:	53                   	push   ebx
c002546c:	e8 c1 fd ff ff       	call   c0025232 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025471:	83 c4 14             	add    esp,0x14
c0025474:	53                   	push   ebx
c0025475:	e8 6e fd ff ff       	call   c00251e8 <SATAPI::diskRemoved()>
c002547a:	83 c4 24             	add    esp,0x24
c002547d:	31 c0                	xor    eax,eax
c002547f:	5b                   	pop    ebx
c0025480:	5f                   	pop    edi
c0025481:	c3                   	ret    

c0025482 <SATAPI::detectMedia()>:
c0025482:	56                   	push   esi
c0025483:	53                   	push   ebx
c0025484:	83 ec 28             	sub    esp,0x28
c0025487:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002548b:	6a 0c                	push   0xc
c002548d:	6a 00                	push   0x0
c002548f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025493:	56                   	push   esi
c0025494:	e8 b7 b2 fd ff       	call   c0000750 <memset>
c0025499:	83 c4 0c             	add    esp,0xc
c002549c:	6a 00                	push   0x0
c002549e:	6a 00                	push   0x0
c00254a0:	6a 00                	push   0x0
c00254a2:	6a 00                	push   0x0
c00254a4:	6a 00                	push   0x0
c00254a6:	56                   	push   esi
c00254a7:	53                   	push   ebx
c00254a8:	e8 85 fd ff ff       	call   c0025232 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00254ad:	83 c4 1c             	add    esp,0x1c
c00254b0:	6a 0c                	push   0xc
c00254b2:	6a 00                	push   0x0
c00254b4:	56                   	push   esi
c00254b5:	e8 96 b2 fd ff       	call   c0000750 <memset>
c00254ba:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00254bf:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00254c4:	83 c4 0c             	add    esp,0xc
c00254c7:	6a 01                	push   0x1
c00254c9:	8d 44 24 16          	lea    eax,[esp+0x16]
c00254cd:	50                   	push   eax
c00254ce:	6a 00                	push   0x0
c00254d0:	6a 00                	push   0x0
c00254d2:	6a 12                	push   0x12
c00254d4:	56                   	push   esi
c00254d5:	53                   	push   ebx
c00254d6:	e8 57 fd ff ff       	call   c0025232 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00254db:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00254df:	83 c4 20             	add    esp,0x20
c00254e2:	83 e0 7f             	and    eax,0x7f
c00254e5:	3c 70                	cmp    al,0x70
c00254e7:	74 15                	je     c00254fe <SATAPI::detectMedia()+0x7c>
c00254e9:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00254f0:	75 0c                	jne    c00254fe <SATAPI::detectMedia()+0x7c>
c00254f2:	83 ec 0c             	sub    esp,0xc
c00254f5:	53                   	push   ebx
c00254f6:	e8 09 fd ff ff       	call   c0025204 <SATAPI::diskInserted()>
c00254fb:	83 c4 10             	add    esp,0x10
c00254fe:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025502:	83 e0 0f             	and    eax,0xf
c0025505:	3c 02                	cmp    al,0x2
c0025507:	75 1b                	jne    c0025524 <SATAPI::detectMedia()+0xa2>
c0025509:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002550e:	75 2d                	jne    c002553d <SATAPI::detectMedia()+0xbb>
c0025510:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025517:	74 24                	je     c002553d <SATAPI::detectMedia()+0xbb>
c0025519:	83 ec 0c             	sub    esp,0xc
c002551c:	53                   	push   ebx
c002551d:	e8 c6 fc ff ff       	call   c00251e8 <SATAPI::diskRemoved()>
c0025522:	eb 16                	jmp    c002553a <SATAPI::detectMedia()+0xb8>
c0025524:	84 c0                	test   al,al
c0025526:	75 15                	jne    c002553d <SATAPI::detectMedia()+0xbb>
c0025528:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002552f:	75 0c                	jne    c002553d <SATAPI::detectMedia()+0xbb>
c0025531:	83 ec 0c             	sub    esp,0xc
c0025534:	53                   	push   ebx
c0025535:	e8 ca fc ff ff       	call   c0025204 <SATAPI::diskInserted()>
c002553a:	83 c4 10             	add    esp,0x10
c002553d:	83 c4 24             	add    esp,0x24
c0025540:	5b                   	pop    ebx
c0025541:	5e                   	pop    esi
c0025542:	c3                   	ret    
c0025543:	90                   	nop

c0025544 <SATAPI::open(int, int, void*)>:
c0025544:	56                   	push   esi
c0025545:	53                   	push   ebx
c0025546:	50                   	push   eax
c0025547:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002554b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002554f:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0025559:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002555f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025569:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002556d:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025577:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002557d:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025584:	e8 8c a6 fe ff       	call   c000fc15 <Phys::allocatePage()>
c0025589:	89 c6                	mov    esi,eax
c002558b:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025591:	81 c6 00 10 00 00    	add    esi,0x1000
c0025597:	e8 79 a6 fe ff       	call   c000fc15 <Phys::allocatePage()>
c002559c:	39 c6                	cmp    esi,eax
c002559e:	74 10                	je     c00255b0 <SATAPI::open(int, int, void*)+0x6c>
c00255a0:	83 ec 0c             	sub    esp,0xc
c00255a3:	68 1f cc 02 c0       	push   0xc002cc1f
c00255a8:	e8 90 4b ff ff       	call   c001a13d <Krnl::panic(char const*)>
c00255ad:	83 c4 10             	add    esp,0x10
c00255b0:	83 ec 0c             	sub    esp,0xc
c00255b3:	6a 02                	push   0x2
c00255b5:	e8 e5 be fe ff       	call   c001149f <Virt::allocateKernelVirtualPages(int)>
c00255ba:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c00255c0:	6a 03                	push   0x3
c00255c2:	50                   	push   eax
c00255c3:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c00255c9:	ff 35 90 e3 02 c0    	push   DWORD PTR ds:0xc002e390
c00255cf:	e8 72 c5 fe ff       	call   c0011b46 <VAS::mapPage(unsigned long, unsigned long, int)>
c00255d4:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c00255db:	83 c4 14             	add    esp,0x14
c00255de:	53                   	push   ebx
c00255df:	e8 9e fe ff ff       	call   c0025482 <SATAPI::detectMedia()>
c00255e4:	83 c4 14             	add    esp,0x14
c00255e7:	31 c0                	xor    eax,eax
c00255e9:	5b                   	pop    ebx
c00255ea:	5e                   	pop    esi
c00255eb:	c3                   	ret    

c00255ec <SATAPI::read(unsigned long long, int, void*)>:
c00255ec:	55                   	push   ebp
c00255ed:	57                   	push   edi
c00255ee:	56                   	push   esi
c00255ef:	53                   	push   ebx
c00255f0:	83 ec 1c             	sub    esp,0x1c
c00255f3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00255f7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00255fb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00255ff:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025606:	74 19                	je     c0025621 <SATAPI::read(unsigned long long, int, void*)+0x35>
c0025608:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c002560d:	7e 2e                	jle    c002563d <SATAPI::read(unsigned long long, int, void*)+0x51>
c002560f:	83 ec 0c             	sub    esp,0xc
c0025612:	68 35 cc 02 c0       	push   0xc002cc35
c0025617:	e8 21 4b ff ff       	call   c001a13d <Krnl::panic(char const*)>
c002561c:	83 c4 10             	add    esp,0x10
c002561f:	eb 1c                	jmp    c002563d <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025621:	83 ec 0c             	sub    esp,0xc
c0025624:	55                   	push   ebp
c0025625:	e8 58 fe ff ff       	call   c0025482 <SATAPI::detectMedia()>
c002562a:	83 c4 10             	add    esp,0x10
c002562d:	b8 02 00 00 00       	mov    eax,0x2
c0025632:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025639:	75 cd                	jne    c0025608 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c002563b:	eb 49                	jmp    c0025686 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c002563d:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025641:	b9 03 00 00 00       	mov    ecx,0x3
c0025646:	fc                   	cld    
c0025647:	31 c0                	xor    eax,eax
c0025649:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002564b:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025650:	89 d8                	mov    eax,ebx
c0025652:	86 e0                	xchg   al,ah
c0025654:	c1 c0 10             	rol    eax,0x10
c0025657:	86 e0                	xchg   al,ah
c0025659:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c002565d:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0025661:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0025665:	50                   	push   eax
c0025666:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c002566a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002566e:	56                   	push   esi
c002566f:	53                   	push   ebx
c0025670:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0025674:	c1 e0 0b             	shl    eax,0xb
c0025677:	50                   	push   eax
c0025678:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002567c:	50                   	push   eax
c002567d:	55                   	push   ebp
c002567e:	e8 af fb ff ff       	call   c0025232 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025683:	83 c4 20             	add    esp,0x20
c0025686:	83 c4 1c             	add    esp,0x1c
c0025689:	5b                   	pop    ebx
c002568a:	5e                   	pop    esi
c002568b:	5f                   	pop    edi
c002568c:	5d                   	pop    ebp
c002568d:	c3                   	ret    

c002568e <AVX::open(int, int, void*)>:
c002568e:	83 ec 0c             	sub    esp,0xc
c0025691:	e8 42 11 00 00       	call   c00267d8 <avxInit>
c0025696:	b8 00 00 00 00       	mov    eax,0x0
c002569b:	83 c4 0c             	add    esp,0xc
c002569e:	c3                   	ret    
c002569f:	90                   	nop

c00256a0 <AVX::close(int, int, void*)>:
c00256a0:	83 ec 0c             	sub    esp,0xc
c00256a3:	e8 31 11 00 00       	call   c00267d9 <avxClose>
c00256a8:	b8 00 00 00 00       	mov    eax,0x0
c00256ad:	83 c4 0c             	add    esp,0xc
c00256b0:	c3                   	ret    
c00256b1:	90                   	nop

c00256b2 <AVX::available()>:
c00256b2:	83 ec 0c             	sub    esp,0xc
c00256b5:	e8 16 11 00 00       	call   c00267d0 <avxDetect>
c00256ba:	85 c0                	test   eax,eax
c00256bc:	0f 95 c0             	setne  al
c00256bf:	83 c4 0c             	add    esp,0xc
c00256c2:	c3                   	ret    
c00256c3:	90                   	nop

c00256c4 <AVX::save(void*)>:
c00256c4:	83 ec 0c             	sub    esp,0xc
c00256c7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00256cb:	83 ec 0c             	sub    esp,0xc
c00256ce:	50                   	push   eax
c00256cf:	e8 02 11 00 00       	call   c00267d6 <avxSave>
c00256d4:	83 c4 10             	add    esp,0x10
c00256d7:	90                   	nop
c00256d8:	83 c4 0c             	add    esp,0xc
c00256db:	c3                   	ret    

c00256dc <AVX::load(void*)>:
c00256dc:	83 ec 0c             	sub    esp,0xc
c00256df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00256e3:	83 ec 0c             	sub    esp,0xc
c00256e6:	50                   	push   eax
c00256e7:	e8 eb 10 00 00       	call   c00267d7 <avxLoad>
c00256ec:	83 c4 10             	add    esp,0x10
c00256ef:	90                   	nop
c00256f0:	83 c4 0c             	add    esp,0xc
c00256f3:	c3                   	ret    

c00256f4 <AVX::AVX()>:
c00256f4:	83 ec 0c             	sub    esp,0xc
c00256f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256fb:	83 ec 08             	sub    esp,0x8
c00256fe:	68 98 cc 02 c0       	push   0xc002cc98
c0025703:	50                   	push   eax
c0025704:	e8 b5 ea fe ff       	call   c00141be <FPU::FPU(char const*)>
c0025709:	83 c4 10             	add    esp,0x10
c002570c:	ba a8 cc 02 c0       	mov    edx,0xc002cca8
c0025711:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025715:	89 10                	mov    DWORD PTR [eax],edx
c0025717:	90                   	nop
c0025718:	83 c4 0c             	add    esp,0xc
c002571b:	c3                   	ret    

c002571c <MMX::available()>:
c002571c:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c0025721:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025727:	83 e0 20             	and    eax,0x20
c002572a:	84 c0                	test   al,al
c002572c:	0f 95 c0             	setne  al
c002572f:	c3                   	ret    

c0025730 <MMX::open(int, int, void*)>:
c0025730:	83 ec 0c             	sub    esp,0xc
c0025733:	e8 2a 11 00 00       	call   c0026862 <x87Init>
c0025738:	b8 00 00 00 00       	mov    eax,0x0
c002573d:	83 c4 0c             	add    esp,0xc
c0025740:	c3                   	ret    
c0025741:	90                   	nop

c0025742 <MMX::close(int, int, void*)>:
c0025742:	83 ec 0c             	sub    esp,0xc
c0025745:	e8 32 11 00 00       	call   c002687c <x87Close>
c002574a:	b8 00 00 00 00       	mov    eax,0x0
c002574f:	83 c4 0c             	add    esp,0xc
c0025752:	c3                   	ret    
c0025753:	90                   	nop

c0025754 <MMX::save(void*)>:
c0025754:	83 ec 0c             	sub    esp,0xc
c0025757:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002575b:	83 ec 0c             	sub    esp,0xc
c002575e:	50                   	push   eax
c002575f:	e8 ed 10 00 00       	call   c0026851 <x87Save>
c0025764:	83 c4 10             	add    esp,0x10
c0025767:	90                   	nop
c0025768:	83 c4 0c             	add    esp,0xc
c002576b:	c3                   	ret    

c002576c <MMX::load(void*)>:
c002576c:	83 ec 0c             	sub    esp,0xc
c002576f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025773:	83 ec 0c             	sub    esp,0xc
c0025776:	50                   	push   eax
c0025777:	e8 de 10 00 00       	call   c002685a <x87Load>
c002577c:	83 c4 10             	add    esp,0x10
c002577f:	90                   	nop
c0025780:	83 c4 0c             	add    esp,0xc
c0025783:	c3                   	ret    

c0025784 <MMX::MMX()>:
c0025784:	83 ec 0c             	sub    esp,0xc
c0025787:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002578b:	83 ec 08             	sub    esp,0x8
c002578e:	68 d8 cc 02 c0       	push   0xc002ccd8
c0025793:	50                   	push   eax
c0025794:	e8 25 ea fe ff       	call   c00141be <FPU::FPU(char const*)>
c0025799:	83 c4 10             	add    esp,0x10
c002579c:	ba e8 cc 02 c0       	mov    edx,0xc002cce8
c00257a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257a5:	89 10                	mov    DWORD PTR [eax],edx
c00257a7:	90                   	nop
c00257a8:	83 c4 0c             	add    esp,0xc
c00257ab:	c3                   	ret    

c00257ac <SSE::open(int, int, void*)>:
c00257ac:	83 ec 0c             	sub    esp,0xc
c00257af:	e8 60 10 00 00       	call   c0026814 <sseInit>
c00257b4:	b8 00 00 00 00       	mov    eax,0x0
c00257b9:	83 c4 0c             	add    esp,0xc
c00257bc:	c3                   	ret    
c00257bd:	90                   	nop

c00257be <SSE::close(int, int, void*)>:
c00257be:	83 ec 0c             	sub    esp,0xc
c00257c1:	e8 5e 10 00 00       	call   c0026824 <sseClose>
c00257c6:	b8 00 00 00 00       	mov    eax,0x0
c00257cb:	83 c4 0c             	add    esp,0xc
c00257ce:	c3                   	ret    
c00257cf:	90                   	nop

c00257d0 <SSE::available()>:
c00257d0:	83 ec 1c             	sub    esp,0x1c
c00257d3:	e8 18 10 00 00       	call   c00267f0 <absolutelyNoChanceInHell>
c00257d8:	85 c0                	test   eax,eax
c00257da:	0f 95 c0             	setne  al
c00257dd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00257e1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00257e5:	83 c4 1c             	add    esp,0x1c
c00257e8:	c3                   	ret    
c00257e9:	90                   	nop

c00257ea <SSE::save(void*)>:
c00257ea:	83 ec 0c             	sub    esp,0xc
c00257ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00257f1:	83 ec 0c             	sub    esp,0xc
c00257f4:	50                   	push   eax
c00257f5:	e8 0e 10 00 00       	call   c0026808 <sseSave>
c00257fa:	83 c4 10             	add    esp,0x10
c00257fd:	90                   	nop
c00257fe:	83 c4 0c             	add    esp,0xc
c0025801:	c3                   	ret    

c0025802 <SSE::load(void*)>:
c0025802:	83 ec 0c             	sub    esp,0xc
c0025805:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025809:	83 ec 0c             	sub    esp,0xc
c002580c:	50                   	push   eax
c002580d:	e8 fc 0f 00 00       	call   c002680e <sseLoad>
c0025812:	83 c4 10             	add    esp,0x10
c0025815:	90                   	nop
c0025816:	83 c4 0c             	add    esp,0xc
c0025819:	c3                   	ret    

c002581a <SSE::SSE()>:
c002581a:	83 ec 0c             	sub    esp,0xc
c002581d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025821:	83 ec 08             	sub    esp,0x8
c0025824:	68 18 cd 02 c0       	push   0xc002cd18
c0025829:	50                   	push   eax
c002582a:	e8 8f e9 fe ff       	call   c00141be <FPU::FPU(char const*)>
c002582f:	83 c4 10             	add    esp,0x10
c0025832:	ba 28 cd 02 c0       	mov    edx,0xc002cd28
c0025837:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002583b:	89 10                	mov    DWORD PTR [eax],edx
c002583d:	90                   	nop
c002583e:	83 c4 0c             	add    esp,0xc
c0025841:	c3                   	ret    

c0025842 <x87::open(int, int, void*)>:
c0025842:	83 ec 0c             	sub    esp,0xc
c0025845:	e8 18 10 00 00       	call   c0026862 <x87Init>
c002584a:	b8 00 00 00 00       	mov    eax,0x0
c002584f:	83 c4 0c             	add    esp,0xc
c0025852:	c3                   	ret    
c0025853:	90                   	nop

c0025854 <x87::close(int, int, void*)>:
c0025854:	83 ec 0c             	sub    esp,0xc
c0025857:	e8 20 10 00 00       	call   c002687c <x87Close>
c002585c:	b8 00 00 00 00       	mov    eax,0x0
c0025861:	83 c4 0c             	add    esp,0xc
c0025864:	c3                   	ret    
c0025865:	90                   	nop

c0025866 <x87::available()>:
c0025866:	83 ec 0c             	sub    esp,0xc
c0025869:	e8 c8 0f 00 00       	call   c0026836 <x87Detect>
c002586e:	85 c0                	test   eax,eax
c0025870:	0f 95 c0             	setne  al
c0025873:	83 c4 0c             	add    esp,0xc
c0025876:	c3                   	ret    
c0025877:	90                   	nop

c0025878 <x87::save(void*)>:
c0025878:	83 ec 0c             	sub    esp,0xc
c002587b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002587f:	83 ec 0c             	sub    esp,0xc
c0025882:	50                   	push   eax
c0025883:	e8 c9 0f 00 00       	call   c0026851 <x87Save>
c0025888:	83 c4 10             	add    esp,0x10
c002588b:	90                   	nop
c002588c:	83 c4 0c             	add    esp,0xc
c002588f:	c3                   	ret    

c0025890 <x87::load(void*)>:
c0025890:	83 ec 0c             	sub    esp,0xc
c0025893:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025897:	83 ec 0c             	sub    esp,0xc
c002589a:	50                   	push   eax
c002589b:	e8 ba 0f 00 00       	call   c002685a <x87Load>
c00258a0:	83 c4 10             	add    esp,0x10
c00258a3:	90                   	nop
c00258a4:	83 c4 0c             	add    esp,0xc
c00258a7:	c3                   	ret    

c00258a8 <x87::x87()>:
c00258a8:	83 ec 0c             	sub    esp,0xc
c00258ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258af:	83 ec 08             	sub    esp,0x8
c00258b2:	68 58 cd 02 c0       	push   0xc002cd58
c00258b7:	50                   	push   eax
c00258b8:	e8 01 e9 fe ff       	call   c00141be <FPU::FPU(char const*)>
c00258bd:	83 c4 10             	add    esp,0x10
c00258c0:	ba 68 cd 02 c0       	mov    edx,0xc002cd68
c00258c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258c9:	89 10                	mov    DWORD PTR [eax],edx
c00258cb:	90                   	nop
c00258cc:	83 c4 0c             	add    esp,0xc
c00258cf:	c3                   	ret    

c00258d0 <APIC::disable()>:
c00258d0:	90                   	nop
c00258d1:	c3                   	ret    

c00258d2 <APIC::close(int, int, void*)>:
c00258d2:	55                   	push   ebp
c00258d3:	89 e5                	mov    ebp,esp
c00258d5:	83 ec 08             	sub    esp,0x8
c00258d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258db:	8b 00                	mov    eax,DWORD PTR [eax]
c00258dd:	83 c0 3c             	add    eax,0x3c
c00258e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00258e2:	83 ec 0c             	sub    esp,0xc
c00258e5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00258e8:	ff d0                	call   eax
c00258ea:	83 c4 10             	add    esp,0x10
c00258ed:	b8 00 00 00 00       	mov    eax,0x0
c00258f2:	c9                   	leave  
c00258f3:	c3                   	ret    

c00258f4 <IOAPIC::close(int, int, void*)>:
c00258f4:	b8 00 00 00 00       	mov    eax,0x0
c00258f9:	c3                   	ret    

c00258fa <APIC::io_wait()>:
c00258fa:	eb 00                	jmp    c00258fc <APIC::io_wait()+0x2>
c00258fc:	eb 00                	jmp    c00258fe <APIC::io_wait()+0x4>
c00258fe:	90                   	nop
c00258ff:	c3                   	ret    

c0025900 <APIC::getBase()>:
c0025900:	55                   	push   ebp
c0025901:	89 e5                	mov    ebp,esp
c0025903:	83 ec 18             	sub    esp,0x18
c0025906:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c002590b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025911:	83 e0 08             	and    eax,0x8
c0025914:	84 c0                	test   al,al
c0025916:	75 07                	jne    c002591f <APIC::getBase()+0x1f>
c0025918:	b8 00 00 00 00       	mov    eax,0x0
c002591d:	eb 21                	jmp    c0025940 <APIC::getBase()+0x40>
c002591f:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c0025924:	83 ec 08             	sub    esp,0x8
c0025927:	6a 1b                	push   0x1b
c0025929:	50                   	push   eax
c002592a:	e8 53 94 fe ff       	call   c000ed82 <Computer::rdmsr(unsigned int)>
c002592f:	83 c4 10             	add    esp,0x10
c0025932:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025935:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025938:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002593b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0025940:	c9                   	leave  
c0025941:	c3                   	ret    

c0025942 <APIC::eoi(unsigned char)>:
c0025942:	55                   	push   ebp
c0025943:	89 e5                	mov    ebp,esp
c0025945:	83 ec 28             	sub    esp,0x28
c0025948:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002594b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002594e:	83 ec 0c             	sub    esp,0xc
c0025951:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025954:	e8 a7 ff ff ff       	call   c0025900 <APIC::getBase()>
c0025959:	83 c4 10             	add    esp,0x10
c002595c:	05 b0 00 00 00       	add    eax,0xb0
c0025961:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025964:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025967:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c002596d:	90                   	nop
c002596e:	c9                   	leave  
c002596f:	c3                   	ret    

c0025970 <APIC::open(int, int, void*)>:
c0025970:	55                   	push   ebp
c0025971:	89 e5                	mov    ebp,esp
c0025973:	57                   	push   edi
c0025974:	56                   	push   esi
c0025975:	53                   	push   ebx
c0025976:	83 ec 2c             	sub    esp,0x2c
c0025979:	83 ec 0c             	sub    esp,0xc
c002597c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002597f:	e8 7c ff ff ff       	call   c0025900 <APIC::getBase()>
c0025984:	83 c4 10             	add    esp,0x10
c0025987:	89 c2                	mov    edx,eax
c0025989:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002598c:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025992:	0f b6 f8             	movzx  edi,al
c0025995:	89 d0                	mov    eax,edx
c0025997:	ba 00 00 00 00       	mov    edx,0x0
c002599c:	89 c1                	mov    ecx,eax
c002599e:	80 e5 ff             	and    ch,0xff
c00259a1:	89 cb                	mov    ebx,ecx
c00259a3:	0f b6 f2             	movzx  esi,dl
c00259a6:	89 d8                	mov    eax,ebx
c00259a8:	89 f2                	mov    edx,esi
c00259aa:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00259ad:	8d 5f 08             	lea    ebx,[edi+0x8]
c00259b0:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00259b4:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00259b8:	83 e0 00             	and    eax,0x0
c00259bb:	09 d0                	or     eax,edx
c00259bd:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00259c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259c4:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00259ca:	8d 50 01             	lea    edx,[eax+0x1]
c00259cd:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00259d0:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00259d6:	0f b6 d0             	movzx  edx,al
c00259d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259dc:	83 c2 08             	add    edx,0x8
c00259df:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00259e3:	0f b6 c9             	movzx  ecx,cl
c00259e6:	81 c9 00 00 01 00    	or     ecx,0x10000
c00259ec:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00259f0:	83 ec 0c             	sub    esp,0xc
c00259f3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00259f6:	e8 05 ff ff ff       	call   c0025900 <APIC::getBase()>
c00259fb:	83 c4 10             	add    esp,0x10
c00259fe:	05 f0 00 00 00       	add    eax,0xf0
c0025a03:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0025a06:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025a09:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a0b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025a0e:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0025a15:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0025a1c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025a1f:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025a22:	89 10                	mov    DWORD PTR [eax],edx
c0025a24:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0025a2b:	a1 d0 ea 02 c0       	mov    eax,ds:0xc002ead0
c0025a30:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0025a33:	7d 7c                	jge    c0025ab1 <APIC::open(int, int, void*)+0x141>
c0025a35:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025a38:	8b 04 85 e0 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1520]
c0025a3f:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0025a42:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025a45:	8b 04 85 e0 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1520]
c0025a4c:	c1 e8 08             	shr    eax,0x8
c0025a4f:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0025a53:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025a56:	8b 04 85 e0 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1520]
c0025a5d:	c1 e8 18             	shr    eax,0x18
c0025a60:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0025a63:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0025a67:	75 40                	jne    c0025aa9 <APIC::open(int, int, void*)+0x139>
c0025a69:	83 ec 0c             	sub    esp,0xc
c0025a6c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025a6f:	e8 8c fe ff ff       	call   c0025900 <APIC::getBase()>
c0025a74:	83 c4 10             	add    esp,0x10
c0025a77:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0025a7b:	75 07                	jne    c0025a84 <APIC::open(int, int, void*)+0x114>
c0025a7d:	ba 60 03 00 00       	mov    edx,0x360
c0025a82:	eb 05                	jmp    c0025a89 <APIC::open(int, int, void*)+0x119>
c0025a84:	ba 50 03 00 00       	mov    edx,0x350
c0025a89:	01 d0                	add    eax,edx
c0025a8b:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025a8e:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025a91:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a93:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0025a96:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0025a9d:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0025aa1:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025aa4:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025aa7:	89 10                	mov    DWORD PTR [eax],edx
c0025aa9:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0025aac:	e9 7a ff ff ff       	jmp    c0025a2b <APIC::open(int, int, void*)+0xbb>
c0025ab1:	b8 00 00 00 00       	mov    eax,0x0
c0025ab6:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025ab9:	5b                   	pop    ebx
c0025aba:	5e                   	pop    esi
c0025abb:	5f                   	pop    edi
c0025abc:	5d                   	pop    ebp
c0025abd:	c3                   	ret    

c0025abe <IOAPIC::IOAPIC()>:
c0025abe:	83 ec 0c             	sub    esp,0xc
c0025ac1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ac5:	83 ec 08             	sub    esp,0x8
c0025ac8:	68 98 cd 02 c0       	push   0xc002cd98
c0025acd:	50                   	push   eax
c0025ace:	e8 db e3 fe ff       	call   c0013eae <Device::Device(char const*)>
c0025ad3:	83 c4 10             	add    esp,0x10
c0025ad6:	ba c0 ce 02 c0       	mov    edx,0xc002cec0
c0025adb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025adf:	89 10                	mov    DWORD PTR [eax],edx
c0025ae1:	90                   	nop
c0025ae2:	83 c4 0c             	add    esp,0xc
c0025ae5:	c3                   	ret    

c0025ae6 <APIC::APIC()>:
c0025ae6:	53                   	push   ebx
c0025ae7:	83 ec 18             	sub    esp,0x18
c0025aea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025aee:	83 ec 08             	sub    esp,0x8
c0025af1:	68 a0 cd 02 c0       	push   0xc002cda0
c0025af6:	50                   	push   eax
c0025af7:	e8 1c eb fe ff       	call   c0014618 <InterruptController::InterruptController(char const*)>
c0025afc:	83 c4 10             	add    esp,0x10
c0025aff:	ba 78 ce 02 c0       	mov    edx,0xc002ce78
c0025b04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025b08:	89 10                	mov    DWORD PTR [eax],edx
c0025b0a:	a0 a0 05 03 c0       	mov    al,ds:0xc00305a0
c0025b0f:	83 f0 01             	xor    eax,0x1
c0025b12:	84 c0                	test   al,al
c0025b14:	0f 84 a1 00 00 00    	je     c0025bbb <APIC::APIC()+0xd5>
c0025b1a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0025b1f:	a0 80 eb 02 c0       	mov    al,ds:0xc002eb80
c0025b24:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0025b28:	0f 83 86 00 00 00    	jae    c0025bb4 <APIC::APIC()+0xce>
c0025b2e:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0025b36:	83 ec 0c             	sub    esp,0xc
c0025b39:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025b3d:	e8 d7 9c fe ff       	call   c000f819 <malloc>
c0025b42:	83 c4 10             	add    esp,0x10
c0025b45:	89 c3                	mov    ebx,eax
c0025b47:	83 ec 0c             	sub    esp,0xc
c0025b4a:	53                   	push   ebx
c0025b4b:	e8 6e ff ff ff       	call   c0025abe <IOAPIC::IOAPIC()>
c0025b50:	83 c4 10             	add    esp,0x10
c0025b53:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0025b57:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0025b5c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025b60:	89 14 85 80 05 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfa80],edx
c0025b67:	a1 60 05 03 c0       	mov    eax,ds:0xc0030560
c0025b6c:	40                   	inc    eax
c0025b6d:	a3 60 05 03 c0       	mov    ds:0xc0030560,eax
c0025b72:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c0025b77:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0025b7d:	83 ec 08             	sub    esp,0x8
c0025b80:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025b84:	50                   	push   eax
c0025b85:	e8 20 e1 fe ff       	call   c0013caa <Device::addChild(Device*)>
c0025b8a:	83 c4 10             	add    esp,0x10
c0025b8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025b91:	8b 00                	mov    eax,DWORD PTR [eax]
c0025b93:	83 c0 08             	add    eax,0x8
c0025b96:	8b 00                	mov    eax,DWORD PTR [eax]
c0025b98:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0025b9d:	6a 00                	push   0x0
c0025b9f:	6a 00                	push   0x0
c0025ba1:	52                   	push   edx
c0025ba2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0025ba6:	ff d0                	call   eax
c0025ba8:	83 c4 10             	add    esp,0x10
c0025bab:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0025baf:	e9 6b ff ff ff       	jmp    c0025b1f <APIC::APIC()+0x39>
c0025bb4:	c6 05 a0 05 03 c0 01 	mov    BYTE PTR ds:0xc00305a0,0x1
c0025bbb:	90                   	nop
c0025bbc:	83 c4 18             	add    esp,0x18
c0025bbf:	5b                   	pop    ebx
c0025bc0:	c3                   	ret    
c0025bc1:	90                   	nop

c0025bc2 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0025bc2:	55                   	push   ebp
c0025bc3:	89 e5                	mov    ebp,esp
c0025bc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025bc8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025bce:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025bd1:	72 1d                	jb     c0025bf0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025bd3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025bd6:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0025bdc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025bdf:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0025be5:	01 d0                	add    eax,edx
c0025be7:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025bea:	73 04                	jae    c0025bf0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025bec:	b0 01                	mov    al,0x1
c0025bee:	eb 02                	jmp    c0025bf2 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025bf0:	b0 00                	mov    al,0x0
c0025bf2:	5d                   	pop    ebp
c0025bf3:	c3                   	ret    

c0025bf4 <IOAPIC::read(int)>:
c0025bf4:	55                   	push   ebp
c0025bf5:	89 e5                	mov    ebp,esp
c0025bf7:	83 ec 10             	sub    esp,0x10
c0025bfa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025bfd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025c03:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025c06:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c09:	0f b6 d0             	movzx  edx,al
c0025c0c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025c0f:	89 10                	mov    DWORD PTR [eax],edx
c0025c11:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025c14:	83 c0 10             	add    eax,0x10
c0025c17:	8b 00                	mov    eax,DWORD PTR [eax]
c0025c19:	c9                   	leave  
c0025c1a:	c3                   	ret    
c0025c1b:	90                   	nop

c0025c1c <IOAPIC::open(int, int, void*)>:
c0025c1c:	55                   	push   ebp
c0025c1d:	89 e5                	mov    ebp,esp
c0025c1f:	57                   	push   edi
c0025c20:	56                   	push   esi
c0025c21:	53                   	push   ebx
c0025c22:	83 ec 0c             	sub    esp,0xc
c0025c25:	83 ec 0c             	sub    esp,0xc
c0025c28:	68 cb cd 02 c0       	push   0xc002cdcb
c0025c2d:	e8 3f cc fe ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c0025c32:	83 c4 10             	add    esp,0x10
c0025c35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c38:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025c3b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025c41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c44:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025c4a:	8b 14 85 c0 eb 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1440]
c0025c51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c54:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025c5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c5d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025c63:	8b 14 85 40 ec 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd13c0]
c0025c6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c6d:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025c73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c76:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025c7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c7f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025c85:	0f b6 f8             	movzx  edi,al
c0025c88:	89 d0                	mov    eax,edx
c0025c8a:	ba 00 00 00 00       	mov    edx,0x0
c0025c8f:	89 c1                	mov    ecx,eax
c0025c91:	80 e5 ff             	and    ch,0xff
c0025c94:	89 cb                	mov    ebx,ecx
c0025c96:	0f b6 f2             	movzx  esi,dl
c0025c99:	89 d8                	mov    eax,ebx
c0025c9b:	89 f2                	mov    edx,esi
c0025c9d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025ca0:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025ca3:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025ca7:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025cab:	83 e0 00             	and    eax,0x0
c0025cae:	09 d0                	or     eax,edx
c0025cb0:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025cb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025cb7:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025cbd:	8d 50 01             	lea    edx,[eax+0x1]
c0025cc0:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025cc3:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025cc9:	0f b6 d0             	movzx  edx,al
c0025ccc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ccf:	83 c2 08             	add    edx,0x8
c0025cd2:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025cd6:	0f b6 c9             	movzx  ecx,cl
c0025cd9:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025cdf:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025ce3:	83 ec 08             	sub    esp,0x8
c0025ce6:	6a 01                	push   0x1
c0025ce8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ceb:	e8 04 ff ff ff       	call   c0025bf4 <IOAPIC::read(int)>
c0025cf0:	83 c4 10             	add    esp,0x10
c0025cf3:	c1 f8 10             	sar    eax,0x10
c0025cf6:	0f b6 c0             	movzx  eax,al
c0025cf9:	8d 50 01             	lea    edx,[eax+0x1]
c0025cfc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025cff:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025d05:	b8 00 00 00 00       	mov    eax,0x0
c0025d0a:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025d0d:	5b                   	pop    ebx
c0025d0e:	5e                   	pop    esi
c0025d0f:	5f                   	pop    edi
c0025d10:	5d                   	pop    ebp
c0025d11:	c3                   	ret    

c0025d12 <IOAPIC::write(int, int)>:
c0025d12:	55                   	push   ebp
c0025d13:	89 e5                	mov    ebp,esp
c0025d15:	83 ec 10             	sub    esp,0x10
c0025d18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025d1b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025d21:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025d24:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d27:	0f b6 d0             	movzx  edx,al
c0025d2a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025d2d:	89 10                	mov    DWORD PTR [eax],edx
c0025d2f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025d32:	8d 50 10             	lea    edx,[eax+0x10]
c0025d35:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025d38:	89 02                	mov    DWORD PTR [edx],eax
c0025d3a:	90                   	nop
c0025d3b:	c9                   	leave  
c0025d3c:	c3                   	ret    
c0025d3d:	90                   	nop

c0025d3e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025d3e:	55                   	push   ebp
c0025d3f:	89 e5                	mov    ebp,esp
c0025d41:	53                   	push   ebx
c0025d42:	83 ec 2c             	sub    esp,0x2c
c0025d45:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d48:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025d4b:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025d4e:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025d51:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025d54:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025d57:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025d5a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025d5d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025d60:	88 d8                	mov    al,bl
c0025d62:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025d65:	88 c8                	mov    al,cl
c0025d67:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025d6a:	88 d0                	mov    al,dl
c0025d6c:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025d6f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025d73:	83 c0 08             	add    eax,0x8
c0025d76:	01 c0                	add    eax,eax
c0025d78:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025d7b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025d7f:	83 c0 08             	add    eax,0x8
c0025d82:	01 c0                	add    eax,eax
c0025d84:	40                   	inc    eax
c0025d85:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025d88:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025d8b:	50                   	push   eax
c0025d8c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d8f:	e8 60 fe ff ff       	call   c0025bf4 <IOAPIC::read(int)>
c0025d94:	83 c4 08             	add    esp,0x8
c0025d97:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025d9a:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025da1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025da4:	c1 e0 18             	shl    eax,0x18
c0025da7:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025daa:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025dad:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025db0:	52                   	push   edx
c0025db1:	50                   	push   eax
c0025db2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025db5:	e8 58 ff ff ff       	call   c0025d12 <IOAPIC::write(int, int)>
c0025dba:	83 c4 0c             	add    esp,0xc
c0025dbd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025dc0:	50                   	push   eax
c0025dc1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025dc4:	e8 2b fe ff ff       	call   c0025bf4 <IOAPIC::read(int)>
c0025dc9:	83 c4 08             	add    esp,0x8
c0025dcc:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025dcf:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025dd6:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025ddd:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025de4:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025de8:	74 09                	je     c0025df3 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025dea:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025df1:	eb 07                	jmp    c0025dfa <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025df3:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0025dfa:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025dfe:	74 09                	je     c0025e09 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025e00:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0025e07:	eb 07                	jmp    c0025e10 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0025e09:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025e10:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0025e17:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0025e1b:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0025e1e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025e21:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025e24:	52                   	push   edx
c0025e25:	50                   	push   eax
c0025e26:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e29:	e8 e4 fe ff ff       	call   c0025d12 <IOAPIC::write(int, int)>
c0025e2e:	83 c4 0c             	add    esp,0xc
c0025e31:	90                   	nop
c0025e32:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025e35:	c9                   	leave  
c0025e36:	c3                   	ret    
c0025e37:	90                   	nop

c0025e38 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025e38:	55                   	push   ebp
c0025e39:	89 e5                	mov    ebp,esp
c0025e3b:	57                   	push   edi
c0025e3c:	56                   	push   esi
c0025e3d:	53                   	push   ebx
c0025e3e:	83 ec 2c             	sub    esp,0x2c
c0025e41:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025e44:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025e47:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025e4b:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025e4f:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025e53:	74 5a                	je     c0025eaf <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025e55:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025e59:	7f 44                	jg     c0025e9f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025e5b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e5e:	05 80 d4 02 c0       	add    eax,0xc002d480
c0025e63:	8a 00                	mov    al,BYTE PTR [eax]
c0025e65:	0f b6 c0             	movzx  eax,al
c0025e68:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025e6b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e6e:	66 8b 84 00 60 eb 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd14a0]
c0025e76:	0f b7 c0             	movzx  eax,ax
c0025e79:	83 e0 02             	and    eax,0x2
c0025e7c:	85 c0                	test   eax,eax
c0025e7e:	74 04                	je     c0025e84 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025e80:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025e84:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e87:	66 8b 84 00 60 eb 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd14a0]
c0025e8f:	0f b7 c0             	movzx  eax,ax
c0025e92:	83 e0 08             	and    eax,0x8
c0025e95:	85 c0                	test   eax,eax
c0025e97:	74 16                	je     c0025eaf <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025e99:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025e9d:	eb 10                	jmp    c0025eaf <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025e9f:	83 ec 0c             	sub    esp,0xc
c0025ea2:	68 dc cd 02 c0       	push   0xc002cddc
c0025ea7:	e8 91 42 ff ff       	call   c001a13d <Krnl::panic(char const*)>
c0025eac:	83 c4 10             	add    esp,0x10
c0025eaf:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025eb3:	a1 60 05 03 c0       	mov    eax,ds:0xc0030560
c0025eb8:	83 ec 08             	sub    esp,0x8
c0025ebb:	50                   	push   eax
c0025ebc:	68 14 ce 02 c0       	push   0xc002ce14
c0025ec1:	e8 ab c9 fe ff       	call   c0012871 <Dbg::kprintf(char const*, ...)>
c0025ec6:	83 c4 10             	add    esp,0x10
c0025ec9:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025ed0:	a1 60 05 03 c0       	mov    eax,ds:0xc0030560
c0025ed5:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025ed8:	7d 67                	jge    c0025f41 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025eda:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025edd:	8b 04 85 80 05 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfa80]
c0025ee4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025ee7:	83 ec 08             	sub    esp,0x8
c0025eea:	52                   	push   edx
c0025eeb:	50                   	push   eax
c0025eec:	e8 d1 fc ff ff       	call   c0025bc2 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025ef1:	83 c4 10             	add    esp,0x10
c0025ef4:	84 c0                	test   al,al
c0025ef6:	74 44                	je     c0025f3c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025ef8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025efb:	8b 1c 85 80 05 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcfa80]
c0025f02:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025f06:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025f09:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025f0d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025f10:	83 c0 20             	add    eax,0x20
c0025f13:	0f b6 f0             	movzx  esi,al
c0025f16:	b8 00 00 00 00       	mov    eax,0x0
c0025f1b:	99                   	cdq    
c0025f1c:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025f1f:	0f b6 c9             	movzx  ecx,cl
c0025f22:	83 ec 04             	sub    esp,0x4
c0025f25:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025f28:	57                   	push   edi
c0025f29:	56                   	push   esi
c0025f2a:	52                   	push   edx
c0025f2b:	50                   	push   eax
c0025f2c:	51                   	push   ecx
c0025f2d:	53                   	push   ebx
c0025f2e:	e8 0b fe ff ff       	call   c0025d3e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025f33:	83 c4 20             	add    esp,0x20
c0025f36:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025f3a:	eb 05                	jmp    c0025f41 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025f3c:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025f3f:	eb 8f                	jmp    c0025ed0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025f41:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025f44:	83 f0 01             	xor    eax,0x1
c0025f47:	84 c0                	test   al,al
c0025f49:	74 10                	je     c0025f5b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025f4b:	83 ec 0c             	sub    esp,0xc
c0025f4e:	68 2b ce 02 c0       	push   0xc002ce2b
c0025f53:	e8 e5 41 ff ff       	call   c001a13d <Krnl::panic(char const*)>
c0025f58:	83 c4 10             	add    esp,0x10
c0025f5b:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025f5f:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025f66:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025f6a:	7f 65                	jg     c0025fd1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025f6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025f6f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025f72:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025f79:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025f7c:	01 ca                	add    edx,ecx
c0025f7e:	83 c2 54             	add    edx,0x54
c0025f81:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025f85:	85 c0                	test   eax,eax
c0025f87:	75 43                	jne    c0025fcc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025f89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025f8c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025f8f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025f96:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025f99:	01 ca                	add    edx,ecx
c0025f9b:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025f9e:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025fa1:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025fa5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025fa8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025fab:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025fb2:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025fb5:	01 ca                	add    edx,ecx
c0025fb7:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025fbd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025fc0:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025fc4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025fc7:	83 e8 20             	sub    eax,0x20
c0025fca:	eb 1a                	jmp    c0025fe6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025fcc:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025fcf:	eb 95                	jmp    c0025f66 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025fd1:	83 ec 0c             	sub    esp,0xc
c0025fd4:	68 38 ce 02 c0       	push   0xc002ce38
c0025fd9:	e8 5f 41 ff ff       	call   c001a13d <Krnl::panic(char const*)>
c0025fde:	83 c4 10             	add    esp,0x10
c0025fe1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025fe6:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025fe9:	5b                   	pop    ebx
c0025fea:	5e                   	pop    esi
c0025feb:	5f                   	pop    edi
c0025fec:	5d                   	pop    ebp
c0025fed:	c3                   	ret    

c0025fee <PIC::disable()>:
c0025fee:	55                   	push   ebp
c0025fef:	89 e5                	mov    ebp,esp
c0025ff1:	83 ec 10             	sub    esp,0x10
c0025ff4:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025ffa:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025ffe:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026001:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026005:	ee                   	out    dx,al
c0026006:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c002600c:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0026010:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0026013:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0026017:	ee                   	out    dx,al
c0026018:	90                   	nop
c0026019:	c9                   	leave  
c002601a:	c3                   	ret    
c002601b:	90                   	nop

c002601c <PIC::close(int, int, void*)>:
c002601c:	55                   	push   ebp
c002601d:	89 e5                	mov    ebp,esp
c002601f:	83 ec 08             	sub    esp,0x8
c0026022:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026025:	8b 00                	mov    eax,DWORD PTR [eax]
c0026027:	83 c0 3c             	add    eax,0x3c
c002602a:	8b 00                	mov    eax,DWORD PTR [eax]
c002602c:	83 ec 0c             	sub    esp,0xc
c002602f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026032:	ff d0                	call   eax
c0026034:	83 c4 10             	add    esp,0x10
c0026037:	b8 00 00 00 00       	mov    eax,0x0
c002603c:	c9                   	leave  
c002603d:	c3                   	ret    

c002603e <PIC::PIC()>:
c002603e:	83 ec 0c             	sub    esp,0xc
c0026041:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026045:	83 ec 08             	sub    esp,0x8
c0026048:	68 e4 ce 02 c0       	push   0xc002cee4
c002604d:	50                   	push   eax
c002604e:	e8 c5 e5 fe ff       	call   c0014618 <InterruptController::InterruptController(char const*)>
c0026053:	83 c4 10             	add    esp,0x10
c0026056:	ba 10 cf 02 c0       	mov    edx,0xc002cf10
c002605b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002605f:	89 10                	mov    DWORD PTR [eax],edx
c0026061:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026065:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002606b:	0f b6 d0             	movzx  edx,al
c002606e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026072:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0026079:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002607d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026083:	0f b6 d0             	movzx  edx,al
c0026086:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002608a:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c002608f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026093:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026099:	8d 50 01             	lea    edx,[eax+0x1]
c002609c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00260a0:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00260a6:	0f b6 d0             	movzx  edx,al
c00260a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260ad:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00260b1:	83 e1 3f             	and    ecx,0x3f
c00260b4:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00260b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260bc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00260c2:	0f b6 d0             	movzx  edx,al
c00260c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260c9:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c00260d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260d4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00260da:	0f b6 d0             	movzx  edx,al
c00260dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260e1:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00260e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260ea:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00260f0:	8d 50 01             	lea    edx,[eax+0x1]
c00260f3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00260f7:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00260fd:	0f b6 d0             	movzx  edx,al
c0026100:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026104:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026108:	83 e1 3f             	and    ecx,0x3f
c002610b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002610f:	90                   	nop
c0026110:	83 c4 0c             	add    esp,0xc
c0026113:	c3                   	ret    

c0026114 <PIC::ioWait()>:
c0026114:	eb 00                	jmp    c0026116 <PIC::ioWait()+0x2>
c0026116:	eb 00                	jmp    c0026118 <PIC::ioWait()+0x4>
c0026118:	90                   	nop
c0026119:	c3                   	ret    

c002611a <PIC::getIRQReg(int)>:
c002611a:	55                   	push   ebp
c002611b:	89 e5                	mov    ebp,esp
c002611d:	83 ec 10             	sub    esp,0x10
c0026120:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026123:	0f b6 c0             	movzx  eax,al
c0026126:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c002612c:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c002612f:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026132:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026136:	ee                   	out    dx,al
c0026137:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002613a:	0f b6 c0             	movzx  eax,al
c002613d:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026143:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0026146:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026149:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002614d:	ee                   	out    dx,al
c002614e:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0026154:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0026158:	89 c2                	mov    edx,eax
c002615a:	ec                   	in     al,dx
c002615b:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c002615e:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026161:	0f b6 c0             	movzx  eax,al
c0026164:	c1 e0 08             	shl    eax,0x8
c0026167:	89 c1                	mov    ecx,eax
c0026169:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c002616f:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0026173:	89 c2                	mov    edx,eax
c0026175:	ec                   	in     al,dx
c0026176:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0026179:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c002617c:	0f b6 c0             	movzx  eax,al
c002617f:	09 c8                	or     eax,ecx
c0026181:	c9                   	leave  
c0026182:	c3                   	ret    
c0026183:	90                   	nop

c0026184 <PIC::eoi(unsigned char)>:
c0026184:	55                   	push   ebp
c0026185:	89 e5                	mov    ebp,esp
c0026187:	83 ec 14             	sub    esp,0x14
c002618a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002618d:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0026190:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026194:	75 1e                	jne    c00261b4 <PIC::eoi(unsigned char)+0x30>
c0026196:	6a 0b                	push   0xb
c0026198:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002619b:	e8 7a ff ff ff       	call   c002611a <PIC::getIRQReg(int)>
c00261a0:	83 c4 08             	add    esp,0x8
c00261a3:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00261a7:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c00261ab:	25 80 00 00 00       	and    eax,0x80
c00261b0:	85 c0                	test   eax,eax
c00261b2:	74 5f                	je     c0026213 <PIC::eoi(unsigned char)+0x8f>
c00261b4:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c00261b8:	75 2d                	jne    c00261e7 <PIC::eoi(unsigned char)+0x63>
c00261ba:	6a 0b                	push   0xb
c00261bc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261bf:	e8 56 ff ff ff       	call   c002611a <PIC::getIRQReg(int)>
c00261c4:	83 c4 08             	add    esp,0x8
c00261c7:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c00261cb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00261ce:	66 85 c0             	test   ax,ax
c00261d1:	78 14                	js     c00261e7 <PIC::eoi(unsigned char)+0x63>
c00261d3:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c00261d9:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c00261dd:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00261e0:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00261e4:	ee                   	out    dx,al
c00261e5:	eb 2d                	jmp    c0026214 <PIC::eoi(unsigned char)+0x90>
c00261e7:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00261eb:	76 12                	jbe    c00261ff <PIC::eoi(unsigned char)+0x7b>
c00261ed:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00261f3:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c00261f7:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00261fa:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00261fe:	ee                   	out    dx,al
c00261ff:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026205:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0026209:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002620c:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026210:	ee                   	out    dx,al
c0026211:	eb 01                	jmp    c0026214 <PIC::eoi(unsigned char)+0x90>
c0026213:	90                   	nop
c0026214:	c9                   	leave  
c0026215:	c3                   	ret    

c0026216 <PIC::remap()>:
c0026216:	55                   	push   ebp
c0026217:	89 e5                	mov    ebp,esp
c0026219:	83 ec 48             	sub    esp,0x48
c002621c:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0026223:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c002622a:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0026230:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0026233:	89 c2                	mov    edx,eax
c0026235:	ec                   	in     al,dx
c0026236:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0026239:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c002623c:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c002623f:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0026245:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0026248:	89 c2                	mov    edx,eax
c002624a:	ec                   	in     al,dx
c002624b:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c002624e:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0026251:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0026254:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c002625a:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c002625e:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0026261:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0026264:	ee                   	out    dx,al
c0026265:	83 ec 0c             	sub    esp,0xc
c0026268:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002626b:	e8 a4 fe ff ff       	call   c0026114 <PIC::ioWait()>
c0026270:	83 c4 10             	add    esp,0x10
c0026273:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0026279:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c002627d:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0026280:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0026283:	ee                   	out    dx,al
c0026284:	83 ec 0c             	sub    esp,0xc
c0026287:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002628a:	e8 85 fe ff ff       	call   c0026114 <PIC::ioWait()>
c002628f:	83 c4 10             	add    esp,0x10
c0026292:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0026295:	0f b6 c0             	movzx  eax,al
c0026298:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c002629e:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c00262a1:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c00262a4:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00262a7:	ee                   	out    dx,al
c00262a8:	83 ec 0c             	sub    esp,0xc
c00262ab:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00262ae:	e8 61 fe ff ff       	call   c0026114 <PIC::ioWait()>
c00262b3:	83 c4 10             	add    esp,0x10
c00262b6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00262b9:	0f b6 c0             	movzx  eax,al
c00262bc:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c00262c2:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c00262c5:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c00262c8:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00262cb:	ee                   	out    dx,al
c00262cc:	83 ec 0c             	sub    esp,0xc
c00262cf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00262d2:	e8 3d fe ff ff       	call   c0026114 <PIC::ioWait()>
c00262d7:	83 c4 10             	add    esp,0x10
c00262da:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c00262e0:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c00262e4:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c00262e7:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c00262ea:	ee                   	out    dx,al
c00262eb:	83 ec 0c             	sub    esp,0xc
c00262ee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00262f1:	e8 1e fe ff ff       	call   c0026114 <PIC::ioWait()>
c00262f6:	83 c4 10             	add    esp,0x10
c00262f9:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c00262ff:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0026303:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0026306:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026309:	ee                   	out    dx,al
c002630a:	83 ec 0c             	sub    esp,0xc
c002630d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026310:	e8 ff fd ff ff       	call   c0026114 <PIC::ioWait()>
c0026315:	83 c4 10             	add    esp,0x10
c0026318:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c002631e:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0026322:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0026325:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0026328:	ee                   	out    dx,al
c0026329:	83 ec 0c             	sub    esp,0xc
c002632c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002632f:	e8 e0 fd ff ff       	call   c0026114 <PIC::ioWait()>
c0026334:	83 c4 10             	add    esp,0x10
c0026337:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c002633d:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0026341:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0026344:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026347:	ee                   	out    dx,al
c0026348:	83 ec 0c             	sub    esp,0xc
c002634b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002634e:	e8 c1 fd ff ff       	call   c0026114 <PIC::ioWait()>
c0026353:	83 c4 10             	add    esp,0x10
c0026356:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c002635a:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0026360:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0026363:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0026366:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026369:	ee                   	out    dx,al
c002636a:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c002636e:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0026374:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0026377:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c002637a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002637d:	ee                   	out    dx,al
c002637e:	90                   	nop
c002637f:	c9                   	leave  
c0026380:	c3                   	ret    
c0026381:	90                   	nop

c0026382 <PIC::open(int, int, void*)>:
c0026382:	55                   	push   ebp
c0026383:	89 e5                	mov    ebp,esp
c0026385:	83 ec 18             	sub    esp,0x18
c0026388:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c002638e:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0026392:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026395:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026399:	ee                   	out    dx,al
c002639a:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c00263a0:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c00263a4:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00263a7:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00263ab:	ee                   	out    dx,al
c00263ac:	83 ec 0c             	sub    esp,0xc
c00263af:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00263b2:	e8 5f fe ff ff       	call   c0026216 <PIC::remap()>
c00263b7:	83 c4 10             	add    esp,0x10
c00263ba:	b8 00 00 00 00       	mov    eax,0x0
c00263bf:	c9                   	leave  
c00263c0:	c3                   	ret    
c00263c1:	90                   	nop

c00263c2 <APICTimer::close(int, int, void*)>:
c00263c2:	b8 00 00 00 00       	mov    eax,0x0
c00263c7:	c3                   	ret    

c00263c8 <apicTimerHandler(regs*, void*)>:
c00263c8:	83 ec 0c             	sub    esp,0xc
c00263cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00263cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00263d1:	99                   	cdq    
c00263d2:	52                   	push   edx
c00263d3:	50                   	push   eax
c00263d4:	6a 00                	push   0x0
c00263d6:	68 00 ca 9a 3b       	push   0x3b9aca00
c00263db:	e8 94 07 00 00       	call   c0026b74 <__udivdi3>
c00263e0:	83 c4 10             	add    esp,0x10
c00263e3:	83 ec 08             	sub    esp,0x8
c00263e6:	52                   	push   edx
c00263e7:	50                   	push   eax
c00263e8:	e8 88 03 ff ff       	call   c0016775 <timerHandler(unsigned long long)>
c00263ed:	83 c4 10             	add    esp,0x10
c00263f0:	90                   	nop
c00263f1:	83 c4 0c             	add    esp,0xc
c00263f4:	c3                   	ret    
c00263f5:	90                   	nop

c00263f6 <APICTimer::write(int)>:
c00263f6:	53                   	push   ebx
c00263f7:	83 ec 28             	sub    esp,0x28
c00263fa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00263fe:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0026402:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026408:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c002640d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026413:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026419:	83 ec 0c             	sub    esp,0xc
c002641c:	50                   	push   eax
c002641d:	e8 de f4 ff ff       	call   c0025900 <APIC::getBase()>
c0026422:	83 c4 10             	add    esp,0x10
c0026425:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0026429:	a1 90 e8 02 c0       	mov    eax,ds:0xc002e890
c002642e:	8b 15 94 e8 02 c0    	mov    edx,DWORD PTR ds:0xc002e894
c0026434:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0026438:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002643c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026440:	05 e0 03 00 00       	add    eax,0x3e0
c0026445:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c002644b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002644f:	05 80 03 00 00       	add    eax,0x380
c0026454:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c002645a:	fb                   	sti    
c002645b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002645f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026463:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0026468:	83 d2 00             	adc    edx,0x0
c002646b:	89 c1                	mov    ecx,eax
c002646d:	89 d3                	mov    ebx,edx
c002646f:	a1 90 e8 02 c0       	mov    eax,ds:0xc002e890
c0026474:	8b 15 94 e8 02 c0    	mov    edx,DWORD PTR ds:0xc002e894
c002647a:	39 c8                	cmp    eax,ecx
c002647c:	89 d0                	mov    eax,edx
c002647e:	19 d8                	sbb    eax,ebx
c0026480:	73 02                	jae    c0026484 <APICTimer::write(int)+0x8e>
c0026482:	eb d7                	jmp    c002645b <APICTimer::write(int)+0x65>
c0026484:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026488:	05 20 03 00 00       	add    eax,0x320
c002648d:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0026493:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026497:	05 90 03 00 00       	add    eax,0x390
c002649c:	8b 00                	mov    eax,DWORD PTR [eax]
c002649e:	f7 d0                	not    eax
c00264a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00264a4:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00264a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00264ac:	ba 00 00 00 00       	mov    edx,0x0
c00264b1:	f7 f3                	div    ebx
c00264b3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00264b7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00264bb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00264c1:	0d 00 00 02 00       	or     eax,0x20000
c00264c6:	89 c2                	mov    edx,eax
c00264c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00264cc:	05 20 03 00 00       	add    eax,0x320
c00264d1:	89 10                	mov    DWORD PTR [eax],edx
c00264d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00264d7:	05 e0 03 00 00       	add    eax,0x3e0
c00264dc:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00264e2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00264e6:	05 80 03 00 00       	add    eax,0x380
c00264eb:	89 c2                	mov    edx,eax
c00264ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00264f1:	89 02                	mov    DWORD PTR [edx],eax
c00264f3:	90                   	nop
c00264f4:	83 c4 28             	add    esp,0x28
c00264f7:	5b                   	pop    ebx
c00264f8:	c3                   	ret    
c00264f9:	90                   	nop

c00264fa <APICTimer::open(int, int, void*)>:
c00264fa:	57                   	push   edi
c00264fb:	56                   	push   esi
c00264fc:	53                   	push   ebx
c00264fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026501:	8b 00                	mov    eax,DWORD PTR [eax]
c0026503:	83 c0 24             	add    eax,0x24
c0026506:	8b 00                	mov    eax,DWORD PTR [eax]
c0026508:	83 ec 08             	sub    esp,0x8
c002650b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002650f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026513:	ff d0                	call   eax
c0026515:	83 c4 10             	add    esp,0x10
c0026518:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c002651d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026523:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026529:	83 ec 0c             	sub    esp,0xc
c002652c:	50                   	push   eax
c002652d:	e8 ce f3 ff ff       	call   c0025900 <APIC::getBase()>
c0026532:	83 c4 10             	add    esp,0x10
c0026535:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c002653b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002653f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026545:	0f b6 f8             	movzx  edi,al
c0026548:	89 d0                	mov    eax,edx
c002654a:	ba 00 00 00 00       	mov    edx,0x0
c002654f:	89 c1                	mov    ecx,eax
c0026551:	80 e5 ff             	and    ch,0xff
c0026554:	89 cb                	mov    ebx,ecx
c0026556:	0f b6 f2             	movzx  esi,dl
c0026559:	89 d8                	mov    eax,ebx
c002655b:	89 f2                	mov    edx,esi
c002655d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026561:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026564:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026568:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002656c:	83 e0 00             	and    eax,0x0
c002656f:	09 d0                	or     eax,edx
c0026571:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026575:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026579:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002657f:	8d 50 01             	lea    edx,[eax+0x1]
c0026582:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026586:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002658c:	0f b6 d0             	movzx  edx,al
c002658f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026593:	83 c2 08             	add    edx,0x8
c0026596:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002659a:	0f b6 c9             	movzx  ecx,cl
c002659d:	81 c9 00 00 01 00    	or     ecx,0x10000
c00265a3:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00265a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265ab:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00265af:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00265b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265b9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00265bd:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c00265c3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00265c7:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00265cd:	83 ec 0c             	sub    esp,0xc
c00265d0:	51                   	push   ecx
c00265d1:	6a 01                	push   0x1
c00265d3:	68 c8 63 02 c0       	push   0xc00263c8
c00265d8:	52                   	push   edx
c00265d9:	50                   	push   eax
c00265da:	e8 43 d6 fe ff       	call   c0013c22 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00265df:	83 c4 20             	add    esp,0x20
c00265e2:	89 c2                	mov    edx,eax
c00265e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265e8:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00265ee:	b8 00 00 00 00       	mov    eax,0x0
c00265f3:	5b                   	pop    ebx
c00265f4:	5e                   	pop    esi
c00265f5:	5f                   	pop    edi
c00265f6:	c3                   	ret    
c00265f7:	90                   	nop

c00265f8 <APICTimer::APICTimer()>:
c00265f8:	83 ec 0c             	sub    esp,0xc
c00265fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265ff:	83 ec 08             	sub    esp,0x8
c0026602:	68 50 cf 02 c0       	push   0xc002cf50
c0026607:	50                   	push   eax
c0026608:	e8 d9 00 ff ff       	call   c00166e6 <Timer::Timer(char const*)>
c002660d:	83 c4 10             	add    esp,0x10
c0026610:	ba 64 cf 02 c0       	mov    edx,0xc002cf64
c0026615:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026619:	89 10                	mov    DWORD PTR [eax],edx
c002661b:	90                   	nop
c002661c:	83 c4 0c             	add    esp,0xc
c002661f:	c3                   	ret    

c0026620 <PIT::write(int)>:
c0026620:	83 ec 10             	sub    esp,0x10
c0026623:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026627:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002662b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026631:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0026635:	a3 a4 05 03 c0       	mov    ds:0xc00305a4,eax
c002663a:	b8 dc 34 12 00       	mov    eax,0x1234dc
c002663f:	99                   	cdq    
c0026640:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0026644:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026648:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c002664f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0026654:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0026658:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c002665d:	ee                   	out    dx,al
c002665e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026662:	0f b6 c0             	movzx  eax,al
c0026665:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c002666c:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0026670:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0026674:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0026679:	ee                   	out    dx,al
c002667a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002667e:	c1 f8 08             	sar    eax,0x8
c0026681:	0f b6 c0             	movzx  eax,al
c0026684:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c002668b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002668f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0026693:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0026698:	ee                   	out    dx,al
c0026699:	90                   	nop
c002669a:	83 c4 10             	add    esp,0x10
c002669d:	c3                   	ret    

c002669e <pitHandler(regs*, void*)>:
c002669e:	83 ec 0c             	sub    esp,0xc
c00266a1:	a1 a4 05 03 c0       	mov    eax,ds:0xc00305a4
c00266a6:	99                   	cdq    
c00266a7:	52                   	push   edx
c00266a8:	50                   	push   eax
c00266a9:	6a 00                	push   0x0
c00266ab:	68 00 ca 9a 3b       	push   0x3b9aca00
c00266b0:	e8 bf 04 00 00       	call   c0026b74 <__udivdi3>
c00266b5:	83 c4 10             	add    esp,0x10
c00266b8:	83 ec 08             	sub    esp,0x8
c00266bb:	52                   	push   edx
c00266bc:	50                   	push   eax
c00266bd:	e8 b3 00 ff ff       	call   c0016775 <timerHandler(unsigned long long)>
c00266c2:	83 c4 10             	add    esp,0x10
c00266c5:	90                   	nop
c00266c6:	83 c4 0c             	add    esp,0xc
c00266c9:	c3                   	ret    

c00266ca <PIT::open(int, int, void*)>:
c00266ca:	83 ec 0c             	sub    esp,0xc
c00266cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00266d3:	83 c0 24             	add    eax,0x24
c00266d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00266d8:	83 ec 08             	sub    esp,0x8
c00266db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00266df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00266e3:	ff d0                	call   eax
c00266e5:	83 c4 10             	add    esp,0x10
c00266e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266ec:	83 ec 0c             	sub    esp,0xc
c00266ef:	6a 00                	push   0x0
c00266f1:	6a 01                	push   0x1
c00266f3:	68 9e 66 02 c0       	push   0xc002669e
c00266f8:	6a 00                	push   0x0
c00266fa:	50                   	push   eax
c00266fb:	e8 22 d5 fe ff       	call   c0013c22 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026700:	83 c4 20             	add    esp,0x20
c0026703:	89 c2                	mov    edx,eax
c0026705:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026709:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002670f:	b8 00 00 00 00       	mov    eax,0x0
c0026714:	83 c4 0c             	add    esp,0xc
c0026717:	c3                   	ret    

c0026718 <PIT::close(int, int, void*)>:
c0026718:	83 ec 0c             	sub    esp,0xc
c002671b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002671f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0026729:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002672d:	6a 01                	push   0x1
c002672f:	68 9e 66 02 c0       	push   0xc002669e
c0026734:	6a 00                	push   0x0
c0026736:	50                   	push   eax
c0026737:	e8 30 d5 fe ff       	call   c0013c6c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c002673c:	83 c4 10             	add    esp,0x10
c002673f:	b8 00 00 00 00       	mov    eax,0x0
c0026744:	83 c4 0c             	add    esp,0xc
c0026747:	c3                   	ret    

c0026748 <PIT::PIT()>:
c0026748:	83 ec 0c             	sub    esp,0xc
c002674b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002674f:	83 ec 08             	sub    esp,0x8
c0026752:	68 8c cf 02 c0       	push   0xc002cf8c
c0026757:	50                   	push   eax
c0026758:	e8 89 ff fe ff       	call   c00166e6 <Timer::Timer(char const*)>
c002675d:	83 c4 10             	add    esp,0x10
c0026760:	ba b4 cf 02 c0       	mov    edx,0xc002cfb4
c0026765:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026769:	89 10                	mov    DWORD PTR [eax],edx
c002676b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002676f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026775:	0f b6 d0             	movzx  edx,al
c0026778:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002677c:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0026783:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026787:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002678d:	0f b6 d0             	movzx  edx,al
c0026790:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026794:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0026799:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002679d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00267a3:	8d 50 01             	lea    edx,[eax+0x1]
c00267a6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00267aa:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00267b0:	0f b6 d0             	movzx  edx,al
c00267b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267b7:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00267bb:	83 e1 3f             	and    ecx,0x3f
c00267be:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00267c2:	90                   	nop
c00267c3:	83 c4 0c             	add    esp,0xc
c00267c6:	c3                   	ret    
c00267c7:	66 90                	xchg   ax,ax
c00267c9:	66 90                	xchg   ax,ax
c00267cb:	66 90                	xchg   ax,ax
c00267cd:	66 90                	xchg   ax,ax
c00267cf:	90                   	nop

c00267d0 <avxDetect>:
c00267d0:	b8 00 00 00 00       	mov    eax,0x0
c00267d5:	c3                   	ret    

c00267d6 <avxSave>:
c00267d6:	c3                   	ret    

c00267d7 <avxLoad>:
c00267d7:	c3                   	ret    

c00267d8 <avxInit>:
c00267d8:	c3                   	ret    

c00267d9 <avxClose>:
c00267d9:	c3                   	ret    

c00267da <wouldSheSayYes>:
c00267da:	c3                   	ret    
c00267db:	49                   	dec    ecx
c00267dc:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c00267e0:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c00267e4:	75 20                	jne    c0026806 <sseDetect.noSSE+0x1>
c00267e6:	4e                   	dec    esi
c00267e7:	79 61                	jns    c002684a <x87Detect+0x14>
c00267e9:	68 2e 2e 2e 00       	push   0x2e2e2e
c00267ee:	66 90                	xchg   ax,ax

c00267f0 <absolutelyNoChanceInHell>:
c00267f0:	b8 01 00 00 00       	mov    eax,0x1
c00267f5:	0f a2                	cpuid  
c00267f7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c00267fd:	74 06                	je     c0026805 <sseDetect.noSSE>
c00267ff:	b8 01 00 00 00       	mov    eax,0x1
c0026804:	c3                   	ret    

c0026805 <sseDetect.noSSE>:
c0026805:	31 c0                	xor    eax,eax
c0026807:	c3                   	ret    

c0026808 <sseSave>:
c0026808:	0f ae 44 24 04       	fxsave [esp+0x4]
c002680d:	c3                   	ret    

c002680e <sseLoad>:
c002680e:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0026813:	c3                   	ret    

c0026814 <sseInit>:
c0026814:	e8 49 00 00 00       	call   c0026862 <x87Init>
c0026819:	0f 20 e0             	mov    eax,cr4
c002681c:	66 0d 00 06          	or     ax,0x600
c0026820:	0f 22 e0             	mov    cr4,eax
c0026823:	c3                   	ret    

c0026824 <sseClose>:
c0026824:	c3                   	ret    
c0026825:	66 90                	xchg   ax,ax
c0026827:	66 90                	xchg   ax,ax
c0026829:	66 90                	xchg   ax,ax
c002682b:	66 90                	xchg   ax,ax
c002682d:	66 90                	xchg   ax,ax
c002682f:	90                   	nop

c0026830 <value_37F>:
c0026830:	7f 03                	jg     c0026835 <value_37A+0x1>

c0026832 <value_37E>:
c0026832:	7e 03                	jle    c0026837 <x87Detect+0x1>

c0026834 <value_37A>:
c0026834:	7a 03                	jp     c0026839 <x87Detect+0x3>

c0026836 <x87Detect>:
c0026836:	b8 01 00 00 00       	mov    eax,0x1
c002683b:	0f a2                	cpuid  
c002683d:	f7 c2 01 00 00 00    	test   edx,0x1
c0026843:	74 06                	je     c002684b <x87Detect.nox87>
c0026845:	b8 01 00 00 00       	mov    eax,0x1
c002684a:	c3                   	ret    

c002684b <x87Detect.nox87>:
c002684b:	b8 00 00 00 00       	mov    eax,0x0
c0026850:	c3                   	ret    

c0026851 <x87Save>:
c0026851:	55                   	push   ebp
c0026852:	89 e5                	mov    ebp,esp
c0026854:	9b dd 75 08          	fsave  [ebp+0x8]
c0026858:	c9                   	leave  
c0026859:	c3                   	ret    

c002685a <x87Load>:
c002685a:	55                   	push   ebp
c002685b:	89 e5                	mov    ebp,esp
c002685d:	dd 65 08             	frstor [ebp+0x8]
c0026860:	c9                   	leave  
c0026861:	c3                   	ret    

c0026862 <x87Init>:
c0026862:	9b db e3             	finit  
c0026865:	0f 20 c0             	mov    eax,cr0
c0026868:	66 25 fb ff          	and    ax,0xfffb
c002686c:	66 0d 22 00          	or     ax,0x22
c0026870:	0f 22 c0             	mov    cr0,eax
c0026873:	0f 06                	clts   
c0026875:	d9 2d 34 68 02 c0    	fldcw  WORD PTR ds:0xc0026834
c002687b:	c3                   	ret    

c002687c <x87Close>:
c002687c:	c3                   	ret    
c002687d:	66 90                	xchg   ax,ax
c002687f:	90                   	nop

c0026880 <__do_global_ctors_aux>:
c0026880:	a1 74 94 02 c0       	mov    eax,ds:0xc0029474
c0026885:	83 f8 ff             	cmp    eax,0xffffffff
c0026888:	74 1a                	je     c00268a4 <__do_global_ctors_aux+0x24>
c002688a:	55                   	push   ebp
c002688b:	89 e5                	mov    ebp,esp
c002688d:	53                   	push   ebx
c002688e:	52                   	push   edx
c002688f:	bb 74 94 02 c0       	mov    ebx,0xc0029474
c0026894:	ff d0                	call   eax
c0026896:	83 eb 04             	sub    ebx,0x4
c0026899:	8b 03                	mov    eax,DWORD PTR [ebx]
c002689b:	83 f8 ff             	cmp    eax,0xffffffff
c002689e:	75 f4                	jne    c0026894 <__do_global_ctors_aux+0x14>
c00268a0:	58                   	pop    eax
c00268a1:	5b                   	pop    ebx
c00268a2:	5d                   	pop    ebp
c00268a3:	c3                   	ret    
c00268a4:	c3                   	ret    
c00268a5:	66 90                	xchg   ax,ax
c00268a7:	90                   	nop

c00268a8 <__divdi3>:
c00268a8:	55                   	push   ebp
c00268a9:	57                   	push   edi
c00268aa:	56                   	push   esi
c00268ab:	53                   	push   ebx
c00268ac:	83 ec 1c             	sub    esp,0x1c
c00268af:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00268b3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00268b7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00268ba:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00268be:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00268c2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00268c6:	85 db                	test   ebx,ebx
c00268c8:	0f 88 8e 00 00 00    	js     c002695c <__divdi3+0xb4>
c00268ce:	89 dd                	mov    ebp,ebx
c00268d0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00268d8:	89 d3                	mov    ebx,edx
c00268da:	85 d2                	test   edx,edx
c00268dc:	79 0d                	jns    c00268eb <__divdi3+0x43>
c00268de:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c00268e2:	f7 d8                	neg    eax
c00268e4:	83 d2 00             	adc    edx,0x0
c00268e7:	f7 da                	neg    edx
c00268e9:	89 d3                	mov    ebx,edx
c00268eb:	89 c7                	mov    edi,eax
c00268ed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00268f0:	85 db                	test   ebx,ebx
c00268f2:	75 48                	jne    c002693c <__divdi3+0x94>
c00268f4:	39 ef                	cmp    edi,ebp
c00268f6:	76 24                	jbe    c002691c <__divdi3+0x74>
c00268f8:	89 ea                	mov    edx,ebp
c00268fa:	f7 f7                	div    edi
c00268fc:	89 c1                	mov    ecx,eax
c00268fe:	31 f6                	xor    esi,esi
c0026900:	89 c8                	mov    eax,ecx
c0026902:	89 f2                	mov    edx,esi
c0026904:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026908:	85 c9                	test   ecx,ecx
c002690a:	74 07                	je     c0026913 <__divdi3+0x6b>
c002690c:	f7 d8                	neg    eax
c002690e:	83 d2 00             	adc    edx,0x0
c0026911:	f7 da                	neg    edx
c0026913:	83 c4 1c             	add    esp,0x1c
c0026916:	5b                   	pop    ebx
c0026917:	5e                   	pop    esi
c0026918:	5f                   	pop    edi
c0026919:	5d                   	pop    ebp
c002691a:	c3                   	ret    
c002691b:	90                   	nop
c002691c:	85 ff                	test   edi,edi
c002691e:	75 0b                	jne    c002692b <__divdi3+0x83>
c0026920:	b8 01 00 00 00       	mov    eax,0x1
c0026925:	31 d2                	xor    edx,edx
c0026927:	f7 f3                	div    ebx
c0026929:	89 c7                	mov    edi,eax
c002692b:	31 d2                	xor    edx,edx
c002692d:	89 e8                	mov    eax,ebp
c002692f:	f7 f7                	div    edi
c0026931:	89 c6                	mov    esi,eax
c0026933:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026936:	f7 f7                	div    edi
c0026938:	89 c1                	mov    ecx,eax
c002693a:	eb c4                	jmp    c0026900 <__divdi3+0x58>
c002693c:	39 eb                	cmp    ebx,ebp
c002693e:	77 3c                	ja     c002697c <__divdi3+0xd4>
c0026940:	0f bd f3             	bsr    esi,ebx
c0026943:	83 f6 1f             	xor    esi,0x1f
c0026946:	75 40                	jne    c0026988 <__divdi3+0xe0>
c0026948:	39 eb                	cmp    ebx,ebp
c002694a:	72 09                	jb     c0026955 <__divdi3+0xad>
c002694c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002694f:	0f 87 97 00 00 00    	ja     c00269ec <__divdi3+0x144>
c0026955:	b9 01 00 00 00       	mov    ecx,0x1
c002695a:	eb a4                	jmp    c0026900 <__divdi3+0x58>
c002695c:	f7 d9                	neg    ecx
c002695e:	83 d3 00             	adc    ebx,0x0
c0026961:	f7 db                	neg    ebx
c0026963:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026966:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002696a:	89 dd                	mov    ebp,ebx
c002696c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0026974:	e9 5f ff ff ff       	jmp    c00268d8 <__divdi3+0x30>
c0026979:	8d 76 00             	lea    esi,[esi+0x0]
c002697c:	31 f6                	xor    esi,esi
c002697e:	31 c9                	xor    ecx,ecx
c0026980:	e9 7b ff ff ff       	jmp    c0026900 <__divdi3+0x58>
c0026985:	8d 76 00             	lea    esi,[esi+0x0]
c0026988:	b8 20 00 00 00       	mov    eax,0x20
c002698d:	29 f0                	sub    eax,esi
c002698f:	89 f1                	mov    ecx,esi
c0026991:	d3 e3                	shl    ebx,cl
c0026993:	89 fa                	mov    edx,edi
c0026995:	88 c1                	mov    cl,al
c0026997:	d3 ea                	shr    edx,cl
c0026999:	09 da                	or     edx,ebx
c002699b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002699f:	89 f1                	mov    ecx,esi
c00269a1:	d3 e7                	shl    edi,cl
c00269a3:	89 eb                	mov    ebx,ebp
c00269a5:	88 c1                	mov    cl,al
c00269a7:	d3 eb                	shr    ebx,cl
c00269a9:	89 f1                	mov    ecx,esi
c00269ab:	d3 e5                	shl    ebp,cl
c00269ad:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00269b0:	88 c1                	mov    cl,al
c00269b2:	d3 ea                	shr    edx,cl
c00269b4:	09 d5                	or     ebp,edx
c00269b6:	89 e8                	mov    eax,ebp
c00269b8:	89 da                	mov    edx,ebx
c00269ba:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00269be:	89 d3                	mov    ebx,edx
c00269c0:	89 c5                	mov    ebp,eax
c00269c2:	f7 e7                	mul    edi
c00269c4:	39 d3                	cmp    ebx,edx
c00269c6:	72 18                	jb     c00269e0 <__divdi3+0x138>
c00269c8:	74 0a                	je     c00269d4 <__divdi3+0x12c>
c00269ca:	89 e9                	mov    ecx,ebp
c00269cc:	31 f6                	xor    esi,esi
c00269ce:	e9 2d ff ff ff       	jmp    c0026900 <__divdi3+0x58>
c00269d3:	90                   	nop
c00269d4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00269d7:	89 f1                	mov    ecx,esi
c00269d9:	d3 e7                	shl    edi,cl
c00269db:	39 c7                	cmp    edi,eax
c00269dd:	73 eb                	jae    c00269ca <__divdi3+0x122>
c00269df:	90                   	nop
c00269e0:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00269e3:	31 f6                	xor    esi,esi
c00269e5:	e9 16 ff ff ff       	jmp    c0026900 <__divdi3+0x58>
c00269ea:	66 90                	xchg   ax,ax
c00269ec:	31 c9                	xor    ecx,ecx
c00269ee:	e9 0d ff ff ff       	jmp    c0026900 <__divdi3+0x58>
c00269f3:	90                   	nop

c00269f4 <__moddi3>:
c00269f4:	55                   	push   ebp
c00269f5:	57                   	push   edi
c00269f6:	56                   	push   esi
c00269f7:	53                   	push   ebx
c00269f8:	83 ec 2c             	sub    esp,0x2c
c00269fb:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00269ff:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0026a03:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0026a07:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0026a0b:	85 db                	test   ebx,ebx
c0026a0d:	0f 88 85 00 00 00    	js     c0026a98 <__moddi3+0xa4>
c0026a13:	89 de                	mov    esi,ebx
c0026a15:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0026a1d:	89 d7                	mov    edi,edx
c0026a1f:	85 d2                	test   edx,edx
c0026a21:	79 09                	jns    c0026a2c <__moddi3+0x38>
c0026a23:	f7 d8                	neg    eax
c0026a25:	83 d2 00             	adc    edx,0x0
c0026a28:	f7 da                	neg    edx
c0026a2a:	89 d7                	mov    edi,edx
c0026a2c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026a30:	89 cd                	mov    ebp,ecx
c0026a32:	85 ff                	test   edi,edi
c0026a34:	75 52                	jne    c0026a88 <__moddi3+0x94>
c0026a36:	89 c3                	mov    ebx,eax
c0026a38:	39 f0                	cmp    eax,esi
c0026a3a:	76 24                	jbe    c0026a60 <__moddi3+0x6c>
c0026a3c:	89 c8                	mov    eax,ecx
c0026a3e:	89 f2                	mov    edx,esi
c0026a40:	f7 f3                	div    ebx
c0026a42:	89 d6                	mov    esi,edx
c0026a44:	89 f0                	mov    eax,esi
c0026a46:	31 d2                	xor    edx,edx
c0026a48:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026a4c:	85 c9                	test   ecx,ecx
c0026a4e:	74 07                	je     c0026a57 <__moddi3+0x63>
c0026a50:	f7 d8                	neg    eax
c0026a52:	83 d2 00             	adc    edx,0x0
c0026a55:	f7 da                	neg    edx
c0026a57:	83 c4 2c             	add    esp,0x2c
c0026a5a:	5b                   	pop    ebx
c0026a5b:	5e                   	pop    esi
c0026a5c:	5f                   	pop    edi
c0026a5d:	5d                   	pop    ebp
c0026a5e:	c3                   	ret    
c0026a5f:	90                   	nop
c0026a60:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0026a64:	85 db                	test   ebx,ebx
c0026a66:	75 0d                	jne    c0026a75 <__moddi3+0x81>
c0026a68:	b8 01 00 00 00       	mov    eax,0x1
c0026a6d:	31 d2                	xor    edx,edx
c0026a6f:	f7 f7                	div    edi
c0026a71:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026a75:	89 f0                	mov    eax,esi
c0026a77:	31 d2                	xor    edx,edx
c0026a79:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026a7d:	f7 f7                	div    edi
c0026a7f:	89 e8                	mov    eax,ebp
c0026a81:	f7 f7                	div    edi
c0026a83:	89 d6                	mov    esi,edx
c0026a85:	eb bd                	jmp    c0026a44 <__moddi3+0x50>
c0026a87:	90                   	nop
c0026a88:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026a8c:	39 f7                	cmp    edi,esi
c0026a8e:	76 20                	jbe    c0026ab0 <__moddi3+0xbc>
c0026a90:	89 c8                	mov    eax,ecx
c0026a92:	89 f2                	mov    edx,esi
c0026a94:	eb b2                	jmp    c0026a48 <__moddi3+0x54>
c0026a96:	66 90                	xchg   ax,ax
c0026a98:	f7 d9                	neg    ecx
c0026a9a:	83 d3 00             	adc    ebx,0x0
c0026a9d:	f7 db                	neg    ebx
c0026a9f:	89 de                	mov    esi,ebx
c0026aa1:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0026aa9:	e9 6f ff ff ff       	jmp    c0026a1d <__moddi3+0x29>
c0026aae:	66 90                	xchg   ax,ax
c0026ab0:	0f bd c7             	bsr    eax,edi
c0026ab3:	83 f0 1f             	xor    eax,0x1f
c0026ab6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0026aba:	75 24                	jne    c0026ae0 <__moddi3+0xec>
c0026abc:	39 f7                	cmp    edi,esi
c0026abe:	72 06                	jb     c0026ac6 <__moddi3+0xd2>
c0026ac0:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0026ac4:	77 0c                	ja     c0026ad2 <__moddi3+0xde>
c0026ac6:	89 e9                	mov    ecx,ebp
c0026ac8:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0026acc:	19 fe                	sbb    esi,edi
c0026ace:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026ad2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026ad6:	89 f2                	mov    edx,esi
c0026ad8:	e9 6b ff ff ff       	jmp    c0026a48 <__moddi3+0x54>
c0026add:	8d 76 00             	lea    esi,[esi+0x0]
c0026ae0:	b8 20 00 00 00       	mov    eax,0x20
c0026ae5:	89 c2                	mov    edx,eax
c0026ae7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0026aeb:	29 da                	sub    edx,ebx
c0026aed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0026af1:	88 d9                	mov    cl,bl
c0026af3:	d3 e7                	shl    edi,cl
c0026af5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026af9:	88 d1                	mov    cl,dl
c0026afb:	d3 e8                	shr    eax,cl
c0026afd:	09 c7                	or     edi,eax
c0026aff:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0026b03:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026b07:	89 d8                	mov    eax,ebx
c0026b09:	88 d9                	mov    cl,bl
c0026b0b:	d3 e7                	shl    edi,cl
c0026b0d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026b11:	89 f3                	mov    ebx,esi
c0026b13:	88 d1                	mov    cl,dl
c0026b15:	d3 eb                	shr    ebx,cl
c0026b17:	89 c7                	mov    edi,eax
c0026b19:	88 c1                	mov    cl,al
c0026b1b:	d3 e6                	shl    esi,cl
c0026b1d:	89 e8                	mov    eax,ebp
c0026b1f:	88 d1                	mov    cl,dl
c0026b21:	d3 e8                	shr    eax,cl
c0026b23:	09 f0                	or     eax,esi
c0026b25:	89 f9                	mov    ecx,edi
c0026b27:	d3 e5                	shl    ebp,cl
c0026b29:	89 da                	mov    edx,ebx
c0026b2b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0026b2f:	89 d3                	mov    ebx,edx
c0026b31:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026b35:	89 c6                	mov    esi,eax
c0026b37:	89 d1                	mov    ecx,edx
c0026b39:	39 d3                	cmp    ebx,edx
c0026b3b:	72 27                	jb     c0026b64 <__moddi3+0x170>
c0026b3d:	74 21                	je     c0026b60 <__moddi3+0x16c>
c0026b3f:	29 f5                	sub    ebp,esi
c0026b41:	19 cb                	sbb    ebx,ecx
c0026b43:	89 de                	mov    esi,ebx
c0026b45:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026b49:	d3 e6                	shl    esi,cl
c0026b4b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0026b4f:	89 f9                	mov    ecx,edi
c0026b51:	d3 ed                	shr    ebp,cl
c0026b53:	09 ee                	or     esi,ebp
c0026b55:	89 f0                	mov    eax,esi
c0026b57:	d3 eb                	shr    ebx,cl
c0026b59:	89 da                	mov    edx,ebx
c0026b5b:	e9 e8 fe ff ff       	jmp    c0026a48 <__moddi3+0x54>
c0026b60:	39 c5                	cmp    ebp,eax
c0026b62:	73 db                	jae    c0026b3f <__moddi3+0x14b>
c0026b64:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026b68:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0026b6c:	89 d1                	mov    ecx,edx
c0026b6e:	89 c6                	mov    esi,eax
c0026b70:	eb cd                	jmp    c0026b3f <__moddi3+0x14b>
c0026b72:	66 90                	xchg   ax,ax

c0026b74 <__udivdi3>:
c0026b74:	55                   	push   ebp
c0026b75:	57                   	push   edi
c0026b76:	56                   	push   esi
c0026b77:	53                   	push   ebx
c0026b78:	83 ec 1c             	sub    esp,0x1c
c0026b7b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0026b7f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0026b83:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026b87:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026b8b:	85 d2                	test   edx,edx
c0026b8d:	75 41                	jne    c0026bd0 <__udivdi3+0x5c>
c0026b8f:	39 f7                	cmp    edi,esi
c0026b91:	76 15                	jbe    c0026ba8 <__udivdi3+0x34>
c0026b93:	89 e8                	mov    eax,ebp
c0026b95:	89 f2                	mov    edx,esi
c0026b97:	f7 f7                	div    edi
c0026b99:	31 db                	xor    ebx,ebx
c0026b9b:	89 da                	mov    edx,ebx
c0026b9d:	83 c4 1c             	add    esp,0x1c
c0026ba0:	5b                   	pop    ebx
c0026ba1:	5e                   	pop    esi
c0026ba2:	5f                   	pop    edi
c0026ba3:	5d                   	pop    ebp
c0026ba4:	c3                   	ret    
c0026ba5:	8d 76 00             	lea    esi,[esi+0x0]
c0026ba8:	89 f9                	mov    ecx,edi
c0026baa:	85 ff                	test   edi,edi
c0026bac:	75 0b                	jne    c0026bb9 <__udivdi3+0x45>
c0026bae:	b8 01 00 00 00       	mov    eax,0x1
c0026bb3:	31 d2                	xor    edx,edx
c0026bb5:	f7 f7                	div    edi
c0026bb7:	89 c1                	mov    ecx,eax
c0026bb9:	31 d2                	xor    edx,edx
c0026bbb:	89 f0                	mov    eax,esi
c0026bbd:	f7 f1                	div    ecx
c0026bbf:	89 c3                	mov    ebx,eax
c0026bc1:	89 e8                	mov    eax,ebp
c0026bc3:	f7 f1                	div    ecx
c0026bc5:	89 da                	mov    edx,ebx
c0026bc7:	83 c4 1c             	add    esp,0x1c
c0026bca:	5b                   	pop    ebx
c0026bcb:	5e                   	pop    esi
c0026bcc:	5f                   	pop    edi
c0026bcd:	5d                   	pop    ebp
c0026bce:	c3                   	ret    
c0026bcf:	90                   	nop
c0026bd0:	39 f2                	cmp    edx,esi
c0026bd2:	77 1c                	ja     c0026bf0 <__udivdi3+0x7c>
c0026bd4:	0f bd da             	bsr    ebx,edx
c0026bd7:	83 f3 1f             	xor    ebx,0x1f
c0026bda:	75 24                	jne    c0026c00 <__udivdi3+0x8c>
c0026bdc:	39 f2                	cmp    edx,esi
c0026bde:	72 08                	jb     c0026be8 <__udivdi3+0x74>
c0026be0:	39 ef                	cmp    edi,ebp
c0026be2:	0f 87 84 00 00 00    	ja     c0026c6c <__udivdi3+0xf8>
c0026be8:	b8 01 00 00 00       	mov    eax,0x1
c0026bed:	eb ac                	jmp    c0026b9b <__udivdi3+0x27>
c0026bef:	90                   	nop
c0026bf0:	31 db                	xor    ebx,ebx
c0026bf2:	31 c0                	xor    eax,eax
c0026bf4:	89 da                	mov    edx,ebx
c0026bf6:	83 c4 1c             	add    esp,0x1c
c0026bf9:	5b                   	pop    ebx
c0026bfa:	5e                   	pop    esi
c0026bfb:	5f                   	pop    edi
c0026bfc:	5d                   	pop    ebp
c0026bfd:	c3                   	ret    
c0026bfe:	66 90                	xchg   ax,ax
c0026c00:	b8 20 00 00 00       	mov    eax,0x20
c0026c05:	29 d8                	sub    eax,ebx
c0026c07:	88 d9                	mov    cl,bl
c0026c09:	d3 e2                	shl    edx,cl
c0026c0b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0026c0f:	89 fa                	mov    edx,edi
c0026c11:	88 c1                	mov    cl,al
c0026c13:	d3 ea                	shr    edx,cl
c0026c15:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026c19:	09 d1                	or     ecx,edx
c0026c1b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026c1f:	88 d9                	mov    cl,bl
c0026c21:	d3 e7                	shl    edi,cl
c0026c23:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026c27:	89 f7                	mov    edi,esi
c0026c29:	88 c1                	mov    cl,al
c0026c2b:	d3 ef                	shr    edi,cl
c0026c2d:	88 d9                	mov    cl,bl
c0026c2f:	d3 e6                	shl    esi,cl
c0026c31:	89 ea                	mov    edx,ebp
c0026c33:	88 c1                	mov    cl,al
c0026c35:	d3 ea                	shr    edx,cl
c0026c37:	09 d6                	or     esi,edx
c0026c39:	89 f0                	mov    eax,esi
c0026c3b:	89 fa                	mov    edx,edi
c0026c3d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026c41:	89 d7                	mov    edi,edx
c0026c43:	89 c6                	mov    esi,eax
c0026c45:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026c49:	39 d7                	cmp    edi,edx
c0026c4b:	72 13                	jb     c0026c60 <__udivdi3+0xec>
c0026c4d:	74 09                	je     c0026c58 <__udivdi3+0xe4>
c0026c4f:	89 f0                	mov    eax,esi
c0026c51:	31 db                	xor    ebx,ebx
c0026c53:	e9 43 ff ff ff       	jmp    c0026b9b <__udivdi3+0x27>
c0026c58:	88 d9                	mov    cl,bl
c0026c5a:	d3 e5                	shl    ebp,cl
c0026c5c:	39 c5                	cmp    ebp,eax
c0026c5e:	73 ef                	jae    c0026c4f <__udivdi3+0xdb>
c0026c60:	8d 46 ff             	lea    eax,[esi-0x1]
c0026c63:	31 db                	xor    ebx,ebx
c0026c65:	e9 31 ff ff ff       	jmp    c0026b9b <__udivdi3+0x27>
c0026c6a:	66 90                	xchg   ax,ax
c0026c6c:	31 c0                	xor    eax,eax
c0026c6e:	e9 28 ff ff ff       	jmp    c0026b9b <__udivdi3+0x27>
c0026c73:	90                   	nop

c0026c74 <__umoddi3>:
c0026c74:	55                   	push   ebp
c0026c75:	57                   	push   edi
c0026c76:	56                   	push   esi
c0026c77:	53                   	push   ebx
c0026c78:	83 ec 1c             	sub    esp,0x1c
c0026c7b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0026c7f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026c83:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026c87:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026c8b:	89 da                	mov    edx,ebx
c0026c8d:	85 c0                	test   eax,eax
c0026c8f:	75 37                	jne    c0026cc8 <__umoddi3+0x54>
c0026c91:	39 df                	cmp    edi,ebx
c0026c93:	76 13                	jbe    c0026ca8 <__umoddi3+0x34>
c0026c95:	89 f0                	mov    eax,esi
c0026c97:	f7 f7                	div    edi
c0026c99:	89 d0                	mov    eax,edx
c0026c9b:	31 d2                	xor    edx,edx
c0026c9d:	83 c4 1c             	add    esp,0x1c
c0026ca0:	5b                   	pop    ebx
c0026ca1:	5e                   	pop    esi
c0026ca2:	5f                   	pop    edi
c0026ca3:	5d                   	pop    ebp
c0026ca4:	c3                   	ret    
c0026ca5:	8d 76 00             	lea    esi,[esi+0x0]
c0026ca8:	89 fd                	mov    ebp,edi
c0026caa:	85 ff                	test   edi,edi
c0026cac:	75 0b                	jne    c0026cb9 <__umoddi3+0x45>
c0026cae:	b8 01 00 00 00       	mov    eax,0x1
c0026cb3:	31 d2                	xor    edx,edx
c0026cb5:	f7 f7                	div    edi
c0026cb7:	89 c5                	mov    ebp,eax
c0026cb9:	89 d8                	mov    eax,ebx
c0026cbb:	31 d2                	xor    edx,edx
c0026cbd:	f7 f5                	div    ebp
c0026cbf:	89 f0                	mov    eax,esi
c0026cc1:	f7 f5                	div    ebp
c0026cc3:	89 d0                	mov    eax,edx
c0026cc5:	eb d4                	jmp    c0026c9b <__umoddi3+0x27>
c0026cc7:	90                   	nop
c0026cc8:	89 f1                	mov    ecx,esi
c0026cca:	39 d8                	cmp    eax,ebx
c0026ccc:	76 0a                	jbe    c0026cd8 <__umoddi3+0x64>
c0026cce:	89 f0                	mov    eax,esi
c0026cd0:	83 c4 1c             	add    esp,0x1c
c0026cd3:	5b                   	pop    ebx
c0026cd4:	5e                   	pop    esi
c0026cd5:	5f                   	pop    edi
c0026cd6:	5d                   	pop    ebp
c0026cd7:	c3                   	ret    
c0026cd8:	0f bd e8             	bsr    ebp,eax
c0026cdb:	83 f5 1f             	xor    ebp,0x1f
c0026cde:	75 1c                	jne    c0026cfc <__umoddi3+0x88>
c0026ce0:	39 d8                	cmp    eax,ebx
c0026ce2:	72 04                	jb     c0026ce8 <__umoddi3+0x74>
c0026ce4:	39 f7                	cmp    edi,esi
c0026ce6:	77 08                	ja     c0026cf0 <__umoddi3+0x7c>
c0026ce8:	89 da                	mov    edx,ebx
c0026cea:	29 fe                	sub    esi,edi
c0026cec:	19 c2                	sbb    edx,eax
c0026cee:	89 f1                	mov    ecx,esi
c0026cf0:	89 c8                	mov    eax,ecx
c0026cf2:	83 c4 1c             	add    esp,0x1c
c0026cf5:	5b                   	pop    ebx
c0026cf6:	5e                   	pop    esi
c0026cf7:	5f                   	pop    edi
c0026cf8:	5d                   	pop    ebp
c0026cf9:	c3                   	ret    
c0026cfa:	66 90                	xchg   ax,ax
c0026cfc:	ba 20 00 00 00       	mov    edx,0x20
c0026d01:	29 ea                	sub    edx,ebp
c0026d03:	89 e9                	mov    ecx,ebp
c0026d05:	d3 e0                	shl    eax,cl
c0026d07:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026d0b:	89 f8                	mov    eax,edi
c0026d0d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026d11:	88 d1                	mov    cl,dl
c0026d13:	d3 e8                	shr    eax,cl
c0026d15:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026d19:	09 c1                	or     ecx,eax
c0026d1b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026d1f:	89 e9                	mov    ecx,ebp
c0026d21:	d3 e7                	shl    edi,cl
c0026d23:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026d27:	89 d8                	mov    eax,ebx
c0026d29:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026d2d:	88 d1                	mov    cl,dl
c0026d2f:	d3 e8                	shr    eax,cl
c0026d31:	89 c7                	mov    edi,eax
c0026d33:	89 e9                	mov    ecx,ebp
c0026d35:	d3 e3                	shl    ebx,cl
c0026d37:	89 f0                	mov    eax,esi
c0026d39:	88 d1                	mov    cl,dl
c0026d3b:	d3 e8                	shr    eax,cl
c0026d3d:	09 d8                	or     eax,ebx
c0026d3f:	89 e9                	mov    ecx,ebp
c0026d41:	d3 e6                	shl    esi,cl
c0026d43:	89 f3                	mov    ebx,esi
c0026d45:	89 fa                	mov    edx,edi
c0026d47:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026d4b:	89 d1                	mov    ecx,edx
c0026d4d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026d51:	89 c6                	mov    esi,eax
c0026d53:	89 d7                	mov    edi,edx
c0026d55:	39 d1                	cmp    ecx,edx
c0026d57:	72 27                	jb     c0026d80 <__umoddi3+0x10c>
c0026d59:	74 21                	je     c0026d7c <__umoddi3+0x108>
c0026d5b:	89 ca                	mov    edx,ecx
c0026d5d:	29 f3                	sub    ebx,esi
c0026d5f:	19 fa                	sbb    edx,edi
c0026d61:	89 d0                	mov    eax,edx
c0026d63:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026d67:	d3 e0                	shl    eax,cl
c0026d69:	89 e9                	mov    ecx,ebp
c0026d6b:	d3 eb                	shr    ebx,cl
c0026d6d:	09 d8                	or     eax,ebx
c0026d6f:	d3 ea                	shr    edx,cl
c0026d71:	83 c4 1c             	add    esp,0x1c
c0026d74:	5b                   	pop    ebx
c0026d75:	5e                   	pop    esi
c0026d76:	5f                   	pop    edi
c0026d77:	5d                   	pop    ebp
c0026d78:	c3                   	ret    
c0026d79:	8d 76 00             	lea    esi,[esi+0x0]
c0026d7c:	39 c3                	cmp    ebx,eax
c0026d7e:	73 db                	jae    c0026d5b <__umoddi3+0xe7>
c0026d80:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026d84:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026d88:	89 d7                	mov    edi,edx
c0026d8a:	89 c6                	mov    esi,eax
c0026d8c:	eb cd                	jmp    c0026d5b <__umoddi3+0xe7>

c0026d8e <__addsf3>:
c0026d8e:	55                   	push   ebp
c0026d8f:	89 e5                	mov    ebp,esp
c0026d91:	57                   	push   edi
c0026d92:	56                   	push   esi
c0026d93:	53                   	push   ebx
c0026d94:	83 ec 08             	sub    esp,0x8
c0026d97:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026d9a:	89 fa                	mov    edx,edi
c0026d9c:	89 f8                	mov    eax,edi
c0026d9e:	c1 f8 17             	sar    eax,0x17
c0026da1:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026da4:	c1 e2 08             	shl    edx,0x8
c0026da7:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026dad:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026db0:	89 de                	mov    esi,ebx
c0026db2:	c1 fe 17             	sar    esi,0x17
c0026db5:	c1 e3 08             	shl    ebx,0x8
c0026db8:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026dbe:	31 f0                	xor    eax,esi
c0026dc0:	0f 88 3b 01 00 00    	js     c0026f01 <__addsf3+0x173>
c0026dc6:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026dc9:	29 f1                	sub    ecx,esi
c0026dcb:	85 c9                	test   ecx,ecx
c0026dcd:	7e 54                	jle    c0026e23 <__addsf3+0x95>
c0026dcf:	89 f0                	mov    eax,esi
c0026dd1:	84 c0                	test   al,al
c0026dd3:	75 10                	jne    c0026de5 <__addsf3+0x57>
c0026dd5:	85 db                	test   ebx,ebx
c0026dd7:	0f 84 aa 02 00 00    	je     c0027087 <__addsf3+0x2f9>
c0026ddd:	49                   	dec    ecx
c0026dde:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026de1:	74 38                	je     c0026e1b <__addsf3+0x8d>
c0026de3:	eb 13                	jmp    c0026df8 <__addsf3+0x6a>
c0026de5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026de8:	f7 d0                	not    eax
c0026dea:	84 c0                	test   al,al
c0026dec:	0f 84 95 02 00 00    	je     c0027087 <__addsf3+0x2f9>
c0026df2:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026df8:	83 f9 1f             	cmp    ecx,0x1f
c0026dfb:	0f 8f 86 02 00 00    	jg     c0027087 <__addsf3+0x2f9>
c0026e01:	89 de                	mov    esi,ebx
c0026e03:	d3 ee                	shr    esi,cl
c0026e05:	b8 20 00 00 00       	mov    eax,0x20
c0026e0a:	29 c8                	sub    eax,ecx
c0026e0c:	89 c1                	mov    ecx,eax
c0026e0e:	d3 e3                	shl    ebx,cl
c0026e10:	31 c0                	xor    eax,eax
c0026e12:	85 db                	test   ebx,ebx
c0026e14:	0f 95 c0             	setne  al
c0026e17:	09 f0                	or     eax,esi
c0026e19:	01 d0                	add    eax,edx
c0026e1b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026e1e:	e9 b6 00 00 00       	jmp    c0026ed9 <__addsf3+0x14b>
c0026e23:	74 5c                	je     c0026e81 <__addsf3+0xf3>
c0026e25:	89 f1                	mov    ecx,esi
c0026e27:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026e2a:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026e2d:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026e31:	75 14                	jne    c0026e47 <__addsf3+0xb9>
c0026e33:	85 d2                	test   edx,edx
c0026e35:	0f 84 4c 02 00 00    	je     c0027087 <__addsf3+0x2f9>
c0026e3b:	49                   	dec    ecx
c0026e3c:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026e3f:	0f 84 94 00 00 00    	je     c0026ed9 <__addsf3+0x14b>
c0026e45:	eb 12                	jmp    c0026e59 <__addsf3+0xcb>
c0026e47:	89 f0                	mov    eax,esi
c0026e49:	f7 d0                	not    eax
c0026e4b:	84 c0                	test   al,al
c0026e4d:	0f 84 34 02 00 00    	je     c0027087 <__addsf3+0x2f9>
c0026e53:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026e59:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026e5c:	83 f9 1f             	cmp    ecx,0x1f
c0026e5f:	0f 8f 22 02 00 00    	jg     c0027087 <__addsf3+0x2f9>
c0026e65:	89 d7                	mov    edi,edx
c0026e67:	d3 ef                	shr    edi,cl
c0026e69:	b8 20 00 00 00       	mov    eax,0x20
c0026e6e:	29 c8                	sub    eax,ecx
c0026e70:	89 c1                	mov    ecx,eax
c0026e72:	d3 e2                	shl    edx,cl
c0026e74:	31 c0                	xor    eax,eax
c0026e76:	85 d2                	test   edx,edx
c0026e78:	0f 95 c0             	setne  al
c0026e7b:	09 f8                	or     eax,edi
c0026e7d:	01 d8                	add    eax,ebx
c0026e7f:	eb 58                	jmp    c0026ed9 <__addsf3+0x14b>
c0026e81:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026e84:	8d 70 01             	lea    esi,[eax+0x1]
c0026e87:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026e8d:	75 32                	jne    c0026ec1 <__addsf3+0x133>
c0026e8f:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026e93:	75 1f                	jne    c0026eb4 <__addsf3+0x126>
c0026e95:	85 d2                	test   edx,edx
c0026e97:	0f 84 e0 01 00 00    	je     c002707d <__addsf3+0x2ef>
c0026e9d:	85 db                	test   ebx,ebx
c0026e9f:	0f 84 e2 01 00 00    	je     c0027087 <__addsf3+0x2f9>
c0026ea5:	89 d0                	mov    eax,edx
c0026ea7:	01 d8                	add    eax,ebx
c0026ea9:	0f 89 a9 01 00 00    	jns    c0027058 <__addsf3+0x2ca>
c0026eaf:	e9 9d 01 00 00       	jmp    c0027051 <__addsf3+0x2c3>
c0026eb4:	85 d2                	test   edx,edx
c0026eb6:	0f 85 cb 01 00 00    	jne    c0027087 <__addsf3+0x2f9>
c0026ebc:	e9 bc 01 00 00       	jmp    c002707d <__addsf3+0x2ef>
c0026ec1:	31 c0                	xor    eax,eax
c0026ec3:	89 f1                	mov    ecx,esi
c0026ec5:	f7 d1                	not    ecx
c0026ec7:	84 c9                	test   cl,cl
c0026ec9:	0f 84 90 01 00 00    	je     c002705f <__addsf3+0x2d1>
c0026ecf:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026ed2:	d1 e8                	shr    eax,1
c0026ed4:	e9 86 01 00 00       	jmp    c002705f <__addsf3+0x2d1>
c0026ed9:	85 c0                	test   eax,eax
c0026edb:	0f 89 7e 01 00 00    	jns    c002705f <__addsf3+0x2d1>
c0026ee1:	46                   	inc    esi
c0026ee2:	89 f2                	mov    edx,esi
c0026ee4:	f7 d2                	not    edx
c0026ee6:	84 d2                	test   dl,dl
c0026ee8:	0f 84 6f 01 00 00    	je     c002705d <__addsf3+0x2cf>
c0026eee:	89 c2                	mov    edx,eax
c0026ef0:	83 e2 01             	and    edx,0x1
c0026ef3:	d1 e8                	shr    eax,1
c0026ef5:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026efa:	09 d0                	or     eax,edx
c0026efc:	e9 5e 01 00 00       	jmp    c002705f <__addsf3+0x2d1>
c0026f01:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026f05:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026f08:	89 f0                	mov    eax,esi
c0026f0a:	0f b6 c0             	movzx  eax,al
c0026f0d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026f10:	29 c1                	sub    ecx,eax
c0026f12:	85 c9                	test   ecx,ecx
c0026f14:	7e 55                	jle    c0026f6b <__addsf3+0x1dd>
c0026f16:	85 c0                	test   eax,eax
c0026f18:	75 11                	jne    c0026f2b <__addsf3+0x19d>
c0026f1a:	85 db                	test   ebx,ebx
c0026f1c:	0f 84 65 01 00 00    	je     c0027087 <__addsf3+0x2f9>
c0026f22:	49                   	dec    ecx
c0026f23:	75 19                	jne    c0026f3e <__addsf3+0x1b0>
c0026f25:	89 d0                	mov    eax,edx
c0026f27:	29 d8                	sub    eax,ebx
c0026f29:	eb 38                	jmp    c0026f63 <__addsf3+0x1d5>
c0026f2b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026f2e:	f7 d0                	not    eax
c0026f30:	84 c0                	test   al,al
c0026f32:	0f 84 4f 01 00 00    	je     c0027087 <__addsf3+0x2f9>
c0026f38:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026f3e:	83 f9 1f             	cmp    ecx,0x1f
c0026f41:	0f 8f 40 01 00 00    	jg     c0027087 <__addsf3+0x2f9>
c0026f47:	89 de                	mov    esi,ebx
c0026f49:	d3 ee                	shr    esi,cl
c0026f4b:	b8 20 00 00 00       	mov    eax,0x20
c0026f50:	29 c8                	sub    eax,ecx
c0026f52:	89 c1                	mov    ecx,eax
c0026f54:	d3 e3                	shl    ebx,cl
c0026f56:	31 c0                	xor    eax,eax
c0026f58:	85 db                	test   ebx,ebx
c0026f5a:	0f 95 c0             	setne  al
c0026f5d:	09 f0                	or     eax,esi
c0026f5f:	29 c2                	sub    edx,eax
c0026f61:	89 d0                	mov    eax,edx
c0026f63:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026f66:	e9 af 00 00 00       	jmp    c002701a <__addsf3+0x28c>
c0026f6b:	74 5c                	je     c0026fc9 <__addsf3+0x23b>
c0026f6d:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026f70:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026f73:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026f77:	75 14                	jne    c0026f8d <__addsf3+0x1ff>
c0026f79:	85 d2                	test   edx,edx
c0026f7b:	0f 84 06 01 00 00    	je     c0027087 <__addsf3+0x2f9>
c0026f81:	48                   	dec    eax
c0026f82:	75 1b                	jne    c0026f9f <__addsf3+0x211>
c0026f84:	89 d8                	mov    eax,ebx
c0026f86:	29 d0                	sub    eax,edx
c0026f88:	e9 8d 00 00 00       	jmp    c002701a <__addsf3+0x28c>
c0026f8d:	89 f1                	mov    ecx,esi
c0026f8f:	f7 d1                	not    ecx
c0026f91:	84 c9                	test   cl,cl
c0026f93:	0f 84 ee 00 00 00    	je     c0027087 <__addsf3+0x2f9>
c0026f99:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026f9f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026fa2:	83 f8 1f             	cmp    eax,0x1f
c0026fa5:	0f 8f dc 00 00 00    	jg     c0027087 <__addsf3+0x2f9>
c0026fab:	89 d7                	mov    edi,edx
c0026fad:	88 c1                	mov    cl,al
c0026faf:	d3 ef                	shr    edi,cl
c0026fb1:	b9 20 00 00 00       	mov    ecx,0x20
c0026fb6:	29 c1                	sub    ecx,eax
c0026fb8:	d3 e2                	shl    edx,cl
c0026fba:	31 c0                	xor    eax,eax
c0026fbc:	85 d2                	test   edx,edx
c0026fbe:	0f 95 c0             	setne  al
c0026fc1:	09 f8                	or     eax,edi
c0026fc3:	29 c3                	sub    ebx,eax
c0026fc5:	89 d8                	mov    eax,ebx
c0026fc7:	eb 51                	jmp    c002701a <__addsf3+0x28c>
c0026fc9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026fcc:	40                   	inc    eax
c0026fcd:	a8 fe                	test   al,0xfe
c0026fcf:	75 3d                	jne    c002700e <__addsf3+0x280>
c0026fd1:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026fd5:	0f 85 a7 00 00 00    	jne    c0027082 <__addsf3+0x2f4>
c0026fdb:	85 d2                	test   edx,edx
c0026fdd:	75 12                	jne    c0026ff1 <__addsf3+0x263>
c0026fdf:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026fe2:	85 db                	test   ebx,ebx
c0026fe4:	0f 85 9d 00 00 00    	jne    c0027087 <__addsf3+0x2f9>
c0026fea:	31 ff                	xor    edi,edi
c0026fec:	e9 96 00 00 00       	jmp    c0027087 <__addsf3+0x2f9>
c0026ff1:	85 db                	test   ebx,ebx
c0026ff3:	0f 84 8e 00 00 00    	je     c0027087 <__addsf3+0x2f9>
c0026ff9:	89 d0                	mov    eax,edx
c0026ffb:	29 d8                	sub    eax,ebx
c0026ffd:	79 06                	jns    c0027005 <__addsf3+0x277>
c0026fff:	89 d8                	mov    eax,ebx
c0027001:	29 d0                	sub    eax,edx
c0027003:	eb 5a                	jmp    c002705f <__addsf3+0x2d1>
c0027005:	bf 00 00 00 00       	mov    edi,0x0
c002700a:	74 7b                	je     c0027087 <__addsf3+0x2f9>
c002700c:	eb 4a                	jmp    c0027058 <__addsf3+0x2ca>
c002700e:	89 d0                	mov    eax,edx
c0027010:	29 d8                	sub    eax,ebx
c0027012:	79 12                	jns    c0027026 <__addsf3+0x298>
c0027014:	89 d8                	mov    eax,ebx
c0027016:	29 d0                	sub    eax,edx
c0027018:	eb 09                	jmp    c0027023 <__addsf3+0x295>
c002701a:	85 c0                	test   eax,eax
c002701c:	79 41                	jns    c002705f <__addsf3+0x2d1>
c002701e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027023:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0027026:	31 f6                	xor    esi,esi
c0027028:	85 c0                	test   eax,eax
c002702a:	74 33                	je     c002705f <__addsf3+0x2d1>
c002702c:	0f bd c8             	bsr    ecx,eax
c002702f:	83 f1 1f             	xor    ecx,0x1f
c0027032:	d3 e0                	shl    eax,cl
c0027034:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0027038:	39 ca                	cmp    edx,ecx
c002703a:	7f 10                	jg     c002704c <__addsf3+0x2be>
c002703c:	29 d1                	sub    ecx,edx
c002703e:	41                   	inc    ecx
c002703f:	d3 e8                	shr    eax,cl
c0027041:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027044:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c002704a:	eb 13                	jmp    c002705f <__addsf3+0x2d1>
c002704c:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002704f:	29 ce                	sub    esi,ecx
c0027051:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027056:	eb 07                	jmp    c002705f <__addsf3+0x2d1>
c0027058:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002705b:	eb 02                	jmp    c002705f <__addsf3+0x2d1>
c002705d:	31 c0                	xor    eax,eax
c002705f:	89 c2                	mov    edx,eax
c0027061:	c1 ea 08             	shr    edx,0x8
c0027064:	a8 7f                	test   al,0x7f
c0027066:	0f 95 c1             	setne  cl
c0027069:	09 d1                	or     ecx,edx
c002706b:	83 e1 01             	and    ecx,0x1
c002706e:	c1 e8 07             	shr    eax,0x7
c0027071:	21 c8                	and    eax,ecx
c0027073:	c1 e6 17             	shl    esi,0x17
c0027076:	09 d6                	or     esi,edx
c0027078:	8d 3c 30             	lea    edi,[eax+esi*1]
c002707b:	eb 0a                	jmp    c0027087 <__addsf3+0x2f9>
c002707d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027080:	eb 05                	jmp    c0027087 <__addsf3+0x2f9>
c0027082:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0027087:	89 f8                	mov    eax,edi
c0027089:	5a                   	pop    edx
c002708a:	59                   	pop    ecx
c002708b:	5b                   	pop    ebx
c002708c:	5e                   	pop    esi
c002708d:	5f                   	pop    edi
c002708e:	5d                   	pop    ebp
c002708f:	c3                   	ret    

c0027090 <__subsf3>:
c0027090:	55                   	push   ebp
c0027091:	89 e5                	mov    ebp,esp
c0027093:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027096:	05 00 00 00 80       	add    eax,0x80000000
c002709b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c002709e:	5d                   	pop    ebp
c002709f:	e9 ea fc ff ff       	jmp    c0026d8e <__addsf3>

c00270a4 <__negsf2>:
c00270a4:	55                   	push   ebp
c00270a5:	89 e5                	mov    ebp,esp
c00270a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00270aa:	05 00 00 00 80       	add    eax,0x80000000
c00270af:	5d                   	pop    ebp
c00270b0:	c3                   	ret    

c00270b1 <__mulsf3>:
c00270b1:	55                   	push   ebp
c00270b2:	89 e5                	mov    ebp,esp
c00270b4:	57                   	push   edi
c00270b5:	56                   	push   esi
c00270b6:	53                   	push   ebx
c00270b7:	83 ec 1c             	sub    esp,0x1c
c00270ba:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00270bd:	89 f0                	mov    eax,esi
c00270bf:	89 f1                	mov    ecx,esi
c00270c1:	c1 f9 17             	sar    ecx,0x17
c00270c4:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00270c7:	c1 e0 08             	shl    eax,0x8
c00270ca:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00270cf:	89 c1                	mov    ecx,eax
c00270d1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00270d4:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00270d7:	89 c7                	mov    edi,eax
c00270d9:	c1 ff 17             	sar    edi,0x17
c00270dc:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00270e0:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00270e3:	89 f8                	mov    eax,edi
c00270e5:	0f b6 c0             	movzx  eax,al
c00270e8:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00270eb:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c00270ef:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00270f2:	42                   	inc    edx
c00270f3:	80 e2 fe             	and    dl,0xfe
c00270f6:	75 7b                	jne    c0027173 <__mulsf3+0xc2>
c00270f8:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00270fc:	74 54                	je     c0027152 <__mulsf3+0xa1>
c00270fe:	85 c9                	test   ecx,ecx
c0027100:	0f 85 64 01 00 00    	jne    c002726a <__mulsf3+0x1b9>
c0027106:	8d 57 01             	lea    edx,[edi+0x1]
c0027109:	80 e2 fe             	and    dl,0xfe
c002710c:	75 1f                	jne    c002712d <__mulsf3+0x7c>
c002710e:	85 c0                	test   eax,eax
c0027110:	b8 00 00 00 00       	mov    eax,0x0
c0027115:	74 29                	je     c0027140 <__mulsf3+0x8f>
c0027117:	53                   	push   ebx
c0027118:	53                   	push   ebx
c0027119:	50                   	push   eax
c002711a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002711d:	e8 96 05 00 00       	call   c00276b8 <__nesf2>
c0027122:	83 c4 10             	add    esp,0x10
c0027125:	85 c0                	test   eax,eax
c0027127:	0f 85 3a 01 00 00    	jne    c0027267 <__mulsf3+0x1b6>
c002712d:	85 ff                	test   edi,edi
c002712f:	0f 89 35 01 00 00    	jns    c002726a <__mulsf3+0x1b9>
c0027135:	81 c6 00 00 00 80    	add    esi,0x80000000
c002713b:	e9 2a 01 00 00       	jmp    c002726a <__mulsf3+0x1b9>
c0027140:	51                   	push   ecx
c0027141:	51                   	push   ecx
c0027142:	50                   	push   eax
c0027143:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027146:	e8 6d 05 00 00       	call   c00276b8 <__nesf2>
c002714b:	83 c4 10             	add    esp,0x10
c002714e:	85 c0                	test   eax,eax
c0027150:	eb 15                	jmp    c0027167 <__mulsf3+0xb6>
c0027152:	85 c9                	test   ecx,ecx
c0027154:	74 0b                	je     c0027161 <__mulsf3+0xb0>
c0027156:	8d 53 ff             	lea    edx,[ebx-0x1]
c0027159:	01 c9                	add    ecx,ecx
c002715b:	78 16                	js     c0027173 <__mulsf3+0xc2>
c002715d:	89 d3                	mov    ebx,edx
c002715f:	eb f5                	jmp    c0027156 <__mulsf3+0xa5>
c0027161:	89 f8                	mov    eax,edi
c0027163:	f7 d0                	not    eax
c0027165:	84 c0                	test   al,al
c0027167:	75 c4                	jne    c002712d <__mulsf3+0x7c>
c0027169:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c002716e:	e9 f7 00 00 00       	jmp    c002726a <__mulsf3+0x1b9>
c0027173:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027176:	c1 e6 08             	shl    esi,0x8
c0027179:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c002717f:	8d 57 01             	lea    edx,[edi+0x1]
c0027182:	80 e2 fe             	and    dl,0xfe
c0027185:	75 63                	jne    c00271ea <__mulsf3+0x139>
c0027187:	85 c0                	test   eax,eax
c0027189:	74 2f                	je     c00271ba <__mulsf3+0x109>
c002718b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c002718f:	0f 89 d2 00 00 00    	jns    c0027267 <__mulsf3+0x1b6>
c0027195:	52                   	push   edx
c0027196:	52                   	push   edx
c0027197:	6a 00                	push   0x0
c0027199:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002719c:	e8 dc 04 00 00       	call   c002767d <__eqsf2>
c00271a1:	83 c4 10             	add    esp,0x10
c00271a4:	85 c0                	test   eax,eax
c00271a6:	0f 85 bb 00 00 00    	jne    c0027267 <__mulsf3+0x1b6>
c00271ac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00271af:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c00271b5:	e9 b0 00 00 00       	jmp    c002726a <__mulsf3+0x1b9>
c00271ba:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00271bd:	50                   	push   eax
c00271be:	50                   	push   eax
c00271bf:	6a 00                	push   0x0
c00271c1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00271c4:	e8 b4 04 00 00       	call   c002767d <__eqsf2>
c00271c9:	83 c4 10             	add    esp,0x10
c00271cc:	85 c0                	test   eax,eax
c00271ce:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00271d1:	75 0c                	jne    c00271df <__mulsf3+0x12e>
c00271d3:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00271d7:	0f 89 8a 00 00 00    	jns    c0027267 <__mulsf3+0x1b6>
c00271dd:	eb cd                	jmp    c00271ac <__mulsf3+0xfb>
c00271df:	8d 43 ff             	lea    eax,[ebx-0x1]
c00271e2:	01 f6                	add    esi,esi
c00271e4:	78 04                	js     c00271ea <__mulsf3+0x139>
c00271e6:	89 c3                	mov    ebx,eax
c00271e8:	eb f5                	jmp    c00271df <__mulsf3+0x12e>
c00271ea:	89 c8                	mov    eax,ecx
c00271ec:	0d 00 00 00 80       	or     eax,0x80000000
c00271f1:	81 ce 00 00 00 80    	or     esi,0x80000000
c00271f7:	f7 e6                	mul    esi
c00271f9:	85 c0                	test   eax,eax
c00271fb:	0f 95 c0             	setne  al
c00271fe:	0f b6 c0             	movzx  eax,al
c0027201:	09 c2                	or     edx,eax
c0027203:	78 03                	js     c0027208 <__mulsf3+0x157>
c0027205:	01 d2                	add    edx,edx
c0027207:	4b                   	dec    ebx
c0027208:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c002720e:	7f 22                	jg     c0027232 <__mulsf3+0x181>
c0027210:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027216:	85 db                	test   ebx,ebx
c0027218:	7f 23                	jg     c002723d <__mulsf3+0x18c>
c002721a:	83 fb e9             	cmp    ebx,0xffffffe9
c002721d:	7c 1a                	jl     c0027239 <__mulsf3+0x188>
c002721f:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027225:	b9 01 00 00 00       	mov    ecx,0x1
c002722a:	29 d9                	sub    ecx,ebx
c002722c:	d3 ea                	shr    edx,cl
c002722e:	31 db                	xor    ebx,ebx
c0027230:	eb 0b                	jmp    c002723d <__mulsf3+0x18c>
c0027232:	bb ff 00 00 00       	mov    ebx,0xff
c0027237:	eb 02                	jmp    c002723b <__mulsf3+0x18a>
c0027239:	31 db                	xor    ebx,ebx
c002723b:	31 d2                	xor    edx,edx
c002723d:	89 d0                	mov    eax,edx
c002723f:	c1 e8 08             	shr    eax,0x8
c0027242:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027245:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c002724b:	09 fb                	or     ebx,edi
c002724d:	c1 e3 17             	shl    ebx,0x17
c0027250:	09 c3                	or     ebx,eax
c0027252:	f6 c2 7f             	test   dl,0x7f
c0027255:	0f 95 c1             	setne  cl
c0027258:	09 c8                	or     eax,ecx
c002725a:	83 e0 01             	and    eax,0x1
c002725d:	c1 ea 07             	shr    edx,0x7
c0027260:	21 c2                	and    edx,eax
c0027262:	8d 34 13             	lea    esi,[ebx+edx*1]
c0027265:	eb 03                	jmp    c002726a <__mulsf3+0x1b9>
c0027267:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c002726a:	89 f0                	mov    eax,esi
c002726c:	8d 65 f4             	lea    esp,[ebp-0xc]
c002726f:	5b                   	pop    ebx
c0027270:	5e                   	pop    esi
c0027271:	5f                   	pop    edi
c0027272:	5d                   	pop    ebp
c0027273:	c3                   	ret    

c0027274 <__divsf3>:
c0027274:	55                   	push   ebp
c0027275:	89 e5                	mov    ebp,esp
c0027277:	57                   	push   edi
c0027278:	56                   	push   esi
c0027279:	53                   	push   ebx
c002727a:	83 ec 1c             	sub    esp,0x1c
c002727d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027280:	89 d8                	mov    eax,ebx
c0027282:	89 d9                	mov    ecx,ebx
c0027284:	c1 f9 17             	sar    ecx,0x17
c0027287:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c002728a:	c1 e0 08             	shl    eax,0x8
c002728d:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027292:	89 c1                	mov    ecx,eax
c0027294:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027297:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002729a:	89 c7                	mov    edi,eax
c002729c:	c1 ff 17             	sar    edi,0x17
c002729f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00272a3:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00272a6:	89 f8                	mov    eax,edi
c00272a8:	0f b6 c0             	movzx  eax,al
c00272ab:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00272ae:	29 c6                	sub    esi,eax
c00272b0:	83 c6 7f             	add    esi,0x7f
c00272b3:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00272b6:	42                   	inc    edx
c00272b7:	80 e2 fe             	and    dl,0xfe
c00272ba:	0f 85 9c 00 00 00    	jne    c002735c <__divsf3+0xe8>
c00272c0:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00272c4:	74 33                	je     c00272f9 <__divsf3+0x85>
c00272c6:	85 c9                	test   ecx,ecx
c00272c8:	0f 85 c7 01 00 00    	jne    c0027495 <__divsf3+0x221>
c00272ce:	8d 57 01             	lea    edx,[edi+0x1]
c00272d1:	80 e2 fe             	and    dl,0xfe
c00272d4:	75 2f                	jne    c0027305 <__divsf3+0x91>
c00272d6:	85 c0                	test   eax,eax
c00272d8:	74 2b                	je     c0027305 <__divsf3+0x91>
c00272da:	51                   	push   ecx
c00272db:	51                   	push   ecx
c00272dc:	6a 00                	push   0x0
c00272de:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00272e1:	e8 d2 03 00 00       	call   c00276b8 <__nesf2>
c00272e6:	83 c4 10             	add    esp,0x10
c00272e9:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00272ec:	85 c0                	test   eax,eax
c00272ee:	0f 85 a1 01 00 00    	jne    c0027495 <__divsf3+0x221>
c00272f4:	e9 92 01 00 00       	jmp    c002748b <__divsf3+0x217>
c00272f9:	85 c9                	test   ecx,ecx
c00272fb:	75 1b                	jne    c0027318 <__divsf3+0xa4>
c00272fd:	8d 57 01             	lea    edx,[edi+0x1]
c0027300:	80 e2 fe             	and    dl,0xfe
c0027303:	74 1e                	je     c0027323 <__divsf3+0xaf>
c0027305:	85 ff                	test   edi,edi
c0027307:	0f 89 88 01 00 00    	jns    c0027495 <__divsf3+0x221>
c002730d:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0027313:	e9 7d 01 00 00       	jmp    c0027495 <__divsf3+0x221>
c0027318:	8d 56 ff             	lea    edx,[esi-0x1]
c002731b:	01 c9                	add    ecx,ecx
c002731d:	78 3d                	js     c002735c <__divsf3+0xe8>
c002731f:	89 d6                	mov    esi,edx
c0027321:	eb f5                	jmp    c0027318 <__divsf3+0xa4>
c0027323:	85 c0                	test   eax,eax
c0027325:	b8 00 00 00 00       	mov    eax,0x0
c002732a:	74 18                	je     c0027344 <__divsf3+0xd0>
c002732c:	52                   	push   edx
c002732d:	52                   	push   edx
c002732e:	50                   	push   eax
c002732f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027332:	e8 81 03 00 00       	call   c00276b8 <__nesf2>
c0027337:	83 c4 10             	add    esp,0x10
c002733a:	85 c0                	test   eax,eax
c002733c:	0f 85 50 01 00 00    	jne    c0027492 <__divsf3+0x21e>
c0027342:	eb c1                	jmp    c0027305 <__divsf3+0x91>
c0027344:	56                   	push   esi
c0027345:	56                   	push   esi
c0027346:	50                   	push   eax
c0027347:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002734a:	e8 69 03 00 00       	call   c00276b8 <__nesf2>
c002734f:	83 c4 10             	add    esp,0x10
c0027352:	85 c0                	test   eax,eax
c0027354:	0f 84 31 01 00 00    	je     c002748b <__divsf3+0x217>
c002735a:	eb a9                	jmp    c0027305 <__divsf3+0x91>
c002735c:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c002735f:	c1 e3 08             	shl    ebx,0x8
c0027362:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027368:	8d 57 01             	lea    edx,[edi+0x1]
c002736b:	80 e2 fe             	and    dl,0xfe
c002736e:	75 71                	jne    c00273e1 <__divsf3+0x16d>
c0027370:	85 c0                	test   eax,eax
c0027372:	ba 00 00 00 00       	mov    edx,0x0
c0027377:	74 2f                	je     c00273a8 <__divsf3+0x134>
c0027379:	51                   	push   ecx
c002737a:	51                   	push   ecx
c002737b:	52                   	push   edx
c002737c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002737f:	e8 f9 02 00 00       	call   c002767d <__eqsf2>
c0027384:	83 c4 10             	add    esp,0x10
c0027387:	85 c0                	test   eax,eax
c0027389:	0f 85 03 01 00 00    	jne    c0027492 <__divsf3+0x21e>
c002738f:	31 d2                	xor    edx,edx
c0027391:	89 d3                	mov    ebx,edx
c0027393:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027396:	31 f8                	xor    eax,edi
c0027398:	0f 89 f7 00 00 00    	jns    c0027495 <__divsf3+0x221>
c002739e:	bb 00 00 00 80       	mov    ebx,0x80000000
c00273a3:	e9 ed 00 00 00       	jmp    c0027495 <__divsf3+0x221>
c00273a8:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00273ab:	50                   	push   eax
c00273ac:	50                   	push   eax
c00273ad:	52                   	push   edx
c00273ae:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00273b1:	e8 c7 02 00 00       	call   c002767d <__eqsf2>
c00273b6:	83 c4 10             	add    esp,0x10
c00273b9:	85 c0                	test   eax,eax
c00273bb:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00273be:	75 16                	jne    c00273d6 <__divsf3+0x162>
c00273c0:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00273c3:	31 fb                	xor    ebx,edi
c00273c5:	81 e3 00 00 00 80    	and    ebx,0x80000000
c00273cb:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c00273d1:	e9 bf 00 00 00       	jmp    c0027495 <__divsf3+0x221>
c00273d6:	8d 46 01             	lea    eax,[esi+0x1]
c00273d9:	01 db                	add    ebx,ebx
c00273db:	78 04                	js     c00273e1 <__divsf3+0x16d>
c00273dd:	89 c6                	mov    esi,eax
c00273df:	eb f5                	jmp    c00273d6 <__divsf3+0x162>
c00273e1:	89 c8                	mov    eax,ecx
c00273e3:	0d 00 00 00 80       	or     eax,0x80000000
c00273e8:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00273ee:	31 d2                	xor    edx,edx
c00273f0:	39 d8                	cmp    eax,ebx
c00273f2:	72 07                	jb     c00273fb <__divsf3+0x187>
c00273f4:	29 d8                	sub    eax,ebx
c00273f6:	ba 01 00 00 00       	mov    edx,0x1
c00273fb:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0027402:	01 d2                	add    edx,edx
c0027404:	89 c1                	mov    ecx,eax
c0027406:	01 c0                	add    eax,eax
c0027408:	85 c9                	test   ecx,ecx
c002740a:	78 04                	js     c0027410 <__divsf3+0x19c>
c002740c:	39 c3                	cmp    ebx,eax
c002740e:	77 05                	ja     c0027415 <__divsf3+0x1a1>
c0027410:	29 d8                	sub    eax,ebx
c0027412:	83 ca 01             	or     edx,0x1
c0027415:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027418:	75 e8                	jne    c0027402 <__divsf3+0x18e>
c002741a:	85 c0                	test   eax,eax
c002741c:	0f 95 c0             	setne  al
c002741f:	0f b6 c0             	movzx  eax,al
c0027422:	c1 e2 06             	shl    edx,0x6
c0027425:	09 c2                	or     edx,eax
c0027427:	78 03                	js     c002742c <__divsf3+0x1b8>
c0027429:	01 d2                	add    edx,edx
c002742b:	4e                   	dec    esi
c002742c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0027432:	7f 22                	jg     c0027456 <__divsf3+0x1e2>
c0027434:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002743a:	85 f6                	test   esi,esi
c002743c:	7f 23                	jg     c0027461 <__divsf3+0x1ed>
c002743e:	83 fe e9             	cmp    esi,0xffffffe9
c0027441:	7c 1a                	jl     c002745d <__divsf3+0x1e9>
c0027443:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027449:	b9 01 00 00 00       	mov    ecx,0x1
c002744e:	29 f1                	sub    ecx,esi
c0027450:	d3 ea                	shr    edx,cl
c0027452:	31 f6                	xor    esi,esi
c0027454:	eb 0b                	jmp    c0027461 <__divsf3+0x1ed>
c0027456:	be ff 00 00 00       	mov    esi,0xff
c002745b:	eb 02                	jmp    c002745f <__divsf3+0x1eb>
c002745d:	31 f6                	xor    esi,esi
c002745f:	31 d2                	xor    edx,edx
c0027461:	89 d0                	mov    eax,edx
c0027463:	c1 e8 08             	shr    eax,0x8
c0027466:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027469:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c002746f:	09 fe                	or     esi,edi
c0027471:	c1 e6 17             	shl    esi,0x17
c0027474:	09 c6                	or     esi,eax
c0027476:	f6 c2 7f             	test   dl,0x7f
c0027479:	0f 95 c1             	setne  cl
c002747c:	09 c8                	or     eax,ecx
c002747e:	83 e0 01             	and    eax,0x1
c0027481:	c1 ea 07             	shr    edx,0x7
c0027484:	21 c2                	and    edx,eax
c0027486:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027489:	eb 0a                	jmp    c0027495 <__divsf3+0x221>
c002748b:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027490:	eb 03                	jmp    c0027495 <__divsf3+0x221>
c0027492:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027495:	89 d8                	mov    eax,ebx
c0027497:	8d 65 f4             	lea    esp,[ebp-0xc]
c002749a:	5b                   	pop    ebx
c002749b:	5e                   	pop    esi
c002749c:	5f                   	pop    edi
c002749d:	5d                   	pop    ebp
c002749e:	c3                   	ret    

c002749f <__floatsisf>:
c002749f:	55                   	push   ebp
c00274a0:	89 e5                	mov    ebp,esp
c00274a2:	53                   	push   ebx
c00274a3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00274a6:	85 d2                	test   edx,edx
c00274a8:	7e 2b                	jle    c00274d5 <__floatsisf+0x36>
c00274aa:	0f bd ca             	bsr    ecx,edx
c00274ad:	83 f1 1f             	xor    ecx,0x1f
c00274b0:	d3 e2                	shl    edx,cl
c00274b2:	89 d0                	mov    eax,edx
c00274b4:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00274b9:	89 c3                	mov    ebx,eax
c00274bb:	c1 eb 08             	shr    ebx,0x8
c00274be:	80 e2 7f             	and    dl,0x7f
c00274c1:	0f 95 c2             	setne  dl
c00274c4:	09 da                	or     edx,ebx
c00274c6:	83 e2 01             	and    edx,0x1
c00274c9:	c1 e8 07             	shr    eax,0x7
c00274cc:	21 c2                	and    edx,eax
c00274ce:	b8 9e 00 00 00       	mov    eax,0x9e
c00274d3:	eb 32                	jmp    c0027507 <__floatsisf+0x68>
c00274d5:	b8 00 00 00 00       	mov    eax,0x0
c00274da:	74 34                	je     c0027510 <__floatsisf+0x71>
c00274dc:	f7 da                	neg    edx
c00274de:	0f bd ca             	bsr    ecx,edx
c00274e1:	83 f1 1f             	xor    ecx,0x1f
c00274e4:	d3 e2                	shl    edx,cl
c00274e6:	89 d0                	mov    eax,edx
c00274e8:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00274ed:	89 c3                	mov    ebx,eax
c00274ef:	c1 eb 08             	shr    ebx,0x8
c00274f2:	80 e2 7f             	and    dl,0x7f
c00274f5:	0f 95 c2             	setne  dl
c00274f8:	09 da                	or     edx,ebx
c00274fa:	83 e2 01             	and    edx,0x1
c00274fd:	c1 e8 07             	shr    eax,0x7
c0027500:	21 c2                	and    edx,eax
c0027502:	b8 9e 01 00 00       	mov    eax,0x19e
c0027507:	29 c8                	sub    eax,ecx
c0027509:	c1 e0 17             	shl    eax,0x17
c002750c:	09 d8                	or     eax,ebx
c002750e:	01 d0                	add    eax,edx
c0027510:	5b                   	pop    ebx
c0027511:	5d                   	pop    ebp
c0027512:	c3                   	ret    

c0027513 <__floatunsisf>:
c0027513:	55                   	push   ebp
c0027514:	89 e5                	mov    ebp,esp
c0027516:	53                   	push   ebx
c0027517:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002751a:	31 c0                	xor    eax,eax
c002751c:	85 d2                	test   edx,edx
c002751e:	74 32                	je     c0027552 <__floatunsisf+0x3f>
c0027520:	0f bd ca             	bsr    ecx,edx
c0027523:	83 f1 1f             	xor    ecx,0x1f
c0027526:	d3 e2                	shl    edx,cl
c0027528:	89 d0                	mov    eax,edx
c002752a:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002752f:	89 c3                	mov    ebx,eax
c0027531:	c1 eb 08             	shr    ebx,0x8
c0027534:	80 e2 7f             	and    dl,0x7f
c0027537:	0f 95 c2             	setne  dl
c002753a:	09 da                	or     edx,ebx
c002753c:	83 e2 01             	and    edx,0x1
c002753f:	c1 e8 07             	shr    eax,0x7
c0027542:	21 c2                	and    edx,eax
c0027544:	b8 9e 00 00 00       	mov    eax,0x9e
c0027549:	29 c8                	sub    eax,ecx
c002754b:	c1 e0 17             	shl    eax,0x17
c002754e:	09 d8                	or     eax,ebx
c0027550:	01 d0                	add    eax,edx
c0027552:	5b                   	pop    ebx
c0027553:	5d                   	pop    ebp
c0027554:	c3                   	ret    

c0027555 <__fixsfsi>:
c0027555:	55                   	push   ebp
c0027556:	89 e5                	mov    ebp,esp
c0027558:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002755b:	89 d1                	mov    ecx,edx
c002755d:	c1 e1 08             	shl    ecx,0x8
c0027560:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0027566:	c1 fa 17             	sar    edx,0x17
c0027569:	78 1c                	js     c0027587 <__fixsfsi+0x32>
c002756b:	83 ea 7f             	sub    edx,0x7f
c002756e:	31 c0                	xor    eax,eax
c0027570:	83 fa 1e             	cmp    edx,0x1e
c0027573:	77 40                	ja     c00275b5 <__fixsfsi+0x60>
c0027575:	89 c8                	mov    eax,ecx
c0027577:	0d 00 00 00 80       	or     eax,0x80000000
c002757c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027581:	29 d1                	sub    ecx,edx
c0027583:	d3 e8                	shr    eax,cl
c0027585:	eb 2e                	jmp    c00275b5 <__fixsfsi+0x60>
c0027587:	31 c0                	xor    eax,eax
c0027589:	81 c2 81 00 00 00    	add    edx,0x81
c002758f:	78 24                	js     c00275b5 <__fixsfsi+0x60>
c0027591:	83 fa 1e             	cmp    edx,0x1e
c0027594:	7e 09                	jle    c002759f <__fixsfsi+0x4a>
c0027596:	83 fa 1f             	cmp    edx,0x1f
c0027599:	75 18                	jne    c00275b3 <__fixsfsi+0x5e>
c002759b:	85 c9                	test   ecx,ecx
c002759d:	75 14                	jne    c00275b3 <__fixsfsi+0x5e>
c002759f:	89 c8                	mov    eax,ecx
c00275a1:	0d 00 00 00 80       	or     eax,0x80000000
c00275a6:	b9 1f 00 00 00       	mov    ecx,0x1f
c00275ab:	29 d1                	sub    ecx,edx
c00275ad:	d3 e8                	shr    eax,cl
c00275af:	f7 d8                	neg    eax
c00275b1:	eb 02                	jmp    c00275b5 <__fixsfsi+0x60>
c00275b3:	31 c0                	xor    eax,eax
c00275b5:	5d                   	pop    ebp
c00275b6:	c3                   	ret    

c00275b7 <__fixunssfsi>:
c00275b7:	55                   	push   ebp
c00275b8:	89 e5                	mov    ebp,esp
c00275ba:	53                   	push   ebx
c00275bb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00275be:	89 d3                	mov    ebx,edx
c00275c0:	c1 fb 17             	sar    ebx,0x17
c00275c3:	83 eb 7f             	sub    ebx,0x7f
c00275c6:	31 c0                	xor    eax,eax
c00275c8:	83 fb 1f             	cmp    ebx,0x1f
c00275cb:	77 18                	ja     c00275e5 <__fixunssfsi+0x2e>
c00275cd:	89 d0                	mov    eax,edx
c00275cf:	c1 e0 08             	shl    eax,0x8
c00275d2:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00275d7:	0d 00 00 00 80       	or     eax,0x80000000
c00275dc:	b9 1f 00 00 00       	mov    ecx,0x1f
c00275e1:	29 d9                	sub    ecx,ebx
c00275e3:	d3 e8                	shr    eax,cl
c00275e5:	5b                   	pop    ebx
c00275e6:	5d                   	pop    ebp
c00275e7:	c3                   	ret    

c00275e8 <__cmpsf2>:
c00275e8:	55                   	push   ebp
c00275e9:	89 e5                	mov    ebp,esp
c00275eb:	57                   	push   edi
c00275ec:	56                   	push   esi
c00275ed:	53                   	push   ebx
c00275ee:	83 ec 24             	sub    esp,0x24
c00275f1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00275f4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00275f7:	e8 4f 10 00 00       	call   c002864b <__truncdfsf2>
c00275fc:	5a                   	pop    edx
c00275fd:	59                   	pop    ecx
c00275fe:	89 c3                	mov    ebx,eax
c0027600:	c1 e8 17             	shr    eax,0x17
c0027603:	0f b6 f0             	movzx  esi,al
c0027606:	89 d8                	mov    eax,ebx
c0027608:	c1 e8 1f             	shr    eax,0x1f
c002760b:	31 c6                	xor    esi,eax
c002760d:	c1 e3 08             	shl    ebx,0x8
c0027610:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027613:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027616:	e8 30 10 00 00       	call   c002864b <__truncdfsf2>
c002761b:	83 c4 10             	add    esp,0x10
c002761e:	89 c1                	mov    ecx,eax
c0027620:	c1 e9 17             	shr    ecx,0x17
c0027623:	0f b6 c9             	movzx  ecx,cl
c0027626:	89 c7                	mov    edi,eax
c0027628:	c1 ef 1f             	shr    edi,0x1f
c002762b:	89 ca                	mov    edx,ecx
c002762d:	31 fa                	xor    edx,edi
c002762f:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027632:	c1 e0 08             	shl    eax,0x8
c0027635:	89 c2                	mov    edx,eax
c0027637:	89 d8                	mov    eax,ebx
c0027639:	09 d0                	or     eax,edx
c002763b:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027640:	09 f0                	or     eax,esi
c0027642:	75 08                	jne    c002764c <__cmpsf2+0x64>
c0027644:	31 c0                	xor    eax,eax
c0027646:	39 f9                	cmp    ecx,edi
c0027648:	75 0c                	jne    c0027656 <__cmpsf2+0x6e>
c002764a:	eb 29                	jmp    c0027675 <__cmpsf2+0x8d>
c002764c:	b8 01 00 00 00       	mov    eax,0x1
c0027651:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027654:	7f 1f                	jg     c0027675 <__cmpsf2+0x8d>
c0027656:	83 c8 ff             	or     eax,0xffffffff
c0027659:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c002765c:	7c 17                	jl     c0027675 <__cmpsf2+0x8d>
c002765e:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027664:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002766a:	b8 01 00 00 00       	mov    eax,0x1
c002766f:	39 d3                	cmp    ebx,edx
c0027671:	77 02                	ja     c0027675 <__cmpsf2+0x8d>
c0027673:	19 c0                	sbb    eax,eax
c0027675:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027678:	5b                   	pop    ebx
c0027679:	5e                   	pop    esi
c002767a:	5f                   	pop    edi
c002767b:	5d                   	pop    ebp
c002767c:	c3                   	ret    

c002767d <__eqsf2>:
c002767d:	55                   	push   ebp
c002767e:	89 e5                	mov    ebp,esp
c0027680:	83 ec 24             	sub    esp,0x24
c0027683:	6a 01                	push   0x1
c0027685:	83 ec 0c             	sub    esp,0xc
c0027688:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002768b:	e8 df 10 00 00       	call   c002876f <__extendsfdf2>
c0027690:	83 c4 10             	add    esp,0x10
c0027693:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027696:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027699:	52                   	push   edx
c002769a:	50                   	push   eax
c002769b:	50                   	push   eax
c002769c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002769f:	e8 cb 10 00 00       	call   c002876f <__extendsfdf2>
c00276a4:	59                   	pop    ecx
c00276a5:	59                   	pop    ecx
c00276a6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00276a9:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00276ac:	52                   	push   edx
c00276ad:	50                   	push   eax
c00276ae:	e8 35 ff ff ff       	call   c00275e8 <__cmpsf2>
c00276b3:	83 c4 20             	add    esp,0x20
c00276b6:	c9                   	leave  
c00276b7:	c3                   	ret    

c00276b8 <__nesf2>:
c00276b8:	eb c3                	jmp    c002767d <__eqsf2>

c00276ba <__gtsf2>:
c00276ba:	55                   	push   ebp
c00276bb:	89 e5                	mov    ebp,esp
c00276bd:	83 ec 24             	sub    esp,0x24
c00276c0:	6a ff                	push   0xffffffff
c00276c2:	83 ec 0c             	sub    esp,0xc
c00276c5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00276c8:	e8 a2 10 00 00       	call   c002876f <__extendsfdf2>
c00276cd:	83 c4 10             	add    esp,0x10
c00276d0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00276d3:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00276d6:	52                   	push   edx
c00276d7:	50                   	push   eax
c00276d8:	50                   	push   eax
c00276d9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00276dc:	e8 8e 10 00 00       	call   c002876f <__extendsfdf2>
c00276e1:	59                   	pop    ecx
c00276e2:	59                   	pop    ecx
c00276e3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00276e6:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00276e9:	52                   	push   edx
c00276ea:	50                   	push   eax
c00276eb:	e8 f8 fe ff ff       	call   c00275e8 <__cmpsf2>
c00276f0:	83 c4 20             	add    esp,0x20
c00276f3:	c9                   	leave  
c00276f4:	c3                   	ret    

c00276f5 <__gesf2>:
c00276f5:	eb c3                	jmp    c00276ba <__gtsf2>

c00276f7 <__ltsf2>:
c00276f7:	eb 84                	jmp    c002767d <__eqsf2>

c00276f9 <__lesf2>:
c00276f9:	eb 82                	jmp    c002767d <__eqsf2>

c00276fb <__adddf3>:
c00276fb:	55                   	push   ebp
c00276fc:	89 e5                	mov    ebp,esp
c00276fe:	57                   	push   edi
c00276ff:	56                   	push   esi
c0027700:	53                   	push   ebx
c0027701:	83 ec 24             	sub    esp,0x24
c0027704:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027707:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002770a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002770d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027710:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027713:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027716:	89 c8                	mov    eax,ecx
c0027718:	89 ce                	mov    esi,ecx
c002771a:	c1 fe 14             	sar    esi,0x14
c002771d:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027720:	89 fb                	mov    ebx,edi
c0027722:	89 fa                	mov    edx,edi
c0027724:	c1 e2 0b             	shl    edx,0xb
c0027727:	c1 e0 0b             	shl    eax,0xb
c002772a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002772f:	c1 eb 15             	shr    ebx,0x15
c0027732:	09 d8                	or     eax,ebx
c0027734:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027737:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c002773a:	c1 fe 14             	sar    esi,0x14
c002773d:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027740:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027743:	89 f3                	mov    ebx,esi
c0027745:	c1 e3 0b             	shl    ebx,0xb
c0027748:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c002774b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002774e:	c1 e3 0b             	shl    ebx,0xb
c0027751:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0027757:	c1 ee 15             	shr    esi,0x15
c002775a:	09 f3                	or     ebx,esi
c002775c:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c002775f:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027762:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0027765:	0f 88 5f 02 00 00    	js     c00279ca <__adddf3+0x2cf>
c002776b:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002776e:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027771:	85 db                	test   ebx,ebx
c0027773:	0f 8e c7 00 00 00    	jle    c0027840 <__adddf3+0x145>
c0027779:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027780:	75 1a                	jne    c002779c <__adddf3+0xa1>
c0027782:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027785:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027788:	0f 84 b2 05 00 00    	je     c0027d40 <__adddf3+0x645>
c002778e:	4b                   	dec    ebx
c002778f:	75 23                	jne    c00277b4 <__adddf3+0xb9>
c0027791:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027794:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027797:	e9 99 00 00 00       	jmp    c0027835 <__adddf3+0x13a>
c002779c:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002779f:	f7 d6                	not    esi
c00277a1:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00277a7:	0f 84 93 05 00 00    	je     c0027d40 <__adddf3+0x645>
c00277ad:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00277b4:	83 fb 1f             	cmp    ebx,0x1f
c00277b7:	7e 42                	jle    c00277fb <__adddf3+0x100>
c00277b9:	83 fb 3f             	cmp    ebx,0x3f
c00277bc:	0f 8f 7e 05 00 00    	jg     c0027d40 <__adddf3+0x645>
c00277c2:	83 e3 1f             	and    ebx,0x1f
c00277c5:	89 d9                	mov    ecx,ebx
c00277c7:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00277ca:	d3 ef                	shr    edi,cl
c00277cc:	31 db                	xor    ebx,ebx
c00277ce:	85 c9                	test   ecx,ecx
c00277d0:	74 15                	je     c00277e7 <__adddf3+0xec>
c00277d2:	be 20 00 00 00       	mov    esi,0x20
c00277d7:	29 ce                	sub    esi,ecx
c00277d9:	89 f1                	mov    ecx,esi
c00277db:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00277de:	d3 e6                	shl    esi,cl
c00277e0:	31 db                	xor    ebx,ebx
c00277e2:	85 f6                	test   esi,esi
c00277e4:	0f 95 c3             	setne  bl
c00277e7:	31 c9                	xor    ecx,ecx
c00277e9:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00277ed:	0f 95 c1             	setne  cl
c00277f0:	09 cf                	or     edi,ecx
c00277f2:	09 fb                	or     ebx,edi
c00277f4:	01 da                	add    edx,ebx
c00277f6:	83 d0 00             	adc    eax,0x0
c00277f9:	eb 3a                	jmp    c0027835 <__adddf3+0x13a>
c00277fb:	bf 20 00 00 00       	mov    edi,0x20
c0027800:	29 df                	sub    edi,ebx
c0027802:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027805:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027808:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002780b:	d3 e6                	shl    esi,cl
c002780d:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027810:	88 d9                	mov    cl,bl
c0027812:	d3 ef                	shr    edi,cl
c0027814:	09 fe                	or     esi,edi
c0027816:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027819:	88 d9                	mov    cl,bl
c002781b:	d3 ef                	shr    edi,cl
c002781d:	89 fb                	mov    ebx,edi
c002781f:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027822:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027825:	d3 e7                	shl    edi,cl
c0027827:	85 ff                	test   edi,edi
c0027829:	0f 95 c1             	setne  cl
c002782c:	0f b6 c9             	movzx  ecx,cl
c002782f:	09 ce                	or     esi,ecx
c0027831:	01 f2                	add    edx,esi
c0027833:	11 d8                	adc    eax,ebx
c0027835:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027838:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002783b:	e9 52 01 00 00       	jmp    c0027992 <__adddf3+0x297>
c0027840:	0f 84 d5 00 00 00    	je     c002791b <__adddf3+0x220>
c0027846:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027849:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c002784c:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002784f:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027852:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027859:	75 20                	jne    c002787b <__adddf3+0x180>
c002785b:	89 d6                	mov    esi,edx
c002785d:	09 c6                	or     esi,eax
c002785f:	0f 84 db 04 00 00    	je     c0027d40 <__adddf3+0x645>
c0027865:	4b                   	dec    ebx
c0027866:	75 29                	jne    c0027891 <__adddf3+0x196>
c0027868:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002786b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002786e:	01 d1                	add    ecx,edx
c0027870:	11 c6                	adc    esi,eax
c0027872:	89 f0                	mov    eax,esi
c0027874:	89 ca                	mov    edx,ecx
c0027876:	e9 17 01 00 00       	jmp    c0027992 <__adddf3+0x297>
c002787b:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c002787e:	f7 d6                	not    esi
c0027880:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027886:	0f 84 b4 04 00 00    	je     c0027d40 <__adddf3+0x645>
c002788c:	0d 00 00 00 80       	or     eax,0x80000000
c0027891:	83 fb 1f             	cmp    ebx,0x1f
c0027894:	7e 48                	jle    c00278de <__adddf3+0x1e3>
c0027896:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027899:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002789c:	83 fb 3f             	cmp    ebx,0x3f
c002789f:	0f 8f 9b 04 00 00    	jg     c0027d40 <__adddf3+0x645>
c00278a5:	83 e3 1f             	and    ebx,0x1f
c00278a8:	89 d9                	mov    ecx,ebx
c00278aa:	89 c7                	mov    edi,eax
c00278ac:	d3 ef                	shr    edi,cl
c00278ae:	31 db                	xor    ebx,ebx
c00278b0:	85 c9                	test   ecx,ecx
c00278b2:	74 12                	je     c00278c6 <__adddf3+0x1cb>
c00278b4:	be 20 00 00 00       	mov    esi,0x20
c00278b9:	29 ce                	sub    esi,ecx
c00278bb:	89 f1                	mov    ecx,esi
c00278bd:	d3 e0                	shl    eax,cl
c00278bf:	31 db                	xor    ebx,ebx
c00278c1:	85 c0                	test   eax,eax
c00278c3:	0f 95 c3             	setne  bl
c00278c6:	31 c0                	xor    eax,eax
c00278c8:	85 d2                	test   edx,edx
c00278ca:	0f 95 c0             	setne  al
c00278cd:	09 c7                	or     edi,eax
c00278cf:	09 fb                	or     ebx,edi
c00278d1:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00278d4:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00278d7:	01 da                	add    edx,ebx
c00278d9:	83 d6 00             	adc    esi,0x0
c00278dc:	eb 39                	jmp    c0027917 <__adddf3+0x21c>
c00278de:	be 20 00 00 00       	mov    esi,0x20
c00278e3:	29 de                	sub    esi,ebx
c00278e5:	89 c7                	mov    edi,eax
c00278e7:	89 f1                	mov    ecx,esi
c00278e9:	d3 e7                	shl    edi,cl
c00278eb:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00278ee:	89 d7                	mov    edi,edx
c00278f0:	88 d9                	mov    cl,bl
c00278f2:	d3 ef                	shr    edi,cl
c00278f4:	89 f9                	mov    ecx,edi
c00278f6:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00278f9:	09 cf                	or     edi,ecx
c00278fb:	88 d9                	mov    cl,bl
c00278fd:	d3 e8                	shr    eax,cl
c00278ff:	89 f1                	mov    ecx,esi
c0027901:	d3 e2                	shl    edx,cl
c0027903:	85 d2                	test   edx,edx
c0027905:	0f 95 c2             	setne  dl
c0027908:	0f b6 d2             	movzx  edx,dl
c002790b:	09 d7                	or     edi,edx
c002790d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027910:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027913:	01 fa                	add    edx,edi
c0027915:	11 c6                	adc    esi,eax
c0027917:	89 f0                	mov    eax,esi
c0027919:	eb 77                	jmp    c0027992 <__adddf3+0x297>
c002791b:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002791e:	46                   	inc    esi
c002791f:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027922:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027928:	75 41                	jne    c002796b <__adddf3+0x270>
c002792a:	89 d3                	mov    ebx,edx
c002792c:	09 c3                	or     ebx,eax
c002792e:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027935:	75 27                	jne    c002795e <__adddf3+0x263>
c0027937:	85 db                	test   ebx,ebx
c0027939:	0f 84 fb 03 00 00    	je     c0027d3a <__adddf3+0x63f>
c002793f:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027942:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027945:	0f 84 f5 03 00 00    	je     c0027d40 <__adddf3+0x645>
c002794b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002794e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027951:	85 c0                	test   eax,eax
c0027953:	0f 89 91 03 00 00    	jns    c0027cea <__adddf3+0x5ef>
c0027959:	e9 85 03 00 00       	jmp    c0027ce3 <__adddf3+0x5e8>
c002795e:	85 db                	test   ebx,ebx
c0027960:	0f 85 da 03 00 00    	jne    c0027d40 <__adddf3+0x645>
c0027966:	e9 cf 03 00 00       	jmp    c0027d3a <__adddf3+0x63f>
c002796b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002796e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027971:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027974:	f7 d1                	not    ecx
c0027976:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c002797c:	0f 84 70 03 00 00    	je     c0027cf2 <__adddf3+0x5f7>
c0027982:	d1 ea                	shr    edx,1
c0027984:	89 c1                	mov    ecx,eax
c0027986:	c1 e1 1f             	shl    ecx,0x1f
c0027989:	09 ca                	or     edx,ecx
c002798b:	d1 e8                	shr    eax,1
c002798d:	e9 6f 03 00 00       	jmp    c0027d01 <__adddf3+0x606>
c0027992:	85 c0                	test   eax,eax
c0027994:	0f 89 67 03 00 00    	jns    c0027d01 <__adddf3+0x606>
c002799a:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c002799d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00279a0:	f7 d1                	not    ecx
c00279a2:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00279a8:	0f 84 44 03 00 00    	je     c0027cf2 <__adddf3+0x5f7>
c00279ae:	89 d1                	mov    ecx,edx
c00279b0:	d1 e9                	shr    ecx,1
c00279b2:	83 e2 01             	and    edx,0x1
c00279b5:	09 ca                	or     edx,ecx
c00279b7:	89 c1                	mov    ecx,eax
c00279b9:	c1 e1 1f             	shl    ecx,0x1f
c00279bc:	09 ca                	or     edx,ecx
c00279be:	d1 e8                	shr    eax,1
c00279c0:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00279c5:	e9 37 03 00 00       	jmp    c0027d01 <__adddf3+0x606>
c00279ca:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00279cd:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00279d3:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c00279d6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00279d9:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00279df:	29 de                	sub    esi,ebx
c00279e1:	85 f6                	test   esi,esi
c00279e3:	0f 8e bd 00 00 00    	jle    c0027aa6 <__adddf3+0x3ab>
c00279e9:	85 db                	test   ebx,ebx
c00279eb:	75 17                	jne    c0027a04 <__adddf3+0x309>
c00279ed:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00279f0:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00279f3:	0f 84 47 03 00 00    	je     c0027d40 <__adddf3+0x645>
c00279f9:	4e                   	dec    esi
c00279fa:	75 20                	jne    c0027a1c <__adddf3+0x321>
c00279fc:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00279ff:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027a02:	eb 5b                	jmp    c0027a5f <__adddf3+0x364>
c0027a04:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027a07:	f7 d3                	not    ebx
c0027a09:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027a0f:	0f 84 2b 03 00 00    	je     c0027d40 <__adddf3+0x645>
c0027a15:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027a1c:	83 fe 1f             	cmp    esi,0x1f
c0027a1f:	7e 49                	jle    c0027a6a <__adddf3+0x36f>
c0027a21:	83 fe 3f             	cmp    esi,0x3f
c0027a24:	0f 8f 16 03 00 00    	jg     c0027d40 <__adddf3+0x645>
c0027a2a:	83 e6 1f             	and    esi,0x1f
c0027a2d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027a30:	89 f1                	mov    ecx,esi
c0027a32:	d3 ef                	shr    edi,cl
c0027a34:	31 db                	xor    ebx,ebx
c0027a36:	85 f6                	test   esi,esi
c0027a38:	74 13                	je     c0027a4d <__adddf3+0x352>
c0027a3a:	b9 20 00 00 00       	mov    ecx,0x20
c0027a3f:	29 f1                	sub    ecx,esi
c0027a41:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027a44:	d3 e6                	shl    esi,cl
c0027a46:	31 db                	xor    ebx,ebx
c0027a48:	85 f6                	test   esi,esi
c0027a4a:	0f 95 c3             	setne  bl
c0027a4d:	31 c9                	xor    ecx,ecx
c0027a4f:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027a53:	0f 95 c1             	setne  cl
c0027a56:	09 cf                	or     edi,ecx
c0027a58:	09 fb                	or     ebx,edi
c0027a5a:	29 da                	sub    edx,ebx
c0027a5c:	83 d8 00             	sbb    eax,0x0
c0027a5f:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027a62:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027a65:	e9 aa 01 00 00       	jmp    c0027c14 <__adddf3+0x519>
c0027a6a:	bf 20 00 00 00       	mov    edi,0x20
c0027a6f:	29 f7                	sub    edi,esi
c0027a71:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027a74:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027a77:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027a7a:	d3 e3                	shl    ebx,cl
c0027a7c:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027a7f:	89 f1                	mov    ecx,esi
c0027a81:	d3 ef                	shr    edi,cl
c0027a83:	09 fb                	or     ebx,edi
c0027a85:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027a88:	89 f1                	mov    ecx,esi
c0027a8a:	d3 ef                	shr    edi,cl
c0027a8c:	89 fe                	mov    esi,edi
c0027a8e:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027a91:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027a94:	d3 e7                	shl    edi,cl
c0027a96:	85 ff                	test   edi,edi
c0027a98:	0f 95 c1             	setne  cl
c0027a9b:	0f b6 c9             	movzx  ecx,cl
c0027a9e:	09 cb                	or     ebx,ecx
c0027aa0:	29 da                	sub    edx,ebx
c0027aa2:	19 f0                	sbb    eax,esi
c0027aa4:	eb b9                	jmp    c0027a5f <__adddf3+0x364>
c0027aa6:	0f 84 cd 00 00 00    	je     c0027b79 <__adddf3+0x47e>
c0027aac:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c0027aaf:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027ab2:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027ab5:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027ab9:	75 1b                	jne    c0027ad6 <__adddf3+0x3db>
c0027abb:	89 d6                	mov    esi,edx
c0027abd:	09 c6                	or     esi,eax
c0027abf:	0f 84 7b 02 00 00    	je     c0027d40 <__adddf3+0x645>
c0027ac5:	4b                   	dec    ebx
c0027ac6:	75 24                	jne    c0027aec <__adddf3+0x3f1>
c0027ac8:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027acb:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027ace:	29 d1                	sub    ecx,edx
c0027ad0:	19 c6                	sbb    esi,eax
c0027ad2:	89 ca                	mov    edx,ecx
c0027ad4:	eb 61                	jmp    c0027b37 <__adddf3+0x43c>
c0027ad6:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027ad9:	f7 d6                	not    esi
c0027adb:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027ae1:	0f 84 59 02 00 00    	je     c0027d40 <__adddf3+0x645>
c0027ae7:	0d 00 00 00 80       	or     eax,0x80000000
c0027aec:	83 fb 1f             	cmp    ebx,0x1f
c0027aef:	7e 4d                	jle    c0027b3e <__adddf3+0x443>
c0027af1:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027af4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027af7:	83 fb 3f             	cmp    ebx,0x3f
c0027afa:	0f 8f 40 02 00 00    	jg     c0027d40 <__adddf3+0x645>
c0027b00:	83 e3 1f             	and    ebx,0x1f
c0027b03:	89 d9                	mov    ecx,ebx
c0027b05:	89 c7                	mov    edi,eax
c0027b07:	d3 ef                	shr    edi,cl
c0027b09:	31 db                	xor    ebx,ebx
c0027b0b:	85 c9                	test   ecx,ecx
c0027b0d:	74 12                	je     c0027b21 <__adddf3+0x426>
c0027b0f:	be 20 00 00 00       	mov    esi,0x20
c0027b14:	29 ce                	sub    esi,ecx
c0027b16:	89 f1                	mov    ecx,esi
c0027b18:	d3 e0                	shl    eax,cl
c0027b1a:	31 db                	xor    ebx,ebx
c0027b1c:	85 c0                	test   eax,eax
c0027b1e:	0f 95 c3             	setne  bl
c0027b21:	31 c0                	xor    eax,eax
c0027b23:	85 d2                	test   edx,edx
c0027b25:	0f 95 c0             	setne  al
c0027b28:	09 c7                	or     edi,eax
c0027b2a:	09 fb                	or     ebx,edi
c0027b2c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027b2f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027b32:	29 da                	sub    edx,ebx
c0027b34:	83 de 00             	sbb    esi,0x0
c0027b37:	89 f0                	mov    eax,esi
c0027b39:	e9 d6 00 00 00       	jmp    c0027c14 <__adddf3+0x519>
c0027b3e:	be 20 00 00 00       	mov    esi,0x20
c0027b43:	29 de                	sub    esi,ebx
c0027b45:	89 c7                	mov    edi,eax
c0027b47:	89 f1                	mov    ecx,esi
c0027b49:	d3 e7                	shl    edi,cl
c0027b4b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027b4e:	89 d7                	mov    edi,edx
c0027b50:	88 d9                	mov    cl,bl
c0027b52:	d3 ef                	shr    edi,cl
c0027b54:	89 f9                	mov    ecx,edi
c0027b56:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b59:	09 cf                	or     edi,ecx
c0027b5b:	88 d9                	mov    cl,bl
c0027b5d:	d3 e8                	shr    eax,cl
c0027b5f:	89 f1                	mov    ecx,esi
c0027b61:	d3 e2                	shl    edx,cl
c0027b63:	85 d2                	test   edx,edx
c0027b65:	0f 95 c2             	setne  dl
c0027b68:	0f b6 d2             	movzx  edx,dl
c0027b6b:	09 d7                	or     edi,edx
c0027b6d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027b70:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027b73:	29 fa                	sub    edx,edi
c0027b75:	19 c6                	sbb    esi,eax
c0027b77:	eb be                	jmp    c0027b37 <__adddf3+0x43c>
c0027b79:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027b7c:	8d 5e 01             	lea    ebx,[esi+0x1]
c0027b7f:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0027b85:	75 6a                	jne    c0027bf1 <__adddf3+0x4f6>
c0027b87:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027b8b:	75 58                	jne    c0027be5 <__adddf3+0x4ea>
c0027b8d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027b90:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027b93:	89 d6                	mov    esi,edx
c0027b95:	09 c6                	or     esi,eax
c0027b97:	75 17                	jne    c0027bb0 <__adddf3+0x4b5>
c0027b99:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027b9c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027b9f:	85 db                	test   ebx,ebx
c0027ba1:	0f 85 99 01 00 00    	jne    c0027d40 <__adddf3+0x645>
c0027ba7:	31 ff                	xor    edi,edi
c0027ba9:	31 c9                	xor    ecx,ecx
c0027bab:	e9 90 01 00 00       	jmp    c0027d40 <__adddf3+0x645>
c0027bb0:	85 db                	test   ebx,ebx
c0027bb2:	0f 84 88 01 00 00    	je     c0027d40 <__adddf3+0x645>
c0027bb8:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027bbb:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027bbe:	85 c0                	test   eax,eax
c0027bc0:	79 10                	jns    c0027bd2 <__adddf3+0x4d7>
c0027bc2:	31 c9                	xor    ecx,ecx
c0027bc4:	f7 da                	neg    edx
c0027bc6:	0f 95 c1             	setne  cl
c0027bc9:	01 c8                	add    eax,ecx
c0027bcb:	f7 d8                	neg    eax
c0027bcd:	e9 2f 01 00 00       	jmp    c0027d01 <__adddf3+0x606>
c0027bd2:	31 ff                	xor    edi,edi
c0027bd4:	31 c9                	xor    ecx,ecx
c0027bd6:	89 c3                	mov    ebx,eax
c0027bd8:	09 d3                	or     ebx,edx
c0027bda:	0f 84 60 01 00 00    	je     c0027d40 <__adddf3+0x645>
c0027be0:	e9 05 01 00 00       	jmp    c0027cea <__adddf3+0x5ef>
c0027be5:	31 ff                	xor    edi,edi
c0027be7:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027bec:	e9 4f 01 00 00       	jmp    c0027d40 <__adddf3+0x645>
c0027bf1:	89 c1                	mov    ecx,eax
c0027bf3:	89 d0                	mov    eax,edx
c0027bf5:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027bf8:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0027bfb:	89 ca                	mov    edx,ecx
c0027bfd:	85 c9                	test   ecx,ecx
c0027bff:	79 2c                	jns    c0027c2d <__adddf3+0x532>
c0027c01:	31 c9                	xor    ecx,ecx
c0027c03:	f7 d8                	neg    eax
c0027c05:	0f 95 c1             	setne  cl
c0027c08:	01 ca                	add    edx,ecx
c0027c0a:	f7 da                	neg    edx
c0027c0c:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027c0f:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027c12:	eb 19                	jmp    c0027c2d <__adddf3+0x532>
c0027c14:	85 c0                	test   eax,eax
c0027c16:	0f 89 e5 00 00 00    	jns    c0027d01 <__adddf3+0x606>
c0027c1c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027c21:	89 c1                	mov    ecx,eax
c0027c23:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027c26:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027c29:	89 d0                	mov    eax,edx
c0027c2b:	89 ca                	mov    edx,ecx
c0027c2d:	85 d2                	test   edx,edx
c0027c2f:	74 59                	je     c0027c8a <__adddf3+0x58f>
c0027c31:	0f bd da             	bsr    ebx,edx
c0027c34:	83 f3 1f             	xor    ebx,0x1f
c0027c37:	88 d9                	mov    cl,bl
c0027c39:	d3 e2                	shl    edx,cl
c0027c3b:	bf 20 00 00 00       	mov    edi,0x20
c0027c40:	89 f9                	mov    ecx,edi
c0027c42:	29 d9                	sub    ecx,ebx
c0027c44:	89 c6                	mov    esi,eax
c0027c46:	d3 ee                	shr    esi,cl
c0027c48:	09 d6                	or     esi,edx
c0027c4a:	88 d9                	mov    cl,bl
c0027c4c:	d3 e0                	shl    eax,cl
c0027c4e:	89 c2                	mov    edx,eax
c0027c50:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027c53:	25 ff 07 00 00       	and    eax,0x7ff
c0027c58:	39 d8                	cmp    eax,ebx
c0027c5a:	7f 22                	jg     c0027c7e <__adddf3+0x583>
c0027c5c:	29 c3                	sub    ebx,eax
c0027c5e:	43                   	inc    ebx
c0027c5f:	88 d9                	mov    cl,bl
c0027c61:	d3 ea                	shr    edx,cl
c0027c63:	29 df                	sub    edi,ebx
c0027c65:	89 f9                	mov    ecx,edi
c0027c67:	89 f0                	mov    eax,esi
c0027c69:	d3 e0                	shl    eax,cl
c0027c6b:	09 c2                	or     edx,eax
c0027c6d:	89 f0                	mov    eax,esi
c0027c6f:	88 d9                	mov    cl,bl
c0027c71:	d3 e8                	shr    eax,cl
c0027c73:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027c76:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0027c7c:	eb 6f                	jmp    c0027ced <__adddf3+0x5f2>
c0027c7e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027c81:	29 d8                	sub    eax,ebx
c0027c83:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027c86:	89 f0                	mov    eax,esi
c0027c88:	eb 59                	jmp    c0027ce3 <__adddf3+0x5e8>
c0027c8a:	85 c0                	test   eax,eax
c0027c8c:	74 6a                	je     c0027cf8 <__adddf3+0x5fd>
c0027c8e:	0f bd c8             	bsr    ecx,eax
c0027c91:	83 f1 1f             	xor    ecx,0x1f
c0027c94:	d3 e0                	shl    eax,cl
c0027c96:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027c99:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027c9f:	83 c1 20             	add    ecx,0x20
c0027ca2:	39 cb                	cmp    ebx,ecx
c0027ca4:	7f 35                	jg     c0027cdb <__adddf3+0x5e0>
c0027ca6:	29 d9                	sub    ecx,ebx
c0027ca8:	8d 71 01             	lea    esi,[ecx+0x1]
c0027cab:	83 fe 1f             	cmp    esi,0x1f
c0027cae:	7e 09                	jle    c0027cb9 <__adddf3+0x5be>
c0027cb0:	83 e9 1f             	sub    ecx,0x1f
c0027cb3:	d3 e8                	shr    eax,cl
c0027cb5:	89 c3                	mov    ebx,eax
c0027cb7:	eb 11                	jmp    c0027cca <__adddf3+0x5cf>
c0027cb9:	b9 20 00 00 00       	mov    ecx,0x20
c0027cbe:	29 f1                	sub    ecx,esi
c0027cc0:	89 c3                	mov    ebx,eax
c0027cc2:	d3 e3                	shl    ebx,cl
c0027cc4:	89 f1                	mov    ecx,esi
c0027cc6:	d3 e8                	shr    eax,cl
c0027cc8:	89 c2                	mov    edx,eax
c0027cca:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027ccd:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027cd2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027cd5:	89 d0                	mov    eax,edx
c0027cd7:	89 da                	mov    edx,ebx
c0027cd9:	eb 26                	jmp    c0027d01 <__adddf3+0x606>
c0027cdb:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027cde:	29 cf                	sub    edi,ecx
c0027ce0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027ce3:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027ce8:	eb 17                	jmp    c0027d01 <__adddf3+0x606>
c0027cea:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027ced:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027cf0:	eb 0f                	jmp    c0027d01 <__adddf3+0x606>
c0027cf2:	31 d2                	xor    edx,edx
c0027cf4:	31 c0                	xor    eax,eax
c0027cf6:	eb 09                	jmp    c0027d01 <__adddf3+0x606>
c0027cf8:	89 c2                	mov    edx,eax
c0027cfa:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027d01:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027d04:	c1 e1 14             	shl    ecx,0x14
c0027d07:	89 c3                	mov    ebx,eax
c0027d09:	c1 eb 0b             	shr    ebx,0xb
c0027d0c:	09 d9                	or     ecx,ebx
c0027d0e:	89 d3                	mov    ebx,edx
c0027d10:	c1 eb 0b             	shr    ebx,0xb
c0027d13:	c1 e0 15             	shl    eax,0x15
c0027d16:	09 d8                	or     eax,ebx
c0027d18:	89 c7                	mov    edi,eax
c0027d1a:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027d20:	0f 95 c0             	setne  al
c0027d23:	89 c6                	mov    esi,eax
c0027d25:	09 f3                	or     ebx,esi
c0027d27:	83 e3 01             	and    ebx,0x1
c0027d2a:	c1 ea 0a             	shr    edx,0xa
c0027d2d:	21 da                	and    edx,ebx
c0027d2f:	89 f8                	mov    eax,edi
c0027d31:	01 d0                	add    eax,edx
c0027d33:	83 d1 00             	adc    ecx,0x0
c0027d36:	89 c7                	mov    edi,eax
c0027d38:	eb 06                	jmp    c0027d40 <__adddf3+0x645>
c0027d3a:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027d3d:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027d40:	89 f8                	mov    eax,edi
c0027d42:	89 ca                	mov    edx,ecx
c0027d44:	83 c4 24             	add    esp,0x24
c0027d47:	5b                   	pop    ebx
c0027d48:	5e                   	pop    esi
c0027d49:	5f                   	pop    edi
c0027d4a:	5d                   	pop    ebp
c0027d4b:	c3                   	ret    

c0027d4c <__subdf3>:
c0027d4c:	55                   	push   ebp
c0027d4d:	89 e5                	mov    ebp,esp
c0027d4f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027d52:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027d55:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027d5b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027d5e:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027d61:	5d                   	pop    ebp
c0027d62:	e9 94 f9 ff ff       	jmp    c00276fb <__adddf3>

c0027d67 <__negdf2>:
c0027d67:	55                   	push   ebp
c0027d68:	89 e5                	mov    ebp,esp
c0027d6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027d6d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027d70:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027d76:	5d                   	pop    ebp
c0027d77:	c3                   	ret    

c0027d78 <__muldf3>:
c0027d78:	55                   	push   ebp
c0027d79:	89 e5                	mov    ebp,esp
c0027d7b:	57                   	push   edi
c0027d7c:	56                   	push   esi
c0027d7d:	53                   	push   ebx
c0027d7e:	83 ec 24             	sub    esp,0x24
c0027d81:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027d84:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027d87:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027d8a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027d8d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027d90:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027d93:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027d96:	89 c8                	mov    eax,ecx
c0027d98:	c1 f8 14             	sar    eax,0x14
c0027d9b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027d9e:	89 f8                	mov    eax,edi
c0027da0:	89 fb                	mov    ebx,edi
c0027da2:	c1 e3 0b             	shl    ebx,0xb
c0027da5:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027da8:	c1 e1 0b             	shl    ecx,0xb
c0027dab:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027db1:	c1 e8 15             	shr    eax,0x15
c0027db4:	09 c1                	or     ecx,eax
c0027db6:	89 d6                	mov    esi,edx
c0027db8:	89 d0                	mov    eax,edx
c0027dba:	c1 f8 14             	sar    eax,0x14
c0027dbd:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027dc0:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027dc3:	89 c3                	mov    ebx,eax
c0027dc5:	c1 e3 0b             	shl    ebx,0xb
c0027dc8:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027dcb:	c1 e6 0b             	shl    esi,0xb
c0027dce:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027dd4:	c1 e8 15             	shr    eax,0x15
c0027dd7:	09 c6                	or     esi,eax
c0027dd9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027ddc:	25 ff 07 00 00       	and    eax,0x7ff
c0027de1:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027de4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027de7:	25 ff 07 00 00       	and    eax,0x7ff
c0027dec:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027def:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027df2:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027df5:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0027dfc:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027dff:	40                   	inc    eax
c0027e00:	a9 fe 07 00 00       	test   eax,0x7fe
c0027e05:	0f 85 8d 00 00 00    	jne    c0027e98 <__muldf3+0x120>
c0027e0b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027e0e:	09 c8                	or     eax,ecx
c0027e10:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0027e14:	74 44                	je     c0027e5a <__muldf3+0xe2>
c0027e16:	85 c0                	test   eax,eax
c0027e18:	0f 85 31 02 00 00    	jne    c002804f <__muldf3+0x2d7>
c0027e1e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027e21:	40                   	inc    eax
c0027e22:	a9 fe 07 00 00       	test   eax,0x7fe
c0027e27:	75 13                	jne    c0027e3c <__muldf3+0xc4>
c0027e29:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027e2c:	09 f1                	or     ecx,esi
c0027e2e:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027e32:	74 22                	je     c0027e56 <__muldf3+0xde>
c0027e34:	85 c9                	test   ecx,ecx
c0027e36:	0f 85 0d 02 00 00    	jne    c0028049 <__muldf3+0x2d1>
c0027e3c:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027e40:	0f 89 09 02 00 00    	jns    c002804f <__muldf3+0x2d7>
c0027e46:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027e49:	05 00 00 00 80       	add    eax,0x80000000
c0027e4e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027e51:	e9 f9 01 00 00       	jmp    c002804f <__muldf3+0x2d7>
c0027e56:	85 c9                	test   ecx,ecx
c0027e58:	eb 2e                	jmp    c0027e88 <__muldf3+0x110>
c0027e5a:	85 c0                	test   eax,eax
c0027e5c:	74 20                	je     c0027e7e <__muldf3+0x106>
c0027e5e:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027e61:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027e64:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027e67:	c1 ef 1f             	shr    edi,0x1f
c0027e6a:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027e6d:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027e70:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027e73:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027e76:	09 f9                	or     ecx,edi
c0027e78:	78 1e                	js     c0027e98 <__muldf3+0x120>
c0027e7a:	89 c3                	mov    ebx,eax
c0027e7c:	eb e0                	jmp    c0027e5e <__muldf3+0xe6>
c0027e7e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027e81:	f7 d0                	not    eax
c0027e83:	a9 ff 07 00 00       	test   eax,0x7ff
c0027e88:	75 b2                	jne    c0027e3c <__muldf3+0xc4>
c0027e8a:	31 ff                	xor    edi,edi
c0027e8c:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027e93:	e9 b7 01 00 00       	jmp    c002804f <__muldf3+0x2d7>
c0027e98:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027e9b:	40                   	inc    eax
c0027e9c:	a9 fe 07 00 00       	test   eax,0x7fe
c0027ea1:	75 57                	jne    c0027efa <__muldf3+0x182>
c0027ea3:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027ea6:	09 f0                	or     eax,esi
c0027ea8:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027eac:	74 23                	je     c0027ed1 <__muldf3+0x159>
c0027eae:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027eb2:	0f 89 91 01 00 00    	jns    c0028049 <__muldf3+0x2d1>
c0027eb8:	85 c0                	test   eax,eax
c0027eba:	0f 85 89 01 00 00    	jne    c0028049 <__muldf3+0x2d1>
c0027ec0:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027ec3:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027ec9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027ecc:	e9 7e 01 00 00       	jmp    c002804f <__muldf3+0x2d7>
c0027ed1:	85 c0                	test   eax,eax
c0027ed3:	75 0c                	jne    c0027ee1 <__muldf3+0x169>
c0027ed5:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027ed9:	0f 89 6a 01 00 00    	jns    c0028049 <__muldf3+0x2d1>
c0027edf:	eb df                	jmp    c0027ec0 <__muldf3+0x148>
c0027ee1:	01 f6                	add    esi,esi
c0027ee3:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027ee6:	c1 ea 1f             	shr    edx,0x1f
c0027ee9:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027eec:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027eef:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027ef2:	09 d6                	or     esi,edx
c0027ef4:	78 04                	js     c0027efa <__muldf3+0x182>
c0027ef6:	89 c3                	mov    ebx,eax
c0027ef8:	eb e7                	jmp    c0027ee1 <__muldf3+0x169>
c0027efa:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027f00:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027f06:	89 c8                	mov    eax,ecx
c0027f08:	f7 e6                	mul    esi
c0027f0a:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027f0d:	89 c7                	mov    edi,eax
c0027f0f:	89 c8                	mov    eax,ecx
c0027f11:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027f14:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027f17:	89 c1                	mov    ecx,eax
c0027f19:	89 f0                	mov    eax,esi
c0027f1b:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027f1e:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027f21:	89 c6                	mov    esi,eax
c0027f23:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027f26:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027f29:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027f2c:	31 c0                	xor    eax,eax
c0027f2e:	01 f1                	add    ecx,esi
c0027f30:	0f 92 c0             	setb   al
c0027f33:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027f36:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027f39:	83 d6 00             	adc    esi,0x0
c0027f3c:	01 c7                	add    edi,eax
c0027f3e:	83 d6 00             	adc    esi,0x0
c0027f41:	01 ca                	add    edx,ecx
c0027f43:	0f 92 c1             	setb   cl
c0027f46:	0f b6 c9             	movzx  ecx,cl
c0027f49:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027f4c:	83 d6 00             	adc    esi,0x0
c0027f4f:	01 cf                	add    edi,ecx
c0027f51:	83 d6 00             	adc    esi,0x0
c0027f54:	31 c9                	xor    ecx,ecx
c0027f56:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027f59:	0f 95 c1             	setne  cl
c0027f5c:	09 cf                	or     edi,ecx
c0027f5e:	85 f6                	test   esi,esi
c0027f60:	78 0c                	js     c0027f6e <__muldf3+0x1f6>
c0027f62:	01 f6                	add    esi,esi
c0027f64:	89 f8                	mov    eax,edi
c0027f66:	c1 e8 1f             	shr    eax,0x1f
c0027f69:	09 c6                	or     esi,eax
c0027f6b:	01 ff                	add    edi,edi
c0027f6d:	4b                   	dec    ebx
c0027f6e:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027f74:	0f 8f 85 00 00 00    	jg     c0027fff <__muldf3+0x287>
c0027f7a:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027f80:	85 db                	test   ebx,ebx
c0027f82:	0f 8f 84 00 00 00    	jg     c002800c <__muldf3+0x294>
c0027f88:	83 fb cc             	cmp    ebx,0xffffffcc
c0027f8b:	7c 79                	jl     c0028006 <__muldf3+0x28e>
c0027f8d:	ba 01 00 00 00       	mov    edx,0x1
c0027f92:	29 da                	sub    edx,ebx
c0027f94:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027f9a:	83 fa 1f             	cmp    edx,0x1f
c0027f9d:	7e 30                	jle    c0027fcf <__muldf3+0x257>
c0027f9f:	83 fa 20             	cmp    edx,0x20
c0027fa2:	75 0b                	jne    c0027faf <__muldf3+0x237>
c0027fa4:	31 c0                	xor    eax,eax
c0027fa6:	85 ff                	test   edi,edi
c0027fa8:	0f 95 c0             	setne  al
c0027fab:	89 c7                	mov    edi,eax
c0027fad:	eb 1a                	jmp    c0027fc9 <__muldf3+0x251>
c0027faf:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027fb2:	89 f0                	mov    eax,esi
c0027fb4:	d3 e0                	shl    eax,cl
c0027fb6:	09 f8                	or     eax,edi
c0027fb8:	0f 95 c0             	setne  al
c0027fbb:	0f b6 c0             	movzx  eax,al
c0027fbe:	89 c7                	mov    edi,eax
c0027fc0:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027fc5:	29 d9                	sub    ecx,ebx
c0027fc7:	d3 ee                	shr    esi,cl
c0027fc9:	09 f7                	or     edi,esi
c0027fcb:	31 db                	xor    ebx,ebx
c0027fcd:	eb 3b                	jmp    c002800a <__muldf3+0x292>
c0027fcf:	83 c3 1f             	add    ebx,0x1f
c0027fd2:	89 f0                	mov    eax,esi
c0027fd4:	88 d9                	mov    cl,bl
c0027fd6:	d3 e0                	shl    eax,cl
c0027fd8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027fdb:	89 f8                	mov    eax,edi
c0027fdd:	88 d1                	mov    cl,dl
c0027fdf:	d3 e8                	shr    eax,cl
c0027fe1:	89 c1                	mov    ecx,eax
c0027fe3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027fe6:	09 c8                	or     eax,ecx
c0027fe8:	88 d9                	mov    cl,bl
c0027fea:	d3 e7                	shl    edi,cl
c0027fec:	31 db                	xor    ebx,ebx
c0027fee:	85 ff                	test   edi,edi
c0027ff0:	0f 95 c3             	setne  bl
c0027ff3:	89 df                	mov    edi,ebx
c0027ff5:	09 c7                	or     edi,eax
c0027ff7:	88 d1                	mov    cl,dl
c0027ff9:	d3 ee                	shr    esi,cl
c0027ffb:	31 db                	xor    ebx,ebx
c0027ffd:	eb 0d                	jmp    c002800c <__muldf3+0x294>
c0027fff:	bb ff 07 00 00       	mov    ebx,0x7ff
c0028004:	eb 02                	jmp    c0028008 <__muldf3+0x290>
c0028006:	31 db                	xor    ebx,ebx
c0028008:	31 ff                	xor    edi,edi
c002800a:	31 f6                	xor    esi,esi
c002800c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002800f:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0028012:	25 00 f8 ff ff       	and    eax,0xfffff800
c0028017:	09 c3                	or     ebx,eax
c0028019:	c1 e3 14             	shl    ebx,0x14
c002801c:	89 f0                	mov    eax,esi
c002801e:	c1 e8 0b             	shr    eax,0xb
c0028021:	09 c3                	or     ebx,eax
c0028023:	89 f8                	mov    eax,edi
c0028025:	c1 e8 0b             	shr    eax,0xb
c0028028:	c1 e6 15             	shl    esi,0x15
c002802b:	09 c6                	or     esi,eax
c002802d:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0028033:	0f 95 c1             	setne  cl
c0028036:	09 c8                	or     eax,ecx
c0028038:	83 e0 01             	and    eax,0x1
c002803b:	c1 ef 0a             	shr    edi,0xa
c002803e:	21 c7                	and    edi,eax
c0028040:	01 f7                	add    edi,esi
c0028042:	83 d3 00             	adc    ebx,0x0
c0028045:	89 da                	mov    edx,ebx
c0028047:	eb 03                	jmp    c002804c <__muldf3+0x2d4>
c0028049:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c002804c:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c002804f:	89 f8                	mov    eax,edi
c0028051:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028054:	83 c4 24             	add    esp,0x24
c0028057:	5b                   	pop    ebx
c0028058:	5e                   	pop    esi
c0028059:	5f                   	pop    edi
c002805a:	5d                   	pop    ebp
c002805b:	c3                   	ret    

c002805c <__divdf3>:
c002805c:	55                   	push   ebp
c002805d:	89 e5                	mov    ebp,esp
c002805f:	57                   	push   edi
c0028060:	56                   	push   esi
c0028061:	53                   	push   ebx
c0028062:	83 ec 2c             	sub    esp,0x2c
c0028065:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0028068:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002806b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002806e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0028071:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0028074:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0028077:	89 ce                	mov    esi,ecx
c0028079:	89 c8                	mov    eax,ecx
c002807b:	c1 f8 14             	sar    eax,0x14
c002807e:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0028081:	89 f8                	mov    eax,edi
c0028083:	89 fb                	mov    ebx,edi
c0028085:	c1 e3 0b             	shl    ebx,0xb
c0028088:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c002808b:	c1 e6 0b             	shl    esi,0xb
c002808e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0028094:	c1 e8 15             	shr    eax,0x15
c0028097:	09 c6                	or     esi,eax
c0028099:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c002809c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002809f:	89 c2                	mov    edx,eax
c00280a1:	c1 fa 14             	sar    edx,0x14
c00280a4:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00280a7:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00280aa:	89 de                	mov    esi,ebx
c00280ac:	c1 e6 0b             	shl    esi,0xb
c00280af:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00280b2:	c1 e0 0b             	shl    eax,0xb
c00280b5:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00280ba:	c1 eb 15             	shr    ebx,0x15
c00280bd:	09 d8                	or     eax,ebx
c00280bf:	89 c2                	mov    edx,eax
c00280c1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00280c4:	25 ff 07 00 00       	and    eax,0x7ff
c00280c9:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00280cc:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00280cf:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00280d5:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c00280d8:	29 d8                	sub    eax,ebx
c00280da:	05 ff 03 00 00       	add    eax,0x3ff
c00280df:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00280e2:	46                   	inc    esi
c00280e3:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00280e9:	0f 85 a5 00 00 00    	jne    c0028194 <__divdf3+0x138>
c00280ef:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00280f2:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c00280f5:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c00280f9:	74 2a                	je     c0028125 <__divdf3+0xc9>
c00280fb:	85 f6                	test   esi,esi
c00280fd:	0f 85 cc 02 00 00    	jne    c00283cf <__divdf3+0x373>
c0028103:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028106:	40                   	inc    eax
c0028107:	a9 fe 07 00 00       	test   eax,0x7fe
c002810c:	75 26                	jne    c0028134 <__divdf3+0xd8>
c002810e:	85 db                	test   ebx,ebx
c0028110:	74 22                	je     c0028134 <__divdf3+0xd8>
c0028112:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028115:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028118:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002811b:	09 d0                	or     eax,edx
c002811d:	0f 85 ac 02 00 00    	jne    c00283cf <__divdf3+0x373>
c0028123:	eb 63                	jmp    c0028188 <__divdf3+0x12c>
c0028125:	85 f6                	test   esi,esi
c0028127:	75 22                	jne    c002814b <__divdf3+0xef>
c0028129:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002812c:	40                   	inc    eax
c002812d:	a9 fe 07 00 00       	test   eax,0x7fe
c0028132:	74 36                	je     c002816a <__divdf3+0x10e>
c0028134:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0028138:	0f 89 91 02 00 00    	jns    c00283cf <__divdf3+0x373>
c002813e:	89 f8                	mov    eax,edi
c0028140:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0028146:	e9 80 02 00 00       	jmp    c00283cb <__divdf3+0x36f>
c002814b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002814e:	01 f6                	add    esi,esi
c0028150:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0028153:	c1 ef 1f             	shr    edi,0x1f
c0028156:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028159:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c002815c:	8d 48 ff             	lea    ecx,[eax-0x1]
c002815f:	09 f7                	or     edi,esi
c0028161:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0028164:	78 2e                	js     c0028194 <__divdf3+0x138>
c0028166:	89 c8                	mov    eax,ecx
c0028168:	eb e1                	jmp    c002814b <__divdf3+0xef>
c002816a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002816d:	09 d0                	or     eax,edx
c002816f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0028173:	74 0f                	je     c0028184 <__divdf3+0x128>
c0028175:	85 c0                	test   eax,eax
c0028177:	74 bb                	je     c0028134 <__divdf3+0xd8>
c0028179:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c002817c:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c002817f:	e9 4b 02 00 00       	jmp    c00283cf <__divdf3+0x373>
c0028184:	85 c0                	test   eax,eax
c0028186:	75 ac                	jne    c0028134 <__divdf3+0xd8>
c0028188:	31 ff                	xor    edi,edi
c002818a:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c002818f:	e9 3b 02 00 00       	jmp    c00283cf <__divdf3+0x373>
c0028194:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028197:	8d 4f 01             	lea    ecx,[edi+0x1]
c002819a:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c00281a0:	75 6b                	jne    c002820d <__divdf3+0x1b1>
c00281a2:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00281a5:	09 d6                	or     esi,edx
c00281a7:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00281ab:	74 28                	je     c00281d5 <__divdf3+0x179>
c00281ad:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00281b0:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00281b3:	85 f6                	test   esi,esi
c00281b5:	0f 85 14 02 00 00    	jne    c00283cf <__divdf3+0x373>
c00281bb:	31 ff                	xor    edi,edi
c00281bd:	31 c9                	xor    ecx,ecx
c00281bf:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00281c2:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c00281c5:	0f 89 04 02 00 00    	jns    c00283cf <__divdf3+0x373>
c00281cb:	b9 00 00 00 80       	mov    ecx,0x80000000
c00281d0:	e9 fa 01 00 00       	jmp    c00283cf <__divdf3+0x373>
c00281d5:	85 f6                	test   esi,esi
c00281d7:	75 1b                	jne    c00281f4 <__divdf3+0x198>
c00281d9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00281dc:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c00281df:	25 00 00 00 80       	and    eax,0x80000000
c00281e4:	31 c9                	xor    ecx,ecx
c00281e6:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c00281eb:	89 cf                	mov    edi,ecx
c00281ed:	89 c1                	mov    ecx,eax
c00281ef:	e9 db 01 00 00       	jmp    c00283cf <__divdf3+0x373>
c00281f4:	01 d2                	add    edx,edx
c00281f6:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00281f9:	c1 eb 1f             	shr    ebx,0x1f
c00281fc:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00281ff:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0028202:	8d 48 01             	lea    ecx,[eax+0x1]
c0028205:	09 da                	or     edx,ebx
c0028207:	78 04                	js     c002820d <__divdf3+0x1b1>
c0028209:	89 c8                	mov    eax,ecx
c002820b:	eb e7                	jmp    c00281f4 <__divdf3+0x198>
c002820d:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028210:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028216:	81 ca 00 00 00 80    	or     edx,0x80000000
c002821c:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c002821f:	39 d6                	cmp    esi,edx
c0028221:	77 0d                	ja     c0028230 <__divdf3+0x1d4>
c0028223:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0028226:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0028229:	72 1b                	jb     c0028246 <__divdf3+0x1ea>
c002822b:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c002822e:	75 16                	jne    c0028246 <__divdf3+0x1ea>
c0028230:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028233:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028236:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0028239:	83 de 00             	sbb    esi,0x0
c002823c:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c002823f:	ba 01 00 00 00       	mov    edx,0x1
c0028244:	eb 02                	jmp    c0028248 <__divdf3+0x1ec>
c0028246:	31 d2                	xor    edx,edx
c0028248:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c002824f:	31 ff                	xor    edi,edi
c0028251:	01 ff                	add    edi,edi
c0028253:	89 d1                	mov    ecx,edx
c0028255:	c1 e9 1f             	shr    ecx,0x1f
c0028258:	09 cf                	or     edi,ecx
c002825a:	8d 1c 12             	lea    ebx,[edx+edx*1]
c002825d:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0028260:	89 da                	mov    edx,ebx
c0028262:	89 f3                	mov    ebx,esi
c0028264:	8d 34 36             	lea    esi,[esi+esi*1]
c0028267:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002826a:	c1 e9 1f             	shr    ecx,0x1f
c002826d:	09 ce                	or     esi,ecx
c002826f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028272:	01 c9                	add    ecx,ecx
c0028274:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0028277:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c002827a:	85 db                	test   ebx,ebx
c002827c:	78 29                	js     c00282a7 <__divdf3+0x24b>
c002827e:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0028281:	72 07                	jb     c002828a <__divdf3+0x22e>
c0028283:	75 3c                	jne    c00282c1 <__divdf3+0x265>
c0028285:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028288:	77 37                	ja     c00282c1 <__divdf3+0x265>
c002828a:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002828d:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0028290:	31 d2                	xor    edx,edx
c0028292:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0028295:	0f 97 c2             	seta   dl
c0028298:	29 d6                	sub    esi,edx
c002829a:	89 d9                	mov    ecx,ebx
c002829c:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c002829f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00282a2:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00282a5:	eb 17                	jmp    c00282be <__divdf3+0x262>
c00282a7:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00282aa:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00282ad:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00282b0:	0f 97 c1             	seta   cl
c00282b3:	0f b6 c9             	movzx  ecx,cl
c00282b6:	29 ce                	sub    esi,ecx
c00282b8:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c00282bb:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c00282be:	83 ca 01             	or     edx,0x1
c00282c1:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c00282c4:	75 8b                	jne    c0028251 <__divdf3+0x1f5>
c00282c6:	c1 e7 09             	shl    edi,0x9
c00282c9:	89 d1                	mov    ecx,edx
c00282cb:	c1 e9 17             	shr    ecx,0x17
c00282ce:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00282d1:	09 f3                	or     ebx,esi
c00282d3:	0f 95 c3             	setne  bl
c00282d6:	0f b6 db             	movzx  ebx,bl
c00282d9:	c1 e2 09             	shl    edx,0x9
c00282dc:	09 d3                	or     ebx,edx
c00282de:	89 ca                	mov    edx,ecx
c00282e0:	09 fa                	or     edx,edi
c00282e2:	78 0c                	js     c00282f0 <__divdf3+0x294>
c00282e4:	01 d2                	add    edx,edx
c00282e6:	89 d9                	mov    ecx,ebx
c00282e8:	c1 e9 1f             	shr    ecx,0x1f
c00282eb:	09 ca                	or     edx,ecx
c00282ed:	01 db                	add    ebx,ebx
c00282ef:	48                   	dec    eax
c00282f0:	3d fe 07 00 00       	cmp    eax,0x7fe
c00282f5:	0f 8f 83 00 00 00    	jg     c002837e <__divdf3+0x322>
c00282fb:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028301:	85 c0                	test   eax,eax
c0028303:	0f 8f 82 00 00 00    	jg     c002838b <__divdf3+0x32f>
c0028309:	83 f8 cc             	cmp    eax,0xffffffcc
c002830c:	7c 77                	jl     c0028385 <__divdf3+0x329>
c002830e:	be 01 00 00 00       	mov    esi,0x1
c0028313:	29 c6                	sub    esi,eax
c0028315:	81 ca 00 00 00 80    	or     edx,0x80000000
c002831b:	83 fe 1f             	cmp    esi,0x1f
c002831e:	7e 2f                	jle    c002834f <__divdf3+0x2f3>
c0028320:	83 fe 20             	cmp    esi,0x20
c0028323:	75 0a                	jne    c002832f <__divdf3+0x2d3>
c0028325:	85 db                	test   ebx,ebx
c0028327:	0f 95 c3             	setne  bl
c002832a:	0f b6 db             	movzx  ebx,bl
c002832d:	eb 1a                	jmp    c0028349 <__divdf3+0x2ed>
c002832f:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0028332:	89 d7                	mov    edi,edx
c0028334:	d3 e7                	shl    edi,cl
c0028336:	89 f9                	mov    ecx,edi
c0028338:	09 d9                	or     ecx,ebx
c002833a:	0f 95 c3             	setne  bl
c002833d:	0f b6 db             	movzx  ebx,bl
c0028340:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0028345:	29 c1                	sub    ecx,eax
c0028347:	d3 ea                	shr    edx,cl
c0028349:	09 d3                	or     ebx,edx
c002834b:	31 c0                	xor    eax,eax
c002834d:	eb 3a                	jmp    c0028389 <__divdf3+0x32d>
c002834f:	83 c0 1f             	add    eax,0x1f
c0028352:	89 d7                	mov    edi,edx
c0028354:	88 c1                	mov    cl,al
c0028356:	d3 e7                	shl    edi,cl
c0028358:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002835b:	89 df                	mov    edi,ebx
c002835d:	89 f1                	mov    ecx,esi
c002835f:	d3 ef                	shr    edi,cl
c0028361:	89 f9                	mov    ecx,edi
c0028363:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0028366:	09 cf                	or     edi,ecx
c0028368:	88 c1                	mov    cl,al
c002836a:	d3 e3                	shl    ebx,cl
c002836c:	85 db                	test   ebx,ebx
c002836e:	0f 95 c3             	setne  bl
c0028371:	0f b6 db             	movzx  ebx,bl
c0028374:	09 fb                	or     ebx,edi
c0028376:	89 f1                	mov    ecx,esi
c0028378:	d3 ea                	shr    edx,cl
c002837a:	31 c0                	xor    eax,eax
c002837c:	eb 0d                	jmp    c002838b <__divdf3+0x32f>
c002837e:	b8 ff 07 00 00       	mov    eax,0x7ff
c0028383:	eb 02                	jmp    c0028387 <__divdf3+0x32b>
c0028385:	31 c0                	xor    eax,eax
c0028387:	31 db                	xor    ebx,ebx
c0028389:	31 d2                	xor    edx,edx
c002838b:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c002838e:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0028391:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0028397:	09 c8                	or     eax,ecx
c0028399:	c1 e0 14             	shl    eax,0x14
c002839c:	89 d1                	mov    ecx,edx
c002839e:	c1 e9 0b             	shr    ecx,0xb
c00283a1:	09 c8                	or     eax,ecx
c00283a3:	89 c6                	mov    esi,eax
c00283a5:	89 d9                	mov    ecx,ebx
c00283a7:	c1 e9 0b             	shr    ecx,0xb
c00283aa:	c1 e2 15             	shl    edx,0x15
c00283ad:	09 ca                	or     edx,ecx
c00283af:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c00283b5:	0f 95 c0             	setne  al
c00283b8:	09 c1                	or     ecx,eax
c00283ba:	83 e1 01             	and    ecx,0x1
c00283bd:	c1 eb 0a             	shr    ebx,0xa
c00283c0:	21 cb                	and    ebx,ecx
c00283c2:	01 d3                	add    ebx,edx
c00283c4:	89 d8                	mov    eax,ebx
c00283c6:	83 d6 00             	adc    esi,0x0
c00283c9:	89 f2                	mov    edx,esi
c00283cb:	89 c7                	mov    edi,eax
c00283cd:	89 d1                	mov    ecx,edx
c00283cf:	89 f8                	mov    eax,edi
c00283d1:	89 ca                	mov    edx,ecx
c00283d3:	83 c4 2c             	add    esp,0x2c
c00283d6:	5b                   	pop    ebx
c00283d7:	5e                   	pop    esi
c00283d8:	5f                   	pop    edi
c00283d9:	5d                   	pop    ebp
c00283da:	c3                   	ret    

c00283db <__floatsidf>:
c00283db:	55                   	push   ebp
c00283dc:	89 e5                	mov    ebp,esp
c00283de:	56                   	push   esi
c00283df:	53                   	push   ebx
c00283e0:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00283e3:	85 db                	test   ebx,ebx
c00283e5:	7e 15                	jle    c00283fc <__floatsidf+0x21>
c00283e7:	0f bd cb             	bsr    ecx,ebx
c00283ea:	83 f1 1f             	xor    ecx,0x1f
c00283ed:	d3 e3                	shl    ebx,cl
c00283ef:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00283f5:	b8 1e 04 00 00       	mov    eax,0x41e
c00283fa:	eb 21                	jmp    c002841d <__floatsidf+0x42>
c00283fc:	b8 00 00 00 00       	mov    eax,0x0
c0028401:	ba 00 00 00 00       	mov    edx,0x0
c0028406:	74 2a                	je     c0028432 <__floatsidf+0x57>
c0028408:	f7 db                	neg    ebx
c002840a:	0f bd cb             	bsr    ecx,ebx
c002840d:	83 f1 1f             	xor    ecx,0x1f
c0028410:	d3 e3                	shl    ebx,cl
c0028412:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028418:	b8 1e 0c 00 00       	mov    eax,0xc1e
c002841d:	29 c8                	sub    eax,ecx
c002841f:	c1 e0 14             	shl    eax,0x14
c0028422:	89 c1                	mov    ecx,eax
c0028424:	89 de                	mov    esi,ebx
c0028426:	c1 ee 0b             	shr    esi,0xb
c0028429:	09 f1                	or     ecx,esi
c002842b:	89 ca                	mov    edx,ecx
c002842d:	c1 e3 15             	shl    ebx,0x15
c0028430:	89 d8                	mov    eax,ebx
c0028432:	5b                   	pop    ebx
c0028433:	5e                   	pop    esi
c0028434:	5d                   	pop    ebp
c0028435:	c3                   	ret    

c0028436 <__floatunsidf>:
c0028436:	55                   	push   ebp
c0028437:	89 e5                	mov    ebp,esp
c0028439:	56                   	push   esi
c002843a:	53                   	push   ebx
c002843b:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002843e:	85 db                	test   ebx,ebx
c0028440:	74 2a                	je     c002846c <__floatunsidf+0x36>
c0028442:	0f bd cb             	bsr    ecx,ebx
c0028445:	83 f1 1f             	xor    ecx,0x1f
c0028448:	d3 e3                	shl    ebx,cl
c002844a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028450:	b8 1e 04 00 00       	mov    eax,0x41e
c0028455:	29 c8                	sub    eax,ecx
c0028457:	c1 e0 14             	shl    eax,0x14
c002845a:	89 c1                	mov    ecx,eax
c002845c:	89 de                	mov    esi,ebx
c002845e:	c1 ee 0b             	shr    esi,0xb
c0028461:	09 f1                	or     ecx,esi
c0028463:	89 ca                	mov    edx,ecx
c0028465:	c1 e3 15             	shl    ebx,0x15
c0028468:	89 d8                	mov    eax,ebx
c002846a:	eb 04                	jmp    c0028470 <__floatunsidf+0x3a>
c002846c:	31 c0                	xor    eax,eax
c002846e:	31 d2                	xor    edx,edx
c0028470:	5b                   	pop    ebx
c0028471:	5e                   	pop    esi
c0028472:	5d                   	pop    ebp
c0028473:	c3                   	ret    

c0028474 <__fixdfsi>:
c0028474:	55                   	push   ebp
c0028475:	89 e5                	mov    ebp,esp
c0028477:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002847a:	89 d1                	mov    ecx,edx
c002847c:	c1 e1 0b             	shl    ecx,0xb
c002847f:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028485:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028488:	c1 e8 15             	shr    eax,0x15
c002848b:	09 c1                	or     ecx,eax
c002848d:	c1 fa 14             	sar    edx,0x14
c0028490:	78 1f                	js     c00284b1 <__fixdfsi+0x3d>
c0028492:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028498:	31 c0                	xor    eax,eax
c002849a:	83 fa 1e             	cmp    edx,0x1e
c002849d:	77 40                	ja     c00284df <__fixdfsi+0x6b>
c002849f:	89 c8                	mov    eax,ecx
c00284a1:	0d 00 00 00 80       	or     eax,0x80000000
c00284a6:	b9 1f 00 00 00       	mov    ecx,0x1f
c00284ab:	29 d1                	sub    ecx,edx
c00284ad:	d3 e8                	shr    eax,cl
c00284af:	eb 2e                	jmp    c00284df <__fixdfsi+0x6b>
c00284b1:	31 c0                	xor    eax,eax
c00284b3:	81 c2 01 04 00 00    	add    edx,0x401
c00284b9:	78 24                	js     c00284df <__fixdfsi+0x6b>
c00284bb:	83 fa 1e             	cmp    edx,0x1e
c00284be:	7e 09                	jle    c00284c9 <__fixdfsi+0x55>
c00284c0:	83 fa 1f             	cmp    edx,0x1f
c00284c3:	75 18                	jne    c00284dd <__fixdfsi+0x69>
c00284c5:	85 c9                	test   ecx,ecx
c00284c7:	75 14                	jne    c00284dd <__fixdfsi+0x69>
c00284c9:	89 c8                	mov    eax,ecx
c00284cb:	0d 00 00 00 80       	or     eax,0x80000000
c00284d0:	b9 1f 00 00 00       	mov    ecx,0x1f
c00284d5:	29 d1                	sub    ecx,edx
c00284d7:	d3 e8                	shr    eax,cl
c00284d9:	f7 d8                	neg    eax
c00284db:	eb 02                	jmp    c00284df <__fixdfsi+0x6b>
c00284dd:	31 c0                	xor    eax,eax
c00284df:	5d                   	pop    ebp
c00284e0:	c3                   	ret    

c00284e1 <__fixunsdfsi>:
c00284e1:	55                   	push   ebp
c00284e2:	89 e5                	mov    ebp,esp
c00284e4:	53                   	push   ebx
c00284e5:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00284e8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00284eb:	89 d3                	mov    ebx,edx
c00284ed:	c1 fb 14             	sar    ebx,0x14
c00284f0:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c00284f6:	31 c0                	xor    eax,eax
c00284f8:	83 fb 1f             	cmp    ebx,0x1f
c00284fb:	77 1d                	ja     c002851a <__fixunsdfsi+0x39>
c00284fd:	89 d0                	mov    eax,edx
c00284ff:	c1 e0 0b             	shl    eax,0xb
c0028502:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028507:	c1 e9 15             	shr    ecx,0x15
c002850a:	09 c8                	or     eax,ecx
c002850c:	0d 00 00 00 80       	or     eax,0x80000000
c0028511:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028516:	29 d9                	sub    ecx,ebx
c0028518:	d3 e8                	shr    eax,cl
c002851a:	5b                   	pop    ebx
c002851b:	5d                   	pop    ebp
c002851c:	c3                   	ret    

c002851d <__cmpdf2>:
c002851d:	55                   	push   ebp
c002851e:	89 e5                	mov    ebp,esp
c0028520:	57                   	push   edi
c0028521:	56                   	push   esi
c0028522:	53                   	push   ebx
c0028523:	83 ec 0c             	sub    esp,0xc
c0028526:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028529:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002852c:	89 ca                	mov    edx,ecx
c002852e:	c1 ea 14             	shr    edx,0x14
c0028531:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0028537:	89 cb                	mov    ebx,ecx
c0028539:	c1 fb 1f             	sar    ebx,0x1f
c002853c:	31 da                	xor    edx,ebx
c002853e:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028541:	89 df                	mov    edi,ebx
c0028543:	c1 e7 0b             	shl    edi,0xb
c0028546:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028549:	c1 e1 0b             	shl    ecx,0xb
c002854c:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028552:	c1 eb 15             	shr    ebx,0x15
c0028555:	09 d9                	or     ecx,ebx
c0028557:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c002855a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002855d:	89 ce                	mov    esi,ecx
c002855f:	c1 ee 14             	shr    esi,0x14
c0028562:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028568:	89 cb                	mov    ebx,ecx
c002856a:	c1 fb 1f             	sar    ebx,0x1f
c002856d:	31 de                	xor    esi,ebx
c002856f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0028572:	89 df                	mov    edi,ebx
c0028574:	c1 e7 0b             	shl    edi,0xb
c0028577:	c1 e1 0b             	shl    ecx,0xb
c002857a:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028580:	c1 eb 15             	shr    ebx,0x15
c0028583:	09 d9                	or     ecx,ebx
c0028585:	89 d3                	mov    ebx,edx
c0028587:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c002858d:	43                   	inc    ebx
c002858e:	83 fb 01             	cmp    ebx,0x1
c0028591:	77 08                	ja     c002859b <__cmpdf2+0x7e>
c0028593:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028596:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028599:	75 68                	jne    c0028603 <__cmpdf2+0xe6>
c002859b:	89 f3                	mov    ebx,esi
c002859d:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00285a3:	43                   	inc    ebx
c00285a4:	83 fb 01             	cmp    ebx,0x1
c00285a7:	77 06                	ja     c00285af <__cmpdf2+0x92>
c00285a9:	89 fb                	mov    ebx,edi
c00285ab:	09 cb                	or     ebx,ecx
c00285ad:	75 54                	jne    c0028603 <__cmpdf2+0xe6>
c00285af:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00285b2:	09 f8                	or     eax,edi
c00285b4:	09 c8                	or     eax,ecx
c00285b6:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c00285b9:	75 12                	jne    c00285cd <__cmpdf2+0xb0>
c00285bb:	8d 42 01             	lea    eax,[edx+0x1]
c00285be:	83 f8 01             	cmp    eax,0x1
c00285c1:	77 0a                	ja     c00285cd <__cmpdf2+0xb0>
c00285c3:	8d 5e 01             	lea    ebx,[esi+0x1]
c00285c6:	31 c0                	xor    eax,eax
c00285c8:	83 fb 01             	cmp    ebx,0x1
c00285cb:	76 36                	jbe    c0028603 <__cmpdf2+0xe6>
c00285cd:	b8 01 00 00 00       	mov    eax,0x1
c00285d2:	39 f2                	cmp    edx,esi
c00285d4:	7f 2d                	jg     c0028603 <__cmpdf2+0xe6>
c00285d6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00285db:	7c 26                	jl     c0028603 <__cmpdf2+0xe6>
c00285dd:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00285e0:	77 07                	ja     c00285e9 <__cmpdf2+0xcc>
c00285e2:	72 16                	jb     c00285fa <__cmpdf2+0xdd>
c00285e4:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c00285e7:	76 0a                	jbe    c00285f3 <__cmpdf2+0xd6>
c00285e9:	89 d0                	mov    eax,edx
c00285eb:	c1 f8 1f             	sar    eax,0x1f
c00285ee:	83 c8 01             	or     eax,0x1
c00285f1:	eb 10                	jmp    c0028603 <__cmpdf2+0xe6>
c00285f3:	b8 00 00 00 00       	mov    eax,0x0
c00285f8:	73 09                	jae    c0028603 <__cmpdf2+0xe6>
c00285fa:	89 d0                	mov    eax,edx
c00285fc:	c1 f8 1f             	sar    eax,0x1f
c00285ff:	83 e0 02             	and    eax,0x2
c0028602:	48                   	dec    eax
c0028603:	83 c4 0c             	add    esp,0xc
c0028606:	5b                   	pop    ebx
c0028607:	5e                   	pop    esi
c0028608:	5f                   	pop    edi
c0028609:	5d                   	pop    ebp
c002860a:	c3                   	ret    

c002860b <__eqdf2>:
c002860b:	55                   	push   ebp
c002860c:	89 e5                	mov    ebp,esp
c002860e:	50                   	push   eax
c002860f:	6a 01                	push   0x1
c0028611:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028614:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028617:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002861a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002861d:	e8 fb fe ff ff       	call   c002851d <__cmpdf2>
c0028622:	83 c4 18             	add    esp,0x18
c0028625:	c9                   	leave  
c0028626:	c3                   	ret    

c0028627 <__nedf2>:
c0028627:	eb e2                	jmp    c002860b <__eqdf2>

c0028629 <__gtdf2>:
c0028629:	55                   	push   ebp
c002862a:	89 e5                	mov    ebp,esp
c002862c:	50                   	push   eax
c002862d:	6a ff                	push   0xffffffff
c002862f:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028632:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028635:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028638:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002863b:	e8 dd fe ff ff       	call   c002851d <__cmpdf2>
c0028640:	83 c4 18             	add    esp,0x18
c0028643:	c9                   	leave  
c0028644:	c3                   	ret    

c0028645 <__gedf2>:
c0028645:	eb e2                	jmp    c0028629 <__gtdf2>

c0028647 <__ltdf2>:
c0028647:	eb c2                	jmp    c002860b <__eqdf2>

c0028649 <__ledf2>:
c0028649:	eb c0                	jmp    c002860b <__eqdf2>

c002864b <__truncdfsf2>:
c002864b:	55                   	push   ebp
c002864c:	89 e5                	mov    ebp,esp
c002864e:	57                   	push   edi
c002864f:	56                   	push   esi
c0028650:	53                   	push   ebx
c0028651:	83 ec 0c             	sub    esp,0xc
c0028654:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028657:	89 d1                	mov    ecx,edx
c0028659:	c1 f9 14             	sar    ecx,0x14
c002865c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002865f:	89 df                	mov    edi,ebx
c0028661:	c1 e7 0b             	shl    edi,0xb
c0028664:	89 d0                	mov    eax,edx
c0028666:	c1 e0 0b             	shl    eax,0xb
c0028669:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002866e:	c1 eb 15             	shr    ebx,0x15
c0028671:	09 d8                	or     eax,ebx
c0028673:	89 cb                	mov    ebx,ecx
c0028675:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002867b:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028681:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0028687:	0f 86 9e 00 00 00    	jbe    c002872b <__truncdfsf2+0xe0>
c002868d:	85 db                	test   ebx,ebx
c002868f:	75 0a                	jne    c002869b <__truncdfsf2+0x50>
c0028691:	c1 fa 17             	sar    edx,0x17
c0028694:	30 d2                	xor    dl,dl
c0028696:	e9 84 00 00 00       	jmp    c002871f <__truncdfsf2+0xd4>
c002869b:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c00286a1:	83 fe 83             	cmp    esi,0xffffff83
c00286a4:	7d 4b                	jge    c00286f1 <__truncdfsf2+0xa6>
c00286a6:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c00286ab:	29 f1                	sub    ecx,esi
c00286ad:	83 f9 1f             	cmp    ecx,0x1f
c00286b0:	7f 6b                	jg     c002871d <__truncdfsf2+0xd2>
c00286b2:	0d 00 00 00 80       	or     eax,0x80000000
c00286b7:	89 c3                	mov    ebx,eax
c00286b9:	d3 eb                	shr    ebx,cl
c00286bb:	be 01 00 00 00       	mov    esi,0x1
c00286c0:	d3 e6                	shl    esi,cl
c00286c2:	4e                   	dec    esi
c00286c3:	21 f0                	and    eax,esi
c00286c5:	09 f8                	or     eax,edi
c00286c7:	0f 95 c0             	setne  al
c00286ca:	0f b6 c0             	movzx  eax,al
c00286cd:	09 c3                	or     ebx,eax
c00286cf:	89 d9                	mov    ecx,ebx
c00286d1:	c1 e9 08             	shr    ecx,0x8
c00286d4:	f6 c3 7f             	test   bl,0x7f
c00286d7:	0f 95 c0             	setne  al
c00286da:	09 c8                	or     eax,ecx
c00286dc:	83 e0 01             	and    eax,0x1
c00286df:	c1 eb 07             	shr    ebx,0x7
c00286e2:	21 c3                	and    ebx,eax
c00286e4:	81 e2 00 00 00 80    	and    edx,0x80000000
c00286ea:	09 d1                	or     ecx,edx
c00286ec:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c00286ef:	eb 76                	jmp    c0028767 <__truncdfsf2+0x11c>
c00286f1:	83 c6 80             	add    esi,0xffffff80
c00286f4:	7e 1d                	jle    c0028713 <__truncdfsf2+0xc8>
c00286f6:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c00286fc:	75 0b                	jne    c0028709 <__truncdfsf2+0xbe>
c00286fe:	09 f8                	or     eax,edi
c0028700:	74 09                	je     c002870b <__truncdfsf2+0xc0>
c0028702:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0028707:	eb 02                	jmp    c002870b <__truncdfsf2+0xc0>
c0028709:	31 c0                	xor    eax,eax
c002870b:	c1 fa 17             	sar    edx,0x17
c002870e:	80 ca ff             	or     dl,0xff
c0028711:	eb 0e                	jmp    c0028721 <__truncdfsf2+0xd6>
c0028713:	c1 fa 1f             	sar    edx,0x1f
c0028716:	c1 e2 08             	shl    edx,0x8
c0028719:	09 ca                	or     edx,ecx
c002871b:	eb 04                	jmp    c0028721 <__truncdfsf2+0xd6>
c002871d:	31 d2                	xor    edx,edx
c002871f:	31 c0                	xor    eax,eax
c0028721:	c1 e2 17             	shl    edx,0x17
c0028724:	c1 e8 08             	shr    eax,0x8
c0028727:	09 d0                	or     eax,edx
c0028729:	eb 3c                	jmp    c0028767 <__truncdfsf2+0x11c>
c002872b:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028731:	89 ca                	mov    edx,ecx
c0028733:	c1 fa 0b             	sar    edx,0xb
c0028736:	c1 e2 08             	shl    edx,0x8
c0028739:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c002873c:	31 db                	xor    ebx,ebx
c002873e:	85 ff                	test   edi,edi
c0028740:	0f 95 c3             	setne  bl
c0028743:	09 d8                	or     eax,ebx
c0028745:	89 c3                	mov    ebx,eax
c0028747:	c1 eb 08             	shr    ebx,0x8
c002874a:	a8 7f                	test   al,0x7f
c002874c:	0f 95 c2             	setne  dl
c002874f:	89 d6                	mov    esi,edx
c0028751:	09 de                	or     esi,ebx
c0028753:	83 e6 01             	and    esi,0x1
c0028756:	c1 e8 07             	shr    eax,0x7
c0028759:	21 f0                	and    eax,esi
c002875b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002875e:	09 ca                	or     edx,ecx
c0028760:	c1 e2 17             	shl    edx,0x17
c0028763:	09 da                	or     edx,ebx
c0028765:	01 d0                	add    eax,edx
c0028767:	83 c4 0c             	add    esp,0xc
c002876a:	5b                   	pop    ebx
c002876b:	5e                   	pop    esi
c002876c:	5f                   	pop    edi
c002876d:	5d                   	pop    ebp
c002876e:	c3                   	ret    

c002876f <__extendsfdf2>:
c002876f:	55                   	push   ebp
c0028770:	89 e5                	mov    ebp,esp
c0028772:	57                   	push   edi
c0028773:	56                   	push   esi
c0028774:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0028777:	89 d1                	mov    ecx,edx
c0028779:	c1 f9 17             	sar    ecx,0x17
c002877c:	c1 e2 08             	shl    edx,0x8
c002877f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0028785:	89 c8                	mov    eax,ecx
c0028787:	80 e4 f8             	and    ah,0xf8
c002878a:	8d 71 01             	lea    esi,[ecx+0x1]
c002878d:	81 e6 fe 00 00 00    	and    esi,0xfe
c0028793:	75 27                	jne    c00287bc <__extendsfdf2+0x4d>
c0028795:	81 e1 ff 00 00 00    	and    ecx,0xff
c002879b:	75 18                	jne    c00287b5 <__extendsfdf2+0x46>
c002879d:	85 d2                	test   edx,edx
c002879f:	74 20                	je     c00287c1 <__extendsfdf2+0x52>
c00287a1:	41                   	inc    ecx
c00287a2:	01 d2                	add    edx,edx
c00287a4:	79 fb                	jns    c00287a1 <__extendsfdf2+0x32>
c00287a6:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00287ac:	29 c8                	sub    eax,ecx
c00287ae:	05 81 03 00 00       	add    eax,0x381
c00287b3:	eb 0c                	jmp    c00287c1 <__extendsfdf2+0x52>
c00287b5:	05 00 07 00 00       	add    eax,0x700
c00287ba:	eb 05                	jmp    c00287c1 <__extendsfdf2+0x52>
c00287bc:	05 80 03 00 00       	add    eax,0x380
c00287c1:	c1 e0 14             	shl    eax,0x14
c00287c4:	89 c1                	mov    ecx,eax
c00287c6:	89 d0                	mov    eax,edx
c00287c8:	c1 e8 0b             	shr    eax,0xb
c00287cb:	09 c1                	or     ecx,eax
c00287cd:	c1 e2 15             	shl    edx,0x15
c00287d0:	89 d0                	mov    eax,edx
c00287d2:	89 ca                	mov    edx,ecx
c00287d4:	5e                   	pop    esi
c00287d5:	5f                   	pop    edi
c00287d6:	5d                   	pop    ebp
c00287d7:	c3                   	ret    
c00287d8:	66 90                	xchg   ax,ax
c00287da:	66 90                	xchg   ax,ax
c00287dc:	66 90                	xchg   ax,ax
c00287de:	66 90                	xchg   ax,ax

c00287e0 <fabs>:
c00287e0:	83 ec 0c             	sub    esp,0xc
c00287e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287e7:	89 04 24             	mov    DWORD PTR [esp],eax
c00287ea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00287ee:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00287f3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00287f7:	dd 04 24             	fld    QWORD PTR [esp]
c00287fa:	83 c4 0c             	add    esp,0xc
c00287fd:	c3                   	ret    
c00287fe:	66 90                	xchg   ax,ax

c0028800 <lrint>:
c0028800:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028804:	83 ec 04             	sub    esp,0x4
c0028807:	db 1c 24             	fistp  DWORD PTR [esp]
c002880a:	58                   	pop    eax
c002880b:	c3                   	ret    

c002880c <lrintf>:
c002880c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028810:	83 ec 04             	sub    esp,0x4
c0028813:	db 1c 24             	fistp  DWORD PTR [esp]
c0028816:	58                   	pop    eax
c0028817:	c3                   	ret    

Disassembly of section .init:

c0028818 <_init>:
c0028818:	55                   	push   ebp
c0028819:	89 e5                	mov    ebp,esp
c002881b:	e8 f8 78 fd ff       	call   c0000118 <frame_dummy>
c0028820:	e8 5b e0 ff ff       	call   c0026880 <__do_global_ctors_aux>
c0028825:	5d                   	pop    ebp
c0028826:	c3                   	ret    

Disassembly of section .fini:

c0028827 <_fini>:
c0028827:	55                   	push   ebp
c0028828:	89 e5                	mov    ebp,esp
c002882a:	e8 79 78 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002882f:	5d                   	pop    ebp
c0028830:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028832 <Computer::~Computer()>:
c0028832:	83 ec 0c             	sub    esp,0xc
c0028835:	ba 60 a4 02 c0       	mov    edx,0xc002a460
c002883a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002883e:	89 10                	mov    DWORD PTR [eax],edx
c0028840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028844:	83 ec 0c             	sub    esp,0xc
c0028847:	50                   	push   eax
c0028848:	e8 2b b3 fe ff       	call   c0013b78 <Device::~Device()>
c002884d:	83 c4 10             	add    esp,0x10
c0028850:	90                   	nop
c0028851:	83 c4 0c             	add    esp,0xc
c0028854:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028856 <Computer::~Computer()>:
c0028856:	83 ec 0c             	sub    esp,0xc
c0028859:	83 ec 0c             	sub    esp,0xc
c002885c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028860:	e8 cd ff ff ff       	call   c0028832 <Computer::~Computer()>
c0028865:	83 c4 10             	add    esp,0x10
c0028868:	83 ec 08             	sub    esp,0x8
c002886b:	68 ec 01 00 00       	push   0x1ec
c0028870:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028874:	e8 20 9f fe ff       	call   c0012799 <operator delete(void*, unsigned long)>
c0028879:	83 c4 10             	add    esp,0x10
c002887c:	83 c4 0c             	add    esp,0xc
c002887f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028880 <idleCommon()>:
c0028880:	83 ec 0c             	sub    esp,0xc
c0028883:	fa                   	cli    
c0028884:	ff 05 28 f7 02 c0    	inc    DWORD PTR ds:0xc002f728
c002888a:	e8 40 54 ff ff       	call   c001dccf <schedule()>
c002888f:	a1 28 f7 02 c0       	mov    eax,ds:0xc002f728
c0028894:	48                   	dec    eax
c0028895:	a3 28 f7 02 c0       	mov    ds:0xc002f728,eax
c002889a:	75 01                	jne    c002889d <idleCommon()+0x1d>
c002889c:	fb                   	sti    
c002889d:	83 c4 0c             	add    esp,0xc
c00288a0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00288a2 <LinkedList<UnixFile>::~LinkedList()>:
c00288a2:	90                   	nop
c00288a3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00288a4 <LinkedList<UnixFile>::LinkedList()>:
c00288a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288a8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00288ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288b2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00288b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288bd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00288c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288c8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00288ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288d2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00288d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288dd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00288e4:	90                   	nop
c00288e5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00288e6 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00288e6:	83 ec 0c             	sub    esp,0xc
c00288e9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00288ee:	75 10                	jne    c0028900 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00288f0:	83 ec 0c             	sub    esp,0xc
c00288f3:	68 18 a7 02 c0       	push   0xc002a718
c00288f8:	e8 40 18 ff ff       	call   c001a13d <Krnl::panic(char const*)>
c00288fd:	83 c4 10             	add    esp,0x10
c0028900:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028904:	8b 00                	mov    eax,DWORD PTR [eax]
c0028906:	85 c0                	test   eax,eax
c0028908:	74 34                	je     c002893e <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002890a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002890e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028911:	85 c0                	test   eax,eax
c0028913:	74 29                	je     c002893e <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028915:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028919:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002891c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028920:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028923:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028927:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002892b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002892e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028932:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028935:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002893c:	eb 65                	jmp    c00289a3 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002893e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028942:	8b 00                	mov    eax,DWORD PTR [eax]
c0028944:	85 c0                	test   eax,eax
c0028946:	75 4b                	jne    c0028993 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002894c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002894f:	85 c0                	test   eax,eax
c0028951:	75 40                	jne    c0028993 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028953:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028957:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002895b:	89 10                	mov    DWORD PTR [eax],edx
c002895d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028961:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028965:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028968:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002896c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002896f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028976:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002897a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002897d:	85 c0                	test   eax,eax
c002897f:	74 22                	je     c00289a3 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028981:	83 ec 0c             	sub    esp,0xc
c0028984:	68 3a a7 02 c0       	push   0xc002a73a
c0028989:	e8 af 17 ff ff       	call   c001a13d <Krnl::panic(char const*)>
c002898e:	83 c4 10             	add    esp,0x10
c0028991:	eb 10                	jmp    c00289a3 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028993:	83 ec 0c             	sub    esp,0xc
c0028996:	68 44 a7 02 c0       	push   0xc002a744
c002899b:	e8 9d 17 ff ff       	call   c001a13d <Krnl::panic(char const*)>
c00289a0:	83 c4 10             	add    esp,0x10
c00289a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289a7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00289aa:	8d 50 01             	lea    edx,[eax+0x1]
c00289ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289b1:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00289b4:	90                   	nop
c00289b5:	83 c4 0c             	add    esp,0xc
c00289b8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00289ba <LinkedList<UnixFile>::getFirstElement()>:
c00289ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289be:	8b 00                	mov    eax,DWORD PTR [eax]
c00289c0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00289c2 <LinkedList<UnixFile>::removeFirst()>:
c00289c2:	83 ec 0c             	sub    esp,0xc
c00289c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00289cb:	85 c0                	test   eax,eax
c00289cd:	75 12                	jne    c00289e1 <LinkedList<UnixFile>::removeFirst()+0x1f>
c00289cf:	83 ec 0c             	sub    esp,0xc
c00289d2:	68 50 a7 02 c0       	push   0xc002a750
c00289d7:	e8 61 17 ff ff       	call   c001a13d <Krnl::panic(char const*)>
c00289dc:	83 c4 10             	add    esp,0x10
c00289df:	eb 7e                	jmp    c0028a5f <LinkedList<UnixFile>::removeFirst()+0x9d>
c00289e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289e5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289e8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00289eb:	85 c0                	test   eax,eax
c00289ed:	74 10                	je     c00289ff <LinkedList<UnixFile>::removeFirst()+0x3d>
c00289ef:	83 ec 0c             	sub    esp,0xc
c00289f2:	68 9b a7 02 c0       	push   0xc002a79b
c00289f7:	e8 41 17 ff ff       	call   c001a13d <Krnl::panic(char const*)>
c00289fc:	83 c4 10             	add    esp,0x10
c00289ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a03:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a05:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a08:	85 c0                	test   eax,eax
c0028a0a:	75 33                	jne    c0028a3f <LinkedList<UnixFile>::removeFirst()+0x7d>
c0028a0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a10:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028a16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a1a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028a21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a25:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a28:	83 f8 01             	cmp    eax,0x1
c0028a2b:	74 21                	je     c0028a4e <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028a2d:	83 ec 0c             	sub    esp,0xc
c0028a30:	68 74 a7 02 c0       	push   0xc002a774
c0028a35:	e8 03 17 ff ff       	call   c001a13d <Krnl::panic(char const*)>
c0028a3a:	83 c4 10             	add    esp,0x10
c0028a3d:	eb 0f                	jmp    c0028a4e <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028a3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a43:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a45:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028a48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a4c:	89 10                	mov    DWORD PTR [eax],edx
c0028a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a52:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a55:	8d 50 ff             	lea    edx,[eax-0x1]
c0028a58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a5c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028a5f:	83 c4 0c             	add    esp,0xc
c0028a62:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0028a64 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0028a64:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028a68:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a6b:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0028a6c <DriverlessDevice::~DriverlessDevice()>:
c0028a6c:	ba 3c b0 02 c0       	mov    edx,0xc002b03c
c0028a71:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a75:	89 10                	mov    DWORD PTR [eax],edx
c0028a77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a7b:	50                   	push   eax
c0028a7c:	e8 f7 b0 fe ff       	call   c0013b78 <Device::~Device()>
c0028a81:	83 c4 04             	add    esp,0x4
c0028a84:	90                   	nop
c0028a85:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028a86 <DriverlessDevice::~DriverlessDevice()>:
c0028a86:	83 ec 0c             	sub    esp,0xc
c0028a89:	83 ec 0c             	sub    esp,0xc
c0028a8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a90:	e8 d7 ff ff ff       	call   c0028a6c <DriverlessDevice::~DriverlessDevice()>
c0028a95:	83 c4 10             	add    esp,0x10
c0028a98:	83 ec 08             	sub    esp,0x8
c0028a9b:	68 58 01 00 00       	push   0x158
c0028aa0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028aa4:	e8 f0 9c fe ff       	call   c0012799 <operator delete(void*, unsigned long)>
c0028aa9:	83 c4 10             	add    esp,0x10
c0028aac:	83 c4 0c             	add    esp,0xc
c0028aaf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0028ab0 <LinkedList<Device>::addElement(Device*)>:
c0028ab0:	83 ec 0c             	sub    esp,0xc
c0028ab3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028ab8:	75 10                	jne    c0028aca <LinkedList<Device>::addElement(Device*)+0x1a>
c0028aba:	83 ec 0c             	sub    esp,0xc
c0028abd:	68 18 a7 02 c0       	push   0xc002a718
c0028ac2:	e8 76 16 ff ff       	call   c001a13d <Krnl::panic(char const*)>
c0028ac7:	83 c4 10             	add    esp,0x10
c0028aca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ace:	8b 00                	mov    eax,DWORD PTR [eax]
c0028ad0:	85 c0                	test   eax,eax
c0028ad2:	74 3a                	je     c0028b0e <LinkedList<Device>::addElement(Device*)+0x5e>
c0028ad4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ad8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028adb:	85 c0                	test   eax,eax
c0028add:	74 2f                	je     c0028b0e <LinkedList<Device>::addElement(Device*)+0x5e>
c0028adf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ae3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028ae6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028aea:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0028af0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028af4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028af8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028afb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b02:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028b0c:	eb 68                	jmp    c0028b76 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028b0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b12:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b14:	85 c0                	test   eax,eax
c0028b16:	75 4e                	jne    c0028b66 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028b18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b1c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b1f:	85 c0                	test   eax,eax
c0028b21:	75 43                	jne    c0028b66 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028b23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b27:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b2b:	89 10                	mov    DWORD PTR [eax],edx
c0028b2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b31:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b35:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028b38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b3c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b3f:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028b49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b4d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b50:	85 c0                	test   eax,eax
c0028b52:	74 22                	je     c0028b76 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028b54:	83 ec 0c             	sub    esp,0xc
c0028b57:	68 3a a7 02 c0       	push   0xc002a73a
c0028b5c:	e8 dc 15 ff ff       	call   c001a13d <Krnl::panic(char const*)>
c0028b61:	83 c4 10             	add    esp,0x10
c0028b64:	eb 10                	jmp    c0028b76 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028b66:	83 ec 0c             	sub    esp,0xc
c0028b69:	68 44 a7 02 c0       	push   0xc002a744
c0028b6e:	e8 ca 15 ff ff       	call   c001a13d <Krnl::panic(char const*)>
c0028b73:	83 c4 10             	add    esp,0x10
c0028b76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b7a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b7d:	8d 50 01             	lea    edx,[eax+0x1]
c0028b80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b84:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028b87:	90                   	nop
c0028b88:	83 c4 0c             	add    esp,0xc
c0028b8b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0028b8c <LinkedList<Device>::LinkedList()>:
c0028b8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b90:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028b96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b9a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028ba1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ba5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028bac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028bb0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028bb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028bba:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028bc1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028bc5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028bcc:	90                   	nop
c0028bcd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0028bce <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0028bce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028bd2:	8b 00                	mov    eax,DWORD PTR [eax]
c0028bd4:	85 c0                	test   eax,eax
c0028bd6:	75 0e                	jne    c0028be6 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028bd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028bdc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028bdf:	85 c0                	test   eax,eax
c0028be1:	75 03                	jne    c0028be6 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028be3:	b0 01                	mov    al,0x1
c0028be5:	c3                   	ret    
c0028be6:	b0 00                	mov    al,0x0
c0028be8:	90                   	nop
c0028be9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0028bea <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0028bea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028bee:	8b 00                	mov    eax,DWORD PTR [eax]
c0028bf0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028bf2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028bf2:	83 ec 0c             	sub    esp,0xc
c0028bf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bf9:	8b 00                	mov    eax,DWORD PTR [eax]
c0028bfb:	85 c0                	test   eax,eax
c0028bfd:	75 15                	jne    c0028c14 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c0028bff:	83 ec 0c             	sub    esp,0xc
c0028c02:	68 50 a7 02 c0       	push   0xc002a750
c0028c07:	e8 31 15 ff ff       	call   c001a13d <Krnl::panic(char const*)>
c0028c0c:	83 c4 10             	add    esp,0x10
c0028c0f:	e9 88 00 00 00       	jmp    c0028c9c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028c14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c18:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028c1b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028c1e:	85 c0                	test   eax,eax
c0028c20:	0f 95 c0             	setne  al
c0028c23:	84 c0                	test   al,al
c0028c25:	74 10                	je     c0028c37 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028c27:	83 ec 0c             	sub    esp,0xc
c0028c2a:	68 9b a7 02 c0       	push   0xc002a79b
c0028c2f:	e8 09 15 ff ff       	call   c001a13d <Krnl::panic(char const*)>
c0028c34:	83 c4 10             	add    esp,0x10
c0028c37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c3b:	8b 00                	mov    eax,DWORD PTR [eax]
c0028c3d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028c40:	85 c0                	test   eax,eax
c0028c42:	0f 94 c0             	sete   al
c0028c45:	84 c0                	test   al,al
c0028c47:	74 33                	je     c0028c7c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028c49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c4d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028c53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c57:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028c5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c62:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028c65:	83 f8 01             	cmp    eax,0x1
c0028c68:	74 21                	je     c0028c8b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028c6a:	83 ec 0c             	sub    esp,0xc
c0028c6d:	68 74 a7 02 c0       	push   0xc002a774
c0028c72:	e8 c6 14 ff ff       	call   c001a13d <Krnl::panic(char const*)>
c0028c77:	83 c4 10             	add    esp,0x10
c0028c7a:	eb 0f                	jmp    c0028c8b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028c7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c80:	8b 00                	mov    eax,DWORD PTR [eax]
c0028c82:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028c85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c89:	89 10                	mov    DWORD PTR [eax],edx
c0028c8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c8f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028c92:	8d 50 ff             	lea    edx,[eax-0x1]
c0028c95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c99:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028c9c:	83 c4 0c             	add    esp,0xc
c0028c9f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028ca0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028ca0:	83 ec 0c             	sub    esp,0xc
c0028ca3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028ca8:	75 10                	jne    c0028cba <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0028caa:	83 ec 0c             	sub    esp,0xc
c0028cad:	68 18 a7 02 c0       	push   0xc002a718
c0028cb2:	e8 86 14 ff ff       	call   c001a13d <Krnl::panic(char const*)>
c0028cb7:	83 c4 10             	add    esp,0x10
c0028cba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cbe:	8b 00                	mov    eax,DWORD PTR [eax]
c0028cc0:	85 c0                	test   eax,eax
c0028cc2:	74 34                	je     c0028cf8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028cc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028ccb:	85 c0                	test   eax,eax
c0028ccd:	74 29                	je     c0028cf8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028ccf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cd3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028cd6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028cda:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0028cdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ce1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028ce5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028ce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028cef:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028cf6:	eb 65                	jmp    c0028d5d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028cf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cfc:	8b 00                	mov    eax,DWORD PTR [eax]
c0028cfe:	85 c0                	test   eax,eax
c0028d00:	75 4b                	jne    c0028d4d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028d02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d06:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028d09:	85 c0                	test   eax,eax
c0028d0b:	75 40                	jne    c0028d4d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028d0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d11:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028d15:	89 10                	mov    DWORD PTR [eax],edx
c0028d17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028d1f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028d22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d26:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028d29:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028d30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d34:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028d37:	85 c0                	test   eax,eax
c0028d39:	74 22                	je     c0028d5d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028d3b:	83 ec 0c             	sub    esp,0xc
c0028d3e:	68 3a a7 02 c0       	push   0xc002a73a
c0028d43:	e8 f5 13 ff ff       	call   c001a13d <Krnl::panic(char const*)>
c0028d48:	83 c4 10             	add    esp,0x10
c0028d4b:	eb 10                	jmp    c0028d5d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028d4d:	83 ec 0c             	sub    esp,0xc
c0028d50:	68 44 a7 02 c0       	push   0xc002a744
c0028d55:	e8 e3 13 ff ff       	call   c001a13d <Krnl::panic(char const*)>
c0028d5a:	83 c4 10             	add    esp,0x10
c0028d5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d61:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028d64:	8d 50 01             	lea    edx,[eax+0x1]
c0028d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d6b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028d6e:	90                   	nop
c0028d6f:	83 c4 0c             	add    esp,0xc
c0028d72:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028d74 <ACPI::~ACPI()>:
c0028d74:	83 ec 0c             	sub    esp,0xc
c0028d77:	ba 14 ba 02 c0       	mov    edx,0xc002ba14
c0028d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d80:	89 10                	mov    DWORD PTR [eax],edx
c0028d82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d86:	83 ec 0c             	sub    esp,0xc
c0028d89:	50                   	push   eax
c0028d8a:	e8 e9 ad fe ff       	call   c0013b78 <Device::~Device()>
c0028d8f:	83 c4 10             	add    esp,0x10
c0028d92:	90                   	nop
c0028d93:	83 c4 0c             	add    esp,0xc
c0028d96:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028d98 <ACPI::~ACPI()>:
c0028d98:	83 ec 0c             	sub    esp,0xc
c0028d9b:	83 ec 0c             	sub    esp,0xc
c0028d9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028da2:	e8 cd ff ff ff       	call   c0028d74 <ACPI::~ACPI()>
c0028da7:	83 c4 10             	add    esp,0x10
c0028daa:	83 ec 08             	sub    esp,0x8
c0028dad:	68 64 12 00 00       	push   0x1264
c0028db2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028db6:	e8 de 99 fe ff       	call   c0012799 <operator delete(void*, unsigned long)>
c0028dbb:	83 c4 10             	add    esp,0x10
c0028dbe:	83 c4 0c             	add    esp,0xc
c0028dc1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0028dc2 <LinkedList<Device>::~LinkedList()>:
c0028dc2:	90                   	nop
c0028dc3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0028dc4 <LinkedList<Device>::isEmpty()>:
c0028dc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028dc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0028dca:	85 c0                	test   eax,eax
c0028dcc:	75 0e                	jne    c0028ddc <LinkedList<Device>::isEmpty()+0x18>
c0028dce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028dd2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028dd5:	85 c0                	test   eax,eax
c0028dd7:	75 03                	jne    c0028ddc <LinkedList<Device>::isEmpty()+0x18>
c0028dd9:	b0 01                	mov    al,0x1
c0028ddb:	c3                   	ret    
c0028ddc:	b0 00                	mov    al,0x0
c0028dde:	90                   	nop
c0028ddf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0028de0 <LinkedList<Device>::getFirstElement()>:
c0028de0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028de4:	8b 00                	mov    eax,DWORD PTR [eax]
c0028de6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0028de8 <LinkedList<Device>::removeFirst()>:
c0028de8:	83 ec 0c             	sub    esp,0xc
c0028deb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028def:	8b 00                	mov    eax,DWORD PTR [eax]
c0028df1:	85 c0                	test   eax,eax
c0028df3:	75 15                	jne    c0028e0a <LinkedList<Device>::removeFirst()+0x22>
c0028df5:	83 ec 0c             	sub    esp,0xc
c0028df8:	68 50 a7 02 c0       	push   0xc002a750
c0028dfd:	e8 3b 13 ff ff       	call   c001a13d <Krnl::panic(char const*)>
c0028e02:	83 c4 10             	add    esp,0x10
c0028e05:	e9 87 00 00 00       	jmp    c0028e91 <LinkedList<Device>::removeFirst()+0xa9>
c0028e0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e0e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028e11:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0028e17:	85 c0                	test   eax,eax
c0028e19:	74 10                	je     c0028e2b <LinkedList<Device>::removeFirst()+0x43>
c0028e1b:	83 ec 0c             	sub    esp,0xc
c0028e1e:	68 9b a7 02 c0       	push   0xc002a79b
c0028e23:	e8 15 13 ff ff       	call   c001a13d <Krnl::panic(char const*)>
c0028e28:	83 c4 10             	add    esp,0x10
c0028e2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e2f:	8b 00                	mov    eax,DWORD PTR [eax]
c0028e31:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0028e37:	85 c0                	test   eax,eax
c0028e39:	75 33                	jne    c0028e6e <LinkedList<Device>::removeFirst()+0x86>
c0028e3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e3f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028e45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e49:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028e50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e54:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028e57:	83 f8 01             	cmp    eax,0x1
c0028e5a:	74 24                	je     c0028e80 <LinkedList<Device>::removeFirst()+0x98>
c0028e5c:	83 ec 0c             	sub    esp,0xc
c0028e5f:	68 74 a7 02 c0       	push   0xc002a774
c0028e64:	e8 d4 12 ff ff       	call   c001a13d <Krnl::panic(char const*)>
c0028e69:	83 c4 10             	add    esp,0x10
c0028e6c:	eb 12                	jmp    c0028e80 <LinkedList<Device>::removeFirst()+0x98>
c0028e6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e72:	8b 00                	mov    eax,DWORD PTR [eax]
c0028e74:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0028e7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e7e:	89 10                	mov    DWORD PTR [eax],edx
c0028e80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e84:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028e87:	8d 50 ff             	lea    edx,[eax-0x1]
c0028e8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e8e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028e91:	83 c4 0c             	add    esp,0xc
c0028e94:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028e96 <CPU::~CPU()>:
c0028e96:	83 ec 0c             	sub    esp,0xc
c0028e99:	ba b0 bd 02 c0       	mov    edx,0xc002bdb0
c0028e9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ea2:	89 10                	mov    DWORD PTR [eax],edx
c0028ea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ea8:	83 ec 0c             	sub    esp,0xc
c0028eab:	50                   	push   eax
c0028eac:	e8 c7 ac fe ff       	call   c0013b78 <Device::~Device()>
c0028eb1:	83 c4 10             	add    esp,0x10
c0028eb4:	90                   	nop
c0028eb5:	83 c4 0c             	add    esp,0xc
c0028eb8:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028eba <CPU::~CPU()>:
c0028eba:	83 ec 0c             	sub    esp,0xc
c0028ebd:	83 ec 0c             	sub    esp,0xc
c0028ec0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ec4:	e8 cd ff ff ff       	call   c0028e96 <CPU::~CPU()>
c0028ec9:	83 c4 10             	add    esp,0x10
c0028ecc:	83 ec 08             	sub    esp,0x8
c0028ecf:	68 98 11 00 00       	push   0x1198
c0028ed4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ed8:	e8 bc 98 fe ff       	call   c0012799 <operator delete(void*, unsigned long)>
c0028edd:	83 c4 10             	add    esp,0x10
c0028ee0:	83 c4 0c             	add    esp,0xc
c0028ee3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028ee4 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028ee4:	90                   	nop
c0028ee5:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028ee6 <ThreadControlBlock::ThreadControlBlock()>:
c0028ee6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028eea:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028ef1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ef5:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028efc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028f00:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028f07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028f0b:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028f12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028f16:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c0028f1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028f21:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028f25:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028f29:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028f2d:	90                   	nop
c0028f2e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028f30 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028f30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028f34:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028f3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028f3e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028f45:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028f49:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028f50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028f54:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028f5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028f5e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028f65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028f69:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028f70:	90                   	nop
c0028f71:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028f72 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028f72:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028f76:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028f79:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028f7a <Vm::_FPUState::_FPUState()>:
c0028f7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028f7e:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028f85:	90                   	nop
c0028f86:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028f88 <PCI::~PCI()>:
c0028f88:	83 ec 0c             	sub    esp,0xc
c0028f8b:	ba fc c8 02 c0       	mov    edx,0xc002c8fc
c0028f90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f94:	89 10                	mov    DWORD PTR [eax],edx
c0028f96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f9a:	83 ec 0c             	sub    esp,0xc
c0028f9d:	50                   	push   eax
c0028f9e:	e8 a5 a5 fe ff       	call   c0013548 <Bus::~Bus()>
c0028fa3:	83 c4 10             	add    esp,0x10
c0028fa6:	90                   	nop
c0028fa7:	83 c4 0c             	add    esp,0xc
c0028faa:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028fac <PCI::~PCI()>:
c0028fac:	83 ec 0c             	sub    esp,0xc
c0028faf:	83 ec 0c             	sub    esp,0xc
c0028fb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fb6:	e8 cd ff ff ff       	call   c0028f88 <PCI::~PCI()>
c0028fbb:	83 c4 10             	add    esp,0x10
c0028fbe:	83 ec 08             	sub    esp,0x8
c0028fc1:	68 5c 01 00 00       	push   0x15c
c0028fc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fca:	e8 ca 97 fe ff       	call   c0012799 <operator delete(void*, unsigned long)>
c0028fcf:	83 c4 10             	add    esp,0x10
c0028fd2:	83 c4 0c             	add    esp,0xc
c0028fd5:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028fd6 <IDE::~IDE()>:
c0028fd6:	83 ec 0c             	sub    esp,0xc
c0028fd9:	ba b0 c9 02 c0       	mov    edx,0xc002c9b0
c0028fde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fe2:	89 10                	mov    DWORD PTR [eax],edx
c0028fe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fe8:	83 ec 0c             	sub    esp,0xc
c0028feb:	50                   	push   eax
c0028fec:	e8 9d b0 fe ff       	call   c001408e <HardDiskController::~HardDiskController()>
c0028ff1:	83 c4 10             	add    esp,0x10
c0028ff4:	90                   	nop
c0028ff5:	83 c4 0c             	add    esp,0xc
c0028ff8:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028ffa <IDE::~IDE()>:
c0028ffa:	83 ec 0c             	sub    esp,0xc
c0028ffd:	83 ec 0c             	sub    esp,0xc
c0029000:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029004:	e8 cd ff ff ff       	call   c0028fd6 <IDE::~IDE()>
c0029009:	83 c4 10             	add    esp,0x10
c002900c:	83 ec 08             	sub    esp,0x8
c002900f:	68 70 02 00 00       	push   0x270
c0029014:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029018:	e8 7c 97 fe ff       	call   c0012799 <operator delete(void*, unsigned long)>
c002901d:	83 c4 10             	add    esp,0x10
c0029020:	83 c4 0c             	add    esp,0xc
c0029023:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0029024 <SATABus::~SATABus()>:
c0029024:	83 ec 0c             	sub    esp,0xc
c0029027:	ba 28 ca 02 c0       	mov    edx,0xc002ca28
c002902c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029030:	89 10                	mov    DWORD PTR [eax],edx
c0029032:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029036:	83 ec 0c             	sub    esp,0xc
c0029039:	50                   	push   eax
c002903a:	e8 4f b0 fe ff       	call   c001408e <HardDiskController::~HardDiskController()>
c002903f:	83 c4 10             	add    esp,0x10
c0029042:	90                   	nop
c0029043:	83 c4 0c             	add    esp,0xc
c0029046:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0029048 <SATABus::~SATABus()>:
c0029048:	83 ec 0c             	sub    esp,0xc
c002904b:	83 ec 0c             	sub    esp,0xc
c002904e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029052:	e8 cd ff ff ff       	call   c0029024 <SATABus::~SATABus()>
c0029057:	83 c4 10             	add    esp,0x10
c002905a:	83 ec 08             	sub    esp,0x8
c002905d:	68 64 01 00 00       	push   0x164
c0029062:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029066:	e8 2e 97 fe ff       	call   c0012799 <operator delete(void*, unsigned long)>
c002906b:	83 c4 10             	add    esp,0x10
c002906e:	83 c4 0c             	add    esp,0xc
c0029071:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0029072 <ATA::~ATA()>:
c0029072:	83 ec 0c             	sub    esp,0xc
c0029075:	ba a0 ca 02 c0       	mov    edx,0xc002caa0
c002907a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002907e:	89 10                	mov    DWORD PTR [eax],edx
c0029080:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029084:	83 ec 0c             	sub    esp,0xc
c0029087:	50                   	push   eax
c0029088:	e8 e3 b0 fe ff       	call   c0014170 <PhysicalDisk::~PhysicalDisk()>
c002908d:	83 c4 10             	add    esp,0x10
c0029090:	90                   	nop
c0029091:	83 c4 0c             	add    esp,0xc
c0029094:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0029096 <ATA::~ATA()>:
c0029096:	83 ec 0c             	sub    esp,0xc
c0029099:	83 ec 0c             	sub    esp,0xc
c002909c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290a0:	e8 cd ff ff ff       	call   c0029072 <ATA::~ATA()>
c00290a5:	83 c4 10             	add    esp,0x10
c00290a8:	83 ec 08             	sub    esp,0x8
c00290ab:	68 7c 01 00 00       	push   0x17c
c00290b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290b4:	e8 e0 96 fe ff       	call   c0012799 <operator delete(void*, unsigned long)>
c00290b9:	83 c4 10             	add    esp,0x10
c00290bc:	83 c4 0c             	add    esp,0xc
c00290bf:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c00290c0 <ATAPI::~ATAPI()>:
c00290c0:	83 ec 0c             	sub    esp,0xc
c00290c3:	ba d8 ca 02 c0       	mov    edx,0xc002cad8
c00290c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290cc:	89 10                	mov    DWORD PTR [eax],edx
c00290ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290d2:	83 ec 0c             	sub    esp,0xc
c00290d5:	50                   	push   eax
c00290d6:	e8 95 b0 fe ff       	call   c0014170 <PhysicalDisk::~PhysicalDisk()>
c00290db:	83 c4 10             	add    esp,0x10
c00290de:	90                   	nop
c00290df:	83 c4 0c             	add    esp,0xc
c00290e2:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c00290e4 <ATAPI::~ATAPI()>:
c00290e4:	83 ec 0c             	sub    esp,0xc
c00290e7:	83 ec 0c             	sub    esp,0xc
c00290ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290ee:	e8 cd ff ff ff       	call   c00290c0 <ATAPI::~ATAPI()>
c00290f3:	83 c4 10             	add    esp,0x10
c00290f6:	83 ec 08             	sub    esp,0x8
c00290f9:	68 80 01 00 00       	push   0x180
c00290fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029102:	e8 92 96 fe ff       	call   c0012799 <operator delete(void*, unsigned long)>
c0029107:	83 c4 10             	add    esp,0x10
c002910a:	83 c4 0c             	add    esp,0xc
c002910d:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c002910e <SATA::~SATA()>:
c002910e:	83 ec 0c             	sub    esp,0xc
c0029111:	ba 8c cb 02 c0       	mov    edx,0xc002cb8c
c0029116:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002911a:	89 10                	mov    DWORD PTR [eax],edx
c002911c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029120:	83 ec 0c             	sub    esp,0xc
c0029123:	50                   	push   eax
c0029124:	e8 47 b0 fe ff       	call   c0014170 <PhysicalDisk::~PhysicalDisk()>
c0029129:	83 c4 10             	add    esp,0x10
c002912c:	90                   	nop
c002912d:	83 c4 0c             	add    esp,0xc
c0029130:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0029132 <SATA::~SATA()>:
c0029132:	83 ec 0c             	sub    esp,0xc
c0029135:	83 ec 0c             	sub    esp,0xc
c0029138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002913c:	e8 cd ff ff ff       	call   c002910e <SATA::~SATA()>
c0029141:	83 c4 10             	add    esp,0x10
c0029144:	83 ec 08             	sub    esp,0x8
c0029147:	68 7c 01 00 00       	push   0x17c
c002914c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029150:	e8 44 96 fe ff       	call   c0012799 <operator delete(void*, unsigned long)>
c0029155:	83 c4 10             	add    esp,0x10
c0029158:	83 c4 0c             	add    esp,0xc
c002915b:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002915c <SATAPI::~SATAPI()>:
c002915c:	83 ec 0c             	sub    esp,0xc
c002915f:	ba 68 cc 02 c0       	mov    edx,0xc002cc68
c0029164:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029168:	89 10                	mov    DWORD PTR [eax],edx
c002916a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002916e:	83 ec 0c             	sub    esp,0xc
c0029171:	50                   	push   eax
c0029172:	e8 f9 af fe ff       	call   c0014170 <PhysicalDisk::~PhysicalDisk()>
c0029177:	83 c4 10             	add    esp,0x10
c002917a:	90                   	nop
c002917b:	83 c4 0c             	add    esp,0xc
c002917e:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0029180 <SATAPI::~SATAPI()>:
c0029180:	83 ec 0c             	sub    esp,0xc
c0029183:	83 ec 0c             	sub    esp,0xc
c0029186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002918a:	e8 cd ff ff ff       	call   c002915c <SATAPI::~SATAPI()>
c002918f:	83 c4 10             	add    esp,0x10
c0029192:	83 ec 08             	sub    esp,0x8
c0029195:	68 80 01 00 00       	push   0x180
c002919a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002919e:	e8 f6 95 fe ff       	call   c0012799 <operator delete(void*, unsigned long)>
c00291a3:	83 c4 10             	add    esp,0x10
c00291a6:	83 c4 0c             	add    esp,0xc
c00291a9:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c00291aa <AVX::~AVX()>:
c00291aa:	83 ec 0c             	sub    esp,0xc
c00291ad:	ba a8 cc 02 c0       	mov    edx,0xc002cca8
c00291b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291b6:	89 10                	mov    DWORD PTR [eax],edx
c00291b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291bc:	83 ec 0c             	sub    esp,0xc
c00291bf:	50                   	push   eax
c00291c0:	e8 2f b0 fe ff       	call   c00141f4 <FPU::~FPU()>
c00291c5:	83 c4 10             	add    esp,0x10
c00291c8:	90                   	nop
c00291c9:	83 c4 0c             	add    esp,0xc
c00291cc:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c00291ce <AVX::~AVX()>:
c00291ce:	83 ec 0c             	sub    esp,0xc
c00291d1:	83 ec 0c             	sub    esp,0xc
c00291d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291d8:	e8 cd ff ff ff       	call   c00291aa <AVX::~AVX()>
c00291dd:	83 c4 10             	add    esp,0x10
c00291e0:	83 ec 08             	sub    esp,0x8
c00291e3:	68 58 01 00 00       	push   0x158
c00291e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291ec:	e8 a8 95 fe ff       	call   c0012799 <operator delete(void*, unsigned long)>
c00291f1:	83 c4 10             	add    esp,0x10
c00291f4:	83 c4 0c             	add    esp,0xc
c00291f7:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c00291f8 <MMX::~MMX()>:
c00291f8:	83 ec 0c             	sub    esp,0xc
c00291fb:	ba e8 cc 02 c0       	mov    edx,0xc002cce8
c0029200:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029204:	89 10                	mov    DWORD PTR [eax],edx
c0029206:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002920a:	83 ec 0c             	sub    esp,0xc
c002920d:	50                   	push   eax
c002920e:	e8 e1 af fe ff       	call   c00141f4 <FPU::~FPU()>
c0029213:	83 c4 10             	add    esp,0x10
c0029216:	90                   	nop
c0029217:	83 c4 0c             	add    esp,0xc
c002921a:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c002921c <MMX::~MMX()>:
c002921c:	83 ec 0c             	sub    esp,0xc
c002921f:	83 ec 0c             	sub    esp,0xc
c0029222:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029226:	e8 cd ff ff ff       	call   c00291f8 <MMX::~MMX()>
c002922b:	83 c4 10             	add    esp,0x10
c002922e:	83 ec 08             	sub    esp,0x8
c0029231:	68 58 01 00 00       	push   0x158
c0029236:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002923a:	e8 5a 95 fe ff       	call   c0012799 <operator delete(void*, unsigned long)>
c002923f:	83 c4 10             	add    esp,0x10
c0029242:	83 c4 0c             	add    esp,0xc
c0029245:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0029246 <SSE::~SSE()>:
c0029246:	83 ec 0c             	sub    esp,0xc
c0029249:	ba 28 cd 02 c0       	mov    edx,0xc002cd28
c002924e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029252:	89 10                	mov    DWORD PTR [eax],edx
c0029254:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029258:	83 ec 0c             	sub    esp,0xc
c002925b:	50                   	push   eax
c002925c:	e8 93 af fe ff       	call   c00141f4 <FPU::~FPU()>
c0029261:	83 c4 10             	add    esp,0x10
c0029264:	90                   	nop
c0029265:	83 c4 0c             	add    esp,0xc
c0029268:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c002926a <SSE::~SSE()>:
c002926a:	83 ec 0c             	sub    esp,0xc
c002926d:	83 ec 0c             	sub    esp,0xc
c0029270:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029274:	e8 cd ff ff ff       	call   c0029246 <SSE::~SSE()>
c0029279:	83 c4 10             	add    esp,0x10
c002927c:	83 ec 08             	sub    esp,0x8
c002927f:	68 58 01 00 00       	push   0x158
c0029284:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029288:	e8 0c 95 fe ff       	call   c0012799 <operator delete(void*, unsigned long)>
c002928d:	83 c4 10             	add    esp,0x10
c0029290:	83 c4 0c             	add    esp,0xc
c0029293:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0029294 <x87::~x87()>:
c0029294:	83 ec 0c             	sub    esp,0xc
c0029297:	ba 68 cd 02 c0       	mov    edx,0xc002cd68
c002929c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292a0:	89 10                	mov    DWORD PTR [eax],edx
c00292a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292a6:	83 ec 0c             	sub    esp,0xc
c00292a9:	50                   	push   eax
c00292aa:	e8 45 af fe ff       	call   c00141f4 <FPU::~FPU()>
c00292af:	83 c4 10             	add    esp,0x10
c00292b2:	90                   	nop
c00292b3:	83 c4 0c             	add    esp,0xc
c00292b6:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c00292b8 <x87::~x87()>:
c00292b8:	83 ec 0c             	sub    esp,0xc
c00292bb:	83 ec 0c             	sub    esp,0xc
c00292be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00292c2:	e8 cd ff ff ff       	call   c0029294 <x87::~x87()>
c00292c7:	83 c4 10             	add    esp,0x10
c00292ca:	83 ec 08             	sub    esp,0x8
c00292cd:	68 58 01 00 00       	push   0x158
c00292d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00292d6:	e8 be 94 fe ff       	call   c0012799 <operator delete(void*, unsigned long)>
c00292db:	83 c4 10             	add    esp,0x10
c00292de:	83 c4 0c             	add    esp,0xc
c00292e1:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c00292e2 <IOAPIC::~IOAPIC()>:
c00292e2:	83 ec 0c             	sub    esp,0xc
c00292e5:	ba c0 ce 02 c0       	mov    edx,0xc002cec0
c00292ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292ee:	89 10                	mov    DWORD PTR [eax],edx
c00292f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292f4:	83 ec 0c             	sub    esp,0xc
c00292f7:	50                   	push   eax
c00292f8:	e8 7b a8 fe ff       	call   c0013b78 <Device::~Device()>
c00292fd:	83 c4 10             	add    esp,0x10
c0029300:	90                   	nop
c0029301:	83 c4 0c             	add    esp,0xc
c0029304:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0029306 <IOAPIC::~IOAPIC()>:
c0029306:	83 ec 0c             	sub    esp,0xc
c0029309:	83 ec 0c             	sub    esp,0xc
c002930c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029310:	e8 cd ff ff ff       	call   c00292e2 <IOAPIC::~IOAPIC()>
c0029315:	83 c4 10             	add    esp,0x10
c0029318:	83 ec 08             	sub    esp,0x8
c002931b:	68 68 01 00 00       	push   0x168
c0029320:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029324:	e8 70 94 fe ff       	call   c0012799 <operator delete(void*, unsigned long)>
c0029329:	83 c4 10             	add    esp,0x10
c002932c:	83 c4 0c             	add    esp,0xc
c002932f:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0029330 <APIC::~APIC()>:
c0029330:	83 ec 0c             	sub    esp,0xc
c0029333:	ba 78 ce 02 c0       	mov    edx,0xc002ce78
c0029338:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002933c:	89 10                	mov    DWORD PTR [eax],edx
c002933e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029342:	83 ec 0c             	sub    esp,0xc
c0029345:	50                   	push   eax
c0029346:	e8 73 b3 fe ff       	call   c00146be <InterruptController::~InterruptController()>
c002934b:	83 c4 10             	add    esp,0x10
c002934e:	90                   	nop
c002934f:	83 c4 0c             	add    esp,0xc
c0029352:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0029354 <APIC::~APIC()>:
c0029354:	83 ec 0c             	sub    esp,0xc
c0029357:	83 ec 0c             	sub    esp,0xc
c002935a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002935e:	e8 cd ff ff ff       	call   c0029330 <APIC::~APIC()>
c0029363:	83 c4 10             	add    esp,0x10
c0029366:	83 ec 08             	sub    esp,0x8
c0029369:	68 58 21 00 00       	push   0x2158
c002936e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029372:	e8 22 94 fe ff       	call   c0012799 <operator delete(void*, unsigned long)>
c0029377:	83 c4 10             	add    esp,0x10
c002937a:	83 c4 0c             	add    esp,0xc
c002937d:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c002937e <PIC::~PIC()>:
c002937e:	83 ec 0c             	sub    esp,0xc
c0029381:	ba 10 cf 02 c0       	mov    edx,0xc002cf10
c0029386:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002938a:	89 10                	mov    DWORD PTR [eax],edx
c002938c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029390:	83 ec 0c             	sub    esp,0xc
c0029393:	50                   	push   eax
c0029394:	e8 25 b3 fe ff       	call   c00146be <InterruptController::~InterruptController()>
c0029399:	83 c4 10             	add    esp,0x10
c002939c:	90                   	nop
c002939d:	83 c4 0c             	add    esp,0xc
c00293a0:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c00293a2 <PIC::~PIC()>:
c00293a2:	83 ec 0c             	sub    esp,0xc
c00293a5:	83 ec 0c             	sub    esp,0xc
c00293a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00293ac:	e8 cd ff ff ff       	call   c002937e <PIC::~PIC()>
c00293b1:	83 c4 10             	add    esp,0x10
c00293b4:	83 ec 08             	sub    esp,0x8
c00293b7:	68 58 21 00 00       	push   0x2158
c00293bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00293c0:	e8 d4 93 fe ff       	call   c0012799 <operator delete(void*, unsigned long)>
c00293c5:	83 c4 10             	add    esp,0x10
c00293c8:	83 c4 0c             	add    esp,0xc
c00293cb:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c00293cc <APICTimer::~APICTimer()>:
c00293cc:	83 ec 0c             	sub    esp,0xc
c00293cf:	ba 64 cf 02 c0       	mov    edx,0xc002cf64
c00293d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293d8:	89 10                	mov    DWORD PTR [eax],edx
c00293da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293de:	83 ec 0c             	sub    esp,0xc
c00293e1:	50                   	push   eax
c00293e2:	e8 35 d3 fe ff       	call   c001671c <Timer::~Timer()>
c00293e7:	83 c4 10             	add    esp,0x10
c00293ea:	90                   	nop
c00293eb:	83 c4 0c             	add    esp,0xc
c00293ee:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c00293f0 <APICTimer::~APICTimer()>:
c00293f0:	83 ec 0c             	sub    esp,0xc
c00293f3:	83 ec 0c             	sub    esp,0xc
c00293f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00293fa:	e8 cd ff ff ff       	call   c00293cc <APICTimer::~APICTimer()>
c00293ff:	83 c4 10             	add    esp,0x10
c0029402:	83 ec 08             	sub    esp,0x8
c0029405:	68 60 01 00 00       	push   0x160
c002940a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002940e:	e8 86 93 fe ff       	call   c0012799 <operator delete(void*, unsigned long)>
c0029413:	83 c4 10             	add    esp,0x10
c0029416:	83 c4 0c             	add    esp,0xc
c0029419:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c002941a <PIT::~PIT()>:
c002941a:	83 ec 0c             	sub    esp,0xc
c002941d:	ba b4 cf 02 c0       	mov    edx,0xc002cfb4
c0029422:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029426:	89 10                	mov    DWORD PTR [eax],edx
c0029428:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002942c:	83 ec 0c             	sub    esp,0xc
c002942f:	50                   	push   eax
c0029430:	e8 e7 d2 fe ff       	call   c001671c <Timer::~Timer()>
c0029435:	83 c4 10             	add    esp,0x10
c0029438:	90                   	nop
c0029439:	83 c4 0c             	add    esp,0xc
c002943c:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c002943e <PIT::~PIT()>:
c002943e:	83 ec 0c             	sub    esp,0xc
c0029441:	83 ec 0c             	sub    esp,0xc
c0029444:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029448:	e8 cd ff ff ff       	call   c002941a <PIT::~PIT()>
c002944d:	83 c4 10             	add    esp,0x10
c0029450:	83 ec 08             	sub    esp,0x8
c0029453:	68 5c 01 00 00       	push   0x15c
c0029458:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002945c:	e8 38 93 fe ff       	call   c0012799 <operator delete(void*, unsigned long)>
c0029461:	83 c4 10             	add    esp,0x10
c0029464:	83 c4 0c             	add    esp,0xc
c0029467:	c3                   	ret    
