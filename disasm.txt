
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 5d 9d 00 00       	call   c0009d7d <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 55 28 02 00       	call   c002287a <_init>
c0000025:	c3                   	ret    
c0000026:	bb c2 33 02 c0       	mov    ebx,0xc00233c2
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb d0 33 02 c0    	cmp    ebx,0xc00233d0
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 38 78 02 c0       	mov    eax,0xc0027838
c0000049:	3d 38 78 02 c0       	cmp    eax,0xc0027838
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 38 78 02 c0       	push   0xc0027838
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 38 78 02 c0       	mov    eax,0xc0027838
c0000075:	2d 38 78 02 c0       	sub    eax,0xc0027838
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 38 78 02 c0       	push   0xc0027838
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d c0 79 02 c0 00 	cmp    BYTE PTR ds:0xc00279c0,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb d8 33 02 c0       	mov    ebx,0xc00233d8
c00000bb:	81 eb d4 33 02 c0    	sub    ebx,0xc00233d4
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be d4 33 02 c0       	mov    esi,0xc00233d4
c00000ca:	a1 c4 79 02 c0       	mov    eax,ds:0xc00279c4
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 c4 79 02 c0       	mov    ds:0xc00279c4,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 c4 79 02 c0       	mov    eax,ds:0xc00279c4
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 38 78 02 c0       	push   0xc0027838
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 c0 79 02 c0 01 	mov    BYTE PTR ds:0xc00279c0,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 c8 79 02 c0       	push   0xc00279c8
c000012c:	68 38 78 02 c0       	push   0xc0027838
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <detectCPUID>:
c0000219:	9c                   	pushf  
c000021a:	9c                   	pushf  
c000021b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000222:	9d                   	popf   
c0000223:	9c                   	pushf  
c0000224:	58                   	pop    eax
c0000225:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000228:	9d                   	popf   
c0000229:	25 00 00 20 00       	and    eax,0x200000
c000022e:	c3                   	ret    

c000022f <goToVM86>:
c000022f:	55                   	push   ebp
c0000230:	89 e5                	mov    ebp,esp
c0000232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000235:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000238:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000023b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000023e:	25 ff ff 00 00       	and    eax,0xffff
c0000243:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000249:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000024f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000255:	52                   	push   edx
c0000256:	51                   	push   ecx
c0000257:	68 02 02 02 00       	push   0x20202
c000025c:	53                   	push   ebx
c000025d:	50                   	push   eax
c000025e:	cf                   	iret   

c000025f <goToUsermode>:
c000025f:	55                   	push   ebp
c0000260:	89 e5                	mov    ebp,esp
c0000262:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000265:	66 b8 23 00          	mov    ax,0x23
c0000269:	66 8e d8             	mov    ds,ax
c000026c:	66 8e c0             	mov    es,ax
c000026f:	66 8e e0             	mov    fs,ax
c0000272:	66 8e e8             	mov    gs,ax
c0000275:	89 e0                	mov    eax,esp
c0000277:	68 23 00 00 00       	push   0x23
c000027c:	50                   	push   eax
c000027d:	68 02 02 00 00       	push   0x202
c0000282:	68 1b 00 00 00       	push   0x1b
c0000287:	53                   	push   ebx
c0000288:	cf                   	iret   

c0000289 <switchToThreadASMFirstTime>:
c0000289:	9c                   	pushf  
c000028a:	fa                   	cli    
c000028b:	50                   	push   eax
c000028c:	53                   	push   ebx
c000028d:	51                   	push   ecx
c000028e:	52                   	push   edx
c000028f:	56                   	push   esi
c0000290:	57                   	push   edi
c0000291:	55                   	push   ebp
c0000292:	e9 11 00 00 00       	jmp    c00002a8 <commonThreadSwitch>

c0000297 <switchToThreadASM>:
c0000297:	9c                   	pushf  
c0000298:	50                   	push   eax
c0000299:	53                   	push   ebx
c000029a:	51                   	push   ecx
c000029b:	52                   	push   edx
c000029c:	56                   	push   esi
c000029d:	57                   	push   edi
c000029e:	55                   	push   ebp
c000029f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002a5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002a8 <commonThreadSwitch>:
c00002a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002b4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002b7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ba:	0f 20 d9             	mov    ecx,cr3
c00002bd:	39 c8                	cmp    eax,ecx
c00002bf:	74 03                	je     c00002c4 <commonThreadSwitch.doneVAS>
c00002c1:	0f 22 d8             	mov    cr3,eax

c00002c4 <commonThreadSwitch.doneVAS>:
c00002c4:	85 d2                	test   edx,edx
c00002c6:	75 11                	jne    c00002d9 <commonThreadSwitch.firstTime>
c00002c8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002cb:	e8 64 79 01 00       	call   c0017c34 <changeTSS>
c00002d0:	5d                   	pop    ebp
c00002d1:	5f                   	pop    edi
c00002d2:	5e                   	pop    esi
c00002d3:	5a                   	pop    edx
c00002d4:	59                   	pop    ecx
c00002d5:	5b                   	pop    ebx
c00002d6:	58                   	pop    eax
c00002d7:	9d                   	popf   
c00002d8:	c3                   	ret    

c00002d9 <commonThreadSwitch.firstTime>:
c00002d9:	fa                   	cli    
c00002da:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002dd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002e2:	60                   	pusha  
c00002e3:	e8 4a ca 00 00       	call   c000cd32 <mapVASFirstTime>
c00002e8:	61                   	popa   
c00002e9:	89 c4                	mov    esp,eax
c00002eb:	56                   	push   esi
c00002ec:	52                   	push   edx
c00002ed:	e8 42 79 01 00       	call   c0017c34 <changeTSS>
c00002f2:	5a                   	pop    edx
c00002f3:	5e                   	pop    esi
c00002f4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002fb:	5d                   	pop    ebp
c00002fc:	5f                   	pop    edi
c00002fd:	5e                   	pop    esi
c00002fe:	59                   	pop    ecx
c00002ff:	59                   	pop    ecx
c0000300:	5b                   	pop    ebx
c0000301:	58                   	pop    eax
c0000302:	81 c4 04 00 00 00    	add    esp,0x4
c0000308:	6a 02                	push   0x2
c000030a:	9d                   	popf   
c000030b:	52                   	push   edx
c000030c:	e8 03 7e 01 00       	call   c0018114 <taskStartupFunction>
c0000311:	5a                   	pop    edx
c0000312:	50                   	push   eax
c0000313:	ff d2                	call   edx
c0000315:	e8 46 84 01 00       	call   c0018760 <taskReturned>
c000031a:	e9 fb ff ff ff       	jmp    c000031a <commonThreadSwitch.firstTime+0x41>

c000031f <asmQuickAcquireLock>:
c000031f:	55                   	push   ebp
c0000320:	89 e5                	mov    ebp,esp
c0000322:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000325 <asmQuickAcquireLock.retry>:
c0000325:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000032a:	72 02                	jb     c000032e <asmQuickAcquireLock.spin_with_pause>
c000032c:	fa                   	cli    
c000032d:	c3                   	ret    

c000032e <asmQuickAcquireLock.spin_with_pause>:
c000032e:	f3 90                	pause  
c0000330:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000336:	75 f6                	jne    c000032e <asmQuickAcquireLock.spin_with_pause>
c0000338:	e9 e8 ff ff ff       	jmp    c0000325 <asmQuickAcquireLock.retry>

c000033d <asmQuickReleaseLock>:
c000033d:	55                   	push   ebp
c000033e:	89 e5                	mov    ebp,esp
c0000340:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000347:	5d                   	pop    ebp
c0000348:	c3                   	ret    

c0000349 <asmAcquireLock>:
c0000349:	55                   	push   ebp
c000034a:	89 e5                	mov    ebp,esp
c000034c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000034f <asmAcquireLock.retry>:
c000034f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000354:	72 05                	jb     c000035b <asmAcquireLock.spin_with_pause>
c0000356:	9c                   	pushf  
c0000357:	58                   	pop    eax
c0000358:	fa                   	cli    
c0000359:	5d                   	pop    ebp
c000035a:	c3                   	ret    

c000035b <asmAcquireLock.spin_with_pause>:
c000035b:	f3 90                	pause  
c000035d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000363:	75 f6                	jne    c000035b <asmAcquireLock.spin_with_pause>
c0000365:	e9 e5 ff ff ff       	jmp    c000034f <asmAcquireLock.retry>

c000036a <asmReleaseLock>:
c000036a:	55                   	push   ebp
c000036b:	89 e5                	mov    ebp,esp
c000036d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000370:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000373:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000379:	52                   	push   edx
c000037a:	9d                   	popf   
c000037b:	5d                   	pop    ebp
c000037c:	c3                   	ret    

c000037d <loadGDT>:
c000037d:	0f 01 15 10 7e 02 c0 	lgdtd  ds:0xc0027e10
c0000384:	66 b8 10 00          	mov    ax,0x10
c0000388:	66 8e d8             	mov    ds,ax
c000038b:	66 8e c0             	mov    es,ax
c000038e:	66 8e e0             	mov    fs,ax
c0000391:	66 8e e8             	mov    gs,ax
c0000394:	66 8e d0             	mov    ss,ax
c0000397:	e9 00 00 00 00       	jmp    c000039c <flush2>

c000039c <flush2>:
c000039c:	c3                   	ret    

c000039d <isr0>:
c000039d:	fa                   	cli    
c000039e:	68 00 00 00 00       	push   0x0
c00003a3:	68 00 00 00 00       	push   0x0
c00003a8:	e9 44 01 00 00       	jmp    c00004f1 <int_common_stub>

c00003ad <isr1>:
c00003ad:	fa                   	cli    
c00003ae:	6a 00                	push   0x0
c00003b0:	6a 01                	push   0x1
c00003b2:	e9 3a 01 00 00       	jmp    c00004f1 <int_common_stub>

c00003b7 <isr2>:
c00003b7:	fa                   	cli    
c00003b8:	6a 00                	push   0x0
c00003ba:	6a 02                	push   0x2
c00003bc:	e9 30 01 00 00       	jmp    c00004f1 <int_common_stub>

c00003c1 <isr3>:
c00003c1:	fa                   	cli    
c00003c2:	6a 00                	push   0x0
c00003c4:	6a 03                	push   0x3
c00003c6:	e9 26 01 00 00       	jmp    c00004f1 <int_common_stub>

c00003cb <isr4>:
c00003cb:	fa                   	cli    
c00003cc:	6a 00                	push   0x0
c00003ce:	6a 04                	push   0x4
c00003d0:	e9 1c 01 00 00       	jmp    c00004f1 <int_common_stub>

c00003d5 <isr5>:
c00003d5:	fa                   	cli    
c00003d6:	6a 00                	push   0x0
c00003d8:	6a 05                	push   0x5
c00003da:	e9 12 01 00 00       	jmp    c00004f1 <int_common_stub>

c00003df <isr6>:
c00003df:	fa                   	cli    
c00003e0:	6a 00                	push   0x0
c00003e2:	6a 06                	push   0x6
c00003e4:	e9 08 01 00 00       	jmp    c00004f1 <int_common_stub>

c00003e9 <isr7>:
c00003e9:	fa                   	cli    
c00003ea:	6a 00                	push   0x0
c00003ec:	6a 07                	push   0x7
c00003ee:	e9 fe 00 00 00       	jmp    c00004f1 <int_common_stub>

c00003f3 <isr8>:
c00003f3:	fa                   	cli    
c00003f4:	6a 08                	push   0x8
c00003f6:	e9 f6 00 00 00       	jmp    c00004f1 <int_common_stub>

c00003fb <isr9>:
c00003fb:	fa                   	cli    
c00003fc:	6a 00                	push   0x0
c00003fe:	6a 09                	push   0x9
c0000400:	e9 ec 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000405 <isr10>:
c0000405:	fa                   	cli    
c0000406:	6a 0a                	push   0xa
c0000408:	e9 e4 00 00 00       	jmp    c00004f1 <int_common_stub>

c000040d <isr11>:
c000040d:	fa                   	cli    
c000040e:	6a 0b                	push   0xb
c0000410:	e9 dc 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000415 <isr12>:
c0000415:	fa                   	cli    
c0000416:	6a 0c                	push   0xc
c0000418:	e9 d4 00 00 00       	jmp    c00004f1 <int_common_stub>

c000041d <isr13>:
c000041d:	fa                   	cli    
c000041e:	6a 0d                	push   0xd
c0000420:	e9 cc 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000425 <isr14>:
c0000425:	fa                   	cli    
c0000426:	6a 0e                	push   0xe
c0000428:	e9 c4 00 00 00       	jmp    c00004f1 <int_common_stub>

c000042d <isr15>:
c000042d:	fa                   	cli    
c000042e:	6a 00                	push   0x0
c0000430:	6a 0f                	push   0xf
c0000432:	e9 ba 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000437 <isr16>:
c0000437:	fa                   	cli    
c0000438:	6a 00                	push   0x0
c000043a:	6a 10                	push   0x10
c000043c:	e9 b0 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000441 <isr17>:
c0000441:	fa                   	cli    
c0000442:	6a 00                	push   0x0
c0000444:	6a 11                	push   0x11
c0000446:	e9 a6 00 00 00       	jmp    c00004f1 <int_common_stub>

c000044b <isr18>:
c000044b:	fa                   	cli    
c000044c:	6a 00                	push   0x0
c000044e:	6a 12                	push   0x12
c0000450:	e9 9c 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000455 <irq3>:
c0000455:	fa                   	cli    
c0000456:	6a 00                	push   0x0
c0000458:	6a 23                	push   0x23
c000045a:	e9 92 00 00 00       	jmp    c00004f1 <int_common_stub>

c000045f <irq4>:
c000045f:	fa                   	cli    
c0000460:	6a 00                	push   0x0
c0000462:	6a 24                	push   0x24
c0000464:	e9 88 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000469 <irq5>:
c0000469:	fa                   	cli    
c000046a:	6a 00                	push   0x0
c000046c:	6a 25                	push   0x25
c000046e:	e9 7e 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000473 <irq6>:
c0000473:	fa                   	cli    
c0000474:	6a 00                	push   0x0
c0000476:	6a 26                	push   0x26
c0000478:	e9 74 00 00 00       	jmp    c00004f1 <int_common_stub>

c000047d <irq7>:
c000047d:	fa                   	cli    
c000047e:	6a 00                	push   0x0
c0000480:	6a 27                	push   0x27
c0000482:	e9 6a 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000487 <irq8>:
c0000487:	fa                   	cli    
c0000488:	6a 00                	push   0x0
c000048a:	6a 28                	push   0x28
c000048c:	e9 60 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000491 <irq9>:
c0000491:	fa                   	cli    
c0000492:	6a 00                	push   0x0
c0000494:	6a 29                	push   0x29
c0000496:	e9 56 00 00 00       	jmp    c00004f1 <int_common_stub>

c000049b <irq10>:
c000049b:	fa                   	cli    
c000049c:	6a 00                	push   0x0
c000049e:	6a 2a                	push   0x2a
c00004a0:	e9 4c 00 00 00       	jmp    c00004f1 <int_common_stub>

c00004a5 <irq11>:
c00004a5:	fa                   	cli    
c00004a6:	6a 00                	push   0x0
c00004a8:	6a 2b                	push   0x2b
c00004aa:	e9 42 00 00 00       	jmp    c00004f1 <int_common_stub>

c00004af <irq12>:
c00004af:	fa                   	cli    
c00004b0:	6a 00                	push   0x0
c00004b2:	6a 2c                	push   0x2c
c00004b4:	e9 38 00 00 00       	jmp    c00004f1 <int_common_stub>

c00004b9 <irq13>:
c00004b9:	fa                   	cli    
c00004ba:	6a 00                	push   0x0
c00004bc:	6a 2d                	push   0x2d
c00004be:	e9 2e 00 00 00       	jmp    c00004f1 <int_common_stub>

c00004c3 <irq14>:
c00004c3:	fa                   	cli    
c00004c4:	6a 00                	push   0x0
c00004c6:	6a 2e                	push   0x2e
c00004c8:	e9 24 00 00 00       	jmp    c00004f1 <int_common_stub>

c00004cd <irq15>:
c00004cd:	fa                   	cli    
c00004ce:	6a 00                	push   0x0
c00004d0:	6a 2f                	push   0x2f
c00004d2:	e9 1a 00 00 00       	jmp    c00004f1 <int_common_stub>

c00004d7 <irq1>:
c00004d7:	fa                   	cli    
c00004d8:	6a 00                	push   0x0
c00004da:	6a 21                	push   0x21
c00004dc:	eb 13                	jmp    c00004f1 <int_common_stub>

c00004de <irq2>:
c00004de:	fa                   	cli    
c00004df:	6a 00                	push   0x0
c00004e1:	6a 22                	push   0x22
c00004e3:	eb 0c                	jmp    c00004f1 <int_common_stub>

c00004e5 <isr96>:
c00004e5:	6a 00                	push   0x0
c00004e7:	6a 60                	push   0x60
c00004e9:	fb                   	sti    
c00004ea:	eb 05                	jmp    c00004f1 <int_common_stub>

c00004ec <irq0>:
c00004ec:	fa                   	cli    
c00004ed:	6a 00                	push   0x0
c00004ef:	6a 20                	push   0x20

c00004f1 <int_common_stub>:
c00004f1:	60                   	pusha  
c00004f2:	1e                   	push   ds
c00004f3:	06                   	push   es
c00004f4:	0f a0                	push   fs
c00004f6:	0f a8                	push   gs
c00004f8:	66 b8 10 00          	mov    ax,0x10
c00004fc:	66 8e d8             	mov    ds,ax
c00004ff:	66 8e c0             	mov    es,ax
c0000502:	66 8e e0             	mov    fs,ax
c0000505:	66 8e e8             	mov    gs,ax
c0000508:	54                   	push   esp
c0000509:	fc                   	cld    
c000050a:	e8 fa e6 00 00       	call   c000ec09 <int_handler>
c000050f:	81 c4 04 00 00 00    	add    esp,0x4
c0000515:	0f a9                	pop    gs
c0000517:	0f a1                	pop    fs
c0000519:	07                   	pop    es
c000051a:	1f                   	pop    ds
c000051b:	61                   	popa   
c000051c:	81 c4 08 00 00 00    	add    esp,0x8
c0000522:	cf                   	iret   

c0000523 <irq16>:
c0000523:	fa                   	cli    
c0000524:	6a 00                	push   0x0
c0000526:	6a 30                	push   0x30
c0000528:	e9 c4 ff ff ff       	jmp    c00004f1 <int_common_stub>

c000052d <irq17>:
c000052d:	fa                   	cli    
c000052e:	6a 00                	push   0x0
c0000530:	6a 31                	push   0x31
c0000532:	e9 ba ff ff ff       	jmp    c00004f1 <int_common_stub>

c0000537 <irq18>:
c0000537:	fa                   	cli    
c0000538:	6a 00                	push   0x0
c000053a:	6a 32                	push   0x32
c000053c:	e9 b0 ff ff ff       	jmp    c00004f1 <int_common_stub>

c0000541 <irq19>:
c0000541:	fa                   	cli    
c0000542:	6a 00                	push   0x0
c0000544:	6a 33                	push   0x33
c0000546:	e9 a6 ff ff ff       	jmp    c00004f1 <int_common_stub>

c000054b <irq20>:
c000054b:	fa                   	cli    
c000054c:	6a 00                	push   0x0
c000054e:	6a 34                	push   0x34
c0000550:	e9 9c ff ff ff       	jmp    c00004f1 <int_common_stub>

c0000555 <irq21>:
c0000555:	fa                   	cli    
c0000556:	6a 00                	push   0x0
c0000558:	6a 35                	push   0x35
c000055a:	e9 92 ff ff ff       	jmp    c00004f1 <int_common_stub>

c000055f <irq22>:
c000055f:	fa                   	cli    
c0000560:	6a 00                	push   0x0
c0000562:	6a 36                	push   0x36
c0000564:	e9 88 ff ff ff       	jmp    c00004f1 <int_common_stub>

c0000569 <irq23>:
c0000569:	fa                   	cli    
c000056a:	6a 00                	push   0x0
c000056c:	6a 37                	push   0x37
c000056e:	e9 7e ff ff ff       	jmp    c00004f1 <int_common_stub>

c0000573 <memcpy>:
c0000573:	e9 7a 83 00 00       	jmp    c00088f2 <__not_memcpy>

c0000578 <memcmp>:
c0000578:	56                   	push   esi
c0000579:	53                   	push   ebx
c000057a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000057e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000582:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000586:	85 f6                	test   esi,esi
c0000588:	74 1d                	je     c00005a7 <memcmp+0x2f>
c000058a:	8a 08                	mov    cl,BYTE PTR [eax]
c000058c:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c000058f:	38 cb                	cmp    bl,cl
c0000591:	75 19                	jne    c00005ac <memcmp+0x34>
c0000593:	01 c6                	add    esi,eax
c0000595:	eb 0a                	jmp    c00005a1 <memcmp+0x29>
c0000597:	90                   	nop
c0000598:	8a 08                	mov    cl,BYTE PTR [eax]
c000059a:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c000059d:	38 d9                	cmp    cl,bl
c000059f:	75 0b                	jne    c00005ac <memcmp+0x34>
c00005a1:	40                   	inc    eax
c00005a2:	42                   	inc    edx
c00005a3:	39 f0                	cmp    eax,esi
c00005a5:	75 f1                	jne    c0000598 <memcmp+0x20>
c00005a7:	31 c0                	xor    eax,eax
c00005a9:	5b                   	pop    ebx
c00005aa:	5e                   	pop    esi
c00005ab:	c3                   	ret    
c00005ac:	0f b6 c1             	movzx  eax,cl
c00005af:	29 d8                	sub    eax,ebx
c00005b1:	5b                   	pop    ebx
c00005b2:	5e                   	pop    esi
c00005b3:	c3                   	ret    

c00005b4 <memmove>:
c00005b4:	55                   	push   ebp
c00005b5:	57                   	push   edi
c00005b6:	56                   	push   esi
c00005b7:	53                   	push   ebx
c00005b8:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00005bc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00005c0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00005c4:	39 dd                	cmp    ebp,ebx
c00005c6:	0f 83 80 00 00 00    	jae    c000064c <memmove+0x98>
c00005cc:	85 d2                	test   edx,edx
c00005ce:	74 74                	je     c0000644 <memmove+0x90>
c00005d0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00005d3:	8d 75 04             	lea    esi,[ebp+0x4]
c00005d6:	39 cd                	cmp    ebp,ecx
c00005d8:	0f 93 c1             	setae  cl
c00005db:	39 f3                	cmp    ebx,esi
c00005dd:	0f 93 c0             	setae  al
c00005e0:	89 c6                	mov    esi,eax
c00005e2:	09 ce                	or     esi,ecx
c00005e4:	8d 4a ff             	lea    ecx,[edx-0x1]
c00005e7:	89 f0                	mov    eax,esi
c00005e9:	83 f9 0c             	cmp    ecx,0xc
c00005ec:	0f 97 c1             	seta   cl
c00005ef:	84 c8                	test   al,cl
c00005f1:	74 75                	je     c0000668 <memmove+0xb4>
c00005f3:	89 e9                	mov    ecx,ebp
c00005f5:	09 d9                	or     ecx,ebx
c00005f7:	83 e1 03             	and    ecx,0x3
c00005fa:	75 6c                	jne    c0000668 <memmove+0xb4>
c00005fc:	89 d7                	mov    edi,edx
c00005fe:	89 d9                	mov    ecx,ebx
c0000600:	83 e7 fc             	and    edi,0xfffffffc
c0000603:	89 ee                	mov    esi,ebp
c0000605:	01 df                	add    edi,ebx
c0000607:	90                   	nop
c0000608:	8b 01                	mov    eax,DWORD PTR [ecx]
c000060a:	83 c6 04             	add    esi,0x4
c000060d:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000610:	83 c1 04             	add    ecx,0x4
c0000613:	39 f9                	cmp    ecx,edi
c0000615:	75 f1                	jne    c0000608 <memmove+0x54>
c0000617:	89 d1                	mov    ecx,edx
c0000619:	89 d7                	mov    edi,edx
c000061b:	83 e1 fc             	and    ecx,0xfffffffc
c000061e:	29 cf                	sub    edi,ecx
c0000620:	01 cb                	add    ebx,ecx
c0000622:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c0000626:	39 ca                	cmp    edx,ecx
c0000628:	74 1a                	je     c0000644 <memmove+0x90>
c000062a:	8a 03                	mov    al,BYTE PTR [ebx]
c000062c:	83 ff 01             	cmp    edi,0x1
c000062f:	88 06                	mov    BYTE PTR [esi],al
c0000631:	74 11                	je     c0000644 <memmove+0x90>
c0000633:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0000636:	83 ff 02             	cmp    edi,0x2
c0000639:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c000063c:	74 06                	je     c0000644 <memmove+0x90>
c000063e:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000641:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000644:	5b                   	pop    ebx
c0000645:	89 e8                	mov    eax,ebp
c0000647:	5e                   	pop    esi
c0000648:	5f                   	pop    edi
c0000649:	5d                   	pop    ebp
c000064a:	c3                   	ret    
c000064b:	90                   	nop
c000064c:	76 f6                	jbe    c0000644 <memmove+0x90>
c000064e:	85 d2                	test   edx,edx
c0000650:	74 f2                	je     c0000644 <memmove+0x90>
c0000652:	4b                   	dec    ebx
c0000653:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000656:	66 90                	xchg   ax,ax
c0000658:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000065b:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c000065e:	4a                   	dec    edx
c000065f:	75 f7                	jne    c0000658 <memmove+0xa4>
c0000661:	5b                   	pop    ebx
c0000662:	89 e8                	mov    eax,ebp
c0000664:	5e                   	pop    esi
c0000665:	5f                   	pop    edi
c0000666:	5d                   	pop    ebp
c0000667:	c3                   	ret    
c0000668:	01 ea                	add    edx,ebp
c000066a:	89 e9                	mov    ecx,ebp
c000066c:	8a 03                	mov    al,BYTE PTR [ebx]
c000066e:	41                   	inc    ecx
c000066f:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000672:	43                   	inc    ebx
c0000673:	39 d1                	cmp    ecx,edx
c0000675:	75 f5                	jne    c000066c <memmove+0xb8>
c0000677:	eb cb                	jmp    c0000644 <memmove+0x90>
c0000679:	8d 76 00             	lea    esi,[esi+0x0]

c000067c <memset>:
c000067c:	57                   	push   edi
c000067d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000681:	85 c9                	test   ecx,ecx
c0000683:	74 0b                	je     c0000690 <memset+0x14>
c0000685:	fc                   	cld    
c0000686:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000068a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000068e:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000690:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000694:	5f                   	pop    edi
c0000695:	c3                   	ret    
c0000696:	66 90                	xchg   ax,ax

c0000698 <strlen>:
c0000698:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000069c:	31 c0                	xor    eax,eax
c000069e:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c00006a1:	74 09                	je     c00006ac <strlen+0x14>
c00006a3:	90                   	nop
c00006a4:	40                   	inc    eax
c00006a5:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006a9:	75 f9                	jne    c00006a4 <strlen+0xc>
c00006ab:	c3                   	ret    
c00006ac:	c3                   	ret    
c00006ad:	8d 76 00             	lea    esi,[esi+0x0]

c00006b0 <strpbrk>:
c00006b0:	57                   	push   edi
c00006b1:	56                   	push   esi
c00006b2:	53                   	push   ebx
c00006b3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00006bb:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006bd:	84 db                	test   bl,bl
c00006bf:	74 21                	je     c00006e2 <strpbrk+0x32>
c00006c1:	8a 07                	mov    al,BYTE PTR [edi]
c00006c3:	84 c0                	test   al,al
c00006c5:	74 14                	je     c00006db <strpbrk+0x2b>
c00006c7:	38 d8                	cmp    al,bl
c00006c9:	74 19                	je     c00006e4 <strpbrk+0x34>
c00006cb:	89 fa                	mov    edx,edi
c00006cd:	eb 05                	jmp    c00006d4 <strpbrk+0x24>
c00006cf:	90                   	nop
c00006d0:	38 d9                	cmp    cl,bl
c00006d2:	74 10                	je     c00006e4 <strpbrk+0x34>
c00006d4:	42                   	inc    edx
c00006d5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00006d7:	84 c9                	test   cl,cl
c00006d9:	75 f5                	jne    c00006d0 <strpbrk+0x20>
c00006db:	46                   	inc    esi
c00006dc:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006de:	84 db                	test   bl,bl
c00006e0:	75 e1                	jne    c00006c3 <strpbrk+0x13>
c00006e2:	31 f6                	xor    esi,esi
c00006e4:	89 f0                	mov    eax,esi
c00006e6:	5b                   	pop    ebx
c00006e7:	5e                   	pop    esi
c00006e8:	5f                   	pop    edi
c00006e9:	c3                   	ret    
c00006ea:	66 90                	xchg   ax,ax

c00006ec <strtok>:
c00006ec:	56                   	push   esi
c00006ed:	53                   	push   ebx
c00006ee:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00006f2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006f6:	85 db                	test   ebx,ebx
c00006f8:	75 07                	jne    c0000701 <strtok+0x15>
c00006fa:	eb 2c                	jmp    c0000728 <strtok+0x3c>
c00006fc:	43                   	inc    ebx
c00006fd:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000701:	56                   	push   esi
c0000702:	53                   	push   ebx
c0000703:	e8 a8 ff ff ff       	call   c00006b0 <strpbrk>
c0000708:	5a                   	pop    edx
c0000709:	a3 e0 79 02 c0       	mov    ds:0xc00279e0,eax
c000070e:	59                   	pop    ecx
c000070f:	39 d8                	cmp    eax,ebx
c0000711:	74 e9                	je     c00006fc <strtok+0x10>
c0000713:	85 c0                	test   eax,eax
c0000715:	74 1b                	je     c0000732 <strtok+0x46>
c0000717:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000071a:	8d 50 01             	lea    edx,[eax+0x1]
c000071d:	89 d8                	mov    eax,ebx
c000071f:	89 15 e0 79 02 c0    	mov    DWORD PTR ds:0xc00279e0,edx
c0000725:	5b                   	pop    ebx
c0000726:	5e                   	pop    esi
c0000727:	c3                   	ret    
c0000728:	8b 1d e0 79 02 c0    	mov    ebx,DWORD PTR ds:0xc00279e0
c000072e:	85 db                	test   ebx,ebx
c0000730:	75 cf                	jne    c0000701 <strtok+0x15>
c0000732:	31 c0                	xor    eax,eax
c0000734:	5b                   	pop    ebx
c0000735:	5e                   	pop    esi
c0000736:	c3                   	ret    
c0000737:	90                   	nop

c0000738 <strcpy>:
c0000738:	53                   	push   ebx
c0000739:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000073d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000741:	89 c3                	mov    ebx,eax
c0000743:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000745:	84 d2                	test   dl,dl
c0000747:	74 0d                	je     c0000756 <strcpy+0x1e>
c0000749:	8d 76 00             	lea    esi,[esi+0x0]
c000074c:	88 13                	mov    BYTE PTR [ebx],dl
c000074e:	41                   	inc    ecx
c000074f:	43                   	inc    ebx
c0000750:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000752:	84 d2                	test   dl,dl
c0000754:	75 f6                	jne    c000074c <strcpy+0x14>
c0000756:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000759:	5b                   	pop    ebx
c000075a:	c3                   	ret    
c000075b:	90                   	nop

c000075c <strncpy>:
c000075c:	55                   	push   ebp
c000075d:	57                   	push   edi
c000075e:	56                   	push   esi
c000075f:	53                   	push   ebx
c0000760:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000764:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000768:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000076c:	85 c0                	test   eax,eax
c000076e:	74 39                	je     c00007a9 <strncpy+0x4d>
c0000770:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000772:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000775:	8d 55 01             	lea    edx,[ebp+0x1]
c0000778:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000077b:	84 db                	test   bl,bl
c000077d:	74 31                	je     c00007b0 <strncpy+0x54>
c000077f:	85 c9                	test   ecx,ecx
c0000781:	74 26                	je     c00007a9 <strncpy+0x4d>
c0000783:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000786:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000789:	8d 55 02             	lea    edx,[ebp+0x2]
c000078c:	8d 46 02             	lea    eax,[esi+0x2]
c000078f:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000792:	84 db                	test   bl,bl
c0000794:	75 0f                	jne    c00007a5 <strncpy+0x49>
c0000796:	eb 18                	jmp    c00007b0 <strncpy+0x54>
c0000798:	40                   	inc    eax
c0000799:	42                   	inc    edx
c000079a:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c000079d:	49                   	dec    ecx
c000079e:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00007a1:	84 db                	test   bl,bl
c00007a3:	74 0b                	je     c00007b0 <strncpy+0x54>
c00007a5:	85 c9                	test   ecx,ecx
c00007a7:	75 ef                	jne    c0000798 <strncpy+0x3c>
c00007a9:	5b                   	pop    ebx
c00007aa:	89 e8                	mov    eax,ebp
c00007ac:	5e                   	pop    esi
c00007ad:	5f                   	pop    edi
c00007ae:	5d                   	pop    ebp
c00007af:	c3                   	ret    
c00007b0:	85 c9                	test   ecx,ecx
c00007b2:	74 f5                	je     c00007a9 <strncpy+0x4d>
c00007b4:	fc                   	cld    
c00007b5:	31 c0                	xor    eax,eax
c00007b7:	89 d7                	mov    edi,edx
c00007b9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00007bb:	89 e8                	mov    eax,ebp
c00007bd:	5b                   	pop    ebx
c00007be:	5e                   	pop    esi
c00007bf:	5f                   	pop    edi
c00007c0:	5d                   	pop    ebp
c00007c1:	c3                   	ret    
c00007c2:	66 90                	xchg   ax,ax

c00007c4 <strcmp>:
c00007c4:	56                   	push   esi
c00007c5:	53                   	push   ebx
c00007c6:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00007ca:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007ce:	8a 16                	mov    dl,BYTE PTR [esi]
c00007d0:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007d3:	38 d1                	cmp    cl,dl
c00007d5:	75 1d                	jne    c00007f4 <strcmp+0x30>
c00007d7:	84 c9                	test   cl,cl
c00007d9:	74 21                	je     c00007fc <strcmp+0x38>
c00007db:	b8 01 00 00 00       	mov    eax,0x1
c00007e0:	eb 07                	jmp    c00007e9 <strcmp+0x25>
c00007e2:	66 90                	xchg   ax,ax
c00007e4:	40                   	inc    eax
c00007e5:	84 d2                	test   dl,dl
c00007e7:	74 13                	je     c00007fc <strcmp+0x38>
c00007e9:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00007ec:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00007f0:	38 ca                	cmp    dl,cl
c00007f2:	74 f0                	je     c00007e4 <strcmp+0x20>
c00007f4:	0f b6 c2             	movzx  eax,dl
c00007f7:	5b                   	pop    ebx
c00007f8:	29 c8                	sub    eax,ecx
c00007fa:	5e                   	pop    esi
c00007fb:	c3                   	ret    
c00007fc:	31 c0                	xor    eax,eax
c00007fe:	5b                   	pop    ebx
c00007ff:	5e                   	pop    esi
c0000800:	c3                   	ret    
c0000801:	8d 76 00             	lea    esi,[esi+0x0]

c0000804 <strchr>:
c0000804:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000808:	8a 10                	mov    dl,BYTE PTR [eax]
c000080a:	84 d2                	test   dl,dl
c000080c:	74 15                	je     c0000823 <strchr+0x1f>
c000080e:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0000812:	38 ca                	cmp    dl,cl
c0000814:	75 06                	jne    c000081c <strchr+0x18>
c0000816:	eb 0e                	jmp    c0000826 <strchr+0x22>
c0000818:	38 ca                	cmp    dl,cl
c000081a:	74 09                	je     c0000825 <strchr+0x21>
c000081c:	40                   	inc    eax
c000081d:	8a 10                	mov    dl,BYTE PTR [eax]
c000081f:	84 d2                	test   dl,dl
c0000821:	75 f5                	jne    c0000818 <strchr+0x14>
c0000823:	31 c0                	xor    eax,eax
c0000825:	c3                   	ret    
c0000826:	c3                   	ret    
c0000827:	90                   	nop

c0000828 <strncmp>:
c0000828:	57                   	push   edi
c0000829:	56                   	push   esi
c000082a:	53                   	push   ebx
c000082b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000082f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000833:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000837:	85 ff                	test   edi,edi
c0000839:	74 28                	je     c0000863 <strncmp+0x3b>
c000083b:	8a 16                	mov    dl,BYTE PTR [esi]
c000083d:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000840:	38 d1                	cmp    cl,dl
c0000842:	75 28                	jne    c000086c <strncmp+0x44>
c0000844:	8d 46 01             	lea    eax,[esi+0x1]
c0000847:	84 c9                	test   cl,cl
c0000849:	74 18                	je     c0000863 <strncmp+0x3b>
c000084b:	01 fe                	add    esi,edi
c000084d:	eb 0f                	jmp    c000085e <strncmp+0x36>
c000084f:	90                   	nop
c0000850:	8a 10                	mov    dl,BYTE PTR [eax]
c0000852:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000855:	38 ca                	cmp    dl,cl
c0000857:	75 13                	jne    c000086c <strncmp+0x44>
c0000859:	40                   	inc    eax
c000085a:	84 d2                	test   dl,dl
c000085c:	74 05                	je     c0000863 <strncmp+0x3b>
c000085e:	43                   	inc    ebx
c000085f:	39 c6                	cmp    esi,eax
c0000861:	75 ed                	jne    c0000850 <strncmp+0x28>
c0000863:	5b                   	pop    ebx
c0000864:	31 c0                	xor    eax,eax
c0000866:	5e                   	pop    esi
c0000867:	5f                   	pop    edi
c0000868:	c3                   	ret    
c0000869:	8d 76 00             	lea    esi,[esi+0x0]
c000086c:	5b                   	pop    ebx
c000086d:	0f b6 c2             	movzx  eax,dl
c0000870:	5e                   	pop    esi
c0000871:	29 c8                	sub    eax,ecx
c0000873:	5f                   	pop    edi
c0000874:	c3                   	ret    
c0000875:	8d 76 00             	lea    esi,[esi+0x0]

c0000878 <strcat>:
c0000878:	56                   	push   esi
c0000879:	53                   	push   ebx
c000087a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000882:	89 c3                	mov    ebx,eax
c0000884:	eb 04                	jmp    c000088a <strcat+0x12>
c0000886:	66 90                	xchg   ax,ax
c0000888:	89 d3                	mov    ebx,edx
c000088a:	8d 53 01             	lea    edx,[ebx+0x1]
c000088d:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000891:	75 f5                	jne    c0000888 <strcat+0x10>
c0000893:	31 d2                	xor    edx,edx
c0000895:	8d 76 00             	lea    esi,[esi+0x0]
c0000898:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000089b:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c000089e:	42                   	inc    edx
c000089f:	84 c9                	test   cl,cl
c00008a1:	75 f5                	jne    c0000898 <strcat+0x20>
c00008a3:	5b                   	pop    ebx
c00008a4:	5e                   	pop    esi
c00008a5:	c3                   	ret    
c00008a6:	66 90                	xchg   ax,ax

c00008a8 <strncat>:
c00008a8:	56                   	push   esi
c00008a9:	53                   	push   ebx
c00008aa:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008b2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008b6:	85 f6                	test   esi,esi
c00008b8:	74 1e                	je     c00008d8 <strncat+0x30>
c00008ba:	89 c2                	mov    edx,eax
c00008bc:	42                   	inc    edx
c00008bd:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c1:	75 f9                	jne    c00008bc <strncat+0x14>
c00008c3:	01 ce                	add    esi,ecx
c00008c5:	eb 06                	jmp    c00008cd <strncat+0x25>
c00008c7:	90                   	nop
c00008c8:	39 f1                	cmp    ecx,esi
c00008ca:	74 10                	je     c00008dc <strncat+0x34>
c00008cc:	42                   	inc    edx
c00008cd:	41                   	inc    ecx
c00008ce:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008d1:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008d4:	84 db                	test   bl,bl
c00008d6:	75 f0                	jne    c00008c8 <strncat+0x20>
c00008d8:	5b                   	pop    ebx
c00008d9:	5e                   	pop    esi
c00008da:	c3                   	ret    
c00008db:	90                   	nop
c00008dc:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008df:	5b                   	pop    ebx
c00008e0:	5e                   	pop    esi
c00008e1:	c3                   	ret    
c00008e2:	66 90                	xchg   ax,ax

c00008e4 <strstr>:
c00008e4:	57                   	push   edi
c00008e5:	56                   	push   esi
c00008e6:	53                   	push   ebx
c00008e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008eb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008ef:	57                   	push   edi
c00008f0:	e8 a3 fd ff ff       	call   c0000698 <strlen>
c00008f5:	59                   	pop    ecx
c00008f6:	85 c0                	test   eax,eax
c00008f8:	74 2a                	je     c0000924 <strstr+0x40>
c00008fa:	89 c6                	mov    esi,eax
c00008fc:	eb 12                	jmp    c0000910 <strstr+0x2c>
c00008fe:	66 90                	xchg   ax,ax
c0000900:	56                   	push   esi
c0000901:	57                   	push   edi
c0000902:	53                   	push   ebx
c0000903:	e8 70 fc ff ff       	call   c0000578 <memcmp>
c0000908:	83 c4 0c             	add    esp,0xc
c000090b:	85 c0                	test   eax,eax
c000090d:	74 15                	je     c0000924 <strstr+0x40>
c000090f:	43                   	inc    ebx
c0000910:	53                   	push   ebx
c0000911:	e8 82 fd ff ff       	call   c0000698 <strlen>
c0000916:	5a                   	pop    edx
c0000917:	39 f0                	cmp    eax,esi
c0000919:	73 e5                	jae    c0000900 <strstr+0x1c>
c000091b:	5b                   	pop    ebx
c000091c:	31 c0                	xor    eax,eax
c000091e:	5e                   	pop    esi
c000091f:	5f                   	pop    edi
c0000920:	c3                   	ret    
c0000921:	8d 76 00             	lea    esi,[esi+0x0]
c0000924:	89 d8                	mov    eax,ebx
c0000926:	5b                   	pop    ebx
c0000927:	5e                   	pop    esi
c0000928:	5f                   	pop    edi
c0000929:	c3                   	ret    
c000092a:	66 90                	xchg   ax,ax

c000092c <toupper>:
c000092c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000930:	0f b6 d0             	movzx  edx,al
c0000933:	f6 82 e0 33 02 c0 02 	test   BYTE PTR [edx-0x3ffdcc20],0x2
c000093a:	74 03                	je     c000093f <toupper+0x13>
c000093c:	83 e8 20             	sub    eax,0x20
c000093f:	c3                   	ret    

c0000940 <tolower>:
c0000940:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000944:	0f b6 d0             	movzx  edx,al
c0000947:	f6 82 e0 33 02 c0 01 	test   BYTE PTR [edx-0x3ffdcc20],0x1
c000094e:	74 03                	je     c0000953 <tolower+0x13>
c0000950:	83 c0 20             	add    eax,0x20
c0000953:	c3                   	ret    

c0000954 <simple_strtoul>:
c0000954:	55                   	push   ebp
c0000955:	57                   	push   edi
c0000956:	56                   	push   esi
c0000957:	53                   	push   ebx
c0000958:	83 ec 08             	sub    esp,0x8
c000095b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000095f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000963:	90                   	nop
c0000964:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000967:	f6 82 e0 33 02 c0 08 	test   BYTE PTR [edx-0x3ffdcc20],0x8
c000096e:	75 05                	jne    c0000975 <simple_strtoul+0x21>
c0000970:	80 fa 09             	cmp    dl,0x9
c0000973:	75 03                	jne    c0000978 <simple_strtoul+0x24>
c0000975:	41                   	inc    ecx
c0000976:	eb ec                	jmp    c0000964 <simple_strtoul+0x10>
c0000978:	80 fa 2d             	cmp    dl,0x2d
c000097b:	0f 84 1b 01 00 00    	je     c0000a9c <simple_strtoul+0x148>
c0000981:	80 fa 2b             	cmp    dl,0x2b
c0000984:	0f 84 c2 00 00 00    	je     c0000a4c <simple_strtoul+0xf8>
c000098a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000992:	85 f6                	test   esi,esi
c0000994:	0f 85 c3 00 00 00    	jne    c0000a5d <simple_strtoul+0x109>
c000099a:	8a 11                	mov    dl,BYTE PTR [ecx]
c000099c:	80 fa 30             	cmp    dl,0x30
c000099f:	0f 84 47 01 00 00    	je     c0000aec <simple_strtoul+0x198>
c00009a5:	be 0a 00 00 00       	mov    esi,0xa
c00009aa:	84 d2                	test   dl,dl
c00009ac:	0f 84 6f 01 00 00    	je     c0000b21 <simple_strtoul+0x1cd>
c00009b2:	31 ed                	xor    ebp,ebp
c00009b4:	31 ff                	xor    edi,edi
c00009b6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009bd:	eb 2b                	jmp    c00009ea <simple_strtoul+0x96>
c00009bf:	90                   	nop
c00009c0:	83 eb 30             	sub    ebx,0x30
c00009c3:	39 f3                	cmp    ebx,esi
c00009c5:	73 4d                	jae    c0000a14 <simple_strtoul+0xc0>
c00009c7:	31 d2                	xor    edx,edx
c00009c9:	89 d8                	mov    eax,ebx
c00009cb:	f7 d0                	not    eax
c00009cd:	f7 f6                	div    esi
c00009cf:	39 f8                	cmp    eax,edi
c00009d1:	0f 82 b1 00 00 00    	jb     c0000a88 <simple_strtoul+0x134>
c00009d7:	0f af fe             	imul   edi,esi
c00009da:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009e1:	01 df                	add    edi,ebx
c00009e3:	41                   	inc    ecx
c00009e4:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009e6:	84 d2                	test   dl,dl
c00009e8:	74 2a                	je     c0000a14 <simple_strtoul+0xc0>
c00009ea:	0f b6 da             	movzx  ebx,dl
c00009ed:	f6 83 e0 33 02 c0 04 	test   BYTE PTR [ebx-0x3ffdcc20],0x4
c00009f4:	75 ca                	jne    c00009c0 <simple_strtoul+0x6c>
c00009f6:	0f be d2             	movsx  edx,dl
c00009f9:	52                   	push   edx
c00009fa:	e8 2d ff ff ff       	call   c000092c <toupper>
c00009ff:	5b                   	pop    ebx
c0000a00:	0f b6 d0             	movzx  edx,al
c0000a03:	f6 82 e0 33 02 c0 01 	test   BYTE PTR [edx-0x3ffdcc20],0x1
c0000a0a:	74 08                	je     c0000a14 <simple_strtoul+0xc0>
c0000a0c:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000a0f:	39 f3                	cmp    ebx,esi
c0000a11:	72 b4                	jb     c00009c7 <simple_strtoul+0x73>
c0000a13:	90                   	nop
c0000a14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a18:	85 c0                	test   eax,eax
c0000a1a:	74 14                	je     c0000a30 <simple_strtoul+0xdc>
c0000a1c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a1f:	09 f8                	or     eax,edi
c0000a21:	75 71                	jne    c0000a94 <simple_strtoul+0x140>
c0000a23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a27:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a2b:	31 ff                	xor    edi,edi
c0000a2d:	89 30                	mov    DWORD PTR [eax],esi
c0000a2f:	90                   	nop
c0000a30:	4d                   	dec    ebp
c0000a31:	75 05                	jne    c0000a38 <simple_strtoul+0xe4>
c0000a33:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a38:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a3d:	75 02                	jne    c0000a41 <simple_strtoul+0xed>
c0000a3f:	f7 df                	neg    edi
c0000a41:	83 c4 08             	add    esp,0x8
c0000a44:	89 f8                	mov    eax,edi
c0000a46:	5b                   	pop    ebx
c0000a47:	5e                   	pop    esi
c0000a48:	5f                   	pop    edi
c0000a49:	5d                   	pop    ebp
c0000a4a:	c3                   	ret    
c0000a4b:	90                   	nop
c0000a4c:	41                   	inc    ecx
c0000a4d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a55:	85 f6                	test   esi,esi
c0000a57:	0f 84 3d ff ff ff    	je     c000099a <simple_strtoul+0x46>
c0000a5d:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a60:	83 f8 22             	cmp    eax,0x22
c0000a63:	77 6a                	ja     c0000acf <simple_strtoul+0x17b>
c0000a65:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a67:	83 fe 08             	cmp    esi,0x8
c0000a6a:	0f 84 a2 00 00 00    	je     c0000b12 <simple_strtoul+0x1be>
c0000a70:	83 fe 10             	cmp    esi,0x10
c0000a73:	0f 85 31 ff ff ff    	jne    c00009aa <simple_strtoul+0x56>
c0000a79:	80 fa 30             	cmp    dl,0x30
c0000a7c:	74 2c                	je     c0000aaa <simple_strtoul+0x156>
c0000a7e:	be 10 00 00 00       	mov    esi,0x10
c0000a83:	e9 22 ff ff ff       	jmp    c00009aa <simple_strtoul+0x56>
c0000a88:	bd 01 00 00 00       	mov    ebp,0x1
c0000a8d:	31 ff                	xor    edi,edi
c0000a8f:	e9 4f ff ff ff       	jmp    c00009e3 <simple_strtoul+0x8f>
c0000a94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a98:	89 08                	mov    DWORD PTR [eax],ecx
c0000a9a:	eb 94                	jmp    c0000a30 <simple_strtoul+0xdc>
c0000a9c:	41                   	inc    ecx
c0000a9d:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000aa5:	e9 e8 fe ff ff       	jmp    c0000992 <simple_strtoul+0x3e>
c0000aaa:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000aae:	88 04 24             	mov    BYTE PTR [esp],al
c0000ab1:	50                   	push   eax
c0000ab2:	e8 89 fe ff ff       	call   c0000940 <tolower>
c0000ab7:	5e                   	pop    esi
c0000ab8:	83 f8 78             	cmp    eax,0x78
c0000abb:	0f 84 84 00 00 00    	je     c0000b45 <simple_strtoul+0x1f1>
c0000ac1:	41                   	inc    ecx
c0000ac2:	be 10 00 00 00       	mov    esi,0x10
c0000ac7:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000aca:	e9 db fe ff ff       	jmp    c00009aa <simple_strtoul+0x56>
c0000acf:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ad3:	85 ff                	test   edi,edi
c0000ad5:	74 5c                	je     c0000b33 <simple_strtoul+0x1df>
c0000ad7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000adb:	85 c9                	test   ecx,ecx
c0000add:	75 4e                	jne    c0000b2d <simple_strtoul+0x1d9>
c0000adf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000ae5:	31 ff                	xor    edi,edi
c0000ae7:	e9 4c ff ff ff       	jmp    c0000a38 <simple_strtoul+0xe4>
c0000aec:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000af0:	88 04 24             	mov    BYTE PTR [esp],al
c0000af3:	50                   	push   eax
c0000af4:	e8 47 fe ff ff       	call   c0000940 <tolower>
c0000af9:	5d                   	pop    ebp
c0000afa:	83 f8 78             	cmp    eax,0x78
c0000afd:	74 3b                	je     c0000b3a <simple_strtoul+0x1e6>
c0000aff:	41                   	inc    ecx
c0000b00:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b03:	80 fa 30             	cmp    dl,0x30
c0000b06:	74 13                	je     c0000b1b <simple_strtoul+0x1c7>
c0000b08:	be 08 00 00 00       	mov    esi,0x8
c0000b0d:	e9 98 fe ff ff       	jmp    c00009aa <simple_strtoul+0x56>
c0000b12:	80 fa 30             	cmp    dl,0x30
c0000b15:	0f 85 8f fe ff ff    	jne    c00009aa <simple_strtoul+0x56>
c0000b1b:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000b1e:	41                   	inc    ecx
c0000b1f:	eb e7                	jmp    c0000b08 <simple_strtoul+0x1b4>
c0000b21:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000b25:	85 d2                	test   edx,edx
c0000b27:	74 0a                	je     c0000b33 <simple_strtoul+0x1df>
c0000b29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b2d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b31:	89 30                	mov    DWORD PTR [eax],esi
c0000b33:	31 ff                	xor    edi,edi
c0000b35:	e9 fe fe ff ff       	jmp    c0000a38 <simple_strtoul+0xe4>
c0000b3a:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b3d:	83 c1 02             	add    ecx,0x2
c0000b40:	e9 34 ff ff ff       	jmp    c0000a79 <simple_strtoul+0x125>
c0000b45:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b48:	be 10 00 00 00       	mov    esi,0x10
c0000b4d:	83 c1 02             	add    ecx,0x2
c0000b50:	e9 55 fe ff ff       	jmp    c00009aa <simple_strtoul+0x56>

c0000b55 <largebin_index>:
c0000b55:	89 c2                	mov    edx,eax
c0000b57:	c1 ea 08             	shr    edx,0x8
c0000b5a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b60:	77 10                	ja     c0000b72 <largebin_index+0x1d>
c0000b62:	0f bd d2             	bsr    edx,edx
c0000b65:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b68:	d3 e8                	shr    eax,cl
c0000b6a:	83 e0 03             	and    eax,0x3
c0000b6d:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b71:	c3                   	ret    
c0000b72:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b77:	c3                   	ret    

c0000b78 <malloc_init_state>:
c0000b78:	53                   	push   ebx
c0000b79:	8d 50 34             	lea    edx,[eax+0x34]
c0000b7c:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b82:	89 d1                	mov    ecx,edx
c0000b84:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b87:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b8a:	83 c2 08             	add    edx,0x8
c0000b8d:	39 da                	cmp    edx,ebx
c0000b8f:	75 f3                	jne    c0000b84 <malloc_init_state+0xc>
c0000b91:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b93:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b9d:	83 e2 03             	and    edx,0x3
c0000ba0:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000baa:	83 ca 48             	or     edx,0x48
c0000bad:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000bb7:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000bc1:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000bc8:	89 10                	mov    DWORD PTR [eax],edx
c0000bca:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000bcd:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bd7:	5b                   	pop    ebx
c0000bd8:	c3                   	ret    

c0000bd9 <malloc_consolidate>:
c0000bd9:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bdb:	85 d2                	test   edx,edx
c0000bdd:	0f 84 d8 00 00 00    	je     c0000cbb <malloc_consolidate+0xe2>
c0000be3:	55                   	push   ebp
c0000be4:	83 e2 fd             	and    edx,0xfffffffd
c0000be7:	57                   	push   edi
c0000be8:	89 c5                	mov    ebp,eax
c0000bea:	56                   	push   esi
c0000beb:	8d 78 34             	lea    edi,[eax+0x34]
c0000bee:	53                   	push   ebx
c0000bef:	83 ec 10             	sub    esp,0x10
c0000bf2:	89 10                	mov    DWORD PTR [eax],edx
c0000bf4:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bf8:	c1 ea 03             	shr    edx,0x3
c0000bfb:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000bff:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c03:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c06:	85 d2                	test   edx,edx
c0000c08:	0f 84 98 00 00 00    	je     c0000ca6 <malloc_consolidate+0xcd>
c0000c0e:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000c15:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000c18:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000c1b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c1f:	89 f9                	mov    ecx,edi
c0000c21:	83 e1 fe             	and    ecx,0xfffffffe
c0000c24:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c27:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c2a:	83 e3 fc             	and    ebx,0xfffffffc
c0000c2d:	83 e7 01             	and    edi,0x1
c0000c30:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c33:	75 14                	jne    c0000c49 <malloc_consolidate+0x70>
c0000c35:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c37:	29 fa                	sub    edx,edi
c0000c39:	01 f9                	add    ecx,edi
c0000c3b:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c3e:	89 fb                	mov    ebx,edi
c0000c40:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c43:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c46:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c49:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c4c:	74 40                	je     c0000c8e <malloc_consolidate+0xb5>
c0000c4e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c51:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c54:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c58:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c5b:	83 e7 01             	and    edi,0x1
c0000c5e:	75 0e                	jne    c0000c6e <malloc_consolidate+0x95>
c0000c60:	01 d9                	add    ecx,ebx
c0000c62:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c65:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c68:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c6b:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c6e:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c71:	89 ce                	mov    esi,ecx
c0000c73:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c76:	83 ce 01             	or     esi,0x1
c0000c79:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c7c:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c7f:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c82:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c86:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c89:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c8c:	eb 0c                	jmp    c0000c9a <malloc_consolidate+0xc1>
c0000c8e:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c91:	83 c9 01             	or     ecx,0x1
c0000c94:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c97:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c9a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c9e:	85 d2                	test   edx,edx
c0000ca0:	0f 85 6f ff ff ff    	jne    c0000c15 <malloc_consolidate+0x3c>
c0000ca6:	83 c5 04             	add    ebp,0x4
c0000ca9:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000cad:	0f 85 50 ff ff ff    	jne    c0000c03 <malloc_consolidate+0x2a>
c0000cb3:	83 c4 10             	add    esp,0x10
c0000cb6:	5b                   	pop    ebx
c0000cb7:	5e                   	pop    esi
c0000cb8:	5f                   	pop    edi
c0000cb9:	5d                   	pop    ebp
c0000cba:	c3                   	ret    
c0000cbb:	e9 b8 fe ff ff       	jmp    c0000b78 <malloc_init_state>

c0000cc0 <dlfree>:
c0000cc0:	57                   	push   edi
c0000cc1:	56                   	push   esi
c0000cc2:	53                   	push   ebx
c0000cc3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000cc7:	85 db                	test   ebx,ebx
c0000cc9:	0f 84 e2 00 00 00    	je     c0000db1 <dlfree+0xf1>
c0000ccf:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cd2:	8b 0d 00 7a 02 c0    	mov    ecx,DWORD PTR ds:0xc0027a00
c0000cd8:	89 f0                	mov    eax,esi
c0000cda:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cdd:	83 e0 fc             	and    eax,0xfffffffc
c0000ce0:	39 c1                	cmp    ecx,eax
c0000ce2:	72 24                	jb     c0000d08 <dlfree+0x48>
c0000ce4:	83 c9 03             	or     ecx,0x3
c0000ce7:	c1 e8 03             	shr    eax,0x3
c0000cea:	89 0d 00 7a 02 c0    	mov    DWORD PTR ds:0xc0027a00,ecx
c0000cf0:	83 e8 02             	sub    eax,0x2
c0000cf3:	8b 0c 85 04 7a 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd85fc]
c0000cfa:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cfc:	89 14 85 04 7a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd85fc],edx
c0000d03:	e9 a9 00 00 00       	jmp    c0000db1 <dlfree+0xf1>
c0000d08:	83 e6 02             	and    esi,0x2
c0000d0b:	0f 85 a0 00 00 00    	jne    c0000db1 <dlfree+0xf1>
c0000d11:	83 c9 01             	or     ecx,0x1
c0000d14:	8d 34 02             	lea    esi,[edx+eax*1]
c0000d17:	89 0d 00 7a 02 c0    	mov    DWORD PTR ds:0xc0027a00,ecx
c0000d1d:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d20:	83 e1 fc             	and    ecx,0xfffffffc
c0000d23:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d27:	75 13                	jne    c0000d3c <dlfree+0x7c>
c0000d29:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d2c:	29 da                	sub    edx,ebx
c0000d2e:	01 d8                	add    eax,ebx
c0000d30:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d33:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d36:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d39:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d3c:	39 35 2c 7a 02 c0    	cmp    DWORD PTR ds:0xc0027a2c,esi
c0000d42:	74 40                	je     c0000d84 <dlfree+0xc4>
c0000d44:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d48:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d4b:	80 e3 01             	and    bl,0x1
c0000d4e:	75 0e                	jne    c0000d5e <dlfree+0x9e>
c0000d50:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d53:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d56:	01 c8                	add    eax,ecx
c0000d58:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d5b:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d5e:	8b 0d 3c 7a 02 c0    	mov    ecx,DWORD PTR ds:0xc0027a3c
c0000d64:	c7 42 0c 34 7a 02 c0 	mov    DWORD PTR [edx+0xc],0xc0027a34
c0000d6b:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d6e:	89 15 3c 7a 02 c0    	mov    DWORD PTR ds:0xc0027a3c,edx
c0000d74:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d77:	89 c1                	mov    ecx,eax
c0000d79:	83 c9 01             	or     ecx,0x1
c0000d7c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d7f:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d82:	eb 10                	jmp    c0000d94 <dlfree+0xd4>
c0000d84:	01 c8                	add    eax,ecx
c0000d86:	89 c1                	mov    ecx,eax
c0000d88:	83 c9 01             	or     ecx,0x1
c0000d8b:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d8e:	89 15 2c 7a 02 c0    	mov    DWORD PTR ds:0xc0027a2c,edx
c0000d94:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d99:	76 16                	jbe    c0000db1 <dlfree+0xf1>
c0000d9b:	f6 05 00 7a 02 c0 02 	test   BYTE PTR ds:0xc0027a00,0x2
c0000da2:	74 0d                	je     c0000db1 <dlfree+0xf1>
c0000da4:	5b                   	pop    ebx
c0000da5:	b8 00 7a 02 c0       	mov    eax,0xc0027a00
c0000daa:	5e                   	pop    esi
c0000dab:	5f                   	pop    edi
c0000dac:	e9 28 fe ff ff       	jmp    c0000bd9 <malloc_consolidate>
c0000db1:	5b                   	pop    ebx
c0000db2:	5e                   	pop    esi
c0000db3:	5f                   	pop    edi
c0000db4:	c3                   	ret    

c0000db5 <sYSMALLOc>:
c0000db5:	55                   	push   ebp
c0000db6:	57                   	push   edi
c0000db7:	56                   	push   esi
c0000db8:	53                   	push   ebx
c0000db9:	89 d3                	mov    ebx,edx
c0000dbb:	83 ec 2c             	sub    esp,0x2c
c0000dbe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000dc2:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000dc8:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000dcb:	8d 42 ff             	lea    eax,[edx-0x1]
c0000dce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dd2:	74 1f                	je     c0000df3 <sYSMALLOc+0x3e>
c0000dd4:	89 d8                	mov    eax,ebx
c0000dd6:	e8 fe fd ff ff       	call   c0000bd9 <malloc_consolidate>
c0000ddb:	83 ec 0c             	sub    esp,0xc
c0000dde:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000de2:	83 e8 07             	sub    eax,0x7
c0000de5:	50                   	push   eax
c0000de6:	e8 30 02 00 00       	call   c000101b <dlmalloc>
c0000deb:	83 c4 10             	add    esp,0x10
c0000dee:	e9 20 02 00 00       	jmp    c0001013 <sYSMALLOc+0x25e>
c0000df3:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000df6:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000dfc:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000dff:	83 e0 fc             	and    eax,0xfffffffc
c0000e02:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e0a:	83 c0 10             	add    eax,0x10
c0000e0d:	01 c1                	add    ecx,eax
c0000e0f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e13:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000e1a:	74 04                	je     c0000e20 <sYSMALLOc+0x6b>
c0000e1c:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000e20:	f7 da                	neg    edx
c0000e22:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000e26:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e2a:	21 d1                	and    ecx,edx
c0000e2c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e30:	7f 07                	jg     c0000e39 <sYSMALLOc+0x84>
c0000e32:	31 c0                	xor    eax,eax
c0000e34:	e9 da 01 00 00       	jmp    c0001013 <sYSMALLOc+0x25e>
c0000e39:	83 ec 0c             	sub    esp,0xc
c0000e3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e40:	e8 3b 8d 00 00       	call   c0009b80 <sbrk>
c0000e45:	83 c4 10             	add    esp,0x10
c0000e48:	89 c6                	mov    esi,eax
c0000e4a:	83 f8 ff             	cmp    eax,0xffffffff
c0000e4d:	74 e3                	je     c0000e32 <sYSMALLOc+0x7d>
c0000e4f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e53:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e57:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e5a:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e60:	39 f1                	cmp    ecx,esi
c0000e62:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e68:	75 13                	jne    c0000e7d <sYSMALLOc+0xc8>
c0000e6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e6e:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e72:	83 c8 01             	or     eax,0x1
c0000e75:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e78:	e9 3e 01 00 00       	jmp    c0000fbb <sYSMALLOc+0x206>
c0000e7d:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e83:	88 d0                	mov    al,dl
c0000e85:	83 e0 01             	and    eax,0x1
c0000e88:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e8d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e91:	0f 95 c0             	setne  al
c0000e94:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e98:	39 f1                	cmp    ecx,esi
c0000e9a:	76 12                	jbe    c0000eae <sYSMALLOc+0xf9>
c0000e9c:	84 c0                	test   al,al
c0000e9e:	74 0e                	je     c0000eae <sYSMALLOc+0xf9>
c0000ea0:	83 e2 fe             	and    edx,0xfffffffe
c0000ea3:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000ea9:	e9 83 00 00 00       	jmp    c0000f31 <sYSMALLOc+0x17c>
c0000eae:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000eb3:	74 7c                	je     c0000f31 <sYSMALLOc+0x17c>
c0000eb5:	84 c0                	test   al,al
c0000eb7:	74 0c                	je     c0000ec5 <sYSMALLOc+0x110>
c0000eb9:	89 f0                	mov    eax,esi
c0000ebb:	29 c8                	sub    eax,ecx
c0000ebd:	01 e8                	add    eax,ebp
c0000ebf:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000ec5:	89 f2                	mov    edx,esi
c0000ec7:	83 e2 07             	and    edx,0x7
c0000eca:	74 0c                	je     c0000ed8 <sYSMALLOc+0x123>
c0000ecc:	b8 08 00 00 00       	mov    eax,0x8
c0000ed1:	29 d0                	sub    eax,edx
c0000ed3:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000ed6:	eb 04                	jmp    c0000edc <sYSMALLOc+0x127>
c0000ed8:	89 f5                	mov    ebp,esi
c0000eda:	31 c0                	xor    eax,eax
c0000edc:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ee0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000ee4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ee8:	01 c1                	add    ecx,eax
c0000eea:	83 ec 0c             	sub    esp,0xc
c0000eed:	01 f1                	add    ecx,esi
c0000eef:	01 ca                	add    edx,ecx
c0000ef1:	29 c8                	sub    eax,ecx
c0000ef3:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ef7:	01 c2                	add    edx,eax
c0000ef9:	52                   	push   edx
c0000efa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000efe:	e8 7d 8c 00 00       	call   c0009b80 <sbrk>
c0000f03:	83 c4 10             	add    esp,0x10
c0000f06:	83 f8 ff             	cmp    eax,0xffffffff
c0000f09:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f0d:	75 0f                	jne    c0000f1e <sYSMALLOc+0x169>
c0000f0f:	83 ec 0c             	sub    esp,0xc
c0000f12:	6a 00                	push   0x0
c0000f14:	e8 67 8c 00 00       	call   c0009b80 <sbrk>
c0000f19:	83 c4 10             	add    esp,0x10
c0000f1c:	eb 30                	jmp    c0000f4e <sYSMALLOc+0x199>
c0000f1e:	39 c6                	cmp    esi,eax
c0000f20:	76 33                	jbe    c0000f55 <sYSMALLOc+0x1a0>
c0000f22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f26:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f2d:	01 f0                	add    eax,esi
c0000f2f:	eb 1d                	jmp    c0000f4e <sYSMALLOc+0x199>
c0000f31:	83 ec 0c             	sub    esp,0xc
c0000f34:	89 f5                	mov    ebp,esi
c0000f36:	6a 00                	push   0x0
c0000f38:	e8 43 8c 00 00       	call   c0009b80 <sbrk>
c0000f3d:	89 c2                	mov    edx,eax
c0000f3f:	29 f2                	sub    edx,esi
c0000f41:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f45:	83 c4 10             	add    esp,0x10
c0000f48:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f4e:	31 d2                	xor    edx,edx
c0000f50:	83 f8 ff             	cmp    eax,0xffffffff
c0000f53:	74 66                	je     c0000fbb <sYSMALLOc+0x206>
c0000f55:	29 e8                	sub    eax,ebp
c0000f57:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f5a:	01 d0                	add    eax,edx
c0000f5c:	83 c8 01             	or     eax,0x1
c0000f5f:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f62:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f68:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f6d:	74 4c                	je     c0000fbb <sYSMALLOc+0x206>
c0000f6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f73:	83 e8 0c             	sub    eax,0xc
c0000f76:	83 e0 f8             	and    eax,0xfffffff8
c0000f79:	89 c2                	mov    edx,eax
c0000f7b:	83 ca 01             	or     edx,0x1
c0000f7e:	83 f8 0f             	cmp    eax,0xf
c0000f81:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f84:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f8c:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f94:	76 25                	jbe    c0000fbb <sYSMALLOc+0x206>
c0000f96:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f9c:	83 ec 0c             	sub    esp,0xc
c0000f9f:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000fa9:	83 c7 08             	add    edi,0x8
c0000fac:	57                   	push   edi
c0000fad:	e8 0e fd ff ff       	call   c0000cc0 <dlfree>
c0000fb2:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000fb8:	83 c4 10             	add    esp,0x10
c0000fbb:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fc1:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fc7:	73 06                	jae    c0000fcf <sYSMALLOc+0x21a>
c0000fc9:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fcf:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fd5:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fdb:	73 06                	jae    c0000fe3 <sYSMALLOc+0x22e>
c0000fdd:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fe3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fe6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fe9:	83 e2 fc             	and    edx,0xfffffffc
c0000fec:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000ff0:	0f 82 3c fe ff ff    	jb     c0000e32 <sYSMALLOc+0x7d>
c0000ff6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000ffa:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000ffd:	29 fa                	sub    edx,edi
c0000fff:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001002:	83 ca 01             	or     edx,0x1
c0001005:	89 fb                	mov    ebx,edi
c0001007:	83 c0 08             	add    eax,0x8
c000100a:	83 cb 01             	or     ebx,0x1
c000100d:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001010:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001013:	83 c4 2c             	add    esp,0x2c
c0001016:	5b                   	pop    ebx
c0001017:	5e                   	pop    esi
c0001018:	5f                   	pop    edi
c0001019:	5d                   	pop    ebp
c000101a:	c3                   	ret    

c000101b <dlmalloc>:
c000101b:	55                   	push   ebp
c000101c:	57                   	push   edi
c000101d:	56                   	push   esi
c000101e:	53                   	push   ebx
c000101f:	83 ec 1c             	sub    esp,0x1c
c0001022:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001026:	83 f8 df             	cmp    eax,0xffffffdf
c0001029:	0f 87 70 03 00 00    	ja     c000139f <dlmalloc+0x384>
c000102f:	83 c0 0b             	add    eax,0xb
c0001032:	be 10 00 00 00       	mov    esi,0x10
c0001037:	83 f8 0f             	cmp    eax,0xf
c000103a:	76 05                	jbe    c0001041 <dlmalloc+0x26>
c000103c:	83 e0 f8             	and    eax,0xfffffff8
c000103f:	89 c6                	mov    esi,eax
c0001041:	8b 3d 00 7a 02 c0    	mov    edi,DWORD PTR ds:0xc0027a00
c0001047:	f7 c7 01 00 00 00    	test   edi,0x1
c000104d:	75 17                	jne    c0001066 <dlmalloc+0x4b>
c000104f:	85 ff                	test   edi,edi
c0001051:	0f 85 05 03 00 00    	jne    c000135c <dlmalloc+0x341>
c0001057:	b8 00 7a 02 c0       	mov    eax,0xc0027a00
c000105c:	e8 78 fb ff ff       	call   c0000bd9 <malloc_consolidate>
c0001061:	e9 f6 02 00 00       	jmp    c000135c <dlmalloc+0x341>
c0001066:	39 f7                	cmp    edi,esi
c0001068:	72 1f                	jb     c0001089 <dlmalloc+0x6e>
c000106a:	89 f2                	mov    edx,esi
c000106c:	c1 ea 03             	shr    edx,0x3
c000106f:	83 ea 02             	sub    edx,0x2
c0001072:	8b 04 95 04 7a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd85fc]
c0001079:	85 c0                	test   eax,eax
c000107b:	74 0c                	je     c0001089 <dlmalloc+0x6e>
c000107d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001080:	89 0c 95 04 7a 02 c0 	mov    DWORD PTR [edx*4-0x3ffd85fc],ecx
c0001087:	eb 30                	jmp    c00010b9 <dlmalloc+0x9e>
c0001089:	89 f0                	mov    eax,esi
c000108b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001091:	77 2e                	ja     c00010c1 <dlmalloc+0xa6>
c0001093:	c1 e8 03             	shr    eax,0x3
c0001096:	8d 14 c5 34 7a 02 c0 	lea    edx,[eax*8-0x3ffd85cc]
c000109d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a1:	8d 5a f8             	lea    ebx,[edx-0x8]
c00010a4:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00010a7:	39 c3                	cmp    ebx,eax
c00010a9:	74 2e                	je     c00010d9 <dlmalloc+0xbe>
c00010ab:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00010ae:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00010b3:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00010b6:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00010b9:	83 c0 08             	add    eax,0x8
c00010bc:	e9 e0 02 00 00       	jmp    c00013a1 <dlmalloc+0x386>
c00010c1:	e8 8f fa ff ff       	call   c0000b55 <largebin_index>
c00010c6:	83 e7 02             	and    edi,0x2
c00010c9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010cd:	74 0a                	je     c00010d9 <dlmalloc+0xbe>
c00010cf:	b8 00 7a 02 c0       	mov    eax,0xc0027a00
c00010d4:	e8 00 fb ff ff       	call   c0000bd9 <malloc_consolidate>
c00010d9:	8d 46 10             	lea    eax,[esi+0x10]
c00010dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010e0:	8b 1d 40 7a 02 c0    	mov    ebx,DWORD PTR ds:0xc0027a40
c00010e6:	81 fb 34 7a 02 c0    	cmp    ebx,0xc0027a34
c00010ec:	0f 84 13 01 00 00    	je     c0001205 <dlmalloc+0x1ea>
c00010f2:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010f5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010f8:	83 e7 fc             	and    edi,0xfffffffc
c00010fb:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001101:	77 4c                	ja     c000114f <dlmalloc+0x134>
c0001103:	3d 34 7a 02 c0       	cmp    eax,0xc0027a34
c0001108:	75 45                	jne    c000114f <dlmalloc+0x134>
c000110a:	39 1d 30 7a 02 c0    	cmp    DWORD PTR ds:0xc0027a30,ebx
c0001110:	75 3d                	jne    c000114f <dlmalloc+0x134>
c0001112:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001116:	73 37                	jae    c000114f <dlmalloc+0x134>
c0001118:	8d 04 33             	lea    eax,[ebx+esi*1]
c000111b:	89 fa                	mov    edx,edi
c000111d:	a3 3c 7a 02 c0       	mov    ds:0xc0027a3c,eax
c0001122:	a3 40 7a 02 c0       	mov    ds:0xc0027a40,eax
c0001127:	a3 30 7a 02 c0       	mov    ds:0xc0027a30,eax
c000112c:	29 f2                	sub    edx,esi
c000112e:	c7 40 08 34 7a 02 c0 	mov    DWORD PTR [eax+0x8],0xc0027a34
c0001135:	c7 40 0c 34 7a 02 c0 	mov    DWORD PTR [eax+0xc],0xc0027a34
c000113c:	83 ce 01             	or     esi,0x1
c000113f:	89 d1                	mov    ecx,edx
c0001141:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001144:	83 c9 01             	or     ecx,0x1
c0001147:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000114a:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000114d:	eb 15                	jmp    c0001164 <dlmalloc+0x149>
c000114f:	a3 40 7a 02 c0       	mov    ds:0xc0027a40,eax
c0001154:	39 fe                	cmp    esi,edi
c0001156:	c7 40 08 34 7a 02 c0 	mov    DWORD PTR [eax+0x8],0xc0027a34
c000115d:	75 0d                	jne    c000116c <dlmalloc+0x151>
c000115f:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001164:	8d 43 08             	lea    eax,[ebx+0x8]
c0001167:	e9 35 02 00 00       	jmp    c00013a1 <dlmalloc+0x386>
c000116c:	89 f8                	mov    eax,edi
c000116e:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001174:	77 19                	ja     c000118f <dlmalloc+0x174>
c0001176:	c1 e8 03             	shr    eax,0x3
c0001179:	8d 14 00             	lea    edx,[eax+eax*1]
c000117c:	83 c2 0d             	add    edx,0xd
c000117f:	8d 2c 95 f8 79 02 c0 	lea    ebp,[edx*4-0x3ffd8608]
c0001186:	8b 14 95 00 7a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8600]
c000118d:	eb 46                	jmp    c00011d5 <dlmalloc+0x1ba>
c000118f:	e8 c1 f9 ff ff       	call   c0000b55 <largebin_index>
c0001194:	8d 14 00             	lea    edx,[eax+eax*1]
c0001197:	83 c2 0d             	add    edx,0xd
c000119a:	8d 0c 95 00 7a 02 c0 	lea    ecx,[edx*4-0x3ffd8600]
c00011a1:	8b 14 95 00 7a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8600]
c00011a8:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00011ab:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00011af:	89 d5                	mov    ebp,edx
c00011b1:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00011b5:	74 1e                	je     c00011d5 <dlmalloc+0x1ba>
c00011b7:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00011ba:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00011bd:	77 12                	ja     c00011d1 <dlmalloc+0x1b6>
c00011bf:	83 cf 01             	or     edi,0x1
c00011c2:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00011c5:	76 05                	jbe    c00011cc <dlmalloc+0x1b1>
c00011c7:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011ca:	eb f6                	jmp    c00011c2 <dlmalloc+0x1a7>
c00011cc:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011cf:	eb 04                	jmp    c00011d5 <dlmalloc+0x1ba>
c00011d1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011d5:	89 c7                	mov    edi,eax
c00011d7:	88 c1                	mov    cl,al
c00011d9:	c1 ff 05             	sar    edi,0x5
c00011dc:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011e0:	bf 01 00 00 00       	mov    edi,0x1
c00011e5:	d3 e7                	shl    edi,cl
c00011e7:	89 f8                	mov    eax,edi
c00011e9:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011ed:	09 04 bd 34 7d 02 c0 	or     DWORD PTR [edi*4-0x3ffd82cc],eax
c00011f4:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011f7:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011fa:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011fd:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001200:	e9 db fe ff ff       	jmp    c00010e0 <dlmalloc+0xc5>
c0001205:	81 fe ff 00 00 00    	cmp    esi,0xff
c000120b:	76 78                	jbe    c0001285 <dlmalloc+0x26a>
c000120d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001211:	8d 04 c5 34 7a 02 c0 	lea    eax,[eax*8-0x3ffd85cc]
c0001218:	8d 48 f8             	lea    ecx,[eax-0x8]
c000121b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000121e:	39 ca                	cmp    edx,ecx
c0001220:	74 63                	je     c0001285 <dlmalloc+0x26a>
c0001222:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001225:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001228:	83 e3 fc             	and    ebx,0xfffffffc
c000122b:	39 de                	cmp    esi,ebx
c000122d:	77 52                	ja     c0001281 <dlmalloc+0x266>
c000122f:	89 df                	mov    edi,ebx
c0001231:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001234:	29 f7                	sub    edi,esi
c0001236:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001239:	01 d3                	add    ebx,edx
c000123b:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000123e:	83 ff 0f             	cmp    edi,0xf
c0001241:	8d 42 08             	lea    eax,[edx+0x8]
c0001244:	77 09                	ja     c000124f <dlmalloc+0x234>
c0001246:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000124a:	e9 52 01 00 00       	jmp    c00013a1 <dlmalloc+0x386>
c000124f:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001252:	83 ce 01             	or     esi,0x1
c0001255:	89 0d 3c 7a 02 c0    	mov    DWORD PTR ds:0xc0027a3c,ecx
c000125b:	89 0d 40 7a 02 c0    	mov    DWORD PTR ds:0xc0027a40,ecx
c0001261:	c7 41 08 34 7a 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0027a34
c0001268:	c7 41 0c 34 7a 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0027a34
c000126f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001272:	89 fa                	mov    edx,edi
c0001274:	83 ca 01             	or     edx,0x1
c0001277:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000127a:	89 3b                	mov    DWORD PTR [ebx],edi
c000127c:	e9 20 01 00 00       	jmp    c00013a1 <dlmalloc+0x386>
c0001281:	89 c2                	mov    edx,eax
c0001283:	eb 99                	jmp    c000121e <dlmalloc+0x203>
c0001285:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001289:	b8 01 00 00 00       	mov    eax,0x1
c000128e:	41                   	inc    ecx
c000128f:	89 cb                	mov    ebx,ecx
c0001291:	8d 14 cd 2c 7a 02 c0 	lea    edx,[ecx*8-0x3ffd85d4]
c0001298:	c1 eb 05             	shr    ebx,0x5
c000129b:	d3 e0                	shl    eax,cl
c000129d:	8b 3c 9d 34 7d 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd82cc]
c00012a4:	39 f8                	cmp    eax,edi
c00012a6:	77 04                	ja     c00012ac <dlmalloc+0x291>
c00012a8:	85 c0                	test   eax,eax
c00012aa:	75 26                	jne    c00012d2 <dlmalloc+0x2b7>
c00012ac:	43                   	inc    ebx
c00012ad:	83 fb 02             	cmp    ebx,0x2
c00012b0:	0f 87 a6 00 00 00    	ja     c000135c <dlmalloc+0x341>
c00012b6:	8b 3c 9d 34 7d 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd82cc]
c00012bd:	85 ff                	test   edi,edi
c00012bf:	74 eb                	je     c00012ac <dlmalloc+0x291>
c00012c1:	89 d8                	mov    eax,ebx
c00012c3:	c1 e0 06             	shl    eax,0x6
c00012c6:	8d 14 85 2c 7a 02 c0 	lea    edx,[eax*4-0x3ffd85d4]
c00012cd:	b8 01 00 00 00       	mov    eax,0x1
c00012d2:	85 f8                	test   eax,edi
c00012d4:	75 07                	jne    c00012dd <dlmalloc+0x2c2>
c00012d6:	83 c2 08             	add    edx,0x8
c00012d9:	01 c0                	add    eax,eax
c00012db:	eb f5                	jmp    c00012d2 <dlmalloc+0x2b7>
c00012dd:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012e0:	39 ca                	cmp    edx,ecx
c00012e2:	75 14                	jne    c00012f8 <dlmalloc+0x2dd>
c00012e4:	89 c1                	mov    ecx,eax
c00012e6:	83 c2 08             	add    edx,0x8
c00012e9:	f7 d1                	not    ecx
c00012eb:	01 c0                	add    eax,eax
c00012ed:	21 cf                	and    edi,ecx
c00012ef:	89 3c 9d 34 7d 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd82cc],edi
c00012f6:	eb ac                	jmp    c00012a4 <dlmalloc+0x289>
c00012f8:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012fb:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012fe:	83 e0 fc             	and    eax,0xfffffffc
c0001301:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001304:	89 c3                	mov    ebx,eax
c0001306:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001309:	29 f3                	sub    ebx,esi
c000130b:	8d 14 01             	lea    edx,[ecx+eax*1]
c000130e:	83 fb 0f             	cmp    ebx,0xf
c0001311:	8d 41 08             	lea    eax,[ecx+0x8]
c0001314:	77 09                	ja     c000131f <dlmalloc+0x304>
c0001316:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c000131a:	e9 82 00 00 00       	jmp    c00013a1 <dlmalloc+0x386>
c000131f:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001322:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001328:	89 3d 3c 7a 02 c0    	mov    DWORD PTR ds:0xc0027a3c,edi
c000132e:	89 3d 40 7a 02 c0    	mov    DWORD PTR ds:0xc0027a40,edi
c0001334:	c7 47 08 34 7a 02 c0 	mov    DWORD PTR [edi+0x8],0xc0027a34
c000133b:	c7 47 0c 34 7a 02 c0 	mov    DWORD PTR [edi+0xc],0xc0027a34
c0001342:	77 06                	ja     c000134a <dlmalloc+0x32f>
c0001344:	89 3d 30 7a 02 c0    	mov    DWORD PTR ds:0xc0027a30,edi
c000134a:	83 ce 01             	or     esi,0x1
c000134d:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001350:	89 d9                	mov    ecx,ebx
c0001352:	83 c9 01             	or     ecx,0x1
c0001355:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001358:	89 1a                	mov    DWORD PTR [edx],ebx
c000135a:	eb 45                	jmp    c00013a1 <dlmalloc+0x386>
c000135c:	a1 2c 7a 02 c0       	mov    eax,ds:0xc0027a2c
c0001361:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001364:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001367:	83 e2 fc             	and    edx,0xfffffffc
c000136a:	39 d1                	cmp    ecx,edx
c000136c:	77 1e                	ja     c000138c <dlmalloc+0x371>
c000136e:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001371:	89 f3                	mov    ebx,esi
c0001373:	89 0d 2c 7a 02 c0    	mov    DWORD PTR ds:0xc0027a2c,ecx
c0001379:	83 cb 01             	or     ebx,0x1
c000137c:	29 f2                	sub    edx,esi
c000137e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001381:	83 ca 01             	or     edx,0x1
c0001384:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001387:	e9 2d fd ff ff       	jmp    c00010b9 <dlmalloc+0x9e>
c000138c:	83 c4 1c             	add    esp,0x1c
c000138f:	89 f0                	mov    eax,esi
c0001391:	5b                   	pop    ebx
c0001392:	ba 00 7a 02 c0       	mov    edx,0xc0027a00
c0001397:	5e                   	pop    esi
c0001398:	5f                   	pop    edi
c0001399:	5d                   	pop    ebp
c000139a:	e9 16 fa ff ff       	jmp    c0000db5 <sYSMALLOc>
c000139f:	31 c0                	xor    eax,eax
c00013a1:	83 c4 1c             	add    esp,0x1c
c00013a4:	5b                   	pop    ebx
c00013a5:	5e                   	pop    esi
c00013a6:	5f                   	pop    edi
c00013a7:	5d                   	pop    ebp
c00013a8:	c3                   	ret    

c00013a9 <iALLOc>:
c00013a9:	55                   	push   ebp
c00013aa:	89 c5                	mov    ebp,eax
c00013ac:	57                   	push   edi
c00013ad:	56                   	push   esi
c00013ae:	53                   	push   ebx
c00013af:	83 ec 2c             	sub    esp,0x2c
c00013b2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00013b6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00013ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00013be:	83 3d 00 7a 02 c0 00 	cmp    DWORD PTR ds:0xc0027a00,0x0
c00013c5:	75 12                	jne    c00013d9 <iALLOc+0x30>
c00013c7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013cb:	b8 00 7a 02 c0       	mov    eax,0xc0027a00
c00013d0:	e8 04 f8 ff ff       	call   c0000bd9 <malloc_consolidate>
c00013d5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013d9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013de:	74 12                	je     c00013f2 <iALLOc+0x49>
c00013e0:	85 ed                	test   ebp,ebp
c00013e2:	0f 84 64 01 00 00    	je     c000154c <iALLOc+0x1a3>
c00013e8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013f0:	eb 33                	jmp    c0001425 <iALLOc+0x7c>
c00013f2:	85 ed                	test   ebp,ebp
c00013f4:	75 14                	jne    c000140a <iALLOc+0x61>
c00013f6:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013fe:	83 c4 2c             	add    esp,0x2c
c0001401:	5b                   	pop    ebx
c0001402:	5e                   	pop    esi
c0001403:	5f                   	pop    edi
c0001404:	5d                   	pop    ebp
c0001405:	e9 11 fc ff ff       	jmp    c000101b <dlmalloc>
c000140a:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001411:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001419:	83 f8 0f             	cmp    eax,0xf
c000141c:	76 07                	jbe    c0001425 <iALLOc+0x7c>
c000141e:	83 e0 f8             	and    eax,0xfffffff8
c0001421:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001425:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c000142a:	75 09                	jne    c0001435 <iALLOc+0x8c>
c000142c:	89 d0                	mov    eax,edx
c000142e:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001431:	31 f6                	xor    esi,esi
c0001433:	eb 3b                	jmp    c0001470 <iALLOc+0xc7>
c0001435:	8b 02                	mov    eax,DWORD PTR [edx]
c0001437:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000143f:	83 c0 0b             	add    eax,0xb
c0001442:	83 f8 0f             	cmp    eax,0xf
c0001445:	76 07                	jbe    c000144e <iALLOc+0xa5>
c0001447:	83 e0 f8             	and    eax,0xfffffff8
c000144a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000144e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001452:	0f af f5             	imul   esi,ebp
c0001455:	eb 25                	jmp    c000147c <iALLOc+0xd3>
c0001457:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001459:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c000145c:	bb 10 00 00 00       	mov    ebx,0x10
c0001461:	83 f9 0f             	cmp    ecx,0xf
c0001464:	76 05                	jbe    c000146b <iALLOc+0xc2>
c0001466:	83 e1 f8             	and    ecx,0xfffffff8
c0001469:	89 cb                	mov    ebx,ecx
c000146b:	01 de                	add    esi,ebx
c000146d:	83 c0 04             	add    eax,0x4
c0001470:	39 c7                	cmp    edi,eax
c0001472:	75 e3                	jne    c0001457 <iALLOc+0xae>
c0001474:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000147c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001480:	8b 1d 54 7d 02 c0    	mov    ebx,DWORD PTR ds:0xc0027d54
c0001486:	83 ec 0c             	sub    esp,0xc
c0001489:	c7 05 54 7d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027d54,0x0
c0001493:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001497:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000149b:	50                   	push   eax
c000149c:	e8 7a fb ff ff       	call   c000101b <dlmalloc>
c00014a1:	83 c4 10             	add    esp,0x10
c00014a4:	89 1d 54 7d 02 c0    	mov    DWORD PTR ds:0xc0027d54,ebx
c00014aa:	85 c0                	test   eax,eax
c00014ac:	0f 84 92 00 00 00    	je     c0001544 <iALLOc+0x19b>
c00014b2:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00014b5:	8d 78 f8             	lea    edi,[eax-0x8]
c00014b8:	83 e3 fc             	and    ebx,0xfffffffc
c00014bb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00014bf:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00014c4:	74 1e                	je     c00014e4 <iALLOc+0x13b>
c00014c6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014ca:	89 d9                	mov    ecx,ebx
c00014cc:	52                   	push   edx
c00014cd:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014d1:	83 e9 04             	sub    ecx,0x4
c00014d4:	51                   	push   ecx
c00014d5:	6a 00                	push   0x0
c00014d7:	50                   	push   eax
c00014d8:	e8 9f f1 ff ff       	call   c000067c <memset>
c00014dd:	83 c4 10             	add    esp,0x10
c00014e0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014e9:	75 14                	jne    c00014ff <iALLOc+0x156>
c00014eb:	8d 04 37             	lea    eax,[edi+esi*1]
c00014ee:	29 f3                	sub    ebx,esi
c00014f0:	8d 48 08             	lea    ecx,[eax+0x8]
c00014f3:	83 cb 01             	or     ebx,0x1
c00014f6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014fa:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014fd:	89 f3                	mov    ebx,esi
c00014ff:	31 c0                	xor    eax,eax
c0001501:	4d                   	dec    ebp
c0001502:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001505:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001509:	39 c5                	cmp    ebp,eax
c000150b:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000150e:	74 2c                	je     c000153c <iALLOc+0x193>
c0001510:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001514:	85 c9                	test   ecx,ecx
c0001516:	75 15                	jne    c000152d <iALLOc+0x184>
c0001518:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c000151b:	8d 71 0b             	lea    esi,[ecx+0xb]
c000151e:	b9 10 00 00 00       	mov    ecx,0x10
c0001523:	83 fe 0f             	cmp    esi,0xf
c0001526:	76 05                	jbe    c000152d <iALLOc+0x184>
c0001528:	83 e6 f8             	and    esi,0xfffffff8
c000152b:	89 f1                	mov    ecx,esi
c000152d:	89 ce                	mov    esi,ecx
c000152f:	29 cb                	sub    ebx,ecx
c0001531:	83 ce 01             	or     esi,0x1
c0001534:	40                   	inc    eax
c0001535:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001538:	01 cf                	add    edi,ecx
c000153a:	eb c6                	jmp    c0001502 <iALLOc+0x159>
c000153c:	83 cb 01             	or     ebx,0x1
c000153f:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001542:	eb 08                	jmp    c000154c <iALLOc+0x1a3>
c0001544:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000154c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001550:	83 c4 2c             	add    esp,0x2c
c0001553:	5b                   	pop    ebx
c0001554:	5e                   	pop    esi
c0001555:	5f                   	pop    edi
c0001556:	5d                   	pop    ebp
c0001557:	c3                   	ret    

c0001558 <dlrealloc>:
c0001558:	55                   	push   ebp
c0001559:	57                   	push   edi
c000155a:	56                   	push   esi
c000155b:	53                   	push   ebx
c000155c:	83 ec 1c             	sub    esp,0x1c
c000155f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001563:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001567:	85 db                	test   ebx,ebx
c0001569:	75 10                	jne    c000157b <dlrealloc+0x23>
c000156b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000156f:	83 c4 1c             	add    esp,0x1c
c0001572:	5b                   	pop    ebx
c0001573:	5e                   	pop    esi
c0001574:	5f                   	pop    edi
c0001575:	5d                   	pop    ebp
c0001576:	e9 a0 fa ff ff       	jmp    c000101b <dlmalloc>
c000157b:	83 f8 df             	cmp    eax,0xffffffdf
c000157e:	76 07                	jbe    c0001587 <dlrealloc+0x2f>
c0001580:	31 db                	xor    ebx,ebx
c0001582:	e9 6a 01 00 00       	jmp    c00016f1 <dlrealloc+0x199>
c0001587:	83 c0 0b             	add    eax,0xb
c000158a:	bd 10 00 00 00       	mov    ebp,0x10
c000158f:	83 f8 0f             	cmp    eax,0xf
c0001592:	76 05                	jbe    c0001599 <dlrealloc+0x41>
c0001594:	83 e0 f8             	and    eax,0xfffffff8
c0001597:	89 c5                	mov    ebp,eax
c0001599:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000159c:	8d 7b f8             	lea    edi,[ebx-0x8]
c000159f:	89 c6                	mov    esi,eax
c00015a1:	83 e6 fc             	and    esi,0xfffffffc
c00015a4:	a8 02                	test   al,0x2
c00015a6:	75 d8                	jne    c0001580 <dlrealloc+0x28>
c00015a8:	39 f5                	cmp    ebp,esi
c00015aa:	0f 86 04 01 00 00    	jbe    c00016b4 <dlrealloc+0x15c>
c00015b0:	8d 14 37             	lea    edx,[edi+esi*1]
c00015b3:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00015b6:	39 15 2c 7a 02 c0    	cmp    DWORD PTR ds:0xc0027a2c,edx
c00015bc:	75 33                	jne    c00015f1 <dlrealloc+0x99>
c00015be:	83 e1 fc             	and    ecx,0xfffffffc
c00015c1:	01 f1                	add    ecx,esi
c00015c3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c7:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015ca:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015ce:	77 49                	ja     c0001619 <dlrealloc+0xc1>
c00015d0:	01 ef                	add    edi,ebp
c00015d2:	83 e0 01             	and    eax,0x1
c00015d5:	09 e8                	or     eax,ebp
c00015d7:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015da:	89 3d 2c 7a 02 c0    	mov    DWORD PTR ds:0xc0027a2c,edi
c00015e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015e4:	29 e8                	sub    eax,ebp
c00015e6:	83 c8 01             	or     eax,0x1
c00015e9:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015ec:	e9 00 01 00 00       	jmp    c00016f1 <dlrealloc+0x199>
c00015f1:	89 c8                	mov    eax,ecx
c00015f3:	83 e0 fe             	and    eax,0xfffffffe
c00015f6:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015fb:	75 1c                	jne    c0001619 <dlrealloc+0xc1>
c00015fd:	83 e1 fc             	and    ecx,0xfffffffc
c0001600:	01 f1                	add    ecx,esi
c0001602:	39 cd                	cmp    ebp,ecx
c0001604:	77 13                	ja     c0001619 <dlrealloc+0xc1>
c0001606:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001609:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000160c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000160f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001612:	89 ce                	mov    esi,ecx
c0001614:	e9 9b 00 00 00       	jmp    c00016b4 <dlrealloc+0x15c>
c0001619:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000161d:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001620:	83 ec 0c             	sub    esp,0xc
c0001623:	50                   	push   eax
c0001624:	e8 f2 f9 ff ff       	call   c000101b <dlmalloc>
c0001629:	83 c4 10             	add    esp,0x10
c000162c:	85 c0                	test   eax,eax
c000162e:	0f 84 4c ff ff ff    	je     c0001580 <dlrealloc+0x28>
c0001634:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001637:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000163b:	39 ca                	cmp    edx,ecx
c000163d:	75 0a                	jne    c0001649 <dlrealloc+0xf1>
c000163f:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001642:	83 e0 fc             	and    eax,0xfffffffc
c0001645:	01 c6                	add    esi,eax
c0001647:	eb 6b                	jmp    c00016b4 <dlrealloc+0x15c>
c0001649:	8d 4e fc             	lea    ecx,[esi-0x4]
c000164c:	83 f9 27             	cmp    ecx,0x27
c000164f:	76 08                	jbe    c0001659 <dlrealloc+0x101>
c0001651:	89 de                	mov    esi,ebx
c0001653:	89 c7                	mov    edi,eax
c0001655:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001657:	eb 43                	jmp    c000169c <dlrealloc+0x144>
c0001659:	8b 13                	mov    edx,DWORD PTR [ebx]
c000165b:	83 f9 13             	cmp    ecx,0x13
c000165e:	89 10                	mov    DWORD PTR [eax],edx
c0001660:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001663:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001666:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001669:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000166c:	76 2e                	jbe    c000169c <dlrealloc+0x144>
c000166e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001671:	83 f9 1b             	cmp    ecx,0x1b
c0001674:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001677:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000167a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000167d:	76 1d                	jbe    c000169c <dlrealloc+0x144>
c000167f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001682:	83 f9 23             	cmp    ecx,0x23
c0001685:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001688:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000168b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000168e:	76 0c                	jbe    c000169c <dlrealloc+0x144>
c0001690:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001693:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001696:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001699:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000169c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00016a0:	83 ec 0c             	sub    esp,0xc
c00016a3:	53                   	push   ebx
c00016a4:	e8 17 f6 ff ff       	call   c0000cc0 <dlfree>
c00016a9:	83 c4 10             	add    esp,0x10
c00016ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b0:	89 c3                	mov    ebx,eax
c00016b2:	eb 3d                	jmp    c00016f1 <dlrealloc+0x199>
c00016b4:	89 f2                	mov    edx,esi
c00016b6:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016b9:	29 ea                	sub    edx,ebp
c00016bb:	83 e1 01             	and    ecx,0x1
c00016be:	8d 04 37             	lea    eax,[edi+esi*1]
c00016c1:	83 fa 0f             	cmp    edx,0xf
c00016c4:	77 0b                	ja     c00016d1 <dlrealloc+0x179>
c00016c6:	09 ce                	or     esi,ecx
c00016c8:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016cb:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016cf:	eb 20                	jmp    c00016f1 <dlrealloc+0x199>
c00016d1:	01 ef                	add    edi,ebp
c00016d3:	83 ec 0c             	sub    esp,0xc
c00016d6:	09 cd                	or     ebp,ecx
c00016d8:	83 ca 01             	or     edx,0x1
c00016db:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016de:	83 c7 08             	add    edi,0x8
c00016e1:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016e4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016e8:	57                   	push   edi
c00016e9:	e8 d2 f5 ff ff       	call   c0000cc0 <dlfree>
c00016ee:	83 c4 10             	add    esp,0x10
c00016f1:	83 c4 1c             	add    esp,0x1c
c00016f4:	89 d8                	mov    eax,ebx
c00016f6:	5b                   	pop    ebx
c00016f7:	5e                   	pop    esi
c00016f8:	5f                   	pop    edi
c00016f9:	5d                   	pop    ebp
c00016fa:	c3                   	ret    

c00016fb <dlmemalign>:
c00016fb:	55                   	push   ebp
c00016fc:	57                   	push   edi
c00016fd:	56                   	push   esi
c00016fe:	53                   	push   ebx
c00016ff:	83 ec 0c             	sub    esp,0xc
c0001702:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001706:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000170a:	83 fa 08             	cmp    edx,0x8
c000170d:	77 10                	ja     c000171f <dlmemalign+0x24>
c000170f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001713:	83 c4 0c             	add    esp,0xc
c0001716:	5b                   	pop    ebx
c0001717:	5e                   	pop    esi
c0001718:	5f                   	pop    edi
c0001719:	5d                   	pop    ebp
c000171a:	e9 fc f8 ff ff       	jmp    c000101b <dlmalloc>
c000171f:	bf 10 00 00 00       	mov    edi,0x10
c0001724:	83 fa 0f             	cmp    edx,0xf
c0001727:	76 13                	jbe    c000173c <dlmemalign+0x41>
c0001729:	8d 4a ff             	lea    ecx,[edx-0x1]
c000172c:	85 d1                	test   ecx,edx
c000172e:	75 04                	jne    c0001734 <dlmemalign+0x39>
c0001730:	89 d7                	mov    edi,edx
c0001732:	eb 08                	jmp    c000173c <dlmemalign+0x41>
c0001734:	39 d7                	cmp    edi,edx
c0001736:	73 04                	jae    c000173c <dlmemalign+0x41>
c0001738:	01 ff                	add    edi,edi
c000173a:	eb f8                	jmp    c0001734 <dlmemalign+0x39>
c000173c:	83 f8 df             	cmp    eax,0xffffffdf
c000173f:	76 07                	jbe    c0001748 <dlmemalign+0x4d>
c0001741:	31 c0                	xor    eax,eax
c0001743:	e9 ce 00 00 00       	jmp    c0001816 <dlmemalign+0x11b>
c0001748:	83 c0 0b             	add    eax,0xb
c000174b:	bd 10 00 00 00       	mov    ebp,0x10
c0001750:	83 f8 0f             	cmp    eax,0xf
c0001753:	76 05                	jbe    c000175a <dlmemalign+0x5f>
c0001755:	83 e0 f8             	and    eax,0xfffffff8
c0001758:	89 c5                	mov    ebp,eax
c000175a:	83 ec 0c             	sub    esp,0xc
c000175d:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001761:	50                   	push   eax
c0001762:	e8 b4 f8 ff ff       	call   c000101b <dlmalloc>
c0001767:	83 c4 10             	add    esp,0x10
c000176a:	89 c1                	mov    ecx,eax
c000176c:	85 c0                	test   eax,eax
c000176e:	74 d1                	je     c0001741 <dlmemalign+0x46>
c0001770:	31 d2                	xor    edx,edx
c0001772:	8d 70 f8             	lea    esi,[eax-0x8]
c0001775:	f7 f7                	div    edi
c0001777:	85 d2                	test   edx,edx
c0001779:	74 62                	je     c00017dd <dlmemalign+0xe2>
c000177b:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000177f:	89 f8                	mov    eax,edi
c0001781:	f7 d8                	neg    eax
c0001783:	21 c3                	and    ebx,eax
c0001785:	83 eb 08             	sub    ebx,0x8
c0001788:	89 d8                	mov    eax,ebx
c000178a:	29 f0                	sub    eax,esi
c000178c:	83 f8 0f             	cmp    eax,0xf
c000178f:	77 02                	ja     c0001793 <dlmemalign+0x98>
c0001791:	01 fb                	add    ebx,edi
c0001793:	89 d8                	mov    eax,ebx
c0001795:	29 f0                	sub    eax,esi
c0001797:	89 c6                	mov    esi,eax
c0001799:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000179c:	89 c2                	mov    edx,eax
c000179e:	83 e2 fc             	and    edx,0xfffffffc
c00017a1:	29 f2                	sub    edx,esi
c00017a3:	a8 02                	test   al,0x2
c00017a5:	74 10                	je     c00017b7 <dlmemalign+0xbc>
c00017a7:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00017aa:	83 ca 02             	or     edx,0x2
c00017ad:	8d 43 08             	lea    eax,[ebx+0x8]
c00017b0:	89 33                	mov    DWORD PTR [ebx],esi
c00017b2:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00017b5:	eb 5f                	jmp    c0001816 <dlmemalign+0x11b>
c00017b7:	83 ec 0c             	sub    esp,0xc
c00017ba:	89 d0                	mov    eax,edx
c00017bc:	83 c8 01             	or     eax,0x1
c00017bf:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00017c2:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017c7:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017ca:	83 e0 01             	and    eax,0x1
c00017cd:	09 f0                	or     eax,esi
c00017cf:	89 de                	mov    esi,ebx
c00017d1:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017d4:	51                   	push   ecx
c00017d5:	e8 e6 f4 ff ff       	call   c0000cc0 <dlfree>
c00017da:	83 c4 10             	add    esp,0x10
c00017dd:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017e0:	a8 02                	test   al,0x2
c00017e2:	75 2f                	jne    c0001813 <dlmemalign+0x118>
c00017e4:	83 e0 fc             	and    eax,0xfffffffc
c00017e7:	8d 55 10             	lea    edx,[ebp+0x10]
c00017ea:	39 c2                	cmp    edx,eax
c00017ec:	73 25                	jae    c0001813 <dlmemalign+0x118>
c00017ee:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017f1:	83 ec 0c             	sub    esp,0xc
c00017f4:	29 e8                	sub    eax,ebp
c00017f6:	83 c2 08             	add    edx,0x8
c00017f9:	83 c8 01             	or     eax,0x1
c00017fc:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017ff:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001802:	83 e0 01             	and    eax,0x1
c0001805:	09 c5                	or     ebp,eax
c0001807:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c000180a:	52                   	push   edx
c000180b:	e8 b0 f4 ff ff       	call   c0000cc0 <dlfree>
c0001810:	83 c4 10             	add    esp,0x10
c0001813:	8d 46 08             	lea    eax,[esi+0x8]
c0001816:	83 c4 0c             	add    esp,0xc
c0001819:	5b                   	pop    ebx
c000181a:	5e                   	pop    esi
c000181b:	5f                   	pop    edi
c000181c:	5d                   	pop    ebp
c000181d:	c3                   	ret    

c000181e <dlcalloc>:
c000181e:	53                   	push   ebx
c000181f:	83 ec 14             	sub    esp,0x14
c0001822:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001826:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c000182b:	50                   	push   eax
c000182c:	e8 ea f7 ff ff       	call   c000101b <dlmalloc>
c0001831:	83 c4 10             	add    esp,0x10
c0001834:	89 c3                	mov    ebx,eax
c0001836:	85 c0                	test   eax,eax
c0001838:	74 77                	je     c00018b1 <dlcalloc+0x93>
c000183a:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000183d:	89 d0                	mov    eax,edx
c000183f:	83 e0 fc             	and    eax,0xfffffffc
c0001842:	80 e2 02             	and    dl,0x2
c0001845:	75 5a                	jne    c00018a1 <dlcalloc+0x83>
c0001847:	83 e8 04             	sub    eax,0x4
c000184a:	83 f8 27             	cmp    eax,0x27
c000184d:	76 03                	jbe    c0001852 <dlcalloc+0x34>
c000184f:	51                   	push   ecx
c0001850:	eb 53                	jmp    c00018a5 <dlcalloc+0x87>
c0001852:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001858:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000185f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001866:	83 f8 13             	cmp    eax,0x13
c0001869:	76 46                	jbe    c00018b1 <dlcalloc+0x93>
c000186b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001872:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001879:	83 f8 1b             	cmp    eax,0x1b
c000187c:	76 33                	jbe    c00018b1 <dlcalloc+0x93>
c000187e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001885:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000188c:	83 f8 23             	cmp    eax,0x23
c000188f:	76 20                	jbe    c00018b1 <dlcalloc+0x93>
c0001891:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001898:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000189f:	eb 10                	jmp    c00018b1 <dlcalloc+0x93>
c00018a1:	83 e8 08             	sub    eax,0x8
c00018a4:	52                   	push   edx
c00018a5:	50                   	push   eax
c00018a6:	6a 00                	push   0x0
c00018a8:	53                   	push   ebx
c00018a9:	e8 ce ed ff ff       	call   c000067c <memset>
c00018ae:	83 c4 10             	add    esp,0x10
c00018b1:	89 d8                	mov    eax,ebx
c00018b3:	83 c4 08             	add    esp,0x8
c00018b6:	5b                   	pop    ebx
c00018b7:	c3                   	ret    

c00018b8 <dlcfree>:
c00018b8:	e9 03 f4 ff ff       	jmp    c0000cc0 <dlfree>

c00018bd <dlindependent_calloc>:
c00018bd:	83 ec 28             	sub    esp,0x28
c00018c0:	b9 03 00 00 00       	mov    ecx,0x3
c00018c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018c9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018d1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018d9:	e8 cb fa ff ff       	call   c00013a9 <iALLOc>
c00018de:	83 c4 2c             	add    esp,0x2c
c00018e1:	c3                   	ret    

c00018e2 <dlindependent_comalloc>:
c00018e2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018ea:	31 c9                	xor    ecx,ecx
c00018ec:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018f4:	e9 b0 fa ff ff       	jmp    c00013a9 <iALLOc>

c00018f9 <dlvalloc>:
c00018f9:	83 ec 0c             	sub    esp,0xc
c00018fc:	83 3d 00 7a 02 c0 00 	cmp    DWORD PTR ds:0xc0027a00,0x0
c0001903:	75 0a                	jne    c000190f <dlvalloc+0x16>
c0001905:	b8 00 7a 02 c0       	mov    eax,0xc0027a00
c000190a:	e8 ca f2 ff ff       	call   c0000bd9 <malloc_consolidate>
c000190f:	50                   	push   eax
c0001910:	50                   	push   eax
c0001911:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001915:	ff 35 5c 7d 02 c0    	push   DWORD PTR ds:0xc0027d5c
c000191b:	e8 db fd ff ff       	call   c00016fb <dlmemalign>
c0001920:	83 c4 1c             	add    esp,0x1c
c0001923:	c3                   	ret    

c0001924 <dlpvalloc>:
c0001924:	83 ec 0c             	sub    esp,0xc
c0001927:	83 3d 00 7a 02 c0 00 	cmp    DWORD PTR ds:0xc0027a00,0x0
c000192e:	75 0a                	jne    c000193a <dlpvalloc+0x16>
c0001930:	b8 00 7a 02 c0       	mov    eax,0xc0027a00
c0001935:	e8 9f f2 ff ff       	call   c0000bd9 <malloc_consolidate>
c000193a:	a1 5c 7d 02 c0       	mov    eax,ds:0xc0027d5c
c000193f:	89 c1                	mov    ecx,eax
c0001941:	52                   	push   edx
c0001942:	f7 d9                	neg    ecx
c0001944:	52                   	push   edx
c0001945:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001949:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c000194d:	21 ca                	and    edx,ecx
c000194f:	52                   	push   edx
c0001950:	50                   	push   eax
c0001951:	e8 a5 fd ff ff       	call   c00016fb <dlmemalign>
c0001956:	83 c4 1c             	add    esp,0x1c
c0001959:	c3                   	ret    

c000195a <dlmalloc_trim>:
c000195a:	b8 00 7a 02 c0       	mov    eax,0xc0027a00
c000195f:	e8 75 f2 ff ff       	call   c0000bd9 <malloc_consolidate>
c0001964:	31 c0                	xor    eax,eax
c0001966:	c3                   	ret    

c0001967 <dlmalloc_usable_size>:
c0001967:	53                   	push   ebx
c0001968:	31 c0                	xor    eax,eax
c000196a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000196e:	85 c9                	test   ecx,ecx
c0001970:	74 24                	je     c0001996 <dlmalloc_usable_size+0x2f>
c0001972:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001975:	f6 c2 02             	test   dl,0x2
c0001978:	74 08                	je     c0001982 <dlmalloc_usable_size+0x1b>
c000197a:	83 e2 fc             	and    edx,0xfffffffc
c000197d:	8d 42 f8             	lea    eax,[edx-0x8]
c0001980:	eb 14                	jmp    c0001996 <dlmalloc_usable_size+0x2f>
c0001982:	89 d3                	mov    ebx,edx
c0001984:	31 c0                	xor    eax,eax
c0001986:	83 e3 fe             	and    ebx,0xfffffffe
c0001989:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c000198e:	74 06                	je     c0001996 <dlmalloc_usable_size+0x2f>
c0001990:	83 e2 fc             	and    edx,0xfffffffc
c0001993:	8d 42 fc             	lea    eax,[edx-0x4]
c0001996:	5b                   	pop    ebx
c0001997:	c3                   	ret    

c0001998 <dlmallinfo>:
c0001998:	55                   	push   ebp
c0001999:	57                   	push   edi
c000199a:	56                   	push   esi
c000199b:	53                   	push   ebx
c000199c:	83 ec 08             	sub    esp,0x8
c000199f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00019a3:	83 3d 2c 7a 02 c0 00 	cmp    DWORD PTR ds:0xc0027a2c,0x0
c00019aa:	75 0a                	jne    c00019b6 <dlmallinfo+0x1e>
c00019ac:	b8 00 7a 02 c0       	mov    eax,0xc0027a00
c00019b1:	e8 23 f2 ff ff       	call   c0000bd9 <malloc_consolidate>
c00019b6:	a1 2c 7a 02 c0       	mov    eax,ds:0xc0027a2c
c00019bb:	31 ed                	xor    ebp,ebp
c00019bd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00019c0:	31 c9                	xor    ecx,ecx
c00019c2:	83 e0 fc             	and    eax,0xfffffffc
c00019c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019c9:	31 c0                	xor    eax,eax
c00019cb:	8b 14 85 04 7a 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd85fc]
c00019d2:	85 d2                	test   edx,edx
c00019d4:	74 0e                	je     c00019e4 <dlmallinfo+0x4c>
c00019d6:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019d9:	45                   	inc    ebp
c00019da:	83 e6 fc             	and    esi,0xfffffffc
c00019dd:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019e0:	01 f1                	add    ecx,esi
c00019e2:	eb ee                	jmp    c00019d2 <dlmallinfo+0x3a>
c00019e4:	40                   	inc    eax
c00019e5:	83 f8 0a             	cmp    eax,0xa
c00019e8:	75 e1                	jne    c00019cb <dlmallinfo+0x33>
c00019ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019ee:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019f5:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019f8:	b8 34 7a 02 c0       	mov    eax,0xc0027a34
c00019fd:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a00:	39 f0                	cmp    eax,esi
c0001a02:	74 10                	je     c0001a14 <dlmallinfo+0x7c>
c0001a04:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a07:	ff 04 24             	inc    DWORD PTR [esp]
c0001a0a:	83 e7 fc             	and    edi,0xfffffffc
c0001a0d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001a10:	01 fa                	add    edx,edi
c0001a12:	eb ec                	jmp    c0001a00 <dlmallinfo+0x68>
c0001a14:	83 c0 08             	add    eax,0x8
c0001a17:	3d 2c 7d 02 c0       	cmp    eax,0xc0027d2c
c0001a1c:	75 df                	jne    c00019fd <dlmallinfo+0x65>
c0001a1e:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a21:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a24:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a27:	a1 68 7d 02 c0       	mov    eax,ds:0xc0027d68
c0001a2c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a2f:	89 03                	mov    DWORD PTR [ebx],eax
c0001a31:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a34:	8b 35 50 7d 02 c0    	mov    esi,DWORD PTR ds:0xc0027d50
c0001a3a:	29 d0                	sub    eax,edx
c0001a3c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a3f:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a42:	8b 35 64 7d 02 c0    	mov    esi,DWORD PTR ds:0xc0027d64
c0001a48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a4c:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a4f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a52:	8b 35 74 7d 02 c0    	mov    esi,DWORD PTR ds:0xc0027d74
c0001a58:	89 d8                	mov    eax,ebx
c0001a5a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a5d:	83 c4 08             	add    esp,0x8
c0001a60:	5b                   	pop    ebx
c0001a61:	5e                   	pop    esi
c0001a62:	5f                   	pop    edi
c0001a63:	5d                   	pop    ebp
c0001a64:	c2 04 00             	ret    0x4

c0001a67 <dlmalloc_stats>:
c0001a67:	83 ec 30             	sub    esp,0x30
c0001a6a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a6e:	50                   	push   eax
c0001a6f:	e8 24 ff ff ff       	call   c0001998 <dlmallinfo>
c0001a74:	83 c4 30             	add    esp,0x30
c0001a77:	c3                   	ret    

c0001a78 <dlmallopt>:
c0001a78:	56                   	push   esi
c0001a79:	b8 00 7a 02 c0       	mov    eax,0xc0027a00
c0001a7e:	53                   	push   ebx
c0001a7f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a83:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a87:	e8 4d f1 ff ff       	call   c0000bd9 <malloc_consolidate>
c0001a8c:	8d 46 04             	lea    eax,[esi+0x4]
c0001a8f:	83 f8 05             	cmp    eax,0x5
c0001a92:	77 67                	ja     c0001afb <dlmallopt+0x83>
c0001a94:	ff 24 85 e4 34 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdcb1c]
c0001a9b:	83 fb 50             	cmp    ebx,0x50
c0001a9e:	77 5b                	ja     c0001afb <dlmallopt+0x83>
c0001aa0:	ba 08 00 00 00       	mov    edx,0x8
c0001aa5:	85 db                	test   ebx,ebx
c0001aa7:	74 12                	je     c0001abb <dlmallopt+0x43>
c0001aa9:	83 c3 0b             	add    ebx,0xb
c0001aac:	ba 10 00 00 00       	mov    edx,0x10
c0001ab1:	83 fb 0f             	cmp    ebx,0xf
c0001ab4:	76 05                	jbe    c0001abb <dlmallopt+0x43>
c0001ab6:	89 da                	mov    edx,ebx
c0001ab8:	83 e2 f8             	and    edx,0xfffffff8
c0001abb:	a1 00 7a 02 c0       	mov    eax,ds:0xc0027a00
c0001ac0:	83 e0 03             	and    eax,0x3
c0001ac3:	09 d0                	or     eax,edx
c0001ac5:	a3 00 7a 02 c0       	mov    ds:0xc0027a00,eax
c0001aca:	eb 31                	jmp    c0001afd <dlmallopt+0x85>
c0001acc:	89 1d 44 7d 02 c0    	mov    DWORD PTR ds:0xc0027d44,ebx
c0001ad2:	eb 06                	jmp    c0001ada <dlmallopt+0x62>
c0001ad4:	89 1d 48 7d 02 c0    	mov    DWORD PTR ds:0xc0027d48,ebx
c0001ada:	be 01 00 00 00       	mov    esi,0x1
c0001adf:	eb 1c                	jmp    c0001afd <dlmallopt+0x85>
c0001ae1:	89 1d 4c 7d 02 c0    	mov    DWORD PTR ds:0xc0027d4c,ebx
c0001ae7:	eb f1                	jmp    c0001ada <dlmallopt+0x62>
c0001ae9:	31 f6                	xor    esi,esi
c0001aeb:	85 db                	test   ebx,ebx
c0001aed:	75 0e                	jne    c0001afd <dlmallopt+0x85>
c0001aef:	c7 05 54 7d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027d54,0x0
c0001af9:	eb df                	jmp    c0001ada <dlmallopt+0x62>
c0001afb:	31 f6                	xor    esi,esi
c0001afd:	89 f0                	mov    eax,esi
c0001aff:	5b                   	pop    ebx
c0001b00:	5e                   	pop    esi
c0001b01:	c3                   	ret    

c0001b02 <disk_status>:
c0001b02:	31 c0                	xor    eax,eax
c0001b04:	c3                   	ret    

c0001b05 <disk_initialize>:
c0001b05:	31 c0                	xor    eax,eax
c0001b07:	c3                   	ret    

c0001b08 <disk_read>:
c0001b08:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b0d:	0f b6 04 85 c0 94 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd6b40]
c0001b15:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b19:	e9 32 9f 01 00       	jmp    c001ba50 <fatWrapperReadDisk>

c0001b1e <disk_write>:
c0001b1e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b23:	0f b6 04 85 c0 94 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd6b40]
c0001b2b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b2f:	e9 64 9f 01 00       	jmp    c001ba98 <fatWrapperWriteDisk>

c0001b34 <disk_ioctl>:
c0001b34:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001b39:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001b3d:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b42:	0f b6 04 85 c0 94 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd6b40]
c0001b4a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b4e:	e9 8d 9f 01 00       	jmp    c001bae0 <fatWrapperIoctl>

c0001b53 <ld_word>:
c0001b53:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b57:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b5a:	c1 e2 08             	shl    edx,0x8
c0001b5d:	09 d0                	or     eax,edx
c0001b5f:	c3                   	ret    

c0001b60 <ld_dword>:
c0001b60:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001b64:	89 d1                	mov    ecx,edx
c0001b66:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b6a:	c1 e1 08             	shl    ecx,0x8
c0001b6d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b70:	09 ca                	or     edx,ecx
c0001b72:	c1 e2 08             	shl    edx,0x8
c0001b75:	09 d0                	or     eax,edx
c0001b77:	c3                   	ret    

c0001b78 <ld_qword>:
c0001b78:	57                   	push   edi
c0001b79:	56                   	push   esi
c0001b7a:	53                   	push   ebx
c0001b7b:	31 db                	xor    ebx,ebx
c0001b7d:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001b80:	89 df                	mov    edi,ebx
c0001b82:	89 ce                	mov    esi,ecx
c0001b84:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001b88:	0f a4 f7 08          	shld   edi,esi,0x8
c0001b8c:	c1 e6 08             	shl    esi,0x8
c0001b8f:	09 f2                	or     edx,esi
c0001b91:	89 d6                	mov    esi,edx
c0001b93:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001b97:	0f a4 f7 08          	shld   edi,esi,0x8
c0001b9b:	c1 e6 08             	shl    esi,0x8
c0001b9e:	09 f2                	or     edx,esi
c0001ba0:	89 d6                	mov    esi,edx
c0001ba2:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ba6:	0f a4 f7 08          	shld   edi,esi,0x8
c0001baa:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001bad:	c1 e6 08             	shl    esi,0x8
c0001bb0:	89 fb                	mov    ebx,edi
c0001bb2:	09 f2                	or     edx,esi
c0001bb4:	89 d1                	mov    ecx,edx
c0001bb6:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001bba:	c1 e1 08             	shl    ecx,0x8
c0001bbd:	89 da                	mov    edx,ebx
c0001bbf:	09 c8                	or     eax,ecx
c0001bc1:	5b                   	pop    ebx
c0001bc2:	5e                   	pop    esi
c0001bc3:	5f                   	pop    edi
c0001bc4:	c3                   	ret    

c0001bc5 <st_word>:
c0001bc5:	66 89 10             	mov    WORD PTR [eax],dx
c0001bc8:	c3                   	ret    

c0001bc9 <st_dword>:
c0001bc9:	89 10                	mov    DWORD PTR [eax],edx
c0001bcb:	c3                   	ret    

c0001bcc <st_qword>:
c0001bcc:	89 10                	mov    DWORD PTR [eax],edx
c0001bce:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001bd1:	c3                   	ret    

c0001bd2 <mem_cpy>:
c0001bd2:	85 c9                	test   ecx,ecx
c0001bd4:	74 10                	je     c0001be6 <mem_cpy+0x14>
c0001bd6:	57                   	push   edi
c0001bd7:	01 c1                	add    ecx,eax
c0001bd9:	56                   	push   esi
c0001bda:	89 c7                	mov    edi,eax
c0001bdc:	89 d6                	mov    esi,edx
c0001bde:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001bdf:	39 f9                	cmp    ecx,edi
c0001be1:	75 fb                	jne    c0001bde <mem_cpy+0xc>
c0001be3:	5e                   	pop    esi
c0001be4:	5f                   	pop    edi
c0001be5:	c3                   	ret    
c0001be6:	c3                   	ret    

c0001be7 <mem_set>:
c0001be7:	01 c1                	add    ecx,eax
c0001be9:	40                   	inc    eax
c0001bea:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001bed:	39 c8                	cmp    eax,ecx
c0001bef:	75 f8                	jne    c0001be9 <mem_set+0x2>
c0001bf1:	c3                   	ret    

c0001bf2 <mem_cmp>:
c0001bf2:	57                   	push   edi
c0001bf3:	56                   	push   esi
c0001bf4:	89 c6                	mov    esi,eax
c0001bf6:	53                   	push   ebx
c0001bf7:	46                   	inc    esi
c0001bf8:	42                   	inc    edx
c0001bf9:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001bfd:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001c01:	29 fb                	sub    ebx,edi
c0001c03:	89 cf                	mov    edi,ecx
c0001c05:	29 f7                	sub    edi,esi
c0001c07:	01 c7                	add    edi,eax
c0001c09:	74 04                	je     c0001c0f <mem_cmp+0x1d>
c0001c0b:	85 db                	test   ebx,ebx
c0001c0d:	74 e8                	je     c0001bf7 <mem_cmp+0x5>
c0001c0f:	89 d8                	mov    eax,ebx
c0001c11:	5b                   	pop    ebx
c0001c12:	5e                   	pop    esi
c0001c13:	5f                   	pop    edi
c0001c14:	c3                   	ret    

c0001c15 <chk_chr>:
c0001c15:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001c18:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001c1b:	74 07                	je     c0001c24 <chk_chr+0xf>
c0001c1d:	39 d1                	cmp    ecx,edx
c0001c1f:	74 03                	je     c0001c24 <chk_chr+0xf>
c0001c21:	40                   	inc    eax
c0001c22:	eb f1                	jmp    c0001c15 <chk_chr>
c0001c24:	89 c8                	mov    eax,ecx
c0001c26:	c3                   	ret    

c0001c27 <dbc_1st>:
c0001c27:	31 c0                	xor    eax,eax
c0001c29:	c3                   	ret    

c0001c2a <dbc_2nd>:
c0001c2a:	31 c0                	xor    eax,eax
c0001c2c:	c3                   	ret    

c0001c2d <tchar2uni>:
c0001c2d:	57                   	push   edi
c0001c2e:	89 c7                	mov    edi,eax
c0001c30:	56                   	push   esi
c0001c31:	53                   	push   ebx
c0001c32:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001c34:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001c36:	8d 73 01             	lea    esi,[ebx+0x1]
c0001c39:	84 c9                	test   cl,cl
c0001c3b:	78 0a                	js     c0001c47 <tchar2uni+0x1a>
c0001c3d:	0f b6 d1             	movzx  edx,cl
c0001c40:	89 f3                	mov    ebx,esi
c0001c42:	e9 9f 00 00 00       	jmp    c0001ce6 <tchar2uni+0xb9>
c0001c47:	88 ca                	mov    dl,cl
c0001c49:	83 e2 e0             	and    edx,0xffffffe0
c0001c4c:	80 fa c0             	cmp    dl,0xc0
c0001c4f:	75 0c                	jne    c0001c5d <tchar2uni+0x30>
c0001c51:	89 ca                	mov    edx,ecx
c0001c53:	b9 01 00 00 00       	mov    ecx,0x1
c0001c58:	83 e2 1f             	and    edx,0x1f
c0001c5b:	eb 2e                	jmp    c0001c8b <tchar2uni+0x5e>
c0001c5d:	88 ca                	mov    dl,cl
c0001c5f:	83 e2 f0             	and    edx,0xfffffff0
c0001c62:	80 fa e0             	cmp    dl,0xe0
c0001c65:	75 0c                	jne    c0001c73 <tchar2uni+0x46>
c0001c67:	89 ca                	mov    edx,ecx
c0001c69:	b9 02 00 00 00       	mov    ecx,0x2
c0001c6e:	83 e2 0f             	and    edx,0xf
c0001c71:	eb 18                	jmp    c0001c8b <tchar2uni+0x5e>
c0001c73:	88 ca                	mov    dl,cl
c0001c75:	83 e2 f8             	and    edx,0xfffffff8
c0001c78:	88 d0                	mov    al,dl
c0001c7a:	83 ca ff             	or     edx,0xffffffff
c0001c7d:	3c f0                	cmp    al,0xf0
c0001c7f:	75 6c                	jne    c0001ced <tchar2uni+0xc0>
c0001c81:	89 ca                	mov    edx,ecx
c0001c83:	b9 03 00 00 00       	mov    ecx,0x3
c0001c88:	83 e2 07             	and    edx,0x7
c0001c8b:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001c8f:	46                   	inc    esi
c0001c90:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001c93:	88 c8                	mov    al,cl
c0001c95:	83 e0 c0             	and    eax,0xffffffc0
c0001c98:	3c 80                	cmp    al,0x80
c0001c9a:	75 4e                	jne    c0001cea <tchar2uni+0xbd>
c0001c9c:	c1 e2 06             	shl    edx,0x6
c0001c9f:	83 e1 3f             	and    ecx,0x3f
c0001ca2:	09 ca                	or     edx,ecx
c0001ca4:	39 de                	cmp    esi,ebx
c0001ca6:	75 e7                	jne    c0001c8f <tchar2uni+0x62>
c0001ca8:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001cab:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001cb1:	77 37                	ja     c0001cea <tchar2uni+0xbd>
c0001cb3:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001cb9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001cbf:	76 29                	jbe    c0001cea <tchar2uni+0xbd>
c0001cc1:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001cc7:	76 1d                	jbe    c0001ce6 <tchar2uni+0xb9>
c0001cc9:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001ccf:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001cd5:	c1 e1 06             	shl    ecx,0x6
c0001cd8:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001cde:	09 ca                	or     edx,ecx
c0001ce0:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001ce6:	89 1f                	mov    DWORD PTR [edi],ebx
c0001ce8:	eb 03                	jmp    c0001ced <tchar2uni+0xc0>
c0001cea:	83 ca ff             	or     edx,0xffffffff
c0001ced:	5b                   	pop    ebx
c0001cee:	89 d0                	mov    eax,edx
c0001cf0:	5e                   	pop    esi
c0001cf1:	5f                   	pop    edi
c0001cf2:	c3                   	ret    

c0001cf3 <put_utf>:
c0001cf3:	53                   	push   ebx
c0001cf4:	83 f8 7f             	cmp    eax,0x7f
c0001cf7:	89 c3                	mov    ebx,eax
c0001cf9:	b0 00                	mov    al,0x0
c0001cfb:	77 11                	ja     c0001d0e <put_utf+0x1b>
c0001cfd:	85 c9                	test   ecx,ecx
c0001cff:	0f 84 e5 00 00 00    	je     c0001dea <put_utf+0xf7>
c0001d05:	88 1a                	mov    BYTE PTR [edx],bl
c0001d07:	b0 01                	mov    al,0x1
c0001d09:	e9 dc 00 00 00       	jmp    c0001dea <put_utf+0xf7>
c0001d0e:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001d14:	77 23                	ja     c0001d39 <put_utf+0x46>
c0001d16:	83 f9 01             	cmp    ecx,0x1
c0001d19:	0f 86 cb 00 00 00    	jbe    c0001dea <put_utf+0xf7>
c0001d1f:	89 d8                	mov    eax,ebx
c0001d21:	83 e3 3f             	and    ebx,0x3f
c0001d24:	c1 e8 06             	shr    eax,0x6
c0001d27:	83 cb 80             	or     ebx,0xffffff80
c0001d2a:	83 c8 c0             	or     eax,0xffffffc0
c0001d2d:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001d30:	88 02                	mov    BYTE PTR [edx],al
c0001d32:	b0 02                	mov    al,0x2
c0001d34:	e9 b1 00 00 00       	jmp    c0001dea <put_utf+0xf7>
c0001d39:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001d3f:	77 40                	ja     c0001d81 <put_utf+0x8e>
c0001d41:	83 f9 02             	cmp    ecx,0x2
c0001d44:	0f 86 a0 00 00 00    	jbe    c0001dea <put_utf+0xf7>
c0001d4a:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001d50:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d56:	0f 86 8e 00 00 00    	jbe    c0001dea <put_utf+0xf7>
c0001d5c:	89 d8                	mov    eax,ebx
c0001d5e:	c1 e8 0c             	shr    eax,0xc
c0001d61:	83 c8 e0             	or     eax,0xffffffe0
c0001d64:	88 02                	mov    BYTE PTR [edx],al
c0001d66:	89 d8                	mov    eax,ebx
c0001d68:	83 e3 3f             	and    ebx,0x3f
c0001d6b:	c1 e8 06             	shr    eax,0x6
c0001d6e:	83 cb 80             	or     ebx,0xffffff80
c0001d71:	83 e0 3f             	and    eax,0x3f
c0001d74:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001d77:	83 c8 80             	or     eax,0xffffff80
c0001d7a:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001d7d:	b0 03                	mov    al,0x3
c0001d7f:	eb 69                	jmp    c0001dea <put_utf+0xf7>
c0001d81:	83 f9 03             	cmp    ecx,0x3
c0001d84:	76 64                	jbe    c0001dea <put_utf+0xf7>
c0001d86:	89 d9                	mov    ecx,ebx
c0001d88:	0f b7 c3             	movzx  eax,bx
c0001d8b:	66 31 c9             	xor    cx,cx
c0001d8e:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001d94:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001d9a:	c1 e9 06             	shr    ecx,0x6
c0001d9d:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001da3:	77 43                	ja     c0001de8 <put_utf+0xf5>
c0001da5:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001dab:	77 3b                	ja     c0001de8 <put_utf+0xf5>
c0001dad:	09 cb                	or     ebx,ecx
c0001daf:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001db5:	89 d8                	mov    eax,ebx
c0001db7:	c1 e8 12             	shr    eax,0x12
c0001dba:	83 c8 f0             	or     eax,0xfffffff0
c0001dbd:	88 02                	mov    BYTE PTR [edx],al
c0001dbf:	89 d8                	mov    eax,ebx
c0001dc1:	c1 e8 0c             	shr    eax,0xc
c0001dc4:	83 e0 3f             	and    eax,0x3f
c0001dc7:	83 c8 80             	or     eax,0xffffff80
c0001dca:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001dcd:	89 d8                	mov    eax,ebx
c0001dcf:	83 e3 3f             	and    ebx,0x3f
c0001dd2:	c1 e8 06             	shr    eax,0x6
c0001dd5:	83 cb 80             	or     ebx,0xffffff80
c0001dd8:	83 e0 3f             	and    eax,0x3f
c0001ddb:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001dde:	83 c8 80             	or     eax,0xffffff80
c0001de1:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001de4:	b0 04                	mov    al,0x4
c0001de6:	eb 02                	jmp    c0001dea <put_utf+0xf7>
c0001de8:	31 c0                	xor    eax,eax
c0001dea:	5b                   	pop    ebx
c0001deb:	c3                   	ret    

c0001dec <clst2sect>:
c0001dec:	89 c1                	mov    ecx,eax
c0001dee:	83 ea 02             	sub    edx,0x2
c0001df1:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001df4:	83 e8 02             	sub    eax,0x2
c0001df7:	39 d0                	cmp    eax,edx
c0001df9:	76 0d                	jbe    c0001e08 <clst2sect+0x1c>
c0001dfb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001dff:	f7 e2                	mul    edx
c0001e01:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001e04:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001e07:	c3                   	ret    
c0001e08:	31 c0                	xor    eax,eax
c0001e0a:	31 d2                	xor    edx,edx
c0001e0c:	c3                   	ret    

c0001e0d <clmt_clust>:
c0001e0d:	57                   	push   edi
c0001e0e:	89 cf                	mov    edi,ecx
c0001e10:	56                   	push   esi
c0001e11:	89 d6                	mov    esi,edx
c0001e13:	53                   	push   ebx
c0001e14:	0f ac fe 09          	shrd   esi,edi,0x9
c0001e18:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001e1b:	89 f2                	mov    edx,esi
c0001e1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0001e1f:	c1 ef 09             	shr    edi,0x9
c0001e22:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001e26:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001e29:	89 f9                	mov    ecx,edi
c0001e2b:	31 ff                	xor    edi,edi
c0001e2d:	57                   	push   edi
c0001e2e:	56                   	push   esi
c0001e2f:	51                   	push   ecx
c0001e30:	52                   	push   edx
c0001e31:	e8 2a 08 02 00       	call   c0022660 <__udivdi3>
c0001e36:	83 c4 10             	add    esp,0x10
c0001e39:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001e3b:	85 d2                	test   edx,edx
c0001e3d:	74 10                	je     c0001e4f <clmt_clust+0x42>
c0001e3f:	39 d0                	cmp    eax,edx
c0001e41:	72 07                	jb     c0001e4a <clmt_clust+0x3d>
c0001e43:	29 d0                	sub    eax,edx
c0001e45:	83 c3 08             	add    ebx,0x8
c0001e48:	eb ef                	jmp    c0001e39 <clmt_clust+0x2c>
c0001e4a:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001e4d:	89 c2                	mov    edx,eax
c0001e4f:	5b                   	pop    ebx
c0001e50:	89 d0                	mov    eax,edx
c0001e52:	5e                   	pop    esi
c0001e53:	5f                   	pop    edi
c0001e54:	c3                   	ret    

c0001e55 <pick_lfn>:
c0001e55:	55                   	push   ebp
c0001e56:	57                   	push   edi
c0001e57:	56                   	push   esi
c0001e58:	89 d6                	mov    esi,edx
c0001e5a:	53                   	push   ebx
c0001e5b:	89 c3                	mov    ebx,eax
c0001e5d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001e60:	e8 ee fc ff ff       	call   c0001b53 <ld_word>
c0001e65:	66 85 c0             	test   ax,ax
c0001e68:	74 04                	je     c0001e6e <pick_lfn+0x19>
c0001e6a:	31 c0                	xor    eax,eax
c0001e6c:	eb 5c                	jmp    c0001eca <pick_lfn+0x75>
c0001e6e:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001e71:	bd 01 00 00 00       	mov    ebp,0x1
c0001e76:	83 e1 bf             	and    ecx,0xffffffbf
c0001e79:	31 ff                	xor    edi,edi
c0001e7b:	49                   	dec    ecx
c0001e7c:	6b c9 0d             	imul   ecx,ecx,0xd
c0001e7f:	0f b6 87 00 36 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffdca00]
c0001e86:	01 f0                	add    eax,esi
c0001e88:	e8 c6 fc ff ff       	call   c0001b53 <ld_word>
c0001e8d:	66 85 ed             	test   bp,bp
c0001e90:	74 11                	je     c0001ea3 <pick_lfn+0x4e>
c0001e92:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001e98:	77 d0                	ja     c0001e6a <pick_lfn+0x15>
c0001e9a:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001e9e:	89 c5                	mov    ebp,eax
c0001ea0:	41                   	inc    ecx
c0001ea1:	eb 04                	jmp    c0001ea7 <pick_lfn+0x52>
c0001ea3:	66 40                	inc    ax
c0001ea5:	75 c3                	jne    c0001e6a <pick_lfn+0x15>
c0001ea7:	47                   	inc    edi
c0001ea8:	83 ff 0d             	cmp    edi,0xd
c0001eab:	75 d2                	jne    c0001e7f <pick_lfn+0x2a>
c0001ead:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001eb0:	74 13                	je     c0001ec5 <pick_lfn+0x70>
c0001eb2:	66 85 ed             	test   bp,bp
c0001eb5:	74 0e                	je     c0001ec5 <pick_lfn+0x70>
c0001eb7:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ebd:	77 ab                	ja     c0001e6a <pick_lfn+0x15>
c0001ebf:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ec5:	b8 01 00 00 00       	mov    eax,0x1
c0001eca:	5b                   	pop    ebx
c0001ecb:	5e                   	pop    esi
c0001ecc:	5f                   	pop    edi
c0001ecd:	5d                   	pop    ebp
c0001ece:	c3                   	ret    

c0001ecf <put_lfn>:
c0001ecf:	55                   	push   ebp
c0001ed0:	31 ed                	xor    ebp,ebp
c0001ed2:	57                   	push   edi
c0001ed3:	89 d7                	mov    edi,edx
c0001ed5:	56                   	push   esi
c0001ed6:	31 f6                	xor    esi,esi
c0001ed8:	53                   	push   ebx
c0001ed9:	83 ec 08             	sub    esp,0x8
c0001edc:	89 04 24             	mov    DWORD PTR [esp],eax
c0001edf:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ee3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ee7:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001eed:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ef0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001ef3:	31 d2                	xor    edx,edx
c0001ef5:	e8 cb fc ff ff       	call   c0001bc5 <st_word>
c0001efa:	0f b6 d9             	movzx  ebx,cl
c0001efd:	4b                   	dec    ebx
c0001efe:	6b db 0d             	imul   ebx,ebx,0xd
c0001f01:	66 83 fe ff          	cmp    si,0xffff
c0001f05:	74 08                	je     c0001f0f <put_lfn+0x40>
c0001f07:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f0a:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001f0e:	43                   	inc    ebx
c0001f0f:	0f b6 85 00 36 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffdca00]
c0001f16:	0f b7 d6             	movzx  edx,si
c0001f19:	01 f8                	add    eax,edi
c0001f1b:	e8 a5 fc ff ff       	call   c0001bc5 <st_word>
c0001f20:	66 85 f6             	test   si,si
c0001f23:	75 03                	jne    c0001f28 <put_lfn+0x59>
c0001f25:	83 ce ff             	or     esi,0xffffffff
c0001f28:	45                   	inc    ebp
c0001f29:	83 fd 0d             	cmp    ebp,0xd
c0001f2c:	75 d3                	jne    c0001f01 <put_lfn+0x32>
c0001f2e:	66 46                	inc    si
c0001f30:	74 0a                	je     c0001f3c <put_lfn+0x6d>
c0001f32:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f35:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001f3a:	75 09                	jne    c0001f45 <put_lfn+0x76>
c0001f3c:	88 c8                	mov    al,cl
c0001f3e:	83 c8 40             	or     eax,0x40
c0001f41:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001f45:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001f49:	88 07                	mov    BYTE PTR [edi],al
c0001f4b:	83 c4 08             	add    esp,0x8
c0001f4e:	5b                   	pop    ebx
c0001f4f:	5e                   	pop    esi
c0001f50:	5f                   	pop    edi
c0001f51:	5d                   	pop    ebp
c0001f52:	c3                   	ret    

c0001f53 <gen_numname>:
c0001f53:	57                   	push   edi
c0001f54:	89 cf                	mov    edi,ecx
c0001f56:	56                   	push   esi
c0001f57:	b9 0b 00 00 00       	mov    ecx,0xb
c0001f5c:	53                   	push   ebx
c0001f5d:	89 c6                	mov    esi,eax
c0001f5f:	83 ec 10             	sub    esp,0x10
c0001f62:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001f66:	e8 67 fc ff ff       	call   c0001bd2 <mem_cpy>
c0001f6b:	83 fb 05             	cmp    ebx,0x5
c0001f6e:	76 2d                	jbe    c0001f9d <gen_numname+0x4a>
c0001f70:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001f73:	66 85 c0             	test   ax,ax
c0001f76:	74 25                	je     c0001f9d <gen_numname+0x4a>
c0001f78:	83 c7 02             	add    edi,0x2
c0001f7b:	ba 10 00 00 00       	mov    edx,0x10
c0001f80:	01 db                	add    ebx,ebx
c0001f82:	89 c1                	mov    ecx,eax
c0001f84:	66 d1 e8             	shr    ax,1
c0001f87:	83 e1 01             	and    ecx,0x1
c0001f8a:	01 cb                	add    ebx,ecx
c0001f8c:	0f ba e3 10          	bt     ebx,0x10
c0001f90:	73 06                	jae    c0001f98 <gen_numname+0x45>
c0001f92:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001f98:	4a                   	dec    edx
c0001f99:	75 e5                	jne    c0001f80 <gen_numname+0x2d>
c0001f9b:	eb d3                	jmp    c0001f70 <gen_numname+0x1d>
c0001f9d:	b8 07 00 00 00       	mov    eax,0x7
c0001fa2:	88 d9                	mov    cl,bl
c0001fa4:	83 e1 0f             	and    ecx,0xf
c0001fa7:	8d 51 30             	lea    edx,[ecx+0x30]
c0001faa:	80 fa 39             	cmp    dl,0x39
c0001fad:	76 03                	jbe    c0001fb2 <gen_numname+0x5f>
c0001faf:	8d 51 37             	lea    edx,[ecx+0x37]
c0001fb2:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001fb5:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001fb9:	89 da                	mov    edx,ebx
c0001fbb:	c1 ea 04             	shr    edx,0x4
c0001fbe:	83 fb 0f             	cmp    ebx,0xf
c0001fc1:	76 06                	jbe    c0001fc9 <gen_numname+0x76>
c0001fc3:	89 c8                	mov    eax,ecx
c0001fc5:	89 d3                	mov    ebx,edx
c0001fc7:	eb d9                	jmp    c0001fa2 <gen_numname+0x4f>
c0001fc9:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001fce:	31 d2                	xor    edx,edx
c0001fd0:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001fd3:	8d 04 16             	lea    eax,[esi+edx*1]
c0001fd6:	39 ca                	cmp    edx,ecx
c0001fd8:	73 18                	jae    c0001ff2 <gen_numname+0x9f>
c0001fda:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fdd:	3c 20                	cmp    al,0x20
c0001fdf:	74 11                	je     c0001ff2 <gen_numname+0x9f>
c0001fe1:	e8 41 fc ff ff       	call   c0001c27 <dbc_1st>
c0001fe6:	85 c0                	test   eax,eax
c0001fe8:	74 05                	je     c0001fef <gen_numname+0x9c>
c0001fea:	39 d3                	cmp    ebx,edx
c0001fec:	74 04                	je     c0001ff2 <gen_numname+0x9f>
c0001fee:	42                   	inc    edx
c0001fef:	42                   	inc    edx
c0001ff0:	eb e1                	jmp    c0001fd3 <gen_numname+0x80>
c0001ff2:	b0 20                	mov    al,0x20
c0001ff4:	83 f9 07             	cmp    ecx,0x7
c0001ff7:	77 05                	ja     c0001ffe <gen_numname+0xab>
c0001ff9:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001ffd:	41                   	inc    ecx
c0001ffe:	42                   	inc    edx
c0001fff:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002003:	83 fa 07             	cmp    edx,0x7
c0002006:	76 ea                	jbe    c0001ff2 <gen_numname+0x9f>
c0002008:	83 c4 10             	add    esp,0x10
c000200b:	5b                   	pop    ebx
c000200c:	5e                   	pop    esi
c000200d:	5f                   	pop    edi
c000200e:	c3                   	ret    

c000200f <sum_sfn>:
c000200f:	31 c9                	xor    ecx,ecx
c0002011:	31 d2                	xor    edx,edx
c0002013:	d0 ca                	ror    dl,1
c0002015:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002018:	41                   	inc    ecx
c0002019:	83 f9 0b             	cmp    ecx,0xb
c000201c:	75 f5                	jne    c0002013 <sum_sfn+0x4>
c000201e:	88 d0                	mov    al,dl
c0002020:	c3                   	ret    

c0002021 <xdir_sum>:
c0002021:	56                   	push   esi
c0002022:	31 c9                	xor    ecx,ecx
c0002024:	53                   	push   ebx
c0002025:	31 d2                	xor    edx,edx
c0002027:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c000202b:	43                   	inc    ebx
c000202c:	c1 e3 05             	shl    ebx,0x5
c000202f:	83 fa 02             	cmp    edx,0x2
c0002032:	74 0b                	je     c000203f <xdir_sum+0x1e>
c0002034:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002038:	66 d1 c9             	ror    cx,1
c000203b:	01 f1                	add    ecx,esi
c000203d:	eb 05                	jmp    c0002044 <xdir_sum+0x23>
c000203f:	ba 03 00 00 00       	mov    edx,0x3
c0002044:	42                   	inc    edx
c0002045:	39 d3                	cmp    ebx,edx
c0002047:	77 e6                	ja     c000202f <xdir_sum+0xe>
c0002049:	89 c8                	mov    eax,ecx
c000204b:	5b                   	pop    ebx
c000204c:	5e                   	pop    esi
c000204d:	c3                   	ret    

c000204e <xsum32>:
c000204e:	d1 ca                	ror    edx,1
c0002050:	0f b6 c0             	movzx  eax,al
c0002053:	01 d0                	add    eax,edx
c0002055:	c3                   	ret    

c0002056 <get_xfileinfo>:
c0002056:	55                   	push   ebp
c0002057:	31 c9                	xor    ecx,ecx
c0002059:	57                   	push   edi
c000205a:	bd 40 00 00 00       	mov    ebp,0x40
c000205f:	56                   	push   esi
c0002060:	31 ff                	xor    edi,edi
c0002062:	53                   	push   ebx
c0002063:	89 c6                	mov    esi,eax
c0002065:	83 ec 0c             	sub    esp,0xc
c0002068:	89 d3                	mov    ebx,edx
c000206a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002071:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002075:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002078:	76 6d                	jbe    c00020e7 <get_xfileinfo+0x91>
c000207a:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002080:	76 0b                	jbe    c000208d <get_xfileinfo+0x37>
c0002082:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0002086:	bf 01 00 00 00       	mov    edi,0x1
c000208b:	eb 63                	jmp    c00020f0 <get_xfileinfo+0x9a>
c000208d:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002093:	75 03                	jne    c0002098 <get_xfileinfo+0x42>
c0002095:	83 c5 02             	add    ebp,0x2
c0002098:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000209b:	83 c5 02             	add    ebp,0x2
c000209e:	e8 b0 fa ff ff       	call   c0001b53 <ld_word>
c00020a3:	ff 04 24             	inc    DWORD PTR [esp]
c00020a6:	66 85 c9             	test   cx,cx
c00020a9:	75 0d                	jne    c00020b8 <get_xfileinfo+0x62>
c00020ab:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00020b1:	66 81 fa ff 07       	cmp    dx,0x7ff
c00020b6:	76 2b                	jbe    c00020e3 <get_xfileinfo+0x8d>
c00020b8:	c1 e1 10             	shl    ecx,0x10
c00020bb:	ba ff 00 00 00       	mov    edx,0xff
c00020c0:	0f b7 c0             	movzx  eax,ax
c00020c3:	29 fa                	sub    edx,edi
c00020c5:	09 c8                	or     eax,ecx
c00020c7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00020cb:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00020cf:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00020d3:	e8 1b fc ff ff       	call   c0001cf3 <put_utf>
c00020d8:	84 c0                	test   al,al
c00020da:	74 a6                	je     c0002082 <get_xfileinfo+0x2c>
c00020dc:	0f b6 c0             	movzx  eax,al
c00020df:	01 c7                	add    edi,eax
c00020e1:	31 c0                	xor    eax,eax
c00020e3:	89 c1                	mov    ecx,eax
c00020e5:	eb 8a                	jmp    c0002071 <get_xfileinfo+0x1b>
c00020e7:	85 ff                	test   edi,edi
c00020e9:	74 97                	je     c0002082 <get_xfileinfo+0x2c>
c00020eb:	66 85 c9             	test   cx,cx
c00020ee:	75 92                	jne    c0002082 <get_xfileinfo+0x2c>
c00020f0:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00020f5:	31 c0                	xor    eax,eax
c00020f7:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00020fb:	31 d2                	xor    edx,edx
c00020fd:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002100:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002103:	80 e1 10             	and    cl,0x10
c0002106:	75 08                	jne    c0002110 <get_xfileinfo+0xba>
c0002108:	8d 46 38             	lea    eax,[esi+0x38]
c000210b:	e8 68 fa ff ff       	call   c0001b78 <ld_qword>
c0002110:	89 03                	mov    DWORD PTR [ebx],eax
c0002112:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002115:	8d 46 0c             	lea    eax,[esi+0xc]
c0002118:	e8 36 fa ff ff       	call   c0001b53 <ld_word>
c000211d:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002121:	8d 46 0e             	lea    eax,[esi+0xe]
c0002124:	e8 2a fa ff ff       	call   c0001b53 <ld_word>
c0002129:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000212d:	83 c4 0c             	add    esp,0xc
c0002130:	5b                   	pop    ebx
c0002131:	5e                   	pop    esi
c0002132:	5f                   	pop    edi
c0002133:	5d                   	pop    ebp
c0002134:	c3                   	ret    

c0002135 <get_ldnumber>:
c0002135:	8b 10                	mov    edx,DWORD PTR [eax]
c0002137:	85 d2                	test   edx,edx
c0002139:	74 14                	je     c000214f <get_ldnumber+0x1a>
c000213b:	56                   	push   esi
c000213c:	53                   	push   ebx
c000213d:	89 d3                	mov    ebx,edx
c000213f:	43                   	inc    ebx
c0002140:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002143:	80 f9 1f             	cmp    cl,0x1f
c0002146:	76 0d                	jbe    c0002155 <get_ldnumber+0x20>
c0002148:	80 f9 3a             	cmp    cl,0x3a
c000214b:	75 f2                	jne    c000213f <get_ldnumber+0xa>
c000214d:	eb 0a                	jmp    c0002159 <get_ldnumber+0x24>
c000214f:	83 c9 ff             	or     ecx,0xffffffff
c0002152:	89 c8                	mov    eax,ecx
c0002154:	c3                   	ret    
c0002155:	31 c9                	xor    ecx,ecx
c0002157:	eb 24                	jmp    c000217d <get_ldnumber+0x48>
c0002159:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000215c:	8d 4e d0             	lea    ecx,[esi-0x30]
c000215f:	80 f9 09             	cmp    cl,0x9
c0002162:	77 16                	ja     c000217a <get_ldnumber+0x45>
c0002164:	83 c2 02             	add    edx,0x2
c0002167:	83 c9 ff             	or     ecx,0xffffffff
c000216a:	39 d3                	cmp    ebx,edx
c000216c:	75 0f                	jne    c000217d <get_ldnumber+0x48>
c000216e:	89 f2                	mov    edx,esi
c0002170:	89 18                	mov    DWORD PTR [eax],ebx
c0002172:	0f be ca             	movsx  ecx,dl
c0002175:	83 e9 30             	sub    ecx,0x30
c0002178:	eb 03                	jmp    c000217d <get_ldnumber+0x48>
c000217a:	83 c9 ff             	or     ecx,0xffffffff
c000217d:	89 c8                	mov    eax,ecx
c000217f:	5b                   	pop    ebx
c0002180:	5e                   	pop    esi
c0002181:	c3                   	ret    

c0002182 <crc32>:
c0002182:	56                   	push   esi
c0002183:	89 d6                	mov    esi,edx
c0002185:	53                   	push   ebx
c0002186:	b2 01                	mov    dl,0x1
c0002188:	bb 08 00 00 00       	mov    ebx,0x8
c000218d:	89 f1                	mov    ecx,esi
c000218f:	84 d1                	test   cl,dl
c0002191:	0f 95 c1             	setne  cl
c0002194:	0f b6 c9             	movzx  ecx,cl
c0002197:	31 c1                	xor    ecx,eax
c0002199:	89 c8                	mov    eax,ecx
c000219b:	d1 e8                	shr    eax,1
c000219d:	80 e1 01             	and    cl,0x1
c00021a0:	74 05                	je     c00021a7 <crc32+0x25>
c00021a2:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00021a7:	d1 e2                	shl    edx,1
c00021a9:	4b                   	dec    ebx
c00021aa:	75 e1                	jne    c000218d <crc32+0xb>
c00021ac:	5b                   	pop    ebx
c00021ad:	5e                   	pop    esi
c00021ae:	c3                   	ret    

c00021af <test_gpt_header>:
c00021af:	55                   	push   ebp
c00021b0:	b9 10 00 00 00       	mov    ecx,0x10
c00021b5:	57                   	push   edi
c00021b6:	ba 00 35 02 c0       	mov    edx,0xc0023500
c00021bb:	56                   	push   esi
c00021bc:	31 ff                	xor    edi,edi
c00021be:	53                   	push   ebx
c00021bf:	89 c3                	mov    ebx,eax
c00021c1:	e8 2c fa ff ff       	call   c0001bf2 <mem_cmp>
c00021c6:	85 c0                	test   eax,eax
c00021c8:	75 55                	jne    c000221f <test_gpt_header+0x70>
c00021ca:	89 c7                	mov    edi,eax
c00021cc:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00021d1:	83 ce ff             	or     esi,0xffffffff
c00021d4:	31 d2                	xor    edx,edx
c00021d6:	83 fd 03             	cmp    ebp,0x3
c00021d9:	76 05                	jbe    c00021e0 <test_gpt_header+0x31>
c00021db:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00021e0:	89 f0                	mov    eax,esi
c00021e2:	45                   	inc    ebp
c00021e3:	e8 9a ff ff ff       	call   c0002182 <crc32>
c00021e8:	83 fd 4c             	cmp    ebp,0x4c
c00021eb:	89 c6                	mov    esi,eax
c00021ed:	75 e5                	jne    c00021d4 <test_gpt_header+0x25>
c00021ef:	8d 43 10             	lea    eax,[ebx+0x10]
c00021f2:	f7 d6                	not    esi
c00021f4:	e8 67 f9 ff ff       	call   c0001b60 <ld_dword>
c00021f9:	39 c6                	cmp    esi,eax
c00021fb:	75 22                	jne    c000221f <test_gpt_header+0x70>
c00021fd:	8d 43 54             	lea    eax,[ebx+0x54]
c0002200:	e8 5b f9 ff ff       	call   c0001b60 <ld_dword>
c0002205:	83 c0 80             	add    eax,0xffffff80
c0002208:	75 15                	jne    c000221f <test_gpt_header+0x70>
c000220a:	8d 43 50             	lea    eax,[ebx+0x50]
c000220d:	e8 4e f9 ff ff       	call   c0001b60 <ld_dword>
c0002212:	3d 80 00 00 00       	cmp    eax,0x80
c0002217:	0f 96 c0             	setbe  al
c000221a:	0f b6 c0             	movzx  eax,al
c000221d:	89 c7                	mov    edi,eax
c000221f:	5b                   	pop    ebx
c0002220:	89 f8                	mov    eax,edi
c0002222:	5e                   	pop    esi
c0002223:	5f                   	pop    edi
c0002224:	5d                   	pop    ebp
c0002225:	c3                   	ret    

c0002226 <make_rand>:
c0002226:	56                   	push   esi
c0002227:	85 c0                	test   eax,eax
c0002229:	53                   	push   ebx
c000222a:	75 05                	jne    c0002231 <make_rand+0xb>
c000222c:	b8 01 00 00 00       	mov    eax,0x1
c0002231:	01 d1                	add    ecx,edx
c0002233:	bb 08 00 00 00       	mov    ebx,0x8
c0002238:	89 c6                	mov    esi,eax
c000223a:	d1 e8                	shr    eax,1
c000223c:	83 e6 01             	and    esi,0x1
c000223f:	85 f6                	test   esi,esi
c0002241:	74 05                	je     c0002248 <make_rand+0x22>
c0002243:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002248:	4b                   	dec    ebx
c0002249:	75 ed                	jne    c0002238 <make_rand+0x12>
c000224b:	42                   	inc    edx
c000224c:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000224f:	39 ca                	cmp    edx,ecx
c0002251:	75 e0                	jne    c0002233 <make_rand+0xd>
c0002253:	5b                   	pop    ebx
c0002254:	5e                   	pop    esi
c0002255:	c3                   	ret    

c0002256 <validate>:
c0002256:	56                   	push   esi
c0002257:	53                   	push   ebx
c0002258:	89 d6                	mov    esi,edx
c000225a:	51                   	push   ecx
c000225b:	85 c0                	test   eax,eax
c000225d:	75 09                	jne    c0002268 <validate+0x12>
c000225f:	b8 09 00 00 00       	mov    eax,0x9
c0002264:	31 c9                	xor    ecx,ecx
c0002266:	eb 2f                	jmp    c0002297 <validate+0x41>
c0002268:	89 c3                	mov    ebx,eax
c000226a:	8b 00                	mov    eax,DWORD PTR [eax]
c000226c:	85 c0                	test   eax,eax
c000226e:	74 ef                	je     c000225f <validate+0x9>
c0002270:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002273:	74 ea                	je     c000225f <validate+0x9>
c0002275:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002279:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000227d:	75 e0                	jne    c000225f <validate+0x9>
c000227f:	83 ec 0c             	sub    esp,0xc
c0002282:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002286:	50                   	push   eax
c0002287:	e8 76 f8 ff ff       	call   c0001b02 <disk_status>
c000228c:	83 c4 10             	add    esp,0x10
c000228f:	a8 01                	test   al,0x1
c0002291:	75 cc                	jne    c000225f <validate+0x9>
c0002293:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002295:	31 c0                	xor    eax,eax
c0002297:	89 0e                	mov    DWORD PTR [esi],ecx
c0002299:	5a                   	pop    edx
c000229a:	5b                   	pop    ebx
c000229b:	5e                   	pop    esi
c000229c:	c3                   	ret    

c000229d <sync_window>:
c000229d:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022a1:	0f 84 85 00 00 00    	je     c000232c <sync_window+0x8f>
c00022a7:	55                   	push   ebp
c00022a8:	8d 68 54             	lea    ebp,[eax+0x54]
c00022ab:	57                   	push   edi
c00022ac:	56                   	push   esi
c00022ad:	53                   	push   ebx
c00022ae:	89 c3                	mov    ebx,eax
c00022b0:	83 ec 28             	sub    esp,0x28
c00022b3:	6a 01                	push   0x1
c00022b5:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00022b8:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00022bb:	55                   	push   ebp
c00022bc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c0:	50                   	push   eax
c00022c1:	e8 58 f8 ff ff       	call   c0001b1e <disk_write>
c00022c6:	83 c4 20             	add    esp,0x20
c00022c9:	ba 01 00 00 00       	mov    edx,0x1
c00022ce:	85 c0                	test   eax,eax
c00022d0:	75 50                	jne    c0002322 <sync_window+0x85>
c00022d2:	31 ff                	xor    edi,edi
c00022d4:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00022d7:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00022db:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00022df:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00022e2:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00022e5:	89 c6                	mov    esi,eax
c00022e7:	89 d7                	mov    edi,edx
c00022e9:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00022ec:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00022f0:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00022f3:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00022f7:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00022fb:	73 23                	jae    c0002320 <sync_window+0x83>
c00022fd:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002301:	75 1d                	jne    c0002320 <sync_window+0x83>
c0002303:	83 ec 0c             	sub    esp,0xc
c0002306:	6a 01                	push   0x1
c0002308:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000230c:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002310:	52                   	push   edx
c0002311:	50                   	push   eax
c0002312:	55                   	push   ebp
c0002313:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002317:	50                   	push   eax
c0002318:	e8 01 f8 ff ff       	call   c0001b1e <disk_write>
c000231d:	83 c4 20             	add    esp,0x20
c0002320:	31 d2                	xor    edx,edx
c0002322:	83 c4 1c             	add    esp,0x1c
c0002325:	89 d0                	mov    eax,edx
c0002327:	5b                   	pop    ebx
c0002328:	5e                   	pop    esi
c0002329:	5f                   	pop    edi
c000232a:	5d                   	pop    ebp
c000232b:	c3                   	ret    
c000232c:	31 d2                	xor    edx,edx
c000232e:	89 d0                	mov    eax,edx
c0002330:	c3                   	ret    

c0002331 <move_window>:
c0002331:	56                   	push   esi
c0002332:	53                   	push   ebx
c0002333:	89 c3                	mov    ebx,eax
c0002335:	83 ec 14             	sub    esp,0x14
c0002338:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000233b:	75 07                	jne    c0002344 <move_window+0x13>
c000233d:	31 f6                	xor    esi,esi
c000233f:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002342:	74 59                	je     c000239d <move_window+0x6c>
c0002344:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002348:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000234c:	89 d8                	mov    eax,ebx
c000234e:	e8 4a ff ff ff       	call   c000229d <sync_window>
c0002353:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002357:	89 c6                	mov    esi,eax
c0002359:	85 c0                	test   eax,eax
c000235b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000235f:	75 3c                	jne    c000239d <move_window+0x6c>
c0002361:	83 ec 0c             	sub    esp,0xc
c0002364:	8d 43 54             	lea    eax,[ebx+0x54]
c0002367:	6a 01                	push   0x1
c0002369:	51                   	push   ecx
c000236a:	52                   	push   edx
c000236b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000236f:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002373:	50                   	push   eax
c0002374:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002378:	50                   	push   eax
c0002379:	e8 8a f7 ff ff       	call   c0001b08 <disk_read>
c000237e:	83 c4 20             	add    esp,0x20
c0002381:	85 c0                	test   eax,eax
c0002383:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002387:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000238b:	74 0a                	je     c0002397 <move_window+0x66>
c000238d:	83 ca ff             	or     edx,0xffffffff
c0002390:	be 01 00 00 00       	mov    esi,0x1
c0002395:	89 d1                	mov    ecx,edx
c0002397:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000239a:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c000239d:	89 f0                	mov    eax,esi
c000239f:	83 c4 14             	add    esp,0x14
c00023a2:	5b                   	pop    ebx
c00023a3:	5e                   	pop    esi
c00023a4:	c3                   	ret    

c00023a5 <check_fs>:
c00023a5:	53                   	push   ebx
c00023a6:	89 c3                	mov    ebx,eax
c00023a8:	83 ec 08             	sub    esp,0x8
c00023ab:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023af:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00023b6:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00023bd:	e8 6f ff ff ff       	call   c0002331 <move_window>
c00023c2:	ba 04 00 00 00       	mov    edx,0x4
c00023c7:	85 c0                	test   eax,eax
c00023c9:	0f 85 89 00 00 00    	jne    c0002458 <check_fs+0xb3>
c00023cf:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00023d5:	e8 79 f7 ff ff       	call   c0001b53 <ld_word>
c00023da:	ba 03 00 00 00       	mov    edx,0x3
c00023df:	66 3d 55 aa          	cmp    ax,0xaa55
c00023e3:	75 73                	jne    c0002458 <check_fs+0xb3>
c00023e5:	ba 20 36 02 c0       	mov    edx,0xc0023620
c00023ea:	8d 43 54             	lea    eax,[ebx+0x54]
c00023ed:	b9 0b 00 00 00       	mov    ecx,0xb
c00023f2:	e8 fb f7 ff ff       	call   c0001bf2 <mem_cmp>
c00023f7:	ba 01 00 00 00       	mov    edx,0x1
c00023fc:	85 c0                	test   eax,eax
c00023fe:	74 58                	je     c0002458 <check_fs+0xb3>
c0002400:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002403:	8d 50 18             	lea    edx,[eax+0x18]
c0002406:	80 fa 01             	cmp    dl,0x1
c0002409:	76 09                	jbe    c0002414 <check_fs+0x6f>
c000240b:	ba 02 00 00 00       	mov    edx,0x2
c0002410:	3c eb                	cmp    al,0xeb
c0002412:	75 44                	jne    c0002458 <check_fs+0xb3>
c0002414:	ba f5 62 02 c0       	mov    edx,0xc00262f5
c0002419:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000241f:	b9 03 00 00 00       	mov    ecx,0x3
c0002424:	e8 c9 f7 ff ff       	call   c0001bf2 <mem_cmp>
c0002429:	31 d2                	xor    edx,edx
c000242b:	85 c0                	test   eax,eax
c000242d:	74 29                	je     c0002458 <check_fs+0xb3>
c000242f:	ba 2c 36 02 c0       	mov    edx,0xc002362c
c0002434:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000243a:	b9 05 00 00 00       	mov    ecx,0x5
c000243f:	e8 ae f7 ff ff       	call   c0001bf2 <mem_cmp>
c0002444:	31 d2                	xor    edx,edx
c0002446:	85 c0                	test   eax,eax
c0002448:	74 0e                	je     c0002458 <check_fs+0xb3>
c000244a:	31 d2                	xor    edx,edx
c000244c:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002453:	0f 95 c2             	setne  dl
c0002456:	01 d2                	add    edx,edx
c0002458:	89 d0                	mov    eax,edx
c000245a:	83 c4 08             	add    esp,0x8
c000245d:	5b                   	pop    ebx
c000245e:	c3                   	ret    

c000245f <find_volume>:
c000245f:	55                   	push   ebp
c0002460:	31 c9                	xor    ecx,ecx
c0002462:	57                   	push   edi
c0002463:	56                   	push   esi
c0002464:	89 d6                	mov    esi,edx
c0002466:	53                   	push   ebx
c0002467:	31 d2                	xor    edx,edx
c0002469:	83 ec 3c             	sub    esp,0x3c
c000246c:	89 c3                	mov    ebx,eax
c000246e:	e8 32 ff ff ff       	call   c00023a5 <check_fs>
c0002473:	83 f8 02             	cmp    eax,0x2
c0002476:	74 0e                	je     c0002486 <find_volume+0x27>
c0002478:	0f 87 5d 01 00 00    	ja     c00025db <find_volume+0x17c>
c000247e:	85 f6                	test   esi,esi
c0002480:	0f 84 55 01 00 00    	je     c00025db <find_volume+0x17c>
c0002486:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000248d:	0f 85 dd 00 00 00    	jne    c0002570 <find_volume+0x111>
c0002493:	31 c9                	xor    ecx,ecx
c0002495:	ba 01 00 00 00       	mov    edx,0x1
c000249a:	89 d8                	mov    eax,ebx
c000249c:	e8 90 fe ff ff       	call   c0002331 <move_window>
c00024a1:	85 c0                	test   eax,eax
c00024a3:	74 0a                	je     c00024af <find_volume+0x50>
c00024a5:	b8 04 00 00 00       	mov    eax,0x4
c00024aa:	e9 2c 01 00 00       	jmp    c00025db <find_volume+0x17c>
c00024af:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00024b2:	89 e8                	mov    eax,ebp
c00024b4:	e8 f6 fc ff ff       	call   c00021af <test_gpt_header>
c00024b9:	85 c0                	test   eax,eax
c00024bb:	75 0a                	jne    c00024c7 <find_volume+0x68>
c00024bd:	b8 03 00 00 00       	mov    eax,0x3
c00024c2:	e9 14 01 00 00       	jmp    c00025db <find_volume+0x17c>
c00024c7:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00024cd:	e8 8e f6 ff ff       	call   c0001b60 <ld_dword>
c00024d2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00024d6:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00024dc:	e8 97 f6 ff ff       	call   c0001b78 <ld_qword>
c00024e1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00024e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00024ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00024f9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00024fd:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002501:	74 ba                	je     c00024bd <find_volume+0x5e>
c0002503:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002507:	31 c9                	xor    ecx,ecx
c0002509:	c1 e7 07             	shl    edi,0x7
c000250c:	89 d8                	mov    eax,ebx
c000250e:	89 fa                	mov    edx,edi
c0002510:	c1 ea 09             	shr    edx,0x9
c0002513:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002517:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c000251b:	e8 11 fe ff ff       	call   c0002331 <move_window>
c0002520:	85 c0                	test   eax,eax
c0002522:	75 81                	jne    c00024a5 <find_volume+0x46>
c0002524:	81 e7 80 01 00 00    	and    edi,0x180
c000252a:	b9 10 00 00 00       	mov    ecx,0x10
c000252f:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002533:	ba 10 36 02 c0       	mov    edx,0xc0023610
c0002538:	e8 b5 f6 ff ff       	call   c0001bf2 <mem_cmp>
c000253d:	85 c0                	test   eax,eax
c000253f:	75 29                	jne    c000256a <find_volume+0x10b>
c0002541:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002545:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002549:	e8 2a f6 ff ff       	call   c0001b78 <ld_qword>
c000254e:	89 d1                	mov    ecx,edx
c0002550:	89 c2                	mov    edx,eax
c0002552:	89 d8                	mov    eax,ebx
c0002554:	e8 4c fe ff ff       	call   c00023a5 <check_fs>
c0002559:	85 f6                	test   esi,esi
c000255b:	75 07                	jne    c0002564 <find_volume+0x105>
c000255d:	83 f8 01             	cmp    eax,0x1
c0002560:	77 08                	ja     c000256a <find_volume+0x10b>
c0002562:	eb 77                	jmp    c00025db <find_volume+0x17c>
c0002564:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002568:	74 71                	je     c00025db <find_volume+0x17c>
c000256a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000256e:	eb 89                	jmp    c00024f9 <find_volume+0x9a>
c0002570:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002574:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000257a:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002580:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002584:	89 cd                	mov    ebp,ecx
c0002586:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000258a:	89 f8                	mov    eax,edi
c000258c:	83 c7 10             	add    edi,0x10
c000258f:	e8 cc f5 ff ff       	call   c0001b60 <ld_dword>
c0002594:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002598:	89 01                	mov    DWORD PTR [ecx],eax
c000259a:	83 c1 04             	add    ecx,0x4
c000259d:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00025a1:	75 e3                	jne    c0002586 <find_volume+0x127>
c00025a3:	31 ff                	xor    edi,edi
c00025a5:	85 f6                	test   esi,esi
c00025a7:	74 03                	je     c00025ac <find_volume+0x14d>
c00025a9:	8d 7e ff             	lea    edi,[esi-0x1]
c00025ac:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00025b0:	85 d2                	test   edx,edx
c00025b2:	74 14                	je     c00025c8 <find_volume+0x169>
c00025b4:	31 c9                	xor    ecx,ecx
c00025b6:	89 d8                	mov    eax,ebx
c00025b8:	e8 e8 fd ff ff       	call   c00023a5 <check_fs>
c00025bd:	83 f8 01             	cmp    eax,0x1
c00025c0:	76 19                	jbe    c00025db <find_volume+0x17c>
c00025c2:	85 f6                	test   esi,esi
c00025c4:	74 0f                	je     c00025d5 <find_volume+0x176>
c00025c6:	eb 13                	jmp    c00025db <find_volume+0x17c>
c00025c8:	85 f6                	test   esi,esi
c00025ca:	0f 85 ed fe ff ff    	jne    c00024bd <find_volume+0x5e>
c00025d0:	b8 03 00 00 00       	mov    eax,0x3
c00025d5:	47                   	inc    edi
c00025d6:	83 ff 03             	cmp    edi,0x3
c00025d9:	76 d1                	jbe    c00025ac <find_volume+0x14d>
c00025db:	83 c4 3c             	add    esp,0x3c
c00025de:	5b                   	pop    ebx
c00025df:	5e                   	pop    esi
c00025e0:	5f                   	pop    edi
c00025e1:	5d                   	pop    ebp
c00025e2:	c3                   	ret    

c00025e3 <mount_volume>:
c00025e3:	55                   	push   ebp
c00025e4:	57                   	push   edi
c00025e5:	89 cf                	mov    edi,ecx
c00025e7:	56                   	push   esi
c00025e8:	53                   	push   ebx
c00025e9:	bb 0b 00 00 00       	mov    ebx,0xb
c00025ee:	83 ec 3c             	sub    esp,0x3c
c00025f1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00025f7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00025fb:	e8 35 fb ff ff       	call   c0002135 <get_ldnumber>
c0002600:	85 c0                	test   eax,eax
c0002602:	0f 88 3a 05 00 00    	js     c0002b42 <mount_volume+0x55f>
c0002608:	8b 2c 85 a0 7d 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd8260]
c000260f:	89 c6                	mov    esi,eax
c0002611:	bb 0c 00 00 00       	mov    ebx,0xc
c0002616:	85 ed                	test   ebp,ebp
c0002618:	0f 84 24 05 00 00    	je     c0002b42 <mount_volume+0x55f>
c000261e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002622:	83 e7 fe             	and    edi,0xfffffffe
c0002625:	89 2a                	mov    DWORD PTR [edx],ebp
c0002627:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c000262b:	74 32                	je     c000265f <mount_volume+0x7c>
c000262d:	83 ec 0c             	sub    esp,0xc
c0002630:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002634:	50                   	push   eax
c0002635:	e8 c8 f4 ff ff       	call   c0001b02 <disk_status>
c000263a:	83 c4 10             	add    esp,0x10
c000263d:	a8 01                	test   al,0x1
c000263f:	75 1e                	jne    c000265f <mount_volume+0x7c>
c0002641:	31 db                	xor    ebx,ebx
c0002643:	89 f9                	mov    ecx,edi
c0002645:	84 c9                	test   cl,cl
c0002647:	0f 84 f5 04 00 00    	je     c0002b42 <mount_volume+0x55f>
c000264d:	a8 04                	test   al,0x4
c000264f:	0f 84 ed 04 00 00    	je     c0002b42 <mount_volume+0x55f>
c0002655:	bb 0a 00 00 00       	mov    ebx,0xa
c000265a:	e9 e3 04 00 00       	jmp    c0002b42 <mount_volume+0x55f>
c000265f:	83 ec 0c             	sub    esp,0xc
c0002662:	89 f0                	mov    eax,esi
c0002664:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002668:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000266b:	0f b6 f0             	movzx  esi,al
c000266e:	bb 03 00 00 00       	mov    ebx,0x3
c0002673:	56                   	push   esi
c0002674:	e8 8c f4 ff ff       	call   c0001b05 <disk_initialize>
c0002679:	83 c4 10             	add    esp,0x10
c000267c:	a8 01                	test   al,0x1
c000267e:	0f 85 be 04 00 00    	jne    c0002b42 <mount_volume+0x55f>
c0002684:	89 f9                	mov    ecx,edi
c0002686:	84 c9                	test   cl,cl
c0002688:	74 04                	je     c000268e <mount_volume+0xab>
c000268a:	a8 04                	test   al,0x4
c000268c:	75 c7                	jne    c0002655 <mount_volume+0x72>
c000268e:	31 d2                	xor    edx,edx
c0002690:	89 e8                	mov    eax,ebp
c0002692:	e8 c8 fd ff ff       	call   c000245f <find_volume>
c0002697:	83 f8 04             	cmp    eax,0x4
c000269a:	75 0a                	jne    c00026a6 <mount_volume+0xc3>
c000269c:	bb 01 00 00 00       	mov    ebx,0x1
c00026a1:	e9 9c 04 00 00       	jmp    c0002b42 <mount_volume+0x55f>
c00026a6:	83 f8 01             	cmp    eax,0x1
c00026a9:	76 0a                	jbe    c00026b5 <mount_volume+0xd2>
c00026ab:	bb 0d 00 00 00       	mov    ebx,0xd
c00026b0:	e9 8d 04 00 00       	jmp    c0002b42 <mount_volume+0x55f>
c00026b5:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00026b8:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00026bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00026bf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00026c3:	75 17                	jne    c00026dc <mount_volume+0xf9>
c00026c5:	b8 0b 00 00 00       	mov    eax,0xb
c00026ca:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00026cf:	75 da                	jne    c00026ab <mount_volume+0xc8>
c00026d1:	40                   	inc    eax
c00026d2:	83 f8 40             	cmp    eax,0x40
c00026d5:	75 f3                	jne    c00026ca <mount_volume+0xe7>
c00026d7:	e9 5a 02 00 00       	jmp    c0002936 <mount_volume+0x353>
c00026dc:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00026df:	e8 6f f4 ff ff       	call   c0001b53 <ld_word>
c00026e4:	66 3d 00 02          	cmp    ax,0x200
c00026e8:	75 c1                	jne    c00026ab <mount_volume+0xc8>
c00026ea:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00026ed:	e8 61 f4 ff ff       	call   c0001b53 <ld_word>
c00026f2:	0f b7 c0             	movzx  eax,ax
c00026f5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00026f9:	85 c0                	test   eax,eax
c00026fb:	75 0c                	jne    c0002709 <mount_volume+0x126>
c00026fd:	8d 45 78             	lea    eax,[ebp+0x78]
c0002700:	e8 5b f4 ff ff       	call   c0001b60 <ld_dword>
c0002705:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002709:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000270d:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002710:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002713:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002717:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000271a:	48                   	dec    eax
c000271b:	3c 01                	cmp    al,0x1
c000271d:	77 8c                	ja     c00026ab <mount_volume+0xc8>
c000271f:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002723:	89 c3                	mov    ebx,eax
c0002725:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002729:	66 85 c0             	test   ax,ax
c000272c:	0f 84 79 ff ff ff    	je     c00026ab <mount_volume+0xc8>
c0002732:	8d 40 ff             	lea    eax,[eax-0x1]
c0002735:	85 d8                	test   eax,ebx
c0002737:	0f 85 6e ff ff ff    	jne    c00026ab <mount_volume+0xc8>
c000273d:	8d 45 65             	lea    eax,[ebp+0x65]
c0002740:	e8 0e f4 ff ff       	call   c0001b53 <ld_word>
c0002745:	89 c7                	mov    edi,eax
c0002747:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000274b:	a8 0f                	test   al,0xf
c000274d:	0f 85 58 ff ff ff    	jne    c00026ab <mount_volume+0xc8>
c0002753:	8d 45 67             	lea    eax,[ebp+0x67]
c0002756:	e8 f8 f3 ff ff       	call   c0001b53 <ld_word>
c000275b:	0f b7 f0             	movzx  esi,ax
c000275e:	85 f6                	test   esi,esi
c0002760:	75 0a                	jne    c000276c <mount_volume+0x189>
c0002762:	8d 45 74             	lea    eax,[ebp+0x74]
c0002765:	e8 f6 f3 ff ff       	call   c0001b60 <ld_dword>
c000276a:	89 c6                	mov    esi,eax
c000276c:	8d 45 62             	lea    eax,[ebp+0x62]
c000276f:	e8 df f3 ff ff       	call   c0001b53 <ld_word>
c0002774:	66 85 c0             	test   ax,ax
c0002777:	0f 84 2e ff ff ff    	je     c00026ab <mount_volume+0xc8>
c000277d:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002782:	0f b7 c8             	movzx  ecx,ax
c0002785:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000278a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000278e:	89 fa                	mov    edx,edi
c0002790:	66 c1 ea 04          	shr    dx,0x4
c0002794:	0f b7 d2             	movzx  edx,dx
c0002797:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000279b:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000279e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00027a2:	39 c6                	cmp    esi,eax
c00027a4:	0f 82 01 ff ff ff    	jb     c00026ab <mount_volume+0xc8>
c00027aa:	29 c6                	sub    esi,eax
c00027ac:	31 d2                	xor    edx,edx
c00027ae:	89 f0                	mov    eax,esi
c00027b0:	f7 f3                	div    ebx
c00027b2:	39 de                	cmp    esi,ebx
c00027b4:	0f 82 f1 fe ff ff    	jb     c00026ab <mount_volume+0xc8>
c00027ba:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00027bf:	0f 87 e6 fe ff ff    	ja     c00026ab <mount_volume+0xc8>
c00027c5:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00027ca:	0f 86 63 03 00 00    	jbe    c0002b33 <mount_volume+0x550>
c00027d0:	bb 03 00 00 00       	mov    ebx,0x3
c00027d5:	8d 70 02             	lea    esi,[eax+0x2]
c00027d8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00027e0:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00027e3:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00027e6:	31 d2                	xor    edx,edx
c00027e8:	89 c8                	mov    eax,ecx
c00027ea:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00027ed:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00027f1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00027f5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00027f9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00027fd:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002800:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002803:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002807:	31 d2                	xor    edx,edx
c0002809:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000280d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002811:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002814:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002817:	83 fb 03             	cmp    ebx,0x3
c000281a:	75 2b                	jne    c0002847 <mount_volume+0x264>
c000281c:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000281f:	e8 2f f3 ff ff       	call   c0001b53 <ld_word>
c0002824:	66 09 c7             	or     di,ax
c0002827:	0f 85 7e fe ff ff    	jne    c00026ab <mount_volume+0xc8>
c000282d:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002833:	c1 e6 02             	shl    esi,0x2
c0002836:	e8 25 f3 ff ff       	call   c0001b60 <ld_dword>
c000283b:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002842:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002845:	eb 30                	jmp    c0002877 <mount_volume+0x294>
c0002847:	66 85 ff             	test   di,di
c000284a:	0f 84 5b fe ff ff    	je     c00026ab <mount_volume+0xc8>
c0002850:	31 d2                	xor    edx,edx
c0002852:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002856:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000285a:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000285e:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002861:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002864:	83 fb 02             	cmp    ebx,0x2
c0002867:	75 04                	jne    c000286d <mount_volume+0x28a>
c0002869:	01 f6                	add    esi,esi
c000286b:	eb 0a                	jmp    c0002877 <mount_volume+0x294>
c000286d:	8d 04 76             	lea    eax,[esi+esi*2]
c0002870:	83 e6 01             	and    esi,0x1
c0002873:	d1 e8                	shr    eax,1
c0002875:	01 c6                	add    esi,eax
c0002877:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000287d:	c1 ee 09             	shr    esi,0x9
c0002880:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002884:	0f 87 21 fe ff ff    	ja     c00026ab <mount_volume+0xc8>
c000288a:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002891:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002898:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c000289c:	83 fb 03             	cmp    ebx,0x3
c000289f:	75 7a                	jne    c000291b <mount_volume+0x338>
c00028a1:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00028a7:	e8 a7 f2 ff ff       	call   c0001b53 <ld_word>
c00028ac:	66 48                	dec    ax
c00028ae:	75 6b                	jne    c000291b <mount_volume+0x338>
c00028b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00028b4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00028b8:	83 c2 01             	add    edx,0x1
c00028bb:	89 e8                	mov    eax,ebp
c00028bd:	83 d1 00             	adc    ecx,0x0
c00028c0:	e8 6c fa ff ff       	call   c0002331 <move_window>
c00028c5:	85 c0                	test   eax,eax
c00028c7:	75 52                	jne    c000291b <mount_volume+0x338>
c00028c9:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00028cd:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00028d3:	e8 7b f2 ff ff       	call   c0001b53 <ld_word>
c00028d8:	66 3d 55 aa          	cmp    ax,0xaa55
c00028dc:	75 3d                	jne    c000291b <mount_volume+0x338>
c00028de:	8d 45 54             	lea    eax,[ebp+0x54]
c00028e1:	e8 7a f2 ff ff       	call   c0001b60 <ld_dword>
c00028e6:	3d 52 52 61 41       	cmp    eax,0x41615252
c00028eb:	75 2e                	jne    c000291b <mount_volume+0x338>
c00028ed:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00028f3:	e8 68 f2 ff ff       	call   c0001b60 <ld_dword>
c00028f8:	3d 72 72 41 61       	cmp    eax,0x61417272
c00028fd:	75 1c                	jne    c000291b <mount_volume+0x338>
c00028ff:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002905:	e8 56 f2 ff ff       	call   c0001b60 <ld_dword>
c000290a:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c000290d:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002913:	e8 48 f2 ff ff       	call   c0001b60 <ld_dword>
c0002918:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c000291b:	66 a1 80 7d 02 c0    	mov    ax,ds:0xc0027d80
c0002921:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002924:	40                   	inc    eax
c0002925:	31 db                	xor    ebx,ebx
c0002927:	66 a3 80 7d 02 c0    	mov    ds:0xc0027d80,ax
c000292d:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002931:	e9 0c 02 00 00       	jmp    c0002b42 <mount_volume+0x55f>
c0002936:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c000293c:	e8 12 f2 ff ff       	call   c0001b53 <ld_word>
c0002941:	66 3d 00 01          	cmp    ax,0x100
c0002945:	0f 85 60 fd ff ff    	jne    c00026ab <mount_volume+0xc8>
c000294b:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002952:	0f 85 53 fd ff ff    	jne    c00026ab <mount_volume+0xc8>
c0002958:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c000295e:	e8 15 f2 ff ff       	call   c0001b78 <ld_qword>
c0002963:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002967:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000296b:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002971:	e8 ea f1 ff ff       	call   c0001b60 <ld_dword>
c0002976:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002979:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c000297f:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002982:	fe c8                	dec    al
c0002984:	0f 85 21 fd ff ff    	jne    c00026ab <mount_volume+0xc8>
c000298a:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002991:	bb 01 00 00 00       	mov    ebx,0x1
c0002996:	d3 e3                	shl    ebx,cl
c0002998:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c000299c:	66 85 db             	test   bx,bx
c000299f:	0f 84 06 fd ff ff    	je     c00026ab <mount_volume+0xc8>
c00029a5:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00029ab:	e8 b0 f1 ff ff       	call   c0001b60 <ld_dword>
c00029b0:	89 c6                	mov    esi,eax
c00029b2:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00029b7:	0f 87 ee fc ff ff    	ja     c00026ab <mount_volume+0xc8>
c00029bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029c1:	8d 40 02             	lea    eax,[eax+0x2]
c00029c4:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00029c7:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00029ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00029ce:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00029d1:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00029d7:	e8 84 f1 ff ff       	call   c0001b60 <ld_dword>
c00029dc:	31 d2                	xor    edx,edx
c00029de:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00029e2:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00029e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00029ee:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00029f1:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00029f4:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c00029fa:	e8 61 f1 ff ff       	call   c0001b60 <ld_dword>
c00029ff:	31 d2                	xor    edx,edx
c0002a01:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002a05:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a09:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002a0d:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002a10:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002a13:	0f b7 c3             	movzx  eax,bx
c0002a16:	31 d2                	xor    edx,edx
c0002a18:	0f af f0             	imul   esi,eax
c0002a1b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002a1f:	89 f0                	mov    eax,esi
c0002a21:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002a25:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002a29:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a2d:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002a31:	39 c1                	cmp    ecx,eax
c0002a33:	89 df                	mov    edi,ebx
c0002a35:	19 d7                	sbb    edi,edx
c0002a37:	0f 82 6e fc ff ff    	jb     c00026ab <mount_volume+0xc8>
c0002a3d:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002a43:	31 db                	xor    ebx,ebx
c0002a45:	e8 16 f1 ff ff       	call   c0001b60 <ld_dword>
c0002a4a:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002a51:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002a54:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002a5c:	85 db                	test   ebx,ebx
c0002a5e:	75 39                	jne    c0002a99 <mount_volume+0x4b6>
c0002a60:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002a64:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002a68:	0f 86 3d fc ff ff    	jbe    c00026ab <mount_volume+0xc8>
c0002a6e:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002a71:	31 ff                	xor    edi,edi
c0002a73:	89 e8                	mov    eax,ebp
c0002a75:	e8 72 f3 ff ff       	call   c0001dec <clst2sect>
c0002a7a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002a7e:	01 c6                	add    esi,eax
c0002a80:	89 e8                	mov    eax,ebp
c0002a82:	11 d7                	adc    edi,edx
c0002a84:	89 f2                	mov    edx,esi
c0002a86:	89 f9                	mov    ecx,edi
c0002a88:	e8 a4 f8 ff ff       	call   c0002331 <move_window>
c0002a8d:	85 c0                	test   eax,eax
c0002a8f:	0f 85 07 fc ff ff    	jne    c000269c <mount_volume+0xb9>
c0002a95:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002a99:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002a9e:	74 0b                	je     c0002aab <mount_volume+0x4c8>
c0002aa0:	83 c3 20             	add    ebx,0x20
c0002aa3:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002aa9:	eb b1                	jmp    c0002a5c <mount_volume+0x479>
c0002aab:	8d 75 54             	lea    esi,[ebp+0x54]
c0002aae:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002ab2:	e8 a9 f0 ff ff       	call   c0001b60 <ld_dword>
c0002ab7:	89 c3                	mov    ebx,eax
c0002ab9:	83 f8 01             	cmp    eax,0x1
c0002abc:	0f 86 e9 fb ff ff    	jbe    c00026ab <mount_volume+0xc8>
c0002ac2:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002ac5:	0f 86 e0 fb ff ff    	jbe    c00026ab <mount_volume+0xc8>
c0002acb:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ace:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ad2:	0f af c2             	imul   eax,edx
c0002ad5:	31 d2                	xor    edx,edx
c0002ad7:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002ada:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002add:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002ae0:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002ae3:	31 c9                	xor    ecx,ecx
c0002ae5:	89 da                	mov    edx,ebx
c0002ae7:	89 e8                	mov    eax,ebp
c0002ae9:	c1 ea 07             	shr    edx,0x7
c0002aec:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002aef:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002af2:	e8 3a f8 ff ff       	call   c0002331 <move_window>
c0002af7:	85 c0                	test   eax,eax
c0002af9:	0f 85 9d fb ff ff    	jne    c000269c <mount_volume+0xb9>
c0002aff:	89 d8                	mov    eax,ebx
c0002b01:	83 e0 7f             	and    eax,0x7f
c0002b04:	8d 04 86             	lea    eax,[esi+eax*4]
c0002b07:	e8 54 f0 ff ff       	call   c0001b60 <ld_dword>
c0002b0c:	83 f8 ff             	cmp    eax,0xffffffff
c0002b0f:	74 0a                	je     c0002b1b <mount_volume+0x538>
c0002b11:	43                   	inc    ebx
c0002b12:	39 d8                	cmp    eax,ebx
c0002b14:	74 cd                	je     c0002ae3 <mount_volume+0x500>
c0002b16:	e9 90 fb ff ff       	jmp    c00026ab <mount_volume+0xc8>
c0002b1b:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002b22:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002b29:	bb 04 00 00 00       	mov    ebx,0x4
c0002b2e:	e9 e8 fd ff ff       	jmp    c000291b <mount_volume+0x338>
c0002b33:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002b38:	19 db                	sbb    ebx,ebx
c0002b3a:	83 c3 02             	add    ebx,0x2
c0002b3d:	e9 93 fc ff ff       	jmp    c00027d5 <mount_volume+0x1f2>
c0002b42:	83 c4 3c             	add    esp,0x3c
c0002b45:	89 d8                	mov    eax,ebx
c0002b47:	5b                   	pop    ebx
c0002b48:	5e                   	pop    esi
c0002b49:	5f                   	pop    edi
c0002b4a:	5d                   	pop    ebp
c0002b4b:	c3                   	ret    

c0002b4c <find_bitmap>:
c0002b4c:	55                   	push   ebp
c0002b4d:	57                   	push   edi
c0002b4e:	89 c7                	mov    edi,eax
c0002b50:	56                   	push   esi
c0002b51:	8d 72 fe             	lea    esi,[edx-0x2]
c0002b54:	53                   	push   ebx
c0002b55:	83 ec 1c             	sub    esp,0x1c
c0002b58:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002b5b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002b5f:	83 e8 02             	sub    eax,0x2
c0002b62:	39 f0                	cmp    eax,esi
c0002b64:	77 02                	ja     c0002b68 <find_bitmap+0x1c>
c0002b66:	31 f6                	xor    esi,esi
c0002b68:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002b6c:	89 f3                	mov    ebx,esi
c0002b6e:	31 ed                	xor    ebp,ebp
c0002b70:	31 c9                	xor    ecx,ecx
c0002b72:	89 da                	mov    edx,ebx
c0002b74:	89 f8                	mov    eax,edi
c0002b76:	c1 ea 0c             	shr    edx,0xc
c0002b79:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002b7c:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002b7f:	e8 ad f7 ff ff       	call   c0002331 <move_window>
c0002b84:	85 c0                	test   eax,eax
c0002b86:	75 68                	jne    c0002bf0 <find_bitmap+0xa4>
c0002b88:	89 da                	mov    edx,ebx
c0002b8a:	89 d9                	mov    ecx,ebx
c0002b8c:	c1 ea 03             	shr    edx,0x3
c0002b8f:	83 e1 07             	and    ecx,0x7
c0002b92:	b8 01 00 00 00       	mov    eax,0x1
c0002b97:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002b9d:	d3 e0                	shl    eax,cl
c0002b9f:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002ba2:	83 e9 02             	sub    ecx,0x2
c0002ba5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ba9:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002bad:	43                   	inc    ebx
c0002bae:	21 c1                	and    ecx,eax
c0002bb0:	d1 e0                	shl    eax,1
c0002bb2:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002bb6:	77 09                	ja     c0002bc1 <find_bitmap+0x75>
c0002bb8:	31 db                	xor    ebx,ebx
c0002bba:	ba 00 02 00 00       	mov    edx,0x200
c0002bbf:	31 c0                	xor    eax,eax
c0002bc1:	84 c9                	test   cl,cl
c0002bc3:	75 10                	jne    c0002bd5 <find_bitmap+0x89>
c0002bc5:	45                   	inc    ebp
c0002bc6:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002bca:	75 0f                	jne    c0002bdb <find_bitmap+0x8f>
c0002bcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bd0:	83 c0 02             	add    eax,0x2
c0002bd3:	eb 22                	jmp    c0002bf7 <find_bitmap+0xab>
c0002bd5:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002bd9:	31 ed                	xor    ebp,ebp
c0002bdb:	39 de                	cmp    esi,ebx
c0002bdd:	74 16                	je     c0002bf5 <find_bitmap+0xa9>
c0002bdf:	84 c0                	test   al,al
c0002be1:	75 c6                	jne    c0002ba9 <find_bitmap+0x5d>
c0002be3:	42                   	inc    edx
c0002be4:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002bea:	77 84                	ja     c0002b70 <find_bitmap+0x24>
c0002bec:	b0 01                	mov    al,0x1
c0002bee:	eb b9                	jmp    c0002ba9 <find_bitmap+0x5d>
c0002bf0:	83 c8 ff             	or     eax,0xffffffff
c0002bf3:	eb 02                	jmp    c0002bf7 <find_bitmap+0xab>
c0002bf5:	31 c0                	xor    eax,eax
c0002bf7:	83 c4 1c             	add    esp,0x1c
c0002bfa:	5b                   	pop    ebx
c0002bfb:	5e                   	pop    esi
c0002bfc:	5f                   	pop    edi
c0002bfd:	5d                   	pop    ebp
c0002bfe:	c3                   	ret    

c0002bff <change_bitmap>:
c0002bff:	55                   	push   ebp
c0002c00:	89 cd                	mov    ebp,ecx
c0002c02:	57                   	push   edi
c0002c03:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002c06:	56                   	push   esi
c0002c07:	89 c7                	mov    edi,eax
c0002c09:	53                   	push   ebx
c0002c0a:	89 c8                	mov    eax,ecx
c0002c0c:	83 ec 1c             	sub    esp,0x1c
c0002c0f:	31 d2                	xor    edx,edx
c0002c11:	89 ce                	mov    esi,ecx
c0002c13:	c1 e8 0c             	shr    eax,0xc
c0002c16:	bb 01 00 00 00       	mov    ebx,0x1
c0002c1b:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002c1e:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002c21:	c1 ee 03             	shr    esi,0x3
c0002c24:	83 e1 07             	and    ecx,0x7
c0002c27:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002c2d:	d3 e3                	shl    ebx,cl
c0002c2f:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002c33:	89 c1                	mov    ecx,eax
c0002c35:	89 d3                	mov    ebx,edx
c0002c37:	83 c1 01             	add    ecx,0x1
c0002c3a:	83 d3 00             	adc    ebx,0x0
c0002c3d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c41:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002c45:	89 d1                	mov    ecx,edx
c0002c47:	89 c2                	mov    edx,eax
c0002c49:	89 f8                	mov    eax,edi
c0002c4b:	e8 e1 f6 ff ff       	call   c0002331 <move_window>
c0002c50:	89 c1                	mov    ecx,eax
c0002c52:	85 c0                	test   eax,eax
c0002c54:	75 48                	jne    c0002c9e <change_bitmap+0x9f>
c0002c56:	31 d2                	xor    edx,edx
c0002c58:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002c5c:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002c60:	0f 95 c2             	setne  dl
c0002c63:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002c67:	74 3c                	je     c0002ca5 <change_bitmap+0xa6>
c0002c69:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002c6d:	4d                   	dec    ebp
c0002c6e:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002c72:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002c76:	74 32                	je     c0002caa <change_bitmap+0xab>
c0002c78:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002c7c:	75 d8                	jne    c0002c56 <change_bitmap+0x57>
c0002c7e:	8d 46 01             	lea    eax,[esi+0x1]
c0002c81:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002c86:	89 c3                	mov    ebx,eax
c0002c88:	31 f6                	xor    esi,esi
c0002c8a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c8e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c92:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002c98:	74 99                	je     c0002c33 <change_bitmap+0x34>
c0002c9a:	89 de                	mov    esi,ebx
c0002c9c:	eb b8                	jmp    c0002c56 <change_bitmap+0x57>
c0002c9e:	b9 01 00 00 00       	mov    ecx,0x1
c0002ca3:	eb 05                	jmp    c0002caa <change_bitmap+0xab>
c0002ca5:	b9 02 00 00 00       	mov    ecx,0x2
c0002caa:	83 c4 1c             	add    esp,0x1c
c0002cad:	89 c8                	mov    eax,ecx
c0002caf:	5b                   	pop    ebx
c0002cb0:	5e                   	pop    esi
c0002cb1:	5f                   	pop    edi
c0002cb2:	5d                   	pop    ebp
c0002cb3:	c3                   	ret    

c0002cb4 <put_fat>:
c0002cb4:	83 fa 01             	cmp    edx,0x1
c0002cb7:	0f 86 7b 01 00 00    	jbe    c0002e38 <put_fat+0x184>
c0002cbd:	55                   	push   ebp
c0002cbe:	57                   	push   edi
c0002cbf:	89 cf                	mov    edi,ecx
c0002cc1:	56                   	push   esi
c0002cc2:	b9 02 00 00 00       	mov    ecx,0x2
c0002cc7:	53                   	push   ebx
c0002cc8:	89 c6                	mov    esi,eax
c0002cca:	83 ec 1c             	sub    esp,0x1c
c0002ccd:	89 d3                	mov    ebx,edx
c0002ccf:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002cd2:	0f 86 68 01 00 00    	jbe    c0002e40 <put_fat+0x18c>
c0002cd8:	8a 00                	mov    al,BYTE PTR [eax]
c0002cda:	3c 02                	cmp    al,0x2
c0002cdc:	0f 84 c7 00 00 00    	je     c0002da9 <put_fat+0xf5>
c0002ce2:	77 09                	ja     c0002ced <put_fat+0x39>
c0002ce4:	fe c8                	dec    al
c0002ce6:	74 17                	je     c0002cff <put_fat+0x4b>
c0002ce8:	e9 53 01 00 00       	jmp    c0002e40 <put_fat+0x18c>
c0002ced:	b9 02 00 00 00       	mov    ecx,0x2
c0002cf2:	3c 04                	cmp    al,0x4
c0002cf4:	0f 86 e1 00 00 00    	jbe    c0002ddb <put_fat+0x127>
c0002cfa:	e9 41 01 00 00       	jmp    c0002e40 <put_fat+0x18c>
c0002cff:	89 d5                	mov    ebp,edx
c0002d01:	31 c9                	xor    ecx,ecx
c0002d03:	d1 ed                	shr    ebp,1
c0002d05:	89 f0                	mov    eax,esi
c0002d07:	01 d5                	add    ebp,edx
c0002d09:	89 ea                	mov    edx,ebp
c0002d0b:	c1 ea 09             	shr    edx,0x9
c0002d0e:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d11:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d14:	e8 18 f6 ff ff       	call   c0002331 <move_window>
c0002d19:	89 c1                	mov    ecx,eax
c0002d1b:	85 c0                	test   eax,eax
c0002d1d:	0f 85 1d 01 00 00    	jne    c0002e40 <put_fat+0x18c>
c0002d23:	8d 46 54             	lea    eax,[esi+0x54]
c0002d26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002d2a:	8d 45 01             	lea    eax,[ebp+0x1]
c0002d2d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002d37:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d3b:	89 f8                	mov    eax,edi
c0002d3d:	83 e3 01             	and    ebx,0x1
c0002d40:	74 0d                	je     c0002d4f <put_fat+0x9b>
c0002d42:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002d45:	89 fa                	mov    edx,edi
c0002d47:	83 e0 0f             	and    eax,0xf
c0002d4a:	c1 e2 04             	shl    edx,0x4
c0002d4d:	09 d0                	or     eax,edx
c0002d4f:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002d52:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d56:	31 c9                	xor    ecx,ecx
c0002d58:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d5c:	c1 ea 09             	shr    edx,0x9
c0002d5f:	89 f0                	mov    eax,esi
c0002d61:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d64:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d67:	e8 c5 f5 ff ff       	call   c0002331 <move_window>
c0002d6c:	89 c1                	mov    ecx,eax
c0002d6e:	85 c0                	test   eax,eax
c0002d70:	0f 85 ca 00 00 00    	jne    c0002e40 <put_fat+0x18c>
c0002d76:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002d7a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d80:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d84:	85 db                	test   ebx,ebx
c0002d86:	74 07                	je     c0002d8f <put_fat+0xdb>
c0002d88:	c1 ef 04             	shr    edi,0x4
c0002d8b:	89 fa                	mov    edx,edi
c0002d8d:	eb 0e                	jmp    c0002d9d <put_fat+0xe9>
c0002d8f:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002d92:	c1 ef 08             	shr    edi,0x8
c0002d95:	83 e2 f0             	and    edx,0xfffffff0
c0002d98:	83 e7 0f             	and    edi,0xf
c0002d9b:	09 fa                	or     edx,edi
c0002d9d:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002da0:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002da4:	e9 97 00 00 00       	jmp    c0002e40 <put_fat+0x18c>
c0002da9:	31 c9                	xor    ecx,ecx
c0002dab:	c1 ea 08             	shr    edx,0x8
c0002dae:	89 f0                	mov    eax,esi
c0002db0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002db3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002db6:	e8 76 f5 ff ff       	call   c0002331 <move_window>
c0002dbb:	89 c1                	mov    ecx,eax
c0002dbd:	85 c0                	test   eax,eax
c0002dbf:	75 7f                	jne    c0002e40 <put_fat+0x18c>
c0002dc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dc5:	01 db                	add    ebx,ebx
c0002dc7:	0f b7 d7             	movzx  edx,di
c0002dca:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002dd0:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002dd4:	e8 ec ed ff ff       	call   c0001bc5 <st_word>
c0002dd9:	eb 53                	jmp    c0002e2e <put_fat+0x17a>
c0002ddb:	31 c9                	xor    ecx,ecx
c0002ddd:	c1 ea 07             	shr    edx,0x7
c0002de0:	89 f0                	mov    eax,esi
c0002de2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002de5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002de8:	e8 44 f5 ff ff       	call   c0002331 <move_window>
c0002ded:	89 c1                	mov    ecx,eax
c0002def:	85 c0                	test   eax,eax
c0002df1:	75 4d                	jne    c0002e40 <put_fat+0x18c>
c0002df3:	c1 e3 02             	shl    ebx,0x2
c0002df6:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002dfc:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002dff:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002e03:	74 1c                	je     c0002e21 <put_fat+0x16d>
c0002e05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e09:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002e0f:	89 d8                	mov    eax,ebx
c0002e11:	e8 4a ed ff ff       	call   c0001b60 <ld_dword>
c0002e16:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e1a:	25 00 00 00 f0       	and    eax,0xf0000000
c0002e1f:	09 c7                	or     edi,eax
c0002e21:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002e25:	89 fa                	mov    edx,edi
c0002e27:	89 d8                	mov    eax,ebx
c0002e29:	e8 9b ed ff ff       	call   c0001bc9 <st_dword>
c0002e2e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e32:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e36:	eb 08                	jmp    c0002e40 <put_fat+0x18c>
c0002e38:	b9 02 00 00 00       	mov    ecx,0x2
c0002e3d:	89 c8                	mov    eax,ecx
c0002e3f:	c3                   	ret    
c0002e40:	83 c4 1c             	add    esp,0x1c
c0002e43:	89 c8                	mov    eax,ecx
c0002e45:	5b                   	pop    ebx
c0002e46:	5e                   	pop    esi
c0002e47:	5f                   	pop    edi
c0002e48:	5d                   	pop    ebp
c0002e49:	c3                   	ret    

c0002e4a <fill_last_frag>:
c0002e4a:	57                   	push   edi
c0002e4b:	89 cf                	mov    edi,ecx
c0002e4d:	56                   	push   esi
c0002e4e:	89 d6                	mov    esi,edx
c0002e50:	53                   	push   ebx
c0002e51:	89 c3                	mov    ebx,eax
c0002e53:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002e56:	85 c0                	test   eax,eax
c0002e58:	74 21                	je     c0002e7b <fill_last_frag+0x31>
c0002e5a:	89 f9                	mov    ecx,edi
c0002e5c:	83 f8 01             	cmp    eax,0x1
c0002e5f:	76 05                	jbe    c0002e66 <fill_last_frag+0x1c>
c0002e61:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002e64:	29 c1                	sub    ecx,eax
c0002e66:	8d 56 01             	lea    edx,[esi+0x1]
c0002e69:	29 c2                	sub    edx,eax
c0002e6b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002e6d:	e8 42 fe ff ff       	call   c0002cb4 <put_fat>
c0002e72:	85 c0                	test   eax,eax
c0002e74:	75 05                	jne    c0002e7b <fill_last_frag+0x31>
c0002e76:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002e79:	eb d8                	jmp    c0002e53 <fill_last_frag+0x9>
c0002e7b:	5b                   	pop    ebx
c0002e7c:	5e                   	pop    esi
c0002e7d:	5f                   	pop    edi
c0002e7e:	c3                   	ret    

c0002e7f <fill_first_frag>:
c0002e7f:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002e83:	75 2d                	jne    c0002eb2 <fill_first_frag+0x33>
c0002e85:	57                   	push   edi
c0002e86:	56                   	push   esi
c0002e87:	53                   	push   ebx
c0002e88:	89 c3                	mov    ebx,eax
c0002e8a:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002e8d:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002e90:	01 d7                	add    edi,edx
c0002e92:	39 fa                	cmp    edx,edi
c0002e94:	74 14                	je     c0002eaa <fill_first_frag+0x2b>
c0002e96:	8d 72 01             	lea    esi,[edx+0x1]
c0002e99:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002e9b:	89 f1                	mov    ecx,esi
c0002e9d:	e8 12 fe ff ff       	call   c0002cb4 <put_fat>
c0002ea2:	89 f2                	mov    edx,esi
c0002ea4:	85 c0                	test   eax,eax
c0002ea6:	74 ea                	je     c0002e92 <fill_first_frag+0x13>
c0002ea8:	eb 0b                	jmp    c0002eb5 <fill_first_frag+0x36>
c0002eaa:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002eae:	31 c0                	xor    eax,eax
c0002eb0:	eb 03                	jmp    c0002eb5 <fill_first_frag+0x36>
c0002eb2:	31 c0                	xor    eax,eax
c0002eb4:	c3                   	ret    
c0002eb5:	5b                   	pop    ebx
c0002eb6:	5e                   	pop    esi
c0002eb7:	5f                   	pop    edi
c0002eb8:	c3                   	ret    

c0002eb9 <get_fat>:
c0002eb9:	83 fa 01             	cmp    edx,0x1
c0002ebc:	0f 86 db 01 00 00    	jbe    c000309d <get_fat+0x1e4>
c0002ec2:	55                   	push   ebp
c0002ec3:	b9 01 00 00 00       	mov    ecx,0x1
c0002ec8:	57                   	push   edi
c0002ec9:	56                   	push   esi
c0002eca:	53                   	push   ebx
c0002ecb:	83 ec 1c             	sub    esp,0x1c
c0002ece:	8b 38                	mov    edi,DWORD PTR [eax]
c0002ed0:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002ed3:	0f 86 cc 01 00 00    	jbe    c00030a5 <get_fat+0x1ec>
c0002ed9:	89 c3                	mov    ebx,eax
c0002edb:	89 d6                	mov    esi,edx
c0002edd:	8a 07                	mov    al,BYTE PTR [edi]
c0002edf:	3c 02                	cmp    al,0x2
c0002ee1:	0f 84 99 00 00 00    	je     c0002f80 <get_fat+0xc7>
c0002ee7:	77 09                	ja     c0002ef2 <get_fat+0x39>
c0002ee9:	fe c8                	dec    al
c0002eeb:	74 1a                	je     c0002f07 <get_fat+0x4e>
c0002eed:	e9 b3 01 00 00       	jmp    c00030a5 <get_fat+0x1ec>
c0002ef2:	3c 03                	cmp    al,0x3
c0002ef4:	0f 84 b5 00 00 00    	je     c0002faf <get_fat+0xf6>
c0002efa:	3c 04                	cmp    al,0x4
c0002efc:	0f 84 e3 00 00 00    	je     c0002fe5 <get_fat+0x12c>
c0002f02:	e9 9e 01 00 00       	jmp    c00030a5 <get_fat+0x1ec>
c0002f07:	89 d3                	mov    ebx,edx
c0002f09:	31 c9                	xor    ecx,ecx
c0002f0b:	d1 eb                	shr    ebx,1
c0002f0d:	89 f8                	mov    eax,edi
c0002f0f:	01 d3                	add    ebx,edx
c0002f11:	89 da                	mov    edx,ebx
c0002f13:	c1 ea 09             	shr    edx,0x9
c0002f16:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f19:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f1c:	e8 10 f4 ff ff       	call   c0002331 <move_window>
c0002f21:	85 c0                	test   eax,eax
c0002f23:	74 08                	je     c0002f2d <get_fat+0x74>
c0002f25:	83 c9 ff             	or     ecx,0xffffffff
c0002f28:	e9 78 01 00 00       	jmp    c00030a5 <get_fat+0x1ec>
c0002f2d:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002f30:	31 c9                	xor    ecx,ecx
c0002f32:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002f38:	89 ea                	mov    edx,ebp
c0002f3a:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002f3e:	c1 ea 09             	shr    edx,0x9
c0002f41:	89 f8                	mov    eax,edi
c0002f43:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f46:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f49:	e8 e3 f3 ff ff       	call   c0002331 <move_window>
c0002f4e:	85 c0                	test   eax,eax
c0002f50:	75 d3                	jne    c0002f25 <get_fat+0x6c>
c0002f52:	0f b6 c3             	movzx  eax,bl
c0002f55:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002f5b:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002f60:	c1 e3 08             	shl    ebx,0x8
c0002f63:	09 c3                	or     ebx,eax
c0002f65:	89 d9                	mov    ecx,ebx
c0002f67:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002f6d:	83 e6 01             	and    esi,0x1
c0002f70:	0f 84 2f 01 00 00    	je     c00030a5 <get_fat+0x1ec>
c0002f76:	89 d9                	mov    ecx,ebx
c0002f78:	c1 e9 04             	shr    ecx,0x4
c0002f7b:	e9 25 01 00 00       	jmp    c00030a5 <get_fat+0x1ec>
c0002f80:	31 c9                	xor    ecx,ecx
c0002f82:	c1 ea 08             	shr    edx,0x8
c0002f85:	89 f8                	mov    eax,edi
c0002f87:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f8a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f8d:	e8 9f f3 ff ff       	call   c0002331 <move_window>
c0002f92:	85 c0                	test   eax,eax
c0002f94:	75 8f                	jne    c0002f25 <get_fat+0x6c>
c0002f96:	01 f6                	add    esi,esi
c0002f98:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002f9e:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fa2:	e8 ac eb ff ff       	call   c0001b53 <ld_word>
c0002fa7:	0f b7 c8             	movzx  ecx,ax
c0002faa:	e9 f6 00 00 00       	jmp    c00030a5 <get_fat+0x1ec>
c0002faf:	31 c9                	xor    ecx,ecx
c0002fb1:	c1 ea 07             	shr    edx,0x7
c0002fb4:	89 f8                	mov    eax,edi
c0002fb6:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fb9:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002fbc:	e8 70 f3 ff ff       	call   c0002331 <move_window>
c0002fc1:	85 c0                	test   eax,eax
c0002fc3:	0f 85 5c ff ff ff    	jne    c0002f25 <get_fat+0x6c>
c0002fc9:	c1 e6 02             	shl    esi,0x2
c0002fcc:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002fd2:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fd6:	e8 85 eb ff ff       	call   c0001b60 <ld_dword>
c0002fdb:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002fe0:	e9 b4 00 00 00       	jmp    c0003099 <get_fat+0x1e0>
c0002fe5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002fe8:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002feb:	89 d1                	mov    ecx,edx
c0002fed:	09 c1                	or     ecx,eax
c0002fef:	74 06                	je     c0002ff7 <get_fat+0x13e>
c0002ff1:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002ff5:	75 0f                	jne    c0003006 <get_fat+0x14d>
c0002ff7:	b9 01 00 00 00       	mov    ecx,0x1
c0002ffc:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0003000:	0f 85 9f 00 00 00    	jne    c00030a5 <get_fat+0x1ec>
c0003006:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c000300a:	89 f5                	mov    ebp,esi
c000300c:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0003011:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003014:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003017:	80 f9 02             	cmp    cl,0x2
c000301a:	75 35                	jne    c0003051 <get_fat+0x198>
c000301c:	83 c0 ff             	add    eax,0xffffffff
c000301f:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003024:	83 d2 ff             	adc    edx,0xffffffff
c0003027:	31 db                	xor    ebx,ebx
c0003029:	0f ac d0 09          	shrd   eax,edx,0x9
c000302d:	53                   	push   ebx
c000302e:	c1 ea 09             	shr    edx,0x9
c0003031:	51                   	push   ecx
c0003032:	52                   	push   edx
c0003033:	50                   	push   eax
c0003034:	e8 27 f6 01 00       	call   c0022660 <__udivdi3>
c0003039:	83 c4 10             	add    esp,0x10
c000303c:	b9 01 00 00 00       	mov    ecx,0x1
c0003041:	39 c5                	cmp    ebp,eax
c0003043:	77 60                	ja     c00030a5 <get_fat+0x1ec>
c0003045:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000304a:	74 59                	je     c00030a5 <get_fat+0x1ec>
c000304c:	8d 4e 01             	lea    ecx,[esi+0x1]
c000304f:	eb 54                	jmp    c00030a5 <get_fat+0x1ec>
c0003051:	80 f9 03             	cmp    cl,0x3
c0003054:	75 05                	jne    c000305b <get_fat+0x1a2>
c0003056:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003059:	77 f1                	ja     c000304c <get_fat+0x193>
c000305b:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003060:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003064:	75 3f                	jne    c00030a5 <get_fat+0x1ec>
c0003066:	31 c9                	xor    ecx,ecx
c0003068:	89 f2                	mov    edx,esi
c000306a:	89 f8                	mov    eax,edi
c000306c:	c1 ea 07             	shr    edx,0x7
c000306f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003072:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003075:	e8 b7 f2 ff ff       	call   c0002331 <move_window>
c000307a:	85 c0                	test   eax,eax
c000307c:	0f 85 a3 fe ff ff    	jne    c0002f25 <get_fat+0x6c>
c0003082:	c1 e6 02             	shl    esi,0x2
c0003085:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000308b:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000308f:	e8 cc ea ff ff       	call   c0001b60 <ld_dword>
c0003094:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0003099:	89 c1                	mov    ecx,eax
c000309b:	eb 08                	jmp    c00030a5 <get_fat+0x1ec>
c000309d:	b9 01 00 00 00       	mov    ecx,0x1
c00030a2:	89 c8                	mov    eax,ecx
c00030a4:	c3                   	ret    
c00030a5:	83 c4 1c             	add    esp,0x1c
c00030a8:	89 c8                	mov    eax,ecx
c00030aa:	5b                   	pop    ebx
c00030ab:	5e                   	pop    esi
c00030ac:	5f                   	pop    edi
c00030ad:	5d                   	pop    ebp
c00030ae:	c3                   	ret    

c00030af <dir_sdi>:
c00030af:	55                   	push   ebp
c00030b0:	57                   	push   edi
c00030b1:	56                   	push   esi
c00030b2:	53                   	push   ebx
c00030b3:	89 c3                	mov    ebx,eax
c00030b5:	83 ec 1c             	sub    esp,0x1c
c00030b8:	8b 38                	mov    edi,DWORD PTR [eax]
c00030ba:	31 c0                	xor    eax,eax
c00030bc:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00030bf:	0f 94 c0             	sete   al
c00030c2:	48                   	dec    eax
c00030c3:	25 00 00 20 f0       	and    eax,0xf0200000
c00030c8:	05 00 00 00 10       	add    eax,0x10000000
c00030cd:	39 d0                	cmp    eax,edx
c00030cf:	77 0a                	ja     c00030db <dir_sdi+0x2c>
c00030d1:	b8 02 00 00 00       	mov    eax,0x2
c00030d6:	e9 c4 00 00 00       	jmp    c000319f <dir_sdi+0xf0>
c00030db:	89 d6                	mov    esi,edx
c00030dd:	f6 c2 1f             	test   dl,0x1f
c00030e0:	75 ef                	jne    c00030d1 <dir_sdi+0x22>
c00030e2:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00030e5:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00030e8:	85 c9                	test   ecx,ecx
c00030ea:	75 2d                	jne    c0003119 <dir_sdi+0x6a>
c00030ec:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00030ef:	77 1b                	ja     c000310c <dir_sdi+0x5d>
c00030f1:	89 f2                	mov    edx,esi
c00030f3:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00030f7:	c1 ea 05             	shr    edx,0x5
c00030fa:	39 c2                	cmp    edx,eax
c00030fc:	73 d3                	jae    c00030d1 <dir_sdi+0x22>
c00030fe:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003101:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0003104:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003107:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000310a:	eb 4b                	jmp    c0003157 <dir_sdi+0xa8>
c000310c:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000310f:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003113:	85 c0                	test   eax,eax
c0003115:	74 da                	je     c00030f1 <dir_sdi+0x42>
c0003117:	89 c1                	mov    ecx,eax
c0003119:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000311d:	c1 e5 09             	shl    ebp,0x9
c0003120:	89 ca                	mov    edx,ecx
c0003122:	39 ee                	cmp    esi,ebp
c0003124:	72 1c                	jb     c0003142 <dir_sdi+0x93>
c0003126:	89 d8                	mov    eax,ebx
c0003128:	e8 8c fd ff ff       	call   c0002eb9 <get_fat>
c000312d:	89 c1                	mov    ecx,eax
c000312f:	83 f8 ff             	cmp    eax,0xffffffff
c0003132:	74 66                	je     c000319a <dir_sdi+0xeb>
c0003134:	83 f8 01             	cmp    eax,0x1
c0003137:	76 98                	jbe    c00030d1 <dir_sdi+0x22>
c0003139:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000313c:	76 93                	jbe    c00030d1 <dir_sdi+0x22>
c000313e:	29 ee                	sub    esi,ebp
c0003140:	eb de                	jmp    c0003120 <dir_sdi+0x71>
c0003142:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003146:	89 f8                	mov    eax,edi
c0003148:	e8 9f ec ff ff       	call   c0001dec <clst2sect>
c000314d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003151:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003154:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003157:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000315a:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000315d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003160:	89 d1                	mov    ecx,edx
c0003162:	09 c1                	or     ecx,eax
c0003164:	0f 84 67 ff ff ff    	je     c00030d1 <dir_sdi+0x22>
c000316a:	89 f1                	mov    ecx,esi
c000316c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003174:	c1 e9 09             	shr    ecx,0x9
c0003177:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000317b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000317f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003183:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003186:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000318c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000318f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003193:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003196:	31 c0                	xor    eax,eax
c0003198:	eb 05                	jmp    c000319f <dir_sdi+0xf0>
c000319a:	b8 01 00 00 00       	mov    eax,0x1
c000319f:	83 c4 1c             	add    esp,0x1c
c00031a2:	5b                   	pop    ebx
c00031a3:	5e                   	pop    esi
c00031a4:	5f                   	pop    edi
c00031a5:	5d                   	pop    ebp
c00031a6:	c3                   	ret    

c00031a7 <create_chain>:
c00031a7:	55                   	push   ebp
c00031a8:	89 c5                	mov    ebp,eax
c00031aa:	57                   	push   edi
c00031ab:	56                   	push   esi
c00031ac:	53                   	push   ebx
c00031ad:	83 ec 1c             	sub    esp,0x1c
c00031b0:	85 d2                	test   edx,edx
c00031b2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00031b6:	8b 30                	mov    esi,DWORD PTR [eax]
c00031b8:	75 0e                	jne    c00031c8 <create_chain+0x21>
c00031ba:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00031bd:	85 ff                	test   edi,edi
c00031bf:	74 39                	je     c00031fa <create_chain+0x53>
c00031c1:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00031c4:	77 39                	ja     c00031ff <create_chain+0x58>
c00031c6:	eb 32                	jmp    c00031fa <create_chain+0x53>
c00031c8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031cc:	e8 e8 fc ff ff       	call   c0002eb9 <get_fat>
c00031d1:	89 c3                	mov    ebx,eax
c00031d3:	83 f8 01             	cmp    eax,0x1
c00031d6:	77 0a                	ja     c00031e2 <create_chain+0x3b>
c00031d8:	bb 01 00 00 00       	mov    ebx,0x1
c00031dd:	e9 ba 01 00 00       	jmp    c000339c <create_chain+0x1f5>
c00031e2:	83 f8 ff             	cmp    eax,0xffffffff
c00031e5:	0f 84 62 01 00 00    	je     c000334d <create_chain+0x1a6>
c00031eb:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031ee:	0f 87 a8 01 00 00    	ja     c000339c <create_chain+0x1f5>
c00031f4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00031f8:	eb 05                	jmp    c00031ff <create_chain+0x58>
c00031fa:	bf 01 00 00 00       	mov    edi,0x1
c00031ff:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003203:	75 07                	jne    c000320c <create_chain+0x65>
c0003205:	31 db                	xor    ebx,ebx
c0003207:	e9 90 01 00 00       	jmp    c000339c <create_chain+0x1f5>
c000320c:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000320f:	75 74                	jne    c0003285 <create_chain+0xde>
c0003211:	b9 01 00 00 00       	mov    ecx,0x1
c0003216:	89 fa                	mov    edx,edi
c0003218:	89 f0                	mov    eax,esi
c000321a:	e8 2d f9 ff ff       	call   c0002b4c <find_bitmap>
c000321f:	89 c3                	mov    ebx,eax
c0003221:	8d 40 ff             	lea    eax,[eax-0x1]
c0003224:	83 f8 fd             	cmp    eax,0xfffffffd
c0003227:	0f 87 6f 01 00 00    	ja     c000339c <create_chain+0x1f5>
c000322d:	83 ec 0c             	sub    esp,0xc
c0003230:	b9 01 00 00 00       	mov    ecx,0x1
c0003235:	6a 01                	push   0x1
c0003237:	89 da                	mov    edx,ebx
c0003239:	89 f0                	mov    eax,esi
c000323b:	e8 bf f9 ff ff       	call   c0002bff <change_bitmap>
c0003240:	83 c4 10             	add    esp,0x10
c0003243:	83 f8 02             	cmp    eax,0x2
c0003246:	74 90                	je     c00031d8 <create_chain+0x31>
c0003248:	83 f8 01             	cmp    eax,0x1
c000324b:	0f 84 fc 00 00 00    	je     c000334d <create_chain+0x1a6>
c0003251:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003256:	75 09                	jne    c0003261 <create_chain+0xba>
c0003258:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000325c:	e9 0c 01 00 00       	jmp    c000336d <create_chain+0x1c6>
c0003261:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003265:	0f 85 e7 00 00 00    	jne    c0003352 <create_chain+0x1ab>
c000326b:	8d 57 01             	lea    edx,[edi+0x1]
c000326e:	39 da                	cmp    edx,ebx
c0003270:	0f 84 f7 00 00 00    	je     c000336d <create_chain+0x1c6>
c0003276:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003279:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000327d:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003280:	e9 cd 00 00 00       	jmp    c0003352 <create_chain+0x1ab>
c0003285:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003289:	75 41                	jne    c00032cc <create_chain+0x125>
c000328b:	8d 5f 01             	lea    ebx,[edi+0x1]
c000328e:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003291:	77 05                	ja     c0003298 <create_chain+0xf1>
c0003293:	bb 02 00 00 00       	mov    ebx,0x2
c0003298:	89 da                	mov    edx,ebx
c000329a:	89 e8                	mov    eax,ebp
c000329c:	e8 18 fc ff ff       	call   c0002eb9 <get_fat>
c00032a1:	83 f8 01             	cmp    eax,0x1
c00032a4:	0f 84 2e ff ff ff    	je     c00031d8 <create_chain+0x31>
c00032aa:	83 f8 ff             	cmp    eax,0xffffffff
c00032ad:	0f 84 9a 00 00 00    	je     c000334d <create_chain+0x1a6>
c00032b3:	85 c0                	test   eax,eax
c00032b5:	74 11                	je     c00032c8 <create_chain+0x121>
c00032b7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00032ba:	83 f8 01             	cmp    eax,0x1
c00032bd:	76 0d                	jbe    c00032cc <create_chain+0x125>
c00032bf:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032c2:	76 08                	jbe    c00032cc <create_chain+0x125>
c00032c4:	89 c7                	mov    edi,eax
c00032c6:	eb 04                	jmp    c00032cc <create_chain+0x125>
c00032c8:	85 db                	test   ebx,ebx
c00032ca:	75 38                	jne    c0003304 <create_chain+0x15d>
c00032cc:	89 fb                	mov    ebx,edi
c00032ce:	43                   	inc    ebx
c00032cf:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00032d2:	77 0e                	ja     c00032e2 <create_chain+0x13b>
c00032d4:	83 ff 01             	cmp    edi,0x1
c00032d7:	0f 86 28 ff ff ff    	jbe    c0003205 <create_chain+0x5e>
c00032dd:	bb 02 00 00 00       	mov    ebx,0x2
c00032e2:	89 da                	mov    edx,ebx
c00032e4:	89 e8                	mov    eax,ebp
c00032e6:	e8 ce fb ff ff       	call   c0002eb9 <get_fat>
c00032eb:	85 c0                	test   eax,eax
c00032ed:	74 15                	je     c0003304 <create_chain+0x15d>
c00032ef:	83 f8 01             	cmp    eax,0x1
c00032f2:	0f 84 e0 fe ff ff    	je     c00031d8 <create_chain+0x31>
c00032f8:	40                   	inc    eax
c00032f9:	74 52                	je     c000334d <create_chain+0x1a6>
c00032fb:	39 fb                	cmp    ebx,edi
c00032fd:	75 cf                	jne    c00032ce <create_chain+0x127>
c00032ff:	e9 01 ff ff ff       	jmp    c0003205 <create_chain+0x5e>
c0003304:	83 c9 ff             	or     ecx,0xffffffff
c0003307:	89 da                	mov    edx,ebx
c0003309:	89 f0                	mov    eax,esi
c000330b:	e8 a4 f9 ff ff       	call   c0002cb4 <put_fat>
c0003310:	85 c0                	test   eax,eax
c0003312:	75 32                	jne    c0003346 <create_chain+0x19f>
c0003314:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003319:	74 11                	je     c000332c <create_chain+0x185>
c000331b:	89 d9                	mov    ecx,ebx
c000331d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003321:	89 f0                	mov    eax,esi
c0003323:	e8 8c f9 ff ff       	call   c0002cb4 <put_fat>
c0003328:	85 c0                	test   eax,eax
c000332a:	75 1a                	jne    c0003346 <create_chain+0x19f>
c000332c:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000332f:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003332:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003335:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003338:	39 d0                	cmp    eax,edx
c000333a:	77 04                	ja     c0003340 <create_chain+0x199>
c000333c:	48                   	dec    eax
c000333d:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003340:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003344:	eb 56                	jmp    c000339c <create_chain+0x1f5>
c0003346:	48                   	dec    eax
c0003347:	0f 85 8b fe ff ff    	jne    c00031d8 <create_chain+0x31>
c000334d:	83 cb ff             	or     ebx,0xffffffff
c0003350:	eb 4a                	jmp    c000339c <create_chain+0x1f5>
c0003352:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003356:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003359:	41                   	inc    ecx
c000335a:	39 d9                	cmp    ecx,ebx
c000335c:	75 19                	jne    c0003377 <create_chain+0x1d0>
c000335e:	b9 02 00 00 00       	mov    ecx,0x2
c0003363:	85 d2                	test   edx,edx
c0003365:	74 03                	je     c000336a <create_chain+0x1c3>
c0003367:	8d 4a 01             	lea    ecx,[edx+0x1]
c000336a:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000336d:	85 c0                	test   eax,eax
c000336f:	0f 85 63 fe ff ff    	jne    c00031d8 <create_chain+0x31>
c0003375:	eb b5                	jmp    c000332c <create_chain+0x185>
c0003377:	85 d2                	test   edx,edx
c0003379:	75 07                	jne    c0003382 <create_chain+0x1db>
c000337b:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003382:	89 d9                	mov    ecx,ebx
c0003384:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003388:	89 e8                	mov    eax,ebp
c000338a:	e8 bb fa ff ff       	call   c0002e4a <fill_last_frag>
c000338f:	85 c0                	test   eax,eax
c0003391:	75 b3                	jne    c0003346 <create_chain+0x19f>
c0003393:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000339a:	eb 90                	jmp    c000332c <create_chain+0x185>
c000339c:	83 c4 1c             	add    esp,0x1c
c000339f:	89 d8                	mov    eax,ebx
c00033a1:	5b                   	pop    ebx
c00033a2:	5e                   	pop    esi
c00033a3:	5f                   	pop    edi
c00033a4:	5d                   	pop    ebp
c00033a5:	c3                   	ret    

c00033a6 <remove_chain>:
c00033a6:	55                   	push   ebp
c00033a7:	57                   	push   edi
c00033a8:	56                   	push   esi
c00033a9:	53                   	push   ebx
c00033aa:	83 ec 1c             	sub    esp,0x1c
c00033ad:	83 fa 01             	cmp    edx,0x1
c00033b0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00033b4:	8b 18                	mov    ebx,DWORD PTR [eax]
c00033b6:	77 0a                	ja     c00033c2 <remove_chain+0x1c>
c00033b8:	b8 02 00 00 00       	mov    eax,0x2
c00033bd:	e9 24 01 00 00       	jmp    c00034e6 <remove_chain+0x140>
c00033c2:	89 d6                	mov    esi,edx
c00033c4:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00033c7:	76 ef                	jbe    c00033b8 <remove_chain+0x12>
c00033c9:	89 c7                	mov    edi,eax
c00033cb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033d0:	75 06                	jne    c00033d8 <remove_chain+0x32>
c00033d2:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00033d6:	eb 54                	jmp    c000342c <remove_chain+0x86>
c00033d8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00033db:	75 06                	jne    c00033e3 <remove_chain+0x3d>
c00033dd:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00033e1:	74 ef                	je     c00033d2 <remove_chain+0x2c>
c00033e3:	83 c9 ff             	or     ecx,0xffffffff
c00033e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033ea:	89 d8                	mov    eax,ebx
c00033ec:	e8 c3 f8 ff ff       	call   c0002cb4 <put_fat>
c00033f1:	85 c0                	test   eax,eax
c00033f3:	74 dd                	je     c00033d2 <remove_chain+0x2c>
c00033f5:	e9 ec 00 00 00       	jmp    c00034e6 <remove_chain+0x140>
c00033fa:	83 f8 01             	cmp    eax,0x1
c00033fd:	74 b9                	je     c00033b8 <remove_chain+0x12>
c00033ff:	83 f8 ff             	cmp    eax,0xffffffff
c0003402:	74 6d                	je     c0003471 <remove_chain+0xcb>
c0003404:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003407:	75 6f                	jne    c0003478 <remove_chain+0xd2>
c0003409:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000340c:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000340f:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003412:	39 d0                	cmp    eax,edx
c0003414:	73 08                	jae    c000341e <remove_chain+0x78>
c0003416:	40                   	inc    eax
c0003417:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000341b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000341e:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003421:	39 e9                	cmp    ecx,ebp
c0003423:	75 64                	jne    c0003489 <remove_chain+0xe3>
c0003425:	89 ee                	mov    esi,ebp
c0003427:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c000342a:	76 0f                	jbe    c000343b <remove_chain+0x95>
c000342c:	89 f2                	mov    edx,esi
c000342e:	89 f8                	mov    eax,edi
c0003430:	e8 84 fa ff ff       	call   c0002eb9 <get_fat>
c0003435:	89 c5                	mov    ebp,eax
c0003437:	85 c0                	test   eax,eax
c0003439:	75 bf                	jne    c00033fa <remove_chain+0x54>
c000343b:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000343e:	0f 85 a0 00 00 00    	jne    c00034e4 <remove_chain+0x13e>
c0003444:	eb 6c                	jmp    c00034b2 <remove_chain+0x10c>
c0003446:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003449:	84 c0                	test   al,al
c000344b:	75 7d                	jne    c00034ca <remove_chain+0x124>
c000344d:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003450:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003454:	0f 84 86 00 00 00    	je     c00034e0 <remove_chain+0x13a>
c000345a:	89 da                	mov    edx,ebx
c000345c:	89 f8                	mov    eax,edi
c000345e:	e8 56 fa ff ff       	call   c0002eb9 <get_fat>
c0003463:	83 f8 01             	cmp    eax,0x1
c0003466:	0f 86 4c ff ff ff    	jbe    c00033b8 <remove_chain+0x12>
c000346c:	83 f8 ff             	cmp    eax,0xffffffff
c000346f:	75 4e                	jne    c00034bf <remove_chain+0x119>
c0003471:	b8 01 00 00 00       	mov    eax,0x1
c0003476:	eb 6e                	jmp    c00034e6 <remove_chain+0x140>
c0003478:	31 c9                	xor    ecx,ecx
c000347a:	89 f2                	mov    edx,esi
c000347c:	89 d8                	mov    eax,ebx
c000347e:	e8 31 f8 ff ff       	call   c0002cb4 <put_fat>
c0003483:	85 c0                	test   eax,eax
c0003485:	74 82                	je     c0003409 <remove_chain+0x63>
c0003487:	eb 5d                	jmp    c00034e6 <remove_chain+0x140>
c0003489:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000348c:	75 1b                	jne    c00034a9 <remove_chain+0x103>
c000348e:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003492:	89 d8                	mov    eax,ebx
c0003494:	83 ec 0c             	sub    esp,0xc
c0003497:	6a 00                	push   0x0
c0003499:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000349d:	e8 5d f7 ff ff       	call   c0002bff <change_bitmap>
c00034a2:	83 c4 10             	add    esp,0x10
c00034a5:	85 c0                	test   eax,eax
c00034a7:	75 3d                	jne    c00034e6 <remove_chain+0x140>
c00034a9:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00034ad:	e9 73 ff ff ff       	jmp    c0003425 <remove_chain+0x7f>
c00034b2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034b7:	75 8d                	jne    c0003446 <remove_chain+0xa0>
c00034b9:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00034bd:	eb 25                	jmp    c00034e4 <remove_chain+0x13e>
c00034bf:	8d 53 01             	lea    edx,[ebx+0x1]
c00034c2:	89 c3                	mov    ebx,eax
c00034c4:	39 c2                	cmp    edx,eax
c00034c6:	74 88                	je     c0003450 <remove_chain+0xaa>
c00034c8:	eb 1a                	jmp    c00034e4 <remove_chain+0x13e>
c00034ca:	3c 03                	cmp    al,0x3
c00034cc:	75 16                	jne    c00034e4 <remove_chain+0x13e>
c00034ce:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00034d1:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034d5:	77 0d                	ja     c00034e4 <remove_chain+0x13e>
c00034d7:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00034da:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034de:	72 04                	jb     c00034e4 <remove_chain+0x13e>
c00034e0:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00034e4:	31 c0                	xor    eax,eax
c00034e6:	83 c4 1c             	add    esp,0x1c
c00034e9:	5b                   	pop    ebx
c00034ea:	5e                   	pop    esi
c00034eb:	5f                   	pop    edi
c00034ec:	5d                   	pop    ebp
c00034ed:	c3                   	ret    

c00034ee <dir_clear>:
c00034ee:	55                   	push   ebp
c00034ef:	57                   	push   edi
c00034f0:	56                   	push   esi
c00034f1:	89 c6                	mov    esi,eax
c00034f3:	53                   	push   ebx
c00034f4:	83 ec 1c             	sub    esp,0x1c
c00034f7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00034fb:	e8 9d ed ff ff       	call   c000229d <sync_window>
c0003500:	85 c0                	test   eax,eax
c0003502:	0f 85 de 00 00 00    	jne    c00035e6 <dir_clear+0xf8>
c0003508:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000350c:	89 f0                	mov    eax,esi
c000350e:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003511:	e8 d6 e8 ff ff       	call   c0001dec <clst2sect>
c0003516:	b9 00 02 00 00       	mov    ecx,0x200
c000351b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000351f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003523:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003526:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003529:	89 e8                	mov    eax,ebp
c000352b:	31 d2                	xor    edx,edx
c000352d:	e8 b5 e6 ff ff       	call   c0001be7 <mem_set>
c0003532:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003536:	c1 e3 09             	shl    ebx,0x9
c0003539:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000353f:	76 1f                	jbe    c0003560 <dir_clear+0x72>
c0003541:	bb 00 80 00 00       	mov    ebx,0x8000
c0003546:	eb 18                	jmp    c0003560 <dir_clear+0x72>
c0003548:	83 ec 0c             	sub    esp,0xc
c000354b:	53                   	push   ebx
c000354c:	e8 6b 50 00 00       	call   c00085bc <ff_memalloc>
c0003551:	83 c4 10             	add    esp,0x10
c0003554:	89 c7                	mov    edi,eax
c0003556:	85 c0                	test   eax,eax
c0003558:	0f 85 8f 00 00 00    	jne    c00035ed <dir_clear+0xff>
c000355e:	d1 eb                	shr    ebx,1
c0003560:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003566:	77 e0                	ja     c0003548 <dir_clear+0x5a>
c0003568:	31 db                	xor    ebx,ebx
c000356a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000356e:	39 d8                	cmp    eax,ebx
c0003570:	76 66                	jbe    c00035d8 <dir_clear+0xea>
c0003572:	83 ec 0c             	sub    esp,0xc
c0003575:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003579:	6a 01                	push   0x1
c000357b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000357f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003583:	55                   	push   ebp
c0003584:	50                   	push   eax
c0003585:	e8 94 e5 ff ff       	call   c0001b1e <disk_write>
c000358a:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000358f:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003594:	83 c4 20             	add    esp,0x20
c0003597:	85 c0                	test   eax,eax
c0003599:	75 3d                	jne    c00035d8 <dir_clear+0xea>
c000359b:	43                   	inc    ebx
c000359c:	eb cc                	jmp    c000356a <dir_clear+0x7c>
c000359e:	83 ec 0c             	sub    esp,0xc
c00035a1:	31 d2                	xor    edx,edx
c00035a3:	55                   	push   ebp
c00035a4:	89 d8                	mov    eax,ebx
c00035a6:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00035aa:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00035ae:	52                   	push   edx
c00035af:	50                   	push   eax
c00035b0:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00035b4:	57                   	push   edi
c00035b5:	50                   	push   eax
c00035b6:	e8 63 e5 ff ff       	call   c0001b1e <disk_write>
c00035bb:	83 c4 20             	add    esp,0x20
c00035be:	85 c0                	test   eax,eax
c00035c0:	75 0a                	jne    c00035cc <dir_clear+0xde>
c00035c2:	01 eb                	add    ebx,ebp
c00035c4:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035c8:	39 d8                	cmp    eax,ebx
c00035ca:	77 d2                	ja     c000359e <dir_clear+0xb0>
c00035cc:	83 ec 0c             	sub    esp,0xc
c00035cf:	57                   	push   edi
c00035d0:	e8 ff 4f 00 00       	call   c00085d4 <ff_memfree>
c00035d5:	83 c4 10             	add    esp,0x10
c00035d8:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035dc:	39 d8                	cmp    eax,ebx
c00035de:	0f 95 c0             	setne  al
c00035e1:	0f b6 c0             	movzx  eax,al
c00035e4:	eb 19                	jmp    c00035ff <dir_clear+0x111>
c00035e6:	b8 01 00 00 00       	mov    eax,0x1
c00035eb:	eb 12                	jmp    c00035ff <dir_clear+0x111>
c00035ed:	89 d9                	mov    ecx,ebx
c00035ef:	31 d2                	xor    edx,edx
c00035f1:	c1 eb 09             	shr    ebx,0x9
c00035f4:	e8 ee e5 ff ff       	call   c0001be7 <mem_set>
c00035f9:	89 dd                	mov    ebp,ebx
c00035fb:	31 db                	xor    ebx,ebx
c00035fd:	eb c5                	jmp    c00035c4 <dir_clear+0xd6>
c00035ff:	83 c4 1c             	add    esp,0x1c
c0003602:	5b                   	pop    ebx
c0003603:	5e                   	pop    esi
c0003604:	5f                   	pop    edi
c0003605:	5d                   	pop    ebp
c0003606:	c3                   	ret    

c0003607 <dir_next>:
c0003607:	55                   	push   ebp
c0003608:	57                   	push   edi
c0003609:	56                   	push   esi
c000360a:	53                   	push   ebx
c000360b:	89 c3                	mov    ebx,eax
c000360d:	83 ec 1c             	sub    esp,0x1c
c0003610:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003612:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003616:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003619:	8d 78 20             	lea    edi,[eax+0x20]
c000361c:	31 c0                	xor    eax,eax
c000361e:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003622:	0f 94 c0             	sete   al
c0003625:	48                   	dec    eax
c0003626:	25 00 00 20 f0       	and    eax,0xf0200000
c000362b:	05 00 00 00 10       	add    eax,0x10000000
c0003630:	39 f8                	cmp    eax,edi
c0003632:	77 0e                	ja     c0003642 <dir_next+0x3b>
c0003634:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000363b:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003642:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003645:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003648:	b8 04 00 00 00       	mov    eax,0x4
c000364d:	89 ce                	mov    esi,ecx
c000364f:	09 d6                	or     esi,edx
c0003651:	0f 84 da 00 00 00    	je     c0003731 <dir_next+0x12a>
c0003657:	89 f8                	mov    eax,edi
c0003659:	25 ff 01 00 00       	and    eax,0x1ff
c000365e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003662:	0f 85 b9 00 00 00    	jne    c0003721 <dir_next+0x11a>
c0003668:	83 c2 01             	add    edx,0x1
c000366b:	83 d1 00             	adc    ecx,0x0
c000366e:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003671:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003674:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003677:	85 d2                	test   edx,edx
c0003679:	75 29                	jne    c00036a4 <dir_next+0x9d>
c000367b:	89 fa                	mov    edx,edi
c000367d:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003681:	c1 ea 05             	shr    edx,0x5
c0003684:	39 c2                	cmp    edx,eax
c0003686:	0f 82 95 00 00 00    	jb     c0003721 <dir_next+0x11a>
c000368c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003693:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000369a:	b8 04 00 00 00       	mov    eax,0x4
c000369f:	e9 8d 00 00 00       	jmp    c0003731 <dir_next+0x12a>
c00036a4:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00036a8:	89 f9                	mov    ecx,edi
c00036aa:	48                   	dec    eax
c00036ab:	c1 e9 09             	shr    ecx,0x9
c00036ae:	85 c8                	test   eax,ecx
c00036b0:	75 6f                	jne    c0003721 <dir_next+0x11a>
c00036b2:	89 d8                	mov    eax,ebx
c00036b4:	e8 00 f8 ff ff       	call   c0002eb9 <get_fat>
c00036b9:	89 c6                	mov    esi,eax
c00036bb:	83 f8 01             	cmp    eax,0x1
c00036be:	77 07                	ja     c00036c7 <dir_next+0xc0>
c00036c0:	b8 02 00 00 00       	mov    eax,0x2
c00036c5:	eb 6a                	jmp    c0003731 <dir_next+0x12a>
c00036c7:	83 f8 ff             	cmp    eax,0xffffffff
c00036ca:	75 07                	jne    c00036d3 <dir_next+0xcc>
c00036cc:	b8 01 00 00 00       	mov    eax,0x1
c00036d1:	eb 5e                	jmp    c0003731 <dir_next+0x12a>
c00036d3:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00036d6:	77 37                	ja     c000370f <dir_next+0x108>
c00036d8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00036dd:	74 ad                	je     c000368c <dir_next+0x85>
c00036df:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00036e2:	89 d8                	mov    eax,ebx
c00036e4:	e8 be fa ff ff       	call   c00031a7 <create_chain>
c00036e9:	89 c6                	mov    esi,eax
c00036eb:	b8 07 00 00 00       	mov    eax,0x7
c00036f0:	85 f6                	test   esi,esi
c00036f2:	74 3d                	je     c0003731 <dir_next+0x12a>
c00036f4:	83 fe 01             	cmp    esi,0x1
c00036f7:	74 c7                	je     c00036c0 <dir_next+0xb9>
c00036f9:	83 fe ff             	cmp    esi,0xffffffff
c00036fc:	74 ce                	je     c00036cc <dir_next+0xc5>
c00036fe:	89 f2                	mov    edx,esi
c0003700:	89 e8                	mov    eax,ebp
c0003702:	e8 e7 fd ff ff       	call   c00034ee <dir_clear>
c0003707:	85 c0                	test   eax,eax
c0003709:	75 c1                	jne    c00036cc <dir_next+0xc5>
c000370b:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000370f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003712:	89 f2                	mov    edx,esi
c0003714:	89 e8                	mov    eax,ebp
c0003716:	e8 d1 e6 ff ff       	call   c0001dec <clst2sect>
c000371b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000371e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003721:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003725:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003728:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000372c:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000372f:	31 c0                	xor    eax,eax
c0003731:	83 c4 1c             	add    esp,0x1c
c0003734:	5b                   	pop    ebx
c0003735:	5e                   	pop    esi
c0003736:	5f                   	pop    edi
c0003737:	5d                   	pop    ebp
c0003738:	c3                   	ret    

c0003739 <load_xdir>:
c0003739:	55                   	push   ebp
c000373a:	57                   	push   edi
c000373b:	56                   	push   esi
c000373c:	89 c6                	mov    esi,eax
c000373e:	53                   	push   ebx
c000373f:	83 ec 1c             	sub    esp,0x1c
c0003742:	8b 00                	mov    eax,DWORD PTR [eax]
c0003744:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003747:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000374a:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000374d:	e8 df eb ff ff       	call   c0002331 <move_window>
c0003752:	89 c3                	mov    ebx,eax
c0003754:	85 c0                	test   eax,eax
c0003756:	0f 85 0c 01 00 00    	jne    c0003868 <load_xdir+0x12f>
c000375c:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000375f:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003762:	0f 85 fb 00 00 00    	jne    c0003863 <load_xdir+0x12a>
c0003768:	89 f8                	mov    eax,edi
c000376a:	b9 20 00 00 00       	mov    ecx,0x20
c000376f:	e8 5e e4 ff ff       	call   c0001bd2 <mem_cpy>
c0003774:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003778:	40                   	inc    eax
c0003779:	c1 e0 05             	shl    eax,0x5
c000377c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003780:	83 e8 60             	sub    eax,0x60
c0003783:	3d 00 02 00 00       	cmp    eax,0x200
c0003788:	0f 87 d5 00 00 00    	ja     c0003863 <load_xdir+0x12a>
c000378e:	31 d2                	xor    edx,edx
c0003790:	89 f0                	mov    eax,esi
c0003792:	e8 70 fe ff ff       	call   c0003607 <dir_next>
c0003797:	89 c3                	mov    ebx,eax
c0003799:	83 f8 04             	cmp    eax,0x4
c000379c:	0f 84 c1 00 00 00    	je     c0003863 <load_xdir+0x12a>
c00037a2:	85 c0                	test   eax,eax
c00037a4:	0f 85 be 00 00 00    	jne    c0003868 <load_xdir+0x12f>
c00037aa:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00037ad:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00037b0:	8b 06                	mov    eax,DWORD PTR [esi]
c00037b2:	e8 7a eb ff ff       	call   c0002331 <move_window>
c00037b7:	89 c3                	mov    ebx,eax
c00037b9:	85 c0                	test   eax,eax
c00037bb:	0f 85 a7 00 00 00    	jne    c0003868 <load_xdir+0x12f>
c00037c1:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00037c4:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00037c7:	0f 85 96 00 00 00    	jne    c0003863 <load_xdir+0x12a>
c00037cd:	8d 47 20             	lea    eax,[edi+0x20]
c00037d0:	b9 20 00 00 00       	mov    ecx,0x20
c00037d5:	e8 f8 e3 ff ff       	call   c0001bd2 <mem_cpy>
c00037da:	31 d2                	xor    edx,edx
c00037dc:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00037e0:	b9 0f 00 00 00       	mov    ecx,0xf
c00037e5:	83 c0 2c             	add    eax,0x2c
c00037e8:	f7 f1                	div    ecx
c00037ea:	c1 e0 05             	shl    eax,0x5
c00037ed:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00037f1:	77 70                	ja     c0003863 <load_xdir+0x12a>
c00037f3:	bd 40 00 00 00       	mov    ebp,0x40
c00037f8:	31 d2                	xor    edx,edx
c00037fa:	89 f0                	mov    eax,esi
c00037fc:	e8 06 fe ff ff       	call   c0003607 <dir_next>
c0003801:	89 c3                	mov    ebx,eax
c0003803:	83 f8 04             	cmp    eax,0x4
c0003806:	74 5b                	je     c0003863 <load_xdir+0x12a>
c0003808:	85 c0                	test   eax,eax
c000380a:	75 5c                	jne    c0003868 <load_xdir+0x12f>
c000380c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000380f:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003812:	8b 06                	mov    eax,DWORD PTR [esi]
c0003814:	e8 18 eb ff ff       	call   c0002331 <move_window>
c0003819:	89 c3                	mov    ebx,eax
c000381b:	85 c0                	test   eax,eax
c000381d:	75 49                	jne    c0003868 <load_xdir+0x12f>
c000381f:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003822:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003825:	75 3c                	jne    c0003863 <load_xdir+0x12a>
c0003827:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000382d:	77 0d                	ja     c000383c <load_xdir+0x103>
c000382f:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003832:	b9 20 00 00 00       	mov    ecx,0x20
c0003837:	e8 96 e3 ff ff       	call   c0001bd2 <mem_cpy>
c000383c:	83 c5 20             	add    ebp,0x20
c000383f:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003843:	77 b3                	ja     c00037f8 <load_xdir+0xbf>
c0003845:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000384b:	77 1b                	ja     c0003868 <load_xdir+0x12f>
c000384d:	89 f8                	mov    eax,edi
c000384f:	e8 cd e7 ff ff       	call   c0002021 <xdir_sum>
c0003854:	89 c1                	mov    ecx,eax
c0003856:	8d 47 02             	lea    eax,[edi+0x2]
c0003859:	e8 f5 e2 ff ff       	call   c0001b53 <ld_word>
c000385e:	66 39 c1             	cmp    cx,ax
c0003861:	74 05                	je     c0003868 <load_xdir+0x12f>
c0003863:	bb 02 00 00 00       	mov    ebx,0x2
c0003868:	83 c4 1c             	add    esp,0x1c
c000386b:	89 d8                	mov    eax,ebx
c000386d:	5b                   	pop    ebx
c000386e:	5e                   	pop    esi
c000386f:	5f                   	pop    edi
c0003870:	5d                   	pop    ebp
c0003871:	c3                   	ret    

c0003872 <load_obj_xdir>:
c0003872:	53                   	push   ebx
c0003873:	89 c3                	mov    ebx,eax
c0003875:	83 ec 08             	sub    esp,0x8
c0003878:	8b 02                	mov    eax,DWORD PTR [edx]
c000387a:	89 03                	mov    DWORD PTR [ebx],eax
c000387c:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000387f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003882:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003885:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003888:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000388b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003892:	30 c0                	xor    al,al
c0003894:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000389b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000389e:	89 d8                	mov    eax,ebx
c00038a0:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00038a3:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00038a6:	e8 04 f8 ff ff       	call   c00030af <dir_sdi>
c00038ab:	85 c0                	test   eax,eax
c00038ad:	75 0b                	jne    c00038ba <load_obj_xdir+0x48>
c00038af:	89 d8                	mov    eax,ebx
c00038b1:	83 c4 08             	add    esp,0x8
c00038b4:	5b                   	pop    ebx
c00038b5:	e9 7f fe ff ff       	jmp    c0003739 <load_xdir>
c00038ba:	83 c4 08             	add    esp,0x8
c00038bd:	5b                   	pop    ebx
c00038be:	c3                   	ret    

c00038bf <dir_read>:
c00038bf:	55                   	push   ebp
c00038c0:	bd 04 00 00 00       	mov    ebp,0x4
c00038c5:	57                   	push   edi
c00038c6:	56                   	push   esi
c00038c7:	be ff ff ff ff       	mov    esi,0xffffffff
c00038cc:	53                   	push   ebx
c00038cd:	89 c3                	mov    ebx,eax
c00038cf:	83 ec 1c             	sub    esp,0x1c
c00038d2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038d6:	8b 38                	mov    edi,DWORD PTR [eax]
c00038d8:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038dd:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00038e0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00038e3:	89 c8                	mov    eax,ecx
c00038e5:	09 d0                	or     eax,edx
c00038e7:	0f 84 25 01 00 00    	je     c0003a12 <dir_read+0x153>
c00038ed:	89 f8                	mov    eax,edi
c00038ef:	e8 3d ea ff ff       	call   c0002331 <move_window>
c00038f4:	89 c5                	mov    ebp,eax
c00038f6:	85 c0                	test   eax,eax
c00038f8:	0f 85 23 01 00 00    	jne    c0003a21 <dir_read+0x162>
c00038fe:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003901:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003903:	84 c9                	test   cl,cl
c0003905:	0f 84 11 01 00 00    	je     c0003a1c <dir_read+0x15d>
c000390b:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c000390e:	75 48                	jne    c0003958 <dir_read+0x99>
c0003910:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003915:	74 10                	je     c0003927 <dir_read+0x68>
c0003917:	80 f9 83             	cmp    cl,0x83
c000391a:	0f 85 dd 00 00 00    	jne    c00039fd <dir_read+0x13e>
c0003920:	31 ed                	xor    ebp,ebp
c0003922:	e9 08 01 00 00       	jmp    c0003a2f <dir_read+0x170>
c0003927:	80 f9 85             	cmp    cl,0x85
c000392a:	0f 85 cd 00 00 00    	jne    c00039fd <dir_read+0x13e>
c0003930:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003933:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003936:	89 d8                	mov    eax,ebx
c0003938:	e8 fc fd ff ff       	call   c0003739 <load_xdir>
c000393d:	89 c5                	mov    ebp,eax
c000393f:	85 c0                	test   eax,eax
c0003941:	0f 85 da 00 00 00    	jne    c0003a21 <dir_read+0x162>
c0003947:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c000394a:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c000394d:	83 e0 3f             	and    eax,0x3f
c0003950:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003953:	e9 d7 00 00 00       	jmp    c0003a2f <dir_read+0x170>
c0003958:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000395b:	83 e0 3f             	and    eax,0x3f
c000395e:	80 f9 2e             	cmp    cl,0x2e
c0003961:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003965:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003968:	0f 84 8a 00 00 00    	je     c00039f8 <dir_read+0x139>
c000396e:	80 f9 e5             	cmp    cl,0xe5
c0003971:	0f 84 81 00 00 00    	je     c00039f8 <dir_read+0x139>
c0003977:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000397b:	83 e0 1f             	and    eax,0x1f
c000397e:	83 f8 08             	cmp    eax,0x8
c0003981:	0f 94 c0             	sete   al
c0003984:	0f b6 c0             	movzx  eax,al
c0003987:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000398b:	75 6b                	jne    c00039f8 <dir_read+0x139>
c000398d:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003992:	75 44                	jne    c00039d8 <dir_read+0x119>
c0003994:	f6 c1 40             	test   cl,0x40
c0003997:	74 12                	je     c00039ab <dir_read+0xec>
c0003999:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000399c:	83 e1 bf             	and    ecx,0xffffffbf
c000399f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039a3:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00039a6:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00039a9:	eb 06                	jmp    c00039b1 <dir_read+0xf2>
c00039ab:	89 f0                	mov    eax,esi
c00039ad:	38 c8                	cmp    al,cl
c00039af:	75 47                	jne    c00039f8 <dir_read+0x139>
c00039b1:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039b5:	be ff ff ff ff       	mov    esi,0xffffffff
c00039ba:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00039bd:	75 3e                	jne    c00039fd <dir_read+0x13e>
c00039bf:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039c3:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00039c6:	e8 8a e4 ff ff       	call   c0001e55 <pick_lfn>
c00039cb:	85 c0                	test   eax,eax
c00039cd:	74 2e                	je     c00039fd <dir_read+0x13e>
c00039cf:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039d3:	8d 71 ff             	lea    esi,[ecx-0x1]
c00039d6:	eb 25                	jmp    c00039fd <dir_read+0x13e>
c00039d8:	89 f0                	mov    eax,esi
c00039da:	84 c0                	test   al,al
c00039dc:	75 11                	jne    c00039ef <dir_read+0x130>
c00039de:	89 d0                	mov    eax,edx
c00039e0:	e8 2a e6 ff ff       	call   c000200f <sum_sfn>
c00039e5:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00039e9:	0f 84 31 ff ff ff    	je     c0003920 <dir_read+0x61>
c00039ef:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00039f6:	eb 37                	jmp    c0003a2f <dir_read+0x170>
c00039f8:	be ff ff ff ff       	mov    esi,0xffffffff
c00039fd:	31 d2                	xor    edx,edx
c00039ff:	89 d8                	mov    eax,ebx
c0003a01:	e8 01 fc ff ff       	call   c0003607 <dir_next>
c0003a06:	89 c5                	mov    ebp,eax
c0003a08:	85 c0                	test   eax,eax
c0003a0a:	0f 84 cd fe ff ff    	je     c00038dd <dir_read+0x1e>
c0003a10:	eb 0f                	jmp    c0003a21 <dir_read+0x162>
c0003a12:	85 ed                	test   ebp,ebp
c0003a14:	0f 84 06 ff ff ff    	je     c0003920 <dir_read+0x61>
c0003a1a:	eb 05                	jmp    c0003a21 <dir_read+0x162>
c0003a1c:	bd 04 00 00 00       	mov    ebp,0x4
c0003a21:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003a28:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003a2f:	83 c4 1c             	add    esp,0x1c
c0003a32:	89 e8                	mov    eax,ebp
c0003a34:	5b                   	pop    ebx
c0003a35:	5e                   	pop    esi
c0003a36:	5f                   	pop    edi
c0003a37:	5d                   	pop    ebp
c0003a38:	c3                   	ret    

c0003a39 <dir_alloc>:
c0003a39:	55                   	push   ebp
c0003a3a:	89 d5                	mov    ebp,edx
c0003a3c:	57                   	push   edi
c0003a3d:	31 d2                	xor    edx,edx
c0003a3f:	56                   	push   esi
c0003a40:	53                   	push   ebx
c0003a41:	89 c3                	mov    ebx,eax
c0003a43:	83 ec 0c             	sub    esp,0xc
c0003a46:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a48:	e8 62 f6 ff ff       	call   c00030af <dir_sdi>
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	75 4e                	jne    c0003a9f <dir_alloc+0x66>
c0003a51:	31 f6                	xor    esi,esi
c0003a53:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a56:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a59:	89 f8                	mov    eax,edi
c0003a5b:	e8 d1 e8 ff ff       	call   c0002331 <move_window>
c0003a60:	85 c0                	test   eax,eax
c0003a62:	75 3b                	jne    c0003a9f <dir_alloc+0x66>
c0003a64:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a67:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a6a:	8a 12                	mov    dl,BYTE PTR [edx]
c0003a6c:	75 07                	jne    c0003a75 <dir_alloc+0x3c>
c0003a6e:	f7 d2                	not    edx
c0003a70:	c0 ea 07             	shr    dl,0x7
c0003a73:	eb 0d                	jmp    c0003a82 <dir_alloc+0x49>
c0003a75:	84 d2                	test   dl,dl
c0003a77:	0f 94 c1             	sete   cl
c0003a7a:	80 fa e5             	cmp    dl,0xe5
c0003a7d:	0f 94 c2             	sete   dl
c0003a80:	09 ca                	or     edx,ecx
c0003a82:	84 d2                	test   dl,dl
c0003a84:	74 07                	je     c0003a8d <dir_alloc+0x54>
c0003a86:	46                   	inc    esi
c0003a87:	39 ee                	cmp    esi,ebp
c0003a89:	75 04                	jne    c0003a8f <dir_alloc+0x56>
c0003a8b:	eb 1c                	jmp    c0003aa9 <dir_alloc+0x70>
c0003a8d:	31 f6                	xor    esi,esi
c0003a8f:	ba 01 00 00 00       	mov    edx,0x1
c0003a94:	89 d8                	mov    eax,ebx
c0003a96:	e8 6c fb ff ff       	call   c0003607 <dir_next>
c0003a9b:	85 c0                	test   eax,eax
c0003a9d:	74 b4                	je     c0003a53 <dir_alloc+0x1a>
c0003a9f:	83 f8 04             	cmp    eax,0x4
c0003aa2:	75 05                	jne    c0003aa9 <dir_alloc+0x70>
c0003aa4:	b8 07 00 00 00       	mov    eax,0x7
c0003aa9:	83 c4 0c             	add    esp,0xc
c0003aac:	5b                   	pop    ebx
c0003aad:	5e                   	pop    esi
c0003aae:	5f                   	pop    edi
c0003aaf:	5d                   	pop    ebp
c0003ab0:	c3                   	ret    

c0003ab1 <store_xdir>:
c0003ab1:	55                   	push   ebp
c0003ab2:	57                   	push   edi
c0003ab3:	89 c7                	mov    edi,eax
c0003ab5:	56                   	push   esi
c0003ab6:	53                   	push   ebx
c0003ab7:	83 ec 0c             	sub    esp,0xc
c0003aba:	8b 00                	mov    eax,DWORD PTR [eax]
c0003abc:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003abf:	89 e8                	mov    eax,ebp
c0003ac1:	e8 5b e5 ff ff       	call   c0002021 <xdir_sum>
c0003ac6:	0f b7 d0             	movzx  edx,ax
c0003ac9:	8d 45 02             	lea    eax,[ebp+0x2]
c0003acc:	e8 f4 e0 ff ff       	call   c0001bc5 <st_word>
c0003ad1:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003ad5:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003ad8:	89 f8                	mov    eax,edi
c0003ada:	e8 d0 f5 ff ff       	call   c00030af <dir_sdi>
c0003adf:	89 c6                	mov    esi,eax
c0003ae1:	85 f6                	test   esi,esi
c0003ae3:	75 3d                	jne    c0003b22 <store_xdir+0x71>
c0003ae5:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003ae8:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003aeb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003aed:	e8 3f e8 ff ff       	call   c0002331 <move_window>
c0003af2:	89 c6                	mov    esi,eax
c0003af4:	85 c0                	test   eax,eax
c0003af6:	75 2a                	jne    c0003b22 <store_xdir+0x71>
c0003af8:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003afb:	b9 20 00 00 00       	mov    ecx,0x20
c0003b00:	89 ea                	mov    edx,ebp
c0003b02:	e8 cb e0 ff ff       	call   c0001bd2 <mem_cpy>
c0003b07:	8b 07                	mov    eax,DWORD PTR [edi]
c0003b09:	85 db                	test   ebx,ebx
c0003b0b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003b0f:	74 11                	je     c0003b22 <store_xdir+0x71>
c0003b11:	31 d2                	xor    edx,edx
c0003b13:	89 f8                	mov    eax,edi
c0003b15:	83 c5 20             	add    ebp,0x20
c0003b18:	e8 ea fa ff ff       	call   c0003607 <dir_next>
c0003b1d:	4b                   	dec    ebx
c0003b1e:	89 c6                	mov    esi,eax
c0003b20:	eb bf                	jmp    c0003ae1 <store_xdir+0x30>
c0003b22:	89 f0                	mov    eax,esi
c0003b24:	83 fe 02             	cmp    esi,0x2
c0003b27:	76 05                	jbe    c0003b2e <store_xdir+0x7d>
c0003b29:	b8 02 00 00 00       	mov    eax,0x2
c0003b2e:	83 c4 0c             	add    esp,0xc
c0003b31:	5b                   	pop    ebx
c0003b32:	5e                   	pop    esi
c0003b33:	5f                   	pop    edi
c0003b34:	5d                   	pop    ebp
c0003b35:	c3                   	ret    

c0003b36 <dir_remove>:
c0003b36:	57                   	push   edi
c0003b37:	56                   	push   esi
c0003b38:	53                   	push   ebx
c0003b39:	89 c3                	mov    ebx,eax
c0003b3b:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003b3e:	8b 30                	mov    esi,DWORD PTR [eax]
c0003b40:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003b43:	83 fa ff             	cmp    edx,0xffffffff
c0003b46:	74 09                	je     c0003b51 <dir_remove+0x1b>
c0003b48:	e8 62 f5 ff ff       	call   c00030af <dir_sdi>
c0003b4d:	85 c0                	test   eax,eax
c0003b4f:	75 41                	jne    c0003b92 <dir_remove+0x5c>
c0003b51:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b54:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b57:	89 f0                	mov    eax,esi
c0003b59:	e8 d3 e7 ff ff       	call   c0002331 <move_window>
c0003b5e:	85 c0                	test   eax,eax
c0003b60:	75 26                	jne    c0003b88 <dir_remove+0x52>
c0003b62:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b65:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003b68:	75 05                	jne    c0003b6f <dir_remove+0x39>
c0003b6a:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003b6d:	eb 03                	jmp    c0003b72 <dir_remove+0x3c>
c0003b6f:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003b72:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003b76:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003b79:	73 17                	jae    c0003b92 <dir_remove+0x5c>
c0003b7b:	31 d2                	xor    edx,edx
c0003b7d:	89 d8                	mov    eax,ebx
c0003b7f:	e8 83 fa ff ff       	call   c0003607 <dir_next>
c0003b84:	85 c0                	test   eax,eax
c0003b86:	74 c9                	je     c0003b51 <dir_remove+0x1b>
c0003b88:	83 f8 04             	cmp    eax,0x4
c0003b8b:	75 05                	jne    c0003b92 <dir_remove+0x5c>
c0003b8d:	b8 02 00 00 00       	mov    eax,0x2
c0003b92:	5b                   	pop    ebx
c0003b93:	5e                   	pop    esi
c0003b94:	5f                   	pop    edi
c0003b95:	c3                   	ret    

c0003b96 <create_name>:
c0003b96:	55                   	push   ebp
c0003b97:	89 d5                	mov    ebp,edx
c0003b99:	57                   	push   edi
c0003b9a:	89 c7                	mov    edi,eax
c0003b9c:	56                   	push   esi
c0003b9d:	31 f6                	xor    esi,esi
c0003b9f:	53                   	push   ebx
c0003ba0:	83 ec 3c             	sub    esp,0x3c
c0003ba3:	8b 02                	mov    eax,DWORD PTR [edx]
c0003ba5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ba9:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bab:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003bae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003bb2:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003bb6:	e8 72 e0 ff ff       	call   c0001c2d <tchar2uni>
c0003bbb:	89 c3                	mov    ebx,eax
c0003bbd:	83 f8 ff             	cmp    eax,0xffffffff
c0003bc0:	75 0a                	jne    c0003bcc <create_name+0x36>
c0003bc2:	b8 06 00 00 00       	mov    eax,0x6
c0003bc7:	e9 9e 02 00 00       	jmp    c0003e6a <create_name+0x2d4>
c0003bcc:	3d ff ff 00 00       	cmp    eax,0xffff
c0003bd1:	76 0c                	jbe    c0003bdf <create_name+0x49>
c0003bd3:	c1 e8 10             	shr    eax,0x10
c0003bd6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003bda:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003bde:	46                   	inc    esi
c0003bdf:	66 83 fb 1f          	cmp    bx,0x1f
c0003be3:	76 4f                	jbe    c0003c34 <create_name+0x9e>
c0003be5:	66 83 fb 5c          	cmp    bx,0x5c
c0003be9:	74 35                	je     c0003c20 <create_name+0x8a>
c0003beb:	66 83 fb 2f          	cmp    bx,0x2f
c0003bef:	74 2f                	je     c0003c20 <create_name+0x8a>
c0003bf1:	66 83 fb 7f          	cmp    bx,0x7f
c0003bf5:	77 11                	ja     c0003c08 <create_name+0x72>
c0003bf7:	0f b7 d3             	movzx  edx,bx
c0003bfa:	b8 32 36 02 c0       	mov    eax,0xc0023632
c0003bff:	e8 11 e0 ff ff       	call   c0001c15 <chk_chr>
c0003c04:	85 c0                	test   eax,eax
c0003c06:	75 ba                	jne    c0003bc2 <create_name+0x2c>
c0003c08:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003c0e:	77 b2                	ja     c0003bc2 <create_name+0x2c>
c0003c10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c14:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003c18:	46                   	inc    esi
c0003c19:	eb 97                	jmp    c0003bb2 <create_name+0x1c>
c0003c1b:	40                   	inc    eax
c0003c1c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c20:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c24:	8a 10                	mov    dl,BYTE PTR [eax]
c0003c26:	80 fa 2f             	cmp    dl,0x2f
c0003c29:	74 f0                	je     c0003c1b <create_name+0x85>
c0003c2b:	80 fa 5c             	cmp    dl,0x5c
c0003c2e:	74 eb                	je     c0003c1b <create_name+0x85>
c0003c30:	31 db                	xor    ebx,ebx
c0003c32:	eb 02                	jmp    c0003c36 <create_name+0xa0>
c0003c34:	b3 04                	mov    bl,0x4
c0003c36:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c3a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003c3d:	85 f6                	test   esi,esi
c0003c3f:	74 18                	je     c0003c59 <create_name+0xc3>
c0003c41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c45:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003c4a:	66 83 f8 20          	cmp    ax,0x20
c0003c4e:	74 06                	je     c0003c56 <create_name+0xc0>
c0003c50:	66 83 f8 2e          	cmp    ax,0x2e
c0003c54:	75 03                	jne    c0003c59 <create_name+0xc3>
c0003c56:	4e                   	dec    esi
c0003c57:	eb e4                	jmp    c0003c3d <create_name+0xa7>
c0003c59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c5d:	31 ed                	xor    ebp,ebp
c0003c5f:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003c65:	85 f6                	test   esi,esi
c0003c67:	0f 84 55 ff ff ff    	je     c0003bc2 <create_name+0x2c>
c0003c6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c71:	8d 55 01             	lea    edx,[ebp+0x1]
c0003c74:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003c78:	66 83 f8 20          	cmp    ax,0x20
c0003c7c:	75 04                	jne    c0003c82 <create_name+0xec>
c0003c7e:	89 d5                	mov    ebp,edx
c0003c80:	eb eb                	jmp    c0003c6d <create_name+0xd7>
c0003c82:	85 ed                	test   ebp,ebp
c0003c84:	75 06                	jne    c0003c8c <create_name+0xf6>
c0003c86:	66 83 f8 2e          	cmp    ax,0x2e
c0003c8a:	75 08                	jne    c0003c94 <create_name+0xfe>
c0003c8c:	83 cb 03             	or     ebx,0x3
c0003c8f:	eb 03                	jmp    c0003c94 <create_name+0xfe>
c0003c91:	4e                   	dec    esi
c0003c92:	74 0c                	je     c0003ca0 <create_name+0x10a>
c0003c94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c98:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003c9e:	75 f1                	jne    c0003c91 <create_name+0xfb>
c0003ca0:	b9 0b 00 00 00       	mov    ecx,0xb
c0003ca5:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003ca8:	ba 20 00 00 00       	mov    edx,0x20
c0003cad:	e8 35 df ff ff       	call   c0001be7 <mem_set>
c0003cb2:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003cba:	31 c9                	xor    ecx,ecx
c0003cbc:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003cc1:	8d 45 01             	lea    eax,[ebp+0x1]
c0003cc4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003cc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ccc:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003cd0:	66 85 ed             	test   bp,bp
c0003cd3:	0f 84 30 01 00 00    	je     c0003e09 <create_name+0x273>
c0003cd9:	66 83 fd 20          	cmp    bp,0x20
c0003cdd:	74 10                	je     c0003cef <create_name+0x159>
c0003cdf:	66 83 fd 2e          	cmp    bp,0x2e
c0003ce3:	75 13                	jne    c0003cf8 <create_name+0x162>
c0003ce5:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003ce9:	0f 84 6b 01 00 00    	je     c0003e5a <create_name+0x2c4>
c0003cef:	83 cb 03             	or     ebx,0x3
c0003cf2:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003cf6:	eb c9                	jmp    c0003cc1 <create_name+0x12b>
c0003cf8:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003cfc:	73 0b                	jae    c0003d09 <create_name+0x173>
c0003cfe:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d02:	75 47                	jne    c0003d4b <create_name+0x1b5>
c0003d04:	e9 51 01 00 00       	jmp    c0003e5a <create_name+0x2c4>
c0003d09:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d0e:	75 10                	jne    c0003d20 <create_name+0x18a>
c0003d10:	83 cb 03             	or     ebx,0x3
c0003d13:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d1b:	e9 e9 00 00 00       	jmp    c0003e09 <create_name+0x273>
c0003d20:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d24:	74 0d                	je     c0003d33 <create_name+0x19d>
c0003d26:	83 cb 03             	or     ebx,0x3
c0003d29:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d2d:	0f 87 d6 00 00 00    	ja     c0003e09 <create_name+0x273>
c0003d33:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003d38:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003d3c:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d44:	b9 08 00 00 00       	mov    ecx,0x8
c0003d49:	eb a7                	jmp    c0003cf2 <create_name+0x15c>
c0003d4b:	66 83 fd 7f          	cmp    bp,0x7f
c0003d4f:	76 68                	jbe    c0003db9 <create_name+0x223>
c0003d51:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003d55:	88 da                	mov    dl,bl
c0003d57:	83 ca 02             	or     edx,0x2
c0003d5a:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003d5e:	50                   	push   eax
c0003d5f:	50                   	push   eax
c0003d60:	68 b5 01 00 00       	push   0x1b5
c0003d65:	55                   	push   ebp
c0003d66:	e8 81 48 00 00       	call   c00085ec <ff_uni2oem>
c0003d6b:	83 c4 10             	add    esp,0x10
c0003d6e:	89 c5                	mov    ebp,eax
c0003d70:	a8 80                	test   al,0x80
c0003d72:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003d76:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003d7a:	74 0c                	je     c0003d88 <create_name+0x1f2>
c0003d7c:	83 e5 7f             	and    ebp,0x7f
c0003d7f:	0f b6 ad 80 35 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffdca80]
c0003d86:	eb 2a                	jmp    c0003db2 <create_name+0x21c>
c0003d88:	66 3d ff 00          	cmp    ax,0xff
c0003d8c:	76 24                	jbe    c0003db2 <create_name+0x21c>
c0003d8e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d92:	48                   	dec    eax
c0003d93:	39 c8                	cmp    eax,ecx
c0003d95:	77 0c                	ja     c0003da3 <create_name+0x20d>
c0003d97:	83 cb 03             	or     ebx,0x3
c0003d9a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003d9e:	e9 4f ff ff ff       	jmp    c0003cf2 <create_name+0x15c>
c0003da3:	89 e8                	mov    eax,ebp
c0003da5:	88 d3                	mov    bl,dl
c0003da7:	66 c1 e8 08          	shr    ax,0x8
c0003dab:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003daf:	41                   	inc    ecx
c0003db0:	eb 4b                	jmp    c0003dfd <create_name+0x267>
c0003db2:	88 d3                	mov    bl,dl
c0003db4:	66 85 ed             	test   bp,bp
c0003db7:	74 19                	je     c0003dd2 <create_name+0x23c>
c0003db9:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003dbd:	0f b7 d5             	movzx  edx,bp
c0003dc0:	b8 3b 36 02 c0       	mov    eax,0xc002363b
c0003dc5:	e8 4b de ff ff       	call   c0001c15 <chk_chr>
c0003dca:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003dce:	85 c0                	test   eax,eax
c0003dd0:	74 0a                	je     c0003ddc <create_name+0x246>
c0003dd2:	83 cb 03             	or     ebx,0x3
c0003dd5:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003dda:	eb 21                	jmp    c0003dfd <create_name+0x267>
c0003ddc:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003ddf:	66 83 f8 19          	cmp    ax,0x19
c0003de3:	77 07                	ja     c0003dec <create_name+0x256>
c0003de5:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003dea:	eb 11                	jmp    c0003dfd <create_name+0x267>
c0003dec:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003def:	66 83 f8 19          	cmp    ax,0x19
c0003df3:	77 08                	ja     c0003dfd <create_name+0x267>
c0003df5:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003dfa:	83 ed 20             	sub    ebp,0x20
c0003dfd:	89 e8                	mov    eax,ebp
c0003dff:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e03:	41                   	inc    ecx
c0003e04:	e9 e9 fe ff ff       	jmp    c0003cf2 <create_name+0x15c>
c0003e09:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003e0d:	75 04                	jne    c0003e13 <create_name+0x27d>
c0003e0f:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003e13:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003e18:	75 05                	jne    c0003e1f <create_name+0x289>
c0003e1a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e1f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e23:	83 e0 0c             	and    eax,0xc
c0003e26:	3c 0c                	cmp    al,0xc
c0003e28:	74 0b                	je     c0003e35 <create_name+0x29f>
c0003e2a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e2e:	83 e0 03             	and    eax,0x3
c0003e31:	3c 03                	cmp    al,0x3
c0003e33:	75 05                	jne    c0003e3a <create_name+0x2a4>
c0003e35:	83 cb 02             	or     ebx,0x2
c0003e38:	eb 19                	jmp    c0003e53 <create_name+0x2bd>
c0003e3a:	f6 c3 02             	test   bl,0x2
c0003e3d:	75 14                	jne    c0003e53 <create_name+0x2bd>
c0003e3f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003e44:	74 03                	je     c0003e49 <create_name+0x2b3>
c0003e46:	83 cb 10             	or     ebx,0x10
c0003e49:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003e4e:	74 03                	je     c0003e53 <create_name+0x2bd>
c0003e50:	83 cb 08             	or     ebx,0x8
c0003e53:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003e56:	31 c0                	xor    eax,eax
c0003e58:	eb 10                	jmp    c0003e6a <create_name+0x2d4>
c0003e5a:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e5f:	0f 85 ce fe ff ff    	jne    c0003d33 <create_name+0x19d>
c0003e65:	e9 a6 fe ff ff       	jmp    c0003d10 <create_name+0x17a>
c0003e6a:	83 c4 3c             	add    esp,0x3c
c0003e6d:	5b                   	pop    ebx
c0003e6e:	5e                   	pop    esi
c0003e6f:	5f                   	pop    edi
c0003e70:	5d                   	pop    ebp
c0003e71:	c3                   	ret    

c0003e72 <xname_sum>:
c0003e72:	56                   	push   esi
c0003e73:	53                   	push   ebx
c0003e74:	89 c6                	mov    esi,eax
c0003e76:	51                   	push   ecx
c0003e77:	31 db                	xor    ebx,ebx
c0003e79:	83 c6 02             	add    esi,0x2
c0003e7c:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003e80:	66 85 c0             	test   ax,ax
c0003e83:	74 1f                	je     c0003ea4 <xname_sum+0x32>
c0003e85:	83 ec 0c             	sub    esp,0xc
c0003e88:	66 d1 cb             	ror    bx,1
c0003e8b:	50                   	push   eax
c0003e8c:	e8 67 48 00 00       	call   c00086f8 <ff_wtoupper>
c0003e91:	83 c4 10             	add    esp,0x10
c0003e94:	0f b6 d0             	movzx  edx,al
c0003e97:	66 c1 e8 08          	shr    ax,0x8
c0003e9b:	01 d3                	add    ebx,edx
c0003e9d:	66 d1 cb             	ror    bx,1
c0003ea0:	01 c3                	add    ebx,eax
c0003ea2:	eb d5                	jmp    c0003e79 <xname_sum+0x7>
c0003ea4:	89 d8                	mov    eax,ebx
c0003ea6:	5a                   	pop    edx
c0003ea7:	5b                   	pop    ebx
c0003ea8:	5e                   	pop    esi
c0003ea9:	c3                   	ret    

c0003eaa <create_xdir>:
c0003eaa:	55                   	push   ebp
c0003eab:	b9 40 00 00 00       	mov    ecx,0x40
c0003eb0:	57                   	push   edi
c0003eb1:	bd 01 00 00 00       	mov    ebp,0x1
c0003eb6:	56                   	push   esi
c0003eb7:	31 ff                	xor    edi,edi
c0003eb9:	53                   	push   ebx
c0003eba:	be 40 00 00 00       	mov    esi,0x40
c0003ebf:	89 c3                	mov    ebx,eax
c0003ec1:	83 ec 1c             	sub    esp,0x1c
c0003ec4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003ec8:	31 d2                	xor    edx,edx
c0003eca:	e8 18 dd ff ff       	call   c0001be7 <mem_set>
c0003ecf:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003ed2:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003ed6:	31 c9                	xor    ecx,ecx
c0003ed8:	8d 46 01             	lea    eax,[esi+0x1]
c0003edb:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003edf:	83 c6 02             	add    esi,0x2
c0003ee2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ee6:	66 85 ed             	test   bp,bp
c0003ee9:	74 12                	je     c0003efd <create_xdir+0x53>
c0003eeb:	0f b6 c1             	movzx  eax,cl
c0003eee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003ef2:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003ef6:	66 83 fd 01          	cmp    bp,0x1
c0003efa:	80 d9 ff             	sbb    cl,0xff
c0003efd:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003f00:	0f b7 d5             	movzx  edx,bp
c0003f03:	83 c6 02             	add    esi,0x2
c0003f06:	e8 ba dc ff ff       	call   c0001bc5 <st_word>
c0003f0b:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003f11:	75 d3                	jne    c0003ee6 <create_xdir+0x3c>
c0003f13:	8d 47 01             	lea    eax,[edi+0x1]
c0003f16:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f1a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003f1e:	0f b6 c1             	movzx  eax,cl
c0003f21:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003f26:	74 07                	je     c0003f2f <create_xdir+0x85>
c0003f28:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003f2d:	eb a9                	jmp    c0003ed8 <create_xdir+0x2e>
c0003f2f:	8d 47 02             	lea    eax,[edi+0x2]
c0003f32:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003f35:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003f38:	89 d0                	mov    eax,edx
c0003f3a:	e8 33 ff ff ff       	call   c0003e72 <xname_sum>
c0003f3f:	83 c4 1c             	add    esp,0x1c
c0003f42:	0f b7 d0             	movzx  edx,ax
c0003f45:	8d 43 24             	lea    eax,[ebx+0x24]
c0003f48:	5b                   	pop    ebx
c0003f49:	5e                   	pop    esi
c0003f4a:	5f                   	pop    edi
c0003f4b:	5d                   	pop    ebp
c0003f4c:	e9 74 dc ff ff       	jmp    c0001bc5 <st_word>

c0003f51 <cmp_lfn>:
c0003f51:	55                   	push   ebp
c0003f52:	57                   	push   edi
c0003f53:	89 d7                	mov    edi,edx
c0003f55:	56                   	push   esi
c0003f56:	53                   	push   ebx
c0003f57:	83 ec 1c             	sub    esp,0x1c
c0003f5a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003f5e:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003f61:	e8 ed db ff ff       	call   c0001b53 <ld_word>
c0003f66:	66 85 c0             	test   ax,ax
c0003f69:	74 07                	je     c0003f72 <cmp_lfn+0x21>
c0003f6b:	31 c0                	xor    eax,eax
c0003f6d:	e9 9a 00 00 00       	jmp    c000400c <cmp_lfn+0xbb>
c0003f72:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003f74:	bd 01 00 00 00       	mov    ebp,0x1
c0003f79:	83 e3 3f             	and    ebx,0x3f
c0003f7c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003f84:	4b                   	dec    ebx
c0003f85:	6b db 0d             	imul   ebx,ebx,0xd
c0003f88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003f8c:	0f b6 80 00 36 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdca00]
c0003f93:	01 f8                	add    eax,edi
c0003f95:	e8 b9 db ff ff       	call   c0001b53 <ld_word>
c0003f9a:	66 85 ed             	test   bp,bp
c0003f9d:	89 c6                	mov    esi,eax
c0003f9f:	74 3c                	je     c0003fdd <cmp_lfn+0x8c>
c0003fa1:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003fa7:	77 c2                	ja     c0003f6b <cmp_lfn+0x1a>
c0003fa9:	83 ec 0c             	sub    esp,0xc
c0003fac:	0f b7 c0             	movzx  eax,ax
c0003faf:	50                   	push   eax
c0003fb0:	e8 43 47 00 00       	call   c00086f8 <ff_wtoupper>
c0003fb5:	89 c5                	mov    ebp,eax
c0003fb7:	8d 43 01             	lea    eax,[ebx+0x1]
c0003fba:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003fbe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003fc2:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003fc6:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fc9:	e8 2a 47 00 00       	call   c00086f8 <ff_wtoupper>
c0003fce:	83 c4 10             	add    esp,0x10
c0003fd1:	39 c5                	cmp    ebp,eax
c0003fd3:	75 96                	jne    c0003f6b <cmp_lfn+0x1a>
c0003fd5:	89 f5                	mov    ebp,esi
c0003fd7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003fdb:	eb 04                	jmp    c0003fe1 <cmp_lfn+0x90>
c0003fdd:	66 46                	inc    si
c0003fdf:	75 8a                	jne    c0003f6b <cmp_lfn+0x1a>
c0003fe1:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003fe5:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003fea:	75 9c                	jne    c0003f88 <cmp_lfn+0x37>
c0003fec:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003fef:	74 16                	je     c0004007 <cmp_lfn+0xb6>
c0003ff1:	66 85 ed             	test   bp,bp
c0003ff4:	74 11                	je     c0004007 <cmp_lfn+0xb6>
c0003ff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ffa:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003fff:	0f 94 c0             	sete   al
c0004002:	0f b6 c0             	movzx  eax,al
c0004005:	eb 05                	jmp    c000400c <cmp_lfn+0xbb>
c0004007:	b8 01 00 00 00       	mov    eax,0x1
c000400c:	83 c4 1c             	add    esp,0x1c
c000400f:	5b                   	pop    ebx
c0004010:	5e                   	pop    esi
c0004011:	5f                   	pop    edi
c0004012:	5d                   	pop    ebp
c0004013:	c3                   	ret    

c0004014 <dir_find>:
c0004014:	55                   	push   ebp
c0004015:	31 d2                	xor    edx,edx
c0004017:	57                   	push   edi
c0004018:	56                   	push   esi
c0004019:	53                   	push   ebx
c000401a:	89 c3                	mov    ebx,eax
c000401c:	83 ec 1c             	sub    esp,0x1c
c000401f:	8b 30                	mov    esi,DWORD PTR [eax]
c0004021:	e8 89 f0 ff ff       	call   c00030af <dir_sdi>
c0004026:	89 04 24             	mov    DWORD PTR [esp],eax
c0004029:	85 c0                	test   eax,eax
c000402b:	0f 85 9e 01 00 00    	jne    c00041cf <dir_find+0x1bb>
c0004031:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004034:	0f 85 8d 00 00 00    	jne    c00040c7 <dir_find+0xb3>
c000403a:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000403d:	e8 30 fe ff ff       	call   c0003e72 <xname_sum>
c0004042:	89 c7                	mov    edi,eax
c0004044:	31 d2                	xor    edx,edx
c0004046:	89 d8                	mov    eax,ebx
c0004048:	e8 72 f8 ff ff       	call   c00038bf <dir_read>
c000404d:	85 c0                	test   eax,eax
c000404f:	0f 85 5e 01 00 00    	jne    c00041b3 <dir_find+0x19f>
c0004055:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004058:	8d 41 24             	lea    eax,[ecx+0x24]
c000405b:	e8 f3 da ff ff       	call   c0001b53 <ld_word>
c0004060:	66 39 f8             	cmp    ax,di
c0004063:	75 df                	jne    c0004044 <dir_find+0x30>
c0004065:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004068:	31 ed                	xor    ebp,ebp
c000406a:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000406e:	ba 40 00 00 00       	mov    edx,0x40
c0004073:	89 e9                	mov    ecx,ebp
c0004075:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004079:	0f 84 42 01 00 00    	je     c00041c1 <dir_find+0x1ad>
c000407f:	f6 c2 1f             	test   dl,0x1f
c0004082:	75 03                	jne    c0004087 <dir_find+0x73>
c0004084:	83 c2 02             	add    edx,0x2
c0004087:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000408b:	89 d0                	mov    eax,edx
c000408d:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004090:	e8 be da ff ff       	call   c0001b53 <ld_word>
c0004095:	83 ec 0c             	sub    esp,0xc
c0004098:	0f b7 c0             	movzx  eax,ax
c000409b:	50                   	push   eax
c000409c:	e8 57 46 00 00       	call   c00086f8 <ff_wtoupper>
c00040a1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00040a5:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040a8:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00040ac:	89 04 24             	mov    DWORD PTR [esp],eax
c00040af:	e8 44 46 00 00       	call   c00086f8 <ff_wtoupper>
c00040b4:	83 c4 10             	add    esp,0x10
c00040b7:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00040bb:	75 87                	jne    c0004044 <dir_find+0x30>
c00040bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00040c1:	45                   	inc    ebp
c00040c2:	83 c2 02             	add    edx,0x2
c00040c5:	eb ac                	jmp    c0004073 <dir_find+0x5f>
c00040c7:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00040ce:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00040d3:	bf ff ff ff ff       	mov    edi,0xffffffff
c00040d8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00040db:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00040de:	89 f0                	mov    eax,esi
c00040e0:	e8 4c e2 ff ff       	call   c0002331 <move_window>
c00040e5:	85 c0                	test   eax,eax
c00040e7:	0f 85 c6 00 00 00    	jne    c00041b3 <dir_find+0x19f>
c00040ed:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00040f0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00040f3:	84 c9                	test   cl,cl
c00040f5:	0f 84 bd 00 00 00    	je     c00041b8 <dir_find+0x1a4>
c00040fb:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00040fe:	88 d0                	mov    al,dl
c0004100:	83 e0 3f             	and    eax,0x3f
c0004103:	80 f9 e5             	cmp    cl,0xe5
c0004106:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004109:	0f 84 87 00 00 00    	je     c0004196 <dir_find+0x182>
c000410f:	80 e2 08             	and    dl,0x8
c0004112:	74 06                	je     c000411a <dir_find+0x106>
c0004114:	3c 0f                	cmp    al,0xf
c0004116:	75 7e                	jne    c0004196 <dir_find+0x182>
c0004118:	eb 04                	jmp    c000411e <dir_find+0x10a>
c000411a:	3c 0f                	cmp    al,0xf
c000411c:	75 4c                	jne    c000416a <dir_find+0x156>
c000411e:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004122:	75 7e                	jne    c00041a2 <dir_find+0x18e>
c0004124:	f6 c1 40             	test   cl,0x40
c0004127:	74 12                	je     c000413b <dir_find+0x127>
c0004129:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000412c:	83 e1 bf             	and    ecx,0xffffffbf
c000412f:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004133:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004136:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004139:	eb 06                	jmp    c0004141 <dir_find+0x12d>
c000413b:	89 f8                	mov    eax,edi
c000413d:	38 c8                	cmp    al,cl
c000413f:	75 5c                	jne    c000419d <dir_find+0x189>
c0004141:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004145:	bf ff ff ff ff       	mov    edi,0xffffffff
c000414a:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000414d:	75 53                	jne    c00041a2 <dir_find+0x18e>
c000414f:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004153:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004156:	89 ea                	mov    edx,ebp
c0004158:	e8 f4 fd ff ff       	call   c0003f51 <cmp_lfn>
c000415d:	85 c0                	test   eax,eax
c000415f:	74 41                	je     c00041a2 <dir_find+0x18e>
c0004161:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004165:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004168:	eb 38                	jmp    c00041a2 <dir_find+0x18e>
c000416a:	89 f8                	mov    eax,edi
c000416c:	84 c0                	test   al,al
c000416e:	75 0d                	jne    c000417d <dir_find+0x169>
c0004170:	89 e8                	mov    eax,ebp
c0004172:	e8 98 de ff ff       	call   c000200f <sum_sfn>
c0004177:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000417b:	74 52                	je     c00041cf <dir_find+0x1bb>
c000417d:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004181:	75 13                	jne    c0004196 <dir_find+0x182>
c0004183:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004186:	b9 0b 00 00 00       	mov    ecx,0xb
c000418b:	89 e8                	mov    eax,ebp
c000418d:	e8 60 da ff ff       	call   c0001bf2 <mem_cmp>
c0004192:	85 c0                	test   eax,eax
c0004194:	74 39                	je     c00041cf <dir_find+0x1bb>
c0004196:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c000419d:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041a2:	31 d2                	xor    edx,edx
c00041a4:	89 d8                	mov    eax,ebx
c00041a6:	e8 5c f4 ff ff       	call   c0003607 <dir_next>
c00041ab:	85 c0                	test   eax,eax
c00041ad:	0f 84 25 ff ff ff    	je     c00040d8 <dir_find+0xc4>
c00041b3:	89 04 24             	mov    DWORD PTR [esp],eax
c00041b6:	eb 17                	jmp    c00041cf <dir_find+0x1bb>
c00041b8:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00041bf:	eb 0e                	jmp    c00041cf <dir_find+0x1bb>
c00041c1:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041c4:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00041c9:	0f 85 75 fe ff ff    	jne    c0004044 <dir_find+0x30>
c00041cf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00041d2:	83 c4 1c             	add    esp,0x1c
c00041d5:	5b                   	pop    ebx
c00041d6:	5e                   	pop    esi
c00041d7:	5f                   	pop    edi
c00041d8:	5d                   	pop    ebp
c00041d9:	c3                   	ret    

c00041da <dir_register>:
c00041da:	55                   	push   ebp
c00041db:	57                   	push   edi
c00041dc:	56                   	push   esi
c00041dd:	be 06 00 00 00       	mov    esi,0x6
c00041e2:	53                   	push   ebx
c00041e3:	83 ec 6c             	sub    esp,0x6c
c00041e6:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00041ea:	0f 85 62 02 00 00    	jne    c0004452 <dir_register+0x278>
c00041f0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00041f2:	31 ff                	xor    edi,edi
c00041f4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041f7:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00041fc:	74 03                	je     c0004201 <dir_register+0x27>
c00041fe:	47                   	inc    edi
c00041ff:	eb f6                	jmp    c00041f7 <dir_register+0x1d>
c0004201:	89 c3                	mov    ebx,eax
c0004203:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004207:	0f 85 e1 00 00 00    	jne    c00042ee <dir_register+0x114>
c000420d:	83 c7 0e             	add    edi,0xe
c0004210:	b9 0f 00 00 00       	mov    ecx,0xf
c0004215:	89 f8                	mov    eax,edi
c0004217:	31 d2                	xor    edx,edx
c0004219:	f7 f1                	div    ecx
c000421b:	8d 50 02             	lea    edx,[eax+0x2]
c000421e:	89 c7                	mov    edi,eax
c0004220:	89 d8                	mov    eax,ebx
c0004222:	e8 12 f8 ff ff       	call   c0003a39 <dir_alloc>
c0004227:	89 c6                	mov    esi,eax
c0004229:	85 c0                	test   eax,eax
c000422b:	0f 85 21 02 00 00    	jne    c0004452 <dir_register+0x278>
c0004231:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004237:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000423a:	c1 e7 05             	shl    edi,0x5
c000423d:	29 f8                	sub    eax,edi
c000423f:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004242:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004245:	a8 04                	test   al,0x4
c0004247:	0f 84 91 00 00 00    	je     c00042de <dir_register+0x104>
c000424d:	83 e0 fb             	and    eax,0xfffffffb
c0004250:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004253:	89 d8                	mov    eax,ebx
c0004255:	e8 25 ec ff ff       	call   c0002e7f <fill_first_frag>
c000425a:	85 c0                	test   eax,eax
c000425c:	0f 85 ee 01 00 00    	jne    c0004450 <dir_register+0x276>
c0004262:	83 c9 ff             	or     ecx,0xffffffff
c0004265:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004268:	89 d8                	mov    eax,ebx
c000426a:	e8 db eb ff ff       	call   c0002e4a <fill_last_frag>
c000426f:	85 c0                	test   eax,eax
c0004271:	0f 85 d9 01 00 00    	jne    c0004450 <dir_register+0x276>
c0004277:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000427b:	74 61                	je     c00042de <dir_register+0x104>
c000427d:	89 da                	mov    edx,ebx
c000427f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004283:	e8 ea f5 ff ff       	call   c0003872 <load_obj_xdir>
c0004288:	85 c0                	test   eax,eax
c000428a:	0f 85 c0 01 00 00    	jne    c0004450 <dir_register+0x276>
c0004290:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004294:	31 c9                	xor    ecx,ecx
c0004296:	c1 e2 09             	shl    edx,0x9
c0004299:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c000429c:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c000429f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00042a2:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00042a5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042a8:	83 c0 38             	add    eax,0x38
c00042ab:	e8 1c d9 ff ff       	call   c0001bcc <st_qword>
c00042b0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042b3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00042b6:	83 c0 28             	add    eax,0x28
c00042b9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00042bc:	e8 0b d9 ff ff       	call   c0001bcc <st_qword>
c00042c1:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00042c4:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00042c7:	83 c8 01             	or     eax,0x1
c00042ca:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00042cd:	8d 44 24 14          	lea    eax,[esp+0x14]
c00042d1:	e8 db f7 ff ff       	call   c0003ab1 <store_xdir>
c00042d6:	85 c0                	test   eax,eax
c00042d8:	0f 85 72 01 00 00    	jne    c0004450 <dir_register+0x276>
c00042de:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042e1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042e4:	e8 c1 fb ff ff       	call   c0003eaa <create_xdir>
c00042e9:	e9 64 01 00 00       	jmp    c0004452 <dir_register+0x278>
c00042ee:	8d 40 3c             	lea    eax,[eax+0x3c]
c00042f1:	b9 0c 00 00 00       	mov    ecx,0xc
c00042f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00042fa:	89 c2                	mov    edx,eax
c00042fc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004300:	e8 cd d8 ff ff       	call   c0001bd2 <mem_cpy>
c0004305:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c000430a:	74 58                	je     c0004364 <dir_register+0x18a>
c000430c:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004310:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004318:	83 ec 0c             	sub    esp,0xc
c000431b:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000431e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004322:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004326:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000432a:	e8 24 dc ff ff       	call   c0001f53 <gen_numname>
c000432f:	89 d8                	mov    eax,ebx
c0004331:	e8 de fc ff ff       	call   c0004014 <dir_find>
c0004336:	83 c4 10             	add    esp,0x10
c0004339:	89 c6                	mov    esi,eax
c000433b:	85 c0                	test   eax,eax
c000433d:	75 15                	jne    c0004354 <dir_register+0x17a>
c000433f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004343:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004348:	75 ce                	jne    c0004318 <dir_register+0x13e>
c000434a:	be 07 00 00 00       	mov    esi,0x7
c000434f:	e9 fe 00 00 00       	jmp    c0004452 <dir_register+0x278>
c0004354:	83 f8 04             	cmp    eax,0x4
c0004357:	0f 85 f5 00 00 00    	jne    c0004452 <dir_register+0x278>
c000435d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004361:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004364:	b9 01 00 00 00       	mov    ecx,0x1
c0004369:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000436e:	74 0f                	je     c000437f <dir_register+0x1a5>
c0004370:	b9 0d 00 00 00       	mov    ecx,0xd
c0004375:	8d 47 0c             	lea    eax,[edi+0xc]
c0004378:	31 d2                	xor    edx,edx
c000437a:	f7 f1                	div    ecx
c000437c:	8d 48 01             	lea    ecx,[eax+0x1]
c000437f:	89 ca                	mov    edx,ecx
c0004381:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004385:	89 d8                	mov    eax,ebx
c0004387:	e8 ad f6 ff ff       	call   c0003a39 <dir_alloc>
c000438c:	89 c6                	mov    esi,eax
c000438e:	85 c0                	test   eax,eax
c0004390:	0f 85 bc 00 00 00    	jne    c0004452 <dir_register+0x278>
c0004396:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000439a:	49                   	dec    ecx
c000439b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000439f:	74 6a                	je     c000440b <dir_register+0x231>
c00043a1:	89 c8                	mov    eax,ecx
c00043a3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043a6:	c1 e0 05             	shl    eax,0x5
c00043a9:	29 c2                	sub    edx,eax
c00043ab:	89 d8                	mov    eax,ebx
c00043ad:	e8 fd ec ff ff       	call   c00030af <dir_sdi>
c00043b2:	89 c6                	mov    esi,eax
c00043b4:	85 c0                	test   eax,eax
c00043b6:	0f 85 96 00 00 00    	jne    c0004452 <dir_register+0x278>
c00043bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00043c0:	e8 4a dc ff ff       	call   c000200f <sum_sfn>
c00043c5:	0f b6 f8             	movzx  edi,al
c00043c8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00043cb:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00043ce:	89 e8                	mov    eax,ebp
c00043d0:	e8 5c df ff ff       	call   c0002331 <move_window>
c00043d5:	89 c6                	mov    esi,eax
c00043d7:	85 c0                	test   eax,eax
c00043d9:	75 77                	jne    c0004452 <dir_register+0x278>
c00043db:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00043e0:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00043e3:	83 ec 0c             	sub    esp,0xc
c00043e6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00043e9:	57                   	push   edi
c00043ea:	e8 e0 da ff ff       	call   c0001ecf <put_lfn>
c00043ef:	31 d2                	xor    edx,edx
c00043f1:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00043f5:	89 d8                	mov    eax,ebx
c00043f7:	e8 0b f2 ff ff       	call   c0003607 <dir_next>
c00043fc:	83 c4 10             	add    esp,0x10
c00043ff:	89 c6                	mov    esi,eax
c0004401:	85 c0                	test   eax,eax
c0004403:	75 4d                	jne    c0004452 <dir_register+0x278>
c0004405:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004409:	75 bd                	jne    c00043c8 <dir_register+0x1ee>
c000440b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000440e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004411:	89 e8                	mov    eax,ebp
c0004413:	e8 19 df ff ff       	call   c0002331 <move_window>
c0004418:	89 c6                	mov    esi,eax
c000441a:	85 c0                	test   eax,eax
c000441c:	75 34                	jne    c0004452 <dir_register+0x278>
c000441e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004421:	b9 20 00 00 00       	mov    ecx,0x20
c0004426:	31 d2                	xor    edx,edx
c0004428:	e8 ba d7 ff ff       	call   c0001be7 <mem_set>
c000442d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004430:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004434:	b9 0b 00 00 00       	mov    ecx,0xb
c0004439:	e8 94 d7 ff ff       	call   c0001bd2 <mem_cpy>
c000443e:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004441:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004444:	83 e0 18             	and    eax,0x18
c0004447:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000444a:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000444e:	eb 02                	jmp    c0004452 <dir_register+0x278>
c0004450:	89 c6                	mov    esi,eax
c0004452:	83 c4 6c             	add    esp,0x6c
c0004455:	89 f0                	mov    eax,esi
c0004457:	5b                   	pop    ebx
c0004458:	5e                   	pop    esi
c0004459:	5f                   	pop    edi
c000445a:	5d                   	pop    ebp
c000445b:	c3                   	ret    

c000445c <sync_fs>:
c000445c:	56                   	push   esi
c000445d:	53                   	push   ebx
c000445e:	53                   	push   ebx
c000445f:	89 c3                	mov    ebx,eax
c0004461:	e8 37 de ff ff       	call   c000229d <sync_window>
c0004466:	85 c0                	test   eax,eax
c0004468:	0f 85 b1 00 00 00    	jne    c000451f <sync_fs+0xc3>
c000446e:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004471:	0f 85 8e 00 00 00    	jne    c0004505 <sync_fs+0xa9>
c0004477:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000447b:	0f 85 84 00 00 00    	jne    c0004505 <sync_fs+0xa9>
c0004481:	b9 00 02 00 00       	mov    ecx,0x200
c0004486:	8d 73 54             	lea    esi,[ebx+0x54]
c0004489:	31 d2                	xor    edx,edx
c000448b:	89 f0                	mov    eax,esi
c000448d:	e8 55 d7 ff ff       	call   c0001be7 <mem_set>
c0004492:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0004498:	ba 55 aa 00 00       	mov    edx,0xaa55
c000449d:	e8 23 d7 ff ff       	call   c0001bc5 <st_word>
c00044a2:	ba 52 52 61 41       	mov    edx,0x41615252
c00044a7:	89 f0                	mov    eax,esi
c00044a9:	e8 1b d7 ff ff       	call   c0001bc9 <st_dword>
c00044ae:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00044b4:	ba 72 72 41 61       	mov    edx,0x61417272
c00044b9:	e8 0b d7 ff ff       	call   c0001bc9 <st_dword>
c00044be:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00044c1:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00044c7:	e8 fd d6 ff ff       	call   c0001bc9 <st_dword>
c00044cc:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00044cf:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00044d5:	e8 ef d6 ff ff       	call   c0001bc9 <st_dword>
c00044da:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00044dd:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044e0:	83 c0 01             	add    eax,0x1
c00044e3:	83 d2 00             	adc    edx,0x0
c00044e6:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00044e9:	83 ec 0c             	sub    esp,0xc
c00044ec:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00044ef:	6a 01                	push   0x1
c00044f1:	52                   	push   edx
c00044f2:	50                   	push   eax
c00044f3:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00044f7:	56                   	push   esi
c00044f8:	50                   	push   eax
c00044f9:	e8 20 d6 ff ff       	call   c0001b1e <disk_write>
c00044fe:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004502:	83 c4 20             	add    esp,0x20
c0004505:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004509:	51                   	push   ecx
c000450a:	6a 00                	push   0x0
c000450c:	6a 00                	push   0x0
c000450e:	50                   	push   eax
c000450f:	e8 20 d6 ff ff       	call   c0001b34 <disk_ioctl>
c0004514:	83 c4 10             	add    esp,0x10
c0004517:	85 c0                	test   eax,eax
c0004519:	0f 95 c0             	setne  al
c000451c:	0f b6 c0             	movzx  eax,al
c000451f:	5a                   	pop    edx
c0004520:	5b                   	pop    ebx
c0004521:	5e                   	pop    esi
c0004522:	c3                   	ret    

c0004523 <create_partition>:
c0004523:	55                   	push   ebp
c0004524:	0f b6 c0             	movzx  eax,al
c0004527:	57                   	push   edi
c0004528:	56                   	push   esi
c0004529:	53                   	push   ebx
c000452a:	83 ec 60             	sub    esp,0x60
c000452d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004531:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004535:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004539:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000453d:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004541:	50                   	push   eax
c0004542:	6a 01                	push   0x1
c0004544:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004548:	e8 e7 d5 ff ff       	call   c0001b34 <disk_ioctl>
c000454d:	83 c4 10             	add    esp,0x10
c0004550:	85 c0                	test   eax,eax
c0004552:	74 0a                	je     c000455e <create_partition+0x3b>
c0004554:	b8 01 00 00 00       	mov    eax,0x1
c0004559:	e9 67 05 00 00       	jmp    c0004ac5 <create_partition+0x5a2>
c000455e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004562:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004566:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000456a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000456e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004573:	0f 86 ed 03 00 00    	jbe    c0004966 <create_partition+0x443>
c0004579:	83 c0 df             	add    eax,0xffffffdf
c000457c:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004584:	83 d2 ff             	adc    edx,0xffffffff
c0004587:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000458b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000458f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004593:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004597:	83 c0 bd             	add    eax,0xffffffbd
c000459a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00045a1:	83 d2 ff             	adc    edx,0xffffffff
c00045a4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00045a8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00045ac:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00045b4:	be 22 00 00 00       	mov    esi,0x22
c00045b9:	31 ff                	xor    edi,edi
c00045bb:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00045c3:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00045cb:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00045d3:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00045d7:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00045dd:	75 0e                	jne    c00045ed <create_partition+0xca>
c00045df:	b9 00 02 00 00       	mov    ecx,0x200
c00045e4:	31 d2                	xor    edx,edx
c00045e6:	89 d8                	mov    eax,ebx
c00045e8:	e8 fa d5 ff ff       	call   c0001be7 <mem_set>
c00045ed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00045f1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00045f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00045f9:	0b 04 24             	or     eax,DWORD PTR [esp]
c00045fc:	0f 84 23 01 00 00    	je     c0004725 <create_partition+0x202>
c0004602:	89 f0                	mov    eax,esi
c0004604:	89 fa                	mov    edx,edi
c0004606:	05 ff 07 00 00       	add    eax,0x7ff
c000460b:	83 d2 00             	adc    edx,0x0
c000460e:	89 c1                	mov    ecx,eax
c0004610:	89 d7                	mov    edi,edx
c0004612:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004618:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000461c:	89 ce                	mov    esi,ecx
c000461e:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004622:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004626:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c000462a:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000462d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004631:	89 04 24             	mov    DWORD PTR [esp],eax
c0004634:	b8 64 00 00 00       	mov    eax,0x64
c0004639:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000463c:	b8 00 00 00 00       	mov    eax,0x0
c0004641:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004645:	72 41                	jb     c0004688 <create_partition+0x165>
c0004647:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000464b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000464f:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004653:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004658:	01 c1                	add    ecx,eax
c000465a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000465e:	f7 24 24             	mul    DWORD PTR [esp]
c0004661:	6a 00                	push   0x0
c0004663:	01 ca                	add    edx,ecx
c0004665:	6a 64                	push   0x64
c0004667:	52                   	push   edx
c0004668:	50                   	push   eax
c0004669:	e8 f2 df 01 00       	call   c0022660 <__udivdi3>
c000466e:	83 c4 10             	add    esp,0x10
c0004671:	05 ff 07 00 00       	add    eax,0x7ff
c0004676:	83 d2 00             	adc    edx,0x0
c0004679:	89 c1                	mov    ecx,eax
c000467b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000467f:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004685:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004688:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000468b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000468f:	01 f0                	add    eax,esi
c0004691:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004695:	11 fa                	adc    edx,edi
c0004697:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000469b:	19 d1                	sbb    ecx,edx
c000469d:	73 2e                	jae    c00046cd <create_partition+0x1aa>
c000469f:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00046a3:	89 f8                	mov    eax,edi
c00046a5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00046ac:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00046b0:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046b8:	73 6b                	jae    c0004725 <create_partition+0x202>
c00046ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00046be:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00046c2:	29 f0                	sub    eax,esi
c00046c4:	19 fa                	sbb    edx,edi
c00046c6:	89 04 24             	mov    DWORD PTR [esp],eax
c00046c9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00046cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046d1:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046d4:	74 4f                	je     c0004725 <create_partition+0x202>
c00046d6:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00046d9:	b9 10 00 00 00       	mov    ecx,0x10
c00046de:	ba 10 36 02 c0       	mov    edx,0xc0023610
c00046e3:	e8 ea d4 ff ff       	call   c0001bd2 <mem_cpy>
c00046e8:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00046ec:	b9 10 00 00 00       	mov    ecx,0x10
c00046f1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00046f5:	e8 2c db ff ff       	call   c0002226 <make_rand>
c00046fa:	89 f2                	mov    edx,esi
c00046fc:	89 f9                	mov    ecx,edi
c00046fe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004702:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004706:	e8 c1 d4 ff ff       	call   c0001bcc <st_qword>
c000470b:	03 34 24             	add    esi,DWORD PTR [esp]
c000470e:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004712:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004716:	89 f2                	mov    edx,esi
c0004718:	89 f9                	mov    ecx,edi
c000471a:	83 c2 ff             	add    edx,0xffffffff
c000471d:	83 d1 ff             	adc    ecx,0xffffffff
c0004720:	e8 a7 d4 ff ff       	call   c0001bcc <st_qword>
c0004725:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004729:	83 e8 80             	sub    eax,0xffffff80
c000472c:	89 c5                	mov    ebp,eax
c000472e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004732:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004738:	75 6b                	jne    c00047a5 <create_partition+0x282>
c000473a:	45                   	inc    ebp
c000473b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000473f:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004744:	e8 39 da ff ff       	call   c0002182 <crc32>
c0004749:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000474f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004753:	75 e5                	jne    c000473a <create_partition+0x217>
c0004755:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004759:	31 d2                	xor    edx,edx
c000475b:	83 ec 0c             	sub    esp,0xc
c000475e:	c1 ed 09             	shr    ebp,0x9
c0004761:	6a 01                	push   0x1
c0004763:	8d 45 02             	lea    eax,[ebp+0x2]
c0004766:	52                   	push   edx
c0004767:	50                   	push   eax
c0004768:	53                   	push   ebx
c0004769:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000476d:	e8 ac d3 ff ff       	call   c0001b1e <disk_write>
c0004772:	83 c4 20             	add    esp,0x20
c0004775:	85 c0                	test   eax,eax
c0004777:	0f 85 d7 fd ff ff    	jne    c0004554 <create_partition+0x31>
c000477d:	83 ec 0c             	sub    esp,0xc
c0004780:	31 d2                	xor    edx,edx
c0004782:	6a 01                	push   0x1
c0004784:	89 e8                	mov    eax,ebp
c0004786:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000478a:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000478e:	52                   	push   edx
c000478f:	50                   	push   eax
c0004790:	53                   	push   ebx
c0004791:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004795:	e8 84 d3 ff ff       	call   c0001b1e <disk_write>
c000479a:	83 c4 20             	add    esp,0x20
c000479d:	85 c0                	test   eax,eax
c000479f:	0f 85 af fd ff ff    	jne    c0004554 <create_partition+0x31>
c00047a5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00047a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00047ad:	3d 00 40 00 00       	cmp    eax,0x4000
c00047b2:	74 0d                	je     c00047c1 <create_partition+0x29e>
c00047b4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00047b8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00047bc:	e9 12 fe ff ff       	jmp    c00045d3 <create_partition+0xb0>
c00047c1:	31 d2                	xor    edx,edx
c00047c3:	b9 00 02 00 00       	mov    ecx,0x200
c00047c8:	89 d8                	mov    eax,ebx
c00047ca:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00047cd:	e8 15 d4 ff ff       	call   c0001be7 <mem_set>
c00047d2:	8d 7b 48             	lea    edi,[ebx+0x48]
c00047d5:	b9 10 00 00 00       	mov    ecx,0x10
c00047da:	ba 00 35 02 c0       	mov    edx,0xc0023500
c00047df:	89 d8                	mov    eax,ebx
c00047e1:	e8 ec d3 ff ff       	call   c0001bd2 <mem_cpy>
c00047e6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00047ea:	8d 43 58             	lea    eax,[ebx+0x58]
c00047ed:	f7 d2                	not    edx
c00047ef:	e8 d5 d3 ff ff       	call   c0001bc9 <st_dword>
c00047f4:	8d 43 18             	lea    eax,[ebx+0x18]
c00047f7:	31 c9                	xor    ecx,ecx
c00047f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00047fc:	ba 01 00 00 00       	mov    edx,0x1
c0004801:	e8 c6 d3 ff ff       	call   c0001bcc <st_qword>
c0004806:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000480a:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000480e:	83 c2 ff             	add    edx,0xffffffff
c0004811:	89 e8                	mov    eax,ebp
c0004813:	83 d1 ff             	adc    ecx,0xffffffff
c0004816:	e8 b1 d3 ff ff       	call   c0001bcc <st_qword>
c000481b:	31 c9                	xor    ecx,ecx
c000481d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004820:	ba 22 00 00 00       	mov    edx,0x22
c0004825:	e8 a2 d3 ff ff       	call   c0001bcc <st_qword>
c000482a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000482e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004832:	83 c2 de             	add    edx,0xffffffde
c0004835:	8d 43 30             	lea    eax,[ebx+0x30]
c0004838:	83 d1 ff             	adc    ecx,0xffffffff
c000483b:	31 f6                	xor    esi,esi
c000483d:	e8 8a d3 ff ff       	call   c0001bcc <st_qword>
c0004842:	8d 43 54             	lea    eax,[ebx+0x54]
c0004845:	ba 80 00 00 00       	mov    edx,0x80
c000484a:	e8 7a d3 ff ff       	call   c0001bc9 <st_dword>
c000484f:	8d 43 50             	lea    eax,[ebx+0x50]
c0004852:	ba 80 00 00 00       	mov    edx,0x80
c0004857:	e8 6d d3 ff ff       	call   c0001bc9 <st_dword>
c000485c:	ba 02 00 00 00       	mov    edx,0x2
c0004861:	89 f8                	mov    eax,edi
c0004863:	e8 61 d3 ff ff       	call   c0001bc9 <st_dword>
c0004868:	8d 53 38             	lea    edx,[ebx+0x38]
c000486b:	b9 10 00 00 00       	mov    ecx,0x10
c0004870:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004874:	e8 ad d9 ff ff       	call   c0002226 <make_rand>
c0004879:	83 c8 ff             	or     eax,0xffffffff
c000487c:	46                   	inc    esi
c000487d:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004882:	e8 fb d8 ff ff       	call   c0002182 <crc32>
c0004887:	83 fe 5c             	cmp    esi,0x5c
c000488a:	75 f0                	jne    c000487c <create_partition+0x359>
c000488c:	f7 d0                	not    eax
c000488e:	8d 73 10             	lea    esi,[ebx+0x10]
c0004891:	89 c2                	mov    edx,eax
c0004893:	89 f0                	mov    eax,esi
c0004895:	e8 2f d3 ff ff       	call   c0001bc9 <st_dword>
c000489a:	83 ec 0c             	sub    esp,0xc
c000489d:	6a 01                	push   0x1
c000489f:	6a 00                	push   0x0
c00048a1:	6a 01                	push   0x1
c00048a3:	53                   	push   ebx
c00048a4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048a8:	e8 71 d2 ff ff       	call   c0001b1e <disk_write>
c00048ad:	83 c4 20             	add    esp,0x20
c00048b0:	85 c0                	test   eax,eax
c00048b2:	0f 85 9c fc ff ff    	jne    c0004554 <create_partition+0x31>
c00048b8:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048bc:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048c0:	83 c2 ff             	add    edx,0xffffffff
c00048c3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00048c6:	83 d1 ff             	adc    ecx,0xffffffff
c00048c9:	e8 fe d2 ff ff       	call   c0001bcc <st_qword>
c00048ce:	ba 01 00 00 00       	mov    edx,0x1
c00048d3:	31 c9                	xor    ecx,ecx
c00048d5:	89 e8                	mov    eax,ebp
c00048d7:	e8 f0 d2 ff ff       	call   c0001bcc <st_qword>
c00048dc:	89 f8                	mov    eax,edi
c00048de:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00048e2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00048e6:	31 ff                	xor    edi,edi
c00048e8:	e8 df d2 ff ff       	call   c0001bcc <st_qword>
c00048ed:	89 f0                	mov    eax,esi
c00048ef:	31 d2                	xor    edx,edx
c00048f1:	e8 d3 d2 ff ff       	call   c0001bc9 <st_dword>
c00048f6:	83 c8 ff             	or     eax,0xffffffff
c00048f9:	47                   	inc    edi
c00048fa:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00048ff:	e8 7e d8 ff ff       	call   c0002182 <crc32>
c0004904:	83 ff 5c             	cmp    edi,0x5c
c0004907:	75 f0                	jne    c00048f9 <create_partition+0x3d6>
c0004909:	f7 d0                	not    eax
c000490b:	89 c2                	mov    edx,eax
c000490d:	89 f0                	mov    eax,esi
c000490f:	e8 b5 d2 ff ff       	call   c0001bc9 <st_dword>
c0004914:	83 ec 0c             	sub    esp,0xc
c0004917:	6a 01                	push   0x1
c0004919:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000491d:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004921:	83 c0 ff             	add    eax,0xffffffff
c0004924:	83 d2 ff             	adc    edx,0xffffffff
c0004927:	52                   	push   edx
c0004928:	50                   	push   eax
c0004929:	53                   	push   ebx
c000492a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000492e:	e8 eb d1 ff ff       	call   c0001b1e <disk_write>
c0004933:	83 c4 20             	add    esp,0x20
c0004936:	85 c0                	test   eax,eax
c0004938:	0f 85 16 fc ff ff    	jne    c0004554 <create_partition+0x31>
c000493e:	31 d2                	xor    edx,edx
c0004940:	89 d8                	mov    eax,ebx
c0004942:	b9 00 02 00 00       	mov    ecx,0x200
c0004947:	e8 9b d2 ff ff       	call   c0001be7 <mem_set>
c000494c:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004952:	b9 10 00 00 00       	mov    ecx,0x10
c0004957:	ba 10 35 02 c0       	mov    edx,0xc0023510
c000495c:	e8 71 d2 ff ff       	call   c0001bd2 <mem_cpy>
c0004961:	e9 21 01 00 00       	jmp    c0004a87 <create_partition+0x564>
c0004966:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000496a:	b9 05 00 00 00       	mov    ecx,0x5
c000496f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004972:	bf 08 00 00 00       	mov    edi,0x8
c0004977:	89 f8                	mov    eax,edi
c0004979:	31 d2                	xor    edx,edx
c000497b:	0f b6 f0             	movzx  esi,al
c000497e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004981:	f7 f6                	div    esi
c0004983:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004988:	76 0a                	jbe    c0004994 <create_partition+0x471>
c000498a:	d1 e7                	shl    edi,1
c000498c:	49                   	dec    ecx
c000498d:	75 e8                	jne    c0004977 <create_partition+0x454>
c000498f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004994:	b9 00 02 00 00       	mov    ecx,0x200
c0004999:	31 d2                	xor    edx,edx
c000499b:	89 d8                	mov    eax,ebx
c000499d:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00049a3:	e8 3f d2 ff ff       	call   c0001be7 <mem_set>
c00049a8:	b9 64 00 00 00       	mov    ecx,0x64
c00049ad:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049b0:	31 d2                	xor    edx,edx
c00049b2:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00049ba:	f7 f1                	div    ecx
c00049bc:	b9 3f 00 00 00       	mov    ecx,0x3f
c00049c1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00049c5:	89 f8                	mov    eax,edi
c00049c7:	0f b6 c0             	movzx  eax,al
c00049ca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00049ce:	e9 80 00 00 00       	jmp    c0004a53 <create_partition+0x530>
c00049d3:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00049d6:	29 cf                	sub    edi,ecx
c00049d8:	89 ca                	mov    edx,ecx
c00049da:	89 f0                	mov    eax,esi
c00049dc:	bd 3f 00 00 00       	mov    ebp,0x3f
c00049e1:	e8 e3 d1 ff ff       	call   c0001bc9 <st_dword>
c00049e6:	8d 46 04             	lea    eax,[esi+0x4]
c00049e9:	89 fa                	mov    edx,edi
c00049eb:	83 c6 10             	add    esi,0x10
c00049ee:	e8 d6 d1 ff ff       	call   c0001bc9 <st_dword>
c00049f3:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00049f7:	31 d2                	xor    edx,edx
c00049f9:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c00049fc:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004a00:	89 c8                	mov    eax,ecx
c0004a02:	01 f9                	add    ecx,edi
c0004a04:	f7 f5                	div    ebp
c0004a06:	89 d5                	mov    ebp,edx
c0004a08:	31 d2                	xor    edx,edx
c0004a0a:	45                   	inc    ebp
c0004a0b:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a0f:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004a12:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004a15:	89 c2                	mov    edx,eax
c0004a17:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004a1a:	c1 ea 02             	shr    edx,0x2
c0004a1d:	83 e2 c0             	and    edx,0xffffffc0
c0004a20:	09 ea                	or     edx,ebp
c0004a22:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004a27:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004a2a:	31 d2                	xor    edx,edx
c0004a2c:	f7 f5                	div    ebp
c0004a2e:	89 d7                	mov    edi,edx
c0004a30:	31 d2                	xor    edx,edx
c0004a32:	47                   	inc    edi
c0004a33:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a37:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004a3a:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004a3d:	89 c5                	mov    ebp,eax
c0004a3f:	c1 ed 02             	shr    ebp,0x2
c0004a42:	83 e5 c0             	and    ebp,0xffffffc0
c0004a45:	09 ef                	or     edi,ebp
c0004a47:	89 fa                	mov    edx,edi
c0004a49:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004a4c:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004a51:	74 34                	je     c0004a87 <create_partition+0x564>
c0004a53:	85 c9                	test   ecx,ecx
c0004a55:	74 30                	je     c0004a87 <create_partition+0x564>
c0004a57:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004a5a:	76 2b                	jbe    c0004a87 <create_partition+0x564>
c0004a5c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004a60:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004a64:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004a67:	83 ff 64             	cmp    edi,0x64
c0004a6a:	76 4b                	jbe    c0004ab7 <create_partition+0x594>
c0004a6c:	89 f8                	mov    eax,edi
c0004a6e:	01 c8                	add    eax,ecx
c0004a70:	0f 82 5d ff ff ff    	jb     c00049d3 <create_partition+0x4b0>
c0004a76:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004a79:	0f 87 54 ff ff ff    	ja     c00049d3 <create_partition+0x4b0>
c0004a7f:	85 ff                	test   edi,edi
c0004a81:	0f 85 51 ff ff ff    	jne    c00049d8 <create_partition+0x4b5>
c0004a87:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004a8d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004a92:	e8 2e d1 ff ff       	call   c0001bc5 <st_word>
c0004a97:	83 ec 0c             	sub    esp,0xc
c0004a9a:	6a 01                	push   0x1
c0004a9c:	6a 00                	push   0x0
c0004a9e:	6a 00                	push   0x0
c0004aa0:	53                   	push   ebx
c0004aa1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004aa5:	e8 74 d0 ff ff       	call   c0001b1e <disk_write>
c0004aaa:	83 c4 20             	add    esp,0x20
c0004aad:	85 c0                	test   eax,eax
c0004aaf:	0f 95 c0             	setne  al
c0004ab2:	0f b6 c0             	movzx  eax,al
c0004ab5:	eb 0e                	jmp    c0004ac5 <create_partition+0x5a2>
c0004ab7:	74 07                	je     c0004ac0 <create_partition+0x59d>
c0004ab9:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004abe:	eb ac                	jmp    c0004a6c <create_partition+0x549>
c0004ac0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004ac3:	eb a7                	jmp    c0004a6c <create_partition+0x549>
c0004ac5:	83 c4 5c             	add    esp,0x5c
c0004ac8:	5b                   	pop    ebx
c0004ac9:	5e                   	pop    esi
c0004aca:	5f                   	pop    edi
c0004acb:	5d                   	pop    ebp
c0004acc:	c3                   	ret    

c0004acd <get_fileinfo>:
c0004acd:	55                   	push   ebp
c0004ace:	57                   	push   edi
c0004acf:	56                   	push   esi
c0004ad0:	53                   	push   ebx
c0004ad1:	83 ec 1c             	sub    esp,0x1c
c0004ad4:	8b 30                	mov    esi,DWORD PTR [eax]
c0004ad6:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004ada:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004ade:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004ae1:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004ae4:	0f 84 dc 01 00 00    	je     c0004cc6 <get_fileinfo+0x1f9>
c0004aea:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004aed:	75 0f                	jne    c0004afe <get_fileinfo+0x31>
c0004aef:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004af2:	83 c4 1c             	add    esp,0x1c
c0004af5:	5b                   	pop    ebx
c0004af6:	5e                   	pop    esi
c0004af7:	5f                   	pop    edi
c0004af8:	5d                   	pop    ebp
c0004af9:	e9 58 d5 ff ff       	jmp    c0002056 <get_xfileinfo>
c0004afe:	89 d3                	mov    ebx,edx
c0004b00:	89 c6                	mov    esi,eax
c0004b02:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004b06:	74 6a                	je     c0004b72 <get_fileinfo+0xa5>
c0004b08:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004b10:	31 ed                	xor    ebp,ebp
c0004b12:	31 ff                	xor    edi,edi
c0004b14:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004b18:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b1c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004b1f:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004b23:	66 85 d2             	test   dx,dx
c0004b26:	74 3e                	je     c0004b66 <get_fileinfo+0x99>
c0004b28:	66 85 ed             	test   bp,bp
c0004b2b:	75 0c                	jne    c0004b39 <get_fileinfo+0x6c>
c0004b2d:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004b33:	66 3d ff 07          	cmp    ax,0x7ff
c0004b37:	76 22                	jbe    c0004b5b <get_fileinfo+0x8e>
c0004b39:	b9 ff 00 00 00       	mov    ecx,0xff
c0004b3e:	89 e8                	mov    eax,ebp
c0004b40:	29 f9                	sub    ecx,edi
c0004b42:	c1 e0 10             	shl    eax,0x10
c0004b45:	09 d0                	or     eax,edx
c0004b47:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004b4b:	e8 a3 d1 ff ff       	call   c0001cf3 <put_utf>
c0004b50:	84 c0                	test   al,al
c0004b52:	74 10                	je     c0004b64 <get_fileinfo+0x97>
c0004b54:	0f b6 c0             	movzx  eax,al
c0004b57:	31 d2                	xor    edx,edx
c0004b59:	01 c7                	add    edi,eax
c0004b5b:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004b60:	89 d5                	mov    ebp,edx
c0004b62:	eb b0                	jmp    c0004b14 <get_fileinfo+0x47>
c0004b64:	31 ff                	xor    edi,edi
c0004b66:	66 85 ed             	test   bp,bp
c0004b69:	74 02                	je     c0004b6d <get_fileinfo+0xa0>
c0004b6b:	31 ff                	xor    edi,edi
c0004b6d:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004b72:	31 ff                	xor    edi,edi
c0004b74:	31 c9                	xor    ecx,ecx
c0004b76:	83 f9 0a             	cmp    ecx,0xa
c0004b79:	0f 87 ad 00 00 00    	ja     c0004c2c <get_fileinfo+0x15f>
c0004b7f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b82:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004b85:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004b89:	66 83 fa 20          	cmp    dx,0x20
c0004b8d:	0f 84 92 00 00 00    	je     c0004c25 <get_fileinfo+0x158>
c0004b93:	66 83 fa 05          	cmp    dx,0x5
c0004b97:	75 05                	jne    c0004b9e <get_fileinfo+0xd1>
c0004b99:	ba e5 00 00 00       	mov    edx,0xe5
c0004b9e:	83 ff 0b             	cmp    edi,0xb
c0004ba1:	77 0b                	ja     c0004bae <get_fileinfo+0xe1>
c0004ba3:	83 fd 09             	cmp    ebp,0x9
c0004ba6:	75 06                	jne    c0004bae <get_fileinfo+0xe1>
c0004ba8:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004bad:	47                   	inc    edi
c0004bae:	0f b7 c2             	movzx  eax,dx
c0004bb1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bb5:	e8 6d d0 ff ff       	call   c0001c27 <dbc_1st>
c0004bba:	85 c0                	test   eax,eax
c0004bbc:	74 2f                	je     c0004bed <get_fileinfo+0x120>
c0004bbe:	83 fd 08             	cmp    ebp,0x8
c0004bc1:	74 2a                	je     c0004bed <get_fileinfo+0x120>
c0004bc3:	83 fd 0b             	cmp    ebp,0xb
c0004bc6:	74 25                	je     c0004bed <get_fileinfo+0x120>
c0004bc8:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bcb:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004bcf:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004bd3:	e8 52 d0 ff ff       	call   c0001c2a <dbc_2nd>
c0004bd8:	85 c0                	test   eax,eax
c0004bda:	74 11                	je     c0004bed <get_fileinfo+0x120>
c0004bdc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004be0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004be5:	c1 e2 08             	shl    edx,0x8
c0004be8:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004beb:	09 c2                	or     edx,eax
c0004bed:	0f b7 d2             	movzx  edx,dx
c0004bf0:	50                   	push   eax
c0004bf1:	50                   	push   eax
c0004bf2:	68 b5 01 00 00       	push   0x1b5
c0004bf7:	52                   	push   edx
c0004bf8:	e8 87 3a 00 00       	call   c0008684 <ff_oem2uni>
c0004bfd:	83 c4 10             	add    esp,0x10
c0004c00:	66 85 c0             	test   ax,ax
c0004c03:	75 04                	jne    c0004c09 <get_fileinfo+0x13c>
c0004c05:	31 ff                	xor    edi,edi
c0004c07:	eb 23                	jmp    c0004c2c <get_fileinfo+0x15f>
c0004c09:	b9 0c 00 00 00       	mov    ecx,0xc
c0004c0e:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004c12:	29 f9                	sub    ecx,edi
c0004c14:	0f b7 c0             	movzx  eax,ax
c0004c17:	e8 d7 d0 ff ff       	call   c0001cf3 <put_utf>
c0004c1c:	84 c0                	test   al,al
c0004c1e:	74 e5                	je     c0004c05 <get_fileinfo+0x138>
c0004c20:	0f b6 c0             	movzx  eax,al
c0004c23:	01 c7                	add    edi,eax
c0004c25:	89 e9                	mov    ecx,ebp
c0004c27:	e9 4a ff ff ff       	jmp    c0004b76 <get_fileinfo+0xa9>
c0004c2c:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004c31:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004c35:	75 54                	jne    c0004c8b <get_fileinfo+0x1be>
c0004c37:	85 ff                	test   edi,edi
c0004c39:	75 0b                	jne    c0004c46 <get_fileinfo+0x179>
c0004c3b:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004c3f:	ba 01 00 00 00       	mov    edx,0x1
c0004c44:	eb 33                	jmp    c0004c79 <get_fileinfo+0x1ac>
c0004c46:	b1 08                	mov    cl,0x8
c0004c48:	31 d2                	xor    edx,edx
c0004c4a:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004c50:	84 c0                	test   al,al
c0004c52:	74 25                	je     c0004c79 <get_fileinfo+0x1ac>
c0004c54:	66 83 f8 2e          	cmp    ax,0x2e
c0004c58:	74 16                	je     c0004c70 <get_fileinfo+0x1a3>
c0004c5a:	8d 78 bf             	lea    edi,[eax-0x41]
c0004c5d:	66 83 ff 19          	cmp    di,0x19
c0004c61:	77 0f                	ja     c0004c72 <get_fileinfo+0x1a5>
c0004c63:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004c66:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004c69:	74 07                	je     c0004c72 <get_fileinfo+0x1a5>
c0004c6b:	83 c0 20             	add    eax,0x20
c0004c6e:	eb 02                	jmp    c0004c72 <get_fileinfo+0x1a5>
c0004c70:	b1 10                	mov    cl,0x10
c0004c72:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004c76:	42                   	inc    edx
c0004c77:	eb d1                	jmp    c0004c4a <get_fileinfo+0x17d>
c0004c79:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004c7e:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c81:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004c85:	75 04                	jne    c0004c8b <get_fileinfo+0x1be>
c0004c87:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004c8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c8e:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004c91:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004c94:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c97:	83 c0 1c             	add    eax,0x1c
c0004c9a:	e8 c1 ce ff ff       	call   c0001b60 <ld_dword>
c0004c9f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004ca6:	89 03                	mov    DWORD PTR [ebx],eax
c0004ca8:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cab:	83 c0 16             	add    eax,0x16
c0004cae:	e8 a0 ce ff ff       	call   c0001b53 <ld_word>
c0004cb3:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004cb7:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cba:	83 c0 18             	add    eax,0x18
c0004cbd:	e8 91 ce ff ff       	call   c0001b53 <ld_word>
c0004cc2:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004cc6:	83 c4 1c             	add    esp,0x1c
c0004cc9:	5b                   	pop    ebx
c0004cca:	5e                   	pop    esi
c0004ccb:	5f                   	pop    edi
c0004ccc:	5d                   	pop    ebp
c0004ccd:	c3                   	ret    

c0004cce <ld_clust.isra.0>:
c0004cce:	56                   	push   esi
c0004ccf:	89 c6                	mov    esi,eax
c0004cd1:	53                   	push   ebx
c0004cd2:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004cd5:	89 d3                	mov    ebx,edx
c0004cd7:	e8 77 ce ff ff       	call   c0001b53 <ld_word>
c0004cdc:	0f b7 c8             	movzx  ecx,ax
c0004cdf:	89 f0                	mov    eax,esi
c0004ce1:	3c 03                	cmp    al,0x3
c0004ce3:	75 0d                	jne    c0004cf2 <ld_clust.isra.0+0x24>
c0004ce5:	8d 43 14             	lea    eax,[ebx+0x14]
c0004ce8:	e8 66 ce ff ff       	call   c0001b53 <ld_word>
c0004ced:	c1 e0 10             	shl    eax,0x10
c0004cf0:	09 c1                	or     ecx,eax
c0004cf2:	89 c8                	mov    eax,ecx
c0004cf4:	5b                   	pop    ebx
c0004cf5:	5e                   	pop    esi
c0004cf6:	c3                   	ret    

c0004cf7 <st_clust.isra.1>:
c0004cf7:	56                   	push   esi
c0004cf8:	89 c6                	mov    esi,eax
c0004cfa:	53                   	push   ebx
c0004cfb:	89 d3                	mov    ebx,edx
c0004cfd:	0f b7 d1             	movzx  edx,cx
c0004d00:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004d03:	e8 bd ce ff ff       	call   c0001bc5 <st_word>
c0004d08:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004d0b:	75 0f                	jne    c0004d1c <st_clust.isra.1+0x25>
c0004d0d:	c1 e9 10             	shr    ecx,0x10
c0004d10:	8d 43 14             	lea    eax,[ebx+0x14]
c0004d13:	89 ca                	mov    edx,ecx
c0004d15:	5b                   	pop    ebx
c0004d16:	5e                   	pop    esi
c0004d17:	e9 a9 ce ff ff       	jmp    c0001bc5 <st_word>
c0004d1c:	5b                   	pop    ebx
c0004d1d:	5e                   	pop    esi
c0004d1e:	c3                   	ret    

c0004d1f <init_alloc_info.isra.2>:
c0004d1f:	56                   	push   esi
c0004d20:	53                   	push   ebx
c0004d21:	89 c6                	mov    esi,eax
c0004d23:	89 d3                	mov    ebx,edx
c0004d25:	51                   	push   ecx
c0004d26:	8b 00                	mov    eax,DWORD PTR [eax]
c0004d28:	83 c0 34             	add    eax,0x34
c0004d2b:	e8 30 ce ff ff       	call   c0001b60 <ld_dword>
c0004d30:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004d33:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d35:	83 c0 38             	add    eax,0x38
c0004d38:	e8 3b ce ff ff       	call   c0001b78 <ld_qword>
c0004d3d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004d40:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004d43:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d45:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004d48:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d4f:	83 e0 02             	and    eax,0x2
c0004d52:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004d55:	5b                   	pop    ebx
c0004d56:	5b                   	pop    ebx
c0004d57:	5e                   	pop    esi
c0004d58:	c3                   	ret    

c0004d59 <follow_path>:
c0004d59:	56                   	push   esi
c0004d5a:	53                   	push   ebx
c0004d5b:	89 c3                	mov    ebx,eax
c0004d5d:	83 ec 14             	sub    esp,0x14
c0004d60:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004d64:	8b 30                	mov    esi,DWORD PTR [eax]
c0004d66:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d6a:	8a 10                	mov    dl,BYTE PTR [eax]
c0004d6c:	80 fa 5c             	cmp    dl,0x5c
c0004d6f:	75 07                	jne    c0004d78 <follow_path+0x1f>
c0004d71:	40                   	inc    eax
c0004d72:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d76:	eb ee                	jmp    c0004d66 <follow_path+0xd>
c0004d78:	80 fa 2f             	cmp    dl,0x2f
c0004d7b:	74 f4                	je     c0004d71 <follow_path+0x18>
c0004d7d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004d84:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d8b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004d8e:	77 52                	ja     c0004de2 <follow_path+0x89>
c0004d90:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004d94:	31 d2                	xor    edx,edx
c0004d96:	89 d8                	mov    eax,ebx
c0004d98:	e8 12 e3 ff ff       	call   c00030af <dir_sdi>
c0004d9d:	eb 7c                	jmp    c0004e1b <follow_path+0xc2>
c0004d9f:	89 d8                	mov    eax,ebx
c0004da1:	e8 6e f2 ff ff       	call   c0004014 <dir_find>
c0004da6:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004da9:	85 c0                	test   eax,eax
c0004dab:	75 46                	jne    c0004df3 <follow_path+0x9a>
c0004dad:	80 e2 04             	and    dl,0x4
c0004db0:	75 69                	jne    c0004e1b <follow_path+0xc2>
c0004db2:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004db6:	74 5e                	je     c0004e16 <follow_path+0xbd>
c0004db8:	8a 06                	mov    al,BYTE PTR [esi]
c0004dba:	3c 04                	cmp    al,0x4
c0004dbc:	75 41                	jne    c0004dff <follow_path+0xa6>
c0004dbe:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004dc1:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004dc5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004dc8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004dcb:	30 c0                	xor    al,al
c0004dcd:	09 d0                	or     eax,edx
c0004dcf:	89 da                	mov    edx,ebx
c0004dd1:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004dd4:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004dd7:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004dda:	8d 46 10             	lea    eax,[esi+0x10]
c0004ddd:	e8 3d ff ff ff       	call   c0004d1f <init_alloc_info.isra.2>
c0004de2:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004de6:	89 d8                	mov    eax,ebx
c0004de8:	e8 a9 ed ff ff       	call   c0003b96 <create_name>
c0004ded:	85 c0                	test   eax,eax
c0004def:	74 ae                	je     c0004d9f <follow_path+0x46>
c0004df1:	eb 28                	jmp    c0004e1b <follow_path+0xc2>
c0004df3:	83 f8 04             	cmp    eax,0x4
c0004df6:	75 23                	jne    c0004e1b <follow_path+0xc2>
c0004df8:	80 e2 04             	and    dl,0x4
c0004dfb:	74 19                	je     c0004e16 <follow_path+0xbd>
c0004dfd:	eb 1c                	jmp    c0004e1b <follow_path+0xc2>
c0004dff:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004e02:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004e08:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004e0c:	e8 bd fe ff ff       	call   c0004cce <ld_clust.isra.0>
c0004e11:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e14:	eb cc                	jmp    c0004de2 <follow_path+0x89>
c0004e16:	b8 05 00 00 00       	mov    eax,0x5
c0004e1b:	83 c4 14             	add    esp,0x14
c0004e1e:	5b                   	pop    ebx
c0004e1f:	5e                   	pop    esi
c0004e20:	c3                   	ret    

c0004e21 <f_mount>:
c0004e21:	53                   	push   ebx
c0004e22:	83 ec 18             	sub    esp,0x18
c0004e25:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004e29:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004e2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e31:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004e35:	e8 fb d2 ff ff       	call   c0002135 <get_ldnumber>
c0004e3a:	89 c2                	mov    edx,eax
c0004e3c:	b8 0b 00 00 00       	mov    eax,0xb
c0004e41:	85 d2                	test   edx,edx
c0004e43:	78 39                	js     c0004e7e <f_mount+0x5d>
c0004e45:	8b 04 95 a0 7d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8260]
c0004e4c:	85 c0                	test   eax,eax
c0004e4e:	74 03                	je     c0004e53 <f_mount+0x32>
c0004e50:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e57:	85 c0                	test   eax,eax
c0004e59:	74 03                	je     c0004e5e <f_mount+0x3d>
c0004e5b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e62:	89 04 95 a0 7d 02 c0 	mov    DWORD PTR [edx*4-0x3ffd8260],eax
c0004e69:	31 c0                	xor    eax,eax
c0004e6b:	84 db                	test   bl,bl
c0004e6d:	74 0f                	je     c0004e7e <f_mount+0x5d>
c0004e6f:	31 c9                	xor    ecx,ecx
c0004e71:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004e75:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e79:	e8 65 d7 ff ff       	call   c00025e3 <mount_volume>
c0004e7e:	83 c4 18             	add    esp,0x18
c0004e81:	5b                   	pop    ebx
c0004e82:	c3                   	ret    

c0004e83 <f_open>:
c0004e83:	55                   	push   ebp
c0004e84:	bd 09 00 00 00       	mov    ebp,0x9
c0004e89:	57                   	push   edi
c0004e8a:	56                   	push   esi
c0004e8b:	53                   	push   ebx
c0004e8c:	83 ec 7c             	sub    esp,0x7c
c0004e8f:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004e96:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004e9d:	85 db                	test   ebx,ebx
c0004e9f:	0f 84 10 04 00 00    	je     c00052b5 <f_open+0x432>
c0004ea5:	89 fe                	mov    esi,edi
c0004ea7:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004eab:	83 e6 3f             	and    esi,0x3f
c0004eae:	89 f0                	mov    eax,esi
c0004eb0:	0f b6 c8             	movzx  ecx,al
c0004eb3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004eba:	e8 24 d7 ff ff       	call   c00025e3 <mount_volume>
c0004ebf:	89 c5                	mov    ebp,eax
c0004ec1:	85 c0                	test   eax,eax
c0004ec3:	0f 85 e6 03 00 00    	jne    c00052af <f_open+0x42c>
c0004ec9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ecd:	bd 11 00 00 00       	mov    ebp,0x11
c0004ed2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ed6:	83 ec 0c             	sub    esp,0xc
c0004ed9:	68 60 04 00 00       	push   0x460
c0004ede:	e8 d9 36 00 00       	call   c00085bc <ff_memalloc>
c0004ee3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ee7:	83 c4 10             	add    esp,0x10
c0004eea:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004eef:	0f 84 c0 03 00 00    	je     c00052b5 <f_open+0x432>
c0004ef5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ef9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004efd:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004f03:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004f06:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004f09:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004f10:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f14:	e8 40 fe ff ff       	call   c0004d59 <follow_path>
c0004f19:	89 c5                	mov    ebp,eax
c0004f1b:	85 c0                	test   eax,eax
c0004f1d:	75 0c                	jne    c0004f2b <f_open+0xa8>
c0004f1f:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004f24:	79 05                	jns    c0004f2b <f_open+0xa8>
c0004f26:	bd 06 00 00 00       	mov    ebp,0x6
c0004f2b:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004f31:	0f 84 84 01 00 00    	je     c00050bb <f_open+0x238>
c0004f37:	85 ed                	test   ebp,ebp
c0004f39:	74 20                	je     c0004f5b <f_open+0xd8>
c0004f3b:	83 fd 04             	cmp    ebp,0x4
c0004f3e:	0f 85 58 03 00 00    	jne    c000529c <f_open+0x419>
c0004f44:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f48:	83 ce 08             	or     esi,0x8
c0004f4b:	e8 8a f2 ff ff       	call   c00041da <dir_register>
c0004f50:	89 c5                	mov    ebp,eax
c0004f52:	85 c0                	test   eax,eax
c0004f54:	74 2f                	je     c0004f85 <f_open+0x102>
c0004f56:	e9 41 03 00 00       	jmp    c000529c <f_open+0x419>
c0004f5b:	bd 07 00 00 00       	mov    ebp,0x7
c0004f60:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004f65:	0f 85 31 03 00 00    	jne    c000529c <f_open+0x419>
c0004f6b:	bd 08 00 00 00       	mov    ebp,0x8
c0004f70:	f7 c7 04 00 00 00    	test   edi,0x4
c0004f76:	0f 85 20 03 00 00    	jne    c000529c <f_open+0x419>
c0004f7c:	83 e7 08             	and    edi,0x8
c0004f7f:	0f 84 65 01 00 00    	je     c00050ea <f_open+0x267>
c0004f85:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f89:	8a 02                	mov    al,BYTE PTR [edx]
c0004f8b:	3c 04                	cmp    al,0x4
c0004f8d:	0f 85 97 00 00 00    	jne    c000502a <f_open+0x1a7>
c0004f93:	8d 42 10             	lea    eax,[edx+0x10]
c0004f96:	89 13                	mov    DWORD PTR [ebx],edx
c0004f98:	89 da                	mov    edx,ebx
c0004f9a:	e8 80 fd ff ff       	call   c0004d1f <init_alloc_info.isra.2>
c0004f9f:	31 d2                	xor    edx,edx
c0004fa1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa5:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004faa:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fad:	83 c0 02             	add    eax,0x2
c0004fb0:	e8 32 cc ff ff       	call   c0001be7 <mem_set>
c0004fb5:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004fba:	31 d2                	xor    edx,edx
c0004fbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fc0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fc3:	83 c0 26             	add    eax,0x26
c0004fc6:	e8 1c cc ff ff       	call   c0001be7 <mem_set>
c0004fcb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fcf:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004fd2:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004fd6:	ba 00 00 21 50       	mov    edx,0x50210000
c0004fdb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fde:	83 c0 08             	add    eax,0x8
c0004fe1:	e8 e3 cb ff ff       	call   c0001bc9 <st_dword>
c0004fe6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fed:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ff1:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ff5:	e8 b7 ea ff ff       	call   c0003ab1 <store_xdir>
c0004ffa:	89 c5                	mov    ebp,eax
c0004ffc:	85 c0                	test   eax,eax
c0004ffe:	0f 85 98 02 00 00    	jne    c000529c <f_open+0x419>
c0005004:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005007:	85 d2                	test   edx,edx
c0005009:	0f 84 db 00 00 00    	je     c00050ea <f_open+0x267>
c000500f:	31 c9                	xor    ecx,ecx
c0005011:	89 d8                	mov    eax,ebx
c0005013:	e8 8e e3 ff ff       	call   c00033a6 <remove_chain>
c0005018:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000501c:	89 c5                	mov    ebp,eax
c000501e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005021:	48                   	dec    eax
c0005022:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005025:	e9 b8 00 00 00       	jmp    c00050e2 <f_open+0x25f>
c000502a:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000502e:	89 ea                	mov    edx,ebp
c0005030:	e8 99 fc ff ff       	call   c0004cce <ld_clust.isra.0>
c0005035:	ba 00 00 21 50       	mov    edx,0x50210000
c000503a:	89 c7                	mov    edi,eax
c000503c:	8d 45 0e             	lea    eax,[ebp+0xe]
c000503f:	e8 85 cb ff ff       	call   c0001bc9 <st_dword>
c0005044:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005048:	31 c9                	xor    ecx,ecx
c000504a:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c000504e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005052:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005056:	e8 9c fc ff ff       	call   c0004cf7 <st_clust.isra.1>
c000505b:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000505f:	31 d2                	xor    edx,edx
c0005061:	83 c0 1c             	add    eax,0x1c
c0005064:	e8 60 cb ff ff       	call   c0001bc9 <st_dword>
c0005069:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000506d:	85 ff                	test   edi,edi
c000506f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005073:	74 75                	je     c00050ea <f_open+0x267>
c0005075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005079:	31 c9                	xor    ecx,ecx
c000507b:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000507e:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005081:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005085:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005089:	89 fa                	mov    edx,edi
c000508b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000508f:	e8 12 e3 ff ff       	call   c00033a6 <remove_chain>
c0005094:	89 c5                	mov    ebp,eax
c0005096:	85 c0                	test   eax,eax
c0005098:	0f 85 fe 01 00 00    	jne    c000529c <f_open+0x419>
c000509e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00050a2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00050a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050aa:	4f                   	dec    edi
c00050ab:	e8 81 d2 ff ff       	call   c0002331 <move_window>
c00050b0:	89 c5                	mov    ebp,eax
c00050b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b6:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00050b9:	eb 27                	jmp    c00050e2 <f_open+0x25f>
c00050bb:	85 ed                	test   ebp,ebp
c00050bd:	0f 85 d9 01 00 00    	jne    c000529c <f_open+0x419>
c00050c3:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00050c7:	bd 04 00 00 00       	mov    ebp,0x4
c00050cc:	a8 10                	test   al,0x10
c00050ce:	0f 85 c8 01 00 00    	jne    c000529c <f_open+0x419>
c00050d4:	83 e7 02             	and    edi,0x2
c00050d7:	74 11                	je     c00050ea <f_open+0x267>
c00050d9:	bd 07 00 00 00       	mov    ebp,0x7
c00050de:	a8 01                	test   al,0x1
c00050e0:	eb 02                	jmp    c00050e4 <f_open+0x261>
c00050e2:	85 ed                	test   ebp,ebp
c00050e4:	0f 85 b2 01 00 00    	jne    c000529c <f_open+0x419>
c00050ea:	f7 c6 08 00 00 00    	test   esi,0x8
c00050f0:	74 03                	je     c00050f5 <f_open+0x272>
c00050f2:	83 ce 40             	or     esi,0x40
c00050f5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050f9:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00050fc:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00050ff:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005102:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0005105:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005109:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c000510c:	8a 02                	mov    al,BYTE PTR [edx]
c000510e:	3c 04                	cmp    al,0x4
c0005110:	75 2a                	jne    c000513c <f_open+0x2b9>
c0005112:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005116:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c000511b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000511e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005122:	30 c0                	xor    al,al
c0005124:	09 c8                	or     eax,ecx
c0005126:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005129:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000512d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005130:	8d 42 10             	lea    eax,[edx+0x10]
c0005133:	89 da                	mov    edx,ebx
c0005135:	e8 e5 fb ff ff       	call   c0004d1f <init_alloc_info.isra.2>
c000513a:	eb 1c                	jmp    c0005158 <f_open+0x2d5>
c000513c:	89 fa                	mov    edx,edi
c000513e:	e8 8b fb ff ff       	call   c0004cce <ld_clust.isra.0>
c0005143:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005146:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005149:	e8 12 ca ff ff       	call   c0001b60 <ld_dword>
c000514e:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005155:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005158:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000515c:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005163:	89 03                	mov    DWORD PTR [ebx],eax
c0005165:	31 d2                	xor    edx,edx
c0005167:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000516b:	b9 00 02 00 00       	mov    ecx,0x200
c0005170:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005174:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005178:	89 f0                	mov    eax,esi
c000517a:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005181:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005184:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000518b:	8d 43 50             	lea    eax,[ebx+0x50]
c000518e:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005195:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000519c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00051a0:	e8 42 ca ff ff       	call   c0001be7 <mem_set>
c00051a5:	83 e6 20             	and    esi,0x20
c00051a8:	75 07                	jne    c00051b1 <f_open+0x32e>
c00051aa:	31 ed                	xor    ebp,ebp
c00051ac:	e9 eb 00 00 00       	jmp    c000529c <f_open+0x419>
c00051b1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051b4:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00051bb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00051bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051c3:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00051c7:	74 e1                	je     c00051aa <f_open+0x327>
c00051c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00051cd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00051d1:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00051d4:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00051d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051db:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00051de:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00051e2:	31 ff                	xor    edi,edi
c00051e4:	c1 e5 09             	shl    ebp,0x9
c00051e7:	89 ee                	mov    esi,ebp
c00051e9:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00051ed:	89 f8                	mov    eax,edi
c00051ef:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00051f3:	73 22                	jae    c0005217 <f_open+0x394>
c00051f5:	89 d8                	mov    eax,ebx
c00051f7:	e8 bd dc ff ff       	call   c0002eb9 <get_fat>
c00051fc:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005200:	89 c2                	mov    edx,eax
c0005202:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005206:	83 f8 01             	cmp    eax,0x1
c0005209:	76 10                	jbe    c000521b <f_open+0x398>
c000520b:	83 f8 ff             	cmp    eax,0xffffffff
c000520e:	75 d9                	jne    c00051e9 <f_open+0x366>
c0005210:	bd 01 00 00 00       	mov    ebp,0x1
c0005215:	eb 09                	jmp    c0005220 <f_open+0x39d>
c0005217:	31 ed                	xor    ebp,ebp
c0005219:	eb 05                	jmp    c0005220 <f_open+0x39d>
c000521b:	bd 02 00 00 00       	mov    ebp,0x2
c0005220:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005223:	85 ed                	test   ebp,ebp
c0005225:	75 75                	jne    c000529c <f_open+0x419>
c0005227:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000522b:	25 ff 01 00 00       	and    eax,0x1ff
c0005230:	0f 84 74 ff ff ff    	je     c00051aa <f_open+0x327>
c0005236:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000523a:	bd 02 00 00 00       	mov    ebp,0x2
c000523f:	89 c8                	mov    eax,ecx
c0005241:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005245:	e8 a2 cb ff ff       	call   c0001dec <clst2sect>
c000524a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000524e:	89 d7                	mov    edi,edx
c0005250:	09 c7                	or     edi,eax
c0005252:	74 48                	je     c000529c <f_open+0x419>
c0005254:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005258:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000525c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005264:	0f ac fe 09          	shrd   esi,edi,0x9
c0005268:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000526c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005270:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005273:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005277:	83 ec 0c             	sub    esp,0xc
c000527a:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000527d:	6a 01                	push   0x1
c000527f:	52                   	push   edx
c0005280:	50                   	push   eax
c0005281:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005285:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005289:	50                   	push   eax
c000528a:	e8 79 c8 ff ff       	call   c0001b08 <disk_read>
c000528f:	83 c4 20             	add    esp,0x20
c0005292:	85 c0                	test   eax,eax
c0005294:	0f 95 c0             	setne  al
c0005297:	0f b6 c0             	movzx  eax,al
c000529a:	89 c5                	mov    ebp,eax
c000529c:	83 ec 0c             	sub    esp,0xc
c000529f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00052a3:	e8 2c 33 00 00       	call   c00085d4 <ff_memfree>
c00052a8:	83 c4 10             	add    esp,0x10
c00052ab:	85 ed                	test   ebp,ebp
c00052ad:	74 06                	je     c00052b5 <f_open+0x432>
c00052af:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00052b5:	83 c4 7c             	add    esp,0x7c
c00052b8:	89 e8                	mov    eax,ebp
c00052ba:	5b                   	pop    ebx
c00052bb:	5e                   	pop    esi
c00052bc:	5f                   	pop    edi
c00052bd:	5d                   	pop    ebp
c00052be:	c3                   	ret    

c00052bf <f_read>:
c00052bf:	55                   	push   ebp
c00052c0:	57                   	push   edi
c00052c1:	56                   	push   esi
c00052c2:	53                   	push   ebx
c00052c3:	83 ec 2c             	sub    esp,0x2c
c00052c6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052ca:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052ce:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00052d4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052d8:	89 d8                	mov    eax,ebx
c00052da:	e8 77 cf ff ff       	call   c0002256 <validate>
c00052df:	89 c5                	mov    ebp,eax
c00052e1:	85 c0                	test   eax,eax
c00052e3:	0f 85 4c 02 00 00    	jne    c0005535 <f_read+0x276>
c00052e9:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00052ed:	85 ed                	test   ebp,ebp
c00052ef:	0f 85 40 02 00 00    	jne    c0005535 <f_read+0x276>
c00052f5:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00052f9:	0f 84 31 02 00 00    	je     c0005530 <f_read+0x271>
c00052ff:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005302:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005305:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005308:	bf 00 00 00 00       	mov    edi,0x0
c000530d:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005310:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005314:	89 d1                	mov    ecx,edx
c0005316:	19 f9                	sbb    ecx,edi
c0005318:	0f 83 cf 00 00 00    	jae    c00053ed <f_read+0x12e>
c000531e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005322:	e9 c6 00 00 00       	jmp    c00053ed <f_read+0x12e>
c0005327:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000532a:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000532d:	89 d0                	mov    eax,edx
c000532f:	25 ff 01 00 00       	and    eax,0x1ff
c0005334:	0f 85 c9 01 00 00    	jne    c0005503 <f_read+0x244>
c000533a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000533e:	89 d6                	mov    esi,edx
c0005340:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005344:	89 cf                	mov    edi,ecx
c0005346:	48                   	dec    eax
c0005347:	0f ac fe 09          	shrd   esi,edi,0x9
c000534b:	21 f0                	and    eax,esi
c000534d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005351:	0f 84 a6 00 00 00    	je     c00053fd <f_read+0x13e>
c0005357:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000535b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000535e:	89 c8                	mov    eax,ecx
c0005360:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005363:	e8 84 ca ff ff       	call   c0001dec <clst2sect>
c0005368:	89 d7                	mov    edi,edx
c000536a:	09 c7                	or     edi,eax
c000536c:	0f 84 b4 00 00 00    	je     c0005426 <f_read+0x167>
c0005372:	31 ff                	xor    edi,edi
c0005374:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005378:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000537b:	01 c6                	add    esi,eax
c000537d:	11 d7                	adc    edi,edx
c000537f:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005387:	0f 86 fd 00 00 00    	jbe    c000548a <f_read+0x1cb>
c000538d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005391:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005395:	c1 e8 09             	shr    eax,0x9
c0005398:	89 04 24             	mov    DWORD PTR [esp],eax
c000539b:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000539f:	03 14 24             	add    edx,DWORD PTR [esp]
c00053a2:	39 c2                	cmp    edx,eax
c00053a4:	76 07                	jbe    c00053ad <f_read+0xee>
c00053a6:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00053aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00053ad:	83 ec 0c             	sub    esp,0xc
c00053b0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00053b4:	57                   	push   edi
c00053b5:	56                   	push   esi
c00053b6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00053ba:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053be:	50                   	push   eax
c00053bf:	e8 44 c7 ff ff       	call   c0001b08 <disk_read>
c00053c4:	83 c4 20             	add    esp,0x20
c00053c7:	85 c0                	test   eax,eax
c00053c9:	75 6e                	jne    c0005439 <f_read+0x17a>
c00053cb:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00053cf:	78 7e                	js     c000544f <f_read+0x190>
c00053d1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00053d4:	c1 e6 09             	shl    esi,0x9
c00053d7:	31 ff                	xor    edi,edi
c00053d9:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00053dd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053e1:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00053e5:	01 30                	add    DWORD PTR [eax],esi
c00053e7:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00053ea:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00053ed:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00053f2:	0f 85 2f ff ff ff    	jne    c0005327 <f_read+0x68>
c00053f8:	e9 38 01 00 00       	jmp    c0005535 <f_read+0x276>
c00053fd:	89 c8                	mov    eax,ecx
c00053ff:	09 d0                	or     eax,edx
c0005401:	75 05                	jne    c0005408 <f_read+0x149>
c0005403:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005406:	eb 19                	jmp    c0005421 <f_read+0x162>
c0005408:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000540c:	74 09                	je     c0005417 <f_read+0x158>
c000540e:	89 d8                	mov    eax,ebx
c0005410:	e8 f8 c9 ff ff       	call   c0001e0d <clmt_clust>
c0005415:	eb 0a                	jmp    c0005421 <f_read+0x162>
c0005417:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000541a:	89 d8                	mov    eax,ebx
c000541c:	e8 98 da ff ff       	call   c0002eb9 <get_fat>
c0005421:	83 f8 01             	cmp    eax,0x1
c0005424:	77 0e                	ja     c0005434 <f_read+0x175>
c0005426:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000542a:	bd 02 00 00 00       	mov    ebp,0x2
c000542f:	e9 01 01 00 00       	jmp    c0005535 <f_read+0x276>
c0005434:	83 f8 ff             	cmp    eax,0xffffffff
c0005437:	75 0e                	jne    c0005447 <f_read+0x188>
c0005439:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000543d:	bd 01 00 00 00       	mov    ebp,0x1
c0005442:	e9 ee 00 00 00       	jmp    c0005535 <f_read+0x276>
c0005447:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000544a:	e9 08 ff ff ff       	jmp    c0005357 <f_read+0x98>
c000544f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005452:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005455:	29 f0                	sub    eax,esi
c0005457:	19 fa                	sbb    edx,edi
c0005459:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000545c:	89 d7                	mov    edi,edx
c000545e:	ba 00 00 00 00       	mov    edx,0x0
c0005463:	89 f9                	mov    ecx,edi
c0005465:	19 d1                	sbb    ecx,edx
c0005467:	0f 83 64 ff ff ff    	jae    c00053d1 <f_read+0x112>
c000546d:	89 c7                	mov    edi,eax
c000546f:	8d 53 50             	lea    edx,[ebx+0x50]
c0005472:	c1 e7 09             	shl    edi,0x9
c0005475:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005479:	b9 00 02 00 00       	mov    ecx,0x200
c000547e:	01 f8                	add    eax,edi
c0005480:	e8 4d c7 ff ff       	call   c0001bd2 <mem_cpy>
c0005485:	e9 47 ff ff ff       	jmp    c00053d1 <f_read+0x112>
c000548a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000548d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005490:	89 04 24             	mov    DWORD PTR [esp],eax
c0005493:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005497:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000549b:	75 05                	jne    c00054a2 <f_read+0x1e3>
c000549d:	39 34 24             	cmp    DWORD PTR [esp],esi
c00054a0:	74 5b                	je     c00054fd <f_read+0x23e>
c00054a2:	8d 43 50             	lea    eax,[ebx+0x50]
c00054a5:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054a9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054ad:	79 2a                	jns    c00054d9 <f_read+0x21a>
c00054af:	83 ec 0c             	sub    esp,0xc
c00054b2:	6a 01                	push   0x1
c00054b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054bc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054c0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054c4:	50                   	push   eax
c00054c5:	e8 54 c6 ff ff       	call   c0001b1e <disk_write>
c00054ca:	83 c4 20             	add    esp,0x20
c00054cd:	85 c0                	test   eax,eax
c00054cf:	0f 85 64 ff ff ff    	jne    c0005439 <f_read+0x17a>
c00054d5:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00054d9:	83 ec 0c             	sub    esp,0xc
c00054dc:	6a 01                	push   0x1
c00054de:	57                   	push   edi
c00054df:	56                   	push   esi
c00054e0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054e4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00054e8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00054ec:	50                   	push   eax
c00054ed:	e8 16 c6 ff ff       	call   c0001b08 <disk_read>
c00054f2:	83 c4 20             	add    esp,0x20
c00054f5:	85 c0                	test   eax,eax
c00054f7:	0f 85 3c ff ff ff    	jne    c0005439 <f_read+0x17a>
c00054fd:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005500:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005503:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005506:	ba 00 02 00 00       	mov    edx,0x200
c000550b:	25 ff 01 00 00       	and    eax,0x1ff
c0005510:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005514:	29 c2                	sub    edx,eax
c0005516:	39 d6                	cmp    esi,edx
c0005518:	76 02                	jbe    c000551c <f_read+0x25d>
c000551a:	89 d6                	mov    esi,edx
c000551c:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005520:	89 f1                	mov    ecx,esi
c0005522:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005526:	e8 a7 c6 ff ff       	call   c0001bd2 <mem_cpy>
c000552b:	e9 a7 fe ff ff       	jmp    c00053d7 <f_read+0x118>
c0005530:	bd 07 00 00 00       	mov    ebp,0x7
c0005535:	83 c4 2c             	add    esp,0x2c
c0005538:	89 e8                	mov    eax,ebp
c000553a:	5b                   	pop    ebx
c000553b:	5e                   	pop    esi
c000553c:	5f                   	pop    edi
c000553d:	5d                   	pop    ebp
c000553e:	c3                   	ret    

c000553f <f_write>:
c000553f:	55                   	push   ebp
c0005540:	57                   	push   edi
c0005541:	56                   	push   esi
c0005542:	53                   	push   ebx
c0005543:	83 ec 2c             	sub    esp,0x2c
c0005546:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000554a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000554e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005554:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005558:	89 d8                	mov    eax,ebx
c000555a:	e8 f7 cc ff ff       	call   c0002256 <validate>
c000555f:	89 c5                	mov    ebp,eax
c0005561:	85 c0                	test   eax,eax
c0005563:	0f 85 86 02 00 00    	jne    c00057ef <f_write+0x2b0>
c0005569:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000556d:	85 ed                	test   ebp,ebp
c000556f:	0f 85 7a 02 00 00    	jne    c00057ef <f_write+0x2b0>
c0005575:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005579:	0f 84 6b 02 00 00    	je     c00057ea <f_write+0x2ab>
c000557f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005583:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005586:	0f 84 43 01 00 00    	je     c00056cf <f_write+0x190>
c000558c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000558f:	89 c1                	mov    ecx,eax
c0005591:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005595:	0f 83 34 01 00 00    	jae    c00056cf <f_write+0x190>
c000559b:	f7 d0                	not    eax
c000559d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00055a1:	e9 29 01 00 00       	jmp    c00056cf <f_write+0x190>
c00055a6:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00055a9:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00055ac:	89 d0                	mov    eax,edx
c00055ae:	25 ff 01 00 00       	and    eax,0x1ff
c00055b3:	0f 85 00 02 00 00    	jne    c00057b9 <f_write+0x27a>
c00055b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055bd:	89 d6                	mov    esi,edx
c00055bf:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00055c3:	89 cf                	mov    edi,ecx
c00055c5:	48                   	dec    eax
c00055c6:	0f ac fe 09          	shrd   esi,edi,0x9
c00055ca:	21 f0                	and    eax,esi
c00055cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055d0:	0f 84 06 01 00 00    	je     c00056dc <f_write+0x19d>
c00055d6:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055da:	0f 88 6e 01 00 00    	js     c000574e <f_write+0x20f>
c00055e0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00055e4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055e7:	89 c8                	mov    eax,ecx
c00055e9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00055ed:	e8 fa c7 ff ff       	call   c0001dec <clst2sect>
c00055f2:	89 d1                	mov    ecx,edx
c00055f4:	09 c1                	or     ecx,eax
c00055f6:	0f 84 1c 01 00 00    	je     c0005718 <f_write+0x1d9>
c00055fc:	31 ff                	xor    edi,edi
c00055fe:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005602:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005606:	01 c6                	add    esi,eax
c0005608:	11 d7                	adc    edi,edx
c000560a:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005612:	0f 86 63 01 00 00    	jbe    c000577b <f_write+0x23c>
c0005618:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000561c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005620:	c1 e8 09             	shr    eax,0x9
c0005623:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005627:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000562b:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000562f:	39 c2                	cmp    edx,eax
c0005631:	76 08                	jbe    c000563b <f_write+0xfc>
c0005633:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005637:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000563b:	83 ec 0c             	sub    esp,0xc
c000563e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005642:	57                   	push   edi
c0005643:	56                   	push   esi
c0005644:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005648:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000564c:	50                   	push   eax
c000564d:	e8 cc c4 ff ff       	call   c0001b1e <disk_write>
c0005652:	83 c4 20             	add    esp,0x20
c0005655:	85 c0                	test   eax,eax
c0005657:	0f 85 ce 00 00 00    	jne    c000572b <f_write+0x1ec>
c000565d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005660:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005663:	29 f0                	sub    eax,esi
c0005665:	19 fa                	sbb    edx,edi
c0005667:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000566b:	89 d7                	mov    edi,edx
c000566d:	ba 00 00 00 00       	mov    edx,0x0
c0005672:	89 f9                	mov    ecx,edi
c0005674:	19 d1                	sbb    ecx,edx
c0005676:	73 1c                	jae    c0005694 <f_write+0x155>
c0005678:	89 c7                	mov    edi,eax
c000567a:	b9 00 02 00 00       	mov    ecx,0x200
c000567f:	c1 e7 09             	shl    edi,0x9
c0005682:	8d 43 50             	lea    eax,[ebx+0x50]
c0005685:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005689:	89 fa                	mov    edx,edi
c000568b:	e8 42 c5 ff ff       	call   c0001bd2 <mem_cpy>
c0005690:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005694:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005698:	c1 e6 09             	shl    esi,0x9
c000569b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000569f:	31 ff                	xor    edi,edi
c00056a1:	01 30                	add    DWORD PTR [eax],esi
c00056a3:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00056a7:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00056ab:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00056ae:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00056b1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00056b4:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00056b7:	89 c1                	mov    ecx,eax
c00056b9:	39 f2                	cmp    edx,esi
c00056bb:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00056be:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00056c1:	19 f9                	sbb    ecx,edi
c00056c3:	73 04                	jae    c00056c9 <f_write+0x18a>
c00056c5:	89 f2                	mov    edx,esi
c00056c7:	89 f8                	mov    eax,edi
c00056c9:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00056cc:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00056cf:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00056d4:	0f 85 cc fe ff ff    	jne    c00055a6 <f_write+0x67>
c00056da:	eb 2e                	jmp    c000570a <f_write+0x1cb>
c00056dc:	89 c8                	mov    eax,ecx
c00056de:	09 d0                	or     eax,edx
c00056e0:	75 0b                	jne    c00056ed <f_write+0x1ae>
c00056e2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056e5:	31 d2                	xor    edx,edx
c00056e7:	85 c0                	test   eax,eax
c00056e9:	75 28                	jne    c0005713 <f_write+0x1d4>
c00056eb:	eb 12                	jmp    c00056ff <f_write+0x1c0>
c00056ed:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00056f1:	74 09                	je     c00056fc <f_write+0x1bd>
c00056f3:	89 d8                	mov    eax,ebx
c00056f5:	e8 13 c7 ff ff       	call   c0001e0d <clmt_clust>
c00056fa:	eb 0a                	jmp    c0005706 <f_write+0x1c7>
c00056fc:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056ff:	89 d8                	mov    eax,ebx
c0005701:	e8 a1 da ff ff       	call   c00031a7 <create_chain>
c0005706:	85 c0                	test   eax,eax
c0005708:	75 09                	jne    c0005713 <f_write+0x1d4>
c000570a:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000570e:	e9 dc 00 00 00       	jmp    c00057ef <f_write+0x2b0>
c0005713:	83 f8 01             	cmp    eax,0x1
c0005716:	75 0e                	jne    c0005726 <f_write+0x1e7>
c0005718:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000571c:	bd 02 00 00 00       	mov    ebp,0x2
c0005721:	e9 c9 00 00 00       	jmp    c00057ef <f_write+0x2b0>
c0005726:	83 f8 ff             	cmp    eax,0xffffffff
c0005729:	75 0e                	jne    c0005739 <f_write+0x1fa>
c000572b:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000572f:	bd 01 00 00 00       	mov    ebp,0x1
c0005734:	e9 b6 00 00 00       	jmp    c00057ef <f_write+0x2b0>
c0005739:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000573c:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005740:	0f 85 90 fe ff ff    	jne    c00055d6 <f_write+0x97>
c0005746:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005749:	e9 88 fe ff ff       	jmp    c00055d6 <f_write+0x97>
c000574e:	83 ec 0c             	sub    esp,0xc
c0005751:	8d 43 50             	lea    eax,[ebx+0x50]
c0005754:	6a 01                	push   0x1
c0005756:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005759:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000575c:	50                   	push   eax
c000575d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005761:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005765:	50                   	push   eax
c0005766:	e8 b3 c3 ff ff       	call   c0001b1e <disk_write>
c000576b:	83 c4 20             	add    esp,0x20
c000576e:	85 c0                	test   eax,eax
c0005770:	75 b9                	jne    c000572b <f_write+0x1ec>
c0005772:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005776:	e9 65 fe ff ff       	jmp    c00055e0 <f_write+0xa1>
c000577b:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000577e:	75 05                	jne    c0005785 <f_write+0x246>
c0005780:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005783:	74 2e                	je     c00057b3 <f_write+0x274>
c0005785:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005788:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000578b:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000578e:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005791:	73 20                	jae    c00057b3 <f_write+0x274>
c0005793:	83 ec 0c             	sub    esp,0xc
c0005796:	8d 43 50             	lea    eax,[ebx+0x50]
c0005799:	6a 01                	push   0x1
c000579b:	57                   	push   edi
c000579c:	56                   	push   esi
c000579d:	50                   	push   eax
c000579e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00057a2:	50                   	push   eax
c00057a3:	e8 60 c3 ff ff       	call   c0001b08 <disk_read>
c00057a8:	83 c4 20             	add    esp,0x20
c00057ab:	85 c0                	test   eax,eax
c00057ad:	0f 85 78 ff ff ff    	jne    c000572b <f_write+0x1ec>
c00057b3:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00057b6:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00057b9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00057bc:	ba 00 02 00 00       	mov    edx,0x200
c00057c1:	25 ff 01 00 00       	and    eax,0x1ff
c00057c6:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00057ca:	29 c2                	sub    edx,eax
c00057cc:	39 d6                	cmp    esi,edx
c00057ce:	76 02                	jbe    c00057d2 <f_write+0x293>
c00057d0:	89 d6                	mov    esi,edx
c00057d2:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00057d6:	89 f1                	mov    ecx,esi
c00057d8:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00057dc:	e8 f1 c3 ff ff       	call   c0001bd2 <mem_cpy>
c00057e1:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00057e5:	e9 b1 fe ff ff       	jmp    c000569b <f_write+0x15c>
c00057ea:	bd 07 00 00 00       	mov    ebp,0x7
c00057ef:	83 c4 2c             	add    esp,0x2c
c00057f2:	89 e8                	mov    eax,ebp
c00057f4:	5b                   	pop    ebx
c00057f5:	5e                   	pop    esi
c00057f6:	5f                   	pop    edi
c00057f7:	5d                   	pop    ebp
c00057f8:	c3                   	ret    

c00057f9 <f_sync>:
c00057f9:	56                   	push   esi
c00057fa:	53                   	push   ebx
c00057fb:	83 ec 64             	sub    esp,0x64
c00057fe:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005802:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005806:	89 d8                	mov    eax,ebx
c0005808:	e8 49 ca ff ff       	call   c0002256 <validate>
c000580d:	85 c0                	test   eax,eax
c000580f:	0f 85 ba 01 00 00    	jne    c00059cf <f_sync+0x1d6>
c0005815:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005818:	f6 c2 40             	test   dl,0x40
c000581b:	0f 84 ae 01 00 00    	je     c00059cf <f_sync+0x1d6>
c0005821:	84 d2                	test   dl,dl
c0005823:	79 33                	jns    c0005858 <f_sync+0x5f>
c0005825:	83 ec 0c             	sub    esp,0xc
c0005828:	8d 43 50             	lea    eax,[ebx+0x50]
c000582b:	6a 01                	push   0x1
c000582d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005830:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005833:	50                   	push   eax
c0005834:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005838:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000583c:	50                   	push   eax
c000583d:	e8 dc c2 ff ff       	call   c0001b1e <disk_write>
c0005842:	83 c4 20             	add    esp,0x20
c0005845:	89 c2                	mov    edx,eax
c0005847:	b8 01 00 00 00       	mov    eax,0x1
c000584c:	85 d2                	test   edx,edx
c000584e:	0f 85 7b 01 00 00    	jne    c00059cf <f_sync+0x1d6>
c0005854:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005858:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000585c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000585f:	0f 85 11 01 00 00    	jne    c0005976 <f_sync+0x17d>
c0005865:	89 d8                	mov    eax,ebx
c0005867:	e8 13 d6 ff ff       	call   c0002e7f <fill_first_frag>
c000586c:	85 c0                	test   eax,eax
c000586e:	0f 85 5b 01 00 00    	jne    c00059cf <f_sync+0x1d6>
c0005874:	83 c9 ff             	or     ecx,0xffffffff
c0005877:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000587a:	89 d8                	mov    eax,ebx
c000587c:	e8 c9 d5 ff ff       	call   c0002e4a <fill_last_frag>
c0005881:	85 c0                	test   eax,eax
c0005883:	0f 85 46 01 00 00    	jne    c00059cf <f_sync+0x1d6>
c0005889:	83 ec 0c             	sub    esp,0xc
c000588c:	68 60 04 00 00       	push   0x460
c0005891:	e8 26 2d 00 00       	call   c00085bc <ff_memalloc>
c0005896:	83 c4 10             	add    esp,0x10
c0005899:	89 c6                	mov    esi,eax
c000589b:	b8 11 00 00 00       	mov    eax,0x11
c00058a0:	85 f6                	test   esi,esi
c00058a2:	0f 84 27 01 00 00    	je     c00059cf <f_sync+0x1d6>
c00058a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058ac:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00058b2:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00058b5:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00058b8:	89 da                	mov    edx,ebx
c00058ba:	8d 44 24 14          	lea    eax,[esp+0x14]
c00058be:	e8 af df ff ff       	call   c0003872 <load_obj_xdir>
c00058c3:	85 c0                	test   eax,eax
c00058c5:	0f 85 95 00 00 00    	jne    c0005960 <f_sync+0x167>
c00058cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058cf:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00058d2:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00058d6:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00058d9:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00058dc:	83 ca 01             	or     edx,0x1
c00058df:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00058e2:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00058e5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00058e8:	83 c0 34             	add    eax,0x34
c00058eb:	e8 d9 c2 ff ff       	call   c0001bc9 <st_dword>
c00058f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058f4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00058f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00058fa:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00058fd:	83 c0 38             	add    eax,0x38
c0005900:	e8 c7 c2 ff ff       	call   c0001bcc <st_qword>
c0005905:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000590c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000590f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005912:	83 c0 28             	add    eax,0x28
c0005915:	e8 b2 c2 ff ff       	call   c0001bcc <st_qword>
c000591a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000591e:	ba 00 00 21 50       	mov    edx,0x50210000
c0005923:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005926:	83 c0 0c             	add    eax,0xc
c0005929:	e8 9b c2 ff ff       	call   c0001bc9 <st_dword>
c000592e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005932:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005935:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005939:	31 d2                	xor    edx,edx
c000593b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000593e:	83 c0 10             	add    eax,0x10
c0005941:	e8 83 c2 ff ff       	call   c0001bc9 <st_dword>
c0005946:	8d 44 24 14          	lea    eax,[esp+0x14]
c000594a:	e8 62 e1 ff ff       	call   c0003ab1 <store_xdir>
c000594f:	85 c0                	test   eax,eax
c0005951:	75 0d                	jne    c0005960 <f_sync+0x167>
c0005953:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005957:	e8 00 eb ff ff       	call   c000445c <sync_fs>
c000595c:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005960:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005964:	83 ec 0c             	sub    esp,0xc
c0005967:	56                   	push   esi
c0005968:	e8 67 2c 00 00       	call   c00085d4 <ff_memfree>
c000596d:	83 c4 10             	add    esp,0x10
c0005970:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005974:	eb 59                	jmp    c00059cf <f_sync+0x1d6>
c0005976:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005979:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c000597c:	e8 b0 c9 ff ff       	call   c0002331 <move_window>
c0005981:	85 c0                	test   eax,eax
c0005983:	75 4a                	jne    c00059cf <f_sync+0x1d6>
c0005985:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005988:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c000598c:	89 f2                	mov    edx,esi
c000598e:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005991:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005993:	e8 5f f3 ff ff       	call   c0004cf7 <st_clust.isra.1>
c0005998:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000599b:	8d 46 1c             	lea    eax,[esi+0x1c]
c000599e:	e8 26 c2 ff ff       	call   c0001bc9 <st_dword>
c00059a3:	8d 46 16             	lea    eax,[esi+0x16]
c00059a6:	ba 00 00 21 50       	mov    edx,0x50210000
c00059ab:	e8 19 c2 ff ff       	call   c0001bc9 <st_dword>
c00059b0:	8d 46 12             	lea    eax,[esi+0x12]
c00059b3:	31 d2                	xor    edx,edx
c00059b5:	e8 0b c2 ff ff       	call   c0001bc5 <st_word>
c00059ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059be:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00059c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c6:	e8 91 ea ff ff       	call   c000445c <sync_fs>
c00059cb:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00059cf:	83 c4 64             	add    esp,0x64
c00059d2:	5b                   	pop    ebx
c00059d3:	5e                   	pop    esi
c00059d4:	c3                   	ret    

c00059d5 <f_close>:
c00059d5:	53                   	push   ebx
c00059d6:	83 ec 24             	sub    esp,0x24
c00059d9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00059dd:	53                   	push   ebx
c00059de:	e8 16 fe ff ff       	call   c00057f9 <f_sync>
c00059e3:	83 c4 10             	add    esp,0x10
c00059e6:	85 c0                	test   eax,eax
c00059e8:	75 15                	jne    c00059ff <f_close+0x2a>
c00059ea:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00059ee:	89 d8                	mov    eax,ebx
c00059f0:	e8 61 c8 ff ff       	call   c0002256 <validate>
c00059f5:	85 c0                	test   eax,eax
c00059f7:	75 06                	jne    c00059ff <f_close+0x2a>
c00059f9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00059ff:	83 c4 18             	add    esp,0x18
c0005a02:	5b                   	pop    ebx
c0005a03:	c3                   	ret    

c0005a04 <f_lseek>:
c0005a04:	55                   	push   ebp
c0005a05:	57                   	push   edi
c0005a06:	56                   	push   esi
c0005a07:	53                   	push   ebx
c0005a08:	83 ec 3c             	sub    esp,0x3c
c0005a0b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005a0f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005a13:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005a17:	89 04 24             	mov    DWORD PTR [esp],eax
c0005a1a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005a1e:	89 d8                	mov    eax,ebx
c0005a20:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005a24:	e8 2d c8 ff ff       	call   c0002256 <validate>
c0005a29:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a2d:	85 c0                	test   eax,eax
c0005a2f:	0f 85 7a 04 00 00    	jne    c0005eaf <f_lseek+0x4ab>
c0005a35:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005a39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a3d:	85 c0                	test   eax,eax
c0005a3f:	0f 85 6a 04 00 00    	jne    c0005eaf <f_lseek+0x4ab>
c0005a45:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005a49:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005a4c:	74 0c                	je     c0005a5a <f_lseek+0x56>
c0005a4e:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005a51:	85 c0                	test   eax,eax
c0005a53:	75 1f                	jne    c0005a74 <f_lseek+0x70>
c0005a55:	e9 b5 01 00 00       	jmp    c0005c0f <f_lseek+0x20b>
c0005a5a:	83 c9 ff             	or     ecx,0xffffffff
c0005a5d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005a60:	89 d8                	mov    eax,ebx
c0005a62:	e8 e3 d3 ff ff       	call   c0002e4a <fill_last_frag>
c0005a67:	85 c0                	test   eax,eax
c0005a69:	74 e3                	je     c0005a4e <f_lseek+0x4a>
c0005a6b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a6f:	e9 3b 04 00 00       	jmp    c0005eaf <f_lseek+0x4ab>
c0005a74:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005a79:	0f 85 ac 00 00 00    	jne    c0005b2b <f_lseek+0x127>
c0005a7f:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005a83:	0f 85 a2 00 00 00    	jne    c0005b2b <f_lseek+0x127>
c0005a89:	8d 78 04             	lea    edi,[eax+0x4]
c0005a8c:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005a8f:	8b 00                	mov    eax,DWORD PTR [eax]
c0005a91:	be 02 00 00 00       	mov    esi,0x2
c0005a96:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a9a:	85 ed                	test   ebp,ebp
c0005a9c:	74 73                	je     c0005b11 <f_lseek+0x10d>
c0005a9e:	89 e9                	mov    ecx,ebp
c0005aa0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005aa7:	ff 04 24             	inc    DWORD PTR [esp]
c0005aaa:	89 ca                	mov    edx,ecx
c0005aac:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005ab0:	89 d8                	mov    eax,ebx
c0005ab2:	e8 02 d4 ff ff       	call   c0002eb9 <get_fat>
c0005ab7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005abb:	83 f8 01             	cmp    eax,0x1
c0005abe:	77 11                	ja     c0005ad1 <f_lseek+0xcd>
c0005ac0:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005ac4:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005acc:	e9 de 03 00 00       	jmp    c0005eaf <f_lseek+0x4ab>
c0005ad1:	83 f8 ff             	cmp    eax,0xffffffff
c0005ad4:	75 11                	jne    c0005ae7 <f_lseek+0xe3>
c0005ad6:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005ada:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005ae2:	e9 c8 03 00 00       	jmp    c0005eaf <f_lseek+0x4ab>
c0005ae7:	8d 51 01             	lea    edx,[ecx+0x1]
c0005aea:	89 c1                	mov    ecx,eax
c0005aec:	39 c2                	cmp    edx,eax
c0005aee:	74 b7                	je     c0005aa7 <f_lseek+0xa3>
c0005af0:	83 c6 02             	add    esi,0x2
c0005af3:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005af7:	72 0b                	jb     c0005b04 <f_lseek+0x100>
c0005af9:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005afc:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005aff:	89 0f                	mov    DWORD PTR [edi],ecx
c0005b01:	83 c7 08             	add    edi,0x8
c0005b04:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005b08:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005b0b:	76 04                	jbe    c0005b11 <f_lseek+0x10d>
c0005b0d:	89 c5                	mov    ebp,eax
c0005b0f:	eb 8d                	jmp    c0005a9e <f_lseek+0x9a>
c0005b11:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b14:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005b18:	89 30                	mov    DWORD PTR [eax],esi
c0005b1a:	0f 87 87 03 00 00    	ja     c0005ea7 <f_lseek+0x4a3>
c0005b20:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005b26:	e9 84 03 00 00       	jmp    c0005eaf <f_lseek+0x4ab>
c0005b2b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005b2e:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005b31:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b35:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b39:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b3d:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005b40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b44:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005b48:	73 0f                	jae    c0005b59 <f_lseek+0x155>
c0005b4a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b4d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b51:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b55:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b59:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b5d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b61:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005b64:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b6b:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005b6f:	0f 84 3a 03 00 00    	je     c0005eaf <f_lseek+0x4ab>
c0005b75:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005b79:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005b7d:	83 c6 ff             	add    esi,0xffffffff
c0005b80:	89 d8                	mov    eax,ebx
c0005b82:	83 d7 ff             	adc    edi,0xffffffff
c0005b85:	89 f2                	mov    edx,esi
c0005b87:	89 f9                	mov    ecx,edi
c0005b89:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005b8d:	89 34 24             	mov    DWORD PTR [esp],esi
c0005b90:	e8 78 c2 ff ff       	call   c0001e0d <clmt_clust>
c0005b95:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005b99:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005b9c:	89 c2                	mov    edx,eax
c0005b9e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005ba2:	89 c8                	mov    eax,ecx
c0005ba4:	e8 43 c2 ff ff       	call   c0001dec <clst2sect>
c0005ba9:	89 d7                	mov    edi,edx
c0005bab:	09 c7                	or     edi,eax
c0005bad:	0f 84 0d ff ff ff    	je     c0005ac0 <f_lseek+0xbc>
c0005bb3:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005bb7:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005bbd:	0f 84 ec 02 00 00    	je     c0005eaf <f_lseek+0x4ab>
c0005bc3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005bc7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bcb:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005bce:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005bd2:	0f ac fe 09          	shrd   esi,edi,0x9
c0005bd6:	4d                   	dec    ebp
c0005bd7:	31 ff                	xor    edi,edi
c0005bd9:	21 ee                	and    esi,ebp
c0005bdb:	01 c6                	add    esi,eax
c0005bdd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005be0:	11 d7                	adc    edi,edx
c0005be2:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005be5:	39 fa                	cmp    edx,edi
c0005be7:	75 08                	jne    c0005bf1 <f_lseek+0x1ed>
c0005be9:	39 f0                	cmp    eax,esi
c0005beb:	0f 84 be 02 00 00    	je     c0005eaf <f_lseek+0x4ab>
c0005bf1:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005bf4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005bf8:	0f 89 80 02 00 00    	jns    c0005e7e <f_lseek+0x47a>
c0005bfe:	83 ec 0c             	sub    esp,0xc
c0005c01:	6a 01                	push   0x1
c0005c03:	52                   	push   edx
c0005c04:	50                   	push   eax
c0005c05:	55                   	push   ebp
c0005c06:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005c0a:	e9 5a 02 00 00       	jmp    c0005e69 <f_lseek+0x465>
c0005c0f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c13:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005c16:	74 16                	je     c0005c2e <f_lseek+0x22a>
c0005c18:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005c1d:	76 0f                	jbe    c0005c2e <f_lseek+0x22a>
c0005c1f:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005c26:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c2e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005c31:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005c34:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005c37:	89 c7                	mov    edi,eax
c0005c39:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005c3d:	73 0d                	jae    c0005c4c <f_lseek+0x248>
c0005c3f:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005c43:	75 07                	jne    c0005c4c <f_lseek+0x248>
c0005c45:	89 14 24             	mov    DWORD PTR [esp],edx
c0005c48:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005c4c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005c4f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005c52:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c56:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005c5d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005c64:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005c67:	75 09                	jne    c0005c72 <f_lseek+0x26e>
c0005c69:	31 f6                	xor    esi,esi
c0005c6b:	31 ff                	xor    edi,edi
c0005c6d:	e9 af 01 00 00       	jmp    c0005e21 <f_lseek+0x41d>
c0005c72:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005c76:	89 d7                	mov    edi,edx
c0005c78:	c1 e1 09             	shl    ecx,0x9
c0005c7b:	09 c7                	or     edi,eax
c0005c7d:	89 cd                	mov    ebp,ecx
c0005c7f:	74 6d                	je     c0005cee <f_lseek+0x2ea>
c0005c81:	83 c0 ff             	add    eax,0xffffffff
c0005c84:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c88:	83 d2 ff             	adc    edx,0xffffffff
c0005c8b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c92:	83 c0 ff             	add    eax,0xffffffff
c0005c95:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c99:	83 d2 ff             	adc    edx,0xffffffff
c0005c9c:	31 ff                	xor    edi,edi
c0005c9e:	57                   	push   edi
c0005c9f:	51                   	push   ecx
c0005ca0:	52                   	push   edx
c0005ca1:	50                   	push   eax
c0005ca2:	e8 b9 c9 01 00       	call   c0022660 <__udivdi3>
c0005ca7:	83 c4 10             	add    esp,0x10
c0005caa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005cae:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005cb2:	57                   	push   edi
c0005cb3:	55                   	push   ebp
c0005cb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cb8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cbc:	e8 9f c9 01 00       	call   c0022660 <__udivdi3>
c0005cc1:	83 c4 10             	add    esp,0x10
c0005cc4:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005cc8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005ccc:	19 d1                	sbb    ecx,edx
c0005cce:	72 1e                	jb     c0005cee <f_lseek+0x2ea>
c0005cd0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005cd4:	89 e9                	mov    ecx,ebp
c0005cd6:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005cd9:	f7 d9                	neg    ecx
c0005cdb:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005cde:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005ce2:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005ce5:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005ce8:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005cec:	eb 28                	jmp    c0005d16 <f_lseek+0x312>
c0005cee:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005cf1:	85 c0                	test   eax,eax
c0005cf3:	75 1e                	jne    c0005d13 <f_lseek+0x30f>
c0005cf5:	31 d2                	xor    edx,edx
c0005cf7:	89 d8                	mov    eax,ebx
c0005cf9:	e8 a9 d4 ff ff       	call   c00031a7 <create_chain>
c0005cfe:	83 f8 01             	cmp    eax,0x1
c0005d01:	0f 84 b9 fd ff ff    	je     c0005ac0 <f_lseek+0xbc>
c0005d07:	83 f8 ff             	cmp    eax,0xffffffff
c0005d0a:	0f 84 c6 fd ff ff    	je     c0005ad6 <f_lseek+0xd2>
c0005d10:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005d13:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005d16:	85 c0                	test   eax,eax
c0005d18:	0f 84 4b ff ff ff    	je     c0005c69 <f_lseek+0x265>
c0005d1e:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005d22:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005d2a:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005d2d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d31:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005d34:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005d37:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d3b:	0f 83 9d 00 00 00    	jae    c0005dde <f_lseek+0x3da>
c0005d41:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d45:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d49:	29 34 24             	sub    DWORD PTR [esp],esi
c0005d4c:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005d50:	01 f2                	add    edx,esi
c0005d52:	11 f9                	adc    ecx,edi
c0005d54:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005d58:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005d5c:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005d5f:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005d62:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005d65:	f6 c1 02             	test   cl,0x2
c0005d68:	74 35                	je     c0005d9f <f_lseek+0x39b>
c0005d6a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005d6e:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005d71:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005d74:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005d78:	73 16                	jae    c0005d90 <f_lseek+0x38c>
c0005d7a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005d7e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005d82:	88 ca                	mov    dl,cl
c0005d84:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005d87:	83 ca 40             	or     edx,0x40
c0005d8a:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005d8d:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005d90:	89 c2                	mov    edx,eax
c0005d92:	89 d8                	mov    eax,ebx
c0005d94:	e8 0e d4 ff ff       	call   c00031a7 <create_chain>
c0005d99:	85 c0                	test   eax,eax
c0005d9b:	75 0b                	jne    c0005da8 <f_lseek+0x3a4>
c0005d9d:	eb 30                	jmp    c0005dcf <f_lseek+0x3cb>
c0005d9f:	89 c2                	mov    edx,eax
c0005da1:	89 d8                	mov    eax,ebx
c0005da3:	e8 11 d1 ff ff       	call   c0002eb9 <get_fat>
c0005da8:	83 f8 ff             	cmp    eax,0xffffffff
c0005dab:	0f 84 25 fd ff ff    	je     c0005ad6 <f_lseek+0xd2>
c0005db1:	83 f8 01             	cmp    eax,0x1
c0005db4:	0f 86 06 fd ff ff    	jbe    c0005ac0 <f_lseek+0xbc>
c0005dba:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005dbe:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005dc1:	0f 86 f9 fc ff ff    	jbe    c0005ac0 <f_lseek+0xbc>
c0005dc7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dca:	e9 5b ff ff ff       	jmp    c0005d2a <f_lseek+0x326>
c0005dcf:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005dd6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005dde:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005de1:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005de5:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005de8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005deb:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005dee:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005df4:	0f 84 6f fe ff ff    	je     c0005c69 <f_lseek+0x265>
c0005dfa:	89 c2                	mov    edx,eax
c0005dfc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005e00:	e8 e7 bf ff ff       	call   c0001dec <clst2sect>
c0005e05:	89 d7                	mov    edi,edx
c0005e07:	09 c7                	or     edi,eax
c0005e09:	0f 84 b1 fc ff ff    	je     c0005ac0 <f_lseek+0xbc>
c0005e0f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005e13:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005e16:	0f ac fe 09          	shrd   esi,edi,0x9
c0005e1a:	c1 ef 09             	shr    edi,0x9
c0005e1d:	01 c6                	add    esi,eax
c0005e1f:	11 d7                	adc    edi,edx
c0005e21:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005e24:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005e27:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005e2a:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005e2d:	19 d1                	sbb    ecx,edx
c0005e2f:	73 0a                	jae    c0005e3b <f_lseek+0x437>
c0005e31:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005e34:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005e37:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005e3b:	a9 ff 01 00 00       	test   eax,0x1ff
c0005e40:	74 6d                	je     c0005eaf <f_lseek+0x4ab>
c0005e42:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005e45:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005e48:	39 fa                	cmp    edx,edi
c0005e4a:	75 04                	jne    c0005e50 <f_lseek+0x44c>
c0005e4c:	39 f0                	cmp    eax,esi
c0005e4e:	74 5f                	je     c0005eaf <f_lseek+0x4ab>
c0005e50:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005e53:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005e57:	79 25                	jns    c0005e7e <f_lseek+0x47a>
c0005e59:	83 ec 0c             	sub    esp,0xc
c0005e5c:	6a 01                	push   0x1
c0005e5e:	52                   	push   edx
c0005e5f:	50                   	push   eax
c0005e60:	55                   	push   ebp
c0005e61:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e65:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e69:	50                   	push   eax
c0005e6a:	e8 af bc ff ff       	call   c0001b1e <disk_write>
c0005e6f:	83 c4 20             	add    esp,0x20
c0005e72:	85 c0                	test   eax,eax
c0005e74:	0f 85 5c fc ff ff    	jne    c0005ad6 <f_lseek+0xd2>
c0005e7a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005e7e:	83 ec 0c             	sub    esp,0xc
c0005e81:	6a 01                	push   0x1
c0005e83:	57                   	push   edi
c0005e84:	56                   	push   esi
c0005e85:	55                   	push   ebp
c0005e86:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e8a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e8e:	50                   	push   eax
c0005e8f:	e8 74 bc ff ff       	call   c0001b08 <disk_read>
c0005e94:	83 c4 20             	add    esp,0x20
c0005e97:	85 c0                	test   eax,eax
c0005e99:	0f 85 37 fc ff ff    	jne    c0005ad6 <f_lseek+0xd2>
c0005e9f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005ea2:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005ea5:	eb 08                	jmp    c0005eaf <f_lseek+0x4ab>
c0005ea7:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005eaf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005eb3:	83 c4 3c             	add    esp,0x3c
c0005eb6:	5b                   	pop    ebx
c0005eb7:	5e                   	pop    esi
c0005eb8:	5f                   	pop    edi
c0005eb9:	5d                   	pop    ebp
c0005eba:	c3                   	ret    

c0005ebb <f_opendir>:
c0005ebb:	56                   	push   esi
c0005ebc:	b8 09 00 00 00       	mov    eax,0x9
c0005ec1:	53                   	push   ebx
c0005ec2:	83 ec 24             	sub    esp,0x24
c0005ec5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ec9:	85 db                	test   ebx,ebx
c0005ecb:	0f 84 e6 00 00 00    	je     c0005fb7 <f_opendir+0xfc>
c0005ed1:	31 c9                	xor    ecx,ecx
c0005ed3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ed7:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005edb:	e8 03 c7 ff ff       	call   c00025e3 <mount_volume>
c0005ee0:	85 c0                	test   eax,eax
c0005ee2:	0f 85 c9 00 00 00    	jne    c0005fb1 <f_opendir+0xf6>
c0005ee8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005eec:	83 ec 0c             	sub    esp,0xc
c0005eef:	89 03                	mov    DWORD PTR [ebx],eax
c0005ef1:	68 60 04 00 00       	push   0x460
c0005ef6:	e8 c1 26 00 00       	call   c00085bc <ff_memalloc>
c0005efb:	83 c4 10             	add    esp,0x10
c0005efe:	89 c6                	mov    esi,eax
c0005f00:	b8 11 00 00 00       	mov    eax,0x11
c0005f05:	85 f6                	test   esi,esi
c0005f07:	0f 84 aa 00 00 00    	je     c0005fb7 <f_opendir+0xfc>
c0005f0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f11:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f17:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f1a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f1d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005f21:	89 d8                	mov    eax,ebx
c0005f23:	e8 31 ee ff ff       	call   c0004d59 <follow_path>
c0005f28:	85 c0                	test   eax,eax
c0005f2a:	75 61                	jne    c0005f8d <f_opendir+0xd2>
c0005f2c:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005f30:	78 46                	js     c0005f78 <f_opendir+0xbd>
c0005f32:	b8 05 00 00 00       	mov    eax,0x5
c0005f37:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005f3b:	74 50                	je     c0005f8d <f_opendir+0xd2>
c0005f3d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005f41:	8a 01                	mov    al,BYTE PTR [ecx]
c0005f43:	3c 04                	cmp    al,0x4
c0005f45:	75 26                	jne    c0005f6d <f_opendir+0xb2>
c0005f47:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005f4a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005f4d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005f50:	30 d2                	xor    dl,dl
c0005f52:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005f56:	09 c2                	or     edx,eax
c0005f58:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005f5b:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005f5e:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005f61:	89 da                	mov    edx,ebx
c0005f63:	8d 41 10             	lea    eax,[ecx+0x10]
c0005f66:	e8 b4 ed ff ff       	call   c0004d1f <init_alloc_info.isra.2>
c0005f6b:	eb 0b                	jmp    c0005f78 <f_opendir+0xbd>
c0005f6d:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005f70:	e8 59 ed ff ff       	call   c0004cce <ld_clust.isra.0>
c0005f75:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005f78:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f7c:	31 d2                	xor    edx,edx
c0005f7e:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005f82:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005f86:	89 d8                	mov    eax,ebx
c0005f88:	e8 22 d1 ff ff       	call   c00030af <dir_sdi>
c0005f8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f91:	83 ec 0c             	sub    esp,0xc
c0005f94:	56                   	push   esi
c0005f95:	e8 3a 26 00 00       	call   c00085d4 <ff_memfree>
c0005f9a:	83 c4 10             	add    esp,0x10
c0005f9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fa1:	83 f8 04             	cmp    eax,0x4
c0005fa4:	74 06                	je     c0005fac <f_opendir+0xf1>
c0005fa6:	85 c0                	test   eax,eax
c0005fa8:	74 0d                	je     c0005fb7 <f_opendir+0xfc>
c0005faa:	eb 05                	jmp    c0005fb1 <f_opendir+0xf6>
c0005fac:	b8 05 00 00 00       	mov    eax,0x5
c0005fb1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fb7:	83 c4 24             	add    esp,0x24
c0005fba:	5b                   	pop    ebx
c0005fbb:	5e                   	pop    esi
c0005fbc:	c3                   	ret    

c0005fbd <f_closedir>:
c0005fbd:	53                   	push   ebx
c0005fbe:	83 ec 18             	sub    esp,0x18
c0005fc1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005fc5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005fc9:	89 d8                	mov    eax,ebx
c0005fcb:	e8 86 c2 ff ff       	call   c0002256 <validate>
c0005fd0:	85 c0                	test   eax,eax
c0005fd2:	75 06                	jne    c0005fda <f_closedir+0x1d>
c0005fd4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fda:	83 c4 18             	add    esp,0x18
c0005fdd:	5b                   	pop    ebx
c0005fde:	c3                   	ret    

c0005fdf <f_readdir>:
c0005fdf:	57                   	push   edi
c0005fe0:	56                   	push   esi
c0005fe1:	53                   	push   ebx
c0005fe2:	83 ec 20             	sub    esp,0x20
c0005fe5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fe9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005fed:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ff1:	89 d8                	mov    eax,ebx
c0005ff3:	e8 5e c2 ff ff       	call   c0002256 <validate>
c0005ff8:	85 c0                	test   eax,eax
c0005ffa:	75 77                	jne    c0006073 <f_readdir+0x94>
c0005ffc:	85 ff                	test   edi,edi
c0005ffe:	75 0b                	jne    c000600b <f_readdir+0x2c>
c0006000:	31 d2                	xor    edx,edx
c0006002:	89 d8                	mov    eax,ebx
c0006004:	e8 a6 d0 ff ff       	call   c00030af <dir_sdi>
c0006009:	eb 68                	jmp    c0006073 <f_readdir+0x94>
c000600b:	83 ec 0c             	sub    esp,0xc
c000600e:	68 60 04 00 00       	push   0x460
c0006013:	e8 a4 25 00 00       	call   c00085bc <ff_memalloc>
c0006018:	83 c4 10             	add    esp,0x10
c000601b:	89 c6                	mov    esi,eax
c000601d:	b8 11 00 00 00       	mov    eax,0x11
c0006022:	85 f6                	test   esi,esi
c0006024:	74 4d                	je     c0006073 <f_readdir+0x94>
c0006026:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000602a:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006030:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006033:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006036:	31 d2                	xor    edx,edx
c0006038:	89 d8                	mov    eax,ebx
c000603a:	e8 80 d8 ff ff       	call   c00038bf <dir_read>
c000603f:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006044:	75 19                	jne    c000605f <f_readdir+0x80>
c0006046:	89 fa                	mov    edx,edi
c0006048:	89 d8                	mov    eax,ebx
c000604a:	e8 7e ea ff ff       	call   c0004acd <get_fileinfo>
c000604f:	31 d2                	xor    edx,edx
c0006051:	89 d8                	mov    eax,ebx
c0006053:	e8 af d5 ff ff       	call   c0003607 <dir_next>
c0006058:	83 f8 04             	cmp    eax,0x4
c000605b:	75 02                	jne    c000605f <f_readdir+0x80>
c000605d:	31 c0                	xor    eax,eax
c000605f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006063:	83 ec 0c             	sub    esp,0xc
c0006066:	56                   	push   esi
c0006067:	e8 68 25 00 00       	call   c00085d4 <ff_memfree>
c000606c:	83 c4 10             	add    esp,0x10
c000606f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006073:	83 c4 20             	add    esp,0x20
c0006076:	5b                   	pop    ebx
c0006077:	5e                   	pop    esi
c0006078:	5f                   	pop    edi
c0006079:	c3                   	ret    

c000607a <f_stat>:
c000607a:	57                   	push   edi
c000607b:	31 c9                	xor    ecx,ecx
c000607d:	56                   	push   esi
c000607e:	53                   	push   ebx
c000607f:	83 ec 50             	sub    esp,0x50
c0006082:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0006086:	8d 54 24 04          	lea    edx,[esp+0x4]
c000608a:	8d 44 24 60          	lea    eax,[esp+0x60]
c000608e:	e8 50 c5 ff ff       	call   c00025e3 <mount_volume>
c0006093:	89 c3                	mov    ebx,eax
c0006095:	85 c0                	test   eax,eax
c0006097:	75 67                	jne    c0006100 <f_stat+0x86>
c0006099:	83 ec 0c             	sub    esp,0xc
c000609c:	bb 11 00 00 00       	mov    ebx,0x11
c00060a1:	68 60 04 00 00       	push   0x460
c00060a6:	e8 11 25 00 00       	call   c00085bc <ff_memalloc>
c00060ab:	83 c4 10             	add    esp,0x10
c00060ae:	89 c6                	mov    esi,eax
c00060b0:	85 c0                	test   eax,eax
c00060b2:	74 4c                	je     c0006100 <f_stat+0x86>
c00060b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00060b8:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00060be:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00060c1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00060c4:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00060c8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060cc:	e8 88 ec ff ff       	call   c0004d59 <follow_path>
c00060d1:	89 c3                	mov    ebx,eax
c00060d3:	85 c0                	test   eax,eax
c00060d5:	75 1d                	jne    c00060f4 <f_stat+0x7a>
c00060d7:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00060dc:	78 11                	js     c00060ef <f_stat+0x75>
c00060de:	85 ff                	test   edi,edi
c00060e0:	74 12                	je     c00060f4 <f_stat+0x7a>
c00060e2:	89 fa                	mov    edx,edi
c00060e4:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060e8:	e8 e0 e9 ff ff       	call   c0004acd <get_fileinfo>
c00060ed:	eb 05                	jmp    c00060f4 <f_stat+0x7a>
c00060ef:	bb 06 00 00 00       	mov    ebx,0x6
c00060f4:	83 ec 0c             	sub    esp,0xc
c00060f7:	56                   	push   esi
c00060f8:	e8 d7 24 00 00       	call   c00085d4 <ff_memfree>
c00060fd:	83 c4 10             	add    esp,0x10
c0006100:	83 c4 50             	add    esp,0x50
c0006103:	89 d8                	mov    eax,ebx
c0006105:	5b                   	pop    ebx
c0006106:	5e                   	pop    esi
c0006107:	5f                   	pop    edi
c0006108:	c3                   	ret    

c0006109 <f_getfree>:
c0006109:	55                   	push   ebp
c000610a:	31 c9                	xor    ecx,ecx
c000610c:	57                   	push   edi
c000610d:	56                   	push   esi
c000610e:	53                   	push   ebx
c000610f:	83 ec 5c             	sub    esp,0x5c
c0006112:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006116:	8d 44 24 70          	lea    eax,[esp+0x70]
c000611a:	e8 c4 c4 ff ff       	call   c00025e3 <mount_volume>
c000611f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006123:	85 c0                	test   eax,eax
c0006125:	0f 85 9d 01 00 00    	jne    c00062c8 <f_getfree+0x1bf>
c000612b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000612f:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006133:	89 02                	mov    DWORD PTR [edx],eax
c0006135:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006138:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000613b:	8d 71 fe             	lea    esi,[ecx-0x2]
c000613e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006142:	39 f2                	cmp    edx,esi
c0006144:	77 0b                	ja     c0006151 <f_getfree+0x48>
c0006146:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000614a:	89 10                	mov    DWORD PTR [eax],edx
c000614c:	e9 77 01 00 00       	jmp    c00062c8 <f_getfree+0x1bf>
c0006151:	8a 10                	mov    dl,BYTE PTR [eax]
c0006153:	80 fa 01             	cmp    dl,0x1
c0006156:	75 3a                	jne    c0006192 <f_getfree+0x89>
c0006158:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000615c:	be 02 00 00 00       	mov    esi,0x2
c0006161:	31 db                	xor    ebx,ebx
c0006163:	89 f2                	mov    edx,esi
c0006165:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006169:	e8 4b cd ff ff       	call   c0002eb9 <get_fat>
c000616e:	83 f8 ff             	cmp    eax,0xffffffff
c0006171:	0f 84 28 01 00 00    	je     c000629f <f_getfree+0x196>
c0006177:	83 f8 01             	cmp    eax,0x1
c000617a:	0f 84 29 01 00 00    	je     c00062a9 <f_getfree+0x1a0>
c0006180:	83 d3 00             	adc    ebx,0x0
c0006183:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006187:	46                   	inc    esi
c0006188:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000618b:	77 d6                	ja     c0006163 <f_getfree+0x5a>
c000618d:	e9 25 01 00 00       	jmp    c00062b7 <f_getfree+0x1ae>
c0006192:	80 fa 04             	cmp    dl,0x4
c0006195:	0f 85 88 00 00 00    	jne    c0006223 <f_getfree+0x11a>
c000619b:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c000619e:	31 ed                	xor    ebp,ebp
c00061a0:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00061a3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061a7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061ab:	31 db                	xor    ebx,ebx
c00061ad:	85 ed                	test   ebp,ebp
c00061af:	75 3f                	jne    c00061f0 <f_getfree+0xe7>
c00061b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00061b5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00061b9:	83 c0 01             	add    eax,0x1
c00061bc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00061c0:	83 d2 00             	adc    edx,0x0
c00061c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00061c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00061cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061cf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00061d3:	e8 59 c1 ff ff       	call   c0002331 <move_window>
c00061d8:	85 c0                	test   eax,eax
c00061da:	0f 85 d3 00 00 00    	jne    c00062b3 <f_getfree+0x1aa>
c00061e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00061e4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00061e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061f0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061f4:	8d 4e f8             	lea    ecx,[esi-0x8]
c00061f7:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00061fb:	89 cf                	mov    edi,ecx
c00061fd:	85 f6                	test   esi,esi
c00061ff:	74 12                	je     c0006213 <f_getfree+0x10a>
c0006201:	88 c1                	mov    cl,al
c0006203:	83 e1 01             	and    ecx,0x1
c0006206:	80 f9 01             	cmp    cl,0x1
c0006209:	83 d3 00             	adc    ebx,0x0
c000620c:	d0 e8                	shr    al,1
c000620e:	4e                   	dec    esi
c000620f:	39 fe                	cmp    esi,edi
c0006211:	75 ea                	jne    c00061fd <f_getfree+0xf4>
c0006213:	45                   	inc    ebp
c0006214:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000621a:	85 f6                	test   esi,esi
c000621c:	75 8f                	jne    c00061ad <f_getfree+0xa4>
c000621e:	e9 94 00 00 00       	jmp    c00062b7 <f_getfree+0x1ae>
c0006223:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006226:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006229:	31 f6                	xor    esi,esi
c000622b:	31 db                	xor    ebx,ebx
c000622d:	85 f6                	test   esi,esi
c000622f:	75 1b                	jne    c000624c <f_getfree+0x143>
c0006231:	89 d7                	mov    edi,edx
c0006233:	89 cd                	mov    ebp,ecx
c0006235:	83 c7 01             	add    edi,0x1
c0006238:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000623c:	83 d5 00             	adc    ebp,0x0
c000623f:	e8 ed c0 ff ff       	call   c0002331 <move_window>
c0006244:	85 c0                	test   eax,eax
c0006246:	75 6b                	jne    c00062b3 <f_getfree+0x1aa>
c0006248:	89 fa                	mov    edx,edi
c000624a:	89 e9                	mov    ecx,ebp
c000624c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006250:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006254:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006258:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000625b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000625f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006263:	75 11                	jne    c0006276 <f_getfree+0x16d>
c0006265:	e8 e9 b8 ff ff       	call   c0001b53 <ld_word>
c000626a:	66 83 f8 01          	cmp    ax,0x1
c000626e:	83 d3 00             	adc    ebx,0x0
c0006271:	83 c6 02             	add    esi,0x2
c0006274:	eb 13                	jmp    c0006289 <f_getfree+0x180>
c0006276:	e8 e5 b8 ff ff       	call   c0001b60 <ld_dword>
c000627b:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006280:	83 f8 01             	cmp    eax,0x1
c0006283:	83 d3 00             	adc    ebx,0x0
c0006286:	83 c6 04             	add    esi,0x4
c0006289:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000628f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006293:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006297:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000629b:	75 90                	jne    c000622d <f_getfree+0x124>
c000629d:	eb 18                	jmp    c00062b7 <f_getfree+0x1ae>
c000629f:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00062a7:	eb 0e                	jmp    c00062b7 <f_getfree+0x1ae>
c00062a9:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00062b1:	eb 04                	jmp    c00062b7 <f_getfree+0x1ae>
c00062b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062b7:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00062bb:	89 18                	mov    DWORD PTR [eax],ebx
c00062bd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c1:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00062c4:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00062c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00062cc:	83 c4 5c             	add    esp,0x5c
c00062cf:	5b                   	pop    ebx
c00062d0:	5e                   	pop    esi
c00062d1:	5f                   	pop    edi
c00062d2:	5d                   	pop    ebp
c00062d3:	c3                   	ret    

c00062d4 <f_truncate>:
c00062d4:	56                   	push   esi
c00062d5:	53                   	push   ebx
c00062d6:	83 ec 14             	sub    esp,0x14
c00062d9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00062dd:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00062e1:	89 d8                	mov    eax,ebx
c00062e3:	e8 6e bf ff ff       	call   c0002256 <validate>
c00062e8:	89 c6                	mov    esi,eax
c00062ea:	85 c0                	test   eax,eax
c00062ec:	0f 85 d2 00 00 00    	jne    c00063c4 <f_truncate+0xf0>
c00062f2:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00062f6:	85 f6                	test   esi,esi
c00062f8:	0f 85 c6 00 00 00    	jne    c00063c4 <f_truncate+0xf0>
c00062fe:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006302:	0f 84 b7 00 00 00    	je     c00063bf <f_truncate+0xeb>
c0006308:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000630b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000630e:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006311:	89 d1                	mov    ecx,edx
c0006313:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006316:	0f 83 a8 00 00 00    	jae    c00063c4 <f_truncate+0xf0>
c000631c:	09 c2                	or     edx,eax
c000631e:	75 15                	jne    c0006335 <f_truncate+0x61>
c0006320:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006323:	31 c9                	xor    ecx,ecx
c0006325:	89 d8                	mov    eax,ebx
c0006327:	e8 7a d0 ff ff       	call   c00033a6 <remove_chain>
c000632c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006333:	eb 35                	jmp    c000636a <f_truncate+0x96>
c0006335:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006338:	89 d8                	mov    eax,ebx
c000633a:	e8 7a cb ff ff       	call   c0002eb9 <get_fat>
c000633f:	89 c2                	mov    edx,eax
c0006341:	b8 01 00 00 00       	mov    eax,0x1
c0006346:	83 fa ff             	cmp    edx,0xffffffff
c0006349:	74 1f                	je     c000636a <f_truncate+0x96>
c000634b:	b8 02 00 00 00       	mov    eax,0x2
c0006350:	83 fa 01             	cmp    edx,0x1
c0006353:	74 15                	je     c000636a <f_truncate+0x96>
c0006355:	31 c0                	xor    eax,eax
c0006357:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000635b:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000635e:	76 0a                	jbe    c000636a <f_truncate+0x96>
c0006360:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006363:	89 d8                	mov    eax,ebx
c0006365:	e8 3c d0 ff ff       	call   c00033a6 <remove_chain>
c000636a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000636d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006370:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006373:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006376:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006379:	83 ca 40             	or     edx,0x40
c000637c:	85 c0                	test   eax,eax
c000637e:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006381:	75 35                	jne    c00063b8 <f_truncate+0xe4>
c0006383:	84 d2                	test   dl,dl
c0006385:	79 3d                	jns    c00063c4 <f_truncate+0xf0>
c0006387:	83 ec 0c             	sub    esp,0xc
c000638a:	8d 43 50             	lea    eax,[ebx+0x50]
c000638d:	6a 01                	push   0x1
c000638f:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006392:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006395:	50                   	push   eax
c0006396:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000639a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000639e:	50                   	push   eax
c000639f:	e8 7a b7 ff ff       	call   c0001b1e <disk_write>
c00063a4:	83 c4 20             	add    esp,0x20
c00063a7:	85 c0                	test   eax,eax
c00063a9:	75 08                	jne    c00063b3 <f_truncate+0xdf>
c00063ab:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00063af:	31 f6                	xor    esi,esi
c00063b1:	eb 11                	jmp    c00063c4 <f_truncate+0xf0>
c00063b3:	b8 01 00 00 00       	mov    eax,0x1
c00063b8:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00063bb:	89 c6                	mov    esi,eax
c00063bd:	eb 05                	jmp    c00063c4 <f_truncate+0xf0>
c00063bf:	be 07 00 00 00       	mov    esi,0x7
c00063c4:	89 f0                	mov    eax,esi
c00063c6:	83 c4 14             	add    esp,0x14
c00063c9:	5b                   	pop    ebx
c00063ca:	5e                   	pop    esi
c00063cb:	c3                   	ret    

c00063cc <f_unlink>:
c00063cc:	56                   	push   esi
c00063cd:	b9 02 00 00 00       	mov    ecx,0x2
c00063d2:	53                   	push   ebx
c00063d3:	81 ec e4 00 00 00    	sub    esp,0xe4
c00063d9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00063dd:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00063e4:	e8 fa c1 ff ff       	call   c00025e3 <mount_volume>
c00063e9:	85 c0                	test   eax,eax
c00063eb:	0f 85 55 01 00 00    	jne    c0006546 <f_unlink+0x17a>
c00063f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063f5:	83 ec 0c             	sub    esp,0xc
c00063f8:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00063fc:	68 60 04 00 00       	push   0x460
c0006401:	e8 b6 21 00 00       	call   c00085bc <ff_memalloc>
c0006406:	83 c4 10             	add    esp,0x10
c0006409:	89 c3                	mov    ebx,eax
c000640b:	b8 11 00 00 00       	mov    eax,0x11
c0006410:	85 db                	test   ebx,ebx
c0006412:	0f 84 2e 01 00 00    	je     c0006546 <f_unlink+0x17a>
c0006418:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000641c:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006422:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006425:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006428:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000642f:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006433:	e8 21 e9 ff ff       	call   c0004d59 <follow_path>
c0006438:	85 c0                	test   eax,eax
c000643a:	0f 85 f2 00 00 00    	jne    c0006532 <f_unlink+0x166>
c0006440:	b8 06 00 00 00       	mov    eax,0x6
c0006445:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000644d:	0f 88 df 00 00 00    	js     c0006532 <f_unlink+0x166>
c0006453:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006458:	74 0a                	je     c0006464 <f_unlink+0x98>
c000645a:	b8 07 00 00 00       	mov    eax,0x7
c000645f:	e9 ce 00 00 00       	jmp    c0006532 <f_unlink+0x166>
c0006464:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006468:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000646c:	8a 02                	mov    al,BYTE PTR [edx]
c000646e:	3c 04                	cmp    al,0x4
c0006470:	75 12                	jne    c0006484 <f_unlink+0xb8>
c0006472:	8d 42 10             	lea    eax,[edx+0x10]
c0006475:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006479:	e8 a1 e8 ff ff       	call   c0004d1f <init_alloc_info.isra.2>
c000647e:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006482:	eb 0e                	jmp    c0006492 <f_unlink+0xc6>
c0006484:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000648b:	e8 3e e8 ff ff       	call   c0004cce <ld_clust.isra.0>
c0006490:	89 c6                	mov    esi,eax
c0006492:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c0006497:	75 12                	jne    c00064ab <f_unlink+0xdf>
c0006499:	8d 44 24 48          	lea    eax,[esp+0x48]
c000649d:	e8 94 d6 ff ff       	call   c0003b36 <dir_remove>
c00064a2:	85 c0                	test   eax,eax
c00064a4:	74 6c                	je     c0006512 <f_unlink+0x146>
c00064a6:	e9 87 00 00 00       	jmp    c0006532 <f_unlink+0x166>
c00064ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064af:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00064b6:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00064bd:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064c0:	75 21                	jne    c00064e3 <f_unlink+0x117>
c00064c2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00064c6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00064ca:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00064d1:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00064d8:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00064dc:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00064e3:	31 d2                	xor    edx,edx
c00064e5:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00064ec:	e8 be cb ff ff       	call   c00030af <dir_sdi>
c00064f1:	85 c0                	test   eax,eax
c00064f3:	75 3d                	jne    c0006532 <f_unlink+0x166>
c00064f5:	31 d2                	xor    edx,edx
c00064f7:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00064fe:	e8 bc d3 ff ff       	call   c00038bf <dir_read>
c0006503:	85 c0                	test   eax,eax
c0006505:	0f 84 4f ff ff ff    	je     c000645a <f_unlink+0x8e>
c000650b:	83 f8 04             	cmp    eax,0x4
c000650e:	75 22                	jne    c0006532 <f_unlink+0x166>
c0006510:	eb 87                	jmp    c0006499 <f_unlink+0xcd>
c0006512:	85 f6                	test   esi,esi
c0006514:	75 0b                	jne    c0006521 <f_unlink+0x155>
c0006516:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000651a:	e8 3d df ff ff       	call   c000445c <sync_fs>
c000651f:	eb 11                	jmp    c0006532 <f_unlink+0x166>
c0006521:	31 c9                	xor    ecx,ecx
c0006523:	89 f2                	mov    edx,esi
c0006525:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006529:	e8 78 ce ff ff       	call   c00033a6 <remove_chain>
c000652e:	85 c0                	test   eax,eax
c0006530:	74 e4                	je     c0006516 <f_unlink+0x14a>
c0006532:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006536:	83 ec 0c             	sub    esp,0xc
c0006539:	53                   	push   ebx
c000653a:	e8 95 20 00 00       	call   c00085d4 <ff_memfree>
c000653f:	83 c4 10             	add    esp,0x10
c0006542:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006546:	81 c4 e4 00 00 00    	add    esp,0xe4
c000654c:	5b                   	pop    ebx
c000654d:	5e                   	pop    esi
c000654e:	c3                   	ret    

c000654f <f_mkdir>:
c000654f:	57                   	push   edi
c0006550:	b9 02 00 00 00       	mov    ecx,0x2
c0006555:	56                   	push   esi
c0006556:	53                   	push   ebx
c0006557:	83 c4 80             	add    esp,0xffffff80
c000655a:	8d 54 24 08          	lea    edx,[esp+0x8]
c000655e:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006565:	e8 79 c0 ff ff       	call   c00025e3 <mount_volume>
c000656a:	89 c3                	mov    ebx,eax
c000656c:	85 c0                	test   eax,eax
c000656e:	0f 85 fe 01 00 00    	jne    c0006772 <f_mkdir+0x223>
c0006574:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006578:	bb 11 00 00 00       	mov    ebx,0x11
c000657d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006581:	83 ec 0c             	sub    esp,0xc
c0006584:	68 60 04 00 00       	push   0x460
c0006589:	e8 2e 20 00 00       	call   c00085bc <ff_memalloc>
c000658e:	83 c4 10             	add    esp,0x10
c0006591:	89 c7                	mov    edi,eax
c0006593:	85 c0                	test   eax,eax
c0006595:	0f 84 d7 01 00 00    	je     c0006772 <f_mkdir+0x223>
c000659b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000659f:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00065a5:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00065a8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00065ab:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00065b2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065b6:	e8 9e e7 ff ff       	call   c0004d59 <follow_path>
c00065bb:	89 c3                	mov    ebx,eax
c00065bd:	85 c0                	test   eax,eax
c00065bf:	74 3e                	je     c00065ff <f_mkdir+0xb0>
c00065c1:	83 f8 04             	cmp    eax,0x4
c00065c4:	75 3e                	jne    c0006604 <f_mkdir+0xb5>
c00065c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065ca:	31 d2                	xor    edx,edx
c00065cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00065d0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00065d4:	e8 ce cb ff ff       	call   c00031a7 <create_chain>
c00065d9:	89 c6                	mov    esi,eax
c00065db:	85 c0                	test   eax,eax
c00065dd:	74 0c                	je     c00065eb <f_mkdir+0x9c>
c00065df:	bb 02 00 00 00       	mov    ebx,0x2
c00065e4:	83 f8 01             	cmp    eax,0x1
c00065e7:	74 07                	je     c00065f0 <f_mkdir+0xa1>
c00065e9:	eb 2a                	jmp    c0006615 <f_mkdir+0xc6>
c00065eb:	bb 07 00 00 00       	mov    ebx,0x7
c00065f0:	31 c9                	xor    ecx,ecx
c00065f2:	89 f2                	mov    edx,esi
c00065f4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00065f8:	e8 a9 cd ff ff       	call   c00033a6 <remove_chain>
c00065fd:	eb 05                	jmp    c0006604 <f_mkdir+0xb5>
c00065ff:	bb 08 00 00 00       	mov    ebx,0x8
c0006604:	83 ec 0c             	sub    esp,0xc
c0006607:	57                   	push   edi
c0006608:	e8 c7 1f 00 00       	call   c00085d4 <ff_memfree>
c000660d:	83 c4 10             	add    esp,0x10
c0006610:	e9 5d 01 00 00       	jmp    c0006772 <f_mkdir+0x223>
c0006615:	bb 01 00 00 00       	mov    ebx,0x1
c000661a:	83 f8 ff             	cmp    eax,0xffffffff
c000661d:	74 d1                	je     c00065f0 <f_mkdir+0xa1>
c000661f:	89 f2                	mov    edx,esi
c0006621:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006625:	e8 c4 ce ff ff       	call   c00034ee <dir_clear>
c000662a:	89 c3                	mov    ebx,eax
c000662c:	85 c0                	test   eax,eax
c000662e:	75 c0                	jne    c00065f0 <f_mkdir+0xa1>
c0006630:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006634:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006637:	74 69                	je     c00066a2 <f_mkdir+0x153>
c0006639:	b9 0b 00 00 00       	mov    ecx,0xb
c000663e:	83 c0 54             	add    eax,0x54
c0006641:	ba 20 00 00 00       	mov    edx,0x20
c0006646:	e8 9c b5 ff ff       	call   c0001be7 <mem_set>
c000664b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664f:	ba 00 00 21 50       	mov    edx,0x50210000
c0006654:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006658:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000665c:	83 c0 6a             	add    eax,0x6a
c000665f:	e8 65 b5 ff ff       	call   c0001bc9 <st_dword>
c0006664:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006668:	89 f1                	mov    ecx,esi
c000666a:	8d 50 54             	lea    edx,[eax+0x54]
c000666d:	e8 85 e6 ff ff       	call   c0004cf7 <st_clust.isra.1>
c0006672:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006676:	b9 20 00 00 00       	mov    ecx,0x20
c000667b:	8d 50 54             	lea    edx,[eax+0x54]
c000667e:	83 c0 74             	add    eax,0x74
c0006681:	e8 4c b5 ff ff       	call   c0001bd2 <mem_cpy>
c0006686:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000668a:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000668e:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006692:	8d 50 74             	lea    edx,[eax+0x74]
c0006695:	e8 5d e6 ff ff       	call   c0004cf7 <st_clust.isra.1>
c000669a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000669e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00066a2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066a6:	e8 2f db ff ff       	call   c00041da <dir_register>
c00066ab:	89 c3                	mov    ebx,eax
c00066ad:	85 c0                	test   eax,eax
c00066af:	0f 85 3b ff ff ff    	jne    c00065f0 <f_mkdir+0xa1>
c00066b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066b9:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066bc:	75 74                	jne    c0006732 <f_mkdir+0x1e3>
c00066be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066c1:	ba 00 00 21 50       	mov    edx,0x50210000
c00066c6:	83 c0 0c             	add    eax,0xc
c00066c9:	e8 fb b4 ff ff       	call   c0001bc9 <st_dword>
c00066ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d2:	89 f2                	mov    edx,esi
c00066d4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066d7:	83 c0 34             	add    eax,0x34
c00066da:	e8 ea b4 ff ff       	call   c0001bc9 <st_dword>
c00066df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066e3:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00066e7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066ea:	c1 e2 09             	shl    edx,0x9
c00066ed:	83 c0 38             	add    eax,0x38
c00066f0:	e8 d4 b4 ff ff       	call   c0001bc9 <st_dword>
c00066f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f9:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00066fd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006700:	c1 e2 09             	shl    edx,0x9
c0006703:	83 c0 28             	add    eax,0x28
c0006706:	e8 be b4 ff ff       	call   c0001bc9 <st_dword>
c000670b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000670f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006712:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006716:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006719:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000671d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006721:	e8 8b d3 ff ff       	call   c0003ab1 <store_xdir>
c0006726:	89 c3                	mov    ebx,eax
c0006728:	85 c0                	test   eax,eax
c000672a:	0f 85 d4 fe ff ff    	jne    c0006604 <f_mkdir+0xb5>
c0006730:	eb 30                	jmp    c0006762 <f_mkdir+0x213>
c0006732:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006736:	ba 00 00 21 50       	mov    edx,0x50210000
c000673b:	83 c0 16             	add    eax,0x16
c000673e:	e8 86 b4 ff ff       	call   c0001bc9 <st_dword>
c0006743:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006747:	89 f1                	mov    ecx,esi
c0006749:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000674d:	e8 a5 e5 ff ff       	call   c0004cf7 <st_clust.isra.1>
c0006752:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006756:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000675a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006762:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006766:	e8 f1 dc ff ff       	call   c000445c <sync_fs>
c000676b:	89 c3                	mov    ebx,eax
c000676d:	e9 92 fe ff ff       	jmp    c0006604 <f_mkdir+0xb5>
c0006772:	83 ec 80             	sub    esp,0xffffff80
c0006775:	89 d8                	mov    eax,ebx
c0006777:	5b                   	pop    ebx
c0006778:	5e                   	pop    esi
c0006779:	5f                   	pop    edi
c000677a:	c3                   	ret    

c000677b <f_rename>:
c000677b:	55                   	push   ebp
c000677c:	57                   	push   edi
c000677d:	56                   	push   esi
c000677e:	53                   	push   ebx
c000677f:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006785:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000678c:	e8 a4 b9 ff ff       	call   c0002135 <get_ldnumber>
c0006791:	b9 02 00 00 00       	mov    ecx,0x2
c0006796:	8d 54 24 14          	lea    edx,[esp+0x14]
c000679a:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00067a1:	e8 3d be ff ff       	call   c00025e3 <mount_volume>
c00067a6:	85 c0                	test   eax,eax
c00067a8:	0f 85 b5 02 00 00    	jne    c0006a63 <f_rename+0x2e8>
c00067ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067b2:	83 ec 0c             	sub    esp,0xc
c00067b5:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00067b9:	68 60 04 00 00       	push   0x460
c00067be:	e8 f9 1d 00 00       	call   c00085bc <ff_memalloc>
c00067c3:	83 c4 10             	add    esp,0x10
c00067c6:	89 c3                	mov    ebx,eax
c00067c8:	b8 11 00 00 00       	mov    eax,0x11
c00067cd:	85 db                	test   ebx,ebx
c00067cf:	0f 84 8e 02 00 00    	je     c0006a63 <f_rename+0x2e8>
c00067d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067d9:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00067df:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00067e2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00067e5:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00067ec:	8d 44 24 58          	lea    eax,[esp+0x58]
c00067f0:	e8 64 e5 ff ff       	call   c0004d59 <follow_path>
c00067f5:	85 c0                	test   eax,eax
c00067f7:	0f 85 52 02 00 00    	jne    c0006a4f <f_rename+0x2d4>
c00067fd:	b8 06 00 00 00       	mov    eax,0x6
c0006802:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c000680a:	0f 85 3f 02 00 00    	jne    c0006a4f <f_rename+0x2d4>
c0006810:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006814:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006817:	0f 85 05 01 00 00    	jne    c0006922 <f_rename+0x1a7>
c000681d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006820:	b9 40 00 00 00       	mov    ecx,0x40
c0006825:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006829:	e8 a4 b3 ff ff       	call   c0001bd2 <mem_cpy>
c000682e:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006833:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006837:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000683e:	e8 8f b3 ff ff       	call   c0001bd2 <mem_cpy>
c0006843:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000684a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006851:	e8 03 e5 ff ff       	call   c0004d59 <follow_path>
c0006856:	85 c0                	test   eax,eax
c0006858:	75 29                	jne    c0006883 <f_rename+0x108>
c000685a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000685e:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006865:	74 0a                	je     c0006871 <f_rename+0xf6>
c0006867:	b8 08 00 00 00       	mov    eax,0x8
c000686c:	e9 de 01 00 00       	jmp    c0006a4f <f_rename+0x2d4>
c0006871:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006878:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000687f:	75 e6                	jne    c0006867 <f_rename+0xec>
c0006881:	eb 09                	jmp    c000688c <f_rename+0x111>
c0006883:	83 f8 04             	cmp    eax,0x4
c0006886:	0f 85 c3 01 00 00    	jne    c0006a4f <f_rename+0x2d4>
c000688c:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006893:	e8 42 d9 ff ff       	call   c00041da <dir_register>
c0006898:	85 c0                	test   eax,eax
c000689a:	0f 85 af 01 00 00    	jne    c0006a4f <f_rename+0x2d4>
c00068a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068a4:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00068a7:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00068aa:	89 c5                	mov    ebp,eax
c00068ac:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00068af:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00068b3:	8d 46 24             	lea    eax,[esi+0x24]
c00068b6:	e8 98 b2 ff ff       	call   c0001b53 <ld_word>
c00068bb:	b9 40 00 00 00       	mov    ecx,0x40
c00068c0:	89 c7                	mov    edi,eax
c00068c2:	8d 54 24 18          	lea    edx,[esp+0x18]
c00068c6:	89 f0                	mov    eax,esi
c00068c8:	e8 05 b3 ff ff       	call   c0001bd2 <mem_cpy>
c00068cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068d1:	89 e9                	mov    ecx,ebp
c00068d3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068d6:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00068d9:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00068dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068e4:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00068e7:	0f b7 d7             	movzx  edx,di
c00068ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068ed:	83 c0 24             	add    eax,0x24
c00068f0:	e8 d0 b2 ff ff       	call   c0001bc5 <st_word>
c00068f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068f9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068fc:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00068ff:	a8 10                	test   al,0x10
c0006901:	75 06                	jne    c0006909 <f_rename+0x18e>
c0006903:	83 c8 20             	or     eax,0x20
c0006906:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006909:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006910:	e8 9c d1 ff ff       	call   c0003ab1 <store_xdir>
c0006915:	85 c0                	test   eax,eax
c0006917:	0f 84 1c 01 00 00    	je     c0006a39 <f_rename+0x2be>
c000691d:	e9 2d 01 00 00       	jmp    c0006a4f <f_rename+0x2d4>
c0006922:	b9 20 00 00 00       	mov    ecx,0x20
c0006927:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c000692e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006932:	e8 9b b2 ff ff       	call   c0001bd2 <mem_cpy>
c0006937:	b9 4c 00 00 00       	mov    ecx,0x4c
c000693c:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006940:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006947:	e8 86 b2 ff ff       	call   c0001bd2 <mem_cpy>
c000694c:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006953:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000695a:	e8 fa e3 ff ff       	call   c0004d59 <follow_path>
c000695f:	85 c0                	test   eax,eax
c0006961:	75 27                	jne    c000698a <f_rename+0x20f>
c0006963:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006967:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000696e:	0f 85 f3 fe ff ff    	jne    c0006867 <f_rename+0xec>
c0006974:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000697b:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006982:	0f 85 df fe ff ff    	jne    c0006867 <f_rename+0xec>
c0006988:	eb 09                	jmp    c0006993 <f_rename+0x218>
c000698a:	83 f8 04             	cmp    eax,0x4
c000698d:	0f 85 bc 00 00 00    	jne    c0006a4f <f_rename+0x2d4>
c0006993:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000699a:	e8 3b d8 ff ff       	call   c00041da <dir_register>
c000699f:	85 c0                	test   eax,eax
c00069a1:	0f 85 a8 00 00 00    	jne    c0006a4f <f_rename+0x2d4>
c00069a7:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00069ae:	b9 13 00 00 00       	mov    ecx,0x13
c00069b3:	8d 46 0d             	lea    eax,[esi+0xd]
c00069b6:	8d 54 24 25          	lea    edx,[esp+0x25]
c00069ba:	e8 13 b2 ff ff       	call   c0001bd2 <mem_cpy>
c00069bf:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00069c3:	a8 10                	test   al,0x10
c00069c5:	75 03                	jne    c00069ca <f_rename+0x24f>
c00069c7:	83 c8 20             	or     eax,0x20
c00069ca:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00069cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069d1:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069d5:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c00069d9:	74 5e                	je     c0006a39 <f_rename+0x2be>
c00069db:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00069e2:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00069e6:	74 51                	je     c0006a39 <f_rename+0x2be>
c00069e8:	89 f2                	mov    edx,esi
c00069ea:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00069ee:	8a 07                	mov    al,BYTE PTR [edi]
c00069f0:	e8 d9 e2 ff ff       	call   c0004cce <ld_clust.isra.0>
c00069f5:	89 c2                	mov    edx,eax
c00069f7:	89 f8                	mov    eax,edi
c00069f9:	e8 ee b3 ff ff       	call   c0001dec <clst2sect>
c00069fe:	89 c6                	mov    esi,eax
c0006a00:	89 d1                	mov    ecx,edx
c0006a02:	b8 02 00 00 00       	mov    eax,0x2
c0006a07:	09 f2                	or     edx,esi
c0006a09:	74 44                	je     c0006a4f <f_rename+0x2d4>
c0006a0b:	89 f2                	mov    edx,esi
c0006a0d:	89 f8                	mov    eax,edi
c0006a0f:	e8 1d b9 ff ff       	call   c0002331 <move_window>
c0006a14:	85 c0                	test   eax,eax
c0006a16:	75 37                	jne    c0006a4f <f_rename+0x2d4>
c0006a18:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a1c:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006a20:	75 17                	jne    c0006a39 <f_rename+0x2be>
c0006a22:	8d 50 74             	lea    edx,[eax+0x74]
c0006a25:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006a2c:	e8 c6 e2 ff ff       	call   c0004cf7 <st_clust.isra.1>
c0006a31:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a35:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a39:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006a3d:	e8 f4 d0 ff ff       	call   c0003b36 <dir_remove>
c0006a42:	85 c0                	test   eax,eax
c0006a44:	75 09                	jne    c0006a4f <f_rename+0x2d4>
c0006a46:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a4a:	e8 0d da ff ff       	call   c000445c <sync_fs>
c0006a4f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a53:	83 ec 0c             	sub    esp,0xc
c0006a56:	53                   	push   ebx
c0006a57:	e8 78 1b 00 00       	call   c00085d4 <ff_memfree>
c0006a5c:	83 c4 10             	add    esp,0x10
c0006a5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a63:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006a69:	5b                   	pop    ebx
c0006a6a:	5e                   	pop    esi
c0006a6b:	5f                   	pop    edi
c0006a6c:	5d                   	pop    ebp
c0006a6d:	c3                   	ret    

c0006a6e <f_chmod>:
c0006a6e:	57                   	push   edi
c0006a6f:	b9 02 00 00 00       	mov    ecx,0x2
c0006a74:	56                   	push   esi
c0006a75:	53                   	push   ebx
c0006a76:	83 ec 60             	sub    esp,0x60
c0006a79:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006a7d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006a81:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a85:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a89:	e8 55 bb ff ff       	call   c00025e3 <mount_volume>
c0006a8e:	85 c0                	test   eax,eax
c0006a90:	0f 85 af 00 00 00    	jne    c0006b45 <f_chmod+0xd7>
c0006a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a9a:	83 ec 0c             	sub    esp,0xc
c0006a9d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006aa1:	68 60 04 00 00       	push   0x460
c0006aa6:	e8 11 1b 00 00       	call   c00085bc <ff_memalloc>
c0006aab:	83 c4 10             	add    esp,0x10
c0006aae:	89 c6                	mov    esi,eax
c0006ab0:	b8 11 00 00 00       	mov    eax,0x11
c0006ab5:	85 f6                	test   esi,esi
c0006ab7:	0f 84 88 00 00 00    	je     c0006b45 <f_chmod+0xd7>
c0006abd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac1:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006ac7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006aca:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006acd:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ad1:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ad5:	e8 7f e2 ff ff       	call   c0004d59 <follow_path>
c0006ada:	85 c0                	test   eax,eax
c0006adc:	75 53                	jne    c0006b31 <f_chmod+0xc3>
c0006ade:	b8 06 00 00 00       	mov    eax,0x6
c0006ae3:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ae8:	75 47                	jne    c0006b31 <f_chmod+0xc3>
c0006aea:	89 f9                	mov    ecx,edi
c0006aec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006af0:	83 e1 27             	and    ecx,0x27
c0006af3:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006af6:	75 1d                	jne    c0006b15 <f_chmod+0xa7>
c0006af8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006afb:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006afe:	21 cb                	and    ebx,ecx
c0006b00:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b03:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006b06:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b0a:	e8 a2 cf ff ff       	call   c0003ab1 <store_xdir>
c0006b0f:	85 c0                	test   eax,eax
c0006b11:	75 1e                	jne    c0006b31 <f_chmod+0xc3>
c0006b13:	eb 13                	jmp    c0006b28 <f_chmod+0xba>
c0006b15:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006b19:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b1c:	21 cb                	and    ebx,ecx
c0006b1e:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b21:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006b24:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b2c:	e8 2b d9 ff ff       	call   c000445c <sync_fs>
c0006b31:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b35:	83 ec 0c             	sub    esp,0xc
c0006b38:	56                   	push   esi
c0006b39:	e8 96 1a 00 00       	call   c00085d4 <ff_memfree>
c0006b3e:	83 c4 10             	add    esp,0x10
c0006b41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b45:	83 c4 60             	add    esp,0x60
c0006b48:	5b                   	pop    ebx
c0006b49:	5e                   	pop    esi
c0006b4a:	5f                   	pop    edi
c0006b4b:	c3                   	ret    

c0006b4c <f_utime>:
c0006b4c:	56                   	push   esi
c0006b4d:	b9 02 00 00 00       	mov    ecx,0x2
c0006b52:	53                   	push   ebx
c0006b53:	83 ec 64             	sub    esp,0x64
c0006b56:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006b5a:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b5e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b62:	e8 7c ba ff ff       	call   c00025e3 <mount_volume>
c0006b67:	85 c0                	test   eax,eax
c0006b69:	0f 85 b5 00 00 00    	jne    c0006c24 <f_utime+0xd8>
c0006b6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b73:	83 ec 0c             	sub    esp,0xc
c0006b76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b7a:	68 60 04 00 00       	push   0x460
c0006b7f:	e8 38 1a 00 00       	call   c00085bc <ff_memalloc>
c0006b84:	83 c4 10             	add    esp,0x10
c0006b87:	89 c3                	mov    ebx,eax
c0006b89:	b8 11 00 00 00       	mov    eax,0x11
c0006b8e:	85 db                	test   ebx,ebx
c0006b90:	0f 84 8e 00 00 00    	je     c0006c24 <f_utime+0xd8>
c0006b96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b9a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006ba0:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006ba3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ba6:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006baa:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bae:	e8 a6 e1 ff ff       	call   c0004d59 <follow_path>
c0006bb3:	85 c0                	test   eax,eax
c0006bb5:	75 59                	jne    c0006c10 <f_utime+0xc4>
c0006bb7:	b8 06 00 00 00       	mov    eax,0x6
c0006bbc:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bc1:	75 4d                	jne    c0006c10 <f_utime+0xc4>
c0006bc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc7:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006bcb:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006bcf:	c1 e2 10             	shl    edx,0x10
c0006bd2:	09 ca                	or     edx,ecx
c0006bd4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bd7:	75 1a                	jne    c0006bf3 <f_utime+0xa7>
c0006bd9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bdc:	83 c0 0c             	add    eax,0xc
c0006bdf:	e8 e5 af ff ff       	call   c0001bc9 <st_dword>
c0006be4:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006be8:	e8 c4 ce ff ff       	call   c0003ab1 <store_xdir>
c0006bed:	85 c0                	test   eax,eax
c0006bef:	75 1f                	jne    c0006c10 <f_utime+0xc4>
c0006bf1:	eb 14                	jmp    c0006c07 <f_utime+0xbb>
c0006bf3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006bf7:	83 c0 16             	add    eax,0x16
c0006bfa:	e8 ca af ff ff       	call   c0001bc9 <st_dword>
c0006bff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c03:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c0b:	e8 4c d8 ff ff       	call   c000445c <sync_fs>
c0006c10:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c14:	83 ec 0c             	sub    esp,0xc
c0006c17:	53                   	push   ebx
c0006c18:	e8 b7 19 00 00       	call   c00085d4 <ff_memfree>
c0006c1d:	83 c4 10             	add    esp,0x10
c0006c20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c24:	83 c4 64             	add    esp,0x64
c0006c27:	5b                   	pop    ebx
c0006c28:	5e                   	pop    esi
c0006c29:	c3                   	ret    

c0006c2a <f_getlabel>:
c0006c2a:	55                   	push   ebp
c0006c2b:	31 c9                	xor    ecx,ecx
c0006c2d:	57                   	push   edi
c0006c2e:	56                   	push   esi
c0006c2f:	53                   	push   ebx
c0006c30:	83 ec 6c             	sub    esp,0x6c
c0006c33:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c37:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c3e:	e8 a0 b9 ff ff       	call   c00025e3 <mount_volume>
c0006c43:	89 c6                	mov    esi,eax
c0006c45:	85 c0                	test   eax,eax
c0006c47:	0f 85 c1 01 00 00    	jne    c0006e0e <f_getlabel+0x1e4>
c0006c4d:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006c55:	0f 84 5f 01 00 00    	je     c0006dba <f_getlabel+0x190>
c0006c5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c5f:	31 d2                	xor    edx,edx
c0006c61:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006c65:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006c6d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c71:	e8 39 c4 ff ff       	call   c00030af <dir_sdi>
c0006c76:	85 c0                	test   eax,eax
c0006c78:	0f 85 2d 01 00 00    	jne    c0006dab <f_getlabel+0x181>
c0006c7e:	ba 01 00 00 00       	mov    edx,0x1
c0006c83:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c87:	e8 33 cc ff ff       	call   c00038bf <dir_read>
c0006c8c:	85 c0                	test   eax,eax
c0006c8e:	0f 85 17 01 00 00    	jne    c0006dab <f_getlabel+0x181>
c0006c94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c98:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c9b:	74 09                	je     c0006ca6 <f_getlabel+0x7c>
c0006c9d:	31 db                	xor    ebx,ebx
c0006c9f:	31 c9                	xor    ecx,ecx
c0006ca1:	e9 c8 00 00 00       	jmp    c0006d6e <f_getlabel+0x144>
c0006ca6:	31 ed                	xor    ebp,ebp
c0006ca8:	31 db                	xor    ebx,ebx
c0006caa:	31 ff                	xor    edi,edi
c0006cac:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006cb0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006cb4:	39 fa                	cmp    edx,edi
c0006cb6:	76 4b                	jbe    c0006d03 <f_getlabel+0xd9>
c0006cb8:	47                   	inc    edi
c0006cb9:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006cbc:	01 d0                	add    eax,edx
c0006cbe:	e8 90 ae ff ff       	call   c0001b53 <ld_word>
c0006cc3:	66 85 ed             	test   bp,bp
c0006cc6:	75 0d                	jne    c0006cd5 <f_getlabel+0xab>
c0006cc8:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006cce:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006cd3:	76 28                	jbe    c0006cfd <f_getlabel+0xd3>
c0006cd5:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006cdc:	89 e9                	mov    ecx,ebp
c0006cde:	01 da                	add    edx,ebx
c0006ce0:	c1 e1 10             	shl    ecx,0x10
c0006ce3:	0f b7 c0             	movzx  eax,ax
c0006ce6:	09 c8                	or     eax,ecx
c0006ce8:	b9 04 00 00 00       	mov    ecx,0x4
c0006ced:	e8 01 b0 ff ff       	call   c0001cf3 <put_utf>
c0006cf2:	84 c0                	test   al,al
c0006cf4:	74 0b                	je     c0006d01 <f_getlabel+0xd7>
c0006cf6:	0f b6 c0             	movzx  eax,al
c0006cf9:	01 c3                	add    ebx,eax
c0006cfb:	31 c0                	xor    eax,eax
c0006cfd:	89 c5                	mov    ebp,eax
c0006cff:	eb ab                	jmp    c0006cac <f_getlabel+0x82>
c0006d01:	31 db                	xor    ebx,ebx
c0006d03:	66 85 ed             	test   bp,bp
c0006d06:	74 02                	je     c0006d0a <f_getlabel+0xe0>
c0006d08:	31 db                	xor    ebx,ebx
c0006d0a:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006d11:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006d15:	e9 a0 00 00 00       	jmp    c0006dba <f_getlabel+0x190>
c0006d1a:	83 ff 0b             	cmp    edi,0xb
c0006d1d:	74 11                	je     c0006d30 <f_getlabel+0x106>
c0006d1f:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006d24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d28:	8d 79 02             	lea    edi,[ecx+0x2]
c0006d2b:	c1 e0 08             	shl    eax,0x8
c0006d2e:	09 c2                	or     edx,eax
c0006d30:	0f b7 d2             	movzx  edx,dx
c0006d33:	50                   	push   eax
c0006d34:	50                   	push   eax
c0006d35:	68 b5 01 00 00       	push   0x1b5
c0006d3a:	52                   	push   edx
c0006d3b:	e8 44 19 00 00       	call   c0008684 <ff_oem2uni>
c0006d40:	83 c4 10             	add    esp,0x10
c0006d43:	66 85 c0             	test   ax,ax
c0006d46:	74 46                	je     c0006d8e <f_getlabel+0x164>
c0006d48:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006d4f:	0f b7 c0             	movzx  eax,ax
c0006d52:	01 da                	add    edx,ebx
c0006d54:	b9 04 00 00 00       	mov    ecx,0x4
c0006d59:	e8 95 af ff ff       	call   c0001cf3 <put_utf>
c0006d5e:	84 c0                	test   al,al
c0006d60:	74 2c                	je     c0006d8e <f_getlabel+0x164>
c0006d62:	0f b6 c0             	movzx  eax,al
c0006d65:	01 c3                	add    ebx,eax
c0006d67:	83 ff 0b             	cmp    edi,0xb
c0006d6a:	74 24                	je     c0006d90 <f_getlabel+0x166>
c0006d6c:	89 f9                	mov    ecx,edi
c0006d6e:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006d72:	8d 79 01             	lea    edi,[ecx+0x1]
c0006d75:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006d7a:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006d7f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d83:	e8 9f ae ff ff       	call   c0001c27 <dbc_1st>
c0006d88:	85 c0                	test   eax,eax
c0006d8a:	74 a4                	je     c0006d30 <f_getlabel+0x106>
c0006d8c:	eb 8c                	jmp    c0006d1a <f_getlabel+0xf0>
c0006d8e:	31 db                	xor    ebx,ebx
c0006d90:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006d97:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006d9a:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006da1:	74 17                	je     c0006dba <f_getlabel+0x190>
c0006da3:	4b                   	dec    ebx
c0006da4:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006da7:	74 ee                	je     c0006d97 <f_getlabel+0x16d>
c0006da9:	eb 0f                	jmp    c0006dba <f_getlabel+0x190>
c0006dab:	83 f8 04             	cmp    eax,0x4
c0006dae:	75 5c                	jne    c0006e0c <f_getlabel+0x1e2>
c0006db0:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006db7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006dba:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006dc2:	74 4a                	je     c0006e0e <f_getlabel+0x1e4>
c0006dc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006dc8:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006dcb:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006dce:	e8 5e b5 ff ff       	call   c0002331 <move_window>
c0006dd3:	89 c6                	mov    esi,eax
c0006dd5:	85 c0                	test   eax,eax
c0006dd7:	75 35                	jne    c0006e0e <f_getlabel+0x1e4>
c0006dd9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006ddd:	b8 43 00 00 00       	mov    eax,0x43
c0006de2:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006de4:	80 f9 03             	cmp    cl,0x3
c0006de7:	74 0f                	je     c0006df8 <f_getlabel+0x1ce>
c0006de9:	31 c0                	xor    eax,eax
c0006deb:	80 f9 04             	cmp    cl,0x4
c0006dee:	0f 94 c0             	sete   al
c0006df1:	48                   	dec    eax
c0006df2:	83 e0 c3             	and    eax,0xffffffc3
c0006df5:	83 c0 64             	add    eax,0x64
c0006df8:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006dfc:	e8 5f ad ff ff       	call   c0001b60 <ld_dword>
c0006e01:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006e08:	89 07                	mov    DWORD PTR [edi],eax
c0006e0a:	eb 02                	jmp    c0006e0e <f_getlabel+0x1e4>
c0006e0c:	89 c6                	mov    esi,eax
c0006e0e:	83 c4 6c             	add    esp,0x6c
c0006e11:	89 f0                	mov    eax,esi
c0006e13:	5b                   	pop    ebx
c0006e14:	5e                   	pop    esi
c0006e15:	5f                   	pop    edi
c0006e16:	5d                   	pop    ebp
c0006e17:	c3                   	ret    

c0006e18 <f_setlabel>:
c0006e18:	56                   	push   esi
c0006e19:	b9 02 00 00 00       	mov    ecx,0x2
c0006e1e:	53                   	push   ebx
c0006e1f:	83 ec 74             	sub    esp,0x74
c0006e22:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006e26:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e2d:	e8 b1 b7 ff ff       	call   c00025e3 <mount_volume>
c0006e32:	89 c6                	mov    esi,eax
c0006e34:	85 c0                	test   eax,eax
c0006e36:	0f 85 41 02 00 00    	jne    c000707d <f_setlabel+0x265>
c0006e3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e40:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e43:	0f 85 8e 00 00 00    	jne    c0006ed7 <f_setlabel+0xbf>
c0006e49:	b9 16 00 00 00       	mov    ecx,0x16
c0006e4e:	31 d2                	xor    edx,edx
c0006e50:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006e54:	31 db                	xor    ebx,ebx
c0006e56:	e8 8c ad ff ff       	call   c0001be7 <mem_set>
c0006e5b:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006e62:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006e65:	0f 86 0a 01 00 00    	jbe    c0006f75 <f_setlabel+0x15d>
c0006e6b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e72:	e8 b6 ad ff ff       	call   c0001c2d <tchar2uni>
c0006e77:	89 c6                	mov    esi,eax
c0006e79:	3d ff ff 00 00       	cmp    eax,0xffff
c0006e7e:	76 2a                	jbe    c0006eaa <f_setlabel+0x92>
c0006e80:	83 f8 ff             	cmp    eax,0xffffffff
c0006e83:	74 05                	je     c0006e8a <f_setlabel+0x72>
c0006e85:	83 fb 09             	cmp    ebx,0x9
c0006e88:	76 0a                	jbe    c0006e94 <f_setlabel+0x7c>
c0006e8a:	be 06 00 00 00       	mov    esi,0x6
c0006e8f:	e9 e9 01 00 00       	jmp    c000707d <f_setlabel+0x265>
c0006e94:	89 c2                	mov    edx,eax
c0006e96:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006e9a:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006e9d:	c1 ea 10             	shr    edx,0x10
c0006ea0:	01 c8                	add    eax,ecx
c0006ea2:	43                   	inc    ebx
c0006ea3:	e8 1d ad ff ff       	call   c0001bc5 <st_word>
c0006ea8:	eb 04                	jmp    c0006eae <f_setlabel+0x96>
c0006eaa:	85 c0                	test   eax,eax
c0006eac:	74 dc                	je     c0006e8a <f_setlabel+0x72>
c0006eae:	89 f2                	mov    edx,esi
c0006eb0:	b8 57 35 02 c0       	mov    eax,0xc0023557
c0006eb5:	e8 5b ad ff ff       	call   c0001c15 <chk_chr>
c0006eba:	85 c0                	test   eax,eax
c0006ebc:	75 cc                	jne    c0006e8a <f_setlabel+0x72>
c0006ebe:	83 fb 0a             	cmp    ebx,0xa
c0006ec1:	77 c7                	ja     c0006e8a <f_setlabel+0x72>
c0006ec3:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ec6:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006eca:	0f b7 d6             	movzx  edx,si
c0006ecd:	01 c8                	add    eax,ecx
c0006ecf:	43                   	inc    ebx
c0006ed0:	e8 f0 ac ff ff       	call   c0001bc5 <st_word>
c0006ed5:	eb 84                	jmp    c0006e5b <f_setlabel+0x43>
c0006ed7:	b9 0b 00 00 00       	mov    ecx,0xb
c0006edc:	ba 20 00 00 00       	mov    edx,0x20
c0006ee1:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ee5:	31 db                	xor    ebx,ebx
c0006ee7:	e8 fb ac ff ff       	call   c0001be7 <mem_set>
c0006eec:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006ef3:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006ef6:	76 60                	jbe    c0006f58 <f_setlabel+0x140>
c0006ef8:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006eff:	e8 29 ad ff ff       	call   c0001c2d <tchar2uni>
c0006f04:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f09:	0f 87 7b ff ff ff    	ja     c0006e8a <f_setlabel+0x72>
c0006f0f:	83 ec 0c             	sub    esp,0xc
c0006f12:	50                   	push   eax
c0006f13:	e8 e0 17 00 00       	call   c00086f8 <ff_wtoupper>
c0006f18:	5a                   	pop    edx
c0006f19:	59                   	pop    ecx
c0006f1a:	68 b5 01 00 00       	push   0x1b5
c0006f1f:	50                   	push   eax
c0006f20:	e8 c7 16 00 00       	call   c00085ec <ff_uni2oem>
c0006f25:	83 c4 10             	add    esp,0x10
c0006f28:	89 c6                	mov    esi,eax
c0006f2a:	66 85 c0             	test   ax,ax
c0006f2d:	0f 84 57 ff ff ff    	je     c0006e8a <f_setlabel+0x72>
c0006f33:	0f b7 d0             	movzx  edx,ax
c0006f36:	b8 50 35 02 c0       	mov    eax,0xc0023550
c0006f3b:	e8 d5 ac ff ff       	call   c0001c15 <chk_chr>
c0006f40:	85 c0                	test   eax,eax
c0006f42:	0f 85 42 ff ff ff    	jne    c0006e8a <f_setlabel+0x72>
c0006f48:	66 81 fe ff 00       	cmp    si,0xff
c0006f4d:	0f 87 14 01 00 00    	ja     c0007067 <f_setlabel+0x24f>
c0006f53:	e9 fa 00 00 00       	jmp    c0007052 <f_setlabel+0x23a>
c0006f58:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006f5d:	0f 84 27 ff ff ff    	je     c0006e8a <f_setlabel+0x72>
c0006f63:	85 db                	test   ebx,ebx
c0006f65:	74 0e                	je     c0006f75 <f_setlabel+0x15d>
c0006f67:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006f6a:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006f6f:	75 04                	jne    c0006f75 <f_setlabel+0x15d>
c0006f71:	89 c3                	mov    ebx,eax
c0006f73:	eb ee                	jmp    c0006f63 <f_setlabel+0x14b>
c0006f75:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f79:	31 d2                	xor    edx,edx
c0006f7b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006f7f:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006f87:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006f8b:	e8 1f c1 ff ff       	call   c00030af <dir_sdi>
c0006f90:	89 c6                	mov    esi,eax
c0006f92:	85 c0                	test   eax,eax
c0006f94:	0f 85 e3 00 00 00    	jne    c000707d <f_setlabel+0x265>
c0006f9a:	ba 01 00 00 00       	mov    edx,0x1
c0006f9f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006fa3:	e8 17 c9 ff ff       	call   c00038bf <dir_read>
c0006fa8:	85 c0                	test   eax,eax
c0006faa:	75 21                	jne    c0006fcd <f_setlabel+0x1b5>
c0006fac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006fb0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006fb4:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006fb7:	74 5d                	je     c0007016 <f_setlabel+0x1fe>
c0006fb9:	85 db                	test   ebx,ebx
c0006fbb:	74 0b                	je     c0006fc8 <f_setlabel+0x1b0>
c0006fbd:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fc2:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006fc6:	eb 70                	jmp    c0007038 <f_setlabel+0x220>
c0006fc8:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006fcb:	eb 70                	jmp    c000703d <f_setlabel+0x225>
c0006fcd:	83 f8 04             	cmp    eax,0x4
c0006fd0:	75 7c                	jne    c000704e <f_setlabel+0x236>
c0006fd2:	85 db                	test   ebx,ebx
c0006fd4:	0f 84 a3 00 00 00    	je     c000707d <f_setlabel+0x265>
c0006fda:	ba 01 00 00 00       	mov    edx,0x1
c0006fdf:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006fe3:	e8 51 ca ff ff       	call   c0003a39 <dir_alloc>
c0006fe8:	89 c6                	mov    esi,eax
c0006fea:	85 c0                	test   eax,eax
c0006fec:	0f 85 8b 00 00 00    	jne    c000707d <f_setlabel+0x265>
c0006ff2:	31 d2                	xor    edx,edx
c0006ff4:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ff8:	b9 20 00 00 00       	mov    ecx,0x20
c0006ffd:	e8 e5 ab ff ff       	call   c0001be7 <mem_set>
c0007002:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007006:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007009:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000700d:	75 18                	jne    c0007027 <f_setlabel+0x20f>
c000700f:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007012:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007016:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007019:	b9 16 00 00 00       	mov    ecx,0x16
c000701e:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007022:	83 c0 02             	add    eax,0x2
c0007025:	eb 9b                	jmp    c0006fc2 <f_setlabel+0x1aa>
c0007027:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000702b:	b9 0b 00 00 00       	mov    ecx,0xb
c0007030:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007034:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007038:	e8 95 ab ff ff       	call   c0001bd2 <mem_cpy>
c000703d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007041:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007045:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007049:	e8 0e d4 ff ff       	call   c000445c <sync_fs>
c000704e:	89 c6                	mov    esi,eax
c0007050:	eb 2b                	jmp    c000707d <f_setlabel+0x265>
c0007052:	83 fb 0a             	cmp    ebx,0xa
c0007055:	0f 87 2f fe ff ff    	ja     c0006e8a <f_setlabel+0x72>
c000705b:	89 f0                	mov    eax,esi
c000705d:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007061:	43                   	inc    ebx
c0007062:	e9 85 fe ff ff       	jmp    c0006eec <f_setlabel+0xd4>
c0007067:	83 fb 09             	cmp    ebx,0x9
c000706a:	0f 87 1a fe ff ff    	ja     c0006e8a <f_setlabel+0x72>
c0007070:	89 f0                	mov    eax,esi
c0007072:	66 c1 e8 08          	shr    ax,0x8
c0007076:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000707a:	43                   	inc    ebx
c000707b:	eb de                	jmp    c000705b <f_setlabel+0x243>
c000707d:	89 f0                	mov    eax,esi
c000707f:	83 c4 74             	add    esp,0x74
c0007082:	5b                   	pop    ebx
c0007083:	5e                   	pop    esi
c0007084:	c3                   	ret    

c0007085 <f_expand>:
c0007085:	55                   	push   ebp
c0007086:	57                   	push   edi
c0007087:	56                   	push   esi
c0007088:	53                   	push   ebx
c0007089:	83 ec 3c             	sub    esp,0x3c
c000708c:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0007090:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007094:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0007098:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000709c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00070a0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070a4:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00070a8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00070ac:	89 d8                	mov    eax,ebx
c00070ae:	e8 a3 b1 ff ff       	call   c0002256 <validate>
c00070b3:	89 c5                	mov    ebp,eax
c00070b5:	85 c0                	test   eax,eax
c00070b7:	0f 85 f4 01 00 00    	jne    c00072b1 <f_expand+0x22c>
c00070bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00070c1:	85 ed                	test   ebp,ebp
c00070c3:	0f 85 e8 01 00 00    	jne    c00072b1 <f_expand+0x22c>
c00070c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070cd:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00070d1:	75 0a                	jne    c00070dd <f_expand+0x58>
c00070d3:	bd 07 00 00 00       	mov    ebp,0x7
c00070d8:	e9 d4 01 00 00       	jmp    c00072b1 <f_expand+0x22c>
c00070dd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00070e0:	0b 43 0c             	or     eax,DWORD PTR [ebx+0xc]
c00070e3:	75 ee                	jne    c00070d3 <f_expand+0x4e>
c00070e5:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00070e9:	74 e8                	je     c00070d3 <f_expand+0x4e>
c00070eb:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00070ef:	8a 0e                	mov    cl,BYTE PTR [esi]
c00070f1:	80 f9 04             	cmp    cl,0x4
c00070f4:	74 07                	je     c00070fd <f_expand+0x78>
c00070f6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00070fb:	77 d6                	ja     c00070d3 <f_expand+0x4e>
c00070fd:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0007101:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0007105:	c1 e0 09             	shl    eax,0x9
c0007108:	8d 50 ff             	lea    edx,[eax-0x1]
c000710b:	85 54 24 08          	test   DWORD PTR [esp+0x8],edx
c000710f:	0f 95 c2             	setne  dl
c0007112:	0f b6 d2             	movzx  edx,dl
c0007115:	89 d7                	mov    edi,edx
c0007117:	31 d2                	xor    edx,edx
c0007119:	52                   	push   edx
c000711a:	50                   	push   eax
c000711b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000711f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007123:	e8 38 b5 01 00       	call   c0022660 <__udivdi3>
c0007128:	83 c4 10             	add    esp,0x10
c000712b:	01 f8                	add    eax,edi
c000712d:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0007131:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0007134:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007138:	83 ff 01             	cmp    edi,0x1
c000713b:	76 05                	jbe    c0007142 <f_expand+0xbd>
c000713d:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0007140:	77 05                	ja     c0007147 <f_expand+0xc2>
c0007142:	bf 02 00 00 00       	mov    edi,0x2
c0007147:	80 f9 04             	cmp    cl,0x4
c000714a:	75 19                	jne    c0007165 <f_expand+0xe0>
c000714c:	89 f0                	mov    eax,esi
c000714e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007152:	89 fa                	mov    edx,edi
c0007154:	e8 f3 b9 ff ff       	call   c0002b4c <find_bitmap>
c0007159:	89 c6                	mov    esi,eax
c000715b:	85 c0                	test   eax,eax
c000715d:	0f 84 70 ff ff ff    	je     c00070d3 <f_expand+0x4e>
c0007163:	eb 7f                	jmp    c00071e4 <f_expand+0x15f>
c0007165:	89 fe                	mov    esi,edi
c0007167:	89 f9                	mov    ecx,edi
c0007169:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007171:	89 ca                	mov    edx,ecx
c0007173:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0007177:	89 d8                	mov    eax,ebx
c0007179:	e8 3b bd ff ff       	call   c0002eb9 <get_fat>
c000717e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007182:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007186:	41                   	inc    ecx
c0007187:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000718b:	39 48 1c             	cmp    DWORD PTR [eax+0x1c],ecx
c000718e:	77 05                	ja     c0007195 <f_expand+0x110>
c0007190:	b9 02 00 00 00       	mov    ecx,0x2
c0007195:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c000719a:	74 3e                	je     c00071da <f_expand+0x155>
c000719c:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00071a1:	75 0a                	jne    c00071ad <f_expand+0x128>
c00071a3:	bd 01 00 00 00       	mov    ebp,0x1
c00071a8:	e9 04 01 00 00       	jmp    c00072b1 <f_expand+0x22c>
c00071ad:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00071b2:	75 13                	jne    c00071c7 <f_expand+0x142>
c00071b4:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00071b8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00071bc:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c00071c0:	75 0f                	jne    c00071d1 <f_expand+0x14c>
c00071c2:	e9 ce 00 00 00       	jmp    c0007295 <f_expand+0x210>
c00071c7:	89 ce                	mov    esi,ecx
c00071c9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00071d1:	39 f9                	cmp    ecx,edi
c00071d3:	75 9c                	jne    c0007171 <f_expand+0xec>
c00071d5:	e9 f9 fe ff ff       	jmp    c00070d3 <f_expand+0x4e>
c00071da:	bd 02 00 00 00       	mov    ebp,0x2
c00071df:	e9 cd 00 00 00       	jmp    c00072b1 <f_expand+0x22c>
c00071e4:	83 f8 ff             	cmp    eax,0xffffffff
c00071e7:	74 ba                	je     c00071a3 <f_expand+0x11e>
c00071e9:	8d 7e ff             	lea    edi,[esi-0x1]
c00071ec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00071f0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00071f4:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00071f9:	74 51                	je     c000724c <f_expand+0x1c7>
c00071fb:	83 ec 0c             	sub    esp,0xc
c00071fe:	89 f2                	mov    edx,esi
c0007200:	6a 01                	push   0x1
c0007202:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007206:	e8 f4 b9 ff ff       	call   c0002bff <change_bitmap>
c000720b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000720f:	8d 54 3e ff          	lea    edx,[esi+edi*1-0x1]
c0007213:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0007217:	83 c4 10             	add    esp,0x10
c000721a:	85 c0                	test   eax,eax
c000721c:	74 2e                	je     c000724c <f_expand+0x1c7>
c000721e:	eb 71                	jmp    c0007291 <f_expand+0x20c>
c0007220:	83 c9 ff             	or     ecx,0xffffffff
c0007223:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0007228:	74 03                	je     c000722d <f_expand+0x1a8>
c000722a:	8d 4f 01             	lea    ecx,[edi+0x1]
c000722d:	89 fa                	mov    edx,edi
c000722f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007233:	e8 7c ba ff ff       	call   c0002cb4 <put_fat>
c0007238:	85 c0                	test   eax,eax
c000723a:	75 55                	jne    c0007291 <f_expand+0x20c>
c000723c:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007240:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0007244:	47                   	inc    edi
c0007245:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000724a:	75 d4                	jne    c0007220 <f_expand+0x19b>
c000724c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007250:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007254:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007259:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000725c:	74 53                	je     c00072b1 <f_expand+0x22c>
c000725e:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
c0007261:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0007265:	c6 43 07 02          	mov    BYTE PTR [ebx+0x7],0x2
c0007269:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000726d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007271:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0007274:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0007277:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000727a:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000727d:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0007280:	39 ca                	cmp    edx,ecx
c0007282:	77 2d                	ja     c00072b1 <f_expand+0x22c>
c0007284:	2b 54 24 10          	sub    edx,DWORD PTR [esp+0x10]
c0007288:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000728c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000728f:	eb 20                	jmp    c00072b1 <f_expand+0x22c>
c0007291:	89 c5                	mov    ebp,eax
c0007293:	eb 1c                	jmp    c00072b1 <f_expand+0x22c>
c0007295:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000729a:	74 0c                	je     c00072a8 <f_expand+0x223>
c000729c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00072a0:	89 f7                	mov    edi,esi
c00072a2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00072a6:	eb 9d                	jmp    c0007245 <f_expand+0x1c0>
c00072a8:	8d 46 ff             	lea    eax,[esi-0x1]
c00072ab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00072af:	eb 9b                	jmp    c000724c <f_expand+0x1c7>
c00072b1:	83 c4 3c             	add    esp,0x3c
c00072b4:	89 e8                	mov    eax,ebp
c00072b6:	5b                   	pop    ebx
c00072b7:	5e                   	pop    esi
c00072b8:	5f                   	pop    edi
c00072b9:	5d                   	pop    ebp
c00072ba:	c3                   	ret    

c00072bb <f_forward>:
c00072bb:	55                   	push   ebp
c00072bc:	57                   	push   edi
c00072bd:	56                   	push   esi
c00072be:	53                   	push   ebx
c00072bf:	83 ec 2c             	sub    esp,0x2c
c00072c2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00072c6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00072ca:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00072d0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00072d4:	89 d8                	mov    eax,ebx
c00072d6:	e8 7b af ff ff       	call   c0002256 <validate>
c00072db:	89 c5                	mov    ebp,eax
c00072dd:	85 c0                	test   eax,eax
c00072df:	0f 85 aa 01 00 00    	jne    c000748f <f_forward+0x1d4>
c00072e5:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00072e9:	85 ed                	test   ebp,ebp
c00072eb:	0f 85 9e 01 00 00    	jne    c000748f <f_forward+0x1d4>
c00072f1:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00072f5:	0f 84 8f 01 00 00    	je     c000748a <f_forward+0x1cf>
c00072fb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00072fe:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0007301:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0007304:	bf 00 00 00 00       	mov    edi,0x0
c0007309:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000730c:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0007310:	89 d1                	mov    ecx,edx
c0007312:	19 f9                	sbb    ecx,edi
c0007314:	0f 83 cf 00 00 00    	jae    c00073e9 <f_forward+0x12e>
c000731a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000731e:	e9 c6 00 00 00       	jmp    c00073e9 <f_forward+0x12e>
c0007323:	50                   	push   eax
c0007324:	50                   	push   eax
c0007325:	6a 00                	push   0x0
c0007327:	6a 00                	push   0x0
c0007329:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000732d:	83 c4 10             	add    esp,0x10
c0007330:	85 c0                	test   eax,eax
c0007332:	0f 84 57 01 00 00    	je     c000748f <f_forward+0x1d4>
c0007338:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000733b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000733f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0007342:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0007346:	89 d7                	mov    edi,edx
c0007348:	8d 4e ff             	lea    ecx,[esi-0x1]
c000734b:	89 c6                	mov    esi,eax
c000734d:	0f ac fe 09          	shrd   esi,edi,0x9
c0007351:	21 ce                	and    esi,ecx
c0007353:	89 c1                	mov    ecx,eax
c0007355:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c000735b:	0f 84 98 00 00 00    	je     c00073f9 <f_forward+0x13e>
c0007361:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007365:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007368:	89 c8                	mov    eax,ecx
c000736a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000736e:	e8 79 aa ff ff       	call   c0001dec <clst2sect>
c0007373:	89 d7                	mov    edi,edx
c0007375:	09 c7                	or     edi,eax
c0007377:	0f 84 9e 00 00 00    	je     c000741b <f_forward+0x160>
c000737d:	31 ff                	xor    edi,edi
c000737f:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007382:	01 c6                	add    esi,eax
c0007384:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007388:	11 d7                	adc    edi,edx
c000738a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000738d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007390:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007394:	39 fa                	cmp    edx,edi
c0007396:	0f 85 a2 00 00 00    	jne    c000743e <f_forward+0x183>
c000739c:	39 f0                	cmp    eax,esi
c000739e:	0f 85 9a 00 00 00    	jne    c000743e <f_forward+0x183>
c00073a4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00073a7:	ba 00 02 00 00       	mov    edx,0x200
c00073ac:	25 ff 01 00 00       	and    eax,0x1ff
c00073b1:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00073b5:	29 c2                	sub    edx,eax
c00073b7:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00073ba:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00073bd:	39 d1                	cmp    ecx,edx
c00073bf:	76 02                	jbe    c00073c3 <f_forward+0x108>
c00073c1:	89 d1                	mov    ecx,edx
c00073c3:	8d 73 50             	lea    esi,[ebx+0x50]
c00073c6:	52                   	push   edx
c00073c7:	01 c6                	add    esi,eax
c00073c9:	52                   	push   edx
c00073ca:	51                   	push   ecx
c00073cb:	56                   	push   esi
c00073cc:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00073d0:	83 c4 10             	add    esp,0x10
c00073d3:	85 c0                	test   eax,eax
c00073d5:	74 44                	je     c000741b <f_forward+0x160>
c00073d7:	31 ff                	xor    edi,edi
c00073d9:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00073dc:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00073df:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00073e3:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00073e7:	01 07                	add    DWORD PTR [edi],eax
c00073e9:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00073ee:	0f 85 2f ff ff ff    	jne    c0007323 <f_forward+0x68>
c00073f4:	e9 96 00 00 00       	jmp    c000748f <f_forward+0x1d4>
c00073f9:	85 f6                	test   esi,esi
c00073fb:	0f 85 60 ff ff ff    	jne    c0007361 <f_forward+0xa6>
c0007401:	89 d7                	mov    edi,edx
c0007403:	09 c7                	or     edi,eax
c0007405:	75 05                	jne    c000740c <f_forward+0x151>
c0007407:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000740a:	eb 0a                	jmp    c0007416 <f_forward+0x15b>
c000740c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000740f:	89 d8                	mov    eax,ebx
c0007411:	e8 a3 ba ff ff       	call   c0002eb9 <get_fat>
c0007416:	83 f8 01             	cmp    eax,0x1
c0007419:	77 0b                	ja     c0007426 <f_forward+0x16b>
c000741b:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000741f:	bd 02 00 00 00       	mov    ebp,0x2
c0007424:	eb 69                	jmp    c000748f <f_forward+0x1d4>
c0007426:	83 f8 ff             	cmp    eax,0xffffffff
c0007429:	75 0b                	jne    c0007436 <f_forward+0x17b>
c000742b:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000742f:	bd 01 00 00 00       	mov    ebp,0x1
c0007434:	eb 59                	jmp    c000748f <f_forward+0x1d4>
c0007436:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007439:	e9 23 ff ff ff       	jmp    c0007361 <f_forward+0xa6>
c000743e:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007442:	79 20                	jns    c0007464 <f_forward+0x1a9>
c0007444:	83 ec 0c             	sub    esp,0xc
c0007447:	6a 01                	push   0x1
c0007449:	52                   	push   edx
c000744a:	50                   	push   eax
c000744b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000744f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007453:	50                   	push   eax
c0007454:	e8 c5 a6 ff ff       	call   c0001b1e <disk_write>
c0007459:	83 c4 20             	add    esp,0x20
c000745c:	85 c0                	test   eax,eax
c000745e:	75 cb                	jne    c000742b <f_forward+0x170>
c0007460:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007464:	83 ec 0c             	sub    esp,0xc
c0007467:	6a 01                	push   0x1
c0007469:	57                   	push   edi
c000746a:	56                   	push   esi
c000746b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000746f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007473:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007477:	50                   	push   eax
c0007478:	e8 8b a6 ff ff       	call   c0001b08 <disk_read>
c000747d:	83 c4 20             	add    esp,0x20
c0007480:	85 c0                	test   eax,eax
c0007482:	0f 84 1c ff ff ff    	je     c00073a4 <f_forward+0xe9>
c0007488:	eb a1                	jmp    c000742b <f_forward+0x170>
c000748a:	bd 07 00 00 00       	mov    ebp,0x7
c000748f:	83 c4 2c             	add    esp,0x2c
c0007492:	89 e8                	mov    eax,ebp
c0007494:	5b                   	pop    ebx
c0007495:	5e                   	pop    esi
c0007496:	5f                   	pop    edi
c0007497:	5d                   	pop    ebp
c0007498:	c3                   	ret    

c0007499 <f_mkfs>:
c0007499:	55                   	push   ebp
c000749a:	57                   	push   edi
c000749b:	56                   	push   esi
c000749c:	53                   	push   ebx
c000749d:	bb 0b 00 00 00       	mov    ebx,0xb
c00074a2:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00074a8:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00074af:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00074b6:	e8 7a ac ff ff       	call   c0002135 <get_ldnumber>
c00074bb:	85 c0                	test   eax,eax
c00074bd:	0f 88 ec 10 00 00    	js     c00085af <f_mkfs+0x1116>
c00074c3:	8b 14 85 a0 7d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8260]
c00074ca:	85 d2                	test   edx,edx
c00074cc:	74 03                	je     c00074d1 <f_mkfs+0x38>
c00074ce:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00074d1:	85 f6                	test   esi,esi
c00074d3:	75 05                	jne    c00074da <f_mkfs+0x41>
c00074d5:	be 40 35 02 c0       	mov    esi,0xc0023540
c00074da:	83 ec 0c             	sub    esp,0xc
c00074dd:	0f b6 c0             	movzx  eax,al
c00074e0:	bb 03 00 00 00       	mov    ebx,0x3
c00074e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00074e9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074ed:	e8 13 a6 ff ff       	call   c0001b05 <disk_initialize>
c00074f2:	83 c4 10             	add    esp,0x10
c00074f5:	a8 01                	test   al,0x1
c00074f7:	0f 85 b2 10 00 00    	jne    c00085af <f_mkfs+0x1116>
c00074fd:	bb 0a 00 00 00       	mov    ebx,0xa
c0007502:	a8 04                	test   al,0x4
c0007504:	0f 85 a5 10 00 00    	jne    c00085af <f_mkfs+0x1116>
c000750a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000750d:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007511:	85 c0                	test   eax,eax
c0007513:	75 20                	jne    c0007535 <f_mkfs+0x9c>
c0007515:	51                   	push   ecx
c0007516:	8d 44 24 78          	lea    eax,[esp+0x78]
c000751a:	50                   	push   eax
c000751b:	6a 03                	push   0x3
c000751d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007521:	e8 0e a6 ff ff       	call   c0001b34 <disk_ioctl>
c0007526:	83 c4 10             	add    esp,0x10
c0007529:	85 c0                	test   eax,eax
c000752b:	74 08                	je     c0007535 <f_mkfs+0x9c>
c000752d:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007535:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007539:	8d 42 ff             	lea    eax,[edx-0x1]
c000753c:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007541:	77 04                	ja     c0007547 <f_mkfs+0xae>
c0007543:	85 c2                	test   edx,eax
c0007545:	74 08                	je     c000754f <f_mkfs+0xb6>
c0007547:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000754f:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007552:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0007556:	48                   	dec    eax
c0007557:	3c 01                	cmp    al,0x1
c0007559:	76 05                	jbe    c0007560 <f_mkfs+0xc7>
c000755b:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007560:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007563:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007567:	48                   	dec    eax
c0007568:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000756d:	77 07                	ja     c0007576 <f_mkfs+0xdd>
c000756f:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007574:	74 08                	je     c000757e <f_mkfs+0xe5>
c0007576:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000757e:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007581:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007587:	77 07                	ja     c0007590 <f_mkfs+0xf7>
c0007589:	8d 43 ff             	lea    eax,[ebx-0x1]
c000758c:	85 d8                	test   eax,ebx
c000758e:	74 02                	je     c0007592 <f_mkfs+0xf9>
c0007590:	31 db                	xor    ebx,ebx
c0007592:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000759d:	77 0a                	ja     c00075a9 <f_mkfs+0x110>
c000759f:	bb 11 00 00 00       	mov    ebx,0x11
c00075a4:	e9 06 10 00 00       	jmp    c00085af <f_mkfs+0x1116>
c00075a9:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00075b0:	8b 36                	mov    esi,DWORD PTR [esi]
c00075b2:	85 ed                	test   ebp,ebp
c00075b4:	75 1e                	jne    c00075d4 <f_mkfs+0x13b>
c00075b6:	83 ec 0c             	sub    esp,0xc
c00075b9:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00075c0:	25 00 fe ff ff       	and    eax,0xfffffe00
c00075c5:	50                   	push   eax
c00075c6:	e8 f1 0f 00 00       	call   c00085bc <ff_memalloc>
c00075cb:	83 c4 10             	add    esp,0x10
c00075ce:	89 c5                	mov    ebp,eax
c00075d0:	85 c0                	test   eax,eax
c00075d2:	74 cb                	je     c000759f <f_mkfs+0x106>
c00075d4:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00075dc:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00075e4:	52                   	push   edx
c00075e5:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00075e9:	50                   	push   eax
c00075ea:	6a 01                	push   0x1
c00075ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00075f0:	e8 3f a5 ff ff       	call   c0001b34 <disk_ioctl>
c00075f5:	83 c4 10             	add    esp,0x10
c00075f8:	85 c0                	test   eax,eax
c00075fa:	0f 85 4a 0f 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007600:	89 f1                	mov    ecx,esi
c0007602:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000760a:	83 e1 0f             	and    ecx,0xf
c000760d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007615:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c0007619:	83 e6 08             	and    esi,0x8
c000761c:	75 56                	jne    c0007674 <f_mkfs+0x1db>
c000761e:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c0007622:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c0007626:	83 ff 00             	cmp    edi,0x0
c0007629:	76 20                	jbe    c000764b <f_mkfs+0x1b2>
c000762b:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007630:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007638:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c000763e:	83 d7 ff             	adc    edi,0xffffffff
c0007641:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007645:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007649:	eb 21                	jmp    c000766c <f_mkfs+0x1d3>
c000764b:	ba 3f 00 00 00       	mov    edx,0x3f
c0007650:	39 f2                	cmp    edx,esi
c0007652:	19 f8                	sbb    eax,edi
c0007654:	73 1e                	jae    c0007674 <f_mkfs+0x1db>
c0007656:	83 c6 c1             	add    esi,0xffffffc1
c0007659:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007661:	83 d7 ff             	adc    edi,0xffffffff
c0007664:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007668:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000766c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007674:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007678:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000767c:	89 04 24             	mov    DWORD PTR [esp],eax
c000767f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007683:	31 c0                	xor    eax,eax
c0007685:	ba 7f 00 00 00       	mov    edx,0x7f
c000768a:	89 c7                	mov    edi,eax
c000768c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000768f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007693:	0f 83 c5 0a 00 00    	jae    c000815e <f_mkfs+0xcc5>
c0007699:	89 df                	mov    edi,ebx
c000769b:	c1 ef 09             	shr    edi,0x9
c000769e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00076a2:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00076a9:	c1 ef 09             	shr    edi,0x9
c00076ac:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00076b1:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00076b5:	74 29                	je     c00076e0 <f_mkfs+0x247>
c00076b7:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076bd:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00076c2:	0f 97 c2             	seta   dl
c00076c5:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00076c8:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00076cc:	0f 92 c0             	setb   al
c00076cf:	08 c2                	or     dl,al
c00076d1:	75 5b                	jne    c000772e <f_mkfs+0x295>
c00076d3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00076d7:	83 e0 07             	and    eax,0x7
c00076da:	3c 04                	cmp    al,0x4
c00076dc:	74 50                	je     c000772e <f_mkfs+0x295>
c00076de:	eb 1b                	jmp    c00076fb <f_mkfs+0x262>
c00076e0:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00076e5:	0f 87 73 0a 00 00    	ja     c000815e <f_mkfs+0xcc5>
c00076eb:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076f1:	76 08                	jbe    c00076fb <f_mkfs+0x262>
c00076f3:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00076fb:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00076ff:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c0007703:	83 e0 01             	and    eax,0x1
c0007706:	80 e1 02             	and    cl,0x2
c0007709:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c000770d:	74 0d                	je     c000771c <f_mkfs+0x283>
c000770f:	84 c0                	test   al,al
c0007711:	0f 84 53 09 00 00    	je     c000806a <f_mkfs+0xbd1>
c0007717:	e9 12 08 00 00       	jmp    c0007f2e <f_mkfs+0xa95>
c000771c:	bb 13 00 00 00       	mov    ebx,0x13
c0007721:	84 c0                	test   al,al
c0007723:	0f 85 05 08 00 00    	jne    c0007f2e <f_mkfs+0xa95>
c0007729:	e9 39 0e 00 00       	jmp    c0008567 <f_mkfs+0x10ce>
c000772e:	31 c0                	xor    eax,eax
c0007730:	ba ff 0f 00 00       	mov    edx,0xfff
c0007735:	89 c7                	mov    edi,eax
c0007737:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000773a:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000773e:	0f 83 1a 0a 00 00    	jae    c000815e <f_mkfs+0xcc5>
c0007744:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000774a:	77 39                	ja     c0007785 <f_mkfs+0x2ec>
c000774c:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007751:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007759:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000775c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007760:	73 08                	jae    c000776a <f_mkfs+0x2d1>
c0007762:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000776a:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000776f:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007772:	b8 00 00 00 00       	mov    eax,0x0
c0007777:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000777b:	73 08                	jae    c0007785 <f_mkfs+0x2ec>
c000777d:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007785:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007789:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000778d:	83 c0 20             	add    eax,0x20
c0007790:	83 d2 00             	adc    edx,0x0
c0007793:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007797:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000779b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000779f:	31 d2                	xor    edx,edx
c00077a1:	31 ff                	xor    edi,edi
c00077a3:	52                   	push   edx
c00077a4:	89 fb                	mov    ebx,edi
c00077a6:	50                   	push   eax
c00077a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077ab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077af:	e8 ac ae 01 00       	call   c0022660 <__udivdi3>
c00077b4:	83 c4 10             	add    esp,0x10
c00077b7:	c1 e0 02             	shl    eax,0x2
c00077ba:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00077be:	05 07 02 00 00       	add    eax,0x207
c00077c3:	89 f1                	mov    ecx,esi
c00077c5:	c1 e8 09             	shr    eax,0x9
c00077c8:	83 c1 ff             	add    ecx,0xffffffff
c00077cb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00077cf:	83 d3 ff             	adc    ebx,0xffffffff
c00077d2:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00077d6:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00077da:	31 d2                	xor    edx,edx
c00077dc:	01 c8                	add    eax,ecx
c00077de:	11 da                	adc    edx,ebx
c00077e0:	89 c1                	mov    ecx,eax
c00077e2:	f7 de                	neg    esi
c00077e4:	89 d0                	mov    eax,edx
c00077e6:	83 d7 00             	adc    edi,0x0
c00077e9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00077ed:	f7 df                	neg    edi
c00077ef:	21 f1                	and    ecx,esi
c00077f1:	21 f8                	and    eax,edi
c00077f3:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00077f7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00077fb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00077ff:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0007803:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c0007807:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000780a:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c000780e:	0f ac d0 01          	shrd   eax,edx,0x1
c0007812:	89 df                	mov    edi,ebx
c0007814:	d1 ea                	shr    edx,1
c0007816:	39 c1                	cmp    ecx,eax
c0007818:	19 d7                	sbb    edi,edx
c000781a:	0f 83 3e 09 00 00    	jae    c000815e <f_mkfs+0xcc5>
c0007820:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007824:	31 d2                	xor    edx,edx
c0007826:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c000782a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000782e:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0007832:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007835:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007839:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c000783d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007841:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007845:	83 f8 0f             	cmp    eax,0xf
c0007848:	0f 86 10 09 00 00    	jbe    c000815e <f_mkfs+0xcc5>
c000784e:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c0007856:	0f 87 02 09 00 00    	ja     c000815e <f_mkfs+0xcc5>
c000785c:	31 d2                	xor    edx,edx
c000785e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007862:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000786a:	83 c0 07             	add    eax,0x7
c000786d:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007875:	c1 e8 03             	shr    eax,0x3
c0007878:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000787f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007883:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007887:	c1 e0 09             	shl    eax,0x9
c000788a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000788e:	48                   	dec    eax
c000788f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007893:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007897:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c000789b:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000789f:	31 d2                	xor    edx,edx
c00078a1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00078a5:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00078ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078b0:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00078b5:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00078b9:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00078bd:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00078c1:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00078c5:	31 ff                	xor    edi,edi
c00078c7:	31 f6                	xor    esi,esi
c00078c9:	31 db                	xor    ebx,ebx
c00078cb:	85 ff                	test   edi,edi
c00078cd:	74 05                	je     c00078d4 <f_mkfs+0x43b>
c00078cf:	4f                   	dec    edi
c00078d0:	74 44                	je     c0007916 <f_mkfs+0x47d>
c00078d2:	eb 4f                	jmp    c0007923 <f_mkfs+0x48a>
c00078d4:	83 ec 0c             	sub    esp,0xc
c00078d7:	0f b7 c3             	movzx  eax,bx
c00078da:	50                   	push   eax
c00078db:	e8 18 0e 00 00       	call   c00086f8 <ff_wtoupper>
c00078e0:	83 c4 10             	add    esp,0x10
c00078e3:	89 c1                	mov    ecx,eax
c00078e5:	8d 53 01             	lea    edx,[ebx+0x1]
c00078e8:	66 39 c3             	cmp    bx,ax
c00078eb:	75 3e                	jne    c000792b <f_mkfs+0x492>
c00078ed:	be 01 00 00 00       	mov    esi,0x1
c00078f2:	89 df                	mov    edi,ebx
c00078f4:	66 01 f7             	add    di,si
c00078f7:	75 07                	jne    c0007900 <f_mkfs+0x467>
c00078f9:	83 fe 7f             	cmp    esi,0x7f
c00078fc:	77 31                	ja     c000792f <f_mkfs+0x496>
c00078fe:	eb 16                	jmp    c0007916 <f_mkfs+0x47d>
c0007900:	83 ec 0c             	sub    esp,0xc
c0007903:	0f b7 ff             	movzx  edi,di
c0007906:	57                   	push   edi
c0007907:	e8 ec 0d 00 00       	call   c00086f8 <ff_wtoupper>
c000790c:	83 c4 10             	add    esp,0x10
c000790f:	39 c7                	cmp    edi,eax
c0007911:	75 e6                	jne    c00078f9 <f_mkfs+0x460>
c0007913:	46                   	inc    esi
c0007914:	eb dc                	jmp    c00078f2 <f_mkfs+0x459>
c0007916:	31 c0                	xor    eax,eax
c0007918:	89 d9                	mov    ecx,ebx
c000791a:	4e                   	dec    esi
c000791b:	0f 95 c0             	setne  al
c000791e:	43                   	inc    ebx
c000791f:	89 c7                	mov    edi,eax
c0007921:	eb 14                	jmp    c0007937 <f_mkfs+0x49e>
c0007923:	89 f1                	mov    ecx,esi
c0007925:	01 f3                	add    ebx,esi
c0007927:	31 ff                	xor    edi,edi
c0007929:	eb 0c                	jmp    c0007937 <f_mkfs+0x49e>
c000792b:	89 d3                	mov    ebx,edx
c000792d:	eb 08                	jmp    c0007937 <f_mkfs+0x49e>
c000792f:	bf 02 00 00 00       	mov    edi,0x2
c0007934:	83 c9 ff             	or     ecx,0xffffffff
c0007937:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000793b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000793e:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007942:	0f b6 c1             	movzx  eax,cl
c0007945:	e8 04 a7 ff ff       	call   c000204e <xsum32>
c000794a:	66 c1 e9 08          	shr    cx,0x8
c000794e:	89 c2                	mov    edx,eax
c0007950:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007953:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007957:	0f b7 c1             	movzx  eax,cx
c000795a:	e8 ef a6 ff ff       	call   c000204e <xsum32>
c000795f:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007964:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007968:	66 85 db             	test   bx,bx
c000796b:	74 1f                	je     c000798c <f_mkfs+0x4f3>
c000796d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007970:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007977:	83 c0 02             	add    eax,0x2
c000797a:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007980:	39 c2                	cmp    edx,eax
c0007982:	74 08                	je     c000798c <f_mkfs+0x4f3>
c0007984:	89 04 24             	mov    DWORD PTR [esp],eax
c0007987:	e9 3f ff ff ff       	jmp    c00078cb <f_mkfs+0x432>
c000798c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000798f:	83 ec 0c             	sub    esp,0xc
c0007992:	05 01 02 00 00       	add    eax,0x201
c0007997:	c1 e8 09             	shr    eax,0x9
c000799a:	50                   	push   eax
c000799b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000799f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079a3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079a7:	55                   	push   ebp
c00079a8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079ac:	e8 6d a1 ff ff       	call   c0001b1e <disk_write>
c00079b1:	83 c4 20             	add    esp,0x20
c00079b4:	85 c0                	test   eax,eax
c00079b6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00079b9:	0f 85 8b 0b 00 00    	jne    c000854a <f_mkfs+0x10b1>
c00079bf:	89 d0                	mov    eax,edx
c00079c1:	31 d2                	xor    edx,edx
c00079c3:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00079c7:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00079cb:	66 85 db             	test   bx,bx
c00079ce:	74 04                	je     c00079d4 <f_mkfs+0x53b>
c00079d0:	31 c0                	xor    eax,eax
c00079d2:	eb b0                	jmp    c0007984 <f_mkfs+0x4eb>
c00079d4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00079d8:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00079dc:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00079e0:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00079e6:	31 d2                	xor    edx,edx
c00079e8:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00079f3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00079f7:	c1 eb 09             	shr    ebx,0x9
c00079fa:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007a01:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007a05:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007a09:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a0d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007a11:	8d 70 01             	lea    esi,[eax+0x1]
c0007a14:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007a18:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a1c:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007a23:	31 d2                	xor    edx,edx
c0007a25:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007a2a:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a2d:	89 c1                	mov    ecx,eax
c0007a2f:	89 e8                	mov    eax,ebp
c0007a31:	e8 b1 a1 ff ff       	call   c0001be7 <mem_set>
c0007a36:	31 c0                	xor    eax,eax
c0007a38:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a3b:	76 10                	jbe    c0007a4d <f_mkfs+0x5b4>
c0007a3d:	83 fe 07             	cmp    esi,0x7
c0007a40:	76 0b                	jbe    c0007a4d <f_mkfs+0x5b4>
c0007a42:	40                   	inc    eax
c0007a43:	83 ee 08             	sub    esi,0x8
c0007a46:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007a4b:	eb eb                	jmp    c0007a38 <f_mkfs+0x59f>
c0007a4d:	b2 01                	mov    dl,0x1
c0007a4f:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007a53:	85 f6                	test   esi,esi
c0007a55:	74 0c                	je     c0007a63 <f_mkfs+0x5ca>
c0007a57:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a5a:	76 07                	jbe    c0007a63 <f_mkfs+0x5ca>
c0007a5c:	08 11                	or     BYTE PTR [ecx],dl
c0007a5e:	4e                   	dec    esi
c0007a5f:	d1 e2                	shl    edx,1
c0007a61:	eb f0                	jmp    c0007a53 <f_mkfs+0x5ba>
c0007a63:	89 df                	mov    edi,ebx
c0007a65:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007a69:	76 04                	jbe    c0007a6f <f_mkfs+0x5d6>
c0007a6b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007a6f:	83 ec 0c             	sub    esp,0xc
c0007a72:	57                   	push   edi
c0007a73:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a77:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a7b:	55                   	push   ebp
c0007a7c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a80:	e8 99 a0 ff ff       	call   c0001b1e <disk_write>
c0007a85:	83 c4 20             	add    esp,0x20
c0007a88:	85 c0                	test   eax,eax
c0007a8a:	0f 85 ba 0a 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007a90:	31 d2                	xor    edx,edx
c0007a92:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007a96:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007a9a:	29 fb                	sub    ebx,edi
c0007a9c:	0f 85 7a ff ff ff    	jne    c0007a1c <f_mkfs+0x583>
c0007aa2:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007aa6:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007aae:	31 f6                	xor    esi,esi
c0007ab0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007ab4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ab7:	31 d2                	xor    edx,edx
c0007ab9:	89 e8                	mov    eax,ebp
c0007abb:	e8 27 a1 ff ff       	call   c0001be7 <mem_set>
c0007ac0:	31 c9                	xor    ecx,ecx
c0007ac2:	85 db                	test   ebx,ebx
c0007ac4:	75 40                	jne    c0007b06 <f_mkfs+0x66d>
c0007ac6:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007acb:	89 e8                	mov    eax,ebp
c0007acd:	bb 02 00 00 00       	mov    ebx,0x2
c0007ad2:	e8 f2 a0 ff ff       	call   c0001bc9 <st_dword>
c0007ad7:	8d 45 04             	lea    eax,[ebp+0x4]
c0007ada:	83 ca ff             	or     edx,0xffffffff
c0007add:	e8 e7 a0 ff ff       	call   c0001bc9 <st_dword>
c0007ae2:	b9 08 00 00 00       	mov    ecx,0x8
c0007ae7:	eb 1d                	jmp    c0007b06 <f_mkfs+0x66d>
c0007ae9:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007aec:	76 3b                	jbe    c0007b29 <f_mkfs+0x690>
c0007aee:	43                   	inc    ebx
c0007aef:	83 fe 01             	cmp    esi,0x1
c0007af2:	89 da                	mov    edx,ebx
c0007af4:	77 03                	ja     c0007af9 <f_mkfs+0x660>
c0007af6:	83 ca ff             	or     edx,0xffffffff
c0007af9:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007afd:	4e                   	dec    esi
c0007afe:	e8 c6 a0 ff ff       	call   c0001bc9 <st_dword>
c0007b03:	83 c1 04             	add    ecx,0x4
c0007b06:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007b0a:	85 f6                	test   esi,esi
c0007b0c:	75 db                	jne    c0007ae9 <f_mkfs+0x650>
c0007b0e:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007b13:	77 14                	ja     c0007b29 <f_mkfs+0x690>
c0007b15:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007b19:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007b20:	85 f6                	test   esi,esi
c0007b22:	74 05                	je     c0007b29 <f_mkfs+0x690>
c0007b24:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007b27:	77 dd                	ja     c0007b06 <f_mkfs+0x66d>
c0007b29:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007b2d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007b31:	39 cf                	cmp    edi,ecx
c0007b33:	76 02                	jbe    c0007b37 <f_mkfs+0x69e>
c0007b35:	89 cf                	mov    edi,ecx
c0007b37:	83 ec 0c             	sub    esp,0xc
c0007b3a:	57                   	push   edi
c0007b3b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b3f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b43:	55                   	push   ebp
c0007b44:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b48:	e8 d1 9f ff ff       	call   c0001b1e <disk_write>
c0007b4d:	83 c4 20             	add    esp,0x20
c0007b50:	85 c0                	test   eax,eax
c0007b52:	0f 85 f2 09 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007b58:	31 d2                	xor    edx,edx
c0007b5a:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007b5e:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007b62:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007b66:	0f 85 48 ff ff ff    	jne    c0007ab4 <f_mkfs+0x61b>
c0007b6c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b6f:	31 d2                	xor    edx,edx
c0007b71:	89 e8                	mov    eax,ebp
c0007b73:	31 ff                	xor    edi,edi
c0007b75:	e8 6d a0 ff ff       	call   c0001be7 <mem_set>
c0007b7a:	8d 45 34             	lea    eax,[ebp+0x34]
c0007b7d:	ba 02 00 00 00       	mov    edx,0x2
c0007b82:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007b86:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007b8a:	e8 3a a0 ff ff       	call   c0001bc9 <st_dword>
c0007b8f:	8d 45 38             	lea    eax,[ebp+0x38]
c0007b92:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007b96:	e8 2e a0 ff ff       	call   c0001bc9 <st_dword>
c0007b9b:	8d 45 44             	lea    eax,[ebp+0x44]
c0007b9e:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007ba2:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007ba6:	e8 1e a0 ff ff       	call   c0001bc9 <st_dword>
c0007bab:	8d 45 54             	lea    eax,[ebp+0x54]
c0007bae:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007bb2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007bb6:	83 c2 02             	add    edx,0x2
c0007bb9:	e8 0b a0 ff ff       	call   c0001bc9 <st_dword>
c0007bbe:	8d 45 58             	lea    eax,[ebp+0x58]
c0007bc1:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007bc5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007bc9:	e8 fb 9f ff ff       	call   c0001bc9 <st_dword>
c0007bce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bd2:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007bd7:	89 c6                	mov    esi,eax
c0007bd9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bdd:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007be1:	89 04 24             	mov    DWORD PTR [esp],eax
c0007be4:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007be8:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007beb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007bef:	39 cb                	cmp    ebx,ecx
c0007bf1:	76 02                	jbe    c0007bf5 <f_mkfs+0x75c>
c0007bf3:	89 cb                	mov    ebx,ecx
c0007bf5:	83 ec 0c             	sub    esp,0xc
c0007bf8:	53                   	push   ebx
c0007bf9:	57                   	push   edi
c0007bfa:	56                   	push   esi
c0007bfb:	55                   	push   ebp
c0007bfc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c00:	e8 19 9f ff ff       	call   c0001b1e <disk_write>
c0007c05:	83 c4 20             	add    esp,0x20
c0007c08:	85 c0                	test   eax,eax
c0007c0a:	0f 85 3a 09 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007c10:	31 d2                	xor    edx,edx
c0007c12:	b9 00 02 00 00       	mov    ecx,0x200
c0007c17:	89 e8                	mov    eax,ebp
c0007c19:	e8 c9 9f ff ff       	call   c0001be7 <mem_set>
c0007c1e:	31 d2                	xor    edx,edx
c0007c20:	01 de                	add    esi,ebx
c0007c22:	11 d7                	adc    edi,edx
c0007c24:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007c27:	75 bf                	jne    c0007be8 <f_mkfs+0x74f>
c0007c29:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007c2d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007c31:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007c39:	b9 00 02 00 00       	mov    ecx,0x200
c0007c3e:	31 d2                	xor    edx,edx
c0007c40:	89 e8                	mov    eax,ebp
c0007c42:	e8 a0 9f ff ff       	call   c0001be7 <mem_set>
c0007c47:	b9 0b 00 00 00       	mov    ecx,0xb
c0007c4c:	ba 20 36 02 c0       	mov    edx,0xc0023620
c0007c51:	89 e8                	mov    eax,ebp
c0007c53:	e8 7a 9f ff ff       	call   c0001bd2 <mem_cpy>
c0007c58:	8d 45 40             	lea    eax,[ebp+0x40]
c0007c5b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007c5f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007c63:	e8 64 9f ff ff       	call   c0001bcc <st_qword>
c0007c68:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007c6c:	8d 45 48             	lea    eax,[ebp+0x48]
c0007c6f:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007c73:	e8 54 9f ff ff       	call   c0001bcc <st_qword>
c0007c78:	8d 45 50             	lea    eax,[ebp+0x50]
c0007c7b:	ba 20 00 00 00       	mov    edx,0x20
c0007c80:	e8 44 9f ff ff       	call   c0001bc9 <st_dword>
c0007c85:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007c89:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007c8d:	e8 37 9f ff ff       	call   c0001bc9 <st_dword>
c0007c92:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007c96:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007c9a:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007c9e:	e8 26 9f ff ff       	call   c0001bc9 <st_dword>
c0007ca3:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007ca6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007caa:	e8 1a 9f ff ff       	call   c0001bc9 <st_dword>
c0007caf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007cb3:	8d 50 02             	lea    edx,[eax+0x2]
c0007cb6:	8d 45 60             	lea    eax,[ebp+0x60]
c0007cb9:	e8 0b 9f ff ff       	call   c0001bc9 <st_dword>
c0007cbe:	8d 45 64             	lea    eax,[ebp+0x64]
c0007cc1:	ba 00 00 21 50       	mov    edx,0x50210000
c0007cc6:	e8 fe 9e ff ff       	call   c0001bc9 <st_dword>
c0007ccb:	8d 45 68             	lea    eax,[ebp+0x68]
c0007cce:	ba 00 01 00 00       	mov    edx,0x100
c0007cd3:	e8 ed 9e ff ff       	call   c0001bc5 <st_word>
c0007cd8:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007cdc:	b8 0a 00 00 00       	mov    eax,0xa
c0007ce1:	48                   	dec    eax
c0007ce2:	74 05                	je     c0007ce9 <f_mkfs+0x850>
c0007ce4:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007ce7:	eb f8                	jmp    c0007ce1 <f_mkfs+0x848>
c0007ce9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ced:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007cf1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007cf5:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007cf9:	74 05                	je     c0007d00 <f_mkfs+0x867>
c0007cfb:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007cfe:	eb f5                	jmp    c0007cf5 <f_mkfs+0x85c>
c0007d00:	8d 45 78             	lea    eax,[ebp+0x78]
c0007d03:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007d08:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007d0e:	31 db                	xor    ebx,ebx
c0007d10:	e8 b0 9e ff ff       	call   c0001bc5 <st_word>
c0007d15:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007d1b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d20:	89 04 24             	mov    DWORD PTR [esp],eax
c0007d23:	e8 9d 9e ff ff       	call   c0001bc5 <st_word>
c0007d28:	31 c9                	xor    ecx,ecx
c0007d2a:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007d2d:	83 f8 01             	cmp    eax,0x1
c0007d30:	76 13                	jbe    c0007d45 <f_mkfs+0x8ac>
c0007d32:	83 f9 70             	cmp    ecx,0x70
c0007d35:	74 0e                	je     c0007d45 <f_mkfs+0x8ac>
c0007d37:	89 da                	mov    edx,ebx
c0007d39:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007d3e:	e8 0b a3 ff ff       	call   c000204e <xsum32>
c0007d43:	89 c3                	mov    ebx,eax
c0007d45:	41                   	inc    ecx
c0007d46:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d4c:	75 dc                	jne    c0007d2a <f_mkfs+0x891>
c0007d4e:	89 f0                	mov    eax,esi
c0007d50:	89 fa                	mov    edx,edi
c0007d52:	83 c0 01             	add    eax,0x1
c0007d55:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007d59:	83 d2 00             	adc    edx,0x0
c0007d5c:	83 ec 0c             	sub    esp,0xc
c0007d5f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d63:	6a 01                	push   0x1
c0007d65:	57                   	push   edi
c0007d66:	56                   	push   esi
c0007d67:	55                   	push   ebp
c0007d68:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d6c:	e8 ad 9d ff ff       	call   c0001b1e <disk_write>
c0007d71:	83 c4 20             	add    esp,0x20
c0007d74:	85 c0                	test   eax,eax
c0007d76:	0f 85 ce 07 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007d7c:	31 d2                	xor    edx,edx
c0007d7e:	b9 00 02 00 00       	mov    ecx,0x200
c0007d83:	89 e8                	mov    eax,ebp
c0007d85:	e8 5d 9e ff ff       	call   c0001be7 <mem_set>
c0007d8a:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d8f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007d92:	e8 2e 9e ff ff       	call   c0001bc5 <st_word>
c0007d97:	89 f0                	mov    eax,esi
c0007d99:	89 fa                	mov    edx,edi
c0007d9b:	83 c0 09             	add    eax,0x9
c0007d9e:	83 d2 00             	adc    edx,0x0
c0007da1:	89 04 24             	mov    DWORD PTR [esp],eax
c0007da4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007da8:	31 c9                	xor    ecx,ecx
c0007daa:	41                   	inc    ecx
c0007dab:	89 da                	mov    edx,ebx
c0007dad:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007db2:	e8 97 a2 ff ff       	call   c000204e <xsum32>
c0007db7:	89 c3                	mov    ebx,eax
c0007db9:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007dbf:	75 e9                	jne    c0007daa <f_mkfs+0x911>
c0007dc1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007dc5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007dc9:	83 c0 01             	add    eax,0x1
c0007dcc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007dd0:	83 d2 00             	adc    edx,0x0
c0007dd3:	83 ec 0c             	sub    esp,0xc
c0007dd6:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007dda:	6a 01                	push   0x1
c0007ddc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007de0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007de4:	55                   	push   ebp
c0007de5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007de9:	e8 30 9d ff ff       	call   c0001b1e <disk_write>
c0007dee:	83 c4 20             	add    esp,0x20
c0007df1:	85 c0                	test   eax,eax
c0007df3:	0f 85 51 07 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007df9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007dfd:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007e01:	75 09                	jne    c0007e0c <f_mkfs+0x973>
c0007e03:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e06:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007e0a:	74 12                	je     c0007e1e <f_mkfs+0x985>
c0007e0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007e10:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007e14:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007e18:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007e1c:	eb 8a                	jmp    c0007da8 <f_mkfs+0x90f>
c0007e1e:	31 d2                	xor    edx,edx
c0007e20:	b9 00 02 00 00       	mov    ecx,0x200
c0007e25:	89 e8                	mov    eax,ebp
c0007e27:	e8 bb 9d ff ff       	call   c0001be7 <mem_set>
c0007e2c:	83 c6 0b             	add    esi,0xb
c0007e2f:	83 d7 00             	adc    edi,0x0
c0007e32:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007e36:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007e3a:	31 c9                	xor    ecx,ecx
c0007e3c:	41                   	inc    ecx
c0007e3d:	89 da                	mov    edx,ebx
c0007e3f:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007e44:	e8 05 a2 ff ff       	call   c000204e <xsum32>
c0007e49:	89 c3                	mov    ebx,eax
c0007e4b:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007e51:	75 e9                	jne    c0007e3c <f_mkfs+0x9a3>
c0007e53:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007e56:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007e5a:	83 c6 01             	add    esi,0x1
c0007e5d:	83 d7 00             	adc    edi,0x0
c0007e60:	83 ec 0c             	sub    esp,0xc
c0007e63:	6a 01                	push   0x1
c0007e65:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e69:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e6d:	55                   	push   ebp
c0007e6e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007e72:	e8 a7 9c ff ff       	call   c0001b1e <disk_write>
c0007e77:	83 c4 20             	add    esp,0x20
c0007e7a:	85 c0                	test   eax,eax
c0007e7c:	0f 85 c8 06 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007e82:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007e86:	75 06                	jne    c0007e8e <f_mkfs+0x9f5>
c0007e88:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007e8c:	74 09                	je     c0007e97 <f_mkfs+0x9fe>
c0007e8e:	89 34 24             	mov    DWORD PTR [esp],esi
c0007e91:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007e95:	eb a3                	jmp    c0007e3a <f_mkfs+0x9a1>
c0007e97:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007e9b:	89 da                	mov    edx,ebx
c0007e9d:	01 e8                	add    eax,ebp
c0007e9f:	e8 25 9d ff ff       	call   c0001bc9 <st_dword>
c0007ea4:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007ea9:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007eb1:	75 e4                	jne    c0007e97 <f_mkfs+0x9fe>
c0007eb3:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007eb6:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007eba:	83 c6 02             	add    esi,0x2
c0007ebd:	83 d7 00             	adc    edi,0x0
c0007ec0:	83 ec 0c             	sub    esp,0xc
c0007ec3:	6a 01                	push   0x1
c0007ec5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ec9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ecd:	55                   	push   ebp
c0007ece:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ed2:	e8 47 9c ff ff       	call   c0001b1e <disk_write>
c0007ed7:	83 c4 20             	add    esp,0x20
c0007eda:	85 c0                	test   eax,eax
c0007edc:	0f 85 68 06 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007ee2:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007ee7:	74 0d                	je     c0007ef6 <f_mkfs+0xa5d>
c0007ee9:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007ef1:	e9 43 fd ff ff       	jmp    c0007c39 <f_mkfs+0x7a0>
c0007ef6:	b1 07                	mov    cl,0x7
c0007ef8:	e9 e3 05 00 00       	jmp    c00084e0 <f_mkfs+0x1047>
c0007efd:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007f02:	0f 85 4f 02 00 00    	jne    c0008157 <f_mkfs+0xcbe>
c0007f08:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f0d:	0f 86 22 02 00 00    	jbe    c0008135 <f_mkfs+0xc9c>
c0007f13:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f18:	0f 85 81 06 00 00    	jne    c000859f <f_mkfs+0x1106>
c0007f1e:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007f21:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007f25:	83 f8 40             	cmp    eax,0x40
c0007f28:	0f 87 51 06 00 00    	ja     c000857f <f_mkfs+0x10e6>
c0007f2e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f32:	85 ff                	test   edi,edi
c0007f34:	75 1c                	jne    c0007f52 <f_mkfs+0xab9>
c0007f36:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f39:	ba 20 35 02 c0       	mov    edx,0xc0023520
c0007f3e:	c1 e9 0c             	shr    ecx,0xc
c0007f41:	bf 01 00 00 00       	mov    edi,0x1
c0007f46:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f49:	66 85 c0             	test   ax,ax
c0007f4c:	0f 85 95 01 00 00    	jne    c00080e7 <f_mkfs+0xc4e>
c0007f52:	31 d2                	xor    edx,edx
c0007f54:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007f57:	f7 f7                	div    edi
c0007f59:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007f5e:	0f 86 95 01 00 00    	jbe    c00080f9 <f_mkfs+0xc60>
c0007f64:	83 c0 02             	add    eax,0x2
c0007f67:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007f6c:	01 c0                	add    eax,eax
c0007f6e:	05 ff 01 00 00       	add    eax,0x1ff
c0007f73:	be 01 00 00 00       	mov    esi,0x1
c0007f78:	c1 e8 09             	shr    eax,0x9
c0007f7b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007f7f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007f83:	c1 e0 05             	shl    eax,0x5
c0007f86:	c1 e8 09             	shr    eax,0x9
c0007f89:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007f8d:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007f92:	31 d2                	xor    edx,edx
c0007f94:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007f98:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007f9c:	89 f0                	mov    eax,esi
c0007f9e:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007fa2:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007fa6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007faa:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007fae:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007fb2:	31 d2                	xor    edx,edx
c0007fb4:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007fb9:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007fbd:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007fc1:	31 db                	xor    ebx,ebx
c0007fc3:	01 c8                	add    eax,ecx
c0007fc5:	11 da                	adc    edx,ebx
c0007fc7:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007fcb:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007fcf:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007fd3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007fd7:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007fdb:	f7 da                	neg    edx
c0007fdd:	21 d1                	and    ecx,edx
c0007fdf:	29 d9                	sub    ecx,ebx
c0007fe1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fe6:	0f 85 20 01 00 00    	jne    c000810c <f_mkfs+0xc73>
c0007fec:	31 db                	xor    ebx,ebx
c0007fee:	01 ce                	add    esi,ecx
c0007ff0:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ff4:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ff8:	31 d2                	xor    edx,edx
c0007ffa:	89 f8                	mov    eax,edi
c0007ffc:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0008000:	c1 e0 04             	shl    eax,0x4
c0008003:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0008007:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c000800b:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c000800f:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0008013:	39 04 24             	cmp    DWORD PTR [esp],eax
c0008016:	19 d3                	sbb    ebx,edx
c0008018:	0f 82 40 01 00 00    	jb     c000815e <f_mkfs+0xcc5>
c000801e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008021:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008025:	89 c8                	mov    eax,ecx
c0008027:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c000802c:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0008030:	29 f0                	sub    eax,esi
c0008032:	29 d0                	sub    eax,edx
c0008034:	31 d2                	xor    edx,edx
c0008036:	f7 f7                	div    edi
c0008038:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000803d:	89 c3                	mov    ebx,eax
c000803f:	0f 85 b8 fe ff ff    	jne    c0007efd <f_mkfs+0xa64>
c0008045:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000804a:	0f 87 1d 01 00 00    	ja     c000816d <f_mkfs+0xcd4>
c0008050:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008055:	0f 85 03 01 00 00    	jne    c000815e <f_mkfs+0xcc5>
c000805b:	83 ff 01             	cmp    edi,0x1
c000805e:	0f 86 fa 00 00 00    	jbe    c000815e <f_mkfs+0xcc5>
c0008064:	d1 ef                	shr    edi,1
c0008066:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000806a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000806e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008071:	85 db                	test   ebx,ebx
c0008073:	75 2d                	jne    c00080a2 <f_mkfs+0xc09>
c0008075:	89 cb                	mov    ebx,ecx
c0008077:	ba 30 35 02 c0       	mov    edx,0xc0023530
c000807c:	c1 eb 11             	shr    ebx,0x11
c000807f:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0008087:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000808a:	66 85 c0             	test   ax,ax
c000808d:	74 11                	je     c00080a0 <f_mkfs+0xc07>
c000808f:	83 c2 02             	add    edx,0x2
c0008092:	39 d8                	cmp    eax,ebx
c0008094:	77 0a                	ja     c00080a0 <f_mkfs+0xc07>
c0008096:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000809a:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c000809e:	eb e7                	jmp    c0008087 <f_mkfs+0xbee>
c00080a0:	31 db                	xor    ebx,ebx
c00080a2:	31 d2                	xor    edx,edx
c00080a4:	89 c8                	mov    eax,ecx
c00080a6:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00080aa:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00080b1:	2d f6 ff 00 00       	sub    eax,0xfff6
c00080b6:	c1 ea 09             	shr    edx,0x9
c00080b9:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00080be:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00080c2:	0f 87 96 00 00 00    	ja     c000815e <f_mkfs+0xcc5>
c00080c8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080cc:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c00080d4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00080d8:	be 20 00 00 00       	mov    esi,0x20
c00080dd:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c00080e2:	e9 a6 fe ff ff       	jmp    c0007f8d <f_mkfs+0xaf4>
c00080e7:	83 c2 02             	add    edx,0x2
c00080ea:	39 c8                	cmp    eax,ecx
c00080ec:	0f 87 60 fe ff ff    	ja     c0007f52 <f_mkfs+0xab9>
c00080f2:	01 ff                	add    edi,edi
c00080f4:	e9 4d fe ff ff       	jmp    c0007f46 <f_mkfs+0xaad>
c00080f9:	8d 04 40             	lea    eax,[eax+eax*2]
c00080fc:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008101:	40                   	inc    eax
c0008102:	d1 e8                	shr    eax,1
c0008104:	83 c0 03             	add    eax,0x3
c0008107:	e9 62 fe ff ff       	jmp    c0007f6e <f_mkfs+0xad5>
c000810c:	31 d2                	xor    edx,edx
c000810e:	89 c8                	mov    eax,ecx
c0008110:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008114:	85 d2                	test   edx,edx
c0008116:	74 0c                	je     c0008124 <f_mkfs+0xc8b>
c0008118:	49                   	dec    ecx
c0008119:	46                   	inc    esi
c000811a:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c000811f:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0008124:	89 c8                	mov    eax,ecx
c0008126:	31 d2                	xor    edx,edx
c0008128:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c000812c:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008130:	e9 c3 fe ff ff       	jmp    c0007ff8 <f_mkfs+0xb5f>
c0008135:	3d f5 0f 00 00       	cmp    eax,0xff5
c000813a:	77 31                	ja     c000816d <f_mkfs+0xcd4>
c000813c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008141:	75 1b                	jne    c000815e <f_mkfs+0xcc5>
c0008143:	8d 04 3f             	lea    eax,[edi+edi*1]
c0008146:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000814a:	3d 80 00 00 00       	cmp    eax,0x80
c000814f:	0f 86 d9 fd ff ff    	jbe    c0007f2e <f_mkfs+0xa95>
c0008155:	eb 07                	jmp    c000815e <f_mkfs+0xcc5>
c0008157:	3d f5 0f 00 00       	cmp    eax,0xff5
c000815c:	76 0a                	jbe    c0008168 <f_mkfs+0xccf>
c000815e:	bb 0e 00 00 00       	mov    ebx,0xe
c0008163:	e9 ff 03 00 00       	jmp    c0008567 <f_mkfs+0x10ce>
c0008168:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c000816d:	31 d2                	xor    edx,edx
c000816f:	b9 00 02 00 00       	mov    ecx,0x200
c0008174:	89 e8                	mov    eax,ebp
c0008176:	e8 6c 9a ff ff       	call   c0001be7 <mem_set>
c000817b:	b9 0b 00 00 00       	mov    ecx,0xb
c0008180:	ba 42 36 02 c0       	mov    edx,0xc0023642
c0008185:	89 e8                	mov    eax,ebp
c0008187:	e8 46 9a ff ff       	call   c0001bd2 <mem_cpy>
c000818c:	8d 45 0b             	lea    eax,[ebp+0xb]
c000818f:	ba 00 02 00 00       	mov    edx,0x200
c0008194:	e8 2c 9a ff ff       	call   c0001bc5 <st_word>
c0008199:	89 f8                	mov    eax,edi
c000819b:	0f b7 d6             	movzx  edx,si
c000819e:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c00081a1:	8d 45 0e             	lea    eax,[ebp+0xe]
c00081a4:	e8 1c 9a ff ff       	call   c0001bc5 <st_word>
c00081a9:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c00081ad:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081b2:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c00081b5:	75 08                	jne    c00081bf <f_mkfs+0xd26>
c00081b7:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00081bf:	8d 45 11             	lea    eax,[ebp+0x11]
c00081c2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00081c6:	e8 fa 99 ff ff       	call   c0001bc5 <st_word>
c00081cb:	b8 ff ff 00 00       	mov    eax,0xffff
c00081d0:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00081d4:	39 d0                	cmp    eax,edx
c00081d6:	b8 00 00 00 00       	mov    eax,0x0
c00081db:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00081df:	72 0a                	jb     c00081eb <f_mkfs+0xd52>
c00081e1:	8d 45 13             	lea    eax,[ebp+0x13]
c00081e4:	e8 dc 99 ff ff       	call   c0001bc5 <st_word>
c00081e9:	eb 08                	jmp    c00081f3 <f_mkfs+0xd5a>
c00081eb:	8d 45 20             	lea    eax,[ebp+0x20]
c00081ee:	e8 d6 99 ff ff       	call   c0001bc9 <st_dword>
c00081f3:	8d 45 18             	lea    eax,[ebp+0x18]
c00081f6:	ba 3f 00 00 00       	mov    edx,0x3f
c00081fb:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00081ff:	e8 c1 99 ff ff       	call   c0001bc5 <st_word>
c0008204:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0008207:	ba ff 00 00 00       	mov    edx,0xff
c000820c:	e8 b4 99 ff ff       	call   c0001bc5 <st_word>
c0008211:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0008214:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008218:	e8 ac 99 ff ff       	call   c0001bc9 <st_dword>
c000821d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008222:	75 57                	jne    c000827b <f_mkfs+0xde2>
c0008224:	8d 45 43             	lea    eax,[ebp+0x43]
c0008227:	ba 00 00 21 50       	mov    edx,0x50210000
c000822c:	e8 98 99 ff ff       	call   c0001bc9 <st_dword>
c0008231:	8d 45 24             	lea    eax,[ebp+0x24]
c0008234:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008238:	e8 8c 99 ff ff       	call   c0001bc9 <st_dword>
c000823d:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008240:	ba 02 00 00 00       	mov    edx,0x2
c0008245:	e8 7f 99 ff ff       	call   c0001bc9 <st_dword>
c000824a:	8d 45 30             	lea    eax,[ebp+0x30]
c000824d:	ba 01 00 00 00       	mov    edx,0x1
c0008252:	e8 6e 99 ff ff       	call   c0001bc5 <st_word>
c0008257:	8d 45 32             	lea    eax,[ebp+0x32]
c000825a:	ba 06 00 00 00       	mov    edx,0x6
c000825f:	e8 61 99 ff ff       	call   c0001bc5 <st_word>
c0008264:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008268:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000826c:	8d 45 47             	lea    eax,[ebp+0x47]
c000826f:	b9 13 00 00 00       	mov    ecx,0x13
c0008274:	ba 4e 36 02 c0       	mov    edx,0xc002364e
c0008279:	eb 2f                	jmp    c00082aa <f_mkfs+0xe11>
c000827b:	8d 45 27             	lea    eax,[ebp+0x27]
c000827e:	ba 00 00 21 50       	mov    edx,0x50210000
c0008283:	e8 41 99 ff ff       	call   c0001bc9 <st_dword>
c0008288:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c000828d:	8d 45 16             	lea    eax,[ebp+0x16]
c0008290:	e8 30 99 ff ff       	call   c0001bc5 <st_word>
c0008295:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008299:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c000829d:	8d 45 2b             	lea    eax,[ebp+0x2b]
c00082a0:	b9 13 00 00 00       	mov    ecx,0x13
c00082a5:	ba 62 36 02 c0       	mov    edx,0xc0023662
c00082aa:	e8 23 99 ff ff       	call   c0001bd2 <mem_cpy>
c00082af:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c00082b5:	ba 55 aa 00 00       	mov    edx,0xaa55
c00082ba:	89 f0                	mov    eax,esi
c00082bc:	e8 04 99 ff ff       	call   c0001bc5 <st_word>
c00082c1:	83 ec 0c             	sub    esp,0xc
c00082c4:	6a 01                	push   0x1
c00082c6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082ce:	55                   	push   ebp
c00082cf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082d3:	e8 46 98 ff ff       	call   c0001b1e <disk_write>
c00082d8:	83 c4 20             	add    esp,0x20
c00082db:	85 c0                	test   eax,eax
c00082dd:	0f 85 67 02 00 00    	jne    c000854a <f_mkfs+0x10b1>
c00082e3:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082e8:	0f 85 b7 00 00 00    	jne    c00083a5 <f_mkfs+0xf0c>
c00082ee:	83 ec 0c             	sub    esp,0xc
c00082f1:	6a 01                	push   0x1
c00082f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082f7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00082fb:	83 c0 06             	add    eax,0x6
c00082fe:	83 d2 00             	adc    edx,0x0
c0008301:	52                   	push   edx
c0008302:	50                   	push   eax
c0008303:	55                   	push   ebp
c0008304:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008308:	e8 11 98 ff ff       	call   c0001b1e <disk_write>
c000830d:	83 c4 20             	add    esp,0x20
c0008310:	b9 00 02 00 00       	mov    ecx,0x200
c0008315:	31 d2                	xor    edx,edx
c0008317:	89 e8                	mov    eax,ebp
c0008319:	e8 c9 98 ff ff       	call   c0001be7 <mem_set>
c000831e:	ba 52 52 61 41       	mov    edx,0x41615252
c0008323:	89 e8                	mov    eax,ebp
c0008325:	e8 9f 98 ff ff       	call   c0001bc9 <st_dword>
c000832a:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008330:	ba 72 72 41 61       	mov    edx,0x61417272
c0008335:	e8 8f 98 ff ff       	call   c0001bc9 <st_dword>
c000833a:	8d 53 ff             	lea    edx,[ebx-0x1]
c000833d:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0008343:	e8 81 98 ff ff       	call   c0001bc9 <st_dword>
c0008348:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c000834e:	ba 02 00 00 00       	mov    edx,0x2
c0008353:	e8 71 98 ff ff       	call   c0001bc9 <st_dword>
c0008358:	ba 55 aa 00 00       	mov    edx,0xaa55
c000835d:	89 f0                	mov    eax,esi
c000835f:	e8 61 98 ff ff       	call   c0001bc5 <st_word>
c0008364:	83 ec 0c             	sub    esp,0xc
c0008367:	6a 01                	push   0x1
c0008369:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000836d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008371:	83 c0 07             	add    eax,0x7
c0008374:	83 d2 00             	adc    edx,0x0
c0008377:	52                   	push   edx
c0008378:	50                   	push   eax
c0008379:	55                   	push   ebp
c000837a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000837e:	e8 9b 97 ff ff       	call   c0001b1e <disk_write>
c0008383:	83 c4 14             	add    esp,0x14
c0008386:	6a 01                	push   0x1
c0008388:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000838c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008390:	83 c0 01             	add    eax,0x1
c0008393:	83 d2 00             	adc    edx,0x0
c0008396:	52                   	push   edx
c0008397:	50                   	push   eax
c0008398:	55                   	push   ebp
c0008399:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000839d:	e8 7c 97 ff ff       	call   c0001b1e <disk_write>
c00083a2:	83 c4 20             	add    esp,0x20
c00083a5:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c00083ac:	31 d2                	xor    edx,edx
c00083ae:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00083b4:	31 db                	xor    ebx,ebx
c00083b6:	89 e8                	mov    eax,ebp
c00083b8:	e8 2a 98 ff ff       	call   c0001be7 <mem_set>
c00083bd:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00083c2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00083c9:	0f 94 c3             	sete   bl
c00083cc:	4b                   	dec    ebx
c00083cd:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00083d3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00083d9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083de:	75 21                	jne    c0008401 <f_mkfs+0xf68>
c00083e0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00083e5:	89 e8                	mov    eax,ebp
c00083e7:	e8 dd 97 ff ff       	call   c0001bc9 <st_dword>
c00083ec:	8d 45 04             	lea    eax,[ebp+0x4]
c00083ef:	83 ca ff             	or     edx,0xffffffff
c00083f2:	e8 d2 97 ff ff       	call   c0001bc9 <st_dword>
c00083f7:	8d 45 08             	lea    eax,[ebp+0x8]
c00083fa:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00083ff:	eb 04                	jmp    c0008405 <f_mkfs+0xf6c>
c0008401:	89 da                	mov    edx,ebx
c0008403:	89 e8                	mov    eax,ebp
c0008405:	e8 bf 97 ff ff       	call   c0001bc9 <st_dword>
c000840a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000840e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008412:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0008416:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000841a:	39 ce                	cmp    esi,ecx
c000841c:	76 02                	jbe    c0008420 <f_mkfs+0xf87>
c000841e:	89 ce                	mov    esi,ecx
c0008420:	83 ec 0c             	sub    esp,0xc
c0008423:	56                   	push   esi
c0008424:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008428:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000842c:	55                   	push   ebp
c000842d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008431:	e8 e8 96 ff ff       	call   c0001b1e <disk_write>
c0008436:	83 c4 20             	add    esp,0x20
c0008439:	85 c0                	test   eax,eax
c000843b:	0f 85 09 01 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0008441:	31 d2                	xor    edx,edx
c0008443:	b9 00 02 00 00       	mov    ecx,0x200
c0008448:	89 e8                	mov    eax,ebp
c000844a:	e8 98 97 ff ff       	call   c0001be7 <mem_set>
c000844f:	31 d2                	xor    edx,edx
c0008451:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c0008455:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008459:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000845d:	75 b3                	jne    c0008412 <f_mkfs+0xf79>
c000845f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008462:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008469:	40                   	inc    eax
c000846a:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000846e:	0f 87 65 ff ff ff    	ja     c00083d9 <f_mkfs+0xf40>
c0008474:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008479:	74 04                	je     c000847f <f_mkfs+0xfe6>
c000847b:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000847f:	89 fb                	mov    ebx,edi
c0008481:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008485:	76 04                	jbe    c000848b <f_mkfs+0xff2>
c0008487:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000848b:	83 ec 0c             	sub    esp,0xc
c000848e:	53                   	push   ebx
c000848f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008493:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008497:	55                   	push   ebp
c0008498:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000849c:	e8 7d 96 ff ff       	call   c0001b1e <disk_write>
c00084a1:	83 c4 20             	add    esp,0x20
c00084a4:	85 c0                	test   eax,eax
c00084a6:	0f 85 9e 00 00 00    	jne    c000854a <f_mkfs+0x10b1>
c00084ac:	31 d2                	xor    edx,edx
c00084ae:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00084b2:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00084b6:	29 df                	sub    edi,ebx
c00084b8:	75 c5                	jne    c000847f <f_mkfs+0xfe6>
c00084ba:	b1 0c                	mov    cl,0xc
c00084bc:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00084c1:	74 1d                	je     c00084e0 <f_mkfs+0x1047>
c00084c3:	b8 ff ff 00 00       	mov    eax,0xffff
c00084c8:	b1 06                	mov    cl,0x6
c00084ca:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00084ce:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00084d2:	72 0c                	jb     c00084e0 <f_mkfs+0x1047>
c00084d4:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00084d9:	0f 94 c1             	sete   cl
c00084dc:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00084e0:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00084e5:	75 4c                	jne    c0008533 <f_mkfs+0x109a>
c00084e7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00084eb:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00084ef:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00084f6:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00084fd:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008508:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c0008513:	0f b6 c9             	movzx  ecx,cl
c0008516:	83 ec 0c             	sub    esp,0xc
c0008519:	55                   	push   ebp
c000851a:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008521:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008525:	e8 f9 bf ff ff       	call   c0004523 <create_partition>
c000852a:	83 c4 10             	add    esp,0x10
c000852d:	89 c3                	mov    ebx,eax
c000852f:	85 c0                	test   eax,eax
c0008531:	75 34                	jne    c0008567 <f_mkfs+0x10ce>
c0008533:	31 db                	xor    ebx,ebx
c0008535:	50                   	push   eax
c0008536:	6a 00                	push   0x0
c0008538:	6a 00                	push   0x0
c000853a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000853e:	e8 f1 95 ff ff       	call   c0001b34 <disk_ioctl>
c0008543:	83 c4 10             	add    esp,0x10
c0008546:	85 c0                	test   eax,eax
c0008548:	74 1d                	je     c0008567 <f_mkfs+0x10ce>
c000854a:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008552:	75 0c                	jne    c0008560 <f_mkfs+0x10c7>
c0008554:	83 ec 0c             	sub    esp,0xc
c0008557:	55                   	push   ebp
c0008558:	e8 77 00 00 00       	call   c00085d4 <ff_memfree>
c000855d:	83 c4 10             	add    esp,0x10
c0008560:	bb 01 00 00 00       	mov    ebx,0x1
c0008565:	eb 48                	jmp    c00085af <f_mkfs+0x1116>
c0008567:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000856f:	75 3e                	jne    c00085af <f_mkfs+0x1116>
c0008571:	83 ec 0c             	sub    esp,0xc
c0008574:	55                   	push   ebp
c0008575:	e8 5a 00 00 00       	call   c00085d4 <ff_memfree>
c000857a:	83 c4 10             	add    esp,0x10
c000857d:	eb 30                	jmp    c00085af <f_mkfs+0x1116>
c000857f:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008584:	0f 85 eb fa ff ff    	jne    c0008075 <f_mkfs+0xbdc>
c000858a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000858e:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008594:	0f 86 b8 f9 ff ff    	jbe    c0007f52 <f_mkfs+0xab9>
c000859a:	e9 bf fb ff ff       	jmp    c000815e <f_mkfs+0xcc5>
c000859f:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00085a4:	0f 85 c0 fa ff ff    	jne    c000806a <f_mkfs+0xbd1>
c00085aa:	e9 af fb ff ff       	jmp    c000815e <f_mkfs+0xcc5>
c00085af:	81 c4 9c 00 00 00    	add    esp,0x9c
c00085b5:	89 d8                	mov    eax,ebx
c00085b7:	5b                   	pop    ebx
c00085b8:	5e                   	pop    esi
c00085b9:	5f                   	pop    edi
c00085ba:	5d                   	pop    ebp
c00085bb:	c3                   	ret    

c00085bc <ff_memalloc>:
c00085bc:	83 ec 0c             	sub    esp,0xc
c00085bf:	83 ec 0c             	sub    esp,0xc
c00085c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085c6:	e8 ec 16 00 00       	call   c0009cb7 <malloc>
c00085cb:	83 c4 10             	add    esp,0x10
c00085ce:	83 c4 0c             	add    esp,0xc
c00085d1:	c3                   	ret    
c00085d2:	66 90                	xchg   ax,ax

c00085d4 <ff_memfree>:
c00085d4:	83 ec 0c             	sub    esp,0xc
c00085d7:	83 ec 0c             	sub    esp,0xc
c00085da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085de:	e8 e4 16 00 00       	call   c0009cc7 <free>
c00085e3:	83 c4 10             	add    esp,0x10
c00085e6:	90                   	nop
c00085e7:	83 c4 0c             	add    esp,0xc
c00085ea:	c3                   	ret    
c00085eb:	90                   	nop

c00085ec <ff_uni2oem>:
c00085ec:	83 ec 14             	sub    esp,0x14
c00085ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00085f3:	66 89 04 24          	mov    WORD PTR [esp],ax
c00085f7:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00085fe:	c7 44 24 0c 80 39 02 c0 	mov    DWORD PTR [esp+0xc],0xc0023980
c0008606:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c000860b:	77 0b                	ja     c0008618 <ff_uni2oem+0x2c>
c000860d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008611:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008616:	eb 60                	jmp    c0008678 <ff_uni2oem+0x8c>
c0008618:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008620:	77 56                	ja     c0008678 <ff_uni2oem+0x8c>
c0008622:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008628:	75 4e                	jne    c0008678 <ff_uni2oem+0x8c>
c000862a:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008631:	eb 0d                	jmp    c0008640 <ff_uni2oem+0x54>
c0008633:	90                   	nop
c0008634:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008639:	40                   	inc    eax
c000863a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000863f:	90                   	nop
c0008640:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008646:	77 1c                	ja     c0008664 <ff_uni2oem+0x78>
c0008648:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000864d:	01 c0                	add    eax,eax
c000864f:	89 c2                	mov    edx,eax
c0008651:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008655:	01 d0                	add    eax,edx
c0008657:	66 8b 00             	mov    ax,WORD PTR [eax]
c000865a:	0f b7 c0             	movzx  eax,ax
c000865d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008661:	75 d1                	jne    c0008634 <ff_uni2oem+0x48>
c0008663:	90                   	nop
c0008664:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008669:	83 e8 80             	sub    eax,0xffffff80
c000866c:	25 ff 00 00 00       	and    eax,0xff
c0008671:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008676:	66 90                	xchg   ax,ax
c0008678:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000867d:	83 c4 14             	add    esp,0x14
c0008680:	c3                   	ret    
c0008681:	8d 76 00             	lea    esi,[esi+0x0]

c0008684 <ff_oem2uni>:
c0008684:	83 ec 18             	sub    esp,0x18
c0008687:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000868b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000868f:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008694:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008698:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000869f:	c7 44 24 10 80 39 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023980
c00086a7:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00086ad:	77 0d                	ja     c00086bc <ff_oem2uni+0x38>
c00086af:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086b3:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086b8:	eb 32                	jmp    c00086ec <ff_oem2uni+0x68>
c00086ba:	66 90                	xchg   ax,ax
c00086bc:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00086c2:	75 28                	jne    c00086ec <ff_oem2uni+0x68>
c00086c4:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00086cb:	77 1f                	ja     c00086ec <ff_oem2uni+0x68>
c00086cd:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00086d2:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00086d7:	01 c0                	add    eax,eax
c00086d9:	89 c2                	mov    edx,eax
c00086db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086df:	01 d0                	add    eax,edx
c00086e1:	66 8b 00             	mov    ax,WORD PTR [eax]
c00086e4:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086e9:	8d 76 00             	lea    esi,[esi+0x0]
c00086ec:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00086f1:	83 c4 18             	add    esp,0x18
c00086f4:	c3                   	ret    
c00086f5:	8d 76 00             	lea    esi,[esi+0x0]

c00086f8 <ff_wtoupper>:
c00086f8:	83 ec 10             	sub    esp,0x10
c00086fb:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0008703:	0f 87 4f 01 00 00    	ja     c0008858 <ff_wtoupper+0x160>
c0008709:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000870d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008712:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008719:	77 09                	ja     c0008724 <ff_wtoupper+0x2c>
c000871b:	b8 80 37 02 c0       	mov    eax,0xc0023780
c0008720:	eb 0a                	jmp    c000872c <ff_wtoupper+0x34>
c0008722:	66 90                	xchg   ax,ax
c0008724:	b8 c0 36 02 c0       	mov    eax,0xc00236c0
c0008729:	8d 76 00             	lea    esi,[esi+0x0]
c000872c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008730:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008734:	8d 50 02             	lea    edx,[eax+0x2]
c0008737:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000873b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000873e:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008743:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008749:	0f 84 fd 00 00 00    	je     c000884c <ff_wtoupper+0x154>
c000874f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008754:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008759:	0f 82 ed 00 00 00    	jb     c000884c <ff_wtoupper+0x154>
c000875f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008763:	8d 50 02             	lea    edx,[eax+0x2]
c0008766:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000876a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000876d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008772:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008777:	66 c1 e8 08          	shr    ax,0x8
c000877b:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008780:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008787:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000878c:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008791:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008796:	01 ca                	add    edx,ecx
c0008798:	39 d0                	cmp    eax,edx
c000879a:	0f 8d 8c 00 00 00    	jge    c000882c <ff_wtoupper+0x134>
c00087a0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00087a5:	83 f8 08             	cmp    eax,0x8
c00087a8:	0f 87 9a 00 00 00    	ja     c0008848 <ff_wtoupper+0x150>
c00087ae:	8b 04 85 80 36 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc980]
c00087b5:	ff e0                	jmp    eax
c00087b7:	90                   	nop
c00087b8:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00087bd:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00087c2:	29 c2                	sub    edx,eax
c00087c4:	89 d0                	mov    eax,edx
c00087c6:	01 c0                	add    eax,eax
c00087c8:	89 c2                	mov    edx,eax
c00087ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087ce:	01 d0                	add    eax,edx
c00087d0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00087d3:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00087d8:	eb 4e                	jmp    c0008828 <ff_wtoupper+0x130>
c00087da:	66 90                	xchg   ax,ax
c00087dc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00087e1:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00087e5:	83 e0 01             	and    eax,0x1
c00087e8:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00087ed:	eb 39                	jmp    c0008828 <ff_wtoupper+0x130>
c00087ef:	90                   	nop
c00087f0:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00087f6:	eb 30                	jmp    c0008828 <ff_wtoupper+0x130>
c00087f8:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00087fe:	eb 28                	jmp    c0008828 <ff_wtoupper+0x130>
c0008800:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008806:	eb 20                	jmp    c0008828 <ff_wtoupper+0x130>
c0008808:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c000880e:	eb 18                	jmp    c0008828 <ff_wtoupper+0x130>
c0008810:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008816:	eb 10                	jmp    c0008828 <ff_wtoupper+0x130>
c0008818:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c000881e:	eb 08                	jmp    c0008828 <ff_wtoupper+0x130>
c0008820:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0008827:	90                   	nop
c0008828:	eb 1e                	jmp    c0008848 <ff_wtoupper+0x150>
c000882a:	66 90                	xchg   ax,ax
c000882c:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0008832:	0f 85 f8 fe ff ff    	jne    c0008730 <ff_wtoupper+0x38>
c0008838:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000883d:	01 c0                	add    eax,eax
c000883f:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0008843:	e9 e8 fe ff ff       	jmp    c0008730 <ff_wtoupper+0x38>
c0008848:	90                   	nop
c0008849:	8d 76 00             	lea    esi,[esi+0x0]
c000884c:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008851:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008855:	8d 76 00             	lea    esi,[esi+0x0]
c0008858:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000885c:	83 c4 10             	add    esp,0x10
c000885f:	c3                   	ret    

c0008860 <CPU::current()>:
c0008860:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c0008865:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000886b:	c3                   	ret    

c000886c <operator new(unsigned long)>:
c000886c:	e9 46 14 00 00       	jmp    c0009cb7 <malloc>

c0008871 <operator delete(void*)>:
c0008871:	e9 61 14 00 00       	jmp    c0009cd7 <rfree>

c0008876 <disableIRQs()>:
c0008876:	fa                   	cli    
c0008877:	ff 05 28 93 02 c0    	inc    DWORD PTR ds:0xc0029328
c000887d:	c3                   	ret    

c000887e <enableIRQs()>:
c000887e:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c0008883:	48                   	dec    eax
c0008884:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c0008889:	75 01                	jne    c000888c <enableIRQs()+0xe>
c000888b:	fb                   	sti    
c000888c:	c3                   	ret    

c000888d <lockScheduler()>:
c000888d:	fa                   	cli    
c000888e:	ff 05 28 93 02 c0    	inc    DWORD PTR ds:0xc0029328
c0008894:	c3                   	ret    

c0008895 <unlockScheduler()>:
c0008895:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c000889a:	48                   	dec    eax
c000889b:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c00088a0:	75 01                	jne    c00088a3 <unlockScheduler()+0xe>
c00088a2:	fb                   	sti    
c00088a3:	c3                   	ret    

c00088a4 <lockStuff()>:
c00088a4:	fa                   	cli    
c00088a5:	ff 05 28 93 02 c0    	inc    DWORD PTR ds:0xc0029328
c00088ab:	ff 05 24 93 02 c0    	inc    DWORD PTR ds:0xc0029324
c00088b1:	c3                   	ret    

c00088b2 <unlockStuff()>:
c00088b2:	83 ec 0c             	sub    esp,0xc
c00088b5:	a1 24 93 02 c0       	mov    eax,ds:0xc0029324
c00088ba:	48                   	dec    eax
c00088bb:	a3 24 93 02 c0       	mov    ds:0xc0029324,eax
c00088c0:	75 18                	jne    c00088da <unlockStuff()+0x28>
c00088c2:	83 3d 20 93 02 c0 00 	cmp    DWORD PTR ds:0xc0029320,0x0
c00088c9:	74 0f                	je     c00088da <unlockStuff()+0x28>
c00088cb:	c7 05 20 93 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029320,0x0
c00088d5:	e8 a6 fa 00 00       	call   c0018380 <schedule()>
c00088da:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c00088df:	48                   	dec    eax
c00088e0:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c00088e5:	75 01                	jne    c00088e8 <unlockStuff()+0x36>
c00088e7:	fb                   	sti    
c00088e8:	83 c4 0c             	add    esp,0xc
c00088eb:	c3                   	ret    

c00088ec <Virt::getAKernelVAS()>:
c00088ec:	a1 34 7f 02 c0       	mov    eax,ds:0xc0027f34
c00088f1:	c3                   	ret    

c00088f2 <__not_memcpy>:
c00088f2:	57                   	push   edi
c00088f3:	56                   	push   esi
c00088f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00088f8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00088fc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008900:	89 c7                	mov    edi,eax
c0008902:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008904:	5e                   	pop    esi
c0008905:	5f                   	pop    edi
c0008906:	c3                   	ret    
c0008907:	90                   	nop

c0008908 <Krnl::resolveCompatibilitySymbol(char*)>:
c0008908:	83 ec 0c             	sub    esp,0xc
c000890b:	83 ec 08             	sub    esp,0x8
c000890e:	68 80 3a 02 c0       	push   0xc0023a80
c0008913:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008917:	e8 a8 7e ff ff       	call   c00007c4 <strcmp>
c000891c:	83 c4 10             	add    esp,0x10
c000891f:	85 c0                	test   eax,eax
c0008921:	0f 94 c0             	sete   al
c0008924:	84 c0                	test   al,al
c0008926:	74 0c                	je     c0008934 <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0008928:	b8 08 7e 02 c0       	mov    eax,0xc0027e08
c000892d:	e9 ea 00 00 00       	jmp    c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008932:	66 90                	xchg   ax,ax
c0008934:	83 ec 08             	sub    esp,0x8
c0008937:	68 89 3a 02 c0       	push   0xc0023a89
c000893c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008940:	e8 7f 7e ff ff       	call   c00007c4 <strcmp>
c0008945:	83 c4 10             	add    esp,0x10
c0008948:	85 c0                	test   eax,eax
c000894a:	0f 94 c0             	sete   al
c000894d:	84 c0                	test   al,al
c000894f:	74 0b                	je     c000895c <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c0008951:	b8 60 26 02 c0       	mov    eax,0xc0022660
c0008956:	e9 c1 00 00 00       	jmp    c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000895b:	90                   	nop
c000895c:	83 ec 08             	sub    esp,0x8
c000895f:	68 93 3a 02 c0       	push   0xc0023a93
c0008964:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008968:	e8 57 7e ff ff       	call   c00007c4 <strcmp>
c000896d:	83 c4 10             	add    esp,0x10
c0008970:	85 c0                	test   eax,eax
c0008972:	0f 94 c0             	sete   al
c0008975:	84 c0                	test   al,al
c0008977:	74 0b                	je     c0008984 <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c0008979:	b8 94 23 02 c0       	mov    eax,0xc0022394
c000897e:	e9 99 00 00 00       	jmp    c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008983:	90                   	nop
c0008984:	83 ec 08             	sub    esp,0x8
c0008987:	68 9c 3a 02 c0       	push   0xc0023a9c
c000898c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008990:	e8 2f 7e ff ff       	call   c00007c4 <strcmp>
c0008995:	83 c4 10             	add    esp,0x10
c0008998:	85 c0                	test   eax,eax
c000899a:	0f 94 c0             	sete   al
c000899d:	84 c0                	test   al,al
c000899f:	74 07                	je     c00089a8 <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c00089a1:	b8 60 27 02 c0       	mov    eax,0xc0022760
c00089a6:	eb 74                	jmp    c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089a8:	83 ec 08             	sub    esp,0x8
c00089ab:	68 a6 3a 02 c0       	push   0xc0023aa6
c00089b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089b4:	e8 0b 7e ff ff       	call   c00007c4 <strcmp>
c00089b9:	83 c4 10             	add    esp,0x10
c00089bc:	85 c0                	test   eax,eax
c00089be:	0f 94 c0             	sete   al
c00089c1:	84 c0                	test   al,al
c00089c3:	74 07                	je     c00089cc <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c00089c5:	b8 e0 24 02 c0       	mov    eax,0xc00224e0
c00089ca:	eb 50                	jmp    c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089cc:	83 ec 08             	sub    esp,0x8
c00089cf:	68 af 3a 02 c0       	push   0xc0023aaf
c00089d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089d8:	e8 e7 7d ff ff       	call   c00007c4 <strcmp>
c00089dd:	83 c4 10             	add    esp,0x10
c00089e0:	85 c0                	test   eax,eax
c00089e2:	0f 94 c0             	sete   al
c00089e5:	84 c0                	test   al,al
c00089e7:	74 07                	je     c00089f0 <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c00089e9:	b8 0c 7e 02 c0       	mov    eax,0xc0027e0c
c00089ee:	eb 2c                	jmp    c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089f0:	83 ec 08             	sub    esp,0x8
c00089f3:	68 bc 3a 02 c0       	push   0xc0023abc
c00089f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089fc:	e8 c3 7d ff ff       	call   c00007c4 <strcmp>
c0008a01:	83 c4 10             	add    esp,0x10
c0008a04:	85 c0                	test   eax,eax
c0008a06:	0f 94 c0             	sete   al
c0008a09:	84 c0                	test   al,al
c0008a0b:	74 07                	je     c0008a14 <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c0008a0d:	b8 0d 7e 02 c0       	mov    eax,0xc0027e0d
c0008a12:	eb 08                	jmp    c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008a14:	b8 00 00 00 00       	mov    eax,0x0
c0008a19:	8d 76 00             	lea    esi,[esi+0x0]
c0008a1c:	83 c4 0c             	add    esp,0xc
c0008a1f:	c3                   	ret    

c0008a20 <Computer::close(int, int, void*)>:
c0008a20:	57                   	push   edi
c0008a21:	56                   	push   esi
c0008a22:	53                   	push   ebx
c0008a23:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a27:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a2b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a2f:	83 ec 0c             	sub    esp,0xc
c0008a32:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c0008a38:	e8 c3 5b 00 00       	call   c000e600 <Device::closeAll()>
c0008a3d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c0008a43:	83 c4 10             	add    esp,0x10
c0008a46:	8b 10                	mov    edx,DWORD PTR [eax]
c0008a48:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0008a4c:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0008a54:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008a58:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008a5c:	5b                   	pop    ebx
c0008a5d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0008a60:	5e                   	pop    esi
c0008a61:	5f                   	pop    edi
c0008a62:	ff e0                	jmp    eax

c0008a64 <Krnl::firstTask()>:
c0008a64:	53                   	push   ebx
c0008a65:	83 ec 14             	sub    esp,0x14
c0008a68:	68 c9 3a 02 c0       	push   0xc0023ac9
c0008a6d:	e8 9f 12 00 00       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0008a72:	fb                   	sti    
c0008a73:	c7 04 24 e0 3a 02 c0 	mov    DWORD PTR [esp],0xc0023ae0
c0008a7a:	e8 92 12 00 00       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0008a7f:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c0008a86:	e8 2c 12 00 00       	call   c0009cb7 <malloc>
c0008a8b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008a92:	89 c3                	mov    ebx,eax
c0008a94:	ff 35 50 93 02 c0    	push   DWORD PTR ds:0xc0029350
c0008a9a:	68 f9 3a 02 c0       	push   0xc0023af9
c0008a9f:	6a 01                	push   0x1
c0008aa1:	50                   	push   eax
c0008aa2:	e8 b5 f4 00 00       	call   c0017f5c <Process::Process(bool, char const*, Process*, char**)>
c0008aa7:	83 c4 20             	add    esp,0x20
c0008aaa:	68 ff 00 00 00       	push   0xff
c0008aaf:	6a 00                	push   0x0
c0008ab1:	68 01 97 00 c0       	push   0xc0009701
c0008ab6:	53                   	push   ebx
c0008ab7:	e8 a8 f6 00 00       	call   c0018164 <Process::createThread(void (*)(void*), void*, int)>
c0008abc:	6a 7a                	push   0x7a
c0008abe:	6a 00                	push   0x0
c0008ac0:	68 a8 8b 01 c0       	push   0xc0018ba8
c0008ac5:	ff 35 50 93 02 c0    	push   DWORD PTR ds:0xc0029350
c0008acb:	e8 94 f6 00 00       	call   c0018164 <Process::createThread(void (*)(void*), void*, int)>
c0008ad0:	83 c4 14             	add    esp,0x14
c0008ad3:	a3 08 93 02 c0       	mov    ds:0xc0029308,eax
c0008ad8:	68 44 3d 02 c0       	push   0xc0023d44
c0008add:	c6 05 0d 7e 02 c0 01 	mov    BYTE PTR ds:0xc0027e0d,0x1
c0008ae4:	e8 28 12 00 00       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0008ae9:	e8 95 04 01 00       	call   c0018f83 <Vm::initialise8086()>
c0008aee:	e8 69 48 00 00       	call   c000d35c <Fs::initVFS()>
c0008af3:	c7 04 24 06 3b 02 c0 	mov    DWORD PTR [esp],0xc0023b06
c0008afa:	e8 12 12 00 00       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0008aff:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c0008b04:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0008b0a:	8b 10                	mov    edx,DWORD PTR [eax]
c0008b0c:	6a 00                	push   0x0
c0008b0e:	6a 00                	push   0x0
c0008b10:	6a 00                	push   0x0
c0008b12:	50                   	push   eax
c0008b13:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0008b16:	83 c4 14             	add    esp,0x14
c0008b19:	68 44 3d 02 c0       	push   0xc0023d44
c0008b1e:	e8 ee 11 00 00       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0008b23:	e8 aa dc 00 00       	call   c00167d2 <Sys::loadSyscalls()>
c0008b28:	e8 e7 c0 00 00       	call   c0014c14 <Krnl::loadSystemEnv()>
c0008b2d:	e8 39 c5 00 00       	call   c001506b <Krnl::setupPowerManager()>
c0008b32:	83 c4 0c             	add    esp,0xc
c0008b35:	6a 3a                	push   0x3a
c0008b37:	68 20 3b 02 c0       	push   0xc0023b20
c0008b3c:	68 29 3b 02 c0       	push   0xc0023b29
c0008b41:	e8 4f ca 00 00       	call   c0015595 <Reg::readIntWithDefault(char*, char*, int)>
c0008b46:	89 04 24             	mov    DWORD PTR [esp],eax
c0008b49:	e8 6a 53 00 00       	call   c000deb8 <User::loadClockSettings(int)>
c0008b4e:	c7 04 24 68 3d 02 c0 	mov    DWORD PTR [esp],0xc0023d68
c0008b55:	e8 b7 11 00 00       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0008b5a:	58                   	pop    eax
c0008b5b:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c0008b60:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c0008b66:	e8 55 5a 00 00       	call   c000e5c0 <Device::loadDriversForAll()>
c0008b6b:	c7 04 24 31 3b 02 c0 	mov    DWORD PTR [esp],0xc0023b31
c0008b72:	e8 9a 11 00 00       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0008b77:	e8 00 bc 00 00       	call   c001477c <Krnl::startCPUs()>
c0008b7c:	c7 04 24 4b 3b 02 c0 	mov    DWORD PTR [esp],0xc0023b4b
c0008b83:	e8 89 11 00 00       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0008b88:	5a                   	pop    edx
c0008b89:	8b 1d 08 7e 02 c0    	mov    ebx,DWORD PTR ds:0xc0027e08
c0008b8f:	59                   	pop    ecx
c0008b90:	6a 01                	push   0x1
c0008b92:	68 5c 3b 02 c0       	push   0xc0023b5c
c0008b97:	e8 06 ee 00 00       	call   c00179a2 <Thr::loadDLL(char const*, bool)>
c0008b9c:	5a                   	pop    edx
c0008b9d:	59                   	pop    ecx
c0008b9e:	53                   	push   ebx
c0008b9f:	50                   	push   eax
c0008ba0:	e8 2e f0 00 00       	call   c0017bd3 <Thr::executeDLL(unsigned long, void*)>
c0008ba5:	83 c4 10             	add    esp,0x10
c0008ba8:	83 ec 0c             	sub    esp,0xc
c0008bab:	6a 02                	push   0x2
c0008bad:	e8 c6 f9 00 00       	call   c0018578 <blockTask(TaskState)>
c0008bb2:	83 c4 10             	add    esp,0x10
c0008bb5:	eb f1                	jmp    c0008ba8 <Krnl::firstTask()+0x144>
c0008bb7:	90                   	nop

c0008bb8 <Computer::Computer()>:
c0008bb8:	83 ec 0c             	sub    esp,0xc
c0008bbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bbf:	83 ec 08             	sub    esp,0x8
c0008bc2:	68 78 3b 02 c0       	push   0xc0023b78
c0008bc7:	50                   	push   eax
c0008bc8:	e8 ad 5a 00 00       	call   c000e67a <Device::Device(char const*)>
c0008bcd:	83 c4 10             	add    esp,0x10
c0008bd0:	ba d8 3d 02 c0       	mov    edx,0xc0023dd8
c0008bd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bd9:	89 10                	mov    DWORD PTR [eax],edx
c0008bdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bdf:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008be9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bed:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0008bf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bfb:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0008c01:	83 ca 04             	or     edx,0x4
c0008c04:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0008c0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c0e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c14:	0f b6 d0             	movzx  edx,al
c0008c17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c1b:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0008c22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c26:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c2c:	0f b6 d0             	movzx  edx,al
c0008c2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c33:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0008c38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c3c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c42:	8d 50 01             	lea    edx,[eax+0x1]
c0008c45:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008c49:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008c4f:	0f b6 d0             	movzx  edx,al
c0008c52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c56:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008c5a:	83 e1 3f             	and    ecx,0x3f
c0008c5d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008c61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c65:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c6b:	0f b6 d0             	movzx  edx,al
c0008c6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c72:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c0008c79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c7d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c83:	0f b6 d0             	movzx  edx,al
c0008c86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8a:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008c8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c93:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c99:	8d 50 01             	lea    edx,[eax+0x1]
c0008c9c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008ca0:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008ca6:	0f b6 d0             	movzx  edx,al
c0008ca9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cad:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008cb1:	83 e1 3f             	and    ecx,0x3f
c0008cb4:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008cb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cbc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cc2:	0f b6 d0             	movzx  edx,al
c0008cc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc9:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c0008cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cda:	0f b6 d0             	movzx  edx,al
c0008cdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce1:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008ce6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cea:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cf0:	8d 50 01             	lea    edx,[eax+0x1]
c0008cf3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008cf7:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008cfd:	0f b6 d0             	movzx  edx,al
c0008d00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d04:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008d08:	83 e1 3f             	and    ecx,0x3f
c0008d0b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008d0f:	90                   	nop
c0008d10:	83 c4 0c             	add    esp,0xc
c0008d13:	c3                   	ret    

c0008d14 <Computer::setBootMessage(char const*)>:
c0008d14:	c3                   	ret    
c0008d15:	90                   	nop

c0008d16 <Computer::detectFeatures()>:
c0008d16:	55                   	push   ebp
c0008d17:	57                   	push   edi
c0008d18:	56                   	push   esi
c0008d19:	53                   	push   ebx
c0008d1a:	83 ec 1c             	sub    esp,0x1c
c0008d1d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008d21:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c0008d2b:	e8 e9 74 ff ff       	call   c0000219 <detectCPUID>
c0008d30:	85 c0                	test   eax,eax
c0008d32:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d38:	0f 95 c2             	setne  dl
c0008d3b:	83 e0 fd             	and    eax,0xfffffffd
c0008d3e:	d1 e2                	shl    edx,1
c0008d40:	09 d0                	or     eax,edx
c0008d42:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d48:	a8 02                	test   al,0x2
c0008d4a:	75 46                	jne    c0008d92 <Computer::detectFeatures()+0x7c>
c0008d4c:	f6 05 21 7e 02 c0 04 	test   BYTE PTR ds:0xc0027e21,0x4
c0008d53:	74 07                	je     c0008d5c <Computer::detectFeatures()+0x46>
c0008d55:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c0008d5c:	e8 c5 95 01 00       	call   c0022326 <x87Detect>
c0008d61:	83 e0 01             	and    eax,0x1
c0008d64:	c1 e0 04             	shl    eax,0x4
c0008d67:	88 c2                	mov    dl,al
c0008d69:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d6f:	83 e0 ef             	and    eax,0xffffffef
c0008d72:	09 d0                	or     eax,edx
c0008d74:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d7a:	a8 10                	test   al,0x10
c0008d7c:	0f 85 2a 01 00 00    	jne    c0008eac <Computer::detectFeatures()+0x196>
c0008d82:	84 c0                	test   al,al
c0008d84:	0f 88 45 01 00 00    	js     c0008ecf <Computer::detectFeatures()+0x1b9>
c0008d8a:	83 c4 1c             	add    esp,0x1c
c0008d8d:	5b                   	pop    ebx
c0008d8e:	5e                   	pop    esi
c0008d8f:	5f                   	pop    edi
c0008d90:	5d                   	pop    ebp
c0008d91:	c3                   	ret    
c0008d92:	83 ec 0c             	sub    esp,0xc
c0008d95:	6a 20                	push   0x20
c0008d97:	e8 a2 a5 00 00       	call   c001333e <CPU::cpuidCheckEDX(unsigned int)>
c0008d9c:	83 e0 01             	and    eax,0x1
c0008d9f:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0008da6:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008dac:	83 e0 f7             	and    eax,0xfffffff7
c0008daf:	09 d0                	or     eax,edx
c0008db1:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008db7:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0008dbe:	e8 7b a5 00 00       	call   c001333e <CPU::cpuidCheckEDX(unsigned int)>
c0008dc3:	83 e0 01             	and    eax,0x1
c0008dc6:	88 c2                	mov    dl,al
c0008dc8:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008dce:	83 e0 fe             	and    eax,0xfffffffe
c0008dd1:	09 d0                	or     eax,edx
c0008dd3:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008dd9:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0008de0:	e8 59 a5 00 00       	call   c001333e <CPU::cpuidCheckEDX(unsigned int)>
c0008de5:	c1 e0 07             	shl    eax,0x7
c0008de8:	88 c2                	mov    dl,al
c0008dea:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008df0:	83 e0 7f             	and    eax,0x7f
c0008df3:	09 d0                	or     eax,edx
c0008df5:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008dfb:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0008e02:	e8 37 a5 00 00       	call   c001333e <CPU::cpuidCheckEDX(unsigned int)>
c0008e07:	83 c4 10             	add    esp,0x10
c0008e0a:	83 e0 01             	and    eax,0x1
c0008e0d:	c1 e0 05             	shl    eax,0x5
c0008e10:	88 c2                	mov    dl,al
c0008e12:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e18:	83 e0 df             	and    eax,0xffffffdf
c0008e1b:	09 d0                	or     eax,edx
c0008e1d:	f7 05 20 7e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0027e20,0x401
c0008e27:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e2d:	0f 84 c2 00 00 00    	je     c0008ef5 <Computer::detectFeatures()+0x1df>
c0008e33:	83 e0 fe             	and    eax,0xfffffffe
c0008e36:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e3c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e42:	88 c2                	mov    dl,al
c0008e44:	83 e2 09             	and    edx,0x9
c0008e47:	fe ca                	dec    dl
c0008e49:	75 09                	jne    c0008e54 <Computer::detectFeatures()+0x13e>
c0008e4b:	83 e0 fe             	and    eax,0xfffffffe
c0008e4e:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e54:	83 ec 0c             	sub    esp,0xc
c0008e57:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008e5b:	50                   	push   eax
c0008e5c:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0008e60:	55                   	push   ebp
c0008e61:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0008e65:	57                   	push   edi
c0008e66:	8d 74 24 18          	lea    esi,[esp+0x18]
c0008e6a:	56                   	push   esi
c0008e6b:	68 00 00 00 80       	push   0x80000000
c0008e70:	e8 45 a4 00 00       	call   c00132ba <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008e75:	83 c4 20             	add    esp,0x20
c0008e78:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0008e7f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0008e83:	0f 86 c3 fe ff ff    	jbe    c0008d4c <Computer::detectFeatures()+0x36>
c0008e89:	83 ec 0c             	sub    esp,0xc
c0008e8c:	50                   	push   eax
c0008e8d:	55                   	push   ebp
c0008e8e:	57                   	push   edi
c0008e8f:	56                   	push   esi
c0008e90:	68 01 00 00 80       	push   0x80000001
c0008e95:	e8 20 a4 00 00       	call   c00132ba <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008e9a:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c0008ea4:	83 c4 20             	add    esp,0x20
c0008ea7:	e9 a0 fe ff ff       	jmp    c0008d4c <Computer::detectFeatures()+0x36>
c0008eac:	e8 2f 94 01 00       	call   c00222e0 <absolutelyNoChanceInHell>
c0008eb1:	88 c2                	mov    dl,al
c0008eb3:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008eb9:	c1 e2 07             	shl    edx,0x7
c0008ebc:	83 e0 7f             	and    eax,0x7f
c0008ebf:	09 d0                	or     eax,edx
c0008ec1:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008ec7:	84 c0                	test   al,al
c0008ec9:	0f 89 bb fe ff ff    	jns    c0008d8a <Computer::detectFeatures()+0x74>
c0008ecf:	e8 6c 93 01 00       	call   c0022240 <avxDetect>
c0008ed4:	83 e0 01             	and    eax,0x1
c0008ed7:	c1 e0 05             	shl    eax,0x5
c0008eda:	88 c2                	mov    dl,al
c0008edc:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008ee2:	83 e0 df             	and    eax,0xffffffdf
c0008ee5:	09 d0                	or     eax,edx
c0008ee7:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008eed:	83 c4 1c             	add    esp,0x1c
c0008ef0:	5b                   	pop    ebx
c0008ef1:	5e                   	pop    esi
c0008ef2:	5f                   	pop    edi
c0008ef3:	5d                   	pop    ebp
c0008ef4:	c3                   	ret    
c0008ef5:	83 ec 0c             	sub    esp,0xc
c0008ef8:	68 00 02 00 00       	push   0x200
c0008efd:	e8 3c a4 00 00       	call   c001333e <CPU::cpuidCheckEDX(unsigned int)>
c0008f02:	83 c4 10             	add    esp,0x10
c0008f05:	83 e0 01             	and    eax,0x1
c0008f08:	88 c2                	mov    dl,al
c0008f0a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008f10:	83 e0 fe             	and    eax,0xfffffffe
c0008f13:	09 d0                	or     eax,edx
c0008f15:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008f1b:	e9 1c ff ff ff       	jmp    c0008e3c <Computer::detectFeatures()+0x126>

c0008f20 <Computer::displayFeatures()>:
c0008f20:	53                   	push   ebx
c0008f21:	83 ec 14             	sub    esp,0x14
c0008f24:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008f28:	68 88 3b 02 c0       	push   0xc0023b88
c0008f2d:	e8 93 40 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0008f32:	83 c4 10             	add    esp,0x10
c0008f35:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c0008f3c:	0f 85 73 02 00 00    	jne    c00091b5 <Computer::displayFeatures()+0x295>
c0008f42:	b8 85 3b 02 c0       	mov    eax,0xc0023b85
c0008f47:	83 ec 08             	sub    esp,0x8
c0008f4a:	50                   	push   eax
c0008f4b:	68 9b 3b 02 c0       	push   0xc0023b9b
c0008f50:	e8 70 40 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0008f55:	83 c4 10             	add    esp,0x10
c0008f58:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c0008f5f:	0f 85 8c 02 00 00    	jne    c00091f1 <Computer::displayFeatures()+0x2d1>
c0008f65:	b8 85 3b 02 c0       	mov    eax,0xc0023b85
c0008f6a:	83 ec 08             	sub    esp,0x8
c0008f6d:	50                   	push   eax
c0008f6e:	68 ac 3b 02 c0       	push   0xc0023bac
c0008f73:	e8 4d 40 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0008f78:	83 c4 10             	add    esp,0x10
c0008f7b:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c0008f82:	0f 85 5f 02 00 00    	jne    c00091e7 <Computer::displayFeatures()+0x2c7>
c0008f88:	b8 85 3b 02 c0       	mov    eax,0xc0023b85
c0008f8d:	83 ec 08             	sub    esp,0x8
c0008f90:	50                   	push   eax
c0008f91:	68 bd 3b 02 c0       	push   0xc0023bbd
c0008f96:	e8 2a 40 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0008f9b:	83 c4 10             	add    esp,0x10
c0008f9e:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c0008fa5:	0f 85 32 02 00 00    	jne    c00091dd <Computer::displayFeatures()+0x2bd>
c0008fab:	b8 85 3b 02 c0       	mov    eax,0xc0023b85
c0008fb0:	83 ec 08             	sub    esp,0x8
c0008fb3:	50                   	push   eax
c0008fb4:	68 ce 3b 02 c0       	push   0xc0023bce
c0008fb9:	e8 07 40 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0008fbe:	83 c4 10             	add    esp,0x10
c0008fc1:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c0008fc8:	0f 85 05 02 00 00    	jne    c00091d3 <Computer::displayFeatures()+0x2b3>
c0008fce:	b8 85 3b 02 c0       	mov    eax,0xc0023b85
c0008fd3:	83 ec 08             	sub    esp,0x8
c0008fd6:	50                   	push   eax
c0008fd7:	68 df 3b 02 c0       	push   0xc0023bdf
c0008fdc:	e8 e4 3f 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0008fe1:	83 c4 10             	add    esp,0x10
c0008fe4:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c0008feb:	0f 85 d8 01 00 00    	jne    c00091c9 <Computer::displayFeatures()+0x2a9>
c0008ff1:	b8 85 3b 02 c0       	mov    eax,0xc0023b85
c0008ff6:	83 ec 08             	sub    esp,0x8
c0008ff9:	50                   	push   eax
c0008ffa:	68 f0 3b 02 c0       	push   0xc0023bf0
c0008fff:	e8 c1 3f 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0009004:	83 c4 10             	add    esp,0x10
c0009007:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000900e:	0f 85 ab 01 00 00    	jne    c00091bf <Computer::displayFeatures()+0x29f>
c0009014:	b8 85 3b 02 c0       	mov    eax,0xc0023b85
c0009019:	83 ec 08             	sub    esp,0x8
c000901c:	50                   	push   eax
c000901d:	68 01 3c 02 c0       	push   0xc0023c01
c0009022:	e8 9e 3f 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0009027:	83 c4 10             	add    esp,0x10
c000902a:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c0009031:	0f 88 1b 02 00 00    	js     c0009252 <Computer::displayFeatures()+0x332>
c0009037:	b8 85 3b 02 c0       	mov    eax,0xc0023b85
c000903c:	83 ec 08             	sub    esp,0x8
c000903f:	50                   	push   eax
c0009040:	68 12 3c 02 c0       	push   0xc0023c12
c0009045:	e8 7b 3f 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000904a:	83 c4 10             	add    esp,0x10
c000904d:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c0009054:	0f 85 a1 01 00 00    	jne    c00091fb <Computer::displayFeatures()+0x2db>
c000905a:	b8 85 3b 02 c0       	mov    eax,0xc0023b85
c000905f:	83 ec 08             	sub    esp,0x8
c0009062:	50                   	push   eax
c0009063:	68 23 3c 02 c0       	push   0xc0023c23
c0009068:	e8 58 3f 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000906d:	83 c4 10             	add    esp,0x10
c0009070:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c0009077:	0f 85 cb 01 00 00    	jne    c0009248 <Computer::displayFeatures()+0x328>
c000907d:	b8 85 3b 02 c0       	mov    eax,0xc0023b85
c0009082:	83 ec 08             	sub    esp,0x8
c0009085:	50                   	push   eax
c0009086:	68 34 3c 02 c0       	push   0xc0023c34
c000908b:	e8 35 3f 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0009090:	83 c4 10             	add    esp,0x10
c0009093:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000909a:	0f 85 9e 01 00 00    	jne    c000923e <Computer::displayFeatures()+0x31e>
c00090a0:	b8 85 3b 02 c0       	mov    eax,0xc0023b85
c00090a5:	83 ec 08             	sub    esp,0x8
c00090a8:	50                   	push   eax
c00090a9:	68 45 3c 02 c0       	push   0xc0023c45
c00090ae:	e8 12 3f 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00090b3:	83 c4 10             	add    esp,0x10
c00090b6:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c00090bd:	0f 85 71 01 00 00    	jne    c0009234 <Computer::displayFeatures()+0x314>
c00090c3:	b8 85 3b 02 c0       	mov    eax,0xc0023b85
c00090c8:	83 ec 08             	sub    esp,0x8
c00090cb:	50                   	push   eax
c00090cc:	68 56 3c 02 c0       	push   0xc0023c56
c00090d1:	e8 ef 3e 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00090d6:	83 c4 10             	add    esp,0x10
c00090d9:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c00090e0:	0f 85 44 01 00 00    	jne    c000922a <Computer::displayFeatures()+0x30a>
c00090e6:	b8 85 3b 02 c0       	mov    eax,0xc0023b85
c00090eb:	83 ec 08             	sub    esp,0x8
c00090ee:	50                   	push   eax
c00090ef:	68 67 3c 02 c0       	push   0xc0023c67
c00090f4:	e8 cc 3e 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00090f9:	83 c4 10             	add    esp,0x10
c00090fc:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c0009103:	0f 85 17 01 00 00    	jne    c0009220 <Computer::displayFeatures()+0x300>
c0009109:	b8 85 3b 02 c0       	mov    eax,0xc0023b85
c000910e:	83 ec 08             	sub    esp,0x8
c0009111:	50                   	push   eax
c0009112:	68 78 3c 02 c0       	push   0xc0023c78
c0009117:	e8 a9 3e 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000911c:	83 c4 10             	add    esp,0x10
c000911f:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c0009126:	0f 85 ea 00 00 00    	jne    c0009216 <Computer::displayFeatures()+0x2f6>
c000912c:	b8 85 3b 02 c0       	mov    eax,0xc0023b85
c0009131:	83 ec 08             	sub    esp,0x8
c0009134:	50                   	push   eax
c0009135:	68 89 3c 02 c0       	push   0xc0023c89
c000913a:	e8 86 3e 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000913f:	83 c4 10             	add    esp,0x10
c0009142:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c0009149:	0f 88 0d 01 00 00    	js     c000925c <Computer::displayFeatures()+0x33c>
c000914f:	b8 85 3b 02 c0       	mov    eax,0xc0023b85
c0009154:	83 ec 08             	sub    esp,0x8
c0009157:	50                   	push   eax
c0009158:	68 9a 3c 02 c0       	push   0xc0023c9a
c000915d:	e8 63 3e 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0009162:	83 c4 10             	add    esp,0x10
c0009165:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000916c:	0f 85 9a 00 00 00    	jne    c000920c <Computer::displayFeatures()+0x2ec>
c0009172:	b8 85 3b 02 c0       	mov    eax,0xc0023b85
c0009177:	83 ec 08             	sub    esp,0x8
c000917a:	50                   	push   eax
c000917b:	68 ab 3c 02 c0       	push   0xc0023cab
c0009180:	e8 40 3e 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0009185:	83 c4 10             	add    esp,0x10
c0009188:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000918f:	75 74                	jne    c0009205 <Computer::displayFeatures()+0x2e5>
c0009191:	b8 85 3b 02 c0       	mov    eax,0xc0023b85
c0009196:	83 ec 08             	sub    esp,0x8
c0009199:	50                   	push   eax
c000919a:	68 bc 3c 02 c0       	push   0xc0023cbc
c000919f:	e8 21 3e 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00091a4:	c7 44 24 20 a7 5a 02 c0 	mov    DWORD PTR [esp+0x20],0xc0025aa7
c00091ac:	83 c4 18             	add    esp,0x18
c00091af:	5b                   	pop    ebx
c00091b0:	e9 10 3e 00 00       	jmp    c000cfc5 <Dbg::kprintf(char const*, ...)>
c00091b5:	b8 81 3b 02 c0       	mov    eax,0xc0023b81
c00091ba:	e9 88 fd ff ff       	jmp    c0008f47 <Computer::displayFeatures()+0x27>
c00091bf:	b8 81 3b 02 c0       	mov    eax,0xc0023b81
c00091c4:	e9 50 fe ff ff       	jmp    c0009019 <Computer::displayFeatures()+0xf9>
c00091c9:	b8 81 3b 02 c0       	mov    eax,0xc0023b81
c00091ce:	e9 23 fe ff ff       	jmp    c0008ff6 <Computer::displayFeatures()+0xd6>
c00091d3:	b8 81 3b 02 c0       	mov    eax,0xc0023b81
c00091d8:	e9 f6 fd ff ff       	jmp    c0008fd3 <Computer::displayFeatures()+0xb3>
c00091dd:	b8 81 3b 02 c0       	mov    eax,0xc0023b81
c00091e2:	e9 c9 fd ff ff       	jmp    c0008fb0 <Computer::displayFeatures()+0x90>
c00091e7:	b8 81 3b 02 c0       	mov    eax,0xc0023b81
c00091ec:	e9 9c fd ff ff       	jmp    c0008f8d <Computer::displayFeatures()+0x6d>
c00091f1:	b8 81 3b 02 c0       	mov    eax,0xc0023b81
c00091f6:	e9 6f fd ff ff       	jmp    c0008f6a <Computer::displayFeatures()+0x4a>
c00091fb:	b8 81 3b 02 c0       	mov    eax,0xc0023b81
c0009200:	e9 5a fe ff ff       	jmp    c000905f <Computer::displayFeatures()+0x13f>
c0009205:	b8 81 3b 02 c0       	mov    eax,0xc0023b81
c000920a:	eb 8a                	jmp    c0009196 <Computer::displayFeatures()+0x276>
c000920c:	b8 81 3b 02 c0       	mov    eax,0xc0023b81
c0009211:	e9 61 ff ff ff       	jmp    c0009177 <Computer::displayFeatures()+0x257>
c0009216:	b8 81 3b 02 c0       	mov    eax,0xc0023b81
c000921b:	e9 11 ff ff ff       	jmp    c0009131 <Computer::displayFeatures()+0x211>
c0009220:	b8 81 3b 02 c0       	mov    eax,0xc0023b81
c0009225:	e9 e4 fe ff ff       	jmp    c000910e <Computer::displayFeatures()+0x1ee>
c000922a:	b8 81 3b 02 c0       	mov    eax,0xc0023b81
c000922f:	e9 b7 fe ff ff       	jmp    c00090eb <Computer::displayFeatures()+0x1cb>
c0009234:	b8 81 3b 02 c0       	mov    eax,0xc0023b81
c0009239:	e9 8a fe ff ff       	jmp    c00090c8 <Computer::displayFeatures()+0x1a8>
c000923e:	b8 81 3b 02 c0       	mov    eax,0xc0023b81
c0009243:	e9 5d fe ff ff       	jmp    c00090a5 <Computer::displayFeatures()+0x185>
c0009248:	b8 81 3b 02 c0       	mov    eax,0xc0023b81
c000924d:	e9 30 fe ff ff       	jmp    c0009082 <Computer::displayFeatures()+0x162>
c0009252:	b8 81 3b 02 c0       	mov    eax,0xc0023b81
c0009257:	e9 e0 fd ff ff       	jmp    c000903c <Computer::displayFeatures()+0x11c>
c000925c:	b8 81 3b 02 c0       	mov    eax,0xc0023b81
c0009261:	e9 ee fe ff ff       	jmp    c0009154 <Computer::displayFeatures()+0x234>

c0009266 <Computer::rdmsr(unsigned int)>:
c0009266:	83 ec 0c             	sub    esp,0xc
c0009269:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000926d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0009274:	74 0a                	je     c0009280 <Computer::rdmsr(unsigned int)+0x1a>
c0009276:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000927a:	0f 32                	rdmsr  
c000927c:	83 c4 0c             	add    esp,0xc
c000927f:	c3                   	ret    
c0009280:	83 ec 0c             	sub    esp,0xc
c0009283:	68 cd 3c 02 c0       	push   0xc0023ccd
c0009288:	e8 90 ba 00 00       	call   c0014d1d <Krnl::panic(char const*)>
c000928d:	83 c4 10             	add    esp,0x10
c0009290:	eb e4                	jmp    c0009276 <Computer::rdmsr(unsigned int)+0x10>

c0009292 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0009292:	57                   	push   edi
c0009293:	56                   	push   esi
c0009294:	52                   	push   edx
c0009295:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009299:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000929d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00092a1:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00092a8:	74 0e                	je     c00092b8 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c00092aa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00092ae:	89 f0                	mov    eax,esi
c00092b0:	89 fa                	mov    edx,edi
c00092b2:	0f 30                	wrmsr  
c00092b4:	58                   	pop    eax
c00092b5:	5e                   	pop    esi
c00092b6:	5f                   	pop    edi
c00092b7:	c3                   	ret    
c00092b8:	83 ec 0c             	sub    esp,0xc
c00092bb:	68 d3 3c 02 c0       	push   0xc0023cd3
c00092c0:	e8 58 ba 00 00       	call   c0014d1d <Krnl::panic(char const*)>
c00092c5:	83 c4 10             	add    esp,0x10
c00092c8:	eb e0                	jmp    c00092aa <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c00092ca <Computer::shutdown()>:
c00092ca:	83 ec 0c             	sub    esp,0xc
c00092cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00092d1:	8b 10                	mov    edx,DWORD PTR [eax]
c00092d3:	6a 00                	push   0x0
c00092d5:	6a 00                	push   0x0
c00092d7:	6a 00                	push   0x0
c00092d9:	50                   	push   eax
c00092da:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00092dd:	83 c4 1c             	add    esp,0x1c
c00092e0:	c3                   	ret    
c00092e1:	90                   	nop

c00092e2 <Computer::restart()>:
c00092e2:	83 ec 0c             	sub    esp,0xc
c00092e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00092e9:	8b 10                	mov    edx,DWORD PTR [eax]
c00092eb:	6a 00                	push   0x0
c00092ed:	6a 00                	push   0x0
c00092ef:	6a 01                	push   0x1
c00092f1:	50                   	push   eax
c00092f2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00092f5:	83 c4 1c             	add    esp,0x1c
c00092f8:	c3                   	ret    
c00092f9:	90                   	nop

c00092fa <Computer::sleep()>:
c00092fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092fe:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0009304:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009308:	e9 ff 95 00 00       	jmp    c001290c <ACPI::sleep()>
c000930d:	90                   	nop

c000930e <Computer::nmiEnabled()>:
c000930e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009312:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0009318:	c3                   	ret    
c0009319:	90                   	nop

c000931a <Computer::readCMOS(unsigned char)>:
c000931a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000931e:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0009325:	19 c0                	sbb    eax,eax
c0009327:	83 e0 80             	and    eax,0xffffff80
c000932a:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000932e:	e6 70                	out    0x70,al
c0009330:	e4 71                	in     al,0x71
c0009332:	c3                   	ret    
c0009333:	90                   	nop

c0009334 <Computer::enableNMI(bool)>:
c0009334:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009338:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000933c:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0009342:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000934a:	eb ce                	jmp    c000931a <Computer::readCMOS(unsigned char)>

c000934c <Computer::open(int, int, void*)>:
c000934c:	56                   	push   esi
c000934d:	53                   	push   ebx
c000934e:	83 ec 10             	sub    esp,0x10
c0009351:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009355:	68 88 3d 02 c0       	push   0xc0023d88
c000935a:	e8 b2 09 00 00       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c000935f:	f6 05 20 7e 02 c0 04 	test   BYTE PTR ds:0xc0027e20,0x4
c0009366:	c7 04 24 d9 3c 02 c0 	mov    DWORD PTR [esp],0xc0023cd9
c000936d:	0f 94 05 e0 71 02 c0 	sete   BYTE PTR ds:0xc00271e0
c0009374:	e8 98 09 00 00       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0009379:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0009380:	e8 32 09 00 00       	call   c0009cb7 <malloc>
c0009385:	89 04 24             	mov    DWORD PTR [esp],eax
c0009388:	89 c6                	mov    esi,eax
c000938a:	e8 35 8e 00 00       	call   c00121c4 <ACPI::ACPI()>
c000938f:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c0009395:	58                   	pop    eax
c0009396:	5a                   	pop    edx
c0009397:	56                   	push   esi
c0009398:	53                   	push   ebx
c0009399:	e8 d8 50 00 00       	call   c000e476 <Device::addChild(Device*)>
c000939e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00093a1:	e8 70 f9 ff ff       	call   c0008d16 <Computer::detectFeatures()>
c00093a6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00093a9:	e8 72 fb ff ff       	call   c0008f20 <Computer::displayFeatures()>
c00093ae:	59                   	pop    ecx
c00093af:	5e                   	pop    esi
c00093b0:	6a 01                	push   0x1
c00093b2:	53                   	push   ebx
c00093b3:	e8 7c ff ff ff       	call   c0009334 <Computer::enableNMI(bool)>
c00093b8:	c7 04 24 31 3b 02 c0 	mov    DWORD PTR [esp],0xc0023b31
c00093bf:	e8 4d 09 00 00       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c00093c4:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c00093cb:	e8 e7 08 00 00       	call   c0009cb7 <malloc>
c00093d0:	89 c6                	mov    esi,eax
c00093d2:	89 04 24             	mov    DWORD PTR [esp],eax
c00093d5:	e8 1c a0 00 00       	call   c00133f6 <CPU::CPU()>
c00093da:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c00093e0:	58                   	pop    eax
c00093e1:	5a                   	pop    edx
c00093e2:	56                   	push   esi
c00093e3:	53                   	push   ebx
c00093e4:	e8 8d 50 00 00       	call   c000e476 <Device::addChild(Device*)>
c00093e9:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00093ef:	8b 10                	mov    edx,DWORD PTR [eax]
c00093f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00093f5:	6a 00                	push   0x0
c00093f7:	6a 00                	push   0x0
c00093f9:	50                   	push   eax
c00093fa:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00093fd:	83 c4 14             	add    esp,0x14
c0009400:	68 ac 3d 02 c0       	push   0xc0023dac
c0009405:	e8 07 09 00 00       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c000940a:	e8 ef 16 01 00       	call   c001aafe <Hal::initialiseCoprocessor()>
c000940f:	c7 04 24 f1 3c 02 c0 	mov    DWORD PTR [esp],0xc0023cf1
c0009416:	e8 f6 08 00 00       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c000941b:	c7 04 24 64 8a 00 c0 	mov    DWORD PTR [esp],0xc0008a64
c0009422:	e8 51 ee 00 00       	call   c0018278 <setupMultitasking(void (*)())>
c0009427:	83 c4 14             	add    esp,0x14
c000942a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000942f:	5b                   	pop    ebx
c0009430:	5e                   	pop    esi
c0009431:	c3                   	ret    

c0009432 <Computer::disableNMI()>:
c0009432:	6a 00                	push   0x0
c0009434:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0009438:	e8 f7 fe ff ff       	call   c0009334 <Computer::enableNMI(bool)>
c000943d:	58                   	pop    eax
c000943e:	5a                   	pop    edx
c000943f:	c3                   	ret    

c0009440 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0009440:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009444:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000944b:	19 c0                	sbb    eax,eax
c000944d:	83 e0 80             	and    eax,0xffffff80
c0009450:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0009454:	e6 70                	out    0x70,al
c0009456:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000945a:	e6 71                	out    0x71,al
c000945c:	c3                   	ret    
c000945d:	90                   	nop

c000945e <Computer::handleNMI()>:
c000945e:	56                   	push   esi
c000945f:	53                   	push   ebx
c0009460:	83 ec 10             	sub    esp,0x10
c0009463:	e4 92                	in     al,0x92
c0009465:	89 c6                	mov    esi,eax
c0009467:	e4 61                	in     al,0x61
c0009469:	68 0c 3d 02 c0       	push   0xc0023d0c
c000946e:	88 c3                	mov    bl,al
c0009470:	e8 50 3b 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0009475:	83 c4 10             	add    esp,0x10
c0009478:	83 e6 10             	and    esi,0x10
c000947b:	75 0d                	jne    c000948a <Computer::handleNMI()+0x2c>
c000947d:	f6 c3 40             	test   bl,0x40
c0009480:	75 1d                	jne    c000949f <Computer::handleNMI()+0x41>
c0009482:	84 db                	test   bl,bl
c0009484:	78 2d                	js     c00094b3 <Computer::handleNMI()+0x55>
c0009486:	58                   	pop    eax
c0009487:	5b                   	pop    ebx
c0009488:	5e                   	pop    esi
c0009489:	c3                   	ret    
c000948a:	83 ec 0c             	sub    esp,0xc
c000948d:	68 1d 3d 02 c0       	push   0xc0023d1d
c0009492:	e8 86 b8 00 00       	call   c0014d1d <Krnl::panic(char const*)>
c0009497:	83 c4 10             	add    esp,0x10
c000949a:	f6 c3 40             	test   bl,0x40
c000949d:	74 e3                	je     c0009482 <Computer::handleNMI()+0x24>
c000949f:	83 ec 0c             	sub    esp,0xc
c00094a2:	68 2a 3d 02 c0       	push   0xc0023d2a
c00094a7:	e8 71 b8 00 00       	call   c0014d1d <Krnl::panic(char const*)>
c00094ac:	83 c4 10             	add    esp,0x10
c00094af:	84 db                	test   bl,bl
c00094b1:	79 d3                	jns    c0009486 <Computer::handleNMI()+0x28>
c00094b3:	c7 44 24 10 34 3d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023d34
c00094bb:	5a                   	pop    edx
c00094bc:	5b                   	pop    ebx
c00094bd:	5e                   	pop    esi
c00094be:	e9 5a b8 00 00       	jmp    c0014d1d <Krnl::panic(char const*)>
c00094c3:	90                   	nop

c00094c4 <Computer::setDiskActivityLight(int, bool)>:
c00094c4:	56                   	push   esi
c00094c5:	53                   	push   ebx
c00094c6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00094ca:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00094cf:	77 1b                	ja     c00094ec <Computer::setDiskActivityLight(int, bool)+0x28>
c00094d1:	e4 92                	in     al,0x92
c00094d3:	bb 40 00 00 00       	mov    ebx,0x40
c00094d8:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00094dc:	89 da                	mov    edx,ebx
c00094de:	d3 e2                	shl    edx,cl
c00094e0:	89 f1                	mov    ecx,esi
c00094e2:	f7 d2                	not    edx
c00094e4:	d3 e3                	shl    ebx,cl
c00094e6:	21 d0                	and    eax,edx
c00094e8:	09 d8                	or     eax,ebx
c00094ea:	e6 92                	out    0x92,al
c00094ec:	5b                   	pop    ebx
c00094ed:	5e                   	pop    esi
c00094ee:	c3                   	ret    
c00094ef:	90                   	nop

c00094f0 <GDTEntry::setBase(unsigned int)>:
c00094f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094f4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00094f8:	89 c1                	mov    ecx,eax
c00094fa:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00094fe:	c1 e9 10             	shr    ecx,0x10
c0009501:	c1 e8 18             	shr    eax,0x18
c0009504:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0009507:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000950a:	c3                   	ret    
c000950b:	90                   	nop

c000950c <GDTEntry::setLimit(unsigned int)>:
c000950c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009510:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009514:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0009517:	66 89 01             	mov    WORD PTR [ecx],ax
c000951a:	83 e2 f0             	and    edx,0xfffffff0
c000951d:	c1 e8 10             	shr    eax,0x10
c0009520:	83 e0 0f             	and    eax,0xf
c0009523:	09 d0                	or     eax,edx
c0009525:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0009528:	c3                   	ret    
c0009529:	90                   	nop

c000952a <GDT::GDT()>:
c000952a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000952e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009534:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009538:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000953e:	90                   	nop
c000953f:	c3                   	ret    

c0009540 <GDT::addEntry(GDTEntry)>:
c0009540:	53                   	push   ebx
c0009541:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009545:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009549:	8b 02                	mov    eax,DWORD PTR [edx]
c000954b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000954f:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0009553:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0009557:	8d 48 01             	lea    ecx,[eax+0x1]
c000955a:	c1 e0 03             	shl    eax,0x3
c000955d:	89 0a                	mov    DWORD PTR [edx],ecx
c000955f:	5b                   	pop    ebx
c0009560:	c3                   	ret    
c0009561:	90                   	nop

c0009562 <GDT::getNumberOfEntries()>:
c0009562:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009566:	8b 00                	mov    eax,DWORD PTR [eax]
c0009568:	c3                   	ret    
c0009569:	90                   	nop

c000956a <GDT::flush()>:
c000956a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000956e:	8b 10                	mov    edx,DWORD PTR [eax]
c0009570:	83 c0 04             	add    eax,0x4
c0009573:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000957a:	a3 12 7e 02 c0       	mov    ds:0xc0027e12,eax
c000957f:	66 89 15 10 7e 02 c0 	mov    WORD PTR ds:0xc0027e10,dx
c0009586:	e9 f2 6d ff ff       	jmp    c000037d <loadGDT>
c000958b:	90                   	nop

c000958c <GDT::setup()>:
c000958c:	57                   	push   edi
c000958d:	56                   	push   esi
c000958e:	53                   	push   ebx
c000958f:	83 ec 40             	sub    esp,0x40
c0009592:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0009596:	6a 00                	push   0x0
c0009598:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000959c:	56                   	push   esi
c000959d:	e8 4e ff ff ff       	call   c00094f0 <GDTEntry::setBase(unsigned int)>
c00095a2:	6a 00                	push   0x0
c00095a4:	56                   	push   esi
c00095a5:	e8 62 ff ff ff       	call   c000950c <GDTEntry::setLimit(unsigned int)>
c00095aa:	81 64 24 3c ff 00 0f ff 	and    DWORD PTR [esp+0x3c],0xff0f00ff
c00095b2:	6a 00                	push   0x0
c00095b4:	8d 74 24 44          	lea    esi,[esp+0x44]
c00095b8:	56                   	push   esi
c00095b9:	e8 32 ff ff ff       	call   c00094f0 <GDTEntry::setBase(unsigned int)>
c00095be:	68 ff ff ff 00       	push   0xffffff
c00095c3:	56                   	push   esi
c00095c4:	e8 43 ff ff ff       	call   c000950c <GDTEntry::setLimit(unsigned int)>
c00095c9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00095cd:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00095d2:	0d 00 9a c0 00       	or     eax,0xc09a00
c00095d7:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00095db:	83 c4 20             	add    esp,0x20
c00095de:	6a 00                	push   0x0
c00095e0:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00095e4:	56                   	push   esi
c00095e5:	e8 06 ff ff ff       	call   c00094f0 <GDTEntry::setBase(unsigned int)>
c00095ea:	68 ff ff ff 00       	push   0xffffff
c00095ef:	56                   	push   esi
c00095f0:	e8 17 ff ff ff       	call   c000950c <GDTEntry::setLimit(unsigned int)>
c00095f5:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00095f9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00095fd:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0009601:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0009605:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009609:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000960e:	0d 00 92 c0 00       	or     eax,0xc09200
c0009613:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0009617:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000961b:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000961f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009623:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009627:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000962b:	89 fa                	mov    edx,edi
c000962d:	80 cc 60             	or     ah,0x60
c0009630:	81 e2 00 00 3f 00    	and    edx,0x3f0000
c0009636:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000963a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000963e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009642:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0009646:	80 cc 60             	or     ah,0x60
c0009649:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000964d:	89 f8                	mov    eax,edi
c000964f:	25 ff ff 00 ff       	and    eax,0xff00ffff
c0009654:	09 d0                	or     eax,edx
c0009656:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000965a:	89 c7                	mov    edi,eax
c000965c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009660:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0009664:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009668:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000966c:	81 e2 00 00 3f 00    	and    edx,0x3f0000
c0009672:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009676:	25 ff ff 00 ff       	and    eax,0xff00ffff
c000967b:	09 d0                	or     eax,edx
c000967d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009681:	83 c4 0c             	add    esp,0xc
c0009684:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009688:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000968c:	53                   	push   ebx
c000968d:	e8 ae fe ff ff       	call   c0009540 <GDT::addEntry(GDTEntry)>
c0009692:	83 c4 0c             	add    esp,0xc
c0009695:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0009699:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000969d:	53                   	push   ebx
c000969e:	e8 9d fe ff ff       	call   c0009540 <GDT::addEntry(GDTEntry)>
c00096a3:	83 c4 0c             	add    esp,0xc
c00096a6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00096aa:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00096ae:	53                   	push   ebx
c00096af:	e8 8c fe ff ff       	call   c0009540 <GDT::addEntry(GDTEntry)>
c00096b4:	83 c4 0c             	add    esp,0xc
c00096b7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00096bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00096bf:	53                   	push   ebx
c00096c0:	e8 7b fe ff ff       	call   c0009540 <GDT::addEntry(GDTEntry)>
c00096c5:	83 c4 0c             	add    esp,0xc
c00096c8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00096cc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00096d0:	53                   	push   ebx
c00096d1:	e8 6a fe ff ff       	call   c0009540 <GDT::addEntry(GDTEntry)>
c00096d6:	83 c4 0c             	add    esp,0xc
c00096d9:	57                   	push   edi
c00096da:	56                   	push   esi
c00096db:	53                   	push   ebx
c00096dc:	e8 5f fe ff ff       	call   c0009540 <GDT::addEntry(GDTEntry)>
c00096e1:	83 c4 0c             	add    esp,0xc
c00096e4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00096e8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00096ec:	53                   	push   ebx
c00096ed:	e8 4e fe ff ff       	call   c0009540 <GDT::addEntry(GDTEntry)>
c00096f2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00096f5:	e8 70 fe ff ff       	call   c000956a <GDT::flush()>
c00096fa:	83 c4 50             	add    esp,0x50
c00096fd:	5b                   	pop    ebx
c00096fe:	5e                   	pop    esi
c00096ff:	5f                   	pop    edi
c0009700:	c3                   	ret    

c0009701 <idleFunction(void*)>:
c0009701:	83 ec 0c             	sub    esp,0xc
c0009704:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c0009709:	48                   	dec    eax
c000970a:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c000970f:	75 01                	jne    c0009712 <idleFunction(void*)+0x11>
c0009711:	fb                   	sti    
c0009712:	f4                   	hlt    
c0009713:	e8 ca 91 01 00       	call   c00228e2 <idleCommon()>
c0009718:	eb f8                	jmp    c0009712 <idleFunction(void*)+0x11>
c000971a:	66 90                	xchg   ax,ax

c000971c <IDTEntry::IDTEntry(bool)>:
c000971c:	83 ec 04             	sub    esp,0x4
c000971f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009723:	88 04 24             	mov    BYTE PTR [esp],al
c0009726:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000972a:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0009730:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009734:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0009738:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000973c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000973f:	83 e2 f0             	and    edx,0xfffffff0
c0009742:	83 ca 0e             	or     edx,0xe
c0009745:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009748:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000974c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000974f:	83 e2 ef             	and    edx,0xffffffef
c0009752:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009755:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0009759:	74 05                	je     c0009760 <IDTEntry::IDTEntry(bool)+0x44>
c000975b:	b2 03                	mov    dl,0x3
c000975d:	eb 05                	jmp    c0009764 <IDTEntry::IDTEntry(bool)+0x48>
c000975f:	90                   	nop
c0009760:	b2 00                	mov    dl,0x0
c0009762:	66 90                	xchg   ax,ax
c0009764:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009768:	83 e2 03             	and    edx,0x3
c000976b:	88 d1                	mov    cl,dl
c000976d:	c1 e1 05             	shl    ecx,0x5
c0009770:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0009773:	83 e2 9f             	and    edx,0xffffff9f
c0009776:	09 ca                	or     edx,ecx
c0009778:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000977b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000977f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0009782:	83 ca 80             	or     edx,0xffffff80
c0009785:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009788:	90                   	nop
c0009789:	83 c4 04             	add    esp,0x4
c000978c:	c3                   	ret    
c000978d:	90                   	nop

c000978e <IDTEntry::setOffset(unsigned int)>:
c000978e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009792:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009796:	66 89 02             	mov    WORD PTR [edx],ax
c0009799:	c1 e8 10             	shr    eax,0x10
c000979c:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00097a0:	c3                   	ret    
c00097a1:	90                   	nop
c00097a2:	66 90                	xchg   ax,ax

c00097a4 <IDT::IDT()>:
c00097a4:	90                   	nop
c00097a5:	c3                   	ret    

c00097a6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00097a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00097aa:	83 c0 30             	add    eax,0x30
c00097ad:	c3                   	ret    

c00097ae <IDT::addEntry(IDTEntry, int)>:
c00097ae:	53                   	push   ebx
c00097af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00097b3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097b7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00097bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00097bf:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00097c2:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00097c6:	5b                   	pop    ebx
c00097c7:	c3                   	ret    

c00097c8 <IDT::addEntry(int, void (*)(), bool)>:
c00097c8:	53                   	push   ebx
c00097c9:	83 ec 10             	sub    esp,0x10
c00097cc:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00097d1:	50                   	push   eax
c00097d2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00097d6:	53                   	push   ebx
c00097d7:	e8 40 ff ff ff       	call   c000971c <IDTEntry::IDTEntry(bool)>
c00097dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00097e0:	53                   	push   ebx
c00097e1:	e8 a8 ff ff ff       	call   c000978e <IDTEntry::setOffset(unsigned int)>
c00097e6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00097ea:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00097ee:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00097f2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097f6:	e8 b3 ff ff ff       	call   c00097ae <IDT::addEntry(IDTEntry, int)>
c00097fb:	83 c4 30             	add    esp,0x30
c00097fe:	5b                   	pop    ebx
c00097ff:	c3                   	ret    

c0009800 <IDT::flush()>:
c0009800:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009804:	66 c7 05 18 7e 02 c0 ff 07 	mov    WORD PTR ds:0xc0027e18,0x7ff
c000980d:	a3 1a 7e 02 c0       	mov    ds:0xc0027e1a,eax
c0009812:	0f 01 1d 18 7e 02 c0 	lidtd  ds:0xc0027e18
c0009819:	c3                   	ret    

c000981a <IDT::setup()>:
c000981a:	57                   	push   edi
c000981b:	56                   	push   esi
c000981c:	53                   	push   ebx
c000981d:	83 ec 10             	sub    esp,0x10
c0009820:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009824:	6a 00                	push   0x0
c0009826:	68 9d 03 00 c0       	push   0xc000039d
c000982b:	6a 00                	push   0x0
c000982d:	53                   	push   ebx
c000982e:	e8 95 ff ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009833:	6a 00                	push   0x0
c0009835:	68 ad 03 00 c0       	push   0xc00003ad
c000983a:	6a 01                	push   0x1
c000983c:	53                   	push   ebx
c000983d:	e8 86 ff ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009842:	83 c4 20             	add    esp,0x20
c0009845:	6a 00                	push   0x0
c0009847:	68 b7 03 00 c0       	push   0xc00003b7
c000984c:	6a 02                	push   0x2
c000984e:	53                   	push   ebx
c000984f:	e8 74 ff ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009854:	6a 00                	push   0x0
c0009856:	68 c1 03 00 c0       	push   0xc00003c1
c000985b:	6a 03                	push   0x3
c000985d:	53                   	push   ebx
c000985e:	e8 65 ff ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009863:	83 c4 20             	add    esp,0x20
c0009866:	6a 00                	push   0x0
c0009868:	68 cb 03 00 c0       	push   0xc00003cb
c000986d:	6a 04                	push   0x4
c000986f:	53                   	push   ebx
c0009870:	e8 53 ff ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009875:	6a 00                	push   0x0
c0009877:	68 d5 03 00 c0       	push   0xc00003d5
c000987c:	6a 05                	push   0x5
c000987e:	53                   	push   ebx
c000987f:	e8 44 ff ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009884:	83 c4 20             	add    esp,0x20
c0009887:	6a 00                	push   0x0
c0009889:	68 df 03 00 c0       	push   0xc00003df
c000988e:	6a 06                	push   0x6
c0009890:	53                   	push   ebx
c0009891:	e8 32 ff ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009896:	6a 00                	push   0x0
c0009898:	68 e9 03 00 c0       	push   0xc00003e9
c000989d:	6a 07                	push   0x7
c000989f:	53                   	push   ebx
c00098a0:	e8 23 ff ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c00098a5:	83 c4 20             	add    esp,0x20
c00098a8:	6a 00                	push   0x0
c00098aa:	68 f3 03 00 c0       	push   0xc00003f3
c00098af:	6a 08                	push   0x8
c00098b1:	53                   	push   ebx
c00098b2:	e8 11 ff ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c00098b7:	6a 00                	push   0x0
c00098b9:	68 fb 03 00 c0       	push   0xc00003fb
c00098be:	6a 09                	push   0x9
c00098c0:	53                   	push   ebx
c00098c1:	e8 02 ff ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c00098c6:	83 c4 20             	add    esp,0x20
c00098c9:	6a 00                	push   0x0
c00098cb:	68 05 04 00 c0       	push   0xc0000405
c00098d0:	6a 0a                	push   0xa
c00098d2:	53                   	push   ebx
c00098d3:	e8 f0 fe ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c00098d8:	6a 00                	push   0x0
c00098da:	68 0d 04 00 c0       	push   0xc000040d
c00098df:	6a 0b                	push   0xb
c00098e1:	53                   	push   ebx
c00098e2:	e8 e1 fe ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c00098e7:	83 c4 20             	add    esp,0x20
c00098ea:	6a 00                	push   0x0
c00098ec:	68 15 04 00 c0       	push   0xc0000415
c00098f1:	6a 0c                	push   0xc
c00098f3:	53                   	push   ebx
c00098f4:	e8 cf fe ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c00098f9:	6a 00                	push   0x0
c00098fb:	68 1d 04 00 c0       	push   0xc000041d
c0009900:	6a 0d                	push   0xd
c0009902:	53                   	push   ebx
c0009903:	e8 c0 fe ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009908:	83 c4 20             	add    esp,0x20
c000990b:	6a 00                	push   0x0
c000990d:	68 25 04 00 c0       	push   0xc0000425
c0009912:	6a 0e                	push   0xe
c0009914:	53                   	push   ebx
c0009915:	e8 ae fe ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c000991a:	6a 00                	push   0x0
c000991c:	68 2d 04 00 c0       	push   0xc000042d
c0009921:	6a 0f                	push   0xf
c0009923:	53                   	push   ebx
c0009924:	e8 9f fe ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009929:	83 c4 20             	add    esp,0x20
c000992c:	6a 00                	push   0x0
c000992e:	68 37 04 00 c0       	push   0xc0000437
c0009933:	6a 10                	push   0x10
c0009935:	53                   	push   ebx
c0009936:	e8 8d fe ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c000993b:	6a 00                	push   0x0
c000993d:	68 41 04 00 c0       	push   0xc0000441
c0009942:	6a 11                	push   0x11
c0009944:	53                   	push   ebx
c0009945:	e8 7e fe ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c000994a:	83 c4 20             	add    esp,0x20
c000994d:	6a 00                	push   0x0
c000994f:	68 4b 04 00 c0       	push   0xc000044b
c0009954:	6a 12                	push   0x12
c0009956:	53                   	push   ebx
c0009957:	e8 6c fe ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c000995c:	6a 01                	push   0x1
c000995e:	68 e5 04 00 c0       	push   0xc00004e5
c0009963:	6a 60                	push   0x60
c0009965:	53                   	push   ebx
c0009966:	e8 5d fe ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c000996b:	83 c4 20             	add    esp,0x20
c000996e:	6a 00                	push   0x0
c0009970:	68 ec 04 00 c0       	push   0xc00004ec
c0009975:	6a 20                	push   0x20
c0009977:	53                   	push   ebx
c0009978:	e8 4b fe ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c000997d:	6a 00                	push   0x0
c000997f:	68 d7 04 00 c0       	push   0xc00004d7
c0009984:	6a 21                	push   0x21
c0009986:	53                   	push   ebx
c0009987:	e8 3c fe ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c000998c:	83 c4 20             	add    esp,0x20
c000998f:	6a 00                	push   0x0
c0009991:	68 de 04 00 c0       	push   0xc00004de
c0009996:	6a 22                	push   0x22
c0009998:	53                   	push   ebx
c0009999:	e8 2a fe ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c000999e:	6a 00                	push   0x0
c00099a0:	68 55 04 00 c0       	push   0xc0000455
c00099a5:	6a 23                	push   0x23
c00099a7:	53                   	push   ebx
c00099a8:	e8 1b fe ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c00099ad:	83 c4 20             	add    esp,0x20
c00099b0:	6a 00                	push   0x0
c00099b2:	68 5f 04 00 c0       	push   0xc000045f
c00099b7:	6a 24                	push   0x24
c00099b9:	53                   	push   ebx
c00099ba:	e8 09 fe ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c00099bf:	6a 00                	push   0x0
c00099c1:	68 69 04 00 c0       	push   0xc0000469
c00099c6:	6a 25                	push   0x25
c00099c8:	53                   	push   ebx
c00099c9:	e8 fa fd ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c00099ce:	83 c4 20             	add    esp,0x20
c00099d1:	6a 00                	push   0x0
c00099d3:	68 73 04 00 c0       	push   0xc0000473
c00099d8:	6a 26                	push   0x26
c00099da:	53                   	push   ebx
c00099db:	e8 e8 fd ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c00099e0:	6a 00                	push   0x0
c00099e2:	68 7d 04 00 c0       	push   0xc000047d
c00099e7:	6a 27                	push   0x27
c00099e9:	53                   	push   ebx
c00099ea:	e8 d9 fd ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c00099ef:	83 c4 20             	add    esp,0x20
c00099f2:	6a 00                	push   0x0
c00099f4:	68 87 04 00 c0       	push   0xc0000487
c00099f9:	6a 28                	push   0x28
c00099fb:	53                   	push   ebx
c00099fc:	e8 c7 fd ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009a01:	6a 00                	push   0x0
c0009a03:	68 91 04 00 c0       	push   0xc0000491
c0009a08:	6a 29                	push   0x29
c0009a0a:	53                   	push   ebx
c0009a0b:	e8 b8 fd ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009a10:	83 c4 20             	add    esp,0x20
c0009a13:	6a 00                	push   0x0
c0009a15:	68 9b 04 00 c0       	push   0xc000049b
c0009a1a:	6a 2a                	push   0x2a
c0009a1c:	53                   	push   ebx
c0009a1d:	e8 a6 fd ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009a22:	6a 00                	push   0x0
c0009a24:	68 a5 04 00 c0       	push   0xc00004a5
c0009a29:	6a 2b                	push   0x2b
c0009a2b:	53                   	push   ebx
c0009a2c:	e8 97 fd ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009a31:	83 c4 20             	add    esp,0x20
c0009a34:	6a 00                	push   0x0
c0009a36:	68 af 04 00 c0       	push   0xc00004af
c0009a3b:	6a 2c                	push   0x2c
c0009a3d:	53                   	push   ebx
c0009a3e:	e8 85 fd ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009a43:	6a 00                	push   0x0
c0009a45:	68 b9 04 00 c0       	push   0xc00004b9
c0009a4a:	6a 2d                	push   0x2d
c0009a4c:	53                   	push   ebx
c0009a4d:	e8 76 fd ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009a52:	83 c4 20             	add    esp,0x20
c0009a55:	6a 00                	push   0x0
c0009a57:	68 c3 04 00 c0       	push   0xc00004c3
c0009a5c:	6a 2e                	push   0x2e
c0009a5e:	53                   	push   ebx
c0009a5f:	e8 64 fd ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009a64:	6a 00                	push   0x0
c0009a66:	68 cd 04 00 c0       	push   0xc00004cd
c0009a6b:	6a 2f                	push   0x2f
c0009a6d:	53                   	push   ebx
c0009a6e:	e8 55 fd ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009a73:	83 c4 20             	add    esp,0x20
c0009a76:	6a 00                	push   0x0
c0009a78:	68 23 05 00 c0       	push   0xc0000523
c0009a7d:	6a 30                	push   0x30
c0009a7f:	53                   	push   ebx
c0009a80:	e8 43 fd ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009a85:	6a 00                	push   0x0
c0009a87:	68 2d 05 00 c0       	push   0xc000052d
c0009a8c:	6a 31                	push   0x31
c0009a8e:	53                   	push   ebx
c0009a8f:	e8 34 fd ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009a94:	83 c4 20             	add    esp,0x20
c0009a97:	6a 00                	push   0x0
c0009a99:	68 37 05 00 c0       	push   0xc0000537
c0009a9e:	6a 32                	push   0x32
c0009aa0:	53                   	push   ebx
c0009aa1:	e8 22 fd ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009aa6:	6a 00                	push   0x0
c0009aa8:	68 41 05 00 c0       	push   0xc0000541
c0009aad:	6a 33                	push   0x33
c0009aaf:	53                   	push   ebx
c0009ab0:	e8 13 fd ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009ab5:	83 c4 20             	add    esp,0x20
c0009ab8:	6a 00                	push   0x0
c0009aba:	68 4b 05 00 c0       	push   0xc000054b
c0009abf:	6a 34                	push   0x34
c0009ac1:	53                   	push   ebx
c0009ac2:	e8 01 fd ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009ac7:	6a 00                	push   0x0
c0009ac9:	68 55 05 00 c0       	push   0xc0000555
c0009ace:	6a 35                	push   0x35
c0009ad0:	53                   	push   ebx
c0009ad1:	e8 f2 fc ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009ad6:	83 c4 20             	add    esp,0x20
c0009ad9:	6a 00                	push   0x0
c0009adb:	68 5f 05 00 c0       	push   0xc000055f
c0009ae0:	6a 36                	push   0x36
c0009ae2:	53                   	push   ebx
c0009ae3:	e8 e0 fc ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009ae8:	6a 00                	push   0x0
c0009aea:	68 69 05 00 c0       	push   0xc0000569
c0009aef:	6a 37                	push   0x37
c0009af1:	53                   	push   ebx
c0009af2:	e8 d1 fc ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009af7:	83 c4 1c             	add    esp,0x1c
c0009afa:	6a 03                	push   0x3
c0009afc:	6a 02                	push   0x2
c0009afe:	ff 35 34 7f 02 c0    	push   DWORD PTR ds:0xc0027f34
c0009b04:	e8 cf 28 00 00       	call   c000c3d8 <VAS::allocatePages(int, int)>
c0009b09:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0009b10:	89 c6                	mov    esi,eax
c0009b12:	e8 a0 01 00 00       	call   c0009cb7 <malloc>
c0009b17:	81 c6 00 20 00 00    	add    esi,0x2000
c0009b1d:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b20:	89 c7                	mov    edi,eax
c0009b22:	e8 85 1a 00 00       	call   c000b5ac <TSS::TSS()>
c0009b27:	83 c4 0c             	add    esp,0xc
c0009b2a:	68 f3 03 00 c0       	push   0xc00003f3
c0009b2f:	56                   	push   esi
c0009b30:	57                   	push   edi
c0009b31:	e8 ba 1a 00 00       	call   c000b5f0 <TSS::setup(unsigned long, unsigned long)>
c0009b36:	89 c6                	mov    esi,eax
c0009b38:	58                   	pop    eax
c0009b39:	5a                   	pop    edx
c0009b3a:	6a 00                	push   0x0
c0009b3c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009b40:	50                   	push   eax
c0009b41:	e8 d6 fb ff ff       	call   c000971c <IDTEntry::IDTEntry(bool)>
c0009b46:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009b4a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0009b4f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0009b56:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0009b5c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009b60:	80 ce 05             	or     dh,0x5
c0009b63:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0009b66:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b6a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009b6e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0009b71:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009b74:	e8 87 fc ff ff       	call   c0009800 <IDT::flush()>
c0009b79:	83 c4 20             	add    esp,0x20
c0009b7c:	5b                   	pop    ebx
c0009b7d:	5e                   	pop    esi
c0009b7e:	5f                   	pop    edi
c0009b7f:	c3                   	ret    

c0009b80 <sbrk>:
c0009b80:	55                   	push   ebp
c0009b81:	57                   	push   edi
c0009b82:	56                   	push   esi
c0009b83:	53                   	push   ebx
c0009b84:	83 ec 24             	sub    esp,0x24
c0009b87:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009b8b:	53                   	push   ebx
c0009b8c:	68 fc 3d 02 c0       	push   0xc0023dfc
c0009b91:	e8 2f 34 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0009b96:	83 c4 10             	add    esp,0x10
c0009b99:	85 db                	test   ebx,ebx
c0009b9b:	74 5f                	je     c0009bfc <sbrk+0x7c>
c0009b9d:	78 64                	js     c0009c03 <sbrk+0x83>
c0009b9f:	a1 7c 70 02 c0       	mov    eax,ds:0xc002707c
c0009ba4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009ba8:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c0009bae:	89 dd                	mov    ebp,ebx
c0009bb0:	78 69                	js     c0009c1b <sbrk+0x9b>
c0009bb2:	c1 fd 0c             	sar    ebp,0xc
c0009bb5:	bb 00 00 00 00       	mov    ebx,0x0
c0009bba:	8b 35 34 7f 02 c0    	mov    esi,DWORD PTR ds:0xc0027f34
c0009bc0:	8b 3d 7c 70 02 c0    	mov    edi,DWORD PTR ds:0xc002707c
c0009bc6:	e8 a3 07 00 00       	call   c000a36e <Phys::allocatePage()>
c0009bcb:	68 01 04 00 00       	push   0x401
c0009bd0:	57                   	push   edi
c0009bd1:	50                   	push   eax
c0009bd2:	56                   	push   esi
c0009bd3:	e8 fc 26 00 00       	call   c000c2d4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009bd8:	81 05 7c 70 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002707c,0x1000
c0009be2:	43                   	inc    ebx
c0009be3:	83 c4 10             	add    esp,0x10
c0009be6:	39 dd                	cmp    ebp,ebx
c0009be8:	75 d0                	jne    c0009bba <sbrk+0x3a>
c0009bea:	0f 20 d8             	mov    eax,cr3
c0009bed:	0f 22 d8             	mov    cr3,eax
c0009bf0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009bf4:	83 c4 1c             	add    esp,0x1c
c0009bf7:	5b                   	pop    ebx
c0009bf8:	5e                   	pop    esi
c0009bf9:	5f                   	pop    edi
c0009bfa:	5d                   	pop    ebp
c0009bfb:	c3                   	ret    
c0009bfc:	a1 7c 70 02 c0       	mov    eax,ds:0xc002707c
c0009c01:	eb f1                	jmp    c0009bf4 <sbrk+0x74>
c0009c03:	83 ec 08             	sub    esp,0x8
c0009c06:	53                   	push   ebx
c0009c07:	68 28 3e 02 c0       	push   0xc0023e28
c0009c0c:	e8 b4 33 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0009c11:	83 c4 10             	add    esp,0x10
c0009c14:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009c19:	eb d9                	jmp    c0009bf4 <sbrk+0x74>
c0009c1b:	8d ab ff 0f 00 00    	lea    ebp,[ebx+0xfff]
c0009c21:	eb 8f                	jmp    c0009bb2 <sbrk+0x32>

c0009c23 <mmap>:
c0009c23:	83 ec 18             	sub    esp,0x18
c0009c26:	68 1a 3e 02 c0       	push   0xc0023e1a
c0009c2b:	e8 ed b0 00 00       	call   c0014d1d <Krnl::panic(char const*)>
c0009c30:	b8 00 00 00 00       	mov    eax,0x0
c0009c35:	83 c4 1c             	add    esp,0x1c
c0009c38:	c3                   	ret    

c0009c39 <munmap>:
c0009c39:	83 ec 18             	sub    esp,0x18
c0009c3c:	68 1f 3e 02 c0       	push   0xc0023e1f
c0009c41:	e8 d7 b0 00 00       	call   c0014d1d <Krnl::panic(char const*)>
c0009c46:	b8 00 00 00 00       	mov    eax,0x0
c0009c4b:	83 c4 1c             	add    esp,0x1c
c0009c4e:	c3                   	ret    

c0009c4f <liballoc_lock()>:
c0009c4f:	fa                   	cli    
c0009c50:	ff 05 28 93 02 c0    	inc    DWORD PTR ds:0xc0029328
c0009c56:	b8 00 00 00 00       	mov    eax,0x0
c0009c5b:	c3                   	ret    

c0009c5c <liballoc_unlock()>:
c0009c5c:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c0009c61:	48                   	dec    eax
c0009c62:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c0009c67:	75 01                	jne    c0009c6a <liballoc_unlock()+0xe>
c0009c69:	fb                   	sti    
c0009c6a:	b8 00 00 00 00       	mov    eax,0x0
c0009c6f:	c3                   	ret    

c0009c70 <liballoc_alloc(int)>:
c0009c70:	83 ec 10             	sub    esp,0x10
c0009c73:	6a 01                	push   0x1
c0009c75:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009c79:	ff 35 34 7f 02 c0    	push   DWORD PTR ds:0xc0027f34
c0009c7f:	e8 54 27 00 00       	call   c000c3d8 <VAS::allocatePages(int, int)>
c0009c84:	83 c4 1c             	add    esp,0x1c
c0009c87:	c3                   	ret    

c0009c88 <liballoc_free(void*, int)>:
c0009c88:	83 ec 14             	sub    esp,0x14
c0009c8b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009c8f:	ff 35 34 7f 02 c0    	push   DWORD PTR ds:0xc0027f34
c0009c95:	e8 e6 23 00 00       	call   c000c080 <VAS::freeAllocatedPages(unsigned long)>
c0009c9a:	b8 00 00 00 00       	mov    eax,0x0
c0009c9f:	83 c4 1c             	add    esp,0x1c
c0009ca2:	c3                   	ret    

c0009ca3 <realloc>:
c0009ca3:	83 ec 14             	sub    esp,0x14
c0009ca6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009caa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cae:	e8 a5 78 ff ff       	call   c0001558 <dlrealloc>
c0009cb3:	83 c4 1c             	add    esp,0x1c
c0009cb6:	c3                   	ret    

c0009cb7 <malloc>:
c0009cb7:	83 ec 18             	sub    esp,0x18
c0009cba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cbe:	e8 58 73 ff ff       	call   c000101b <dlmalloc>
c0009cc3:	83 c4 1c             	add    esp,0x1c
c0009cc6:	c3                   	ret    

c0009cc7 <free>:
c0009cc7:	83 ec 18             	sub    esp,0x18
c0009cca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cce:	e8 ed 6f ff ff       	call   c0000cc0 <dlfree>
c0009cd3:	83 c4 1c             	add    esp,0x1c
c0009cd6:	c3                   	ret    

c0009cd7 <rfree>:
c0009cd7:	83 ec 18             	sub    esp,0x18
c0009cda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cde:	e8 dd 6f ff ff       	call   c0000cc0 <dlfree>
c0009ce3:	83 c4 1c             	add    esp,0x1c
c0009ce6:	c3                   	ret    

c0009ce7 <calloc>:
c0009ce7:	56                   	push   esi
c0009ce8:	53                   	push   ebx
c0009ce9:	83 ec 10             	sub    esp,0x10
c0009cec:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009cf0:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0009cf5:	53                   	push   ebx
c0009cf6:	e8 bc ff ff ff       	call   c0009cb7 <malloc>
c0009cfb:	89 c6                	mov    esi,eax
c0009cfd:	83 c4 0c             	add    esp,0xc
c0009d00:	53                   	push   ebx
c0009d01:	6a 00                	push   0x0
c0009d03:	50                   	push   eax
c0009d04:	e8 73 69 ff ff       	call   c000067c <memset>
c0009d09:	89 f0                	mov    eax,esi
c0009d0b:	83 c4 14             	add    esp,0x14
c0009d0e:	5b                   	pop    ebx
c0009d0f:	5e                   	pop    esi
c0009d10:	c3                   	ret    

c0009d11 <Krnl::setBootMessage(char const*)>:
c0009d11:	57                   	push   edi
c0009d12:	56                   	push   esi
c0009d13:	53                   	push   ebx
c0009d14:	81 ec a4 00 00 00    	sub    esp,0xa4
c0009d1a:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0009d21:	68 9e 00 00 00       	push   0x9e
c0009d26:	6a 00                	push   0x0
c0009d28:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0009d2c:	56                   	push   esi
c0009d2d:	e8 4a 69 ff ff       	call   c000067c <memset>
c0009d32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009d35:	e8 5e 69 ff ff       	call   c0000698 <strlen>
c0009d3a:	ba 50 00 00 00       	mov    edx,0x50
c0009d3f:	83 c4 10             	add    esp,0x10
c0009d42:	29 c2                	sub    edx,eax
c0009d44:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c0009d48:	d1 ea                	shr    edx,1
c0009d4a:	84 c0                	test   al,al
c0009d4c:	74 19                	je     c0009d67 <Krnl::setBootMessage(char const*)+0x56>
c0009d4e:	01 d2                	add    edx,edx
c0009d50:	43                   	inc    ebx
c0009d51:	01 f2                	add    edx,esi
c0009d53:	80 cc 0f             	or     ah,0xf
c0009d56:	83 c2 02             	add    edx,0x2
c0009d59:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c0009d5d:	43                   	inc    ebx
c0009d5e:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c0009d63:	84 c0                	test   al,al
c0009d65:	75 ec                	jne    c0009d53 <Krnl::setBootMessage(char const*)+0x42>
c0009d67:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0009d6c:	b9 9e 00 00 00       	mov    ecx,0x9e
c0009d71:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009d73:	81 c4 a0 00 00 00    	add    esp,0xa0
c0009d79:	5b                   	pop    ebx
c0009d7a:	5e                   	pop    esi
c0009d7b:	5f                   	pop    edi
c0009d7c:	c3                   	ret    

c0009d7d <kernel_main>:
c0009d7d:	57                   	push   edi
c0009d7e:	56                   	push   esi
c0009d7f:	53                   	push   ebx
c0009d80:	83 ec 20             	sub    esp,0x20
c0009d83:	a1 00 05 00 00       	mov    eax,ds:0x500
c0009d88:	a3 20 7e 02 c0       	mov    ds:0xc0027e20,eax
c0009d8d:	f6 c4 08             	test   ah,0x8
c0009d90:	0f 85 7a 03 00 00    	jne    c000a110 <kernel_main+0x393>
c0009d96:	31 f6                	xor    esi,esi
c0009d98:	bf f9 03 00 00       	mov    edi,0x3f9
c0009d9d:	89 f0                	mov    eax,esi
c0009d9f:	89 fa                	mov    edx,edi
c0009da1:	ee                   	out    dx,al
c0009da2:	bb fb 03 00 00       	mov    ebx,0x3fb
c0009da7:	b0 80                	mov    al,0x80
c0009da9:	89 da                	mov    edx,ebx
c0009dab:	ee                   	out    dx,al
c0009dac:	b1 03                	mov    cl,0x3
c0009dae:	ba f8 03 00 00       	mov    edx,0x3f8
c0009db3:	88 c8                	mov    al,cl
c0009db5:	ee                   	out    dx,al
c0009db6:	89 f0                	mov    eax,esi
c0009db8:	89 fa                	mov    edx,edi
c0009dba:	ee                   	out    dx,al
c0009dbb:	88 c8                	mov    al,cl
c0009dbd:	89 da                	mov    edx,ebx
c0009dbf:	ee                   	out    dx,al
c0009dc0:	b0 c7                	mov    al,0xc7
c0009dc2:	ba fa 03 00 00       	mov    edx,0x3fa
c0009dc7:	ee                   	out    dx,al
c0009dc8:	b0 0b                	mov    al,0xb
c0009dca:	ba fc 03 00 00       	mov    edx,0x3fc
c0009dcf:	ee                   	out    dx,al
c0009dd0:	83 ec 0c             	sub    esp,0xc
c0009dd3:	68 58 3e 02 c0       	push   0xc0023e58
c0009dd8:	e8 e8 31 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0009ddd:	83 c4 10             	add    esp,0x10
c0009de0:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c0009de7:	0f 85 eb 02 00 00    	jne    c000a0d8 <kernel_main+0x35b>
c0009ded:	e8 c6 0c 00 00       	call   c000aab8 <installVgaTextImplementation()>
c0009df2:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c0009df9:	0f 85 94 02 00 00    	jne    c000a093 <kernel_main+0x316>
c0009dff:	0f b6 05 80 70 02 c0 	movzx  eax,BYTE PTR ds:0xc0027080
c0009e06:	84 c0                	test   al,al
c0009e08:	74 7b                	je     c0009e85 <kernel_main+0x108>
c0009e0a:	31 db                	xor    ebx,ebx
c0009e0c:	bf 0a 00 00 00       	mov    edi,0xa
c0009e11:	be 05 00 00 00       	mov    esi,0x5
c0009e16:	31 c9                	xor    ecx,ecx
c0009e18:	eb 2a                	jmp    c0009e44 <kernel_main+0xc7>
c0009e1a:	3c 0d                	cmp    al,0xd
c0009e1c:	74 1a                	je     c0009e38 <kernel_main+0xbb>
c0009e1e:	3c 0a                	cmp    al,0xa
c0009e20:	74 40                	je     c0009e62 <kernel_main+0xe5>
c0009e22:	8d 14 b6             	lea    edx,[esi+esi*4]
c0009e25:	80 cc 0e             	or     ah,0xe
c0009e28:	c1 e2 04             	shl    edx,0x4
c0009e2b:	01 ca                	add    edx,ecx
c0009e2d:	41                   	inc    ecx
c0009e2e:	01 fa                	add    edx,edi
c0009e30:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c0009e38:	43                   	inc    ebx
c0009e39:	0f b6 83 80 70 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd8f80]
c0009e40:	84 c0                	test   al,al
c0009e42:	74 32                	je     c0009e76 <kernel_main+0xf9>
c0009e44:	80 b9 b6 70 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd8f4a],0xdb
c0009e4b:	75 cd                	jne    c0009e1a <kernel_main+0x9d>
c0009e4d:	0f b6 91 b5 70 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd8f4b]
c0009e54:	83 e2 fe             	and    edx,0xfffffffe
c0009e57:	81 fa ba 00 00 00    	cmp    edx,0xba
c0009e5d:	75 bb                	jne    c0009e1a <kernel_main+0x9d>
c0009e5f:	47                   	inc    edi
c0009e60:	eb b8                	jmp    c0009e1a <kernel_main+0x9d>
c0009e62:	43                   	inc    ebx
c0009e63:	46                   	inc    esi
c0009e64:	31 c9                	xor    ecx,ecx
c0009e66:	0f b6 83 80 70 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd8f80]
c0009e6d:	bf 0a 00 00 00       	mov    edi,0xa
c0009e72:	84 c0                	test   al,al
c0009e74:	75 ce                	jne    c0009e44 <kernel_main+0xc7>
c0009e76:	8b 15 20 7e 02 c0    	mov    edx,DWORD PTR ds:0xc0027e20
c0009e7c:	80 e6 08             	and    dh,0x8
c0009e7f:	0f 85 bf 00 00 00    	jne    c0009f44 <kernel_main+0x1c7>
c0009e85:	83 ec 0c             	sub    esp,0xc
c0009e88:	68 f4 3e 02 c0       	push   0xc0023ef4
c0009e8d:	e8 7f fe ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0009e92:	a1 24 05 00 00       	mov    eax,ds:0x524
c0009e97:	05 ff 0f 00 00       	add    eax,0xfff
c0009e9c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009ea1:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ea4:	e8 44 06 00 00       	call   c000a4ed <Phys::physicalMemorySetup(unsigned int)>
c0009ea9:	83 c4 10             	add    esp,0x10
c0009eac:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c0009eb3:	0f 85 a2 01 00 00    	jne    c000a05b <kernel_main+0x2de>
c0009eb9:	e8 6a 1f 00 00       	call   c000be28 <Virt::virtualMemorySetup()>
c0009ebe:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c0009ec5:	0f 85 58 01 00 00    	jne    c000a023 <kernel_main+0x2a6>
c0009ecb:	83 ec 0c             	sub    esp,0xc
c0009ece:	8d 74 24 18          	lea    esi,[esp+0x18]
c0009ed2:	56                   	push   esi
c0009ed3:	e8 28 2b 00 00       	call   c000ca00 <VAS::VAS()>
c0009ed8:	83 c4 10             	add    esp,0x10
c0009edb:	89 35 34 7f 02 c0    	mov    DWORD PTR ds:0xc0027f34,esi
c0009ee1:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c0009ee8:	0f 85 fd 00 00 00    	jne    c0009feb <kernel_main+0x26e>
c0009eee:	e8 2d 61 ff ff       	call   c0000020 <callGlobalConstructors>
c0009ef3:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c0009efa:	0f 85 b3 00 00 00    	jne    c0009fb3 <kernel_main+0x236>
c0009f00:	83 ec 0c             	sub    esp,0xc
c0009f03:	68 ec 01 00 00       	push   0x1ec
c0009f08:	e8 aa fd ff ff       	call   c0009cb7 <malloc>
c0009f0d:	89 c3                	mov    ebx,eax
c0009f0f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009f12:	e8 a1 ec ff ff       	call   c0008bb8 <Computer::Computer()>
c0009f17:	83 c4 10             	add    esp,0x10
c0009f1a:	89 1d 08 7e 02 c0    	mov    DWORD PTR ds:0xc0027e08,ebx
c0009f20:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c0009f27:	75 53                	jne    c0009f7c <kernel_main+0x1ff>
c0009f29:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009f2b:	6a 00                	push   0x0
c0009f2d:	6a 00                	push   0x0
c0009f2f:	6a 00                	push   0x0
c0009f31:	53                   	push   ebx
c0009f32:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0009f35:	89 34 24             	mov    DWORD PTR [esp],esi
c0009f38:	e8 1b 22 00 00       	call   c000c158 <VAS::~VAS()>
c0009f3d:	83 c4 30             	add    esp,0x30
c0009f40:	5b                   	pop    ebx
c0009f41:	5e                   	pop    esi
c0009f42:	5f                   	pop    edi
c0009f43:	c3                   	ret    
c0009f44:	83 ec 0c             	sub    esp,0xc
c0009f47:	68 a3 3e 02 c0       	push   0xc0023ea3
c0009f4c:	e8 c0 fd ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0009f51:	83 c4 10             	add    esp,0x10
c0009f54:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c0009f5b:	0f 85 24 ff ff ff    	jne    c0009e85 <kernel_main+0x108>
c0009f61:	eb 04                	jmp    c0009f67 <kernel_main+0x1ea>
c0009f63:	3c 1c                	cmp    al,0x1c
c0009f65:	74 06                	je     c0009f6d <kernel_main+0x1f0>
c0009f67:	e4 60                	in     al,0x60
c0009f69:	3c 5a                	cmp    al,0x5a
c0009f6b:	75 f6                	jne    c0009f63 <kernel_main+0x1e6>
c0009f6d:	e4 60                	in     al,0x60
c0009f6f:	3c 5a                	cmp    al,0x5a
c0009f71:	74 fa                	je     c0009f6d <kernel_main+0x1f0>
c0009f73:	3c 1c                	cmp    al,0x1c
c0009f75:	74 f6                	je     c0009f6d <kernel_main+0x1f0>
c0009f77:	e9 09 ff ff ff       	jmp    c0009e85 <kernel_main+0x108>
c0009f7c:	83 ec 0c             	sub    esp,0xc
c0009f7f:	68 e2 3e 02 c0       	push   0xc0023ee2
c0009f84:	e8 88 fd ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0009f89:	83 c4 10             	add    esp,0x10
c0009f8c:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c0009f93:	74 0c                	je     c0009fa1 <kernel_main+0x224>
c0009f95:	8b 1d 08 7e 02 c0    	mov    ebx,DWORD PTR ds:0xc0027e08
c0009f9b:	eb 8c                	jmp    c0009f29 <kernel_main+0x1ac>
c0009f9d:	3c 1c                	cmp    al,0x1c
c0009f9f:	74 06                	je     c0009fa7 <kernel_main+0x22a>
c0009fa1:	e4 60                	in     al,0x60
c0009fa3:	3c 5a                	cmp    al,0x5a
c0009fa5:	75 f6                	jne    c0009f9d <kernel_main+0x220>
c0009fa7:	e4 60                	in     al,0x60
c0009fa9:	3c 5a                	cmp    al,0x5a
c0009fab:	74 fa                	je     c0009fa7 <kernel_main+0x22a>
c0009fad:	3c 1c                	cmp    al,0x1c
c0009faf:	74 f6                	je     c0009fa7 <kernel_main+0x22a>
c0009fb1:	eb e2                	jmp    c0009f95 <kernel_main+0x218>
c0009fb3:	83 ec 0c             	sub    esp,0xc
c0009fb6:	68 cf 3e 02 c0       	push   0xc0023ecf
c0009fbb:	e8 51 fd ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0009fc0:	83 c4 10             	add    esp,0x10
c0009fc3:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c0009fca:	0f 85 30 ff ff ff    	jne    c0009f00 <kernel_main+0x183>
c0009fd0:	eb 04                	jmp    c0009fd6 <kernel_main+0x259>
c0009fd2:	3c 1c                	cmp    al,0x1c
c0009fd4:	74 06                	je     c0009fdc <kernel_main+0x25f>
c0009fd6:	e4 60                	in     al,0x60
c0009fd8:	3c 5a                	cmp    al,0x5a
c0009fda:	75 f6                	jne    c0009fd2 <kernel_main+0x255>
c0009fdc:	e4 60                	in     al,0x60
c0009fde:	3c 5a                	cmp    al,0x5a
c0009fe0:	74 fa                	je     c0009fdc <kernel_main+0x25f>
c0009fe2:	3c 1c                	cmp    al,0x1c
c0009fe4:	74 f6                	je     c0009fdc <kernel_main+0x25f>
c0009fe6:	e9 15 ff ff ff       	jmp    c0009f00 <kernel_main+0x183>
c0009feb:	83 ec 0c             	sub    esp,0xc
c0009fee:	68 c5 3e 02 c0       	push   0xc0023ec5
c0009ff3:	e8 19 fd ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0009ff8:	83 c4 10             	add    esp,0x10
c0009ffb:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c000a002:	0f 85 e6 fe ff ff    	jne    c0009eee <kernel_main+0x171>
c000a008:	eb 04                	jmp    c000a00e <kernel_main+0x291>
c000a00a:	3c 1c                	cmp    al,0x1c
c000a00c:	74 06                	je     c000a014 <kernel_main+0x297>
c000a00e:	e4 60                	in     al,0x60
c000a010:	3c 5a                	cmp    al,0x5a
c000a012:	75 f6                	jne    c000a00a <kernel_main+0x28d>
c000a014:	e4 60                	in     al,0x60
c000a016:	3c 5a                	cmp    al,0x5a
c000a018:	74 fa                	je     c000a014 <kernel_main+0x297>
c000a01a:	3c 1c                	cmp    al,0x1c
c000a01c:	74 f6                	je     c000a014 <kernel_main+0x297>
c000a01e:	e9 cb fe ff ff       	jmp    c0009eee <kernel_main+0x171>
c000a023:	83 ec 0c             	sub    esp,0xc
c000a026:	68 ba 3e 02 c0       	push   0xc0023eba
c000a02b:	e8 e1 fc ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c000a030:	83 c4 10             	add    esp,0x10
c000a033:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c000a03a:	0f 85 8b fe ff ff    	jne    c0009ecb <kernel_main+0x14e>
c000a040:	eb 04                	jmp    c000a046 <kernel_main+0x2c9>
c000a042:	3c 1c                	cmp    al,0x1c
c000a044:	74 06                	je     c000a04c <kernel_main+0x2cf>
c000a046:	e4 60                	in     al,0x60
c000a048:	3c 5a                	cmp    al,0x5a
c000a04a:	75 f6                	jne    c000a042 <kernel_main+0x2c5>
c000a04c:	e4 60                	in     al,0x60
c000a04e:	3c 5a                	cmp    al,0x5a
c000a050:	74 fa                	je     c000a04c <kernel_main+0x2cf>
c000a052:	3c 1c                	cmp    al,0x1c
c000a054:	74 f6                	je     c000a04c <kernel_main+0x2cf>
c000a056:	e9 70 fe ff ff       	jmp    c0009ecb <kernel_main+0x14e>
c000a05b:	83 ec 0c             	sub    esp,0xc
c000a05e:	68 af 3e 02 c0       	push   0xc0023eaf
c000a063:	e8 a9 fc ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c000a068:	83 c4 10             	add    esp,0x10
c000a06b:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c000a072:	0f 85 41 fe ff ff    	jne    c0009eb9 <kernel_main+0x13c>
c000a078:	eb 04                	jmp    c000a07e <kernel_main+0x301>
c000a07a:	3c 1c                	cmp    al,0x1c
c000a07c:	74 06                	je     c000a084 <kernel_main+0x307>
c000a07e:	e4 60                	in     al,0x60
c000a080:	3c 5a                	cmp    al,0x5a
c000a082:	75 f6                	jne    c000a07a <kernel_main+0x2fd>
c000a084:	e4 60                	in     al,0x60
c000a086:	3c 5a                	cmp    al,0x5a
c000a088:	74 fa                	je     c000a084 <kernel_main+0x307>
c000a08a:	3c 1c                	cmp    al,0x1c
c000a08c:	74 f6                	je     c000a084 <kernel_main+0x307>
c000a08e:	e9 26 fe ff ff       	jmp    c0009eb9 <kernel_main+0x13c>
c000a093:	83 ec 0c             	sub    esp,0xc
c000a096:	68 91 3e 02 c0       	push   0xc0023e91
c000a09b:	e8 71 fc ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c000a0a0:	8b 15 20 7e 02 c0    	mov    edx,DWORD PTR ds:0xc0027e20
c000a0a6:	83 c4 10             	add    esp,0x10
c000a0a9:	f6 c2 80             	test   dl,0x80
c000a0ac:	74 18                	je     c000a0c6 <kernel_main+0x349>
c000a0ae:	0f b6 05 80 70 02 c0 	movzx  eax,BYTE PTR ds:0xc0027080
c000a0b5:	84 c0                	test   al,al
c000a0b7:	0f 85 4d fd ff ff    	jne    c0009e0a <kernel_main+0x8d>
c000a0bd:	e9 ba fd ff ff       	jmp    c0009e7c <kernel_main+0xff>
c000a0c2:	3c 1c                	cmp    al,0x1c
c000a0c4:	74 06                	je     c000a0cc <kernel_main+0x34f>
c000a0c6:	e4 60                	in     al,0x60
c000a0c8:	3c 5a                	cmp    al,0x5a
c000a0ca:	75 f6                	jne    c000a0c2 <kernel_main+0x345>
c000a0cc:	e4 60                	in     al,0x60
c000a0ce:	3c 5a                	cmp    al,0x5a
c000a0d0:	74 fa                	je     c000a0cc <kernel_main+0x34f>
c000a0d2:	3c 1c                	cmp    al,0x1c
c000a0d4:	74 f6                	je     c000a0cc <kernel_main+0x34f>
c000a0d6:	eb d6                	jmp    c000a0ae <kernel_main+0x331>
c000a0d8:	83 ec 0c             	sub    esp,0xc
c000a0db:	68 82 3e 02 c0       	push   0xc0023e82
c000a0e0:	e8 2c fc ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c000a0e5:	83 c4 10             	add    esp,0x10
c000a0e8:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c000a0ef:	0f 85 f8 fc ff ff    	jne    c0009ded <kernel_main+0x70>
c000a0f5:	eb 04                	jmp    c000a0fb <kernel_main+0x37e>
c000a0f7:	3c 1c                	cmp    al,0x1c
c000a0f9:	74 06                	je     c000a101 <kernel_main+0x384>
c000a0fb:	e4 60                	in     al,0x60
c000a0fd:	3c 5a                	cmp    al,0x5a
c000a0ff:	75 f6                	jne    c000a0f7 <kernel_main+0x37a>
c000a101:	e4 60                	in     al,0x60
c000a103:	3c 5a                	cmp    al,0x5a
c000a105:	74 fa                	je     c000a101 <kernel_main+0x384>
c000a107:	3c 1c                	cmp    al,0x1c
c000a109:	74 f6                	je     c000a101 <kernel_main+0x384>
c000a10b:	e9 dd fc ff ff       	jmp    c0009ded <kernel_main+0x70>
c000a110:	83 ec 0c             	sub    esp,0xc
c000a113:	68 6f 3e 02 c0       	push   0xc0023e6f
c000a118:	e8 f4 fb ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c000a11d:	83 c4 10             	add    esp,0x10
c000a120:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c000a127:	0f 85 69 fc ff ff    	jne    c0009d96 <kernel_main+0x19>
c000a12d:	eb 04                	jmp    c000a133 <kernel_main+0x3b6>
c000a12f:	3c 1c                	cmp    al,0x1c
c000a131:	74 06                	je     c000a139 <kernel_main+0x3bc>
c000a133:	e4 60                	in     al,0x60
c000a135:	3c 5a                	cmp    al,0x5a
c000a137:	75 f6                	jne    c000a12f <kernel_main+0x3b2>
c000a139:	e4 60                	in     al,0x60
c000a13b:	3c 5a                	cmp    al,0x5a
c000a13d:	74 fa                	je     c000a139 <kernel_main+0x3bc>
c000a13f:	3c 1c                	cmp    al,0x1c
c000a141:	74 f6                	je     c000a139 <kernel_main+0x3bc>
c000a143:	e9 4e fc ff ff       	jmp    c0009d96 <kernel_main+0x19>

c000a148 <Phys::allocateDMA(unsigned long)>:
c000a148:	55                   	push   ebp
c000a149:	31 ed                	xor    ebp,ebp
c000a14b:	57                   	push   edi
c000a14c:	56                   	push   esi
c000a14d:	53                   	push   ebx
c000a14e:	31 db                	xor    ebx,ebx
c000a150:	83 ec 28             	sub    esp,0x28
c000a153:	68 13 3f 02 c0       	push   0xc0023f13
c000a158:	e8 68 2e 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000a15d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a161:	83 c4 10             	add    esp,0x10
c000a164:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000a16a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000a172:	c1 ef 0c             	shr    edi,0xc
c000a175:	31 c0                	xor    eax,eax
c000a177:	eb 19                	jmp    c000a192 <Phys::allocateDMA(unsigned long)+0x4a>
c000a179:	85 c0                	test   eax,eax
c000a17b:	75 06                	jne    c000a183 <Phys::allocateDMA(unsigned long)+0x3b>
c000a17d:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a181:	89 dd                	mov    ebp,ebx
c000a183:	8d 70 01             	lea    esi,[eax+0x1]
c000a186:	39 f7                	cmp    edi,esi
c000a188:	74 3f                	je     c000a1c9 <Phys::allocateDMA(unsigned long)+0x81>
c000a18a:	89 f0                	mov    eax,esi
c000a18c:	43                   	inc    ebx
c000a18d:	83 fb 0f             	cmp    ebx,0xf
c000a190:	7f 11                	jg     c000a1a3 <Phys::allocateDMA(unsigned long)+0x5b>
c000a192:	80 bb 3c 7e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd81c4],0x0
c000a199:	74 de                	je     c000a179 <Phys::allocateDMA(unsigned long)+0x31>
c000a19b:	31 c0                	xor    eax,eax
c000a19d:	43                   	inc    ebx
c000a19e:	83 fb 0f             	cmp    ebx,0xf
c000a1a1:	7e ef                	jle    c000a192 <Phys::allocateDMA(unsigned long)+0x4a>
c000a1a3:	83 ec 0c             	sub    esp,0xc
c000a1a6:	68 43 3f 02 c0       	push   0xc0023f43
c000a1ab:	e8 15 2e 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000a1b0:	c7 04 24 00 40 02 c0 	mov    DWORD PTR [esp],0xc0024000
c000a1b7:	e8 61 ab 00 00       	call   c0014d1d <Krnl::panic(char const*)>
c000a1bc:	83 c4 10             	add    esp,0x10
c000a1bf:	31 c0                	xor    eax,eax
c000a1c1:	83 c4 1c             	add    esp,0x1c
c000a1c4:	5b                   	pop    ebx
c000a1c5:	5e                   	pop    esi
c000a1c6:	5f                   	pop    edi
c000a1c7:	5d                   	pop    ebp
c000a1c8:	c3                   	ret    
c000a1c9:	89 e9                	mov    ecx,ebp
c000a1cb:	c1 f9 04             	sar    ecx,0x4
c000a1ce:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000a1d2:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c000a1d6:	89 ca                	mov    edx,ecx
c000a1d8:	4a                   	dec    edx
c000a1d9:	79 03                	jns    c000a1de <Phys::allocateDMA(unsigned long)+0x96>
c000a1db:	8d 51 0e             	lea    edx,[ecx+0xe]
c000a1de:	c1 fa 04             	sar    edx,0x4
c000a1e1:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c000a1e5:	74 08                	je     c000a1ef <Phys::allocateDMA(unsigned long)+0xa7>
c000a1e7:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1eb:	31 c0                	xor    eax,eax
c000a1ed:	eb ae                	jmp    c000a19d <Phys::allocateDMA(unsigned long)+0x55>
c000a1ef:	85 f6                	test   esi,esi
c000a1f1:	74 15                	je     c000a208 <Phys::allocateDMA(unsigned long)+0xc0>
c000a1f3:	8d 95 3c 7e 02 c0    	lea    edx,[ebp-0x3ffd81c4]
c000a1f9:	8d 84 05 3d 7e 02 c0 	lea    eax,[ebp+eax*1-0x3ffd81c3]
c000a200:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000a203:	42                   	inc    edx
c000a204:	39 d0                	cmp    eax,edx
c000a206:	75 f8                	jne    c000a200 <Phys::allocateDMA(unsigned long)+0xb8>
c000a208:	83 ec 0c             	sub    esp,0xc
c000a20b:	01 3d 34 7e 02 c0    	add    DWORD PTR ds:0xc0027e34,edi
c000a211:	68 2c 3f 02 c0       	push   0xc0023f2c
c000a216:	e8 aa 2d 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000a21b:	83 c4 10             	add    esp,0x10
c000a21e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a222:	85 c0                	test   eax,eax
c000a224:	74 23                	je     c000a249 <Phys::allocateDMA(unsigned long)+0x101>
c000a226:	83 ec 0c             	sub    esp,0xc
c000a229:	68 cc 6d 02 c0       	push   0xc0026dcc
c000a22e:	e8 92 2d 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000a233:	c7 04 24 00 40 02 c0 	mov    DWORD PTR [esp],0xc0024000
c000a23a:	e8 de aa 00 00       	call   c0014d1d <Krnl::panic(char const*)>
c000a23f:	83 c4 10             	add    esp,0x10
c000a242:	89 f0                	mov    eax,esi
c000a244:	e9 43 ff ff ff       	jmp    c000a18c <Phys::allocateDMA(unsigned long)+0x44>
c000a249:	c1 e5 0c             	shl    ebp,0xc
c000a24c:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c000a252:	e9 6a ff ff ff       	jmp    c000a1c1 <Phys::allocateDMA(unsigned long)+0x79>

c000a257 <Phys::freeDMA(unsigned long, unsigned long)>:
c000a257:	83 ec 18             	sub    esp,0x18
c000a25a:	68 47 3f 02 c0       	push   0xc0023f47
c000a25f:	e8 61 2d 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000a264:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a268:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000a26e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a272:	c1 ea 0c             	shr    edx,0xc
c000a275:	05 00 00 ff 3d       	add    eax,0x3dff0000
c000a27a:	29 15 34 7e 02 c0    	sub    DWORD PTR ds:0xc0027e34,edx
c000a280:	c1 e8 0c             	shr    eax,0xc
c000a283:	83 c4 10             	add    esp,0x10
c000a286:	85 d2                	test   edx,edx
c000a288:	74 0f                	je     c000a299 <Phys::freeDMA(unsigned long, unsigned long)+0x42>
c000a28a:	05 3c 7e 02 c0       	add    eax,0xc0027e3c
c000a28f:	01 c2                	add    edx,eax
c000a291:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000a294:	40                   	inc    eax
c000a295:	39 d0                	cmp    eax,edx
c000a297:	75 f8                	jne    c000a291 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c000a299:	83 c4 0c             	add    esp,0xc
c000a29c:	c3                   	ret    

c000a29d <Phys::setPageState(unsigned long, bool)>:
c000a29d:	56                   	push   esi
c000a29e:	ba 01 00 00 00       	mov    edx,0x1
c000a2a3:	53                   	push   ebx
c000a2a4:	8b 35 c4 71 02 c0    	mov    esi,DWORD PTR ds:0xc00271c4
c000a2aa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a2ae:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a2b2:	89 c8                	mov    eax,ecx
c000a2b4:	83 e1 07             	and    ecx,0x7
c000a2b7:	c1 e8 03             	shr    eax,0x3
c000a2ba:	d3 e3                	shl    ebx,cl
c000a2bc:	01 c6                	add    esi,eax
c000a2be:	d3 e2                	shl    edx,cl
c000a2c0:	f7 d2                	not    edx
c000a2c2:	20 16                	and    BYTE PTR [esi],dl
c000a2c4:	03 05 c4 71 02 c0    	add    eax,DWORD PTR ds:0xc00271c4
c000a2ca:	08 18                	or     BYTE PTR [eax],bl
c000a2cc:	5b                   	pop    ebx
c000a2cd:	5e                   	pop    esi
c000a2ce:	c3                   	ret    

c000a2cf <Phys::getPageState(unsigned long)>:
c000a2cf:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a2d3:	8b 15 c4 71 02 c0    	mov    edx,DWORD PTR ds:0xc00271c4
c000a2d9:	89 c8                	mov    eax,ecx
c000a2db:	83 e1 07             	and    ecx,0x7
c000a2de:	c1 e8 03             	shr    eax,0x3
c000a2e1:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000a2e5:	d3 f8                	sar    eax,cl
c000a2e7:	83 e0 01             	and    eax,0x1
c000a2ea:	c3                   	ret    

c000a2eb <Phys::freePage(unsigned long)>:
c000a2eb:	53                   	push   ebx
c000a2ec:	83 ec 10             	sub    esp,0x10
c000a2ef:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a2f3:	53                   	push   ebx
c000a2f4:	68 5d 3f 02 c0       	push   0xc0023f5d
c000a2f9:	e8 c7 2c 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000a2fe:	8d 83 00 00 ff ff    	lea    eax,[ebx-0x10000]
c000a304:	83 c4 10             	add    esp,0x10
c000a307:	3d ff ff 00 00       	cmp    eax,0xffff
c000a30c:	76 3d                	jbe    c000a34b <Phys::freePage(unsigned long)+0x60>
c000a30e:	83 ec 0c             	sub    esp,0xc
c000a311:	c1 eb 0c             	shr    ebx,0xc
c000a314:	53                   	push   ebx
c000a315:	e8 b5 ff ff ff       	call   c000a2cf <Phys::getPageState(unsigned long)>
c000a31a:	83 c4 10             	add    esp,0x10
c000a31d:	84 c0                	test   al,al
c000a31f:	74 19                	je     c000a33a <Phys::freePage(unsigned long)+0x4f>
c000a321:	83 ec 08             	sub    esp,0x8
c000a324:	ff 0d 34 7e 02 c0    	dec    DWORD PTR ds:0xc0027e34
c000a32a:	6a 00                	push   0x0
c000a32c:	53                   	push   ebx
c000a32d:	e8 6b ff ff ff       	call   c000a29d <Phys::setPageState(unsigned long, bool)>
c000a332:	83 c4 10             	add    esp,0x10
c000a335:	83 c4 08             	add    esp,0x8
c000a338:	5b                   	pop    ebx
c000a339:	c3                   	ret    
c000a33a:	c7 44 24 10 87 3f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023f87
c000a342:	83 c4 08             	add    esp,0x8
c000a345:	5b                   	pop    ebx
c000a346:	e9 d2 a9 00 00       	jmp    c0014d1d <Krnl::panic(char const*)>
c000a34b:	83 ec 08             	sub    esp,0x8
c000a34e:	53                   	push   ebx
c000a34f:	68 70 3f 02 c0       	push   0xc0023f70
c000a354:	e8 6c 2c 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000a359:	58                   	pop    eax
c000a35a:	5a                   	pop    edx
c000a35b:	68 00 10 00 00       	push   0x1000
c000a360:	53                   	push   ebx
c000a361:	e8 f1 fe ff ff       	call   c000a257 <Phys::freeDMA(unsigned long, unsigned long)>
c000a366:	83 c4 10             	add    esp,0x10
c000a369:	83 c4 08             	add    esp,0x8
c000a36c:	5b                   	pop    ebx
c000a36d:	c3                   	ret    

c000a36e <Phys::allocatePage()>:
c000a36e:	56                   	push   esi
c000a36f:	53                   	push   ebx
c000a370:	83 ec 14             	sub    esp,0x14
c000a373:	8b 35 28 7e 02 c0    	mov    esi,DWORD PTR ds:0xc0027e28
c000a379:	89 f3                	mov    ebx,esi
c000a37b:	eb 0a                	jmp    c000a387 <Phys::allocatePage()+0x19>
c000a37d:	89 1d 28 7e 02 c0    	mov    DWORD PTR ds:0xc0027e28,ebx
c000a383:	39 de                	cmp    esi,ebx
c000a385:	74 24                	je     c000a3ab <Phys::allocatePage()+0x3d>
c000a387:	53                   	push   ebx
c000a388:	e8 42 ff ff ff       	call   c000a2cf <Phys::getPageState(unsigned long)>
c000a38d:	5a                   	pop    edx
c000a38e:	84 c0                	test   al,al
c000a390:	74 69                	je     c000a3fb <Phys::allocatePage()+0x8d>
c000a392:	43                   	inc    ebx
c000a393:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000a399:	75 e2                	jne    c000a37d <Phys::allocatePage()+0xf>
c000a39b:	31 db                	xor    ebx,ebx
c000a39d:	c7 05 28 7e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027e28,0x0
c000a3a7:	39 de                	cmp    esi,ebx
c000a3a9:	75 dc                	jne    c000a387 <Phys::allocatePage()+0x19>
c000a3ab:	83 ec 0c             	sub    esp,0xc
c000a3ae:	80 35 4c 7e 02 c0 01 	xor    BYTE PTR ds:0xc0027e4c,0x1
c000a3b5:	68 28 40 02 c0       	push   0xc0024028
c000a3ba:	e8 06 2c 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000a3bf:	58                   	pop    eax
c000a3c0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a3c5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a3c8:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c000a3ce:	e8 81 28 00 00       	call   c000cc54 <VAS::scanForEviction()>
c000a3d3:	83 c4 10             	add    esp,0x10
c000a3d6:	85 c0                	test   eax,eax
c000a3d8:	75 62                	jne    c000a43c <Phys::allocatePage()+0xce>
c000a3da:	83 ec 0c             	sub    esp,0xc
c000a3dd:	68 4c 40 02 c0       	push   0xc002404c
c000a3e2:	e8 36 a9 00 00       	call   c0014d1d <Krnl::panic(char const*)>
c000a3e7:	83 c4 10             	add    esp,0x10
c000a3ea:	8b 1d 28 7e 02 c0    	mov    ebx,DWORD PTR ds:0xc0027e28
c000a3f0:	53                   	push   ebx
c000a3f1:	e8 d9 fe ff ff       	call   c000a2cf <Phys::getPageState(unsigned long)>
c000a3f6:	5a                   	pop    edx
c000a3f7:	84 c0                	test   al,al
c000a3f9:	75 97                	jne    c000a392 <Phys::allocatePage()+0x24>
c000a3fb:	6a 01                	push   0x1
c000a3fd:	53                   	push   ebx
c000a3fe:	e8 9a fe ff ff       	call   c000a29d <Phys::setPageState(unsigned long, bool)>
c000a403:	5a                   	pop    edx
c000a404:	a1 34 7e 02 c0       	mov    eax,ds:0xc0027e34
c000a409:	59                   	pop    ecx
c000a40a:	40                   	inc    eax
c000a40b:	8b 15 28 7e 02 c0    	mov    edx,DWORD PTR ds:0xc0027e28
c000a411:	a3 34 7e 02 c0       	mov    ds:0xc0027e34,eax
c000a416:	c1 e2 0c             	shl    edx,0xc
c000a419:	52                   	push   edx
c000a41a:	ff 35 38 7e 02 c0    	push   DWORD PTR ds:0xc0027e38
c000a420:	50                   	push   eax
c000a421:	68 9d 3f 02 c0       	push   0xc0023f9d
c000a426:	e8 9a 2b 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000a42b:	a1 28 7e 02 c0       	mov    eax,ds:0xc0027e28
c000a430:	83 c4 10             	add    esp,0x10
c000a433:	c1 e0 0c             	shl    eax,0xc
c000a436:	83 c4 14             	add    esp,0x14
c000a439:	5b                   	pop    ebx
c000a43a:	5e                   	pop    esi
c000a43b:	c3                   	ret    
c000a43c:	83 ec 08             	sub    esp,0x8
c000a43f:	89 c2                	mov    edx,eax
c000a441:	6a 01                	push   0x1
c000a443:	c1 ea 0c             	shr    edx,0xc
c000a446:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a44a:	52                   	push   edx
c000a44b:	e8 4d fe ff ff       	call   c000a29d <Phys::setPageState(unsigned long, bool)>
c000a450:	83 c4 10             	add    esp,0x10
c000a453:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a457:	eb dd                	jmp    c000a436 <Phys::allocatePage()+0xc8>

c000a459 <Phys::allocateContiguousPages(int)>:
c000a459:	57                   	push   edi
c000a45a:	56                   	push   esi
c000a45b:	53                   	push   ebx
c000a45c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a460:	fa                   	cli    
c000a461:	ff 05 28 93 02 c0    	inc    DWORD PTR ds:0xc0029328
c000a467:	31 db                	xor    ebx,ebx
c000a469:	85 db                	test   ebx,ebx
c000a46b:	75 11                	jne    c000a47e <Phys::allocateContiguousPages(int)+0x25>
c000a46d:	e8 fc fe ff ff       	call   c000a36e <Phys::allocatePage()>
c000a472:	83 fe 01             	cmp    esi,0x1
c000a475:	89 c7                	mov    edi,eax
c000a477:	74 21                	je     c000a49a <Phys::allocateContiguousPages(int)+0x41>
c000a479:	bb 01 00 00 00       	mov    ebx,0x1
c000a47e:	e8 eb fe ff ff       	call   c000a36e <Phys::allocatePage()>
c000a483:	89 da                	mov    edx,ebx
c000a485:	c1 e2 0c             	shl    edx,0xc
c000a488:	01 fa                	add    edx,edi
c000a48a:	39 c2                	cmp    edx,eax
c000a48c:	74 20                	je     c000a4ae <Phys::allocateContiguousPages(int)+0x55>
c000a48e:	bb 01 00 00 00       	mov    ebx,0x1
c000a493:	89 c7                	mov    edi,eax
c000a495:	83 fe 01             	cmp    esi,0x1
c000a498:	75 e4                	jne    c000a47e <Phys::allocateContiguousPages(int)+0x25>
c000a49a:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c000a49f:	48                   	dec    eax
c000a4a0:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c000a4a5:	75 01                	jne    c000a4a8 <Phys::allocateContiguousPages(int)+0x4f>
c000a4a7:	fb                   	sti    
c000a4a8:	89 f8                	mov    eax,edi
c000a4aa:	5b                   	pop    ebx
c000a4ab:	5e                   	pop    esi
c000a4ac:	5f                   	pop    edi
c000a4ad:	c3                   	ret    
c000a4ae:	43                   	inc    ebx
c000a4af:	39 f3                	cmp    ebx,esi
c000a4b1:	75 b6                	jne    c000a469 <Phys::allocateContiguousPages(int)+0x10>
c000a4b3:	eb e5                	jmp    c000a49a <Phys::allocateContiguousPages(int)+0x41>

c000a4b5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000a4b5:	56                   	push   esi
c000a4b6:	53                   	push   ebx
c000a4b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a4bb:	39 1d 2c 7e 02 c0    	cmp    DWORD PTR ds:0xc0027e2c,ebx
c000a4c1:	73 06                	jae    c000a4c9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000a4c3:	89 1d 2c 7e 02 c0    	mov    DWORD PTR ds:0xc0027e2c,ebx
c000a4c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a4cd:	c1 eb 0c             	shr    ebx,0xc
c000a4d0:	c1 e8 0c             	shr    eax,0xc
c000a4d3:	39 d8                	cmp    eax,ebx
c000a4d5:	73 13                	jae    c000a4ea <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000a4d7:	6a 00                	push   0x0
c000a4d9:	8d 70 01             	lea    esi,[eax+0x1]
c000a4dc:	50                   	push   eax
c000a4dd:	e8 bb fd ff ff       	call   c000a29d <Phys::setPageState(unsigned long, bool)>
c000a4e2:	5a                   	pop    edx
c000a4e3:	89 f0                	mov    eax,esi
c000a4e5:	59                   	pop    ecx
c000a4e6:	39 f3                	cmp    ebx,esi
c000a4e8:	75 ed                	jne    c000a4d7 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000a4ea:	5b                   	pop    ebx
c000a4eb:	5e                   	pop    esi
c000a4ec:	c3                   	ret    

c000a4ed <Phys::physicalMemorySetup(unsigned int)>:
c000a4ed:	55                   	push   ebp
c000a4ee:	57                   	push   edi
c000a4ef:	56                   	push   esi
c000a4f0:	53                   	push   ebx
c000a4f1:	31 db                	xor    ebx,ebx
c000a4f3:	83 ec 40             	sub    esp,0x40
c000a4f6:	6a 10                	push   0x10
c000a4f8:	6a 00                	push   0x0
c000a4fa:	68 3c 7e 02 c0       	push   0xc0027e3c
c000a4ff:	e8 78 61 ff ff       	call   c000067c <memset>
c000a504:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000a508:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a50d:	05 00 10 00 00       	add    eax,0x1000
c000a512:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a516:	5a                   	pop    edx
c000a517:	59                   	pop    ecx
c000a518:	50                   	push   eax
c000a519:	68 bb 3f 02 c0       	push   0xc0023fbb
c000a51e:	e8 a2 2a 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000a523:	83 c4 10             	add    esp,0x10
c000a526:	83 ec 08             	sub    esp,0x8
c000a529:	6a 01                	push   0x1
c000a52b:	53                   	push   ebx
c000a52c:	43                   	inc    ebx
c000a52d:	e8 6b fd ff ff       	call   c000a29d <Phys::setPageState(unsigned long, bool)>
c000a532:	83 c4 10             	add    esp,0x10
c000a535:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000a53b:	75 e9                	jne    c000a526 <Phys::physicalMemorySetup(unsigned int)+0x39>
c000a53d:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000a544:	66 85 c0             	test   ax,ax
c000a547:	0f 84 8e 01 00 00    	je     c000a6db <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c000a54d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a551:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000a559:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a55d:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000a562:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a566:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000a56e:	eb 15                	jmp    c000a585 <Phys::physicalMemorySetup(unsigned int)+0x98>
c000a570:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000a574:	83 c3 18             	add    ebx,0x18
c000a577:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a57b:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000a57f:	0f 84 66 01 00 00    	je     c000a6eb <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a585:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000a588:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000a58b:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000a58e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a592:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a596:	8b 33                	mov    esi,DWORD PTR [ebx]
c000a598:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000a59b:	01 f0                	add    eax,esi
c000a59d:	55                   	push   ebp
c000a59e:	11 fa                	adc    edx,edi
c000a5a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a5a4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000a5a8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a5ac:	56                   	push   esi
c000a5ad:	68 7c 40 02 c0       	push   0xc002407c
c000a5b2:	e8 0e 2a 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000a5b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5bb:	83 c4 10             	add    esp,0x10
c000a5be:	09 f8                	or     eax,edi
c000a5c0:	0f 85 25 01 00 00    	jne    c000a6eb <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a5c6:	4d                   	dec    ebp
c000a5c7:	75 a7                	jne    c000a570 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a5c9:	ba 00 00 08 00       	mov    edx,0x80000
c000a5ce:	89 c1                	mov    ecx,eax
c000a5d0:	39 f2                	cmp    edx,esi
c000a5d2:	19 f9                	sbb    ecx,edi
c000a5d4:	0f 82 a7 00 00 00    	jb     c000a681 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a5da:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000a5de:	89 c1                	mov    ecx,eax
c000a5e0:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000a5e4:	0f 83 97 00 00 00    	jae    c000a681 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a5ea:	ba 00 00 0a 00       	mov    edx,0xa0000
c000a5ef:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a5f3:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a5f7:	39 fa                	cmp    edx,edi
c000a5f9:	19 e8                	sbb    eax,ebp
c000a5fb:	0f 82 9a 01 00 00    	jb     c000a79b <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c000a601:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a605:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a609:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000a60f:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a614:	83 d5 ff             	adc    ebp,0xffffffff
c000a617:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000a61b:	31 c0                	xor    eax,eax
c000a61d:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000a621:	39 fa                	cmp    edx,edi
c000a623:	89 c1                	mov    ecx,eax
c000a625:	19 e9                	sbb    ecx,ebp
c000a627:	0f 83 43 ff ff ff    	jae    c000a570 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a62d:	be 00 00 08 00       	mov    esi,0x80000
c000a632:	51                   	push   ecx
c000a633:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000a637:	57                   	push   edi
c000a638:	56                   	push   esi
c000a639:	68 a0 40 02 c0       	push   0xc00240a0
c000a63e:	e8 82 29 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000a643:	5d                   	pop    ebp
c000a644:	58                   	pop    eax
c000a645:	57                   	push   edi
c000a646:	56                   	push   esi
c000a647:	e8 69 fe ff ff       	call   c000a4b5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000a64c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000a650:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a654:	83 c4 0c             	add    esp,0xc
c000a657:	0f ac d0 0c          	shrd   eax,edx,0xc
c000a65b:	03 05 38 7e 02 c0    	add    eax,DWORD PTR ds:0xc0027e38
c000a661:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a668:	a3 38 7e 02 c0       	mov    ds:0xc0027e38,eax
c000a66d:	52                   	push   edx
c000a66e:	50                   	push   eax
c000a66f:	68 e1 3f 02 c0       	push   0xc0023fe1
c000a674:	e8 4c 29 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000a679:	83 c4 10             	add    esp,0x10
c000a67c:	e9 ef fe ff ff       	jmp    c000a570 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a681:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000a685:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a689:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a68d:	39 ea                	cmp    edx,ebp
c000a68f:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000a693:	0f 82 d7 fe ff ff    	jb     c000a570 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a699:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a69e:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000a6a2:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000a6a6:	0f 83 c4 fe ff ff    	jae    c000a570 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a6ac:	39 ee                	cmp    esi,ebp
c000a6ae:	89 f8                	mov    eax,edi
c000a6b0:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000a6b4:	0f 83 78 ff ff ff    	jae    c000a632 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a6ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a6be:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a6c2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000a6c6:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000a6ca:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000a6ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a6d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a6d6:	e9 57 ff ff ff       	jmp    c000a632 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a6db:	83 ec 0c             	sub    esp,0xc
c000a6de:	68 d3 3f 02 c0       	push   0xc0023fd3
c000a6e3:	e8 35 a6 00 00       	call   c0014d1d <Krnl::panic(char const*)>
c000a6e8:	83 c4 10             	add    esp,0x10
c000a6eb:	83 ec 08             	sub    esp,0x8
c000a6ee:	bb 60 00 00 00       	mov    ebx,0x60
c000a6f3:	6a 00                	push   0x0
c000a6f5:	6a 06                	push   0x6
c000a6f7:	e8 a1 fb ff ff       	call   c000a29d <Phys::setPageState(unsigned long, bool)>
c000a6fc:	58                   	pop    eax
c000a6fd:	5a                   	pop    edx
c000a6fe:	6a 00                	push   0x0
c000a700:	6a 07                	push   0x7
c000a702:	e8 96 fb ff ff       	call   c000a29d <Phys::setPageState(unsigned long, bool)>
c000a707:	83 05 38 7e 02 c0 02 	add    DWORD PTR ds:0xc0027e38,0x2
c000a70e:	83 c4 10             	add    esp,0x10
c000a711:	83 ec 08             	sub    esp,0x8
c000a714:	6a 00                	push   0x0
c000a716:	53                   	push   ebx
c000a717:	43                   	inc    ebx
c000a718:	e8 80 fb ff ff       	call   c000a29d <Phys::setPageState(unsigned long, bool)>
c000a71d:	83 c4 10             	add    esp,0x10
c000a720:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000a726:	75 e9                	jne    c000a711 <Phys::physicalMemorySetup(unsigned int)+0x224>
c000a728:	a1 38 7e 02 c0       	mov    eax,ds:0xc0027e38
c000a72d:	bb 40 01 00 00       	mov    ebx,0x140
c000a732:	83 c0 20             	add    eax,0x20
c000a735:	a3 38 7e 02 c0       	mov    ds:0xc0027e38,eax
c000a73a:	eb 22                	jmp    c000a75e <Phys::physicalMemorySetup(unsigned int)+0x271>
c000a73c:	83 ec 08             	sub    esp,0x8
c000a73f:	6a 00                	push   0x0
c000a741:	53                   	push   ebx
c000a742:	43                   	inc    ebx
c000a743:	e8 55 fb ff ff       	call   c000a29d <Phys::setPageState(unsigned long, bool)>
c000a748:	a1 38 7e 02 c0       	mov    eax,ds:0xc0027e38
c000a74d:	83 c4 10             	add    esp,0x10
c000a750:	40                   	inc    eax
c000a751:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000a757:	a3 38 7e 02 c0       	mov    ds:0xc0027e38,eax
c000a75c:	74 07                	je     c000a765 <Phys::physicalMemorySetup(unsigned int)+0x278>
c000a75e:	3d ff 03 00 00       	cmp    eax,0x3ff
c000a763:	7e d7                	jle    c000a73c <Phys::physicalMemorySetup(unsigned int)+0x24f>
c000a765:	bb d0 01 00 00       	mov    ebx,0x1d0
c000a76a:	3d ff 07 00 00       	cmp    eax,0x7ff
c000a76f:	7f 22                	jg     c000a793 <Phys::physicalMemorySetup(unsigned int)+0x2a6>
c000a771:	83 ec 08             	sub    esp,0x8
c000a774:	6a 00                	push   0x0
c000a776:	53                   	push   ebx
c000a777:	43                   	inc    ebx
c000a778:	e8 20 fb ff ff       	call   c000a29d <Phys::setPageState(unsigned long, bool)>
c000a77d:	a1 38 7e 02 c0       	mov    eax,ds:0xc0027e38
c000a782:	83 c4 10             	add    esp,0x10
c000a785:	40                   	inc    eax
c000a786:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c000a78c:	a3 38 7e 02 c0       	mov    ds:0xc0027e38,eax
c000a791:	75 d7                	jne    c000a76a <Phys::physicalMemorySetup(unsigned int)+0x27d>
c000a793:	83 c4 3c             	add    esp,0x3c
c000a796:	5b                   	pop    ebx
c000a797:	5e                   	pop    esi
c000a798:	5f                   	pop    edi
c000a799:	5d                   	pop    ebp
c000a79a:	c3                   	ret    
c000a79b:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000a7a3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000a7ab:	e9 51 fe ff ff       	jmp    c000a601 <Phys::physicalMemorySetup(unsigned int)+0x114>

c000a7b0 <Pipe::isAtty()>:
c000a7b0:	31 c0                	xor    eax,eax
c000a7b2:	c3                   	ret    
c000a7b3:	90                   	nop

c000a7b4 <Pipe::~Pipe()>:
c000a7b4:	83 ec 0c             	sub    esp,0xc
c000a7b7:	ba 0c 41 02 c0       	mov    edx,0xc002410c
c000a7bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a7c0:	89 10                	mov    DWORD PTR [eax],edx
c000a7c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a7c6:	83 ec 0c             	sub    esp,0xc
c000a7c9:	50                   	push   eax
c000a7ca:	e8 39 12 00 00       	call   c000ba08 <UnixFile::~UnixFile()>
c000a7cf:	83 c4 10             	add    esp,0x10
c000a7d2:	90                   	nop
c000a7d3:	83 c4 0c             	add    esp,0xc
c000a7d6:	c3                   	ret    
c000a7d7:	90                   	nop

c000a7d8 <Pipe::~Pipe()>:
c000a7d8:	83 ec 0c             	sub    esp,0xc
c000a7db:	83 ec 0c             	sub    esp,0xc
c000a7de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7e2:	e8 cd ff ff ff       	call   c000a7b4 <Pipe::~Pipe()>
c000a7e7:	83 c4 10             	add    esp,0x10
c000a7ea:	83 ec 08             	sub    esp,0x8
c000a7ed:	6a 20                	push   0x20
c000a7ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7f3:	e8 ec 26 00 00       	call   c000cee4 <operator delete(void*, unsigned long)>
c000a7f8:	83 c4 10             	add    esp,0x10
c000a7fb:	83 c4 0c             	add    esp,0xc
c000a7fe:	c3                   	ret    
c000a7ff:	90                   	nop

c000a800 <Pipe::write(unsigned long long, void*, int*)>:
c000a800:	55                   	push   ebp
c000a801:	57                   	push   edi
c000a802:	56                   	push   esi
c000a803:	53                   	push   ebx
c000a804:	83 ec 1c             	sub    esp,0x1c
c000a807:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000a80b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a80f:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000a812:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a816:	89 04 24             	mov    DWORD PTR [esp],eax
c000a819:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a81d:	89 d8                	mov    eax,ebx
c000a81f:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000a822:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a826:	89 d6                	mov    esi,edx
c000a828:	89 d7                	mov    edi,edx
c000a82a:	c1 ff 1f             	sar    edi,0x1f
c000a82d:	03 34 24             	add    esi,DWORD PTR [esp]
c000a830:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000a834:	c1 f8 1f             	sar    eax,0x1f
c000a837:	39 f3                	cmp    ebx,esi
c000a839:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a83d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a841:	19 f8                	sbb    eax,edi
c000a843:	b8 01 00 00 00       	mov    eax,0x1
c000a848:	72 6e                	jb     c000a8b8 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000a84a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000a84d:	01 d0                	add    eax,edx
c000a84f:	99                   	cdq    
c000a850:	f7 fb                	idiv   ebx
c000a852:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a856:	29 d3                	sub    ebx,edx
c000a858:	89 d7                	mov    edi,edx
c000a85a:	89 de                	mov    esi,ebx
c000a85c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a85f:	c1 fb 1f             	sar    ebx,0x1f
c000a862:	39 f2                	cmp    edx,esi
c000a864:	19 d8                	sbb    eax,ebx
c000a866:	b8 00 00 00 00       	mov    eax,0x0
c000a86b:	72 04                	jb     c000a871 <Pipe::write(unsigned long long, void*, int*)+0x71>
c000a86d:	89 d0                	mov    eax,edx
c000a86f:	29 f0                	sub    eax,esi
c000a871:	89 d3                	mov    ebx,edx
c000a873:	29 c3                	sub    ebx,eax
c000a875:	74 0b                	je     c000a882 <Pipe::write(unsigned long long, void*, int*)+0x82>
c000a877:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000a87a:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a87e:	89 d9                	mov    ecx,ebx
c000a880:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a882:	85 c0                	test   eax,eax
c000a884:	74 0d                	je     c000a893 <Pipe::write(unsigned long long, void*, int*)+0x93>
c000a886:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000a88a:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000a88d:	89 de                	mov    esi,ebx
c000a88f:	89 c1                	mov    ecx,eax
c000a891:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a893:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000a896:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a89b:	75 10                	jne    c000a8ad <Pipe::write(unsigned long long, void*, int*)+0xad>
c000a89d:	83 ec 0c             	sub    esp,0xc
c000a8a0:	68 c9 40 02 c0       	push   0xc00240c9
c000a8a5:	e8 73 a4 00 00       	call   c0014d1d <Krnl::panic(char const*)>
c000a8aa:	83 c4 10             	add    esp,0x10
c000a8ad:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a8b1:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a8b4:	89 08                	mov    DWORD PTR [eax],ecx
c000a8b6:	31 c0                	xor    eax,eax
c000a8b8:	83 c4 1c             	add    esp,0x1c
c000a8bb:	5b                   	pop    ebx
c000a8bc:	5e                   	pop    esi
c000a8bd:	5f                   	pop    edi
c000a8be:	5d                   	pop    ebp
c000a8bf:	c3                   	ret    

c000a8c0 <Pipe::read(unsigned long long, void*, int*)>:
c000a8c0:	55                   	push   ebp
c000a8c1:	57                   	push   edi
c000a8c2:	56                   	push   esi
c000a8c3:	53                   	push   ebx
c000a8c4:	83 ec 1c             	sub    esp,0x1c
c000a8c7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000a8cb:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000a8cf:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a8d3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a8d6:	89 c8                	mov    eax,ecx
c000a8d8:	99                   	cdq    
c000a8d9:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000a8dd:	74 24                	je     c000a903 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a8df:	39 f9                	cmp    ecx,edi
c000a8e1:	89 d1                	mov    ecx,edx
c000a8e3:	19 f1                	sbb    ecx,esi
c000a8e5:	73 1c                	jae    c000a903 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a8e7:	fa                   	cli    
c000a8e8:	ff 05 28 93 02 c0    	inc    DWORD PTR ds:0xc0029328
c000a8ee:	e8 8d da 00 00       	call   c0018380 <schedule()>
c000a8f3:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c000a8f8:	48                   	dec    eax
c000a8f9:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c000a8fe:	75 d3                	jne    c000a8d3 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a900:	fb                   	sti    
c000a901:	eb d0                	jmp    c000a8d3 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a903:	39 f8                	cmp    eax,edi
c000a905:	89 d1                	mov    ecx,edx
c000a907:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a90a:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000a90e:	19 f1                	sbb    ecx,esi
c000a910:	73 07                	jae    c000a919 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000a912:	89 04 24             	mov    DWORD PTR [esp],eax
c000a915:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a919:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000a91c:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000a91f:	29 f7                	sub    edi,esi
c000a921:	89 f8                	mov    eax,edi
c000a923:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000a927:	99                   	cdq    
c000a928:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000a92b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a92f:	19 d0                	sbb    eax,edx
c000a931:	73 07                	jae    c000a93a <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000a933:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a936:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a93a:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a93d:	89 ea                	mov    edx,ebp
c000a93f:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000a943:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a948:	74 0d                	je     c000a957 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000a94a:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000a94d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000a951:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a955:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a957:	85 d2                	test   edx,edx
c000a959:	74 11                	je     c000a96c <Pipe::read(unsigned long long, void*, int*)+0xac>
c000a95b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a95f:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000a962:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000a966:	89 d1                	mov    ecx,edx
c000a968:	89 c7                	mov    edi,eax
c000a96a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a96c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a96f:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000a972:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000a975:	99                   	cdq    
c000a976:	89 f7                	mov    edi,esi
c000a978:	03 04 24             	add    eax,DWORD PTR [esp]
c000a97b:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000a97f:	c1 ff 1f             	sar    edi,0x1f
c000a982:	57                   	push   edi
c000a983:	56                   	push   esi
c000a984:	52                   	push   edx
c000a985:	50                   	push   eax
c000a986:	e8 d5 7d 01 00       	call   c0022760 <__umoddi3>
c000a98b:	83 c4 10             	add    esp,0x10
c000a98e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a991:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a996:	75 10                	jne    c000a9a8 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000a998:	83 ec 0c             	sub    esp,0xc
c000a99b:	68 e6 40 02 c0       	push   0xc00240e6
c000a9a0:	e8 78 a3 00 00       	call   c0014d1d <Krnl::panic(char const*)>
c000a9a5:	83 c4 10             	add    esp,0x10
c000a9a8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a9ac:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a9af:	89 10                	mov    DWORD PTR [eax],edx
c000a9b1:	83 c4 1c             	add    esp,0x1c
c000a9b4:	31 c0                	xor    eax,eax
c000a9b6:	5b                   	pop    ebx
c000a9b7:	5e                   	pop    esi
c000a9b8:	5f                   	pop    edi
c000a9b9:	5d                   	pop    ebp
c000a9ba:	c3                   	ret    
c000a9bb:	90                   	nop

c000a9bc <Pipe::Pipe(int)>:
c000a9bc:	83 ec 0c             	sub    esp,0xc
c000a9bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a9c3:	83 ec 08             	sub    esp,0x8
c000a9c6:	6a 00                	push   0x0
c000a9c8:	50                   	push   eax
c000a9c9:	e8 58 0e 00 00       	call   c000b826 <UnixFile::UnixFile(int)>
c000a9ce:	83 c4 10             	add    esp,0x10
c000a9d1:	ba 0c 41 02 c0       	mov    edx,0xc002410c
c000a9d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a9da:	89 10                	mov    DWORD PTR [eax],edx
c000a9dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a9e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000a9e4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a9e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a9eb:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000a9f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a9f6:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000a9fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa01:	83 ec 0c             	sub    esp,0xc
c000aa04:	50                   	push   eax
c000aa05:	e8 ad f2 ff ff       	call   c0009cb7 <malloc>
c000aa0a:	83 c4 10             	add    esp,0x10
c000aa0d:	89 c2                	mov    edx,eax
c000aa0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa13:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000aa16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa1a:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000aa1e:	90                   	nop
c000aa1f:	83 c4 0c             	add    esp,0xc
c000aa22:	c3                   	ret    
c000aa23:	90                   	nop

c000aa24 <VgaText::isAtty()>:
c000aa24:	b0 01                	mov    al,0x1
c000aa26:	c3                   	ret    
c000aa27:	90                   	nop

c000aa28 <VgaText::~VgaText()>:
c000aa28:	83 ec 0c             	sub    esp,0xc
c000aa2b:	ba 94 41 02 c0       	mov    edx,0xc0024194
c000aa30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa34:	89 10                	mov    DWORD PTR [eax],edx
c000aa36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa3a:	83 ec 0c             	sub    esp,0xc
c000aa3d:	50                   	push   eax
c000aa3e:	e8 c5 0f 00 00       	call   c000ba08 <UnixFile::~UnixFile()>
c000aa43:	83 c4 10             	add    esp,0x10
c000aa46:	90                   	nop
c000aa47:	83 c4 0c             	add    esp,0xc
c000aa4a:	c3                   	ret    
c000aa4b:	90                   	nop

c000aa4c <VgaText::~VgaText()>:
c000aa4c:	83 ec 0c             	sub    esp,0xc
c000aa4f:	83 ec 0c             	sub    esp,0xc
c000aa52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aa56:	e8 cd ff ff ff       	call   c000aa28 <VgaText::~VgaText()>
c000aa5b:	83 c4 10             	add    esp,0x10
c000aa5e:	83 ec 08             	sub    esp,0x8
c000aa61:	68 b4 01 00 00       	push   0x1b4
c000aa66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aa6a:	e8 75 24 00 00       	call   c000cee4 <operator delete(void*, unsigned long)>
c000aa6f:	83 c4 10             	add    esp,0x10
c000aa72:	83 c4 0c             	add    esp,0xc
c000aa75:	c3                   	ret    

c000aa76 <VgaText::read(unsigned long long, void*, int*)>:
c000aa76:	83 ec 10             	sub    esp,0x10
c000aa79:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aa7d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aa81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aa85:	e8 65 56 00 00       	call   c00100ef <readKeyboard(VgaText*, char*, unsigned long)>
c000aa8a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000aa8e:	89 02                	mov    DWORD PTR [edx],eax
c000aa90:	31 c0                	xor    eax,eax
c000aa92:	83 c4 1c             	add    esp,0x1c
c000aa95:	c3                   	ret    

c000aa96 <setTerminalScrollLock(bool)>:
c000aa96:	c3                   	ret    

c000aa97 <addToTerminalCycle(VgaText*)>:
c000aa97:	8b 15 80 7e 02 c0    	mov    edx,DWORD PTR ds:0xc0027e80
c000aa9d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aaa1:	85 d2                	test   edx,edx
c000aaa3:	75 09                	jne    c000aaae <addToTerminalCycle(VgaText*)+0x17>
c000aaa5:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c000aaa8:	a3 80 7e 02 c0       	mov    ds:0xc0027e80,eax
c000aaad:	c3                   	ret    
c000aaae:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c000aab1:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c000aab4:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c000aab7:	c3                   	ret    

c000aab8 <installVgaTextImplementation()>:
c000aab8:	83 ec 10             	sub    esp,0x10
c000aabb:	6a 20                	push   0x20
c000aabd:	6a 00                	push   0x0
c000aabf:	68 60 7e 02 c0       	push   0xc0027e60
c000aac4:	e8 b3 5b ff ff       	call   c000067c <memset>
c000aac9:	83 c4 1c             	add    esp,0x1c
c000aacc:	c3                   	ret    

c000aacd <scrollTerminalScrollLock(int)>:
c000aacd:	c3                   	ret    

c000aace <VgaText::updateTitle()>:
c000aace:	53                   	push   ebx
c000aacf:	31 c0                	xor    eax,eax
c000aad1:	83 ec 58             	sub    esp,0x58
c000aad4:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000aad8:	89 e1                	mov    ecx,esp
c000aada:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000aade:	40                   	inc    eax
c000aadf:	83 f8 50             	cmp    eax,0x50
c000aae2:	75 f6                	jne    c000aada <VgaText::updateTitle()+0xc>
c000aae4:	31 c0                	xor    eax,eax
c000aae6:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c000aaed:	84 db                	test   bl,bl
c000aaef:	74 06                	je     c000aaf7 <VgaText::updateTitle()+0x29>
c000aaf1:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000aaf4:	40                   	inc    eax
c000aaf5:	eb ef                	jmp    c000aae6 <VgaText::updateTitle()+0x18>
c000aaf7:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c000aafa:	85 c0                	test   eax,eax
c000aafc:	74 09                	je     c000ab07 <VgaText::updateTitle()+0x39>
c000aafe:	53                   	push   ebx
c000aaff:	53                   	push   ebx
c000ab00:	51                   	push   ecx
c000ab01:	52                   	push   edx
c000ab02:	ff d0                	call   eax
c000ab04:	83 c4 10             	add    esp,0x10
c000ab07:	83 c4 58             	add    esp,0x58
c000ab0a:	5b                   	pop    ebx
c000ab0b:	c3                   	ret    

c000ab0c <VgaText::load()>:
c000ab0c:	53                   	push   ebx
c000ab0d:	31 c0                	xor    eax,eax
c000ab0f:	83 ec 58             	sub    esp,0x58
c000ab12:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ab16:	89 e2                	mov    edx,esp
c000ab18:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000ab1c:	40                   	inc    eax
c000ab1d:	83 f8 50             	cmp    eax,0x50
c000ab20:	75 f6                	jne    c000ab18 <VgaText::load()+0xc>
c000ab22:	31 c0                	xor    eax,eax
c000ab24:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c000ab2b:	84 c9                	test   cl,cl
c000ab2d:	74 06                	je     c000ab35 <VgaText::load()+0x29>
c000ab2f:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000ab32:	40                   	inc    eax
c000ab33:	eb ef                	jmp    c000ab24 <VgaText::load()+0x18>
c000ab35:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c000ab38:	85 c0                	test   eax,eax
c000ab3a:	74 09                	je     c000ab45 <VgaText::load()+0x39>
c000ab3c:	51                   	push   ecx
c000ab3d:	51                   	push   ecx
c000ab3e:	52                   	push   edx
c000ab3f:	53                   	push   ebx
c000ab40:	ff d0                	call   eax
c000ab42:	83 c4 10             	add    esp,0x10
c000ab45:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c000ab48:	85 c0                	test   eax,eax
c000ab4a:	74 09                	je     c000ab55 <VgaText::load()+0x49>
c000ab4c:	83 ec 0c             	sub    esp,0xc
c000ab4f:	53                   	push   ebx
c000ab50:	ff d0                	call   eax
c000ab52:	83 c4 10             	add    esp,0x10
c000ab55:	83 c4 58             	add    esp,0x58
c000ab58:	5b                   	pop    ebx
c000ab59:	c3                   	ret    

c000ab5a <VgaText::updateCursor()>:
c000ab5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ab5e:	39 05 84 7e 02 c0    	cmp    DWORD PTR ds:0xc0027e84,eax
c000ab64:	75 09                	jne    c000ab6f <VgaText::updateCursor()+0x15>
c000ab66:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000ab69:	85 c0                	test   eax,eax
c000ab6b:	74 02                	je     c000ab6f <VgaText::updateCursor()+0x15>
c000ab6d:	ff e0                	jmp    eax
c000ab6f:	c3                   	ret    

c000ab70 <VgaText::doANSI_SGR(int)>:
c000ab70:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ab74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ab78:	85 d2                	test   edx,edx
c000ab7a:	75 0b                	jne    c000ab87 <VgaText::doANSI_SGR(int)+0x17>
c000ab7c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000ab7f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000ab82:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000ab85:	eb 59                	jmp    c000abe0 <VgaText::doANSI_SGR(int)+0x70>
c000ab87:	83 fa 07             	cmp    edx,0x7
c000ab8a:	75 0b                	jne    c000ab97 <VgaText::doANSI_SGR(int)+0x27>
c000ab8c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000ab8f:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000ab92:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000ab95:	eb 49                	jmp    c000abe0 <VgaText::doANSI_SGR(int)+0x70>
c000ab97:	83 fa 1b             	cmp    edx,0x1b
c000ab9a:	74 e0                	je     c000ab7c <VgaText::doANSI_SGR(int)+0xc>
c000ab9c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000ab9f:	83 f9 07             	cmp    ecx,0x7
c000aba2:	77 09                	ja     c000abad <VgaText::doANSI_SGR(int)+0x3d>
c000aba4:	8b 14 8d 00 72 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd8e00]
c000abab:	eb 20                	jmp    c000abcd <VgaText::doANSI_SGR(int)+0x5d>
c000abad:	8d 4a d8             	lea    ecx,[edx-0x28]
c000abb0:	83 f9 07             	cmp    ecx,0x7
c000abb3:	77 09                	ja     c000abbe <VgaText::doANSI_SGR(int)+0x4e>
c000abb5:	8b 14 8d 00 72 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd8e00]
c000abbc:	eb 22                	jmp    c000abe0 <VgaText::doANSI_SGR(int)+0x70>
c000abbe:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000abc1:	83 f9 07             	cmp    ecx,0x7
c000abc4:	77 0b                	ja     c000abd1 <VgaText::doANSI_SGR(int)+0x61>
c000abc6:	8b 14 95 b8 70 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8f48]
c000abcd:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000abd0:	c3                   	ret    
c000abd1:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000abd4:	83 f9 07             	cmp    ecx,0x7
c000abd7:	77 0a                	ja     c000abe3 <VgaText::doANSI_SGR(int)+0x73>
c000abd9:	8b 14 95 90 70 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8f70]
c000abe0:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000abe3:	c3                   	ret    

c000abe4 <VgaText::setDefaultBgColour(VgaColour)>:
c000abe4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000abe8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000abec:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000abef:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000abf2:	c3                   	ret    
c000abf3:	90                   	nop

c000abf4 <VgaText::setDefaultFgColour(VgaColour)>:
c000abf4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000abf8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000abfc:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000abff:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000ac02:	c3                   	ret    
c000ac03:	90                   	nop

c000ac04 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000ac04:	53                   	push   ebx
c000ac05:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ac09:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ac0d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ac11:	51                   	push   ecx
c000ac12:	e8 cd ff ff ff       	call   c000abe4 <VgaText::setDefaultBgColour(VgaColour)>
c000ac17:	58                   	pop    eax
c000ac18:	5a                   	pop    edx
c000ac19:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000ac1d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ac21:	5b                   	pop    ebx
c000ac22:	eb d0                	jmp    c000abf4 <VgaText::setDefaultFgColour(VgaColour)>

c000ac24 <VgaText::setTitleTextColour(VgaColour)>:
c000ac24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac28:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ac2c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c000ac2f:	e9 9a fe ff ff       	jmp    c000aace <VgaText::updateTitle()>

c000ac34 <VgaText::setTitleColour(VgaColour)>:
c000ac34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac38:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ac3c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000ac3f:	e9 8a fe ff ff       	jmp    c000aace <VgaText::updateTitle()>

c000ac44 <VgaText::setTitle(char*)>:
c000ac44:	53                   	push   ebx
c000ac45:	83 ec 10             	sub    esp,0x10
c000ac48:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ac4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac50:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c000ac56:	50                   	push   eax
c000ac57:	e8 dc 5a ff ff       	call   c0000738 <strcpy>
c000ac5c:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000ac60:	83 c4 18             	add    esp,0x18
c000ac63:	5b                   	pop    ebx
c000ac64:	e9 65 fe ff ff       	jmp    c000aace <VgaText::updateTitle()>
c000ac69:	90                   	nop

c000ac6a <VgaText::combineColours(unsigned char, unsigned char)>:
c000ac6a:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000ac6e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000ac73:	83 e0 0f             	and    eax,0xf
c000ac76:	c1 e2 04             	shl    edx,0x4
c000ac79:	09 d0                	or     eax,edx
c000ac7b:	c3                   	ret    

c000ac7c <VgaText::scrollScreen()>:
c000ac7c:	55                   	push   ebp
c000ac7d:	b9 01 00 00 00       	mov    ecx,0x1
c000ac82:	57                   	push   edi
c000ac83:	56                   	push   esi
c000ac84:	53                   	push   ebx
c000ac85:	83 ec 0c             	sub    esp,0xc
c000ac88:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ac8c:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c000ac92:	31 ff                	xor    edi,edi
c000ac94:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000ac97:	83 f9 17             	cmp    ecx,0x17
c000ac9a:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c000ac9d:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c000aca4:	75 27                	jne    c000accd <VgaText::scrollScreen()+0x51>
c000aca6:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000aca9:	01 f5                	add    ebp,esi
c000acab:	f7 c7 01 00 00 00    	test   edi,0x1
c000acb1:	74 16                	je     c000acc9 <VgaText::scrollScreen()+0x4d>
c000acb3:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000acb7:	50                   	push   eax
c000acb8:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000acbc:	50                   	push   eax
c000acbd:	e8 a8 ff ff ff       	call   c000ac6a <VgaText::combineColours(unsigned char, unsigned char)>
c000acc2:	5a                   	pop    edx
c000acc3:	5a                   	pop    edx
c000acc4:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c000acc7:	eb 04                	jmp    c000accd <VgaText::scrollScreen()+0x51>
c000acc9:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c000accd:	47                   	inc    edi
c000acce:	46                   	inc    esi
c000accf:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000acd5:	75 bd                	jne    c000ac94 <VgaText::scrollScreen()+0x18>
c000acd7:	41                   	inc    ecx
c000acd8:	83 f9 18             	cmp    ecx,0x18
c000acdb:	75 af                	jne    c000ac8c <VgaText::scrollScreen()+0x10>
c000acdd:	39 1d 84 7e 02 c0    	cmp    DWORD PTR ds:0xc0027e84,ebx
c000ace3:	75 1b                	jne    c000ad00 <VgaText::scrollScreen()+0x84>
c000ace5:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000ace9:	74 05                	je     c000acf0 <VgaText::scrollScreen()+0x74>
c000aceb:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000acee:	eb 10                	jmp    c000ad00 <VgaText::scrollScreen()+0x84>
c000acf0:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c000acf3:	85 c0                	test   eax,eax
c000acf5:	74 09                	je     c000ad00 <VgaText::scrollScreen()+0x84>
c000acf7:	83 ec 0c             	sub    esp,0xc
c000acfa:	53                   	push   ebx
c000acfb:	ff d0                	call   eax
c000acfd:	83 c4 10             	add    esp,0x10
c000ad00:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000ad04:	83 c4 0c             	add    esp,0xc
c000ad07:	5b                   	pop    ebx
c000ad08:	5e                   	pop    esi
c000ad09:	5f                   	pop    edi
c000ad0a:	5d                   	pop    ebp
c000ad0b:	e9 4a fe ff ff       	jmp    c000ab5a <VgaText::updateCursor()>

c000ad10 <VgaText::combineCharAndColour(char, unsigned char)>:
c000ad10:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000ad15:	c1 e0 08             	shl    eax,0x8
c000ad18:	89 c2                	mov    edx,eax
c000ad1a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000ad1f:	09 d0                	or     eax,edx
c000ad21:	c3                   	ret    

c000ad22 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000ad22:	56                   	push   esi
c000ad23:	53                   	push   ebx
c000ad24:	51                   	push   ecx
c000ad25:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ad29:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ad2e:	50                   	push   eax
c000ad2f:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ad34:	50                   	push   eax
c000ad35:	e8 30 ff ff ff       	call   c000ac6a <VgaText::combineColours(unsigned char, unsigned char)>
c000ad3a:	5b                   	pop    ebx
c000ad3b:	0f b6 c0             	movzx  eax,al
c000ad3e:	5e                   	pop    esi
c000ad3f:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000ad44:	50                   	push   eax
c000ad45:	53                   	push   ebx
c000ad46:	e8 c5 ff ff ff       	call   c000ad10 <VgaText::combineCharAndColour(char, unsigned char)>
c000ad4b:	5a                   	pop    edx
c000ad4c:	5e                   	pop    esi
c000ad4d:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c000ad50:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000ad56:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000ad5a:	0f b7 d2             	movzx  edx,dx
c000ad5d:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000ad61:	39 0d 84 7e 02 c0    	cmp    DWORD PTR ds:0xc0027e84,ecx
c000ad67:	75 10                	jne    c000ad79 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000ad69:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c000ad6c:	85 c0                	test   eax,eax
c000ad6e:	74 09                	je     c000ad79 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000ad70:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000ad74:	5a                   	pop    edx
c000ad75:	5b                   	pop    ebx
c000ad76:	5e                   	pop    esi
c000ad77:	ff e0                	jmp    eax
c000ad79:	58                   	pop    eax
c000ad7a:	5b                   	pop    ebx
c000ad7b:	5e                   	pop    esi
c000ad7c:	c3                   	ret    
c000ad7d:	90                   	nop

c000ad7e <VgaText::getCursorX()>:
c000ad7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad82:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000ad85:	c3                   	ret    

c000ad86 <VgaText::getCursorY()>:
c000ad86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad8a:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000ad8d:	c3                   	ret    

c000ad8e <VgaText::setCursor(int, int)>:
c000ad8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad92:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ad96:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000ad99:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ad9d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000ada0:	e9 b5 fd ff ff       	jmp    c000ab5a <VgaText::updateCursor()>

c000ada5 <setActiveTerminal(VgaText*)>:
c000ada5:	53                   	push   ebx
c000ada6:	83 ec 08             	sub    esp,0x8
c000ada9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000adad:	85 db                	test   ebx,ebx
c000adaf:	75 11                	jne    c000adc2 <setActiveTerminal(VgaText*)+0x1d>
c000adb1:	c7 44 24 10 20 41 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024120
c000adb9:	83 c4 08             	add    esp,0x8
c000adbc:	5b                   	pop    ebx
c000adbd:	e9 5b 9f 00 00       	jmp    c0014d1d <Krnl::panic(char const*)>
c000adc2:	a1 84 7e 02 c0       	mov    eax,ds:0xc0027e84
c000adc7:	85 c0                	test   eax,eax
c000adc9:	74 0c                	je     c000add7 <setActiveTerminal(VgaText*)+0x32>
c000adcb:	83 ec 0c             	sub    esp,0xc
c000adce:	50                   	push   eax
c000adcf:	e8 86 fd ff ff       	call   c000ab5a <VgaText::updateCursor()>
c000add4:	83 c4 10             	add    esp,0x10
c000add7:	89 1d 84 7e 02 c0    	mov    DWORD PTR ds:0xc0027e84,ebx
c000addd:	51                   	push   ecx
c000adde:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ade1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ade4:	53                   	push   ebx
c000ade5:	e8 a4 ff ff ff       	call   c000ad8e <VgaText::setCursor(int, int)>
c000adea:	83 c4 10             	add    esp,0x10
c000aded:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000adf1:	75 07                	jne    c000adfa <setActiveTerminal(VgaText*)+0x55>
c000adf3:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c000adfa:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000adfe:	83 c4 08             	add    esp,0x8
c000ae01:	5b                   	pop    ebx
c000ae02:	e9 05 fd ff ff       	jmp    c000ab0c <VgaText::load()>

c000ae07 <doTerminalCycle()>:
c000ae07:	83 ec 18             	sub    esp,0x18
c000ae0a:	a1 80 7e 02 c0       	mov    eax,ds:0xc0027e80
c000ae0f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000ae12:	50                   	push   eax
c000ae13:	a3 80 7e 02 c0       	mov    ds:0xc0027e80,eax
c000ae18:	e8 88 ff ff ff       	call   c000ada5 <setActiveTerminal(VgaText*)>
c000ae1d:	83 c4 1c             	add    esp,0x1c
c000ae20:	c3                   	ret    
c000ae21:	90                   	nop

c000ae22 <VgaText::setCursorX(int)>:
c000ae22:	83 ec 10             	sub    esp,0x10
c000ae25:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae29:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000ae2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae30:	50                   	push   eax
c000ae31:	e8 58 ff ff ff       	call   c000ad8e <VgaText::setCursor(int, int)>
c000ae36:	83 c4 1c             	add    esp,0x1c
c000ae39:	c3                   	ret    

c000ae3a <VgaText::setCursorY(int)>:
c000ae3a:	83 ec 10             	sub    esp,0x10
c000ae3d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae41:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ae45:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000ae48:	50                   	push   eax
c000ae49:	e8 40 ff ff ff       	call   c000ad8e <VgaText::setCursor(int, int)>
c000ae4e:	83 c4 1c             	add    esp,0x1c
c000ae51:	c3                   	ret    

c000ae52 <VgaText::incrementCursor(bool)>:
c000ae52:	56                   	push   esi
c000ae53:	53                   	push   ebx
c000ae54:	51                   	push   ecx
c000ae55:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ae59:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ae5d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000ae60:	40                   	inc    eax
c000ae61:	83 f8 50             	cmp    eax,0x50
c000ae64:	74 05                	je     c000ae6b <VgaText::incrementCursor(bool)+0x19>
c000ae66:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ae69:	eb 24                	jmp    c000ae8f <VgaText::incrementCursor(bool)+0x3d>
c000ae6b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000ae6e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ae75:	8d 50 01             	lea    edx,[eax+0x1]
c000ae78:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000ae7b:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000ae7e:	75 0f                	jne    c000ae8f <VgaText::incrementCursor(bool)+0x3d>
c000ae80:	83 ec 0c             	sub    esp,0xc
c000ae83:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000ae86:	53                   	push   ebx
c000ae87:	e8 f0 fd ff ff       	call   c000ac7c <VgaText::scrollScreen()>
c000ae8c:	83 c4 10             	add    esp,0x10
c000ae8f:	89 f0                	mov    eax,esi
c000ae91:	84 c0                	test   al,al
c000ae93:	74 0c                	je     c000aea1 <VgaText::incrementCursor(bool)+0x4f>
c000ae95:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ae99:	5a                   	pop    edx
c000ae9a:	5b                   	pop    ebx
c000ae9b:	5e                   	pop    esi
c000ae9c:	e9 b9 fc ff ff       	jmp    c000ab5a <VgaText::updateCursor()>
c000aea1:	58                   	pop    eax
c000aea2:	5b                   	pop    ebx
c000aea3:	5e                   	pop    esi
c000aea4:	c3                   	ret    
c000aea5:	90                   	nop

c000aea6 <VgaText::decrementCursor(bool)>:
c000aea6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aeaa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000aeae:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000aeb1:	85 c0                	test   eax,eax
c000aeb3:	74 04                	je     c000aeb9 <VgaText::decrementCursor(bool)+0x13>
c000aeb5:	48                   	dec    eax
c000aeb6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000aeb9:	84 c9                	test   cl,cl
c000aebb:	74 09                	je     c000aec6 <VgaText::decrementCursor(bool)+0x20>
c000aebd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aec1:	e9 94 fc ff ff       	jmp    c000ab5a <VgaText::updateCursor()>
c000aec6:	c3                   	ret    
c000aec7:	90                   	nop

c000aec8 <VgaText::putchar(char, VgaColour, VgaColour)>:
c000aec8:	53                   	push   ebx
c000aec9:	83 ec 08             	sub    esp,0x8
c000aecc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aed0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000aed4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000aed8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000aedc:	3c 07                	cmp    al,0x7
c000aede:	75 21                	jne    c000af01 <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c000aee0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000aee8:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c000aef0:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c000aef8:	83 c4 08             	add    esp,0x8
c000aefb:	5b                   	pop    ebx
c000aefc:	e9 5e 2f 00 00       	jmp    c000de5f <Krnl::beep(int, int, bool)>
c000af01:	3c 0d                	cmp    al,0xd
c000af03:	75 09                	jne    c000af0e <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c000af05:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000af0c:	eb 2c                	jmp    c000af3a <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c000af0e:	3c 0a                	cmp    al,0xa
c000af10:	75 31                	jne    c000af43 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c000af12:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000af15:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000af1c:	8d 50 01             	lea    edx,[eax+0x1]
c000af1f:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000af22:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000af25:	75 0f                	jne    c000af36 <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c000af27:	83 ec 0c             	sub    esp,0xc
c000af2a:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000af2d:	53                   	push   ebx
c000af2e:	e8 49 fd ff ff       	call   c000ac7c <VgaText::scrollScreen()>
c000af33:	83 c4 10             	add    esp,0x10
c000af36:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000af3a:	83 c4 08             	add    esp,0x8
c000af3d:	5b                   	pop    ebx
c000af3e:	e9 17 fc ff ff       	jmp    c000ab5a <VgaText::updateCursor()>
c000af43:	3c 08                	cmp    al,0x8
c000af45:	75 25                	jne    c000af6c <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c000af47:	50                   	push   eax
c000af48:	50                   	push   eax
c000af49:	6a 01                	push   0x1
c000af4b:	53                   	push   ebx
c000af4c:	e8 55 ff ff ff       	call   c000aea6 <VgaText::decrementCursor(bool)>
c000af51:	5a                   	pop    edx
c000af52:	59                   	pop    ecx
c000af53:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000af56:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000af59:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000af5c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000af5f:	6a 20                	push   0x20
c000af61:	53                   	push   ebx
c000af62:	e8 bb fd ff ff       	call   c000ad22 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000af67:	83 c4 28             	add    esp,0x28
c000af6a:	5b                   	pop    ebx
c000af6b:	c3                   	ret    
c000af6c:	83 ec 08             	sub    esp,0x8
c000af6f:	0f be c0             	movsx  eax,al
c000af72:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000af75:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000af78:	51                   	push   ecx
c000af79:	52                   	push   edx
c000af7a:	50                   	push   eax
c000af7b:	53                   	push   ebx
c000af7c:	e8 a1 fd ff ff       	call   c000ad22 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000af81:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000af85:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000af8d:	83 c4 28             	add    esp,0x28
c000af90:	5b                   	pop    ebx
c000af91:	e9 bc fe ff ff       	jmp    c000ae52 <VgaText::incrementCursor(bool)>

c000af96 <VgaText::doUpdate()>:
c000af96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af9a:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c000af9d:	85 c0                	test   eax,eax
c000af9f:	74 02                	je     c000afa3 <VgaText::doUpdate()+0xd>
c000afa1:	ff e0                	jmp    eax
c000afa3:	c3                   	ret    

c000afa4 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000afa4:	55                   	push   ebp
c000afa5:	31 ed                	xor    ebp,ebp
c000afa7:	57                   	push   edi
c000afa8:	56                   	push   esi
c000afa9:	53                   	push   ebx
c000afaa:	83 ec 1c             	sub    esp,0x1c
c000afad:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000afb1:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000afb6:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000afbd:	50                   	push   eax
c000afbe:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000afc3:	50                   	push   eax
c000afc4:	e8 a1 fc ff ff       	call   c000ac6a <VgaText::combineColours(unsigned char, unsigned char)>
c000afc9:	59                   	pop    ecx
c000afca:	0f b6 c0             	movzx  eax,al
c000afcd:	5e                   	pop    esi
c000afce:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000afd3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000afd7:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000afda:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000afde:	0f b7 f6             	movzx  esi,si
c000afe1:	01 f6                	add    esi,esi
c000afe3:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000afe6:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000afe9:	84 c0                	test   al,al
c000afeb:	0f 84 fd 00 00 00    	je     c000b0ee <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c000aff1:	3c 0d                	cmp    al,0xd
c000aff3:	75 0c                	jne    c000b001 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c000aff5:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000affc:	e9 e7 00 00 00       	jmp    c000b0e8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000b001:	3c 0a                	cmp    al,0xa
c000b003:	75 47                	jne    c000b04c <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c000b005:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000b008:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b00f:	8d 48 01             	lea    ecx,[eax+0x1]
c000b012:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000b015:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c000b018:	75 0f                	jne    c000b029 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c000b01a:	83 ec 0c             	sub    esp,0xc
c000b01d:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000b020:	53                   	push   ebx
c000b021:	e8 56 fc ff ff       	call   c000ac7c <VgaText::scrollScreen()>
c000b026:	83 c4 10             	add    esp,0x10
c000b029:	83 ec 0c             	sub    esp,0xc
c000b02c:	31 ed                	xor    ebp,ebp
c000b02e:	53                   	push   ebx
c000b02f:	e8 26 fb ff ff       	call   c000ab5a <VgaText::updateCursor()>
c000b034:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000b039:	83 c4 10             	add    esp,0x10
c000b03c:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000b03f:	0f b7 f6             	movzx  esi,si
c000b042:	01 f6                	add    esi,esi
c000b044:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000b047:	e9 9c 00 00 00       	jmp    c000b0e8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000b04c:	3c 08                	cmp    al,0x8
c000b04e:	75 35                	jne    c000b085 <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c000b050:	56                   	push   esi
c000b051:	56                   	push   esi
c000b052:	6a 01                	push   0x1
c000b054:	53                   	push   ebx
c000b055:	e8 4c fe ff ff       	call   c000aea6 <VgaText::decrementCursor(bool)>
c000b05a:	58                   	pop    eax
c000b05b:	5a                   	pop    edx
c000b05c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b05f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000b062:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000b065:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000b068:	6a 20                	push   0x20
c000b06a:	53                   	push   ebx
c000b06b:	e8 b2 fc ff ff       	call   c000ad22 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000b070:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000b075:	83 c4 20             	add    esp,0x20
c000b078:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000b07b:	0f b7 f6             	movzx  esi,si
c000b07e:	01 f6                	add    esi,esi
c000b080:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000b083:	eb 63                	jmp    c000b0e8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000b085:	51                   	push   ecx
c000b086:	51                   	push   ecx
c000b087:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b08b:	50                   	push   eax
c000b08c:	e8 7f fc ff ff       	call   c000ad10 <VgaText::combineCharAndColour(char, unsigned char)>
c000b091:	83 c4 10             	add    esp,0x10
c000b094:	66 89 06             	mov    WORD PTR [esi],ax
c000b097:	39 1d 84 7e 02 c0    	cmp    DWORD PTR ds:0xc0027e84,ebx
c000b09d:	75 21                	jne    c000b0c0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000b09f:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c000b0a2:	85 c0                	test   eax,eax
c000b0a4:	74 1a                	je     c000b0c0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000b0a6:	52                   	push   edx
c000b0a7:	52                   	push   edx
c000b0a8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b0ab:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000b0ae:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b0b2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b0b6:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c000b0b9:	51                   	push   ecx
c000b0ba:	53                   	push   ebx
c000b0bb:	ff d0                	call   eax
c000b0bd:	83 c4 20             	add    esp,0x20
c000b0c0:	83 c6 02             	add    esi,0x2
c000b0c3:	50                   	push   eax
c000b0c4:	50                   	push   eax
c000b0c5:	6a 00                	push   0x0
c000b0c7:	53                   	push   ebx
c000b0c8:	e8 85 fd ff ff       	call   c000ae52 <VgaText::incrementCursor(bool)>
c000b0cd:	83 c4 10             	add    esp,0x10
c000b0d0:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c000b0d4:	75 0d                	jne    c000b0e3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c000b0d6:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000b0db:	0f b7 f6             	movzx  esi,si
c000b0de:	01 f6                	add    esi,esi
c000b0e0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000b0e3:	bd 01 00 00 00       	mov    ebp,0x1
c000b0e8:	47                   	inc    edi
c000b0e9:	e9 f8 fe ff ff       	jmp    c000afe6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c000b0ee:	83 ec 0c             	sub    esp,0xc
c000b0f1:	53                   	push   ebx
c000b0f2:	e8 63 fa ff ff       	call   c000ab5a <VgaText::updateCursor()>
c000b0f7:	83 c4 10             	add    esp,0x10
c000b0fa:	89 e8                	mov    eax,ebp
c000b0fc:	84 c0                	test   al,al
c000b0fe:	74 0c                	je     c000b10c <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c000b100:	83 ec 0c             	sub    esp,0xc
c000b103:	53                   	push   ebx
c000b104:	e8 8d fe ff ff       	call   c000af96 <VgaText::doUpdate()>
c000b109:	83 c4 10             	add    esp,0x10
c000b10c:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000b113:	83 c4 1c             	add    esp,0x1c
c000b116:	5b                   	pop    ebx
c000b117:	5e                   	pop    esi
c000b118:	5f                   	pop    edi
c000b119:	5d                   	pop    ebp
c000b11a:	c3                   	ret    
c000b11b:	90                   	nop

c000b11c <VgaText::clearScreen()>:
c000b11c:	57                   	push   edi
c000b11d:	56                   	push   esi
c000b11e:	31 f6                	xor    esi,esi
c000b120:	53                   	push   ebx
c000b121:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b125:	52                   	push   edx
c000b126:	6a 00                	push   0x0
c000b128:	6a 00                	push   0x0
c000b12a:	53                   	push   ebx
c000b12b:	e8 5e fc ff ff       	call   c000ad8e <VgaText::setCursor(int, int)>
c000b130:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000b137:	83 c4 10             	add    esp,0x10
c000b13a:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c000b13d:	7e 20                	jle    c000b15f <VgaText::clearScreen()+0x43>
c000b13f:	31 ff                	xor    edi,edi
c000b141:	50                   	push   eax
c000b142:	50                   	push   eax
c000b143:	56                   	push   esi
c000b144:	57                   	push   edi
c000b145:	47                   	inc    edi
c000b146:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000b149:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000b14c:	6a 20                	push   0x20
c000b14e:	53                   	push   ebx
c000b14f:	e8 ce fb ff ff       	call   c000ad22 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000b154:	83 c4 20             	add    esp,0x20
c000b157:	83 ff 50             	cmp    edi,0x50
c000b15a:	75 e5                	jne    c000b141 <VgaText::clearScreen()+0x25>
c000b15c:	46                   	inc    esi
c000b15d:	eb db                	jmp    c000b13a <VgaText::clearScreen()+0x1e>
c000b15f:	83 ec 0c             	sub    esp,0xc
c000b162:	53                   	push   ebx
c000b163:	e8 2e fe ff ff       	call   c000af96 <VgaText::doUpdate()>
c000b168:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000b16f:	83 c4 10             	add    esp,0x10
c000b172:	5b                   	pop    ebx
c000b173:	5e                   	pop    esi
c000b174:	5f                   	pop    edi
c000b175:	c3                   	ret    

c000b176 <VgaText::putchar(char)>:
c000b176:	56                   	push   esi
c000b177:	53                   	push   ebx
c000b178:	83 ec 14             	sub    esp,0x14
c000b17b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b17f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b183:	3c 5b                	cmp    al,0x5b
c000b185:	75 18                	jne    c000b19f <VgaText::putchar(char)+0x29>
c000b187:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c000b18b:	74 1f                	je     c000b1ac <VgaText::putchar(char)+0x36>
c000b18d:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000b193:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c000b19a:	e9 bd 00 00 00       	jmp    c000b25c <VgaText::putchar(char)+0xe6>
c000b19f:	3c 1b                	cmp    al,0x1b
c000b1a1:	75 09                	jne    c000b1ac <VgaText::putchar(char)+0x36>
c000b1a3:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c000b1a7:	e9 b0 00 00 00       	jmp    c000b25c <VgaText::putchar(char)+0xe6>
c000b1ac:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000b1af:	84 c9                	test   cl,cl
c000b1b1:	0f 84 92 00 00 00    	je     c000b249 <VgaText::putchar(char)+0xd3>
c000b1b7:	8d 50 c0             	lea    edx,[eax-0x40]
c000b1ba:	80 fa 3e             	cmp    dl,0x3e
c000b1bd:	77 76                	ja     c000b235 <VgaText::putchar(char)+0xbf>
c000b1bf:	3c 6d                	cmp    al,0x6d
c000b1c1:	75 47                	jne    c000b20a <VgaText::putchar(char)+0x94>
c000b1c3:	31 f6                	xor    esi,esi
c000b1c5:	31 d2                	xor    edx,edx
c000b1c7:	31 c0                	xor    eax,eax
c000b1c9:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000b1cc:	7e 2d                	jle    c000b1fb <VgaText::putchar(char)+0x85>
c000b1ce:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c000b1d3:	80 fa 3b             	cmp    dl,0x3b
c000b1d6:	75 17                	jne    c000b1ef <VgaText::putchar(char)+0x79>
c000b1d8:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000b1dc:	50                   	push   eax
c000b1dd:	53                   	push   ebx
c000b1de:	e8 8d f9 ff ff       	call   c000ab70 <VgaText::doANSI_SGR(int)>
c000b1e3:	59                   	pop    ecx
c000b1e4:	31 d2                	xor    edx,edx
c000b1e6:	58                   	pop    eax
c000b1e7:	31 c0                	xor    eax,eax
c000b1e9:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000b1ed:	eb 09                	jmp    c000b1f8 <VgaText::putchar(char)+0x82>
c000b1ef:	6b c0 0a             	imul   eax,eax,0xa
c000b1f2:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000b1f6:	88 ca                	mov    dl,cl
c000b1f8:	46                   	inc    esi
c000b1f9:	eb ce                	jmp    c000b1c9 <VgaText::putchar(char)+0x53>
c000b1fb:	84 d2                	test   dl,dl
c000b1fd:	74 2e                	je     c000b22d <VgaText::putchar(char)+0xb7>
c000b1ff:	50                   	push   eax
c000b200:	53                   	push   ebx
c000b201:	e8 6a f9 ff ff       	call   c000ab70 <VgaText::doANSI_SGR(int)>
c000b206:	58                   	pop    eax
c000b207:	5a                   	pop    edx
c000b208:	eb 23                	jmp    c000b22d <VgaText::putchar(char)+0xb7>
c000b20a:	3c 4a                	cmp    al,0x4a
c000b20c:	75 1f                	jne    c000b22d <VgaText::putchar(char)+0xb7>
c000b20e:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c000b212:	75 19                	jne    c000b22d <VgaText::putchar(char)+0xb7>
c000b214:	83 ec 0c             	sub    esp,0xc
c000b217:	53                   	push   ebx
c000b218:	e8 ff fe ff ff       	call   c000b11c <VgaText::clearScreen()>
c000b21d:	83 c4 0c             	add    esp,0xc
c000b220:	6a 00                	push   0x0
c000b222:	6a 00                	push   0x0
c000b224:	53                   	push   ebx
c000b225:	e8 64 fb ff ff       	call   c000ad8e <VgaText::setCursor(int, int)>
c000b22a:	83 c4 10             	add    esp,0x10
c000b22d:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c000b233:	eb 27                	jmp    c000b25c <VgaText::putchar(char)+0xe6>
c000b235:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c000b238:	83 fa 0e             	cmp    edx,0xe
c000b23b:	7f 1f                	jg     c000b25c <VgaText::putchar(char)+0xe6>
c000b23d:	8d 4a 01             	lea    ecx,[edx+0x1]
c000b240:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c000b243:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c000b247:	eb 13                	jmp    c000b25c <VgaText::putchar(char)+0xe6>
c000b249:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000b24c:	0f be c0             	movsx  eax,al
c000b24f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000b252:	50                   	push   eax
c000b253:	53                   	push   ebx
c000b254:	e8 6f fc ff ff       	call   c000aec8 <VgaText::putchar(char, VgaColour, VgaColour)>
c000b259:	83 c4 10             	add    esp,0x10
c000b25c:	83 c4 14             	add    esp,0x14
c000b25f:	5b                   	pop    ebx
c000b260:	5e                   	pop    esi
c000b261:	c3                   	ret    

c000b262 <VgaText::putx(unsigned int)>:
c000b262:	57                   	push   edi
c000b263:	b9 11 00 00 00       	mov    ecx,0x11
c000b268:	56                   	push   esi
c000b269:	be 2e 41 02 c0       	mov    esi,0xc002412e
c000b26e:	53                   	push   ebx
c000b26f:	83 ec 20             	sub    esp,0x20
c000b272:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b276:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000b27a:	fc                   	cld    
c000b27b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b27d:	be 08 00 00 00       	mov    esi,0x8
c000b282:	50                   	push   eax
c000b283:	50                   	push   eax
c000b284:	89 d8                	mov    eax,ebx
c000b286:	c1 e3 04             	shl    ebx,0x4
c000b289:	c1 e8 1c             	shr    eax,0x1c
c000b28c:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000b291:	50                   	push   eax
c000b292:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b296:	e8 db fe ff ff       	call   c000b176 <VgaText::putchar(char)>
c000b29b:	83 c4 10             	add    esp,0x10
c000b29e:	4e                   	dec    esi
c000b29f:	75 e1                	jne    c000b282 <VgaText::putx(unsigned int)+0x20>
c000b2a1:	83 c4 20             	add    esp,0x20
c000b2a4:	5b                   	pop    ebx
c000b2a5:	5e                   	pop    esi
c000b2a6:	5f                   	pop    edi
c000b2a7:	c3                   	ret    

c000b2a8 <VgaText::puts(char const*)>:
c000b2a8:	53                   	push   ebx
c000b2a9:	83 ec 08             	sub    esp,0x8
c000b2ac:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b2b0:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000b2b3:	84 c0                	test   al,al
c000b2b5:	74 12                	je     c000b2c9 <VgaText::puts(char const*)+0x21>
c000b2b7:	43                   	inc    ebx
c000b2b8:	51                   	push   ecx
c000b2b9:	51                   	push   ecx
c000b2ba:	50                   	push   eax
c000b2bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b2bf:	e8 b2 fe ff ff       	call   c000b176 <VgaText::putchar(char)>
c000b2c4:	83 c4 10             	add    esp,0x10
c000b2c7:	eb e7                	jmp    c000b2b0 <VgaText::puts(char const*)+0x8>
c000b2c9:	83 c4 08             	add    esp,0x8
c000b2cc:	5b                   	pop    ebx
c000b2cd:	c3                   	ret    

c000b2ce <VgaText::VgaText(char const*)>:
c000b2ce:	57                   	push   edi
c000b2cf:	56                   	push   esi
c000b2d0:	53                   	push   ebx
c000b2d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2d5:	83 ec 08             	sub    esp,0x8
c000b2d8:	6a 00                	push   0x0
c000b2da:	50                   	push   eax
c000b2db:	e8 46 05 00 00       	call   c000b826 <UnixFile::UnixFile(int)>
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	ba 94 41 02 c0       	mov    edx,0xc0024194
c000b2e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2ec:	89 10                	mov    DWORD PTR [eax],edx
c000b2ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2f2:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c000b2f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2fd:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c000b304:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b308:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000b30c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b310:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c000b314:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b318:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000b31f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b323:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c000b32a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b32e:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c000b335:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b339:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000b340:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b344:	8d 50 60             	lea    edx,[eax+0x60]
c000b347:	bb 60 7e 02 c0       	mov    ebx,0xc0027e60
c000b34c:	b8 08 00 00 00       	mov    eax,0x8
c000b351:	fc                   	cld    
c000b352:	89 d7                	mov    edi,edx
c000b354:	89 de                	mov    esi,ebx
c000b356:	89 c1                	mov    ecx,eax
c000b358:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b35a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b35e:	05 82 00 00 00       	add    eax,0x82
c000b363:	83 ec 08             	sub    esp,0x8
c000b366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b36a:	50                   	push   eax
c000b36b:	e8 c8 53 ff ff       	call   c0000738 <strcpy>
c000b370:	83 c4 10             	add    esp,0x10
c000b373:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b377:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c000b37e:	83 ec 0c             	sub    esp,0xc
c000b381:	6a 01                	push   0x1
c000b383:	e8 e1 08 00 00       	call   c000bc69 <Virt::allocateKernelVirtualPages(int)>
c000b388:	83 c4 10             	add    esp,0x10
c000b38b:	89 c2                	mov    edx,eax
c000b38d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b391:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b394:	8b 1d 34 7f 02 c0    	mov    ebx,DWORD PTR ds:0xc0027f34
c000b39a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b39e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b3a1:	89 c6                	mov    esi,eax
c000b3a3:	e8 c6 ef ff ff       	call   c000a36e <Phys::allocatePage()>
c000b3a8:	68 05 0c 00 00       	push   0xc05
c000b3ad:	56                   	push   esi
c000b3ae:	50                   	push   eax
c000b3af:	53                   	push   ebx
c000b3b0:	e8 1f 0f 00 00       	call   c000c2d4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000b3b5:	83 c4 10             	add    esp,0x10
c000b3b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3bc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b3bf:	83 ec 04             	sub    esp,0x4
c000b3c2:	68 00 0f 00 00       	push   0xf00
c000b3c7:	6a 00                	push   0x0
c000b3c9:	50                   	push   eax
c000b3ca:	e8 ad 52 ff ff       	call   c000067c <memset>
c000b3cf:	83 c4 10             	add    esp,0x10
c000b3d2:	83 ec 04             	sub    esp,0x4
c000b3d5:	6a 00                	push   0x0
c000b3d7:	6a 07                	push   0x7
c000b3d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3dd:	e8 22 f8 ff ff       	call   c000ac04 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000b3e2:	83 c4 10             	add    esp,0x10
c000b3e5:	83 ec 04             	sub    esp,0x4
c000b3e8:	6a 00                	push   0x0
c000b3ea:	6a 00                	push   0x0
c000b3ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3f0:	e8 99 f9 ff ff       	call   c000ad8e <VgaText::setCursor(int, int)>
c000b3f5:	83 c4 10             	add    esp,0x10
c000b3f8:	83 ec 0c             	sub    esp,0xc
c000b3fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3ff:	e8 18 fd ff ff       	call   c000b11c <VgaText::clearScreen()>
c000b404:	83 c4 10             	add    esp,0x10
c000b407:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b40b:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c000b40f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b413:	05 02 01 00 00       	add    eax,0x102
c000b418:	83 ec 04             	sub    esp,0x4
c000b41b:	6a 30                	push   0x30
c000b41d:	6a 00                	push   0x0
c000b41f:	50                   	push   eax
c000b420:	e8 57 52 ff ff       	call   c000067c <memset>
c000b425:	83 c4 10             	add    esp,0x10
c000b428:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b42c:	05 32 01 00 00       	add    eax,0x132
c000b431:	83 ec 04             	sub    esp,0x4
c000b434:	68 80 00 00 00       	push   0x80
c000b439:	6a 00                	push   0x0
c000b43b:	50                   	push   eax
c000b43c:	e8 3b 52 ff ff       	call   c000067c <memset>
c000b441:	83 c4 10             	add    esp,0x10
c000b444:	90                   	nop
c000b445:	5b                   	pop    ebx
c000b446:	5e                   	pop    esi
c000b447:	5f                   	pop    edi
c000b448:	c3                   	ret    
c000b449:	90                   	nop

c000b44a <VgaText::receiveKey(unsigned char)>:
c000b44a:	55                   	push   ebp
c000b44b:	57                   	push   edi
c000b44c:	56                   	push   esi
c000b44d:	53                   	push   ebx
c000b44e:	83 ec 1c             	sub    esp,0x1c
c000b451:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b455:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b459:	84 db                	test   bl,bl
c000b45b:	0f 84 c6 00 00 00    	je     c000b527 <VgaText::receiveKey(unsigned char)+0xdd>
c000b461:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c000b467:	80 fb 08             	cmp    bl,0x8
c000b46a:	75 2c                	jne    c000b498 <VgaText::receiveKey(unsigned char)+0x4e>
c000b46c:	83 ec 0c             	sub    esp,0xc
c000b46f:	57                   	push   edi
c000b470:	e8 23 52 ff ff       	call   c0000698 <strlen>
c000b475:	83 c4 10             	add    esp,0x10
c000b478:	85 c0                	test   eax,eax
c000b47a:	74 41                	je     c000b4bd <VgaText::receiveKey(unsigned char)+0x73>
c000b47c:	50                   	push   eax
c000b47d:	50                   	push   eax
c000b47e:	6a 08                	push   0x8
c000b480:	56                   	push   esi
c000b481:	e8 f0 fc ff ff       	call   c000b176 <VgaText::putchar(char)>
c000b486:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b489:	e8 0a 52 ff ff       	call   c0000698 <strlen>
c000b48e:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c000b496:	eb 22                	jmp    c000b4ba <VgaText::receiveKey(unsigned char)+0x70>
c000b498:	0f be c3             	movsx  eax,bl
c000b49b:	52                   	push   edx
c000b49c:	52                   	push   edx
c000b49d:	50                   	push   eax
c000b49e:	56                   	push   esi
c000b49f:	e8 d2 fc ff ff       	call   c000b176 <VgaText::putchar(char)>
c000b4a4:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000b4a8:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000b4ad:	59                   	pop    ecx
c000b4ae:	5d                   	pop    ebp
c000b4af:	8d 44 24 16          	lea    eax,[esp+0x16]
c000b4b3:	50                   	push   eax
c000b4b4:	57                   	push   edi
c000b4b5:	e8 be 53 ff ff       	call   c0000878 <strcat>
c000b4ba:	83 c4 10             	add    esp,0x10
c000b4bd:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c000b4c4:	75 05                	jne    c000b4cb <VgaText::receiveKey(unsigned char)+0x81>
c000b4c6:	80 fb 0a             	cmp    bl,0xa
c000b4c9:	75 50                	jne    c000b51b <VgaText::receiveKey(unsigned char)+0xd1>
c000b4cb:	83 ec 0c             	sub    esp,0xc
c000b4ce:	8d 9e 32 01 00 00    	lea    ebx,[esi+0x132]
c000b4d4:	53                   	push   ebx
c000b4d5:	e8 be 51 ff ff       	call   c0000698 <strlen>
c000b4da:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b4dd:	89 c5                	mov    ebp,eax
c000b4df:	e8 b4 51 ff ff       	call   c0000698 <strlen>
c000b4e4:	83 c4 10             	add    esp,0x10
c000b4e7:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000b4eb:	3d 80 00 00 00       	cmp    eax,0x80
c000b4f0:	76 10                	jbe    c000b502 <VgaText::receiveKey(unsigned char)+0xb8>
c000b4f2:	83 ec 0c             	sub    esp,0xc
c000b4f5:	68 3f 41 02 c0       	push   0xc002413f
c000b4fa:	e8 1e 98 00 00       	call   c0014d1d <Krnl::panic(char const*)>
c000b4ff:	83 c4 10             	add    esp,0x10
c000b502:	50                   	push   eax
c000b503:	50                   	push   eax
c000b504:	57                   	push   edi
c000b505:	53                   	push   ebx
c000b506:	e8 6d 53 ff ff       	call   c0000878 <strcat>
c000b50b:	83 c4 0c             	add    esp,0xc
c000b50e:	6a 30                	push   0x30
c000b510:	6a 00                	push   0x0
c000b512:	57                   	push   edi
c000b513:	e8 64 51 ff ff       	call   c000067c <memset>
c000b518:	83 c4 10             	add    esp,0x10
c000b51b:	83 ec 0c             	sub    esp,0xc
c000b51e:	56                   	push   esi
c000b51f:	e8 72 fa ff ff       	call   c000af96 <VgaText::doUpdate()>
c000b524:	83 c4 10             	add    esp,0x10
c000b527:	83 c4 1c             	add    esp,0x1c
c000b52a:	5b                   	pop    ebx
c000b52b:	5e                   	pop    esi
c000b52c:	5f                   	pop    edi
c000b52d:	5d                   	pop    ebp
c000b52e:	c3                   	ret    
c000b52f:	90                   	nop

c000b530 <VgaText::write(unsigned long long, void*, int*)>:
c000b530:	55                   	push   ebp
c000b531:	57                   	push   edi
c000b532:	56                   	push   esi
c000b533:	53                   	push   ebx
c000b534:	83 ec 0c             	sub    esp,0xc
c000b537:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000b53b:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000b53f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000b543:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c000b54a:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000b54d:	39 eb                	cmp    ebx,ebp
c000b54f:	74 13                	je     c000b564 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000b551:	43                   	inc    ebx
c000b552:	50                   	push   eax
c000b553:	50                   	push   eax
c000b554:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000b558:	50                   	push   eax
c000b559:	56                   	push   esi
c000b55a:	e8 17 fc ff ff       	call   c000b176 <VgaText::putchar(char)>
c000b55f:	83 c4 10             	add    esp,0x10
c000b562:	eb e9                	jmp    c000b54d <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000b564:	83 ec 0c             	sub    esp,0xc
c000b567:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c000b56e:	56                   	push   esi
c000b56f:	e8 22 fa ff ff       	call   c000af96 <VgaText::doUpdate()>
c000b574:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b578:	89 38                	mov    DWORD PTR [eax],edi
c000b57a:	83 c4 1c             	add    esp,0x1c
c000b57d:	31 c0                	xor    eax,eax
c000b57f:	5b                   	pop    ebx
c000b580:	5e                   	pop    esi
c000b581:	5f                   	pop    edi
c000b582:	5d                   	pop    ebp
c000b583:	c3                   	ret    

c000b584 <newTerminal(char*)>:
c000b584:	83 ec 28             	sub    esp,0x28
c000b587:	68 b4 01 00 00       	push   0x1b4
c000b58c:	e8 26 e7 ff ff       	call   c0009cb7 <malloc>
c000b591:	5a                   	pop    edx
c000b592:	59                   	pop    ecx
c000b593:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b597:	50                   	push   eax
c000b598:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b59c:	e8 2d fd ff ff       	call   c000b2ce <VgaText::VgaText(char const*)>
c000b5a1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b5a5:	83 c4 2c             	add    esp,0x2c
c000b5a8:	c3                   	ret    
c000b5a9:	66 90                	xchg   ax,ax
c000b5ab:	90                   	nop

c000b5ac <TSS::TSS()>:
c000b5ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5b0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b5b7:	90                   	nop
c000b5b8:	c3                   	ret    
c000b5b9:	90                   	nop
c000b5ba:	66 90                	xchg   ax,ax

c000b5bc <TSS::setESP(unsigned long)>:
c000b5bc:	55                   	push   ebp
c000b5bd:	89 e5                	mov    ebp,esp
c000b5bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b5c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b5c5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b5c8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b5cb:	90                   	nop
c000b5cc:	5d                   	pop    ebp
c000b5cd:	c3                   	ret    
c000b5ce:	66 90                	xchg   ax,ax

c000b5d0 <TSS::flush()>:
c000b5d0:	55                   	push   ebp
c000b5d1:	89 e5                	mov    ebp,esp
c000b5d3:	83 ec 10             	sub    esp,0x10
c000b5d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b5d9:	8b 00                	mov    eax,DWORD PTR [eax]
c000b5db:	83 c8 03             	or     eax,0x3
c000b5de:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000b5e2:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000b5e6:	66 89 d0             	mov    ax,dx
c000b5e9:	0f 00 d8             	ltr    ax
c000b5ec:	90                   	nop
c000b5ed:	c9                   	leave  
c000b5ee:	c3                   	ret    
c000b5ef:	90                   	nop

c000b5f0 <TSS::setup(unsigned long, unsigned long)>:
c000b5f0:	55                   	push   ebp
c000b5f1:	89 e5                	mov    ebp,esp
c000b5f3:	83 ec 18             	sub    esp,0x18
c000b5f6:	83 ec 0c             	sub    esp,0xc
c000b5f9:	6a 68                	push   0x68
c000b5fb:	e8 b7 e6 ff ff       	call   c0009cb7 <malloc>
c000b600:	83 c4 10             	add    esp,0x10
c000b603:	89 c2                	mov    edx,eax
c000b605:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b608:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b60b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b60e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b611:	83 ec 04             	sub    esp,0x4
c000b614:	6a 68                	push   0x68
c000b616:	6a 00                	push   0x0
c000b618:	50                   	push   eax
c000b619:	e8 5e 50 ff ff       	call   c000067c <memset>
c000b61e:	83 c4 10             	add    esp,0x10
c000b621:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b624:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b627:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000b62d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b630:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b633:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000b639:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b63c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b63f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b642:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b645:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b648:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b64b:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000b651:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b654:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b657:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000b65d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b660:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b663:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000b669:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b66c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b66f:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000b675:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b678:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b67b:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c000b681:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b684:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b687:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000b68d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b690:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b693:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000b696:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000b699:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b69c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b69f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b6a2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000b6a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b6ab:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000b6b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6b5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b6b8:	0f 20 da             	mov    edx,cr3
c000b6bb:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000b6be:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000b6c1:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000b6c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6c7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b6ca:	83 ec 08             	sub    esp,0x8
c000b6cd:	50                   	push   eax
c000b6ce:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b6d1:	50                   	push   eax
c000b6d2:	e8 19 de ff ff       	call   c00094f0 <GDTEntry::setBase(unsigned int)>
c000b6d7:	83 c4 10             	add    esp,0x10
c000b6da:	83 ec 08             	sub    esp,0x8
c000b6dd:	6a 68                	push   0x68
c000b6df:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b6e2:	50                   	push   eax
c000b6e3:	e8 24 de ff ff       	call   c000950c <GDTEntry::setLimit(unsigned int)>
c000b6e8:	83 c4 10             	add    esp,0x10
c000b6eb:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000b6ef:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b6f2:	83 e0 0f             	and    eax,0xf
c000b6f5:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b6f8:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b6fb:	83 c8 40             	or     eax,0x40
c000b6fe:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b701:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c000b706:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b70c:	05 78 01 00 00       	add    eax,0x178
c000b711:	83 ec 04             	sub    esp,0x4
c000b714:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000b717:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000b71a:	50                   	push   eax
c000b71b:	e8 20 de ff ff       	call   c0009540 <GDT::addEntry(GDTEntry)>
c000b720:	83 c4 10             	add    esp,0x10
c000b723:	89 c2                	mov    edx,eax
c000b725:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b728:	89 10                	mov    DWORD PTR [eax],edx
c000b72a:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c000b72f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b735:	05 78 01 00 00       	add    eax,0x178
c000b73a:	83 ec 0c             	sub    esp,0xc
c000b73d:	50                   	push   eax
c000b73e:	e8 27 de ff ff       	call   c000956a <GDT::flush()>
c000b743:	83 c4 10             	add    esp,0x10
c000b746:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b749:	8b 00                	mov    eax,DWORD PTR [eax]
c000b74b:	c9                   	leave  
c000b74c:	c3                   	ret    
c000b74d:	90                   	nop

c000b74e <ReservedFilename::read(unsigned long long, void*, int*)>:
c000b74e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b752:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b756:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b759:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b75e:	75 08                	jne    c000b768 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c000b760:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b766:	eb 38                	jmp    c000b7a0 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c000b768:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b76d:	75 17                	jne    c000b786 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000b76f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b774:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b777:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b77d:	8b 10                	mov    edx,DWORD PTR [eax]
c000b77f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b783:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000b786:	89 c1                	mov    ecx,eax
c000b788:	83 e1 fd             	and    ecx,0xfffffffd
c000b78b:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c000b791:	74 cd                	je     c000b760 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b793:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b798:	83 e0 ef             	and    eax,0xffffffef
c000b79b:	83 f8 08             	cmp    eax,0x8
c000b79e:	76 c0                	jbe    c000b760 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b7a0:	31 c0                	xor    eax,eax
c000b7a2:	c3                   	ret    
c000b7a3:	90                   	nop

c000b7a4 <ReservedFilename::isAtty()>:
c000b7a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7a8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b7ab:	31 c0                	xor    eax,eax
c000b7ad:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000b7b3:	74 09                	je     c000b7be <ReservedFilename::isAtty()+0x1a>
c000b7b5:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000b7bb:	0f 94 c0             	sete   al
c000b7be:	c3                   	ret    
c000b7bf:	90                   	nop

c000b7c0 <ReservedFilename::write(unsigned long long, void*, int*)>:
c000b7c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7c4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b7c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b7cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b7cf:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b7d4:	75 08                	jne    c000b7de <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000b7d6:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b7dc:	eb 3d                	jmp    c000b81b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b7de:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b7e3:	75 17                	jne    c000b7fc <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000b7e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b7ea:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b7ed:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b7f3:	8b 10                	mov    edx,DWORD PTR [eax]
c000b7f5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b7f9:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000b7fc:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000b801:	75 04                	jne    c000b807 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000b803:	89 0a                	mov    DWORD PTR [edx],ecx
c000b805:	eb 14                	jmp    c000b81b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b807:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000b80c:	74 c8                	je     c000b7d6 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b80e:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b813:	83 e0 ef             	and    eax,0xffffffef
c000b816:	83 f8 08             	cmp    eax,0x8
c000b819:	76 bb                	jbe    c000b7d6 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b81b:	31 c0                	xor    eax,eax
c000b81d:	c3                   	ret    

c000b81e <UnixFile::getFileDescriptor()>:
c000b81e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b822:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b825:	c3                   	ret    

c000b826 <UnixFile::UnixFile(int)>:
c000b826:	53                   	push   ebx
c000b827:	83 ec 28             	sub    esp,0x28
c000b82a:	ba 5c 42 02 c0       	mov    edx,0xc002425c
c000b82f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b833:	89 10                	mov    DWORD PTR [eax],edx
c000b835:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c000b83d:	0f 8f 8c 01 00 00    	jg     c000b9cf <UnixFile::UnixFile(int)+0x1a9>
c000b843:	a1 40 72 02 c0       	mov    eax,ds:0xc0027240
c000b848:	8d 50 01             	lea    edx,[eax+0x1]
c000b84b:	89 15 40 72 02 c0    	mov    DWORD PTR ds:0xc0027240,edx
c000b851:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b855:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000b858:	83 ec 08             	sub    esp,0x8
c000b85b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b85f:	68 18 7f 02 c0       	push   0xc0027f18
c000b864:	e8 df 70 01 00       	call   c0022948 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b869:	83 c4 10             	add    esp,0x10
c000b86c:	a0 14 7f 02 c0       	mov    al,ds:0xc0027f14
c000b871:	83 f0 01             	xor    eax,0x1
c000b874:	84 c0                	test   al,al
c000b876:	0f 84 54 01 00 00    	je     c000b9d0 <UnixFile::UnixFile(int)+0x1aa>
c000b87c:	c6 05 14 7f 02 c0 01 	mov    BYTE PTR ds:0xc0027f14,0x1
c000b883:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000b88b:	83 ec 0c             	sub    esp,0xc
c000b88e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b892:	e8 20 e4 ff ff       	call   c0009cb7 <malloc>
c000b897:	83 c4 10             	add    esp,0x10
c000b89a:	89 c3                	mov    ebx,eax
c000b89c:	83 ec 08             	sub    esp,0x8
c000b89f:	68 03 ff ff 0f       	push   0xfffff03
c000b8a4:	53                   	push   ebx
c000b8a5:	e8 2c 01 00 00       	call   c000b9d6 <ReservedFilename::ReservedFilename(int)>
c000b8aa:	83 c4 10             	add    esp,0x10
c000b8ad:	89 1d 0c 7f 02 c0    	mov    DWORD PTR ds:0xc0027f0c,ebx
c000b8b3:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000b8bb:	83 ec 0c             	sub    esp,0xc
c000b8be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8c2:	e8 f0 e3 ff ff       	call   c0009cb7 <malloc>
c000b8c7:	83 c4 10             	add    esp,0x10
c000b8ca:	89 c3                	mov    ebx,eax
c000b8cc:	83 ec 08             	sub    esp,0x8
c000b8cf:	68 01 ff ff 0f       	push   0xfffff01
c000b8d4:	53                   	push   ebx
c000b8d5:	e8 fc 00 00 00       	call   c000b9d6 <ReservedFilename::ReservedFilename(int)>
c000b8da:	83 c4 10             	add    esp,0x10
c000b8dd:	89 1d 10 7f 02 c0    	mov    DWORD PTR ds:0xc0027f10,ebx
c000b8e3:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000b8eb:	83 ec 0c             	sub    esp,0xc
c000b8ee:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b8f2:	e8 c0 e3 ff ff       	call   c0009cb7 <malloc>
c000b8f7:	83 c4 10             	add    esp,0x10
c000b8fa:	89 c3                	mov    ebx,eax
c000b8fc:	83 ec 08             	sub    esp,0x8
c000b8ff:	68 00 ff ff 0f       	push   0xfffff00
c000b904:	53                   	push   ebx
c000b905:	e8 cc 00 00 00       	call   c000b9d6 <ReservedFilename::ReservedFilename(int)>
c000b90a:	83 c4 10             	add    esp,0x10
c000b90d:	89 1d 04 7f 02 c0    	mov    DWORD PTR ds:0xc0027f04,ebx
c000b913:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000b91b:	83 ec 0c             	sub    esp,0xc
c000b91e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b922:	e8 90 e3 ff ff       	call   c0009cb7 <malloc>
c000b927:	83 c4 10             	add    esp,0x10
c000b92a:	89 c3                	mov    ebx,eax
c000b92c:	83 ec 08             	sub    esp,0x8
c000b92f:	68 02 ff ff 0f       	push   0xfffff02
c000b934:	53                   	push   ebx
c000b935:	e8 9c 00 00 00       	call   c000b9d6 <ReservedFilename::ReservedFilename(int)>
c000b93a:	83 c4 10             	add    esp,0x10
c000b93d:	89 1d 08 7f 02 c0    	mov    DWORD PTR ds:0xc0027f08,ebx
c000b943:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b94b:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000b950:	7f 7e                	jg     c000b9d0 <UnixFile::UnixFile(int)+0x1aa>
c000b952:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000b95a:	83 ec 0c             	sub    esp,0xc
c000b95d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b961:	e8 51 e3 ff ff       	call   c0009cb7 <malloc>
c000b966:	83 c4 10             	add    esp,0x10
c000b969:	89 c3                	mov    ebx,eax
c000b96b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b96f:	05 10 ff ff 0f       	add    eax,0xfffff10
c000b974:	83 ec 08             	sub    esp,0x8
c000b977:	50                   	push   eax
c000b978:	53                   	push   ebx
c000b979:	e8 58 00 00 00       	call   c000b9d6 <ReservedFilename::ReservedFilename(int)>
c000b97e:	83 c4 10             	add    esp,0x10
c000b981:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b985:	89 1c 85 e0 7e 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8120],ebx
c000b98c:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000b994:	83 ec 0c             	sub    esp,0xc
c000b997:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b99b:	e8 17 e3 ff ff       	call   c0009cb7 <malloc>
c000b9a0:	83 c4 10             	add    esp,0x10
c000b9a3:	89 c3                	mov    ebx,eax
c000b9a5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b9a9:	05 20 ff ff 0f       	add    eax,0xfffff20
c000b9ae:	83 ec 08             	sub    esp,0x8
c000b9b1:	50                   	push   eax
c000b9b2:	53                   	push   ebx
c000b9b3:	e8 1e 00 00 00       	call   c000b9d6 <ReservedFilename::ReservedFilename(int)>
c000b9b8:	83 c4 10             	add    esp,0x10
c000b9bb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b9bf:	89 1c 85 a0 7e 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8160],ebx
c000b9c6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000b9ca:	e9 7c ff ff ff       	jmp    c000b94b <UnixFile::UnixFile(int)+0x125>
c000b9cf:	90                   	nop
c000b9d0:	83 c4 28             	add    esp,0x28
c000b9d3:	5b                   	pop    ebx
c000b9d4:	c3                   	ret    
c000b9d5:	90                   	nop

c000b9d6 <ReservedFilename::ReservedFilename(int)>:
c000b9d6:	83 ec 0c             	sub    esp,0xc
c000b9d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9dd:	83 ec 08             	sub    esp,0x8
c000b9e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9e4:	50                   	push   eax
c000b9e5:	e8 3c fe ff ff       	call   c000b826 <UnixFile::UnixFile(int)>
c000b9ea:	83 c4 10             	add    esp,0x10
c000b9ed:	ba 78 42 02 c0       	mov    edx,0xc0024278
c000b9f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9f6:	89 10                	mov    DWORD PTR [eax],edx
c000b9f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9fc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ba00:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ba03:	90                   	nop
c000ba04:	83 c4 0c             	add    esp,0xc
c000ba07:	c3                   	ret    

c000ba08 <UnixFile::~UnixFile()>:
c000ba08:	83 ec 1c             	sub    esp,0x1c
c000ba0b:	ba 5c 42 02 c0       	mov    edx,0xc002425c
c000ba10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba14:	89 10                	mov    DWORD PTR [eax],edx
c000ba16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba1a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ba1d:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000ba22:	7f 73                	jg     c000ba97 <UnixFile::~UnixFile()+0x8f>
c000ba24:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ba2c:	83 ec 0c             	sub    esp,0xc
c000ba2f:	68 18 7f 02 c0       	push   0xc0027f18
c000ba34:	e8 e3 6f 01 00       	call   c0022a1c <LinkedList<UnixFile>::getFirstElement()>
c000ba39:	83 c4 10             	add    esp,0x10
c000ba3c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba40:	83 ec 0c             	sub    esp,0xc
c000ba43:	68 18 7f 02 c0       	push   0xc0027f18
c000ba48:	e8 d7 6f 01 00       	call   c0022a24 <LinkedList<UnixFile>::removeFirst()>
c000ba4d:	83 c4 10             	add    esp,0x10
c000ba50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba54:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000ba58:	74 40                	je     c000ba9a <UnixFile::~UnixFile()+0x92>
c000ba5a:	83 ec 08             	sub    esp,0x8
c000ba5d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ba61:	68 18 7f 02 c0       	push   0xc0027f18
c000ba66:	e8 dd 6e 01 00       	call   c0022948 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000ba6b:	83 c4 10             	add    esp,0x10
c000ba6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ba72:	8d 50 01             	lea    edx,[eax+0x1]
c000ba75:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ba79:	3d 88 13 00 00       	cmp    eax,0x1388
c000ba7e:	0f 94 c0             	sete   al
c000ba81:	84 c0                	test   al,al
c000ba83:	74 a7                	je     c000ba2c <UnixFile::~UnixFile()+0x24>
c000ba85:	83 ec 0c             	sub    esp,0xc
c000ba88:	68 34 42 02 c0       	push   0xc0024234
c000ba8d:	e8 8b 92 00 00       	call   c0014d1d <Krnl::panic(char const*)>
c000ba92:	83 c4 10             	add    esp,0x10
c000ba95:	eb 95                	jmp    c000ba2c <UnixFile::~UnixFile()+0x24>
c000ba97:	90                   	nop
c000ba98:	eb 01                	jmp    c000ba9b <UnixFile::~UnixFile()+0x93>
c000ba9a:	90                   	nop
c000ba9b:	90                   	nop
c000ba9c:	83 c4 1c             	add    esp,0x1c
c000ba9f:	c3                   	ret    

c000baa0 <UnixFile::~UnixFile()>:
c000baa0:	83 ec 0c             	sub    esp,0xc
c000baa3:	83 ec 0c             	sub    esp,0xc
c000baa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baaa:	e8 59 ff ff ff       	call   c000ba08 <UnixFile::~UnixFile()>
c000baaf:	83 c4 10             	add    esp,0x10
c000bab2:	83 ec 08             	sub    esp,0x8
c000bab5:	6a 0c                	push   0xc
c000bab7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000babb:	e8 24 14 00 00       	call   c000cee4 <operator delete(void*, unsigned long)>
c000bac0:	83 c4 10             	add    esp,0x10
c000bac3:	83 c4 0c             	add    esp,0xc
c000bac6:	c3                   	ret    
c000bac7:	90                   	nop

c000bac8 <ReservedFilename::~ReservedFilename()>:
c000bac8:	83 ec 0c             	sub    esp,0xc
c000bacb:	ba 78 42 02 c0       	mov    edx,0xc0024278
c000bad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bad4:	89 10                	mov    DWORD PTR [eax],edx
c000bad6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bada:	83 ec 0c             	sub    esp,0xc
c000badd:	50                   	push   eax
c000bade:	e8 25 ff ff ff       	call   c000ba08 <UnixFile::~UnixFile()>
c000bae3:	83 c4 10             	add    esp,0x10
c000bae6:	90                   	nop
c000bae7:	83 c4 0c             	add    esp,0xc
c000baea:	c3                   	ret    
c000baeb:	90                   	nop

c000baec <ReservedFilename::~ReservedFilename()>:
c000baec:	83 ec 0c             	sub    esp,0xc
c000baef:	83 ec 0c             	sub    esp,0xc
c000baf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf6:	e8 cd ff ff ff       	call   c000bac8 <ReservedFilename::~ReservedFilename()>
c000bafb:	83 c4 10             	add    esp,0x10
c000bafe:	83 ec 08             	sub    esp,0x8
c000bb01:	6a 0c                	push   0xc
c000bb03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb07:	e8 d8 13 00 00       	call   c000cee4 <operator delete(void*, unsigned long)>
c000bb0c:	83 c4 10             	add    esp,0x10
c000bb0f:	83 c4 0c             	add    esp,0xc
c000bb12:	c3                   	ret    

c000bb13 <getFromFileDescriptor(int)>:
c000bb13:	53                   	push   ebx
c000bb14:	83 ec 08             	sub    esp,0x8
c000bb17:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bb1b:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000bb21:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000bb27:	7f 2c                	jg     c000bb55 <getFromFileDescriptor(int)+0x42>
c000bb29:	83 ec 0c             	sub    esp,0xc
c000bb2c:	68 18 7f 02 c0       	push   0xc0027f18
c000bb31:	e8 e6 6e 01 00       	call   c0022a1c <LinkedList<UnixFile>::getFirstElement()>
c000bb36:	83 c4 10             	add    esp,0x10
c000bb39:	85 c0                	test   eax,eax
c000bb3b:	75 04                	jne    c000bb41 <getFromFileDescriptor(int)+0x2e>
c000bb3d:	31 c0                	xor    eax,eax
c000bb3f:	eb 6e                	jmp    c000bbaf <getFromFileDescriptor(int)+0x9c>
c000bb41:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000bb44:	74 69                	je     c000bbaf <getFromFileDescriptor(int)+0x9c>
c000bb46:	52                   	push   edx
c000bb47:	52                   	push   edx
c000bb48:	50                   	push   eax
c000bb49:	68 18 7f 02 c0       	push   0xc0027f18
c000bb4e:	e8 73 6f 01 00       	call   c0022ac6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000bb53:	eb e1                	jmp    c000bb36 <getFromFileDescriptor(int)+0x23>
c000bb55:	a1 0c 7f 02 c0       	mov    eax,ds:0xc0027f0c
c000bb5a:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000bb60:	74 4d                	je     c000bbaf <getFromFileDescriptor(int)+0x9c>
c000bb62:	a1 10 7f 02 c0       	mov    eax,ds:0xc0027f10
c000bb67:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000bb6d:	74 40                	je     c000bbaf <getFromFileDescriptor(int)+0x9c>
c000bb6f:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c000bb74:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000bb7a:	74 33                	je     c000bbaf <getFromFileDescriptor(int)+0x9c>
c000bb7c:	a1 04 7f 02 c0       	mov    eax,ds:0xc0027f04
c000bb81:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000bb87:	74 26                	je     c000bbaf <getFromFileDescriptor(int)+0x9c>
c000bb89:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000bb8f:	83 f8 08             	cmp    eax,0x8
c000bb92:	77 09                	ja     c000bb9d <getFromFileDescriptor(int)+0x8a>
c000bb94:	8b 04 85 e0 7e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8120]
c000bb9b:	eb 12                	jmp    c000bbaf <getFromFileDescriptor(int)+0x9c>
c000bb9d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000bba3:	83 fb 08             	cmp    ebx,0x8
c000bba6:	77 95                	ja     c000bb3d <getFromFileDescriptor(int)+0x2a>
c000bba8:	8b 04 9d a0 7e 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd8160]
c000bbaf:	83 c4 08             	add    esp,0x8
c000bbb2:	5b                   	pop    ebx
c000bbb3:	c3                   	ret    

c000bbb4 <__static_initialization_and_destruction_0(int, int)>:
c000bbb4:	83 ec 0c             	sub    esp,0xc
c000bbb7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000bbbc:	75 34                	jne    c000bbf2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000bbbe:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000bbc6:	75 2a                	jne    c000bbf2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000bbc8:	83 ec 0c             	sub    esp,0xc
c000bbcb:	68 18 7f 02 c0       	push   0xc0027f18
c000bbd0:	e8 31 6d 01 00       	call   c0022906 <LinkedList<UnixFile>::LinkedList()>
c000bbd5:	83 c4 10             	add    esp,0x10
c000bbd8:	83 ec 04             	sub    esp,0x4
c000bbdb:	68 78 70 02 c0       	push   0xc0027078
c000bbe0:	68 18 7f 02 c0       	push   0xc0027f18
c000bbe5:	68 04 29 02 c0       	push   0xc0022904
c000bbea:	e8 6f 12 00 00       	call   c000ce5e <__cxa_atexit>
c000bbef:	83 c4 10             	add    esp,0x10
c000bbf2:	90                   	nop
c000bbf3:	83 c4 0c             	add    esp,0xc
c000bbf6:	c3                   	ret    

c000bbf7 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000bbf7:	83 ec 0c             	sub    esp,0xc
c000bbfa:	83 ec 08             	sub    esp,0x8
c000bbfd:	68 ff ff 00 00       	push   0xffff
c000bc02:	6a 01                	push   0x1
c000bc04:	e8 ab ff ff ff       	call   c000bbb4 <__static_initialization_and_destruction_0(int, int)>
c000bc09:	83 c4 10             	add    esp,0x10
c000bc0c:	83 c4 0c             	add    esp,0xc
c000bc0f:	c3                   	ret    

c000bc10 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000bc10:	53                   	push   ebx
c000bc11:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bc15:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bc19:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000bc1f:	89 c8                	mov    eax,ecx
c000bc21:	d1 e8                	shr    eax,1
c000bc23:	03 05 48 72 02 c0    	add    eax,DWORD PTR ds:0xc0027248
c000bc29:	83 e1 01             	and    ecx,0x1
c000bc2c:	8a 10                	mov    dl,BYTE PTR [eax]
c000bc2e:	75 09                	jne    c000bc39 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000bc30:	83 e2 f0             	and    edx,0xfffffff0
c000bc33:	09 da                	or     edx,ebx
c000bc35:	88 10                	mov    BYTE PTR [eax],dl
c000bc37:	5b                   	pop    ebx
c000bc38:	c3                   	ret    
c000bc39:	c1 e3 04             	shl    ebx,0x4
c000bc3c:	83 e2 0f             	and    edx,0xf
c000bc3f:	09 da                	or     edx,ebx
c000bc41:	88 10                	mov    BYTE PTR [eax],dl
c000bc43:	5b                   	pop    ebx
c000bc44:	c3                   	ret    

c000bc45 <Virt::getPageState(unsigned long)>:
c000bc45:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc49:	8b 0d 48 72 02 c0    	mov    ecx,DWORD PTR ds:0xc0027248
c000bc4f:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000bc55:	89 d0                	mov    eax,edx
c000bc57:	d1 e8                	shr    eax,1
c000bc59:	83 e2 01             	and    edx,0x1
c000bc5c:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000bc5f:	75 04                	jne    c000bc65 <Virt::getPageState(unsigned long)+0x20>
c000bc61:	83 e0 0f             	and    eax,0xf
c000bc64:	c3                   	ret    
c000bc65:	c0 e8 04             	shr    al,0x4
c000bc68:	c3                   	ret    

c000bc69 <Virt::allocateKernelVirtualPages(int)>:
c000bc69:	55                   	push   ebp
c000bc6a:	31 ed                	xor    ebp,ebp
c000bc6c:	57                   	push   edi
c000bc6d:	56                   	push   esi
c000bc6e:	53                   	push   ebx
c000bc6f:	31 db                	xor    ebx,ebx
c000bc71:	83 ec 1c             	sub    esp,0x1c
c000bc74:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000bc78:	8b 3d 44 72 02 c0    	mov    edi,DWORD PTR ds:0xc0027244
c000bc7e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000bc83:	57                   	push   edi
c000bc84:	e8 bc ff ff ff       	call   c000bc45 <Virt::getPageState(unsigned long)>
c000bc89:	5a                   	pop    edx
c000bc8a:	84 c0                	test   al,al
c000bc8c:	75 3a                	jne    c000bcc8 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000bc8e:	85 db                	test   ebx,ebx
c000bc90:	75 02                	jne    c000bc94 <Virt::allocateKernelVirtualPages(int)+0x2b>
c000bc92:	89 fd                	mov    ebp,edi
c000bc94:	43                   	inc    ebx
c000bc95:	39 f3                	cmp    ebx,esi
c000bc97:	74 5a                	je     c000bcf3 <Virt::allocateKernelVirtualPages(int)+0x8a>
c000bc99:	47                   	inc    edi
c000bc9a:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000bca0:	76 31                	jbe    c000bcd3 <Virt::allocateKernelVirtualPages(int)+0x6a>
c000bca2:	c7 05 44 72 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0027244,0xc8000
c000bcac:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000bcb1:	75 28                	jne    c000bcdb <Virt::allocateKernelVirtualPages(int)+0x72>
c000bcb3:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000bcb8:	bf 00 80 0c 00       	mov    edi,0xc8000
c000bcbd:	57                   	push   edi
c000bcbe:	e8 82 ff ff ff       	call   c000bc45 <Virt::getPageState(unsigned long)>
c000bcc3:	5a                   	pop    edx
c000bcc4:	84 c0                	test   al,al
c000bcc6:	74 c6                	je     c000bc8e <Virt::allocateKernelVirtualPages(int)+0x25>
c000bcc8:	31 db                	xor    ebx,ebx
c000bcca:	47                   	inc    edi
c000bccb:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000bcd1:	77 cf                	ja     c000bca2 <Virt::allocateKernelVirtualPages(int)+0x39>
c000bcd3:	89 3d 44 72 02 c0    	mov    DWORD PTR ds:0xc0027244,edi
c000bcd9:	eb a8                	jmp    c000bc83 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000bcdb:	83 ec 0c             	sub    esp,0xc
c000bcde:	68 8c 42 02 c0       	push   0xc002428c
c000bce3:	e8 35 90 00 00       	call   c0014d1d <Krnl::panic(char const*)>
c000bce8:	8b 3d 44 72 02 c0    	mov    edi,DWORD PTR ds:0xc0027244
c000bcee:	83 c4 10             	add    esp,0x10
c000bcf1:	eb 90                	jmp    c000bc83 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000bcf3:	89 2d 44 72 02 c0    	mov    DWORD PTR ds:0xc0027244,ebp
c000bcf9:	4b                   	dec    ebx
c000bcfa:	74 5f                	je     c000bd5b <Virt::allocateKernelVirtualPages(int)+0xf2>
c000bcfc:	85 f6                	test   esi,esi
c000bcfe:	74 3d                	je     c000bd3d <Virt::allocateKernelVirtualPages(int)+0xd4>
c000bd00:	89 e8                	mov    eax,ebp
c000bd02:	31 db                	xor    ebx,ebx
c000bd04:	8d 7e ff             	lea    edi,[esi-0x1]
c000bd07:	eb 14                	jmp    c000bd1d <Virt::allocateKernelVirtualPages(int)+0xb4>
c000bd09:	6a 01                	push   0x1
c000bd0b:	43                   	inc    ebx
c000bd0c:	50                   	push   eax
c000bd0d:	e8 fe fe ff ff       	call   c000bc10 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bd12:	58                   	pop    eax
c000bd13:	39 f3                	cmp    ebx,esi
c000bd15:	5a                   	pop    edx
c000bd16:	74 25                	je     c000bd3d <Virt::allocateKernelVirtualPages(int)+0xd4>
c000bd18:	a1 44 72 02 c0       	mov    eax,ds:0xc0027244
c000bd1d:	8d 50 01             	lea    edx,[eax+0x1]
c000bd20:	85 db                	test   ebx,ebx
c000bd22:	89 15 44 72 02 c0    	mov    DWORD PTR ds:0xc0027244,edx
c000bd28:	74 20                	je     c000bd4a <Virt::allocateKernelVirtualPages(int)+0xe1>
c000bd2a:	39 df                	cmp    edi,ebx
c000bd2c:	75 db                	jne    c000bd09 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000bd2e:	6a 03                	push   0x3
c000bd30:	43                   	inc    ebx
c000bd31:	50                   	push   eax
c000bd32:	e8 d9 fe ff ff       	call   c000bc10 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bd37:	59                   	pop    ecx
c000bd38:	39 f3                	cmp    ebx,esi
c000bd3a:	58                   	pop    eax
c000bd3b:	75 db                	jne    c000bd18 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000bd3d:	83 c4 1c             	add    esp,0x1c
c000bd40:	89 e8                	mov    eax,ebp
c000bd42:	5b                   	pop    ebx
c000bd43:	c1 e0 0c             	shl    eax,0xc
c000bd46:	5e                   	pop    esi
c000bd47:	5f                   	pop    edi
c000bd48:	5d                   	pop    ebp
c000bd49:	c3                   	ret    
c000bd4a:	6a 02                	push   0x2
c000bd4c:	bb 01 00 00 00       	mov    ebx,0x1
c000bd51:	50                   	push   eax
c000bd52:	e8 b9 fe ff ff       	call   c000bc10 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bd57:	58                   	pop    eax
c000bd58:	5a                   	pop    edx
c000bd59:	eb bd                	jmp    c000bd18 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000bd5b:	6a 04                	push   0x4
c000bd5d:	8d 45 01             	lea    eax,[ebp+0x1]
c000bd60:	55                   	push   ebp
c000bd61:	a3 44 72 02 c0       	mov    ds:0xc0027244,eax
c000bd66:	e8 a5 fe ff ff       	call   c000bc10 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bd6b:	59                   	pop    ecx
c000bd6c:	89 e8                	mov    eax,ebp
c000bd6e:	5b                   	pop    ebx
c000bd6f:	c1 e0 0c             	shl    eax,0xc
c000bd72:	83 c4 1c             	add    esp,0x1c
c000bd75:	5b                   	pop    ebx
c000bd76:	5e                   	pop    esi
c000bd77:	5f                   	pop    edi
c000bd78:	5d                   	pop    ebp
c000bd79:	c3                   	ret    

c000bd7a <Virt::freeSwapfilePage(unsigned long)>:
c000bd7a:	53                   	push   ebx
c000bd7b:	8b 15 30 7f 02 c0    	mov    edx,DWORD PTR ds:0xc0027f30
c000bd81:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bd85:	b8 01 00 00 00       	mov    eax,0x1
c000bd8a:	89 cb                	mov    ebx,ecx
c000bd8c:	d3 e0                	shl    eax,cl
c000bd8e:	c1 eb 05             	shr    ebx,0x5
c000bd91:	f7 d0                	not    eax
c000bd93:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c000bd96:	5b                   	pop    ebx
c000bd97:	c3                   	ret    

c000bd98 <Virt::swapIDToSector(unsigned long)>:
c000bd98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bd9c:	0f af 05 4c 72 02 c0 	imul   eax,DWORD PTR ds:0xc002724c
c000bda3:	03 05 54 72 02 c0    	add    eax,DWORD PTR ds:0xc0027254
c000bda9:	c3                   	ret    

c000bdaa <Virt::allocateSwapfilePage()>:
c000bdaa:	55                   	push   ebp
c000bdab:	31 d2                	xor    edx,edx
c000bdad:	57                   	push   edi
c000bdae:	56                   	push   esi
c000bdaf:	53                   	push   ebx
c000bdb0:	83 ec 0c             	sub    esp,0xc
c000bdb3:	8b 0d 4c 72 02 c0    	mov    ecx,DWORD PTR ds:0xc002724c
c000bdb9:	a1 50 72 02 c0       	mov    eax,ds:0xc0027250
c000bdbe:	f7 f1                	div    ecx
c000bdc0:	39 0d 50 72 02 c0    	cmp    DWORD PTR ds:0xc0027250,ecx
c000bdc6:	72 2d                	jb     c000bdf5 <Virt::allocateSwapfilePage()+0x4b>
c000bdc8:	8b 35 30 7f 02 c0    	mov    esi,DWORD PTR ds:0xc0027f30
c000bdce:	8b 16                	mov    edx,DWORD PTR [esi]
c000bdd0:	f6 c2 01             	test   dl,0x1
c000bdd3:	74 3c                	je     c000be11 <Virt::allocateSwapfilePage()+0x67>
c000bdd5:	31 c9                	xor    ecx,ecx
c000bdd7:	bf 01 00 00 00       	mov    edi,0x1
c000bddc:	eb 12                	jmp    c000bdf0 <Virt::allocateSwapfilePage()+0x46>
c000bdde:	89 fd                	mov    ebp,edi
c000bde0:	89 ca                	mov    edx,ecx
c000bde2:	d3 e5                	shl    ebp,cl
c000bde4:	c1 ea 05             	shr    edx,0x5
c000bde7:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000bdea:	8b 13                	mov    edx,DWORD PTR [ebx]
c000bdec:	85 ea                	test   edx,ebp
c000bdee:	74 2a                	je     c000be1a <Virt::allocateSwapfilePage()+0x70>
c000bdf0:	41                   	inc    ecx
c000bdf1:	39 c8                	cmp    eax,ecx
c000bdf3:	77 e9                	ja     c000bdde <Virt::allocateSwapfilePage()+0x34>
c000bdf5:	83 ec 0c             	sub    esp,0xc
c000bdf8:	68 44 44 02 c0       	push   0xc0024444
c000bdfd:	e8 1b 8f 00 00       	call   c0014d1d <Krnl::panic(char const*)>
c000be02:	83 c4 10             	add    esp,0x10
c000be05:	31 c9                	xor    ecx,ecx
c000be07:	83 c4 0c             	add    esp,0xc
c000be0a:	89 c8                	mov    eax,ecx
c000be0c:	5b                   	pop    ebx
c000be0d:	5e                   	pop    esi
c000be0e:	5f                   	pop    edi
c000be0f:	5d                   	pop    ebp
c000be10:	c3                   	ret    
c000be11:	89 f3                	mov    ebx,esi
c000be13:	bd 01 00 00 00       	mov    ebp,0x1
c000be18:	31 c9                	xor    ecx,ecx
c000be1a:	09 ea                	or     edx,ebp
c000be1c:	89 c8                	mov    eax,ecx
c000be1e:	89 13                	mov    DWORD PTR [ebx],edx
c000be20:	83 c4 0c             	add    esp,0xc
c000be23:	5b                   	pop    ebx
c000be24:	5e                   	pop    esi
c000be25:	5f                   	pop    edi
c000be26:	5d                   	pop    ebp
c000be27:	c3                   	ret    

c000be28 <Virt::virtualMemorySetup()>:
c000be28:	53                   	push   ebx
c000be29:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000be2e:	6a 0f                	push   0xf
c000be30:	53                   	push   ebx
c000be31:	43                   	inc    ebx
c000be32:	e8 d9 fd ff ff       	call   c000bc10 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000be37:	58                   	pop    eax
c000be38:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000be3e:	5a                   	pop    edx
c000be3f:	75 ed                	jne    c000be2e <Virt::virtualMemorySetup()+0x6>
c000be41:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000be46:	6a 00                	push   0x0
c000be48:	53                   	push   ebx
c000be49:	43                   	inc    ebx
c000be4a:	e8 c1 fd ff ff       	call   c000bc10 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000be4f:	59                   	pop    ecx
c000be50:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000be56:	58                   	pop    eax
c000be57:	75 ed                	jne    c000be46 <Virt::virtualMemorySetup()+0x1e>
c000be59:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000be5e:	6a 0f                	push   0xf
c000be60:	53                   	push   ebx
c000be61:	43                   	inc    ebx
c000be62:	e8 a9 fd ff ff       	call   c000bc10 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000be67:	58                   	pop    eax
c000be68:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000be6e:	5a                   	pop    edx
c000be6f:	75 ed                	jne    c000be5e <Virt::virtualMemorySetup()+0x36>
c000be71:	5b                   	pop    ebx
c000be72:	c3                   	ret    

c000be73 <Virt::setupPageSwapping(int)>:
c000be73:	53                   	push   ebx
c000be74:	83 ec 0c             	sub    esp,0xc
c000be77:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000be7b:	a1 c8 83 02 c0       	mov    eax,ds:0xc00283c8
c000be80:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000be86:	8b 10                	mov    edx,DWORD PTR [eax]
c000be88:	53                   	push   ebx
c000be89:	c1 e3 0b             	shl    ebx,0xb
c000be8c:	68 5b 44 02 c0       	push   0xc002445b
c000be91:	50                   	push   eax
c000be92:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000be95:	89 1d 50 72 02 c0    	mov    DWORD PTR ds:0xc0027250,ebx
c000be9b:	c6 05 58 72 02 c0 43 	mov    BYTE PTR ds:0xc0027258,0x43
c000bea2:	c1 eb 08             	shr    ebx,0x8
c000bea5:	a3 54 72 02 c0       	mov    ds:0xc0027254,eax
c000beaa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000bead:	c7 05 4c 72 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002724c,0x8
c000beb7:	e8 fb dd ff ff       	call   c0009cb7 <malloc>
c000bebc:	83 c4 0c             	add    esp,0xc
c000bebf:	89 c1                	mov    ecx,eax
c000bec1:	a3 30 7f 02 c0       	mov    ds:0xc0027f30,eax
c000bec6:	31 d2                	xor    edx,edx
c000bec8:	a1 50 72 02 c0       	mov    eax,ds:0xc0027250
c000becd:	f7 35 4c 72 02 c0    	div    DWORD PTR ds:0xc002724c
c000bed3:	c1 e8 05             	shr    eax,0x5
c000bed6:	50                   	push   eax
c000bed7:	6a 00                	push   0x0
c000bed9:	51                   	push   ecx
c000beda:	e8 9d 47 ff ff       	call   c000067c <memset>
c000bedf:	83 c4 18             	add    esp,0x18
c000bee2:	5b                   	pop    ebx
c000bee3:	c3                   	ret    

c000bee4 <VAS::VAS(VAS*)>:
c000bee4:	83 ec 0c             	sub    esp,0xc
c000bee7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000beeb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bef2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bef6:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000befd:	83 ec 0c             	sub    esp,0xc
c000bf00:	68 ac 42 02 c0       	push   0xc00242ac
c000bf05:	e8 13 8e 00 00       	call   c0014d1d <Krnl::panic(char const*)>
c000bf0a:	83 c4 10             	add    esp,0x10
c000bf0d:	90                   	nop
c000bf0e:	83 c4 0c             	add    esp,0xc
c000bf11:	c3                   	ret    

c000bf12 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000bf12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bf16:	89 c2                	mov    edx,eax
c000bf18:	c1 e8 0a             	shr    eax,0xa
c000bf1b:	c1 ea 16             	shr    edx,0x16
c000bf1e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000bf23:	19 c9                	sbb    ecx,ecx
c000bf25:	c1 e2 0c             	shl    edx,0xc
c000bf28:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000bf2e:	25 fc 0f 00 00       	and    eax,0xffc
c000bf33:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000bf3a:	01 d0                	add    eax,edx
c000bf3c:	c3                   	ret    
c000bf3d:	90                   	nop

c000bf3e <VAS::getPageTableEntry(unsigned long)>:
c000bf3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bf42:	89 ca                	mov    edx,ecx
c000bf44:	c1 e9 0a             	shr    ecx,0xa
c000bf47:	c1 ea 16             	shr    edx,0x16
c000bf4a:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000bf50:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000bf56:	c1 e0 0c             	shl    eax,0xc
c000bf59:	8d 04 08             	lea    eax,[eax+ecx*1]
c000bf5c:	c3                   	ret    

c000bf5d <Virt::freeKernelVirtualPages(unsigned long)>:
c000bf5d:	57                   	push   edi
c000bf5e:	56                   	push   esi
c000bf5f:	be 01 00 00 00       	mov    esi,0x1
c000bf64:	53                   	push   ebx
c000bf65:	83 ec 10             	sub    esp,0x10
c000bf68:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000bf6c:	c1 eb 0c             	shr    ebx,0xc
c000bf6f:	eb 3f                	jmp    c000bfb0 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000bf71:	83 ec 08             	sub    esp,0x8
c000bf74:	57                   	push   edi
c000bf75:	ff 35 34 7f 02 c0    	push   DWORD PTR ds:0xc0027f34
c000bf7b:	e8 be ff ff ff       	call   c000bf3e <VAS::getPageTableEntry(unsigned long)>
c000bf80:	83 c4 10             	add    esp,0x10
c000bf83:	8b 00                	mov    eax,DWORD PTR [eax]
c000bf85:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000bf89:	f6 c4 04             	test   ah,0x4
c000bf8c:	75 5f                	jne    c000bfed <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c000bf8e:	80 fa 04             	cmp    dl,0x4
c000bf91:	74 78                	je     c000c00b <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c000bf93:	80 fa 02             	cmp    dl,0x2
c000bf96:	0f 84 88 00 00 00    	je     c000c024 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000bf9c:	80 fa 03             	cmp    dl,0x3
c000bf9f:	0f 84 ad 00 00 00    	je     c000c052 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c000bfa5:	fe ca                	dec    dl
c000bfa7:	0f 84 92 00 00 00    	je     c000c03f <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000bfad:	43                   	inc    ebx
c000bfae:	31 f6                	xor    esi,esi
c000bfb0:	53                   	push   ebx
c000bfb1:	89 df                	mov    edi,ebx
c000bfb3:	e8 8d fc ff ff       	call   c000bc45 <Virt::getPageState(unsigned long)>
c000bfb8:	c1 e7 0c             	shl    edi,0xc
c000bfbb:	59                   	pop    ecx
c000bfbc:	84 c0                	test   al,al
c000bfbe:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000bfc2:	75 ad                	jne    c000bf71 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000bfc4:	83 ec 0c             	sub    esp,0xc
c000bfc7:	68 72 44 02 c0       	push   0xc0024472
c000bfcc:	e8 4c 8d 00 00       	call   c0014d1d <Krnl::panic(char const*)>
c000bfd1:	58                   	pop    eax
c000bfd2:	5a                   	pop    edx
c000bfd3:	57                   	push   edi
c000bfd4:	ff 35 34 7f 02 c0    	push   DWORD PTR ds:0xc0027f34
c000bfda:	e8 5f ff ff ff       	call   c000bf3e <VAS::getPageTableEntry(unsigned long)>
c000bfdf:	83 c4 10             	add    esp,0x10
c000bfe2:	8b 00                	mov    eax,DWORD PTR [eax]
c000bfe4:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000bfe8:	f6 c4 04             	test   ah,0x4
c000bfeb:	74 c0                	je     c000bfad <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000bfed:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000bff1:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bff6:	83 ec 0c             	sub    esp,0xc
c000bff9:	50                   	push   eax
c000bffa:	e8 ec e2 ff ff       	call   c000a2eb <Phys::freePage(unsigned long)>
c000bfff:	83 c4 10             	add    esp,0x10
c000c002:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000c006:	80 fa 04             	cmp    dl,0x4
c000c009:	75 88                	jne    c000bf93 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000c00b:	89 f0                	mov    eax,esi
c000c00d:	84 c0                	test   al,al
c000c00f:	75 47                	jne    c000c058 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c000c011:	c7 44 24 20 d0 42 02 c0 	mov    DWORD PTR [esp+0x20],0xc00242d0
c000c019:	83 c4 10             	add    esp,0x10
c000c01c:	5b                   	pop    ebx
c000c01d:	5e                   	pop    esi
c000c01e:	5f                   	pop    edi
c000c01f:	e9 f9 8c 00 00       	jmp    c0014d1d <Krnl::panic(char const*)>
c000c024:	89 f0                	mov    eax,esi
c000c026:	84 c0                	test   al,al
c000c028:	75 15                	jne    c000c03f <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000c02a:	83 ec 0c             	sub    esp,0xc
c000c02d:	68 8e 44 02 c0       	push   0xc002448e
c000c032:	e8 e6 8c 00 00       	call   c0014d1d <Krnl::panic(char const*)>
c000c037:	83 c4 10             	add    esp,0x10
c000c03a:	e9 6e ff ff ff       	jmp    c000bfad <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000c03f:	83 ec 08             	sub    esp,0x8
c000c042:	6a 00                	push   0x0
c000c044:	53                   	push   ebx
c000c045:	e8 c6 fb ff ff       	call   c000bc10 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000c04a:	83 c4 10             	add    esp,0x10
c000c04d:	e9 5b ff ff ff       	jmp    c000bfad <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000c052:	89 f0                	mov    eax,esi
c000c054:	84 c0                	test   al,al
c000c056:	75 15                	jne    c000c06d <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c000c058:	83 ec 08             	sub    esp,0x8
c000c05b:	6a 00                	push   0x0
c000c05d:	53                   	push   ebx
c000c05e:	e8 ad fb ff ff       	call   c000bc10 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000c063:	83 c4 10             	add    esp,0x10
c000c066:	83 c4 10             	add    esp,0x10
c000c069:	5b                   	pop    ebx
c000c06a:	5e                   	pop    esi
c000c06b:	5f                   	pop    edi
c000c06c:	c3                   	ret    
c000c06d:	c7 44 24 20 aa 44 02 c0 	mov    DWORD PTR [esp+0x20],0xc00244aa
c000c075:	83 c4 10             	add    esp,0x10
c000c078:	5b                   	pop    ebx
c000c079:	5e                   	pop    esi
c000c07a:	5f                   	pop    edi
c000c07b:	e9 9d 8c 00 00       	jmp    c0014d1d <Krnl::panic(char const*)>

c000c080 <VAS::freeAllocatedPages(unsigned long)>:
c000c080:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c084:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c088:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000c08c:	74 09                	je     c000c097 <VAS::freeAllocatedPages(unsigned long)+0x17>
c000c08e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c092:	e9 c6 fe ff ff       	jmp    c000bf5d <Virt::freeKernelVirtualPages(unsigned long)>
c000c097:	c7 44 24 04 f4 42 02 c0 	mov    DWORD PTR [esp+0x4],0xc00242f4
c000c09f:	e9 21 0f 00 00       	jmp    c000cfc5 <Dbg::kprintf(char const*, ...)>

c000c0a4 <VAS::virtualToPhysical(unsigned long)>:
c000c0a4:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000c0a8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000c0ac:	e8 8d fe ff ff       	call   c000bf3e <VAS::getPageTableEntry(unsigned long)>
c000c0b1:	5a                   	pop    edx
c000c0b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000c0b4:	59                   	pop    ecx
c000c0b5:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c0ba:	c3                   	ret    
c000c0bb:	90                   	nop

c000c0bc <VAS::reflagRange(unsigned long, int, int, int)>:
c000c0bc:	55                   	push   ebp
c000c0bd:	57                   	push   edi
c000c0be:	56                   	push   esi
c000c0bf:	53                   	push   ebx
c000c0c0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c0c4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000c0c8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c0cc:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000c0d0:	85 db                	test   ebx,ebx
c000c0d2:	7e 22                	jle    c000c0f6 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c000c0d4:	c1 e3 0c             	shl    ebx,0xc
c000c0d7:	01 f3                	add    ebx,esi
c000c0d9:	56                   	push   esi
c000c0da:	81 c6 00 10 00 00    	add    esi,0x1000
c000c0e0:	55                   	push   ebp
c000c0e1:	e8 58 fe ff ff       	call   c000bf3e <VAS::getPageTableEntry(unsigned long)>
c000c0e6:	5a                   	pop    edx
c000c0e7:	59                   	pop    ecx
c000c0e8:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c0ea:	21 f9                	and    ecx,edi
c000c0ec:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c000c0f0:	39 f3                	cmp    ebx,esi
c000c0f2:	89 08                	mov    DWORD PTR [eax],ecx
c000c0f4:	75 e3                	jne    c000c0d9 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c000c0f6:	5b                   	pop    ebx
c000c0f7:	5e                   	pop    esi
c000c0f8:	5f                   	pop    edi
c000c0f9:	5d                   	pop    ebp
c000c0fa:	c3                   	ret    
c000c0fb:	90                   	nop

c000c0fc <VAS::setToWriteCombining(unsigned long, int)>:
c000c0fc:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c000c101:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c107:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c000c10e:	75 01                	jne    c000c111 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000c110:	c3                   	ret    
c000c111:	68 80 00 00 00       	push   0x80
c000c116:	6a ff                	push   0xffffffff
c000c118:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c11c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c120:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c124:	e8 93 ff ff ff       	call   c000c0bc <VAS::reflagRange(unsigned long, int, int, int)>
c000c129:	83 c4 14             	add    esp,0x14
c000c12c:	c3                   	ret    
c000c12d:	90                   	nop

c000c12e <VAS::mapOtherVASIn(bool, VAS*)>:
c000c12e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000c133:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c137:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000c13a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c13e:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000c141:	19 c0                	sbb    eax,eax
c000c143:	83 ca 03             	or     edx,0x3
c000c146:	83 e0 fc             	and    eax,0xfffffffc
c000c149:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000c150:	0f 20 d8             	mov    eax,cr3
c000c153:	0f 22 d8             	mov    cr3,eax
c000c156:	c3                   	ret    
c000c157:	90                   	nop

c000c158 <VAS::~VAS()>:
c000c158:	83 ec 2c             	sub    esp,0x2c
c000c15b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c163:	fa                   	cli    
c000c164:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c000c169:	40                   	inc    eax
c000c16a:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c000c16f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c174:	8b 00                	mov    eax,DWORD PTR [eax]
c000c176:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c179:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000c17f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c183:	6a 01                	push   0x1
c000c185:	50                   	push   eax
c000c186:	e8 a3 ff ff ff       	call   c000c12e <VAS::mapOtherVASIn(bool, VAS*)>
c000c18b:	83 c4 0c             	add    esp,0xc
c000c18e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c196:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000c19e:	0f 8f d4 00 00 00    	jg     c000c278 <VAS::~VAS()+0x120>
c000c1a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c1a8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c1ab:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c1af:	c1 e2 02             	shl    edx,0x2
c000c1b2:	01 d0                	add    eax,edx
c000c1b4:	8b 00                	mov    eax,DWORD PTR [eax]
c000c1b6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c1ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1be:	83 e0 01             	and    eax,0x1
c000c1c1:	0f 84 a8 00 00 00    	je     c000c26f <VAS::~VAS()+0x117>
c000c1c7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000c1cf:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000c1d7:	7f 72                	jg     c000c24b <VAS::~VAS()+0xf3>
c000c1d9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c1dd:	c1 e0 0a             	shl    eax,0xa
c000c1e0:	89 c2                	mov    edx,eax
c000c1e2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c1e6:	01 d0                	add    eax,edx
c000c1e8:	c1 e0 0c             	shl    eax,0xc
c000c1eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c1ef:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c1f4:	8b 00                	mov    eax,DWORD PTR [eax]
c000c1f6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c1f9:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000c1ff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c203:	6a 01                	push   0x1
c000c205:	50                   	push   eax
c000c206:	e8 07 fd ff ff       	call   c000bf12 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000c20b:	83 c4 0c             	add    esp,0xc
c000c20e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c212:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c216:	8b 00                	mov    eax,DWORD PTR [eax]
c000c218:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c21c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c220:	25 01 04 00 00       	and    eax,0x401
c000c225:	3d 01 04 00 00       	cmp    eax,0x401
c000c22a:	75 19                	jne    c000c245 <VAS::~VAS()+0xed>
c000c22c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c230:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c235:	83 ec 0c             	sub    esp,0xc
c000c238:	50                   	push   eax
c000c239:	e8 ad e0 ff ff       	call   c000a2eb <Phys::freePage(unsigned long)>
c000c23e:	83 c4 10             	add    esp,0x10
c000c241:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c245:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000c249:	eb 84                	jmp    c000c1cf <VAS::~VAS()+0x77>
c000c24b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c24f:	25 00 04 00 00       	and    eax,0x400
c000c254:	74 19                	je     c000c26f <VAS::~VAS()+0x117>
c000c256:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c25a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c25f:	83 ec 0c             	sub    esp,0xc
c000c262:	50                   	push   eax
c000c263:	e8 83 e0 ff ff       	call   c000a2eb <Phys::freePage(unsigned long)>
c000c268:	83 c4 10             	add    esp,0x10
c000c26b:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c26f:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c273:	e9 1e ff ff ff       	jmp    c000c196 <VAS::~VAS()+0x3e>
c000c278:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c27c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c27f:	83 ec 0c             	sub    esp,0xc
c000c282:	50                   	push   eax
c000c283:	e8 d5 fc ff ff       	call   c000bf5d <Virt::freeKernelVirtualPages(unsigned long)>
c000c288:	83 c4 10             	add    esp,0x10
c000c28b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c28f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c292:	83 ec 0c             	sub    esp,0xc
c000c295:	50                   	push   eax
c000c296:	e8 50 e0 ff ff       	call   c000a2eb <Phys::freePage(unsigned long)>
c000c29b:	83 c4 10             	add    esp,0x10
c000c29e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c2a2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c2a6:	c1 e0 02             	shl    eax,0x2
c000c2a9:	83 ec 08             	sub    esp,0x8
c000c2ac:	50                   	push   eax
c000c2ad:	68 18 43 02 c0       	push   0xc0024318
c000c2b2:	e8 0e 0d 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000c2b7:	83 c4 10             	add    esp,0x10
c000c2ba:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c000c2bf:	48                   	dec    eax
c000c2c0:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c000c2c5:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c000c2ca:	85 c0                	test   eax,eax
c000c2cc:	75 01                	jne    c000c2cf <VAS::~VAS()+0x177>
c000c2ce:	fb                   	sti    
c000c2cf:	90                   	nop
c000c2d0:	83 c4 2c             	add    esp,0x2c
c000c2d3:	c3                   	ret    

c000c2d4 <VAS::mapPage(unsigned long, unsigned long, int)>:
c000c2d4:	55                   	push   ebp
c000c2d5:	57                   	push   edi
c000c2d6:	56                   	push   esi
c000c2d7:	53                   	push   ebx
c000c2d8:	83 ec 1c             	sub    esp,0x1c
c000c2db:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000c2df:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c2e3:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000c2e9:	77 0b                	ja     c000c2f6 <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c000c2eb:	0f 20 d8             	mov    eax,cr3
c000c2ee:	0f 20 d8             	mov    eax,cr3
c000c2f1:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c000c2f4:	75 47                	jne    c000c33d <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c000c2f6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c2fa:	09 d8                	or     eax,ebx
c000c2fc:	a9 ff 0f 00 00       	test   eax,0xfff
c000c301:	75 57                	jne    c000c35a <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c000c303:	89 de                	mov    esi,ebx
c000c305:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c308:	c1 ee 16             	shr    esi,0x16
c000c30b:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000c312:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000c316:	74 54                	je     c000c36c <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c000c318:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c31c:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000c322:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000c326:	c1 e6 0c             	shl    esi,0xc
c000c329:	c1 eb 0a             	shr    ebx,0xa
c000c32c:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000c332:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000c335:	83 c4 1c             	add    esp,0x1c
c000c338:	5b                   	pop    ebx
c000c339:	5e                   	pop    esi
c000c33a:	5f                   	pop    edi
c000c33b:	5d                   	pop    ebp
c000c33c:	c3                   	ret    
c000c33d:	83 ec 0c             	sub    esp,0xc
c000c340:	68 38 43 02 c0       	push   0xc0024338
c000c345:	e8 7b 0c 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000c34a:	83 c4 10             	add    esp,0x10
c000c34d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c351:	09 d8                	or     eax,ebx
c000c353:	a9 ff 0f 00 00       	test   eax,0xfff
c000c358:	74 a9                	je     c000c303 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c000c35a:	83 ec 0c             	sub    esp,0xc
c000c35d:	68 a0 43 02 c0       	push   0xc00243a0
c000c362:	e8 b6 89 00 00       	call   c0014d1d <Krnl::panic(char const*)>
c000c367:	83 c4 10             	add    esp,0x10
c000c36a:	eb 97                	jmp    c000c303 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c000c36c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c370:	e8 f9 df ff ff       	call   c000a36e <Phys::allocatePage()>
c000c375:	83 ec 0c             	sub    esp,0xc
c000c378:	89 c5                	mov    ebp,eax
c000c37a:	8b 0d 34 7f 02 c0    	mov    ecx,DWORD PTR ds:0xc0027f34
c000c380:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c384:	6a 01                	push   0x1
c000c386:	e8 de f8 ff ff       	call   c000bc69 <Virt::allocateKernelVirtualPages(int)>
c000c38b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c392:	6a 01                	push   0x1
c000c394:	50                   	push   eax
c000c395:	55                   	push   ebp
c000c396:	81 cd 07 04 00 00    	or     ebp,0x407
c000c39c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c3a0:	51                   	push   ecx
c000c3a1:	e8 26 02 00 00       	call   c000c5cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c3a6:	83 c4 1c             	add    esp,0x1c
c000c3a9:	68 00 10 00 00       	push   0x1000
c000c3ae:	6a 00                	push   0x0
c000c3b0:	50                   	push   eax
c000c3b1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c3b5:	e8 c2 42 ff ff       	call   c000067c <memset>
c000c3ba:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c3be:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c3c1:	e8 97 fb ff ff       	call   c000bf5d <Virt::freeKernelVirtualPages(unsigned long)>
c000c3c6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c3ca:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c3cd:	83 c4 10             	add    esp,0x10
c000c3d0:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000c3d3:	e9 40 ff ff ff       	jmp    c000c318 <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c000c3d8 <VAS::allocatePages(int, int)>:
c000c3d8:	55                   	push   ebp
c000c3d9:	57                   	push   edi
c000c3da:	56                   	push   esi
c000c3db:	53                   	push   ebx
c000c3dc:	83 ec 1c             	sub    esp,0x1c
c000c3df:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c3e3:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c000c3e8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c3ee:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000c3f4:	83 e0 01             	and    eax,0x1
c000c3f7:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000c3fb:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c3ff:	0f 85 cc 00 00 00    	jne    c000c4d1 <VAS::allocatePages(int, int)+0xf9>
c000c405:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c408:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c40c:	85 c0                	test   eax,eax
c000c40e:	0f 84 a1 00 00 00    	je     c000c4b5 <VAS::allocatePages(int, int)+0xdd>
c000c414:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000c418:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c41c:	c1 e6 0c             	shl    esi,0xc
c000c41f:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000c423:	85 c0                	test   eax,eax
c000c425:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000c428:	7e 33                	jle    c000c45d <VAS::allocatePages(int, int)+0x85>
c000c42a:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c42e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c432:	81 cd 00 04 00 00    	or     ebp,0x400
c000c438:	e8 31 df ff ff       	call   c000a36e <Phys::allocatePage()>
c000c43d:	55                   	push   ebp
c000c43e:	53                   	push   ebx
c000c43f:	50                   	push   eax
c000c440:	57                   	push   edi
c000c441:	e8 8e fe ff ff       	call   c000c2d4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c446:	83 c4 10             	add    esp,0x10
c000c449:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c44e:	74 03                	je     c000c453 <VAS::allocatePages(int, int)+0x7b>
c000c450:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c453:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c459:	39 de                	cmp    esi,ebx
c000c45b:	75 db                	jne    c000c438 <VAS::allocatePages(int, int)+0x60>
c000c45d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c462:	75 12                	jne    c000c476 <VAS::allocatePages(int, int)+0x9e>
c000c464:	0f 20 d8             	mov    eax,cr3
c000c467:	0f 22 d8             	mov    cr3,eax
c000c46a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c46e:	83 c4 1c             	add    esp,0x1c
c000c471:	5b                   	pop    ebx
c000c472:	5e                   	pop    esi
c000c473:	5f                   	pop    edi
c000c474:	5d                   	pop    ebp
c000c475:	c3                   	ret    
c000c476:	c1 ee 0a             	shr    esi,0xa
c000c479:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c47d:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000c483:	c1 eb 0a             	shr    ebx,0xa
c000c486:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c000c48c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c492:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c498:	39 c3                	cmp    ebx,eax
c000c49a:	77 ce                	ja     c000c46a <VAS::allocatePages(int, int)+0x92>
c000c49c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c49f:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c4a5:	39 d8                	cmp    eax,ebx
c000c4a7:	73 f3                	jae    c000c49c <VAS::allocatePages(int, int)+0xc4>
c000c4a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c4ad:	83 c4 1c             	add    esp,0x1c
c000c4b0:	5b                   	pop    ebx
c000c4b1:	5e                   	pop    esi
c000c4b2:	5f                   	pop    edi
c000c4b3:	5d                   	pop    ebp
c000c4b4:	c3                   	ret    
c000c4b5:	83 ec 0c             	sub    esp,0xc
c000c4b8:	68 c4 43 02 c0       	push   0xc00243c4
c000c4bd:	e8 5b 88 00 00       	call   c0014d1d <Krnl::panic(char const*)>
c000c4c2:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c4c5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c4c9:	83 c4 10             	add    esp,0x10
c000c4cc:	e9 43 ff ff ff       	jmp    c000c414 <VAS::allocatePages(int, int)+0x3c>
c000c4d1:	83 ec 0c             	sub    esp,0xc
c000c4d4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000c4d8:	e8 8c f7 ff ff       	call   c000bc69 <Virt::allocateKernelVirtualPages(int)>
c000c4dd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c4e1:	83 c4 10             	add    esp,0x10
c000c4e4:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000c4e9:	0f 87 9b 00 00 00    	ja     c000c58a <VAS::allocatePages(int, int)+0x1b2>
c000c4ef:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c4f3:	85 d2                	test   edx,edx
c000c4f5:	7e 3c                	jle    c000c533 <VAS::allocatePages(int, int)+0x15b>
c000c4f7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c4fb:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c4ff:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c503:	c1 e5 0c             	shl    ebp,0xc
c000c506:	81 ce 00 04 00 00    	or     esi,0x400
c000c50c:	01 dd                	add    ebp,ebx
c000c50e:	e8 5b de ff ff       	call   c000a36e <Phys::allocatePage()>
c000c513:	56                   	push   esi
c000c514:	53                   	push   ebx
c000c515:	50                   	push   eax
c000c516:	57                   	push   edi
c000c517:	e8 b8 fd ff ff       	call   c000c2d4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c51c:	83 c4 10             	add    esp,0x10
c000c51f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c524:	74 03                	je     c000c529 <VAS::allocatePages(int, int)+0x151>
c000c526:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c529:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c52f:	39 dd                	cmp    ebp,ebx
c000c531:	75 db                	jne    c000c50e <VAS::allocatePages(int, int)+0x136>
c000c533:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c538:	0f 84 26 ff ff ff    	je     c000c464 <VAS::allocatePages(int, int)+0x8c>
c000c53e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c542:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c546:	89 d3                	mov    ebx,edx
c000c548:	c1 e0 0c             	shl    eax,0xc
c000c54b:	c1 eb 0a             	shr    ebx,0xa
c000c54e:	01 d0                	add    eax,edx
c000c550:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c556:	c1 e8 0a             	shr    eax,0xa
c000c559:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c55f:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c564:	2d 00 00 40 00       	sub    eax,0x400000
c000c569:	39 c3                	cmp    ebx,eax
c000c56b:	0f 87 f9 fe ff ff    	ja     c000c46a <VAS::allocatePages(int, int)+0x92>
c000c571:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c574:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c57a:	39 d8                	cmp    eax,ebx
c000c57c:	73 f3                	jae    c000c571 <VAS::allocatePages(int, int)+0x199>
c000c57e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c582:	83 c4 1c             	add    esp,0x1c
c000c585:	5b                   	pop    ebx
c000c586:	5e                   	pop    esi
c000c587:	5f                   	pop    edi
c000c588:	5d                   	pop    ebp
c000c589:	c3                   	ret    
c000c58a:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c000c58f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c595:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000c59c:	0f 84 4d ff ff ff    	je     c000c4ef <VAS::allocatePages(int, int)+0x117>
c000c5a2:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000c5aa:	e9 40 ff ff ff       	jmp    c000c4ef <VAS::allocatePages(int, int)+0x117>
c000c5af:	90                   	nop

c000c5b0 <VAS::setCPUSpecific(unsigned long)>:
c000c5b0:	83 ec 0c             	sub    esp,0xc
c000c5b3:	6a 05                	push   0x5
c000c5b5:	68 00 00 40 c2       	push   0xc2400000
c000c5ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5c2:	e8 0d fd ff ff       	call   c000c2d4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c5c7:	83 c4 1c             	add    esp,0x1c
c000c5ca:	c3                   	ret    
c000c5cb:	90                   	nop

c000c5cc <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000c5cc:	55                   	push   ebp
c000c5cd:	57                   	push   edi
c000c5ce:	56                   	push   esi
c000c5cf:	53                   	push   ebx
c000c5d0:	83 ec 1c             	sub    esp,0x1c
c000c5d3:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c000c5d8:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c5dc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c5e2:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c5e6:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000c5ec:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000c5f0:	83 e0 01             	and    eax,0x1
c000c5f3:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c5f7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c5fb:	85 c0                	test   eax,eax
c000c5fd:	7e 39                	jle    c000c638 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c000c5ff:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c603:	89 f3                	mov    ebx,esi
c000c605:	c1 e0 0c             	shl    eax,0xc
c000c608:	01 f0                	add    eax,esi
c000c60a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c60e:	55                   	push   ebp
c000c60f:	53                   	push   ebx
c000c610:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c614:	29 f0                	sub    eax,esi
c000c616:	01 d8                	add    eax,ebx
c000c618:	50                   	push   eax
c000c619:	57                   	push   edi
c000c61a:	e8 b5 fc ff ff       	call   c000c2d4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c61f:	83 c4 10             	add    esp,0x10
c000c622:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c627:	74 03                	je     c000c62c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c000c629:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c62c:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c632:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000c636:	75 d6                	jne    c000c60e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000c638:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c63d:	75 10                	jne    c000c64f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c000c63f:	0f 20 d8             	mov    eax,cr3
c000c642:	0f 22 d8             	mov    cr3,eax
c000c645:	83 c4 1c             	add    esp,0x1c
c000c648:	89 f0                	mov    eax,esi
c000c64a:	5b                   	pop    ebx
c000c64b:	5e                   	pop    esi
c000c64c:	5f                   	pop    edi
c000c64d:	5d                   	pop    ebp
c000c64e:	c3                   	ret    
c000c64f:	89 f3                	mov    ebx,esi
c000c651:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c655:	c1 eb 0a             	shr    ebx,0xa
c000c658:	c1 e0 0c             	shl    eax,0xc
c000c65b:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c661:	01 f0                	add    eax,esi
c000c663:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c669:	c1 e8 0a             	shr    eax,0xa
c000c66c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c671:	2d 00 00 40 00       	sub    eax,0x400000
c000c676:	39 c3                	cmp    ebx,eax
c000c678:	77 cb                	ja     c000c645 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c000c67a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c67d:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c683:	39 d8                	cmp    eax,ebx
c000c685:	73 f3                	jae    c000c67a <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c000c687:	83 c4 1c             	add    esp,0x1c
c000c68a:	89 f0                	mov    eax,esi
c000c68c:	5b                   	pop    ebx
c000c68d:	5e                   	pop    esi
c000c68e:	5f                   	pop    edi
c000c68f:	5d                   	pop    ebp
c000c690:	c3                   	ret    
c000c691:	90                   	nop

c000c692 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000c692:	55                   	push   ebp
c000c693:	57                   	push   edi
c000c694:	56                   	push   esi
c000c695:	53                   	push   ebx
c000c696:	83 ec 1c             	sub    esp,0x1c
c000c699:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c69d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c6a1:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000c6a5:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000c6a9:	a9 ff 0f 00 00       	test   eax,0xfff
c000c6ae:	75 4a                	jne    c000c6fa <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000c6b0:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000c6b4:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c6b7:	c1 eb 16             	shr    ebx,0x16
c000c6ba:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000c6c1:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000c6c5:	74 4d                	je     c000c714 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000c6c7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6cb:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000c6cf:	c1 e8 0a             	shr    eax,0xa
c000c6d2:	80 fa 01             	cmp    dl,0x1
c000c6d5:	19 d2                	sbb    edx,edx
c000c6d7:	c1 e3 0c             	shl    ebx,0xc
c000c6da:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000c6de:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000c6e4:	25 fc 0f 00 00       	and    eax,0xffc
c000c6e9:	01 d8                	add    eax,ebx
c000c6eb:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000c6f2:	83 c4 1c             	add    esp,0x1c
c000c6f5:	5b                   	pop    ebx
c000c6f6:	5e                   	pop    esi
c000c6f7:	5f                   	pop    edi
c000c6f8:	5d                   	pop    ebp
c000c6f9:	c3                   	ret    
c000c6fa:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c6fe:	83 ec 0c             	sub    esp,0xc
c000c701:	68 f0 43 02 c0       	push   0xc00243f0
c000c706:	e8 12 86 00 00       	call   c0014d1d <Krnl::panic(char const*)>
c000c70b:	83 c4 10             	add    esp,0x10
c000c70e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c712:	eb 9c                	jmp    c000c6b0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000c714:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c718:	e8 51 dc ff ff       	call   c000a36e <Phys::allocatePage()>
c000c71d:	83 ec 0c             	sub    esp,0xc
c000c720:	89 c5                	mov    ebp,eax
c000c722:	8b 0d 34 7f 02 c0    	mov    ecx,DWORD PTR ds:0xc0027f34
c000c728:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c72c:	6a 01                	push   0x1
c000c72e:	e8 36 f5 ff ff       	call   c000bc69 <Virt::allocateKernelVirtualPages(int)>
c000c733:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c73a:	6a 01                	push   0x1
c000c73c:	50                   	push   eax
c000c73d:	55                   	push   ebp
c000c73e:	81 cd 07 04 00 00    	or     ebp,0x407
c000c744:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c748:	51                   	push   ecx
c000c749:	e8 7e fe ff ff       	call   c000c5cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c74e:	83 c4 1c             	add    esp,0x1c
c000c751:	68 00 10 00 00       	push   0x1000
c000c756:	6a 00                	push   0x0
c000c758:	50                   	push   eax
c000c759:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c75d:	e8 1a 3f ff ff       	call   c000067c <memset>
c000c762:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c766:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c769:	e8 ef f7 ff ff       	call   c000bf5d <Virt::freeKernelVirtualPages(unsigned long)>
c000c76e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c771:	83 c4 10             	add    esp,0x10
c000c774:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000c777:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c77b:	e9 47 ff ff ff       	jmp    c000c6c7 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c000c780 <VAS::VAS(bool)>:
c000c780:	53                   	push   ebx
c000c781:	83 ec 28             	sub    esp,0x28
c000c784:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c788:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000c78c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c790:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c797:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c79b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000c7a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c7a6:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000c7aa:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000c7ad:	e8 bc db ff ff       	call   c000a36e <Phys::allocatePage()>
c000c7b2:	89 c2                	mov    edx,eax
c000c7b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c7b8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000c7bb:	8b 1d 34 7f 02 c0    	mov    ebx,DWORD PTR ds:0xc0027f34
c000c7c1:	83 ec 0c             	sub    esp,0xc
c000c7c4:	6a 01                	push   0x1
c000c7c6:	e8 9e f4 ff ff       	call   c000bc69 <Virt::allocateKernelVirtualPages(int)>
c000c7cb:	83 c4 10             	add    esp,0x10
c000c7ce:	89 c2                	mov    edx,eax
c000c7d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c7d4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c7d7:	83 ec 0c             	sub    esp,0xc
c000c7da:	6a 03                	push   0x3
c000c7dc:	6a 01                	push   0x1
c000c7de:	52                   	push   edx
c000c7df:	50                   	push   eax
c000c7e0:	53                   	push   ebx
c000c7e1:	e8 e6 fd ff ff       	call   c000c5cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c7e6:	83 c4 20             	add    esp,0x20
c000c7e9:	89 c2                	mov    edx,eax
c000c7eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c7ef:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000c7f2:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c7fa:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000c802:	7f 1c                	jg     c000c820 <VAS::VAS(bool)+0xa0>
c000c804:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c808:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c80b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c80f:	c1 e2 02             	shl    edx,0x2
c000c812:	01 d0                	add    eax,edx
c000c814:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c81a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c81e:	eb da                	jmp    c000c7fa <VAS::VAS(bool)+0x7a>
c000c820:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000c828:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000c830:	7f 7a                	jg     c000c8ac <VAS::VAS(bool)+0x12c>
c000c832:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c836:	2d 00 02 00 00       	sub    eax,0x200
c000c83b:	c1 e0 0c             	shl    eax,0xc
c000c83e:	83 c8 03             	or     eax,0x3
c000c841:	89 c2                	mov    edx,eax
c000c843:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c000c848:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c84e:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c854:	83 e0 10             	and    eax,0x10
c000c857:	84 c0                	test   al,al
c000c859:	74 07                	je     c000c862 <VAS::VAS(bool)+0xe2>
c000c85b:	b8 00 01 00 00       	mov    eax,0x100
c000c860:	eb 05                	jmp    c000c867 <VAS::VAS(bool)+0xe7>
c000c862:	b8 00 00 00 00       	mov    eax,0x0
c000c867:	09 d0                	or     eax,edx
c000c869:	89 c1                	mov    ecx,eax
c000c86b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c86f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c872:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c876:	c1 e2 02             	shl    edx,0x2
c000c879:	01 d0                	add    eax,edx
c000c87b:	89 ca                	mov    edx,ecx
c000c87d:	89 10                	mov    DWORD PTR [eax],edx
c000c87f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c883:	2d 40 03 00 00       	sub    eax,0x340
c000c888:	83 f8 7f             	cmp    eax,0x7f
c000c88b:	77 16                	ja     c000c8a3 <VAS::VAS(bool)+0x123>
c000c88d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c891:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c894:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c898:	c1 e2 02             	shl    edx,0x2
c000c89b:	01 d0                	add    eax,edx
c000c89d:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c8a3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c8a7:	e9 7c ff ff ff       	jmp    c000c828 <VAS::VAS(bool)+0xa8>
c000c8ac:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c000c8b1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c8b7:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c8bd:	83 e0 10             	and    eax,0x10
c000c8c0:	84 c0                	test   al,al
c000c8c2:	74 07                	je     c000c8cb <VAS::VAS(bool)+0x14b>
c000c8c4:	b8 03 41 00 00       	mov    eax,0x4103
c000c8c9:	eb 05                	jmp    c000c8d0 <VAS::VAS(bool)+0x150>
c000c8cb:	b8 03 40 00 00       	mov    eax,0x4003
c000c8d0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c8d4:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000c8d7:	81 c2 20 0c 00 00    	add    edx,0xc20
c000c8dd:	89 02                	mov    DWORD PTR [edx],eax
c000c8df:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c000c8e4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c8ea:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000c8f0:	83 ec 08             	sub    esp,0x8
c000c8f3:	50                   	push   eax
c000c8f4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c8f8:	e8 b3 fc ff ff       	call   c000c5b0 <VAS::setCPUSpecific(unsigned long)>
c000c8fd:	83 c4 10             	add    esp,0x10
c000c900:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c904:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000c907:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c000c90c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c912:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c918:	83 e0 10             	and    eax,0x10
c000c91b:	84 c0                	test   al,al
c000c91d:	74 07                	je     c000c926 <VAS::VAS(bool)+0x1a6>
c000c91f:	b8 00 01 00 00       	mov    eax,0x100
c000c924:	eb 05                	jmp    c000c92b <VAS::VAS(bool)+0x1ab>
c000c926:	b8 00 00 00 00       	mov    eax,0x0
c000c92b:	09 c2                	or     edx,eax
c000c92d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c931:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c934:	05 fc 0f 00 00       	add    eax,0xffc
c000c939:	83 ca 03             	or     edx,0x3
c000c93c:	89 10                	mov    DWORD PTR [eax],edx
c000c93e:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c000c943:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c949:	83 ec 0c             	sub    esp,0xc
c000c94c:	50                   	push   eax
c000c94d:	e8 24 1e 00 00       	call   c000e776 <Device::getName()>
c000c952:	83 c4 10             	add    esp,0x10
c000c955:	83 ec 08             	sub    esp,0x8
c000c958:	68 c4 44 02 c0       	push   0xc00244c4
c000c95d:	50                   	push   eax
c000c95e:	e8 61 3e ff ff       	call   c00007c4 <strcmp>
c000c963:	83 c4 10             	add    esp,0x10
c000c966:	85 c0                	test   eax,eax
c000c968:	0f 94 c0             	sete   al
c000c96b:	84 c0                	test   al,al
c000c96d:	0f 84 87 00 00 00    	je     c000c9fa <VAS::VAS(bool)+0x27a>
c000c973:	fa                   	cli    
c000c974:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c000c979:	40                   	inc    eax
c000c97a:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c000c97f:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c000c984:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c98a:	05 7c 09 00 00       	add    eax,0x97c
c000c98f:	83 ec 0c             	sub    esp,0xc
c000c992:	50                   	push   eax
c000c993:	e8 0e ce ff ff       	call   c00097a6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c998:	83 c4 10             	add    esp,0x10
c000c99b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c9a0:	89 c3                	mov    ebx,eax
c000c9a2:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c000c9a7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c9ad:	05 7c 09 00 00       	add    eax,0x97c
c000c9b2:	83 ec 0c             	sub    esp,0xc
c000c9b5:	50                   	push   eax
c000c9b6:	e8 eb cd ff ff       	call   c00097a6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c9bb:	83 c4 10             	add    esp,0x10
c000c9be:	83 ec 08             	sub    esp,0x8
c000c9c1:	50                   	push   eax
c000c9c2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c9c6:	e8 73 f5 ff ff       	call   c000bf3e <VAS::getPageTableEntry(unsigned long)>
c000c9cb:	83 c4 10             	add    esp,0x10
c000c9ce:	8b 00                	mov    eax,DWORD PTR [eax]
c000c9d0:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c9d5:	6a 11                	push   0x11
c000c9d7:	53                   	push   ebx
c000c9d8:	50                   	push   eax
c000c9d9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c9dd:	e8 f2 f8 ff ff       	call   c000c2d4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c9e2:	83 c4 10             	add    esp,0x10
c000c9e5:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c000c9ea:	48                   	dec    eax
c000c9eb:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c000c9f0:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c000c9f5:	85 c0                	test   eax,eax
c000c9f7:	75 01                	jne    c000c9fa <VAS::VAS(bool)+0x27a>
c000c9f9:	fb                   	sti    
c000c9fa:	90                   	nop
c000c9fb:	83 c4 28             	add    esp,0x28
c000c9fe:	5b                   	pop    ebx
c000c9ff:	c3                   	ret    

c000ca00 <VAS::VAS()>:
c000ca00:	53                   	push   ebx
c000ca01:	83 ec 18             	sub    esp,0x18
c000ca04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca08:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ca0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca13:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000ca1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca1e:	a3 34 7f 02 c0       	mov    ds:0xc0027f34,eax
c000ca23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca27:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000ca2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca2f:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000ca32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca36:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c000ca3d:	c7 44 24 0c 14 00 00 00 	mov    DWORD PTR [esp+0xc],0x14
c000ca45:	83 ec 0c             	sub    esp,0xc
c000ca48:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ca4c:	e8 66 d2 ff ff       	call   c0009cb7 <malloc>
c000ca51:	83 c4 10             	add    esp,0x10
c000ca54:	89 c3                	mov    ebx,eax
c000ca56:	83 ec 08             	sub    esp,0x8
c000ca59:	6a 01                	push   0x1
c000ca5b:	53                   	push   ebx
c000ca5c:	e8 1f fd ff ff       	call   c000c780 <VAS::VAS(bool)>
c000ca61:	83 c4 10             	add    esp,0x10
c000ca64:	89 1d 2c 7f 02 c0    	mov    DWORD PTR ds:0xc0027f2c,ebx
c000ca6a:	90                   	nop
c000ca6b:	83 c4 18             	add    esp,0x18
c000ca6e:	5b                   	pop    ebx
c000ca6f:	c3                   	ret    

c000ca70 <VAS::evict(unsigned long)>:
c000ca70:	55                   	push   ebp
c000ca71:	57                   	push   edi
c000ca72:	56                   	push   esi
c000ca73:	53                   	push   ebx
c000ca74:	83 ec 1c             	sub    esp,0x1c
c000ca77:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca7b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ca7f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ca83:	e8 22 f3 ff ff       	call   c000bdaa <Virt::allocateSwapfilePage()>
c000ca88:	89 c7                	mov    edi,eax
c000ca8a:	a1 4c 72 02 c0       	mov    eax,ds:0xc002724c
c000ca8f:	85 c0                	test   eax,eax
c000ca91:	7e 3d                	jle    c000cad0 <VAS::evict(unsigned long)+0x60>
c000ca93:	89 ee                	mov    esi,ebp
c000ca95:	31 db                	xor    ebx,ebx
c000ca97:	83 ec 0c             	sub    esp,0xc
c000ca9a:	57                   	push   edi
c000ca9b:	e8 f8 f2 ff ff       	call   c000bd98 <Virt::swapIDToSector(unsigned long)>
c000caa0:	89 34 24             	mov    DWORD PTR [esp],esi
c000caa3:	01 d8                	add    eax,ebx
c000caa5:	6a 01                	push   0x1
c000caa7:	31 d2                	xor    edx,edx
c000caa9:	43                   	inc    ebx
c000caaa:	52                   	push   edx
c000caab:	81 c6 00 02 00 00    	add    esi,0x200
c000cab1:	50                   	push   eax
c000cab2:	0f be 05 58 72 02 c0 	movsx  eax,BYTE PTR ds:0xc0027258
c000cab9:	ff 34 85 bc 82 02 c0 	push   DWORD PTR [eax*4-0x3ffd7d44]
c000cac0:	e8 63 3b 00 00       	call   c0010628 <LogicalDisk::write(unsigned long long, int, void*)>
c000cac5:	83 c4 20             	add    esp,0x20
c000cac8:	39 1d 4c 72 02 c0    	cmp    DWORD PTR ds:0xc002724c,ebx
c000cace:	7f c7                	jg     c000ca97 <VAS::evict(unsigned long)+0x27>
c000cad0:	83 ec 08             	sub    esp,0x8
c000cad3:	c1 e7 0b             	shl    edi,0xb
c000cad6:	55                   	push   ebp
c000cad7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cadb:	e8 5e f4 ff ff       	call   c000bf3e <VAS::getPageTableEntry(unsigned long)>
c000cae0:	8b 10                	mov    edx,DWORD PTR [eax]
c000cae2:	89 d3                	mov    ebx,edx
c000cae4:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000caea:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000caf0:	09 d7                	or     edi,edx
c000caf2:	89 38                	mov    DWORD PTR [eax],edi
c000caf4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000caf7:	ff 05 28 7f 02 c0    	inc    DWORD PTR ds:0xc0027f28
c000cafd:	e8 e9 d7 ff ff       	call   c000a2eb <Phys::freePage(unsigned long)>
c000cb02:	0f 20 d8             	mov    eax,cr3
c000cb05:	0f 22 d8             	mov    cr3,eax
c000cb08:	ff 35 28 7f 02 c0    	push   DWORD PTR ds:0xc0027f28
c000cb0e:	55                   	push   ebp
c000cb0f:	53                   	push   ebx
c000cb10:	68 14 44 02 c0       	push   0xc0024414
c000cb15:	e8 ab 04 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000cb1a:	a1 24 7f 02 c0       	mov    eax,ds:0xc0027f24
c000cb1f:	c7 44 24 50 d2 44 02 c0 	mov    DWORD PTR [esp+0x50],0xc00244d2
c000cb27:	8d 50 01             	lea    edx,[eax+0x1]
c000cb2a:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000cb2e:	89 15 24 7f 02 c0    	mov    DWORD PTR ds:0xc0027f24,edx
c000cb34:	83 c4 3c             	add    esp,0x3c
c000cb37:	5b                   	pop    ebx
c000cb38:	5e                   	pop    esi
c000cb39:	5f                   	pop    edi
c000cb3a:	5d                   	pop    ebp
c000cb3b:	e9 85 04 00 00       	jmp    c000cfc5 <Dbg::kprintf(char const*, ...)>

c000cb40 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000cb40:	55                   	push   ebp
c000cb41:	57                   	push   edi
c000cb42:	56                   	push   esi
c000cb43:	53                   	push   ebx
c000cb44:	83 ec 14             	sub    esp,0x14
c000cb47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb4b:	68 e3 44 02 c0       	push   0xc00244e3
c000cb50:	e8 70 04 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000cb55:	83 c4 10             	add    esp,0x10
c000cb58:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000cb5c:	81 e5 00 f0 ff ff    	and    ebp,0xfffff000
c000cb62:	74 20                	je     c000cb84 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000cb64:	83 ec 08             	sub    esp,0x8
c000cb67:	55                   	push   ebp
c000cb68:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb6c:	e8 cd f3 ff ff       	call   c000bf3e <VAS::getPageTableEntry(unsigned long)>
c000cb71:	83 c4 10             	add    esp,0x10
c000cb74:	89 c3                	mov    ebx,eax
c000cb76:	85 c0                	test   eax,eax
c000cb78:	74 0a                	je     c000cb84 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000cb7a:	8b 38                	mov    edi,DWORD PTR [eax]
c000cb7c:	f7 c7 01 00 00 00    	test   edi,0x1
c000cb82:	74 0a                	je     c000cb8e <VAS::tryLoadBackOffDisk(unsigned long)+0x4e>
c000cb84:	31 c0                	xor    eax,eax
c000cb86:	83 c4 0c             	add    esp,0xc
c000cb89:	5b                   	pop    ebx
c000cb8a:	5e                   	pop    esi
c000cb8b:	5f                   	pop    edi
c000cb8c:	5d                   	pop    ebp
c000cb8d:	c3                   	ret    
c000cb8e:	e8 db d7 ff ff       	call   c000a36e <Phys::allocatePage()>
c000cb93:	c1 ef 0b             	shr    edi,0xb
c000cb96:	8b 13                	mov    edx,DWORD PTR [ebx]
c000cb98:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000cb9e:	09 c2                	or     edx,eax
c000cba0:	81 ca 01 08 00 00    	or     edx,0x801
c000cba6:	89 13                	mov    DWORD PTR [ebx],edx
c000cba8:	8b 0d 4c 72 02 c0    	mov    ecx,DWORD PTR ds:0xc002724c
c000cbae:	85 c9                	test   ecx,ecx
c000cbb0:	7e 3d                	jle    c000cbef <VAS::tryLoadBackOffDisk(unsigned long)+0xaf>
c000cbb2:	89 ee                	mov    esi,ebp
c000cbb4:	31 db                	xor    ebx,ebx
c000cbb6:	83 ec 0c             	sub    esp,0xc
c000cbb9:	57                   	push   edi
c000cbba:	e8 d9 f1 ff ff       	call   c000bd98 <Virt::swapIDToSector(unsigned long)>
c000cbbf:	89 34 24             	mov    DWORD PTR [esp],esi
c000cbc2:	01 d8                	add    eax,ebx
c000cbc4:	6a 01                	push   0x1
c000cbc6:	31 d2                	xor    edx,edx
c000cbc8:	43                   	inc    ebx
c000cbc9:	52                   	push   edx
c000cbca:	81 c6 00 02 00 00    	add    esi,0x200
c000cbd0:	50                   	push   eax
c000cbd1:	0f be 05 58 72 02 c0 	movsx  eax,BYTE PTR ds:0xc0027258
c000cbd8:	ff 34 85 bc 82 02 c0 	push   DWORD PTR [eax*4-0x3ffd7d44]
c000cbdf:	e8 d8 39 00 00       	call   c00105bc <LogicalDisk::read(unsigned long long, int, void*)>
c000cbe4:	83 c4 20             	add    esp,0x20
c000cbe7:	39 1d 4c 72 02 c0    	cmp    DWORD PTR ds:0xc002724c,ebx
c000cbed:	7f c7                	jg     c000cbb6 <VAS::tryLoadBackOffDisk(unsigned long)+0x76>
c000cbef:	a1 28 7f 02 c0       	mov    eax,ds:0xc0027f28
c000cbf4:	48                   	dec    eax
c000cbf5:	52                   	push   edx
c000cbf6:	a3 28 7f 02 c0       	mov    ds:0xc0027f28,eax
c000cbfb:	50                   	push   eax
c000cbfc:	55                   	push   ebp
c000cbfd:	68 f6 44 02 c0       	push   0xc00244f6
c000cc02:	e8 be 03 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000cc07:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cc0a:	e8 6b f1 ff ff       	call   c000bd7a <Virt::freeSwapfilePage(unsigned long)>
c000cc0f:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c000cc14:	83 c4 10             	add    esp,0x10
c000cc17:	48                   	dec    eax
c000cc18:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c000cc1d:	85 c0                	test   eax,eax
c000cc1f:	74 1d                	je     c000cc3e <VAS::tryLoadBackOffDisk(unsigned long)+0xfe>
c000cc21:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000cc25:	25 ff 0f 00 00       	and    eax,0xfff
c000cc2a:	3d e0 0f 00 00       	cmp    eax,0xfe0
c000cc2f:	77 10                	ja     c000cc41 <VAS::tryLoadBackOffDisk(unsigned long)+0x101>
c000cc31:	0f 20 d8             	mov    eax,cr3
c000cc34:	0f 22 d8             	mov    cr3,eax
c000cc37:	b0 01                	mov    al,0x1
c000cc39:	e9 48 ff ff ff       	jmp    c000cb86 <VAS::tryLoadBackOffDisk(unsigned long)+0x46>
c000cc3e:	fb                   	sti    
c000cc3f:	eb e0                	jmp    c000cc21 <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000cc41:	83 ec 0c             	sub    esp,0xc
c000cc44:	68 0b 45 02 c0       	push   0xc002450b
c000cc49:	e8 77 03 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000cc4e:	83 c4 10             	add    esp,0x10
c000cc51:	eb de                	jmp    c000cc31 <VAS::tryLoadBackOffDisk(unsigned long)+0xf1>
c000cc53:	90                   	nop

c000cc54 <VAS::scanForEviction()>:
c000cc54:	57                   	push   edi
c000cc55:	31 ff                	xor    edi,edi
c000cc57:	56                   	push   esi
c000cc58:	53                   	push   ebx
c000cc59:	83 ec 10             	sub    esp,0x10
c000cc5c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cc60:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000cc63:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000cc69:	75 0e                	jne    c000cc79 <VAS::scanForEviction()+0x25>
c000cc6b:	89 da                	mov    edx,ebx
c000cc6d:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000cc70:	c1 ea 16             	shr    edx,0x16
c000cc73:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000cc77:	74 4e                	je     c000ccc7 <VAS::scanForEviction()+0x73>
c000cc79:	53                   	push   ebx
c000cc7a:	56                   	push   esi
c000cc7b:	e8 be f2 ff ff       	call   c000bf3e <VAS::getPageTableEntry(unsigned long)>
c000cc80:	5a                   	pop    edx
c000cc81:	8b 10                	mov    edx,DWORD PTR [eax]
c000cc83:	59                   	pop    ecx
c000cc84:	89 d1                	mov    ecx,edx
c000cc86:	81 e1 01 08 00 00    	and    ecx,0x801
c000cc8c:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000cc92:	74 3e                	je     c000ccd2 <VAS::scanForEviction()+0x7e>
c000cc94:	81 c3 00 10 00 00    	add    ebx,0x1000
c000cc9a:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000cca0:	76 2b                	jbe    c000cccd <VAS::scanForEviction()+0x79>
c000cca2:	47                   	inc    edi
c000cca3:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000ccaa:	83 ff 03             	cmp    edi,0x3
c000ccad:	74 32                	je     c000cce1 <VAS::scanForEviction()+0x8d>
c000ccaf:	31 db                	xor    ebx,ebx
c000ccb1:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000ccb7:	75 c0                	jne    c000cc79 <VAS::scanForEviction()+0x25>
c000ccb9:	89 da                	mov    edx,ebx
c000ccbb:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ccbe:	c1 ea 16             	shr    edx,0x16
c000ccc1:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000ccc5:	75 b2                	jne    c000cc79 <VAS::scanForEviction()+0x25>
c000ccc7:	81 c3 00 00 40 00    	add    ebx,0x400000
c000cccd:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000ccd0:	eb 91                	jmp    c000cc63 <VAS::scanForEviction()+0xf>
c000ccd2:	f6 c2 20             	test   dl,0x20
c000ccd5:	74 13                	je     c000ccea <VAS::scanForEviction()+0x96>
c000ccd7:	83 e2 df             	and    edx,0xffffffdf
c000ccda:	89 10                	mov    DWORD PTR [eax],edx
c000ccdc:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000ccdf:	eb b3                	jmp    c000cc94 <VAS::scanForEviction()+0x40>
c000cce1:	83 c4 10             	add    esp,0x10
c000cce4:	31 c0                	xor    eax,eax
c000cce6:	5b                   	pop    ebx
c000cce7:	5e                   	pop    esi
c000cce8:	5f                   	pop    edi
c000cce9:	c3                   	ret    
c000ccea:	83 ec 08             	sub    esp,0x8
c000cced:	89 d0                	mov    eax,edx
c000ccef:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ccf4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ccf8:	53                   	push   ebx
c000ccf9:	68 1b 45 02 c0       	push   0xc002451b
c000ccfe:	e8 c2 02 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000cd03:	58                   	pop    eax
c000cd04:	5a                   	pop    edx
c000cd05:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000cd08:	56                   	push   esi
c000cd09:	e8 62 fd ff ff       	call   c000ca70 <VAS::evict(unsigned long)>
c000cd0e:	59                   	pop    ecx
c000cd0f:	5b                   	pop    ebx
c000cd10:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000cd13:	68 2f 45 02 c0       	push   0xc002452f
c000cd18:	e8 a8 02 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000cd1d:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000cd24:	83 c4 10             	add    esp,0x10
c000cd27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cd2b:	83 c4 10             	add    esp,0x10
c000cd2e:	5b                   	pop    ebx
c000cd2f:	5e                   	pop    esi
c000cd30:	5f                   	pop    edi
c000cd31:	c3                   	ret    

c000cd32 <mapVASFirstTime>:
c000cd32:	55                   	push   ebp
c000cd33:	57                   	push   edi
c000cd34:	56                   	push   esi
c000cd35:	53                   	push   ebx
c000cd36:	83 ec 0c             	sub    esp,0xc
c000cd39:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000cd3e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000cd41:	4a                   	dec    edx
c000cd42:	0f 84 fe 00 00 00    	je     c000ce46 <mapVASFirstTime+0x114>
c000cd48:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000cd4b:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000cd4e:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000cd53:	c1 e5 15             	shl    ebp,0x15
c000cd56:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000cd5b:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000cd61:	29 eb                	sub    ebx,ebp
c000cd63:	29 ef                	sub    edi,ebp
c000cd65:	83 ec 08             	sub    esp,0x8
c000cd68:	53                   	push   ebx
c000cd69:	68 5b 45 02 c0       	push   0xc002455b
c000cd6e:	e8 52 02 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000cd73:	e8 f6 d5 ff ff       	call   c000a36e <Phys::allocatePage()>
c000cd78:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c000cd7f:	6a 01                	push   0x1
c000cd81:	53                   	push   ebx
c000cd82:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000cd88:	50                   	push   eax
c000cd89:	56                   	push   esi
c000cd8a:	e8 3d f8 ff ff       	call   c000c5cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000cd8f:	83 c4 20             	add    esp,0x20
c000cd92:	39 fb                	cmp    ebx,edi
c000cd94:	75 cf                	jne    c000cd65 <mapVASFirstTime+0x33>
c000cd96:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000cd9b:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000cda0:	29 eb                	sub    ebx,ebp
c000cda2:	29 ef                	sub    edi,ebp
c000cda4:	83 ec 08             	sub    esp,0x8
c000cda7:	53                   	push   ebx
c000cda8:	68 77 45 02 c0       	push   0xc0024577
c000cdad:	e8 13 02 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000cdb2:	58                   	pop    eax
c000cdb3:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000cdb7:	5a                   	pop    edx
c000cdb8:	19 c0                	sbb    eax,eax
c000cdba:	83 e0 04             	and    eax,0x4
c000cdbd:	05 03 04 00 00       	add    eax,0x403
c000cdc2:	50                   	push   eax
c000cdc3:	68 8b 45 02 c0       	push   0xc002458b
c000cdc8:	e8 f8 01 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000cdcd:	e8 9c d5 ff ff       	call   c000a36e <Phys::allocatePage()>
c000cdd2:	59                   	pop    ecx
c000cdd3:	89 c5                	mov    ebp,eax
c000cdd5:	58                   	pop    eax
c000cdd6:	55                   	push   ebp
c000cdd7:	68 99 45 02 c0       	push   0xc0024599
c000cddc:	e8 e4 01 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000cde1:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000cde5:	19 d2                	sbb    edx,edx
c000cde7:	83 e2 04             	and    edx,0x4
c000cdea:	81 c2 03 04 00 00    	add    edx,0x403
c000cdf0:	89 14 24             	mov    DWORD PTR [esp],edx
c000cdf3:	6a 01                	push   0x1
c000cdf5:	53                   	push   ebx
c000cdf6:	55                   	push   ebp
c000cdf7:	56                   	push   esi
c000cdf8:	e8 cf f7 ff ff       	call   c000c5cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000cdfd:	83 c4 18             	add    esp,0x18
c000ce00:	53                   	push   ebx
c000ce01:	56                   	push   esi
c000ce02:	e8 37 f1 ff ff       	call   c000bf3e <VAS::getPageTableEntry(unsigned long)>
c000ce07:	5a                   	pop    edx
c000ce08:	59                   	pop    ecx
c000ce09:	ff 30                	push   DWORD PTR [eax]
c000ce0b:	68 b5 45 02 c0       	push   0xc00245b5
c000ce10:	e8 b0 01 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000ce15:	0f 20 d8             	mov    eax,cr3
c000ce18:	83 c4 0c             	add    esp,0xc
c000ce1b:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000ce21:	56                   	push   esi
c000ce22:	50                   	push   eax
c000ce23:	68 c0 45 02 c0       	push   0xc00245c0
c000ce28:	e8 98 01 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000ce2d:	83 c4 10             	add    esp,0x10
c000ce30:	39 df                	cmp    edi,ebx
c000ce32:	0f 85 6c ff ff ff    	jne    c000cda4 <mapVASFirstTime+0x72>
c000ce38:	0f 20 d8             	mov    eax,cr3
c000ce3b:	0f 22 d8             	mov    cr3,eax
c000ce3e:	83 c4 0c             	add    esp,0xc
c000ce41:	5b                   	pop    ebx
c000ce42:	5e                   	pop    esi
c000ce43:	5f                   	pop    edi
c000ce44:	5d                   	pop    ebp
c000ce45:	c3                   	ret    
c000ce46:	83 ec 0c             	sub    esp,0xc
c000ce49:	68 42 45 02 c0       	push   0xc0024542
c000ce4e:	e8 72 01 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000ce53:	83 c4 10             	add    esp,0x10
c000ce56:	83 c4 0c             	add    esp,0xc
c000ce59:	5b                   	pop    ebx
c000ce5a:	5e                   	pop    esi
c000ce5b:	5f                   	pop    edi
c000ce5c:	5d                   	pop    ebp
c000ce5d:	c3                   	ret    

c000ce5e <__cxa_atexit>:
c000ce5e:	31 c0                	xor    eax,eax
c000ce60:	c3                   	ret    

c000ce61 <__cxa_finalize>:
c000ce61:	c3                   	ret    

c000ce62 <__stack_chk_fail>:
c000ce62:	55                   	push   ebp
c000ce63:	89 e5                	mov    ebp,esp
c000ce65:	83 ec 14             	sub    esp,0x14
c000ce68:	68 d8 45 02 c0       	push   0xc00245d8
c000ce6d:	e8 53 01 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000ce72:	58                   	pop    eax
c000ce73:	5a                   	pop    edx
c000ce74:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ce77:	68 28 46 02 c0       	push   0xc0024628
c000ce7c:	e8 44 01 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000ce81:	59                   	pop    ecx
c000ce82:	58                   	pop    eax
c000ce83:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ce86:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000ce89:	68 28 46 02 c0       	push   0xc0024628
c000ce8e:	e8 32 01 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000ce93:	5a                   	pop    edx
c000ce94:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ce97:	59                   	pop    ecx
c000ce98:	8b 00                	mov    eax,DWORD PTR [eax]
c000ce9a:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000ce9d:	68 28 46 02 c0       	push   0xc0024628
c000cea2:	e8 1e 01 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000cea7:	5a                   	pop    edx
c000cea8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ceab:	59                   	pop    ecx
c000ceac:	8b 00                	mov    eax,DWORD PTR [eax]
c000ceae:	8b 00                	mov    eax,DWORD PTR [eax]
c000ceb0:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000ceb3:	68 28 46 02 c0       	push   0xc0024628
c000ceb8:	e8 08 01 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000cebd:	c7 04 24 30 46 02 c0 	mov    DWORD PTR [esp],0xc0024630
c000cec4:	e8 54 7e 00 00       	call   c0014d1d <Krnl::panic(char const*)>
c000cec9:	83 c4 10             	add    esp,0x10
c000cecc:	c9                   	leave  
c000cecd:	c3                   	ret    

c000cece <__cxa_pure_virtual>:
c000cece:	83 ec 18             	sub    esp,0x18
c000ced1:	68 48 46 02 c0       	push   0xc0024648
c000ced6:	e8 42 7e 00 00       	call   c0014d1d <Krnl::panic(char const*)>
c000cedb:	83 c4 1c             	add    esp,0x1c
c000cede:	c3                   	ret    

c000cedf <operator new[](unsigned long)>:
c000cedf:	e9 d3 cd ff ff       	jmp    c0009cb7 <malloc>

c000cee4 <operator delete(void*, unsigned long)>:
c000cee4:	e9 ee cd ff ff       	jmp    c0009cd7 <rfree>

c000cee9 <operator delete[](void*)>:
c000cee9:	e9 e9 cd ff ff       	jmp    c0009cd7 <rfree>

c000ceee <operator delete[](void*, unsigned long)>:
c000ceee:	e9 e4 cd ff ff       	jmp    c0009cd7 <rfree>

c000cef3 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000cef3:	55                   	push   ebp
c000cef4:	b9 11 00 00 00       	mov    ecx,0x11
c000cef9:	57                   	push   edi
c000cefa:	56                   	push   esi
c000cefb:	be 2e 41 02 c0       	mov    esi,0xc002412e
c000cf00:	53                   	push   ebx
c000cf01:	83 ec 20             	sub    esp,0x20
c000cf04:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000cf08:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000cf0c:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000cf10:	fc                   	cld    
c000cf11:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cf13:	89 ee                	mov    esi,ebp
c000cf15:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000cf19:	eb 02                	jmp    c000cf1d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c000cf1b:	89 c6                	mov    esi,eax
c000cf1d:	31 d2                	xor    edx,edx
c000cf1f:	41                   	inc    ecx
c000cf20:	89 f0                	mov    eax,esi
c000cf22:	f7 f3                	div    ebx
c000cf24:	39 de                	cmp    esi,ebx
c000cf26:	73 f3                	jae    c000cf1b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c000cf28:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000cf2b:	eb 02                	jmp    c000cf2f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000cf2d:	89 c5                	mov    ebp,eax
c000cf2f:	31 d2                	xor    edx,edx
c000cf31:	49                   	dec    ecx
c000cf32:	89 e8                	mov    eax,ebp
c000cf34:	f7 f3                	div    ebx
c000cf36:	39 dd                	cmp    ebp,ebx
c000cf38:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000cf3c:	88 11                	mov    BYTE PTR [ecx],dl
c000cf3e:	73 ed                	jae    c000cf2d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000cf40:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cf44:	83 c4 20             	add    esp,0x20
c000cf47:	5b                   	pop    ebx
c000cf48:	5e                   	pop    esi
c000cf49:	5f                   	pop    edi
c000cf4a:	5d                   	pop    ebp
c000cf4b:	c3                   	ret    

c000cf4c <Dbg::logc(char)>:
c000cf4c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cf50:	f6 05 20 7e 02 c0 10 	test   BYTE PTR ds:0xc0027e20,0x10
c000cf57:	75 12                	jne    c000cf6b <Dbg::logc(char)+0x1f>
c000cf59:	ba fd 03 00 00       	mov    edx,0x3fd
c000cf5e:	ec                   	in     al,dx
c000cf5f:	a8 20                	test   al,0x20
c000cf61:	74 fb                	je     c000cf5e <Dbg::logc(char)+0x12>
c000cf63:	ba f8 03 00 00       	mov    edx,0x3f8
c000cf68:	88 c8                	mov    al,cl
c000cf6a:	ee                   	out    dx,al
c000cf6b:	c3                   	ret    

c000cf6c <Dbg::logs(char*)>:
c000cf6c:	53                   	push   ebx
c000cf6d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000cf71:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000cf74:	84 c0                	test   al,al
c000cf76:	74 0f                	je     c000cf87 <Dbg::logs(char*)+0x1b>
c000cf78:	50                   	push   eax
c000cf79:	43                   	inc    ebx
c000cf7a:	e8 cd ff ff ff       	call   c000cf4c <Dbg::logc(char)>
c000cf7f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000cf82:	5a                   	pop    edx
c000cf83:	84 c0                	test   al,al
c000cf85:	75 f1                	jne    c000cf78 <Dbg::logs(char*)+0xc>
c000cf87:	5b                   	pop    ebx
c000cf88:	c3                   	ret    

c000cf89 <Dbg::logWriteInt(unsigned int)>:
c000cf89:	83 ec 10             	sub    esp,0x10
c000cf8c:	6a 0a                	push   0xa
c000cf8e:	8d 44 24 08          	lea    eax,[esp+0x8]
c000cf92:	50                   	push   eax
c000cf93:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf97:	e8 57 ff ff ff       	call   c000cef3 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000cf9c:	50                   	push   eax
c000cf9d:	e8 ca ff ff ff       	call   c000cf6c <Dbg::logs(char*)>
c000cfa2:	83 c4 20             	add    esp,0x20
c000cfa5:	c3                   	ret    

c000cfa6 <Dbg::logWriteIntBase(unsigned int, int)>:
c000cfa6:	83 ec 10             	sub    esp,0x10
c000cfa9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cfad:	8d 44 24 08          	lea    eax,[esp+0x8]
c000cfb1:	50                   	push   eax
c000cfb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb6:	e8 38 ff ff ff       	call   c000cef3 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000cfbb:	50                   	push   eax
c000cfbc:	e8 ab ff ff ff       	call   c000cf6c <Dbg::logs(char*)>
c000cfc1:	83 c4 20             	add    esp,0x20
c000cfc4:	c3                   	ret    

c000cfc5 <Dbg::kprintf(char const*, ...)>:
c000cfc5:	55                   	push   ebp
c000cfc6:	57                   	push   edi
c000cfc7:	56                   	push   esi
c000cfc8:	53                   	push   ebx
c000cfc9:	83 ec 0c             	sub    esp,0xc
c000cfcc:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cfd0:	f6 05 20 7e 02 c0 10 	test   BYTE PTR ds:0xc0027e20,0x10
c000cfd7:	74 08                	je     c000cfe1 <Dbg::kprintf(char const*, ...)+0x1c>
c000cfd9:	83 c4 0c             	add    esp,0xc
c000cfdc:	5b                   	pop    ebx
c000cfdd:	5e                   	pop    esi
c000cfde:	5f                   	pop    edi
c000cfdf:	5d                   	pop    ebp
c000cfe0:	c3                   	ret    
c000cfe1:	8d 44 24 24          	lea    eax,[esp+0x24]
c000cfe5:	31 db                	xor    ebx,ebx
c000cfe7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cfeb:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000cfee:	84 c0                	test   al,al
c000cff0:	74 e7                	je     c000cfd9 <Dbg::kprintf(char const*, ...)+0x14>
c000cff2:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000cff5:	3c 25                	cmp    al,0x25
c000cff7:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000cffa:	75 44                	jne    c000d040 <Dbg::kprintf(char const*, ...)+0x7b>
c000cffc:	83 c3 02             	add    ebx,0x2
c000cfff:	8a 07                	mov    al,BYTE PTR [edi]
c000d001:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000d004:	83 e8 25             	sub    eax,0x25
c000d007:	3c 53                	cmp    al,0x53
c000d009:	0f 87 c9 00 00 00    	ja     c000d0d8 <Dbg::kprintf(char const*, ...)+0x113>
c000d00f:	0f b6 c0             	movzx  eax,al
c000d012:	ff 24 85 5c 46 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdb9a4]
c000d019:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d01d:	89 c8                	mov    eax,ecx
c000d01f:	83 c1 04             	add    ecx,0x4
c000d022:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000d026:	ff 30                	push   DWORD PTR [eax]
c000d028:	e8 5c ff ff ff       	call   c000cf89 <Dbg::logWriteInt(unsigned int)>
c000d02d:	5f                   	pop    edi
c000d02e:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000d032:	84 c0                	test   al,al
c000d034:	74 a3                	je     c000cfd9 <Dbg::kprintf(char const*, ...)+0x14>
c000d036:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000d039:	3c 25                	cmp    al,0x25
c000d03b:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000d03e:	74 bc                	je     c000cffc <Dbg::kprintf(char const*, ...)+0x37>
c000d040:	50                   	push   eax
c000d041:	89 eb                	mov    ebx,ebp
c000d043:	e8 04 ff ff ff       	call   c000cf4c <Dbg::logc(char)>
c000d048:	89 fd                	mov    ebp,edi
c000d04a:	58                   	pop    eax
c000d04b:	eb e1                	jmp    c000d02e <Dbg::kprintf(char const*, ...)+0x69>
c000d04d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d051:	89 c8                	mov    eax,ecx
c000d053:	83 c1 04             	add    ecx,0x4
c000d056:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000d05a:	ff 30                	push   DWORD PTR [eax]
c000d05c:	e8 0b ff ff ff       	call   c000cf6c <Dbg::logs(char*)>
c000d061:	58                   	pop    eax
c000d062:	eb ca                	jmp    c000d02e <Dbg::kprintf(char const*, ...)+0x69>
c000d064:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d068:	89 d0                	mov    eax,edx
c000d06a:	83 c2 04             	add    edx,0x4
c000d06d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d071:	ff 30                	push   DWORD PTR [eax]
c000d073:	e8 11 ff ff ff       	call   c000cf89 <Dbg::logWriteInt(unsigned int)>
c000d078:	58                   	pop    eax
c000d079:	eb b3                	jmp    c000d02e <Dbg::kprintf(char const*, ...)+0x69>
c000d07b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d07f:	89 d0                	mov    eax,edx
c000d081:	83 c2 04             	add    edx,0x4
c000d084:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000d087:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d08b:	50                   	push   eax
c000d08c:	e8 bb fe ff ff       	call   c000cf4c <Dbg::logc(char)>
c000d091:	58                   	pop    eax
c000d092:	eb 9a                	jmp    c000d02e <Dbg::kprintf(char const*, ...)+0x69>
c000d094:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d098:	89 c8                	mov    eax,ecx
c000d09a:	83 c1 04             	add    ecx,0x4
c000d09d:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000d0a1:	6a 10                	push   0x10
c000d0a3:	ff 30                	push   DWORD PTR [eax]
c000d0a5:	e8 fc fe ff ff       	call   c000cfa6 <Dbg::logWriteIntBase(unsigned int, int)>
c000d0aa:	59                   	pop    ecx
c000d0ab:	5f                   	pop    edi
c000d0ac:	eb 80                	jmp    c000d02e <Dbg::kprintf(char const*, ...)+0x69>
c000d0ae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d0b2:	89 d0                	mov    eax,edx
c000d0b4:	83 c2 08             	add    edx,0x8
c000d0b7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d0bb:	6a 10                	push   0x10
c000d0bd:	ff 30                	push   DWORD PTR [eax]
c000d0bf:	e8 e2 fe ff ff       	call   c000cfa6 <Dbg::logWriteIntBase(unsigned int, int)>
c000d0c4:	58                   	pop    eax
c000d0c5:	5a                   	pop    edx
c000d0c6:	e9 63 ff ff ff       	jmp    c000d02e <Dbg::kprintf(char const*, ...)+0x69>
c000d0cb:	6a 25                	push   0x25
c000d0cd:	e8 7a fe ff ff       	call   c000cf4c <Dbg::logc(char)>
c000d0d2:	58                   	pop    eax
c000d0d3:	e9 56 ff ff ff       	jmp    c000d02e <Dbg::kprintf(char const*, ...)+0x69>
c000d0d8:	6a 25                	push   0x25
c000d0da:	e8 6d fe ff ff       	call   c000cf4c <Dbg::logc(char)>
c000d0df:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000d0e2:	50                   	push   eax
c000d0e3:	e8 64 fe ff ff       	call   c000cf4c <Dbg::logc(char)>
c000d0e8:	5a                   	pop    edx
c000d0e9:	59                   	pop    ecx
c000d0ea:	e9 3f ff ff ff       	jmp    c000d02e <Dbg::kprintf(char const*, ...)+0x69>
c000d0ef:	90                   	nop

c000d0f0 <File::read(unsigned long long, void*, int*)>:
c000d0f0:	53                   	push   ebx
c000d0f1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d0f5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d0f9:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000d100:	3c 19                	cmp    al,0x19
c000d102:	77 35                	ja     c000d139 <File::read(unsigned long long, void*, int*)+0x49>
c000d104:	8b 04 85 c0 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7c40]
c000d10b:	85 c0                	test   eax,eax
c000d10d:	74 2a                	je     c000d139 <File::read(unsigned long long, void*, int*)+0x49>
c000d10f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d115:	85 c0                	test   eax,eax
c000d117:	74 20                	je     c000d139 <File::read(unsigned long long, void*, int*)+0x49>
c000d119:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d11d:	74 21                	je     c000d140 <File::read(unsigned long long, void*, int*)+0x50>
c000d11f:	8b 08                	mov    ecx,DWORD PTR [eax]
c000d121:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d125:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000d12b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d12f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d133:	5b                   	pop    ebx
c000d134:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000d137:	ff e0                	jmp    eax
c000d139:	b8 0b 00 00 00       	mov    eax,0xb
c000d13e:	eb 05                	jmp    c000d145 <File::read(unsigned long long, void*, int*)+0x55>
c000d140:	b8 05 00 00 00       	mov    eax,0x5
c000d145:	5b                   	pop    ebx
c000d146:	c3                   	ret    
c000d147:	90                   	nop

c000d148 <File::write(unsigned long long, void*, int*)>:
c000d148:	53                   	push   ebx
c000d149:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d14d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d151:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000d158:	3c 19                	cmp    al,0x19
c000d15a:	77 35                	ja     c000d191 <File::write(unsigned long long, void*, int*)+0x49>
c000d15c:	8b 04 85 c0 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7c40]
c000d163:	85 c0                	test   eax,eax
c000d165:	74 2a                	je     c000d191 <File::write(unsigned long long, void*, int*)+0x49>
c000d167:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d16d:	85 c0                	test   eax,eax
c000d16f:	74 20                	je     c000d191 <File::write(unsigned long long, void*, int*)+0x49>
c000d171:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d175:	74 21                	je     c000d198 <File::write(unsigned long long, void*, int*)+0x50>
c000d177:	8b 08                	mov    ecx,DWORD PTR [eax]
c000d179:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d17d:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000d183:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d187:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d18b:	5b                   	pop    ebx
c000d18c:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000d18f:	ff e0                	jmp    eax
c000d191:	b8 0b 00 00 00       	mov    eax,0xb
c000d196:	eb 05                	jmp    c000d19d <File::write(unsigned long long, void*, int*)+0x55>
c000d198:	b8 05 00 00 00       	mov    eax,0x5
c000d19d:	5b                   	pop    ebx
c000d19e:	c3                   	ret    
c000d19f:	90                   	nop

c000d1a0 <Directory::read(unsigned long long, void*, int*)>:
c000d1a0:	53                   	push   ebx
c000d1a1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d1a5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d1a9:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000d1b0:	3c 19                	cmp    al,0x19
c000d1b2:	77 35                	ja     c000d1e9 <Directory::read(unsigned long long, void*, int*)+0x49>
c000d1b4:	8b 04 85 c0 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7c40]
c000d1bb:	85 c0                	test   eax,eax
c000d1bd:	74 2a                	je     c000d1e9 <Directory::read(unsigned long long, void*, int*)+0x49>
c000d1bf:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d1c5:	85 c0                	test   eax,eax
c000d1c7:	74 20                	je     c000d1e9 <Directory::read(unsigned long long, void*, int*)+0x49>
c000d1c9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d1cd:	74 21                	je     c000d1f0 <Directory::read(unsigned long long, void*, int*)+0x50>
c000d1cf:	8b 08                	mov    ecx,DWORD PTR [eax]
c000d1d1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d1d5:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000d1db:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d1df:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d1e3:	5b                   	pop    ebx
c000d1e4:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000d1e7:	ff e0                	jmp    eax
c000d1e9:	b8 0b 00 00 00       	mov    eax,0xb
c000d1ee:	eb 05                	jmp    c000d1f5 <Directory::read(unsigned long long, void*, int*)+0x55>
c000d1f0:	b8 05 00 00 00       	mov    eax,0x5
c000d1f5:	5b                   	pop    ebx
c000d1f6:	c3                   	ret    
c000d1f7:	90                   	nop

c000d1f8 <Directory::write(unsigned long long, void*, int*)>:
c000d1f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d1fc:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000d203:	b8 0b 00 00 00       	mov    eax,0xb
c000d208:	80 fa 19             	cmp    dl,0x19
c000d20b:	77 18                	ja     c000d225 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000d20d:	8b 14 95 c0 83 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7c40]
c000d214:	85 d2                	test   edx,edx
c000d216:	74 0d                	je     c000d225 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000d218:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000d21f:	19 c0                	sbb    eax,eax
c000d221:	83 e0 0a             	and    eax,0xa
c000d224:	40                   	inc    eax
c000d225:	c3                   	ret    

c000d226 <File::isAtty()>:
c000d226:	31 c0                	xor    eax,eax
c000d228:	c3                   	ret    
c000d229:	90                   	nop

c000d22a <Directory::isAtty()>:
c000d22a:	31 c0                	xor    eax,eax
c000d22c:	c3                   	ret    
c000d22d:	90                   	nop

c000d22e <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000d22e:	b8 0a 00 00 00       	mov    eax,0xa
c000d233:	c3                   	ret    

c000d234 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000d234:	b8 0a 00 00 00       	mov    eax,0xa
c000d239:	c3                   	ret    

c000d23a <Filesystem::allocateSwapfile(char const*, int)>:
c000d23a:	31 c0                	xor    eax,eax
c000d23c:	31 d2                	xor    edx,edx
c000d23e:	c3                   	ret    
c000d23f:	90                   	nop

c000d240 <File::~File()>:
c000d240:	83 ec 0c             	sub    esp,0xc
c000d243:	ba 98 48 02 c0       	mov    edx,0xc0024898
c000d248:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d24c:	89 10                	mov    DWORD PTR [eax],edx
c000d24e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d252:	83 ec 0c             	sub    esp,0xc
c000d255:	50                   	push   eax
c000d256:	e8 ad e7 ff ff       	call   c000ba08 <UnixFile::~UnixFile()>
c000d25b:	83 c4 10             	add    esp,0x10
c000d25e:	90                   	nop
c000d25f:	83 c4 0c             	add    esp,0xc
c000d262:	c3                   	ret    
c000d263:	90                   	nop

c000d264 <File::~File()>:
c000d264:	83 ec 0c             	sub    esp,0xc
c000d267:	83 ec 0c             	sub    esp,0xc
c000d26a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d26e:	e8 cd ff ff ff       	call   c000d240 <File::~File()>
c000d273:	83 c4 10             	add    esp,0x10
c000d276:	83 ec 08             	sub    esp,0x8
c000d279:	68 14 01 00 00       	push   0x114
c000d27e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d282:	e8 5d fc ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c000d287:	83 c4 10             	add    esp,0x10
c000d28a:	83 c4 0c             	add    esp,0xc
c000d28d:	c3                   	ret    

c000d28e <Directory::~Directory()>:
c000d28e:	83 ec 0c             	sub    esp,0xc
c000d291:	ba b4 48 02 c0       	mov    edx,0xc00248b4
c000d296:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d29a:	89 10                	mov    DWORD PTR [eax],edx
c000d29c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2a0:	83 ec 0c             	sub    esp,0xc
c000d2a3:	50                   	push   eax
c000d2a4:	e8 5f e7 ff ff       	call   c000ba08 <UnixFile::~UnixFile()>
c000d2a9:	83 c4 10             	add    esp,0x10
c000d2ac:	90                   	nop
c000d2ad:	83 c4 0c             	add    esp,0xc
c000d2b0:	c3                   	ret    
c000d2b1:	90                   	nop

c000d2b2 <Directory::~Directory()>:
c000d2b2:	83 ec 0c             	sub    esp,0xc
c000d2b5:	83 ec 0c             	sub    esp,0xc
c000d2b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2bc:	e8 cd ff ff ff       	call   c000d28e <Directory::~Directory()>
c000d2c1:	83 c4 10             	add    esp,0x10
c000d2c4:	83 ec 08             	sub    esp,0x8
c000d2c7:	68 14 01 00 00       	push   0x114
c000d2cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2d0:	e8 0f fc ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c000d2d5:	83 c4 10             	add    esp,0x10
c000d2d8:	83 c4 0c             	add    esp,0xc
c000d2db:	c3                   	ret    

c000d2dc <Filesystem::Filesystem()>:
c000d2dc:	ba 30 48 02 c0       	mov    edx,0xc0024830
c000d2e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d2e5:	89 10                	mov    DWORD PTR [eax],edx
c000d2e7:	8b 15 38 7f 02 c0    	mov    edx,DWORD PTR ds:0xc0027f38
c000d2ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d2f1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d2f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d2f8:	a3 38 7f 02 c0       	mov    ds:0xc0027f38,eax
c000d2fd:	90                   	nop
c000d2fe:	c3                   	ret    
c000d2ff:	90                   	nop

c000d300 <Filesystem::~Filesystem()>:
c000d300:	ba 30 48 02 c0       	mov    edx,0xc0024830
c000d305:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d309:	89 10                	mov    DWORD PTR [eax],edx
c000d30b:	90                   	nop
c000d30c:	c3                   	ret    
c000d30d:	90                   	nop

c000d30e <Filesystem::~Filesystem()>:
c000d30e:	83 ec 0c             	sub    esp,0xc
c000d311:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d315:	e8 e6 ff ff ff       	call   c000d300 <Filesystem::~Filesystem()>
c000d31a:	83 c4 04             	add    esp,0x4
c000d31d:	83 ec 08             	sub    esp,0x8
c000d320:	6a 08                	push   0x8
c000d322:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d326:	e8 b9 fb ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c000d32b:	83 c4 10             	add    esp,0x10
c000d32e:	83 c4 0c             	add    esp,0xc
c000d331:	c3                   	ret    

c000d332 <Fs::getcwd(Process*, char*, int)>:
c000d332:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d336:	31 c0                	xor    eax,eax
c000d338:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000d33b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000d33f:	7d 15                	jge    c000d356 <Fs::getcwd(Process*, char*, int)+0x24>
c000d341:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d345:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000d34c:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000d34f:	84 c9                	test   cl,cl
c000d351:	74 06                	je     c000d359 <Fs::getcwd(Process*, char*, int)+0x27>
c000d353:	40                   	inc    eax
c000d354:	eb e2                	jmp    c000d338 <Fs::getcwd(Process*, char*, int)+0x6>
c000d356:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000d359:	31 c0                	xor    eax,eax
c000d35b:	c3                   	ret    

c000d35c <Fs::initVFS()>:
c000d35c:	83 ec 18             	sub    esp,0x18
c000d35f:	6a 08                	push   0x8
c000d361:	e8 51 c9 ff ff       	call   c0009cb7 <malloc>
c000d366:	89 04 24             	mov    DWORD PTR [esp],eax
c000d369:	e8 82 e8 00 00       	call   c001bbf0 <FAT::FAT()>
c000d36e:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000d375:	e8 3d c9 ff ff       	call   c0009cb7 <malloc>
c000d37a:	89 04 24             	mov    DWORD PTR [esp],eax
c000d37d:	e8 fe fa 00 00       	call   c001ce80 <ISO9660::ISO9660()>
c000d382:	83 c4 1c             	add    esp,0x1c
c000d385:	c3                   	ret    

c000d386 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000d386:	55                   	push   ebp
c000d387:	57                   	push   edi
c000d388:	56                   	push   esi
c000d389:	53                   	push   ebx
c000d38a:	81 ec 10 04 00 00    	sub    esp,0x410
c000d390:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000d397:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000d39e:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000d3a5:	68 00 04 00 00       	push   0x400
c000d3aa:	6a 00                	push   0x0
c000d3ac:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000d3b0:	56                   	push   esi
c000d3b1:	e8 c6 32 ff ff       	call   c000067c <memset>
c000d3b6:	83 c4 10             	add    esp,0x10
c000d3b9:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000d3bd:	75 0b                	jne    c000d3ca <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000d3bf:	50                   	push   eax
c000d3c0:	50                   	push   eax
c000d3c1:	57                   	push   edi
c000d3c2:	56                   	push   esi
c000d3c3:	e8 70 33 ff ff       	call   c0000738 <strcpy>
c000d3c8:	eb 41                	jmp    c000d40b <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000d3ca:	8a 07                	mov    al,BYTE PTR [edi]
c000d3cc:	3c 5c                	cmp    al,0x5c
c000d3ce:	74 04                	je     c000d3d4 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000d3d0:	3c 2f                	cmp    al,0x2f
c000d3d2:	75 18                	jne    c000d3ec <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000d3d4:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000d3d7:	3c 60                	cmp    al,0x60
c000d3d9:	7e 03                	jle    c000d3de <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000d3db:	83 e8 20             	sub    eax,0x20
c000d3de:	88 04 24             	mov    BYTE PTR [esp],al
c000d3e1:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000d3e8:	50                   	push   eax
c000d3e9:	50                   	push   eax
c000d3ea:	eb 18                	jmp    c000d404 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000d3ec:	50                   	push   eax
c000d3ed:	50                   	push   eax
c000d3ee:	55                   	push   ebp
c000d3ef:	56                   	push   esi
c000d3f0:	e8 43 33 ff ff       	call   c0000738 <strcpy>
c000d3f5:	5a                   	pop    edx
c000d3f6:	59                   	pop    ecx
c000d3f7:	68 b7 5f 02 c0       	push   0xc0025fb7
c000d3fc:	56                   	push   esi
c000d3fd:	e8 76 34 ff ff       	call   c0000878 <strcat>
c000d402:	5d                   	pop    ebp
c000d403:	58                   	pop    eax
c000d404:	57                   	push   edi
c000d405:	56                   	push   esi
c000d406:	e8 6d 34 ff ff       	call   c0000878 <strcat>
c000d40b:	83 c4 10             	add    esp,0x10
c000d40e:	8a 04 24             	mov    al,BYTE PTR [esp]
c000d411:	3c 60                	cmp    al,0x60
c000d413:	7e 03                	jle    c000d418 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000d415:	83 e8 20             	sub    eax,0x20
c000d418:	88 04 24             	mov    BYTE PTR [esp],al
c000d41b:	88 03                	mov    BYTE PTR [ebx],al
c000d41d:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000d424:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000d42a:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000d42e:	bf 03 00 00 00       	mov    edi,0x3
c000d433:	b8 03 00 00 00       	mov    eax,0x3
c000d438:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000d43b:	84 d2                	test   dl,dl
c000d43d:	0f 84 91 00 00 00    	je     c000d4d4 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000d443:	8d 4f 01             	lea    ecx,[edi+0x1]
c000d446:	80 fa 5c             	cmp    dl,0x5c
c000d449:	74 05                	je     c000d450 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000d44b:	80 fa 2f             	cmp    dl,0x2f
c000d44e:	75 12                	jne    c000d462 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000d450:	89 c5                	mov    ebp,eax
c000d452:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000d457:	74 09                	je     c000d462 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000d459:	40                   	inc    eax
c000d45a:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000d45e:	89 cf                	mov    edi,ecx
c000d460:	eb d6                	jmp    c000d438 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000d462:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000d467:	75 5b                	jne    c000d4c4 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000d469:	80 fa 2e             	cmp    dl,0x2e
c000d46c:	75 56                	jne    c000d4c4 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000d46e:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000d472:	74 19                	je     c000d48d <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000d474:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000d479:	74 53                	je     c000d4ce <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000d47b:	89 f9                	mov    ecx,edi
c000d47d:	41                   	inc    ecx
c000d47e:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000d481:	80 fa 2f             	cmp    dl,0x2f
c000d484:	74 f7                	je     c000d47d <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000d486:	80 fa 5c             	cmp    dl,0x5c
c000d489:	74 f2                	je     c000d47d <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000d48b:	eb d1                	jmp    c000d45e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d48d:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000d492:	74 3a                	je     c000d4ce <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000d494:	83 f8 03             	cmp    eax,0x3
c000d497:	74 c5                	je     c000d45e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d499:	41                   	inc    ecx
c000d49a:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000d49d:	80 fa 2f             	cmp    dl,0x2f
c000d4a0:	74 f7                	je     c000d499 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000d4a2:	80 fa 5c             	cmp    dl,0x5c
c000d4a5:	74 f2                	je     c000d499 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000d4a7:	48                   	dec    eax
c000d4a8:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d4ac:	75 06                	jne    c000d4b4 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000d4ae:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d4b2:	eb f3                	jmp    c000d4a7 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000d4b4:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d4b8:	74 07                	je     c000d4c1 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000d4ba:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d4be:	48                   	dec    eax
c000d4bf:	eb f3                	jmp    c000d4b4 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000d4c1:	40                   	inc    eax
c000d4c2:	eb 9a                	jmp    c000d45e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d4c4:	80 fa 2f             	cmp    dl,0x2f
c000d4c7:	74 95                	je     c000d45e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d4c9:	80 fa 5c             	cmp    dl,0x5c
c000d4cc:	74 90                	je     c000d45e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d4ce:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000d4d1:	40                   	inc    eax
c000d4d2:	eb 8a                	jmp    c000d45e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d4d4:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d4d8:	83 ec 0c             	sub    esp,0xc
c000d4db:	53                   	push   ebx
c000d4dc:	e8 b7 31 ff ff       	call   c0000698 <strlen>
c000d4e1:	83 c4 10             	add    esp,0x10
c000d4e4:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000d4e9:	75 26                	jne    c000d511 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000d4eb:	83 ec 0c             	sub    esp,0xc
c000d4ee:	53                   	push   ebx
c000d4ef:	e8 a4 31 ff ff       	call   c0000698 <strlen>
c000d4f4:	83 c4 10             	add    esp,0x10
c000d4f7:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000d4fc:	74 26                	je     c000d524 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000d4fe:	83 ec 0c             	sub    esp,0xc
c000d501:	53                   	push   ebx
c000d502:	e8 91 31 ff ff       	call   c0000698 <strlen>
c000d507:	83 c4 10             	add    esp,0x10
c000d50a:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000d50f:	eb c7                	jmp    c000d4d8 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000d511:	83 ec 0c             	sub    esp,0xc
c000d514:	53                   	push   ebx
c000d515:	e8 7e 31 ff ff       	call   c0000698 <strlen>
c000d51a:	83 c4 10             	add    esp,0x10
c000d51d:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000d522:	74 c7                	je     c000d4eb <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000d524:	81 c4 0c 04 00 00    	add    esp,0x40c
c000d52a:	5b                   	pop    ebx
c000d52b:	5e                   	pop    esi
c000d52c:	5f                   	pop    edi
c000d52d:	5d                   	pop    ebp
c000d52e:	c3                   	ret    
c000d52f:	90                   	nop

c000d530 <File::File(char const*, Process*)>:
c000d530:	83 ec 0c             	sub    esp,0xc
c000d533:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d537:	83 ec 08             	sub    esp,0x8
c000d53a:	6a 00                	push   0x0
c000d53c:	50                   	push   eax
c000d53d:	e8 e4 e2 ff ff       	call   c000b826 <UnixFile::UnixFile(int)>
c000d542:	83 c4 10             	add    esp,0x10
c000d545:	ba 98 48 02 c0       	mov    edx,0xc0024898
c000d54a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d54e:	89 10                	mov    DWORD PTR [eax],edx
c000d550:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d554:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000d55a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d55e:	83 c0 0d             	add    eax,0xd
c000d561:	83 ec 04             	sub    esp,0x4
c000d564:	52                   	push   edx
c000d565:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d569:	50                   	push   eax
c000d56a:	e8 17 fe ff ff       	call   c000d386 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d56f:	83 c4 10             	add    esp,0x10
c000d572:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d576:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d579:	8d 50 bf             	lea    edx,[eax-0x41]
c000d57c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d580:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d586:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d58a:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d58e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d592:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d598:	0f b6 c0             	movzx  eax,al
c000d59b:	8b 04 85 c0 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7c40]
c000d5a2:	85 c0                	test   eax,eax
c000d5a4:	74 5e                	je     c000d604 <File::File(char const*, Process*)+0xd4>
c000d5a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5aa:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d5b0:	0f b6 c0             	movzx  eax,al
c000d5b3:	8b 04 85 c0 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7c40]
c000d5ba:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d5c0:	85 c0                	test   eax,eax
c000d5c2:	75 40                	jne    c000d604 <File::File(char const*, Process*)+0xd4>
c000d5c4:	83 ec 0c             	sub    esp,0xc
c000d5c7:	68 d4 47 02 c0       	push   0xc00247d4
c000d5cc:	e8 f4 f9 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000d5d1:	83 c4 10             	add    esp,0x10
c000d5d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5d8:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d5de:	0f b6 c0             	movzx  eax,al
c000d5e1:	8b 04 85 c0 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7c40]
c000d5e8:	83 ec 0c             	sub    esp,0xc
c000d5eb:	50                   	push   eax
c000d5ec:	e8 c9 2e 00 00       	call   c00104ba <LogicalDisk::mount()>
c000d5f1:	83 c4 10             	add    esp,0x10
c000d5f4:	83 ec 0c             	sub    esp,0xc
c000d5f7:	68 3b 6a 02 c0       	push   0xc0026a3b
c000d5fc:	e8 c4 f9 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000d601:	83 c4 10             	add    esp,0x10
c000d604:	90                   	nop
c000d605:	83 c4 0c             	add    esp,0xc
c000d608:	c3                   	ret    
c000d609:	90                   	nop

c000d60a <File::open(FileOpenMode)>:
c000d60a:	53                   	push   ebx
c000d60b:	b8 0b 00 00 00       	mov    eax,0xb
c000d610:	83 ec 08             	sub    esp,0x8
c000d613:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d617:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d61e:	80 fa 19             	cmp    dl,0x19
c000d621:	77 40                	ja     c000d663 <File::open(FileOpenMode)+0x59>
c000d623:	8b 14 95 c0 83 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7c40]
c000d62a:	85 d2                	test   edx,edx
c000d62c:	74 35                	je     c000d663 <File::open(FileOpenMode)+0x59>
c000d62e:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d634:	85 d2                	test   edx,edx
c000d636:	74 2b                	je     c000d663 <File::open(FileOpenMode)+0x59>
c000d638:	b8 06 00 00 00       	mov    eax,0x6
c000d63d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d641:	75 20                	jne    c000d663 <File::open(FileOpenMode)+0x59>
c000d643:	8b 02                	mov    eax,DWORD PTR [edx]
c000d645:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d64b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d64f:	51                   	push   ecx
c000d650:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d653:	51                   	push   ecx
c000d654:	52                   	push   edx
c000d655:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000d658:	83 c4 10             	add    esp,0x10
c000d65b:	85 c0                	test   eax,eax
c000d65d:	75 04                	jne    c000d663 <File::open(FileOpenMode)+0x59>
c000d65f:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d663:	83 c4 08             	add    esp,0x8
c000d666:	5b                   	pop    ebx
c000d667:	c3                   	ret    

c000d668 <File::close()>:
c000d668:	53                   	push   ebx
c000d669:	b8 0b 00 00 00       	mov    eax,0xb
c000d66e:	83 ec 08             	sub    esp,0x8
c000d671:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d675:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d67c:	80 fa 19             	cmp    dl,0x19
c000d67f:	77 41                	ja     c000d6c2 <File::close()+0x5a>
c000d681:	8b 1c 95 c0 83 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd7c40]
c000d688:	85 db                	test   ebx,ebx
c000d68a:	74 36                	je     c000d6c2 <File::close()+0x5a>
c000d68c:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d693:	74 2d                	je     c000d6c2 <File::close()+0x5a>
c000d695:	b8 05 00 00 00       	mov    eax,0x5
c000d69a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d69e:	74 22                	je     c000d6c2 <File::close()+0x5a>
c000d6a0:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d6a4:	8b 04 95 c0 83 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7c40]
c000d6ab:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d6b1:	53                   	push   ebx
c000d6b2:	53                   	push   ebx
c000d6b3:	8b 10                	mov    edx,DWORD PTR [eax]
c000d6b5:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d6bb:	50                   	push   eax
c000d6bc:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000d6bf:	83 c4 10             	add    esp,0x10
c000d6c2:	83 c4 08             	add    esp,0x8
c000d6c5:	5b                   	pop    ebx
c000d6c6:	c3                   	ret    
c000d6c7:	90                   	nop

c000d6c8 <File::seek(unsigned long long)>:
c000d6c8:	56                   	push   esi
c000d6c9:	53                   	push   ebx
c000d6ca:	b8 0b 00 00 00       	mov    eax,0xb
c000d6cf:	51                   	push   ecx
c000d6d0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d6d4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d6d8:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000d6df:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d6e3:	80 fa 19             	cmp    dl,0x19
c000d6e6:	77 31                	ja     c000d719 <File::seek(unsigned long long)+0x51>
c000d6e8:	8b 14 95 c0 83 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7c40]
c000d6ef:	85 d2                	test   edx,edx
c000d6f1:	74 26                	je     c000d719 <File::seek(unsigned long long)+0x51>
c000d6f3:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d6f9:	85 d2                	test   edx,edx
c000d6fb:	74 1c                	je     c000d719 <File::seek(unsigned long long)+0x51>
c000d6fd:	b8 05 00 00 00       	mov    eax,0x5
c000d702:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000d706:	74 11                	je     c000d719 <File::seek(unsigned long long)+0x51>
c000d708:	8b 02                	mov    eax,DWORD PTR [edx]
c000d70a:	53                   	push   ebx
c000d70b:	51                   	push   ecx
c000d70c:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000d712:	52                   	push   edx
c000d713:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d716:	83 c4 10             	add    esp,0x10
c000d719:	5a                   	pop    edx
c000d71a:	5b                   	pop    ebx
c000d71b:	5e                   	pop    esi
c000d71c:	c3                   	ret    
c000d71d:	90                   	nop

c000d71e <File::tell(unsigned long long*)>:
c000d71e:	83 ec 0c             	sub    esp,0xc
c000d721:	b8 0b 00 00 00       	mov    eax,0xb
c000d726:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d72a:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d731:	80 fa 19             	cmp    dl,0x19
c000d734:	77 34                	ja     c000d76a <File::tell(unsigned long long*)+0x4c>
c000d736:	8b 14 95 c0 83 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7c40]
c000d73d:	85 d2                	test   edx,edx
c000d73f:	74 29                	je     c000d76a <File::tell(unsigned long long*)+0x4c>
c000d741:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d747:	85 d2                	test   edx,edx
c000d749:	74 1f                	je     c000d76a <File::tell(unsigned long long*)+0x4c>
c000d74b:	b8 05 00 00 00       	mov    eax,0x5
c000d750:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d754:	74 14                	je     c000d76a <File::tell(unsigned long long*)+0x4c>
c000d756:	50                   	push   eax
c000d757:	8b 02                	mov    eax,DWORD PTR [edx]
c000d759:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d75d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d763:	52                   	push   edx
c000d764:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d767:	83 c4 10             	add    esp,0x10
c000d76a:	83 c4 0c             	add    esp,0xc
c000d76d:	c3                   	ret    

c000d76e <File::rewind()>:
c000d76e:	83 ec 10             	sub    esp,0x10
c000d771:	6a 00                	push   0x0
c000d773:	6a 00                	push   0x0
c000d775:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d779:	e8 4a ff ff ff       	call   c000d6c8 <File::seek(unsigned long long)>
c000d77e:	83 c4 1c             	add    esp,0x1c
c000d781:	c3                   	ret    

c000d782 <File::unlink()>:
c000d782:	83 ec 0c             	sub    esp,0xc
c000d785:	b8 0b 00 00 00       	mov    eax,0xb
c000d78a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d78e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d795:	80 f9 19             	cmp    cl,0x19
c000d798:	77 2f                	ja     c000d7c9 <File::unlink()+0x47>
c000d79a:	8b 0c 8d c0 83 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7c40]
c000d7a1:	85 c9                	test   ecx,ecx
c000d7a3:	74 24                	je     c000d7c9 <File::unlink()+0x47>
c000d7a5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d7ab:	85 c9                	test   ecx,ecx
c000d7ad:	74 1a                	je     c000d7c9 <File::unlink()+0x47>
c000d7af:	b8 06 00 00 00       	mov    eax,0x6
c000d7b4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d7b8:	75 0f                	jne    c000d7c9 <File::unlink()+0x47>
c000d7ba:	83 c2 0d             	add    edx,0xd
c000d7bd:	50                   	push   eax
c000d7be:	50                   	push   eax
c000d7bf:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d7c1:	52                   	push   edx
c000d7c2:	51                   	push   ecx
c000d7c3:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d7c6:	83 c4 10             	add    esp,0x10
c000d7c9:	83 c4 0c             	add    esp,0xc
c000d7cc:	c3                   	ret    
c000d7cd:	90                   	nop

c000d7ce <File::rename(char const*)>:
c000d7ce:	83 ec 0c             	sub    esp,0xc
c000d7d1:	b8 0b 00 00 00       	mov    eax,0xb
c000d7d6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d7da:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d7e1:	80 f9 19             	cmp    cl,0x19
c000d7e4:	77 32                	ja     c000d818 <File::rename(char const*)+0x4a>
c000d7e6:	8b 0c 8d c0 83 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7c40]
c000d7ed:	85 c9                	test   ecx,ecx
c000d7ef:	74 27                	je     c000d818 <File::rename(char const*)+0x4a>
c000d7f1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d7f7:	85 c9                	test   ecx,ecx
c000d7f9:	74 1d                	je     c000d818 <File::rename(char const*)+0x4a>
c000d7fb:	b8 06 00 00 00       	mov    eax,0x6
c000d800:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d804:	75 12                	jne    c000d818 <File::rename(char const*)+0x4a>
c000d806:	83 c2 0d             	add    edx,0xd
c000d809:	50                   	push   eax
c000d80a:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d80c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d810:	52                   	push   edx
c000d811:	51                   	push   ecx
c000d812:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d815:	83 c4 10             	add    esp,0x10
c000d818:	83 c4 0c             	add    esp,0xc
c000d81b:	c3                   	ret    

c000d81c <File::chfatattr(unsigned char, unsigned char)>:
c000d81c:	57                   	push   edi
c000d81d:	b8 0b 00 00 00       	mov    eax,0xb
c000d822:	56                   	push   esi
c000d823:	53                   	push   ebx
c000d824:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d828:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d82c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d833:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000d837:	80 f9 19             	cmp    cl,0x19
c000d83a:	77 37                	ja     c000d873 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d83c:	8b 0c 8d c0 83 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7c40]
c000d843:	85 c9                	test   ecx,ecx
c000d845:	74 2c                	je     c000d873 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d847:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d84d:	85 c9                	test   ecx,ecx
c000d84f:	74 22                	je     c000d873 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d851:	b8 06 00 00 00       	mov    eax,0x6
c000d856:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d85a:	75 17                	jne    c000d873 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d85c:	8b 39                	mov    edi,DWORD PTR [ecx]
c000d85e:	89 f0                	mov    eax,esi
c000d860:	83 c2 0d             	add    edx,0xd
c000d863:	0f b6 f0             	movzx  esi,al
c000d866:	0f b6 db             	movzx  ebx,bl
c000d869:	56                   	push   esi
c000d86a:	53                   	push   ebx
c000d86b:	52                   	push   edx
c000d86c:	51                   	push   ecx
c000d86d:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000d870:	83 c4 10             	add    esp,0x10
c000d873:	5b                   	pop    ebx
c000d874:	5e                   	pop    esi
c000d875:	5f                   	pop    edi
c000d876:	c3                   	ret    
c000d877:	90                   	nop

c000d878 <File::exists()>:
c000d878:	83 ec 0c             	sub    esp,0xc
c000d87b:	31 c0                	xor    eax,eax
c000d87d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d881:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d888:	80 f9 19             	cmp    cl,0x19
c000d88b:	77 24                	ja     c000d8b1 <File::exists()+0x39>
c000d88d:	8b 0c 8d c0 83 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7c40]
c000d894:	85 c9                	test   ecx,ecx
c000d896:	74 19                	je     c000d8b1 <File::exists()+0x39>
c000d898:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d89e:	85 c9                	test   ecx,ecx
c000d8a0:	74 0f                	je     c000d8b1 <File::exists()+0x39>
c000d8a2:	83 c2 0d             	add    edx,0xd
c000d8a5:	50                   	push   eax
c000d8a6:	50                   	push   eax
c000d8a7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d8a9:	52                   	push   edx
c000d8aa:	51                   	push   ecx
c000d8ab:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d8ae:	83 c4 10             	add    esp,0x10
c000d8b1:	83 c4 0c             	add    esp,0xc
c000d8b4:	c3                   	ret    
c000d8b5:	90                   	nop

c000d8b6 <File::stat(unsigned long long*, bool*)>:
c000d8b6:	56                   	push   esi
c000d8b7:	53                   	push   ebx
c000d8b8:	50                   	push   eax
c000d8b9:	b8 0b 00 00 00       	mov    eax,0xb
c000d8be:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d8c2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000d8c6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d8cd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d8d1:	80 f9 19             	cmp    cl,0x19
c000d8d4:	77 3d                	ja     c000d913 <File::stat(unsigned long long*, bool*)+0x5d>
c000d8d6:	8b 0c 8d c0 83 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7c40]
c000d8dd:	85 c9                	test   ecx,ecx
c000d8df:	74 32                	je     c000d913 <File::stat(unsigned long long*, bool*)+0x5d>
c000d8e1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d8e7:	85 c9                	test   ecx,ecx
c000d8e9:	74 28                	je     c000d913 <File::stat(unsigned long long*, bool*)+0x5d>
c000d8eb:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d8ed:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d8f1:	74 13                	je     c000d906 <File::stat(unsigned long long*, bool*)+0x50>
c000d8f3:	83 ec 04             	sub    esp,0x4
c000d8f6:	56                   	push   esi
c000d8f7:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000d8fd:	51                   	push   ecx
c000d8fe:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000d901:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000d904:	eb 0a                	jmp    c000d910 <File::stat(unsigned long long*, bool*)+0x5a>
c000d906:	53                   	push   ebx
c000d907:	83 c2 0d             	add    edx,0xd
c000d90a:	56                   	push   esi
c000d90b:	52                   	push   edx
c000d90c:	51                   	push   ecx
c000d90d:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000d910:	83 c4 10             	add    esp,0x10
c000d913:	5a                   	pop    edx
c000d914:	5b                   	pop    ebx
c000d915:	5e                   	pop    esi
c000d916:	c3                   	ret    

c000d917 <Fs::setcwd(Process*, char*)>:
c000d917:	55                   	push   ebp
c000d918:	57                   	push   edi
c000d919:	56                   	push   esi
c000d91a:	53                   	push   ebx
c000d91b:	81 ec 20 02 00 00    	sub    esp,0x220
c000d921:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000d928:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000d92e:	57                   	push   edi
c000d92f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000d936:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000d93a:	56                   	push   esi
c000d93b:	e8 46 fa ff ff       	call   c000d386 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d940:	89 34 24             	mov    DWORD PTR [esp],esi
c000d943:	e8 50 2d ff ff       	call   c0000698 <strlen>
c000d948:	83 c4 10             	add    esp,0x10
c000d94b:	83 f8 02             	cmp    eax,0x2
c000d94e:	77 15                	ja     c000d965 <Fs::setcwd(Process*, char*)+0x4e>
c000d950:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000d955:	83 eb 41             	sub    ebx,0x41
c000d958:	8b 04 9d c0 83 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd7c40]
c000d95f:	85 c0                	test   eax,eax
c000d961:	75 1c                	jne    c000d97f <Fs::setcwd(Process*, char*)+0x68>
c000d963:	eb 4c                	jmp    c000d9b1 <Fs::setcwd(Process*, char*)+0x9a>
c000d965:	83 ec 0c             	sub    esp,0xc
c000d968:	56                   	push   esi
c000d969:	e8 2a 2d ff ff       	call   c0000698 <strlen>
c000d96e:	83 c4 10             	add    esp,0x10
c000d971:	83 f8 03             	cmp    eax,0x3
c000d974:	75 74                	jne    c000d9ea <Fs::setcwd(Process*, char*)+0xd3>
c000d976:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000d97b:	75 6d                	jne    c000d9ea <Fs::setcwd(Process*, char*)+0xd3>
c000d97d:	eb d1                	jmp    c000d950 <Fs::setcwd(Process*, char*)+0x39>
c000d97f:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000d986:	75 29                	jne    c000d9b1 <Fs::setcwd(Process*, char*)+0x9a>
c000d988:	83 ec 0c             	sub    esp,0xc
c000d98b:	68 ac 47 02 c0       	push   0xc00247ac
c000d990:	e8 30 f6 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000d995:	5a                   	pop    edx
c000d996:	ff 34 9d c0 83 02 c0 	push   DWORD PTR [ebx*4-0x3ffd7c40]
c000d99d:	e8 18 2b 00 00       	call   c00104ba <LogicalDisk::mount()>
c000d9a2:	c7 04 24 3b 6a 02 c0 	mov    DWORD PTR [esp],0xc0026a3b
c000d9a9:	e8 17 f6 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000d9ae:	83 c4 10             	add    esp,0x10
c000d9b1:	b8 03 00 00 00       	mov    eax,0x3
c000d9b6:	83 fb 19             	cmp    ebx,0x19
c000d9b9:	0f 87 c6 00 00 00    	ja     c000da85 <Fs::setcwd(Process*, char*)+0x16e>
c000d9bf:	8b 14 9d c0 83 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd7c40]
c000d9c6:	b8 05 00 00 00       	mov    eax,0x5
c000d9cb:	85 d2                	test   edx,edx
c000d9cd:	0f 84 b2 00 00 00    	je     c000da85 <Fs::setcwd(Process*, char*)+0x16e>
c000d9d3:	b8 06 00 00 00       	mov    eax,0x6
c000d9d8:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000d9df:	0f 85 92 00 00 00    	jne    c000da77 <Fs::setcwd(Process*, char*)+0x160>
c000d9e5:	e9 9b 00 00 00       	jmp    c000da85 <Fs::setcwd(Process*, char*)+0x16e>
c000d9ea:	83 ec 0c             	sub    esp,0xc
c000d9ed:	68 14 01 00 00       	push   0x114
c000d9f2:	e8 c0 c2 ff ff       	call   c0009cb7 <malloc>
c000d9f7:	83 c4 0c             	add    esp,0xc
c000d9fa:	89 c3                	mov    ebx,eax
c000d9fc:	55                   	push   ebp
c000d9fd:	56                   	push   esi
c000d9fe:	50                   	push   eax
c000d9ff:	e8 2c fb ff ff       	call   c000d530 <File::File(char const*, Process*)>
c000da04:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000da09:	83 c4 0c             	add    esp,0xc
c000da0c:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000da10:	50                   	push   eax
c000da11:	8d 44 24 10          	lea    eax,[esp+0x10]
c000da15:	50                   	push   eax
c000da16:	53                   	push   ebx
c000da17:	e8 9a fe ff ff       	call   c000d8b6 <File::stat(unsigned long long*, bool*)>
c000da1c:	83 c4 10             	add    esp,0x10
c000da1f:	83 f8 02             	cmp    eax,0x2
c000da22:	74 04                	je     c000da28 <Fs::setcwd(Process*, char*)+0x111>
c000da24:	85 c0                	test   eax,eax
c000da26:	74 1c                	je     c000da44 <Fs::setcwd(Process*, char*)+0x12d>
c000da28:	b8 01 00 00 00       	mov    eax,0x1
c000da2d:	85 db                	test   ebx,ebx
c000da2f:	74 54                	je     c000da85 <Fs::setcwd(Process*, char*)+0x16e>
c000da31:	83 ec 0c             	sub    esp,0xc
c000da34:	8b 03                	mov    eax,DWORD PTR [ebx]
c000da36:	53                   	push   ebx
c000da37:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000da3a:	83 c4 10             	add    esp,0x10
c000da3d:	b8 01 00 00 00       	mov    eax,0x1
c000da42:	eb 41                	jmp    c000da85 <Fs::setcwd(Process*, char*)+0x16e>
c000da44:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000da49:	75 1c                	jne    c000da67 <Fs::setcwd(Process*, char*)+0x150>
c000da4b:	b8 02 00 00 00       	mov    eax,0x2
c000da50:	85 db                	test   ebx,ebx
c000da52:	74 31                	je     c000da85 <Fs::setcwd(Process*, char*)+0x16e>
c000da54:	83 ec 0c             	sub    esp,0xc
c000da57:	8b 03                	mov    eax,DWORD PTR [ebx]
c000da59:	53                   	push   ebx
c000da5a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000da5d:	83 c4 10             	add    esp,0x10
c000da60:	b8 02 00 00 00       	mov    eax,0x2
c000da65:	eb 1e                	jmp    c000da85 <Fs::setcwd(Process*, char*)+0x16e>
c000da67:	85 db                	test   ebx,ebx
c000da69:	74 0c                	je     c000da77 <Fs::setcwd(Process*, char*)+0x160>
c000da6b:	83 ec 0c             	sub    esp,0xc
c000da6e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000da70:	53                   	push   ebx
c000da71:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000da74:	83 c4 10             	add    esp,0x10
c000da77:	50                   	push   eax
c000da78:	50                   	push   eax
c000da79:	56                   	push   esi
c000da7a:	57                   	push   edi
c000da7b:	e8 b8 2c ff ff       	call   c0000738 <strcpy>
c000da80:	83 c4 10             	add    esp,0x10
c000da83:	31 c0                	xor    eax,eax
c000da85:	81 c4 1c 02 00 00    	add    esp,0x21c
c000da8b:	5b                   	pop    ebx
c000da8c:	5e                   	pop    esi
c000da8d:	5f                   	pop    edi
c000da8e:	5d                   	pop    ebp
c000da8f:	c3                   	ret    

c000da90 <Directory::Directory(char const*, Process*)>:
c000da90:	83 ec 0c             	sub    esp,0xc
c000da93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da97:	83 ec 08             	sub    esp,0x8
c000da9a:	6a 00                	push   0x0
c000da9c:	50                   	push   eax
c000da9d:	e8 84 dd ff ff       	call   c000b826 <UnixFile::UnixFile(int)>
c000daa2:	83 c4 10             	add    esp,0x10
c000daa5:	ba b4 48 02 c0       	mov    edx,0xc00248b4
c000daaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daae:	89 10                	mov    DWORD PTR [eax],edx
c000dab0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dab4:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000daba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dabe:	83 c0 0d             	add    eax,0xd
c000dac1:	83 ec 04             	sub    esp,0x4
c000dac4:	52                   	push   edx
c000dac5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dac9:	50                   	push   eax
c000daca:	e8 b7 f8 ff ff       	call   c000d386 <Fs::standardiseFiles(char*, char const*, char const*)>
c000dacf:	83 c4 10             	add    esp,0x10
c000dad2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dad6:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000dad9:	8d 50 bf             	lea    edx,[eax-0x41]
c000dadc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dae0:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000dae6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daea:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000daee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daf2:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000daf8:	0f b6 c0             	movzx  eax,al
c000dafb:	8b 04 85 c0 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7c40]
c000db02:	85 c0                	test   eax,eax
c000db04:	74 5e                	je     c000db64 <Directory::Directory(char const*, Process*)+0xd4>
c000db06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db0a:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000db10:	0f b6 c0             	movzx  eax,al
c000db13:	8b 04 85 c0 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7c40]
c000db1a:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000db20:	85 c0                	test   eax,eax
c000db22:	75 40                	jne    c000db64 <Directory::Directory(char const*, Process*)+0xd4>
c000db24:	83 ec 0c             	sub    esp,0xc
c000db27:	68 fc 47 02 c0       	push   0xc00247fc
c000db2c:	e8 94 f4 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000db31:	83 c4 10             	add    esp,0x10
c000db34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db38:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000db3e:	0f b6 c0             	movzx  eax,al
c000db41:	8b 04 85 c0 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7c40]
c000db48:	83 ec 0c             	sub    esp,0xc
c000db4b:	50                   	push   eax
c000db4c:	e8 69 29 00 00       	call   c00104ba <LogicalDisk::mount()>
c000db51:	83 c4 10             	add    esp,0x10
c000db54:	83 ec 0c             	sub    esp,0xc
c000db57:	68 3b 6a 02 c0       	push   0xc0026a3b
c000db5c:	e8 64 f4 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000db61:	83 c4 10             	add    esp,0x10
c000db64:	90                   	nop
c000db65:	83 c4 0c             	add    esp,0xc
c000db68:	c3                   	ret    
c000db69:	90                   	nop

c000db6a <Directory::open()>:
c000db6a:	53                   	push   ebx
c000db6b:	b8 0b 00 00 00       	mov    eax,0xb
c000db70:	83 ec 08             	sub    esp,0x8
c000db73:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000db77:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000db7e:	80 fa 19             	cmp    dl,0x19
c000db81:	77 3d                	ja     c000dbc0 <Directory::open()+0x56>
c000db83:	8b 14 95 c0 83 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7c40]
c000db8a:	85 d2                	test   edx,edx
c000db8c:	74 32                	je     c000dbc0 <Directory::open()+0x56>
c000db8e:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000db94:	85 d2                	test   edx,edx
c000db96:	74 28                	je     c000dbc0 <Directory::open()+0x56>
c000db98:	b8 06 00 00 00       	mov    eax,0x6
c000db9d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000dba1:	75 1d                	jne    c000dbc0 <Directory::open()+0x56>
c000dba3:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000dba9:	50                   	push   eax
c000dbaa:	8b 02                	mov    eax,DWORD PTR [edx]
c000dbac:	51                   	push   ecx
c000dbad:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000dbb0:	51                   	push   ecx
c000dbb1:	52                   	push   edx
c000dbb2:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000dbb5:	83 c4 10             	add    esp,0x10
c000dbb8:	85 c0                	test   eax,eax
c000dbba:	75 04                	jne    c000dbc0 <Directory::open()+0x56>
c000dbbc:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000dbc0:	83 c4 08             	add    esp,0x8
c000dbc3:	5b                   	pop    ebx
c000dbc4:	c3                   	ret    
c000dbc5:	90                   	nop

c000dbc6 <Directory::close()>:
c000dbc6:	53                   	push   ebx
c000dbc7:	b8 0b 00 00 00       	mov    eax,0xb
c000dbcc:	83 ec 08             	sub    esp,0x8
c000dbcf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000dbd3:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000dbda:	80 fa 19             	cmp    dl,0x19
c000dbdd:	77 41                	ja     c000dc20 <Directory::close()+0x5a>
c000dbdf:	8b 1c 95 c0 83 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd7c40]
c000dbe6:	85 db                	test   ebx,ebx
c000dbe8:	74 36                	je     c000dc20 <Directory::close()+0x5a>
c000dbea:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000dbf1:	74 2d                	je     c000dc20 <Directory::close()+0x5a>
c000dbf3:	b8 05 00 00 00       	mov    eax,0x5
c000dbf8:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000dbfc:	74 22                	je     c000dc20 <Directory::close()+0x5a>
c000dbfe:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000dc02:	8b 04 95 c0 83 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7c40]
c000dc09:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000dc0f:	53                   	push   ebx
c000dc10:	53                   	push   ebx
c000dc11:	8b 10                	mov    edx,DWORD PTR [eax]
c000dc13:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000dc19:	50                   	push   eax
c000dc1a:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000dc1d:	83 c4 10             	add    esp,0x10
c000dc20:	83 c4 08             	add    esp,0x8
c000dc23:	5b                   	pop    ebx
c000dc24:	c3                   	ret    
c000dc25:	90                   	nop

c000dc26 <Directory::unlink()>:
c000dc26:	83 ec 0c             	sub    esp,0xc
c000dc29:	b8 0b 00 00 00       	mov    eax,0xb
c000dc2e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dc32:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000dc39:	80 f9 19             	cmp    cl,0x19
c000dc3c:	77 2f                	ja     c000dc6d <Directory::unlink()+0x47>
c000dc3e:	8b 0c 8d c0 83 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7c40]
c000dc45:	85 c9                	test   ecx,ecx
c000dc47:	74 24                	je     c000dc6d <Directory::unlink()+0x47>
c000dc49:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000dc4f:	85 c9                	test   ecx,ecx
c000dc51:	74 1a                	je     c000dc6d <Directory::unlink()+0x47>
c000dc53:	b8 06 00 00 00       	mov    eax,0x6
c000dc58:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000dc5c:	75 0f                	jne    c000dc6d <Directory::unlink()+0x47>
c000dc5e:	83 c2 0d             	add    edx,0xd
c000dc61:	50                   	push   eax
c000dc62:	50                   	push   eax
c000dc63:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dc65:	52                   	push   edx
c000dc66:	51                   	push   ecx
c000dc67:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000dc6a:	83 c4 10             	add    esp,0x10
c000dc6d:	83 c4 0c             	add    esp,0xc
c000dc70:	c3                   	ret    
c000dc71:	90                   	nop

c000dc72 <Directory::rename(char const*)>:
c000dc72:	83 ec 0c             	sub    esp,0xc
c000dc75:	b8 0b 00 00 00       	mov    eax,0xb
c000dc7a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dc7e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000dc85:	80 f9 19             	cmp    cl,0x19
c000dc88:	77 32                	ja     c000dcbc <Directory::rename(char const*)+0x4a>
c000dc8a:	8b 0c 8d c0 83 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7c40]
c000dc91:	85 c9                	test   ecx,ecx
c000dc93:	74 27                	je     c000dcbc <Directory::rename(char const*)+0x4a>
c000dc95:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000dc9b:	85 c9                	test   ecx,ecx
c000dc9d:	74 1d                	je     c000dcbc <Directory::rename(char const*)+0x4a>
c000dc9f:	b8 06 00 00 00       	mov    eax,0x6
c000dca4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000dca8:	75 12                	jne    c000dcbc <Directory::rename(char const*)+0x4a>
c000dcaa:	83 c2 0d             	add    edx,0xd
c000dcad:	50                   	push   eax
c000dcae:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dcb0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dcb4:	52                   	push   edx
c000dcb5:	51                   	push   ecx
c000dcb6:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000dcb9:	83 c4 10             	add    esp,0x10
c000dcbc:	83 c4 0c             	add    esp,0xc
c000dcbf:	c3                   	ret    

c000dcc0 <Directory::exists()>:
c000dcc0:	83 ec 0c             	sub    esp,0xc
c000dcc3:	31 c0                	xor    eax,eax
c000dcc5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dcc9:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000dcd0:	80 f9 19             	cmp    cl,0x19
c000dcd3:	77 24                	ja     c000dcf9 <Directory::exists()+0x39>
c000dcd5:	8b 0c 8d c0 83 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7c40]
c000dcdc:	85 c9                	test   ecx,ecx
c000dcde:	74 19                	je     c000dcf9 <Directory::exists()+0x39>
c000dce0:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000dce6:	85 c9                	test   ecx,ecx
c000dce8:	74 0f                	je     c000dcf9 <Directory::exists()+0x39>
c000dcea:	83 c2 0d             	add    edx,0xd
c000dced:	50                   	push   eax
c000dcee:	50                   	push   eax
c000dcef:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dcf1:	52                   	push   edx
c000dcf2:	51                   	push   ecx
c000dcf3:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000dcf6:	83 c4 10             	add    esp,0x10
c000dcf9:	83 c4 0c             	add    esp,0xc
c000dcfc:	c3                   	ret    
c000dcfd:	90                   	nop

c000dcfe <Directory::read(dirent*)>:
c000dcfe:	83 ec 1c             	sub    esp,0x1c
c000dd01:	b8 0b 00 00 00       	mov    eax,0xb
c000dd06:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dd0a:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000dd11:	80 fa 19             	cmp    dl,0x19
c000dd14:	77 30                	ja     c000dd46 <Directory::read(dirent*)+0x48>
c000dd16:	8b 14 95 c0 83 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7c40]
c000dd1d:	85 d2                	test   edx,edx
c000dd1f:	74 25                	je     c000dd46 <Directory::read(dirent*)+0x48>
c000dd21:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000dd28:	74 1c                	je     c000dd46 <Directory::read(dirent*)+0x48>
c000dd2a:	83 ec 0c             	sub    esp,0xc
c000dd2d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dd2f:	8d 54 24 18          	lea    edx,[esp+0x18]
c000dd33:	52                   	push   edx
c000dd34:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dd38:	6a 00                	push   0x0
c000dd3a:	68 10 01 00 00       	push   0x110
c000dd3f:	51                   	push   ecx
c000dd40:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000dd43:	83 c4 20             	add    esp,0x20
c000dd46:	83 c4 1c             	add    esp,0x1c
c000dd49:	c3                   	ret    

c000dd4a <Directory::create()>:
c000dd4a:	83 ec 0c             	sub    esp,0xc
c000dd4d:	b8 0b 00 00 00       	mov    eax,0xb
c000dd52:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dd56:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000dd5d:	80 f9 19             	cmp    cl,0x19
c000dd60:	77 2f                	ja     c000dd91 <Directory::create()+0x47>
c000dd62:	8b 0c 8d c0 83 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7c40]
c000dd69:	85 c9                	test   ecx,ecx
c000dd6b:	74 24                	je     c000dd91 <Directory::create()+0x47>
c000dd6d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000dd73:	85 c9                	test   ecx,ecx
c000dd75:	74 1a                	je     c000dd91 <Directory::create()+0x47>
c000dd77:	b8 06 00 00 00       	mov    eax,0x6
c000dd7c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000dd80:	75 0f                	jne    c000dd91 <Directory::create()+0x47>
c000dd82:	83 c2 0d             	add    edx,0xd
c000dd85:	50                   	push   eax
c000dd86:	50                   	push   eax
c000dd87:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dd89:	52                   	push   edx
c000dd8a:	51                   	push   ecx
c000dd8b:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000dd8e:	83 c4 10             	add    esp,0x10
c000dd91:	83 c4 0c             	add    esp,0xc
c000dd94:	c3                   	ret    
c000dd95:	90                   	nop

c000dd96 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000dd96:	b8 0a 00 00 00       	mov    eax,0xa
c000dd9b:	c3                   	ret    

c000dd9c <Bus::Bus(char const*)>:
c000dd9c:	83 ec 0c             	sub    esp,0xc
c000dd9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dda3:	83 ec 08             	sub    esp,0x8
c000dda6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddaa:	50                   	push   eax
c000ddab:	e8 ca 08 00 00       	call   c000e67a <Device::Device(char const*)>
c000ddb0:	83 c4 10             	add    esp,0x10
c000ddb3:	ba d0 48 02 c0       	mov    edx,0xc00248d0
c000ddb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ddbc:	89 10                	mov    DWORD PTR [eax],edx
c000ddbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ddc2:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000ddcc:	90                   	nop
c000ddcd:	83 c4 0c             	add    esp,0xc
c000ddd0:	c3                   	ret    
c000ddd1:	90                   	nop
c000ddd2:	66 90                	xchg   ax,ax

c000ddd4 <Bus::~Bus()>:
c000ddd4:	83 ec 0c             	sub    esp,0xc
c000ddd7:	ba d0 48 02 c0       	mov    edx,0xc00248d0
c000dddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dde0:	89 10                	mov    DWORD PTR [eax],edx
c000dde2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dde6:	83 ec 0c             	sub    esp,0xc
c000dde9:	50                   	push   eax
c000ddea:	e8 55 05 00 00       	call   c000e344 <Device::~Device()>
c000ddef:	83 c4 10             	add    esp,0x10
c000ddf2:	90                   	nop
c000ddf3:	83 c4 0c             	add    esp,0xc
c000ddf6:	c3                   	ret    
c000ddf7:	90                   	nop

c000ddf8 <Bus::~Bus()>:
c000ddf8:	83 ec 0c             	sub    esp,0xc
c000ddfb:	83 ec 0c             	sub    esp,0xc
c000ddfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de02:	e8 cd ff ff ff       	call   c000ddd4 <Bus::~Bus()>
c000de07:	83 c4 10             	add    esp,0x10
c000de0a:	83 ec 08             	sub    esp,0x8
c000de0d:	68 58 01 00 00       	push   0x158
c000de12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de16:	e8 c9 f0 ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c000de1b:	83 c4 10             	add    esp,0x10
c000de1e:	83 c4 0c             	add    esp,0xc
c000de21:	c3                   	ret    

c000de22 <beepThread(void*)>:
c000de22:	83 ec 0c             	sub    esp,0xc
c000de25:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c000de2a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000de2e:	48                   	dec    eax
c000de2f:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c000de34:	75 01                	jne    c000de37 <beepThread(void*)+0x15>
c000de36:	fb                   	sti    
c000de37:	83 ec 0c             	sub    esp,0xc
c000de3a:	6b c2 0a             	imul   eax,edx,0xa
c000de3d:	50                   	push   eax
c000de3e:	e8 35 a8 00 00       	call   c0018678 <milliTenthSleep(unsigned int)>
c000de43:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000de4a:	e8 d1 cd 00 00       	call   c001ac20 <Hal::makeBeep(int)>
c000de4f:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000de57:	83 c4 1c             	add    esp,0x1c
c000de5a:	e9 19 a7 00 00       	jmp    c0018578 <blockTask(TaskState)>

c000de5f <Krnl::beep(int, int, bool)>:
c000de5f:	56                   	push   esi
c000de60:	53                   	push   ebx
c000de61:	83 ec 10             	sub    esp,0x10
c000de64:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000de68:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000de6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de70:	e8 ab cd 00 00       	call   c001ac20 <Hal::makeBeep(int)>
c000de75:	83 c4 10             	add    esp,0x10
c000de78:	89 f0                	mov    eax,esi
c000de7a:	84 c0                	test   al,al
c000de7c:	74 1e                	je     c000de9c <Krnl::beep(int, int, bool)+0x3d>
c000de7e:	83 ec 0c             	sub    esp,0xc
c000de81:	6b db 0a             	imul   ebx,ebx,0xa
c000de84:	53                   	push   ebx
c000de85:	e8 ee a7 00 00       	call   c0018678 <milliTenthSleep(unsigned int)>
c000de8a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000de92:	83 c4 14             	add    esp,0x14
c000de95:	5b                   	pop    ebx
c000de96:	5e                   	pop    esi
c000de97:	e9 84 cd 00 00       	jmp    c001ac20 <Hal::makeBeep(int)>
c000de9c:	68 e6 00 00 00       	push   0xe6
c000dea1:	53                   	push   ebx
c000dea2:	68 22 de 00 c0       	push   0xc000de22
c000dea7:	ff 35 50 93 02 c0    	push   DWORD PTR ds:0xc0029350
c000dead:	e8 b2 a2 00 00       	call   c0018164 <Process::createThread(void (*)(void*), void*, int)>
c000deb2:	83 c4 14             	add    esp,0x14
c000deb5:	5b                   	pop    ebx
c000deb6:	5e                   	pop    esi
c000deb7:	c3                   	ret    

c000deb8 <User::loadClockSettings(int)>:
c000deb8:	53                   	push   ebx
c000deb9:	83 ec 14             	sub    esp,0x14
c000debc:	68 14 01 00 00       	push   0x114
c000dec1:	e8 f1 bd ff ff       	call   c0009cb7 <malloc>
c000dec6:	83 c4 0c             	add    esp,0xc
c000dec9:	89 c3                	mov    ebx,eax
c000decb:	ff 35 50 93 02 c0    	push   DWORD PTR ds:0xc0029350
c000ded1:	68 f4 48 02 c0       	push   0xc00248f4
c000ded6:	50                   	push   eax
c000ded7:	e8 54 f6 ff ff       	call   c000d530 <File::File(char const*, Process*)>
c000dedc:	58                   	pop    eax
c000dedd:	5a                   	pop    edx
c000dede:	6a 01                	push   0x1
c000dee0:	53                   	push   ebx
c000dee1:	e8 24 f7 ff ff       	call   c000d60a <File::open(FileOpenMode)>
c000dee6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dee9:	e8 7a f7 ff ff       	call   c000d668 <File::close()>
c000deee:	83 c4 10             	add    esp,0x10
c000def1:	85 db                	test   ebx,ebx
c000def3:	74 0f                	je     c000df04 <User::loadClockSettings(int)+0x4c>
c000def5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000def7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000defb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000defe:	83 c4 08             	add    esp,0x8
c000df01:	5b                   	pop    ebx
c000df02:	ff e0                	jmp    eax
c000df04:	83 c4 08             	add    esp,0x8
c000df07:	5b                   	pop    ebx
c000df08:	c3                   	ret    
c000df09:	90                   	nop

c000df0a <Clock::Clock(char const*)>:
c000df0a:	83 ec 0c             	sub    esp,0xc
c000df0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df11:	83 ec 08             	sub    esp,0x8
c000df14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df18:	50                   	push   eax
c000df19:	e8 5c 07 00 00       	call   c000e67a <Device::Device(char const*)>
c000df1e:	83 c4 10             	add    esp,0x10
c000df21:	ba 1c 49 02 c0       	mov    edx,0xc002491c
c000df26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df2a:	89 10                	mov    DWORD PTR [eax],edx
c000df2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df30:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000df3a:	90                   	nop
c000df3b:	83 c4 0c             	add    esp,0xc
c000df3e:	c3                   	ret    
c000df3f:	90                   	nop

c000df40 <Clock::~Clock()>:
c000df40:	83 ec 0c             	sub    esp,0xc
c000df43:	ba 1c 49 02 c0       	mov    edx,0xc002491c
c000df48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df4c:	89 10                	mov    DWORD PTR [eax],edx
c000df4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df52:	83 ec 0c             	sub    esp,0xc
c000df55:	50                   	push   eax
c000df56:	e8 e9 03 00 00       	call   c000e344 <Device::~Device()>
c000df5b:	83 c4 10             	add    esp,0x10
c000df5e:	90                   	nop
c000df5f:	83 c4 0c             	add    esp,0xc
c000df62:	c3                   	ret    
c000df63:	90                   	nop

c000df64 <Clock::~Clock()>:
c000df64:	83 ec 0c             	sub    esp,0xc
c000df67:	83 ec 0c             	sub    esp,0xc
c000df6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df6e:	e8 cd ff ff ff       	call   c000df40 <Clock::~Clock()>
c000df73:	83 c4 10             	add    esp,0x10
c000df76:	83 ec 08             	sub    esp,0x8
c000df79:	68 58 01 00 00       	push   0x158
c000df7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df82:	e8 5d ef ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c000df87:	83 c4 10             	add    esp,0x10
c000df8a:	83 c4 0c             	add    esp,0xc
c000df8d:	c3                   	ret    

c000df8e <Clock::timeInSecondsLocal()>:
c000df8e:	53                   	push   ebx
c000df8f:	83 ec 14             	sub    esp,0x14
c000df92:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000df96:	8b 10                	mov    edx,DWORD PTR [eax]
c000df98:	50                   	push   eax
c000df99:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000df9c:	0f b6 0d 3c 7f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0027f3c
c000dfa3:	03 0d 40 7f 02 c0    	add    ecx,DWORD PTR ds:0xc0027f40
c000dfa9:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000dfaf:	89 cb                	mov    ebx,ecx
c000dfb1:	c1 fb 1f             	sar    ebx,0x1f
c000dfb4:	01 c8                	add    eax,ecx
c000dfb6:	11 da                	adc    edx,ebx
c000dfb8:	83 c4 10             	add    esp,0x10
c000dfbb:	31 c9                	xor    ecx,ecx
c000dfbd:	80 3d 3d 7f 02 c0 00 	cmp    BYTE PTR ds:0xc0027f3d,0x0
c000dfc4:	74 05                	je     c000dfcb <Clock::timeInSecondsLocal()+0x3d>
c000dfc6:	b9 08 07 00 00       	mov    ecx,0x708
c000dfcb:	31 db                	xor    ebx,ebx
c000dfcd:	01 c8                	add    eax,ecx
c000dfcf:	11 da                	adc    edx,ebx
c000dfd1:	83 c4 08             	add    esp,0x8
c000dfd4:	5b                   	pop    ebx
c000dfd5:	c3                   	ret    

c000dfd6 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000dfd6:	57                   	push   edi
c000dfd7:	56                   	push   esi
c000dfd8:	53                   	push   ebx
c000dfd9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000dfdd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000dfe1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dfe3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000dfe7:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000dfea:	0f b6 05 3c 7f 02 c0 	movzx  eax,BYTE PTR ds:0xc0027f3c
c000dff1:	03 05 40 7f 02 c0    	add    eax,DWORD PTR ds:0xc0027f40
c000dff7:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000dffd:	99                   	cdq    
c000dffe:	29 c6                	sub    esi,eax
c000e000:	19 d7                	sbb    edi,edx
c000e002:	89 f0                	mov    eax,esi
c000e004:	89 fa                	mov    edx,edi
c000e006:	31 f6                	xor    esi,esi
c000e008:	80 3d 3d 7f 02 c0 00 	cmp    BYTE PTR ds:0xc0027f3d,0x0
c000e00f:	74 05                	je     c000e016 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000e011:	be 08 07 00 00       	mov    esi,0x708
c000e016:	31 ff                	xor    edi,edi
c000e018:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000e01c:	29 f0                	sub    eax,esi
c000e01e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e022:	19 fa                	sbb    edx,edi
c000e024:	89 d8                	mov    eax,ebx
c000e026:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e02a:	5b                   	pop    ebx
c000e02b:	5e                   	pop    esi
c000e02c:	5f                   	pop    edi
c000e02d:	ff e0                	jmp    eax

c000e02f <datetimeToSeconds(datetime_t)>:
c000e02f:	55                   	push   ebp
c000e030:	57                   	push   edi
c000e031:	56                   	push   esi
c000e032:	53                   	push   ebx
c000e033:	83 ec 14             	sub    esp,0x14
c000e036:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e03a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e03e:	89 d3                	mov    ebx,edx
c000e040:	0f b6 c6             	movzx  eax,dh
c000e043:	c1 eb 10             	shr    ebx,0x10
c000e046:	48                   	dec    eax
c000e047:	66 81 eb 6c 07       	sub    bx,0x76c
c000e04c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000e050:	0f b6 f5             	movzx  esi,ch
c000e053:	89 cf                	mov    edi,ecx
c000e055:	6b f6 3c             	imul   esi,esi,0x3c
c000e058:	c1 ef 10             	shr    edi,0x10
c000e05b:	0f b6 c9             	movzx  ecx,cl
c000e05e:	89 f8                	mov    eax,edi
c000e060:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000e066:	0f b6 f8             	movzx  edi,al
c000e069:	0f b6 d2             	movzx  edx,dl
c000e06c:	01 fe                	add    esi,edi
c000e06e:	01 f1                	add    ecx,esi
c000e070:	0f b7 f3             	movzx  esi,bx
c000e073:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000e077:	c1 f9 1f             	sar    ecx,0x1f
c000e07a:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000e07f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e083:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000e088:	8b 0c 8d 60 49 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb6a0]
c000e08f:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000e093:	76 29                	jbe    c000e0be <datetimeToSeconds(datetime_t)+0x8f>
c000e095:	f6 c3 03             	test   bl,0x3
c000e098:	75 24                	jne    c000e0be <datetimeToSeconds(datetime_t)+0x8f>
c000e09a:	31 d2                	xor    edx,edx
c000e09c:	bf 64 00 00 00       	mov    edi,0x64
c000e0a1:	89 d8                	mov    eax,ebx
c000e0a3:	66 f7 f7             	div    di
c000e0a6:	66 85 d2             	test   dx,dx
c000e0a9:	75 12                	jne    c000e0bd <datetimeToSeconds(datetime_t)+0x8e>
c000e0ab:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000e0b1:	bf 90 01 00 00       	mov    edi,0x190
c000e0b6:	99                   	cdq    
c000e0b7:	f7 ff                	idiv   edi
c000e0b9:	85 d2                	test   edx,edx
c000e0bb:	75 01                	jne    c000e0be <datetimeToSeconds(datetime_t)+0x8f>
c000e0bd:	41                   	inc    ecx
c000e0be:	66 83 fb 46          	cmp    bx,0x46
c000e0c2:	76 45                	jbe    c000e109 <datetimeToSeconds(datetime_t)+0xda>
c000e0c4:	bb 46 00 00 00       	mov    ebx,0x46
c000e0c9:	bf 64 00 00 00       	mov    edi,0x64
c000e0ce:	bd 90 01 00 00       	mov    ebp,0x190
c000e0d3:	b8 6d 01 00 00       	mov    eax,0x16d
c000e0d8:	f6 c3 03             	test   bl,0x3
c000e0db:	75 23                	jne    c000e100 <datetimeToSeconds(datetime_t)+0xd1>
c000e0dd:	89 d8                	mov    eax,ebx
c000e0df:	99                   	cdq    
c000e0e0:	f7 ff                	idiv   edi
c000e0e2:	b8 6e 01 00 00       	mov    eax,0x16e
c000e0e7:	85 d2                	test   edx,edx
c000e0e9:	75 15                	jne    c000e100 <datetimeToSeconds(datetime_t)+0xd1>
c000e0eb:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000e0f1:	99                   	cdq    
c000e0f2:	f7 fd                	idiv   ebp
c000e0f4:	83 fa 01             	cmp    edx,0x1
c000e0f7:	19 c0                	sbb    eax,eax
c000e0f9:	f7 d0                	not    eax
c000e0fb:	05 6e 01 00 00       	add    eax,0x16e
c000e100:	01 c1                	add    ecx,eax
c000e102:	43                   	inc    ebx
c000e103:	39 f3                	cmp    ebx,esi
c000e105:	7c cc                	jl     c000e0d3 <datetimeToSeconds(datetime_t)+0xa4>
c000e107:	eb 35                	jmp    c000e13e <datetimeToSeconds(datetime_t)+0x10f>
c000e109:	74 33                	je     c000e13e <datetimeToSeconds(datetime_t)+0x10f>
c000e10b:	b8 45 00 00 00       	mov    eax,0x45
c000e110:	89 c2                	mov    edx,eax
c000e112:	83 e2 03             	and    edx,0x3
c000e115:	39 f0                	cmp    eax,esi
c000e117:	7e 0f                	jle    c000e128 <datetimeToSeconds(datetime_t)+0xf9>
c000e119:	83 fa 01             	cmp    edx,0x1
c000e11c:	19 d2                	sbb    edx,edx
c000e11e:	48                   	dec    eax
c000e11f:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000e126:	eb e8                	jmp    c000e110 <datetimeToSeconds(datetime_t)+0xe1>
c000e128:	b8 6d 01 00 00       	mov    eax,0x16d
c000e12d:	85 d2                	test   edx,edx
c000e12f:	75 0b                	jne    c000e13c <datetimeToSeconds(datetime_t)+0x10d>
c000e131:	66 83 fb 01          	cmp    bx,0x1
c000e135:	19 c0                	sbb    eax,eax
c000e137:	05 6e 01 00 00       	add    eax,0x16e
c000e13c:	29 c1                	sub    ecx,eax
c000e13e:	b8 80 51 01 00       	mov    eax,0x15180
c000e143:	f7 e9                	imul   ecx
c000e145:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000e149:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000e14d:	83 c4 14             	add    esp,0x14
c000e150:	5b                   	pop    ebx
c000e151:	5e                   	pop    esi
c000e152:	5f                   	pop    edi
c000e153:	5d                   	pop    ebp
c000e154:	c3                   	ret    
c000e155:	90                   	nop

c000e156 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000e156:	57                   	push   edi
c000e157:	56                   	push   esi
c000e158:	53                   	push   ebx
c000e159:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e15d:	8b 06                	mov    eax,DWORD PTR [esi]
c000e15f:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000e162:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e166:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e16a:	e8 c0 fe ff ff       	call   c000e02f <datetimeToSeconds(datetime_t)>
c000e16f:	59                   	pop    ecx
c000e170:	0f b6 0d 3c 7f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0027f3c
c000e177:	5b                   	pop    ebx
c000e178:	03 0d 40 7f 02 c0    	add    ecx,DWORD PTR ds:0xc0027f40
c000e17e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000e184:	89 cb                	mov    ebx,ecx
c000e186:	c1 fb 1f             	sar    ebx,0x1f
c000e189:	29 c8                	sub    eax,ecx
c000e18b:	19 da                	sbb    edx,ebx
c000e18d:	31 c9                	xor    ecx,ecx
c000e18f:	80 3d 3d 7f 02 c0 00 	cmp    BYTE PTR ds:0xc0027f3d,0x0
c000e196:	74 05                	je     c000e19d <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000e198:	b9 08 07 00 00       	mov    ecx,0x708
c000e19d:	31 db                	xor    ebx,ebx
c000e19f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000e1a3:	29 c8                	sub    eax,ecx
c000e1a5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e1a9:	19 da                	sbb    edx,ebx
c000e1ab:	89 f8                	mov    eax,edi
c000e1ad:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e1b1:	5b                   	pop    ebx
c000e1b2:	5e                   	pop    esi
c000e1b3:	5f                   	pop    edi
c000e1b4:	ff e0                	jmp    eax

c000e1b6 <secondsToDatetime(unsigned long long)>:
c000e1b6:	55                   	push   ebp
c000e1b7:	57                   	push   edi
c000e1b8:	56                   	push   esi
c000e1b9:	53                   	push   ebx
c000e1ba:	83 ec 1c             	sub    esp,0x1c
c000e1bd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e1c1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000e1c5:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e1c9:	6a 00                	push   0x0
c000e1cb:	68 80 51 01 00       	push   0x15180
c000e1d0:	55                   	push   ebp
c000e1d1:	57                   	push   edi
c000e1d2:	e8 89 44 01 00       	call   c0022660 <__udivdi3>
c000e1d7:	83 c4 10             	add    esp,0x10
c000e1da:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000e1e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1e4:	6a 00                	push   0x0
c000e1e6:	68 80 51 01 00       	push   0x15180
c000e1eb:	55                   	push   ebp
c000e1ec:	57                   	push   edi
c000e1ed:	bf 10 0e 00 00       	mov    edi,0xe10
c000e1f2:	e8 69 45 01 00       	call   c0022760 <__umoddi3>
c000e1f7:	83 c4 10             	add    esp,0x10
c000e1fa:	99                   	cdq    
c000e1fb:	f7 ff                	idiv   edi
c000e1fd:	bf 3c 00 00 00       	mov    edi,0x3c
c000e202:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000e205:	89 d0                	mov    eax,edx
c000e207:	99                   	cdq    
c000e208:	f7 ff                	idiv   edi
c000e20a:	85 db                	test   ebx,ebx
c000e20c:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000e20f:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000e212:	79 11                	jns    c000e225 <secondsToDatetime(unsigned long long)+0x6f>
c000e214:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e218:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000e21e:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000e223:	eb 07                	jmp    c000e22c <secondsToDatetime(unsigned long long)+0x76>
c000e225:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000e22a:	89 d8                	mov    eax,ebx
c000e22c:	bf b4 05 00 00       	mov    edi,0x5b4
c000e231:	99                   	cdq    
c000e232:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000e237:	f7 f9                	idiv   ecx
c000e239:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000e23e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e242:	31 d2                	xor    edx,edx
c000e244:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000e24c:	01 c3                	add    ebx,eax
c000e24e:	89 d8                	mov    eax,ebx
c000e250:	f7 f1                	div    ecx
c000e252:	31 d2                	xor    edx,edx
c000e254:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000e257:	89 d8                	mov    eax,ebx
c000e259:	f7 f7                	div    edi
c000e25b:	31 d2                	xor    edx,edx
c000e25d:	29 c1                	sub    ecx,eax
c000e25f:	89 d8                	mov    eax,ebx
c000e261:	f7 f5                	div    ebp
c000e263:	bd 6d 01 00 00       	mov    ebp,0x16d
c000e268:	29 c1                	sub    ecx,eax
c000e26a:	31 d2                	xor    edx,edx
c000e26c:	89 c8                	mov    eax,ecx
c000e26e:	f7 f5                	div    ebp
c000e270:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000e275:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e279:	31 d2                	xor    edx,edx
c000e27b:	89 c8                	mov    eax,ecx
c000e27d:	f7 f5                	div    ebp
c000e27f:	31 d2                	xor    edx,edx
c000e281:	01 c3                	add    ebx,eax
c000e283:	89 c8                	mov    eax,ecx
c000e285:	f7 f7                	div    edi
c000e287:	bf 99 00 00 00       	mov    edi,0x99
c000e28c:	29 c3                	sub    ebx,eax
c000e28e:	31 d2                	xor    edx,edx
c000e290:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000e298:	29 c3                	sub    ebx,eax
c000e29a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000e29d:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000e2a0:	bb 05 00 00 00       	mov    ebx,0x5
c000e2a5:	83 c1 02             	add    ecx,0x2
c000e2a8:	89 c8                	mov    eax,ecx
c000e2aa:	f7 f7                	div    edi
c000e2ac:	31 d2                	xor    edx,edx
c000e2ae:	89 c7                	mov    edi,eax
c000e2b0:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000e2b6:	83 c0 02             	add    eax,0x2
c000e2b9:	f7 f3                	div    ebx
c000e2bb:	89 eb                	mov    ebx,ebp
c000e2bd:	29 c3                	sub    ebx,eax
c000e2bf:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000e2c5:	88 1e                	mov    BYTE PTR [esi],bl
c000e2c7:	19 c0                	sbb    eax,eax
c000e2c9:	31 d2                	xor    edx,edx
c000e2cb:	83 e0 0c             	and    eax,0xc
c000e2ce:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000e2d2:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000e2da:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000e2de:	83 f9 01             	cmp    ecx,0x1
c000e2e1:	0f 96 c2             	setbe  dl
c000e2e4:	41                   	inc    ecx
c000e2e5:	01 d0                	add    eax,edx
c000e2e7:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000e2ea:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000e2ee:	83 c4 1c             	add    esp,0x1c
c000e2f1:	89 f0                	mov    eax,esi
c000e2f3:	5b                   	pop    ebx
c000e2f4:	5e                   	pop    esi
c000e2f5:	5f                   	pop    edi
c000e2f6:	5d                   	pop    ebp
c000e2f7:	c2 04 00             	ret    0x4

c000e2fa <Clock::timeInDatetimeLocal()>:
c000e2fa:	53                   	push   ebx
c000e2fb:	83 ec 14             	sub    esp,0x14
c000e2fe:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e302:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e306:	e8 83 fc ff ff       	call   c000df8e <Clock::timeInSecondsLocal()>
c000e30b:	83 c4 0c             	add    esp,0xc
c000e30e:	52                   	push   edx
c000e30f:	50                   	push   eax
c000e310:	53                   	push   ebx
c000e311:	e8 a0 fe ff ff       	call   c000e1b6 <secondsToDatetime(unsigned long long)>
c000e316:	89 d8                	mov    eax,ebx
c000e318:	83 c4 14             	add    esp,0x14
c000e31b:	5b                   	pop    ebx
c000e31c:	c2 04 00             	ret    0x4
c000e31f:	90                   	nop

c000e320 <Device::hibernate()>:
c000e320:	c3                   	ret    
c000e321:	90                   	nop

c000e322 <Device::wake()>:
c000e322:	c3                   	ret    
c000e323:	90                   	nop

c000e324 <Device::detect()>:
c000e324:	c3                   	ret    
c000e325:	90                   	nop

c000e326 <Device::disableLegacy()>:
c000e326:	c3                   	ret    
c000e327:	90                   	nop

c000e328 <Device::powerSaving(PowerSavingLevel)>:
c000e328:	c3                   	ret    
c000e329:	90                   	nop

c000e32a <DriverlessDevice::close(int, int, void*)>:
c000e32a:	31 c0                	xor    eax,eax
c000e32c:	c3                   	ret    
c000e32d:	90                   	nop

c000e32e <DriverlessDevice::detect()>:
c000e32e:	c3                   	ret    
c000e32f:	90                   	nop

c000e330 <DriverlessDevice::open(int, int, void*)>:
c000e330:	83 ec 18             	sub    esp,0x18
c000e333:	68 90 49 02 c0       	push   0xc0024990
c000e338:	e8 e0 69 00 00       	call   c0014d1d <Krnl::panic(char const*)>
c000e33d:	83 c8 ff             	or     eax,0xffffffff
c000e340:	83 c4 1c             	add    esp,0x1c
c000e343:	c3                   	ret    

c000e344 <Device::~Device()>:
c000e344:	ba f0 49 02 c0       	mov    edx,0xc00249f0
c000e349:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e34d:	89 10                	mov    DWORD PTR [eax],edx
c000e34f:	90                   	nop
c000e350:	c3                   	ret    
c000e351:	90                   	nop

c000e352 <Device::~Device()>:
c000e352:	83 ec 0c             	sub    esp,0xc
c000e355:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e359:	e8 e6 ff ff ff       	call   c000e344 <Device::~Device()>
c000e35e:	83 c4 04             	add    esp,0x4
c000e361:	83 ec 08             	sub    esp,0x8
c000e364:	68 58 01 00 00       	push   0x158
c000e369:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e36d:	e8 72 eb ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c000e372:	83 c4 10             	add    esp,0x10
c000e375:	83 c4 0c             	add    esp,0xc
c000e378:	c3                   	ret    
c000e379:	90                   	nop

c000e37a <Device::findAndLoadDriver()>:
c000e37a:	c7 44 24 04 ae 49 02 c0 	mov    DWORD PTR [esp+0x4],0xc00249ae
c000e382:	e9 3e ec ff ff       	jmp    c000cfc5 <Dbg::kprintf(char const*, ...)>
c000e387:	90                   	nop

c000e388 <Device::preOpenPCI(PCIDeviceInfo)>:
c000e388:	57                   	push   edi
c000e389:	b9 09 00 00 00       	mov    ecx,0x9
c000e38e:	56                   	push   esi
c000e38f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000e393:	8d 74 24 10          	lea    esi,[esp+0x10]
c000e397:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000e3a1:	81 c7 18 01 00 00    	add    edi,0x118
c000e3a7:	fc                   	cld    
c000e3a8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000e3aa:	5e                   	pop    esi
c000e3ab:	5f                   	pop    edi
c000e3ac:	c3                   	ret    
c000e3ad:	90                   	nop

c000e3ae <Device::preOpenACPI(void*, char*, char*)>:
c000e3ae:	57                   	push   edi
c000e3af:	b9 1e 00 00 00       	mov    ecx,0x1e
c000e3b4:	56                   	push   esi
c000e3b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3b9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e3bd:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000e3c7:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000e3cd:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000e3d3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e3d7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e3d9:	b9 0e 00 00 00       	mov    ecx,0xe
c000e3de:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000e3e4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e3e8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e3ea:	5e                   	pop    esi
c000e3eb:	5f                   	pop    edi
c000e3ec:	c3                   	ret    
c000e3ed:	90                   	nop

c000e3ee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000e3ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3f2:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000e3f7:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000e3fe:	75 0b                	jne    c000e40b <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c000e400:	8b 00                	mov    eax,DWORD PTR [eax]
c000e402:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e406:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e409:	eb 1e                	jmp    c000e429 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c000e40b:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c000e410:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e416:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000e41c:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e41e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e422:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e426:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c000e429:	ff e0                	jmp    eax
c000e42b:	90                   	nop

c000e42c <Device::getParent()>:
c000e42c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e430:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000e436:	c3                   	ret    
c000e437:	90                   	nop

c000e438 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000e438:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e43c:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000e441:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000e448:	75 0b                	jne    c000e455 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000e44a:	8b 00                	mov    eax,DWORD PTR [eax]
c000e44c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e450:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000e453:	eb 1e                	jmp    c000e473 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c000e455:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c000e45a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e460:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000e466:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e468:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e46c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e470:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c000e473:	ff e0                	jmp    eax
c000e475:	90                   	nop

c000e476 <Device::addChild(Device*)>:
c000e476:	53                   	push   ebx
c000e477:	83 ec 08             	sub    esp,0x8
c000e47a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e47e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e482:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000e488:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000e48e:	8b 13                	mov    edx,DWORD PTR [ebx]
c000e490:	85 d2                	test   edx,edx
c000e492:	74 04                	je     c000e498 <Device::addChild(Device*)+0x22>
c000e494:	89 d3                	mov    ebx,edx
c000e496:	eb f6                	jmp    c000e48e <Device::addChild(Device*)+0x18>
c000e498:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e49b:	83 ec 0c             	sub    esp,0xc
c000e49e:	6a 08                	push   0x8
c000e4a0:	e8 12 b8 ff ff       	call   c0009cb7 <malloc>
c000e4a5:	89 03                	mov    DWORD PTR [ebx],eax
c000e4a7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e4ad:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e4b4:	83 c4 18             	add    esp,0x18
c000e4b7:	5b                   	pop    ebx
c000e4b8:	c3                   	ret    
c000e4b9:	90                   	nop

c000e4ba <Device::removeAllChildren()>:
c000e4ba:	56                   	push   esi
c000e4bb:	53                   	push   ebx
c000e4bc:	52                   	push   edx
c000e4bd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e4c1:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000e4c7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e4ca:	74 17                	je     c000e4e3 <Device::removeAllChildren()+0x29>
c000e4cc:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e4cf:	85 c0                	test   eax,eax
c000e4d1:	74 0c                	je     c000e4df <Device::removeAllChildren()+0x25>
c000e4d3:	83 ec 0c             	sub    esp,0xc
c000e4d6:	8b 10                	mov    edx,DWORD PTR [eax]
c000e4d8:	50                   	push   eax
c000e4d9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000e4dc:	83 c4 10             	add    esp,0x10
c000e4df:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e4e1:	eb e4                	jmp    c000e4c7 <Device::removeAllChildren()+0xd>
c000e4e3:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000e4e9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e4ef:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000e4f5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e4fc:	58                   	pop    eax
c000e4fd:	5b                   	pop    ebx
c000e4fe:	5e                   	pop    esi
c000e4ff:	c3                   	ret    

c000e500 <Device::hibernateAll()>:
c000e500:	53                   	push   ebx
c000e501:	83 ec 14             	sub    esp,0x14
c000e504:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e508:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e50a:	53                   	push   ebx
c000e50b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000e50e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e514:	83 c4 10             	add    esp,0x10
c000e517:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e51a:	74 0f                	je     c000e52b <Device::hibernateAll()+0x2b>
c000e51c:	83 ec 0c             	sub    esp,0xc
c000e51f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e522:	e8 d9 ff ff ff       	call   c000e500 <Device::hibernateAll()>
c000e527:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e529:	eb e9                	jmp    c000e514 <Device::hibernateAll()+0x14>
c000e52b:	83 c4 08             	add    esp,0x8
c000e52e:	5b                   	pop    ebx
c000e52f:	c3                   	ret    

c000e530 <Device::wakeAll()>:
c000e530:	53                   	push   ebx
c000e531:	83 ec 14             	sub    esp,0x14
c000e534:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e538:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e53a:	53                   	push   ebx
c000e53b:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000e53e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e544:	83 c4 10             	add    esp,0x10
c000e547:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e54a:	74 0f                	je     c000e55b <Device::wakeAll()+0x2b>
c000e54c:	83 ec 0c             	sub    esp,0xc
c000e54f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e552:	e8 d9 ff ff ff       	call   c000e530 <Device::wakeAll()>
c000e557:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e559:	eb e9                	jmp    c000e544 <Device::wakeAll()+0x14>
c000e55b:	83 c4 08             	add    esp,0x8
c000e55e:	5b                   	pop    ebx
c000e55f:	c3                   	ret    

c000e560 <Device::detectAll()>:
c000e560:	53                   	push   ebx
c000e561:	83 ec 14             	sub    esp,0x14
c000e564:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e568:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e56a:	53                   	push   ebx
c000e56b:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000e56e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e574:	83 c4 10             	add    esp,0x10
c000e577:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e57a:	74 0f                	je     c000e58b <Device::detectAll()+0x2b>
c000e57c:	83 ec 0c             	sub    esp,0xc
c000e57f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e582:	e8 d9 ff ff ff       	call   c000e560 <Device::detectAll()>
c000e587:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e589:	eb e9                	jmp    c000e574 <Device::detectAll()+0x14>
c000e58b:	83 c4 08             	add    esp,0x8
c000e58e:	5b                   	pop    ebx
c000e58f:	c3                   	ret    

c000e590 <Device::disableLegacyAll()>:
c000e590:	53                   	push   ebx
c000e591:	83 ec 14             	sub    esp,0x14
c000e594:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e598:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e59a:	53                   	push   ebx
c000e59b:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c000e59e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e5a4:	83 c4 10             	add    esp,0x10
c000e5a7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e5aa:	74 0f                	je     c000e5bb <Device::disableLegacyAll()+0x2b>
c000e5ac:	83 ec 0c             	sub    esp,0xc
c000e5af:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e5b2:	e8 d9 ff ff ff       	call   c000e590 <Device::disableLegacyAll()>
c000e5b7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e5b9:	eb e9                	jmp    c000e5a4 <Device::disableLegacyAll()+0x14>
c000e5bb:	83 c4 08             	add    esp,0x8
c000e5be:	5b                   	pop    ebx
c000e5bf:	c3                   	ret    

c000e5c0 <Device::loadDriversForAll()>:
c000e5c0:	53                   	push   ebx
c000e5c1:	83 ec 08             	sub    esp,0x8
c000e5c4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e5c8:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c000e5cf:	75 0c                	jne    c000e5dd <Device::loadDriversForAll()+0x1d>
c000e5d1:	83 ec 0c             	sub    esp,0xc
c000e5d4:	53                   	push   ebx
c000e5d5:	e8 a0 fd ff ff       	call   c000e37a <Device::findAndLoadDriver()>
c000e5da:	83 c4 10             	add    esp,0x10
c000e5dd:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e5e3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e5e6:	74 12                	je     c000e5fa <Device::loadDriversForAll()+0x3a>
c000e5e8:	83 ec 0c             	sub    esp,0xc
c000e5eb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e5ee:	e8 cd ff ff ff       	call   c000e5c0 <Device::loadDriversForAll()>
c000e5f3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e5f5:	83 c4 10             	add    esp,0x10
c000e5f8:	eb e9                	jmp    c000e5e3 <Device::loadDriversForAll()+0x23>
c000e5fa:	83 c4 08             	add    esp,0x8
c000e5fd:	5b                   	pop    ebx
c000e5fe:	c3                   	ret    
c000e5ff:	90                   	nop

c000e600 <Device::closeAll()>:
c000e600:	53                   	push   ebx
c000e601:	83 ec 08             	sub    esp,0x8
c000e604:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e608:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e60a:	6a 00                	push   0x0
c000e60c:	6a 00                	push   0x0
c000e60e:	6a 00                	push   0x0
c000e610:	53                   	push   ebx
c000e611:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000e614:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e61a:	83 c4 10             	add    esp,0x10
c000e61d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e620:	74 0f                	je     c000e631 <Device::closeAll()+0x31>
c000e622:	83 ec 0c             	sub    esp,0xc
c000e625:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e628:	e8 d3 ff ff ff       	call   c000e600 <Device::closeAll()>
c000e62d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e62f:	eb e9                	jmp    c000e61a <Device::closeAll()+0x1a>
c000e631:	83 c4 08             	add    esp,0x8
c000e634:	5b                   	pop    ebx
c000e635:	c3                   	ret    

c000e636 <Device::powerSavingAll(PowerSavingLevel)>:
c000e636:	56                   	push   esi
c000e637:	53                   	push   ebx
c000e638:	83 ec 0c             	sub    esp,0xc
c000e63b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e63f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000e643:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e645:	56                   	push   esi
c000e646:	53                   	push   ebx
c000e647:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000e64a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e650:	83 c4 10             	add    esp,0x10
c000e653:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e656:	74 0f                	je     c000e667 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000e658:	52                   	push   edx
c000e659:	52                   	push   edx
c000e65a:	56                   	push   esi
c000e65b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e65e:	e8 d3 ff ff ff       	call   c000e636 <Device::powerSavingAll(PowerSavingLevel)>
c000e663:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e665:	eb e9                	jmp    c000e650 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000e667:	58                   	pop    eax
c000e668:	5b                   	pop    ebx
c000e669:	5e                   	pop    esi
c000e66a:	c3                   	ret    
c000e66b:	90                   	nop

c000e66c <Device::setName(char const*)>:
c000e66c:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000e674:	e9 bf 20 ff ff       	jmp    c0000738 <strcpy>
c000e679:	90                   	nop

c000e67a <Device::Device(char const*)>:
c000e67a:	83 ec 1c             	sub    esp,0x1c
c000e67d:	ba f0 49 02 c0       	mov    edx,0xc00249f0
c000e682:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e686:	89 10                	mov    DWORD PTR [eax],edx
c000e688:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e68c:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000e696:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e69a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e6a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6a8:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e6b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6b6:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e6c0:	83 ec 08             	sub    esp,0x8
c000e6c3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e6c7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e6cb:	e8 9c ff ff ff       	call   c000e66c <Device::setName(char const*)>
c000e6d0:	83 c4 10             	add    esp,0x10
c000e6d3:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000e6db:	83 ec 0c             	sub    esp,0xc
c000e6de:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e6e2:	e8 d0 b5 ff ff       	call   c0009cb7 <malloc>
c000e6e7:	83 c4 10             	add    esp,0x10
c000e6ea:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e6f0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e6f7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e6fb:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000e701:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e705:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e70b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e711:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e715:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e71b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e722:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e726:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000e72d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e731:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000e738:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e73c:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e746:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e74a:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e754:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e758:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e762:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e766:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000e770:	90                   	nop
c000e771:	83 c4 1c             	add    esp,0x1c
c000e774:	c3                   	ret    
c000e775:	90                   	nop

c000e776 <Device::getName()>:
c000e776:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e77a:	05 d0 00 00 00       	add    eax,0xd0
c000e77f:	c3                   	ret    

c000e780 <DriverlessDevice::DriverlessDevice(char const*)>:
c000e780:	83 ec 0c             	sub    esp,0xc
c000e783:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e787:	83 ec 08             	sub    esp,0x8
c000e78a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e78e:	50                   	push   eax
c000e78f:	e8 e6 fe ff ff       	call   c000e67a <Device::Device(char const*)>
c000e794:	83 c4 10             	add    esp,0x10
c000e797:	ba 1c 4a 02 c0       	mov    edx,0xc0024a1c
c000e79c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a0:	89 10                	mov    DWORD PTR [eax],edx
c000e7a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a6:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000e7b0:	90                   	nop
c000e7b1:	83 c4 0c             	add    esp,0xc
c000e7b4:	c3                   	ret    
c000e7b5:	90                   	nop

c000e7b6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000e7b6:	57                   	push   edi
c000e7b7:	56                   	push   esi
c000e7b8:	53                   	push   ebx
c000e7b9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e7bd:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e7c1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e7c5:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000e7cb:	75 0c                	jne    c000e7d9 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000e7cd:	52                   	push   edx
c000e7ce:	52                   	push   edx
c000e7cf:	53                   	push   ebx
c000e7d0:	56                   	push   esi
c000e7d1:	e8 3c 43 01 00       	call   c0022b12 <LinkedList<Device>::addElement(Device*)>
c000e7d6:	83 c4 10             	add    esp,0x10
c000e7d9:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e7df:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e7e2:	74 12                	je     c000e7f6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000e7e4:	50                   	push   eax
c000e7e5:	57                   	push   edi
c000e7e6:	56                   	push   esi
c000e7e7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e7ea:	e8 c7 ff ff ff       	call   c000e7b6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e7ef:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e7f1:	83 c4 10             	add    esp,0x10
c000e7f4:	eb e9                	jmp    c000e7df <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000e7f6:	5b                   	pop    ebx
c000e7f7:	5e                   	pop    esi
c000e7f8:	5f                   	pop    edi
c000e7f9:	c3                   	ret    

c000e7fa <getDevicesOfType(DeviceType)>:
c000e7fa:	53                   	push   ebx
c000e7fb:	83 ec 14             	sub    esp,0x14
c000e7fe:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e802:	53                   	push   ebx
c000e803:	e8 e6 43 01 00       	call   c0022bee <LinkedList<Device>::LinkedList()>
c000e808:	83 c4 0c             	add    esp,0xc
c000e80b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e80f:	53                   	push   ebx
c000e810:	ff 35 08 7e 02 c0    	push   DWORD PTR ds:0xc0027e08
c000e816:	e8 9b ff ff ff       	call   c000e7b6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e81b:	89 d8                	mov    eax,ebx
c000e81d:	83 c4 18             	add    esp,0x18
c000e820:	5b                   	pop    ebx
c000e821:	c2 04 00             	ret    0x4

c000e824 <HardDiskController::HardDiskController(char const*)>:
c000e824:	83 ec 0c             	sub    esp,0xc
c000e827:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82b:	83 ec 08             	sub    esp,0x8
c000e82e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e832:	50                   	push   eax
c000e833:	e8 42 fe ff ff       	call   c000e67a <Device::Device(char const*)>
c000e838:	83 c4 10             	add    esp,0x10
c000e83b:	ba 48 4a 02 c0       	mov    edx,0xc0024a48
c000e840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e844:	89 10                	mov    DWORD PTR [eax],edx
c000e846:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e84a:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000e854:	90                   	nop
c000e855:	83 c4 0c             	add    esp,0xc
c000e858:	c3                   	ret    
c000e859:	90                   	nop
c000e85a:	66 90                	xchg   ax,ax

c000e85c <HardDiskController::~HardDiskController()>:
c000e85c:	83 ec 0c             	sub    esp,0xc
c000e85f:	ba 48 4a 02 c0       	mov    edx,0xc0024a48
c000e864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e868:	89 10                	mov    DWORD PTR [eax],edx
c000e86a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e86e:	83 ec 0c             	sub    esp,0xc
c000e871:	50                   	push   eax
c000e872:	e8 cd fa ff ff       	call   c000e344 <Device::~Device()>
c000e877:	83 c4 10             	add    esp,0x10
c000e87a:	90                   	nop
c000e87b:	83 c4 0c             	add    esp,0xc
c000e87e:	c3                   	ret    
c000e87f:	90                   	nop

c000e880 <HardDiskController::~HardDiskController()>:
c000e880:	83 ec 0c             	sub    esp,0xc
c000e883:	83 ec 0c             	sub    esp,0xc
c000e886:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e88a:	e8 cd ff ff ff       	call   c000e85c <HardDiskController::~HardDiskController()>
c000e88f:	83 c4 10             	add    esp,0x10
c000e892:	83 ec 08             	sub    esp,0x8
c000e895:	68 58 01 00 00       	push   0x158
c000e89a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e89e:	e8 41 e6 ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c000e8a3:	83 c4 10             	add    esp,0x10
c000e8a6:	83 c4 0c             	add    esp,0xc
c000e8a9:	c3                   	ret    

c000e8aa <PhysicalDisk::eject()>:
c000e8aa:	83 c8 ff             	or     eax,0xffffffff
c000e8ad:	c3                   	ret    

c000e8ae <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000e8ae:	83 ec 0c             	sub    esp,0xc
c000e8b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b5:	83 ec 08             	sub    esp,0x8
c000e8b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8bc:	50                   	push   eax
c000e8bd:	e8 b8 fd ff ff       	call   c000e67a <Device::Device(char const*)>
c000e8c2:	83 c4 10             	add    esp,0x10
c000e8c5:	ba 74 4a 02 c0       	mov    edx,0xc0024a74
c000e8ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ce:	89 10                	mov    DWORD PTR [eax],edx
c000e8d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8d4:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000e8db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8df:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000e8e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ea:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000e8f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8f8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e8fc:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000e902:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e906:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e910:	90                   	nop
c000e911:	83 c4 0c             	add    esp,0xc
c000e914:	c3                   	ret    
c000e915:	90                   	nop

c000e916 <PhysicalDisk::startCache()>:
c000e916:	56                   	push   esi
c000e917:	53                   	push   ebx
c000e918:	83 ec 10             	sub    esp,0x10
c000e91b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e91f:	6a 44                	push   0x44
c000e921:	e8 91 b3 ff ff       	call   c0009cb7 <malloc>
c000e926:	89 c6                	mov    esi,eax
c000e928:	58                   	pop    eax
c000e929:	5a                   	pop    edx
c000e92a:	53                   	push   ebx
c000e92b:	56                   	push   esi
c000e92c:	e8 9f 24 00 00       	call   c0010dd0 <VCache::VCache(PhysicalDisk*)>
c000e931:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000e937:	83 c4 14             	add    esp,0x14
c000e93a:	5b                   	pop    ebx
c000e93b:	5e                   	pop    esi
c000e93c:	c3                   	ret    
c000e93d:	90                   	nop

c000e93e <PhysicalDisk::~PhysicalDisk()>:
c000e93e:	83 ec 0c             	sub    esp,0xc
c000e941:	ba 74 4a 02 c0       	mov    edx,0xc0024a74
c000e946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e94a:	89 10                	mov    DWORD PTR [eax],edx
c000e94c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e950:	83 ec 0c             	sub    esp,0xc
c000e953:	50                   	push   eax
c000e954:	e8 eb f9 ff ff       	call   c000e344 <Device::~Device()>
c000e959:	83 c4 10             	add    esp,0x10
c000e95c:	90                   	nop
c000e95d:	83 c4 0c             	add    esp,0xc
c000e960:	c3                   	ret    
c000e961:	90                   	nop

c000e962 <PhysicalDisk::~PhysicalDisk()>:
c000e962:	83 ec 0c             	sub    esp,0xc
c000e965:	83 ec 0c             	sub    esp,0xc
c000e968:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e96c:	e8 cd ff ff ff       	call   c000e93e <PhysicalDisk::~PhysicalDisk()>
c000e971:	83 c4 10             	add    esp,0x10
c000e974:	83 ec 08             	sub    esp,0x8
c000e977:	68 6c 01 00 00       	push   0x16c
c000e97c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e980:	e8 5f e5 ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c000e985:	83 c4 10             	add    esp,0x10
c000e988:	83 c4 0c             	add    esp,0xc
c000e98b:	c3                   	ret    

c000e98c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c000e98c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e990:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e994:	c1 e0 04             	shl    eax,0x4
c000e997:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c000e99b:	8d 50 10             	lea    edx,[eax+0x10]
c000e99e:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c000e9a4:	74 08                	je     c000e9ae <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c000e9a6:	83 c0 04             	add    eax,0x4
c000e9a9:	39 d0                	cmp    eax,edx
c000e9ab:	75 f1                	jne    c000e99e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c000e9ad:	c3                   	ret    
c000e9ae:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e9b8:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000e9c2:	eb e2                	jmp    c000e9a6 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c000e9c4 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c000e9c4:	57                   	push   edi
c000e9c5:	31 c0                	xor    eax,eax
c000e9c7:	56                   	push   esi
c000e9c8:	53                   	push   ebx
c000e9c9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e9cd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e9d1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e9d5:	89 da                	mov    edx,ebx
c000e9d7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e9db:	c1 e2 04             	shl    edx,0x4
c000e9de:	01 ca                	add    edx,ecx
c000e9e0:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c000e9e8:	74 16                	je     c000ea00 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c000e9ea:	40                   	inc    eax
c000e9eb:	83 f8 04             	cmp    eax,0x4
c000e9ee:	75 f0                	jne    c000e9e0 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c000e9f0:	c7 44 24 10 a4 4a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024aa4
c000e9f8:	5b                   	pop    ebx
c000e9f9:	5e                   	pop    esi
c000e9fa:	5f                   	pop    edi
c000e9fb:	e9 1d 63 00 00       	jmp    c0014d1d <Krnl::panic(char const*)>
c000ea00:	8d 04 98             	lea    eax,[eax+ebx*4]
c000ea03:	8d 04 81             	lea    eax,[ecx+eax*4]
c000ea06:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c000ea0c:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c000ea12:	5b                   	pop    ebx
c000ea13:	5e                   	pop    esi
c000ea14:	5f                   	pop    edi
c000ea15:	c3                   	ret    

c000ea16 <doubleFault(regs*, void*)>:
c000ea16:	55                   	push   ebp
c000ea17:	89 e5                	mov    ebp,esp
c000ea19:	83 ec 08             	sub    esp,0x8
c000ea1c:	83 ec 0c             	sub    esp,0xc
c000ea1f:	68 b1 4a 02 c0       	push   0xc0024ab1
c000ea24:	e8 f4 62 00 00       	call   c0014d1d <Krnl::panic(char const*)>
c000ea29:	83 c4 10             	add    esp,0x10
c000ea2c:	90                   	nop
c000ea2d:	c9                   	leave  
c000ea2e:	c3                   	ret    
c000ea2f:	90                   	nop

c000ea30 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000ea30:	56                   	push   esi
c000ea31:	53                   	push   ebx
c000ea32:	50                   	push   eax
c000ea33:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ea37:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ea3b:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000ea40:	75 35                	jne    c000ea77 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c000ea42:	8d 43 20             	lea    eax,[ebx+0x20]
c000ea45:	31 d2                	xor    edx,edx
c000ea47:	89 c1                	mov    ecx,eax
c000ea49:	c1 e1 04             	shl    ecx,0x4
c000ea4c:	01 f1                	add    ecx,esi
c000ea4e:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c000ea56:	74 3e                	je     c000ea96 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c000ea58:	42                   	inc    edx
c000ea59:	83 fa 04             	cmp    edx,0x4
c000ea5c:	75 f0                	jne    c000ea4e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c000ea5e:	83 ec 0c             	sub    esp,0xc
c000ea61:	68 cb 4a 02 c0       	push   0xc0024acb
c000ea66:	e8 b2 62 00 00       	call   c0014d1d <Krnl::panic(char const*)>
c000ea6b:	83 c4 10             	add    esp,0x10
c000ea6e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ea73:	5a                   	pop    edx
c000ea74:	5b                   	pop    ebx
c000ea75:	5e                   	pop    esi
c000ea76:	c3                   	ret    
c000ea77:	83 ec 0c             	sub    esp,0xc
c000ea7a:	56                   	push   esi
c000ea7b:	e8 f6 fc ff ff       	call   c000e776 <Device::getName()>
c000ea80:	83 c4 10             	add    esp,0x10
c000ea83:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000ea86:	75 ba                	jne    c000ea42 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000ea88:	83 fb 0f             	cmp    ebx,0xf
c000ea8b:	7f 29                	jg     c000eab6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c000ea8d:	0f b6 9b 00 75 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd8b00]
c000ea94:	eb ac                	jmp    c000ea42 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000ea96:	8d 04 82             	lea    eax,[edx+eax*4]
c000ea99:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ea9d:	8d 04 86             	lea    eax,[esi+eax*4]
c000eaa0:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c000eaa6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000eaaa:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c000eab0:	89 d8                	mov    eax,ebx
c000eab2:	5a                   	pop    edx
c000eab3:	5b                   	pop    ebx
c000eab4:	5e                   	pop    esi
c000eab5:	c3                   	ret    
c000eab6:	83 ec 0c             	sub    esp,0xc
c000eab9:	68 be 4a 02 c0       	push   0xc0024abe
c000eabe:	e8 5a 62 00 00       	call   c0014d1d <Krnl::panic(char const*)>
c000eac3:	83 c4 10             	add    esp,0x10
c000eac6:	e9 77 ff ff ff       	jmp    c000ea42 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000eacb:	90                   	nop

c000eacc <InterruptController::clearAllHandlers(int, bool)>:
c000eacc:	56                   	push   esi
c000eacd:	53                   	push   ebx
c000eace:	52                   	push   edx
c000eacf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ead3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ead7:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000eadc:	75 61                	jne    c000eb3f <InterruptController::clearAllHandlers(int, bool)+0x73>
c000eade:	8d 46 20             	lea    eax,[esi+0x20]
c000eae1:	c1 e6 04             	shl    esi,0x4
c000eae4:	c1 e0 04             	shl    eax,0x4
c000eae7:	01 de                	add    esi,ebx
c000eae9:	01 d8                	add    eax,ebx
c000eaeb:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c000eaf5:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c000eaff:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c000eb09:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000eb13:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c000eb1d:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c000eb27:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c000eb31:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c000eb3b:	58                   	pop    eax
c000eb3c:	5b                   	pop    ebx
c000eb3d:	5e                   	pop    esi
c000eb3e:	c3                   	ret    
c000eb3f:	83 ec 0c             	sub    esp,0xc
c000eb42:	53                   	push   ebx
c000eb43:	e8 2e fc ff ff       	call   c000e776 <Device::getName()>
c000eb48:	83 c4 10             	add    esp,0x10
c000eb4b:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000eb4e:	75 8e                	jne    c000eade <InterruptController::clearAllHandlers(int, bool)+0x12>
c000eb50:	83 fe 0f             	cmp    esi,0xf
c000eb53:	7f 09                	jg     c000eb5e <InterruptController::clearAllHandlers(int, bool)+0x92>
c000eb55:	0f b6 b6 00 75 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd8b00]
c000eb5c:	eb 80                	jmp    c000eade <InterruptController::clearAllHandlers(int, bool)+0x12>
c000eb5e:	83 ec 0c             	sub    esp,0xc
c000eb61:	68 d8 4a 02 c0       	push   0xc0024ad8
c000eb66:	e8 b2 61 00 00       	call   c0014d1d <Krnl::panic(char const*)>
c000eb6b:	83 c4 10             	add    esp,0x10
c000eb6e:	e9 6b ff ff ff       	jmp    c000eade <InterruptController::clearAllHandlers(int, bool)+0x12>
c000eb73:	90                   	nop

c000eb74 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000eb74:	56                   	push   esi
c000eb75:	53                   	push   ebx
c000eb76:	52                   	push   edx
c000eb77:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000eb7b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000eb7f:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000eb84:	75 3a                	jne    c000ebc0 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c000eb86:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eb8a:	8d 50 20             	lea    edx,[eax+0x20]
c000eb8d:	c1 e2 04             	shl    edx,0x4
c000eb90:	8d 04 16             	lea    eax,[esi+edx*1]
c000eb93:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c000eb97:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c000eb9d:	74 0b                	je     c000ebaa <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c000eb9f:	83 c0 04             	add    eax,0x4
c000eba2:	39 d0                	cmp    eax,edx
c000eba4:	75 f1                	jne    c000eb97 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c000eba6:	58                   	pop    eax
c000eba7:	5b                   	pop    ebx
c000eba8:	5e                   	pop    esi
c000eba9:	c3                   	ret    
c000ebaa:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ebb4:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000ebbe:	eb df                	jmp    c000eb9f <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000ebc0:	83 ec 0c             	sub    esp,0xc
c000ebc3:	56                   	push   esi
c000ebc4:	e8 ad fb ff ff       	call   c000e776 <Device::getName()>
c000ebc9:	83 c4 10             	add    esp,0x10
c000ebcc:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000ebcf:	75 b5                	jne    c000eb86 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000ebd1:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c000ebd6:	7f 11                	jg     c000ebe9 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c000ebd8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ebdc:	0f b6 80 00 75 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd8b00]
c000ebe3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ebe7:	eb 9d                	jmp    c000eb86 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000ebe9:	83 ec 0c             	sub    esp,0xc
c000ebec:	68 e5 4a 02 c0       	push   0xc0024ae5
c000ebf1:	e8 27 61 00 00       	call   c0014d1d <Krnl::panic(char const*)>
c000ebf6:	83 c4 10             	add    esp,0x10
c000ebf9:	eb 8b                	jmp    c000eb86 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c000ebfb <nmiHandler(regs*, void*)>:
c000ebfb:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c000ec00:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ec04:	e9 55 a8 ff ff       	jmp    c000945e <Computer::handleNMI()>

c000ec09 <int_handler>:
c000ec09:	55                   	push   ebp
c000ec0a:	57                   	push   edi
c000ec0b:	56                   	push   esi
c000ec0c:	53                   	push   ebx
c000ec0d:	83 ec 0c             	sub    esp,0xc
c000ec10:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000ec14:	80 3d e4 88 02 c0 00 	cmp    BYTE PTR ds:0xc00288e4,0x0
c000ec1b:	74 0b                	je     c000ec28 <int_handler+0x1f>
c000ec1d:	fa                   	cli    
c000ec1e:	f4                   	hlt    
c000ec1f:	80 3d e4 88 02 c0 00 	cmp    BYTE PTR ds:0xc00288e4,0x0
c000ec26:	75 f5                	jne    c000ec1d <int_handler+0x14>
c000ec28:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c000ec2d:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c000ec30:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ec36:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c000ec3c:	8d 43 e0             	lea    eax,[ebx-0x20]
c000ec3f:	83 f8 17             	cmp    eax,0x17
c000ec42:	76 40                	jbe    c000ec84 <int_handler+0x7b>
c000ec44:	8d 43 15             	lea    eax,[ebx+0x15]
c000ec47:	31 db                	xor    ebx,ebx
c000ec49:	c1 e0 04             	shl    eax,0x4
c000ec4c:	8d 6c 07 08          	lea    ebp,[edi+eax*1+0x8]
c000ec50:	8d bc 07 08 10 00 00 	lea    edi,[edi+eax*1+0x1008]
c000ec57:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000ec5b:	85 c0                	test   eax,eax
c000ec5d:	74 13                	je     c000ec72 <int_handler+0x69>
c000ec5f:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c000ec62:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c000ec66:	74 2a                	je     c000ec92 <int_handler+0x89>
c000ec68:	83 ec 08             	sub    esp,0x8
c000ec6b:	52                   	push   edx
c000ec6c:	56                   	push   esi
c000ec6d:	ff d0                	call   eax
c000ec6f:	83 c4 10             	add    esp,0x10
c000ec72:	43                   	inc    ebx
c000ec73:	83 fb 04             	cmp    ebx,0x4
c000ec76:	75 df                	jne    c000ec57 <int_handler+0x4e>
c000ec78:	83 c4 0c             	add    esp,0xc
c000ec7b:	31 c0                	xor    eax,eax
c000ec7d:	5b                   	pop    ebx
c000ec7e:	31 d2                	xor    edx,edx
c000ec80:	5e                   	pop    esi
c000ec81:	5f                   	pop    edi
c000ec82:	5d                   	pop    ebp
c000ec83:	c3                   	ret    
c000ec84:	83 ec 0c             	sub    esp,0xc
c000ec87:	50                   	push   eax
c000ec88:	e8 d0 bf 00 00       	call   c001ac5d <Hal::endOfInterrupt(int)>
c000ec8d:	83 c4 10             	add    esp,0x10
c000ec90:	eb b2                	jmp    c000ec44 <int_handler+0x3b>
c000ec92:	83 ec 08             	sub    esp,0x8
c000ec95:	52                   	push   edx
c000ec96:	56                   	push   esi
c000ec97:	ff d0                	call   eax
c000ec99:	83 c4 10             	add    esp,0x10
c000ec9c:	83 c4 0c             	add    esp,0xc
c000ec9f:	5b                   	pop    ebx
c000eca0:	5e                   	pop    esi
c000eca1:	5f                   	pop    edi
c000eca2:	5d                   	pop    ebp
c000eca3:	c3                   	ret    

c000eca4 <InterruptController::InterruptController(char const*)>:
c000eca4:	83 ec 1c             	sub    esp,0x1c
c000eca7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ecab:	83 ec 08             	sub    esp,0x8
c000ecae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ecb2:	50                   	push   eax
c000ecb3:	e8 c2 f9 ff ff       	call   c000e67a <Device::Device(char const*)>
c000ecb8:	83 c4 10             	add    esp,0x10
c000ecbb:	ba 88 4d 02 c0       	mov    edx,0xc0024d88
c000ecc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ecc4:	89 10                	mov    DWORD PTR [eax],edx
c000ecc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ecca:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000ecd4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ecdc:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000ece4:	7f 5e                	jg     c000ed44 <InterruptController::InterruptController(char const*)+0xa0>
c000ece6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ecee:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000ecf3:	7f 49                	jg     c000ed3e <InterruptController::InterruptController(char const*)+0x9a>
c000ecf5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ecf9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ecfd:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000ed04:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ed08:	01 ca                	add    edx,ecx
c000ed0a:	83 c2 54             	add    edx,0x54
c000ed0d:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000ed15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ed19:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ed1d:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000ed24:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ed28:	01 ca                	add    edx,ecx
c000ed2a:	81 c2 54 04 00 00    	add    edx,0x454
c000ed30:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000ed38:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000ed3c:	eb b0                	jmp    c000ecee <InterruptController::InterruptController(char const*)+0x4a>
c000ed3e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000ed42:	eb 98                	jmp    c000ecdc <InterruptController::InterruptController(char const*)+0x38>
c000ed44:	90                   	nop
c000ed45:	83 c4 1c             	add    esp,0x1c
c000ed48:	c3                   	ret    
c000ed49:	90                   	nop

c000ed4a <InterruptController::~InterruptController()>:
c000ed4a:	83 ec 0c             	sub    esp,0xc
c000ed4d:	ba 88 4d 02 c0       	mov    edx,0xc0024d88
c000ed52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed56:	89 10                	mov    DWORD PTR [eax],edx
c000ed58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed5c:	83 ec 0c             	sub    esp,0xc
c000ed5f:	50                   	push   eax
c000ed60:	e8 df f5 ff ff       	call   c000e344 <Device::~Device()>
c000ed65:	83 c4 10             	add    esp,0x10
c000ed68:	90                   	nop
c000ed69:	83 c4 0c             	add    esp,0xc
c000ed6c:	c3                   	ret    
c000ed6d:	90                   	nop

c000ed6e <InterruptController::~InterruptController()>:
c000ed6e:	83 ec 0c             	sub    esp,0xc
c000ed71:	83 ec 0c             	sub    esp,0xc
c000ed74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ed78:	e8 cd ff ff ff       	call   c000ed4a <InterruptController::~InterruptController()>
c000ed7d:	83 c4 10             	add    esp,0x10
c000ed80:	83 ec 08             	sub    esp,0x8
c000ed83:	68 58 21 00 00       	push   0x2158
c000ed88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ed8c:	e8 53 e1 ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c000ed91:	83 c4 10             	add    esp,0x10
c000ed94:	83 c4 0c             	add    esp,0xc
c000ed97:	c3                   	ret    

c000ed98 <displayDebugInfo(regs*)>:
c000ed98:	55                   	push   ebp
c000ed99:	57                   	push   edi
c000ed9a:	56                   	push   esi
c000ed9b:	53                   	push   ebx
c000ed9c:	83 ec 24             	sub    esp,0x24
c000ed9f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000eda3:	0f 20 c2             	mov    edx,cr0
c000eda6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000edaa:	0f 20 d7             	mov    edi,cr2
c000edad:	0f 20 de             	mov    esi,cr3
c000edb0:	0f 20 e5             	mov    ebp,cr4
c000edb3:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c000edb6:	68 f2 4a 02 c0       	push   0xc0024af2
c000edbb:	e8 05 e2 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000edc0:	59                   	pop    ecx
c000edc1:	58                   	pop    eax
c000edc2:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000edc5:	68 fd 4a 02 c0       	push   0xc0024afd
c000edca:	e8 f6 e1 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000edcf:	58                   	pop    eax
c000edd0:	5a                   	pop    edx
c000edd1:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000edd4:	68 08 4b 02 c0       	push   0xc0024b08
c000edd9:	e8 e7 e1 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000edde:	59                   	pop    ecx
c000eddf:	58                   	pop    eax
c000ede0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000ede3:	68 13 4b 02 c0       	push   0xc0024b13
c000ede8:	e8 d8 e1 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000eded:	58                   	pop    eax
c000edee:	5a                   	pop    edx
c000edef:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000edf2:	68 1e 4b 02 c0       	push   0xc0024b1e
c000edf7:	e8 c9 e1 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000edfc:	59                   	pop    ecx
c000edfd:	58                   	pop    eax
c000edfe:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000ee01:	68 29 4b 02 c0       	push   0xc0024b29
c000ee06:	e8 ba e1 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000ee0b:	58                   	pop    eax
c000ee0c:	5a                   	pop    edx
c000ee0d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ee10:	68 34 4b 02 c0       	push   0xc0024b34
c000ee15:	e8 ab e1 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000ee1a:	59                   	pop    ecx
c000ee1b:	58                   	pop    eax
c000ee1c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ee1f:	68 3f 4b 02 c0       	push   0xc0024b3f
c000ee24:	e8 9c e1 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000ee29:	58                   	pop    eax
c000ee2a:	5a                   	pop    edx
c000ee2b:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000ee2e:	68 4a 4b 02 c0       	push   0xc0024b4a
c000ee33:	e8 8d e1 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000ee38:	59                   	pop    ecx
c000ee39:	58                   	pop    eax
c000ee3a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ee3d:	68 59 4b 02 c0       	push   0xc0024b59
c000ee42:	e8 7e e1 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000ee47:	58                   	pop    eax
c000ee48:	5a                   	pop    edx
c000ee49:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000ee4c:	68 64 4b 02 c0       	push   0xc0024b64
c000ee51:	e8 6f e1 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000ee56:	59                   	pop    ecx
c000ee57:	58                   	pop    eax
c000ee58:	57                   	push   edi
c000ee59:	68 6f 4b 02 c0       	push   0xc0024b6f
c000ee5e:	e8 62 e1 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000ee63:	58                   	pop    eax
c000ee64:	5a                   	pop    edx
c000ee65:	56                   	push   esi
c000ee66:	68 7a 4b 02 c0       	push   0xc0024b7a
c000ee6b:	e8 55 e1 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000ee70:	59                   	pop    ecx
c000ee71:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000ee76:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee7c:	e8 24 bf ff ff       	call   c000ada5 <setActiveTerminal(VgaText*)>
c000ee81:	58                   	pop    eax
c000ee82:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000ee85:	5a                   	pop    edx
c000ee86:	c1 e0 05             	shl    eax,0x5
c000ee89:	05 60 72 02 c0       	add    eax,0xc0027260
c000ee8e:	50                   	push   eax
c000ee8f:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000ee94:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee9a:	e8 09 c4 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c000ee9f:	59                   	pop    ecx
c000eea0:	58                   	pop    eax
c000eea1:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000eea6:	68 85 4b 02 c0       	push   0xc0024b85
c000eeab:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eeb1:	e8 f2 c3 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c000eeb6:	58                   	pop    eax
c000eeb7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000eebc:	5a                   	pop    edx
c000eebd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000eec0:	83 c0 0c             	add    eax,0xc
c000eec3:	50                   	push   eax
c000eec4:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000eec9:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eecf:	e8 d4 c3 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c000eed4:	59                   	pop    ecx
c000eed5:	58                   	pop    eax
c000eed6:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000eedb:	68 8e 4b 02 c0       	push   0xc0024b8e
c000eee0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eee6:	e8 bd c3 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c000eeeb:	58                   	pop    eax
c000eeec:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000eef1:	5a                   	pop    edx
c000eef2:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000eef5:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eefb:	e8 62 c3 ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c000ef00:	59                   	pop    ecx
c000ef01:	58                   	pop    eax
c000ef02:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000ef07:	68 96 4b 02 c0       	push   0xc0024b96
c000ef0c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef12:	e8 91 c3 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c000ef17:	58                   	pop    eax
c000ef18:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000ef1d:	5a                   	pop    edx
c000ef1e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ef21:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef27:	e8 36 c3 ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c000ef2c:	59                   	pop    ecx
c000ef2d:	58                   	pop    eax
c000ef2e:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000ef33:	68 9e 4b 02 c0       	push   0xc0024b9e
c000ef38:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef3e:	e8 65 c3 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c000ef43:	58                   	pop    eax
c000ef44:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000ef49:	5a                   	pop    edx
c000ef4a:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000ef4d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef53:	e8 0a c3 ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c000ef58:	59                   	pop    ecx
c000ef59:	58                   	pop    eax
c000ef5a:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000ef5f:	68 a6 4b 02 c0       	push   0xc0024ba6
c000ef64:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef6a:	e8 39 c3 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c000ef6f:	58                   	pop    eax
c000ef70:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000ef75:	5a                   	pop    edx
c000ef76:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000ef79:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef7f:	e8 de c2 ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c000ef84:	59                   	pop    ecx
c000ef85:	58                   	pop    eax
c000ef86:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000ef8b:	68 ae 4b 02 c0       	push   0xc0024bae
c000ef90:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef96:	e8 0d c3 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c000ef9b:	58                   	pop    eax
c000ef9c:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000efa1:	5a                   	pop    edx
c000efa2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000efa5:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000efab:	e8 b2 c2 ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c000efb0:	59                   	pop    ecx
c000efb1:	58                   	pop    eax
c000efb2:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000efb7:	68 b6 4b 02 c0       	push   0xc0024bb6
c000efbc:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000efc2:	e8 e1 c2 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c000efc7:	58                   	pop    eax
c000efc8:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000efcd:	5a                   	pop    edx
c000efce:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c000efd1:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000efd7:	e8 86 c2 ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c000efdc:	59                   	pop    ecx
c000efdd:	58                   	pop    eax
c000efde:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000efe3:	68 be 4b 02 c0       	push   0xc0024bbe
c000efe8:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000efee:	e8 b5 c2 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c000eff3:	58                   	pop    eax
c000eff4:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000eff9:	5a                   	pop    edx
c000effa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000effe:	52                   	push   edx
c000efff:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f005:	e8 58 c2 ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c000f00a:	59                   	pop    ecx
c000f00b:	58                   	pop    eax
c000f00c:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000f011:	68 c7 4b 02 c0       	push   0xc0024bc7
c000f016:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f01c:	e8 87 c2 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c000f021:	58                   	pop    eax
c000f022:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000f027:	5a                   	pop    edx
c000f028:	57                   	push   edi
c000f029:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f02f:	e8 2e c2 ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c000f034:	59                   	pop    ecx
c000f035:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000f03a:	5f                   	pop    edi
c000f03b:	68 cf 4b 02 c0       	push   0xc0024bcf
c000f040:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f046:	e8 5d c2 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c000f04b:	58                   	pop    eax
c000f04c:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000f051:	5a                   	pop    edx
c000f052:	56                   	push   esi
c000f053:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f059:	e8 04 c2 ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c000f05e:	59                   	pop    ecx
c000f05f:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000f064:	5e                   	pop    esi
c000f065:	68 d7 4b 02 c0       	push   0xc0024bd7
c000f06a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f070:	e8 33 c2 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c000f075:	5f                   	pop    edi
c000f076:	58                   	pop    eax
c000f077:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000f07c:	55                   	push   ebp
c000f07d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f083:	e8 da c1 ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c000f088:	58                   	pop    eax
c000f089:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000f08e:	5a                   	pop    edx
c000f08f:	68 df 4b 02 c0       	push   0xc0024bdf
c000f094:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f09a:	e8 09 c2 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c000f09f:	0f 21 c0             	mov    eax,db0
c000f0a2:	59                   	pop    ecx
c000f0a3:	5e                   	pop    esi
c000f0a4:	50                   	push   eax
c000f0a5:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000f0aa:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f0b0:	e8 ad c1 ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c000f0b5:	5f                   	pop    edi
c000f0b6:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000f0bb:	5d                   	pop    ebp
c000f0bc:	68 e8 4b 02 c0       	push   0xc0024be8
c000f0c1:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f0c7:	e8 dc c1 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c000f0cc:	0f 21 c8             	mov    eax,db1
c000f0cf:	5a                   	pop    edx
c000f0d0:	59                   	pop    ecx
c000f0d1:	50                   	push   eax
c000f0d2:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000f0d7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f0dd:	e8 80 c1 ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c000f0e2:	5e                   	pop    esi
c000f0e3:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000f0e8:	5f                   	pop    edi
c000f0e9:	68 f0 4b 02 c0       	push   0xc0024bf0
c000f0ee:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f0f4:	e8 af c1 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c000f0f9:	0f 21 d0             	mov    eax,db2
c000f0fc:	5d                   	pop    ebp
c000f0fd:	5a                   	pop    edx
c000f0fe:	50                   	push   eax
c000f0ff:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000f104:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f10a:	e8 53 c1 ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c000f10f:	59                   	pop    ecx
c000f110:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000f115:	5e                   	pop    esi
c000f116:	68 f8 4b 02 c0       	push   0xc0024bf8
c000f11b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f121:	e8 82 c1 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c000f126:	0f 21 d8             	mov    eax,db3
c000f129:	5f                   	pop    edi
c000f12a:	5d                   	pop    ebp
c000f12b:	50                   	push   eax
c000f12c:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000f131:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f137:	e8 26 c1 ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c000f13c:	58                   	pop    eax
c000f13d:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000f142:	5a                   	pop    edx
c000f143:	68 00 4c 02 c0       	push   0xc0024c00
c000f148:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f14e:	e8 55 c1 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c000f153:	0f 21 f0             	mov    eax,db6
c000f156:	59                   	pop    ecx
c000f157:	5e                   	pop    esi
c000f158:	50                   	push   eax
c000f159:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000f15e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f164:	e8 f9 c0 ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c000f169:	5f                   	pop    edi
c000f16a:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000f16f:	5d                   	pop    ebp
c000f170:	68 08 4c 02 c0       	push   0xc0024c08
c000f175:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f17b:	e8 28 c1 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c000f180:	0f 21 f8             	mov    eax,db7
c000f183:	5a                   	pop    edx
c000f184:	59                   	pop    ecx
c000f185:	50                   	push   eax
c000f186:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000f18b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f191:	e8 cc c0 ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c000f196:	5e                   	pop    esi
c000f197:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f19a:	e8 b2 87 00 00       	call   c0017951 <Thr::getDriverNameFromAddress(unsigned long)>
c000f19f:	83 c4 10             	add    esp,0x10
c000f1a2:	85 c0                	test   eax,eax
c000f1a4:	74 7d                	je     c000f223 <displayDebugInfo(regs*)+0x48b>
c000f1a6:	89 c6                	mov    esi,eax
c000f1a8:	50                   	push   eax
c000f1a9:	50                   	push   eax
c000f1aa:	56                   	push   esi
c000f1ab:	68 10 4c 02 c0       	push   0xc0024c10
c000f1b0:	e8 10 de ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000f1b5:	5a                   	pop    edx
c000f1b6:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000f1bb:	59                   	pop    ecx
c000f1bc:	68 1e 4c 02 c0       	push   0xc0024c1e
c000f1c1:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f1c7:	e8 dc c0 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c000f1cc:	5f                   	pop    edi
c000f1cd:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000f1d2:	5d                   	pop    ebp
c000f1d3:	56                   	push   esi
c000f1d4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f1da:	e8 c9 c0 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c000f1df:	58                   	pop    eax
c000f1e0:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000f1e5:	5a                   	pop    edx
c000f1e6:	68 2a 4c 02 c0       	push   0xc0024c2a
c000f1eb:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f1f1:	e8 b2 c0 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c000f1f6:	59                   	pop    ecx
c000f1f7:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000f1fc:	8b b8 06 05 00 00    	mov    edi,DWORD PTR [eax+0x506]
c000f202:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f205:	e8 7e 87 00 00       	call   c0017988 <Thr::getDriverOffsetFromAddress(unsigned long)>
c000f20a:	5b                   	pop    ebx
c000f20b:	5d                   	pop    ebp
c000f20c:	50                   	push   eax
c000f20d:	57                   	push   edi
c000f20e:	e8 4f c0 ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c000f213:	58                   	pop    eax
c000f214:	5a                   	pop    edx
c000f215:	56                   	push   esi
c000f216:	68 36 4c 02 c0       	push   0xc0024c36
c000f21b:	e8 a5 dd ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000f220:	83 c4 10             	add    esp,0x10
c000f223:	fa                   	cli    
c000f224:	f4                   	hlt    
c000f225:	eb fe                	jmp    c000f225 <displayDebugInfo(regs*)+0x48d>

c000f227 <gpFault(regs*, void*)>:
c000f227:	53                   	push   ebx
c000f228:	83 ec 14             	sub    esp,0x14
c000f22b:	c7 05 44 7f 02 c0 6b 93 01 c0 	mov    DWORD PTR ds:0xc0027f44,0xc001936b
c000f235:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000f239:	53                   	push   ebx
c000f23a:	e8 2c a1 00 00       	call   c001936b <Vm::faultHandler(regs*)>
c000f23f:	83 c4 10             	add    esp,0x10
c000f242:	84 c0                	test   al,al
c000f244:	74 05                	je     c000f24b <gpFault(regs*, void*)+0x24>
c000f246:	83 c4 08             	add    esp,0x8
c000f249:	5b                   	pop    ebx
c000f24a:	c3                   	ret    
c000f24b:	83 ec 0c             	sub    esp,0xc
c000f24e:	68 46 4c 02 c0       	push   0xc0024c46
c000f253:	e8 6d dd ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000f258:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f25b:	e8 38 fb ff ff       	call   c000ed98 <displayDebugInfo(regs*)>

c000f260 <pgFault(regs*, void*)>:
c000f260:	53                   	push   ebx
c000f261:	83 ec 10             	sub    esp,0x10
c000f264:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f268:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f26b:	68 61 4c 02 c0       	push   0xc0024c61
c000f270:	e8 50 dd ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000f275:	0f 20 d0             	mov    eax,cr2
c000f278:	5a                   	pop    edx
c000f279:	59                   	pop    ecx
c000f27a:	50                   	push   eax
c000f27b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f280:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f283:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c000f289:	e8 b2 d8 ff ff       	call   c000cb40 <VAS::tryLoadBackOffDisk(unsigned long)>
c000f28e:	83 c4 10             	add    esp,0x10
c000f291:	84 c0                	test   al,al
c000f293:	74 05                	je     c000f29a <pgFault(regs*, void*)+0x3a>
c000f295:	83 c4 08             	add    esp,0x8
c000f298:	5b                   	pop    ebx
c000f299:	c3                   	ret    
c000f29a:	83 ec 0c             	sub    esp,0xc
c000f29d:	68 76 4c 02 c0       	push   0xc0024c76
c000f2a2:	e8 1e dd ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000f2a7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f2aa:	e8 e9 fa ff ff       	call   c000ed98 <displayDebugInfo(regs*)>

c000f2af <otherISRHandler(regs*, void*)>:
c000f2af:	53                   	push   ebx
c000f2b0:	83 ec 0c             	sub    esp,0xc
c000f2b3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f2b7:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000f2ba:	50                   	push   eax
c000f2bb:	50                   	push   eax
c000f2bc:	68 83 4c 02 c0       	push   0xc0024c83
c000f2c1:	e8 ff dc ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000f2c6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f2c9:	e8 ca fa ff ff       	call   c000ed98 <displayDebugInfo(regs*)>

c000f2ce <opcodeFault(regs*, void*)>:
c000f2ce:	55                   	push   ebp
c000f2cf:	89 e5                	mov    ebp,esp
c000f2d1:	56                   	push   esi
c000f2d2:	53                   	push   ebx
c000f2d3:	83 ec 30             	sub    esp,0x30
c000f2d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f2d9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f2dc:	83 ec 08             	sub    esp,0x8
c000f2df:	50                   	push   eax
c000f2e0:	68 a0 4c 02 c0       	push   0xc0024ca0
c000f2e5:	e8 db dc ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000f2ea:	83 c4 10             	add    esp,0x10
c000f2ed:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c000f2f2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000f2f8:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c000f2fe:	84 c0                	test   al,al
c000f300:	74 24                	je     c000f326 <opcodeFault(regs*, void*)+0x58>
c000f302:	83 ec 0c             	sub    esp,0xc
c000f305:	68 b0 4c 02 c0       	push   0xc0024cb0
c000f30a:	e8 b6 dc ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000f30f:	83 c4 10             	add    esp,0x10
c000f312:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f315:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f318:	8d 50 19             	lea    edx,[eax+0x19]
c000f31b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f31e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f321:	e9 7b 03 00 00       	jmp    c000f6a1 <opcodeFault(regs*, void*)+0x3d3>
c000f326:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f329:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f32c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000f32f:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c000f333:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f336:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f339:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000f33c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f33f:	8a 00                	mov    al,BYTE PTR [eax]
c000f341:	3c f0                	cmp    al,0xf0
c000f343:	75 17                	jne    c000f35c <opcodeFault(regs*, void*)+0x8e>
c000f345:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f348:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f34b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f34e:	8d 50 01             	lea    edx,[eax+0x1]
c000f351:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f354:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f357:	e9 d6 00 00 00       	jmp    c000f432 <opcodeFault(regs*, void*)+0x164>
c000f35c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f35f:	8a 00                	mov    al,BYTE PTR [eax]
c000f361:	3c f2                	cmp    al,0xf2
c000f363:	74 09                	je     c000f36e <opcodeFault(regs*, void*)+0xa0>
c000f365:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f368:	8a 00                	mov    al,BYTE PTR [eax]
c000f36a:	3c f3                	cmp    al,0xf3
c000f36c:	75 1b                	jne    c000f389 <opcodeFault(regs*, void*)+0xbb>
c000f36e:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f372:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f375:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f378:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f37b:	8d 50 01             	lea    edx,[eax+0x1]
c000f37e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f381:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f384:	e9 a9 00 00 00       	jmp    c000f432 <opcodeFault(regs*, void*)+0x164>
c000f389:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f38c:	8a 00                	mov    al,BYTE PTR [eax]
c000f38e:	3c 66                	cmp    al,0x66
c000f390:	75 1b                	jne    c000f3ad <opcodeFault(regs*, void*)+0xdf>
c000f392:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f396:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f399:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f39c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f39f:	8d 50 01             	lea    edx,[eax+0x1]
c000f3a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f3a5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f3a8:	e9 85 00 00 00       	jmp    c000f432 <opcodeFault(regs*, void*)+0x164>
c000f3ad:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f3b0:	8a 00                	mov    al,BYTE PTR [eax]
c000f3b2:	3c 67                	cmp    al,0x67
c000f3b4:	75 18                	jne    c000f3ce <opcodeFault(regs*, void*)+0x100>
c000f3b6:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f3ba:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f3bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f3c0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f3c3:	8d 50 01             	lea    edx,[eax+0x1]
c000f3c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f3c9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f3cc:	eb 64                	jmp    c000f432 <opcodeFault(regs*, void*)+0x164>
c000f3ce:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f3d1:	8a 00                	mov    al,BYTE PTR [eax]
c000f3d3:	3c 2e                	cmp    al,0x2e
c000f3d5:	74 09                	je     c000f3e0 <opcodeFault(regs*, void*)+0x112>
c000f3d7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f3da:	8a 00                	mov    al,BYTE PTR [eax]
c000f3dc:	3c 3e                	cmp    al,0x3e
c000f3de:	75 18                	jne    c000f3f8 <opcodeFault(regs*, void*)+0x12a>
c000f3e0:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f3e4:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f3e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f3ea:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f3ed:	8d 50 01             	lea    edx,[eax+0x1]
c000f3f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f3f3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f3f6:	eb 3a                	jmp    c000f432 <opcodeFault(regs*, void*)+0x164>
c000f3f8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f3fb:	8a 00                	mov    al,BYTE PTR [eax]
c000f3fd:	3c 36                	cmp    al,0x36
c000f3ff:	74 1b                	je     c000f41c <opcodeFault(regs*, void*)+0x14e>
c000f401:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f404:	8a 00                	mov    al,BYTE PTR [eax]
c000f406:	3c 26                	cmp    al,0x26
c000f408:	74 12                	je     c000f41c <opcodeFault(regs*, void*)+0x14e>
c000f40a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f40d:	8a 00                	mov    al,BYTE PTR [eax]
c000f40f:	3c 64                	cmp    al,0x64
c000f411:	74 09                	je     c000f41c <opcodeFault(regs*, void*)+0x14e>
c000f413:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f416:	8a 00                	mov    al,BYTE PTR [eax]
c000f418:	3c 65                	cmp    al,0x65
c000f41a:	75 16                	jne    c000f432 <opcodeFault(regs*, void*)+0x164>
c000f41c:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f420:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f423:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f426:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f429:	8d 50 01             	lea    edx,[eax+0x1]
c000f42c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f42f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f432:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f435:	8a 00                	mov    al,BYTE PTR [eax]
c000f437:	3c 0f                	cmp    al,0xf
c000f439:	0f 85 8d 01 00 00    	jne    c000f5cc <opcodeFault(regs*, void*)+0x2fe>
c000f43f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f442:	40                   	inc    eax
c000f443:	8a 00                	mov    al,BYTE PTR [eax]
c000f445:	3c c7                	cmp    al,0xc7
c000f447:	0f 85 7f 01 00 00    	jne    c000f5cc <opcodeFault(regs*, void*)+0x2fe>
c000f44d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f450:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f453:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f456:	8d 50 01             	lea    edx,[eax+0x1]
c000f459:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f45c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f45f:	8d 45 d2             	lea    eax,[ebp-0x2e]
c000f462:	50                   	push   eax
c000f463:	8d 45 d3             	lea    eax,[ebp-0x2d]
c000f466:	50                   	push   eax
c000f467:	8d 45 d4             	lea    eax,[ebp-0x2c]
c000f46a:	50                   	push   eax
c000f46b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f46e:	e8 c3 4f 00 00       	call   c0014436 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c000f473:	83 c4 10             	add    esp,0x10
c000f476:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000f479:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c000f47c:	83 f0 01             	xor    eax,0x1
c000f47f:	84 c0                	test   al,al
c000f481:	0f 84 45 01 00 00    	je     c000f5cc <opcodeFault(regs*, void*)+0x2fe>
c000f487:	8a 45 d2             	mov    al,BYTE PTR [ebp-0x2e]
c000f48a:	3c 01                	cmp    al,0x1
c000f48c:	0f 85 3a 01 00 00    	jne    c000f5cc <opcodeFault(regs*, void*)+0x2fe>
c000f492:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c000f495:	83 f0 01             	xor    eax,0x1
c000f498:	84 c0                	test   al,al
c000f49a:	0f 84 2c 01 00 00    	je     c000f5cc <opcodeFault(regs*, void*)+0x2fe>
c000f4a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f4a3:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000f4a6:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f4a9:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c000f4b0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f4b3:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f4b6:	89 c2                	mov    edx,eax
c000f4b8:	b8 00 00 00 00       	mov    eax,0x0
c000f4bd:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f4c0:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f4c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f4c6:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000f4c9:	ba 00 00 00 00       	mov    edx,0x0
c000f4ce:	09 45 e0             	or     DWORD PTR [ebp-0x20],eax
c000f4d1:	09 55 e4             	or     DWORD PTR [ebp-0x1c],edx
c000f4d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f4d7:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000f4da:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f4dd:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c000f4e4:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f4e7:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f4ea:	89 c2                	mov    edx,eax
c000f4ec:	b8 00 00 00 00       	mov    eax,0x0
c000f4f1:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f4f4:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
c000f4f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f4fa:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f4fd:	ba 00 00 00 00       	mov    edx,0x0
c000f502:	09 45 d8             	or     DWORD PTR [ebp-0x28],eax
c000f505:	09 55 dc             	or     DWORD PTR [ebp-0x24],edx
c000f508:	fa                   	cli    
c000f509:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c000f50e:	40                   	inc    eax
c000f50f:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c000f514:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f517:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f51a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f51c:	89 c1                	mov    ecx,eax
c000f51e:	33 4d e0             	xor    ecx,DWORD PTR [ebp-0x20]
c000f521:	89 cb                	mov    ebx,ecx
c000f523:	89 d0                	mov    eax,edx
c000f525:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c000f528:	89 c6                	mov    esi,eax
c000f52a:	89 f0                	mov    eax,esi
c000f52c:	09 d8                	or     eax,ebx
c000f52e:	85 c0                	test   eax,eax
c000f530:	75 21                	jne    c000f553 <opcodeFault(regs*, void*)+0x285>
c000f532:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c000f535:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f538:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f53b:	89 01                	mov    DWORD PTR [ecx],eax
c000f53d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f540:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f543:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f546:	83 c8 40             	or     eax,0x40
c000f549:	89 c2                	mov    edx,eax
c000f54b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f54e:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f551:	eb 3e                	jmp    c000f591 <opcodeFault(regs*, void*)+0x2c3>
c000f553:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f556:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f559:	8b 00                	mov    eax,DWORD PTR [eax]
c000f55b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f55e:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f561:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c000f564:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f567:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000f56a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f56d:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f570:	89 d0                	mov    eax,edx
c000f572:	31 d2                	xor    edx,edx
c000f574:	89 c3                	mov    ebx,eax
c000f576:	89 d6                	mov    esi,edx
c000f578:	89 da                	mov    edx,ebx
c000f57a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f57d:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c000f580:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f583:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f586:	83 e0 bf             	and    eax,0xffffffbf
c000f589:	89 c2                	mov    edx,eax
c000f58b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f58e:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f591:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c000f596:	48                   	dec    eax
c000f597:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c000f59c:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c000f5a1:	85 c0                	test   eax,eax
c000f5a3:	75 01                	jne    c000f5a6 <opcodeFault(regs*, void*)+0x2d8>
c000f5a5:	fb                   	sti    
c000f5a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f5a9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f5ac:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c000f5af:	01 c2                	add    edx,eax
c000f5b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f5b4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f5b7:	83 ec 0c             	sub    esp,0xc
c000f5ba:	68 d3 4c 02 c0       	push   0xc0024cd3
c000f5bf:	e8 01 da ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000f5c4:	83 c4 10             	add    esp,0x10
c000f5c7:	e9 d5 00 00 00       	jmp    c000f6a1 <opcodeFault(regs*, void*)+0x3d3>
c000f5cc:	83 ec 0c             	sub    esp,0xc
c000f5cf:	68 e6 4c 02 c0       	push   0xc0024ce6
c000f5d4:	e8 ec d9 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000f5d9:	83 c4 10             	add    esp,0x10
c000f5dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f5df:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f5e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f5e5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f5e8:	c1 e0 04             	shl    eax,0x4
c000f5eb:	01 d0                	add    eax,edx
c000f5ed:	83 c0 03             	add    eax,0x3
c000f5f0:	8a 00                	mov    al,BYTE PTR [eax]
c000f5f2:	0f b6 d8             	movzx  ebx,al
c000f5f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f5f8:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f5fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f5fe:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f601:	c1 e0 04             	shl    eax,0x4
c000f604:	01 d0                	add    eax,edx
c000f606:	83 c0 02             	add    eax,0x2
c000f609:	8a 00                	mov    al,BYTE PTR [eax]
c000f60b:	0f b6 c8             	movzx  ecx,al
c000f60e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f611:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f614:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f617:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f61a:	c1 e0 04             	shl    eax,0x4
c000f61d:	01 d0                	add    eax,edx
c000f61f:	40                   	inc    eax
c000f620:	8a 00                	mov    al,BYTE PTR [eax]
c000f622:	0f b6 d0             	movzx  edx,al
c000f625:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f628:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c000f62b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f62e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f631:	c1 e0 04             	shl    eax,0x4
c000f634:	01 f0                	add    eax,esi
c000f636:	8a 00                	mov    al,BYTE PTR [eax]
c000f638:	0f b6 c0             	movzx  eax,al
c000f63b:	83 ec 0c             	sub    esp,0xc
c000f63e:	53                   	push   ebx
c000f63f:	51                   	push   ecx
c000f640:	52                   	push   edx
c000f641:	50                   	push   eax
c000f642:	68 f8 4c 02 c0       	push   0xc0024cf8
c000f647:	e8 79 d9 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000f64c:	83 c4 20             	add    esp,0x20
c000f64f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f652:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f655:	83 c0 03             	add    eax,0x3
c000f658:	8a 00                	mov    al,BYTE PTR [eax]
c000f65a:	0f b6 d8             	movzx  ebx,al
c000f65d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f660:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f663:	83 c0 02             	add    eax,0x2
c000f666:	8a 00                	mov    al,BYTE PTR [eax]
c000f668:	0f b6 c8             	movzx  ecx,al
c000f66b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f66e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f671:	40                   	inc    eax
c000f672:	8a 00                	mov    al,BYTE PTR [eax]
c000f674:	0f b6 d0             	movzx  edx,al
c000f677:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f67a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f67d:	8a 00                	mov    al,BYTE PTR [eax]
c000f67f:	0f b6 c0             	movzx  eax,al
c000f682:	83 ec 0c             	sub    esp,0xc
c000f685:	53                   	push   ebx
c000f686:	51                   	push   ecx
c000f687:	52                   	push   edx
c000f688:	50                   	push   eax
c000f689:	68 20 4d 02 c0       	push   0xc0024d20
c000f68e:	e8 32 d9 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000f693:	83 c4 20             	add    esp,0x20
c000f696:	83 ec 0c             	sub    esp,0xc
c000f699:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f69c:	e8 f7 f6 ff ff       	call   c000ed98 <displayDebugInfo(regs*)>
c000f6a1:	8d 65 f8             	lea    esp,[ebp-0x8]
c000f6a4:	5b                   	pop    ebx
c000f6a5:	5e                   	pop    esi
c000f6a6:	5d                   	pop    ebp
c000f6a7:	c3                   	ret    

c000f6a8 <displayProgramFault(char const*)>:
c000f6a8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f6ad:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f6b0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000f6b6:	85 c0                	test   eax,eax
c000f6b8:	74 15                	je     c000f6cf <displayProgramFault(char const*)+0x27>
c000f6ba:	83 ec 0c             	sub    esp,0xc
c000f6bd:	6a 04                	push   0x4
c000f6bf:	6a 0f                	push   0xf
c000f6c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f6c5:	50                   	push   eax
c000f6c6:	e8 d9 b8 ff ff       	call   c000afa4 <VgaText::puts(char const*, VgaColour, VgaColour)>
c000f6cb:	83 c4 1c             	add    esp,0x1c
c000f6ce:	c3                   	ret    
c000f6cf:	c3                   	ret    

c000f6d0 <setupInterruptController()>:
c000f6d0:	55                   	push   ebp
c000f6d1:	89 e5                	mov    ebp,esp
c000f6d3:	53                   	push   ebx
c000f6d4:	83 ec 24             	sub    esp,0x24
c000f6d7:	b8 00 00 00 00       	mov    eax,0x0
c000f6dc:	85 c0                	test   eax,eax
c000f6de:	0f 95 c0             	setne  al
c000f6e1:	84 c0                	test   al,al
c000f6e3:	74 5b                	je     c000f740 <setupInterruptController()+0x70>
c000f6e5:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c000f6ec:	83 ec 0c             	sub    esp,0xc
c000f6ef:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000f6f2:	e8 c0 a5 ff ff       	call   c0009cb7 <malloc>
c000f6f7:	83 c4 10             	add    esp,0x10
c000f6fa:	89 c3                	mov    ebx,eax
c000f6fc:	83 ec 0c             	sub    esp,0xc
c000f6ff:	53                   	push   ebx
c000f700:	e8 f9 1e 01 00       	call   c00215fe <APIC::APIC()>
c000f705:	83 c4 10             	add    esp,0x10
c000f708:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000f70b:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c000f70e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f711:	8b 00                	mov    eax,DWORD PTR [eax]
c000f713:	83 c0 08             	add    eax,0x8
c000f716:	8b 00                	mov    eax,DWORD PTR [eax]
c000f718:	6a 00                	push   0x0
c000f71a:	6a 00                	push   0x0
c000f71c:	6a 00                	push   0x0
c000f71e:	52                   	push   edx
c000f71f:	ff d0                	call   eax
c000f721:	83 c4 10             	add    esp,0x10
c000f724:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c000f729:	83 ec 08             	sub    esp,0x8
c000f72c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f72f:	50                   	push   eax
c000f730:	e8 41 ed ff ff       	call   c000e476 <Device::addChild(Device*)>
c000f735:	83 c4 10             	add    esp,0x10
c000f738:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f73b:	e9 5e 03 00 00       	jmp    c000fa9e <setupInterruptController()+0x3ce>
c000f740:	a0 20 87 02 c0       	mov    al,ds:0xc0028720
c000f745:	84 c0                	test   al,al
c000f747:	75 14                	jne    c000f75d <setupInterruptController()+0x8d>
c000f749:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c000f74e:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000f754:	83 e2 fe             	and    edx,0xfffffffe
c000f757:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000f75d:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c000f762:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000f768:	83 e0 01             	and    eax,0x1
c000f76b:	84 c0                	test   al,al
c000f76d:	0f 95 c0             	setne  al
c000f770:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c000f773:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c000f77a:	83 ec 0c             	sub    esp,0xc
c000f77d:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c000f780:	e8 32 a5 ff ff       	call   c0009cb7 <malloc>
c000f785:	83 c4 10             	add    esp,0x10
c000f788:	89 c3                	mov    ebx,eax
c000f78a:	83 ec 0c             	sub    esp,0xc
c000f78d:	53                   	push   ebx
c000f78e:	e8 d3 23 01 00       	call   c0021b66 <PIC::PIC()>
c000f793:	83 c4 10             	add    esp,0x10
c000f796:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000f799:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f79c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f79f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7a1:	83 c0 08             	add    eax,0x8
c000f7a4:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7a6:	6a 00                	push   0x0
c000f7a8:	6a 00                	push   0x0
c000f7aa:	6a 00                	push   0x0
c000f7ac:	52                   	push   edx
c000f7ad:	ff d0                	call   eax
c000f7af:	83 c4 10             	add    esp,0x10
c000f7b2:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c000f7b6:	74 73                	je     c000f82b <setupInterruptController()+0x15b>
c000f7b8:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f7bb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7be:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7c0:	83 c0 0c             	add    eax,0xc
c000f7c3:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7c5:	6a 00                	push   0x0
c000f7c7:	6a 00                	push   0x0
c000f7c9:	6a 00                	push   0x0
c000f7cb:	52                   	push   edx
c000f7cc:	ff d0                	call   eax
c000f7ce:	83 c4 10             	add    esp,0x10
c000f7d1:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000f7d5:	74 15                	je     c000f7ec <setupInterruptController()+0x11c>
c000f7d7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7da:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7dc:	83 c0 04             	add    eax,0x4
c000f7df:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7e1:	83 ec 0c             	sub    esp,0xc
c000f7e4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f7e7:	ff d0                	call   eax
c000f7e9:	83 c4 10             	add    esp,0x10
c000f7ec:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c000f7f3:	83 ec 0c             	sub    esp,0xc
c000f7f6:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000f7f9:	e8 b9 a4 ff ff       	call   c0009cb7 <malloc>
c000f7fe:	83 c4 10             	add    esp,0x10
c000f801:	89 c3                	mov    ebx,eax
c000f803:	83 ec 0c             	sub    esp,0xc
c000f806:	53                   	push   ebx
c000f807:	e8 f2 1d 01 00       	call   c00215fe <APIC::APIC()>
c000f80c:	83 c4 10             	add    esp,0x10
c000f80f:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000f812:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f815:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f818:	8b 00                	mov    eax,DWORD PTR [eax]
c000f81a:	83 c0 08             	add    eax,0x8
c000f81d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f81f:	6a 00                	push   0x0
c000f821:	6a 00                	push   0x0
c000f823:	6a 00                	push   0x0
c000f825:	52                   	push   edx
c000f826:	ff d0                	call   eax
c000f828:	83 c4 10             	add    esp,0x10
c000f82b:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c000f830:	83 ec 08             	sub    esp,0x8
c000f833:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f836:	50                   	push   eax
c000f837:	e8 3a ec ff ff       	call   c000e476 <Device::addChild(Device*)>
c000f83c:	83 c4 10             	add    esp,0x10
c000f83f:	c7 05 48 7f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027f48,0x0
c000f849:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f84c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f84e:	83 c0 24             	add    eax,0x24
c000f851:	8b 00                	mov    eax,DWORD PTR [eax]
c000f853:	6a 00                	push   0x0
c000f855:	68 af f2 00 c0       	push   0xc000f2af
c000f85a:	6a 00                	push   0x0
c000f85c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f85f:	ff d0                	call   eax
c000f861:	83 c4 10             	add    esp,0x10
c000f864:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f867:	8b 00                	mov    eax,DWORD PTR [eax]
c000f869:	83 c0 24             	add    eax,0x24
c000f86c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f86e:	6a 00                	push   0x0
c000f870:	68 af f2 00 c0       	push   0xc000f2af
c000f875:	6a 01                	push   0x1
c000f877:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f87a:	ff d0                	call   eax
c000f87c:	83 c4 10             	add    esp,0x10
c000f87f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f882:	8b 00                	mov    eax,DWORD PTR [eax]
c000f884:	83 c0 24             	add    eax,0x24
c000f887:	8b 00                	mov    eax,DWORD PTR [eax]
c000f889:	6a 00                	push   0x0
c000f88b:	68 fb eb 00 c0       	push   0xc000ebfb
c000f890:	6a 02                	push   0x2
c000f892:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f895:	ff d0                	call   eax
c000f897:	83 c4 10             	add    esp,0x10
c000f89a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f89d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f89f:	83 c0 24             	add    eax,0x24
c000f8a2:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8a4:	6a 00                	push   0x0
c000f8a6:	68 af f2 00 c0       	push   0xc000f2af
c000f8ab:	6a 03                	push   0x3
c000f8ad:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f8b0:	ff d0                	call   eax
c000f8b2:	83 c4 10             	add    esp,0x10
c000f8b5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8b8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8ba:	83 c0 24             	add    eax,0x24
c000f8bd:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8bf:	6a 00                	push   0x0
c000f8c1:	68 af f2 00 c0       	push   0xc000f2af
c000f8c6:	6a 04                	push   0x4
c000f8c8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f8cb:	ff d0                	call   eax
c000f8cd:	83 c4 10             	add    esp,0x10
c000f8d0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8d3:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8d5:	83 c0 24             	add    eax,0x24
c000f8d8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8da:	6a 00                	push   0x0
c000f8dc:	68 af f2 00 c0       	push   0xc000f2af
c000f8e1:	6a 05                	push   0x5
c000f8e3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f8e6:	ff d0                	call   eax
c000f8e8:	83 c4 10             	add    esp,0x10
c000f8eb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8ee:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8f0:	83 c0 24             	add    eax,0x24
c000f8f3:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8f5:	6a 00                	push   0x0
c000f8f7:	68 ce f2 00 c0       	push   0xc000f2ce
c000f8fc:	6a 06                	push   0x6
c000f8fe:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f901:	ff d0                	call   eax
c000f903:	83 c4 10             	add    esp,0x10
c000f906:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f909:	8b 00                	mov    eax,DWORD PTR [eax]
c000f90b:	83 c0 24             	add    eax,0x24
c000f90e:	8b 00                	mov    eax,DWORD PTR [eax]
c000f910:	6a 00                	push   0x0
c000f912:	68 16 ea 00 c0       	push   0xc000ea16
c000f917:	6a 08                	push   0x8
c000f919:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f91c:	ff d0                	call   eax
c000f91e:	83 c4 10             	add    esp,0x10
c000f921:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f924:	8b 00                	mov    eax,DWORD PTR [eax]
c000f926:	83 c0 24             	add    eax,0x24
c000f929:	8b 00                	mov    eax,DWORD PTR [eax]
c000f92b:	6a 00                	push   0x0
c000f92d:	68 af f2 00 c0       	push   0xc000f2af
c000f932:	6a 09                	push   0x9
c000f934:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f937:	ff d0                	call   eax
c000f939:	83 c4 10             	add    esp,0x10
c000f93c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f93f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f941:	83 c0 24             	add    eax,0x24
c000f944:	8b 00                	mov    eax,DWORD PTR [eax]
c000f946:	6a 00                	push   0x0
c000f948:	68 af f2 00 c0       	push   0xc000f2af
c000f94d:	6a 0a                	push   0xa
c000f94f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f952:	ff d0                	call   eax
c000f954:	83 c4 10             	add    esp,0x10
c000f957:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f95a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f95c:	83 c0 24             	add    eax,0x24
c000f95f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f961:	6a 00                	push   0x0
c000f963:	68 af f2 00 c0       	push   0xc000f2af
c000f968:	6a 0b                	push   0xb
c000f96a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f96d:	ff d0                	call   eax
c000f96f:	83 c4 10             	add    esp,0x10
c000f972:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f975:	8b 00                	mov    eax,DWORD PTR [eax]
c000f977:	83 c0 24             	add    eax,0x24
c000f97a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f97c:	6a 00                	push   0x0
c000f97e:	68 af f2 00 c0       	push   0xc000f2af
c000f983:	6a 0c                	push   0xc
c000f985:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f988:	ff d0                	call   eax
c000f98a:	83 c4 10             	add    esp,0x10
c000f98d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f990:	8b 00                	mov    eax,DWORD PTR [eax]
c000f992:	83 c0 24             	add    eax,0x24
c000f995:	8b 00                	mov    eax,DWORD PTR [eax]
c000f997:	6a 00                	push   0x0
c000f999:	68 27 f2 00 c0       	push   0xc000f227
c000f99e:	6a 0d                	push   0xd
c000f9a0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f9a3:	ff d0                	call   eax
c000f9a5:	83 c4 10             	add    esp,0x10
c000f9a8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f9ab:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9ad:	83 c0 24             	add    eax,0x24
c000f9b0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9b2:	6a 00                	push   0x0
c000f9b4:	68 60 f2 00 c0       	push   0xc000f260
c000f9b9:	6a 0e                	push   0xe
c000f9bb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f9be:	ff d0                	call   eax
c000f9c0:	83 c4 10             	add    esp,0x10
c000f9c3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f9c6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9c8:	83 c0 24             	add    eax,0x24
c000f9cb:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9cd:	6a 00                	push   0x0
c000f9cf:	68 af f2 00 c0       	push   0xc000f2af
c000f9d4:	6a 0f                	push   0xf
c000f9d6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f9d9:	ff d0                	call   eax
c000f9db:	83 c4 10             	add    esp,0x10
c000f9de:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f9e1:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9e3:	83 c0 24             	add    eax,0x24
c000f9e6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9e8:	6a 00                	push   0x0
c000f9ea:	68 af f2 00 c0       	push   0xc000f2af
c000f9ef:	6a 10                	push   0x10
c000f9f1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f9f4:	ff d0                	call   eax
c000f9f6:	83 c4 10             	add    esp,0x10
c000f9f9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f9fc:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9fe:	83 c0 24             	add    eax,0x24
c000fa01:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa03:	6a 00                	push   0x0
c000fa05:	68 af f2 00 c0       	push   0xc000f2af
c000fa0a:	6a 11                	push   0x11
c000fa0c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fa0f:	ff d0                	call   eax
c000fa11:	83 c4 10             	add    esp,0x10
c000fa14:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fa17:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa19:	83 c0 24             	add    eax,0x24
c000fa1c:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa1e:	6a 00                	push   0x0
c000fa20:	68 af f2 00 c0       	push   0xc000f2af
c000fa25:	6a 12                	push   0x12
c000fa27:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fa2a:	ff d0                	call   eax
c000fa2c:	83 c4 10             	add    esp,0x10
c000fa2f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fa32:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa34:	83 c0 24             	add    eax,0x24
c000fa37:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa39:	6a 00                	push   0x0
c000fa3b:	68 af f2 00 c0       	push   0xc000f2af
c000fa40:	6a 13                	push   0x13
c000fa42:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fa45:	ff d0                	call   eax
c000fa47:	83 c4 10             	add    esp,0x10
c000fa4a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fa4d:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa4f:	83 c0 24             	add    eax,0x24
c000fa52:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa54:	6a 00                	push   0x0
c000fa56:	68 af f2 00 c0       	push   0xc000f2af
c000fa5b:	6a 14                	push   0x14
c000fa5d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fa60:	ff d0                	call   eax
c000fa62:	83 c4 10             	add    esp,0x10
c000fa65:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fa68:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa6a:	83 c0 24             	add    eax,0x24
c000fa6d:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa6f:	6a 00                	push   0x0
c000fa71:	68 af f2 00 c0       	push   0xc000f2af
c000fa76:	6a 1e                	push   0x1e
c000fa78:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fa7b:	ff d0                	call   eax
c000fa7d:	83 c4 10             	add    esp,0x10
c000fa80:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fa83:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa85:	83 c0 24             	add    eax,0x24
c000fa88:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa8a:	6a 00                	push   0x0
c000fa8c:	68 c7 69 01 c0       	push   0xc00169c7
c000fa91:	6a 60                	push   0x60
c000fa93:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fa96:	ff d0                	call   eax
c000fa98:	83 c4 10             	add    esp,0x10
c000fa9b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fa9e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000faa1:	c9                   	leave  
c000faa2:	c3                   	ret    
c000faa3:	90                   	nop

c000faa4 <InterruptController::convertLegacyIRQNumber(int)>:
c000faa4:	55                   	push   ebp
c000faa5:	89 e5                	mov    ebp,esp
c000faa7:	83 ec 08             	sub    esp,0x8
c000faaa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000faad:	83 ec 0c             	sub    esp,0xc
c000fab0:	50                   	push   eax
c000fab1:	e8 c0 ec ff ff       	call   c000e776 <Device::getName()>
c000fab6:	83 c4 10             	add    esp,0x10
c000fab9:	8a 00                	mov    al,BYTE PTR [eax]
c000fabb:	3c 41                	cmp    al,0x41
c000fabd:	0f 94 c0             	sete   al
c000fac0:	84 c0                	test   al,al
c000fac2:	74 28                	je     c000faec <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000fac4:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c000fac8:	7f 12                	jg     c000fadc <InterruptController::convertLegacyIRQNumber(int)+0x38>
c000faca:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000facd:	05 00 75 02 c0       	add    eax,0xc0027500
c000fad2:	8a 00                	mov    al,BYTE PTR [eax]
c000fad4:	0f b6 c0             	movzx  eax,al
c000fad7:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c000fada:	eb 10                	jmp    c000faec <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000fadc:	83 ec 0c             	sub    esp,0xc
c000fadf:	68 48 4d 02 c0       	push   0xc0024d48
c000fae4:	e8 34 52 00 00       	call   c0014d1d <Krnl::panic(char const*)>
c000fae9:	83 c4 10             	add    esp,0x10
c000faec:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000faef:	c9                   	leave  
c000faf0:	c3                   	ret    
c000faf1:	90                   	nop

c000faf2 <startGUI(void*)>:
c000faf2:	55                   	push   ebp
c000faf3:	89 e5                	mov    ebp,esp
c000faf5:	53                   	push   ebx
c000faf6:	83 ec 04             	sub    esp,0x4
c000faf9:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c000fafe:	48                   	dec    eax
c000faff:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c000fb04:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c000fb09:	85 c0                	test   eax,eax
c000fb0b:	75 01                	jne    c000fb0e <startGUI(void*)+0x1c>
c000fb0d:	fb                   	sti    
c000fb0e:	8b 1d 08 7e 02 c0    	mov    ebx,DWORD PTR ds:0xc0027e08
c000fb14:	83 ec 08             	sub    esp,0x8
c000fb17:	6a 01                	push   0x1
c000fb19:	68 c8 4d 02 c0       	push   0xc0024dc8
c000fb1e:	e8 7f 7e 00 00       	call   c00179a2 <Thr::loadDLL(char const*, bool)>
c000fb23:	83 c4 10             	add    esp,0x10
c000fb26:	83 ec 08             	sub    esp,0x8
c000fb29:	53                   	push   ebx
c000fb2a:	50                   	push   eax
c000fb2b:	e8 a3 80 00 00       	call   c0017bd3 <Thr::executeDLL(unsigned long, void*)>
c000fb30:	83 c4 10             	add    esp,0x10
c000fb33:	8b 1d 08 7e 02 c0    	mov    ebx,DWORD PTR ds:0xc0027e08
c000fb39:	83 ec 08             	sub    esp,0x8
c000fb3c:	6a 01                	push   0x1
c000fb3e:	68 e2 4d 02 c0       	push   0xc0024de2
c000fb43:	e8 5a 7e 00 00       	call   c00179a2 <Thr::loadDLL(char const*, bool)>
c000fb48:	83 c4 10             	add    esp,0x10
c000fb4b:	83 ec 08             	sub    esp,0x8
c000fb4e:	53                   	push   ebx
c000fb4f:	50                   	push   eax
c000fb50:	e8 7e 80 00 00       	call   c0017bd3 <Thr::executeDLL(unsigned long, void*)>
c000fb55:	83 c4 10             	add    esp,0x10
c000fb58:	90                   	nop
c000fb59:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000fb5c:	c9                   	leave  
c000fb5d:	c3                   	ret    

c000fb5e <startGUIVESA(void*)>:
c000fb5e:	55                   	push   ebp
c000fb5f:	89 e5                	mov    ebp,esp
c000fb61:	53                   	push   ebx
c000fb62:	83 ec 04             	sub    esp,0x4
c000fb65:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c000fb6a:	48                   	dec    eax
c000fb6b:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c000fb70:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c000fb75:	85 c0                	test   eax,eax
c000fb77:	75 01                	jne    c000fb7a <startGUIVESA(void*)+0x1c>
c000fb79:	fb                   	sti    
c000fb7a:	8b 1d 08 7e 02 c0    	mov    ebx,DWORD PTR ds:0xc0027e08
c000fb80:	83 ec 08             	sub    esp,0x8
c000fb83:	6a 01                	push   0x1
c000fb85:	68 00 4e 02 c0       	push   0xc0024e00
c000fb8a:	e8 13 7e 00 00       	call   c00179a2 <Thr::loadDLL(char const*, bool)>
c000fb8f:	83 c4 10             	add    esp,0x10
c000fb92:	83 ec 08             	sub    esp,0x8
c000fb95:	53                   	push   ebx
c000fb96:	50                   	push   eax
c000fb97:	e8 37 80 00 00       	call   c0017bd3 <Thr::executeDLL(unsigned long, void*)>
c000fb9c:	83 c4 10             	add    esp,0x10
c000fb9f:	8b 1d 08 7e 02 c0    	mov    ebx,DWORD PTR ds:0xc0027e08
c000fba5:	83 ec 08             	sub    esp,0x8
c000fba8:	6a 01                	push   0x1
c000fbaa:	68 e2 4d 02 c0       	push   0xc0024de2
c000fbaf:	e8 ee 7d 00 00       	call   c00179a2 <Thr::loadDLL(char const*, bool)>
c000fbb4:	83 c4 10             	add    esp,0x10
c000fbb7:	83 ec 08             	sub    esp,0x8
c000fbba:	53                   	push   ebx
c000fbbb:	50                   	push   eax
c000fbbc:	e8 12 80 00 00       	call   c0017bd3 <Thr::executeDLL(unsigned long, void*)>
c000fbc1:	83 c4 10             	add    esp,0x10
c000fbc4:	90                   	nop
c000fbc5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000fbc8:	c9                   	leave  
c000fbc9:	c3                   	ret    

c000fbca <sendKeyToTerminal(unsigned char)>:
c000fbca:	55                   	push   ebp
c000fbcb:	89 e5                	mov    ebp,esp
c000fbcd:	83 ec 28             	sub    esp,0x28
c000fbd0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fbd3:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000fbd6:	a1 84 7e 02 c0       	mov    eax,ds:0xc0027e84
c000fbdb:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000fbdf:	83 ec 08             	sub    esp,0x8
c000fbe2:	52                   	push   edx
c000fbe3:	50                   	push   eax
c000fbe4:	e8 61 b8 ff ff       	call   c000b44a <VgaText::receiveKey(unsigned char)>
c000fbe9:	83 c4 10             	add    esp,0x10
c000fbec:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000fbf0:	0f 85 8f 00 00 00    	jne    c000fc85 <sendKeyToTerminal(unsigned char)+0xbb>
c000fbf6:	fa                   	cli    
c000fbf7:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c000fbfc:	40                   	inc    eax
c000fbfd:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c000fc02:	a1 24 93 02 c0       	mov    eax,ds:0xc0029324
c000fc07:	40                   	inc    eax
c000fc08:	a3 24 93 02 c0       	mov    ds:0xc0029324,eax
c000fc0d:	a1 60 7f 02 c0       	mov    eax,ds:0xc0027f60
c000fc12:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000fc15:	c7 05 60 7f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027f60,0x0
c000fc1f:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000fc23:	74 1f                	je     c000fc44 <sendKeyToTerminal(unsigned char)+0x7a>
c000fc25:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fc28:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000fc2b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000fc2e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000fc31:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000fc34:	83 ec 0c             	sub    esp,0xc
c000fc37:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fc3a:	e8 fd 8b 00 00       	call   c001883c <unblockTask(ThreadControlBlock*)>
c000fc3f:	83 c4 10             	add    esp,0x10
c000fc42:	eb db                	jmp    c000fc1f <sendKeyToTerminal(unsigned char)+0x55>
c000fc44:	a1 24 93 02 c0       	mov    eax,ds:0xc0029324
c000fc49:	48                   	dec    eax
c000fc4a:	a3 24 93 02 c0       	mov    ds:0xc0029324,eax
c000fc4f:	a1 24 93 02 c0       	mov    eax,ds:0xc0029324
c000fc54:	85 c0                	test   eax,eax
c000fc56:	75 18                	jne    c000fc70 <sendKeyToTerminal(unsigned char)+0xa6>
c000fc58:	a1 20 93 02 c0       	mov    eax,ds:0xc0029320
c000fc5d:	85 c0                	test   eax,eax
c000fc5f:	74 0f                	je     c000fc70 <sendKeyToTerminal(unsigned char)+0xa6>
c000fc61:	c7 05 20 93 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029320,0x0
c000fc6b:	e8 10 87 00 00       	call   c0018380 <schedule()>
c000fc70:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c000fc75:	48                   	dec    eax
c000fc76:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c000fc7b:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c000fc80:	85 c0                	test   eax,eax
c000fc82:	75 01                	jne    c000fc85 <sendKeyToTerminal(unsigned char)+0xbb>
c000fc84:	fb                   	sti    
c000fc85:	90                   	nop
c000fc86:	c9                   	leave  
c000fc87:	c3                   	ret    

c000fc88 <sendKeyboardToken(KeyboardToken)>:
c000fc88:	55                   	push   ebp
c000fc89:	89 e5                	mov    ebp,esp
c000fc8b:	83 ec 18             	sub    esp,0x18
c000fc8e:	e8 63 53 00 00       	call   c0014ff6 <Krnl::userIOReceived()>
c000fc93:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000fc96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc99:	0f b7 c0             	movzx  eax,ax
c000fc9c:	83 f2 01             	xor    edx,0x1
c000fc9f:	88 90 80 7f 02 c0    	mov    BYTE PTR [eax-0x3ffd8080],dl
c000fca5:	a1 68 7f 02 c0       	mov    eax,ds:0xc0027f68
c000fcaa:	85 c0                	test   eax,eax
c000fcac:	74 24                	je     c000fcd2 <sendKeyboardToken(KeyboardToken)+0x4a>
c000fcae:	8b 0d 68 7f 02 c0    	mov    ecx,DWORD PTR ds:0xc0027f68
c000fcb4:	83 ec 04             	sub    esp,0x4
c000fcb7:	68 80 7f 02 c0       	push   0xc0027f80
c000fcbc:	83 ec 08             	sub    esp,0x8
c000fcbf:	89 e2                	mov    edx,esp
c000fcc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcc4:	89 02                	mov    DWORD PTR [edx],eax
c000fcc6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000fcc9:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000fccd:	ff d1                	call   ecx
c000fccf:	83 c4 10             	add    esp,0x10
c000fcd2:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000fcd6:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000fcd9:	a0 88 83 02 c0       	mov    al,ds:0xc0028388
c000fcde:	38 c2                	cmp    dl,al
c000fce0:	74 1c                	je     c000fcfe <sendKeyboardToken(KeyboardToken)+0x76>
c000fce2:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000fce5:	a2 88 83 02 c0       	mov    ds:0xc0028388,al
c000fcea:	a0 88 83 02 c0       	mov    al,ds:0xc0028388
c000fcef:	0f b6 c0             	movzx  eax,al
c000fcf2:	83 ec 0c             	sub    esp,0xc
c000fcf5:	50                   	push   eax
c000fcf6:	e8 9b ad ff ff       	call   c000aa96 <setTerminalScrollLock(bool)>
c000fcfb:	83 c4 10             	add    esp,0x10
c000fcfe:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000fd01:	84 c0                	test   al,al
c000fd03:	0f 84 ae 00 00 00    	je     c000fdb7 <sendKeyboardToken(KeyboardToken)+0x12f>
c000fd09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd0c:	66 3d 10 03          	cmp    ax,0x310
c000fd10:	75 06                	jne    c000fd18 <sendKeyboardToken(KeyboardToken)+0x90>
c000fd12:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000fd18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd1b:	66 3d 11 03          	cmp    ax,0x311
c000fd1f:	75 06                	jne    c000fd27 <sendKeyboardToken(KeyboardToken)+0x9f>
c000fd21:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000fd27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd2a:	66 3d 12 03          	cmp    ax,0x312
c000fd2e:	75 06                	jne    c000fd36 <sendKeyboardToken(KeyboardToken)+0xae>
c000fd30:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000fd36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd39:	66 3d 13 03          	cmp    ax,0x313
c000fd3d:	75 06                	jne    c000fd45 <sendKeyboardToken(KeyboardToken)+0xbd>
c000fd3f:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000fd45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd48:	66 3d 14 03          	cmp    ax,0x314
c000fd4c:	75 06                	jne    c000fd54 <sendKeyboardToken(KeyboardToken)+0xcc>
c000fd4e:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000fd54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd57:	66 3d 15 03          	cmp    ax,0x315
c000fd5b:	75 06                	jne    c000fd63 <sendKeyboardToken(KeyboardToken)+0xdb>
c000fd5d:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000fd63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd66:	66 3d 16 03          	cmp    ax,0x316
c000fd6a:	75 06                	jne    c000fd72 <sendKeyboardToken(KeyboardToken)+0xea>
c000fd6c:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000fd72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd75:	66 3d 17 03          	cmp    ax,0x317
c000fd79:	75 06                	jne    c000fd81 <sendKeyboardToken(KeyboardToken)+0xf9>
c000fd7b:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000fd81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd84:	66 3d 18 03          	cmp    ax,0x318
c000fd88:	75 06                	jne    c000fd90 <sendKeyboardToken(KeyboardToken)+0x108>
c000fd8a:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000fd90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd93:	66 3d 19 03          	cmp    ax,0x319
c000fd97:	75 06                	jne    c000fd9f <sendKeyboardToken(KeyboardToken)+0x117>
c000fd99:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000fd9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fda2:	66 3d 1a 03          	cmp    ax,0x31a
c000fda6:	0f 85 c9 00 00 00    	jne    c000fe75 <sendKeyboardToken(KeyboardToken)+0x1ed>
c000fdac:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000fdb2:	e9 be 00 00 00       	jmp    c000fe75 <sendKeyboardToken(KeyboardToken)+0x1ed>
c000fdb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fdba:	66 3d 10 03          	cmp    ax,0x310
c000fdbe:	75 0a                	jne    c000fdca <sendKeyboardToken(KeyboardToken)+0x142>
c000fdc0:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000fdc6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fdca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fdcd:	66 3d 11 03          	cmp    ax,0x311
c000fdd1:	75 0a                	jne    c000fddd <sendKeyboardToken(KeyboardToken)+0x155>
c000fdd3:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000fdd9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fddd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fde0:	66 3d 12 03          	cmp    ax,0x312
c000fde4:	75 0a                	jne    c000fdf0 <sendKeyboardToken(KeyboardToken)+0x168>
c000fde6:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000fdec:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fdf0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fdf3:	66 3d 13 03          	cmp    ax,0x313
c000fdf7:	75 0a                	jne    c000fe03 <sendKeyboardToken(KeyboardToken)+0x17b>
c000fdf9:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000fdff:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fe03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe06:	66 3d 14 03          	cmp    ax,0x314
c000fe0a:	75 0a                	jne    c000fe16 <sendKeyboardToken(KeyboardToken)+0x18e>
c000fe0c:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000fe12:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fe16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe19:	66 3d 15 03          	cmp    ax,0x315
c000fe1d:	75 0a                	jne    c000fe29 <sendKeyboardToken(KeyboardToken)+0x1a1>
c000fe1f:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000fe25:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fe29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe2c:	66 3d 16 03          	cmp    ax,0x316
c000fe30:	75 0a                	jne    c000fe3c <sendKeyboardToken(KeyboardToken)+0x1b4>
c000fe32:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000fe38:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fe3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe3f:	66 3d 17 03          	cmp    ax,0x317
c000fe43:	75 0a                	jne    c000fe4f <sendKeyboardToken(KeyboardToken)+0x1c7>
c000fe45:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000fe4b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fe4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe52:	66 3d 18 03          	cmp    ax,0x318
c000fe56:	75 0a                	jne    c000fe62 <sendKeyboardToken(KeyboardToken)+0x1da>
c000fe58:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000fe5e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fe62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe65:	66 3d 19 03          	cmp    ax,0x319
c000fe69:	75 0a                	jne    c000fe75 <sendKeyboardToken(KeyboardToken)+0x1ed>
c000fe6b:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000fe71:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fe75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe78:	66 3d 00 02          	cmp    ax,0x200
c000fe7c:	75 2c                	jne    c000feaa <sendKeyboardToken(KeyboardToken)+0x222>
c000fe7e:	a0 80 83 02 c0       	mov    al,ds:0xc0028380
c000fe83:	83 f0 01             	xor    eax,0x1
c000fe86:	84 c0                	test   al,al
c000fe88:	74 20                	je     c000feaa <sendKeyboardToken(KeyboardToken)+0x222>
c000fe8a:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000fe8f:	6a 01                	push   0x1
c000fe91:	6a 00                	push   0x0
c000fe93:	68 f2 fa 00 c0       	push   0xc000faf2
c000fe98:	50                   	push   eax
c000fe99:	e8 c6 82 00 00       	call   c0018164 <Process::createThread(void (*)(void*), void*, int)>
c000fe9e:	83 c4 10             	add    esp,0x10
c000fea1:	c6 05 80 83 02 c0 01 	mov    BYTE PTR ds:0xc0028380,0x1
c000fea8:	eb 33                	jmp    c000fedd <sendKeyboardToken(KeyboardToken)+0x255>
c000feaa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fead:	66 3d 01 02          	cmp    ax,0x201
c000feb1:	75 2a                	jne    c000fedd <sendKeyboardToken(KeyboardToken)+0x255>
c000feb3:	a0 80 83 02 c0       	mov    al,ds:0xc0028380
c000feb8:	83 f0 01             	xor    eax,0x1
c000febb:	84 c0                	test   al,al
c000febd:	74 1e                	je     c000fedd <sendKeyboardToken(KeyboardToken)+0x255>
c000febf:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000fec4:	6a 01                	push   0x1
c000fec6:	6a 00                	push   0x0
c000fec8:	68 5e fb 00 c0       	push   0xc000fb5e
c000fecd:	50                   	push   eax
c000fece:	e8 91 82 00 00       	call   c0018164 <Process::createThread(void (*)(void*), void*, int)>
c000fed3:	83 c4 10             	add    esp,0x10
c000fed6:	c6 05 80 83 02 c0 01 	mov    BYTE PTR ds:0xc0028380,0x1
c000fedd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fee0:	66 3d 1d 03          	cmp    ax,0x31d
c000fee4:	75 06                	jne    c000feec <sendKeyboardToken(KeyboardToken)+0x264>
c000fee6:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000feec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000feef:	66 3d 1c 03          	cmp    ax,0x31c
c000fef3:	75 06                	jne    c000fefb <sendKeyboardToken(KeyboardToken)+0x273>
c000fef5:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000fefb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fefe:	66 3d 1b 03          	cmp    ax,0x31b
c000ff02:	75 06                	jne    c000ff0a <sendKeyboardToken(KeyboardToken)+0x282>
c000ff04:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000ff0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff0d:	66 3d 1e 03          	cmp    ax,0x31e
c000ff11:	75 06                	jne    c000ff19 <sendKeyboardToken(KeyboardToken)+0x291>
c000ff13:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000ff19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff1c:	66 3d 1f 03          	cmp    ax,0x31f
c000ff20:	75 06                	jne    c000ff28 <sendKeyboardToken(KeyboardToken)+0x2a0>
c000ff22:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000ff28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff2b:	66 3d 1a 03          	cmp    ax,0x31a
c000ff2f:	75 06                	jne    c000ff37 <sendKeyboardToken(KeyboardToken)+0x2af>
c000ff31:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000ff37:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000ff3b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000ff3e:	83 f0 01             	xor    eax,0x1
c000ff41:	84 c0                	test   al,al
c000ff43:	74 77                	je     c000ffbc <sendKeyboardToken(KeyboardToken)+0x334>
c000ff45:	a0 81 80 02 c0       	mov    al,ds:0xc0028081
c000ff4a:	84 c0                	test   al,al
c000ff4c:	74 41                	je     c000ff8f <sendKeyboardToken(KeyboardToken)+0x307>
c000ff4e:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000ff52:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000ff56:	74 2b                	je     c000ff83 <sendKeyboardToken(KeyboardToken)+0x2fb>
c000ff58:	8b 15 84 83 02 c0    	mov    edx,DWORD PTR ds:0xc0028384
c000ff5e:	89 d0                	mov    eax,edx
c000ff60:	c1 e0 02             	shl    eax,0x2
c000ff63:	01 d0                	add    eax,edx
c000ff65:	01 c0                	add    eax,eax
c000ff67:	a3 84 83 02 c0       	mov    ds:0xc0028384,eax
c000ff6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff6f:	0f b7 c0             	movzx  eax,ax
c000ff72:	8d 50 d0             	lea    edx,[eax-0x30]
c000ff75:	a1 84 83 02 c0       	mov    eax,ds:0xc0028384
c000ff7a:	01 d0                	add    eax,edx
c000ff7c:	a3 84 83 02 c0       	mov    ds:0xc0028384,eax
c000ff81:	eb 6d                	jmp    c000fff0 <sendKeyboardToken(KeyboardToken)+0x368>
c000ff83:	c7 05 84 83 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028384,0x0
c000ff8d:	eb 61                	jmp    c000fff0 <sendKeyboardToken(KeyboardToken)+0x368>
c000ff8f:	a1 84 83 02 c0       	mov    eax,ds:0xc0028384
c000ff94:	85 c0                	test   eax,eax
c000ff96:	74 18                	je     c000ffb0 <sendKeyboardToken(KeyboardToken)+0x328>
c000ff98:	a1 84 83 02 c0       	mov    eax,ds:0xc0028384
c000ff9d:	0f b6 c0             	movzx  eax,al
c000ffa0:	83 ec 0c             	sub    esp,0xc
c000ffa3:	50                   	push   eax
c000ffa4:	e8 21 fc ff ff       	call   c000fbca <sendKeyToTerminal(unsigned char)>
c000ffa9:	83 c4 10             	add    esp,0x10
c000ffac:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000ffb0:	c7 05 84 83 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028384,0x0
c000ffba:	eb 34                	jmp    c000fff0 <sendKeyboardToken(KeyboardToken)+0x368>
c000ffbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ffbf:	66 3d 01 01          	cmp    ax,0x101
c000ffc3:	75 2b                	jne    c000fff0 <sendKeyboardToken(KeyboardToken)+0x368>
c000ffc5:	a1 84 83 02 c0       	mov    eax,ds:0xc0028384
c000ffca:	85 c0                	test   eax,eax
c000ffcc:	74 18                	je     c000ffe6 <sendKeyboardToken(KeyboardToken)+0x35e>
c000ffce:	a1 84 83 02 c0       	mov    eax,ds:0xc0028384
c000ffd3:	0f b6 c0             	movzx  eax,al
c000ffd6:	83 ec 0c             	sub    esp,0xc
c000ffd9:	50                   	push   eax
c000ffda:	e8 eb fb ff ff       	call   c000fbca <sendKeyToTerminal(unsigned char)>
c000ffdf:	83 c4 10             	add    esp,0x10
c000ffe2:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000ffe6:	c7 05 84 83 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028384,0x0
c000fff0:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000fff3:	83 f0 01             	xor    eax,0x1
c000fff6:	84 c0                	test   al,al
c000fff8:	74 4c                	je     c0010046 <sendKeyboardToken(KeyboardToken)+0x3be>
c000fffa:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fffd:	83 f0 01             	xor    eax,0x1
c0010000:	84 c0                	test   al,al
c0010002:	74 42                	je     c0010046 <sendKeyboardToken(KeyboardToken)+0x3be>
c0010004:	a0 80 80 02 c0       	mov    al,ds:0xc0028080
c0010009:	83 f0 01             	xor    eax,0x1
c001000c:	84 c0                	test   al,al
c001000e:	74 36                	je     c0010046 <sendKeyboardToken(KeyboardToken)+0x3be>
c0010010:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010013:	66 83 f8 1f          	cmp    ax,0x1f
c0010017:	76 09                	jbe    c0010022 <sendKeyboardToken(KeyboardToken)+0x39a>
c0010019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001001c:	66 83 f8 7e          	cmp    ax,0x7e
c0010020:	76 12                	jbe    c0010034 <sendKeyboardToken(KeyboardToken)+0x3ac>
c0010022:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010025:	66 83 f8 0a          	cmp    ax,0xa
c0010029:	74 09                	je     c0010034 <sendKeyboardToken(KeyboardToken)+0x3ac>
c001002b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001002e:	66 83 f8 08          	cmp    ax,0x8
c0010032:	75 12                	jne    c0010046 <sendKeyboardToken(KeyboardToken)+0x3be>
c0010034:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010037:	0f b6 c0             	movzx  eax,al
c001003a:	83 ec 0c             	sub    esp,0xc
c001003d:	50                   	push   eax
c001003e:	e8 87 fb ff ff       	call   c000fbca <sendKeyToTerminal(unsigned char)>
c0010043:	83 c4 10             	add    esp,0x10
c0010046:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0010049:	83 f0 01             	xor    eax,0x1
c001004c:	84 c0                	test   al,al
c001004e:	74 4f                	je     c001009f <sendKeyboardToken(KeyboardToken)+0x417>
c0010050:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0010053:	83 f0 01             	xor    eax,0x1
c0010056:	84 c0                	test   al,al
c0010058:	74 45                	je     c001009f <sendKeyboardToken(KeyboardToken)+0x417>
c001005a:	a0 80 80 02 c0       	mov    al,ds:0xc0028080
c001005f:	84 c0                	test   al,al
c0010061:	74 3c                	je     c001009f <sendKeyboardToken(KeyboardToken)+0x417>
c0010063:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010066:	66 83 f8 3f          	cmp    ax,0x3f
c001006a:	76 33                	jbe    c001009f <sendKeyboardToken(KeyboardToken)+0x417>
c001006c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001006f:	66 83 f8 7f          	cmp    ax,0x7f
c0010073:	77 2a                	ja     c001009f <sendKeyboardToken(KeyboardToken)+0x417>
c0010075:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010078:	88 c2                	mov    dl,al
c001007a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001007d:	66 83 f8 5f          	cmp    ax,0x5f
c0010081:	76 04                	jbe    c0010087 <sendKeyboardToken(KeyboardToken)+0x3ff>
c0010083:	b0 20                	mov    al,0x20
c0010085:	eb 02                	jmp    c0010089 <sendKeyboardToken(KeyboardToken)+0x401>
c0010087:	b0 00                	mov    al,0x0
c0010089:	29 c2                	sub    edx,eax
c001008b:	88 d0                	mov    al,dl
c001008d:	83 e8 40             	sub    eax,0x40
c0010090:	0f b6 c0             	movzx  eax,al
c0010093:	83 ec 0c             	sub    esp,0xc
c0010096:	50                   	push   eax
c0010097:	e8 2e fb ff ff       	call   c000fbca <sendKeyToTerminal(unsigned char)>
c001009c:	83 c4 10             	add    esp,0x10
c001009f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00100a2:	66 3d 00 03          	cmp    ax,0x300
c00100a6:	75 0f                	jne    c00100b7 <sendKeyboardToken(KeyboardToken)+0x42f>
c00100a8:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00100ab:	83 f0 01             	xor    eax,0x1
c00100ae:	84 c0                	test   al,al
c00100b0:	74 05                	je     c00100b7 <sendKeyboardToken(KeyboardToken)+0x42f>
c00100b2:	e8 50 ad ff ff       	call   c000ae07 <doTerminalCycle()>
c00100b7:	90                   	nop
c00100b8:	c9                   	leave  
c00100b9:	c3                   	ret    

c00100ba <clearInternalKeybuffer(VgaText*)>:
c00100ba:	55                   	push   ebp
c00100bb:	89 e5                	mov    ebp,esp
c00100bd:	83 ec 08             	sub    esp,0x8
c00100c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00100c3:	05 32 01 00 00       	add    eax,0x132
c00100c8:	83 ec 0c             	sub    esp,0xc
c00100cb:	50                   	push   eax
c00100cc:	e8 c7 05 ff ff       	call   c0000698 <strlen>
c00100d1:	83 c4 10             	add    esp,0x10
c00100d4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00100d7:	81 c2 32 01 00 00    	add    edx,0x132
c00100dd:	83 ec 04             	sub    esp,0x4
c00100e0:	50                   	push   eax
c00100e1:	6a 00                	push   0x0
c00100e3:	52                   	push   edx
c00100e4:	e8 93 05 ff ff       	call   c000067c <memset>
c00100e9:	83 c4 10             	add    esp,0x10
c00100ec:	90                   	nop
c00100ed:	c9                   	leave  
c00100ee:	c3                   	ret    

c00100ef <readKeyboard(VgaText*, char*, unsigned long)>:
c00100ef:	55                   	push   ebp
c00100f0:	89 e5                	mov    ebp,esp
c00100f2:	83 ec 18             	sub    esp,0x18
c00100f5:	a1 68 7f 02 c0       	mov    eax,ds:0xc0027f68
c00100fa:	85 c0                	test   eax,eax
c00100fc:	74 2a                	je     c0010128 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c00100fe:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0010104:	8b 0d 68 7f 02 c0    	mov    ecx,DWORD PTR ds:0xc0027f68
c001010a:	83 ec 04             	sub    esp,0x4
c001010d:	68 80 7f 02 c0       	push   0xc0027f80
c0010112:	83 ec 08             	sub    esp,0x8
c0010115:	89 e2                	mov    edx,esp
c0010117:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001011a:	89 02                	mov    DWORD PTR [edx],eax
c001011c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001011f:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0010123:	ff d1                	call   ecx
c0010125:	83 c4 10             	add    esp,0x10
c0010128:	fb                   	sti    
c0010129:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0010130:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0010134:	0f 84 a1 00 00 00    	je     c00101db <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c001013a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001013d:	8a 80 32 01 00 00    	mov    al,BYTE PTR [eax+0x132]
c0010143:	84 c0                	test   al,al
c0010145:	75 28                	jne    c001016f <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c0010147:	fa                   	cli    
c0010148:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c001014d:	40                   	inc    eax
c001014e:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c0010153:	e8 28 82 00 00       	call   c0018380 <schedule()>
c0010158:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c001015d:	48                   	dec    eax
c001015e:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c0010163:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c0010168:	85 c0                	test   eax,eax
c001016a:	75 ce                	jne    c001013a <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c001016c:	fb                   	sti    
c001016d:	eb cb                	jmp    c001013a <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c001016f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0010172:	8d 50 01             	lea    edx,[eax+0x1]
c0010175:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0010178:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001017b:	8a 92 32 01 00 00    	mov    dl,BYTE PTR [edx+0x132]
c0010181:	88 10                	mov    BYTE PTR [eax],dl
c0010183:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010186:	8a 80 32 01 00 00    	mov    al,BYTE PTR [eax+0x132]
c001018c:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c001018f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010192:	05 32 01 00 00       	add    eax,0x132
c0010197:	83 ec 0c             	sub    esp,0xc
c001019a:	50                   	push   eax
c001019b:	e8 f8 04 ff ff       	call   c0000698 <strlen>
c00101a0:	83 c4 10             	add    esp,0x10
c00101a3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00101a6:	81 c2 32 01 00 00    	add    edx,0x132
c00101ac:	8d 4a 01             	lea    ecx,[edx+0x1]
c00101af:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00101b2:	81 c2 32 01 00 00    	add    edx,0x132
c00101b8:	83 ec 04             	sub    esp,0x4
c00101bb:	50                   	push   eax
c00101bc:	51                   	push   ecx
c00101bd:	52                   	push   edx
c00101be:	e8 f1 03 ff ff       	call   c00005b4 <memmove>
c00101c3:	83 c4 10             	add    esp,0x10
c00101c6:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00101c9:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00101cc:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c00101d0:	0f 85 5a ff ff ff    	jne    c0010130 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c00101d6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00101d9:	eb 03                	jmp    c00101de <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c00101db:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00101de:	c9                   	leave  
c00101df:	c3                   	ret    

c00101e0 <Keyboard::Keyboard(char const*)>:
c00101e0:	83 ec 0c             	sub    esp,0xc
c00101e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101e7:	83 ec 08             	sub    esp,0x8
c00101ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101ee:	50                   	push   eax
c00101ef:	e8 86 e4 ff ff       	call   c000e67a <Device::Device(char const*)>
c00101f4:	83 c4 10             	add    esp,0x10
c00101f7:	ba 24 4e 02 c0       	mov    edx,0xc0024e24
c00101fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010200:	89 10                	mov    DWORD PTR [eax],edx
c0010202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010206:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0010210:	c6 05 64 7f 02 c0 01 	mov    BYTE PTR ds:0xc0027f64,0x1
c0010217:	90                   	nop
c0010218:	83 c4 0c             	add    esp,0xc
c001021b:	c3                   	ret    

c001021c <Keyboard::~Keyboard()>:
c001021c:	83 ec 0c             	sub    esp,0xc
c001021f:	ba 24 4e 02 c0       	mov    edx,0xc0024e24
c0010224:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010228:	89 10                	mov    DWORD PTR [eax],edx
c001022a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001022e:	83 ec 0c             	sub    esp,0xc
c0010231:	50                   	push   eax
c0010232:	e8 0d e1 ff ff       	call   c000e344 <Device::~Device()>
c0010237:	83 c4 10             	add    esp,0x10
c001023a:	90                   	nop
c001023b:	83 c4 0c             	add    esp,0xc
c001023e:	c3                   	ret    
c001023f:	90                   	nop

c0010240 <Keyboard::~Keyboard()>:
c0010240:	83 ec 0c             	sub    esp,0xc
c0010243:	83 ec 0c             	sub    esp,0xc
c0010246:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001024a:	e8 cd ff ff ff       	call   c001021c <Keyboard::~Keyboard()>
c001024f:	83 c4 10             	add    esp,0x10
c0010252:	83 ec 08             	sub    esp,0x8
c0010255:	68 5c 01 00 00       	push   0x15c
c001025a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001025e:	e8 81 cc ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c0010263:	83 c4 10             	add    esp,0x10
c0010266:	83 c4 0c             	add    esp,0xc
c0010269:	c3                   	ret    

c001026a <LogicalDisk::close(int, int, void*)>:
c001026a:	83 c8 ff             	or     eax,0xffffffff
c001026d:	c3                   	ret    

c001026e <LogicalDisk::~LogicalDisk()>:
c001026e:	83 ec 0c             	sub    esp,0xc
c0010271:	ba f4 4e 02 c0       	mov    edx,0xc0024ef4
c0010276:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001027a:	89 10                	mov    DWORD PTR [eax],edx
c001027c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010280:	83 ec 0c             	sub    esp,0xc
c0010283:	50                   	push   eax
c0010284:	e8 bb e0 ff ff       	call   c000e344 <Device::~Device()>
c0010289:	83 c4 10             	add    esp,0x10
c001028c:	90                   	nop
c001028d:	83 c4 0c             	add    esp,0xc
c0010290:	c3                   	ret    
c0010291:	90                   	nop

c0010292 <LogicalDisk::~LogicalDisk()>:
c0010292:	83 ec 0c             	sub    esp,0xc
c0010295:	83 ec 0c             	sub    esp,0xc
c0010298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001029c:	e8 cd ff ff ff       	call   c001026e <LogicalDisk::~LogicalDisk()>
c00102a1:	83 c4 10             	add    esp,0x10
c00102a4:	83 ec 08             	sub    esp,0x8
c00102a7:	68 74 01 00 00       	push   0x174
c00102ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102b0:	e8 2f cc ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c00102b5:	83 c4 10             	add    esp,0x10
c00102b8:	83 c4 0c             	add    esp,0xc
c00102bb:	c3                   	ret    

c00102bc <LogicalDisk::open(int, int, void*)>:
c00102bc:	83 ec 18             	sub    esp,0x18
c00102bf:	68 50 4e 02 c0       	push   0xc0024e50
c00102c4:	e8 54 4a 00 00       	call   c0014d1d <Krnl::panic(char const*)>
c00102c9:	83 c8 ff             	or     eax,0xffffffff
c00102cc:	83 c4 1c             	add    esp,0x1c
c00102cf:	c3                   	ret    

c00102d0 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c00102d0:	53                   	push   ebx
c00102d1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00102d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00102d9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00102dd:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00102e3:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00102e9:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00102ef:	77 10                	ja     c0010301 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00102f1:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00102f7:	89 d3                	mov    ebx,edx
c00102f9:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c00102ff:	72 05                	jb     c0010306 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0010301:	83 c8 ff             	or     eax,0xffffffff
c0010304:	89 c2                	mov    edx,eax
c0010306:	5b                   	pop    ebx
c0010307:	c3                   	ret    

c0010308 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0010308:	56                   	push   esi
c0010309:	83 c8 ff             	or     eax,0xffffffff
c001030c:	53                   	push   ebx
c001030d:	89 c2                	mov    edx,eax
c001030f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010313:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0010317:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001031b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0010321:	77 27                	ja     c001034a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0010323:	89 d8                	mov    eax,ebx
c0010325:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c001032b:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0010331:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010336:	89 c2                	mov    edx,eax
c0010338:	73 10                	jae    c001034a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001033a:	89 c8                	mov    eax,ecx
c001033c:	89 da                	mov    edx,ebx
c001033e:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0010344:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001034a:	5b                   	pop    ebx
c001034b:	5e                   	pop    esi
c001034c:	c3                   	ret    
c001034d:	90                   	nop

c001034e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c001034e:	83 ec 1c             	sub    esp,0x1c
c0010351:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010355:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010359:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001035d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010361:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010365:	89 04 24             	mov    DWORD PTR [esp],eax
c0010368:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001036c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010370:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010374:	83 ec 08             	sub    esp,0x8
c0010377:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001037b:	50                   	push   eax
c001037c:	e8 f9 e2 ff ff       	call   c000e67a <Device::Device(char const*)>
c0010381:	83 c4 10             	add    esp,0x10
c0010384:	ba f4 4e 02 c0       	mov    edx,0xc0024ef4
c0010389:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001038d:	89 10                	mov    DWORD PTR [eax],edx
c001038f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010393:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001039a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001039e:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00103a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00103a9:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c00103b3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00103b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00103bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00103bf:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c00103c5:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00103cb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00103cf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00103d2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00103d6:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00103dc:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00103e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00103e6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00103ea:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00103f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00103f4:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00103fe:	90                   	nop
c00103ff:	83 c4 1c             	add    esp,0x1c
c0010402:	c3                   	ret    
c0010403:	90                   	nop

c0010404 <LogicalDisk::assignDriveLetter()>:
c0010404:	55                   	push   ebp
c0010405:	57                   	push   edi
c0010406:	56                   	push   esi
c0010407:	53                   	push   ebx
c0010408:	83 ec 14             	sub    esp,0x14
c001040b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001040f:	8b 3d a0 83 02 c0    	mov    edi,DWORD PTR ds:0xc00283a0
c0010415:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001041b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001041f:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0010425:	8b 3d a4 83 02 c0    	mov    edi,DWORD PTR ds:0xc00283a4
c001042b:	3c 01                	cmp    al,0x1
c001042d:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0010431:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0010435:	19 c0                	sbb    eax,eax
c0010437:	83 e0 02             	and    eax,0x2
c001043a:	83 c0 41             	add    eax,0x41
c001043d:	0f be e8             	movsx  ebp,al
c0010440:	3c 43                	cmp    al,0x43
c0010442:	75 10                	jne    c0010454 <LogicalDisk::assignDriveLetter()+0x50>
c0010444:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001044b:	75 5d                	jne    c00104aa <LogicalDisk::assignDriveLetter()+0xa6>
c001044d:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0010452:	75 56                	jne    c00104aa <LogicalDisk::assignDriveLetter()+0xa6>
c0010454:	8d 75 bf             	lea    esi,[ebp-0x41]
c0010457:	ba 01 00 00 00       	mov    edx,0x1
c001045c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0010460:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0010464:	d3 e2                	shl    edx,cl
c0010466:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001046a:	89 d7                	mov    edi,edx
c001046c:	89 d6                	mov    esi,edx
c001046e:	c1 ff 1f             	sar    edi,0x1f
c0010471:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0010475:	21 f9                	and    ecx,edi
c0010477:	09 d1                	or     ecx,edx
c0010479:	75 2f                	jne    c00104aa <LogicalDisk::assignDriveLetter()+0xa6>
c001047b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001047f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010483:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0010489:	09 f2                	or     edx,esi
c001048b:	89 15 a0 83 02 c0    	mov    DWORD PTR ds:0xc00283a0,edx
c0010491:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010495:	09 fa                	or     edx,edi
c0010497:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001049b:	89 15 a4 83 02 c0    	mov    DWORD PTR ds:0xc00283a4,edx
c00104a1:	89 1c bd c0 83 02 c0 	mov    DWORD PTR [edi*4-0x3ffd7c40],ebx
c00104a8:	eb 08                	jmp    c00104b2 <LogicalDisk::assignDriveLetter()+0xae>
c00104aa:	45                   	inc    ebp
c00104ab:	40                   	inc    eax
c00104ac:	3c 5b                	cmp    al,0x5b
c00104ae:	75 90                	jne    c0010440 <LogicalDisk::assignDriveLetter()+0x3c>
c00104b0:	31 c0                	xor    eax,eax
c00104b2:	83 c4 14             	add    esp,0x14
c00104b5:	5b                   	pop    ebx
c00104b6:	5e                   	pop    esi
c00104b7:	5f                   	pop    edi
c00104b8:	5d                   	pop    ebp
c00104b9:	c3                   	ret    

c00104ba <LogicalDisk::mount()>:
c00104ba:	56                   	push   esi
c00104bb:	53                   	push   ebx
c00104bc:	83 ec 1c             	sub    esp,0x1c
c00104bf:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00104c3:	8b 1d 38 7f 02 c0    	mov    ebx,DWORD PTR ds:0xc0027f38
c00104c9:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00104d0:	50                   	push   eax
c00104d1:	68 74 4e 02 c0       	push   0xc0024e74
c00104d6:	e8 ea ca ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00104db:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00104e5:	83 c4 10             	add    esp,0x10
c00104e8:	85 db                	test   ebx,ebx
c00104ea:	74 4e                	je     c001053a <LogicalDisk::mount()+0x80>
c00104ec:	83 ec 0c             	sub    esp,0xc
c00104ef:	68 95 4e 02 c0       	push   0xc0024e95
c00104f4:	e8 cc ca ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00104f9:	83 c4 0c             	add    esp,0xc
c00104fc:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0010503:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010505:	83 e8 41             	sub    eax,0x41
c0010508:	50                   	push   eax
c0010509:	56                   	push   esi
c001050a:	53                   	push   ebx
c001050b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001050e:	83 c4 10             	add    esp,0x10
c0010511:	84 c0                	test   al,al
c0010513:	74 20                	je     c0010535 <LogicalDisk::mount()+0x7b>
c0010515:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0010519:	83 ec 0c             	sub    esp,0xc
c001051c:	68 b1 4e 02 c0       	push   0xc0024eb1
c0010521:	e8 9f ca ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0010526:	83 c4 10             	add    esp,0x10
c0010529:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c001052f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0010533:	eb 07                	jmp    c001053c <LogicalDisk::mount()+0x82>
c0010535:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0010538:	eb ae                	jmp    c00104e8 <LogicalDisk::mount()+0x2e>
c001053a:	31 c0                	xor    eax,eax
c001053c:	83 c4 14             	add    esp,0x14
c001053f:	5b                   	pop    ebx
c0010540:	5e                   	pop    esi
c0010541:	c3                   	ret    

c0010542 <LogicalDisk::unmount()>:
c0010542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010546:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0010550:	c3                   	ret    
c0010551:	90                   	nop

c0010552 <LogicalDisk::eject()>:
c0010552:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010556:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001055c:	8b 10                	mov    edx,DWORD PTR [eax]
c001055e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010562:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0010565:	90                   	nop

c0010566 <LogicalDisk::unassignDriveLetter()>:
c0010566:	57                   	push   edi
c0010567:	56                   	push   esi
c0010568:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001056c:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0010573:	84 c9                	test   cl,cl
c0010575:	75 0f                	jne    c0010586 <LogicalDisk::unassignDriveLetter()+0x20>
c0010577:	c7 44 24 0c ca 4e 02 c0 	mov    DWORD PTR [esp+0xc],0xc0024eca
c001057f:	5e                   	pop    esi
c0010580:	5f                   	pop    edi
c0010581:	e9 97 47 00 00       	jmp    c0014d1d <Krnl::panic(char const*)>
c0010586:	83 e9 41             	sub    ecx,0x41
c0010589:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0010590:	b8 01 00 00 00       	mov    eax,0x1
c0010595:	c7 04 8d c0 83 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd7c40],0x0
c00105a0:	d3 e0                	shl    eax,cl
c00105a2:	89 c7                	mov    edi,eax
c00105a4:	f7 d0                	not    eax
c00105a6:	c1 ff 1f             	sar    edi,0x1f
c00105a9:	21 05 a0 83 02 c0    	and    DWORD PTR ds:0xc00283a0,eax
c00105af:	89 fe                	mov    esi,edi
c00105b1:	f7 d6                	not    esi
c00105b3:	21 35 a4 83 02 c0    	and    DWORD PTR ds:0xc00283a4,esi
c00105b9:	5e                   	pop    esi
c00105ba:	5f                   	pop    edi
c00105bb:	c3                   	ret    

c00105bc <LogicalDisk::read(unsigned long long, int, void*)>:
c00105bc:	57                   	push   edi
c00105bd:	56                   	push   esi
c00105be:	53                   	push   ebx
c00105bf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00105c3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00105c7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00105cb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00105cf:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00105d5:	77 41                	ja     c0010618 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00105d7:	99                   	cdq    
c00105d8:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00105de:	01 c8                	add    eax,ecx
c00105e0:	11 da                	adc    edx,ebx
c00105e2:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00105e8:	19 d7                	sbb    edi,edx
c00105ea:	72 33                	jb     c001061f <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00105ec:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00105f2:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00105f8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00105fc:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0010600:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0010606:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001060c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010610:	5b                   	pop    ebx
c0010611:	5e                   	pop    esi
c0010612:	5f                   	pop    edi
c0010613:	e9 f2 0a 00 00       	jmp    c001110a <VCache::read(unsigned long long, int, void*)>
c0010618:	b8 05 00 00 00       	mov    eax,0x5
c001061d:	eb 05                	jmp    c0010624 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c001061f:	b8 07 00 00 00       	mov    eax,0x7
c0010624:	5b                   	pop    ebx
c0010625:	5e                   	pop    esi
c0010626:	5f                   	pop    edi
c0010627:	c3                   	ret    

c0010628 <LogicalDisk::write(unsigned long long, int, void*)>:
c0010628:	57                   	push   edi
c0010629:	56                   	push   esi
c001062a:	53                   	push   ebx
c001062b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001062f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010633:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010637:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001063b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0010641:	77 41                	ja     c0010684 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0010643:	99                   	cdq    
c0010644:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001064a:	01 c8                	add    eax,ecx
c001064c:	11 da                	adc    edx,ebx
c001064e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0010654:	19 d7                	sbb    edi,edx
c0010656:	72 33                	jb     c001068b <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0010658:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001065e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0010664:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010668:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001066c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0010672:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010678:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001067c:	5b                   	pop    ebx
c001067d:	5e                   	pop    esi
c001067e:	5f                   	pop    edi
c001067f:	e9 8c 09 00 00       	jmp    c0011010 <VCache::write(unsigned long long, int, void*)>
c0010684:	b8 05 00 00 00       	mov    eax,0x5
c0010689:	eb 05                	jmp    c0010690 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c001068b:	b8 07 00 00 00       	mov    eax,0x7
c0010690:	5b                   	pop    ebx
c0010691:	5e                   	pop    esi
c0010692:	5f                   	pop    edi
c0010693:	c3                   	ret    

c0010694 <Mouse::Mouse(char const*)>:
c0010694:	83 ec 0c             	sub    esp,0xc
c0010697:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001069b:	83 ec 08             	sub    esp,0x8
c001069e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106a2:	50                   	push   eax
c00106a3:	e8 d2 df ff ff       	call   c000e67a <Device::Device(char const*)>
c00106a8:	83 c4 10             	add    esp,0x10
c00106ab:	ba 20 4f 02 c0       	mov    edx,0xc0024f20
c00106b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106b4:	89 10                	mov    DWORD PTR [eax],edx
c00106b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106ba:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00106c4:	90                   	nop
c00106c5:	83 c4 0c             	add    esp,0xc
c00106c8:	c3                   	ret    
c00106c9:	90                   	nop
c00106ca:	66 90                	xchg   ax,ax

c00106cc <Mouse::~Mouse()>:
c00106cc:	83 ec 0c             	sub    esp,0xc
c00106cf:	ba 20 4f 02 c0       	mov    edx,0xc0024f20
c00106d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106d8:	89 10                	mov    DWORD PTR [eax],edx
c00106da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106de:	83 ec 0c             	sub    esp,0xc
c00106e1:	50                   	push   eax
c00106e2:	e8 5d dc ff ff       	call   c000e344 <Device::~Device()>
c00106e7:	83 c4 10             	add    esp,0x10
c00106ea:	90                   	nop
c00106eb:	83 c4 0c             	add    esp,0xc
c00106ee:	c3                   	ret    
c00106ef:	90                   	nop

c00106f0 <Mouse::~Mouse()>:
c00106f0:	83 ec 0c             	sub    esp,0xc
c00106f3:	83 ec 0c             	sub    esp,0xc
c00106f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106fa:	e8 cd ff ff ff       	call   c00106cc <Mouse::~Mouse()>
c00106ff:	83 c4 10             	add    esp,0x10
c0010702:	83 ec 08             	sub    esp,0x8
c0010705:	68 58 01 00 00       	push   0x158
c001070a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001070e:	e8 d1 c7 ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c0010713:	83 c4 10             	add    esp,0x10
c0010716:	83 c4 0c             	add    esp,0xc
c0010719:	c3                   	ret    

c001071a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c001071a:	55                   	push   ebp
c001071b:	57                   	push   edi
c001071c:	56                   	push   esi
c001071d:	53                   	push   ebx
c001071e:	81 ec 28 01 00 00    	sub    esp,0x128
c0010724:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001072b:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0010732:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0010739:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0010740:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010744:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0010748:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001074f:	e8 22 e0 ff ff       	call   c000e776 <Device::getName()>
c0010754:	5a                   	pop    edx
c0010755:	59                   	pop    ecx
c0010756:	50                   	push   eax
c0010757:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001075b:	55                   	push   ebp
c001075c:	e8 d7 ff fe ff       	call   c0000738 <strcpy>
c0010761:	5b                   	pop    ebx
c0010762:	58                   	pop    eax
c0010763:	68 44 4f 02 c0       	push   0xc0024f44
c0010768:	55                   	push   ebp
c0010769:	e8 0a 01 ff ff       	call   c0000878 <strcat>
c001076e:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0010775:	e8 3d 95 ff ff       	call   c0009cb7 <malloc>
c001077a:	83 c4 0c             	add    esp,0xc
c001077d:	89 c3                	mov    ebx,eax
c001077f:	57                   	push   edi
c0010780:	56                   	push   esi
c0010781:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010785:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010789:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0010790:	55                   	push   ebp
c0010791:	50                   	push   eax
c0010792:	e8 b7 fb ff ff       	call   c001034e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0010797:	83 c4 14             	add    esp,0x14
c001079a:	53                   	push   ebx
c001079b:	e8 64 fc ff ff       	call   c0010404 <LogicalDisk::assignDriveLetter()>
c00107a0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00107a3:	e8 12 fd ff ff       	call   c00104ba <LogicalDisk::mount()>
c00107a8:	58                   	pop    eax
c00107a9:	5a                   	pop    edx
c00107aa:	53                   	push   ebx
c00107ab:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00107b2:	e8 bf dc ff ff       	call   c000e476 <Device::addChild(Device*)>
c00107b7:	81 c4 2c 01 00 00    	add    esp,0x12c
c00107bd:	5b                   	pop    ebx
c00107be:	5e                   	pop    esi
c00107bf:	5f                   	pop    edi
c00107c0:	5d                   	pop    ebp
c00107c1:	c3                   	ret    

c00107c2 <createPartitionsForDisk(PhysicalDisk*)>:
c00107c2:	55                   	push   ebp
c00107c3:	57                   	push   edi
c00107c4:	56                   	push   esi
c00107c5:	53                   	push   ebx
c00107c6:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00107cc:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00107d3:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00107d9:	3d 00 02 00 00       	cmp    eax,0x200
c00107de:	74 27                	je     c0010807 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00107e0:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c00107e6:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c00107ec:	83 ec 10             	sub    esp,0x10
c00107ef:	0f a4 f7 0a          	shld   edi,esi,0xa
c00107f3:	99                   	cdq    
c00107f4:	c1 e6 0a             	shl    esi,0xa
c00107f7:	52                   	push   edx
c00107f8:	89 fd                	mov    ebp,edi
c00107fa:	50                   	push   eax
c00107fb:	55                   	push   ebp
c00107fc:	56                   	push   esi
c00107fd:	e8 5e 1e 01 00       	call   c0022660 <__udivdi3>
c0010802:	e9 b1 00 00 00       	jmp    c00108b8 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0010807:	83 ec 0c             	sub    esp,0xc
c001080a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001080c:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0010810:	56                   	push   esi
c0010811:	6a 01                	push   0x1
c0010813:	6a 00                	push   0x0
c0010815:	6a 00                	push   0x0
c0010817:	53                   	push   ebx
c0010818:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001081b:	83 c4 20             	add    esp,0x20
c001081e:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0010826:	75 0a                	jne    c0010832 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0010828:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0010830:	74 2c                	je     c001085e <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0010832:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010838:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001083e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010844:	83 ec 10             	sub    esp,0x10
c0010847:	0f a4 c2 0a          	shld   edx,eax,0xa
c001084b:	89 f7                	mov    edi,esi
c001084d:	c1 e0 0a             	shl    eax,0xa
c0010850:	c1 ff 1f             	sar    edi,0x1f
c0010853:	57                   	push   edi
c0010854:	56                   	push   esi
c0010855:	52                   	push   edx
c0010856:	50                   	push   eax
c0010857:	e8 04 1e 01 00       	call   c0022660 <__udivdi3>
c001085c:	eb 5a                	jmp    c00108b8 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001085e:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0010865:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c001086c:	83 e1 7f             	and    ecx,0x7f
c001086f:	83 e0 7f             	and    eax,0x7f
c0010872:	01 c1                	add    ecx,eax
c0010874:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c001087b:	83 e0 7f             	and    eax,0x7f
c001087e:	01 c1                	add    ecx,eax
c0010880:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0010887:	83 e0 7f             	and    eax,0x7f
c001088a:	00 c1                	add    cl,al
c001088c:	74 41                	je     c00108cf <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c001088e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010894:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001089a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00108a0:	83 ec 10             	sub    esp,0x10
c00108a3:	0f a4 c2 0a          	shld   edx,eax,0xa
c00108a7:	89 f7                	mov    edi,esi
c00108a9:	c1 e0 0a             	shl    eax,0xa
c00108ac:	c1 ff 1f             	sar    edi,0x1f
c00108af:	57                   	push   edi
c00108b0:	56                   	push   esi
c00108b1:	52                   	push   edx
c00108b2:	50                   	push   eax
c00108b3:	e8 a8 1d 01 00       	call   c0022660 <__udivdi3>
c00108b8:	83 c4 14             	add    esp,0x14
c00108bb:	52                   	push   edx
c00108bc:	50                   	push   eax
c00108bd:	6a 00                	push   0x0
c00108bf:	6a 00                	push   0x0
c00108c1:	53                   	push   ebx
c00108c2:	e8 53 fe ff ff       	call   c001071a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00108c7:	83 c4 20             	add    esp,0x20
c00108ca:	e9 79 01 00 00       	jmp    c0010a48 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c00108cf:	89 f0                	mov    eax,esi
c00108d1:	31 f6                	xor    esi,esi
c00108d3:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c00108da:	75 02                	jne    c00108de <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c00108dc:	89 f1                	mov    ecx,esi
c00108de:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c00108e5:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c00108ec:	c1 e2 08             	shl    edx,0x8
c00108ef:	c1 e7 10             	shl    edi,0x10
c00108f2:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c00108fa:	09 fa                	or     edx,edi
c00108fc:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0010904:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c001090b:	83 c0 10             	add    eax,0x10
c001090e:	09 fa                	or     edx,edi
c0010910:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0010917:	c1 e7 18             	shl    edi,0x18
c001091a:	09 fa                	or     edx,edi
c001091c:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0010923:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0010927:	c1 e7 10             	shl    edi,0x10
c001092a:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0010931:	c1 e2 08             	shl    edx,0x8
c0010934:	09 fa                	or     edx,edi
c0010936:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c001093d:	09 fa                	or     edx,edi
c001093f:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0010946:	c1 e7 18             	shl    edi,0x18
c0010949:	09 fa                	or     edx,edi
c001094b:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c001094f:	46                   	inc    esi
c0010950:	83 fe 04             	cmp    esi,0x4
c0010953:	0f 85 7a ff ff ff    	jne    c00108d3 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0010959:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001095d:	83 f0 01             	xor    eax,0x1
c0010960:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010964:	75 57                	jne    c00109bd <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0010966:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001096a:	83 f0 01             	xor    eax,0x1
c001096d:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0010971:	75 4a                	jne    c00109bd <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0010973:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010977:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001097f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010987:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001098d:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0010993:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010999:	0f a4 c2 0a          	shld   edx,eax,0xa
c001099d:	89 f7                	mov    edi,esi
c001099f:	c1 e0 0a             	shl    eax,0xa
c00109a2:	c1 ff 1f             	sar    edi,0x1f
c00109a5:	57                   	push   edi
c00109a6:	56                   	push   esi
c00109a7:	52                   	push   edx
c00109a8:	50                   	push   eax
c00109a9:	e8 b2 1c 01 00       	call   c0022660 <__udivdi3>
c00109ae:	83 c4 10             	add    esp,0x10
c00109b1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00109b5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00109b9:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00109bd:	84 c9                	test   cl,cl
c00109bf:	74 53                	je     c0010a14 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c00109c1:	0f b6 c9             	movzx  ecx,cl
c00109c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109c8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00109cc:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00109d0:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00109d4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00109d8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00109dc:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c00109e0:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c00109e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00109e8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00109ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00109f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00109f4:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c00109f8:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c00109fc:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0010a00:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0010a04:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010a08:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0010a0c:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0010a10:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0010a14:	31 ed                	xor    ebp,ebp
c0010a16:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0010a1a:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0010a1e:	89 f8                	mov    eax,edi
c0010a20:	09 f0                	or     eax,esi
c0010a22:	74 1e                	je     c0010a42 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0010a24:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0010a28:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0010a2c:	89 d1                	mov    ecx,edx
c0010a2e:	09 c1                	or     ecx,eax
c0010a30:	74 10                	je     c0010a42 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0010a32:	83 ec 0c             	sub    esp,0xc
c0010a35:	57                   	push   edi
c0010a36:	56                   	push   esi
c0010a37:	52                   	push   edx
c0010a38:	50                   	push   eax
c0010a39:	53                   	push   ebx
c0010a3a:	e8 db fc ff ff       	call   c001071a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0010a3f:	83 c4 20             	add    esp,0x20
c0010a42:	45                   	inc    ebp
c0010a43:	83 fd 04             	cmp    ebp,0x4
c0010a46:	75 ce                	jne    c0010a16 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0010a48:	81 c4 5c 02 00 00    	add    esp,0x25c
c0010a4e:	5b                   	pop    ebx
c0010a4f:	5e                   	pop    esi
c0010a50:	5f                   	pop    edi
c0010a51:	5d                   	pop    ebp
c0010a52:	c3                   	ret    
c0010a53:	90                   	nop

c0010a54 <Serial::Serial(char const*)>:
c0010a54:	83 ec 0c             	sub    esp,0xc
c0010a57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a5b:	83 ec 08             	sub    esp,0x8
c0010a5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a62:	50                   	push   eax
c0010a63:	e8 12 dc ff ff       	call   c000e67a <Device::Device(char const*)>
c0010a68:	83 c4 10             	add    esp,0x10
c0010a6b:	ba 58 4f 02 c0       	mov    edx,0xc0024f58
c0010a70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a74:	89 10                	mov    DWORD PTR [eax],edx
c0010a76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a7a:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0010a84:	90                   	nop
c0010a85:	83 c4 0c             	add    esp,0xc
c0010a88:	c3                   	ret    
c0010a89:	90                   	nop
c0010a8a:	66 90                	xchg   ax,ax

c0010a8c <Serial::~Serial()>:
c0010a8c:	83 ec 0c             	sub    esp,0xc
c0010a8f:	ba 58 4f 02 c0       	mov    edx,0xc0024f58
c0010a94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a98:	89 10                	mov    DWORD PTR [eax],edx
c0010a9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a9e:	83 ec 0c             	sub    esp,0xc
c0010aa1:	50                   	push   eax
c0010aa2:	e8 9d d8 ff ff       	call   c000e344 <Device::~Device()>
c0010aa7:	83 c4 10             	add    esp,0x10
c0010aaa:	90                   	nop
c0010aab:	83 c4 0c             	add    esp,0xc
c0010aae:	c3                   	ret    
c0010aaf:	90                   	nop

c0010ab0 <Serial::~Serial()>:
c0010ab0:	83 ec 0c             	sub    esp,0xc
c0010ab3:	83 ec 0c             	sub    esp,0xc
c0010ab6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010aba:	e8 cd ff ff ff       	call   c0010a8c <Serial::~Serial()>
c0010abf:	83 c4 10             	add    esp,0x10
c0010ac2:	83 ec 08             	sub    esp,0x8
c0010ac5:	68 58 01 00 00       	push   0x158
c0010aca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ace:	e8 11 c4 ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c0010ad3:	83 c4 10             	add    esp,0x10
c0010ad6:	83 c4 0c             	add    esp,0xc
c0010ad9:	c3                   	ret    
c0010ada:	66 90                	xchg   ax,ax

c0010adc <Timer::Timer(char const*)>:
c0010adc:	83 ec 0c             	sub    esp,0xc
c0010adf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ae3:	83 ec 08             	sub    esp,0x8
c0010ae6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010aea:	50                   	push   eax
c0010aeb:	e8 8a db ff ff       	call   c000e67a <Device::Device(char const*)>
c0010af0:	83 c4 10             	add    esp,0x10
c0010af3:	ba 9c 4f 02 c0       	mov    edx,0xc0024f9c
c0010af8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010afc:	89 10                	mov    DWORD PTR [eax],edx
c0010afe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b02:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0010b0c:	90                   	nop
c0010b0d:	83 c4 0c             	add    esp,0xc
c0010b10:	c3                   	ret    
c0010b11:	90                   	nop
c0010b12:	66 90                	xchg   ax,ax

c0010b14 <Timer::~Timer()>:
c0010b14:	83 ec 0c             	sub    esp,0xc
c0010b17:	ba 9c 4f 02 c0       	mov    edx,0xc0024f9c
c0010b1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b20:	89 10                	mov    DWORD PTR [eax],edx
c0010b22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b26:	83 ec 0c             	sub    esp,0xc
c0010b29:	50                   	push   eax
c0010b2a:	e8 15 d8 ff ff       	call   c000e344 <Device::~Device()>
c0010b2f:	83 c4 10             	add    esp,0x10
c0010b32:	90                   	nop
c0010b33:	83 c4 0c             	add    esp,0xc
c0010b36:	c3                   	ret    
c0010b37:	90                   	nop

c0010b38 <Timer::~Timer()>:
c0010b38:	83 ec 0c             	sub    esp,0xc
c0010b3b:	83 ec 0c             	sub    esp,0xc
c0010b3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b42:	e8 cd ff ff ff       	call   c0010b14 <Timer::~Timer()>
c0010b47:	83 c4 10             	add    esp,0x10
c0010b4a:	83 ec 08             	sub    esp,0x8
c0010b4d:	68 5c 01 00 00       	push   0x15c
c0010b52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b56:	e8 89 c3 ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c0010b5b:	83 c4 10             	add    esp,0x10
c0010b5e:	83 c4 0c             	add    esp,0xc
c0010b61:	c3                   	ret    

c0010b62 <Timer::read()>:
c0010b62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b66:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010b6c:	c3                   	ret    

c0010b6d <timerHandler(unsigned int)>:
c0010b6d:	56                   	push   esi
c0010b6e:	53                   	push   ebx
c0010b6f:	51                   	push   ecx
c0010b70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b74:	01 05 2c 84 02 c0    	add    DWORD PTR ds:0xc002842c,eax
c0010b7a:	80 3d 0d 7e 02 c0 00 	cmp    BYTE PTR ds:0xc0027e0d,0x0
c0010b81:	0f 84 49 01 00 00    	je     c0010cd0 <timerHandler(unsigned int)+0x163>
c0010b87:	fa                   	cli    
c0010b88:	ff 05 28 93 02 c0    	inc    DWORD PTR ds:0xc0029328
c0010b8e:	83 ec 0c             	sub    esp,0xc
c0010b91:	ff 05 24 93 02 c0    	inc    DWORD PTR ds:0xc0029324
c0010b97:	68 38 93 02 c0       	push   0xc0029338
c0010b9c:	e8 8f 20 01 00       	call   c0022c30 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0010ba1:	83 c4 10             	add    esp,0x10
c0010ba4:	84 c0                	test   al,al
c0010ba6:	0f 85 a0 00 00 00    	jne    c0010c4c <timerHandler(unsigned int)+0xdf>
c0010bac:	83 ec 0c             	sub    esp,0xc
c0010baf:	68 38 93 02 c0       	push   0xc0029338
c0010bb4:	e8 93 20 01 00       	call   c0022c4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010bb9:	83 c4 10             	add    esp,0x10
c0010bbc:	89 c6                	mov    esi,eax
c0010bbe:	66 90                	xchg   ax,ax
c0010bc0:	83 ec 0c             	sub    esp,0xc
c0010bc3:	68 38 93 02 c0       	push   0xc0029338
c0010bc8:	e8 7f 20 01 00       	call   c0022c4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010bcd:	c7 04 24 38 93 02 c0 	mov    DWORD PTR [esp],0xc0029338
c0010bd4:	89 c3                	mov    ebx,eax
c0010bd6:	e8 79 20 01 00       	call   c0022c54 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0010bdb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0010bde:	83 c4 10             	add    esp,0x10
c0010be1:	3b 05 2c 84 02 c0    	cmp    eax,DWORD PTR ds:0xc002842c
c0010be7:	77 23                	ja     c0010c0c <timerHandler(unsigned int)+0x9f>
c0010be9:	83 ec 0c             	sub    esp,0xc
c0010bec:	53                   	push   ebx
c0010bed:	e8 4a 7c 00 00       	call   c001883c <unblockTask(ThreadControlBlock*)>
c0010bf2:	83 c4 10             	add    esp,0x10
c0010bf5:	39 de                	cmp    esi,ebx
c0010bf7:	75 27                	jne    c0010c20 <timerHandler(unsigned int)+0xb3>
c0010bf9:	83 ec 0c             	sub    esp,0xc
c0010bfc:	68 38 93 02 c0       	push   0xc0029338
c0010c01:	e8 46 20 01 00       	call   c0022c4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010c06:	89 c6                	mov    esi,eax
c0010c08:	eb 12                	jmp    c0010c1c <timerHandler(unsigned int)+0xaf>
c0010c0a:	66 90                	xchg   ax,ax
c0010c0c:	52                   	push   edx
c0010c0d:	52                   	push   edx
c0010c0e:	53                   	push   ebx
c0010c0f:	68 38 93 02 c0       	push   0xc0029338
c0010c14:	e8 f3 20 01 00       	call   c0022d0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0010c19:	8d 76 00             	lea    esi,[esi+0x0]
c0010c1c:	83 c4 10             	add    esp,0x10
c0010c1f:	90                   	nop
c0010c20:	83 ec 0c             	sub    esp,0xc
c0010c23:	68 38 93 02 c0       	push   0xc0029338
c0010c28:	e8 03 20 01 00       	call   c0022c30 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0010c2d:	83 c4 10             	add    esp,0x10
c0010c30:	84 c0                	test   al,al
c0010c32:	75 18                	jne    c0010c4c <timerHandler(unsigned int)+0xdf>
c0010c34:	83 ec 0c             	sub    esp,0xc
c0010c37:	68 38 93 02 c0       	push   0xc0029338
c0010c3c:	e8 0b 20 01 00       	call   c0022c4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010c41:	83 c4 10             	add    esp,0x10
c0010c44:	39 f0                	cmp    eax,esi
c0010c46:	0f 85 74 ff ff ff    	jne    c0010bc0 <timerHandler(unsigned int)+0x53>
c0010c4c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010c51:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c0010c55:	74 41                	je     c0010c98 <timerHandler(unsigned int)+0x12b>
c0010c57:	80 3d 0c 7e 02 c0 00 	cmp    BYTE PTR ds:0xc0027e0c,0x0
c0010c5e:	74 38                	je     c0010c98 <timerHandler(unsigned int)+0x12b>
c0010c60:	fa                   	cli    
c0010c61:	ff 05 28 93 02 c0    	inc    DWORD PTR ds:0xc0029328
c0010c67:	a1 2c 84 02 c0       	mov    eax,ds:0xc002842c
c0010c6c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010c72:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c0010c75:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010c7b:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c0010c7e:	72 08                	jb     c0010c88 <timerHandler(unsigned int)+0x11b>
c0010c80:	e8 fb 76 00 00       	call   c0018380 <schedule()>
c0010c85:	8d 76 00             	lea    esi,[esi+0x0]
c0010c88:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c0010c8d:	48                   	dec    eax
c0010c8e:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c0010c93:	75 03                	jne    c0010c98 <timerHandler(unsigned int)+0x12b>
c0010c95:	fb                   	sti    
c0010c96:	66 90                	xchg   ax,ax
c0010c98:	a1 24 93 02 c0       	mov    eax,ds:0xc0029324
c0010c9d:	48                   	dec    eax
c0010c9e:	a3 24 93 02 c0       	mov    ds:0xc0029324,eax
c0010ca3:	75 1b                	jne    c0010cc0 <timerHandler(unsigned int)+0x153>
c0010ca5:	83 3d 20 93 02 c0 00 	cmp    DWORD PTR ds:0xc0029320,0x0
c0010cac:	74 12                	je     c0010cc0 <timerHandler(unsigned int)+0x153>
c0010cae:	c7 05 20 93 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029320,0x0
c0010cb8:	e8 c3 76 00 00       	call   c0018380 <schedule()>
c0010cbd:	8d 76 00             	lea    esi,[esi+0x0]
c0010cc0:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c0010cc5:	48                   	dec    eax
c0010cc6:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c0010ccb:	75 03                	jne    c0010cd0 <timerHandler(unsigned int)+0x163>
c0010ccd:	fb                   	sti    
c0010cce:	66 90                	xchg   ax,ax
c0010cd0:	58                   	pop    eax
c0010cd1:	5b                   	pop    ebx
c0010cd2:	5e                   	pop    esi
c0010cd3:	c3                   	ret    

c0010cd4 <setupTimer(int)>:
c0010cd4:	57                   	push   edi
c0010cd5:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c0010cda:	56                   	push   esi
c0010cdb:	53                   	push   ebx
c0010cdc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010ce0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010ce6:	83 ec 0c             	sub    esp,0xc
c0010ce9:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0010cef:	e8 82 da ff ff       	call   c000e776 <Device::getName()>
c0010cf4:	83 c4 10             	add    esp,0x10
c0010cf7:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010cfa:	0f 85 94 00 00 00    	jne    c0010d94 <setupTimer(int)+0xc0>
c0010d00:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c0010d05:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0010d0c:	0f 84 82 00 00 00    	je     c0010d94 <setupTimer(int)+0xc0>
c0010d12:	83 ec 0c             	sub    esp,0xc
c0010d15:	68 5c 01 00 00       	push   0x15c
c0010d1a:	e8 98 8f ff ff       	call   c0009cb7 <malloc>
c0010d1f:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d22:	89 c3                	mov    ebx,eax
c0010d24:	e8 93 14 01 00       	call   c00221bc <PIT::PIT()>
c0010d29:	59                   	pop    ecx
c0010d2a:	5f                   	pop    edi
c0010d2b:	53                   	push   ebx
c0010d2c:	ff 35 08 7e 02 c0    	push   DWORD PTR ds:0xc0027e08
c0010d32:	e8 3f d7 ff ff       	call   c000e476 <Device::addChild(Device*)>
c0010d37:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010d39:	6a 00                	push   0x0
c0010d3b:	6a 00                	push   0x0
c0010d3d:	56                   	push   esi
c0010d3e:	53                   	push   ebx
c0010d3f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010d42:	83 c4 14             	add    esp,0x14
c0010d45:	68 60 01 00 00       	push   0x160
c0010d4a:	e8 68 8f ff ff       	call   c0009cb7 <malloc>
c0010d4f:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d52:	89 c7                	mov    edi,eax
c0010d54:	e8 17 13 01 00       	call   c0022070 <APICTimer::APICTimer()>
c0010d59:	6a 00                	push   0x0
c0010d5b:	6a 00                	push   0x0
c0010d5d:	56                   	push   esi
c0010d5e:	57                   	push   edi
c0010d5f:	e8 0c 12 01 00       	call   c0021f70 <APICTimer::open(int, int, void*)>
c0010d64:	83 c4 20             	add    esp,0x20
c0010d67:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010d69:	6a 00                	push   0x0
c0010d6b:	6a 00                	push   0x0
c0010d6d:	6a 00                	push   0x0
c0010d6f:	53                   	push   ebx
c0010d70:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010d73:	58                   	pop    eax
c0010d74:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c0010d79:	5a                   	pop    edx
c0010d7a:	57                   	push   edi
c0010d7b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010d81:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0010d87:	e8 ea d6 ff ff       	call   c000e476 <Device::addChild(Device*)>
c0010d8c:	83 c4 10             	add    esp,0x10
c0010d8f:	eb 37                	jmp    c0010dc8 <setupTimer(int)+0xf4>
c0010d91:	8d 76 00             	lea    esi,[esi+0x0]
c0010d94:	83 ec 0c             	sub    esp,0xc
c0010d97:	68 5c 01 00 00       	push   0x15c
c0010d9c:	e8 16 8f ff ff       	call   c0009cb7 <malloc>
c0010da1:	89 04 24             	mov    DWORD PTR [esp],eax
c0010da4:	89 c3                	mov    ebx,eax
c0010da6:	e8 11 14 01 00       	call   c00221bc <PIT::PIT()>
c0010dab:	58                   	pop    eax
c0010dac:	5a                   	pop    edx
c0010dad:	53                   	push   ebx
c0010dae:	ff 35 08 7e 02 c0    	push   DWORD PTR ds:0xc0027e08
c0010db4:	e8 bd d6 ff ff       	call   c000e476 <Device::addChild(Device*)>
c0010db9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010dbb:	6a 00                	push   0x0
c0010dbd:	6a 00                	push   0x0
c0010dbf:	56                   	push   esi
c0010dc0:	53                   	push   ebx
c0010dc1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010dc4:	83 c4 20             	add    esp,0x20
c0010dc7:	90                   	nop
c0010dc8:	89 d8                	mov    eax,ebx
c0010dca:	5b                   	pop    ebx
c0010dcb:	5e                   	pop    esi
c0010dcc:	5f                   	pop    edi
c0010dcd:	c3                   	ret    
c0010dce:	66 90                	xchg   ax,ax

c0010dd0 <VCache::VCache(PhysicalDisk*)>:
c0010dd0:	53                   	push   ebx
c0010dd1:	83 ec 18             	sub    esp,0x18
c0010dd4:	ba cc 4f 02 c0       	mov    edx,0xc0024fcc
c0010dd9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ddd:	89 10                	mov    DWORD PTR [eax],edx
c0010ddf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010de3:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0010dea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010dee:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0010df5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010df9:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0010e00:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0010e07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e0b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0010e12:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0010e19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e1d:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0010e24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e28:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0010e2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e30:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0010e37:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0010e3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e42:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0010e46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e4a:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0010e4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e52:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0010e56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e5a:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0010e61:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0010e69:	83 ec 0c             	sub    esp,0xc
c0010e6c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010e70:	e8 42 8e ff ff       	call   c0009cb7 <malloc>
c0010e75:	83 c4 10             	add    esp,0x10
c0010e78:	89 c3                	mov    ebx,eax
c0010e7a:	83 ec 0c             	sub    esp,0xc
c0010e7d:	53                   	push   ebx
c0010e7e:	e8 cd 72 00 00       	call   c0018150 <Mutex::Mutex()>
c0010e83:	83 c4 10             	add    esp,0x10
c0010e86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e8a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010e8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e91:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010e95:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010e98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e9c:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0010ea3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010ea7:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0010ead:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010eb1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010eb4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010eb8:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0010ebe:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010ec4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010ec8:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0010ecb:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0010ece:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ed2:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0010ed6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010eda:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010ee0:	05 00 01 00 00       	add    eax,0x100
c0010ee5:	c1 e0 04             	shl    eax,0x4
c0010ee8:	83 ec 0c             	sub    esp,0xc
c0010eeb:	50                   	push   eax
c0010eec:	e8 c6 8d ff ff       	call   c0009cb7 <malloc>
c0010ef1:	83 c4 10             	add    esp,0x10
c0010ef4:	89 c2                	mov    edx,eax
c0010ef6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010efa:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010efd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f01:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0010f08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f0c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0010f10:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010f14:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010f1a:	c1 e0 06             	shl    eax,0x6
c0010f1d:	83 ec 0c             	sub    esp,0xc
c0010f20:	50                   	push   eax
c0010f21:	e8 91 8d ff ff       	call   c0009cb7 <malloc>
c0010f26:	83 c4 10             	add    esp,0x10
c0010f29:	89 c2                	mov    edx,eax
c0010f2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f2f:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0010f32:	90                   	nop
c0010f33:	83 c4 18             	add    esp,0x18
c0010f36:	5b                   	pop    ebx
c0010f37:	c3                   	ret    

c0010f38 <VCache::invalidateReadBuffer()>:
c0010f38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f3c:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0010f42:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0010f46:	c3                   	ret    
c0010f47:	90                   	nop

c0010f48 <VCache::writeWriteBuffer()>:
c0010f48:	53                   	push   ebx
c0010f49:	83 ec 08             	sub    esp,0x8
c0010f4c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010f50:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0010f54:	74 1e                	je     c0010f74 <VCache::writeWriteBuffer()+0x2c>
c0010f56:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010f59:	83 ec 0c             	sub    esp,0xc
c0010f5c:	8b 10                	mov    edx,DWORD PTR [eax]
c0010f5e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010f61:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010f64:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0010f67:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0010f6a:	50                   	push   eax
c0010f6b:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0010f6e:	83 c4 20             	add    esp,0x20
c0010f71:	8d 76 00             	lea    esi,[esi+0x0]
c0010f74:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0010f7b:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0010f82:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0010f86:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0010f8d:	83 c4 08             	add    esp,0x8
c0010f90:	5b                   	pop    ebx
c0010f91:	c3                   	ret    
c0010f92:	66 90                	xchg   ax,ax

c0010f94 <VCache::~VCache()>:
c0010f94:	83 ec 0c             	sub    esp,0xc
c0010f97:	ba cc 4f 02 c0       	mov    edx,0xc0024fcc
c0010f9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fa0:	89 10                	mov    DWORD PTR [eax],edx
c0010fa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fa6:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0010fa9:	84 c0                	test   al,al
c0010fab:	74 0f                	je     c0010fbc <VCache::~VCache()+0x28>
c0010fad:	83 ec 0c             	sub    esp,0xc
c0010fb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fb4:	e8 8f ff ff ff       	call   c0010f48 <VCache::writeWriteBuffer()>
c0010fb9:	83 c4 10             	add    esp,0x10
c0010fbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fc0:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0010fc3:	83 ec 0c             	sub    esp,0xc
c0010fc6:	50                   	push   eax
c0010fc7:	e8 fb 8c ff ff       	call   c0009cc7 <free>
c0010fcc:	83 c4 10             	add    esp,0x10
c0010fcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fd3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0010fd6:	83 ec 0c             	sub    esp,0xc
c0010fd9:	50                   	push   eax
c0010fda:	e8 e8 8c ff ff       	call   c0009cc7 <free>
c0010fdf:	83 c4 10             	add    esp,0x10
c0010fe2:	90                   	nop
c0010fe3:	83 c4 0c             	add    esp,0xc
c0010fe6:	c3                   	ret    
c0010fe7:	90                   	nop

c0010fe8 <VCache::~VCache()>:
c0010fe8:	83 ec 0c             	sub    esp,0xc
c0010feb:	83 ec 0c             	sub    esp,0xc
c0010fee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ff2:	e8 9d ff ff ff       	call   c0010f94 <VCache::~VCache()>
c0010ff7:	83 c4 10             	add    esp,0x10
c0010ffa:	83 ec 08             	sub    esp,0x8
c0010ffd:	6a 44                	push   0x44
c0010fff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011003:	e8 dc be ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c0011008:	83 c4 10             	add    esp,0x10
c001100b:	83 c4 0c             	add    esp,0xc
c001100e:	c3                   	ret    
c001100f:	90                   	nop

c0011010 <VCache::write(unsigned long long, int, void*)>:
c0011010:	55                   	push   ebp
c0011011:	31 c0                	xor    eax,eax
c0011013:	57                   	push   edi
c0011014:	56                   	push   esi
c0011015:	53                   	push   ebx
c0011016:	83 ec 0c             	sub    esp,0xc
c0011019:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001101d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0011021:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0011025:	8d 76 00             	lea    esi,[esi+0x0]
c0011028:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c001102c:	7d 1a                	jge    c0011048 <VCache::write(unsigned long long, int, void*)+0x38>
c001102e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0011031:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c0011037:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001103b:	0f af c8             	imul   ecx,eax
c001103e:	01 ca                	add    edx,ecx
c0011040:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0011042:	40                   	inc    eax
c0011043:	eb e3                	jmp    c0011028 <VCache::write(unsigned long long, int, void*)+0x18>
c0011045:	8d 76 00             	lea    esi,[esi+0x0]
c0011048:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001104c:	74 0a                	je     c0011058 <VCache::write(unsigned long long, int, void*)+0x48>
c001104e:	53                   	push   ebx
c001104f:	e8 e4 fe ff ff       	call   c0010f38 <VCache::invalidateReadBuffer()>
c0011054:	58                   	pop    eax
c0011055:	8d 76 00             	lea    esi,[esi+0x0]
c0011058:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001105c:	74 5e                	je     c00110bc <VCache::write(unsigned long long, int, void*)+0xac>
c001105e:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c0011061:	89 e8                	mov    eax,ebp
c0011063:	99                   	cdq    
c0011064:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0011067:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c001106a:	89 c1                	mov    ecx,eax
c001106c:	89 d0                	mov    eax,edx
c001106e:	31 f1                	xor    ecx,esi
c0011070:	31 f8                	xor    eax,edi
c0011072:	09 c1                	or     ecx,eax
c0011074:	75 3a                	jne    c00110b0 <VCache::write(unsigned long long, int, void*)+0xa0>
c0011076:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c001107b:	75 33                	jne    c00110b0 <VCache::write(unsigned long long, int, void*)+0xa0>
c001107d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0011080:	89 ef                	mov    edi,ebp
c0011082:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0011088:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001108c:	0f af f9             	imul   edi,ecx
c001108f:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0011092:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011094:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011097:	40                   	inc    eax
c0011098:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c001109b:	83 f8 40             	cmp    eax,0x40
c001109e:	75 60                	jne    c0011100 <VCache::write(unsigned long long, int, void*)+0xf0>
c00110a0:	83 ec 0c             	sub    esp,0xc
c00110a3:	53                   	push   ebx
c00110a4:	e8 9f fe ff ff       	call   c0010f48 <VCache::writeWriteBuffer()>
c00110a9:	83 c4 10             	add    esp,0x10
c00110ac:	eb 52                	jmp    c0011100 <VCache::write(unsigned long long, int, void*)+0xf0>
c00110ae:	66 90                	xchg   ax,ax
c00110b0:	83 ec 0c             	sub    esp,0xc
c00110b3:	53                   	push   ebx
c00110b4:	e8 8f fe ff ff       	call   c0010f48 <VCache::writeWriteBuffer()>
c00110b9:	83 c4 10             	add    esp,0x10
c00110bc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00110bf:	83 7c 24 2c 3f       	cmp    DWORD PTR [esp+0x2c],0x3f
c00110c4:	7f 22                	jg     c00110e8 <VCache::write(unsigned long long, int, void*)+0xd8>
c00110c6:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00110c9:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c00110cc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00110d0:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c00110d4:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c00110d7:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c00110da:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c00110e0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00110e4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00110e6:	eb 18                	jmp    c0011100 <VCache::write(unsigned long long, int, void*)+0xf0>
c00110e8:	83 ec 0c             	sub    esp,0xc
c00110eb:	8b 10                	mov    edx,DWORD PTR [eax]
c00110ed:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00110f1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00110f5:	57                   	push   edi
c00110f6:	56                   	push   esi
c00110f7:	50                   	push   eax
c00110f8:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00110fb:	83 c4 20             	add    esp,0x20
c00110fe:	66 90                	xchg   ax,ax
c0011100:	83 c4 0c             	add    esp,0xc
c0011103:	31 c0                	xor    eax,eax
c0011105:	5b                   	pop    ebx
c0011106:	5e                   	pop    esi
c0011107:	5f                   	pop    edi
c0011108:	5d                   	pop    ebp
c0011109:	c3                   	ret    

c001110a <VCache::read(unsigned long long, int, void*)>:
c001110a:	55                   	push   ebp
c001110b:	31 c0                	xor    eax,eax
c001110d:	57                   	push   edi
c001110e:	56                   	push   esi
c001110f:	53                   	push   ebx
c0011110:	83 ec 1c             	sub    esp,0x1c
c0011113:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0011117:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001111b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001111f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0011123:	90                   	nop
c0011124:	39 e8                	cmp    eax,ebp
c0011126:	7d 18                	jge    c0011140 <VCache::read(unsigned long long, int, void*)+0x36>
c0011128:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c001112b:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c0011131:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0011135:	0f af c8             	imul   ecx,eax
c0011138:	01 ca                	add    edx,ecx
c001113a:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001113c:	40                   	inc    eax
c001113d:	eb e5                	jmp    c0011124 <VCache::read(unsigned long long, int, void*)+0x1a>
c001113f:	90                   	nop
c0011140:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0011144:	74 0e                	je     c0011154 <VCache::read(unsigned long long, int, void*)+0x4a>
c0011146:	83 ec 0c             	sub    esp,0xc
c0011149:	53                   	push   ebx
c001114a:	e8 f9 fd ff ff       	call   c0010f48 <VCache::writeWriteBuffer()>
c001114f:	83 c4 10             	add    esp,0x10
c0011152:	66 90                	xchg   ax,ax
c0011154:	83 fd 01             	cmp    ebp,0x1
c0011157:	0f 85 87 00 00 00    	jne    c00111e4 <VCache::read(unsigned long long, int, void*)+0xda>
c001115d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0011160:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011164:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c001116b:	75 77                	jne    c00111e4 <VCache::read(unsigned long long, int, void*)+0xda>
c001116d:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c0011170:	89 e9                	mov    ecx,ebp
c0011172:	f7 d9                	neg    ecx
c0011174:	89 c8                	mov    eax,ecx
c0011176:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001117a:	c1 f8 1f             	sar    eax,0x1f
c001117d:	21 f1                	and    ecx,esi
c001117f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011183:	89 c8                	mov    eax,ecx
c0011185:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011189:	21 f9                	and    ecx,edi
c001118b:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001118f:	89 ca                	mov    edx,ecx
c0011191:	74 0d                	je     c00111a0 <VCache::read(unsigned long long, int, void*)+0x96>
c0011193:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0011196:	75 08                	jne    c00111a0 <VCache::read(unsigned long long, int, void*)+0x96>
c0011198:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c001119b:	74 27                	je     c00111c4 <VCache::read(unsigned long long, int, void*)+0xba>
c001119d:	8d 76 00             	lea    esi,[esi+0x0]
c00111a0:	83 ec 0c             	sub    esp,0xc
c00111a3:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c00111a7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00111ab:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00111ae:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00111b1:	8b 09                	mov    ecx,DWORD PTR [ecx]
c00111b3:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00111b6:	55                   	push   ebp
c00111b7:	52                   	push   edx
c00111b8:	50                   	push   eax
c00111b9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00111bd:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c00111c0:	83 c4 20             	add    esp,0x20
c00111c3:	90                   	nop
c00111c4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00111c7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00111cb:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c00111d1:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00111d4:	48                   	dec    eax
c00111d5:	21 c6                	and    esi,eax
c00111d7:	0f af f1             	imul   esi,ecx
c00111da:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c00111dd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00111df:	eb 23                	jmp    c0011204 <VCache::read(unsigned long long, int, void*)+0xfa>
c00111e1:	8d 76 00             	lea    esi,[esi+0x0]
c00111e4:	83 ec 0c             	sub    esp,0xc
c00111e7:	53                   	push   ebx
c00111e8:	e8 4b fd ff ff       	call   c0010f38 <VCache::invalidateReadBuffer()>
c00111ed:	5a                   	pop    edx
c00111ee:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00111f1:	8b 10                	mov    edx,DWORD PTR [eax]
c00111f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00111f7:	55                   	push   ebp
c00111f8:	57                   	push   edi
c00111f9:	56                   	push   esi
c00111fa:	50                   	push   eax
c00111fb:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00111fe:	83 c4 20             	add    esp,0x20
c0011201:	8d 76 00             	lea    esi,[esi+0x0]
c0011204:	83 c4 1c             	add    esp,0x1c
c0011207:	31 c0                	xor    eax,eax
c0011209:	5b                   	pop    ebx
c001120a:	5e                   	pop    esi
c001120b:	5f                   	pop    edi
c001120c:	5d                   	pop    ebp
c001120d:	c3                   	ret    

c001120e <Video::putrect(int, int, int, int, unsigned int)>:
c001120e:	55                   	push   ebp
c001120f:	57                   	push   edi
c0011210:	56                   	push   esi
c0011211:	53                   	push   ebx
c0011212:	83 ec 1c             	sub    esp,0x1c
c0011215:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011219:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001121d:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0011221:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0011225:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011229:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001122d:	01 df                	add    edi,ebx
c001122f:	39 fb                	cmp    ebx,edi
c0011231:	7d 1f                	jge    c0011252 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0011233:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011237:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001123b:	7d 12                	jge    c001124f <Video::putrect(int, int, int, int, unsigned int)+0x41>
c001123d:	8b 16                	mov    edx,DWORD PTR [esi]
c001123f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0011243:	53                   	push   ebx
c0011244:	55                   	push   ebp
c0011245:	45                   	inc    ebp
c0011246:	56                   	push   esi
c0011247:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001124a:	83 c4 10             	add    esp,0x10
c001124d:	eb e8                	jmp    c0011237 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c001124f:	43                   	inc    ebx
c0011250:	eb dd                	jmp    c001122f <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0011252:	83 c4 1c             	add    esp,0x1c
c0011255:	5b                   	pop    ebx
c0011256:	5e                   	pop    esi
c0011257:	5f                   	pop    edi
c0011258:	5d                   	pop    ebp
c0011259:	c3                   	ret    

c001125a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c001125a:	55                   	push   ebp
c001125b:	57                   	push   edi
c001125c:	31 ff                	xor    edi,edi
c001125e:	56                   	push   esi
c001125f:	53                   	push   ebx
c0011260:	83 ec 1c             	sub    esp,0x1c
c0011263:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0011267:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001126b:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0011272:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0011277:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001127b:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c001127f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0011283:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0011286:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001128a:	01 f9                	add    ecx,edi
c001128c:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0011290:	7d 2f                	jge    c00112c1 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0011292:	31 f6                	xor    esi,esi
c0011294:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011298:	01 f2                	add    edx,esi
c001129a:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c001129e:	7d 1a                	jge    c00112ba <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c00112a0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00112a3:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c00112a6:	46                   	inc    esi
c00112a7:	51                   	push   ecx
c00112a8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00112ac:	52                   	push   edx
c00112ad:	55                   	push   ebp
c00112ae:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00112b1:	83 c4 10             	add    esp,0x10
c00112b4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00112b8:	eb da                	jmp    c0011294 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c00112ba:	47                   	inc    edi
c00112bb:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00112bf:	eb c5                	jmp    c0011286 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c00112c1:	83 c4 1c             	add    esp,0x1c
c00112c4:	5b                   	pop    ebx
c00112c5:	5e                   	pop    esi
c00112c6:	5f                   	pop    edi
c00112c7:	5d                   	pop    ebp
c00112c8:	c3                   	ret    
c00112c9:	90                   	nop

c00112ca <Video::blit(unsigned int*, int, int, int, int)>:
c00112ca:	55                   	push   ebp
c00112cb:	57                   	push   edi
c00112cc:	56                   	push   esi
c00112cd:	53                   	push   ebx
c00112ce:	83 ec 1c             	sub    esp,0x1c
c00112d1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00112d5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00112d9:	85 c0                	test   eax,eax
c00112db:	79 02                	jns    c00112df <Video::blit(unsigned int*, int, int, int, int)+0x15>
c00112dd:	31 c0                	xor    eax,eax
c00112df:	c1 e0 02             	shl    eax,0x2
c00112e2:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00112e6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00112ea:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00112ee:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00112f2:	39 d8                	cmp    eax,ebx
c00112f4:	7e 49                	jle    c001133f <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00112f6:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00112fc:	7c 41                	jl     c001133f <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00112fe:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0011302:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011306:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001130a:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c001130e:	39 f9                	cmp    ecx,edi
c0011310:	7e 22                	jle    c0011334 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0011312:	83 c5 04             	add    ebp,0x4
c0011315:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001131b:	7c 14                	jl     c0011331 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c001131d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001131f:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0011322:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011326:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001132a:	56                   	push   esi
c001132b:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c001132e:	83 c4 10             	add    esp,0x10
c0011331:	47                   	inc    edi
c0011332:	eb d2                	jmp    c0011306 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0011334:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011338:	43                   	inc    ebx
c0011339:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001133d:	eb ab                	jmp    c00112ea <Video::blit(unsigned int*, int, int, int, int)+0x20>
c001133f:	83 c4 1c             	add    esp,0x1c
c0011342:	5b                   	pop    ebx
c0011343:	5e                   	pop    esi
c0011344:	5f                   	pop    edi
c0011345:	5d                   	pop    ebp
c0011346:	c3                   	ret    
c0011347:	90                   	nop

c0011348 <Video::clearScreen(unsigned int)>:
c0011348:	57                   	push   edi
c0011349:	56                   	push   esi
c001134a:	53                   	push   ebx
c001134b:	31 db                	xor    ebx,ebx
c001134d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011351:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0011357:	7e 1f                	jle    c0011378 <Video::clearScreen(unsigned int)+0x30>
c0011359:	31 ff                	xor    edi,edi
c001135b:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0011361:	7e 12                	jle    c0011375 <Video::clearScreen(unsigned int)+0x2d>
c0011363:	8b 06                	mov    eax,DWORD PTR [esi]
c0011365:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011369:	53                   	push   ebx
c001136a:	57                   	push   edi
c001136b:	47                   	inc    edi
c001136c:	56                   	push   esi
c001136d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011370:	83 c4 10             	add    esp,0x10
c0011373:	eb e6                	jmp    c001135b <Video::clearScreen(unsigned int)+0x13>
c0011375:	43                   	inc    ebx
c0011376:	eb d9                	jmp    c0011351 <Video::clearScreen(unsigned int)+0x9>
c0011378:	5b                   	pop    ebx
c0011379:	5e                   	pop    esi
c001137a:	5f                   	pop    edi
c001137b:	c3                   	ret    

c001137c <Video::putpixel(int, int, unsigned int)>:
c001137c:	c7 44 24 04 d4 4f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024fd4
c0011384:	e9 94 39 00 00       	jmp    c0014d1d <Krnl::panic(char const*)>
c0011389:	90                   	nop

c001138a <Video::Video(char const*)>:
c001138a:	83 ec 0c             	sub    esp,0xc
c001138d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011391:	83 ec 08             	sub    esp,0x8
c0011394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011398:	50                   	push   eax
c0011399:	e8 dc d2 ff ff       	call   c000e67a <Device::Device(char const*)>
c001139e:	83 c4 10             	add    esp,0x10
c00113a1:	ba 44 50 02 c0       	mov    edx,0xc0025044
c00113a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113aa:	89 10                	mov    DWORD PTR [eax],edx
c00113ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113b0:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c00113ba:	90                   	nop
c00113bb:	83 c4 0c             	add    esp,0xc
c00113be:	c3                   	ret    
c00113bf:	90                   	nop

c00113c0 <Video::~Video()>:
c00113c0:	83 ec 0c             	sub    esp,0xc
c00113c3:	ba 44 50 02 c0       	mov    edx,0xc0025044
c00113c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113cc:	89 10                	mov    DWORD PTR [eax],edx
c00113ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113d2:	83 ec 0c             	sub    esp,0xc
c00113d5:	50                   	push   eax
c00113d6:	e8 69 cf ff ff       	call   c000e344 <Device::~Device()>
c00113db:	83 c4 10             	add    esp,0x10
c00113de:	90                   	nop
c00113df:	83 c4 0c             	add    esp,0xc
c00113e2:	c3                   	ret    
c00113e3:	90                   	nop

c00113e4 <Video::~Video()>:
c00113e4:	83 ec 0c             	sub    esp,0xc
c00113e7:	83 ec 0c             	sub    esp,0xc
c00113ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113ee:	e8 cd ff ff ff       	call   c00113c0 <Video::~Video()>
c00113f3:	83 c4 10             	add    esp,0x10
c00113f6:	83 ec 08             	sub    esp,0x8
c00113f9:	68 64 01 00 00       	push   0x164
c00113fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011402:	e8 dd ba ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c0011407:	83 c4 10             	add    esp,0x10
c001140a:	83 c4 0c             	add    esp,0xc
c001140d:	c3                   	ret    

c001140e <Video::isMonochrome()>:
c001140e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011412:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0011418:	c3                   	ret    
c0011419:	90                   	nop

c001141a <Video::getWidth()>:
c001141a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001141e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0011424:	c3                   	ret    
c0011425:	90                   	nop

c0011426 <Video::getHeight()>:
c0011426:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001142a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0011430:	c3                   	ret    
c0011431:	90                   	nop

c0011432 <Video::drawCursor(int, int, unsigned char*, int)>:
c0011432:	55                   	push   ebp
c0011433:	57                   	push   edi
c0011434:	56                   	push   esi
c0011435:	53                   	push   ebx
c0011436:	83 ec 2c             	sub    esp,0x2c
c0011439:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001143d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0011441:	83 f8 01             	cmp    eax,0x1
c0011444:	19 c9                	sbb    ecx,ecx
c0011446:	31 db                	xor    ebx,ebx
c0011448:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001144c:	89 cd                	mov    ebp,ecx
c001144e:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0011456:	f7 d5                	not    ebp
c0011458:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c001145e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0011462:	01 d8                	add    eax,ebx
c0011464:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011468:	56                   	push   esi
c0011469:	e8 b8 ff ff ff       	call   c0011426 <Video::getHeight()>
c001146e:	59                   	pop    ecx
c001146f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0011473:	7e 70                	jle    c00114e5 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0011475:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011479:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001147d:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0011480:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011484:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011488:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c001148f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011493:	89 f8                	mov    eax,edi
c0011495:	83 c0 20             	add    eax,0x20
c0011498:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001149c:	56                   	push   esi
c001149d:	e8 78 ff ff ff       	call   c001141a <Video::getWidth()>
c00114a2:	5a                   	pop    edx
c00114a3:	39 c7                	cmp    edi,eax
c00114a5:	7d 34                	jge    c00114db <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00114a7:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00114ac:	74 05                	je     c00114b3 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00114ae:	8b 06                	mov    eax,DWORD PTR [esi]
c00114b0:	55                   	push   ebp
c00114b1:	eb 0d                	jmp    c00114c0 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c00114b3:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c00114b8:	74 12                	je     c00114cc <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c00114ba:	8b 06                	mov    eax,DWORD PTR [esi]
c00114bc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00114c0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00114c4:	57                   	push   edi
c00114c5:	56                   	push   esi
c00114c6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00114c9:	83 c4 10             	add    esp,0x10
c00114cc:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c00114d0:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00114d4:	47                   	inc    edi
c00114d5:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00114d9:	75 c1                	jne    c001149c <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c00114db:	43                   	inc    ebx
c00114dc:	83 fb 20             	cmp    ebx,0x20
c00114df:	0f 85 79 ff ff ff    	jne    c001145e <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00114e5:	83 c4 2c             	add    esp,0x2c
c00114e8:	5b                   	pop    ebx
c00114e9:	5e                   	pop    esi
c00114ea:	5f                   	pop    edi
c00114eb:	5d                   	pop    ebp
c00114ec:	c3                   	ret    
c00114ed:	90                   	nop

c00114ee <Video::tgaParse(unsigned char*, int, int*, int*)>:
c00114ee:	55                   	push   ebp
c00114ef:	57                   	push   edi
c00114f0:	56                   	push   esi
c00114f1:	53                   	push   ebx
c00114f2:	83 ec 28             	sub    esp,0x28
c00114f5:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00114f9:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c00114fd:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c0011501:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0011505:	c1 e6 08             	shl    esi,0x8
c0011508:	01 c6                	add    esi,eax
c001150a:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c001150e:	c1 e0 08             	shl    eax,0x8
c0011511:	01 d0                	add    eax,edx
c0011513:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011517:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001151b:	0f af c6             	imul   eax,esi
c001151e:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0011525:	50                   	push   eax
c0011526:	e8 8c 87 ff ff       	call   c0009cb7 <malloc>
c001152b:	83 c4 10             	add    esp,0x10
c001152e:	89 c7                	mov    edi,eax
c0011530:	85 c0                	test   eax,eax
c0011532:	75 10                	jne    c0011544 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c0011534:	83 ec 0c             	sub    esp,0xc
c0011537:	68 f5 4f 02 c0       	push   0xc0024ff5
c001153c:	e8 dc 37 00 00       	call   c0014d1d <Krnl::panic(char const*)>
c0011541:	83 c4 10             	add    esp,0x10
c0011544:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0011547:	ba 12 00 00 00       	mov    edx,0x12
c001154c:	84 c0                	test   al,al
c001154e:	74 11                	je     c0011561 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c0011550:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0011554:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c0011558:	c1 fa 03             	sar    edx,0x3
c001155b:	0f af d1             	imul   edx,ecx
c001155e:	83 c2 12             	add    edx,0x12
c0011561:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0011565:	74 04                	je     c001156b <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c0011567:	85 f6                	test   esi,esi
c0011569:	75 12                	jne    c001157d <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c001156b:	83 ec 0c             	sub    esp,0xc
c001156e:	68 05 50 02 c0       	push   0xc0025005
c0011573:	e8 4d ba ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0011578:	e9 b8 00 00 00       	jmp    c0011635 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c001157d:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c0011581:	80 f9 02             	cmp    cl,0x2
c0011584:	0f 85 96 00 00 00    	jne    c0011620 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c001158a:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001158f:	75 0e                	jne    c001159f <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0011591:	84 c0                	test   al,al
c0011593:	75 0a                	jne    c001159f <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0011595:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0011598:	83 e8 18             	sub    eax,0x18
c001159b:	a8 f7                	test   al,0xf7
c001159d:	74 0a                	je     c00115a9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c001159f:	83 ec 0c             	sub    esp,0xc
c00115a2:	68 1a 50 02 c0       	push   0xc002501a
c00115a7:	eb 7f                	jmp    c0011628 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c00115a9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00115b1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00115b9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00115bd:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00115c5:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c00115c9:	75 0c                	jne    c00115d7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c00115cb:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c00115d0:	c1 e0 18             	shl    eax,0x18
c00115d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00115d7:	45                   	inc    ebp
c00115d8:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c00115dd:	c1 e1 10             	shl    ecx,0x10
c00115e0:	89 c8                	mov    eax,ecx
c00115e2:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c00115e7:	c1 e1 08             	shl    ecx,0x8
c00115ea:	09 c1                	or     ecx,eax
c00115ec:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c00115f0:	09 c1                	or     ecx,eax
c00115f2:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c00115f6:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c00115fa:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c00115fe:	c1 f8 03             	sar    eax,0x3
c0011601:	01 c2                	add    edx,eax
c0011603:	89 e8                	mov    eax,ebp
c0011605:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0011609:	39 c6                	cmp    esi,eax
c001160b:	7f b0                	jg     c00115bd <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c001160d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0011611:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011615:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0011618:	7e 22                	jle    c001163c <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c001161a:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c001161e:	eb 99                	jmp    c00115b9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0011620:	50                   	push   eax
c0011621:	50                   	push   eax
c0011622:	51                   	push   ecx
c0011623:	68 28 50 02 c0       	push   0xc0025028
c0011628:	e8 98 b9 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001162d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011630:	e8 92 86 ff ff       	call   c0009cc7 <free>
c0011635:	83 c4 10             	add    esp,0x10
c0011638:	31 ff                	xor    edi,edi
c001163a:	eb 0f                	jmp    c001164b <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c001163c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011640:	89 30                	mov    DWORD PTR [eax],esi
c0011642:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011646:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0011649:	89 30                	mov    DWORD PTR [eax],esi
c001164b:	83 c4 1c             	add    esp,0x1c
c001164e:	89 f8                	mov    eax,edi
c0011650:	5b                   	pop    ebx
c0011651:	5e                   	pop    esi
c0011652:	5f                   	pop    edi
c0011653:	5d                   	pop    ebp
c0011654:	c3                   	ret    
c0011655:	90                   	nop

c0011656 <Video::putTGA(int, int, unsigned char*, int)>:
c0011656:	55                   	push   ebp
c0011657:	57                   	push   edi
c0011658:	56                   	push   esi
c0011659:	53                   	push   ebx
c001165a:	83 ec 28             	sub    esp,0x28
c001165d:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0011661:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011665:	50                   	push   eax
c0011666:	8d 44 24 18          	lea    eax,[esp+0x18]
c001166a:	50                   	push   eax
c001166b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001166f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0011673:	56                   	push   esi
c0011674:	e8 75 fe ff ff       	call   c00114ee <Video::tgaParse(unsigned char*, int, int*, int*)>
c0011679:	83 c4 20             	add    esp,0x20
c001167c:	85 c0                	test   eax,eax
c001167e:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011682:	74 35                	je     c00116b9 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0011684:	89 c7                	mov    edi,eax
c0011686:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001168a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001168e:	39 d8                	cmp    eax,ebx
c0011690:	7e 27                	jle    c00116b9 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0011692:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011696:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001169a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001169e:	39 e8                	cmp    eax,ebp
c00116a0:	7e 14                	jle    c00116b6 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c00116a2:	8b 06                	mov    eax,DWORD PTR [esi]
c00116a4:	83 c7 04             	add    edi,0x4
c00116a7:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c00116aa:	53                   	push   ebx
c00116ab:	55                   	push   ebp
c00116ac:	45                   	inc    ebp
c00116ad:	56                   	push   esi
c00116ae:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00116b1:	83 c4 10             	add    esp,0x10
c00116b4:	eb e0                	jmp    c0011696 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c00116b6:	43                   	inc    ebx
c00116b7:	eb cd                	jmp    c0011686 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c00116b9:	83 c4 1c             	add    esp,0x1c
c00116bc:	5b                   	pop    ebx
c00116bd:	5e                   	pop    esi
c00116be:	5f                   	pop    edi
c00116bf:	5d                   	pop    ebp
c00116c0:	c3                   	ret    
c00116c1:	66 90                	xchg   ax,ax
c00116c3:	90                   	nop

c00116c4 <ACPI::close(int, int, void*)>:
c00116c4:	83 ec 1c             	sub    esp,0x1c
c00116c7:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c00116cf:	74 0b                	je     c00116dc <ACPI::close(int, int, void*)+0x18>
c00116d1:	b8 00 00 00 00       	mov    eax,0x0
c00116d6:	e9 99 00 00 00       	jmp    c0011774 <ACPI::close(int, int, void*)+0xb0>
c00116db:	90                   	nop
c00116dc:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00116e1:	75 29                	jne    c001170c <ACPI::close(int, int, void*)+0x48>
c00116e3:	a1 48 84 02 c0       	mov    eax,ds:0xc0028448
c00116e8:	85 c0                	test   eax,eax
c00116ea:	74 08                	je     c00116f4 <ACPI::close(int, int, void*)+0x30>
c00116ec:	a1 48 84 02 c0       	mov    eax,ds:0xc0028448
c00116f1:	ff d0                	call   eax
c00116f3:	90                   	nop
c00116f4:	83 ec 0c             	sub    esp,0xc
c00116f7:	68 84 50 02 c0       	push   0xc0025084
c00116fc:	e8 1c 36 00 00       	call   c0014d1d <Krnl::panic(char const*)>
c0011701:	83 c4 10             	add    esp,0x10
c0011704:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011709:	eb 69                	jmp    c0011774 <ACPI::close(int, int, void*)+0xb0>
c001170b:	90                   	nop
c001170c:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0011711:	75 59                	jne    c001176c <ACPI::close(int, int, void*)+0xa8>
c0011713:	a1 44 84 02 c0       	mov    eax,ds:0xc0028444
c0011718:	85 c0                	test   eax,eax
c001171a:	74 08                	je     c0011724 <ACPI::close(int, int, void*)+0x60>
c001171c:	a1 44 84 02 c0       	mov    eax,ds:0xc0028444
c0011721:	ff d0                	call   eax
c0011723:	90                   	nop
c0011724:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0011729:	8d 76 00             	lea    esi,[esi+0x0]
c001172c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011731:	83 e0 02             	and    eax,0x2
c0011734:	74 1e                	je     c0011754 <ACPI::close(int, int, void*)+0x90>
c0011736:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c001173d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011741:	89 c2                	mov    edx,eax
c0011743:	ec                   	in     al,dx
c0011744:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011748:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001174c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011750:	eb da                	jmp    c001172c <ACPI::close(int, int, void*)+0x68>
c0011752:	66 90                	xchg   ax,ax
c0011754:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c001175b:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0011760:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0011764:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011768:	ee                   	out    dx,al
c0011769:	8d 76 00             	lea    esi,[esi+0x0]
c001176c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011771:	8d 76 00             	lea    esi,[esi+0x0]
c0011774:	83 c4 1c             	add    esp,0x1c
c0011777:	c3                   	ret    

c0011778 <findRSDP()>:
c0011778:	83 ec 1c             	sub    esp,0x1c
c001177b:	83 ec 0c             	sub    esp,0xc
c001177e:	68 a7 51 02 c0       	push   0xc00251a7
c0011783:	e8 89 85 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0011788:	83 c4 10             	add    esp,0x10
c001178b:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c0011790:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011796:	83 e0 04             	and    eax,0x4
c0011799:	84 c0                	test   al,al
c001179b:	75 0b                	jne    c00117a8 <findRSDP()+0x30>
c001179d:	b8 00 00 00 00       	mov    eax,0x0
c00117a2:	e9 a1 00 00 00       	jmp    c0011848 <findRSDP()+0xd0>
c00117a7:	90                   	nop
c00117a8:	a1 38 7e 02 c0       	mov    eax,ds:0xc0027e38
c00117ad:	3d ff 07 00 00       	cmp    eax,0x7ff
c00117b2:	7f 1c                	jg     c00117d0 <findRSDP()+0x58>
c00117b4:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c00117b9:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00117bf:	83 e2 fb             	and    edx,0xfffffffb
c00117c2:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00117c8:	b8 00 00 00 00       	mov    eax,0x0
c00117cd:	eb 79                	jmp    c0011848 <findRSDP()+0xd0>
c00117cf:	90                   	nop
c00117d0:	83 ec 0c             	sub    esp,0xc
c00117d3:	68 b7 51 02 c0       	push   0xc00251b7
c00117d8:	e8 34 85 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c00117dd:	83 c4 10             	add    esp,0x10
c00117e0:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00117e8:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00117f0:	77 3e                	ja     c0011830 <findRSDP()+0xb8>
c00117f2:	83 ec 04             	sub    esp,0x4
c00117f5:	6a 08                	push   0x8
c00117f7:	68 d0 51 02 c0       	push   0xc00251d0
c00117fc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011800:	e8 73 ed fe ff       	call   c0000578 <memcmp>
c0011805:	83 c4 10             	add    esp,0x10
c0011808:	85 c0                	test   eax,eax
c001180a:	0f 94 c0             	sete   al
c001180d:	84 c0                	test   al,al
c001180f:	74 17                	je     c0011828 <findRSDP()+0xb0>
c0011811:	83 ec 0c             	sub    esp,0xc
c0011814:	68 d9 51 02 c0       	push   0xc00251d9
c0011819:	e8 f3 84 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001181e:	83 c4 10             	add    esp,0x10
c0011821:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011825:	eb 21                	jmp    c0011848 <findRSDP()+0xd0>
c0011827:	90                   	nop
c0011828:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001182d:	eb b9                	jmp    c00117e8 <findRSDP()+0x70>
c001182f:	90                   	nop
c0011830:	83 ec 0c             	sub    esp,0xc
c0011833:	68 e7 51 02 c0       	push   0xc00251e7
c0011838:	e8 d4 84 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001183d:	83 c4 10             	add    esp,0x10
c0011840:	b8 00 00 00 00       	mov    eax,0x0
c0011845:	8d 76 00             	lea    esi,[esi+0x0]
c0011848:	83 c4 1c             	add    esp,0x1c
c001184b:	c3                   	ret    

c001184c <loadACPITables(unsigned char*)>:
c001184c:	57                   	push   edi
c001184d:	56                   	push   esi
c001184e:	53                   	push   ebx
c001184f:	83 ec 60             	sub    esp,0x60
c0011852:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c0011857:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001185d:	83 e0 04             	and    eax,0x4
c0011860:	84 c0                	test   al,al
c0011862:	0f 84 3c 02 00 00    	je     c0011aa4 <loadACPITables(unsigned char*)+0x258>
c0011868:	a0 60 86 02 c0       	mov    al,ds:0xc0028660
c001186d:	84 c0                	test   al,al
c001186f:	74 77                	je     c00118e8 <loadACPITables(unsigned char*)+0x9c>
c0011871:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011875:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0011879:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001187d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011880:	83 e8 24             	sub    eax,0x24
c0011883:	c1 e8 03             	shr    eax,0x3
c0011886:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001188a:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0011892:	66 90                	xchg   ax,ax
c0011894:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0011898:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c001189c:	0f 8d b6 00 00 00    	jge    c0011958 <loadACPITables(unsigned char*)+0x10c>
c00118a2:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00118a6:	83 c0 24             	add    eax,0x24
c00118a9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00118ad:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00118b1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00118b5:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00118b9:	c1 e0 03             	shl    eax,0x3
c00118bc:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c00118c0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00118c4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00118c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00118c9:	89 c1                	mov    ecx,eax
c00118cb:	a1 4c 84 02 c0       	mov    eax,ds:0xc002844c
c00118d0:	8d 50 01             	lea    edx,[eax+0x1]
c00118d3:	89 15 4c 84 02 c0    	mov    DWORD PTR ds:0xc002844c,edx
c00118d9:	89 ca                	mov    edx,ecx
c00118db:	89 14 c5 64 84 02 c0 	mov    DWORD PTR [eax*8-0x3ffd7b9c],edx
c00118e2:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c00118e6:	eb ac                	jmp    c0011894 <loadACPITables(unsigned char*)+0x48>
c00118e8:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00118ec:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00118f0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00118f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00118f7:	83 e8 24             	sub    eax,0x24
c00118fa:	c1 e8 02             	shr    eax,0x2
c00118fd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0011901:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0011909:	8d 76 00             	lea    esi,[esi+0x0]
c001190c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0011910:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c0011914:	7d 42                	jge    c0011958 <loadACPITables(unsigned char*)+0x10c>
c0011916:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001191a:	83 c0 24             	add    eax,0x24
c001191d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0011921:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011925:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0011929:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001192d:	c1 e0 02             	shl    eax,0x2
c0011930:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0011934:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011938:	8b 08                	mov    ecx,DWORD PTR [eax]
c001193a:	a1 4c 84 02 c0       	mov    eax,ds:0xc002844c
c001193f:	8d 50 01             	lea    edx,[eax+0x1]
c0011942:	89 15 4c 84 02 c0    	mov    DWORD PTR ds:0xc002844c,edx
c0011948:	89 ca                	mov    edx,ecx
c001194a:	89 14 c5 64 84 02 c0 	mov    DWORD PTR [eax*8-0x3ffd7b9c],edx
c0011951:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c0011955:	eb b5                	jmp    c001190c <loadACPITables(unsigned char*)+0xc0>
c0011957:	90                   	nop
c0011958:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0011960:	a1 4c 84 02 c0       	mov    eax,ds:0xc002844c
c0011965:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0011969:	0f 8d 39 01 00 00    	jge    c0011aa8 <loadACPITables(unsigned char*)+0x25c>
c001196f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011973:	8b 04 c5 64 84 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd7b9c]
c001197a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001197e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011982:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0011986:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001198a:	25 ff 0f 00 00       	and    eax,0xfff
c001198f:	89 c6                	mov    esi,eax
c0011991:	8b 1d 34 7f 02 c0    	mov    ebx,DWORD PTR ds:0xc0027f34
c0011997:	83 ec 0c             	sub    esp,0xc
c001199a:	6a 01                	push   0x1
c001199c:	e8 c8 a2 ff ff       	call   c000bc69 <Virt::allocateKernelVirtualPages(int)>
c00119a1:	83 c4 10             	add    esp,0x10
c00119a4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00119a8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00119ae:	83 ec 0c             	sub    esp,0xc
c00119b1:	6a 01                	push   0x1
c00119b3:	6a 01                	push   0x1
c00119b5:	50                   	push   eax
c00119b6:	52                   	push   edx
c00119b7:	53                   	push   ebx
c00119b8:	e8 0f ac ff ff       	call   c000c5cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00119bd:	83 c4 20             	add    esp,0x20
c00119c0:	09 f0                	or     eax,esi
c00119c2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00119c6:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00119ca:	c1 e0 03             	shl    eax,0x3
c00119cd:	05 60 84 02 c0       	add    eax,0xc0028460
c00119d2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00119d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00119da:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00119de:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c00119e6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00119ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00119ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00119f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00119f6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00119fa:	89 c6                	mov    esi,eax
c00119fc:	89 d7                	mov    edi,edx
c00119fe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011a00:	89 c8                	mov    eax,ecx
c0011a02:	89 fa                	mov    edx,edi
c0011a04:	89 f3                	mov    ebx,esi
c0011a06:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0011a0a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011a0e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011a12:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011a16:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011a19:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011a1d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011a21:	05 00 10 00 00       	add    eax,0x1000
c0011a26:	c1 e8 0c             	shr    eax,0xc
c0011a29:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011a2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011a31:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0011a35:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011a39:	25 ff 0f 00 00       	and    eax,0xfff
c0011a3e:	89 c6                	mov    esi,eax
c0011a40:	8b 1d 34 7f 02 c0    	mov    ebx,DWORD PTR ds:0xc0027f34
c0011a46:	83 ec 0c             	sub    esp,0xc
c0011a49:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011a4d:	e8 17 a2 ff ff       	call   c000bc69 <Virt::allocateKernelVirtualPages(int)>
c0011a52:	83 c4 10             	add    esp,0x10
c0011a55:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011a59:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011a5f:	83 ec 0c             	sub    esp,0xc
c0011a62:	6a 01                	push   0x1
c0011a64:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011a68:	50                   	push   eax
c0011a69:	52                   	push   edx
c0011a6a:	53                   	push   ebx
c0011a6b:	e8 5c ab ff ff       	call   c000c5cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011a70:	83 c4 20             	add    esp,0x20
c0011a73:	09 f0                	or     eax,esi
c0011a75:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011a79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011a7d:	83 ec 0c             	sub    esp,0xc
c0011a80:	50                   	push   eax
c0011a81:	e8 d7 a4 ff ff       	call   c000bf5d <Virt::freeKernelVirtualPages(unsigned long)>
c0011a86:	83 c4 10             	add    esp,0x10
c0011a89:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011a8d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011a91:	89 14 c5 64 84 02 c0 	mov    DWORD PTR [eax*8-0x3ffd7b9c],edx
c0011a98:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0011a9c:	e9 bf fe ff ff       	jmp    c0011960 <loadACPITables(unsigned char*)+0x114>
c0011aa1:	8d 76 00             	lea    esi,[esi+0x0]
c0011aa4:	90                   	nop
c0011aa5:	8d 76 00             	lea    esi,[esi+0x0]
c0011aa8:	83 c4 60             	add    esp,0x60
c0011aab:	5b                   	pop    ebx
c0011aac:	5e                   	pop    esi
c0011aad:	5f                   	pop    edi
c0011aae:	c3                   	ret    
c0011aaf:	90                   	nop

c0011ab0 <findRSDT(unsigned char*)>:
c0011ab0:	57                   	push   edi
c0011ab1:	56                   	push   esi
c0011ab2:	53                   	push   ebx
c0011ab3:	83 ec 50             	sub    esp,0x50
c0011ab6:	83 ec 0c             	sub    esp,0xc
c0011ab9:	68 fb 51 02 c0       	push   0xc00251fb
c0011abe:	e8 4e 82 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0011ac3:	83 c4 10             	add    esp,0x10
c0011ac6:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c0011acb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011ad1:	83 e0 04             	and    eax,0x4
c0011ad4:	84 c0                	test   al,al
c0011ad6:	75 0c                	jne    c0011ae4 <findRSDT(unsigned char*)+0x34>
c0011ad8:	b8 00 00 00 00       	mov    eax,0x0
c0011add:	e9 86 01 00 00       	jmp    c0011c68 <findRSDT(unsigned char*)+0x1b8>
c0011ae2:	66 90                	xchg   ax,ax
c0011ae4:	83 ec 0c             	sub    esp,0xc
c0011ae7:	68 0d 52 02 c0       	push   0xc002520d
c0011aec:	e8 20 82 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0011af1:	83 c4 10             	add    esp,0x10
c0011af4:	89 e0                	mov    eax,esp
c0011af6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0011afa:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0011afe:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0011b02:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c0011b0a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011b0e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011b12:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011b16:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0011b1a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0011b1e:	89 c6                	mov    esi,eax
c0011b20:	89 d7                	mov    edi,edx
c0011b22:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011b24:	89 c8                	mov    eax,ecx
c0011b26:	89 fa                	mov    edx,edi
c0011b28:	89 f3                	mov    ebx,esi
c0011b2a:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0011b2e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0011b32:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011b36:	83 ec 0c             	sub    esp,0xc
c0011b39:	68 1f 52 02 c0       	push   0xc002521f
c0011b3e:	e8 ce 81 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0011b43:	83 c4 10             	add    esp,0x10
c0011b46:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0011b4a:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c0011b4e:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0011b56:	83 ec 0c             	sub    esp,0xc
c0011b59:	68 31 52 02 c0       	push   0xc0025231
c0011b5e:	e8 ae 81 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0011b63:	83 c4 10             	add    esp,0x10
c0011b66:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011b6a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011b6e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011b72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b76:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011b7a:	83 ec 04             	sub    esp,0x4
c0011b7d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011b81:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011b85:	68 a8 50 02 c0       	push   0xc00250a8
c0011b8a:	e8 36 b4 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0011b8f:	83 c4 10             	add    esp,0x10
c0011b92:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011b96:	25 ff 0f 00 00       	and    eax,0xfff
c0011b9b:	89 c6                	mov    esi,eax
c0011b9d:	8b 1d 34 7f 02 c0    	mov    ebx,DWORD PTR ds:0xc0027f34
c0011ba3:	83 ec 0c             	sub    esp,0xc
c0011ba6:	6a 02                	push   0x2
c0011ba8:	e8 bc a0 ff ff       	call   c000bc69 <Virt::allocateKernelVirtualPages(int)>
c0011bad:	83 c4 10             	add    esp,0x10
c0011bb0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0011bb4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011bba:	83 ec 0c             	sub    esp,0xc
c0011bbd:	6a 01                	push   0x1
c0011bbf:	6a 02                	push   0x2
c0011bc1:	50                   	push   eax
c0011bc2:	52                   	push   edx
c0011bc3:	53                   	push   ebx
c0011bc4:	e8 03 aa ff ff       	call   c000c5cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011bc9:	83 c4 20             	add    esp,0x20
c0011bcc:	09 f0                	or     eax,esi
c0011bce:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011bd2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011bd6:	25 ff 0f 00 00       	and    eax,0xfff
c0011bdb:	89 c6                	mov    esi,eax
c0011bdd:	8b 1d 34 7f 02 c0    	mov    ebx,DWORD PTR ds:0xc0027f34
c0011be3:	83 ec 0c             	sub    esp,0xc
c0011be6:	6a 02                	push   0x2
c0011be8:	e8 7c a0 ff ff       	call   c000bc69 <Virt::allocateKernelVirtualPages(int)>
c0011bed:	83 c4 10             	add    esp,0x10
c0011bf0:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0011bf4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011bfa:	83 ec 0c             	sub    esp,0xc
c0011bfd:	6a 01                	push   0x1
c0011bff:	6a 02                	push   0x2
c0011c01:	50                   	push   eax
c0011c02:	52                   	push   edx
c0011c03:	53                   	push   ebx
c0011c04:	e8 c3 a9 ff ff       	call   c000c5cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011c09:	83 c4 20             	add    esp,0x20
c0011c0c:	09 f0                	or     eax,esi
c0011c0e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011c12:	83 ec 04             	sub    esp,0x4
c0011c15:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011c19:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011c1d:	68 c8 50 02 c0       	push   0xc00250c8
c0011c22:	e8 9e b3 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0011c27:	83 c4 10             	add    esp,0x10
c0011c2a:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0011c2f:	75 13                	jne    c0011c44 <findRSDT(unsigned char*)+0x194>
c0011c31:	c6 05 60 86 02 c0 00 	mov    BYTE PTR ds:0xc0028660,0x0
c0011c38:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011c3c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0011c40:	eb 22                	jmp    c0011c64 <findRSDT(unsigned char*)+0x1b4>
c0011c42:	66 90                	xchg   ax,ax
c0011c44:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c0011c49:	75 11                	jne    c0011c5c <findRSDT(unsigned char*)+0x1ac>
c0011c4b:	c6 05 60 86 02 c0 01 	mov    BYTE PTR ds:0xc0028660,0x1
c0011c52:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011c56:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0011c5a:	eb 08                	jmp    c0011c64 <findRSDT(unsigned char*)+0x1b4>
c0011c5c:	b8 00 00 00 00       	mov    eax,0x0
c0011c61:	eb 05                	jmp    c0011c68 <findRSDT(unsigned char*)+0x1b8>
c0011c63:	90                   	nop
c0011c64:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011c68:	83 c4 50             	add    esp,0x50
c0011c6b:	5b                   	pop    ebx
c0011c6c:	5e                   	pop    esi
c0011c6d:	5f                   	pop    edi
c0011c6e:	c3                   	ret    
c0011c6f:	90                   	nop

c0011c70 <findDataTable(unsigned char*, char*)>:
c0011c70:	83 ec 1c             	sub    esp,0x1c
c0011c73:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c0011c78:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011c7e:	83 e0 04             	and    eax,0x4
c0011c81:	84 c0                	test   al,al
c0011c83:	75 07                	jne    c0011c8c <findDataTable(unsigned char*, char*)+0x1c>
c0011c85:	b8 00 00 00 00       	mov    eax,0x0
c0011c8a:	eb 58                	jmp    c0011ce4 <findDataTable(unsigned char*, char*)+0x74>
c0011c8c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011c94:	a1 4c 84 02 c0       	mov    eax,ds:0xc002844c
c0011c99:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0011c9d:	7d 3d                	jge    c0011cdc <findDataTable(unsigned char*, char*)+0x6c>
c0011c9f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ca3:	c1 e0 03             	shl    eax,0x3
c0011ca6:	05 60 84 02 c0       	add    eax,0xc0028460
c0011cab:	83 ec 04             	sub    esp,0x4
c0011cae:	6a 04                	push   0x4
c0011cb0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011cb4:	50                   	push   eax
c0011cb5:	e8 be e8 fe ff       	call   c0000578 <memcmp>
c0011cba:	83 c4 10             	add    esp,0x10
c0011cbd:	85 c0                	test   eax,eax
c0011cbf:	0f 94 c0             	sete   al
c0011cc2:	84 c0                	test   al,al
c0011cc4:	74 0e                	je     c0011cd4 <findDataTable(unsigned char*, char*)+0x64>
c0011cc6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011cca:	8b 04 c5 64 84 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd7b9c]
c0011cd1:	eb 11                	jmp    c0011ce4 <findDataTable(unsigned char*, char*)+0x74>
c0011cd3:	90                   	nop
c0011cd4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0011cd8:	eb ba                	jmp    c0011c94 <findDataTable(unsigned char*, char*)+0x24>
c0011cda:	66 90                	xchg   ax,ax
c0011cdc:	b8 00 00 00 00       	mov    eax,0x0
c0011ce1:	8d 76 00             	lea    esi,[esi+0x0]
c0011ce4:	83 c4 1c             	add    esp,0x1c
c0011ce7:	c3                   	ret    

c0011ce8 <scanMADT()>:
c0011ce8:	53                   	push   ebx
c0011ce9:	83 ec 38             	sub    esp,0x38
c0011cec:	83 ec 0c             	sub    esp,0xc
c0011cef:	68 43 52 02 c0       	push   0xc0025243
c0011cf4:	e8 18 80 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0011cf9:	83 c4 10             	add    esp,0x10
c0011cfc:	a1 20 7e 02 c0       	mov    eax,ds:0xc0027e20
c0011d01:	25 00 04 00 00       	and    eax,0x400
c0011d06:	74 14                	je     c0011d1c <scanMADT()+0x34>
c0011d08:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c0011d0d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011d13:	83 e2 fb             	and    edx,0xfffffffb
c0011d16:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011d1c:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c0011d21:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011d27:	83 e0 04             	and    eax,0x4
c0011d2a:	84 c0                	test   al,al
c0011d2c:	0f 84 82 04 00 00    	je     c00121b4 <scanMADT()+0x4cc>
c0011d32:	83 ec 0c             	sub    esp,0xc
c0011d35:	68 50 52 02 c0       	push   0xc0025250
c0011d3a:	e8 d2 7f ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0011d3f:	83 c4 10             	add    esp,0x10
c0011d42:	e8 31 fa ff ff       	call   c0011778 <findRSDP()>
c0011d47:	a3 6c 86 02 c0       	mov    ds:0xc002866c,eax
c0011d4c:	a1 6c 86 02 c0       	mov    eax,ds:0xc002866c
c0011d51:	85 c0                	test   eax,eax
c0011d53:	75 1b                	jne    c0011d70 <scanMADT()+0x88>
c0011d55:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c0011d5a:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011d60:	83 e2 fb             	and    edx,0xfffffffb
c0011d63:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011d69:	e9 4e 04 00 00       	jmp    c00121bc <scanMADT()+0x4d4>
c0011d6e:	66 90                	xchg   ax,ax
c0011d70:	83 ec 0c             	sub    esp,0xc
c0011d73:	68 62 52 02 c0       	push   0xc0025262
c0011d78:	e8 94 7f ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0011d7d:	83 c4 10             	add    esp,0x10
c0011d80:	a1 6c 86 02 c0       	mov    eax,ds:0xc002866c
c0011d85:	83 ec 0c             	sub    esp,0xc
c0011d88:	50                   	push   eax
c0011d89:	e8 22 fd ff ff       	call   c0011ab0 <findRSDT(unsigned char*)>
c0011d8e:	83 c4 10             	add    esp,0x10
c0011d91:	a3 68 86 02 c0       	mov    ds:0xc0028668,eax
c0011d96:	a1 68 86 02 c0       	mov    eax,ds:0xc0028668
c0011d9b:	85 c0                	test   eax,eax
c0011d9d:	75 19                	jne    c0011db8 <scanMADT()+0xd0>
c0011d9f:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c0011da4:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011daa:	83 e2 fb             	and    edx,0xfffffffb
c0011dad:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011db3:	e9 04 04 00 00       	jmp    c00121bc <scanMADT()+0x4d4>
c0011db8:	83 ec 0c             	sub    esp,0xc
c0011dbb:	68 72 52 02 c0       	push   0xc0025272
c0011dc0:	e8 4c 7f ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0011dc5:	83 c4 10             	add    esp,0x10
c0011dc8:	a1 68 86 02 c0       	mov    eax,ds:0xc0028668
c0011dcd:	83 ec 0c             	sub    esp,0xc
c0011dd0:	50                   	push   eax
c0011dd1:	e8 76 fa ff ff       	call   c001184c <loadACPITables(unsigned char*)>
c0011dd6:	83 c4 10             	add    esp,0x10
c0011dd9:	a1 68 86 02 c0       	mov    eax,ds:0xc0028668
c0011dde:	83 ec 08             	sub    esp,0x8
c0011de1:	68 8a 52 02 c0       	push   0xc002528a
c0011de6:	50                   	push   eax
c0011de7:	e8 84 fe ff ff       	call   c0011c70 <findDataTable(unsigned char*, char*)>
c0011dec:	83 c4 10             	add    esp,0x10
c0011def:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011df3:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0011df8:	75 1a                	jne    c0011e14 <scanMADT()+0x12c>
c0011dfa:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c0011dff:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011e05:	83 e2 fe             	and    edx,0xfffffffe
c0011e08:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011e0e:	e9 a9 03 00 00       	jmp    c00121bc <scanMADT()+0x4d4>
c0011e13:	90                   	nop
c0011e14:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0011e1c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011e20:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011e23:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0011e27:	0f 87 8f 03 00 00    	ja     c00121bc <scanMADT()+0x4d4>
c0011e2d:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0011e35:	0f 87 81 03 00 00    	ja     c00121bc <scanMADT()+0x4d4>
c0011e3b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e3f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011e43:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e47:	8d 50 01             	lea    edx,[eax+0x1]
c0011e4a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011e4e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011e52:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011e56:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0011e5a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e5e:	8d 50 01             	lea    edx,[eax+0x1]
c0011e61:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011e65:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011e69:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011e6d:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0011e71:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0011e76:	0f 86 3c 03 00 00    	jbe    c00121b8 <scanMADT()+0x4d0>
c0011e7c:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0011e81:	75 59                	jne    c0011edc <scanMADT()+0x1f4>
c0011e83:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e87:	8d 50 01             	lea    edx,[eax+0x1]
c0011e8a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011e8e:	8a 15 60 88 02 c0    	mov    dl,BYTE PTR ds:0xc0028860
c0011e94:	0f b6 d2             	movzx  edx,dl
c0011e97:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011e9b:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011e9f:	88 82 a0 88 02 c0    	mov    BYTE PTR [edx-0x3ffd7760],al
c0011ea5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ea9:	8d 50 01             	lea    edx,[eax+0x1]
c0011eac:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011eb0:	8a 15 60 88 02 c0    	mov    dl,BYTE PTR ds:0xc0028860
c0011eb6:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011eb9:	88 0d 60 88 02 c0    	mov    BYTE PTR ds:0xc0028860,cl
c0011ebf:	0f b6 d2             	movzx  edx,dl
c0011ec2:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011ec6:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011eca:	88 82 80 88 02 c0    	mov    BYTE PTR [edx-0x3ffd7780],al
c0011ed0:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011ed5:	e9 c6 02 00 00       	jmp    c00121a0 <scanMADT()+0x4b8>
c0011eda:	66 90                	xchg   ax,ax
c0011edc:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0011ee1:	0f 85 15 01 00 00    	jne    c0011ffc <scanMADT()+0x314>
c0011ee7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011eeb:	8d 50 01             	lea    edx,[eax+0x1]
c0011eee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011ef2:	8a 15 20 87 02 c0    	mov    dl,BYTE PTR ds:0xc0028720
c0011ef8:	0f b6 d2             	movzx  edx,dl
c0011efb:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011eff:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011f03:	88 82 40 87 02 c0    	mov    BYTE PTR [edx-0x3ffd78c0],al
c0011f09:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0011f0d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011f11:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f15:	01 d0                	add    eax,edx
c0011f17:	83 c0 2c             	add    eax,0x2c
c0011f1a:	8a 00                	mov    al,BYTE PTR [eax]
c0011f1c:	0f b6 d0             	movzx  edx,al
c0011f1f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f23:	8d 48 01             	lea    ecx,[eax+0x1]
c0011f26:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011f2a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011f2e:	0f b6 c0             	movzx  eax,al
c0011f31:	c1 e0 08             	shl    eax,0x8
c0011f34:	89 d1                	mov    ecx,edx
c0011f36:	09 c1                	or     ecx,eax
c0011f38:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f3c:	8d 50 02             	lea    edx,[eax+0x2]
c0011f3f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011f43:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011f47:	0f b6 c0             	movzx  eax,al
c0011f4a:	c1 e0 10             	shl    eax,0x10
c0011f4d:	09 c1                	or     ecx,eax
c0011f4f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f53:	8d 50 03             	lea    edx,[eax+0x3]
c0011f56:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011f5a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011f5e:	0f b6 c0             	movzx  eax,al
c0011f61:	c1 e0 18             	shl    eax,0x18
c0011f64:	09 c1                	or     ecx,eax
c0011f66:	89 ca                	mov    edx,ecx
c0011f68:	a0 20 87 02 c0       	mov    al,ds:0xc0028720
c0011f6d:	0f b6 c0             	movzx  eax,al
c0011f70:	89 14 85 60 87 02 c0 	mov    DWORD PTR [eax*4-0x3ffd78a0],edx
c0011f77:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011f7c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011f80:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f84:	01 d0                	add    eax,edx
c0011f86:	83 c0 2c             	add    eax,0x2c
c0011f89:	8a 00                	mov    al,BYTE PTR [eax]
c0011f8b:	0f b6 d0             	movzx  edx,al
c0011f8e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f92:	8d 48 01             	lea    ecx,[eax+0x1]
c0011f95:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011f99:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011f9d:	0f b6 c0             	movzx  eax,al
c0011fa0:	c1 e0 08             	shl    eax,0x8
c0011fa3:	89 d1                	mov    ecx,edx
c0011fa5:	09 c1                	or     ecx,eax
c0011fa7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011fab:	8d 50 02             	lea    edx,[eax+0x2]
c0011fae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011fb2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011fb6:	0f b6 c0             	movzx  eax,al
c0011fb9:	c1 e0 10             	shl    eax,0x10
c0011fbc:	09 c1                	or     ecx,eax
c0011fbe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011fc2:	8d 50 03             	lea    edx,[eax+0x3]
c0011fc5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011fc9:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011fcd:	0f b6 c0             	movzx  eax,al
c0011fd0:	c1 e0 18             	shl    eax,0x18
c0011fd3:	09 c1                	or     ecx,eax
c0011fd5:	89 ca                	mov    edx,ecx
c0011fd7:	a0 20 87 02 c0       	mov    al,ds:0xc0028720
c0011fdc:	0f b6 c0             	movzx  eax,al
c0011fdf:	89 14 85 e0 87 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7820],edx
c0011fe6:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011feb:	a0 20 87 02 c0       	mov    al,ds:0xc0028720
c0011ff0:	40                   	inc    eax
c0011ff1:	a2 20 87 02 c0       	mov    ds:0xc0028720,al
c0011ff6:	e9 a5 01 00 00       	jmp    c00121a0 <scanMADT()+0x4b8>
c0011ffb:	90                   	nop
c0011ffc:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0012001:	0f 85 e9 00 00 00    	jne    c00120f0 <scanMADT()+0x408>
c0012007:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001200b:	8d 50 01             	lea    edx,[eax+0x1]
c001200e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0012012:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012016:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001201a:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c001201e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012022:	8d 50 01             	lea    edx,[eax+0x1]
c0012025:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0012029:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001202d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0012031:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0012035:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012039:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001203d:	01 d0                	add    eax,edx
c001203f:	83 c0 2c             	add    eax,0x2c
c0012042:	8a 00                	mov    al,BYTE PTR [eax]
c0012044:	0f b6 d0             	movzx  edx,al
c0012047:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001204b:	8d 48 01             	lea    ecx,[eax+0x1]
c001204e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012052:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0012056:	0f b6 c0             	movzx  eax,al
c0012059:	c1 e0 08             	shl    eax,0x8
c001205c:	89 d1                	mov    ecx,edx
c001205e:	09 c1                	or     ecx,eax
c0012060:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012064:	8d 50 02             	lea    edx,[eax+0x2]
c0012067:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001206b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001206f:	0f b6 c0             	movzx  eax,al
c0012072:	c1 e0 10             	shl    eax,0x10
c0012075:	09 c1                	or     ecx,eax
c0012077:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001207b:	8d 50 03             	lea    edx,[eax+0x3]
c001207e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012082:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0012086:	0f b6 c0             	movzx  eax,al
c0012089:	c1 e0 18             	shl    eax,0x18
c001208c:	09 c8                	or     eax,ecx
c001208e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012092:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0012097:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001209b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001209f:	01 d0                	add    eax,edx
c00120a1:	83 c0 2c             	add    eax,0x2c
c00120a4:	8a 00                	mov    al,BYTE PTR [eax]
c00120a6:	0f b6 c0             	movzx  eax,al
c00120a9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00120ad:	8d 4a 01             	lea    ecx,[edx+0x1]
c00120b0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00120b4:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c00120b8:	0f b6 d2             	movzx  edx,dl
c00120bb:	c1 e2 08             	shl    edx,0x8
c00120be:	09 d0                	or     eax,edx
c00120c0:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00120c5:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00120ca:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c00120cf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00120d3:	88 90 00 75 02 c0    	mov    BYTE PTR [eax-0x3ffd8b00],dl
c00120d9:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c00120de:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00120e3:	66 89 84 12 00 87 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd7900],ax
c00120eb:	e9 b0 00 00 00       	jmp    c00121a0 <scanMADT()+0x4b8>
c00120f0:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c00120f5:	0f 85 99 00 00 00    	jne    c0012194 <scanMADT()+0x4ac>
c00120fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00120ff:	8d 50 01             	lea    edx,[eax+0x1]
c0012102:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0012106:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001210a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001210e:	0f b6 c0             	movzx  eax,al
c0012111:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012115:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012119:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001211d:	01 d0                	add    eax,edx
c001211f:	83 c0 2c             	add    eax,0x2c
c0012122:	8a 00                	mov    al,BYTE PTR [eax]
c0012124:	0f b6 d0             	movzx  edx,al
c0012127:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001212b:	8d 48 01             	lea    ecx,[eax+0x1]
c001212e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012132:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0012136:	0f b6 c0             	movzx  eax,al
c0012139:	c1 e0 08             	shl    eax,0x8
c001213c:	09 d0                	or     eax,edx
c001213e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012142:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0012147:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001214b:	8d 50 01             	lea    edx,[eax+0x1]
c001214e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0012152:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012156:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001215a:	0f b6 c0             	movzx  eax,al
c001215d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012161:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012165:	c1 e0 08             	shl    eax,0x8
c0012168:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001216c:	89 c1                	mov    ecx,eax
c001216e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012172:	c1 e0 18             	shl    eax,0x18
c0012175:	89 c3                	mov    ebx,eax
c0012177:	a1 70 86 02 c0       	mov    eax,ds:0xc0028670
c001217c:	8d 50 01             	lea    edx,[eax+0x1]
c001217f:	89 15 70 86 02 c0    	mov    DWORD PTR ds:0xc0028670,edx
c0012185:	09 d9                	or     ecx,ebx
c0012187:	89 ca                	mov    edx,ecx
c0012189:	89 14 85 80 86 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7980],edx
c0012190:	eb 0e                	jmp    c00121a0 <scanMADT()+0x4b8>
c0012192:	66 90                	xchg   ax,ax
c0012194:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0012199:	75 05                	jne    c00121a0 <scanMADT()+0x4b8>
c001219b:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c00121a0:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c00121a5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00121a9:	01 d0                	add    eax,edx
c00121ab:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00121af:	e9 68 fc ff ff       	jmp    c0011e1c <scanMADT()+0x134>
c00121b4:	90                   	nop
c00121b5:	eb 05                	jmp    c00121bc <scanMADT()+0x4d4>
c00121b7:	90                   	nop
c00121b8:	90                   	nop
c00121b9:	8d 76 00             	lea    esi,[esi+0x0]
c00121bc:	83 c4 38             	add    esp,0x38
c00121bf:	5b                   	pop    ebx
c00121c0:	c3                   	ret    
c00121c1:	90                   	nop
c00121c2:	66 90                	xchg   ax,ax

c00121c4 <ACPI::ACPI()>:
c00121c4:	83 ec 0c             	sub    esp,0xc
c00121c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00121cb:	83 ec 08             	sub    esp,0x8
c00121ce:	68 8f 52 02 c0       	push   0xc002528f
c00121d3:	50                   	push   eax
c00121d4:	e8 a1 c4 ff ff       	call   c000e67a <Device::Device(char const*)>
c00121d9:	83 c4 10             	add    esp,0x10
c00121dc:	ba 50 54 02 c0       	mov    edx,0xc0025450
c00121e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00121e5:	89 10                	mov    DWORD PTR [eax],edx
c00121e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00121eb:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00121f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00121f6:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0012200:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012204:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c001220e:	83 ec 0c             	sub    esp,0xc
c0012211:	68 94 52 02 c0       	push   0xc0025294
c0012216:	e8 f6 7a ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001221b:	83 c4 10             	add    esp,0x10
c001221e:	e8 c5 fa ff ff       	call   c0011ce8 <scanMADT()>
c0012223:	90                   	nop
c0012224:	83 c4 0c             	add    esp,0xc
c0012227:	c3                   	ret    

c0012228 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0012228:	83 ec 2c             	sub    esp,0x2c
c001222b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001222f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012233:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0012237:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001223b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0012240:	88 d0                	mov    al,dl
c0012242:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0012246:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001224b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012253:	90                   	nop
c0012254:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012258:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001225e:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0012262:	0f 8d 9c 00 00 00    	jge    c0012304 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c0012268:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001226c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012270:	83 c2 2a             	add    edx,0x2a
c0012273:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0012277:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c001227c:	75 7a                	jne    c00122f8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c001227e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012282:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012286:	83 c2 2a             	add    edx,0x2a
c0012289:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c001228d:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0012291:	75 65                	jne    c00122f8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c0012293:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012298:	74 3a                	je     c00122d4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c001229a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001229e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00122a2:	83 c2 2a             	add    edx,0x2a
c00122a5:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c00122a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122ad:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00122b0:	39 c2                	cmp    edx,eax
c00122b2:	74 10                	je     c00122c4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c00122b4:	83 ec 0c             	sub    esp,0xc
c00122b7:	68 e8 50 02 c0       	push   0xc00250e8
c00122bc:	e8 5c 2a 00 00       	call   c0014d1d <Krnl::panic(char const*)>
c00122c1:	83 c4 10             	add    esp,0x10
c00122c4:	83 ec 0c             	sub    esp,0xc
c00122c7:	68 a2 52 02 c0       	push   0xc00252a2
c00122cc:	e8 4c 2a 00 00       	call   c0014d1d <Krnl::panic(char const*)>
c00122d1:	83 c4 10             	add    esp,0x10
c00122d4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00122d8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00122dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00122e0:	83 c2 2a             	add    edx,0x2a
c00122e3:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00122e7:	8b 02                	mov    eax,DWORD PTR [edx]
c00122e9:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00122ec:	89 01                	mov    DWORD PTR [ecx],eax
c00122ee:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00122f1:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00122f6:	66 90                	xchg   ax,ax
c00122f8:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00122fc:	e9 53 ff ff ff       	jmp    c0012254 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c0012301:	8d 76 00             	lea    esi,[esi+0x0]
c0012304:	90                   	nop
c0012305:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012309:	83 c4 2c             	add    esp,0x2c
c001230c:	c2 04 00             	ret    0x4
c001230f:	90                   	nop

c0012310 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0012310:	83 ec 1c             	sub    esp,0x1c
c0012313:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012317:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001231b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001231f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0012324:	88 c8                	mov    al,cl
c0012326:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001232a:	88 d0                	mov    al,dl
c001232c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0012330:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012334:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001233a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001233e:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0012341:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0012345:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0012349:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001234d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0012353:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0012357:	8d 48 2a             	lea    ecx,[eax+0x2a]
c001235a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001235e:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0012363:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012367:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001236d:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0012371:	8d 48 01             	lea    ecx,[eax+0x1]
c0012374:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012378:	83 c2 2a             	add    edx,0x2a
c001237b:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c001237f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012383:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0012389:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001238d:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0012390:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012394:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0012398:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001239c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00123a2:	8d 50 01             	lea    edx,[eax+0x1]
c00123a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00123a9:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c00123af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00123b3:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00123b9:	3d 00 02 00 00       	cmp    eax,0x200
c00123be:	75 10                	jne    c00123d0 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c00123c0:	83 ec 0c             	sub    esp,0xc
c00123c3:	68 b1 52 02 c0       	push   0xc00252b1
c00123c8:	e8 50 29 00 00       	call   c0014d1d <Krnl::panic(char const*)>
c00123cd:	83 c4 10             	add    esp,0x10
c00123d0:	90                   	nop
c00123d1:	83 c4 1c             	add    esp,0x1c
c00123d4:	c3                   	ret    
c00123d5:	90                   	nop
c00123d6:	66 90                	xchg   ax,ax

c00123d8 <ACPI::setScreenBrightnessLevel(void*, int)>:
c00123d8:	b8 00 00 00 00       	mov    eax,0x0
c00123dd:	c3                   	ret    
c00123de:	66 90                	xchg   ax,ax

c00123e0 <ACPI::detectPCI()>:
c00123e0:	53                   	push   ebx
c00123e1:	83 ec 68             	sub    esp,0x68
c00123e4:	c6 44 24 5f 00       	mov    BYTE PTR [esp+0x5f],0x0
c00123e9:	c6 44 24 5e 00       	mov    BYTE PTR [esp+0x5e],0x0
c00123ee:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c00123f3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00123f9:	83 e0 04             	and    eax,0x4
c00123fc:	84 c0                	test   al,al
c00123fe:	74 2c                	je     c001242c <ACPI::detectPCI()+0x4c>
c0012400:	a1 68 86 02 c0       	mov    eax,ds:0xc0028668
c0012405:	83 ec 08             	sub    esp,0x8
c0012408:	68 ce 52 02 c0       	push   0xc00252ce
c001240d:	50                   	push   eax
c001240e:	e8 5d f8 ff ff       	call   c0011c70 <findDataTable(unsigned char*, char*)>
c0012413:	83 c4 10             	add    esp,0x10
c0012416:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001241a:	83 7c 24 58 00       	cmp    DWORD PTR [esp+0x58],0x0
c001241f:	74 0b                	je     c001242c <ACPI::detectPCI()+0x4c>
c0012421:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0012426:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c001242b:	90                   	nop
c001242c:	c7 44 24 54 5f 0c 00 00 	mov    DWORD PTR [esp+0x54],0xc5f
c0012434:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012438:	8a 00                	mov    al,BYTE PTR [eax]
c001243a:	3c 01                	cmp    al,0x1
c001243c:	75 0e                	jne    c001244c <ACPI::detectPCI()+0x6c>
c001243e:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0012443:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c0012448:	eb 2a                	jmp    c0012474 <ACPI::detectPCI()+0x94>
c001244a:	66 90                	xchg   ax,ax
c001244c:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012450:	8a 00                	mov    al,BYTE PTR [eax]
c0012452:	3c 02                	cmp    al,0x2
c0012454:	75 1e                	jne    c0012474 <ACPI::detectPCI()+0x94>
c0012456:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c001245b:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0012460:	74 12                	je     c0012474 <ACPI::detectPCI()+0x94>
c0012462:	83 ec 0c             	sub    esp,0xc
c0012465:	68 18 51 02 c0       	push   0xc0025118
c001246a:	e8 ae 28 00 00       	call   c0014d1d <Krnl::panic(char const*)>
c001246f:	83 c4 10             	add    esp,0x10
c0012472:	66 90                	xchg   ax,ax
c0012474:	8a 44 24 5f          	mov    al,BYTE PTR [esp+0x5f]
c0012478:	83 f0 01             	xor    eax,0x1
c001247b:	84 c0                	test   al,al
c001247d:	74 41                	je     c00124c0 <ACPI::detectPCI()+0xe0>
c001247f:	e8 cc dc fe ff       	call   c0000150 <manualPCIProbe>
c0012484:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0012488:	83 7c 24 50 01       	cmp    DWORD PTR [esp+0x50],0x1
c001248d:	75 0d                	jne    c001249c <ACPI::detectPCI()+0xbc>
c001248f:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0012494:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c0012499:	eb 25                	jmp    c00124c0 <ACPI::detectPCI()+0xe0>
c001249b:	90                   	nop
c001249c:	83 7c 24 50 02       	cmp    DWORD PTR [esp+0x50],0x2
c00124a1:	75 1d                	jne    c00124c0 <ACPI::detectPCI()+0xe0>
c00124a3:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c00124a8:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c00124ad:	74 11                	je     c00124c0 <ACPI::detectPCI()+0xe0>
c00124af:	83 ec 0c             	sub    esp,0xc
c00124b2:	68 18 51 02 c0       	push   0xc0025118
c00124b7:	e8 61 28 00 00       	call   c0014d1d <Krnl::panic(char const*)>
c00124bc:	83 c4 10             	add    esp,0x10
c00124bf:	90                   	nop
c00124c0:	80 7c 24 5f 00       	cmp    BYTE PTR [esp+0x5f],0x0
c00124c5:	0f 84 49 03 00 00    	je     c0012814 <ACPI::detectPCI()+0x434>
c00124cb:	83 ec 0c             	sub    esp,0xc
c00124ce:	68 d3 52 02 c0       	push   0xc00252d3
c00124d3:	e8 39 78 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c00124d8:	83 c4 10             	add    esp,0x10
c00124db:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c00124e0:	0f 84 8e 00 00 00    	je     c0012574 <ACPI::detectPCI()+0x194>
c00124e6:	a1 20 7e 02 c0       	mov    eax,ds:0xc0027e20
c00124eb:	25 00 08 00 00       	and    eax,0x800
c00124f0:	0f 84 16 01 00 00    	je     c001260c <ACPI::detectPCI()+0x22c>
c00124f6:	83 ec 0c             	sub    esp,0xc
c00124f9:	68 40 51 02 c0       	push   0xc0025140
c00124fe:	e8 0e 78 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0012503:	83 c4 10             	add    esp,0x10
c0012506:	a1 20 7e 02 c0       	mov    eax,ds:0xc0027e20
c001250b:	25 80 00 00 00       	and    eax,0x80
c0012510:	0f 85 f6 00 00 00    	jne    c001260c <ACPI::detectPCI()+0x22c>
c0012516:	66 90                	xchg   ax,ax
c0012518:	66 c7 44 24 3a 60 00 	mov    WORD PTR [esp+0x3a],0x60
c001251f:	66 8b 44 24 3a       	mov    ax,WORD PTR [esp+0x3a]
c0012524:	89 c2                	mov    edx,eax
c0012526:	ec                   	in     al,dx
c0012527:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c001252b:	8a 44 24 39          	mov    al,BYTE PTR [esp+0x39]
c001252f:	88 44 24 4f          	mov    BYTE PTR [esp+0x4f],al
c0012533:	80 7c 24 4f 5a       	cmp    BYTE PTR [esp+0x4f],0x5a
c0012538:	74 0a                	je     c0012544 <ACPI::detectPCI()+0x164>
c001253a:	80 7c 24 4f 1c       	cmp    BYTE PTR [esp+0x4f],0x1c
c001253f:	74 03                	je     c0012544 <ACPI::detectPCI()+0x164>
c0012541:	eb d5                	jmp    c0012518 <ACPI::detectPCI()+0x138>
c0012543:	90                   	nop
c0012544:	66 c7 44 24 36 60 00 	mov    WORD PTR [esp+0x36],0x60
c001254b:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c0012550:	89 c2                	mov    edx,eax
c0012552:	ec                   	in     al,dx
c0012553:	88 44 24 35          	mov    BYTE PTR [esp+0x35],al
c0012557:	8a 44 24 35          	mov    al,BYTE PTR [esp+0x35]
c001255b:	88 44 24 4e          	mov    BYTE PTR [esp+0x4e],al
c001255f:	80 7c 24 4e 5a       	cmp    BYTE PTR [esp+0x4e],0x5a
c0012564:	74 de                	je     c0012544 <ACPI::detectPCI()+0x164>
c0012566:	80 7c 24 4e 1c       	cmp    BYTE PTR [esp+0x4e],0x1c
c001256b:	0f 85 93 00 00 00    	jne    c0012604 <ACPI::detectPCI()+0x224>
c0012571:	eb d1                	jmp    c0012544 <ACPI::detectPCI()+0x164>
c0012573:	90                   	nop
c0012574:	8a 44 24 5e          	mov    al,BYTE PTR [esp+0x5e]
c0012578:	83 f0 01             	xor    eax,0x1
c001257b:	84 c0                	test   al,al
c001257d:	0f 84 89 00 00 00    	je     c001260c <ACPI::detectPCI()+0x22c>
c0012583:	a1 20 7e 02 c0       	mov    eax,ds:0xc0027e20
c0012588:	25 00 08 00 00       	and    eax,0x800
c001258d:	74 7d                	je     c001260c <ACPI::detectPCI()+0x22c>
c001258f:	83 ec 0c             	sub    esp,0xc
c0012592:	68 64 51 02 c0       	push   0xc0025164
c0012597:	e8 75 77 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001259c:	83 c4 10             	add    esp,0x10
c001259f:	a1 20 7e 02 c0       	mov    eax,ds:0xc0027e20
c00125a4:	25 80 00 00 00       	and    eax,0x80
c00125a9:	75 61                	jne    c001260c <ACPI::detectPCI()+0x22c>
c00125ab:	90                   	nop
c00125ac:	66 c7 44 24 32 60 00 	mov    WORD PTR [esp+0x32],0x60
c00125b3:	66 8b 44 24 32       	mov    ax,WORD PTR [esp+0x32]
c00125b8:	89 c2                	mov    edx,eax
c00125ba:	ec                   	in     al,dx
c00125bb:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c00125bf:	8a 44 24 31          	mov    al,BYTE PTR [esp+0x31]
c00125c3:	88 44 24 4d          	mov    BYTE PTR [esp+0x4d],al
c00125c7:	80 7c 24 4d 5a       	cmp    BYTE PTR [esp+0x4d],0x5a
c00125cc:	74 0a                	je     c00125d8 <ACPI::detectPCI()+0x1f8>
c00125ce:	80 7c 24 4d 1c       	cmp    BYTE PTR [esp+0x4d],0x1c
c00125d3:	74 03                	je     c00125d8 <ACPI::detectPCI()+0x1f8>
c00125d5:	eb d5                	jmp    c00125ac <ACPI::detectPCI()+0x1cc>
c00125d7:	90                   	nop
c00125d8:	66 c7 44 24 2e 60 00 	mov    WORD PTR [esp+0x2e],0x60
c00125df:	66 8b 44 24 2e       	mov    ax,WORD PTR [esp+0x2e]
c00125e4:	89 c2                	mov    edx,eax
c00125e6:	ec                   	in     al,dx
c00125e7:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c00125eb:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00125ef:	88 44 24 4c          	mov    BYTE PTR [esp+0x4c],al
c00125f3:	80 7c 24 4c 5a       	cmp    BYTE PTR [esp+0x4c],0x5a
c00125f8:	74 de                	je     c00125d8 <ACPI::detectPCI()+0x1f8>
c00125fa:	80 7c 24 4c 1c       	cmp    BYTE PTR [esp+0x4c],0x1c
c00125ff:	75 07                	jne    c0012608 <ACPI::detectPCI()+0x228>
c0012601:	eb d5                	jmp    c00125d8 <ACPI::detectPCI()+0x1f8>
c0012603:	90                   	nop
c0012604:	90                   	nop
c0012605:	eb 05                	jmp    c001260c <ACPI::detectPCI()+0x22c>
c0012607:	90                   	nop
c0012608:	90                   	nop
c0012609:	8d 76 00             	lea    esi,[esi+0x0]
c001260c:	c7 44 24 28 5c 01 00 00 	mov    DWORD PTR [esp+0x28],0x15c
c0012614:	83 ec 0c             	sub    esp,0xc
c0012617:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001261b:	e8 97 76 ff ff       	call   c0009cb7 <malloc>
c0012620:	83 c4 10             	add    esp,0x10
c0012623:	89 c3                	mov    ebx,eax
c0012625:	83 ec 0c             	sub    esp,0xc
c0012628:	53                   	push   ebx
c0012629:	e8 2c af 00 00       	call   c001d55a <PCI::PCI()>
c001262e:	83 c4 10             	add    esp,0x10
c0012631:	89 5c 24 48          	mov    DWORD PTR [esp+0x48],ebx
c0012635:	a1 20 7e 02 c0       	mov    eax,ds:0xc0027e20
c001263a:	25 00 08 00 00       	and    eax,0x800
c001263f:	74 7b                	je     c00126bc <ACPI::detectPCI()+0x2dc>
c0012641:	83 ec 0c             	sub    esp,0xc
c0012644:	68 eb 52 02 c0       	push   0xc00252eb
c0012649:	e8 c3 76 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001264e:	83 c4 10             	add    esp,0x10
c0012651:	a1 20 7e 02 c0       	mov    eax,ds:0xc0027e20
c0012656:	25 80 00 00 00       	and    eax,0x80
c001265b:	75 5f                	jne    c00126bc <ACPI::detectPCI()+0x2dc>
c001265d:	8d 76 00             	lea    esi,[esi+0x0]
c0012660:	66 c7 44 24 26 60 00 	mov    WORD PTR [esp+0x26],0x60
c0012667:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c001266c:	89 c2                	mov    edx,eax
c001266e:	ec                   	in     al,dx
c001266f:	88 44 24 25          	mov    BYTE PTR [esp+0x25],al
c0012673:	8a 44 24 25          	mov    al,BYTE PTR [esp+0x25]
c0012677:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001267b:	80 7c 24 47 5a       	cmp    BYTE PTR [esp+0x47],0x5a
c0012680:	74 0a                	je     c001268c <ACPI::detectPCI()+0x2ac>
c0012682:	80 7c 24 47 1c       	cmp    BYTE PTR [esp+0x47],0x1c
c0012687:	74 03                	je     c001268c <ACPI::detectPCI()+0x2ac>
c0012689:	eb d5                	jmp    c0012660 <ACPI::detectPCI()+0x280>
c001268b:	90                   	nop
c001268c:	66 c7 44 24 22 60 00 	mov    WORD PTR [esp+0x22],0x60
c0012693:	66 8b 44 24 22       	mov    ax,WORD PTR [esp+0x22]
c0012698:	89 c2                	mov    edx,eax
c001269a:	ec                   	in     al,dx
c001269b:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c001269f:	8a 44 24 21          	mov    al,BYTE PTR [esp+0x21]
c00126a3:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00126a7:	80 7c 24 46 5a       	cmp    BYTE PTR [esp+0x46],0x5a
c00126ac:	74 de                	je     c001268c <ACPI::detectPCI()+0x2ac>
c00126ae:	80 7c 24 46 1c       	cmp    BYTE PTR [esp+0x46],0x1c
c00126b3:	75 03                	jne    c00126b8 <ACPI::detectPCI()+0x2d8>
c00126b5:	eb d5                	jmp    c001268c <ACPI::detectPCI()+0x2ac>
c00126b7:	90                   	nop
c00126b8:	90                   	nop
c00126b9:	8d 76 00             	lea    esi,[esi+0x0]
c00126bc:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00126c0:	83 ec 08             	sub    esp,0x8
c00126c3:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00126c7:	50                   	push   eax
c00126c8:	e8 a9 bd ff ff       	call   c000e476 <Device::addChild(Device*)>
c00126cd:	83 c4 10             	add    esp,0x10
c00126d0:	a1 20 7e 02 c0       	mov    eax,ds:0xc0027e20
c00126d5:	25 00 08 00 00       	and    eax,0x800
c00126da:	74 78                	je     c0012754 <ACPI::detectPCI()+0x374>
c00126dc:	83 ec 0c             	sub    esp,0xc
c00126df:	68 f1 52 02 c0       	push   0xc00252f1
c00126e4:	e8 28 76 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c00126e9:	83 c4 10             	add    esp,0x10
c00126ec:	a1 20 7e 02 c0       	mov    eax,ds:0xc0027e20
c00126f1:	25 80 00 00 00       	and    eax,0x80
c00126f6:	75 5c                	jne    c0012754 <ACPI::detectPCI()+0x374>
c00126f8:	66 c7 44 24 1e 60 00 	mov    WORD PTR [esp+0x1e],0x60
c00126ff:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0012704:	89 c2                	mov    edx,eax
c0012706:	ec                   	in     al,dx
c0012707:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c001270b:	8a 44 24 1d          	mov    al,BYTE PTR [esp+0x1d]
c001270f:	88 44 24 45          	mov    BYTE PTR [esp+0x45],al
c0012713:	80 7c 24 45 5a       	cmp    BYTE PTR [esp+0x45],0x5a
c0012718:	74 0a                	je     c0012724 <ACPI::detectPCI()+0x344>
c001271a:	80 7c 24 45 1c       	cmp    BYTE PTR [esp+0x45],0x1c
c001271f:	74 03                	je     c0012724 <ACPI::detectPCI()+0x344>
c0012721:	eb d5                	jmp    c00126f8 <ACPI::detectPCI()+0x318>
c0012723:	90                   	nop
c0012724:	66 c7 44 24 1a 60 00 	mov    WORD PTR [esp+0x1a],0x60
c001272b:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0012730:	89 c2                	mov    edx,eax
c0012732:	ec                   	in     al,dx
c0012733:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c0012737:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c001273b:	88 44 24 44          	mov    BYTE PTR [esp+0x44],al
c001273f:	80 7c 24 44 5a       	cmp    BYTE PTR [esp+0x44],0x5a
c0012744:	74 de                	je     c0012724 <ACPI::detectPCI()+0x344>
c0012746:	80 7c 24 44 1c       	cmp    BYTE PTR [esp+0x44],0x1c
c001274b:	75 03                	jne    c0012750 <ACPI::detectPCI()+0x370>
c001274d:	eb d5                	jmp    c0012724 <ACPI::detectPCI()+0x344>
c001274f:	90                   	nop
c0012750:	90                   	nop
c0012751:	8d 76 00             	lea    esi,[esi+0x0]
c0012754:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0012758:	8b 00                	mov    eax,DWORD PTR [eax]
c001275a:	83 c0 08             	add    eax,0x8
c001275d:	8b 00                	mov    eax,DWORD PTR [eax]
c001275f:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0012764:	74 0a                	je     c0012770 <ACPI::detectPCI()+0x390>
c0012766:	ba 01 00 00 00       	mov    edx,0x1
c001276b:	eb 0b                	jmp    c0012778 <ACPI::detectPCI()+0x398>
c001276d:	8d 76 00             	lea    esi,[esi+0x0]
c0012770:	ba 02 00 00 00       	mov    edx,0x2
c0012775:	8d 76 00             	lea    esi,[esi+0x0]
c0012778:	6a 00                	push   0x0
c001277a:	6a 00                	push   0x0
c001277c:	52                   	push   edx
c001277d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012781:	ff d0                	call   eax
c0012783:	83 c4 10             	add    esp,0x10
c0012786:	a1 20 7e 02 c0       	mov    eax,ds:0xc0027e20
c001278b:	25 00 08 00 00       	and    eax,0x800
c0012790:	0f 84 26 01 00 00    	je     c00128bc <ACPI::detectPCI()+0x4dc>
c0012796:	83 ec 0c             	sub    esp,0xc
c0012799:	68 f7 52 02 c0       	push   0xc00252f7
c001279e:	e8 6e 75 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c00127a3:	83 c4 10             	add    esp,0x10
c00127a6:	a1 20 7e 02 c0       	mov    eax,ds:0xc0027e20
c00127ab:	25 80 00 00 00       	and    eax,0x80
c00127b0:	0f 85 06 01 00 00    	jne    c00128bc <ACPI::detectPCI()+0x4dc>
c00127b6:	66 90                	xchg   ax,ax
c00127b8:	66 c7 44 24 16 60 00 	mov    WORD PTR [esp+0x16],0x60
c00127bf:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00127c4:	89 c2                	mov    edx,eax
c00127c6:	ec                   	in     al,dx
c00127c7:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c00127cb:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c00127cf:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00127d3:	80 7c 24 43 5a       	cmp    BYTE PTR [esp+0x43],0x5a
c00127d8:	74 0a                	je     c00127e4 <ACPI::detectPCI()+0x404>
c00127da:	80 7c 24 43 1c       	cmp    BYTE PTR [esp+0x43],0x1c
c00127df:	74 03                	je     c00127e4 <ACPI::detectPCI()+0x404>
c00127e1:	eb d5                	jmp    c00127b8 <ACPI::detectPCI()+0x3d8>
c00127e3:	90                   	nop
c00127e4:	66 c7 44 24 12 60 00 	mov    WORD PTR [esp+0x12],0x60
c00127eb:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00127f0:	89 c2                	mov    edx,eax
c00127f2:	ec                   	in     al,dx
c00127f3:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00127f7:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00127fb:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c00127ff:	80 7c 24 42 5a       	cmp    BYTE PTR [esp+0x42],0x5a
c0012804:	74 de                	je     c00127e4 <ACPI::detectPCI()+0x404>
c0012806:	80 7c 24 42 1c       	cmp    BYTE PTR [esp+0x42],0x1c
c001280b:	0f 85 a7 00 00 00    	jne    c00128b8 <ACPI::detectPCI()+0x4d8>
c0012811:	eb d1                	jmp    c00127e4 <ACPI::detectPCI()+0x404>
c0012813:	90                   	nop
c0012814:	83 ec 0c             	sub    esp,0xc
c0012817:	68 fd 52 02 c0       	push   0xc00252fd
c001281c:	e8 a4 a7 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0012821:	83 c4 10             	add    esp,0x10
c0012824:	83 ec 0c             	sub    esp,0xc
c0012827:	68 08 53 02 c0       	push   0xc0025308
c001282c:	e8 e0 74 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0012831:	83 c4 10             	add    esp,0x10
c0012834:	c7 44 24 0c 70 02 00 00 	mov    DWORD PTR [esp+0xc],0x270
c001283c:	83 ec 0c             	sub    esp,0xc
c001283f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012843:	e8 6f 74 ff ff       	call   c0009cb7 <malloc>
c0012848:	83 c4 10             	add    esp,0x10
c001284b:	89 c3                	mov    ebx,eax
c001284d:	83 ec 0c             	sub    esp,0xc
c0012850:	53                   	push   ebx
c0012851:	e8 6e be 00 00       	call   c001e6c4 <IDE::IDE()>
c0012856:	83 c4 10             	add    esp,0x10
c0012859:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c001285d:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0012861:	83 ec 08             	sub    esp,0x8
c0012864:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012868:	50                   	push   eax
c0012869:	e8 08 bc ff ff       	call   c000e476 <Device::addChild(Device*)>
c001286e:	83 c4 10             	add    esp,0x10
c0012871:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012875:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c001287f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012883:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c001288c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012890:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c0012899:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001289d:	8b 00                	mov    eax,DWORD PTR [eax]
c001289f:	83 c0 08             	add    eax,0x8
c00128a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00128a4:	6a 00                	push   0x0
c00128a6:	6a 00                	push   0x0
c00128a8:	6a 00                	push   0x0
c00128aa:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00128ae:	ff d0                	call   eax
c00128b0:	83 c4 10             	add    esp,0x10
c00128b3:	eb 07                	jmp    c00128bc <ACPI::detectPCI()+0x4dc>
c00128b5:	8d 76 00             	lea    esi,[esi+0x0]
c00128b8:	90                   	nop
c00128b9:	8d 76 00             	lea    esi,[esi+0x0]
c00128bc:	90                   	nop
c00128bd:	83 c4 68             	add    esp,0x68
c00128c0:	5b                   	pop    ebx
c00128c1:	c3                   	ret    
c00128c2:	66 90                	xchg   ax,ax

c00128c4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c00128c4:	83 ec 1c             	sub    esp,0x1c
c00128c7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00128cb:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00128ce:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00128d2:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c00128d7:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00128dc:	83 ec 08             	sub    esp,0x8
c00128df:	52                   	push   edx
c00128e0:	50                   	push   eax
c00128e1:	e8 34 6a ff ff       	call   c000931a <Computer::readCMOS(unsigned char)>
c00128e6:	83 c4 10             	add    esp,0x10
c00128e9:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00128ed:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c00128f2:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00128f7:	83 ec 04             	sub    esp,0x4
c00128fa:	6a 01                	push   0x1
c00128fc:	52                   	push   edx
c00128fd:	50                   	push   eax
c00128fe:	e8 3d 6b ff ff       	call   c0009440 <Computer::writeCMOS(unsigned char, unsigned char)>
c0012903:	83 c4 10             	add    esp,0x10
c0012906:	90                   	nop
c0012907:	83 c4 1c             	add    esp,0x1c
c001290a:	c3                   	ret    
c001290b:	90                   	nop

c001290c <ACPI::sleep()>:
c001290c:	83 ec 0c             	sub    esp,0xc
c001290f:	83 ec 0c             	sub    esp,0xc
c0012912:	68 1d 53 02 c0       	push   0xc002531d
c0012917:	e8 a9 a6 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001291c:	83 c4 10             	add    esp,0x10
c001291f:	a1 40 84 02 c0       	mov    eax,ds:0xc0028440
c0012924:	85 c0                	test   eax,eax
c0012926:	74 18                	je     c0012940 <ACPI::sleep()+0x34>
c0012928:	83 ec 0c             	sub    esp,0xc
c001292b:	68 2a 53 02 c0       	push   0xc002532a
c0012930:	e8 90 a6 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0012935:	83 c4 10             	add    esp,0x10
c0012938:	a1 40 84 02 c0       	mov    eax,ds:0xc0028440
c001293d:	ff d0                	call   eax
c001293f:	90                   	nop
c0012940:	90                   	nop
c0012941:	83 c4 0c             	add    esp,0xc
c0012944:	c3                   	ret    
c0012945:	90                   	nop
c0012946:	66 90                	xchg   ax,ax

c0012948 <ACPI::open(int, int, void*)>:
c0012948:	57                   	push   edi
c0012949:	56                   	push   esi
c001294a:	53                   	push   ebx
c001294b:	81 ec 70 01 00 00    	sub    esp,0x170
c0012951:	83 ec 0c             	sub    esp,0xc
c0012954:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c001295b:	e8 80 fa ff ff       	call   c00123e0 <ACPI::detectPCI()>
c0012960:	83 c4 10             	add    esp,0x10
c0012963:	83 ec 0c             	sub    esp,0xc
c0012966:	68 88 51 02 c0       	push   0xc0025188
c001296b:	e8 a1 73 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0012970:	83 c4 10             	add    esp,0x10
c0012973:	83 ec 0c             	sub    esp,0xc
c0012976:	68 44 53 02 c0       	push   0xc0025344
c001297b:	e8 ab 45 00 00       	call   c0016f2b <Thr::loadKernelSymbolTable(char const*)>
c0012980:	83 c4 10             	add    esp,0x10
c0012983:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c001298b:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c0012996:	83 ec 0c             	sub    esp,0xc
c0012999:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c00129a0:	e8 12 73 ff ff       	call   c0009cb7 <malloc>
c00129a5:	83 c4 10             	add    esp,0x10
c00129a8:	89 c3                	mov    ebx,eax
c00129aa:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c00129af:	83 ec 04             	sub    esp,0x4
c00129b2:	50                   	push   eax
c00129b3:	68 62 53 02 c0       	push   0xc0025362
c00129b8:	53                   	push   ebx
c00129b9:	e8 72 ab ff ff       	call   c000d530 <File::File(char const*, Process*)>
c00129be:	83 c4 10             	add    esp,0x10
c00129c1:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c00129c8:	83 ec 08             	sub    esp,0x8
c00129cb:	6a 01                	push   0x1
c00129cd:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c00129d4:	e8 31 ac ff ff       	call   c000d60a <File::open(FileOpenMode)>
c00129d9:	83 c4 10             	add    esp,0x10
c00129dc:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c00129e3:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c00129eb:	75 17                	jne    c0012a04 <ACPI::open(int, int, void*)+0xbc>
c00129ed:	83 ec 0c             	sub    esp,0xc
c00129f0:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c00129f7:	e8 6c ac ff ff       	call   c000d668 <File::close()>
c00129fc:	83 c4 10             	add    esp,0x10
c00129ff:	eb 0b                	jmp    c0012a0c <ACPI::open(int, int, void*)+0xc4>
c0012a01:	8d 76 00             	lea    esi,[esi+0x0]
c0012a04:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c0012a0c:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c0012a14:	74 1e                	je     c0012a34 <ACPI::open(int, int, void*)+0xec>
c0012a16:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c0012a1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a1f:	83 c0 08             	add    eax,0x8
c0012a22:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a24:	83 ec 0c             	sub    esp,0xc
c0012a27:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0012a2e:	ff d0                	call   eax
c0012a30:	83 c4 10             	add    esp,0x10
c0012a33:	90                   	nop
c0012a34:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c0012a3b:	83 f0 01             	xor    eax,0x1
c0012a3e:	84 c0                	test   al,al
c0012a40:	74 42                	je     c0012a84 <ACPI::open(int, int, void*)+0x13c>
c0012a42:	83 ec 0c             	sub    esp,0xc
c0012a45:	68 80 53 02 c0       	push   0xc0025380
c0012a4a:	e8 c2 72 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0012a4f:	83 c4 10             	add    esp,0x10
c0012a52:	83 ec 04             	sub    esp,0x4
c0012a55:	6a 0c                	push   0xc
c0012a57:	68 9b 53 02 c0       	push   0xc002539b
c0012a5c:	68 ac 53 02 c0       	push   0xc00253ac
c0012a61:	e8 2f 2b 00 00       	call   c0015595 <Reg::readIntWithDefault(char*, char*, int)>
c0012a66:	83 c4 10             	add    esp,0x10
c0012a69:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c0012a70:	83 ec 0c             	sub    esp,0xc
c0012a73:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c0012a7a:	e8 f4 93 ff ff       	call   c000be73 <Virt::setupPageSwapping(int)>
c0012a7f:	83 c4 10             	add    esp,0x10
c0012a82:	66 90                	xchg   ax,ax
c0012a84:	83 ec 0c             	sub    esp,0xc
c0012a87:	68 06 3b 02 c0       	push   0xc0023b06
c0012a8c:	e8 80 72 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0012a91:	83 c4 10             	add    esp,0x10
c0012a94:	8b 1d 08 7e 02 c0    	mov    ebx,DWORD PTR ds:0xc0027e08
c0012a9a:	83 ec 08             	sub    esp,0x8
c0012a9d:	6a 01                	push   0x1
c0012a9f:	68 b3 53 02 c0       	push   0xc00253b3
c0012aa4:	e8 f9 4e 00 00       	call   c00179a2 <Thr::loadDLL(char const*, bool)>
c0012aa9:	83 c4 10             	add    esp,0x10
c0012aac:	83 ec 08             	sub    esp,0x8
c0012aaf:	53                   	push   ebx
c0012ab0:	50                   	push   eax
c0012ab1:	e8 1d 51 00 00       	call   c0017bd3 <Thr::executeDLL(unsigned long, void*)>
c0012ab6:	83 c4 10             	add    esp,0x10
c0012ab9:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0012ac0:	83 ec 08             	sub    esp,0x8
c0012ac3:	6a 12                	push   0x12
c0012ac5:	50                   	push   eax
c0012ac6:	e8 2f bd ff ff       	call   c000e7fa <getDevicesOfType(DeviceType)>
c0012acb:	83 c4 0c             	add    esp,0xc
c0012ace:	66 90                	xchg   ax,ax
c0012ad0:	83 ec 0c             	sub    esp,0xc
c0012ad3:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012ada:	50                   	push   eax
c0012adb:	e8 5c 03 01 00       	call   c0022e3c <LinkedList<Device>::isEmpty()>
c0012ae0:	83 c4 10             	add    esp,0x10
c0012ae3:	83 f0 01             	xor    eax,0x1
c0012ae6:	84 c0                	test   al,al
c0012ae8:	0f 84 46 01 00 00    	je     c0012c34 <ACPI::open(int, int, void*)+0x2ec>
c0012aee:	83 ec 0c             	sub    esp,0xc
c0012af1:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012af8:	50                   	push   eax
c0012af9:	e8 5a 03 01 00       	call   c0022e58 <LinkedList<Device>::getFirstElement()>
c0012afe:	83 c4 10             	add    esp,0x10
c0012b01:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0012b08:	83 ec 0c             	sub    esp,0xc
c0012b0b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012b12:	50                   	push   eax
c0012b13:	e8 48 03 01 00       	call   c0022e60 <LinkedList<Device>::removeFirst()>
c0012b18:	83 c4 10             	add    esp,0x10
c0012b1b:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c0012b22:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0012b29:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c0012b30:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012b34:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0012b3a:	ba 09 00 00 00       	mov    edx,0x9
c0012b3f:	fc                   	cld    
c0012b40:	89 c7                	mov    edi,eax
c0012b42:	89 de                	mov    esi,ebx
c0012b44:	89 d1                	mov    ecx,edx
c0012b46:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0012b48:	83 ec 08             	sub    esp,0x8
c0012b4b:	8d 44 24 38          	lea    eax,[esp+0x38]
c0012b4f:	50                   	push   eax
c0012b50:	83 ec 24             	sub    esp,0x24
c0012b53:	89 e0                	mov    eax,esp
c0012b55:	89 c3                	mov    ebx,eax
c0012b57:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0012b5b:	ba 09 00 00 00       	mov    edx,0x9
c0012b60:	89 df                	mov    edi,ebx
c0012b62:	89 c6                	mov    esi,eax
c0012b64:	89 d1                	mov    ecx,edx
c0012b66:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0012b68:	e8 cb ae 00 00       	call   c001da38 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0012b6d:	83 c4 30             	add    esp,0x30
c0012b70:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c0012b77:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c0012b7f:	0f 84 4b ff ff ff    	je     c0012ad0 <ACPI::open(int, int, void*)+0x188>
c0012b85:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0012b90:	83 ec 0c             	sub    esp,0xc
c0012b93:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0012b9a:	e8 18 71 ff ff       	call   c0009cb7 <malloc>
c0012b9f:	83 c4 10             	add    esp,0x10
c0012ba2:	89 c3                	mov    ebx,eax
c0012ba4:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c0012ba9:	83 ec 04             	sub    esp,0x4
c0012bac:	50                   	push   eax
c0012bad:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012bb4:	53                   	push   ebx
c0012bb5:	e8 76 a9 ff ff       	call   c000d530 <File::File(char const*, Process*)>
c0012bba:	83 c4 10             	add    esp,0x10
c0012bbd:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c0012bc4:	83 ec 0c             	sub    esp,0xc
c0012bc7:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012bce:	e8 a5 ac ff ff       	call   c000d878 <File::exists()>
c0012bd3:	83 c4 10             	add    esp,0x10
c0012bd6:	84 c0                	test   al,al
c0012bd8:	74 2a                	je     c0012c04 <ACPI::open(int, int, void*)+0x2bc>
c0012bda:	83 ec 08             	sub    esp,0x8
c0012bdd:	6a 01                	push   0x1
c0012bdf:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0012be6:	e8 b7 4d 00 00       	call   c00179a2 <Thr::loadDLL(char const*, bool)>
c0012beb:	83 c4 10             	add    esp,0x10
c0012bee:	83 ec 08             	sub    esp,0x8
c0012bf1:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0012bf8:	50                   	push   eax
c0012bf9:	e8 d5 4f 00 00       	call   c0017bd3 <Thr::executeDLL(unsigned long, void*)>
c0012bfe:	83 c4 10             	add    esp,0x10
c0012c01:	8d 76 00             	lea    esi,[esi+0x0]
c0012c04:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0012c0c:	0f 84 be fe ff ff    	je     c0012ad0 <ACPI::open(int, int, void*)+0x188>
c0012c12:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c0012c19:	8b 00                	mov    eax,DWORD PTR [eax]
c0012c1b:	83 c0 08             	add    eax,0x8
c0012c1e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012c20:	83 ec 0c             	sub    esp,0xc
c0012c23:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012c2a:	ff d0                	call   eax
c0012c2c:	83 c4 10             	add    esp,0x10
c0012c2f:	e9 9c fe ff ff       	jmp    c0012ad0 <ACPI::open(int, int, void*)+0x188>
c0012c34:	83 ec 0c             	sub    esp,0xc
c0012c37:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012c3e:	50                   	push   eax
c0012c3f:	e8 f4 01 01 00       	call   c0022e38 <LinkedList<Device>::~LinkedList()>
c0012c44:	83 c4 10             	add    esp,0x10
c0012c47:	8b 1d 08 7e 02 c0    	mov    ebx,DWORD PTR ds:0xc0027e08
c0012c4d:	83 ec 08             	sub    esp,0x8
c0012c50:	6a 01                	push   0x1
c0012c52:	68 ce 53 02 c0       	push   0xc00253ce
c0012c57:	e8 46 4d 00 00       	call   c00179a2 <Thr::loadDLL(char const*, bool)>
c0012c5c:	83 c4 10             	add    esp,0x10
c0012c5f:	83 ec 08             	sub    esp,0x8
c0012c62:	53                   	push   ebx
c0012c63:	50                   	push   eax
c0012c64:	e8 6a 4f 00 00       	call   c0017bd3 <Thr::executeDLL(unsigned long, void*)>
c0012c69:	83 c4 10             	add    esp,0x10
c0012c6c:	8b 1d 08 7e 02 c0    	mov    ebx,DWORD PTR ds:0xc0027e08
c0012c72:	83 ec 08             	sub    esp,0x8
c0012c75:	6a 01                	push   0x1
c0012c77:	68 eb 53 02 c0       	push   0xc00253eb
c0012c7c:	e8 21 4d 00 00       	call   c00179a2 <Thr::loadDLL(char const*, bool)>
c0012c81:	83 c4 10             	add    esp,0x10
c0012c84:	83 ec 08             	sub    esp,0x8
c0012c87:	53                   	push   ebx
c0012c88:	50                   	push   eax
c0012c89:	e8 45 4f 00 00       	call   c0017bd3 <Thr::executeDLL(unsigned long, void*)>
c0012c8e:	83 c4 10             	add    esp,0x10
c0012c91:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c0012c96:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012c9c:	83 e0 04             	and    eax,0x4
c0012c9f:	84 c0                	test   al,al
c0012ca1:	0f 84 15 01 00 00    	je     c0012dbc <ACPI::open(int, int, void*)+0x474>
c0012ca7:	83 ec 0c             	sub    esp,0xc
c0012caa:	68 08 54 02 c0       	push   0xc0025408
c0012caf:	e8 5d 70 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0012cb4:	83 c4 10             	add    esp,0x10
c0012cb7:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c0012cc2:	83 ec 0c             	sub    esp,0xc
c0012cc5:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c0012ccc:	e8 e6 6f ff ff       	call   c0009cb7 <malloc>
c0012cd1:	83 c4 10             	add    esp,0x10
c0012cd4:	89 c3                	mov    ebx,eax
c0012cd6:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c0012cdb:	83 ec 04             	sub    esp,0x4
c0012cde:	50                   	push   eax
c0012cdf:	68 25 54 02 c0       	push   0xc0025425
c0012ce4:	53                   	push   ebx
c0012ce5:	e8 46 a8 ff ff       	call   c000d530 <File::File(char const*, Process*)>
c0012cea:	83 c4 10             	add    esp,0x10
c0012ced:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c0012cf4:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0012cfc:	74 1a                	je     c0012d18 <ACPI::open(int, int, void*)+0x3d0>
c0012cfe:	83 ec 0c             	sub    esp,0xc
c0012d01:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0012d08:	e8 6b ab ff ff       	call   c000d878 <File::exists()>
c0012d0d:	83 c4 10             	add    esp,0x10
c0012d10:	84 c0                	test   al,al
c0012d12:	74 04                	je     c0012d18 <ACPI::open(int, int, void*)+0x3d0>
c0012d14:	b0 01                	mov    al,0x1
c0012d16:	eb 04                	jmp    c0012d1c <ACPI::open(int, int, void*)+0x3d4>
c0012d18:	b0 00                	mov    al,0x0
c0012d1a:	66 90                	xchg   ax,ax
c0012d1c:	84 c0                	test   al,al
c0012d1e:	74 28                	je     c0012d48 <ACPI::open(int, int, void*)+0x400>
c0012d20:	83 ec 08             	sub    esp,0x8
c0012d23:	6a 01                	push   0x1
c0012d25:	68 25 54 02 c0       	push   0xc0025425
c0012d2a:	e8 73 4c 00 00       	call   c00179a2 <Thr::loadDLL(char const*, bool)>
c0012d2f:	83 c4 10             	add    esp,0x10
c0012d32:	83 ec 08             	sub    esp,0x8
c0012d35:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c0012d3c:	50                   	push   eax
c0012d3d:	e8 91 4e 00 00       	call   c0017bd3 <Thr::executeDLL(unsigned long, void*)>
c0012d42:	83 c4 10             	add    esp,0x10
c0012d45:	8d 76 00             	lea    esi,[esi+0x0]
c0012d48:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0012d50:	74 2a                	je     c0012d7c <ACPI::open(int, int, void*)+0x434>
c0012d52:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0012d5a:	74 20                	je     c0012d7c <ACPI::open(int, int, void*)+0x434>
c0012d5c:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c0012d63:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d65:	83 c0 08             	add    eax,0x8
c0012d68:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d6a:	83 ec 0c             	sub    esp,0xc
c0012d6d:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0012d74:	ff d0                	call   eax
c0012d76:	83 c4 10             	add    esp,0x10
c0012d79:	8d 76 00             	lea    esi,[esi+0x0]
c0012d7c:	a1 68 86 02 c0       	mov    eax,ds:0xc0028668
c0012d81:	83 ec 08             	sub    esp,0x8
c0012d84:	68 42 54 02 c0       	push   0xc0025442
c0012d89:	50                   	push   eax
c0012d8a:	e8 e1 ee ff ff       	call   c0011c70 <findDataTable(unsigned char*, char*)>
c0012d8f:	83 c4 10             	add    esp,0x10
c0012d92:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c0012d99:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0012da1:	74 19                	je     c0012dbc <ACPI::open(int, int, void*)+0x474>
c0012da3:	83 ec 08             	sub    esp,0x8
c0012da6:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0012dad:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c0012db4:	e8 0b fb ff ff       	call   c00128c4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0012db9:	83 c4 10             	add    esp,0x10
c0012dbc:	b8 00 00 00 00       	mov    eax,0x0
c0012dc1:	81 c4 70 01 00 00    	add    esp,0x170
c0012dc7:	5b                   	pop    ebx
c0012dc8:	5e                   	pop    esi
c0012dc9:	5f                   	pop    edi
c0012dca:	c3                   	ret    
c0012dcb:	90                   	nop

c0012dcc <CPU::close(int, int, void*)>:
c0012dcc:	31 c0                	xor    eax,eax
c0012dce:	c3                   	ret    
c0012dcf:	90                   	nop

c0012dd0 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0012dd0:	55                   	push   ebp
c0012dd1:	57                   	push   edi
c0012dd2:	56                   	push   esi
c0012dd3:	53                   	push   ebx
c0012dd4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012dd8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012ddc:	89 ce                	mov    esi,ecx
c0012dde:	89 d5                	mov    ebp,edx
c0012de0:	80 f9 04             	cmp    cl,0x4
c0012de3:	75 28                	jne    c0012e0d <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0012de5:	8d 42 f9             	lea    eax,[edx-0x7]
c0012de8:	3c 03                	cmp    al,0x3
c0012dea:	0f 86 63 01 00 00    	jbe    c0012f53 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0012df0:	80 fa 03             	cmp    dl,0x3
c0012df3:	0f 84 5a 01 00 00    	je     c0012f53 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0012df9:	8d 7a f2             	lea    edi,[edx-0xe]
c0012dfc:	b8 d0 76 02 c0       	mov    eax,0xc00276d0
c0012e01:	89 fb                	mov    ebx,edi
c0012e03:	80 fb 01             	cmp    bl,0x1
c0012e06:	77 4e                	ja     c0012e56 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0012e08:	e9 52 01 00 00       	jmp    c0012f5f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012e0d:	80 f9 05             	cmp    cl,0x5
c0012e10:	75 4d                	jne    c0012e5f <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0012e12:	b8 e0 76 02 c0       	mov    eax,0xc00276e0
c0012e17:	80 fa 03             	cmp    dl,0x3
c0012e1a:	0f 86 3f 01 00 00    	jbe    c0012f5f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012e20:	8d 7a fa             	lea    edi,[edx-0x6]
c0012e23:	b8 f0 76 02 c0       	mov    eax,0xc00276f0
c0012e28:	89 fb                	mov    ebx,edi
c0012e2a:	80 fb 01             	cmp    bl,0x1
c0012e2d:	0f 86 2c 01 00 00    	jbe    c0012f5f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012e33:	b8 00 77 02 c0       	mov    eax,0xc0027700
c0012e38:	80 fa 08             	cmp    dl,0x8
c0012e3b:	0f 84 1e 01 00 00    	je     c0012f5f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012e41:	89 d7                	mov    edi,edx
c0012e43:	b8 10 77 02 c0       	mov    eax,0xc0027710
c0012e48:	83 e7 fb             	and    edi,0xfffffffb
c0012e4b:	89 fb                	mov    ebx,edi
c0012e4d:	80 fb 09             	cmp    bl,0x9
c0012e50:	0f 84 09 01 00 00    	je     c0012f5f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012e56:	31 c0                	xor    eax,eax
c0012e58:	89 eb                	mov    ebx,ebp
c0012e5a:	0f b6 fb             	movzx  edi,bl
c0012e5d:	eb 30                	jmp    c0012e8f <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0012e5f:	31 c0                	xor    eax,eax
c0012e61:	80 f9 06             	cmp    cl,0x6
c0012e64:	75 f2                	jne    c0012e58 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0012e66:	80 fa 0a             	cmp    dl,0xa
c0012e69:	77 ed                	ja     c0012e58 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0012e6b:	bf de 05 00 00       	mov    edi,0x5de
c0012e70:	0f a3 d7             	bt     edi,edx
c0012e73:	73 e3                	jae    c0012e58 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0012e75:	b8 20 77 02 c0       	mov    eax,0xc0027720
c0012e7a:	e9 e0 00 00 00       	jmp    c0012f5f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012e7f:	39 c7                	cmp    edi,eax
c0012e81:	0f 84 d3 00 00 00    	je     c0012f5a <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0012e87:	40                   	inc    eax
c0012e88:	3d d0 00 00 00       	cmp    eax,0xd0
c0012e8d:	74 09                	je     c0012e98 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0012e8f:	89 f3                	mov    ebx,esi
c0012e91:	80 fb 0f             	cmp    bl,0xf
c0012e94:	75 f1                	jne    c0012e87 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0012e96:	eb e7                	jmp    c0012e7f <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0012e98:	80 f9 10             	cmp    cl,0x10
c0012e9b:	75 14                	jne    c0012eb1 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0012e9d:	8d 42 fc             	lea    eax,[edx-0x4]
c0012ea0:	83 e0 fb             	and    eax,0xfffffffb
c0012ea3:	3c 02                	cmp    al,0x2
c0012ea5:	76 34                	jbe    c0012edb <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0012ea7:	b8 7d 57 02 c0       	mov    eax,0xc002577d
c0012eac:	80 fa 02             	cmp    dl,0x2
c0012eaf:	eb 24                	jmp    c0012ed5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0012eb1:	80 f9 11             	cmp    cl,0x11
c0012eb4:	75 13                	jne    c0012ec9 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0012eb6:	b8 7d 57 02 c0       	mov    eax,0xc002577d
c0012ebb:	80 fa 03             	cmp    dl,0x3
c0012ebe:	0f 85 9b 00 00 00    	jne    c0012f5f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012ec4:	e9 91 00 00 00       	jmp    c0012f5a <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0012ec9:	80 f9 12             	cmp    cl,0x12
c0012ecc:	75 14                	jne    c0012ee2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0012ece:	b8 7d 57 02 c0       	mov    eax,0xc002577d
c0012ed3:	fe ca                	dec    dl
c0012ed5:	0f 85 84 00 00 00    	jne    c0012f5f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012edb:	b8 40 77 02 c0       	mov    eax,0xc0027740
c0012ee0:	eb 7d                	jmp    c0012f5f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012ee2:	80 f9 14             	cmp    cl,0x14
c0012ee5:	75 12                	jne    c0012ef9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0012ee7:	4a                   	dec    edx
c0012ee8:	b8 7d 57 02 c0       	mov    eax,0xc002577d
c0012eed:	80 fa 01             	cmp    dl,0x1
c0012ef0:	77 6d                	ja     c0012f5f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012ef2:	b8 50 77 02 c0       	mov    eax,0xc0027750
c0012ef7:	eb 66                	jmp    c0012f5f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012ef9:	80 f9 15             	cmp    cl,0x15
c0012efc:	75 31                	jne    c0012f2f <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0012efe:	b8 60 77 02 c0       	mov    eax,0xc0027760
c0012f03:	80 fa 01             	cmp    dl,0x1
c0012f06:	74 57                	je     c0012f5f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012f08:	b8 7d 57 02 c0       	mov    eax,0xc002577d
c0012f0d:	80 fa 13             	cmp    dl,0x13
c0012f10:	76 0c                	jbe    c0012f1e <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0012f12:	80 fa 30             	cmp    dl,0x30
c0012f15:	75 48                	jne    c0012f5f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012f17:	b8 80 77 02 c0       	mov    eax,0xc0027780
c0012f1c:	eb 41                	jmp    c0012f5f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012f1e:	b9 04 00 09 00       	mov    ecx,0x90004
c0012f23:	0f a3 d1             	bt     ecx,edx
c0012f26:	73 37                	jae    c0012f5f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012f28:	b8 70 77 02 c0       	mov    eax,0xc0027770
c0012f2d:	eb 30                	jmp    c0012f5f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012f2f:	b8 7d 57 02 c0       	mov    eax,0xc002577d
c0012f34:	80 f9 16             	cmp    cl,0x16
c0012f37:	75 26                	jne    c0012f5f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012f39:	b8 90 77 02 c0       	mov    eax,0xc0027790
c0012f3e:	84 d2                	test   dl,dl
c0012f40:	74 1d                	je     c0012f5f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012f42:	b8 7d 57 02 c0       	mov    eax,0xc002577d
c0012f47:	80 fa 30             	cmp    dl,0x30
c0012f4a:	75 13                	jne    c0012f5f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012f4c:	b8 a0 77 02 c0       	mov    eax,0xc00277a0
c0012f51:	eb 0c                	jmp    c0012f5f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012f53:	b8 c0 76 02 c0       	mov    eax,0xc00276c0
c0012f58:	eb 05                	jmp    c0012f5f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012f5a:	b8 30 77 02 c0       	mov    eax,0xc0027730
c0012f5f:	5b                   	pop    ebx
c0012f60:	5e                   	pop    esi
c0012f61:	5f                   	pop    edi
c0012f62:	5d                   	pop    ebp
c0012f63:	c3                   	ret    

c0012f64 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0012f64:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f68:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012f6c:	80 f9 04             	cmp    cl,0x4
c0012f6f:	75 6b                	jne    c0012fdc <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0012f71:	b8 20 75 02 c0       	mov    eax,0xc0027520
c0012f76:	80 fa 01             	cmp    dl,0x1
c0012f79:	0f 86 92 02 00 00    	jbe    c0013211 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f7f:	b8 30 75 02 c0       	mov    eax,0xc0027530
c0012f84:	80 fa 02             	cmp    dl,0x2
c0012f87:	0f 84 84 02 00 00    	je     c0013211 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f8d:	b8 40 75 02 c0       	mov    eax,0xc0027540
c0012f92:	80 fa 03             	cmp    dl,0x3
c0012f95:	0f 84 76 02 00 00    	je     c0013211 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f9b:	b8 50 75 02 c0       	mov    eax,0xc0027550
c0012fa0:	80 fa 04             	cmp    dl,0x4
c0012fa3:	0f 84 68 02 00 00    	je     c0013211 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012fa9:	b8 60 75 02 c0       	mov    eax,0xc0027560
c0012fae:	80 fa 05             	cmp    dl,0x5
c0012fb1:	0f 84 5a 02 00 00    	je     c0013211 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012fb7:	b8 40 75 02 c0       	mov    eax,0xc0027540
c0012fbc:	80 fa 07             	cmp    dl,0x7
c0012fbf:	0f 84 4c 02 00 00    	je     c0013211 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012fc5:	83 ea 08             	sub    edx,0x8
c0012fc8:	b8 7d 57 02 c0       	mov    eax,0xc002577d
c0012fcd:	80 fa 01             	cmp    dl,0x1
c0012fd0:	0f 87 3b 02 00 00    	ja     c0013211 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012fd6:	b8 70 75 02 c0       	mov    eax,0xc0027570
c0012fdb:	c3                   	ret    
c0012fdc:	80 f9 05             	cmp    cl,0x5
c0012fdf:	75 45                	jne    c0013026 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0012fe1:	8d 4a ff             	lea    ecx,[edx-0x1]
c0012fe4:	b8 80 75 02 c0       	mov    eax,0xc0027580
c0012fe9:	80 f9 02             	cmp    cl,0x2
c0012fec:	0f 86 1f 02 00 00    	jbe    c0013211 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012ff2:	80 fa 04             	cmp    dl,0x4
c0012ff5:	0f 84 f3 01 00 00    	je     c00131ee <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0012ffb:	80 fa 07             	cmp    dl,0x7
c0012ffe:	0f 84 0d 02 00 00    	je     c0013211 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013004:	b8 90 75 02 c0       	mov    eax,0xc0027590
c0013009:	80 fa 08             	cmp    dl,0x8
c001300c:	0f 84 ff 01 00 00    	je     c0013211 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013012:	b8 7d 57 02 c0       	mov    eax,0xc002577d
c0013017:	80 fa 09             	cmp    dl,0x9
c001301a:	0f 85 f1 01 00 00    	jne    c0013211 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013020:	b8 a0 75 02 c0       	mov    eax,0xc00275a0
c0013025:	c3                   	ret    
c0013026:	80 f9 06             	cmp    cl,0x6
c0013029:	0f 85 85 01 00 00    	jne    c00131b4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c001302f:	b8 b0 75 02 c0       	mov    eax,0xc00275b0
c0013034:	80 fa 01             	cmp    dl,0x1
c0013037:	0f 84 d4 01 00 00    	je     c0013211 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001303d:	8d 42 fb             	lea    eax,[edx-0x5]
c0013040:	3c 01                	cmp    al,0x1
c0013042:	0f 86 ac 01 00 00    	jbe    c00131f4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0013048:	80 fa 03             	cmp    dl,0x3
c001304b:	0f 84 a3 01 00 00    	je     c00131f4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0013051:	8d 4a f9             	lea    ecx,[edx-0x7]
c0013054:	b8 d0 75 02 c0       	mov    eax,0xc00275d0
c0013059:	80 f9 01             	cmp    cl,0x1
c001305c:	0f 86 af 01 00 00    	jbe    c0013211 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013062:	80 fa 09             	cmp    dl,0x9
c0013065:	0f 84 8f 01 00 00    	je     c00131fa <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c001306b:	8d 4a f6             	lea    ecx,[edx-0xa]
c001306e:	80 f9 01             	cmp    cl,0x1
c0013071:	0f 86 9a 01 00 00    	jbe    c0013211 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013077:	b8 e0 75 02 c0       	mov    eax,0xc00275e0
c001307c:	80 fa 0d             	cmp    dl,0xd
c001307f:	0f 84 8c 01 00 00    	je     c0013211 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013085:	b8 f0 75 02 c0       	mov    eax,0xc00275f0
c001308a:	80 fa 0e             	cmp    dl,0xe
c001308d:	0f 84 7e 01 00 00    	je     c0013211 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013093:	b8 00 76 02 c0       	mov    eax,0xc0027600
c0013098:	80 fa 0f             	cmp    dl,0xf
c001309b:	0f 84 70 01 00 00    	je     c0013211 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00130a1:	b8 e0 75 02 c0       	mov    eax,0xc00275e0
c00130a6:	80 fa 15             	cmp    dl,0x15
c00130a9:	0f 84 62 01 00 00    	je     c0013211 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00130af:	8d 4a ea             	lea    ecx,[edx-0x16]
c00130b2:	b8 00 76 02 c0       	mov    eax,0xc0027600
c00130b7:	80 f9 01             	cmp    cl,0x1
c00130ba:	0f 86 51 01 00 00    	jbe    c0013211 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00130c0:	80 fa 1a             	cmp    dl,0x1a
c00130c3:	0f 84 37 01 00 00    	je     c0013200 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c00130c9:	80 fa 1c             	cmp    dl,0x1c
c00130cc:	0f 84 34 01 00 00    	je     c0013206 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c00130d2:	80 fa 1d             	cmp    dl,0x1d
c00130d5:	0f 84 36 01 00 00    	je     c0013211 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00130db:	b8 30 76 02 c0       	mov    eax,0xc0027630
c00130e0:	80 fa 25             	cmp    dl,0x25
c00130e3:	0f 84 28 01 00 00    	je     c0013211 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00130e9:	8d 4a da             	lea    ecx,[edx-0x26]
c00130ec:	b8 20 76 02 c0       	mov    eax,0xc0027620
c00130f1:	80 f9 01             	cmp    cl,0x1
c00130f4:	0f 86 17 01 00 00    	jbe    c0013211 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00130fa:	b8 40 76 02 c0       	mov    eax,0xc0027640
c00130ff:	80 fa 2a             	cmp    dl,0x2a
c0013102:	0f 84 09 01 00 00    	je     c0013211 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013108:	b8 30 76 02 c0       	mov    eax,0xc0027630
c001310d:	80 fa 2c             	cmp    dl,0x2c
c0013110:	0f 84 fb 00 00 00    	je     c0013211 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013116:	b8 40 76 02 c0       	mov    eax,0xc0027640
c001311b:	80 fa 2d             	cmp    dl,0x2d
c001311e:	0f 84 ed 00 00 00    	je     c0013211 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013124:	b8 10 76 02 c0       	mov    eax,0xc0027610
c0013129:	80 fa 2e             	cmp    dl,0x2e
c001312c:	0f 84 df 00 00 00    	je     c0013211 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013132:	b8 30 76 02 c0       	mov    eax,0xc0027630
c0013137:	80 fa 2f             	cmp    dl,0x2f
c001313a:	0f 84 d1 00 00 00    	je     c0013211 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013140:	8d 4a cb             	lea    ecx,[edx-0x35]
c0013143:	b8 20 76 02 c0       	mov    eax,0xc0027620
c0013148:	80 f9 01             	cmp    cl,0x1
c001314b:	0f 86 c0 00 00 00    	jbe    c0013211 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013151:	b8 50 76 02 c0       	mov    eax,0xc0027650
c0013156:	80 fa 37             	cmp    dl,0x37
c0013159:	0f 84 b2 00 00 00    	je     c0013211 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001315f:	b8 60 76 02 c0       	mov    eax,0xc0027660
c0013164:	80 fa 3a             	cmp    dl,0x3a
c0013167:	0f 84 a4 00 00 00    	je     c0013211 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001316d:	b8 70 76 02 c0       	mov    eax,0xc0027670
c0013172:	80 fa 3c             	cmp    dl,0x3c
c0013175:	0f 84 96 00 00 00    	je     c0013211 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001317b:	b8 80 76 02 c0       	mov    eax,0xc0027680
c0013180:	80 fa 3d             	cmp    dl,0x3d
c0013183:	0f 84 88 00 00 00    	je     c0013211 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013189:	b8 60 76 02 c0       	mov    eax,0xc0027660
c001318e:	80 fa 3e             	cmp    dl,0x3e
c0013191:	74 7e                	je     c0013211 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013193:	8d 42 bb             	lea    eax,[edx-0x45]
c0013196:	3c 01                	cmp    al,0x1
c0013198:	76 72                	jbe    c001320c <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c001319a:	80 fa 3f             	cmp    dl,0x3f
c001319d:	74 6d                	je     c001320c <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c001319f:	80 fa 4a             	cmp    dl,0x4a
c00131a2:	74 0a                	je     c00131ae <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c00131a4:	b8 7d 57 02 c0       	mov    eax,0xc002577d
c00131a9:	80 fa 4d             	cmp    dl,0x4d
c00131ac:	75 63                	jne    c0013211 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00131ae:	b8 50 76 02 c0       	mov    eax,0xc0027650
c00131b3:	c3                   	ret    
c00131b4:	b8 7d 57 02 c0       	mov    eax,0xc002577d
c00131b9:	80 f9 0b             	cmp    cl,0xb
c00131bc:	75 0a                	jne    c00131c8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c00131be:	fe ca                	dec    dl
c00131c0:	75 4f                	jne    c0013211 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00131c2:	b8 90 76 02 c0       	mov    eax,0xc0027690
c00131c7:	c3                   	ret    
c00131c8:	80 f9 0f             	cmp    cl,0xf
c00131cb:	75 44                	jne    c0013211 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00131cd:	b8 a0 76 02 c0       	mov    eax,0xc00276a0
c00131d2:	80 fa 02             	cmp    dl,0x2
c00131d5:	76 3a                	jbe    c0013211 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00131d7:	8d 42 fd             	lea    eax,[edx-0x3]
c00131da:	3c 01                	cmp    al,0x1
c00131dc:	76 0a                	jbe    c00131e8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c00131de:	b8 7d 57 02 c0       	mov    eax,0xc002577d
c00131e3:	80 fa 06             	cmp    dl,0x6
c00131e6:	75 29                	jne    c0013211 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00131e8:	b8 b0 76 02 c0       	mov    eax,0xc00276b0
c00131ed:	c3                   	ret    
c00131ee:	b8 90 75 02 c0       	mov    eax,0xc0027590
c00131f3:	c3                   	ret    
c00131f4:	b8 c0 75 02 c0       	mov    eax,0xc00275c0
c00131f9:	c3                   	ret    
c00131fa:	b8 e0 75 02 c0       	mov    eax,0xc00275e0
c00131ff:	c3                   	ret    
c0013200:	b8 10 76 02 c0       	mov    eax,0xc0027610
c0013205:	c3                   	ret    
c0013206:	b8 20 76 02 c0       	mov    eax,0xc0027620
c001320b:	c3                   	ret    
c001320c:	b8 70 76 02 c0       	mov    eax,0xc0027670
c0013211:	c3                   	ret    

c0013212 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0013212:	60                   	pusha  
c0013213:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013217:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001321b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001321f:	9c                   	pushf  
c0013220:	fa                   	cli    
c0013221:	0f 09                	wbinvd 
c0013223:	0f 30                	wrmsr  
c0013225:	9d                   	popf   
c0013226:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001322a:	89 02                	mov    DWORD PTR [edx],eax
c001322c:	61                   	popa   
c001322d:	c3                   	ret    

c001322e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c001322e:	60                   	pusha  
c001322f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013233:	9c                   	pushf  
c0013234:	fa                   	cli    
c0013235:	0f 09                	wbinvd 
c0013237:	31 c0                	xor    eax,eax
c0013239:	31 d2                	xor    edx,edx
c001323b:	0f 32                	rdmsr  
c001323d:	9d                   	popf   
c001323e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013242:	89 02                	mov    DWORD PTR [edx],eax
c0013244:	61                   	popa   
c0013245:	c3                   	ret    

c0013246 <CPU::AMD_K6_writeback(int, int, int)>:
c0013246:	56                   	push   esi
c0013247:	53                   	push   ebx
c0013248:	83 ec 10             	sub    esp,0x10
c001324b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001324f:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0013254:	75 5d                	jne    c00132b3 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0013256:	83 f8 08             	cmp    eax,0x8
c0013259:	75 09                	jne    c0013264 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c001325b:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0013260:	7e 13                	jle    c0013275 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0013262:	eb 30                	jmp    c0013294 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0013264:	83 f8 06             	cmp    eax,0x6
c0013267:	7c 4a                	jl     c00132b3 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0013269:	83 f8 07             	cmp    eax,0x7
c001326c:	7e 07                	jle    c0013275 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001326e:	83 f8 09             	cmp    eax,0x9
c0013271:	74 21                	je     c0013294 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0013273:	eb 3e                	jmp    c00132b3 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0013275:	89 e6                	mov    esi,esp
c0013277:	8b 1d 2c 7e 02 c0    	mov    ebx,DWORD PTR ds:0xc0027e2c
c001327d:	56                   	push   esi
c001327e:	c1 eb 15             	shr    ebx,0x15
c0013281:	68 82 00 00 c0       	push   0xc0000082
c0013286:	83 e3 7e             	and    ebx,0x7e
c0013289:	e8 a0 ff ff ff       	call   c001322e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001328e:	56                   	push   esi
c001328f:	6a 00                	push   0x0
c0013291:	53                   	push   ebx
c0013292:	eb 12                	jmp    c00132a6 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0013294:	89 e3                	mov    ebx,esp
c0013296:	53                   	push   ebx
c0013297:	68 82 00 00 c0       	push   0xc0000082
c001329c:	e8 8d ff ff ff       	call   c001322e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00132a1:	53                   	push   ebx
c00132a2:	6a 00                	push   0x0
c00132a4:	6a 00                	push   0x0
c00132a6:	68 82 00 00 c0       	push   0xc0000082
c00132ab:	e8 62 ff ff ff       	call   c0013212 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c00132b0:	83 c4 18             	add    esp,0x18
c00132b3:	83 c4 10             	add    esp,0x10
c00132b6:	5b                   	pop    ebx
c00132b7:	5e                   	pop    esi
c00132b8:	c3                   	ret    
c00132b9:	90                   	nop

c00132ba <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00132ba:	55                   	push   ebp
c00132bb:	57                   	push   edi
c00132bc:	56                   	push   esi
c00132bd:	53                   	push   ebx
c00132be:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00132c2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00132c6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00132ca:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00132ce:	39 05 c0 77 02 c0    	cmp    DWORD PTR ds:0xc00277c0,eax
c00132d4:	75 23                	jne    c00132f9 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00132d6:	a1 cc 88 02 c0       	mov    eax,ds:0xc00288cc
c00132db:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00132df:	89 06                	mov    DWORD PTR [esi],eax
c00132e1:	a1 c8 88 02 c0       	mov    eax,ds:0xc00288c8
c00132e6:	89 07                	mov    DWORD PTR [edi],eax
c00132e8:	a1 c4 88 02 c0       	mov    eax,ds:0xc00288c4
c00132ed:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00132f0:	a1 c0 88 02 c0       	mov    eax,ds:0xc00288c0
c00132f5:	89 02                	mov    DWORD PTR [edx],eax
c00132f7:	eb 3f                	jmp    c0013338 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00132f9:	31 c9                	xor    ecx,ecx
c00132fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00132ff:	0f a2                	cpuid  
c0013301:	89 06                	mov    DWORD PTR [esi],eax
c0013303:	89 1f                	mov    DWORD PTR [edi],ebx
c0013305:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013309:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c001330c:	89 10                	mov    DWORD PTR [eax],edx
c001330e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013312:	a3 c0 77 02 c0       	mov    ds:0xc00277c0,eax
c0013317:	8b 06                	mov    eax,DWORD PTR [esi]
c0013319:	a3 cc 88 02 c0       	mov    ds:0xc00288cc,eax
c001331e:	8b 07                	mov    eax,DWORD PTR [edi]
c0013320:	a3 c8 88 02 c0       	mov    ds:0xc00288c8,eax
c0013325:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013328:	a3 c4 88 02 c0       	mov    ds:0xc00288c4,eax
c001332d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013331:	8b 00                	mov    eax,DWORD PTR [eax]
c0013333:	a3 c0 88 02 c0       	mov    ds:0xc00288c0,eax
c0013338:	5b                   	pop    ebx
c0013339:	5e                   	pop    esi
c001333a:	5f                   	pop    edi
c001333b:	5d                   	pop    ebp
c001333c:	c3                   	ret    
c001333d:	90                   	nop

c001333e <CPU::cpuidCheckEDX(unsigned int)>:
c001333e:	83 ec 10             	sub    esp,0x10
c0013341:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013345:	50                   	push   eax
c0013346:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001334a:	50                   	push   eax
c001334b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001334f:	50                   	push   eax
c0013350:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013354:	50                   	push   eax
c0013355:	6a 01                	push   0x1
c0013357:	e8 5e ff ff ff       	call   c00132ba <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001335c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013360:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0013364:	0f 95 c0             	setne  al
c0013367:	83 c4 24             	add    esp,0x24
c001336a:	c3                   	ret    
c001336b:	90                   	nop

c001336c <CPU::cpuidCheckECX(unsigned int)>:
c001336c:	83 ec 10             	sub    esp,0x10
c001336f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013373:	50                   	push   eax
c0013374:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013378:	50                   	push   eax
c0013379:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001337d:	50                   	push   eax
c001337e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013382:	50                   	push   eax
c0013383:	6a 01                	push   0x1
c0013385:	e8 30 ff ff ff       	call   c00132ba <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001338a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001338e:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0013392:	0f 95 c0             	setne  al
c0013395:	83 c4 24             	add    esp,0x24
c0013398:	c3                   	ret    
c0013399:	90                   	nop

c001339a <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c001339a:	83 ec 10             	sub    esp,0x10
c001339d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00133a1:	50                   	push   eax
c00133a2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00133a6:	50                   	push   eax
c00133a7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00133ab:	50                   	push   eax
c00133ac:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00133b0:	50                   	push   eax
c00133b1:	6a 07                	push   0x7
c00133b3:	e8 02 ff ff ff       	call   c00132ba <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00133b8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00133bc:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00133c0:	0f 95 c0             	setne  al
c00133c3:	83 c4 24             	add    esp,0x24
c00133c6:	c3                   	ret    
c00133c7:	90                   	nop

c00133c8 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00133c8:	83 ec 10             	sub    esp,0x10
c00133cb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00133cf:	50                   	push   eax
c00133d0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00133d4:	50                   	push   eax
c00133d5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00133d9:	50                   	push   eax
c00133da:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00133de:	50                   	push   eax
c00133df:	6a 07                	push   0x7
c00133e1:	e8 d4 fe ff ff       	call   c00132ba <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00133e6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00133ea:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00133ee:	0f 95 c0             	setne  al
c00133f1:	83 c4 24             	add    esp,0x24
c00133f4:	c3                   	ret    
c00133f5:	90                   	nop

c00133f6 <CPU::CPU()>:
c00133f6:	83 ec 0c             	sub    esp,0xc
c00133f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133fd:	83 ec 08             	sub    esp,0x8
c0013400:	68 7d 57 02 c0       	push   0xc002577d
c0013405:	50                   	push   eax
c0013406:	e8 6f b2 ff ff       	call   c000e67a <Device::Device(char const*)>
c001340b:	83 c4 10             	add    esp,0x10
c001340e:	ba e0 59 02 c0       	mov    edx,0xc00259e0
c0013413:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013417:	89 10                	mov    DWORD PTR [eax],edx
c0013419:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001341d:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0013427:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001342b:	05 78 01 00 00       	add    eax,0x178
c0013430:	83 ec 0c             	sub    esp,0xc
c0013433:	50                   	push   eax
c0013434:	e8 f1 60 ff ff       	call   c000952a <GDT::GDT()>
c0013439:	83 c4 10             	add    esp,0x10
c001343c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013440:	05 7c 09 00 00       	add    eax,0x97c
c0013445:	83 ec 0c             	sub    esp,0xc
c0013448:	50                   	push   eax
c0013449:	e8 56 63 ff ff       	call   c00097a4 <IDT::IDT()>
c001344e:	83 c4 10             	add    esp,0x10
c0013451:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013455:	05 7c 11 00 00       	add    eax,0x117c
c001345a:	83 ec 0c             	sub    esp,0xc
c001345d:	50                   	push   eax
c001345e:	e8 49 81 ff ff       	call   c000b5ac <TSS::TSS()>
c0013463:	83 c4 10             	add    esp,0x10
c0013466:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001346a:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0013471:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013475:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c001347f:	90                   	nop
c0013480:	83 c4 0c             	add    esp,0xc
c0013483:	c3                   	ret    

c0013484 <CPU::displayFeatures()>:
c0013484:	53                   	push   ebx
c0013485:	83 ec 10             	sub    esp,0x10
c0013488:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001348c:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0013492:	68 74 54 02 c0       	push   0xc0025474
c0013497:	e8 29 9b ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001349c:	58                   	pop    eax
c001349d:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c00134a3:	5a                   	pop    edx
c00134a4:	50                   	push   eax
c00134a5:	68 85 54 02 c0       	push   0xc0025485
c00134aa:	e8 16 9b ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00134af:	59                   	pop    ecx
c00134b0:	58                   	pop    eax
c00134b1:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00134b7:	c1 e8 0e             	shr    eax,0xe
c00134ba:	0f b6 c0             	movzx  eax,al
c00134bd:	50                   	push   eax
c00134be:	68 96 54 02 c0       	push   0xc0025496
c00134c3:	e8 fd 9a ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00134c8:	58                   	pop    eax
c00134c9:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00134cf:	5a                   	pop    edx
c00134d0:	66 c1 e8 06          	shr    ax,0x6
c00134d4:	0f b6 c0             	movzx  eax,al
c00134d7:	50                   	push   eax
c00134d8:	68 a7 54 02 c0       	push   0xc00254a7
c00134dd:	e8 e3 9a ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00134e2:	c7 04 24 a7 5a 02 c0 	mov    DWORD PTR [esp],0xc0025aa7
c00134e9:	e8 d7 9a ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00134ee:	83 c4 10             	add    esp,0x10
c00134f1:	b8 85 3b 02 c0       	mov    eax,0xc0023b85
c00134f6:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c00134fd:	74 05                	je     c0013504 <CPU::displayFeatures()+0x80>
c00134ff:	b8 81 3b 02 c0       	mov    eax,0xc0023b81
c0013504:	51                   	push   ecx
c0013505:	51                   	push   ecx
c0013506:	50                   	push   eax
c0013507:	68 b8 54 02 c0       	push   0xc00254b8
c001350c:	e8 b4 9a ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0013511:	83 c4 10             	add    esp,0x10
c0013514:	b8 81 3b 02 c0       	mov    eax,0xc0023b81
c0013519:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0013520:	78 05                	js     c0013527 <CPU::displayFeatures()+0xa3>
c0013522:	b8 85 3b 02 c0       	mov    eax,0xc0023b85
c0013527:	52                   	push   edx
c0013528:	52                   	push   edx
c0013529:	50                   	push   eax
c001352a:	68 cf 54 02 c0       	push   0xc00254cf
c001352f:	e8 91 9a ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0013534:	83 c4 10             	add    esp,0x10
c0013537:	b8 81 3b 02 c0       	mov    eax,0xc0023b81
c001353c:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0013543:	75 05                	jne    c001354a <CPU::displayFeatures()+0xc6>
c0013545:	b8 85 3b 02 c0       	mov    eax,0xc0023b85
c001354a:	51                   	push   ecx
c001354b:	51                   	push   ecx
c001354c:	50                   	push   eax
c001354d:	68 e6 54 02 c0       	push   0xc00254e6
c0013552:	e8 6e 9a ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0013557:	83 c4 10             	add    esp,0x10
c001355a:	b8 81 3b 02 c0       	mov    eax,0xc0023b81
c001355f:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0013566:	75 05                	jne    c001356d <CPU::displayFeatures()+0xe9>
c0013568:	b8 85 3b 02 c0       	mov    eax,0xc0023b85
c001356d:	52                   	push   edx
c001356e:	52                   	push   edx
c001356f:	50                   	push   eax
c0013570:	68 fd 54 02 c0       	push   0xc00254fd
c0013575:	e8 4b 9a ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001357a:	83 c4 10             	add    esp,0x10
c001357d:	b8 81 3b 02 c0       	mov    eax,0xc0023b81
c0013582:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0013589:	75 05                	jne    c0013590 <CPU::displayFeatures()+0x10c>
c001358b:	b8 85 3b 02 c0       	mov    eax,0xc0023b85
c0013590:	51                   	push   ecx
c0013591:	51                   	push   ecx
c0013592:	50                   	push   eax
c0013593:	68 14 55 02 c0       	push   0xc0025514
c0013598:	e8 28 9a ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001359d:	83 c4 10             	add    esp,0x10
c00135a0:	b8 81 3b 02 c0       	mov    eax,0xc0023b81
c00135a5:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c00135ac:	75 05                	jne    c00135b3 <CPU::displayFeatures()+0x12f>
c00135ae:	b8 85 3b 02 c0       	mov    eax,0xc0023b85
c00135b3:	52                   	push   edx
c00135b4:	52                   	push   edx
c00135b5:	50                   	push   eax
c00135b6:	68 2b 55 02 c0       	push   0xc002552b
c00135bb:	e8 05 9a ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00135c0:	83 c4 10             	add    esp,0x10
c00135c3:	b8 81 3b 02 c0       	mov    eax,0xc0023b81
c00135c8:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c00135cf:	75 05                	jne    c00135d6 <CPU::displayFeatures()+0x152>
c00135d1:	b8 85 3b 02 c0       	mov    eax,0xc0023b85
c00135d6:	51                   	push   ecx
c00135d7:	51                   	push   ecx
c00135d8:	50                   	push   eax
c00135d9:	68 42 55 02 c0       	push   0xc0025542
c00135de:	e8 e2 99 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00135e3:	83 c4 10             	add    esp,0x10
c00135e6:	b8 81 3b 02 c0       	mov    eax,0xc0023b81
c00135eb:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c00135f2:	75 05                	jne    c00135f9 <CPU::displayFeatures()+0x175>
c00135f4:	b8 85 3b 02 c0       	mov    eax,0xc0023b85
c00135f9:	52                   	push   edx
c00135fa:	52                   	push   edx
c00135fb:	50                   	push   eax
c00135fc:	68 59 55 02 c0       	push   0xc0025559
c0013601:	e8 bf 99 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0013606:	83 c4 10             	add    esp,0x10
c0013609:	b8 81 3b 02 c0       	mov    eax,0xc0023b81
c001360e:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0013615:	75 05                	jne    c001361c <CPU::displayFeatures()+0x198>
c0013617:	b8 85 3b 02 c0       	mov    eax,0xc0023b85
c001361c:	51                   	push   ecx
c001361d:	51                   	push   ecx
c001361e:	50                   	push   eax
c001361f:	68 70 55 02 c0       	push   0xc0025570
c0013624:	e8 9c 99 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0013629:	83 c4 10             	add    esp,0x10
c001362c:	b8 81 3b 02 c0       	mov    eax,0xc0023b81
c0013631:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0013638:	75 05                	jne    c001363f <CPU::displayFeatures()+0x1bb>
c001363a:	b8 85 3b 02 c0       	mov    eax,0xc0023b85
c001363f:	52                   	push   edx
c0013640:	52                   	push   edx
c0013641:	50                   	push   eax
c0013642:	68 87 55 02 c0       	push   0xc0025587
c0013647:	e8 79 99 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001364c:	83 c4 10             	add    esp,0x10
c001364f:	b8 81 3b 02 c0       	mov    eax,0xc0023b81
c0013654:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c001365b:	75 05                	jne    c0013662 <CPU::displayFeatures()+0x1de>
c001365d:	b8 85 3b 02 c0       	mov    eax,0xc0023b85
c0013662:	51                   	push   ecx
c0013663:	51                   	push   ecx
c0013664:	50                   	push   eax
c0013665:	68 9e 55 02 c0       	push   0xc002559e
c001366a:	e8 56 99 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001366f:	83 c4 10             	add    esp,0x10
c0013672:	b8 81 3b 02 c0       	mov    eax,0xc0023b81
c0013677:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c001367e:	75 05                	jne    c0013685 <CPU::displayFeatures()+0x201>
c0013680:	b8 85 3b 02 c0       	mov    eax,0xc0023b85
c0013685:	52                   	push   edx
c0013686:	52                   	push   edx
c0013687:	50                   	push   eax
c0013688:	68 b5 55 02 c0       	push   0xc00255b5
c001368d:	e8 33 99 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0013692:	83 c4 10             	add    esp,0x10
c0013695:	b8 81 3b 02 c0       	mov    eax,0xc0023b81
c001369a:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c00136a1:	75 05                	jne    c00136a8 <CPU::displayFeatures()+0x224>
c00136a3:	b8 85 3b 02 c0       	mov    eax,0xc0023b85
c00136a8:	51                   	push   ecx
c00136a9:	51                   	push   ecx
c00136aa:	50                   	push   eax
c00136ab:	68 cc 55 02 c0       	push   0xc00255cc
c00136b0:	e8 10 99 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00136b5:	83 c4 10             	add    esp,0x10
c00136b8:	b8 81 3b 02 c0       	mov    eax,0xc0023b81
c00136bd:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c00136c4:	78 05                	js     c00136cb <CPU::displayFeatures()+0x247>
c00136c6:	b8 85 3b 02 c0       	mov    eax,0xc0023b85
c00136cb:	52                   	push   edx
c00136cc:	52                   	push   edx
c00136cd:	50                   	push   eax
c00136ce:	68 e3 55 02 c0       	push   0xc00255e3
c00136d3:	e8 ed 98 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00136d8:	83 c4 10             	add    esp,0x10
c00136db:	b8 81 3b 02 c0       	mov    eax,0xc0023b81
c00136e0:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c00136e7:	75 05                	jne    c00136ee <CPU::displayFeatures()+0x26a>
c00136e9:	b8 85 3b 02 c0       	mov    eax,0xc0023b85
c00136ee:	51                   	push   ecx
c00136ef:	51                   	push   ecx
c00136f0:	50                   	push   eax
c00136f1:	68 fa 55 02 c0       	push   0xc00255fa
c00136f6:	e8 ca 98 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00136fb:	83 c4 10             	add    esp,0x10
c00136fe:	b8 81 3b 02 c0       	mov    eax,0xc0023b81
c0013703:	f6 83 92 11 00 00 02 	test   BYTE PTR [ebx+0x1192],0x2
c001370a:	75 05                	jne    c0013711 <CPU::displayFeatures()+0x28d>
c001370c:	b8 85 3b 02 c0       	mov    eax,0xc0023b85
c0013711:	52                   	push   edx
c0013712:	52                   	push   edx
c0013713:	50                   	push   eax
c0013714:	68 11 56 02 c0       	push   0xc0025611
c0013719:	e8 a7 98 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001371e:	83 c4 18             	add    esp,0x18
c0013721:	5b                   	pop    ebx
c0013722:	c3                   	ret    
c0013723:	90                   	nop

c0013724 <CPU::detectFeatures()>:
c0013724:	55                   	push   ebp
c0013725:	57                   	push   edi
c0013726:	56                   	push   esi
c0013727:	53                   	push   ebx
c0013728:	83 ec 50             	sub    esp,0x50
c001372b:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c001372f:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0013739:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0013740:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0013746:	6a 0d                	push   0xd
c0013748:	6a 00                	push   0x0
c001374a:	55                   	push   ebp
c001374b:	e8 2c cf fe ff       	call   c000067c <memset>
c0013750:	83 c4 10             	add    esp,0x10
c0013753:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c0013758:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c001375f:	0f 84 22 09 00 00    	je     c0014087 <CPU::detectFeatures()+0x963>
c0013765:	83 ec 0c             	sub    esp,0xc
c0013768:	89 ef                	mov    edi,ebp
c001376a:	6a 10                	push   0x10
c001376c:	e8 cd fb ff ff       	call   c001333e <CPU::cpuidCheckEDX(unsigned int)>
c0013771:	83 e0 01             	and    eax,0x1
c0013774:	8d 14 00             	lea    edx,[eax+eax*1]
c0013777:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001377d:	83 e0 fd             	and    eax,0xfffffffd
c0013780:	09 d0                	or     eax,edx
c0013782:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013788:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c001378f:	e8 aa fb ff ff       	call   c001333e <CPU::cpuidCheckEDX(unsigned int)>
c0013794:	83 e0 01             	and    eax,0x1
c0013797:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001379e:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00137a4:	83 e0 fb             	and    eax,0xfffffffb
c00137a7:	09 d0                	or     eax,edx
c00137a9:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00137af:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00137b6:	e8 83 fb ff ff       	call   c001333e <CPU::cpuidCheckEDX(unsigned int)>
c00137bb:	83 e0 01             	and    eax,0x1
c00137be:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00137c5:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00137cb:	83 e0 f7             	and    eax,0xfffffff7
c00137ce:	09 d0                	or     eax,edx
c00137d0:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00137d6:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00137dd:	e8 5c fb ff ff       	call   c001333e <CPU::cpuidCheckEDX(unsigned int)>
c00137e2:	83 e0 01             	and    eax,0x1
c00137e5:	c1 e0 04             	shl    eax,0x4
c00137e8:	88 c2                	mov    dl,al
c00137ea:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00137f0:	83 e0 ef             	and    eax,0xffffffef
c00137f3:	09 d0                	or     eax,edx
c00137f5:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00137fb:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0013802:	e8 37 fb ff ff       	call   c001333e <CPU::cpuidCheckEDX(unsigned int)>
c0013807:	83 e0 01             	and    eax,0x1
c001380a:	c1 e0 05             	shl    eax,0x5
c001380d:	88 c2                	mov    dl,al
c001380f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013815:	83 e0 df             	and    eax,0xffffffdf
c0013818:	09 d0                	or     eax,edx
c001381a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013820:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0013827:	e8 12 fb ff ff       	call   c001333e <CPU::cpuidCheckEDX(unsigned int)>
c001382c:	83 e0 01             	and    eax,0x1
c001382f:	8d 14 00             	lea    edx,[eax+eax*1]
c0013832:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0013838:	83 e0 fd             	and    eax,0xfffffffd
c001383b:	09 d0                	or     eax,edx
c001383d:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0013843:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001384a:	e8 ef fa ff ff       	call   c001333e <CPU::cpuidCheckEDX(unsigned int)>
c001384f:	83 e0 01             	and    eax,0x1
c0013852:	c1 e0 06             	shl    eax,0x6
c0013855:	88 c2                	mov    dl,al
c0013857:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001385d:	83 e0 bf             	and    eax,0xffffffbf
c0013860:	09 d0                	or     eax,edx
c0013862:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0013868:	58                   	pop    eax
c0013869:	8d 44 24 28          	lea    eax,[esp+0x28]
c001386d:	50                   	push   eax
c001386e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013872:	50                   	push   eax
c0013873:	8d 74 24 28          	lea    esi,[esp+0x28]
c0013877:	56                   	push   esi
c0013878:	8d 44 24 28          	lea    eax,[esp+0x28]
c001387c:	50                   	push   eax
c001387d:	6a 00                	push   0x0
c001387f:	e8 36 fa ff ff       	call   c00132ba <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013884:	b8 04 00 00 00       	mov    eax,0x4
c0013889:	89 c1                	mov    ecx,eax
c001388b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001388d:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0013893:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0013897:	89 c1                	mov    ecx,eax
c0013899:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001389b:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c00138a1:	8d 74 24 38          	lea    esi,[esp+0x38]
c00138a5:	89 c1                	mov    ecx,eax
c00138a7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00138a9:	83 c4 18             	add    esp,0x18
c00138ac:	68 28 56 02 c0       	push   0xc0025628
c00138b1:	55                   	push   ebp
c00138b2:	e8 0d cf fe ff       	call   c00007c4 <strcmp>
c00138b7:	83 c4 10             	add    esp,0x10
c00138ba:	85 c0                	test   eax,eax
c00138bc:	75 0f                	jne    c00138cd <CPU::detectFeatures()+0x1a9>
c00138be:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00138c8:	e9 22 02 00 00       	jmp    c0013aef <CPU::detectFeatures()+0x3cb>
c00138cd:	50                   	push   eax
c00138ce:	50                   	push   eax
c00138cf:	68 35 56 02 c0       	push   0xc0025635
c00138d4:	55                   	push   ebp
c00138d5:	e8 ea ce fe ff       	call   c00007c4 <strcmp>
c00138da:	83 c4 10             	add    esp,0x10
c00138dd:	85 c0                	test   eax,eax
c00138df:	74 dd                	je     c00138be <CPU::detectFeatures()+0x19a>
c00138e1:	50                   	push   eax
c00138e2:	50                   	push   eax
c00138e3:	68 42 56 02 c0       	push   0xc0025642
c00138e8:	55                   	push   ebp
c00138e9:	e8 d6 ce fe ff       	call   c00007c4 <strcmp>
c00138ee:	83 c4 10             	add    esp,0x10
c00138f1:	85 c0                	test   eax,eax
c00138f3:	74 2a                	je     c001391f <CPU::detectFeatures()+0x1fb>
c00138f5:	50                   	push   eax
c00138f6:	50                   	push   eax
c00138f7:	68 4f 56 02 c0       	push   0xc002564f
c00138fc:	55                   	push   ebp
c00138fd:	e8 c2 ce fe ff       	call   c00007c4 <strcmp>
c0013902:	83 c4 10             	add    esp,0x10
c0013905:	85 c0                	test   eax,eax
c0013907:	74 16                	je     c001391f <CPU::detectFeatures()+0x1fb>
c0013909:	50                   	push   eax
c001390a:	50                   	push   eax
c001390b:	68 5c 56 02 c0       	push   0xc002565c
c0013910:	55                   	push   ebp
c0013911:	e8 ae ce fe ff       	call   c00007c4 <strcmp>
c0013916:	83 c4 10             	add    esp,0x10
c0013919:	85 c0                	test   eax,eax
c001391b:	74 48                	je     c0013965 <CPU::detectFeatures()+0x241>
c001391d:	eb 0f                	jmp    c001392e <CPU::detectFeatures()+0x20a>
c001391f:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0013929:	e9 c1 01 00 00       	jmp    c0013aef <CPU::detectFeatures()+0x3cb>
c001392e:	50                   	push   eax
c001392f:	50                   	push   eax
c0013930:	68 69 56 02 c0       	push   0xc0025669
c0013935:	55                   	push   ebp
c0013936:	e8 89 ce fe ff       	call   c00007c4 <strcmp>
c001393b:	83 c4 10             	add    esp,0x10
c001393e:	85 c0                	test   eax,eax
c0013940:	74 23                	je     c0013965 <CPU::detectFeatures()+0x241>
c0013942:	57                   	push   edi
c0013943:	57                   	push   edi
c0013944:	68 76 56 02 c0       	push   0xc0025676
c0013949:	55                   	push   ebp
c001394a:	e8 75 ce fe ff       	call   c00007c4 <strcmp>
c001394f:	83 c4 10             	add    esp,0x10
c0013952:	85 c0                	test   eax,eax
c0013954:	75 1e                	jne    c0013974 <CPU::detectFeatures()+0x250>
c0013956:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0013960:	e9 8a 01 00 00       	jmp    c0013aef <CPU::detectFeatures()+0x3cb>
c0013965:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001396f:	e9 7b 01 00 00       	jmp    c0013aef <CPU::detectFeatures()+0x3cb>
c0013974:	56                   	push   esi
c0013975:	56                   	push   esi
c0013976:	68 83 56 02 c0       	push   0xc0025683
c001397b:	55                   	push   ebp
c001397c:	e8 43 ce fe ff       	call   c00007c4 <strcmp>
c0013981:	83 c4 10             	add    esp,0x10
c0013984:	85 c0                	test   eax,eax
c0013986:	75 0f                	jne    c0013997 <CPU::detectFeatures()+0x273>
c0013988:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0013992:	e9 58 01 00 00       	jmp    c0013aef <CPU::detectFeatures()+0x3cb>
c0013997:	51                   	push   ecx
c0013998:	51                   	push   ecx
c0013999:	68 42 56 02 c0       	push   0xc0025642
c001399e:	55                   	push   ebp
c001399f:	e8 20 ce fe ff       	call   c00007c4 <strcmp>
c00139a4:	83 c4 10             	add    esp,0x10
c00139a7:	85 c0                	test   eax,eax
c00139a9:	75 0f                	jne    c00139ba <CPU::detectFeatures()+0x296>
c00139ab:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00139b5:	e9 35 01 00 00       	jmp    c0013aef <CPU::detectFeatures()+0x3cb>
c00139ba:	52                   	push   edx
c00139bb:	52                   	push   edx
c00139bc:	68 90 56 02 c0       	push   0xc0025690
c00139c1:	55                   	push   ebp
c00139c2:	e8 fd cd fe ff       	call   c00007c4 <strcmp>
c00139c7:	83 c4 10             	add    esp,0x10
c00139ca:	85 c0                	test   eax,eax
c00139cc:	75 0f                	jne    c00139dd <CPU::detectFeatures()+0x2b9>
c00139ce:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00139d8:	e9 12 01 00 00       	jmp    c0013aef <CPU::detectFeatures()+0x3cb>
c00139dd:	50                   	push   eax
c00139de:	50                   	push   eax
c00139df:	68 9d 56 02 c0       	push   0xc002569d
c00139e4:	55                   	push   ebp
c00139e5:	e8 da cd fe ff       	call   c00007c4 <strcmp>
c00139ea:	83 c4 10             	add    esp,0x10
c00139ed:	85 c0                	test   eax,eax
c00139ef:	75 0f                	jne    c0013a00 <CPU::detectFeatures()+0x2dc>
c00139f1:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00139fb:	e9 ef 00 00 00       	jmp    c0013aef <CPU::detectFeatures()+0x3cb>
c0013a00:	50                   	push   eax
c0013a01:	50                   	push   eax
c0013a02:	68 aa 56 02 c0       	push   0xc00256aa
c0013a07:	55                   	push   ebp
c0013a08:	e8 b7 cd fe ff       	call   c00007c4 <strcmp>
c0013a0d:	83 c4 10             	add    esp,0x10
c0013a10:	85 c0                	test   eax,eax
c0013a12:	75 0f                	jne    c0013a23 <CPU::detectFeatures()+0x2ff>
c0013a14:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0013a1e:	e9 cc 00 00 00       	jmp    c0013aef <CPU::detectFeatures()+0x3cb>
c0013a23:	50                   	push   eax
c0013a24:	50                   	push   eax
c0013a25:	68 b7 56 02 c0       	push   0xc00256b7
c0013a2a:	55                   	push   ebp
c0013a2b:	e8 94 cd fe ff       	call   c00007c4 <strcmp>
c0013a30:	83 c4 10             	add    esp,0x10
c0013a33:	85 c0                	test   eax,eax
c0013a35:	75 0f                	jne    c0013a46 <CPU::detectFeatures()+0x322>
c0013a37:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0013a41:	e9 a9 00 00 00       	jmp    c0013aef <CPU::detectFeatures()+0x3cb>
c0013a46:	50                   	push   eax
c0013a47:	50                   	push   eax
c0013a48:	68 c4 56 02 c0       	push   0xc00256c4
c0013a4d:	55                   	push   ebp
c0013a4e:	e8 71 cd fe ff       	call   c00007c4 <strcmp>
c0013a53:	83 c4 10             	add    esp,0x10
c0013a56:	85 c0                	test   eax,eax
c0013a58:	75 0f                	jne    c0013a69 <CPU::detectFeatures()+0x345>
c0013a5a:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0013a64:	e9 86 00 00 00       	jmp    c0013aef <CPU::detectFeatures()+0x3cb>
c0013a69:	50                   	push   eax
c0013a6a:	50                   	push   eax
c0013a6b:	68 d1 56 02 c0       	push   0xc00256d1
c0013a70:	55                   	push   ebp
c0013a71:	e8 4e cd fe ff       	call   c00007c4 <strcmp>
c0013a76:	83 c4 10             	add    esp,0x10
c0013a79:	85 c0                	test   eax,eax
c0013a7b:	75 0c                	jne    c0013a89 <CPU::detectFeatures()+0x365>
c0013a7d:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0013a87:	eb 66                	jmp    c0013aef <CPU::detectFeatures()+0x3cb>
c0013a89:	50                   	push   eax
c0013a8a:	50                   	push   eax
c0013a8b:	68 de 56 02 c0       	push   0xc00256de
c0013a90:	55                   	push   ebp
c0013a91:	e8 2e cd fe ff       	call   c00007c4 <strcmp>
c0013a96:	83 c4 10             	add    esp,0x10
c0013a99:	85 c0                	test   eax,eax
c0013a9b:	75 0c                	jne    c0013aa9 <CPU::detectFeatures()+0x385>
c0013a9d:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0013aa7:	eb 46                	jmp    c0013aef <CPU::detectFeatures()+0x3cb>
c0013aa9:	57                   	push   edi
c0013aaa:	57                   	push   edi
c0013aab:	68 eb 56 02 c0       	push   0xc00256eb
c0013ab0:	55                   	push   ebp
c0013ab1:	e8 0e cd fe ff       	call   c00007c4 <strcmp>
c0013ab6:	83 c4 10             	add    esp,0x10
c0013ab9:	85 c0                	test   eax,eax
c0013abb:	74 e0                	je     c0013a9d <CPU::detectFeatures()+0x379>
c0013abd:	56                   	push   esi
c0013abe:	56                   	push   esi
c0013abf:	68 f8 56 02 c0       	push   0xc00256f8
c0013ac4:	55                   	push   ebp
c0013ac5:	e8 fa cc fe ff       	call   c00007c4 <strcmp>
c0013aca:	83 c4 10             	add    esp,0x10
c0013acd:	85 c0                	test   eax,eax
c0013acf:	74 cc                	je     c0013a9d <CPU::detectFeatures()+0x379>
c0013ad1:	51                   	push   ecx
c0013ad2:	51                   	push   ecx
c0013ad3:	68 05 57 02 c0       	push   0xc0025705
c0013ad8:	55                   	push   ebp
c0013ad9:	e8 e6 cc fe ff       	call   c00007c4 <strcmp>
c0013ade:	83 c4 10             	add    esp,0x10
c0013ae1:	85 c0                	test   eax,eax
c0013ae3:	74 b8                	je     c0013a9d <CPU::detectFeatures()+0x379>
c0013ae5:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0013aef:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0013af4:	0f 86 be 00 00 00    	jbe    c0013bb8 <CPU::detectFeatures()+0x494>
c0013afa:	83 ec 0c             	sub    esp,0xc
c0013afd:	68 80 00 00 00       	push   0x80
c0013b02:	e8 93 f8 ff ff       	call   c001339a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0013b07:	83 e0 01             	and    eax,0x1
c0013b0a:	c1 e0 06             	shl    eax,0x6
c0013b0d:	88 c2                	mov    dl,al
c0013b0f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013b15:	83 e0 bf             	and    eax,0xffffffbf
c0013b18:	09 d0                	or     eax,edx
c0013b1a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013b20:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0013b27:	e8 6e f8 ff ff       	call   c001339a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0013b2c:	83 e0 01             	and    eax,0x1
c0013b2f:	c1 e0 04             	shl    eax,0x4
c0013b32:	88 c2                	mov    dl,al
c0013b34:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0013b3a:	83 e0 ef             	and    eax,0xffffffef
c0013b3d:	09 d0                	or     eax,edx
c0013b3f:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0013b45:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0013b4c:	e8 49 f8 ff ff       	call   c001339a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0013b51:	c1 e0 07             	shl    eax,0x7
c0013b54:	88 c2                	mov    dl,al
c0013b56:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013b5c:	83 e0 7f             	and    eax,0x7f
c0013b5f:	09 d0                	or     eax,edx
c0013b61:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013b67:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0013b6e:	e8 55 f8 ff ff       	call   c00133c8 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0013b73:	83 e0 01             	and    eax,0x1
c0013b76:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0013b7d:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0013b83:	83 e0 f7             	and    eax,0xfffffff7
c0013b86:	09 d0                	or     eax,edx
c0013b88:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0013b8e:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0013b95:	e8 2e f8 ff ff       	call   c00133c8 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0013b9a:	83 c4 10             	add    esp,0x10
c0013b9d:	83 e0 01             	and    eax,0x1
c0013ba0:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0013ba7:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0013bad:	83 e0 fb             	and    eax,0xfffffffb
c0013bb0:	09 d0                	or     eax,edx
c0013bb2:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0013bb8:	83 ec 0c             	sub    esp,0xc
c0013bbb:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013bbf:	50                   	push   eax
c0013bc0:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013bc4:	50                   	push   eax
c0013bc5:	8d 74 24 28          	lea    esi,[esp+0x28]
c0013bc9:	56                   	push   esi
c0013bca:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013bce:	50                   	push   eax
c0013bcf:	6a 01                	push   0x1
c0013bd1:	e8 e4 f6 ff ff       	call   c00132ba <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013bd6:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013bda:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0013be0:	88 ca                	mov    dl,cl
c0013be2:	83 e0 f0             	and    eax,0xfffffff0
c0013be5:	83 e2 0f             	and    edx,0xf
c0013be8:	09 d0                	or     eax,edx
c0013bea:	88 ca                	mov    dl,cl
c0013bec:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0013bf2:	c0 ea 04             	shr    dl,0x4
c0013bf5:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0013bf9:	0f b6 c2             	movzx  eax,dl
c0013bfc:	83 c4 20             	add    esp,0x20
c0013bff:	c1 e0 06             	shl    eax,0x6
c0013c02:	89 c7                	mov    edi,eax
c0013c04:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013c0a:	66 25 3f c0          	and    ax,0xc03f
c0013c0e:	09 f8                	or     eax,edi
c0013c10:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0013c17:	89 c8                	mov    eax,ecx
c0013c19:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c0013c20:	c1 e8 08             	shr    eax,0x8
c0013c23:	83 e5 3f             	and    ebp,0x3f
c0013c26:	83 e0 0f             	and    eax,0xf
c0013c29:	89 c7                	mov    edi,eax
c0013c2b:	c1 e7 06             	shl    edi,0x6
c0013c2e:	09 ef                	or     edi,ebp
c0013c30:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c0013c37:	89 fa                	mov    edx,edi
c0013c39:	83 e5 c0             	and    ebp,0xffffffc0
c0013c3c:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0013c42:	88 c2                	mov    dl,al
c0013c44:	c0 ea 02             	shr    dl,0x2
c0013c47:	89 d7                	mov    edi,edx
c0013c49:	09 ef                	or     edi,ebp
c0013c4b:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0013c51:	89 fa                	mov    edx,edi
c0013c53:	83 e5 cf             	and    ebp,0xffffffcf
c0013c56:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0013c5c:	89 cf                	mov    edi,ecx
c0013c5e:	c1 ef 0c             	shr    edi,0xc
c0013c61:	83 e7 03             	and    edi,0x3
c0013c64:	c1 e7 04             	shl    edi,0x4
c0013c67:	09 ef                	or     edi,ebp
c0013c69:	3c 06                	cmp    al,0x6
c0013c6b:	89 fa                	mov    edx,edi
c0013c6d:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0013c73:	74 04                	je     c0013c79 <CPU::detectFeatures()+0x555>
c0013c75:	3c 0f                	cmp    al,0xf
c0013c77:	75 5c                	jne    c0013cd5 <CPU::detectFeatures()+0x5b1>
c0013c79:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0013c7d:	89 cf                	mov    edi,ecx
c0013c7f:	c1 ef 10             	shr    edi,0x10
c0013c82:	c1 e7 04             	shl    edi,0x4
c0013c85:	09 fa                	or     edx,edi
c0013c87:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c0013c8d:	0f b6 d2             	movzx  edx,dl
c0013c90:	66 81 e7 3f c0       	and    di,0xc03f
c0013c95:	c1 e2 06             	shl    edx,0x6
c0013c98:	09 fa                	or     edx,edi
c0013c9a:	3c 0f                	cmp    al,0xf
c0013c9c:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0013ca3:	75 30                	jne    c0013cd5 <CPU::detectFeatures()+0x5b1>
c0013ca5:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0013cab:	c1 e9 14             	shr    ecx,0x14
c0013cae:	83 e0 3f             	and    eax,0x3f
c0013cb1:	83 c1 0f             	add    ecx,0xf
c0013cb4:	88 ca                	mov    dl,cl
c0013cb6:	c0 e9 02             	shr    cl,0x2
c0013cb9:	c1 e2 06             	shl    edx,0x6
c0013cbc:	09 d0                	or     eax,edx
c0013cbe:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0013cc4:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0013cca:	83 e0 c0             	and    eax,0xffffffc0
c0013ccd:	09 c1                	or     ecx,eax
c0013ccf:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0013cd5:	83 ec 0c             	sub    esp,0xc
c0013cd8:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0013cdf:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013ce3:	50                   	push   eax
c0013ce4:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0013ce8:	55                   	push   ebp
c0013ce9:	56                   	push   esi
c0013cea:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0013cee:	57                   	push   edi
c0013cef:	68 00 00 00 80       	push   0x80000000
c0013cf4:	e8 c1 f5 ff ff       	call   c00132ba <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013cf9:	83 c4 20             	add    esp,0x20
c0013cfc:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0013d04:	76 22                	jbe    c0013d28 <CPU::detectFeatures()+0x604>
c0013d06:	83 ec 0c             	sub    esp,0xc
c0013d09:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013d0d:	50                   	push   eax
c0013d0e:	55                   	push   ebp
c0013d0f:	56                   	push   esi
c0013d10:	57                   	push   edi
c0013d11:	68 01 00 00 80       	push   0x80000001
c0013d16:	e8 9f f5 ff ff       	call   c00132ba <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013d1b:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0013d25:	83 c4 20             	add    esp,0x20
c0013d28:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0013d2e:	83 f8 01             	cmp    eax,0x1
c0013d31:	75 6f                	jne    c0013da2 <CPU::detectFeatures()+0x67e>
c0013d33:	51                   	push   ecx
c0013d34:	51                   	push   ecx
c0013d35:	68 11 57 02 c0       	push   0xc0025711
c0013d3a:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013d3e:	56                   	push   esi
c0013d3f:	e8 f4 c9 fe ff       	call   c0000738 <strcpy>
c0013d44:	5f                   	pop    edi
c0013d45:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013d4b:	5d                   	pop    ebp
c0013d4c:	66 c1 e8 06          	shr    ax,0x6
c0013d50:	0f b6 c0             	movzx  eax,al
c0013d53:	50                   	push   eax
c0013d54:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013d5a:	c1 e8 0e             	shr    eax,0xe
c0013d5d:	0f b6 c0             	movzx  eax,al
c0013d60:	50                   	push   eax
c0013d61:	e8 fe f1 ff ff       	call   c0012f64 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0013d66:	5a                   	pop    edx
c0013d67:	59                   	pop    ecx
c0013d68:	50                   	push   eax
c0013d69:	56                   	push   esi
c0013d6a:	e8 09 cb fe ff       	call   c0000878 <strcat>
c0013d6f:	5f                   	pop    edi
c0013d70:	5d                   	pop    ebp
c0013d71:	56                   	push   esi
c0013d72:	53                   	push   ebx
c0013d73:	e8 f4 a8 ff ff       	call   c000e66c <Device::setName(char const*)>
c0013d78:	58                   	pop    eax
c0013d79:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0013d7f:	5a                   	pop    edx
c0013d80:	68 18 57 02 c0       	push   0xc0025718
c0013d85:	50                   	push   eax
c0013d86:	e8 39 ca fe ff       	call   c00007c4 <strcmp>
c0013d8b:	83 c4 10             	add    esp,0x10
c0013d8e:	85 c0                	test   eax,eax
c0013d90:	0f 85 71 03 00 00    	jne    c0014107 <CPU::detectFeatures()+0x9e3>
c0013d96:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0013d9d:	e9 65 03 00 00       	jmp    c0014107 <CPU::detectFeatures()+0x9e3>
c0013da2:	83 f8 02             	cmp    eax,0x2
c0013da5:	0f 85 b5 00 00 00    	jne    c0013e60 <CPU::detectFeatures()+0x73c>
c0013dab:	57                   	push   edi
c0013dac:	57                   	push   edi
c0013dad:	68 2a 57 02 c0       	push   0xc002572a
c0013db2:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013db6:	56                   	push   esi
c0013db7:	e8 7c c9 fe ff       	call   c0000738 <strcpy>
c0013dbc:	5d                   	pop    ebp
c0013dbd:	58                   	pop    eax
c0013dbe:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013dc4:	66 c1 e8 06          	shr    ax,0x6
c0013dc8:	0f b6 c0             	movzx  eax,al
c0013dcb:	50                   	push   eax
c0013dcc:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013dd2:	c1 e8 0e             	shr    eax,0xe
c0013dd5:	0f b6 c0             	movzx  eax,al
c0013dd8:	50                   	push   eax
c0013dd9:	e8 f2 ef ff ff       	call   c0012dd0 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0013dde:	5a                   	pop    edx
c0013ddf:	59                   	pop    ecx
c0013de0:	50                   	push   eax
c0013de1:	56                   	push   esi
c0013de2:	e8 91 ca fe ff       	call   c0000878 <strcat>
c0013de7:	5f                   	pop    edi
c0013de8:	5d                   	pop    ebp
c0013de9:	56                   	push   esi
c0013dea:	53                   	push   ebx
c0013deb:	e8 7c a8 ff ff       	call   c000e66c <Device::setName(char const*)>
c0013df0:	58                   	pop    eax
c0013df1:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0013df7:	5a                   	pop    edx
c0013df8:	68 2f 57 02 c0       	push   0xc002572f
c0013dfd:	50                   	push   eax
c0013dfe:	e8 c1 c9 fe ff       	call   c00007c4 <strcmp>
c0013e03:	83 c4 10             	add    esp,0x10
c0013e06:	85 c0                	test   eax,eax
c0013e08:	75 20                	jne    c0013e2a <CPU::detectFeatures()+0x706>
c0013e0a:	8b 15 08 7e 02 c0    	mov    edx,DWORD PTR ds:0xc0027e08
c0013e10:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0013e16:	a8 01                	test   al,0x1
c0013e18:	74 10                	je     c0013e2a <CPU::detectFeatures()+0x706>
c0013e1a:	83 e0 fe             	and    eax,0xfffffffe
c0013e1d:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0013e23:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0013e2a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013e30:	c1 e8 0e             	shr    eax,0xe
c0013e33:	3c 05                	cmp    al,0x5
c0013e35:	0f 85 cc 02 00 00    	jne    c0014107 <CPU::detectFeatures()+0x9e3>
c0013e3b:	56                   	push   esi
c0013e3c:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0013e42:	83 e0 0f             	and    eax,0xf
c0013e45:	50                   	push   eax
c0013e46:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013e4c:	66 c1 e8 06          	shr    ax,0x6
c0013e50:	0f b6 c0             	movzx  eax,al
c0013e53:	50                   	push   eax
c0013e54:	6a 05                	push   0x5
c0013e56:	e8 eb f3 ff ff       	call   c0013246 <CPU::AMD_K6_writeback(int, int, int)>
c0013e5b:	e9 1f 02 00 00       	jmp    c001407f <CPU::detectFeatures()+0x95b>
c0013e60:	8d 50 fd             	lea    edx,[eax-0x3]
c0013e63:	83 fa 01             	cmp    edx,0x1
c0013e66:	76 09                	jbe    c0013e71 <CPU::detectFeatures()+0x74d>
c0013e68:	83 f8 06             	cmp    eax,0x6
c0013e6b:	0f 85 91 01 00 00    	jne    c0014002 <CPU::detectFeatures()+0x8de>
c0013e71:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0013e77:	c1 ea 0e             	shr    edx,0xe
c0013e7a:	80 fa 05             	cmp    dl,0x5
c0013e7d:	75 7b                	jne    c0013efa <CPU::detectFeatures()+0x7d6>
c0013e7f:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0013e85:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0013e8a:	66 81 fa 00 01       	cmp    dx,0x100
c0013e8f:	75 0c                	jne    c0013e9d <CPU::detectFeatures()+0x779>
c0013e91:	51                   	push   ecx
c0013e92:	51                   	push   ecx
c0013e93:	68 36 57 02 c0       	push   0xc0025736
c0013e98:	e9 dc 01 00 00       	jmp    c0014079 <CPU::detectFeatures()+0x955>
c0013e9d:	66 81 fa 00 02       	cmp    dx,0x200
c0013ea2:	75 0c                	jne    c0013eb0 <CPU::detectFeatures()+0x78c>
c0013ea4:	52                   	push   edx
c0013ea5:	52                   	push   edx
c0013ea6:	68 49 57 02 c0       	push   0xc0025749
c0013eab:	e9 c9 01 00 00       	jmp    c0014079 <CPU::detectFeatures()+0x955>
c0013eb0:	66 81 fa 40 02       	cmp    dx,0x240
c0013eb5:	75 0c                	jne    c0013ec3 <CPU::detectFeatures()+0x79f>
c0013eb7:	50                   	push   eax
c0013eb8:	50                   	push   eax
c0013eb9:	68 5b 57 02 c0       	push   0xc002575b
c0013ebe:	e9 b6 01 00 00       	jmp    c0014079 <CPU::detectFeatures()+0x955>
c0013ec3:	83 f8 06             	cmp    eax,0x6
c0013ec6:	75 0c                	jne    c0013ed4 <CPU::detectFeatures()+0x7b0>
c0013ec8:	50                   	push   eax
c0013ec9:	50                   	push   eax
c0013eca:	68 6d 57 02 c0       	push   0xc002576d
c0013ecf:	e9 a5 01 00 00       	jmp    c0014079 <CPU::detectFeatures()+0x955>
c0013ed4:	83 f8 04             	cmp    eax,0x4
c0013ed7:	75 0c                	jne    c0013ee5 <CPU::detectFeatures()+0x7c1>
c0013ed9:	50                   	push   eax
c0013eda:	50                   	push   eax
c0013edb:	68 79 57 02 c0       	push   0xc0025779
c0013ee0:	e9 94 01 00 00       	jmp    c0014079 <CPU::detectFeatures()+0x955>
c0013ee5:	83 f8 03             	cmp    eax,0x3
c0013ee8:	0f 85 19 02 00 00    	jne    c0014107 <CPU::detectFeatures()+0x9e3>
c0013eee:	50                   	push   eax
c0013eef:	50                   	push   eax
c0013ef0:	68 81 57 02 c0       	push   0xc0025781
c0013ef5:	e9 7f 01 00 00       	jmp    c0014079 <CPU::detectFeatures()+0x955>
c0013efa:	80 fa 06             	cmp    dl,0x6
c0013efd:	0f 85 db 00 00 00    	jne    c0013fde <CPU::detectFeatures()+0x8ba>
c0013f03:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0013f09:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0013f0e:	66 81 fa 80 01       	cmp    dx,0x180
c0013f13:	75 0c                	jne    c0013f21 <CPU::detectFeatures()+0x7fd>
c0013f15:	50                   	push   eax
c0013f16:	50                   	push   eax
c0013f17:	68 8c 57 02 c0       	push   0xc002578c
c0013f1c:	e9 58 01 00 00       	jmp    c0014079 <CPU::detectFeatures()+0x955>
c0013f21:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0013f27:	66 f7 c1 80 ff       	test   cx,0xff80
c0013f2c:	75 0c                	jne    c0013f3a <CPU::detectFeatures()+0x816>
c0013f2e:	50                   	push   eax
c0013f2f:	50                   	push   eax
c0013f30:	68 9c 57 02 c0       	push   0xc002579c
c0013f35:	e9 3f 01 00 00       	jmp    c0014079 <CPU::detectFeatures()+0x955>
c0013f3a:	66 81 fa 40 02       	cmp    dx,0x240
c0013f3f:	75 0c                	jne    c0013f4d <CPU::detectFeatures()+0x829>
c0013f41:	55                   	push   ebp
c0013f42:	55                   	push   ebp
c0013f43:	68 a3 57 02 c0       	push   0xc00257a3
c0013f48:	e9 2c 01 00 00       	jmp    c0014079 <CPU::detectFeatures()+0x955>
c0013f4d:	66 81 fa 80 02       	cmp    dx,0x280
c0013f52:	75 0c                	jne    c0013f60 <CPU::detectFeatures()+0x83c>
c0013f54:	57                   	push   edi
c0013f55:	57                   	push   edi
c0013f56:	68 ac 57 02 c0       	push   0xc00257ac
c0013f5b:	e9 19 01 00 00       	jmp    c0014079 <CPU::detectFeatures()+0x955>
c0013f60:	66 81 fa 40 03       	cmp    dx,0x340
c0013f65:	74 ed                	je     c0013f54 <CPU::detectFeatures()+0x830>
c0013f67:	66 81 fa c0 03       	cmp    dx,0x3c0
c0013f6c:	75 0c                	jne    c0013f7a <CPU::detectFeatures()+0x856>
c0013f6e:	56                   	push   esi
c0013f6f:	56                   	push   esi
c0013f70:	68 b3 57 02 c0       	push   0xc00257b3
c0013f75:	e9 ff 00 00 00       	jmp    c0014079 <CPU::detectFeatures()+0x955>
c0013f7a:	83 f8 06             	cmp    eax,0x6
c0013f7d:	0f 84 45 ff ff ff    	je     c0013ec8 <CPU::detectFeatures()+0x7a4>
c0013f83:	83 f8 04             	cmp    eax,0x4
c0013f86:	0f 84 4d ff ff ff    	je     c0013ed9 <CPU::detectFeatures()+0x7b5>
c0013f8c:	83 f8 03             	cmp    eax,0x3
c0013f8f:	0f 85 72 01 00 00    	jne    c0014107 <CPU::detectFeatures()+0x9e3>
c0013f95:	51                   	push   ecx
c0013f96:	51                   	push   ecx
c0013f97:	68 bc 57 02 c0       	push   0xc00257bc
c0013f9c:	53                   	push   ebx
c0013f9d:	e8 ca a6 ff ff       	call   c000e66c <Device::setName(char const*)>
c0013fa2:	b1 c1                	mov    cl,0xc1
c0013fa4:	88 c8                	mov    al,cl
c0013fa6:	e6 22                	out    0x22,al
c0013fa8:	e4 23                	in     al,0x23
c0013faa:	88 c2                	mov    dl,al
c0013fac:	88 c8                	mov    al,cl
c0013fae:	e6 22                	out    0x22,al
c0013fb0:	88 d0                	mov    al,dl
c0013fb2:	83 c8 10             	or     eax,0x10
c0013fb5:	e6 23                	out    0x23,al
c0013fb7:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0013fbe:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0013fc1:	89 d0                	mov    eax,edx
c0013fc3:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0013fc9:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0013fcd:	40                   	inc    eax
c0013fce:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0013fd4:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0013fd9:	e9 a1 00 00 00       	jmp    c001407f <CPU::detectFeatures()+0x95b>
c0013fde:	83 f8 06             	cmp    eax,0x6
c0013fe1:	0f 84 e1 fe ff ff    	je     c0013ec8 <CPU::detectFeatures()+0x7a4>
c0013fe7:	83 f8 04             	cmp    eax,0x4
c0013fea:	0f 84 e9 fe ff ff    	je     c0013ed9 <CPU::detectFeatures()+0x7b5>
c0013ff0:	83 f8 03             	cmp    eax,0x3
c0013ff3:	0f 85 0e 01 00 00    	jne    c0014107 <CPU::detectFeatures()+0x9e3>
c0013ff9:	52                   	push   edx
c0013ffa:	52                   	push   edx
c0013ffb:	68 c7 57 02 c0       	push   0xc00257c7
c0014000:	eb 77                	jmp    c0014079 <CPU::detectFeatures()+0x955>
c0014002:	83 f8 07             	cmp    eax,0x7
c0014005:	75 09                	jne    c0014010 <CPU::detectFeatures()+0x8ec>
c0014007:	50                   	push   eax
c0014008:	50                   	push   eax
c0014009:	68 d1 57 02 c0       	push   0xc00257d1
c001400e:	eb 69                	jmp    c0014079 <CPU::detectFeatures()+0x955>
c0014010:	83 f8 0a             	cmp    eax,0xa
c0014013:	75 09                	jne    c001401e <CPU::detectFeatures()+0x8fa>
c0014015:	50                   	push   eax
c0014016:	50                   	push   eax
c0014017:	68 dc 57 02 c0       	push   0xc00257dc
c001401c:	eb 5b                	jmp    c0014079 <CPU::detectFeatures()+0x955>
c001401e:	83 f8 0b             	cmp    eax,0xb
c0014021:	75 09                	jne    c001402c <CPU::detectFeatures()+0x908>
c0014023:	50                   	push   eax
c0014024:	50                   	push   eax
c0014025:	68 e4 57 02 c0       	push   0xc00257e4
c001402a:	eb 4d                	jmp    c0014079 <CPU::detectFeatures()+0x955>
c001402c:	83 f8 08             	cmp    eax,0x8
c001402f:	75 09                	jne    c001403a <CPU::detectFeatures()+0x916>
c0014031:	50                   	push   eax
c0014032:	50                   	push   eax
c0014033:	68 ed 57 02 c0       	push   0xc00257ed
c0014038:	eb 3f                	jmp    c0014079 <CPU::detectFeatures()+0x955>
c001403a:	83 f8 09             	cmp    eax,0x9
c001403d:	75 09                	jne    c0014048 <CPU::detectFeatures()+0x924>
c001403f:	50                   	push   eax
c0014040:	50                   	push   eax
c0014041:	68 f5 57 02 c0       	push   0xc00257f5
c0014046:	eb 31                	jmp    c0014079 <CPU::detectFeatures()+0x955>
c0014048:	83 f8 05             	cmp    eax,0x5
c001404b:	75 09                	jne    c0014056 <CPU::detectFeatures()+0x932>
c001404d:	50                   	push   eax
c001404e:	50                   	push   eax
c001404f:	68 fd 57 02 c0       	push   0xc00257fd
c0014054:	eb 23                	jmp    c0014079 <CPU::detectFeatures()+0x955>
c0014056:	83 f8 0c             	cmp    eax,0xc
c0014059:	75 09                	jne    c0014064 <CPU::detectFeatures()+0x940>
c001405b:	55                   	push   ebp
c001405c:	55                   	push   ebp
c001405d:	68 0b 58 02 c0       	push   0xc002580b
c0014062:	eb 15                	jmp    c0014079 <CPU::detectFeatures()+0x955>
c0014064:	83 f8 0d             	cmp    eax,0xd
c0014067:	75 09                	jne    c0014072 <CPU::detectFeatures()+0x94e>
c0014069:	57                   	push   edi
c001406a:	57                   	push   edi
c001406b:	68 16 58 02 c0       	push   0xc0025816
c0014070:	eb 07                	jmp    c0014079 <CPU::detectFeatures()+0x955>
c0014072:	56                   	push   esi
c0014073:	56                   	push   esi
c0014074:	68 2a 58 02 c0       	push   0xc002582a
c0014079:	53                   	push   ebx
c001407a:	e8 ed a5 ff ff       	call   c000e66c <Device::setName(char const*)>
c001407f:	83 c4 10             	add    esp,0x10
c0014082:	e9 80 00 00 00       	jmp    c0014107 <CPU::detectFeatures()+0x9e3>
c0014087:	51                   	push   ecx
c0014088:	51                   	push   ecx
c0014089:	68 76 56 02 c0       	push   0xc0025676
c001408e:	55                   	push   ebp
c001408f:	e8 a4 c6 fe ff       	call   c0000738 <strcpy>
c0014094:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001409e:	e8 40 c1 fe ff       	call   c00001e3 <is486>
c00140a3:	83 c4 10             	add    esp,0x10
c00140a6:	85 c0                	test   eax,eax
c00140a8:	74 2b                	je     c00140d5 <CPU::detectFeatures()+0x9b1>
c00140aa:	52                   	push   edx
c00140ab:	52                   	push   edx
c00140ac:	68 36 58 02 c0       	push   0xc0025836
c00140b1:	53                   	push   ebx
c00140b2:	e8 b5 a5 ff ff       	call   c000e66c <Device::setName(char const*)>
c00140b7:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00140be:	0f 20 c0             	mov    eax,cr0
c00140c1:	83 e0 14             	and    eax,0x14
c00140c4:	83 c4 10             	add    esp,0x10
c00140c7:	83 f8 04             	cmp    eax,0x4
c00140ca:	75 1f                	jne    c00140eb <CPU::detectFeatures()+0x9c7>
c00140cc:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c00140d3:	eb 32                	jmp    c0014107 <CPU::detectFeatures()+0x9e3>
c00140d5:	50                   	push   eax
c00140d6:	50                   	push   eax
c00140d7:	68 41 58 02 c0       	push   0xc0025841
c00140dc:	53                   	push   ebx
c00140dd:	e8 8a a5 ff ff       	call   c000e66c <Device::setName(char const*)>
c00140e2:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c00140e9:	eb d3                	jmp    c00140be <CPU::detectFeatures()+0x99a>
c00140eb:	e8 ce c0 fe ff       	call   c00001be <hasLegacyFPU>
c00140f0:	83 e0 01             	and    eax,0x1
c00140f3:	8d 14 00             	lea    edx,[eax+eax*1]
c00140f6:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00140fc:	83 e0 fd             	and    eax,0xfffffffd
c00140ff:	09 d0                	or     eax,edx
c0014101:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0014107:	f6 83 92 11 00 00 02 	test   BYTE PTR [ebx+0x1192],0x2
c001410e:	74 0e                	je     c001411e <CPU::detectFeatures()+0x9fa>
c0014110:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c0014115:	80 88 e8 01 00 00 10 	or     BYTE PTR [eax+0x1e8],0x10
c001411c:	eb 20                	jmp    c001413e <CPU::detectFeatures()+0xa1a>
c001411e:	e8 9b c0 fe ff       	call   c00001be <hasLegacyFPU>
c0014123:	83 e0 01             	and    eax,0x1
c0014126:	8d 14 00             	lea    edx,[eax+eax*1]
c0014129:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001412f:	83 e0 fd             	and    eax,0xfffffffd
c0014132:	09 d0                	or     eax,edx
c0014134:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001413a:	a8 02                	test   al,0x2
c001413c:	75 d2                	jne    c0014110 <CPU::detectFeatures()+0x9ec>
c001413e:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0014145:	83 c4 4c             	add    esp,0x4c
c0014148:	5b                   	pop    ebx
c0014149:	5e                   	pop    esi
c001414a:	5f                   	pop    edi
c001414b:	5d                   	pop    ebp
c001414c:	c3                   	ret    
c001414d:	90                   	nop

c001414e <CPU::setupSMEP()>:
c001414e:	0f 20 e0             	mov    eax,cr4
c0014151:	0d 00 00 10 00       	or     eax,0x100000
c0014156:	0f 22 e0             	mov    cr4,eax
c0014159:	c3                   	ret    

c001415a <CPU::setupUMIP()>:
c001415a:	0f 20 e0             	mov    eax,cr4
c001415d:	80 cc 08             	or     ah,0x8
c0014160:	0f 22 e0             	mov    cr4,eax
c0014163:	c3                   	ret    

c0014164 <CPU::setupTSC()>:
c0014164:	0f 20 e0             	mov    eax,cr4
c0014167:	83 c8 04             	or     eax,0x4
c001416a:	0f 22 e0             	mov    cr4,eax
c001416d:	c3                   	ret    

c001416e <CPU::setupLargePages()>:
c001416e:	0f 20 e0             	mov    eax,cr4
c0014171:	83 c8 10             	or     eax,0x10
c0014174:	0f 22 e0             	mov    cr4,eax
c0014177:	c3                   	ret    

c0014178 <CPU::setupPAT()>:
c0014178:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c001417d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0014184:	74 2c                	je     c00141b2 <CPU::setupPAT()+0x3a>
c0014186:	53                   	push   ebx
c0014187:	83 ec 10             	sub    esp,0x10
c001418a:	68 77 02 00 00       	push   0x277
c001418f:	50                   	push   eax
c0014190:	e8 d1 50 ff ff       	call   c0009266 <Computer::rdmsr(unsigned int)>
c0014195:	83 e2 f8             	and    edx,0xfffffff8
c0014198:	83 ca 01             	or     edx,0x1
c001419b:	52                   	push   edx
c001419c:	50                   	push   eax
c001419d:	68 77 02 00 00       	push   0x277
c00141a2:	ff 35 08 7e 02 c0    	push   DWORD PTR ds:0xc0027e08
c00141a8:	e8 e5 50 ff ff       	call   c0009292 <Computer::wrmsr(unsigned int, unsigned long long)>
c00141ad:	83 c4 28             	add    esp,0x28
c00141b0:	5b                   	pop    ebx
c00141b1:	c3                   	ret    
c00141b2:	c3                   	ret    
c00141b3:	90                   	nop

c00141b4 <CPU::setupMTRR()>:
c00141b4:	c3                   	ret    
c00141b5:	90                   	nop

c00141b6 <CPU::setupGlobalPages()>:
c00141b6:	0f 20 e0             	mov    eax,cr4
c00141b9:	0c 80                	or     al,0x80
c00141bb:	0f 22 e0             	mov    cr4,eax
c00141be:	c3                   	ret    
c00141bf:	90                   	nop

c00141c0 <CPU::allowUsermodeDataAccess()>:
c00141c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00141c4:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00141cb:	74 03                	je     c00141d0 <CPU::allowUsermodeDataAccess()+0x10>
c00141cd:	0f 01 cb             	stac   
c00141d0:	c3                   	ret    
c00141d1:	90                   	nop

c00141d2 <CPU::prohibitUsermodeDataAccess()>:
c00141d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00141d6:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00141dd:	74 03                	je     c00141e2 <CPU::prohibitUsermodeDataAccess()+0x10>
c00141df:	0f 01 ca             	clac   
c00141e2:	c3                   	ret    
c00141e3:	90                   	nop

c00141e4 <CPU::setupSMAP()>:
c00141e4:	0f 20 e0             	mov    eax,cr4
c00141e7:	0d 00 00 20 00       	or     eax,0x200000
c00141ec:	0f 22 e0             	mov    cr4,eax
c00141ef:	eb e1                	jmp    c00141d2 <CPU::prohibitUsermodeDataAccess()>
c00141f1:	90                   	nop

c00141f2 <CPU::setupFeatures()>:
c00141f2:	53                   	push   ebx
c00141f3:	83 ec 08             	sub    esp,0x8
c00141f6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00141fa:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0014201:	74 18                	je     c001421b <CPU::setupFeatures()+0x29>
c0014203:	83 ec 0c             	sub    esp,0xc
c0014206:	68 4c 58 02 c0       	push   0xc002584c
c001420b:	e8 b5 8d ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0014210:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014213:	e8 42 ff ff ff       	call   c001415a <CPU::setupUMIP()>
c0014218:	83 c4 10             	add    esp,0x10
c001421b:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0014222:	74 18                	je     c001423c <CPU::setupFeatures()+0x4a>
c0014224:	83 ec 0c             	sub    esp,0xc
c0014227:	68 56 58 02 c0       	push   0xc0025856
c001422c:	e8 94 8d ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0014231:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014234:	e8 2b ff ff ff       	call   c0014164 <CPU::setupTSC()>
c0014239:	83 c4 10             	add    esp,0x10
c001423c:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0014243:	74 18                	je     c001425d <CPU::setupFeatures()+0x6b>
c0014245:	83 ec 0c             	sub    esp,0xc
c0014248:	68 5f 58 02 c0       	push   0xc002585f
c001424d:	e8 73 8d ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0014252:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014255:	e8 14 ff ff ff       	call   c001416e <CPU::setupLargePages()>
c001425a:	83 c4 10             	add    esp,0x10
c001425d:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0014264:	74 18                	je     c001427e <CPU::setupFeatures()+0x8c>
c0014266:	83 ec 0c             	sub    esp,0xc
c0014269:	68 68 58 02 c0       	push   0xc0025868
c001426e:	e8 52 8d ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0014273:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014276:	e8 3b ff ff ff       	call   c00141b6 <CPU::setupGlobalPages()>
c001427b:	83 c4 10             	add    esp,0x10
c001427e:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0014285:	74 18                	je     c001429f <CPU::setupFeatures()+0xad>
c0014287:	83 ec 0c             	sub    esp,0xc
c001428a:	68 7a 58 02 c0       	push   0xc002587a
c001428f:	e8 31 8d ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0014294:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014297:	e8 dc fe ff ff       	call   c0014178 <CPU::setupPAT()>
c001429c:	83 c4 10             	add    esp,0x10
c001429f:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c00142a6:	74 11                	je     c00142b9 <CPU::setupFeatures()+0xc7>
c00142a8:	c7 44 24 10 83 58 02 c0 	mov    DWORD PTR [esp+0x10],0xc0025883
c00142b0:	83 c4 08             	add    esp,0x8
c00142b3:	5b                   	pop    ebx
c00142b4:	e9 0c 8d ff ff       	jmp    c000cfc5 <Dbg::kprintf(char const*, ...)>
c00142b9:	83 c4 08             	add    esp,0x8
c00142bc:	5b                   	pop    ebx
c00142bd:	c3                   	ret    

c00142be <CPU::open(int, int, void*)>:
c00142be:	57                   	push   edi
c00142bf:	56                   	push   esi
c00142c0:	53                   	push   ebx
c00142c1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00142c5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00142c9:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c00142cf:	83 ec 0c             	sub    esp,0xc
c00142d2:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c00142d8:	68 8d 58 02 c0       	push   0xc002588d
c00142dd:	e8 2f 5a ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c00142e2:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c00142e8:	89 04 24             	mov    DWORD PTR [esp],eax
c00142eb:	e8 9c 52 ff ff       	call   c000958c <GDT::setup()>
c00142f0:	c7 04 24 9f 58 02 c0 	mov    DWORD PTR [esp],0xc002589f
c00142f7:	e8 15 5a ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c00142fc:	83 c4 0c             	add    esp,0xc
c00142ff:	6a 00                	push   0x0
c0014301:	68 ef be ad de       	push   0xdeadbeef
c0014306:	57                   	push   edi
c0014307:	e8 e4 72 ff ff       	call   c000b5f0 <TSS::setup(unsigned long, unsigned long)>
c001430c:	c7 04 24 b1 58 02 c0 	mov    DWORD PTR [esp],0xc00258b1
c0014313:	e8 f9 59 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0014318:	89 3c 24             	mov    DWORD PTR [esp],edi
c001431b:	e8 b0 72 ff ff       	call   c000b5d0 <TSS::flush()>
c0014320:	c7 04 24 c5 58 02 c0 	mov    DWORD PTR [esp],0xc00258c5
c0014327:	e8 e5 59 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001432c:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0014332:	89 04 24             	mov    DWORD PTR [esp],eax
c0014335:	e8 e0 54 ff ff       	call   c000981a <IDT::setup()>
c001433a:	c7 04 24 d7 58 02 c0 	mov    DWORD PTR [esp],0xc00258d7
c0014341:	e8 cb 59 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0014346:	b8 00 04 00 00       	mov    eax,0x400
c001434b:	0f 23 f8             	mov    db7,eax
c001434e:	c7 04 24 f5 58 02 c0 	mov    DWORD PTR [esp],0xc00258f5
c0014355:	e8 b7 59 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001435a:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0014364:	e8 05 60 ff ff       	call   c000a36e <Phys::allocatePage()>
c0014369:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001436f:	89 30                	mov    DWORD PTR [eax],esi
c0014371:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0014377:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001437a:	c7 04 24 17 59 02 c0 	mov    DWORD PTR [esp],0xc0025917
c0014381:	e8 8b 59 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0014386:	58                   	pop    eax
c0014387:	5a                   	pop    edx
c0014388:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001438e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014392:	e8 19 82 ff ff       	call   c000c5b0 <VAS::setCPUSpecific(unsigned long)>
c0014397:	c7 04 24 3f 59 02 c0 	mov    DWORD PTR [esp],0xc002593f
c001439e:	e8 6e 59 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c00143a3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00143a6:	e8 79 f3 ff ff       	call   c0013724 <CPU::detectFeatures()>
c00143ab:	c7 04 24 62 59 02 c0 	mov    DWORD PTR [esp],0xc0025962
c00143b2:	e8 5a 59 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c00143b7:	e8 14 b3 ff ff       	call   c000f6d0 <setupInterruptController()>
c00143bc:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00143c2:	e8 26 68 00 00       	call   c001abed <Hal::initialise()>
c00143c7:	c7 04 24 86 59 02 c0 	mov    DWORD PTR [esp],0xc0025986
c00143ce:	e8 3e 59 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c00143d3:	a1 20 7e 02 c0       	mov    eax,ds:0xc0027e20
c00143d8:	83 e0 10             	and    eax,0x10
c00143db:	83 f8 01             	cmp    eax,0x1
c00143de:	19 c0                	sbb    eax,eax
c00143e0:	83 e0 46             	and    eax,0x46
c00143e3:	83 c0 1e             	add    eax,0x1e
c00143e6:	89 04 24             	mov    DWORD PTR [esp],eax
c00143e9:	e8 e6 c8 ff ff       	call   c0010cd4 <setupTimer(int)>
c00143ee:	83 c4 10             	add    esp,0x10
c00143f1:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c00143f7:	f6 05 20 7e 02 c0 20 	test   BYTE PTR ds:0xc0027e20,0x20
c00143fe:	74 18                	je     c0014418 <CPU::open(int, int, void*)+0x15a>
c0014400:	83 ec 0c             	sub    esp,0xc
c0014403:	68 a1 59 02 c0       	push   0xc00259a1
c0014408:	e8 04 59 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001440d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014410:	e8 dd fd ff ff       	call   c00141f2 <CPU::setupFeatures()>
c0014415:	83 c4 10             	add    esp,0x10
c0014418:	83 ec 0c             	sub    esp,0xc
c001441b:	68 bc 59 02 c0       	push   0xc00259bc
c0014420:	e8 ec 58 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0014425:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014428:	e8 57 f0 ff ff       	call   c0013484 <CPU::displayFeatures()>
c001442d:	83 c4 10             	add    esp,0x10
c0014430:	31 c0                	xor    eax,eax
c0014432:	5b                   	pop    ebx
c0014433:	5e                   	pop    esi
c0014434:	5f                   	pop    edi
c0014435:	c3                   	ret    

c0014436 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0014436:	57                   	push   edi
c0014437:	56                   	push   esi
c0014438:	53                   	push   ebx
c0014439:	51                   	push   ecx
c001443a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001443e:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0014441:	0f 02 c0             	lar    eax,ax
c0014444:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0014447:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001444b:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c001444e:	88 ca                	mov    dl,cl
c0014450:	c0 ea 06             	shr    dl,0x6
c0014453:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0014457:	89 ca                	mov    edx,ecx
c0014459:	66 c1 ea 03          	shr    dx,0x3
c001445d:	83 e2 07             	and    edx,0x7
c0014460:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0014465:	88 17                	mov    BYTE PTR [edi],dl
c0014467:	0f 84 a6 01 00 00    	je     c0014613 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c001446d:	83 e1 07             	and    ecx,0x7
c0014470:	80 f9 04             	cmp    cl,0x4
c0014473:	0f 84 98 00 00 00    	je     c0014511 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0014479:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001447e:	0f 95 c0             	setne  al
c0014481:	80 f9 05             	cmp    cl,0x5
c0014484:	0f 95 c2             	setne  dl
c0014487:	08 c2                	or     dl,al
c0014489:	74 79                	je     c0014504 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c001448b:	84 c9                	test   cl,cl
c001448d:	75 05                	jne    c0014494 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c001448f:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0014492:	eb 3c                	jmp    c00144d0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0014494:	80 f9 01             	cmp    cl,0x1
c0014497:	75 05                	jne    c001449e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0014499:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001449c:	eb 32                	jmp    c00144d0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001449e:	80 f9 02             	cmp    cl,0x2
c00144a1:	75 05                	jne    c00144a8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c00144a3:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00144a6:	eb 28                	jmp    c00144d0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00144a8:	31 c0                	xor    eax,eax
c00144aa:	80 f9 03             	cmp    cl,0x3
c00144ad:	75 05                	jne    c00144b4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c00144af:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00144b2:	eb 1c                	jmp    c00144d0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00144b4:	80 f9 05             	cmp    cl,0x5
c00144b7:	75 05                	jne    c00144be <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c00144b9:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00144bc:	eb 12                	jmp    c00144d0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00144be:	80 f9 06             	cmp    cl,0x6
c00144c1:	75 05                	jne    c00144c8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c00144c3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00144c6:	eb 08                	jmp    c00144d0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00144c8:	80 f9 07             	cmp    cl,0x7
c00144cb:	75 03                	jne    c00144d0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00144cd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00144d0:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00144d5:	75 10                	jne    c00144e7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c00144d7:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c00144db:	b9 03 00 00 00       	mov    ecx,0x3
c00144e0:	01 d0                	add    eax,edx
c00144e2:	e9 37 01 00 00       	jmp    c001461e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00144e7:	b9 02 00 00 00       	mov    ecx,0x2
c00144ec:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c00144f1:	0f 85 27 01 00 00    	jne    c001461e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00144f7:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c00144fa:	b9 06 00 00 00       	mov    ecx,0x6
c00144ff:	e9 1a 01 00 00       	jmp    c001461e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0014504:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0014507:	b9 06 00 00 00       	mov    ecx,0x6
c001450c:	e9 0f 01 00 00       	jmp    c0014620 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0014511:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0014514:	88 ca                	mov    dl,cl
c0014516:	c0 ea 06             	shr    dl,0x6
c0014519:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c001451d:	89 ca                	mov    edx,ecx
c001451f:	66 c1 ea 03          	shr    dx,0x3
c0014523:	83 e2 07             	and    edx,0x7
c0014526:	80 e1 07             	and    cl,0x7
c0014529:	75 05                	jne    c0014530 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c001452b:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c001452e:	eb 4c                	jmp    c001457c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014530:	80 f9 01             	cmp    cl,0x1
c0014533:	75 05                	jne    c001453a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0014535:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0014538:	eb 42                	jmp    c001457c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001453a:	80 f9 02             	cmp    cl,0x2
c001453d:	75 05                	jne    c0014544 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c001453f:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0014542:	eb 38                	jmp    c001457c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014544:	80 f9 03             	cmp    cl,0x3
c0014547:	75 05                	jne    c001454e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0014549:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001454c:	eb 2e                	jmp    c001457c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001454e:	80 f9 04             	cmp    cl,0x4
c0014551:	75 12                	jne    c0014565 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0014553:	f6 c4 60             	test   ah,0x60
c0014556:	75 08                	jne    c0014560 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0014558:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c001455b:	8d 78 14             	lea    edi,[eax+0x14]
c001455e:	eb 1c                	jmp    c001457c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014560:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0014563:	eb 17                	jmp    c001457c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014565:	80 f9 05             	cmp    cl,0x5
c0014568:	75 05                	jne    c001456f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c001456a:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c001456d:	eb 0d                	jmp    c001457c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001456f:	80 f9 06             	cmp    cl,0x6
c0014572:	75 05                	jne    c0014579 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0014574:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0014577:	eb 03                	jmp    c001457c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014579:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001457c:	84 d2                	test   dl,dl
c001457e:	75 05                	jne    c0014585 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0014580:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0014583:	eb 3c                	jmp    c00145c1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014585:	80 fa 01             	cmp    dl,0x1
c0014588:	75 05                	jne    c001458f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c001458a:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001458d:	eb 32                	jmp    c00145c1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001458f:	80 fa 02             	cmp    dl,0x2
c0014592:	75 05                	jne    c0014599 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0014594:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0014597:	eb 28                	jmp    c00145c1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014599:	80 fa 03             	cmp    dl,0x3
c001459c:	75 05                	jne    c00145a3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c001459e:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00145a1:	eb 1e                	jmp    c00145c1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00145a3:	31 c0                	xor    eax,eax
c00145a5:	80 fa 04             	cmp    dl,0x4
c00145a8:	74 17                	je     c00145c1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00145aa:	80 fa 05             	cmp    dl,0x5
c00145ad:	75 05                	jne    c00145b4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c00145af:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00145b2:	eb 0d                	jmp    c00145c1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00145b4:	80 fa 06             	cmp    dl,0x6
c00145b7:	75 05                	jne    c00145be <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c00145b9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00145bc:	eb 03                	jmp    c00145c1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00145be:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00145c1:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00145c6:	0f 94 c2             	sete   dl
c00145c9:	80 f9 05             	cmp    cl,0x5
c00145cc:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c00145d0:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c00145d5:	d3 e0                	shl    eax,cl
c00145d7:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c00145db:	74 0a                	je     c00145e7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c00145dd:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00145e0:	b9 07 00 00 00       	mov    ecx,0x7
c00145e5:	eb 37                	jmp    c001461e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00145e7:	01 f8                	add    eax,edi
c00145e9:	b9 03 00 00 00       	mov    ecx,0x3
c00145ee:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00145f3:	74 2b                	je     c0014620 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00145f5:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00145fa:	75 0d                	jne    c0014609 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c00145fc:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0014600:	01 c8                	add    eax,ecx
c0014602:	b9 04 00 00 00       	mov    ecx,0x4
c0014607:	eb 17                	jmp    c0014620 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0014609:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001460c:	b9 07 00 00 00       	mov    ecx,0x7
c0014611:	eb 0d                	jmp    c0014620 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0014613:	b9 02 00 00 00       	mov    ecx,0x2
c0014618:	b2 01                	mov    dl,0x1
c001461a:	31 c0                	xor    eax,eax
c001461c:	eb 02                	jmp    c0014620 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001461e:	31 d2                	xor    edx,edx
c0014620:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014624:	89 0b                	mov    DWORD PTR [ebx],ecx
c0014626:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001462a:	88 11                	mov    BYTE PTR [ecx],dl
c001462c:	5a                   	pop    edx
c001462d:	5b                   	pop    ebx
c001462e:	5e                   	pop    esi
c001462f:	5f                   	pop    edi
c0014630:	c3                   	ret    

c0014631 <Krnl::smpEntry()>:
c0014631:	eb fe                	jmp    c0014631 <Krnl::smpEntry()>

c0014633 <Krnl::startCPU(int)>:
c0014633:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c0014638:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c001463f:	0f 84 36 01 00 00    	je     c001477b <Krnl::startCPU(int)+0x148>
c0014645:	53                   	push   ebx
c0014646:	83 ec 10             	sub    esp,0x10
c0014649:	fa                   	cli    
c001464a:	ff 05 28 93 02 c0    	inc    DWORD PTR ds:0xc0029328
c0014650:	6a 1b                	push   0x1b
c0014652:	ff 35 08 7e 02 c0    	push   DWORD PTR ds:0xc0027e08
c0014658:	e8 09 4c ff ff       	call   c0009266 <Computer::rdmsr(unsigned int)>
c001465d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014662:	89 c3                	mov    ebx,eax
c0014664:	58                   	pop    eax
c0014665:	5a                   	pop    edx
c0014666:	53                   	push   ebx
c0014667:	68 04 5a 02 c0       	push   0xc0025a04
c001466c:	e8 54 89 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0014671:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001467b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001467f:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0014689:	c1 e0 18             	shl    eax,0x18
c001468c:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0014692:	83 c4 10             	add    esp,0x10
c0014695:	81 e2 ff ff ff 00    	and    edx,0xffffff
c001469b:	09 c2                	or     edx,eax
c001469d:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c00146a3:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c00146a9:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c00146af:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c00146b5:	80 cd c5             	or     ch,0xc5
c00146b8:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c00146be:	f3 90                	pause  
c00146c0:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00146c2:	0f ba e1 0c          	bt     ecx,0xc
c00146c6:	72 f6                	jb     c00146be <Krnl::startCPU(int)+0x8b>
c00146c8:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c00146ce:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c00146d4:	09 c1                	or     ecx,eax
c00146d6:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c00146dc:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c00146e2:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c00146e8:	80 cd 85             	or     ch,0x85
c00146eb:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c00146f1:	f3 90                	pause  
c00146f3:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00146f5:	0f ba e1 0c          	bt     ecx,0xc
c00146f9:	72 f6                	jb     c00146f1 <Krnl::startCPU(int)+0xbe>
c00146fb:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0014705:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001470b:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0014711:	09 c1                	or     ecx,eax
c0014713:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0014719:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001471f:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0014725:	81 c9 02 06 00 00    	or     ecx,0x602
c001472b:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0014731:	f3 90                	pause  
c0014733:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0014735:	0f ba e1 0c          	bt     ecx,0xc
c0014739:	72 f6                	jb     c0014731 <Krnl::startCPU(int)+0xfe>
c001473b:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0014745:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001474b:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0014751:	09 c8                	or     eax,ecx
c0014753:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0014759:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c001475f:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0014764:	0d 02 06 00 00       	or     eax,0x602
c0014769:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c001476f:	f3 90                	pause  
c0014771:	8b 02                	mov    eax,DWORD PTR [edx]
c0014773:	0f ba e0 0c          	bt     eax,0xc
c0014777:	72 f6                	jb     c001476f <Krnl::startCPU(int)+0x13c>
c0014779:	eb fe                	jmp    c0014779 <Krnl::startCPU(int)+0x146>
c001477b:	c3                   	ret    

c001477c <Krnl::startCPUs()>:
c001477c:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c0014781:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0014787:	88 c2                	mov    dl,al
c0014789:	83 e2 0a             	and    edx,0xa
c001478c:	80 fa 0a             	cmp    dl,0xa
c001478f:	75 09                	jne    c001479a <Krnl::startCPUs()+0x1e>
c0014791:	a8 01                	test   al,0x1
c0014793:	74 05                	je     c001479a <Krnl::startCPUs()+0x1e>
c0014795:	e9 01 ba fe ff       	jmp    c000019b <prepareTramp>
c001479a:	c3                   	ret    
c001479b:	90                   	nop

c001479c <EnvVarContainer::getEnv(char const*)>:
c001479c:	57                   	push   edi
c001479d:	56                   	push   esi
c001479e:	53                   	push   ebx
c001479f:	31 db                	xor    ebx,ebx
c00147a1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00147a5:	39 1e                	cmp    DWORD PTR [esi],ebx
c00147a7:	7e 2b                	jle    c00147d4 <EnvVarContainer::getEnv(char const*)+0x38>
c00147a9:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c00147b0:	50                   	push   eax
c00147b1:	50                   	push   eax
c00147b2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00147b5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c00147b8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00147bc:	e8 03 c0 fe ff       	call   c00007c4 <strcmp>
c00147c1:	83 c4 10             	add    esp,0x10
c00147c4:	85 c0                	test   eax,eax
c00147c6:	75 09                	jne    c00147d1 <EnvVarContainer::getEnv(char const*)+0x35>
c00147c8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00147cb:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c00147cf:	eb 05                	jmp    c00147d6 <EnvVarContainer::getEnv(char const*)+0x3a>
c00147d1:	43                   	inc    ebx
c00147d2:	eb d1                	jmp    c00147a5 <EnvVarContainer::getEnv(char const*)+0x9>
c00147d4:	31 c0                	xor    eax,eax
c00147d6:	5b                   	pop    ebx
c00147d7:	5e                   	pop    esi
c00147d8:	5f                   	pop    edi
c00147d9:	c3                   	ret    

c00147da <EnvVarContainer::setEnv(char const*, char const*)>:
c00147da:	55                   	push   ebp
c00147db:	57                   	push   edi
c00147dc:	56                   	push   esi
c00147dd:	53                   	push   ebx
c00147de:	83 ec 28             	sub    esp,0x28
c00147e1:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00147e5:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00147e9:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00147ed:	56                   	push   esi
c00147ee:	e8 a5 be fe ff       	call   c0000698 <strlen>
c00147f3:	40                   	inc    eax
c00147f4:	89 04 24             	mov    DWORD PTR [esp],eax
c00147f7:	e8 bb 54 ff ff       	call   c0009cb7 <malloc>
c00147fc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00147ff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014803:	e8 90 be fe ff       	call   c0000698 <strlen>
c0014808:	40                   	inc    eax
c0014809:	89 04 24             	mov    DWORD PTR [esp],eax
c001480c:	e8 a6 54 ff ff       	call   c0009cb7 <malloc>
c0014811:	89 34 24             	mov    DWORD PTR [esp],esi
c0014814:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014818:	e8 7b be fe ff       	call   c0000698 <strlen>
c001481d:	83 c4 0c             	add    esp,0xc
c0014820:	40                   	inc    eax
c0014821:	50                   	push   eax
c0014822:	6a 00                	push   0x0
c0014824:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014828:	e8 4f be fe ff       	call   c000067c <memset>
c001482d:	89 34 24             	mov    DWORD PTR [esp],esi
c0014830:	e8 63 be fe ff       	call   c0000698 <strlen>
c0014835:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014839:	8d 48 01             	lea    ecx,[eax+0x1]
c001483c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001483e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014841:	89 de                	mov    esi,ebx
c0014843:	e8 50 be fe ff       	call   c0000698 <strlen>
c0014848:	83 c4 0c             	add    esp,0xc
c001484b:	40                   	inc    eax
c001484c:	50                   	push   eax
c001484d:	6a 00                	push   0x0
c001484f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014853:	e8 24 be fe ff       	call   c000067c <memset>
c0014858:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001485b:	e8 38 be fe ff       	call   c0000698 <strlen>
c0014860:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014864:	8d 48 01             	lea    ecx,[eax+0x1]
c0014867:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014869:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001486c:	40                   	inc    eax
c001486d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0014870:	c1 e0 03             	shl    eax,0x3
c0014873:	5a                   	pop    edx
c0014874:	59                   	pop    ecx
c0014875:	50                   	push   eax
c0014876:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014879:	e8 25 54 ff ff       	call   c0009ca3 <realloc>
c001487e:	8d 74 24 18          	lea    esi,[esp+0x18]
c0014882:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014885:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0014888:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001488c:	b9 08 00 00 00       	mov    ecx,0x8
c0014891:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014893:	83 c4 2c             	add    esp,0x2c
c0014896:	5b                   	pop    ebx
c0014897:	5e                   	pop    esi
c0014898:	5f                   	pop    edi
c0014899:	5d                   	pop    ebp
c001489a:	c3                   	ret    
c001489b:	90                   	nop

c001489c <EnvVarContainer::deleteEnv(char const*)>:
c001489c:	c3                   	ret    
c001489d:	90                   	nop

c001489e <EnvVarContainer::loadFrom(char const*, char const*)>:
c001489e:	55                   	push   ebp
c001489f:	57                   	push   edi
c00148a0:	56                   	push   esi
c00148a1:	53                   	push   ebx
c00148a2:	81 ec 38 01 00 00    	sub    esp,0x138
c00148a8:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c00148af:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c00148b6:	68 14 01 00 00       	push   0x114
c00148bb:	e8 f7 53 ff ff       	call   c0009cb7 <malloc>
c00148c0:	83 c4 0c             	add    esp,0xc
c00148c3:	89 c3                	mov    ebx,eax
c00148c5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00148c8:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00148cf:	50                   	push   eax
c00148d0:	e8 5b 8c ff ff       	call   c000d530 <File::File(char const*, Process*)>
c00148d5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00148d8:	e8 9b 8f ff ff       	call   c000d878 <File::exists()>
c00148dd:	83 c4 10             	add    esp,0x10
c00148e0:	84 c0                	test   al,al
c00148e2:	75 31                	jne    c0014915 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c00148e4:	50                   	push   eax
c00148e5:	50                   	push   eax
c00148e6:	6a 12                	push   0x12
c00148e8:	53                   	push   ebx
c00148e9:	e8 1c 8d ff ff       	call   c000d60a <File::open(FileOpenMode)>
c00148ee:	8b 03                	mov    eax,DWORD PTR [ebx]
c00148f0:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00148f3:	89 34 24             	mov    DWORD PTR [esp],esi
c00148f6:	e8 9d bd fe ff       	call   c0000698 <strlen>
c00148fb:	5a                   	pop    edx
c00148fc:	31 d2                	xor    edx,edx
c00148fe:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0014902:	51                   	push   ecx
c0014903:	56                   	push   esi
c0014904:	52                   	push   edx
c0014905:	50                   	push   eax
c0014906:	53                   	push   ebx
c0014907:	ff d7                	call   edi
c0014909:	83 c4 14             	add    esp,0x14
c001490c:	53                   	push   ebx
c001490d:	e8 56 8d ff ff       	call   c000d668 <File::close()>
c0014912:	83 c4 10             	add    esp,0x10
c0014915:	56                   	push   esi
c0014916:	31 f6                	xor    esi,esi
c0014918:	68 00 01 00 00       	push   0x100
c001491d:	6a 00                	push   0x0
c001491f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0014923:	50                   	push   eax
c0014924:	e8 53 bd fe ff       	call   c000067c <memset>
c0014929:	5f                   	pop    edi
c001492a:	58                   	pop    eax
c001492b:	6a 01                	push   0x1
c001492d:	53                   	push   ebx
c001492e:	e8 d7 8c ff ff       	call   c000d60a <File::open(FileOpenMode)>
c0014933:	83 c4 10             	add    esp,0x10
c0014936:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001493e:	83 ec 0c             	sub    esp,0xc
c0014941:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014943:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0014947:	51                   	push   ecx
c0014948:	8d 54 24 23          	lea    edx,[esp+0x23]
c001494c:	52                   	push   edx
c001494d:	6a 00                	push   0x0
c001494f:	6a 01                	push   0x1
c0014951:	53                   	push   ebx
c0014952:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014955:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0014959:	83 c4 20             	add    esp,0x20
c001495c:	3c 0d                	cmp    al,0xd
c001495e:	0f 84 09 01 00 00    	je     c0014a6d <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0014964:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0014969:	0f 84 ef 00 00 00    	je     c0014a5e <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c001496f:	3c 0a                	cmp    al,0xa
c0014971:	74 13                	je     c0014986 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0014973:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014978:	74 0c                	je     c0014986 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c001497a:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0014980:	0f 8e d8 00 00 00    	jle    c0014a5e <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0014986:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001498a:	83 ec 0c             	sub    esp,0xc
c001498d:	8d 78 01             	lea    edi,[eax+0x1]
c0014990:	57                   	push   edi
c0014991:	e8 21 53 ff ff       	call   c0009cb7 <malloc>
c0014996:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c001499a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001499e:	8d 56 04             	lea    edx,[esi+0x4]
c00149a1:	89 14 24             	mov    DWORD PTR [esp],edx
c00149a4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00149a8:	e8 0a 53 ff ff       	call   c0009cb7 <malloc>
c00149ad:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00149b1:	83 c4 0c             	add    esp,0xc
c00149b4:	57                   	push   edi
c00149b5:	6a 00                	push   0x0
c00149b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00149bb:	e8 bc bc fe ff       	call   c000067c <memset>
c00149c0:	8d 74 24 30          	lea    esi,[esp+0x30]
c00149c4:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00149c8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00149cc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00149ce:	83 c4 0c             	add    esp,0xc
c00149d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00149d5:	52                   	push   edx
c00149d6:	6a 00                	push   0x0
c00149d8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00149dc:	e8 9b bc fe ff       	call   c000067c <memset>
c00149e1:	8d 74 24 30          	lea    esi,[esp+0x30]
c00149e5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00149e9:	89 34 24             	mov    DWORD PTR [esp],esi
c00149ec:	e8 a7 bc fe ff       	call   c0000698 <strlen>
c00149f1:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c00149f5:	89 c1                	mov    ecx,eax
c00149f7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00149f9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00149fc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00149ff:	40                   	inc    eax
c0014a00:	83 c4 10             	add    esp,0x10
c0014a03:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0014a06:	85 d2                	test   edx,edx
c0014a08:	75 0c                	jne    c0014a16 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0014a0a:	83 ec 0c             	sub    esp,0xc
c0014a0d:	6a 08                	push   0x8
c0014a0f:	e8 a3 52 ff ff       	call   c0009cb7 <malloc>
c0014a14:	eb 0c                	jmp    c0014a22 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0014a16:	c1 e0 03             	shl    eax,0x3
c0014a19:	51                   	push   ecx
c0014a1a:	51                   	push   ecx
c0014a1b:	50                   	push   eax
c0014a1c:	52                   	push   edx
c0014a1d:	e8 81 52 ff ff       	call   c0009ca3 <realloc>
c0014a22:	83 c4 10             	add    esp,0x10
c0014a25:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0014a28:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014a2b:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0014a2e:	8d 74 24 18          	lea    esi,[esp+0x18]
c0014a32:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0014a36:	b9 08 00 00 00       	mov    ecx,0x8
c0014a3b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014a3d:	31 f6                	xor    esi,esi
c0014a3f:	50                   	push   eax
c0014a40:	68 00 01 00 00       	push   0x100
c0014a45:	6a 00                	push   0x0
c0014a47:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0014a4b:	50                   	push   eax
c0014a4c:	e8 2b bc fe ff       	call   c000067c <memset>
c0014a51:	83 c4 10             	add    esp,0x10
c0014a54:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014a5c:	eb 0f                	jmp    c0014a6d <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0014a5e:	3c 3d                	cmp    al,0x3d
c0014a60:	74 07                	je     c0014a69 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0014a62:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0014a66:	46                   	inc    esi
c0014a67:	eb 04                	jmp    c0014a6d <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0014a69:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0014a6d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014a72:	0f 85 c6 fe ff ff    	jne    c001493e <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0014a78:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014a7e:	5b                   	pop    ebx
c0014a7f:	5e                   	pop    esi
c0014a80:	5f                   	pop    edi
c0014a81:	5d                   	pop    ebp
c0014a82:	c3                   	ret    
c0014a83:	90                   	nop

c0014a84 <EnvVarContainer::__loadSystem()>:
c0014a84:	83 ec 10             	sub    esp,0x10
c0014a87:	68 e0 77 02 c0       	push   0xc00277e0
c0014a8c:	68 15 5a 02 c0       	push   0xc0025a15
c0014a91:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014a95:	e8 04 fe ff ff       	call   c001489e <EnvVarContainer::loadFrom(char const*, char const*)>
c0014a9a:	83 c4 1c             	add    esp,0x1c
c0014a9d:	c3                   	ret    

c0014a9e <EnvVarContainer::__loadUser()>:
c0014a9e:	c3                   	ret    
c0014a9f:	90                   	nop

c0014aa0 <EnvVarContainer::EnvVarContainer(Process*)>:
c0014aa0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014aa4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014aaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014aae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014ab2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0014ab5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014ab9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014ac0:	90                   	nop
c0014ac1:	c3                   	ret    

c0014ac2 <EnvVarContainer::~EnvVarContainer()>:
c0014ac2:	83 ec 0c             	sub    esp,0xc
c0014ac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ac9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014acc:	85 c0                	test   eax,eax
c0014ace:	74 1d                	je     c0014aed <EnvVarContainer::~EnvVarContainer()+0x2b>
c0014ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ad4:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ad6:	85 c0                	test   eax,eax
c0014ad8:	74 13                	je     c0014aed <EnvVarContainer::~EnvVarContainer()+0x2b>
c0014ada:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ade:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014ae1:	83 ec 0c             	sub    esp,0xc
c0014ae4:	50                   	push   eax
c0014ae5:	e8 dd 51 ff ff       	call   c0009cc7 <free>
c0014aea:	83 c4 10             	add    esp,0x10
c0014aed:	90                   	nop
c0014aee:	83 c4 0c             	add    esp,0xc
c0014af1:	c3                   	ret    

c0014af2 <Krnl::getEnv(Process*, char const*)>:
c0014af2:	53                   	push   ebx
c0014af3:	83 ec 08             	sub    esp,0x8
c0014af6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014afa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014afe:	39 05 50 93 02 c0    	cmp    DWORD PTR ds:0xc0029350,eax
c0014b04:	74 04                	je     c0014b0a <Krnl::getEnv(Process*, char const*)+0x18>
c0014b06:	85 c0                	test   eax,eax
c0014b08:	75 0b                	jne    c0014b15 <Krnl::getEnv(Process*, char const*)+0x23>
c0014b0a:	a1 d4 88 02 c0       	mov    eax,ds:0xc00288d4
c0014b0f:	85 c0                	test   eax,eax
c0014b11:	75 19                	jne    c0014b2c <Krnl::getEnv(Process*, char const*)+0x3a>
c0014b13:	eb 27                	jmp    c0014b3c <Krnl::getEnv(Process*, char const*)+0x4a>
c0014b15:	52                   	push   edx
c0014b16:	52                   	push   edx
c0014b17:	53                   	push   ebx
c0014b18:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0014b1e:	e8 79 fc ff ff       	call   c001479c <EnvVarContainer::getEnv(char const*)>
c0014b23:	83 c4 10             	add    esp,0x10
c0014b26:	85 c0                	test   eax,eax
c0014b28:	75 28                	jne    c0014b52 <Krnl::getEnv(Process*, char const*)+0x60>
c0014b2a:	eb de                	jmp    c0014b0a <Krnl::getEnv(Process*, char const*)+0x18>
c0014b2c:	52                   	push   edx
c0014b2d:	52                   	push   edx
c0014b2e:	53                   	push   ebx
c0014b2f:	50                   	push   eax
c0014b30:	e8 67 fc ff ff       	call   c001479c <EnvVarContainer::getEnv(char const*)>
c0014b35:	83 c4 10             	add    esp,0x10
c0014b38:	85 c0                	test   eax,eax
c0014b3a:	75 16                	jne    c0014b52 <Krnl::getEnv(Process*, char const*)+0x60>
c0014b3c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0014b40:	a1 d8 88 02 c0       	mov    eax,ds:0xc00288d8
c0014b45:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014b49:	83 c4 08             	add    esp,0x8
c0014b4c:	5b                   	pop    ebx
c0014b4d:	e9 4a fc ff ff       	jmp    c001479c <EnvVarContainer::getEnv(char const*)>
c0014b52:	83 c4 08             	add    esp,0x8
c0014b55:	5b                   	pop    ebx
c0014b56:	c3                   	ret    

c0014b57 <Krnl::setEnvSystem(char const*, char const*)>:
c0014b57:	83 ec 10             	sub    esp,0x10
c0014b5a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014b5e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014b62:	ff 35 d8 88 02 c0    	push   DWORD PTR ds:0xc00288d8
c0014b68:	e8 6d fc ff ff       	call   c00147da <EnvVarContainer::setEnv(char const*, char const*)>
c0014b6d:	83 c4 1c             	add    esp,0x1c
c0014b70:	c3                   	ret    

c0014b71 <Krnl::setEnvUser(char const*, char const*)>:
c0014b71:	a1 d4 88 02 c0       	mov    eax,ds:0xc00288d4
c0014b76:	85 c0                	test   eax,eax
c0014b78:	74 15                	je     c0014b8f <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0014b7a:	83 ec 10             	sub    esp,0x10
c0014b7d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014b81:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014b85:	50                   	push   eax
c0014b86:	e8 4f fc ff ff       	call   c00147da <EnvVarContainer::setEnv(char const*, char const*)>
c0014b8b:	83 c4 1c             	add    esp,0x1c
c0014b8e:	c3                   	ret    
c0014b8f:	c3                   	ret    

c0014b90 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0014b90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014b94:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0014b9a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014b9e:	e9 37 fc ff ff       	jmp    c00147da <EnvVarContainer::setEnv(char const*, char const*)>

c0014ba3 <Krnl::deleteEnvSystem(char const*)>:
c0014ba3:	c3                   	ret    

c0014ba4 <Krnl::deleteEnvUser(char const*)>:
c0014ba4:	c3                   	ret    

c0014ba5 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0014ba5:	c3                   	ret    

c0014ba6 <Krnl::newProcessEnv(Process*)>:
c0014ba6:	83 ec 28             	sub    esp,0x28
c0014ba9:	6a 0c                	push   0xc
c0014bab:	e8 07 51 ff ff       	call   c0009cb7 <malloc>
c0014bb0:	5a                   	pop    edx
c0014bb1:	59                   	pop    ecx
c0014bb2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014bb6:	50                   	push   eax
c0014bb7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014bbb:	e8 e0 fe ff ff       	call   c0014aa0 <EnvVarContainer::EnvVarContainer(Process*)>
c0014bc0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014bc4:	83 c4 2c             	add    esp,0x2c
c0014bc7:	c3                   	ret    

c0014bc8 <Krnl::copyProcessEnv(Process*, Process*)>:
c0014bc8:	57                   	push   edi
c0014bc9:	56                   	push   esi
c0014bca:	53                   	push   ebx
c0014bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014bcf:	83 ec 0c             	sub    esp,0xc
c0014bd2:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0014bd8:	6a 0c                	push   0xc
c0014bda:	e8 d8 50 ff ff       	call   c0009cb7 <malloc>
c0014bdf:	89 c3                	mov    ebx,eax
c0014be1:	58                   	pop    eax
c0014be2:	5a                   	pop    edx
c0014be3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014be7:	53                   	push   ebx
c0014be8:	e8 b3 fe ff ff       	call   c0014aa0 <EnvVarContainer::EnvVarContainer(Process*)>
c0014bed:	8b 07                	mov    eax,DWORD PTR [edi]
c0014bef:	89 03                	mov    DWORD PTR [ebx],eax
c0014bf1:	c1 e0 03             	shl    eax,0x3
c0014bf4:	89 04 24             	mov    DWORD PTR [esp],eax
c0014bf7:	e8 bb 50 ff ff       	call   c0009cb7 <malloc>
c0014bfc:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0014bff:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0014c01:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0014c04:	c1 e1 03             	shl    ecx,0x3
c0014c07:	89 c7                	mov    edi,eax
c0014c09:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014c0b:	83 c4 10             	add    esp,0x10
c0014c0e:	89 d8                	mov    eax,ebx
c0014c10:	5b                   	pop    ebx
c0014c11:	5e                   	pop    esi
c0014c12:	5f                   	pop    edi
c0014c13:	c3                   	ret    

c0014c14 <Krnl::loadSystemEnv()>:
c0014c14:	53                   	push   ebx
c0014c15:	83 ec 14             	sub    esp,0x14
c0014c18:	6a 0c                	push   0xc
c0014c1a:	e8 98 50 ff ff       	call   c0009cb7 <malloc>
c0014c1f:	89 c3                	mov    ebx,eax
c0014c21:	58                   	pop    eax
c0014c22:	5a                   	pop    edx
c0014c23:	ff 35 50 93 02 c0    	push   DWORD PTR ds:0xc0029350
c0014c29:	53                   	push   ebx
c0014c2a:	e8 71 fe ff ff       	call   c0014aa0 <EnvVarContainer::EnvVarContainer(Process*)>
c0014c2f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c32:	89 1d d8 88 02 c0    	mov    DWORD PTR ds:0xc00288d8,ebx
c0014c38:	e8 47 fe ff ff       	call   c0014a84 <EnvVarContainer::__loadSystem()>
c0014c3d:	83 c4 18             	add    esp,0x18
c0014c40:	5b                   	pop    ebx
c0014c41:	c3                   	ret    

c0014c42 <Krnl::loadUserEnv()>:
c0014c42:	53                   	push   ebx
c0014c43:	83 ec 14             	sub    esp,0x14
c0014c46:	6a 0c                	push   0xc
c0014c48:	e8 6a 50 ff ff       	call   c0009cb7 <malloc>
c0014c4d:	89 c3                	mov    ebx,eax
c0014c4f:	58                   	pop    eax
c0014c50:	5a                   	pop    edx
c0014c51:	ff 35 50 93 02 c0    	push   DWORD PTR ds:0xc0029350
c0014c57:	53                   	push   ebx
c0014c58:	e8 43 fe ff ff       	call   c0014aa0 <EnvVarContainer::EnvVarContainer(Process*)>
c0014c5d:	89 1d d4 88 02 c0    	mov    DWORD PTR ds:0xc00288d4,ebx
c0014c63:	83 c4 18             	add    esp,0x18
c0014c66:	5b                   	pop    ebx
c0014c67:	c3                   	ret    

c0014c68 <Krnl::flushEnv()>:
c0014c68:	c3                   	ret    

c0014c69 <Krnl::getProcessTotalEnvCount(Process*)>:
c0014c69:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014c6d:	8b 15 d4 88 02 c0    	mov    edx,DWORD PTR ds:0xc00288d4
c0014c73:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0014c79:	a1 d8 88 02 c0       	mov    eax,ds:0xc00288d8
c0014c7e:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c80:	03 01                	add    eax,DWORD PTR [ecx]
c0014c82:	85 d2                	test   edx,edx
c0014c84:	74 02                	je     c0014c88 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0014c86:	03 02                	add    eax,DWORD PTR [edx]
c0014c88:	c3                   	ret    

c0014c89 <Krnl::getProcessEnvPair(Process*, int)>:
c0014c89:	57                   	push   edi
c0014c8a:	56                   	push   esi
c0014c8b:	8b 35 d4 88 02 c0    	mov    esi,DWORD PTR ds:0xc00288d4
c0014c91:	53                   	push   ebx
c0014c92:	85 f6                	test   esi,esi
c0014c94:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014c98:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014c9c:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0014ca2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014ca6:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014ca8:	75 16                	jne    c0014cc0 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0014caa:	39 c2                	cmp    edx,eax
c0014cac:	7c 16                	jl     c0014cc4 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0014cae:	8b 0d d8 88 02 c0    	mov    ecx,DWORD PTR ds:0xc00288d8
c0014cb4:	8b 31                	mov    esi,DWORD PTR [ecx]
c0014cb6:	01 c6                	add    esi,eax
c0014cb8:	39 d6                	cmp    esi,edx
c0014cba:	7e 3c                	jle    c0014cf8 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0014cbc:	29 c2                	sub    edx,eax
c0014cbe:	eb 04                	jmp    c0014cc4 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0014cc0:	39 c2                	cmp    edx,eax
c0014cc2:	7d 05                	jge    c0014cc9 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0014cc4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0014cc7:	eb 20                	jmp    c0014ce9 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0014cc9:	8b 3e                	mov    edi,DWORD PTR [esi]
c0014ccb:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0014cce:	39 d1                	cmp    ecx,edx
c0014cd0:	7e 04                	jle    c0014cd6 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0014cd2:	29 c2                	sub    edx,eax
c0014cd4:	eb 10                	jmp    c0014ce6 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0014cd6:	8b 35 d8 88 02 c0    	mov    esi,DWORD PTR ds:0xc00288d8
c0014cdc:	03 0e                	add    ecx,DWORD PTR [esi]
c0014cde:	39 d1                	cmp    ecx,edx
c0014ce0:	7e 16                	jle    c0014cf8 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0014ce2:	29 c2                	sub    edx,eax
c0014ce4:	29 fa                	sub    edx,edi
c0014ce6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014ce9:	8d 14 d0             	lea    edx,[eax+edx*8]
c0014cec:	8b 02                	mov    eax,DWORD PTR [edx]
c0014cee:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0014cf1:	89 03                	mov    DWORD PTR [ebx],eax
c0014cf3:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0014cf6:	eb 1d                	jmp    c0014d15 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0014cf8:	83 ec 0c             	sub    esp,0xc
c0014cfb:	68 37 5a 02 c0       	push   0xc0025a37
c0014d00:	e8 18 00 00 00       	call   c0014d1d <Krnl::panic(char const*)>
c0014d05:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0014d0b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0014d12:	83 c4 10             	add    esp,0x10
c0014d15:	89 d8                	mov    eax,ebx
c0014d17:	5b                   	pop    ebx
c0014d18:	5e                   	pop    esi
c0014d19:	5f                   	pop    edi
c0014d1a:	c2 04 00             	ret    0x4

c0014d1d <Krnl::panic(char const*)>:
c0014d1d:	53                   	push   ebx
c0014d1e:	83 ec 10             	sub    esp,0x10
c0014d21:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014d25:	fa                   	cli    
c0014d26:	c6 05 e4 88 02 c0 01 	mov    BYTE PTR ds:0xc00288e4,0x1
c0014d2d:	53                   	push   ebx
c0014d2e:	68 51 5a 02 c0       	push   0xc0025a51
c0014d33:	e8 8d 82 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0014d38:	83 c4 0c             	add    esp,0xc
c0014d3b:	6a 01                	push   0x1
c0014d3d:	6a 0f                	push   0xf
c0014d3f:	ff 35 84 7e 02 c0    	push   DWORD PTR ds:0xc0027e84
c0014d45:	e8 ba 5e ff ff       	call   c000ac04 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0014d4a:	59                   	pop    ecx
c0014d4b:	ff 35 84 7e 02 c0    	push   DWORD PTR ds:0xc0027e84
c0014d51:	e8 c6 63 ff ff       	call   c000b11c <VgaText::clearScreen()>
c0014d56:	58                   	pop    eax
c0014d57:	5a                   	pop    edx
c0014d58:	68 a8 5a 02 c0       	push   0xc0025aa8
c0014d5d:	ff 35 84 7e 02 c0    	push   DWORD PTR ds:0xc0027e84
c0014d63:	e8 dc 5e ff ff       	call   c000ac44 <VgaText::setTitle(char*)>
c0014d68:	83 c4 0c             	add    esp,0xc
c0014d6b:	6a 01                	push   0x1
c0014d6d:	6a 0f                	push   0xf
c0014d6f:	ff 35 84 7e 02 c0    	push   DWORD PTR ds:0xc0027e84
c0014d75:	e8 8a 5e ff ff       	call   c000ac04 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0014d7a:	59                   	pop    ecx
c0014d7b:	58                   	pop    eax
c0014d7c:	68 6a 5a 02 c0       	push   0xc0025a6a
c0014d81:	ff 35 84 7e 02 c0    	push   DWORD PTR ds:0xc0027e84
c0014d87:	e8 1c 65 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0014d8c:	58                   	pop    eax
c0014d8d:	5a                   	pop    edx
c0014d8e:	68 f4 5a 02 c0       	push   0xc0025af4
c0014d93:	ff 35 84 7e 02 c0    	push   DWORD PTR ds:0xc0027e84
c0014d99:	e8 0a 65 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0014d9e:	59                   	pop    ecx
c0014d9f:	58                   	pop    eax
c0014da0:	68 86 5a 02 c0       	push   0xc0025a86
c0014da5:	ff 35 84 7e 02 c0    	push   DWORD PTR ds:0xc0027e84
c0014dab:	e8 f8 64 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0014db0:	58                   	pop    eax
c0014db1:	5a                   	pop    edx
c0014db2:	53                   	push   ebx
c0014db3:	ff 35 84 7e 02 c0    	push   DWORD PTR ds:0xc0027e84
c0014db9:	e8 ea 64 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0014dbe:	59                   	pop    ecx
c0014dbf:	5b                   	pop    ebx
c0014dc0:	68 a6 5a 02 c0       	push   0xc0025aa6
c0014dc5:	ff 35 84 7e 02 c0    	push   DWORD PTR ds:0xc0027e84
c0014dcb:	e8 d8 64 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0014dd0:	58                   	pop    eax
c0014dd1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014dd5:	e8 77 2b 00 00       	call   c0017951 <Thr::getDriverNameFromAddress(unsigned long)>
c0014dda:	83 c4 10             	add    esp,0x10
c0014ddd:	85 c0                	test   eax,eax
c0014ddf:	0f 84 36 01 00 00    	je     c0014f1b <Krnl::panic(char const*)+0x1fe>
c0014de5:	83 ec 08             	sub    esp,0x8
c0014de8:	89 c3                	mov    ebx,eax
c0014dea:	68 30 5b 02 c0       	push   0xc0025b30
c0014def:	ff 35 84 7e 02 c0    	push   DWORD PTR ds:0xc0027e84
c0014df5:	e8 ae 64 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0014dfa:	59                   	pop    ecx
c0014dfb:	58                   	pop    eax
c0014dfc:	68 86 5a 02 c0       	push   0xc0025a86
c0014e01:	ff 35 84 7e 02 c0    	push   DWORD PTR ds:0xc0027e84
c0014e07:	e8 9c 64 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0014e0c:	58                   	pop    eax
c0014e0d:	5a                   	pop    edx
c0014e0e:	53                   	push   ebx
c0014e0f:	ff 35 84 7e 02 c0    	push   DWORD PTR ds:0xc0027e84
c0014e15:	e8 8e 64 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0014e1a:	83 c4 10             	add    esp,0x10
c0014e1d:	83 ec 08             	sub    esp,0x8
c0014e20:	68 a5 5a 02 c0       	push   0xc0025aa5
c0014e25:	ff 35 84 7e 02 c0    	push   DWORD PTR ds:0xc0027e84
c0014e2b:	e8 78 64 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0014e30:	58                   	pop    eax
c0014e31:	5a                   	pop    edx
c0014e32:	68 88 5b 02 c0       	push   0xc0025b88
c0014e37:	ff 35 84 7e 02 c0    	push   DWORD PTR ds:0xc0027e84
c0014e3d:	e8 66 64 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0014e42:	59                   	pop    ecx
c0014e43:	5b                   	pop    ebx
c0014e44:	68 c8 5b 02 c0       	push   0xc0025bc8
c0014e49:	ff 35 84 7e 02 c0    	push   DWORD PTR ds:0xc0027e84
c0014e4f:	e8 54 64 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0014e54:	58                   	pop    eax
c0014e55:	5a                   	pop    edx
c0014e56:	68 91 5a 02 c0       	push   0xc0025a91
c0014e5b:	ff 35 84 7e 02 c0    	push   DWORD PTR ds:0xc0027e84
c0014e61:	e8 42 64 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0014e66:	59                   	pop    ecx
c0014e67:	5b                   	pop    ebx
c0014e68:	68 0c 5c 02 c0       	push   0xc0025c0c
c0014e6d:	ff 35 84 7e 02 c0    	push   DWORD PTR ds:0xc0027e84
c0014e73:	e8 30 64 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0014e78:	58                   	pop    eax
c0014e79:	5a                   	pop    edx
c0014e7a:	68 a9 5a 02 c0       	push   0xc0025aa9
c0014e7f:	ff 35 84 7e 02 c0    	push   DWORD PTR ds:0xc0027e84
c0014e85:	e8 1e 64 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0014e8a:	0f 20 c0             	mov    eax,cr0
c0014e8d:	59                   	pop    ecx
c0014e8e:	5b                   	pop    ebx
c0014e8f:	50                   	push   eax
c0014e90:	ff 35 84 7e 02 c0    	push   DWORD PTR ds:0xc0027e84
c0014e96:	e8 c7 63 ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c0014e9b:	58                   	pop    eax
c0014e9c:	5a                   	pop    edx
c0014e9d:	68 b3 5a 02 c0       	push   0xc0025ab3
c0014ea2:	ff 35 84 7e 02 c0    	push   DWORD PTR ds:0xc0027e84
c0014ea8:	e8 fb 63 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0014ead:	0f 20 d0             	mov    eax,cr2
c0014eb0:	59                   	pop    ecx
c0014eb1:	5b                   	pop    ebx
c0014eb2:	50                   	push   eax
c0014eb3:	ff 35 84 7e 02 c0    	push   DWORD PTR ds:0xc0027e84
c0014eb9:	e8 a4 63 ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c0014ebe:	58                   	pop    eax
c0014ebf:	5a                   	pop    edx
c0014ec0:	68 bd 5a 02 c0       	push   0xc0025abd
c0014ec5:	ff 35 84 7e 02 c0    	push   DWORD PTR ds:0xc0027e84
c0014ecb:	e8 d8 63 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0014ed0:	0f 20 d8             	mov    eax,cr3
c0014ed3:	59                   	pop    ecx
c0014ed4:	5b                   	pop    ebx
c0014ed5:	50                   	push   eax
c0014ed6:	ff 35 84 7e 02 c0    	push   DWORD PTR ds:0xc0027e84
c0014edc:	e8 81 63 ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c0014ee1:	58                   	pop    eax
c0014ee2:	5a                   	pop    edx
c0014ee3:	68 d0 5a 02 c0       	push   0xc0025ad0
c0014ee8:	ff 35 84 7e 02 c0    	push   DWORD PTR ds:0xc0027e84
c0014eee:	e8 b5 63 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0014ef3:	0f 20 e0             	mov    eax,cr4
c0014ef6:	59                   	pop    ecx
c0014ef7:	5b                   	pop    ebx
c0014ef8:	50                   	push   eax
c0014ef9:	ff 35 84 7e 02 c0    	push   DWORD PTR ds:0xc0027e84
c0014eff:	e8 5e 63 ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c0014f04:	58                   	pop    eax
c0014f05:	5a                   	pop    edx
c0014f06:	68 da 5a 02 c0       	push   0xc0025ada
c0014f0b:	ff 35 84 7e 02 c0    	push   DWORD PTR ds:0xc0027e84
c0014f11:	e8 92 63 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0014f16:	83 c4 10             	add    esp,0x10
c0014f19:	eb fe                	jmp    c0014f19 <Krnl::panic(char const*)+0x1fc>
c0014f1b:	51                   	push   ecx
c0014f1c:	51                   	push   ecx
c0014f1d:	68 5c 5b 02 c0       	push   0xc0025b5c
c0014f22:	ff 35 84 7e 02 c0    	push   DWORD PTR ds:0xc0027e84
c0014f28:	e8 7b 63 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0014f2d:	5b                   	pop    ebx
c0014f2e:	58                   	pop    eax
c0014f2f:	68 86 5a 02 c0       	push   0xc0025a86
c0014f34:	ff 35 84 7e 02 c0    	push   DWORD PTR ds:0xc0027e84
c0014f3a:	e8 69 63 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0014f3f:	58                   	pop    eax
c0014f40:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014f45:	5a                   	pop    edx
c0014f46:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014f49:	83 c0 0c             	add    eax,0xc
c0014f4c:	50                   	push   eax
c0014f4d:	ff 35 84 7e 02 c0    	push   DWORD PTR ds:0xc0027e84
c0014f53:	e8 50 63 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0014f58:	83 c4 10             	add    esp,0x10
c0014f5b:	e9 bd fe ff ff       	jmp    c0014e1d <Krnl::panic(char const*)+0x100>

c0014f60 <Krnl::powerThread(void*)>:
c0014f60:	53                   	push   ebx
c0014f61:	83 ec 08             	sub    esp,0x8
c0014f64:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c0014f69:	48                   	dec    eax
c0014f6a:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c0014f6f:	75 01                	jne    c0014f72 <Krnl::powerThread(void*)+0x12>
c0014f71:	fb                   	sti    
c0014f72:	52                   	push   edx
c0014f73:	52                   	push   edx
c0014f74:	ff 35 44 89 02 c0    	push   DWORD PTR ds:0xc0028944
c0014f7a:	68 32 5c 02 c0       	push   0xc0025c32
c0014f7f:	e8 41 80 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0014f84:	59                   	pop    ecx
c0014f85:	8b 1d 34 89 02 c0    	mov    ebx,DWORD PTR ds:0xc0028934
c0014f8b:	58                   	pop    eax
c0014f8c:	c6 05 00 89 02 c0 00 	mov    BYTE PTR ds:0xc0028900,0x0
c0014f93:	53                   	push   ebx
c0014f94:	68 3c 5c 02 c0       	push   0xc0025c3c
c0014f99:	e8 27 80 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0014f9e:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c0014fa5:	e8 de 36 00 00       	call   c0018688 <sleep(unsigned int)>
c0014faa:	a1 44 89 02 c0       	mov    eax,ds:0xc0028944
c0014faf:	83 c4 10             	add    esp,0x10
c0014fb2:	83 c0 0a             	add    eax,0xa
c0014fb5:	85 db                	test   ebx,ebx
c0014fb7:	a3 44 89 02 c0       	mov    ds:0xc0028944,eax
c0014fbc:	74 b4                	je     c0014f72 <Krnl::powerThread(void*)+0x12>
c0014fbe:	39 d8                	cmp    eax,ebx
c0014fc0:	7e b0                	jle    c0014f72 <Krnl::powerThread(void*)+0x12>
c0014fc2:	83 ec 0c             	sub    esp,0xc
c0014fc5:	68 54 5c 02 c0       	push   0xc0025c54
c0014fca:	e8 f6 7f ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0014fcf:	58                   	pop    eax
c0014fd0:	ff 35 08 7e 02 c0    	push   DWORD PTR ds:0xc0027e08
c0014fd6:	e8 1f 43 ff ff       	call   c00092fa <Computer::sleep()>
c0014fdb:	83 c4 10             	add    esp,0x10
c0014fde:	eb 92                	jmp    c0014f72 <Krnl::powerThread(void*)+0x12>

c0014fe0 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c0014fe0:	57                   	push   edi
c0014fe1:	b9 09 00 00 00       	mov    ecx,0x9
c0014fe6:	56                   	push   esi
c0014fe7:	bf 20 89 02 c0       	mov    edi,0xc0028920
c0014fec:	fc                   	cld    
c0014fed:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0014ff1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014ff3:	5e                   	pop    esi
c0014ff4:	5f                   	pop    edi
c0014ff5:	c3                   	ret    

c0014ff6 <Krnl::userIOReceived()>:
c0014ff6:	c7 05 44 89 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028944,0x0
c0015000:	c3                   	ret    

c0015001 <Krnl::handlePowerButton()>:
c0015001:	83 ec 0c             	sub    esp,0xc
c0015004:	a1 20 89 02 c0       	mov    eax,ds:0xc0028920
c0015009:	83 f8 02             	cmp    eax,0x2
c001500c:	75 10                	jne    c001501e <Krnl::handlePowerButton()+0x1d>
c001500e:	83 ec 0c             	sub    esp,0xc
c0015011:	ff 35 08 7e 02 c0    	push   DWORD PTR ds:0xc0027e08
c0015017:	e8 ae 42 ff ff       	call   c00092ca <Computer::shutdown()>
c001501c:	eb 11                	jmp    c001502f <Krnl::handlePowerButton()+0x2e>
c001501e:	48                   	dec    eax
c001501f:	75 11                	jne    c0015032 <Krnl::handlePowerButton()+0x31>
c0015021:	83 ec 0c             	sub    esp,0xc
c0015024:	ff 35 08 7e 02 c0    	push   DWORD PTR ds:0xc0027e08
c001502a:	e8 cb 42 ff ff       	call   c00092fa <Computer::sleep()>
c001502f:	83 c4 10             	add    esp,0x10
c0015032:	83 c4 0c             	add    esp,0xc
c0015035:	c3                   	ret    

c0015036 <Krnl::handleSleepButton()>:
c0015036:	83 ec 0c             	sub    esp,0xc
c0015039:	a1 24 89 02 c0       	mov    eax,ds:0xc0028924
c001503e:	83 f8 02             	cmp    eax,0x2
c0015041:	75 10                	jne    c0015053 <Krnl::handleSleepButton()+0x1d>
c0015043:	83 ec 0c             	sub    esp,0xc
c0015046:	ff 35 08 7e 02 c0    	push   DWORD PTR ds:0xc0027e08
c001504c:	e8 79 42 ff ff       	call   c00092ca <Computer::shutdown()>
c0015051:	eb 11                	jmp    c0015064 <Krnl::handleSleepButton()+0x2e>
c0015053:	48                   	dec    eax
c0015054:	75 11                	jne    c0015067 <Krnl::handleSleepButton()+0x31>
c0015056:	83 ec 0c             	sub    esp,0xc
c0015059:	ff 35 08 7e 02 c0    	push   DWORD PTR ds:0xc0027e08
c001505f:	e8 96 42 ff ff       	call   c00092fa <Computer::sleep()>
c0015064:	83 c4 10             	add    esp,0x10
c0015067:	83 c4 0c             	add    esp,0xc
c001506a:	c3                   	ret    

c001506b <Krnl::setupPowerManager()>:
c001506b:	83 ec 0c             	sub    esp,0xc
c001506e:	c7 05 44 89 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028944,0x0
c0015078:	68 f0 00 00 00       	push   0xf0
c001507d:	c6 05 00 89 02 c0 00 	mov    BYTE PTR ds:0xc0028900,0x0
c0015084:	6a 00                	push   0x0
c0015086:	68 60 4f 01 c0       	push   0xc0014f60
c001508b:	ff 35 50 93 02 c0    	push   DWORD PTR ds:0xc0029350
c0015091:	e8 ce 30 00 00       	call   c0018164 <Process::createThread(void (*)(void*), void*, int)>
c0015096:	c7 05 20 89 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0028920,0x2
c00150a0:	c7 05 24 89 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028924,0x1
c00150aa:	c7 05 28 89 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0028928,0x3
c00150b4:	c7 05 2c 89 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002892c,0x0
c00150be:	c7 05 38 89 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028938,0x0
c00150c8:	c7 05 30 89 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028930,0x0
c00150d2:	c7 05 3c 89 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002893c,0x0
c00150dc:	c7 05 34 89 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028934,0x3c
c00150e6:	c7 05 40 89 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028940,0x3c
c00150f0:	83 c4 1c             	add    esp,0x1c
c00150f3:	c3                   	ret    

c00150f4 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c00150f4:	55                   	push   ebp
c00150f5:	57                   	push   edi
c00150f6:	56                   	push   esi
c00150f7:	53                   	push   ebx
c00150f8:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00150fe:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0015105:	8a 1e                	mov    bl,BYTE PTR [esi]
c0015107:	8d 6e 01             	lea    ebp,[esi+0x1]
c001510a:	80 fb 40             	cmp    bl,0x40
c001510d:	75 1b                	jne    c001512a <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001510f:	8a 16                	mov    dl,BYTE PTR [esi]
c0015111:	84 d2                	test   dl,dl
c0015113:	0f 84 f1 00 00 00    	je     c001520a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015119:	8d 46 01             	lea    eax,[esi+0x1]
c001511c:	80 fa 3a             	cmp    dl,0x3a
c001511f:	74 04                	je     c0015125 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0015121:	89 c6                	mov    esi,eax
c0015123:	eb ea                	jmp    c001510f <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0015125:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015128:	89 c6                	mov    esi,eax
c001512a:	50                   	push   eax
c001512b:	6a 40                	push   0x40
c001512d:	6a 00                	push   0x0
c001512f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015133:	50                   	push   eax
c0015134:	e8 43 b5 fe ff       	call   c000067c <memset>
c0015139:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0015140:	31 c0                	xor    eax,eax
c0015142:	83 c4 10             	add    esp,0x10
c0015145:	8a 0f                	mov    cl,BYTE PTR [edi]
c0015147:	84 c9                	test   cl,cl
c0015149:	0f 84 bb 00 00 00    	je     c001520a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001514f:	3d c7 00 00 00       	cmp    eax,0xc7
c0015154:	0f 8f b0 00 00 00    	jg     c001520a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001515a:	80 f9 0a             	cmp    cl,0xa
c001515d:	0f 85 98 00 00 00    	jne    c00151fb <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0015163:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0015168:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001516c:	a8 df                	test   al,0xdf
c001516e:	0f 94 c1             	sete   cl
c0015171:	3c 23                	cmp    al,0x23
c0015173:	0f 94 c2             	sete   dl
c0015176:	08 d1                	or     cl,dl
c0015178:	75 4a                	jne    c00151c4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001517a:	8d 50 f7             	lea    edx,[eax-0x9]
c001517d:	80 fa 01             	cmp    dl,0x1
c0015180:	76 42                	jbe    c00151c4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015182:	3c 5b                	cmp    al,0x5b
c0015184:	75 42                	jne    c00151c8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0015186:	80 fb 40             	cmp    bl,0x40
c0015189:	75 39                	jne    c00151c4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001518b:	83 ec 0c             	sub    esp,0xc
c001518e:	8d 54 24 65          	lea    edx,[esp+0x65]
c0015192:	52                   	push   edx
c0015193:	e8 00 b5 fe ff       	call   c0000698 <strlen>
c0015198:	83 c4 10             	add    esp,0x10
c001519b:	83 f8 3f             	cmp    eax,0x3f
c001519e:	77 6a                	ja     c001520a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00151a0:	50                   	push   eax
c00151a1:	50                   	push   eax
c00151a2:	8d 54 24 61          	lea    edx,[esp+0x61]
c00151a6:	52                   	push   edx
c00151a7:	8d 54 24 24          	lea    edx,[esp+0x24]
c00151ab:	52                   	push   edx
c00151ac:	e8 87 b5 fe ff       	call   c0000738 <strcpy>
c00151b1:	58                   	pop    eax
c00151b2:	8d 54 24 24          	lea    edx,[esp+0x24]
c00151b6:	52                   	push   edx
c00151b7:	e8 dc b4 fe ff       	call   c0000698 <strlen>
c00151bc:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c00151c1:	83 c4 10             	add    esp,0x10
c00151c4:	31 d2                	xor    edx,edx
c00151c6:	eb 3a                	jmp    c0015202 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c00151c8:	80 fb 40             	cmp    bl,0x40
c00151cb:	74 06                	je     c00151d3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c00151cd:	8d 44 24 58          	lea    eax,[esp+0x58]
c00151d1:	eb 20                	jmp    c00151f3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c00151d3:	50                   	push   eax
c00151d4:	50                   	push   eax
c00151d5:	55                   	push   ebp
c00151d6:	8d 44 24 24          	lea    eax,[esp+0x24]
c00151da:	50                   	push   eax
c00151db:	e8 e4 b5 fe ff       	call   c00007c4 <strcmp>
c00151e0:	83 c4 10             	add    esp,0x10
c00151e3:	85 c0                	test   eax,eax
c00151e5:	75 dd                	jne    c00151c4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00151e7:	eb e4                	jmp    c00151cd <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c00151e9:	8d 50 01             	lea    edx,[eax+0x1]
c00151ec:	80 f9 3d             	cmp    cl,0x3d
c00151ef:	74 1d                	je     c001520e <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c00151f1:	89 d0                	mov    eax,edx
c00151f3:	8a 08                	mov    cl,BYTE PTR [eax]
c00151f5:	84 c9                	test   cl,cl
c00151f7:	75 f0                	jne    c00151e9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c00151f9:	eb 0f                	jmp    c001520a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00151fb:	8d 50 01             	lea    edx,[eax+0x1]
c00151fe:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0015202:	47                   	inc    edi
c0015203:	89 d0                	mov    eax,edx
c0015205:	e9 3b ff ff ff       	jmp    c0015145 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001520a:	31 c0                	xor    eax,eax
c001520c:	eb 33                	jmp    c0015241 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001520e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015212:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0015215:	50                   	push   eax
c0015216:	50                   	push   eax
c0015217:	8d 44 24 60          	lea    eax,[esp+0x60]
c001521b:	50                   	push   eax
c001521c:	56                   	push   esi
c001521d:	e8 a2 b5 fe ff       	call   c00007c4 <strcmp>
c0015222:	83 c4 10             	add    esp,0x10
c0015225:	85 c0                	test   eax,eax
c0015227:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001522b:	75 97                	jne    c00151c4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001522d:	51                   	push   ecx
c001522e:	51                   	push   ecx
c001522f:	52                   	push   edx
c0015230:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0015237:	e8 fc b4 fe ff       	call   c0000738 <strcpy>
c001523c:	83 c4 10             	add    esp,0x10
c001523f:	b0 01                	mov    al,0x1
c0015241:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015247:	5b                   	pop    ebx
c0015248:	5e                   	pop    esi
c0015249:	5f                   	pop    edi
c001524a:	5d                   	pop    ebp
c001524b:	c3                   	ret    

c001524c <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001524c:	57                   	push   edi
c001524d:	56                   	push   esi
c001524e:	53                   	push   ebx
c001524f:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0015255:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001525c:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0015263:	53                   	push   ebx
c0015264:	e8 2f b4 fe ff       	call   c0000698 <strlen>
c0015269:	89 34 24             	mov    DWORD PTR [esp],esi
c001526c:	89 c7                	mov    edi,eax
c001526e:	e8 25 b4 fe ff       	call   c0000698 <strlen>
c0015273:	83 c4 10             	add    esp,0x10
c0015276:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001527a:	3d ff 00 00 00       	cmp    eax,0xff
c001527f:	0f 87 d3 00 00 00    	ja     c0015358 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0015285:	57                   	push   edi
c0015286:	57                   	push   edi
c0015287:	56                   	push   esi
c0015288:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001528c:	56                   	push   esi
c001528d:	e8 a6 b4 fe ff       	call   c0000738 <strcpy>
c0015292:	58                   	pop    eax
c0015293:	5a                   	pop    edx
c0015294:	68 b7 5f 02 c0       	push   0xc0025fb7
c0015299:	56                   	push   esi
c001529a:	e8 d9 b5 fe ff       	call   c0000878 <strcat>
c001529f:	59                   	pop    ecx
c00152a0:	5f                   	pop    edi
c00152a1:	53                   	push   ebx
c00152a2:	56                   	push   esi
c00152a3:	e8 d0 b5 fe ff       	call   c0000878 <strcat>
c00152a8:	58                   	pop    eax
c00152a9:	5a                   	pop    edx
c00152aa:	68 61 5c 02 c0       	push   0xc0025c61
c00152af:	56                   	push   esi
c00152b0:	e8 c3 b5 fe ff       	call   c0000878 <strcat>
c00152b5:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00152bc:	e8 f6 49 ff ff       	call   c0009cb7 <malloc>
c00152c1:	83 c4 0c             	add    esp,0xc
c00152c4:	89 c3                	mov    ebx,eax
c00152c6:	ff 35 50 93 02 c0    	push   DWORD PTR ds:0xc0029350
c00152cc:	56                   	push   esi
c00152cd:	50                   	push   eax
c00152ce:	e8 5d 82 ff ff       	call   c000d530 <File::File(char const*, Process*)>
c00152d3:	83 c4 10             	add    esp,0x10
c00152d6:	85 db                	test   ebx,ebx
c00152d8:	74 7e                	je     c0015358 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00152da:	51                   	push   ecx
c00152db:	51                   	push   ecx
c00152dc:	6a 01                	push   0x1
c00152de:	53                   	push   ebx
c00152df:	e8 26 83 ff ff       	call   c000d60a <File::open(FileOpenMode)>
c00152e4:	83 c4 10             	add    esp,0x10
c00152e7:	85 c0                	test   eax,eax
c00152e9:	74 08                	je     c00152f3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c00152eb:	83 ec 0c             	sub    esp,0xc
c00152ee:	8b 03                	mov    eax,DWORD PTR [ebx]
c00152f0:	53                   	push   ebx
c00152f1:	eb 5f                	jmp    c0015352 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c00152f3:	52                   	push   edx
c00152f4:	8d 44 24 17          	lea    eax,[esp+0x17]
c00152f8:	50                   	push   eax
c00152f9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00152fd:	50                   	push   eax
c00152fe:	53                   	push   ebx
c00152ff:	e8 b2 85 ff ff       	call   c000d8b6 <File::stat(unsigned long long*, bool*)>
c0015304:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015308:	83 c4 10             	add    esp,0x10
c001530b:	89 c1                	mov    ecx,eax
c001530d:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0015311:	74 31                	je     c0015344 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0015313:	83 ec 0c             	sub    esp,0xc
c0015316:	50                   	push   eax
c0015317:	e8 9b 49 ff ff       	call   c0009cb7 <malloc>
c001531c:	89 c6                	mov    esi,eax
c001531e:	58                   	pop    eax
c001531f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015321:	8d 54 24 20          	lea    edx,[esp+0x20]
c0015325:	52                   	push   edx
c0015326:	56                   	push   esi
c0015327:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001532b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001532f:	53                   	push   ebx
c0015330:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015333:	83 c4 20             	add    esp,0x20
c0015336:	85 c0                	test   eax,eax
c0015338:	75 0a                	jne    c0015344 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001533a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001533e:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0015342:	74 18                	je     c001535c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0015344:	83 ec 0c             	sub    esp,0xc
c0015347:	53                   	push   ebx
c0015348:	e8 1b 83 ff ff       	call   c000d668 <File::close()>
c001534d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001534f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015352:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015355:	83 c4 10             	add    esp,0x10
c0015358:	31 c0                	xor    eax,eax
c001535a:	eb 3b                	jmp    c0015397 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001535c:	83 ec 0c             	sub    esp,0xc
c001535f:	53                   	push   ebx
c0015360:	e8 03 83 ff ff       	call   c000d668 <File::close()>
c0015365:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015367:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001536a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001536d:	83 c4 0c             	add    esp,0xc
c0015370:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0015377:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001537e:	56                   	push   esi
c001537f:	e8 70 fd ff ff       	call   c00150f4 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0015384:	89 34 24             	mov    DWORD PTR [esp],esi
c0015387:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001538b:	e8 37 49 ff ff       	call   c0009cc7 <free>
c0015390:	83 c4 10             	add    esp,0x10
c0015393:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015397:	81 c4 20 01 00 00    	add    esp,0x120
c001539d:	5b                   	pop    ebx
c001539e:	5e                   	pop    esi
c001539f:	5f                   	pop    edi
c00153a0:	c3                   	ret    

c00153a1 <Reg::getLine(char*, char*, char*)>:
c00153a1:	57                   	push   edi
c00153a2:	56                   	push   esi
c00153a3:	53                   	push   ebx
c00153a4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00153a8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00153ac:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00153b0:	57                   	push   edi
c00153b1:	56                   	push   esi
c00153b2:	53                   	push   ebx
c00153b3:	68 66 5c 02 c0       	push   0xc0025c66
c00153b8:	e8 8f fe ff ff       	call   c001524c <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00153bd:	83 c4 10             	add    esp,0x10
c00153c0:	84 c0                	test   al,al
c00153c2:	75 10                	jne    c00153d4 <Reg::getLine(char*, char*, char*)+0x33>
c00153c4:	57                   	push   edi
c00153c5:	56                   	push   esi
c00153c6:	53                   	push   ebx
c00153c7:	68 8b 5c 02 c0       	push   0xc0025c8b
c00153cc:	e8 7b fe ff ff       	call   c001524c <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00153d1:	83 c4 10             	add    esp,0x10
c00153d4:	5b                   	pop    ebx
c00153d5:	5e                   	pop    esi
c00153d6:	5f                   	pop    edi
c00153d7:	c3                   	ret    

c00153d8 <Reg::readInt(char*, char*, int*)>:
c00153d8:	55                   	push   ebp
c00153d9:	57                   	push   edi
c00153da:	56                   	push   esi
c00153db:	53                   	push   ebx
c00153dc:	81 ec f0 00 00 00    	sub    esp,0xf0
c00153e2:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00153e6:	57                   	push   edi
c00153e7:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00153ee:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00153f5:	e8 a7 ff ff ff       	call   c00153a1 <Reg::getLine(char*, char*, char*)>
c00153fa:	83 c4 10             	add    esp,0x10
c00153fd:	84 c0                	test   al,al
c00153ff:	0f 84 b3 00 00 00    	je     c00154b8 <Reg::readInt(char*, char*, int*)+0xe0>
c0015405:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0015409:	80 fa 2b             	cmp    dl,0x2b
c001540c:	74 0c                	je     c001541a <Reg::readInt(char*, char*, int*)+0x42>
c001540e:	80 fa 2d             	cmp    dl,0x2d
c0015411:	75 0e                	jne    c0015421 <Reg::readInt(char*, char*, int*)+0x49>
c0015413:	ba 01 00 00 00       	mov    edx,0x1
c0015418:	eb 0b                	jmp    c0015425 <Reg::readInt(char*, char*, int*)+0x4d>
c001541a:	ba 01 00 00 00       	mov    edx,0x1
c001541f:	eb 02                	jmp    c0015423 <Reg::readInt(char*, char*, int*)+0x4b>
c0015421:	31 d2                	xor    edx,edx
c0015423:	31 c0                	xor    eax,eax
c0015425:	be 0a 00 00 00       	mov    esi,0xa
c001542a:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001542f:	75 20                	jne    c0015451 <Reg::readInt(char*, char*, int*)+0x79>
c0015431:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0015435:	80 f9 78             	cmp    cl,0x78
c0015438:	75 0a                	jne    c0015444 <Reg::readInt(char*, char*, int*)+0x6c>
c001543a:	83 c2 02             	add    edx,0x2
c001543d:	be 10 00 00 00       	mov    esi,0x10
c0015442:	eb 0d                	jmp    c0015451 <Reg::readInt(char*, char*, int*)+0x79>
c0015444:	80 f9 62             	cmp    cl,0x62
c0015447:	75 08                	jne    c0015451 <Reg::readInt(char*, char*, int*)+0x79>
c0015449:	83 c2 02             	add    edx,0x2
c001544c:	be 02 00 00 00       	mov    esi,0x2
c0015451:	01 d7                	add    edi,edx
c0015453:	31 d2                	xor    edx,edx
c0015455:	8a 1f                	mov    bl,BYTE PTR [edi]
c0015457:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001545b:	80 fb 0d             	cmp    bl,0xd
c001545e:	0f 94 c3             	sete   bl
c0015461:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0015466:	0f 94 c1             	sete   cl
c0015469:	08 cb                	or     bl,cl
c001546b:	75 3a                	jne    c00154a7 <Reg::readInt(char*, char*, int*)+0xcf>
c001546d:	0f af d6             	imul   edx,esi
c0015470:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0015475:	83 fe 10             	cmp    esi,0x10
c0015478:	75 26                	jne    c00154a0 <Reg::readInt(char*, char*, int*)+0xc8>
c001547a:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001547e:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0015481:	89 e9                	mov    ecx,ebp
c0015483:	80 f9 05             	cmp    cl,0x5
c0015486:	77 06                	ja     c001548e <Reg::readInt(char*, char*, int*)+0xb6>
c0015488:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001548c:	eb 16                	jmp    c00154a4 <Reg::readInt(char*, char*, int*)+0xcc>
c001548e:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0015492:	83 e9 61             	sub    ecx,0x61
c0015495:	80 f9 05             	cmp    cl,0x5
c0015498:	77 06                	ja     c00154a0 <Reg::readInt(char*, char*, int*)+0xc8>
c001549a:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001549e:	eb 04                	jmp    c00154a4 <Reg::readInt(char*, char*, int*)+0xcc>
c00154a0:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c00154a4:	47                   	inc    edi
c00154a5:	eb ae                	jmp    c0015455 <Reg::readInt(char*, char*, int*)+0x7d>
c00154a7:	84 c0                	test   al,al
c00154a9:	74 02                	je     c00154ad <Reg::readInt(char*, char*, int*)+0xd5>
c00154ab:	f7 da                	neg    edx
c00154ad:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c00154b4:	89 10                	mov    DWORD PTR [eax],edx
c00154b6:	88 d8                	mov    al,bl
c00154b8:	81 c4 ec 00 00 00    	add    esp,0xec
c00154be:	5b                   	pop    ebx
c00154bf:	5e                   	pop    esi
c00154c0:	5f                   	pop    edi
c00154c1:	5d                   	pop    ebp
c00154c2:	c3                   	ret    

c00154c3 <Reg::readString(char*, char*, char*, int)>:
c00154c3:	57                   	push   edi
c00154c4:	56                   	push   esi
c00154c5:	53                   	push   ebx
c00154c6:	81 ec d4 00 00 00    	sub    esp,0xd4
c00154cc:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c00154d3:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c00154d7:	57                   	push   edi
c00154d8:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00154df:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00154e6:	e8 b6 fe ff ff       	call   c00153a1 <Reg::getLine(char*, char*, char*)>
c00154eb:	83 c4 10             	add    esp,0x10
c00154ee:	89 c6                	mov    esi,eax
c00154f0:	84 c0                	test   al,al
c00154f2:	74 44                	je     c0015538 <Reg::readString(char*, char*, char*, int)+0x75>
c00154f4:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c00154fb:	31 c0                	xor    eax,eax
c00154fd:	4a                   	dec    edx
c00154fe:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0015501:	84 c9                	test   cl,cl
c0015503:	74 0f                	je     c0015514 <Reg::readString(char*, char*, char*, int)+0x51>
c0015505:	39 c2                	cmp    edx,eax
c0015507:	7e 0b                	jle    c0015514 <Reg::readString(char*, char*, char*, int)+0x51>
c0015509:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001550c:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0015511:	40                   	inc    eax
c0015512:	eb ea                	jmp    c00154fe <Reg::readString(char*, char*, char*, int)+0x3b>
c0015514:	83 ec 0c             	sub    esp,0xc
c0015517:	53                   	push   ebx
c0015518:	e8 7b b1 fe ff       	call   c0000698 <strlen>
c001551d:	83 c4 10             	add    esp,0x10
c0015520:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0015525:	75 11                	jne    c0015538 <Reg::readString(char*, char*, char*, int)+0x75>
c0015527:	83 ec 0c             	sub    esp,0xc
c001552a:	53                   	push   ebx
c001552b:	e8 68 b1 fe ff       	call   c0000698 <strlen>
c0015530:	83 c4 10             	add    esp,0x10
c0015533:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0015538:	81 c4 d0 00 00 00    	add    esp,0xd0
c001553e:	89 f0                	mov    eax,esi
c0015540:	5b                   	pop    ebx
c0015541:	5e                   	pop    esi
c0015542:	5f                   	pop    edi
c0015543:	c3                   	ret    

c0015544 <Reg::readBool(char*, char*, bool*)>:
c0015544:	83 ec 20             	sub    esp,0x20
c0015547:	8d 44 24 10          	lea    eax,[esp+0x10]
c001554b:	50                   	push   eax
c001554c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015550:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015554:	e8 7f fe ff ff       	call   c00153d8 <Reg::readInt(char*, char*, int*)>
c0015559:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001555e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0015562:	0f 95 02             	setne  BYTE PTR [edx]
c0015565:	83 c4 2c             	add    esp,0x2c
c0015568:	c3                   	ret    

c0015569 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0015569:	53                   	push   ebx
c001556a:	83 ec 1c             	sub    esp,0x1c
c001556d:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0015571:	8d 44 24 13          	lea    eax,[esp+0x13]
c0015575:	50                   	push   eax
c0015576:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001557a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001557e:	e8 c1 ff ff ff       	call   c0015544 <Reg::readBool(char*, char*, bool*)>
c0015583:	83 c4 10             	add    esp,0x10
c0015586:	84 c0                	test   al,al
c0015588:	74 04                	je     c001558e <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001558a:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001558e:	88 d8                	mov    al,bl
c0015590:	83 c4 18             	add    esp,0x18
c0015593:	5b                   	pop    ebx
c0015594:	c3                   	ret    

c0015595 <Reg::readIntWithDefault(char*, char*, int)>:
c0015595:	53                   	push   ebx
c0015596:	83 ec 1c             	sub    esp,0x1c
c0015599:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001559d:	8d 44 24 10          	lea    eax,[esp+0x10]
c00155a1:	50                   	push   eax
c00155a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00155a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00155aa:	e8 29 fe ff ff       	call   c00153d8 <Reg::readInt(char*, char*, int*)>
c00155af:	83 c4 10             	add    esp,0x10
c00155b2:	84 c0                	test   al,al
c00155b4:	74 04                	je     c00155ba <Reg::readIntWithDefault(char*, char*, int)+0x25>
c00155b6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00155ba:	89 d8                	mov    eax,ebx
c00155bc:	83 c4 18             	add    esp,0x18
c00155bf:	5b                   	pop    ebx
c00155c0:	c3                   	ret    

c00155c1 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c00155c1:	57                   	push   edi
c00155c2:	56                   	push   esi
c00155c3:	56                   	push   esi
c00155c4:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00155c8:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00155cc:	56                   	push   esi
c00155cd:	57                   	push   edi
c00155ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00155d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00155d6:	e8 e8 fe ff ff       	call   c00154c3 <Reg::readString(char*, char*, char*, int)>
c00155db:	83 c4 10             	add    esp,0x10
c00155de:	84 c0                	test   al,al
c00155e0:	75 1a                	jne    c00155fc <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c00155e2:	51                   	push   ecx
c00155e3:	56                   	push   esi
c00155e4:	6a 00                	push   0x0
c00155e6:	57                   	push   edi
c00155e7:	e8 90 b0 fe ff       	call   c000067c <memset>
c00155ec:	8d 4e ff             	lea    ecx,[esi-0x1]
c00155ef:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00155f3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00155f5:	83 c4 10             	add    esp,0x10
c00155f8:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00155fc:	89 f8                	mov    eax,edi
c00155fe:	5a                   	pop    edx
c00155ff:	5e                   	pop    esi
c0015600:	5f                   	pop    edi
c0015601:	c3                   	ret    

c0015602 <Sys::eject(regs*)>:
c0015602:	83 ec 0c             	sub    esp,0xc
c0015605:	83 ca ff             	or     edx,0xffffffff
c0015608:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001560c:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001560f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015614:	83 e9 41             	sub    ecx,0x41
c0015617:	83 f9 19             	cmp    ecx,0x19
c001561a:	77 18                	ja     c0015634 <Sys::eject(regs*)+0x32>
c001561c:	8b 0c 8d c0 83 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7c40]
c0015623:	85 c9                	test   ecx,ecx
c0015625:	74 0d                	je     c0015634 <Sys::eject(regs*)+0x32>
c0015627:	83 ec 0c             	sub    esp,0xc
c001562a:	51                   	push   ecx
c001562b:	e8 22 af ff ff       	call   c0010552 <LogicalDisk::eject()>
c0015630:	83 c4 10             	add    esp,0x10
c0015633:	99                   	cdq    
c0015634:	83 c4 0c             	add    esp,0xc
c0015637:	c3                   	ret    

c0015638 <Sys::exit(regs*)>:
c0015638:	83 ec 18             	sub    esp,0x18
c001563b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001563f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015642:	e8 51 36 00 00       	call   c0018c98 <terminateTask(int)>
c0015647:	83 c8 ff             	or     eax,0xffffffff
c001564a:	83 c4 1c             	add    esp,0x1c
c001564d:	89 c2                	mov    edx,eax
c001564f:	c3                   	ret    

c0015650 <Sys::getCwd(regs*)>:
c0015650:	83 ec 10             	sub    esp,0x10
c0015653:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015657:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001565a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001565d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015662:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015665:	e8 c8 7c ff ff       	call   c000d332 <Fs::getcwd(Process*, char*, int)>
c001566a:	83 c4 1c             	add    esp,0x1c
c001566d:	99                   	cdq    
c001566e:	c3                   	ret    

c001566f <Sys::getPID(regs*)>:
c001566f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015674:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015677:	8b 00                	mov    eax,DWORD PTR [eax]
c0015679:	99                   	cdq    
c001567a:	c3                   	ret    

c001567b <Sys::getRAMData(regs*)>:
c001567b:	8b 0d 38 7e 02 c0    	mov    ecx,DWORD PTR ds:0xc0027e38
c0015681:	69 05 34 7e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0027e34,0xc8
c001568b:	99                   	cdq    
c001568c:	f7 f9                	idiv   ecx
c001568e:	c1 e0 18             	shl    eax,0x18
c0015691:	09 c8                	or     eax,ecx
c0015693:	99                   	cdq    
c0015694:	c3                   	ret    

c0015695 <Sys::getVGAPtr(regs*)>:
c0015695:	55                   	push   ebp
c0015696:	57                   	push   edi
c0015697:	56                   	push   esi
c0015698:	53                   	push   ebx
c0015699:	83 ec 18             	sub    esp,0x18
c001569c:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00156a0:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c00156a3:	e8 f4 30 00 00       	call   c001879c <Thr::processFromPID(int)>
c00156a8:	83 c4 10             	add    esp,0x10
c00156ab:	89 c1                	mov    ecx,eax
c00156ad:	b8 01 00 00 00       	mov    eax,0x1
c00156b2:	85 c9                	test   ecx,ecx
c00156b4:	74 59                	je     c001570f <Sys::getVGAPtr(regs*)+0x7a>
c00156b6:	8b 99 06 05 00 00    	mov    ebx,DWORD PTR [ecx+0x506]
c00156bc:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00156c0:	74 0c                	je     c00156ce <Sys::getVGAPtr(regs*)+0x39>
c00156c2:	83 ec 0c             	sub    esp,0xc
c00156c5:	53                   	push   ebx
c00156c6:	e8 da 56 ff ff       	call   c000ada5 <setActiveTerminal(VgaText*)>
c00156cb:	83 c4 10             	add    esp,0x10
c00156ce:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00156d1:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c00156d4:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c00156d9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00156db:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00156de:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00156e1:	81 c3 82 00 00 00    	add    ebx,0x82
c00156e7:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c00156ed:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00156f0:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c00156f3:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c00156f9:	50                   	push   eax
c00156fa:	50                   	push   eax
c00156fb:	53                   	push   ebx
c00156fc:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00156ff:	05 a8 0f 00 00       	add    eax,0xfa8
c0015704:	50                   	push   eax
c0015705:	e8 2e b0 fe ff       	call   c0000738 <strcpy>
c001570a:	83 c4 10             	add    esp,0x10
c001570d:	31 c0                	xor    eax,eax
c001570f:	83 c4 0c             	add    esp,0xc
c0015712:	31 d2                	xor    edx,edx
c0015714:	5b                   	pop    ebx
c0015715:	5e                   	pop    esi
c0015716:	5f                   	pop    edi
c0015717:	5d                   	pop    ebp
c0015718:	c3                   	ret    

c0015719 <Sys::loadDLL(regs*)>:
c0015719:	56                   	push   esi
c001571a:	53                   	push   ebx
c001571b:	31 d2                	xor    edx,edx
c001571d:	51                   	push   ecx
c001571e:	b8 01 00 00 00       	mov    eax,0x1
c0015723:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015727:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001572b:	0f 84 8c 00 00 00    	je     c00157bd <Sys::loadDLL(regs*)+0xa4>
c0015731:	83 ec 0c             	sub    esp,0xc
c0015734:	68 14 01 00 00       	push   0x114
c0015739:	e8 79 45 ff ff       	call   c0009cb7 <malloc>
c001573e:	83 c4 0c             	add    esp,0xc
c0015741:	89 c3                	mov    ebx,eax
c0015743:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015748:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001574b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001574e:	53                   	push   ebx
c001574f:	e8 dc 7d ff ff       	call   c000d530 <File::File(char const*, Process*)>
c0015754:	83 c4 10             	add    esp,0x10
c0015757:	31 d2                	xor    edx,edx
c0015759:	b8 02 00 00 00       	mov    eax,0x2
c001575e:	85 db                	test   ebx,ebx
c0015760:	74 5b                	je     c00157bd <Sys::loadDLL(regs*)+0xa4>
c0015762:	83 ec 0c             	sub    esp,0xc
c0015765:	53                   	push   ebx
c0015766:	e8 0d 81 ff ff       	call   c000d878 <File::exists()>
c001576b:	83 c4 10             	add    esp,0x10
c001576e:	84 c0                	test   al,al
c0015770:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015772:	75 11                	jne    c0015785 <Sys::loadDLL(regs*)+0x6c>
c0015774:	83 ec 0c             	sub    esp,0xc
c0015777:	53                   	push   ebx
c0015778:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001577b:	83 c4 10             	add    esp,0x10
c001577e:	b8 03 00 00 00       	mov    eax,0x3
c0015783:	eb 36                	jmp    c00157bb <Sys::loadDLL(regs*)+0xa2>
c0015785:	83 ec 0c             	sub    esp,0xc
c0015788:	53                   	push   ebx
c0015789:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001578c:	58                   	pop    eax
c001578d:	5a                   	pop    edx
c001578e:	6a 00                	push   0x0
c0015790:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0015793:	e8 0a 22 00 00       	call   c00179a2 <Thr::loadDLL(char const*, bool)>
c0015798:	83 c4 10             	add    esp,0x10
c001579b:	89 c1                	mov    ecx,eax
c001579d:	31 d2                	xor    edx,edx
c001579f:	b8 04 00 00 00       	mov    eax,0x4
c00157a4:	85 c9                	test   ecx,ecx
c00157a6:	74 15                	je     c00157bd <Sys::loadDLL(regs*)+0xa4>
c00157a8:	53                   	push   ebx
c00157a9:	53                   	push   ebx
c00157aa:	ff 35 08 7e 02 c0    	push   DWORD PTR ds:0xc0027e08
c00157b0:	51                   	push   ecx
c00157b1:	e8 1d 24 00 00       	call   c0017bd3 <Thr::executeDLL(unsigned long, void*)>
c00157b6:	83 c4 10             	add    esp,0x10
c00157b9:	31 c0                	xor    eax,eax
c00157bb:	31 d2                	xor    edx,edx
c00157bd:	59                   	pop    ecx
c00157be:	5b                   	pop    ebx
c00157bf:	5e                   	pop    esi
c00157c0:	c3                   	ret    

c00157c1 <Sys::read(regs*)>:
c00157c1:	57                   	push   edi
c00157c2:	56                   	push   esi
c00157c3:	53                   	push   ebx
c00157c4:	83 ec 10             	sub    esp,0x10
c00157c7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00157cb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00157ce:	83 f8 02             	cmp    eax,0x2
c00157d1:	77 10                	ja     c00157e3 <Sys::read(regs*)+0x22>
c00157d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00157d8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00157db:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00157e1:	eb 0e                	jmp    c00157f1 <Sys::read(regs*)+0x30>
c00157e3:	83 ec 0c             	sub    esp,0xc
c00157e6:	50                   	push   eax
c00157e7:	e8 27 63 ff ff       	call   c000bb13 <getFromFileDescriptor(int)>
c00157ec:	83 c4 10             	add    esp,0x10
c00157ef:	89 c1                	mov    ecx,eax
c00157f1:	83 c8 ff             	or     eax,0xffffffff
c00157f4:	85 c9                	test   ecx,ecx
c00157f6:	89 c2                	mov    edx,eax
c00157f8:	74 28                	je     c0015822 <Sys::read(regs*)+0x61>
c00157fa:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015802:	31 ff                	xor    edi,edi
c0015804:	83 ec 0c             	sub    esp,0xc
c0015807:	8b 01                	mov    eax,DWORD PTR [ecx]
c0015809:	8d 54 24 18          	lea    edx,[esp+0x18]
c001580d:	52                   	push   edx
c001580e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015811:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015814:	57                   	push   edi
c0015815:	56                   	push   esi
c0015816:	51                   	push   ecx
c0015817:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001581a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001581e:	83 c4 20             	add    esp,0x20
c0015821:	99                   	cdq    
c0015822:	83 c4 10             	add    esp,0x10
c0015825:	5b                   	pop    ebx
c0015826:	5e                   	pop    esi
c0015827:	5f                   	pop    edi
c0015828:	c3                   	ret    

c0015829 <Sys::sbrk(regs*)>:
c0015829:	56                   	push   esi
c001582a:	53                   	push   ebx
c001582b:	50                   	push   eax
c001582c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015831:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015835:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015838:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001583b:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0015841:	85 db                	test   ebx,ebx
c0015843:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0015846:	74 02                	je     c001584a <Sys::sbrk(regs*)+0x21>
c0015848:	79 06                	jns    c0015850 <Sys::sbrk(regs*)+0x27>
c001584a:	89 f0                	mov    eax,esi
c001584c:	31 d2                	xor    edx,edx
c001584e:	eb 2a                	jmp    c001587a <Sys::sbrk(regs*)+0x51>
c0015850:	83 c8 ff             	or     eax,0xffffffff
c0015853:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0015859:	89 c2                	mov    edx,eax
c001585b:	77 1d                	ja     c001587a <Sys::sbrk(regs*)+0x51>
c001585d:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0015863:	50                   	push   eax
c0015864:	c1 ea 0c             	shr    edx,0xc
c0015867:	68 07 0c 00 00       	push   0xc07
c001586c:	52                   	push   edx
c001586d:	51                   	push   ecx
c001586e:	e8 65 6b ff ff       	call   c000c3d8 <VAS::allocatePages(int, int)>
c0015873:	89 f0                	mov    eax,esi
c0015875:	31 d2                	xor    edx,edx
c0015877:	83 c4 10             	add    esp,0x10
c001587a:	59                   	pop    ecx
c001587b:	5b                   	pop    ebx
c001587c:	5e                   	pop    esi
c001587d:	c3                   	ret    

c001587e <Sys::setCwd(regs*)>:
c001587e:	83 ec 14             	sub    esp,0x14
c0015881:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015885:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015888:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001588d:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015890:	e8 82 80 ff ff       	call   c000d917 <Fs::setcwd(Process*, char*)>
c0015895:	83 c4 1c             	add    esp,0x1c
c0015898:	99                   	cdq    
c0015899:	c3                   	ret    

c001589a <Sys::setTime(regs*)>:
c001589a:	55                   	push   ebp
c001589b:	31 c9                	xor    ecx,ecx
c001589d:	57                   	push   edi
c001589e:	bd 0c 00 00 00       	mov    ebp,0xc
c00158a3:	56                   	push   esi
c00158a4:	53                   	push   ebx
c00158a5:	31 db                	xor    ebx,ebx
c00158a7:	83 ec 10             	sub    esp,0x10
c00158aa:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00158ae:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c00158b1:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00158b4:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c00158b7:	89 c2                	mov    edx,eax
c00158b9:	66 81 ef 6c 07       	sub    di,0x76c
c00158be:	83 e2 1f             	and    edx,0x1f
c00158c1:	c1 e7 10             	shl    edi,0x10
c00158c4:	42                   	inc    edx
c00158c5:	c1 e8 05             	shr    eax,0x5
c00158c8:	88 d1                	mov    cl,dl
c00158ca:	31 d2                	xor    edx,edx
c00158cc:	f7 f5                	div    ebp
c00158ce:	89 dd                	mov    ebp,ebx
c00158d0:	88 d5                	mov    ch,dl
c00158d2:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c00158d8:	0f b7 c1             	movzx  eax,cx
c00158db:	31 d2                	xor    edx,edx
c00158dd:	09 f8                	or     eax,edi
c00158df:	bf 3c 00 00 00       	mov    edi,0x3c
c00158e4:	89 c1                	mov    ecx,eax
c00158e6:	89 f0                	mov    eax,esi
c00158e8:	f7 f7                	div    edi
c00158ea:	c1 e2 10             	shl    edx,0x10
c00158ed:	09 d5                	or     ebp,edx
c00158ef:	31 d2                	xor    edx,edx
c00158f1:	89 eb                	mov    ebx,ebp
c00158f3:	f7 f7                	div    edi
c00158f5:	bf 10 0e 00 00       	mov    edi,0xe10
c00158fa:	88 d7                	mov    bh,dl
c00158fc:	89 f0                	mov    eax,esi
c00158fe:	31 d2                	xor    edx,edx
c0015900:	f7 f7                	div    edi
c0015902:	bf 18 00 00 00       	mov    edi,0x18
c0015907:	31 d2                	xor    edx,edx
c0015909:	f7 f7                	div    edi
c001590b:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c0015910:	88 d3                	mov    bl,dl
c0015912:	53                   	push   ebx
c0015913:	51                   	push   ecx
c0015914:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001591a:	e8 37 88 ff ff       	call   c000e156 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001591f:	83 c4 1c             	add    esp,0x1c
c0015922:	83 f0 01             	xor    eax,0x1
c0015925:	5b                   	pop    ebx
c0015926:	0f b6 c0             	movzx  eax,al
c0015929:	5e                   	pop    esi
c001592a:	31 d2                	xor    edx,edx
c001592c:	5f                   	pop    edi
c001592d:	5d                   	pop    ebp
c001592e:	c3                   	ret    

c001592f <Sys::timezone(regs*)>:
c001592f:	53                   	push   ebx
c0015930:	83 ec 08             	sub    esp,0x8
c0015933:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015937:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001593b:	75 17                	jne    c0015954 <Sys::timezone(regs*)+0x25>
c001593d:	83 ec 0c             	sub    esp,0xc
c0015940:	68 a6 5c 02 c0       	push   0xc0025ca6
c0015945:	e8 7b 76 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001594a:	83 c8 ff             	or     eax,0xffffffff
c001594d:	83 c4 10             	add    esp,0x10
c0015950:	89 c2                	mov    edx,eax
c0015952:	eb 20                	jmp    c0015974 <Sys::timezone(regs*)+0x45>
c0015954:	83 ec 0c             	sub    esp,0xc
c0015957:	68 bb 5c 02 c0       	push   0xc0025cbb
c001595c:	e8 64 76 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0015961:	58                   	pop    eax
c0015962:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0015965:	e8 4e 85 ff ff       	call   c000deb8 <User::loadClockSettings(int)>
c001596a:	83 c4 10             	add    esp,0x10
c001596d:	b8 01 00 00 00       	mov    eax,0x1
c0015972:	31 d2                	xor    edx,edx
c0015974:	83 c4 08             	add    esp,0x8
c0015977:	5b                   	pop    ebx
c0015978:	c3                   	ret    

c0015979 <Sys::write(regs*)>:
c0015979:	57                   	push   edi
c001597a:	56                   	push   esi
c001597b:	53                   	push   ebx
c001597c:	83 ec 10             	sub    esp,0x10
c001597f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015983:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015986:	83 f8 02             	cmp    eax,0x2
c0015989:	77 10                	ja     c001599b <Sys::write(regs*)+0x22>
c001598b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015990:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015993:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0015999:	eb 0e                	jmp    c00159a9 <Sys::write(regs*)+0x30>
c001599b:	83 ec 0c             	sub    esp,0xc
c001599e:	50                   	push   eax
c001599f:	e8 6f 61 ff ff       	call   c000bb13 <getFromFileDescriptor(int)>
c00159a4:	83 c4 10             	add    esp,0x10
c00159a7:	89 c1                	mov    ecx,eax
c00159a9:	83 c8 ff             	or     eax,0xffffffff
c00159ac:	85 c9                	test   ecx,ecx
c00159ae:	89 c2                	mov    edx,eax
c00159b0:	74 28                	je     c00159da <Sys::write(regs*)+0x61>
c00159b2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00159ba:	31 ff                	xor    edi,edi
c00159bc:	83 ec 0c             	sub    esp,0xc
c00159bf:	8b 01                	mov    eax,DWORD PTR [ecx]
c00159c1:	8d 54 24 18          	lea    edx,[esp+0x18]
c00159c5:	52                   	push   edx
c00159c6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00159c9:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00159cc:	57                   	push   edi
c00159cd:	56                   	push   esi
c00159ce:	51                   	push   ecx
c00159cf:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00159d2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00159d6:	83 c4 20             	add    esp,0x20
c00159d9:	99                   	cdq    
c00159da:	83 c4 10             	add    esp,0x10
c00159dd:	5b                   	pop    ebx
c00159de:	5e                   	pop    esi
c00159df:	5f                   	pop    edi
c00159e0:	c3                   	ret    

c00159e1 <Sys::wsbe(regs*)>:
c00159e1:	57                   	push   edi
c00159e2:	b9 0b 00 00 00       	mov    ecx,0xb
c00159e7:	56                   	push   esi
c00159e8:	be fa 5c 02 c0       	mov    esi,0xc0025cfa
c00159ed:	53                   	push   ebx
c00159ee:	83 ec 30             	sub    esp,0x30
c00159f1:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00159f5:	fc                   	cld    
c00159f6:	83 ec 0c             	sub    esp,0xc
c00159f9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00159fb:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00159ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a04:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015a07:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0015a0d:	8b 06                	mov    eax,DWORD PTR [esi]
c0015a0f:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0015a12:	57                   	push   edi
c0015a13:	e8 80 ac fe ff       	call   c0000698 <strlen>
c0015a18:	5a                   	pop    edx
c0015a19:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0015a1d:	52                   	push   edx
c0015a1e:	31 d2                	xor    edx,edx
c0015a20:	57                   	push   edi
c0015a21:	52                   	push   edx
c0015a22:	50                   	push   eax
c0015a23:	56                   	push   esi
c0015a24:	ff d3                	call   ebx
c0015a26:	83 c4 14             	add    esp,0x14
c0015a29:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015a2d:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015a30:	e8 63 32 00 00       	call   c0018c98 <terminateTask(int)>
c0015a35:	83 c4 40             	add    esp,0x40
c0015a38:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0015a3d:	5b                   	pop    ebx
c0015a3e:	31 d2                	xor    edx,edx
c0015a40:	5e                   	pop    esi
c0015a41:	5f                   	pop    edi
c0015a42:	c3                   	ret    

c0015a43 <Sys::yield(regs*)>:
c0015a43:	83 ec 0c             	sub    esp,0xc
c0015a46:	fa                   	cli    
c0015a47:	ff 05 28 93 02 c0    	inc    DWORD PTR ds:0xc0029328
c0015a4d:	e8 2e 29 00 00       	call   c0018380 <schedule()>
c0015a52:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c0015a57:	48                   	dec    eax
c0015a58:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c0015a5d:	75 01                	jne    c0015a60 <Sys::yield(regs*)+0x1d>
c0015a5f:	fb                   	sti    
c0015a60:	8b 15 2c 84 02 c0    	mov    edx,DWORD PTR ds:0xc002842c
c0015a66:	83 c4 0c             	add    esp,0xc
c0015a69:	89 d0                	mov    eax,edx
c0015a6b:	c1 ea 11             	shr    edx,0x11
c0015a6e:	c1 e0 07             	shl    eax,0x7
c0015a71:	25 80 30 0f 00       	and    eax,0xf3080
c0015a76:	31 d0                	xor    eax,edx
c0015a78:	31 d2                	xor    edx,edx
c0015a7a:	c3                   	ret    

c0015a7b <sysCallSeekDir(regs*)>:
c0015a7b:	31 c0                	xor    eax,eax
c0015a7d:	31 d2                	xor    edx,edx
c0015a7f:	c3                   	ret    

c0015a80 <sysCallTellDir(regs*)>:
c0015a80:	31 c0                	xor    eax,eax
c0015a82:	31 d2                	xor    edx,edx
c0015a84:	c3                   	ret    

c0015a85 <sysCallVerify(regs*)>:
c0015a85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015a89:	31 d2                	xor    edx,edx
c0015a8b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015a8e:	c3                   	ret    

c0015a8f <sysCallGetArgc(regs*)>:
c0015a8f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a94:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015a97:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0015a9d:	99                   	cdq    
c0015a9e:	c3                   	ret    

c0015a9f <sysFormatDisk(regs*)>:
c0015a9f:	56                   	push   esi
c0015aa0:	53                   	push   ebx
c0015aa1:	53                   	push   ebx
c0015aa2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015aa6:	8b 1d 38 7f 02 c0    	mov    ebx,DWORD PTR ds:0xc0027f38
c0015aac:	eb 25                	jmp    c0015ad3 <sysFormatDisk(regs*)+0x34>
c0015aae:	83 ec 0c             	sub    esp,0xc
c0015ab1:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0015ab4:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015ab6:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0015ab9:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0015abc:	50                   	push   eax
c0015abd:	ff 34 85 c0 83 02 c0 	push   DWORD PTR [eax*4-0x3ffd7c40]
c0015ac4:	53                   	push   ebx
c0015ac5:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0015ac8:	83 c4 20             	add    esp,0x20
c0015acb:	83 f8 08             	cmp    eax,0x8
c0015ace:	75 12                	jne    c0015ae2 <sysFormatDisk(regs*)+0x43>
c0015ad0:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015ad3:	85 db                	test   ebx,ebx
c0015ad5:	75 d7                	jne    c0015aae <sysFormatDisk(regs*)+0xf>
c0015ad7:	59                   	pop    ecx
c0015ad8:	b8 03 00 00 00       	mov    eax,0x3
c0015add:	31 d2                	xor    edx,edx
c0015adf:	5b                   	pop    ebx
c0015ae0:	5e                   	pop    esi
c0015ae1:	c3                   	ret    
c0015ae2:	85 c0                	test   eax,eax
c0015ae4:	74 1b                	je     c0015b01 <sysFormatDisk(regs*)+0x62>
c0015ae6:	83 f8 09             	cmp    eax,0x9
c0015ae9:	74 0b                	je     c0015af6 <sysFormatDisk(regs*)+0x57>
c0015aeb:	59                   	pop    ecx
c0015aec:	b8 02 00 00 00       	mov    eax,0x2
c0015af1:	31 d2                	xor    edx,edx
c0015af3:	5b                   	pop    ebx
c0015af4:	5e                   	pop    esi
c0015af5:	c3                   	ret    
c0015af6:	59                   	pop    ecx
c0015af7:	b8 01 00 00 00       	mov    eax,0x1
c0015afc:	31 d2                	xor    edx,edx
c0015afe:	5b                   	pop    ebx
c0015aff:	5e                   	pop    esi
c0015b00:	c3                   	ret    
c0015b01:	59                   	pop    ecx
c0015b02:	31 c0                	xor    eax,eax
c0015b04:	31 d2                	xor    edx,edx
c0015b06:	5b                   	pop    ebx
c0015b07:	5e                   	pop    esi
c0015b08:	c3                   	ret    

c0015b09 <sysSetDiskVolumeLabel(regs*)>:
c0015b09:	56                   	push   esi
c0015b0a:	53                   	push   ebx
c0015b0b:	53                   	push   ebx
c0015b0c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015b10:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0015b13:	83 f8 19             	cmp    eax,0x19
c0015b16:	77 2d                	ja     c0015b45 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015b18:	8b 0c 85 c0 83 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7c40]
c0015b1f:	85 c9                	test   ecx,ecx
c0015b21:	74 22                	je     c0015b45 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015b23:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0015b26:	85 db                	test   ebx,ebx
c0015b28:	74 1b                	je     c0015b45 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015b2a:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c0015b30:	85 d2                	test   edx,edx
c0015b32:	74 11                	je     c0015b45 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015b34:	8b 32                	mov    esi,DWORD PTR [edx]
c0015b36:	53                   	push   ebx
c0015b37:	50                   	push   eax
c0015b38:	51                   	push   ecx
c0015b39:	52                   	push   edx
c0015b3a:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0015b3d:	83 c4 10             	add    esp,0x10
c0015b40:	99                   	cdq    
c0015b41:	59                   	pop    ecx
c0015b42:	5b                   	pop    ebx
c0015b43:	5e                   	pop    esi
c0015b44:	c3                   	ret    
c0015b45:	59                   	pop    ecx
c0015b46:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015b4b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015b50:	5b                   	pop    ebx
c0015b51:	5e                   	pop    esi
c0015b52:	c3                   	ret    

c0015b53 <sysGetDiskVolumeLabel(regs*)>:
c0015b53:	57                   	push   edi
c0015b54:	56                   	push   esi
c0015b55:	53                   	push   ebx
c0015b56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b5a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015b5d:	83 fa 19             	cmp    edx,0x19
c0015b60:	77 38                	ja     c0015b9a <sysGetDiskVolumeLabel(regs*)+0x47>
c0015b62:	8b 0c 95 c0 83 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd7c40]
c0015b69:	85 c9                	test   ecx,ecx
c0015b6b:	74 2d                	je     c0015b9a <sysGetDiskVolumeLabel(regs*)+0x47>
c0015b6d:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0015b70:	85 db                	test   ebx,ebx
c0015b72:	74 26                	je     c0015b9a <sysGetDiskVolumeLabel(regs*)+0x47>
c0015b74:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0015b77:	85 f6                	test   esi,esi
c0015b79:	74 1f                	je     c0015b9a <sysGetDiskVolumeLabel(regs*)+0x47>
c0015b7b:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c0015b81:	85 c0                	test   eax,eax
c0015b83:	74 15                	je     c0015b9a <sysGetDiskVolumeLabel(regs*)+0x47>
c0015b85:	83 ec 0c             	sub    esp,0xc
c0015b88:	8b 38                	mov    edi,DWORD PTR [eax]
c0015b8a:	56                   	push   esi
c0015b8b:	53                   	push   ebx
c0015b8c:	52                   	push   edx
c0015b8d:	51                   	push   ecx
c0015b8e:	50                   	push   eax
c0015b8f:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0015b92:	83 c4 20             	add    esp,0x20
c0015b95:	99                   	cdq    
c0015b96:	5b                   	pop    ebx
c0015b97:	5e                   	pop    esi
c0015b98:	5f                   	pop    edi
c0015b99:	c3                   	ret    
c0015b9a:	5b                   	pop    ebx
c0015b9b:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015ba0:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015ba5:	5e                   	pop    esi
c0015ba6:	5f                   	pop    edi
c0015ba7:	c3                   	ret    

c0015ba8 <sysShutdown(regs*)>:
c0015ba8:	83 ec 0c             	sub    esp,0xc
c0015bab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015baf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015bb2:	85 c0                	test   eax,eax
c0015bb4:	74 18                	je     c0015bce <sysShutdown(regs*)+0x26>
c0015bb6:	83 f8 01             	cmp    eax,0x1
c0015bb9:	74 38                	je     c0015bf3 <sysShutdown(regs*)+0x4b>
c0015bbb:	83 f8 02             	cmp    eax,0x2
c0015bbe:	74 24                	je     c0015be4 <sysShutdown(regs*)+0x3c>
c0015bc0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015bc5:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015bca:	83 c4 0c             	add    esp,0xc
c0015bcd:	c3                   	ret    
c0015bce:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c0015bd3:	8b 10                	mov    edx,DWORD PTR [eax]
c0015bd5:	6a 00                	push   0x0
c0015bd7:	6a 00                	push   0x0
c0015bd9:	6a 00                	push   0x0
c0015bdb:	50                   	push   eax
c0015bdc:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015bdf:	83 c4 10             	add    esp,0x10
c0015be2:	eb dc                	jmp    c0015bc0 <sysShutdown(regs*)+0x18>
c0015be4:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c0015be9:	8b 10                	mov    edx,DWORD PTR [eax]
c0015beb:	6a 00                	push   0x0
c0015bed:	6a 00                	push   0x0
c0015bef:	6a 01                	push   0x1
c0015bf1:	eb e8                	jmp    c0015bdb <sysShutdown(regs*)+0x33>
c0015bf3:	a1 40 84 02 c0       	mov    eax,ds:0xc0028440
c0015bf8:	85 c0                	test   eax,eax
c0015bfa:	74 02                	je     c0015bfe <sysShutdown(regs*)+0x56>
c0015bfc:	ff d0                	call   eax
c0015bfe:	31 c0                	xor    eax,eax
c0015c00:	31 d2                	xor    edx,edx
c0015c02:	83 c4 0c             	add    esp,0xc
c0015c05:	c3                   	ret    

c0015c06 <sysCallRealpath(regs*)>:
c0015c06:	83 ec 0c             	sub    esp,0xc
c0015c09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c0d:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0015c10:	85 d2                	test   edx,edx
c0015c12:	74 07                	je     c0015c1b <sysCallRealpath(regs*)+0x15>
c0015c14:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015c17:	85 c0                	test   eax,eax
c0015c19:	75 0b                	jne    c0015c26 <sysCallRealpath(regs*)+0x20>
c0015c1b:	b8 01 00 00 00       	mov    eax,0x1
c0015c20:	31 d2                	xor    edx,edx
c0015c22:	83 c4 0c             	add    esp,0xc
c0015c25:	c3                   	ret    
c0015c26:	51                   	push   ecx
c0015c27:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015c2d:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0015c30:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0015c36:	51                   	push   ecx
c0015c37:	52                   	push   edx
c0015c38:	50                   	push   eax
c0015c39:	e8 48 77 ff ff       	call   c000d386 <Fs::standardiseFiles(char*, char const*, char const*)>
c0015c3e:	83 c4 10             	add    esp,0x10
c0015c41:	31 c0                	xor    eax,eax
c0015c43:	31 d2                	xor    edx,edx
c0015c45:	83 c4 0c             	add    esp,0xc
c0015c48:	c3                   	ret    

c0015c49 <sysCallReadDir(regs*)>:
c0015c49:	53                   	push   ebx
c0015c4a:	83 ec 18             	sub    esp,0x18
c0015c4d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015c51:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015c54:	83 f8 02             	cmp    eax,0x2
c0015c57:	76 60                	jbe    c0015cb9 <sysCallReadDir(regs*)+0x70>
c0015c59:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0015c60:	77 48                	ja     c0015caa <sysCallReadDir(regs*)+0x61>
c0015c62:	83 ec 0c             	sub    esp,0xc
c0015c65:	50                   	push   eax
c0015c66:	e8 a8 5e ff ff       	call   c000bb13 <getFromFileDescriptor(int)>
c0015c6b:	83 c4 10             	add    esp,0x10
c0015c6e:	85 c0                	test   eax,eax
c0015c70:	74 38                	je     c0015caa <sysCallReadDir(regs*)+0x61>
c0015c72:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015c7a:	83 ec 0c             	sub    esp,0xc
c0015c7d:	8b 10                	mov    edx,DWORD PTR [eax]
c0015c7f:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0015c83:	51                   	push   ecx
c0015c84:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015c87:	6a 00                	push   0x0
c0015c89:	68 10 01 00 00       	push   0x110
c0015c8e:	50                   	push   eax
c0015c8f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015c92:	83 c4 20             	add    esp,0x20
c0015c95:	85 c0                	test   eax,eax
c0015c97:	74 29                	je     c0015cc2 <sysCallReadDir(regs*)+0x79>
c0015c99:	83 f8 07             	cmp    eax,0x7
c0015c9c:	74 1b                	je     c0015cb9 <sysCallReadDir(regs*)+0x70>
c0015c9e:	b8 02 00 00 00       	mov    eax,0x2
c0015ca3:	31 d2                	xor    edx,edx
c0015ca5:	83 c4 18             	add    esp,0x18
c0015ca8:	5b                   	pop    ebx
c0015ca9:	c3                   	ret    
c0015caa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015caf:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015cb4:	83 c4 18             	add    esp,0x18
c0015cb7:	5b                   	pop    ebx
c0015cb8:	c3                   	ret    
c0015cb9:	b8 01 00 00 00       	mov    eax,0x1
c0015cbe:	31 d2                	xor    edx,edx
c0015cc0:	eb e3                	jmp    c0015ca5 <sysCallReadDir(regs*)+0x5c>
c0015cc2:	31 c0                	xor    eax,eax
c0015cc4:	31 d2                	xor    edx,edx
c0015cc6:	eb dd                	jmp    c0015ca5 <sysCallReadDir(regs*)+0x5c>

c0015cc8 <sysCallIsATTY(regs*)>:
c0015cc8:	83 ec 0c             	sub    esp,0xc
c0015ccb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ccf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015cd2:	83 f8 02             	cmp    eax,0x2
c0015cd5:	76 07                	jbe    c0015cde <sysCallIsATTY(regs*)+0x16>
c0015cd7:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0015cdc:	75 26                	jne    c0015d04 <sysCallIsATTY(regs*)+0x3c>
c0015cde:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ce3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015ce6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015cec:	85 c0                	test   eax,eax
c0015cee:	74 24                	je     c0015d14 <sysCallIsATTY(regs*)+0x4c>
c0015cf0:	83 ec 0c             	sub    esp,0xc
c0015cf3:	8b 10                	mov    edx,DWORD PTR [eax]
c0015cf5:	50                   	push   eax
c0015cf6:	ff 12                	call   DWORD PTR [edx]
c0015cf8:	31 d2                	xor    edx,edx
c0015cfa:	0f b6 c0             	movzx  eax,al
c0015cfd:	83 c4 10             	add    esp,0x10
c0015d00:	83 c4 0c             	add    esp,0xc
c0015d03:	c3                   	ret    
c0015d04:	83 ec 0c             	sub    esp,0xc
c0015d07:	50                   	push   eax
c0015d08:	e8 06 5e ff ff       	call   c000bb13 <getFromFileDescriptor(int)>
c0015d0d:	83 c4 10             	add    esp,0x10
c0015d10:	85 c0                	test   eax,eax
c0015d12:	75 dc                	jne    c0015cf0 <sysCallIsATTY(regs*)+0x28>
c0015d14:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015d19:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015d1e:	83 c4 0c             	add    esp,0xc
c0015d21:	c3                   	ret    

c0015d22 <sysCallSeek(regs*)>:
c0015d22:	53                   	push   ebx
c0015d23:	83 ec 08             	sub    esp,0x8
c0015d26:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015d2a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015d2d:	8d 50 fd             	lea    edx,[eax-0x3]
c0015d30:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0015d36:	77 32                	ja     c0015d6a <sysCallSeek(regs*)+0x48>
c0015d38:	83 ec 0c             	sub    esp,0xc
c0015d3b:	50                   	push   eax
c0015d3c:	e8 d2 5d ff ff       	call   c000bb13 <getFromFileDescriptor(int)>
c0015d41:	83 c4 0c             	add    esp,0xc
c0015d44:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0015d47:	31 db                	xor    ebx,ebx
c0015d49:	53                   	push   ebx
c0015d4a:	51                   	push   ecx
c0015d4b:	50                   	push   eax
c0015d4c:	e8 77 79 ff ff       	call   c000d6c8 <File::seek(unsigned long long)>
c0015d51:	83 c4 10             	add    esp,0x10
c0015d54:	85 c0                	test   eax,eax
c0015d56:	0f 95 c0             	setne  al
c0015d59:	31 d2                	xor    edx,edx
c0015d5b:	0f b6 c0             	movzx  eax,al
c0015d5e:	f7 d8                	neg    eax
c0015d60:	83 d2 00             	adc    edx,0x0
c0015d63:	83 c4 08             	add    esp,0x8
c0015d66:	f7 da                	neg    edx
c0015d68:	5b                   	pop    ebx
c0015d69:	c3                   	ret    
c0015d6a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015d6f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015d74:	83 c4 08             	add    esp,0x8
c0015d77:	5b                   	pop    ebx
c0015d78:	c3                   	ret    

c0015d79 <sysCallTell(regs*)>:
c0015d79:	53                   	push   ebx
c0015d7a:	83 ec 08             	sub    esp,0x8
c0015d7d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015d81:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015d84:	83 f8 02             	cmp    eax,0x2
c0015d87:	76 4d                	jbe    c0015dd6 <sysCallTell(regs*)+0x5d>
c0015d89:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015d8e:	76 19                	jbe    c0015da9 <sysCallTell(regs*)+0x30>
c0015d90:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015d93:	31 d2                	xor    edx,edx
c0015d95:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015d9b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015da2:	31 c0                	xor    eax,eax
c0015da4:	83 c4 08             	add    esp,0x8
c0015da7:	5b                   	pop    ebx
c0015da8:	c3                   	ret    
c0015da9:	83 ec 0c             	sub    esp,0xc
c0015dac:	50                   	push   eax
c0015dad:	e8 61 5d ff ff       	call   c000bb13 <getFromFileDescriptor(int)>
c0015db2:	5a                   	pop    edx
c0015db3:	59                   	pop    ecx
c0015db4:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015db7:	50                   	push   eax
c0015db8:	e8 61 79 ff ff       	call   c000d71e <File::tell(unsigned long long*)>
c0015dbd:	83 c4 10             	add    esp,0x10
c0015dc0:	85 c0                	test   eax,eax
c0015dc2:	0f 95 c0             	setne  al
c0015dc5:	31 d2                	xor    edx,edx
c0015dc7:	0f b6 c0             	movzx  eax,al
c0015dca:	f7 d8                	neg    eax
c0015dcc:	83 d2 00             	adc    edx,0x0
c0015dcf:	83 c4 08             	add    esp,0x8
c0015dd2:	f7 da                	neg    edx
c0015dd4:	5b                   	pop    ebx
c0015dd5:	c3                   	ret    
c0015dd6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015ddb:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015de0:	83 c4 08             	add    esp,0x8
c0015de3:	5b                   	pop    ebx
c0015de4:	c3                   	ret    

c0015de5 <sysCallSize(regs*)>:
c0015de5:	53                   	push   ebx
c0015de6:	83 ec 18             	sub    esp,0x18
c0015de9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015ded:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015df0:	83 f8 02             	cmp    eax,0x2
c0015df3:	76 53                	jbe    c0015e48 <sysCallSize(regs*)+0x63>
c0015df5:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015dfa:	76 19                	jbe    c0015e15 <sysCallSize(regs*)+0x30>
c0015dfc:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015dff:	31 d2                	xor    edx,edx
c0015e01:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015e07:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015e0e:	31 c0                	xor    eax,eax
c0015e10:	83 c4 18             	add    esp,0x18
c0015e13:	5b                   	pop    ebx
c0015e14:	c3                   	ret    
c0015e15:	83 ec 0c             	sub    esp,0xc
c0015e18:	50                   	push   eax
c0015e19:	e8 f5 5c ff ff       	call   c000bb13 <getFromFileDescriptor(int)>
c0015e1e:	83 c4 0c             	add    esp,0xc
c0015e21:	8d 54 24 13          	lea    edx,[esp+0x13]
c0015e25:	52                   	push   edx
c0015e26:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015e29:	50                   	push   eax
c0015e2a:	e8 87 7a ff ff       	call   c000d8b6 <File::stat(unsigned long long*, bool*)>
c0015e2f:	83 c4 10             	add    esp,0x10
c0015e32:	85 c0                	test   eax,eax
c0015e34:	0f 95 c0             	setne  al
c0015e37:	31 d2                	xor    edx,edx
c0015e39:	0f b6 c0             	movzx  eax,al
c0015e3c:	f7 d8                	neg    eax
c0015e3e:	83 d2 00             	adc    edx,0x0
c0015e41:	83 c4 18             	add    esp,0x18
c0015e44:	f7 da                	neg    edx
c0015e46:	5b                   	pop    ebx
c0015e47:	c3                   	ret    
c0015e48:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015e4d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015e52:	83 c4 18             	add    esp,0x18
c0015e55:	5b                   	pop    ebx
c0015e56:	c3                   	ret    

c0015e57 <sysCallSizeFromFilename(regs*)>:
c0015e57:	57                   	push   edi
c0015e58:	56                   	push   esi
c0015e59:	53                   	push   ebx
c0015e5a:	83 ec 20             	sub    esp,0x20
c0015e5d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015e61:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0015e64:	83 fb 02             	cmp    ebx,0x2
c0015e67:	0f 86 88 00 00 00    	jbe    c0015ef5 <sysCallSizeFromFilename(regs*)+0x9e>
c0015e6d:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0015e73:	76 1b                	jbe    c0015e90 <sysCallSizeFromFilename(regs*)+0x39>
c0015e75:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0015e78:	31 d2                	xor    edx,edx
c0015e7a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015e80:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015e87:	83 c4 20             	add    esp,0x20
c0015e8a:	31 c0                	xor    eax,eax
c0015e8c:	5b                   	pop    ebx
c0015e8d:	5e                   	pop    esi
c0015e8e:	5f                   	pop    edi
c0015e8f:	c3                   	ret    
c0015e90:	83 ec 0c             	sub    esp,0xc
c0015e93:	68 14 01 00 00       	push   0x114
c0015e98:	e8 1a 3e ff ff       	call   c0009cb7 <malloc>
c0015e9d:	83 c4 0c             	add    esp,0xc
c0015ea0:	89 c7                	mov    edi,eax
c0015ea2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ea7:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015eaa:	53                   	push   ebx
c0015eab:	57                   	push   edi
c0015eac:	e8 7f 76 ff ff       	call   c000d530 <File::File(char const*, Process*)>
c0015eb1:	83 c4 0c             	add    esp,0xc
c0015eb4:	8d 44 24 23          	lea    eax,[esp+0x23]
c0015eb8:	50                   	push   eax
c0015eb9:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0015ebc:	57                   	push   edi
c0015ebd:	e8 f4 79 ff ff       	call   c000d8b6 <File::stat(unsigned long long*, bool*)>
c0015ec2:	83 c4 10             	add    esp,0x10
c0015ec5:	85 ff                	test   edi,edi
c0015ec7:	74 14                	je     c0015edd <sysCallSizeFromFilename(regs*)+0x86>
c0015ec9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015ecd:	8b 17                	mov    edx,DWORD PTR [edi]
c0015ecf:	83 ec 0c             	sub    esp,0xc
c0015ed2:	57                   	push   edi
c0015ed3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015ed6:	83 c4 10             	add    esp,0x10
c0015ed9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015edd:	85 c0                	test   eax,eax
c0015edf:	0f 95 c0             	setne  al
c0015ee2:	31 d2                	xor    edx,edx
c0015ee4:	0f b6 c0             	movzx  eax,al
c0015ee7:	f7 d8                	neg    eax
c0015ee9:	83 d2 00             	adc    edx,0x0
c0015eec:	83 c4 20             	add    esp,0x20
c0015eef:	f7 da                	neg    edx
c0015ef1:	5b                   	pop    ebx
c0015ef2:	5e                   	pop    esi
c0015ef3:	5f                   	pop    edi
c0015ef4:	c3                   	ret    
c0015ef5:	83 c4 20             	add    esp,0x20
c0015ef8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015efd:	5b                   	pop    ebx
c0015efe:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015f03:	5e                   	pop    esi
c0015f04:	5f                   	pop    edi
c0015f05:	c3                   	ret    

c0015f06 <sysCallClose(regs*)>:
c0015f06:	53                   	push   ebx
c0015f07:	83 ec 08             	sub    esp,0x8
c0015f0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f0e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015f11:	83 f8 02             	cmp    eax,0x2
c0015f14:	76 41                	jbe    c0015f57 <sysCallClose(regs*)+0x51>
c0015f16:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0015f1c:	83 fa 01             	cmp    edx,0x1
c0015f1f:	76 2d                	jbe    c0015f4e <sysCallClose(regs*)+0x48>
c0015f21:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015f26:	77 2f                	ja     c0015f57 <sysCallClose(regs*)+0x51>
c0015f28:	83 ec 0c             	sub    esp,0xc
c0015f2b:	50                   	push   eax
c0015f2c:	e8 e2 5b ff ff       	call   c000bb13 <getFromFileDescriptor(int)>
c0015f31:	89 c3                	mov    ebx,eax
c0015f33:	89 04 24             	mov    DWORD PTR [esp],eax
c0015f36:	e8 2d 77 ff ff       	call   c000d668 <File::close()>
c0015f3b:	83 c4 10             	add    esp,0x10
c0015f3e:	85 db                	test   ebx,ebx
c0015f40:	74 0c                	je     c0015f4e <sysCallClose(regs*)+0x48>
c0015f42:	83 ec 0c             	sub    esp,0xc
c0015f45:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015f47:	53                   	push   ebx
c0015f48:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015f4b:	83 c4 10             	add    esp,0x10
c0015f4e:	31 c0                	xor    eax,eax
c0015f50:	31 d2                	xor    edx,edx
c0015f52:	83 c4 08             	add    esp,0x8
c0015f55:	5b                   	pop    ebx
c0015f56:	c3                   	ret    
c0015f57:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015f5c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015f61:	83 c4 08             	add    esp,0x8
c0015f64:	5b                   	pop    ebx
c0015f65:	c3                   	ret    

c0015f66 <sysCallOpenDir(regs*)>:
c0015f66:	56                   	push   esi
c0015f67:	53                   	push   ebx
c0015f68:	53                   	push   ebx
c0015f69:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015f6d:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0015f70:	85 f6                	test   esi,esi
c0015f72:	74 59                	je     c0015fcd <sysCallOpenDir(regs*)+0x67>
c0015f74:	83 ec 0c             	sub    esp,0xc
c0015f77:	68 14 01 00 00       	push   0x114
c0015f7c:	e8 36 3d ff ff       	call   c0009cb7 <malloc>
c0015f81:	83 c4 0c             	add    esp,0xc
c0015f84:	89 c6                	mov    esi,eax
c0015f86:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f8b:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015f8e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015f91:	56                   	push   esi
c0015f92:	e8 f9 7a ff ff       	call   c000da90 <Directory::Directory(char const*, Process*)>
c0015f97:	83 c4 10             	add    esp,0x10
c0015f9a:	85 f6                	test   esi,esi
c0015f9c:	74 2f                	je     c0015fcd <sysCallOpenDir(regs*)+0x67>
c0015f9e:	83 ec 0c             	sub    esp,0xc
c0015fa1:	56                   	push   esi
c0015fa2:	e8 c3 7b ff ff       	call   c000db6a <Directory::open()>
c0015fa7:	83 c4 10             	add    esp,0x10
c0015faa:	85 c0                	test   eax,eax
c0015fac:	75 1f                	jne    c0015fcd <sysCallOpenDir(regs*)+0x67>
c0015fae:	83 ec 0c             	sub    esp,0xc
c0015fb1:	56                   	push   esi
c0015fb2:	e8 67 58 ff ff       	call   c000b81e <UnixFile::getFileDescriptor()>
c0015fb7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0015fba:	83 c4 10             	add    esp,0x10
c0015fbd:	89 02                	mov    DWORD PTR [edx],eax
c0015fbf:	c1 f8 1f             	sar    eax,0x1f
c0015fc2:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015fc5:	31 c0                	xor    eax,eax
c0015fc7:	59                   	pop    ecx
c0015fc8:	31 d2                	xor    edx,edx
c0015fca:	5b                   	pop    ebx
c0015fcb:	5e                   	pop    esi
c0015fcc:	c3                   	ret    
c0015fcd:	59                   	pop    ecx
c0015fce:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015fd3:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015fd8:	5b                   	pop    ebx
c0015fd9:	5e                   	pop    esi
c0015fda:	c3                   	ret    

c0015fdb <sysCallCloseDir(regs*)>:
c0015fdb:	53                   	push   ebx
c0015fdc:	83 ec 08             	sub    esp,0x8
c0015fdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fe3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015fe6:	8d 50 fd             	lea    edx,[eax-0x3]
c0015fe9:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0015fef:	77 2f                	ja     c0016020 <sysCallCloseDir(regs*)+0x45>
c0015ff1:	83 ec 0c             	sub    esp,0xc
c0015ff4:	50                   	push   eax
c0015ff5:	e8 19 5b ff ff       	call   c000bb13 <getFromFileDescriptor(int)>
c0015ffa:	89 c3                	mov    ebx,eax
c0015ffc:	89 04 24             	mov    DWORD PTR [esp],eax
c0015fff:	e8 c2 7b ff ff       	call   c000dbc6 <Directory::close()>
c0016004:	83 c4 10             	add    esp,0x10
c0016007:	85 db                	test   ebx,ebx
c0016009:	74 0c                	je     c0016017 <sysCallCloseDir(regs*)+0x3c>
c001600b:	83 ec 0c             	sub    esp,0xc
c001600e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016010:	53                   	push   ebx
c0016011:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016014:	83 c4 10             	add    esp,0x10
c0016017:	31 c0                	xor    eax,eax
c0016019:	31 d2                	xor    edx,edx
c001601b:	83 c4 08             	add    esp,0x8
c001601e:	5b                   	pop    ebx
c001601f:	c3                   	ret    
c0016020:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016025:	ba ff ff ff ff       	mov    edx,0xffffffff
c001602a:	83 c4 08             	add    esp,0x8
c001602d:	5b                   	pop    ebx
c001602e:	c3                   	ret    

c001602f <sysCallMakeDir(regs*)>:
c001602f:	56                   	push   esi
c0016030:	53                   	push   ebx
c0016031:	83 ec 10             	sub    esp,0x10
c0016034:	68 14 01 00 00       	push   0x114
c0016039:	e8 79 3c ff ff       	call   c0009cb7 <malloc>
c001603e:	83 c4 0c             	add    esp,0xc
c0016041:	89 c3                	mov    ebx,eax
c0016043:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016048:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001604b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001604f:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0016052:	53                   	push   ebx
c0016053:	e8 38 7a ff ff       	call   c000da90 <Directory::Directory(char const*, Process*)>
c0016058:	83 c4 10             	add    esp,0x10
c001605b:	85 db                	test   ebx,ebx
c001605d:	74 32                	je     c0016091 <sysCallMakeDir(regs*)+0x62>
c001605f:	83 ec 0c             	sub    esp,0xc
c0016062:	53                   	push   ebx
c0016063:	e8 e2 7c ff ff       	call   c000dd4a <Directory::create()>
c0016068:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001606b:	89 c6                	mov    esi,eax
c001606d:	e8 54 7b ff ff       	call   c000dbc6 <Directory::close()>
c0016072:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016074:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016077:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001607a:	83 c4 10             	add    esp,0x10
c001607d:	31 c0                	xor    eax,eax
c001607f:	59                   	pop    ecx
c0016080:	85 f6                	test   esi,esi
c0016082:	5b                   	pop    ebx
c0016083:	0f 95 c0             	setne  al
c0016086:	5e                   	pop    esi
c0016087:	31 d2                	xor    edx,edx
c0016089:	f7 d8                	neg    eax
c001608b:	83 d2 00             	adc    edx,0x0
c001608e:	f7 da                	neg    edx
c0016090:	c3                   	ret    
c0016091:	59                   	pop    ecx
c0016092:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016097:	ba ff ff ff ff       	mov    edx,0xffffffff
c001609c:	5b                   	pop    ebx
c001609d:	5e                   	pop    esi
c001609e:	c3                   	ret    

c001609f <sysCallWait(regs*)>:
c001609f:	83 ec 10             	sub    esp,0x10
c00160a2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00160a6:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00160a9:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00160ac:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00160af:	e8 f4 24 00 00       	call   c00185a8 <waitTask(int, int*, int)>
c00160b4:	83 c4 1c             	add    esp,0x1c
c00160b7:	99                   	cdq    
c00160b8:	c3                   	ret    

c00160b9 <sysCallNotImpl(regs*)>:
c00160b9:	83 ec 18             	sub    esp,0x18
c00160bc:	68 26 5d 02 c0       	push   0xc0025d26
c00160c1:	e8 57 ec ff ff       	call   c0014d1d <Krnl::panic(char const*)>
c00160c6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00160cb:	ba ff ff ff ff       	mov    edx,0xffffffff
c00160d0:	83 c4 1c             	add    esp,0x1c
c00160d3:	c3                   	ret    

c00160d4 <sysPanic(regs*)>:
c00160d4:	83 ec 18             	sub    esp,0x18
c00160d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00160db:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00160de:	e8 3a ec ff ff       	call   c0014d1d <Krnl::panic(char const*)>
c00160e3:	b8 01 00 00 00       	mov    eax,0x1
c00160e8:	31 d2                	xor    edx,edx
c00160ea:	83 c4 1c             	add    esp,0x1c
c00160ed:	c3                   	ret    

c00160ee <sysCallRmdir(regs*)>:
c00160ee:	56                   	push   esi
c00160ef:	53                   	push   ebx
c00160f0:	83 ec 20             	sub    esp,0x20
c00160f3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00160f7:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00160fa:	68 14 01 00 00       	push   0x114
c00160ff:	e8 b3 3b ff ff       	call   c0009cb7 <malloc>
c0016104:	83 c4 0c             	add    esp,0xc
c0016107:	89 c3                	mov    ebx,eax
c0016109:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001610e:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016111:	56                   	push   esi
c0016112:	53                   	push   ebx
c0016113:	e8 18 74 ff ff       	call   c000d530 <File::File(char const*, Process*)>
c0016118:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001611b:	e8 62 76 ff ff       	call   c000d782 <File::unlink()>
c0016120:	83 c4 10             	add    esp,0x10
c0016123:	85 db                	test   ebx,ebx
c0016125:	74 14                	je     c001613b <sysCallRmdir(regs*)+0x4d>
c0016127:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001612b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001612d:	83 ec 0c             	sub    esp,0xc
c0016130:	53                   	push   ebx
c0016131:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0016134:	83 c4 10             	add    esp,0x10
c0016137:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001613b:	85 c0                	test   eax,eax
c001613d:	0f 95 c0             	setne  al
c0016140:	31 d2                	xor    edx,edx
c0016142:	0f b6 c0             	movzx  eax,al
c0016145:	f7 d8                	neg    eax
c0016147:	83 d2 00             	adc    edx,0x0
c001614a:	83 c4 14             	add    esp,0x14
c001614d:	f7 da                	neg    edx
c001614f:	5b                   	pop    ebx
c0016150:	5e                   	pop    esi
c0016151:	c3                   	ret    

c0016152 <sysCallUnlink(regs*)>:
c0016152:	56                   	push   esi
c0016153:	53                   	push   ebx
c0016154:	83 ec 20             	sub    esp,0x20
c0016157:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001615b:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001615e:	68 14 01 00 00       	push   0x114
c0016163:	e8 4f 3b ff ff       	call   c0009cb7 <malloc>
c0016168:	83 c4 0c             	add    esp,0xc
c001616b:	89 c3                	mov    ebx,eax
c001616d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016172:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016175:	56                   	push   esi
c0016176:	53                   	push   ebx
c0016177:	e8 b4 73 ff ff       	call   c000d530 <File::File(char const*, Process*)>
c001617c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001617f:	e8 fe 75 ff ff       	call   c000d782 <File::unlink()>
c0016184:	83 c4 10             	add    esp,0x10
c0016187:	85 db                	test   ebx,ebx
c0016189:	74 14                	je     c001619f <sysCallUnlink(regs*)+0x4d>
c001618b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001618f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016191:	83 ec 0c             	sub    esp,0xc
c0016194:	53                   	push   ebx
c0016195:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0016198:	83 c4 10             	add    esp,0x10
c001619b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001619f:	85 c0                	test   eax,eax
c00161a1:	0f 95 c0             	setne  al
c00161a4:	31 d2                	xor    edx,edx
c00161a6:	0f b6 c0             	movzx  eax,al
c00161a9:	f7 d8                	neg    eax
c00161ab:	83 d2 00             	adc    edx,0x0
c00161ae:	83 c4 14             	add    esp,0x14
c00161b1:	f7 da                	neg    edx
c00161b3:	5b                   	pop    ebx
c00161b4:	5e                   	pop    esi
c00161b5:	c3                   	ret    

c00161b6 <sysCallGetArgv(regs*)>:
c00161b6:	83 ec 0c             	sub    esp,0xc
c00161b9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00161bd:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00161c0:	85 c0                	test   eax,eax
c00161c2:	78 2b                	js     c00161ef <sysCallGetArgv(regs*)+0x39>
c00161c4:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00161ca:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00161cd:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c00161d3:	7d 1a                	jge    c00161ef <sysCallGetArgv(regs*)+0x39>
c00161d5:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c00161dc:	85 c0                	test   eax,eax
c00161de:	74 17                	je     c00161f7 <sysCallGetArgv(regs*)+0x41>
c00161e0:	83 ec 08             	sub    esp,0x8
c00161e3:	50                   	push   eax
c00161e4:	ff 72 24             	push   DWORD PTR [edx+0x24]
c00161e7:	e8 4c a5 fe ff       	call   c0000738 <strcpy>
c00161ec:	83 c4 10             	add    esp,0x10
c00161ef:	31 c0                	xor    eax,eax
c00161f1:	31 d2                	xor    edx,edx
c00161f3:	83 c4 0c             	add    esp,0xc
c00161f6:	c3                   	ret    
c00161f7:	b8 01 00 00 00       	mov    eax,0x1
c00161fc:	31 d2                	xor    edx,edx
c00161fe:	83 c4 0c             	add    esp,0xc
c0016201:	c3                   	ret    

c0016202 <sysCallTTYName(regs*)>:
c0016202:	56                   	push   esi
c0016203:	53                   	push   ebx
c0016204:	53                   	push   ebx
c0016205:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016209:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001620c:	85 c0                	test   eax,eax
c001620e:	74 5f                	je     c001626f <sysCallTTYName(regs*)+0x6d>
c0016210:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0016213:	83 f8 02             	cmp    eax,0x2
c0016216:	77 3e                	ja     c0016256 <sysCallTTYName(regs*)+0x54>
c0016218:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001621d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016220:	8b 98 06 05 00 00    	mov    ebx,DWORD PTR [eax+0x506]
c0016226:	85 db                	test   ebx,ebx
c0016228:	74 45                	je     c001626f <sysCallTTYName(regs*)+0x6d>
c001622a:	83 ec 0c             	sub    esp,0xc
c001622d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001622f:	53                   	push   ebx
c0016230:	ff 10                	call   DWORD PTR [eax]
c0016232:	83 c4 10             	add    esp,0x10
c0016235:	84 c0                	test   al,al
c0016237:	74 41                	je     c001627a <sysCallTTYName(regs*)+0x78>
c0016239:	83 ec 08             	sub    esp,0x8
c001623c:	81 c3 82 00 00 00    	add    ebx,0x82
c0016242:	53                   	push   ebx
c0016243:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0016246:	e8 ed a4 fe ff       	call   c0000738 <strcpy>
c001624b:	83 c4 10             	add    esp,0x10
c001624e:	31 c0                	xor    eax,eax
c0016250:	59                   	pop    ecx
c0016251:	31 d2                	xor    edx,edx
c0016253:	5b                   	pop    ebx
c0016254:	5e                   	pop    esi
c0016255:	c3                   	ret    
c0016256:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001625b:	74 bb                	je     c0016218 <sysCallTTYName(regs*)+0x16>
c001625d:	83 ec 0c             	sub    esp,0xc
c0016260:	50                   	push   eax
c0016261:	e8 ad 58 ff ff       	call   c000bb13 <getFromFileDescriptor(int)>
c0016266:	83 c4 10             	add    esp,0x10
c0016269:	89 c3                	mov    ebx,eax
c001626b:	85 db                	test   ebx,ebx
c001626d:	75 bb                	jne    c001622a <sysCallTTYName(regs*)+0x28>
c001626f:	59                   	pop    ecx
c0016270:	b8 01 00 00 00       	mov    eax,0x1
c0016275:	31 d2                	xor    edx,edx
c0016277:	5b                   	pop    ebx
c0016278:	5e                   	pop    esi
c0016279:	c3                   	ret    
c001627a:	59                   	pop    ecx
c001627b:	b8 02 00 00 00       	mov    eax,0x2
c0016280:	31 d2                	xor    edx,edx
c0016282:	5b                   	pop    ebx
c0016283:	5e                   	pop    esi
c0016284:	c3                   	ret    

c0016285 <sysCallUSleep(regs*)>:
c0016285:	83 ec 1c             	sub    esp,0x1c
c0016288:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001628c:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001628f:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0016292:	6a 00                	push   0x0
c0016294:	6a 64                	push   0x64
c0016296:	52                   	push   edx
c0016297:	50                   	push   eax
c0016298:	e8 c3 c3 00 00       	call   c0022660 <__udivdi3>
c001629d:	83 c4 14             	add    esp,0x14
c00162a0:	50                   	push   eax
c00162a1:	e8 d2 23 00 00       	call   c0018678 <milliTenthSleep(unsigned int)>
c00162a6:	31 c0                	xor    eax,eax
c00162a8:	31 d2                	xor    edx,edx
c00162aa:	83 c4 1c             	add    esp,0x1c
c00162ad:	c3                   	ret    

c00162ae <sysCallSpawn(regs*)>:
c00162ae:	56                   	push   esi
c00162af:	53                   	push   ebx
c00162b0:	50                   	push   eax
c00162b1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00162b5:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00162b8:	85 c0                	test   eax,eax
c00162ba:	75 08                	jne    c00162c4 <sysCallSpawn(regs*)+0x16>
c00162bc:	59                   	pop    ecx
c00162bd:	31 c0                	xor    eax,eax
c00162bf:	31 d2                	xor    edx,edx
c00162c1:	5b                   	pop    ebx
c00162c2:	5e                   	pop    esi
c00162c3:	c3                   	ret    
c00162c4:	83 ec 0c             	sub    esp,0xc
c00162c7:	68 1f 07 00 00       	push   0x71f
c00162cc:	e8 e6 39 ff ff       	call   c0009cb7 <malloc>
c00162d1:	83 c4 10             	add    esp,0x10
c00162d4:	89 c6                	mov    esi,eax
c00162d6:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00162d9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00162dc:	85 c0                	test   eax,eax
c00162de:	75 32                	jne    c0016312 <sysCallSpawn(regs*)+0x64>
c00162e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162e5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00162e8:	52                   	push   edx
c00162e9:	50                   	push   eax
c00162ea:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00162ed:	56                   	push   esi
c00162ee:	e8 7d 1a 00 00       	call   c0017d70 <Process::Process(char const*, Process*, char**)>
c00162f3:	83 c4 10             	add    esp,0x10
c00162f6:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c00162fd:	75 bd                	jne    c00162bc <sysCallSpawn(regs*)+0xe>
c00162ff:	83 ec 0c             	sub    esp,0xc
c0016302:	56                   	push   esi
c0016303:	e8 54 1f 00 00       	call   c001825c <Process::createUserThread()>
c0016308:	8b 06                	mov    eax,DWORD PTR [esi]
c001630a:	83 c4 10             	add    esp,0x10
c001630d:	99                   	cdq    
c001630e:	59                   	pop    ecx
c001630f:	5b                   	pop    ebx
c0016310:	5e                   	pop    esi
c0016311:	c3                   	ret    
c0016312:	31 c0                	xor    eax,eax
c0016314:	eb d2                	jmp    c00162e8 <sysCallSpawn(regs*)+0x3a>

c0016316 <sysCallGetEnv(regs*)>:
c0016316:	57                   	push   edi
c0016317:	56                   	push   esi
c0016318:	53                   	push   ebx
c0016319:	83 ec 1c             	sub    esp,0x1c
c001631c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016320:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016325:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0016328:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001632b:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001632e:	e8 36 e9 ff ff       	call   c0014c69 <Krnl::getProcessTotalEnvCount(Process*)>
c0016333:	83 c4 10             	add    esp,0x10
c0016336:	39 c7                	cmp    edi,eax
c0016338:	7c 14                	jl     c001634e <sysCallGetEnv(regs*)+0x38>
c001633a:	85 f6                	test   esi,esi
c001633c:	75 0b                	jne    c0016349 <sysCallGetEnv(regs*)+0x33>
c001633e:	83 c4 10             	add    esp,0x10
c0016341:	31 c0                	xor    eax,eax
c0016343:	5b                   	pop    ebx
c0016344:	31 d2                	xor    edx,edx
c0016346:	5e                   	pop    esi
c0016347:	5f                   	pop    edi
c0016348:	c3                   	ret    
c0016349:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001634c:	eb f0                	jmp    c001633e <sysCallGetEnv(regs*)+0x28>
c001634e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016352:	52                   	push   edx
c0016353:	57                   	push   edi
c0016354:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001635a:	ff 72 3c             	push   DWORD PTR [edx+0x3c]
c001635d:	50                   	push   eax
c001635e:	e8 26 e9 ff ff       	call   c0014c89 <Krnl::getProcessEnvPair(Process*, int)>
c0016363:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0016366:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001636a:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001636e:	83 c4 0c             	add    esp,0xc
c0016371:	85 c9                	test   ecx,ecx
c0016373:	75 23                	jne    c0016398 <sysCallGetEnv(regs*)+0x82>
c0016375:	83 ec 0c             	sub    esp,0xc
c0016378:	50                   	push   eax
c0016379:	e8 1a a3 fe ff       	call   c0000698 <strlen>
c001637e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016381:	89 c3                	mov    ebx,eax
c0016383:	e8 10 a3 fe ff       	call   c0000698 <strlen>
c0016388:	83 c4 10             	add    esp,0x10
c001638b:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001638f:	83 c4 10             	add    esp,0x10
c0016392:	31 d2                	xor    edx,edx
c0016394:	5b                   	pop    ebx
c0016395:	5e                   	pop    esi
c0016396:	5f                   	pop    edi
c0016397:	c3                   	ret    
c0016398:	83 ec 08             	sub    esp,0x8
c001639b:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001639e:	50                   	push   eax
c001639f:	56                   	push   esi
c00163a0:	e8 93 a3 fe ff       	call   c0000738 <strcpy>
c00163a5:	58                   	pop    eax
c00163a6:	5a                   	pop    edx
c00163a7:	68 40 5d 02 c0       	push   0xc0025d40
c00163ac:	56                   	push   esi
c00163ad:	e8 c6 a4 fe ff       	call   c0000878 <strcat>
c00163b2:	59                   	pop    ecx
c00163b3:	5b                   	pop    ebx
c00163b4:	57                   	push   edi
c00163b5:	56                   	push   esi
c00163b6:	e8 bd a4 fe ff       	call   c0000878 <strcat>
c00163bb:	83 c4 10             	add    esp,0x10
c00163be:	e9 7b ff ff ff       	jmp    c001633e <sysCallGetEnv(regs*)+0x28>

c00163c3 <sysAppSettings(regs*)>:
c00163c3:	57                   	push   edi
c00163c4:	56                   	push   esi
c00163c5:	56                   	push   esi
c00163c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163ca:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00163cd:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c00163d3:	25 e0 1f 00 00       	and    eax,0x1fe0
c00163d8:	66 3d c0 09          	cmp    ax,0x9c0
c00163dc:	75 2e                	jne    c001640c <sysAppSettings(regs*)+0x49>
c00163de:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c00163e4:	83 e0 1f             	and    eax,0x1f
c00163e7:	3c 01                	cmp    al,0x1
c00163e9:	74 2c                	je     c0016417 <sysAppSettings(regs*)+0x54>
c00163eb:	3c 07                	cmp    al,0x7
c00163ed:	0f 84 b3 00 00 00    	je     c00164a6 <sysAppSettings(regs*)+0xe3>
c00163f3:	84 c0                	test   al,al
c00163f5:	0f 84 d2 00 00 00    	je     c00164cd <sysAppSettings(regs*)+0x10a>
c00163fb:	3c 08                	cmp    al,0x8
c00163fd:	74 63                	je     c0016462 <sysAppSettings(regs*)+0x9f>
c00163ff:	59                   	pop    ecx
c0016400:	0f b6 c0             	movzx  eax,al
c0016403:	5e                   	pop    esi
c0016404:	05 e8 03 00 00       	add    eax,0x3e8
c0016409:	5f                   	pop    edi
c001640a:	99                   	cdq    
c001640b:	c3                   	ret    
c001640c:	b8 01 00 00 00       	mov    eax,0x1
c0016411:	59                   	pop    ecx
c0016412:	31 d2                	xor    edx,edx
c0016414:	5e                   	pop    esi
c0016415:	5f                   	pop    edi
c0016416:	c3                   	ret    
c0016417:	50                   	push   eax
c0016418:	68 00 01 00 00       	push   0x100
c001641d:	6a 00                	push   0x0
c001641f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016424:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016427:	83 c0 0c             	add    eax,0xc
c001642a:	50                   	push   eax
c001642b:	e8 4c a2 fe ff       	call   c000067c <memset>
c0016430:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016435:	b9 ff 00 00 00       	mov    ecx,0xff
c001643a:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c001643d:	83 c7 0c             	add    edi,0xc
c0016440:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016442:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016447:	5a                   	pop    edx
c0016448:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001644b:	59                   	pop    ecx
c001644c:	8d 50 0c             	lea    edx,[eax+0xc]
c001644f:	52                   	push   edx
c0016450:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0016456:	e8 e9 47 ff ff       	call   c000ac44 <VgaText::setTitle(char*)>
c001645b:	83 c4 10             	add    esp,0x10
c001645e:	31 c0                	xor    eax,eax
c0016460:	eb af                	jmp    c0016411 <sysAppSettings(regs*)+0x4e>
c0016462:	83 ec 08             	sub    esp,0x8
c0016465:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001646b:	83 e0 0f             	and    eax,0xf
c001646e:	50                   	push   eax
c001646f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016474:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016477:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001647d:	e8 b2 47 ff ff       	call   c000ac34 <VgaText::setTitleColour(VgaColour)>
c0016482:	5f                   	pop    edi
c0016483:	58                   	pop    eax
c0016484:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001648a:	c1 e8 04             	shr    eax,0x4
c001648d:	83 e0 0f             	and    eax,0xf
c0016490:	50                   	push   eax
c0016491:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016496:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016499:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001649f:	e8 80 47 ff ff       	call   c000ac24 <VgaText::setTitleTextColour(VgaColour)>
c00164a4:	eb b5                	jmp    c001645b <sysAppSettings(regs*)+0x98>
c00164a6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164ab:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00164ae:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00164b4:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c00164ba:	c0 e8 06             	shr    al,0x6
c00164bd:	83 e0 01             	and    eax,0x1
c00164c0:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c00164c6:	31 c0                	xor    eax,eax
c00164c8:	e9 44 ff ff ff       	jmp    c0016411 <sysAppSettings(regs*)+0x4e>
c00164cd:	b8 02 00 00 00       	mov    eax,0x2
c00164d2:	e9 3a ff ff ff       	jmp    c0016411 <sysAppSettings(regs*)+0x4e>

c00164d7 <sysSetFatAttrib(regs*)>:
c00164d7:	57                   	push   edi
c00164d8:	56                   	push   esi
c00164d9:	53                   	push   ebx
c00164da:	83 ec 1c             	sub    esp,0x1c
c00164dd:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00164e1:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00164e4:	68 14 01 00 00       	push   0x114
c00164e9:	e8 c9 37 ff ff       	call   c0009cb7 <malloc>
c00164ee:	83 c4 0c             	add    esp,0xc
c00164f1:	89 c3                	mov    ebx,eax
c00164f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164f8:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00164fb:	57                   	push   edi
c00164fc:	53                   	push   ebx
c00164fd:	e8 2e 70 ff ff       	call   c000d530 <File::File(char const*, Process*)>
c0016502:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0016505:	83 c4 0c             	add    esp,0xc
c0016508:	0f b6 d4             	movzx  edx,ah
c001650b:	0f b6 c0             	movzx  eax,al
c001650e:	52                   	push   edx
c001650f:	50                   	push   eax
c0016510:	53                   	push   ebx
c0016511:	e8 06 73 ff ff       	call   c000d81c <File::chfatattr(unsigned char, unsigned char)>
c0016516:	83 c4 10             	add    esp,0x10
c0016519:	85 db                	test   ebx,ebx
c001651b:	74 14                	je     c0016531 <sysSetFatAttrib(regs*)+0x5a>
c001651d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016521:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016523:	83 ec 0c             	sub    esp,0xc
c0016526:	53                   	push   ebx
c0016527:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001652a:	83 c4 10             	add    esp,0x10
c001652d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016531:	85 c0                	test   eax,eax
c0016533:	0f 95 c0             	setne  al
c0016536:	31 d2                	xor    edx,edx
c0016538:	0f b6 c0             	movzx  eax,al
c001653b:	f7 d8                	neg    eax
c001653d:	83 d2 00             	adc    edx,0x0
c0016540:	83 c4 10             	add    esp,0x10
c0016543:	f7 da                	neg    edx
c0016545:	5b                   	pop    ebx
c0016546:	5e                   	pop    esi
c0016547:	5f                   	pop    edi
c0016548:	c3                   	ret    

c0016549 <sysPipe(regs*)>:
c0016549:	57                   	push   edi
c001654a:	56                   	push   esi
c001654b:	53                   	push   ebx
c001654c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016550:	83 ec 0c             	sub    esp,0xc
c0016553:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0016556:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0016559:	6a 20                	push   0x20
c001655b:	e8 57 37 ff ff       	call   c0009cb7 <malloc>
c0016560:	89 c3                	mov    ebx,eax
c0016562:	58                   	pop    eax
c0016563:	5a                   	pop    edx
c0016564:	68 00 50 00 00       	push   0x5000
c0016569:	53                   	push   ebx
c001656a:	e8 4d 44 ff ff       	call   c000a9bc <Pipe::Pipe(int)>
c001656f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016572:	e8 a7 52 ff ff       	call   c000b81e <UnixFile::getFileDescriptor()>
c0016577:	89 07                	mov    DWORD PTR [edi],eax
c0016579:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001657c:	e8 9d 52 ff ff       	call   c000b81e <UnixFile::getFileDescriptor()>
c0016581:	83 c4 10             	add    esp,0x10
c0016584:	89 06                	mov    DWORD PTR [esi],eax
c0016586:	31 d2                	xor    edx,edx
c0016588:	5b                   	pop    ebx
c0016589:	31 c0                	xor    eax,eax
c001658b:	5e                   	pop    esi
c001658c:	5f                   	pop    edi
c001658d:	c3                   	ret    

c001658e <sysGetUnixTime(regs*)>:
c001658e:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c0016593:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016599:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001659d:	e9 ec 79 ff ff       	jmp    c000df8e <Clock::timeInSecondsLocal()>

c00165a2 <string_ends_with(char const*, char const*)>:
c00165a2:	57                   	push   edi
c00165a3:	56                   	push   esi
c00165a4:	53                   	push   ebx
c00165a5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00165a9:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00165ad:	83 ec 0c             	sub    esp,0xc
c00165b0:	53                   	push   ebx
c00165b1:	e8 e2 a0 fe ff       	call   c0000698 <strlen>
c00165b6:	89 3c 24             	mov    DWORD PTR [esp],edi
c00165b9:	89 c6                	mov    esi,eax
c00165bb:	e8 d8 a0 fe ff       	call   c0000698 <strlen>
c00165c0:	83 c4 10             	add    esp,0x10
c00165c3:	39 c6                	cmp    esi,eax
c00165c5:	7d 06                	jge    c00165cd <string_ends_with(char const*, char const*)+0x2b>
c00165c7:	5b                   	pop    ebx
c00165c8:	31 c0                	xor    eax,eax
c00165ca:	5e                   	pop    esi
c00165cb:	5f                   	pop    edi
c00165cc:	c3                   	ret    
c00165cd:	83 ec 08             	sub    esp,0x8
c00165d0:	29 c6                	sub    esi,eax
c00165d2:	57                   	push   edi
c00165d3:	01 f3                	add    ebx,esi
c00165d5:	53                   	push   ebx
c00165d6:	e8 e9 a1 fe ff       	call   c00007c4 <strcmp>
c00165db:	83 c4 10             	add    esp,0x10
c00165de:	85 c0                	test   eax,eax
c00165e0:	5b                   	pop    ebx
c00165e1:	0f 94 c0             	sete   al
c00165e4:	5e                   	pop    esi
c00165e5:	0f b6 c0             	movzx  eax,al
c00165e8:	5f                   	pop    edi
c00165e9:	c3                   	ret    

c00165ea <sysCallOpen(regs*)>:
c00165ea:	56                   	push   esi
c00165eb:	53                   	push   ebx
c00165ec:	81 ec 04 01 00 00    	sub    esp,0x104
c00165f2:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00165f9:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00165fc:	85 c9                	test   ecx,ecx
c00165fe:	0f 84 ad 01 00 00    	je     c00167b1 <sysCallOpen(regs*)+0x1c7>
c0016604:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016607:	85 c0                	test   eax,eax
c0016609:	0f 84 a2 01 00 00    	je     c00167b1 <sysCallOpen(regs*)+0x1c7>
c001660f:	52                   	push   edx
c0016610:	68 42 5d 02 c0       	push   0xc0025d42
c0016615:	50                   	push   eax
c0016616:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001661a:	56                   	push   esi
c001661b:	e8 66 6d ff ff       	call   c000d386 <Fs::standardiseFiles(char*, char const*, char const*)>
c0016620:	89 34 24             	mov    DWORD PTR [esp],esi
c0016623:	e8 70 a0 fe ff       	call   c0000698 <strlen>
c0016628:	83 c4 10             	add    esp,0x10
c001662b:	48                   	dec    eax
c001662c:	74 1d                	je     c001664b <sysCallOpen(regs*)+0x61>
c001662e:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0016631:	eb 0f                	jmp    c0016642 <sysCallOpen(regs*)+0x58>
c0016633:	80 fa 3a             	cmp    dl,0x3a
c0016636:	74 0f                	je     c0016647 <sysCallOpen(regs*)+0x5d>
c0016638:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001663c:	48                   	dec    eax
c001663d:	74 0c                	je     c001664b <sysCallOpen(regs*)+0x61>
c001663f:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0016642:	80 fa 2e             	cmp    dl,0x2e
c0016645:	75 ec                	jne    c0016633 <sysCallOpen(regs*)+0x49>
c0016647:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001664b:	83 ec 08             	sub    esp,0x8
c001664e:	68 46 5d 02 c0       	push   0xc0025d46
c0016653:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016656:	e8 47 ff ff ff       	call   c00165a2 <string_ends_with(char const*, char const*)>
c001665b:	83 c4 10             	add    esp,0x10
c001665e:	85 c0                	test   eax,eax
c0016660:	74 1d                	je     c001667f <sysCallOpen(regs*)+0x95>
c0016662:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016665:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001666b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016672:	81 c4 04 01 00 00    	add    esp,0x104
c0016678:	31 c0                	xor    eax,eax
c001667a:	31 d2                	xor    edx,edx
c001667c:	5b                   	pop    ebx
c001667d:	5e                   	pop    esi
c001667e:	c3                   	ret    
c001667f:	83 ec 08             	sub    esp,0x8
c0016682:	68 4b 5d 02 c0       	push   0xc0025d4b
c0016687:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001668a:	e8 13 ff ff ff       	call   c00165a2 <string_ends_with(char const*, char const*)>
c001668f:	83 c4 10             	add    esp,0x10
c0016692:	85 c0                	test   eax,eax
c0016694:	75 cc                	jne    c0016662 <sysCallOpen(regs*)+0x78>
c0016696:	83 ec 08             	sub    esp,0x8
c0016699:	68 47 5d 02 c0       	push   0xc0025d47
c001669e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00166a1:	e8 1e a1 fe ff       	call   c00007c4 <strcmp>
c00166a6:	83 c4 10             	add    esp,0x10
c00166a9:	85 c0                	test   eax,eax
c00166ab:	74 b5                	je     c0016662 <sysCallOpen(regs*)+0x78>
c00166ad:	83 ec 08             	sub    esp,0x8
c00166b0:	68 46 5d 02 c0       	push   0xc0025d46
c00166b5:	56                   	push   esi
c00166b6:	e8 e7 fe ff ff       	call   c00165a2 <string_ends_with(char const*, char const*)>
c00166bb:	83 c4 10             	add    esp,0x10
c00166be:	85 c0                	test   eax,eax
c00166c0:	75 a0                	jne    c0016662 <sysCallOpen(regs*)+0x78>
c00166c2:	83 ec 08             	sub    esp,0x8
c00166c5:	68 50 5d 02 c0       	push   0xc0025d50
c00166ca:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00166cd:	e8 d0 fe ff ff       	call   c00165a2 <string_ends_with(char const*, char const*)>
c00166d2:	83 c4 10             	add    esp,0x10
c00166d5:	85 c0                	test   eax,eax
c00166d7:	0f 85 e7 00 00 00    	jne    c00167c4 <sysCallOpen(regs*)+0x1da>
c00166dd:	83 ec 08             	sub    esp,0x8
c00166e0:	68 55 5d 02 c0       	push   0xc0025d55
c00166e5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00166e8:	e8 b5 fe ff ff       	call   c00165a2 <string_ends_with(char const*, char const*)>
c00166ed:	83 c4 10             	add    esp,0x10
c00166f0:	85 c0                	test   eax,eax
c00166f2:	0f 85 cc 00 00 00    	jne    c00167c4 <sysCallOpen(regs*)+0x1da>
c00166f8:	83 ec 08             	sub    esp,0x8
c00166fb:	68 51 5d 02 c0       	push   0xc0025d51
c0016700:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016703:	e8 bc a0 fe ff       	call   c00007c4 <strcmp>
c0016708:	83 c4 10             	add    esp,0x10
c001670b:	85 c0                	test   eax,eax
c001670d:	0f 84 b1 00 00 00    	je     c00167c4 <sysCallOpen(regs*)+0x1da>
c0016713:	83 ec 08             	sub    esp,0x8
c0016716:	68 50 5d 02 c0       	push   0xc0025d50
c001671b:	56                   	push   esi
c001671c:	e8 81 fe ff ff       	call   c00165a2 <string_ends_with(char const*, char const*)>
c0016721:	83 c4 10             	add    esp,0x10
c0016724:	85 c0                	test   eax,eax
c0016726:	0f 85 98 00 00 00    	jne    c00167c4 <sysCallOpen(regs*)+0x1da>
c001672c:	83 ec 0c             	sub    esp,0xc
c001672f:	68 14 01 00 00       	push   0x114
c0016734:	e8 7e 35 ff ff       	call   c0009cb7 <malloc>
c0016739:	83 c4 0c             	add    esp,0xc
c001673c:	89 c6                	mov    esi,eax
c001673e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016743:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016746:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016749:	56                   	push   esi
c001674a:	e8 e1 6d ff ff       	call   c000d530 <File::File(char const*, Process*)>
c001674f:	83 c4 10             	add    esp,0x10
c0016752:	85 f6                	test   esi,esi
c0016754:	74 5b                	je     c00167b1 <sysCallOpen(regs*)+0x1c7>
c0016756:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0016759:	0f b6 c2             	movzx  eax,dl
c001675c:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001675f:	89 d0                	mov    eax,edx
c0016761:	83 e0 01             	and    eax,0x1
c0016764:	f6 c2 02             	test   dl,0x2
c0016767:	74 03                	je     c001676c <sysCallOpen(regs*)+0x182>
c0016769:	83 c8 02             	or     eax,0x2
c001676c:	f6 c2 04             	test   dl,0x4
c001676f:	74 03                	je     c0016774 <sysCallOpen(regs*)+0x18a>
c0016771:	83 c8 04             	or     eax,0x4
c0016774:	f6 c2 08             	test   dl,0x8
c0016777:	74 03                	je     c001677c <sysCallOpen(regs*)+0x192>
c0016779:	83 c8 0a             	or     eax,0xa
c001677c:	83 e2 10             	and    edx,0x10
c001677f:	74 03                	je     c0016784 <sysCallOpen(regs*)+0x19a>
c0016781:	83 c8 12             	or     eax,0x12
c0016784:	83 ec 08             	sub    esp,0x8
c0016787:	50                   	push   eax
c0016788:	56                   	push   esi
c0016789:	e8 7c 6e ff ff       	call   c000d60a <File::open(FileOpenMode)>
c001678e:	83 c4 10             	add    esp,0x10
c0016791:	85 c0                	test   eax,eax
c0016793:	75 1c                	jne    c00167b1 <sysCallOpen(regs*)+0x1c7>
c0016795:	83 ec 0c             	sub    esp,0xc
c0016798:	56                   	push   esi
c0016799:	e8 80 50 ff ff       	call   c000b81e <UnixFile::getFileDescriptor()>
c001679e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00167a1:	83 c4 10             	add    esp,0x10
c00167a4:	89 02                	mov    DWORD PTR [edx],eax
c00167a6:	c1 f8 1f             	sar    eax,0x1f
c00167a9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00167ac:	e9 c1 fe ff ff       	jmp    c0016672 <sysCallOpen(regs*)+0x88>
c00167b1:	81 c4 04 01 00 00    	add    esp,0x104
c00167b7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00167bc:	ba ff ff ff ff       	mov    edx,0xffffffff
c00167c1:	5b                   	pop    ebx
c00167c2:	5e                   	pop    esi
c00167c3:	c3                   	ret    
c00167c4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00167c7:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c00167cd:	e9 99 fe ff ff       	jmp    c001666b <sysCallOpen(regs*)+0x81>

c00167d2 <Sys::loadSyscalls()>:
c00167d2:	c7 05 60 89 02 c0 43 5a 01 c0 	mov    DWORD PTR ds:0xc0028960,0xc0015a43
c00167dc:	c7 05 64 89 02 c0 38 56 01 c0 	mov    DWORD PTR ds:0xc0028964,0xc0015638
c00167e6:	c7 05 68 89 02 c0 29 58 01 c0 	mov    DWORD PTR ds:0xc0028968,0xc0015829
c00167f0:	c7 05 6c 89 02 c0 79 59 01 c0 	mov    DWORD PTR ds:0xc002896c,0xc0015979
c00167fa:	c7 05 70 89 02 c0 c1 57 01 c0 	mov    DWORD PTR ds:0xc0028970,0xc00157c1
c0016804:	c7 05 74 89 02 c0 6f 56 01 c0 	mov    DWORD PTR ds:0xc0028974,0xc001566f
c001680e:	c7 05 78 89 02 c0 50 56 01 c0 	mov    DWORD PTR ds:0xc0028978,0xc0015650
c0016818:	c7 05 7c 89 02 c0 7e 58 01 c0 	mov    DWORD PTR ds:0xc002897c,0xc001587e
c0016822:	c7 05 84 89 02 c0 06 5f 01 c0 	mov    DWORD PTR ds:0xc0028984,0xc0015f06
c001682c:	c7 05 80 89 02 c0 ea 65 01 c0 	mov    DWORD PTR ds:0xc0028980,0xc00165ea
c0016836:	c7 05 88 89 02 c0 66 5f 01 c0 	mov    DWORD PTR ds:0xc0028988,0xc0015f66
c0016840:	c7 05 8c 89 02 c0 49 5c 01 c0 	mov    DWORD PTR ds:0xc002898c,0xc0015c49
c001684a:	c7 05 90 89 02 c0 7b 5a 01 c0 	mov    DWORD PTR ds:0xc0028990,0xc0015a7b
c0016854:	c7 05 94 89 02 c0 80 5a 01 c0 	mov    DWORD PTR ds:0xc0028994,0xc0015a80
c001685e:	c7 05 98 89 02 c0 2f 60 01 c0 	mov    DWORD PTR ds:0xc0028998,0xc001602f
c0016868:	c7 05 9c 89 02 c0 db 5f 01 c0 	mov    DWORD PTR ds:0xc002899c,0xc0015fdb
c0016872:	c7 05 a0 89 02 c0 22 5d 01 c0 	mov    DWORD PTR ds:0xc00289a0,0xc0015d22
c001687c:	c7 05 a4 89 02 c0 79 5d 01 c0 	mov    DWORD PTR ds:0xc00289a4,0xc0015d79
c0016886:	c7 05 a8 89 02 c0 e5 5d 01 c0 	mov    DWORD PTR ds:0xc00289a8,0xc0015de5
c0016890:	c7 05 ac 89 02 c0 85 5a 01 c0 	mov    DWORD PTR ds:0xc00289ac,0xc0015a85
c001689a:	c7 05 b0 89 02 c0 9f 60 01 c0 	mov    DWORD PTR ds:0xc00289b0,0xc001609f
c00168a4:	c7 05 b4 89 02 c0 b9 60 01 c0 	mov    DWORD PTR ds:0xc00289b4,0xc00160b9
c00168ae:	c7 05 b8 89 02 c0 b9 60 01 c0 	mov    DWORD PTR ds:0xc00289b8,0xc00160b9
c00168b8:	c7 05 bc 89 02 c0 ee 60 01 c0 	mov    DWORD PTR ds:0xc00289bc,0xc00160ee
c00168c2:	c7 05 c0 89 02 c0 52 61 01 c0 	mov    DWORD PTR ds:0xc00289c0,0xc0016152
c00168cc:	c7 05 c4 89 02 c0 8f 5a 01 c0 	mov    DWORD PTR ds:0xc00289c4,0xc0015a8f
c00168d6:	c7 05 c8 89 02 c0 b6 61 01 c0 	mov    DWORD PTR ds:0xc00289c8,0xc00161b6
c00168e0:	c7 05 cc 89 02 c0 06 5c 01 c0 	mov    DWORD PTR ds:0xc00289cc,0xc0015c06
c00168ea:	c7 05 d0 89 02 c0 02 62 01 c0 	mov    DWORD PTR ds:0xc00289d0,0xc0016202
c00168f4:	c7 05 d4 89 02 c0 c8 5c 01 c0 	mov    DWORD PTR ds:0xc00289d4,0xc0015cc8
c00168fe:	c7 05 d8 89 02 c0 85 62 01 c0 	mov    DWORD PTR ds:0xc00289d8,0xc0016285
c0016908:	c7 05 dc 89 02 c0 57 5e 01 c0 	mov    DWORD PTR ds:0xc00289dc,0xc0015e57
c0016912:	c7 05 e0 89 02 c0 ae 62 01 c0 	mov    DWORD PTR ds:0xc00289e0,0xc00162ae
c001691c:	c7 05 e4 89 02 c0 16 63 01 c0 	mov    DWORD PTR ds:0xc00289e4,0xc0016316
c0016926:	c7 05 e8 89 02 c0 c3 63 01 c0 	mov    DWORD PTR ds:0xc00289e8,0xc00163c3
c0016930:	c7 05 ec 89 02 c0 9f 5a 01 c0 	mov    DWORD PTR ds:0xc00289ec,0xc0015a9f
c001693a:	c7 05 f0 89 02 c0 09 5b 01 c0 	mov    DWORD PTR ds:0xc00289f0,0xc0015b09
c0016944:	c7 05 f4 89 02 c0 53 5b 01 c0 	mov    DWORD PTR ds:0xc00289f4,0xc0015b53
c001694e:	c7 05 f8 89 02 c0 d7 64 01 c0 	mov    DWORD PTR ds:0xc00289f8,0xc00164d7
c0016958:	c7 05 fc 89 02 c0 d4 60 01 c0 	mov    DWORD PTR ds:0xc00289fc,0xc00160d4
c0016962:	c7 05 00 8a 02 c0 a8 5b 01 c0 	mov    DWORD PTR ds:0xc0028a00,0xc0015ba8
c001696c:	c7 05 04 8a 02 c0 49 65 01 c0 	mov    DWORD PTR ds:0xc0028a04,0xc0016549
c0016976:	c7 05 08 8a 02 c0 8e 65 01 c0 	mov    DWORD PTR ds:0xc0028a08,0xc001658e
c0016980:	c7 05 0c 8a 02 c0 19 57 01 c0 	mov    DWORD PTR ds:0xc0028a0c,0xc0015719
c001698a:	c7 05 10 8a 02 c0 9a 58 01 c0 	mov    DWORD PTR ds:0xc0028a10,0xc001589a
c0016994:	c7 05 14 8a 02 c0 2f 59 01 c0 	mov    DWORD PTR ds:0xc0028a14,0xc001592f
c001699e:	c7 05 18 8a 02 c0 02 56 01 c0 	mov    DWORD PTR ds:0xc0028a18,0xc0015602
c00169a8:	c7 05 1c 8a 02 c0 e1 59 01 c0 	mov    DWORD PTR ds:0xc0028a1c,0xc00159e1
c00169b2:	c7 05 20 8a 02 c0 7b 56 01 c0 	mov    DWORD PTR ds:0xc0028a20,0xc001567b
c00169bc:	c7 05 24 8a 02 c0 95 56 01 c0 	mov    DWORD PTR ds:0xc0028a24,0xc0015695
c00169c6:	c3                   	ret    

c00169c7 <Sys::systemCall(regs*, void*)>:
c00169c7:	53                   	push   ebx
c00169c8:	83 ec 08             	sub    esp,0x8
c00169cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00169cf:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00169d2:	83 f8 7f             	cmp    eax,0x7f
c00169d5:	77 16                	ja     c00169ed <Sys::systemCall(regs*, void*)+0x26>
c00169d7:	8b 14 85 60 89 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd76a0]
c00169de:	85 d2                	test   edx,edx
c00169e0:	74 0b                	je     c00169ed <Sys::systemCall(regs*, void*)+0x26>
c00169e2:	83 ec 0c             	sub    esp,0xc
c00169e5:	53                   	push   ebx
c00169e6:	ff d2                	call   edx
c00169e8:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00169eb:	eb 0d                	jmp    c00169fa <Sys::systemCall(regs*, void*)+0x33>
c00169ed:	52                   	push   edx
c00169ee:	52                   	push   edx
c00169ef:	50                   	push   eax
c00169f0:	68 5a 5d 02 c0       	push   0xc0025d5a
c00169f5:	e8 cb 65 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00169fa:	83 c4 10             	add    esp,0x10
c00169fd:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0016a02:	31 d2                	xor    edx,edx
c0016a04:	83 c4 08             	add    esp,0x8
c0016a07:	5b                   	pop    ebx
c0016a08:	c3                   	ret    

c0016a09 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0016a09:	55                   	push   ebp
c0016a0a:	57                   	push   edi
c0016a0b:	56                   	push   esi
c0016a0c:	53                   	push   ebx
c0016a0d:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0016a13:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0016a1a:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c0016a21:	85 c0                	test   eax,eax
c0016a23:	0f 95 c1             	setne  cl
c0016a26:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0016a2e:	0f 94 c2             	sete   dl
c0016a31:	84 d1                	test   cl,dl
c0016a33:	74 23                	je     c0016a58 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c0016a35:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c0016a3b:	74 1b                	je     c0016a58 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c0016a3d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0016a43:	89 da                	mov    edx,ebx
c0016a45:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0016a4b:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c0016a51:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c0016a58:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c0016a5f:	05 ff 0f 00 00       	add    eax,0xfff
c0016a64:	83 ec 0c             	sub    esp,0xc
c0016a67:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016a6b:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c0016a71:	c1 e8 0c             	shr    eax,0xc
c0016a74:	89 fe                	mov    esi,edi
c0016a76:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016a7a:	c1 ee 0c             	shr    esi,0xc
c0016a7d:	6a 01                	push   0x1
c0016a7f:	e8 e5 51 ff ff       	call   c000bc69 <Virt::allocateKernelVirtualPages(int)>
c0016a84:	89 c5                	mov    ebp,eax
c0016a86:	58                   	pop    eax
c0016a87:	5a                   	pop    edx
c0016a88:	56                   	push   esi
c0016a89:	68 6e 5d 02 c0       	push   0xc0025d6e
c0016a8e:	e8 32 65 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0016a93:	59                   	pop    ecx
c0016a94:	58                   	pop    eax
c0016a95:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016a99:	68 80 5d 02 c0       	push   0xc0025d80
c0016a9e:	e8 22 65 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0016aa3:	83 c4 10             	add    esp,0x10
c0016aa6:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c0016aac:	0f 86 31 01 00 00    	jbe    c0016be3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c0016ab2:	c1 e6 0c             	shl    esi,0xc
c0016ab5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016ab8:	8d 04 1e             	lea    eax,[esi+ebx*1]
c0016abb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016abf:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0016ac6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016ac9:	01 df                	add    edi,ebx
c0016acb:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c0016ace:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016ad2:	0f 84 08 01 00 00    	je     c0016be0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c0016ad8:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0016ade:	76 05                	jbe    c0016ae5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c0016ae0:	bf 00 10 00 00       	mov    edi,0x1000
c0016ae5:	83 ec 0c             	sub    esp,0xc
c0016ae8:	31 d2                	xor    edx,edx
c0016aea:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0016af1:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016af3:	8d 44 24 28          	lea    eax,[esp+0x28]
c0016af7:	50                   	push   eax
c0016af8:	8d 74 24 30          	lea    esi,[esp+0x30]
c0016afc:	56                   	push   esi
c0016afd:	52                   	push   edx
c0016afe:	57                   	push   edi
c0016aff:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0016b06:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016b09:	83 c4 20             	add    esp,0x20
c0016b0c:	85 c0                	test   eax,eax
c0016b0e:	74 0a                	je     c0016b1a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c0016b10:	53                   	push   ebx
c0016b11:	53                   	push   ebx
c0016b12:	50                   	push   eax
c0016b13:	68 92 5d 02 c0       	push   0xc0025d92
c0016b18:	eb 0f                	jmp    c0016b29 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c0016b1a:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016b1e:	74 20                	je     c0016b40 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c0016b20:	51                   	push   ecx
c0016b21:	51                   	push   ecx
c0016b22:	6a 00                	push   0x0
c0016b24:	68 bd 5d 02 c0       	push   0xc0025dbd
c0016b29:	e8 97 64 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0016b2e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016b31:	e8 27 54 ff ff       	call   c000bf5d <Virt::freeKernelVirtualPages(unsigned long)>
c0016b36:	83 c4 10             	add    esp,0x10
c0016b39:	31 c0                	xor    eax,eax
c0016b3b:	e9 68 01 00 00       	jmp    c0016ca8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c0016b40:	fa                   	cli    
c0016b41:	ff 05 28 93 02 c0    	inc    DWORD PTR ds:0xc0029328
c0016b47:	e8 22 38 ff ff       	call   c000a36e <Phys::allocatePage()>
c0016b4c:	6a 07                	push   0x7
c0016b4e:	89 c7                	mov    edi,eax
c0016b50:	55                   	push   ebp
c0016b51:	50                   	push   eax
c0016b52:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b57:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016b5a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016b60:	e8 6f 57 ff ff       	call   c000c2d4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0016b65:	83 c4 0c             	add    esp,0xc
c0016b68:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0016b6f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016b75:	6a 00                	push   0x0
c0016b77:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b7c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016b7f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016b85:	e8 a4 55 ff ff       	call   c000c12e <VAS::mapOtherVASIn(bool, VAS*)>
c0016b8a:	58                   	pop    eax
c0016b8b:	5a                   	pop    edx
c0016b8c:	68 07 0c 00 00       	push   0xc07
c0016b91:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016b95:	57                   	push   edi
c0016b96:	89 ef                	mov    edi,ebp
c0016b98:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0016b9f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016ba5:	6a 00                	push   0x0
c0016ba7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016bac:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016baf:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016bb5:	e8 d8 5a ff ff       	call   c000c692 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0016bba:	b9 00 10 00 00       	mov    ecx,0x1000
c0016bbf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016bc1:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c0016bc6:	83 c4 20             	add    esp,0x20
c0016bc9:	48                   	dec    eax
c0016bca:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c0016bcf:	85 c0                	test   eax,eax
c0016bd1:	75 01                	jne    c0016bd4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c0016bd3:	fb                   	sti    
c0016bd4:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c0016bdb:	e9 df fe ff ff       	jmp    c0016abf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c0016be0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0016be3:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c0016beb:	0f 86 a9 00 00 00    	jbe    c0016c9a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c0016bf1:	fa                   	cli    
c0016bf2:	ff 05 28 93 02 c0    	inc    DWORD PTR ds:0xc0029328
c0016bf8:	51                   	push   ecx
c0016bf9:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0016c00:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016c06:	6a 00                	push   0x0
c0016c08:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c0d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016c10:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016c16:	e8 13 55 ff ff       	call   c000c12e <VAS::mapOtherVASIn(bool, VAS*)>
c0016c1b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0016c1f:	c1 e6 0c             	shl    esi,0xc
c0016c22:	01 de                	add    esi,ebx
c0016c24:	83 c4 10             	add    esp,0x10
c0016c27:	39 de                	cmp    esi,ebx
c0016c29:	74 61                	je     c0016c8c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c0016c2b:	e8 3e 37 ff ff       	call   c000a36e <Phys::allocatePage()>
c0016c30:	6a 07                	push   0x7
c0016c32:	89 c7                	mov    edi,eax
c0016c34:	55                   	push   ebp
c0016c35:	50                   	push   eax
c0016c36:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c3b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016c3e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016c44:	e8 8b 56 ff ff       	call   c000c2d4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0016c49:	58                   	pop    eax
c0016c4a:	5a                   	pop    edx
c0016c4b:	68 07 0c 00 00       	push   0xc07
c0016c50:	53                   	push   ebx
c0016c51:	81 c3 00 10 00 00    	add    ebx,0x1000
c0016c57:	57                   	push   edi
c0016c58:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0016c5f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016c65:	6a 00                	push   0x0
c0016c67:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c6c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016c6f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016c75:	e8 18 5a ff ff       	call   c000c692 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0016c7a:	83 c4 1c             	add    esp,0x1c
c0016c7d:	68 00 10 00 00       	push   0x1000
c0016c82:	6a 00                	push   0x0
c0016c84:	55                   	push   ebp
c0016c85:	e8 f2 99 fe ff       	call   c000067c <memset>
c0016c8a:	eb 98                	jmp    c0016c24 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c0016c8c:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c0016c91:	48                   	dec    eax
c0016c92:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c0016c97:	75 01                	jne    c0016c9a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c0016c99:	fb                   	sti    
c0016c9a:	83 ec 0c             	sub    esp,0xc
c0016c9d:	55                   	push   ebp
c0016c9e:	e8 ba 52 ff ff       	call   c000bf5d <Virt::freeKernelVirtualPages(unsigned long)>
c0016ca3:	83 c4 10             	add    esp,0x10
c0016ca6:	b0 01                	mov    al,0x1
c0016ca8:	81 c4 2c 10 00 00    	add    esp,0x102c
c0016cae:	5b                   	pop    ebx
c0016caf:	5e                   	pop    esi
c0016cb0:	5f                   	pop    edi
c0016cb1:	5d                   	pop    ebp
c0016cb2:	c3                   	ret    

c0016cb3 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0016cb3:	55                   	push   ebp
c0016cb4:	57                   	push   edi
c0016cb5:	56                   	push   esi
c0016cb6:	53                   	push   ebx
c0016cb7:	83 ec 48             	sub    esp,0x48
c0016cba:	68 14 01 00 00       	push   0x114
c0016cbf:	e8 f3 2f ff ff       	call   c0009cb7 <malloc>
c0016cc4:	83 c4 0c             	add    esp,0xc
c0016cc7:	89 c6                	mov    esi,eax
c0016cc9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016ccd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0016cd1:	50                   	push   eax
c0016cd2:	e8 59 68 ff ff       	call   c000d530 <File::File(char const*, Process*)>
c0016cd7:	58                   	pop    eax
c0016cd8:	5a                   	pop    edx
c0016cd9:	6a 01                	push   0x1
c0016cdb:	56                   	push   esi
c0016cdc:	e8 29 69 ff ff       	call   c000d60a <File::open(FileOpenMode)>
c0016ce1:	83 c4 10             	add    esp,0x10
c0016ce4:	85 c0                	test   eax,eax
c0016ce6:	0f 85 47 01 00 00    	jne    c0016e33 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016cec:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0016cf4:	83 ec 0c             	sub    esp,0xc
c0016cf7:	6a 34                	push   0x34
c0016cf9:	e8 b9 2f ff ff       	call   c0009cb7 <malloc>
c0016cfe:	89 c3                	mov    ebx,eax
c0016d00:	58                   	pop    eax
c0016d01:	8b 06                	mov    eax,DWORD PTR [esi]
c0016d03:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0016d07:	57                   	push   edi
c0016d08:	53                   	push   ebx
c0016d09:	6a 00                	push   0x0
c0016d0b:	6a 34                	push   0x34
c0016d0d:	56                   	push   esi
c0016d0e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016d11:	83 c4 20             	add    esp,0x20
c0016d14:	85 c0                	test   eax,eax
c0016d16:	0f 85 17 01 00 00    	jne    c0016e33 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016d1c:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0016d22:	0f 85 0b 01 00 00    	jne    c0016e33 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016d28:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016d2b:	85 c0                	test   eax,eax
c0016d2d:	0f 84 00 01 00 00    	je     c0016e33 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016d33:	31 d2                	xor    edx,edx
c0016d35:	55                   	push   ebp
c0016d36:	52                   	push   edx
c0016d37:	50                   	push   eax
c0016d38:	56                   	push   esi
c0016d39:	e8 8a 69 ff ff       	call   c000d6c8 <File::seek(unsigned long long)>
c0016d3e:	83 c4 10             	add    esp,0x10
c0016d41:	85 c0                	test   eax,eax
c0016d43:	0f 85 ea 00 00 00    	jne    c0016e33 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016d49:	83 ec 0c             	sub    esp,0xc
c0016d4c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016d4f:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0016d53:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016d57:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0016d5b:	0f af c2             	imul   eax,edx
c0016d5e:	50                   	push   eax
c0016d5f:	e8 53 2f ff ff       	call   c0009cb7 <malloc>
c0016d64:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016d66:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016d6a:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016d6d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016d71:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0016d75:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0016d79:	0f af c2             	imul   eax,edx
c0016d7c:	99                   	cdq    
c0016d7d:	52                   	push   edx
c0016d7e:	50                   	push   eax
c0016d7f:	56                   	push   esi
c0016d80:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016d83:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0016d86:	83 c4 20             	add    esp,0x20
c0016d89:	85 c0                	test   eax,eax
c0016d8b:	0f 84 a2 00 00 00    	je     c0016e33 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016d91:	31 d2                	xor    edx,edx
c0016d93:	51                   	push   ecx
c0016d94:	52                   	push   edx
c0016d95:	50                   	push   eax
c0016d96:	56                   	push   esi
c0016d97:	e8 2c 69 ff ff       	call   c000d6c8 <File::seek(unsigned long long)>
c0016d9c:	83 c4 10             	add    esp,0x10
c0016d9f:	85 c0                	test   eax,eax
c0016da1:	0f 85 8c 00 00 00    	jne    c0016e33 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016da7:	83 ec 0c             	sub    esp,0xc
c0016daa:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0016dae:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0016db2:	31 ed                	xor    ebp,ebp
c0016db4:	0f af c2             	imul   eax,edx
c0016db7:	50                   	push   eax
c0016db8:	e8 fa 2e ff ff       	call   c0009cb7 <malloc>
c0016dbd:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016dbf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016dc3:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016dc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016dca:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0016dce:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0016dd2:	0f af c2             	imul   eax,edx
c0016dd5:	99                   	cdq    
c0016dd6:	52                   	push   edx
c0016dd7:	50                   	push   eax
c0016dd8:	56                   	push   esi
c0016dd9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016ddc:	83 c4 20             	add    esp,0x20
c0016ddf:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016de7:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c0016deb:	0f 86 80 00 00 00    	jbe    c0016e71 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0016df1:	0f b7 fd             	movzx  edi,bp
c0016df4:	c1 e7 05             	shl    edi,0x5
c0016df7:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0016dfb:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0016dfe:	75 6b                	jne    c0016e6b <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0016e00:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0016e03:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016e07:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0016e0a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016e0e:	52                   	push   edx
c0016e0f:	31 d2                	xor    edx,edx
c0016e11:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0016e14:	52                   	push   edx
c0016e15:	50                   	push   eax
c0016e16:	56                   	push   esi
c0016e17:	e8 ac 68 ff ff       	call   c000d6c8 <File::seek(unsigned long long)>
c0016e1c:	83 c4 10             	add    esp,0x10
c0016e1f:	85 c0                	test   eax,eax
c0016e21:	74 17                	je     c0016e3a <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0016e23:	83 ec 0c             	sub    esp,0xc
c0016e26:	68 e9 5d 02 c0       	push   0xc0025de9
c0016e2b:	e8 95 61 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0016e30:	83 c4 10             	add    esp,0x10
c0016e33:	31 c0                	xor    eax,eax
c0016e35:	e9 87 00 00 00       	jmp    c0016ec1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0016e3a:	83 ec 0c             	sub    esp,0xc
c0016e3d:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0016e40:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0016e43:	50                   	push   eax
c0016e44:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016e48:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016e4c:	56                   	push   esi
c0016e4d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0016e51:	e8 b3 fb ff ff       	call   c0016a09 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0016e56:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016e5a:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0016e5e:	83 c4 20             	add    esp,0x20
c0016e61:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0016e65:	73 04                	jae    c0016e6b <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0016e67:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016e6b:	45                   	inc    ebp
c0016e6c:	e9 76 ff ff ff       	jmp    c0016de7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0016e71:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0016e75:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016e79:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016e7d:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0016e83:	83 ec 0c             	sub    esp,0xc
c0016e86:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0016e8c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016e91:	05 00 10 00 00       	add    eax,0x1000
c0016e96:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016e99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016e9d:	e8 25 2e ff ff       	call   c0009cc7 <free>
c0016ea2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016ea5:	e8 1d 2e ff ff       	call   c0009cc7 <free>
c0016eaa:	58                   	pop    eax
c0016eab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016eaf:	e8 13 2e ff ff       	call   c0009cc7 <free>
c0016eb4:	89 34 24             	mov    DWORD PTR [esp],esi
c0016eb7:	e8 ac 67 ff ff       	call   c000d668 <File::close()>
c0016ebc:	83 c4 10             	add    esp,0x10
c0016ebf:	b0 01                	mov    al,0x1
c0016ec1:	83 c4 3c             	add    esp,0x3c
c0016ec4:	5b                   	pop    ebx
c0016ec5:	5e                   	pop    esi
c0016ec6:	5f                   	pop    edi
c0016ec7:	5d                   	pop    ebp
c0016ec8:	c3                   	ret    

c0016ec9 <Thr::runtimeReferenceHelper()>:
c0016ec9:	83 ec 18             	sub    esp,0x18
c0016ecc:	68 f1 5d 02 c0       	push   0xc0025df1
c0016ed1:	e8 ef 60 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0016ed6:	fa                   	cli    
c0016ed7:	83 c4 10             	add    esp,0x10
c0016eda:	eb fe                	jmp    c0016eda <Thr::runtimeReferenceHelper()+0x11>

c0016edc <Thr::getAddressOfKernelSymbol(char const*)>:
c0016edc:	57                   	push   edi
c0016edd:	56                   	push   esi
c0016ede:	53                   	push   ebx
c0016edf:	31 db                	xor    ebx,ebx
c0016ee1:	39 1d 00 93 02 c0    	cmp    DWORD PTR ds:0xc0029300,ebx
c0016ee7:	7e 3c                	jle    c0016f25 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0016ee9:	8b 34 9d 80 92 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd6d80]
c0016ef0:	31 ff                	xor    edi,edi
c0016ef2:	39 3c 9d 80 91 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd6e80],edi
c0016ef9:	7e 27                	jle    c0016f22 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0016efb:	50                   	push   eax
c0016efc:	50                   	push   eax
c0016efd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016f01:	8b 06                	mov    eax,DWORD PTR [esi]
c0016f03:	03 04 9d 00 92 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd6e00]
c0016f0a:	50                   	push   eax
c0016f0b:	e8 b4 98 fe ff       	call   c00007c4 <strcmp>
c0016f10:	83 c4 10             	add    esp,0x10
c0016f13:	85 c0                	test   eax,eax
c0016f15:	75 05                	jne    c0016f1c <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0016f17:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0016f1a:	eb 0b                	jmp    c0016f27 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0016f1c:	83 c6 10             	add    esi,0x10
c0016f1f:	47                   	inc    edi
c0016f20:	eb d0                	jmp    c0016ef2 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0016f22:	43                   	inc    ebx
c0016f23:	eb bc                	jmp    c0016ee1 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0016f25:	31 c0                	xor    eax,eax
c0016f27:	5b                   	pop    ebx
c0016f28:	5e                   	pop    esi
c0016f29:	5f                   	pop    edi
c0016f2a:	c3                   	ret    

c0016f2b <Thr::loadKernelSymbolTable(char const*)>:
c0016f2b:	55                   	push   ebp
c0016f2c:	57                   	push   edi
c0016f2d:	56                   	push   esi
c0016f2e:	53                   	push   ebx
c0016f2f:	83 ec 68             	sub    esp,0x68
c0016f32:	8b 35 50 93 02 c0    	mov    esi,DWORD PTR ds:0xc0029350
c0016f38:	68 14 01 00 00       	push   0x114
c0016f3d:	e8 75 2d ff ff       	call   c0009cb7 <malloc>
c0016f42:	83 c4 0c             	add    esp,0xc
c0016f45:	89 c3                	mov    ebx,eax
c0016f47:	56                   	push   esi
c0016f48:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0016f4c:	50                   	push   eax
c0016f4d:	e8 de 65 ff ff       	call   c000d530 <File::File(char const*, Process*)>
c0016f52:	5e                   	pop    esi
c0016f53:	5f                   	pop    edi
c0016f54:	6a 01                	push   0x1
c0016f56:	53                   	push   ebx
c0016f57:	e8 ae 66 ff ff       	call   c000d60a <File::open(FileOpenMode)>
c0016f5c:	83 c4 10             	add    esp,0x10
c0016f5f:	85 c0                	test   eax,eax
c0016f61:	74 0a                	je     c0016f6d <Thr::loadKernelSymbolTable(char const*)+0x42>
c0016f63:	83 ec 0c             	sub    esp,0xc
c0016f66:	68 13 5e 02 c0       	push   0xc0025e13
c0016f6b:	eb 34                	jmp    c0016fa1 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0016f6d:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0016f75:	83 ec 0c             	sub    esp,0xc
c0016f78:	6a 34                	push   0x34
c0016f7a:	e8 38 2d ff ff       	call   c0009cb7 <malloc>
c0016f7f:	59                   	pop    ecx
c0016f80:	89 c7                	mov    edi,eax
c0016f82:	8d 74 24 34          	lea    esi,[esp+0x34]
c0016f86:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f88:	56                   	push   esi
c0016f89:	57                   	push   edi
c0016f8a:	6a 00                	push   0x0
c0016f8c:	6a 34                	push   0x34
c0016f8e:	53                   	push   ebx
c0016f8f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016f92:	83 c4 20             	add    esp,0x20
c0016f95:	85 c0                	test   eax,eax
c0016f97:	74 17                	je     c0016fb0 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0016f99:	83 ec 0c             	sub    esp,0xc
c0016f9c:	68 2a 5e 02 c0       	push   0xc0025e2a
c0016fa1:	e8 77 dd ff ff       	call   c0014d1d <Krnl::panic(char const*)>
c0016fa6:	83 c4 10             	add    esp,0x10
c0016fa9:	31 c0                	xor    eax,eax
c0016fab:	e9 31 02 00 00       	jmp    c00171e1 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0016fb0:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0016fb6:	75 e1                	jne    c0016f99 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0016fb8:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0016fbb:	85 c0                	test   eax,eax
c0016fbd:	74 da                	je     c0016f99 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0016fbf:	52                   	push   edx
c0016fc0:	31 d2                	xor    edx,edx
c0016fc2:	52                   	push   edx
c0016fc3:	50                   	push   eax
c0016fc4:	53                   	push   ebx
c0016fc5:	e8 fe 66 ff ff       	call   c000d6c8 <File::seek(unsigned long long)>
c0016fca:	83 c4 10             	add    esp,0x10
c0016fcd:	85 c0                	test   eax,eax
c0016fcf:	75 c8                	jne    c0016f99 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0016fd1:	83 ec 0c             	sub    esp,0xc
c0016fd4:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016fd8:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016fdc:	31 ed                	xor    ebp,ebp
c0016fde:	0f af c2             	imul   eax,edx
c0016fe1:	50                   	push   eax
c0016fe2:	e8 d0 2c ff ff       	call   c0009cb7 <malloc>
c0016fe7:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0016fe9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016fed:	89 34 24             	mov    DWORD PTR [esp],esi
c0016ff0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016ff4:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016ff8:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016ffc:	0f af c2             	imul   eax,edx
c0016fff:	99                   	cdq    
c0017000:	52                   	push   edx
c0017001:	50                   	push   eax
c0017002:	53                   	push   ebx
c0017003:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017006:	83 c4 20             	add    esp,0x20
c0017009:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017011:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0017019:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017021:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017029:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001702d:	0f 86 aa 00 00 00    	jbe    c00170dd <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0017033:	0f b7 f5             	movzx  esi,bp
c0017036:	6b f6 28             	imul   esi,esi,0x28
c0017039:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001703d:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017044:	50                   	push   eax
c0017045:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017049:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001704d:	8b 16                	mov    edx,DWORD PTR [esi]
c001704f:	6b c0 28             	imul   eax,eax,0x28
c0017052:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0017056:	89 d0                	mov    eax,edx
c0017058:	31 d2                	xor    edx,edx
c001705a:	52                   	push   edx
c001705b:	50                   	push   eax
c001705c:	53                   	push   ebx
c001705d:	e8 66 66 ff ff       	call   c000d6c8 <File::seek(unsigned long long)>
c0017062:	83 c4 0c             	add    esp,0xc
c0017065:	6a 20                	push   0x20
c0017067:	6a 00                	push   0x0
c0017069:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001706d:	52                   	push   edx
c001706e:	e8 09 96 fe ff       	call   c000067c <memset>
c0017073:	58                   	pop    eax
c0017074:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017076:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001707a:	51                   	push   ecx
c001707b:	8d 54 24 40          	lea    edx,[esp+0x40]
c001707f:	52                   	push   edx
c0017080:	6a 00                	push   0x0
c0017082:	6a 1f                	push   0x1f
c0017084:	53                   	push   ebx
c0017085:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017088:	83 c4 18             	add    esp,0x18
c001708b:	68 41 5e 02 c0       	push   0xc0025e41
c0017090:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0017094:	52                   	push   edx
c0017095:	e8 2a 97 fe ff       	call   c00007c4 <strcmp>
c001709a:	83 c4 10             	add    esp,0x10
c001709d:	85 c0                	test   eax,eax
c001709f:	75 0f                	jne    c00170b0 <Thr::loadKernelSymbolTable(char const*)+0x185>
c00170a1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00170a4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00170a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00170ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00170b0:	50                   	push   eax
c00170b1:	50                   	push   eax
c00170b2:	68 49 5e 02 c0       	push   0xc0025e49
c00170b7:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00170bb:	50                   	push   eax
c00170bc:	e8 03 97 fe ff       	call   c00007c4 <strcmp>
c00170c1:	83 c4 10             	add    esp,0x10
c00170c4:	85 c0                	test   eax,eax
c00170c6:	75 0f                	jne    c00170d7 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c00170c8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00170cb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00170cf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00170d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00170d7:	45                   	inc    ebp
c00170d8:	e9 4c ff ff ff       	jmp    c0017029 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c00170dd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00170e2:	75 10                	jne    c00170f4 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c00170e4:	83 ec 0c             	sub    esp,0xc
c00170e7:	68 51 5e 02 c0       	push   0xc0025e51
c00170ec:	e8 2c dc ff ff       	call   c0014d1d <Krnl::panic(char const*)>
c00170f1:	83 c4 10             	add    esp,0x10
c00170f4:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00170f9:	75 10                	jne    c001710b <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00170fb:	83 ec 0c             	sub    esp,0xc
c00170fe:	68 51 5e 02 c0       	push   0xc0025e51
c0017103:	e8 15 dc ff ff       	call   c0014d1d <Krnl::panic(char const*)>
c0017108:	83 c4 10             	add    esp,0x10
c001710b:	31 d2                	xor    edx,edx
c001710d:	50                   	push   eax
c001710e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017112:	52                   	push   edx
c0017113:	50                   	push   eax
c0017114:	53                   	push   ebx
c0017115:	e8 ae 65 ff ff       	call   c000d6c8 <File::seek(unsigned long long)>
c001711a:	5a                   	pop    edx
c001711b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001711f:	e8 93 2b ff ff       	call   c0009cb7 <malloc>
c0017124:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017128:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001712c:	31 c9                	xor    ecx,ecx
c001712e:	5e                   	pop    esi
c001712f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017131:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0017135:	55                   	push   ebp
c0017136:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001713a:	51                   	push   ecx
c001713b:	52                   	push   edx
c001713c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0017140:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0017144:	53                   	push   ebx
c0017145:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017148:	83 c4 14             	add    esp,0x14
c001714b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001714f:	e8 63 2b ff ff       	call   c0009cb7 <malloc>
c0017154:	89 c6                	mov    esi,eax
c0017156:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017158:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001715b:	56                   	push   esi
c001715c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017160:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017164:	51                   	push   ecx
c0017165:	52                   	push   edx
c0017166:	53                   	push   ebx
c0017167:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001716a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001716e:	8b 15 00 93 02 c0    	mov    edx,DWORD PTR ds:0xc0029300
c0017174:	83 c4 1c             	add    esp,0x1c
c0017177:	c1 e8 04             	shr    eax,0x4
c001717a:	89 04 95 80 91 02 c0 	mov    DWORD PTR [edx*4-0x3ffd6e80],eax
c0017181:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017185:	31 d2                	xor    edx,edx
c0017187:	52                   	push   edx
c0017188:	50                   	push   eax
c0017189:	53                   	push   ebx
c001718a:	e8 39 65 ff ff       	call   c000d6c8 <File::seek(unsigned long long)>
c001718f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0017191:	31 d2                	xor    edx,edx
c0017193:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017196:	56                   	push   esi
c0017197:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001719b:	52                   	push   edx
c001719c:	50                   	push   eax
c001719d:	53                   	push   ebx
c001719e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00171a1:	83 c4 14             	add    esp,0x14
c00171a4:	53                   	push   ebx
c00171a5:	e8 be 64 ff ff       	call   c000d668 <File::close()>
c00171aa:	5d                   	pop    ebp
c00171ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00171af:	e8 13 2b ff ff       	call   c0009cc7 <free>
c00171b4:	89 3c 24             	mov    DWORD PTR [esp],edi
c00171b7:	e8 0b 2b ff ff       	call   c0009cc7 <free>
c00171bc:	a1 00 93 02 c0       	mov    eax,ds:0xc0029300
c00171c1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00171c5:	8d 50 01             	lea    edx,[eax+0x1]
c00171c8:	89 0c 85 80 92 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6d80],ecx
c00171cf:	89 34 85 00 92 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6e00],esi
c00171d6:	89 15 00 93 02 c0    	mov    DWORD PTR ds:0xc0029300,edx
c00171dc:	83 c4 10             	add    esp,0x10
c00171df:	b0 01                	mov    al,0x1
c00171e1:	83 c4 5c             	add    esp,0x5c
c00171e4:	5b                   	pop    ebx
c00171e5:	5e                   	pop    esi
c00171e6:	5f                   	pop    edi
c00171e7:	5d                   	pop    ebp
c00171e8:	c3                   	ret    

c00171e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c00171e9:	55                   	push   ebp
c00171ea:	57                   	push   edi
c00171eb:	56                   	push   esi
c00171ec:	53                   	push   ebx
c00171ed:	81 ec 68 03 00 00    	sub    esp,0x368
c00171f3:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00171fa:	8b 1d 50 93 02 c0    	mov    ebx,DWORD PTR ds:0xc0029350
c0017200:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0017204:	68 14 01 00 00       	push   0x114
c0017209:	e8 a9 2a ff ff       	call   c0009cb7 <malloc>
c001720e:	83 c4 0c             	add    esp,0xc
c0017211:	89 c5                	mov    ebp,eax
c0017213:	53                   	push   ebx
c0017214:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001721b:	50                   	push   eax
c001721c:	e8 0f 63 ff ff       	call   c000d530 <File::File(char const*, Process*)>
c0017221:	5e                   	pop    esi
c0017222:	5f                   	pop    edi
c0017223:	6a 01                	push   0x1
c0017225:	55                   	push   ebp
c0017226:	e8 df 63 ff ff       	call   c000d60a <File::open(FileOpenMode)>
c001722b:	83 c4 10             	add    esp,0x10
c001722e:	85 c0                	test   eax,eax
c0017230:	0f 85 a7 06 00 00    	jne    c00178dd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017236:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001723e:	83 ec 0c             	sub    esp,0xc
c0017241:	6a 34                	push   0x34
c0017243:	e8 6f 2a ff ff       	call   c0009cb7 <malloc>
c0017248:	5b                   	pop    ebx
c0017249:	89 c7                	mov    edi,eax
c001724b:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001724f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017252:	53                   	push   ebx
c0017253:	57                   	push   edi
c0017254:	6a 00                	push   0x0
c0017256:	6a 34                	push   0x34
c0017258:	55                   	push   ebp
c0017259:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001725c:	83 c4 20             	add    esp,0x20
c001725f:	85 c0                	test   eax,eax
c0017261:	0f 85 76 06 00 00    	jne    c00178dd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017267:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001726d:	0f 85 6a 06 00 00    	jne    c00178dd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017273:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0017276:	85 c0                	test   eax,eax
c0017278:	0f 84 5f 06 00 00    	je     c00178dd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001727e:	31 d2                	xor    edx,edx
c0017280:	51                   	push   ecx
c0017281:	52                   	push   edx
c0017282:	50                   	push   eax
c0017283:	55                   	push   ebp
c0017284:	e8 3f 64 ff ff       	call   c000d6c8 <File::seek(unsigned long long)>
c0017289:	83 c4 10             	add    esp,0x10
c001728c:	85 c0                	test   eax,eax
c001728e:	0f 85 49 06 00 00    	jne    c00178dd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017294:	83 ec 0c             	sub    esp,0xc
c0017297:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001729a:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001729e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00172a2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00172a6:	0f af c2             	imul   eax,edx
c00172a9:	50                   	push   eax
c00172aa:	e8 08 2a ff ff       	call   c0009cb7 <malloc>
c00172af:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00172b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00172b6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00172b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00172bd:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00172c1:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00172c5:	0f af c2             	imul   eax,edx
c00172c8:	99                   	cdq    
c00172c9:	52                   	push   edx
c00172ca:	50                   	push   eax
c00172cb:	55                   	push   ebp
c00172cc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00172cf:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c00172d2:	83 c4 20             	add    esp,0x20
c00172d5:	85 c0                	test   eax,eax
c00172d7:	0f 84 00 06 00 00    	je     c00178dd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00172dd:	52                   	push   edx
c00172de:	31 d2                	xor    edx,edx
c00172e0:	52                   	push   edx
c00172e1:	50                   	push   eax
c00172e2:	55                   	push   ebp
c00172e3:	e8 e0 63 ff ff       	call   c000d6c8 <File::seek(unsigned long long)>
c00172e8:	83 c4 10             	add    esp,0x10
c00172eb:	85 c0                	test   eax,eax
c00172ed:	0f 85 ea 05 00 00    	jne    c00178dd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00172f3:	83 ec 0c             	sub    esp,0xc
c00172f6:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00172fa:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00172fe:	31 f6                	xor    esi,esi
c0017300:	0f af c2             	imul   eax,edx
c0017303:	50                   	push   eax
c0017304:	e8 ae 29 ff ff       	call   c0009cb7 <malloc>
c0017309:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001730c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017310:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017313:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017317:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001731b:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001731f:	0f af c2             	imul   eax,edx
c0017322:	99                   	cdq    
c0017323:	52                   	push   edx
c0017324:	50                   	push   eax
c0017325:	55                   	push   ebp
c0017326:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017329:	83 c4 20             	add    esp,0x20
c001732c:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0017330:	0f 86 8a 00 00 00    	jbe    c00173c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0017336:	0f b7 de             	movzx  ebx,si
c0017339:	c1 e3 05             	shl    ebx,0x5
c001733c:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0017340:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0017343:	75 75                	jne    c00173ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0017345:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017348:	31 d2                	xor    edx,edx
c001734a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001734e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017351:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017355:	50                   	push   eax
c0017356:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0017359:	52                   	push   edx
c001735a:	50                   	push   eax
c001735b:	55                   	push   ebp
c001735c:	e8 67 63 ff ff       	call   c000d6c8 <File::seek(unsigned long long)>
c0017361:	83 c4 10             	add    esp,0x10
c0017364:	85 c0                	test   eax,eax
c0017366:	0f 85 71 05 00 00    	jne    c00178dd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001736c:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0017373:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017376:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001737a:	31 d2                	xor    edx,edx
c001737c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0017380:	83 ec 0c             	sub    esp,0xc
c0017383:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017387:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001738e:	50                   	push   eax
c001738f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017393:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017397:	52                   	push   edx
c0017398:	50                   	push   eax
c0017399:	55                   	push   ebp
c001739a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001739d:	83 c4 1c             	add    esp,0x1c
c00173a0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00173a3:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c00173a6:	50                   	push   eax
c00173a7:	6a 00                	push   0x0
c00173a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00173ad:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00173b1:	50                   	push   eax
c00173b2:	e8 c5 92 fe ff       	call   c000067c <memset>
c00173b7:	83 c4 10             	add    esp,0x10
c00173ba:	46                   	inc    esi
c00173bb:	e9 6c ff ff ff       	jmp    c001732c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c00173c0:	53                   	push   ebx
c00173c1:	31 db                	xor    ebx,ebx
c00173c3:	68 00 01 00 00       	push   0x100
c00173c8:	6a 00                	push   0x0
c00173ca:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00173ce:	50                   	push   eax
c00173cf:	e8 a8 92 fe ff       	call   c000067c <memset>
c00173d4:	83 c4 0c             	add    esp,0xc
c00173d7:	68 00 01 00 00       	push   0x100
c00173dc:	6a 00                	push   0x0
c00173de:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c00173e5:	50                   	push   eax
c00173e6:	e8 91 92 fe ff       	call   c000067c <memset>
c00173eb:	83 c4 10             	add    esp,0x10
c00173ee:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00173f6:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00173fe:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0017406:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001740e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017416:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001741a:	0f 86 30 01 00 00    	jbe    c0017550 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0017420:	0f b7 f3             	movzx  esi,bx
c0017423:	6b f6 28             	imul   esi,esi,0x28
c0017426:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001742a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001742d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017431:	52                   	push   edx
c0017432:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017436:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001743a:	8b 06                	mov    eax,DWORD PTR [esi]
c001743c:	6b d2 28             	imul   edx,edx,0x28
c001743f:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0017443:	31 d2                	xor    edx,edx
c0017445:	52                   	push   edx
c0017446:	50                   	push   eax
c0017447:	55                   	push   ebp
c0017448:	e8 7b 62 ff ff       	call   c000d6c8 <File::seek(unsigned long long)>
c001744d:	83 c4 0c             	add    esp,0xc
c0017450:	6a 20                	push   0x20
c0017452:	6a 00                	push   0x0
c0017454:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001745b:	51                   	push   ecx
c001745c:	e8 1b 92 fe ff       	call   c000067c <memset>
c0017461:	59                   	pop    ecx
c0017462:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017465:	8d 54 24 58          	lea    edx,[esp+0x58]
c0017469:	52                   	push   edx
c001746a:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0017471:	51                   	push   ecx
c0017472:	6a 00                	push   0x0
c0017474:	6a 1f                	push   0x1f
c0017476:	55                   	push   ebp
c0017477:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001747a:	83 c4 1c             	add    esp,0x1c
c001747d:	6a 09                	push   0x9
c001747f:	68 6b 5e 02 c0       	push   0xc0025e6b
c0017484:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001748b:	51                   	push   ecx
c001748c:	e8 e7 90 fe ff       	call   c0000578 <memcmp>
c0017491:	83 c4 10             	add    esp,0x10
c0017494:	85 c0                	test   eax,eax
c0017496:	75 21                	jne    c00174b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0017498:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001749c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00174a0:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00174a4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00174a8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00174ab:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00174b2:	89 d0                	mov    eax,edx
c00174b4:	40                   	inc    eax
c00174b5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00174b9:	50                   	push   eax
c00174ba:	6a 09                	push   0x9
c00174bc:	68 75 5e 02 c0       	push   0xc0025e75
c00174c1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00174c8:	50                   	push   eax
c00174c9:	e8 aa 90 fe ff       	call   c0000578 <memcmp>
c00174ce:	83 c4 10             	add    esp,0x10
c00174d1:	85 c0                	test   eax,eax
c00174d3:	75 21                	jne    c00174f6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c00174d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00174d9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00174dd:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00174e1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00174e5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00174e8:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00174ef:	89 d0                	mov    eax,edx
c00174f1:	40                   	inc    eax
c00174f2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00174f6:	50                   	push   eax
c00174f7:	50                   	push   eax
c00174f8:	68 41 5e 02 c0       	push   0xc0025e41
c00174fd:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017504:	50                   	push   eax
c0017505:	e8 ba 92 fe ff       	call   c00007c4 <strcmp>
c001750a:	83 c4 10             	add    esp,0x10
c001750d:	85 c0                	test   eax,eax
c001750f:	75 0f                	jne    c0017520 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0017511:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017514:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017518:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001751c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017520:	50                   	push   eax
c0017521:	50                   	push   eax
c0017522:	68 49 5e 02 c0       	push   0xc0025e49
c0017527:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001752e:	50                   	push   eax
c001752f:	e8 90 92 fe ff       	call   c00007c4 <strcmp>
c0017534:	83 c4 10             	add    esp,0x10
c0017537:	85 c0                	test   eax,eax
c0017539:	75 0f                	jne    c001754a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001753b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001753e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017542:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017546:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001754a:	43                   	inc    ebx
c001754b:	e9 c6 fe ff ff       	jmp    c0017416 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0017550:	31 d2                	xor    edx,edx
c0017552:	50                   	push   eax
c0017553:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017557:	52                   	push   edx
c0017558:	50                   	push   eax
c0017559:	55                   	push   ebp
c001755a:	e8 69 61 ff ff       	call   c000d6c8 <File::seek(unsigned long long)>
c001755f:	58                   	pop    eax
c0017560:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017564:	e8 4e 27 ff ff       	call   c0009cb7 <malloc>
c0017569:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001756c:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017570:	31 d2                	xor    edx,edx
c0017572:	58                   	pop    eax
c0017573:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0017577:	53                   	push   ebx
c0017578:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001757c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017580:	52                   	push   edx
c0017581:	50                   	push   eax
c0017582:	55                   	push   ebp
c0017583:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017586:	83 c4 14             	add    esp,0x14
c0017589:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001758d:	e8 25 27 ff ff       	call   c0009cb7 <malloc>
c0017592:	31 d2                	xor    edx,edx
c0017594:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017598:	83 c4 0c             	add    esp,0xc
c001759b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001759f:	52                   	push   edx
c00175a0:	50                   	push   eax
c00175a1:	55                   	push   ebp
c00175a2:	e8 21 61 ff ff       	call   c000d6c8 <File::seek(unsigned long long)>
c00175a7:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00175aa:	31 d2                	xor    edx,edx
c00175ac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00175af:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00175b3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00175b7:	52                   	push   edx
c00175b8:	50                   	push   eax
c00175b9:	55                   	push   ebp
c00175ba:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00175bd:	83 c4 20             	add    esp,0x20
c00175c0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00175c8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00175cc:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c00175d0:	0f 84 0b 03 00 00    	je     c00178e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c00175d6:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c00175dd:	31 d2                	xor    edx,edx
c00175df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00175e3:	c1 e8 03             	shr    eax,0x3
c00175e6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00175ea:	51                   	push   ecx
c00175eb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00175ef:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00175f3:	52                   	push   edx
c00175f4:	50                   	push   eax
c00175f5:	55                   	push   ebp
c00175f6:	e8 cd 60 ff ff       	call   c000d6c8 <File::seek(unsigned long long)>
c00175fb:	5b                   	pop    ebx
c00175fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017600:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0017607:	e8 ab 26 ff ff       	call   c0009cb7 <malloc>
c001760c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001760f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017613:	31 d2                	xor    edx,edx
c0017615:	5e                   	pop    esi
c0017616:	8d 44 24 58          	lea    eax,[esp+0x58]
c001761a:	50                   	push   eax
c001761b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001761f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017623:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001762a:	52                   	push   edx
c001762b:	50                   	push   eax
c001762c:	55                   	push   ebp
c001762d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017630:	83 c4 20             	add    esp,0x20
c0017633:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001763b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001763f:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c0017643:	0f 8d 7c 02 00 00    	jge    c00178c5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0017649:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001764d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017651:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0017656:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0017659:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001765d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017661:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0017665:	89 d8                	mov    eax,ebx
c0017667:	c1 e8 08             	shr    eax,0x8
c001766a:	89 c6                	mov    esi,eax
c001766c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017670:	c1 e6 04             	shl    esi,0x4
c0017673:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0017677:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001767a:	85 d2                	test   edx,edx
c001767c:	0f 85 bf 00 00 00    	jne    c0017741 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0017682:	83 ec 0c             	sub    esp,0xc
c0017685:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017689:	03 06                	add    eax,DWORD PTR [esi]
c001768b:	50                   	push   eax
c001768c:	e8 4b f8 ff ff       	call   c0016edc <Thr::getAddressOfKernelSymbol(char const*)>
c0017691:	83 c4 10             	add    esp,0x10
c0017694:	89 c2                	mov    edx,eax
c0017696:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001769b:	85 c0                	test   eax,eax
c001769d:	0f 85 9e 00 00 00    	jne    c0017741 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c00176a3:	83 ec 0c             	sub    esp,0xc
c00176a6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00176aa:	03 06                	add    eax,DWORD PTR [esi]
c00176ac:	50                   	push   eax
c00176ad:	e8 56 12 ff ff       	call   c0008908 <Krnl::resolveCompatibilitySymbol(char*)>
c00176b2:	83 c4 10             	add    esp,0x10
c00176b5:	89 c2                	mov    edx,eax
c00176b7:	85 c0                	test   eax,eax
c00176b9:	0f 85 82 00 00 00    	jne    c0017741 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c00176bf:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00176c3:	50                   	push   eax
c00176c4:	50                   	push   eax
c00176c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00176c9:	03 06                	add    eax,DWORD PTR [esi]
c00176cb:	50                   	push   eax
c00176cc:	68 7f 5e 02 c0       	push   0xc0025e7f
c00176d1:	e8 ef 58 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00176d6:	58                   	pop    eax
c00176d7:	5a                   	pop    edx
c00176d8:	68 99 5e 02 c0       	push   0xc0025e99
c00176dd:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00176e4:	50                   	push   eax
c00176e5:	e8 4e 90 fe ff       	call   c0000738 <strcpy>
c00176ea:	59                   	pop    ecx
c00176eb:	58                   	pop    eax
c00176ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00176f0:	03 06                	add    eax,DWORD PTR [esi]
c00176f2:	50                   	push   eax
c00176f3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00176fa:	50                   	push   eax
c00176fb:	e8 78 91 fe ff       	call   c0000878 <strcat>
c0017700:	58                   	pop    eax
c0017701:	5a                   	pop    edx
c0017702:	68 2f 5f 02 c0       	push   0xc0025f2f
c0017707:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001770e:	50                   	push   eax
c001770f:	e8 64 91 fe ff       	call   c0000878 <strcat>
c0017714:	83 c4 10             	add    esp,0x10
c0017717:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001771c:	0f 84 5d 01 00 00    	je     c001787f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0017722:	83 ec 0c             	sub    esp,0xc
c0017725:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001772c:	50                   	push   eax
c001772d:	e8 eb d5 ff ff       	call   c0014d1d <Krnl::panic(char const*)>
c0017732:	83 c4 10             	add    esp,0x10
c0017735:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017739:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001773d:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0017741:	80 fb 01             	cmp    bl,0x1
c0017744:	0f 85 88 00 00 00    	jne    c00177d2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001774a:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0017751:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0017755:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0017759:	01 ce                	add    esi,ecx
c001775b:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0017761:	0f 94 c0             	sete   al
c0017764:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001776a:	0f 94 c3             	sete   bl
c001776d:	09 c3                	or     ebx,eax
c001776f:	8b 06                	mov    eax,DWORD PTR [esi]
c0017771:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0017776:	74 41                	je     c00177b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0017778:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001777b:	84 db                	test   bl,bl
c001777d:	75 15                	jne    c0017794 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001777f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017783:	66 83 f8 0c          	cmp    ax,0xc
c0017787:	76 05                	jbe    c001778e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0017789:	b8 0c 00 00 00       	mov    eax,0xc
c001778e:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0017792:	76 37                	jbe    c00177cb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017794:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0017798:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001779d:	0f 84 dc 00 00 00    	je     c001787f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00177a3:	83 ec 0c             	sub    esp,0xc
c00177a6:	68 b0 5e 02 c0       	push   0xc0025eb0
c00177ab:	e8 6d d5 ff ff       	call   c0014d1d <Krnl::panic(char const*)>
c00177b0:	83 c4 10             	add    esp,0x10
c00177b3:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00177b7:	eb 12                	jmp    c00177cb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c00177b9:	01 c1                	add    ecx,eax
c00177bb:	84 db                	test   bl,bl
c00177bd:	75 0c                	jne    c00177cb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c00177bf:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00177c3:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c00177c7:	77 02                	ja     c00177cb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c00177c9:	01 d1                	add    ecx,edx
c00177cb:	89 0e                	mov    DWORD PTR [esi],ecx
c00177cd:	e9 ea 00 00 00       	jmp    c00178bc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c00177d2:	80 fb 02             	cmp    bl,0x2
c00177d5:	75 7c                	jne    c0017853 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c00177d7:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c00177de:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c00177e2:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c00177e6:	81 fb 01 04 00 00    	cmp    ebx,0x401
c00177ec:	74 20                	je     c001780e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c00177ee:	81 fb 01 01 00 00    	cmp    ebx,0x101
c00177f4:	74 18                	je     c001780e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c00177f6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00177fa:	b9 0a 00 00 00       	mov    ecx,0xa
c00177ff:	66 83 f8 0e          	cmp    ax,0xe
c0017803:	77 03                	ja     c0017808 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0017805:	8d 48 fc             	lea    ecx,[eax-0x4]
c0017808:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001780c:	76 1f                	jbe    c001782d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001780e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0017812:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017817:	74 66                	je     c001787f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0017819:	83 ec 0c             	sub    esp,0xc
c001781c:	68 cc 5e 02 c0       	push   0xc0025ecc
c0017821:	e8 f7 d4 ff ff       	call   c0014d1d <Krnl::panic(char const*)>
c0017826:	83 c4 10             	add    esp,0x10
c0017829:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001782d:	8b 06                	mov    eax,DWORD PTR [esi]
c001782f:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0017834:	74 13                	je     c0017849 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0017836:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001783a:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0017841:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0017845:	01 c8                	add    eax,ecx
c0017847:	eb 04                	jmp    c001784d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0017849:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001784d:	01 c2                	add    edx,eax
c001784f:	89 16                	mov    DWORD PTR [esi],edx
c0017851:	eb 69                	jmp    c00178bc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0017853:	0f b6 db             	movzx  ebx,bl
c0017856:	50                   	push   eax
c0017857:	50                   	push   eax
c0017858:	53                   	push   ebx
c0017859:	68 e8 5e 02 c0       	push   0xc0025ee8
c001785e:	e8 62 57 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0017863:	83 c4 10             	add    esp,0x10
c0017866:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001786b:	74 12                	je     c001787f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001786d:	83 ec 0c             	sub    esp,0xc
c0017870:	68 f3 5e 02 c0       	push   0xc0025ef3
c0017875:	e8 a3 d4 ff ff       	call   c0014d1d <Krnl::panic(char const*)>
c001787a:	83 c4 10             	add    esp,0x10
c001787d:	eb 3d                	jmp    c00178bc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001787f:	83 ec 0c             	sub    esp,0xc
c0017882:	55                   	push   ebp
c0017883:	e8 e0 5d ff ff       	call   c000d668 <File::close()>
c0017888:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001788b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001788e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017891:	59                   	pop    ecx
c0017892:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017896:	e8 2c 24 ff ff       	call   c0009cc7 <free>
c001789b:	5b                   	pop    ebx
c001789c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00178a0:	e8 22 24 ff ff       	call   c0009cc7 <free>
c00178a5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00178a8:	e8 1a 24 ff ff       	call   c0009cc7 <free>
c00178ad:	5e                   	pop    esi
c00178ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00178b2:	e8 10 24 ff ff       	call   c0009cc7 <free>
c00178b7:	83 c4 10             	add    esp,0x10
c00178ba:	eb 21                	jmp    c00178dd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00178bc:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00178c0:	e9 76 fd ff ff       	jmp    c001763b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c00178c5:	83 ec 0c             	sub    esp,0xc
c00178c8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00178cc:	e8 f6 23 ff ff       	call   c0009cc7 <free>
c00178d1:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00178d5:	83 c4 10             	add    esp,0x10
c00178d8:	e9 eb fc ff ff       	jmp    c00175c8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c00178dd:	31 c0                	xor    eax,eax
c00178df:	eb 33                	jmp    c0017914 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c00178e1:	83 ec 0c             	sub    esp,0xc
c00178e4:	55                   	push   ebp
c00178e5:	e8 7e 5d ff ff       	call   c000d668 <File::close()>
c00178ea:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00178ed:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00178f0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00178f3:	58                   	pop    eax
c00178f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00178f8:	e8 ca 23 ff ff       	call   c0009cc7 <free>
c00178fd:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017900:	e8 c2 23 ff ff       	call   c0009cc7 <free>
c0017905:	5a                   	pop    edx
c0017906:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001790a:	e8 b8 23 ff ff       	call   c0009cc7 <free>
c001790f:	83 c4 10             	add    esp,0x10
c0017912:	b0 01                	mov    al,0x1
c0017914:	81 c4 5c 03 00 00    	add    esp,0x35c
c001791a:	5b                   	pop    ebx
c001791b:	5e                   	pop    esi
c001791c:	5f                   	pop    edi
c001791d:	5d                   	pop    ebp
c001791e:	c3                   	ret    

c001791f <Thr::getDriverBaseFromAddress(unsigned long)>:
c001791f:	56                   	push   esi
c0017920:	31 d2                	xor    edx,edx
c0017922:	53                   	push   ebx
c0017923:	8b 1d 60 8b 02 c0    	mov    ebx,DWORD PTR ds:0xc0028b60
c0017929:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001792d:	39 d3                	cmp    ebx,edx
c001792f:	7e 1b                	jle    c001794c <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0017931:	8b 04 95 80 8d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7280]
c0017938:	39 c8                	cmp    eax,ecx
c001793a:	77 0d                	ja     c0017949 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001793c:	8b 34 95 80 8b 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd7480]
c0017943:	01 c6                	add    esi,eax
c0017945:	39 ce                	cmp    esi,ecx
c0017947:	77 05                	ja     c001794e <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0017949:	42                   	inc    edx
c001794a:	eb e1                	jmp    c001792d <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001794c:	31 c0                	xor    eax,eax
c001794e:	5b                   	pop    ebx
c001794f:	5e                   	pop    esi
c0017950:	c3                   	ret    

c0017951 <Thr::getDriverNameFromAddress(unsigned long)>:
c0017951:	53                   	push   ebx
c0017952:	31 c0                	xor    eax,eax
c0017954:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017958:	8b 1d 60 8b 02 c0    	mov    ebx,DWORD PTR ds:0xc0028b60
c001795e:	39 c3                	cmp    ebx,eax
c0017960:	7e 22                	jle    c0017984 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0017962:	8b 14 85 80 8d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7280]
c0017969:	39 ca                	cmp    edx,ecx
c001796b:	77 14                	ja     c0017981 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001796d:	03 14 85 80 8b 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd7480]
c0017974:	39 ca                	cmp    edx,ecx
c0017976:	76 09                	jbe    c0017981 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0017978:	8b 04 85 80 8f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7080]
c001797f:	eb 05                	jmp    c0017986 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0017981:	40                   	inc    eax
c0017982:	eb da                	jmp    c001795e <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0017984:	31 c0                	xor    eax,eax
c0017986:	5b                   	pop    ebx
c0017987:	c3                   	ret    

c0017988 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0017988:	53                   	push   ebx
c0017989:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001798d:	53                   	push   ebx
c001798e:	e8 8c ff ff ff       	call   c001791f <Thr::getDriverBaseFromAddress(unsigned long)>
c0017993:	5a                   	pop    edx
c0017994:	31 d2                	xor    edx,edx
c0017996:	85 c0                	test   eax,eax
c0017998:	74 04                	je     c001799e <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001799a:	89 da                	mov    edx,ebx
c001799c:	29 c2                	sub    edx,eax
c001799e:	89 d0                	mov    eax,edx
c00179a0:	5b                   	pop    ebx
c00179a1:	c3                   	ret    

c00179a2 <Thr::loadDLL(char const*, bool)>:
c00179a2:	55                   	push   ebp
c00179a3:	57                   	push   edi
c00179a4:	56                   	push   esi
c00179a5:	53                   	push   ebx
c00179a6:	81 ec 34 01 00 00    	sub    esp,0x134
c00179ac:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00179b3:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00179ba:	56                   	push   esi
c00179bb:	68 0b 5f 02 c0       	push   0xc0025f0b
c00179c0:	e8 00 56 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00179c5:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00179cc:	e8 e6 22 ff ff       	call   c0009cb7 <malloc>
c00179d1:	83 c4 0c             	add    esp,0xc
c00179d4:	89 c3                	mov    ebx,eax
c00179d6:	ff 35 50 93 02 c0    	push   DWORD PTR ds:0xc0029350
c00179dc:	56                   	push   esi
c00179dd:	50                   	push   eax
c00179de:	e8 4d 5b ff ff       	call   c000d530 <File::File(char const*, Process*)>
c00179e3:	83 c4 10             	add    esp,0x10
c00179e6:	85 db                	test   ebx,ebx
c00179e8:	75 3c                	jne    c0017a26 <Thr::loadDLL(char const*, bool)+0x84>
c00179ea:	89 f8                	mov    eax,edi
c00179ec:	84 c0                	test   al,al
c00179ee:	0f 84 d2 01 00 00    	je     c0017bc6 <Thr::loadDLL(char const*, bool)+0x224>
c00179f4:	55                   	push   ebp
c00179f5:	55                   	push   ebp
c00179f6:	68 1c 5f 02 c0       	push   0xc0025f1c
c00179fb:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c00179ff:	55                   	push   ebp
c0017a00:	e8 33 8d fe ff       	call   c0000738 <strcpy>
c0017a05:	58                   	pop    eax
c0017a06:	5a                   	pop    edx
c0017a07:	56                   	push   esi
c0017a08:	55                   	push   ebp
c0017a09:	e8 6a 8e fe ff       	call   c0000878 <strcat>
c0017a0e:	59                   	pop    ecx
c0017a0f:	58                   	pop    eax
c0017a10:	68 2f 5f 02 c0       	push   0xc0025f2f
c0017a15:	55                   	push   ebp
c0017a16:	e8 5d 8e fe ff       	call   c0000878 <strcat>
c0017a1b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017a1e:	e8 fa d2 ff ff       	call   c0014d1d <Krnl::panic(char const*)>
c0017a23:	83 c4 10             	add    esp,0x10
c0017a26:	51                   	push   ecx
c0017a27:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0017a2b:	50                   	push   eax
c0017a2c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0017a30:	50                   	push   eax
c0017a31:	53                   	push   ebx
c0017a32:	e8 7f 5e ff ff       	call   c000d8b6 <File::stat(unsigned long long*, bool*)>
c0017a37:	83 c4 10             	add    esp,0x10
c0017a3a:	85 db                	test   ebx,ebx
c0017a3c:	74 0c                	je     c0017a4a <Thr::loadDLL(char const*, bool)+0xa8>
c0017a3e:	83 ec 0c             	sub    esp,0xc
c0017a41:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017a43:	53                   	push   ebx
c0017a44:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017a47:	83 c4 10             	add    esp,0x10
c0017a4a:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0017a4f:	75 0a                	jne    c0017a5b <Thr::loadDLL(char const*, bool)+0xb9>
c0017a51:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017a55:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0017a59:	75 3c                	jne    c0017a97 <Thr::loadDLL(char const*, bool)+0xf5>
c0017a5b:	89 f8                	mov    eax,edi
c0017a5d:	84 c0                	test   al,al
c0017a5f:	0f 84 49 01 00 00    	je     c0017bae <Thr::loadDLL(char const*, bool)+0x20c>
c0017a65:	51                   	push   ecx
c0017a66:	51                   	push   ecx
c0017a67:	68 1c 5f 02 c0       	push   0xc0025f1c
c0017a6c:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0017a70:	53                   	push   ebx
c0017a71:	e8 c2 8c fe ff       	call   c0000738 <strcpy>
c0017a76:	5d                   	pop    ebp
c0017a77:	58                   	pop    eax
c0017a78:	56                   	push   esi
c0017a79:	53                   	push   ebx
c0017a7a:	e8 f9 8d fe ff       	call   c0000878 <strcat>
c0017a7f:	58                   	pop    eax
c0017a80:	5a                   	pop    edx
c0017a81:	68 2f 5f 02 c0       	push   0xc0025f2f
c0017a86:	53                   	push   ebx
c0017a87:	e8 ec 8d fe ff       	call   c0000878 <strcat>
c0017a8c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017a8f:	e8 89 d2 ff ff       	call   c0014d1d <Krnl::panic(char const*)>
c0017a94:	83 c4 10             	add    esp,0x10
c0017a97:	52                   	push   edx
c0017a98:	6a 03                	push   0x3
c0017a9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a9e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017aa2:	05 ff 0f 00 00       	add    eax,0xfff
c0017aa7:	83 d2 00             	adc    edx,0x0
c0017aaa:	0f ac d0 0c          	shrd   eax,edx,0xc
c0017aae:	50                   	push   eax
c0017aaf:	ff 35 34 7f 02 c0    	push   DWORD PTR ds:0xc0027f34
c0017ab5:	e8 1e 49 ff ff       	call   c000c3d8 <VAS::allocatePages(int, int)>
c0017aba:	59                   	pop    ecx
c0017abb:	89 c3                	mov    ebx,eax
c0017abd:	5d                   	pop    ebp
c0017abe:	50                   	push   eax
c0017abf:	68 c6 3f 02 c0       	push   0xc0023fc6
c0017ac4:	e8 fc 54 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0017ac9:	89 34 24             	mov    DWORD PTR [esp],esi
c0017acc:	e8 c7 8b fe ff       	call   c0000698 <strlen>
c0017ad1:	8b 2d 60 8b 02 c0    	mov    ebp,DWORD PTR ds:0xc0028b60
c0017ad7:	40                   	inc    eax
c0017ad8:	89 04 24             	mov    DWORD PTR [esp],eax
c0017adb:	e8 d7 21 ff ff       	call   c0009cb7 <malloc>
c0017ae0:	89 04 ad 80 8f 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd7080],eax
c0017ae7:	58                   	pop    eax
c0017ae8:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c0017aed:	5a                   	pop    edx
c0017aee:	56                   	push   esi
c0017aef:	ff 34 85 80 8f 02 c0 	push   DWORD PTR [eax*4-0x3ffd7080]
c0017af6:	e8 3d 8c fe ff       	call   c0000738 <strcpy>
c0017afb:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c0017b00:	8d 50 01             	lea    edx,[eax+0x1]
c0017b03:	89 1c 85 80 8d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7280],ebx
c0017b0a:	89 15 60 8b 02 c0    	mov    DWORD PTR ds:0xc0028b60,edx
c0017b10:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017b14:	83 c4 0c             	add    esp,0xc
c0017b17:	89 14 85 80 8b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7480],edx
c0017b1e:	6a 01                	push   0x1
c0017b20:	53                   	push   ebx
c0017b21:	56                   	push   esi
c0017b22:	e8 c2 f6 ff ff       	call   c00171e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0017b27:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0017b2b:	83 c4 10             	add    esp,0x10
c0017b2e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0017b33:	0f 85 89 00 00 00    	jne    c0017bc2 <Thr::loadDLL(char const*, bool)+0x220>
c0017b39:	89 f8                	mov    eax,edi
c0017b3b:	84 c0                	test   al,al
c0017b3d:	74 73                	je     c0017bb2 <Thr::loadDLL(char const*, bool)+0x210>
c0017b3f:	83 ec 0c             	sub    esp,0xc
c0017b42:	68 31 5f 02 c0       	push   0xc0025f31
c0017b47:	e8 d1 d1 ff ff       	call   c0014d1d <Krnl::panic(char const*)>
c0017b4c:	83 c4 10             	add    esp,0x10
c0017b4f:	eb 61                	jmp    c0017bb2 <Thr::loadDLL(char const*, bool)+0x210>
c0017b51:	50                   	push   eax
c0017b52:	50                   	push   eax
c0017b53:	89 e8                	mov    eax,ebp
c0017b55:	c1 e0 0c             	shl    eax,0xc
c0017b58:	01 d8                	add    eax,ebx
c0017b5a:	50                   	push   eax
c0017b5b:	ff 35 34 7f 02 c0    	push   DWORD PTR ds:0xc0027f34
c0017b61:	e8 d8 43 ff ff       	call   c000bf3e <VAS::getPageTableEntry(unsigned long)>
c0017b66:	83 c4 10             	add    esp,0x10
c0017b69:	8b 00                	mov    eax,DWORD PTR [eax]
c0017b6b:	a8 60                	test   al,0x60
c0017b6d:	75 11                	jne    c0017b80 <Thr::loadDLL(char const*, bool)+0x1de>
c0017b6f:	83 ec 0c             	sub    esp,0xc
c0017b72:	25 00 f0 ff ff       	and    eax,0xfffff000
c0017b77:	50                   	push   eax
c0017b78:	e8 6e 27 ff ff       	call   c000a2eb <Phys::freePage(unsigned long)>
c0017b7d:	83 c4 10             	add    esp,0x10
c0017b80:	45                   	inc    ebp
c0017b81:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017b85:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017b89:	05 ff 0f 00 00       	add    eax,0xfff
c0017b8e:	bf 00 00 00 00       	mov    edi,0x0
c0017b93:	83 d2 00             	adc    edx,0x0
c0017b96:	0f ac d0 0c          	shrd   eax,edx,0xc
c0017b9a:	c1 ea 0c             	shr    edx,0xc
c0017b9d:	39 c5                	cmp    ebp,eax
c0017b9f:	89 d1                	mov    ecx,edx
c0017ba1:	89 f8                	mov    eax,edi
c0017ba3:	19 c8                	sbb    eax,ecx
c0017ba5:	72 aa                	jb     c0017b51 <Thr::loadDLL(char const*, bool)+0x1af>
c0017ba7:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0017bac:	75 18                	jne    c0017bc6 <Thr::loadDLL(char const*, bool)+0x224>
c0017bae:	31 db                	xor    ebx,ebx
c0017bb0:	eb 14                	jmp    c0017bc6 <Thr::loadDLL(char const*, bool)+0x224>
c0017bb2:	83 ec 0c             	sub    esp,0xc
c0017bb5:	68 50 5f 02 c0       	push   0xc0025f50
c0017bba:	e8 5e d1 ff ff       	call   c0014d1d <Krnl::panic(char const*)>
c0017bbf:	83 c4 10             	add    esp,0x10
c0017bc2:	31 ed                	xor    ebp,ebp
c0017bc4:	eb bb                	jmp    c0017b81 <Thr::loadDLL(char const*, bool)+0x1df>
c0017bc6:	81 c4 2c 01 00 00    	add    esp,0x12c
c0017bcc:	89 d8                	mov    eax,ebx
c0017bce:	5b                   	pop    ebx
c0017bcf:	5e                   	pop    esi
c0017bd0:	5f                   	pop    edi
c0017bd1:	5d                   	pop    ebp
c0017bd2:	c3                   	ret    

c0017bd3 <Thr::executeDLL(unsigned long, void*)>:
c0017bd3:	56                   	push   esi
c0017bd4:	53                   	push   ebx
c0017bd5:	52                   	push   edx
c0017bd6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017bda:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017bde:	85 db                	test   ebx,ebx
c0017be0:	75 10                	jne    c0017bf2 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0017be2:	83 ec 0c             	sub    esp,0xc
c0017be5:	68 6c 5f 02 c0       	push   0xc0025f6c
c0017bea:	e8 2e d1 ff ff       	call   c0014d1d <Krnl::panic(char const*)>
c0017bef:	83 c4 10             	add    esp,0x10
c0017bf2:	50                   	push   eax
c0017bf3:	50                   	push   eax
c0017bf4:	53                   	push   ebx
c0017bf5:	68 96 5f 02 c0       	push   0xc0025f96
c0017bfa:	e8 c6 53 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0017bff:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0017c03:	89 d8                	mov    eax,ebx
c0017c05:	83 c4 14             	add    esp,0x14
c0017c08:	5b                   	pop    ebx
c0017c09:	5e                   	pop    esi
c0017c0a:	ff e0                	jmp    eax

c0017c0c <userModeEntryPoint(void*)>:
c0017c0c:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c0017c11:	48                   	dec    eax
c0017c12:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c0017c17:	75 03                	jne    c0017c1c <userModeEntryPoint(void*)+0x10>
c0017c19:	fb                   	sti    
c0017c1a:	66 90                	xchg   ax,ax
c0017c1c:	fb                   	sti    
c0017c1d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017c22:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017c25:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0017c2b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017c2f:	e9 2b 86 fe ff       	jmp    c000025f <goToUsermode>

c0017c34 <changeTSS>:
c0017c34:	83 ec 14             	sub    esp,0x14
c0017c37:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017c3c:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0017c3f:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0017c44:	c1 e2 15             	shl    edx,0x15
c0017c47:	29 d0                	sub    eax,edx
c0017c49:	50                   	push   eax
c0017c4a:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c0017c4f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017c55:	05 7c 11 00 00       	add    eax,0x117c
c0017c5a:	50                   	push   eax
c0017c5b:	e8 5c 39 ff ff       	call   c000b5bc <TSS::setESP(unsigned long)>
c0017c60:	83 c4 1c             	add    esp,0x1c
c0017c63:	c3                   	ret    

c0017c64 <switchToThread(ThreadControlBlock*)>:
c0017c64:	57                   	push   edi
c0017c65:	a1 24 93 02 c0       	mov    eax,ds:0xc0029324
c0017c6a:	56                   	push   esi
c0017c6b:	85 c0                	test   eax,eax
c0017c6d:	53                   	push   ebx
c0017c6e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017c72:	0f 85 88 00 00 00    	jne    c0017d00 <switchToThread(ThreadControlBlock*)+0x9c>
c0017c78:	8a 43 40             	mov    al,BYTE PTR [ebx+0x40]
c0017c7b:	3c ff                	cmp    al,0xff
c0017c7d:	74 7d                	je     c0017cfc <switchToThread(ThreadControlBlock*)+0x98>
c0017c7f:	0f b6 d0             	movzx  edx,al
c0017c82:	b8 00 04 00 00       	mov    eax,0x400
c0017c87:	29 d0                	sub    eax,edx
c0017c89:	d1 f8                	sar    eax,1
c0017c8b:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c0017c8e:	66 90                	xchg   ax,ax
c0017c90:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0017c93:	ff 15 18 94 02 c0    	call   DWORD PTR ds:0xc0029418
c0017c99:	a3 68 93 02 c0       	mov    ds:0xc0029368,eax
c0017c9e:	89 15 6c 93 02 c0    	mov    DWORD PTR ds:0xc002936c,edx
c0017ca4:	89 c6                	mov    esi,eax
c0017ca6:	89 d7                	mov    edi,edx
c0017ca8:	2b 35 58 93 02 c0    	sub    esi,DWORD PTR ds:0xc0029358
c0017cae:	a3 58 93 02 c0       	mov    ds:0xc0029358,eax
c0017cb3:	1b 3d 5c 93 02 c0    	sbb    edi,DWORD PTR ds:0xc002935c
c0017cb9:	89 35 60 93 02 c0    	mov    DWORD PTR ds:0xc0029360,esi
c0017cbf:	89 3d 64 93 02 c0    	mov    DWORD PTR ds:0xc0029364,edi
c0017cc5:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017ccb:	89 15 5c 93 02 c0    	mov    DWORD PTR ds:0xc002935c,edx
c0017cd1:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0017cd4:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0017cd7:	01 c6                	add    esi,eax
c0017cd9:	11 d7                	adc    edi,edx
c0017cdb:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0017cde:	83 ec 0c             	sub    esp,0xc
c0017ce1:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0017ce4:	53                   	push   ebx
c0017ce5:	e8 ad 85 fe ff       	call   c0000297 <switchToThreadASM>
c0017cea:	0f 20 c0             	mov    eax,cr0
c0017ced:	83 c8 08             	or     eax,0x8
c0017cf0:	0f 22 c0             	mov    cr0,eax
c0017cf3:	83 c4 10             	add    esp,0x10
c0017cf6:	5b                   	pop    ebx
c0017cf7:	5e                   	pop    esi
c0017cf8:	5f                   	pop    edi
c0017cf9:	c3                   	ret    
c0017cfa:	66 90                	xchg   ax,ax
c0017cfc:	31 c0                	xor    eax,eax
c0017cfe:	eb 90                	jmp    c0017c90 <switchToThread(ThreadControlBlock*)+0x2c>
c0017d00:	5b                   	pop    ebx
c0017d01:	c7 05 20 93 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0029320,0x1
c0017d0b:	5e                   	pop    esi
c0017d0c:	5f                   	pop    edi
c0017d0d:	c3                   	ret    
c0017d0e:	66 90                	xchg   ax,ax

c0017d10 <Process::addArgs(char**)>:
c0017d10:	57                   	push   edi
c0017d11:	56                   	push   esi
c0017d12:	53                   	push   ebx
c0017d13:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017d17:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017d1b:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0017d25:	85 ff                	test   edi,edi
c0017d27:	74 43                	je     c0017d6c <Process::addArgs(char**)+0x5c>
c0017d29:	8b 07                	mov    eax,DWORD PTR [edi]
c0017d2b:	85 c0                	test   eax,eax
c0017d2d:	74 3d                	je     c0017d6c <Process::addArgs(char**)+0x5c>
c0017d2f:	31 db                	xor    ebx,ebx
c0017d31:	8d 76 00             	lea    esi,[esi+0x0]
c0017d34:	83 ec 0c             	sub    esp,0xc
c0017d37:	50                   	push   eax
c0017d38:	e8 5b 89 fe ff       	call   c0000698 <strlen>
c0017d3d:	40                   	inc    eax
c0017d3e:	89 04 24             	mov    DWORD PTR [esp],eax
c0017d41:	e8 71 1f ff ff       	call   c0009cb7 <malloc>
c0017d46:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0017d4d:	5a                   	pop    edx
c0017d4e:	59                   	pop    ecx
c0017d4f:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c0017d52:	43                   	inc    ebx
c0017d53:	50                   	push   eax
c0017d54:	e8 df 89 fe ff       	call   c0000738 <strcpy>
c0017d59:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0017d5f:	83 c4 10             	add    esp,0x10
c0017d62:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0017d65:	85 c0                	test   eax,eax
c0017d67:	75 cb                	jne    c0017d34 <Process::addArgs(char**)+0x24>
c0017d69:	8d 76 00             	lea    esi,[esi+0x0]
c0017d6c:	5b                   	pop    ebx
c0017d6d:	5e                   	pop    esi
c0017d6e:	5f                   	pop    edi
c0017d6f:	c3                   	ret    

c0017d70 <Process::Process(char const*, Process*, char**)>:
c0017d70:	56                   	push   esi
c0017d71:	53                   	push   ebx
c0017d72:	83 ec 14             	sub    esp,0x14
c0017d75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d79:	05 0c 02 00 00       	add    eax,0x20c
c0017d7e:	bb 07 00 00 00       	mov    ebx,0x7
c0017d83:	89 c6                	mov    esi,eax
c0017d85:	8d 76 00             	lea    esi,[esi+0x0]
c0017d88:	85 db                	test   ebx,ebx
c0017d8a:	78 14                	js     c0017da0 <Process::Process(char const*, Process*, char**)+0x30>
c0017d8c:	83 ec 0c             	sub    esp,0xc
c0017d8f:	56                   	push   esi
c0017d90:	e8 d7 b1 00 00       	call   c0022f6c <ThreadControlBlock::ThreadControlBlock()>
c0017d95:	83 c4 10             	add    esp,0x10
c0017d98:	83 c6 5f             	add    esi,0x5f
c0017d9b:	4b                   	dec    ebx
c0017d9c:	eb ea                	jmp    c0017d88 <Process::Process(char const*, Process*, char**)+0x18>
c0017d9e:	66 90                	xchg   ax,ax
c0017da0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017da4:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0017dab:	83 ec 0c             	sub    esp,0xc
c0017dae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017db2:	e8 ef cd ff ff       	call   c0014ba6 <Krnl::newProcessEnv(Process*)>
c0017db7:	83 c4 10             	add    esp,0x10
c0017dba:	89 c2                	mov    edx,eax
c0017dbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017dc0:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0017dc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017dca:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0017dd3:	a1 30 78 02 c0       	mov    eax,ds:0xc0027830
c0017dd8:	8d 50 01             	lea    edx,[eax+0x1]
c0017ddb:	89 15 30 78 02 c0    	mov    DWORD PTR ds:0xc0027830,edx
c0017de1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017de5:	89 02                	mov    DWORD PTR [edx],eax
c0017de7:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0017def:	83 ec 0c             	sub    esp,0xc
c0017df2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017df6:	e8 bc 1e ff ff       	call   c0009cb7 <malloc>
c0017dfb:	83 c4 10             	add    esp,0x10
c0017dfe:	89 c3                	mov    ebx,eax
c0017e00:	83 ec 08             	sub    esp,0x8
c0017e03:	6a 00                	push   0x0
c0017e05:	53                   	push   ebx
c0017e06:	e8 75 49 ff ff       	call   c000c780 <VAS::VAS(bool)>
c0017e0b:	83 c4 10             	add    esp,0x10
c0017e0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e12:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0017e18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e1c:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0017e26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e2a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e2e:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0017e34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e38:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017e3e:	85 c0                	test   eax,eax
c0017e40:	74 42                	je     c0017e84 <Process::Process(char const*, Process*, char**)+0x114>
c0017e42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e46:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017e4c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0017e52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e56:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0017e5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e60:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017e66:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0017e6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e70:	05 0c 01 00 00       	add    eax,0x10c
c0017e75:	83 ec 08             	sub    esp,0x8
c0017e78:	52                   	push   edx
c0017e79:	50                   	push   eax
c0017e7a:	e8 b9 88 fe ff       	call   c0000738 <strcpy>
c0017e7f:	83 c4 10             	add    esp,0x10
c0017e82:	eb 64                	jmp    c0017ee8 <Process::Process(char const*, Process*, char**)+0x178>
c0017e84:	c7 44 24 04 b4 01 00 00 	mov    DWORD PTR [esp+0x4],0x1b4
c0017e8c:	83 ec 0c             	sub    esp,0xc
c0017e8f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017e93:	e8 1f 1e ff ff       	call   c0009cb7 <malloc>
c0017e98:	83 c4 10             	add    esp,0x10
c0017e9b:	89 c3                	mov    ebx,eax
c0017e9d:	83 ec 08             	sub    esp,0x8
c0017ea0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017ea4:	53                   	push   ebx
c0017ea5:	e8 24 34 ff ff       	call   c000b2ce <VgaText::VgaText(char const*)>
c0017eaa:	83 c4 10             	add    esp,0x10
c0017ead:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017eb1:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0017eb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ebb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ec1:	83 ec 0c             	sub    esp,0xc
c0017ec4:	50                   	push   eax
c0017ec5:	e8 cd 2b ff ff       	call   c000aa97 <addToTerminalCycle(VgaText*)>
c0017eca:	83 c4 10             	add    esp,0x10
c0017ecd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ed1:	05 0c 01 00 00       	add    eax,0x10c
c0017ed6:	83 ec 08             	sub    esp,0x8
c0017ed9:	68 b5 5f 02 c0       	push   0xc0025fb5
c0017ede:	50                   	push   eax
c0017edf:	e8 54 88 fe ff       	call   c0000738 <strcpy>
c0017ee4:	83 c4 10             	add    esp,0x10
c0017ee7:	90                   	nop
c0017ee8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017eec:	83 c0 0c             	add    eax,0xc
c0017eef:	83 ec 08             	sub    esp,0x8
c0017ef2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017ef6:	50                   	push   eax
c0017ef7:	e8 3c 88 fe ff       	call   c0000738 <strcpy>
c0017efc:	83 c4 10             	add    esp,0x10
c0017eff:	83 ec 08             	sub    esp,0x8
c0017f02:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017f06:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017f0a:	e8 01 fe ff ff       	call   c0017d10 <Process::addArgs(char**)>
c0017f0f:	83 c4 10             	add    esp,0x10
c0017f12:	83 ec 08             	sub    esp,0x8
c0017f15:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017f19:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017f1d:	e8 91 ed ff ff       	call   c0016cb3 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0017f22:	83 c4 10             	add    esp,0x10
c0017f25:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017f29:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017f2d:	83 f0 01             	xor    eax,0x1
c0017f30:	88 c2                	mov    dl,al
c0017f32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f36:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0017f3c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017f41:	83 ec 08             	sub    esp,0x8
c0017f44:	50                   	push   eax
c0017f45:	68 0c 60 02 c0       	push   0xc002600c
c0017f4a:	e8 76 50 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0017f4f:	83 c4 10             	add    esp,0x10
c0017f52:	90                   	nop
c0017f53:	83 c4 14             	add    esp,0x14
c0017f56:	5b                   	pop    ebx
c0017f57:	5e                   	pop    esi
c0017f58:	c3                   	ret    
c0017f59:	90                   	nop
c0017f5a:	66 90                	xchg   ax,ax

c0017f5c <Process::Process(bool, char const*, Process*, char**)>:
c0017f5c:	56                   	push   esi
c0017f5d:	53                   	push   ebx
c0017f5e:	83 ec 24             	sub    esp,0x24
c0017f61:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017f65:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017f69:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017f6d:	05 0c 02 00 00       	add    eax,0x20c
c0017f72:	bb 07 00 00 00       	mov    ebx,0x7
c0017f77:	89 c6                	mov    esi,eax
c0017f79:	8d 76 00             	lea    esi,[esi+0x0]
c0017f7c:	85 db                	test   ebx,ebx
c0017f7e:	78 14                	js     c0017f94 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0017f80:	83 ec 0c             	sub    esp,0xc
c0017f83:	56                   	push   esi
c0017f84:	e8 e3 af 00 00       	call   c0022f6c <ThreadControlBlock::ThreadControlBlock()>
c0017f89:	83 c4 10             	add    esp,0x10
c0017f8c:	83 c6 5f             	add    esi,0x5f
c0017f8f:	4b                   	dec    ebx
c0017f90:	eb ea                	jmp    c0017f7c <Process::Process(bool, char const*, Process*, char**)+0x20>
c0017f92:	66 90                	xchg   ax,ax
c0017f94:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017f98:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0017f9f:	83 ec 0c             	sub    esp,0xc
c0017fa2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017fa6:	e8 fb cb ff ff       	call   c0014ba6 <Krnl::newProcessEnv(Process*)>
c0017fab:	83 c4 10             	add    esp,0x10
c0017fae:	89 c2                	mov    edx,eax
c0017fb0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017fb4:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0017fba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017fbe:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0017fc7:	a1 30 78 02 c0       	mov    eax,ds:0xc0027830
c0017fcc:	8d 50 01             	lea    edx,[eax+0x1]
c0017fcf:	89 15 30 78 02 c0    	mov    DWORD PTR ds:0xc0027830,edx
c0017fd5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017fd9:	89 02                	mov    DWORD PTR [edx],eax
c0017fdb:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0017fe3:	83 ec 0c             	sub    esp,0xc
c0017fe6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017fea:	e8 c8 1c ff ff       	call   c0009cb7 <malloc>
c0017fef:	83 c4 10             	add    esp,0x10
c0017ff2:	89 c3                	mov    ebx,eax
c0017ff4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017ff9:	83 ec 08             	sub    esp,0x8
c0017ffc:	50                   	push   eax
c0017ffd:	53                   	push   ebx
c0017ffe:	e8 7d 47 ff ff       	call   c000c780 <VAS::VAS(bool)>
c0018003:	83 c4 10             	add    esp,0x10
c0018006:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001800a:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0018010:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018014:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001801e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018022:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018026:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001802c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018030:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018036:	85 c0                	test   eax,eax
c0018038:	74 42                	je     c001807c <Process::Process(bool, char const*, Process*, char**)+0x120>
c001803a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001803e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018044:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001804a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001804e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0018054:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018058:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001805e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0018064:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018068:	05 0c 01 00 00       	add    eax,0x10c
c001806d:	83 ec 08             	sub    esp,0x8
c0018070:	52                   	push   edx
c0018071:	50                   	push   eax
c0018072:	e8 c1 86 fe ff       	call   c0000738 <strcpy>
c0018077:	83 c4 10             	add    esp,0x10
c001807a:	eb 64                	jmp    c00180e0 <Process::Process(bool, char const*, Process*, char**)+0x184>
c001807c:	c7 44 24 18 b4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1b4
c0018084:	83 ec 0c             	sub    esp,0xc
c0018087:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001808b:	e8 27 1c ff ff       	call   c0009cb7 <malloc>
c0018090:	83 c4 10             	add    esp,0x10
c0018093:	89 c3                	mov    ebx,eax
c0018095:	83 ec 08             	sub    esp,0x8
c0018098:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001809c:	53                   	push   ebx
c001809d:	e8 2c 32 ff ff       	call   c000b2ce <VgaText::VgaText(char const*)>
c00180a2:	83 c4 10             	add    esp,0x10
c00180a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00180a9:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00180af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00180b3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00180b9:	83 ec 0c             	sub    esp,0xc
c00180bc:	50                   	push   eax
c00180bd:	e8 d5 29 ff ff       	call   c000aa97 <addToTerminalCycle(VgaText*)>
c00180c2:	83 c4 10             	add    esp,0x10
c00180c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00180c9:	05 0c 01 00 00       	add    eax,0x10c
c00180ce:	83 ec 08             	sub    esp,0x8
c00180d1:	68 b5 5f 02 c0       	push   0xc0025fb5
c00180d6:	50                   	push   eax
c00180d7:	e8 5c 86 fe ff       	call   c0000738 <strcpy>
c00180dc:	83 c4 10             	add    esp,0x10
c00180df:	90                   	nop
c00180e0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00180e4:	83 c0 0c             	add    eax,0xc
c00180e7:	83 ec 08             	sub    esp,0x8
c00180ea:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00180ee:	50                   	push   eax
c00180ef:	e8 44 86 fe ff       	call   c0000738 <strcpy>
c00180f4:	83 c4 10             	add    esp,0x10
c00180f7:	83 ec 08             	sub    esp,0x8
c00180fa:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00180fe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018102:	e8 09 fc ff ff       	call   c0017d10 <Process::addArgs(char**)>
c0018107:	83 c4 10             	add    esp,0x10
c001810a:	90                   	nop
c001810b:	83 c4 24             	add    esp,0x24
c001810e:	5b                   	pop    ebx
c001810f:	5e                   	pop    esi
c0018110:	c3                   	ret    
c0018111:	8d 76 00             	lea    esi,[esi+0x0]

c0018114 <taskStartupFunction>:
c0018114:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018119:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c001811c:	c3                   	ret    
c001811d:	90                   	nop
c001811e:	66 90                	xchg   ax,ax

c0018120 <Semaphore::Semaphore(int)>:
c0018120:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018124:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018128:	89 10                	mov    DWORD PTR [eax],edx
c001812a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001812e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0018135:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018139:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0018140:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018144:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001814b:	90                   	nop
c001814c:	c3                   	ret    
c001814d:	90                   	nop
c001814e:	66 90                	xchg   ax,ax

c0018150 <Mutex::Mutex()>:
c0018150:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018154:	6a 01                	push   0x1
c0018156:	50                   	push   eax
c0018157:	e8 c4 ff ff ff       	call   c0018120 <Semaphore::Semaphore(int)>
c001815c:	83 c4 08             	add    esp,0x8
c001815f:	90                   	nop
c0018160:	c3                   	ret    
c0018161:	90                   	nop
c0018162:	66 90                	xchg   ax,ax

c0018164 <Process::createThread(void (*)(void*), void*, int)>:
c0018164:	57                   	push   edi
c0018165:	31 c9                	xor    ecx,ecx
c0018167:	56                   	push   esi
c0018168:	53                   	push   ebx
c0018169:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001816d:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0018174:	89 f2                	mov    edx,esi
c0018176:	66 90                	xchg   ax,ax
c0018178:	0f b7 c2             	movzx  eax,dx
c001817b:	83 e2 01             	and    edx,0x1
c001817e:	74 14                	je     c0018194 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0018180:	d1 f8                	sar    eax,1
c0018182:	41                   	inc    ecx
c0018183:	89 c2                	mov    edx,eax
c0018185:	83 f9 10             	cmp    ecx,0x10
c0018188:	75 ee                	jne    c0018178 <Process::createThread(void (*)(void*), void*, int)+0x14>
c001818a:	31 db                	xor    ebx,ebx
c001818c:	89 d8                	mov    eax,ebx
c001818e:	5b                   	pop    ebx
c001818f:	5e                   	pop    esi
c0018190:	5f                   	pop    edi
c0018191:	c3                   	ret    
c0018192:	66 90                	xchg   ax,ax
c0018194:	b8 01 00 00 00       	mov    eax,0x1
c0018199:	d3 e0                	shl    eax,cl
c001819b:	09 c6                	or     esi,eax
c001819d:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00181a0:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c00181a7:	01 c0                	add    eax,eax
c00181a9:	01 c8                	add    eax,ecx
c00181ab:	8d 04 80             	lea    eax,[eax+eax*4]
c00181ae:	01 d8                	add    eax,ebx
c00181b0:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c00181b7:	75 0b                	jne    c00181c4 <Process::createThread(void (*)(void*), void*, int)+0x60>
c00181b9:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c00181c3:	90                   	nop
c00181c4:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00181ca:	83 ec 08             	sub    esp,0x8
c00181cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00181d0:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00181d3:	01 c0                	add    eax,eax
c00181d5:	01 c8                	add    eax,ecx
c00181d7:	8d 3c 80             	lea    edi,[eax+eax*4]
c00181da:	8d 04 3b             	lea    eax,[ebx+edi*1]
c00181dd:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00181e3:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c00181e9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00181ed:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c00181f3:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c00181f9:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0018200:	89 ca                	mov    edx,ecx
c0018202:	f7 da                	neg    edx
c0018204:	c1 e2 15             	shl    edx,0x15
c0018207:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001820d:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0018213:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018217:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0018221:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0018227:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001822b:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0018231:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001823b:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0018245:	53                   	push   ebx
c0018246:	68 44 93 02 c0       	push   0xc0029344
c001824b:	e8 bc aa 00 00       	call   c0022d0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018250:	83 c4 10             	add    esp,0x10
c0018253:	89 d8                	mov    eax,ebx
c0018255:	5b                   	pop    ebx
c0018256:	5e                   	pop    esi
c0018257:	5f                   	pop    edi
c0018258:	c3                   	ret    
c0018259:	90                   	nop
c001825a:	66 90                	xchg   ax,ax

c001825c <Process::createUserThread()>:
c001825c:	83 ec 0c             	sub    esp,0xc
c001825f:	68 80 00 00 00       	push   0x80
c0018264:	6a 00                	push   0x0
c0018266:	68 0c 7c 01 c0       	push   0xc0017c0c
c001826b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001826f:	e8 f0 fe ff ff       	call   c0018164 <Process::createThread(void (*)(void*), void*, int)>
c0018274:	83 c4 1c             	add    esp,0x1c
c0018277:	c3                   	ret    

c0018278 <setupMultitasking(void (*)())>:
c0018278:	56                   	push   esi
c0018279:	53                   	push   ebx
c001827a:	51                   	push   ecx
c001827b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001827f:	eb 13                	jmp    c0018294 <setupMultitasking(void (*)())+0x1c>
c0018281:	8d 76 00             	lea    esi,[esi+0x0]
c0018284:	83 ec 0c             	sub    esp,0xc
c0018287:	68 44 93 02 c0       	push   0xc0029344
c001828c:	e8 c3 a9 00 00       	call   c0022c54 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018291:	83 c4 10             	add    esp,0x10
c0018294:	83 ec 0c             	sub    esp,0xc
c0018297:	68 44 93 02 c0       	push   0xc0029344
c001829c:	e8 8f a9 00 00       	call   c0022c30 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00182a1:	83 c4 10             	add    esp,0x10
c00182a4:	84 c0                	test   al,al
c00182a6:	74 dc                	je     c0018284 <setupMultitasking(void (*)())+0xc>
c00182a8:	83 ec 0c             	sub    esp,0xc
c00182ab:	68 1f 07 00 00       	push   0x71f
c00182b0:	e8 02 1a ff ff       	call   c0009cb7 <malloc>
c00182b5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00182bc:	89 c3                	mov    ebx,eax
c00182be:	6a 00                	push   0x0
c00182c0:	68 b9 5f 02 c0       	push   0xc0025fb9
c00182c5:	6a 01                	push   0x1
c00182c7:	50                   	push   eax
c00182c8:	e8 8f fc ff ff       	call   c0017f5c <Process::Process(bool, char const*, Process*, char**)>
c00182cd:	83 c4 14             	add    esp,0x14
c00182d0:	89 1d 50 93 02 c0    	mov    DWORD PTR ds:0xc0029350,ebx
c00182d6:	ff b3 06 05 00 00    	push   DWORD PTR [ebx+0x506]
c00182dc:	e8 c4 2a ff ff       	call   c000ada5 <setActiveTerminal(VgaText*)>
c00182e1:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c00182e9:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c00182f3:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00182f9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00182fc:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0018306:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001830c:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0018312:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001831c:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0018326:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0018330:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0018336:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0018340:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0018346:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0018350:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0018356:	58                   	pop    eax
c0018357:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001835d:	5a                   	pop    edx
c001835e:	68 b5 5f 02 c0       	push   0xc0025fb5
c0018363:	50                   	push   eax
c0018364:	e8 cf 83 fe ff       	call   c0000738 <strcpy>
c0018369:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0018370:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0018374:	83 c4 14             	add    esp,0x14
c0018377:	5b                   	pop    ebx
c0018378:	5e                   	pop    esi
c0018379:	e9 0b 7f fe ff       	jmp    c0000289 <switchToThreadASMFirstTime>
c001837e:	66 90                	xchg   ax,ax

c0018380 <schedule()>:
c0018380:	a1 24 93 02 c0       	mov    eax,ds:0xc0029324
c0018385:	85 c0                	test   eax,eax
c0018387:	74 0b                	je     c0018394 <schedule()+0x14>
c0018389:	c7 05 20 93 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0029320,0x1
c0018393:	c3                   	ret    
c0018394:	53                   	push   ebx
c0018395:	83 ec 14             	sub    esp,0x14
c0018398:	68 44 93 02 c0       	push   0xc0029344
c001839d:	e8 8e a8 00 00       	call   c0022c30 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00183a2:	83 c4 10             	add    esp,0x10
c00183a5:	84 c0                	test   al,al
c00183a7:	75 3b                	jne    c00183e4 <schedule()+0x64>
c00183a9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00183ae:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00183b1:	4a                   	dec    edx
c00183b2:	74 38                	je     c00183ec <schedule()+0x6c>
c00183b4:	83 ec 0c             	sub    esp,0xc
c00183b7:	68 44 93 02 c0       	push   0xc0029344
c00183bc:	e8 8b a8 00 00       	call   c0022c4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00183c1:	c7 04 24 44 93 02 c0 	mov    DWORD PTR [esp],0xc0029344
c00183c8:	89 c3                	mov    ebx,eax
c00183ca:	e8 85 a8 00 00       	call   c0022c54 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00183cf:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c00183d6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00183d9:	e8 86 f8 ff ff       	call   c0017c64 <switchToThread(ThreadControlBlock*)>
c00183de:	83 c4 10             	add    esp,0x10
c00183e1:	8d 76 00             	lea    esi,[esi+0x0]
c00183e4:	83 c4 08             	add    esp,0x8
c00183e7:	5b                   	pop    ebx
c00183e8:	c3                   	ret    
c00183e9:	8d 76 00             	lea    esi,[esi+0x0]
c00183ec:	83 ec 08             	sub    esp,0x8
c00183ef:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00183f6:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c00183fc:	68 44 93 02 c0       	push   0xc0029344
c0018401:	e8 06 a9 00 00       	call   c0022d0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018406:	83 c4 10             	add    esp,0x10
c0018409:	eb a9                	jmp    c00183b4 <schedule()+0x34>
c001840b:	90                   	nop

c001840c <Semaphore::tryAcquire()>:
c001840c:	53                   	push   ebx
c001840d:	83 ec 08             	sub    esp,0x8
c0018410:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018414:	fa                   	cli    
c0018415:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c001841a:	8d 50 01             	lea    edx,[eax+0x1]
c001841d:	89 15 28 93 02 c0    	mov    DWORD PTR ds:0xc0029328,edx
c0018423:	8b 15 24 93 02 c0    	mov    edx,DWORD PTR ds:0xc0029324
c0018429:	8d 5a 01             	lea    ebx,[edx+0x1]
c001842c:	89 1d 24 93 02 c0    	mov    DWORD PTR ds:0xc0029324,ebx
c0018432:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0018435:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0018437:	7c 33                	jl     c001846c <Semaphore::tryAcquire()+0x60>
c0018439:	89 15 24 93 02 c0    	mov    DWORD PTR ds:0xc0029324,edx
c001843f:	85 d2                	test   edx,edx
c0018441:	75 0d                	jne    c0018450 <Semaphore::tryAcquire()+0x44>
c0018443:	8b 15 20 93 02 c0    	mov    edx,DWORD PTR ds:0xc0029320
c0018449:	85 d2                	test   edx,edx
c001844b:	75 6b                	jne    c00184b8 <Semaphore::tryAcquire()+0xac>
c001844d:	8d 76 00             	lea    esi,[esi+0x0]
c0018450:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c0018455:	85 c0                	test   eax,eax
c0018457:	74 0b                	je     c0018464 <Semaphore::tryAcquire()+0x58>
c0018459:	8d 76 00             	lea    esi,[esi+0x0]
c001845c:	31 c0                	xor    eax,eax
c001845e:	83 c4 08             	add    esp,0x8
c0018461:	5b                   	pop    ebx
c0018462:	c3                   	ret    
c0018463:	90                   	nop
c0018464:	fb                   	sti    
c0018465:	83 c4 08             	add    esp,0x8
c0018468:	5b                   	pop    ebx
c0018469:	c3                   	ret    
c001846a:	66 90                	xchg   ax,ax
c001846c:	43                   	inc    ebx
c001846d:	89 15 24 93 02 c0    	mov    DWORD PTR ds:0xc0029324,edx
c0018473:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0018476:	85 d2                	test   edx,edx
c0018478:	75 22                	jne    c001849c <Semaphore::tryAcquire()+0x90>
c001847a:	8b 0d 20 93 02 c0    	mov    ecx,DWORD PTR ds:0xc0029320
c0018480:	85 c9                	test   ecx,ecx
c0018482:	74 18                	je     c001849c <Semaphore::tryAcquire()+0x90>
c0018484:	c7 05 20 93 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029320,0x0
c001848e:	e8 ed fe ff ff       	call   c0018380 <schedule()>
c0018493:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c0018498:	48                   	dec    eax
c0018499:	8d 76 00             	lea    esi,[esi+0x0]
c001849c:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c00184a1:	85 c0                	test   eax,eax
c00184a3:	75 0b                	jne    c00184b0 <Semaphore::tryAcquire()+0xa4>
c00184a5:	fb                   	sti    
c00184a6:	b0 01                	mov    al,0x1
c00184a8:	83 c4 08             	add    esp,0x8
c00184ab:	5b                   	pop    ebx
c00184ac:	c3                   	ret    
c00184ad:	8d 76 00             	lea    esi,[esi+0x0]
c00184b0:	b0 01                	mov    al,0x1
c00184b2:	83 c4 08             	add    esp,0x8
c00184b5:	5b                   	pop    ebx
c00184b6:	c3                   	ret    
c00184b7:	90                   	nop
c00184b8:	c7 05 20 93 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029320,0x0
c00184c2:	e8 b9 fe ff ff       	call   c0018380 <schedule()>
c00184c7:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c00184cc:	48                   	dec    eax
c00184cd:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c00184d2:	85 c0                	test   eax,eax
c00184d4:	75 86                	jne    c001845c <Semaphore::tryAcquire()+0x50>
c00184d6:	eb 8c                	jmp    c0018464 <Semaphore::tryAcquire()+0x58>

c00184d8 <Semaphore::assertLocked(char const*)>:
c00184d8:	83 ec 0c             	sub    esp,0xc
c00184db:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00184df:	fa                   	cli    
c00184e0:	ff 05 28 93 02 c0    	inc    DWORD PTR ds:0xc0029328
c00184e6:	a1 24 93 02 c0       	mov    eax,ds:0xc0029324
c00184eb:	8d 48 01             	lea    ecx,[eax+0x1]
c00184ee:	89 0d 24 93 02 c0    	mov    DWORD PTR ds:0xc0029324,ecx
c00184f4:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00184f6:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c00184f9:	7c 29                	jl     c0018524 <Semaphore::assertLocked(char const*)+0x4c>
c00184fb:	90                   	nop
c00184fc:	a3 24 93 02 c0       	mov    ds:0xc0029324,eax
c0018501:	85 c0                	test   eax,eax
c0018503:	75 0b                	jne    c0018510 <Semaphore::assertLocked(char const*)+0x38>
c0018505:	a1 20 93 02 c0       	mov    eax,ds:0xc0029320
c001850a:	85 c0                	test   eax,eax
c001850c:	75 2e                	jne    c001853c <Semaphore::assertLocked(char const*)+0x64>
c001850e:	66 90                	xchg   ax,ax
c0018510:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c0018515:	48                   	dec    eax
c0018516:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c001851b:	75 03                	jne    c0018520 <Semaphore::assertLocked(char const*)+0x48>
c001851d:	fb                   	sti    
c001851e:	66 90                	xchg   ax,ax
c0018520:	83 c4 0c             	add    esp,0xc
c0018523:	c3                   	ret    
c0018524:	83 ec 0c             	sub    esp,0xc
c0018527:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001852b:	e8 ed c7 ff ff       	call   c0014d1d <Krnl::panic(char const*)>
c0018530:	a1 24 93 02 c0       	mov    eax,ds:0xc0029324
c0018535:	83 c4 10             	add    esp,0x10
c0018538:	48                   	dec    eax
c0018539:	eb c1                	jmp    c00184fc <Semaphore::assertLocked(char const*)+0x24>
c001853b:	90                   	nop
c001853c:	c7 05 20 93 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029320,0x0
c0018546:	e8 35 fe ff ff       	call   c0018380 <schedule()>
c001854b:	eb c3                	jmp    c0018510 <Semaphore::assertLocked(char const*)+0x38>
c001854d:	8d 76 00             	lea    esi,[esi+0x0]

c0018550 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0018550:	83 ec 0c             	sub    esp,0xc
c0018553:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018558:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001855c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001855f:	e8 1c fe ff ff       	call   c0018380 <schedule()>
c0018564:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c0018569:	48                   	dec    eax
c001856a:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c001856f:	75 03                	jne    c0018574 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0018571:	fb                   	sti    
c0018572:	66 90                	xchg   ax,ax
c0018574:	83 c4 0c             	add    esp,0xc
c0018577:	c3                   	ret    

c0018578 <blockTask(TaskState)>:
c0018578:	83 ec 0c             	sub    esp,0xc
c001857b:	fa                   	cli    
c001857c:	ff 05 28 93 02 c0    	inc    DWORD PTR ds:0xc0029328
c0018582:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018586:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001858b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001858e:	e8 ed fd ff ff       	call   c0018380 <schedule()>
c0018593:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c0018598:	48                   	dec    eax
c0018599:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c001859e:	75 04                	jne    c00185a4 <blockTask(TaskState)+0x2c>
c00185a0:	fb                   	sti    
c00185a1:	8d 76 00             	lea    esi,[esi+0x0]
c00185a4:	83 c4 0c             	add    esp,0xc
c00185a7:	c3                   	ret    

c00185a8 <waitTask(int, int*, int)>:
c00185a8:	83 ec 18             	sub    esp,0x18
c00185ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00185b0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00185b4:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c00185b7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00185bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00185c0:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c00185c3:	6a 07                	push   0x7
c00185c5:	e8 ae ff ff ff       	call   c0018578 <blockTask(TaskState)>
c00185ca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00185cf:	83 c4 10             	add    esp,0x10
c00185d2:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c00185d5:	85 d2                	test   edx,edx
c00185d7:	74 0b                	je     c00185e4 <waitTask(int, int*, int)+0x3c>
c00185d9:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c00185dc:	89 02                	mov    DWORD PTR [edx],eax
c00185de:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00185e3:	90                   	nop
c00185e4:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c00185e7:	83 c4 0c             	add    esp,0xc
c00185ea:	c3                   	ret    
c00185eb:	90                   	nop

c00185ec <milliTenthSleepUntil(unsigned int)>:
c00185ec:	83 ec 0c             	sub    esp,0xc
c00185ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185f3:	39 05 2c 84 02 c0    	cmp    DWORD PTR ds:0xc002842c,eax
c00185f9:	76 05                	jbe    c0018600 <milliTenthSleepUntil(unsigned int)+0x14>
c00185fb:	90                   	nop
c00185fc:	83 c4 0c             	add    esp,0xc
c00185ff:	c3                   	ret    
c0018600:	fa                   	cli    
c0018601:	ff 05 28 93 02 c0    	inc    DWORD PTR ds:0xc0029328
c0018607:	83 ec 08             	sub    esp,0x8
c001860a:	ff 05 24 93 02 c0    	inc    DWORD PTR ds:0xc0029324
c0018610:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018616:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0018619:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001861f:	68 38 93 02 c0       	push   0xc0029338
c0018624:	e8 e3 a6 00 00       	call   c0022d0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018629:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0018630:	e8 43 ff ff ff       	call   c0018578 <blockTask(TaskState)>
c0018635:	a1 24 93 02 c0       	mov    eax,ds:0xc0029324
c001863a:	83 c4 10             	add    esp,0x10
c001863d:	48                   	dec    eax
c001863e:	a3 24 93 02 c0       	mov    ds:0xc0029324,eax
c0018643:	85 c0                	test   eax,eax
c0018645:	75 09                	jne    c0018650 <milliTenthSleepUntil(unsigned int)+0x64>
c0018647:	a1 20 93 02 c0       	mov    eax,ds:0xc0029320
c001864c:	85 c0                	test   eax,eax
c001864e:	75 14                	jne    c0018664 <milliTenthSleepUntil(unsigned int)+0x78>
c0018650:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c0018655:	48                   	dec    eax
c0018656:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c001865b:	75 9f                	jne    c00185fc <milliTenthSleepUntil(unsigned int)+0x10>
c001865d:	fb                   	sti    
c001865e:	83 c4 0c             	add    esp,0xc
c0018661:	c3                   	ret    
c0018662:	66 90                	xchg   ax,ax
c0018664:	c7 05 20 93 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029320,0x0
c001866e:	e8 0d fd ff ff       	call   c0018380 <schedule()>
c0018673:	eb db                	jmp    c0018650 <milliTenthSleepUntil(unsigned int)+0x64>
c0018675:	8d 76 00             	lea    esi,[esi+0x0]

c0018678 <milliTenthSleep(unsigned int)>:
c0018678:	a1 2c 84 02 c0       	mov    eax,ds:0xc002842c
c001867d:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0018681:	e9 66 ff ff ff       	jmp    c00185ec <milliTenthSleepUntil(unsigned int)>
c0018686:	66 90                	xchg   ax,ax

c0018688 <sleep(unsigned int)>:
c0018688:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001868c:	8d 04 80             	lea    eax,[eax+eax*4]
c001868f:	8d 04 80             	lea    eax,[eax+eax*4]
c0018692:	8d 04 80             	lea    eax,[eax+eax*4]
c0018695:	8d 04 80             	lea    eax,[eax+eax*4]
c0018698:	c1 e0 04             	shl    eax,0x4
c001869b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001869f:	eb d7                	jmp    c0018678 <milliTenthSleep(unsigned int)>
c00186a1:	90                   	nop
c00186a2:	66 90                	xchg   ax,ax

c00186a4 <Semaphore::acquire()>:
c00186a4:	83 ec 0c             	sub    esp,0xc
c00186a7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00186ab:	fa                   	cli    
c00186ac:	a1 24 93 02 c0       	mov    eax,ds:0xc0029324
c00186b1:	ff 05 28 93 02 c0    	inc    DWORD PTR ds:0xc0029328
c00186b7:	8d 48 01             	lea    ecx,[eax+0x1]
c00186ba:	89 0d 24 93 02 c0    	mov    DWORD PTR ds:0xc0029324,ecx
c00186c0:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00186c3:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c00186c5:	7d 2d                	jge    c00186f4 <Semaphore::acquire()+0x50>
c00186c7:	41                   	inc    ecx
c00186c8:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c00186cb:	90                   	nop
c00186cc:	a3 24 93 02 c0       	mov    ds:0xc0029324,eax
c00186d1:	85 c0                	test   eax,eax
c00186d3:	75 0b                	jne    c00186e0 <Semaphore::acquire()+0x3c>
c00186d5:	a1 20 93 02 c0       	mov    eax,ds:0xc0029320
c00186da:	85 c0                	test   eax,eax
c00186dc:	75 62                	jne    c0018740 <Semaphore::acquire()+0x9c>
c00186de:	66 90                	xchg   ax,ax
c00186e0:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c00186e5:	48                   	dec    eax
c00186e6:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c00186eb:	75 03                	jne    c00186f0 <Semaphore::acquire()+0x4c>
c00186ed:	fb                   	sti    
c00186ee:	66 90                	xchg   ax,ax
c00186f0:	83 c4 0c             	add    esp,0xc
c00186f3:	c3                   	ret    
c00186f4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00186f9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0018700:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0018703:	85 c9                	test   ecx,ecx
c0018705:	74 4d                	je     c0018754 <Semaphore::acquire()+0xb0>
c0018707:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001870a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018710:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0018713:	90                   	nop
c0018714:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018719:	83 ec 0c             	sub    esp,0xc
c001871c:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001871f:	68 34 60 02 c0       	push   0xc0026034
c0018724:	e8 9c 48 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0018729:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0018730:	e8 43 fe ff ff       	call   c0018578 <blockTask(TaskState)>
c0018735:	a1 24 93 02 c0       	mov    eax,ds:0xc0029324
c001873a:	83 c4 10             	add    esp,0x10
c001873d:	48                   	dec    eax
c001873e:	eb 8c                	jmp    c00186cc <Semaphore::acquire()+0x28>
c0018740:	c7 05 20 93 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029320,0x0
c001874a:	e8 31 fc ff ff       	call   c0018380 <schedule()>
c001874f:	eb 8f                	jmp    c00186e0 <Semaphore::acquire()+0x3c>
c0018751:	8d 76 00             	lea    esi,[esi+0x0]
c0018754:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018759:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001875c:	eb b6                	jmp    c0018714 <Semaphore::acquire()+0x70>
c001875e:	66 90                	xchg   ax,ax

c0018760 <taskReturned>:
c0018760:	83 ec 18             	sub    esp,0x18
c0018763:	68 54 60 02 c0       	push   0xc0026054
c0018768:	e8 b0 c5 ff ff       	call   c0014d1d <Krnl::panic(char const*)>
c001876d:	83 c4 10             	add    esp,0x10
c0018770:	83 ec 0c             	sub    esp,0xc
c0018773:	6a 02                	push   0x2
c0018775:	e8 fe fd ff ff       	call   c0018578 <blockTask(TaskState)>
c001877a:	fa                   	cli    
c001877b:	ff 05 28 93 02 c0    	inc    DWORD PTR ds:0xc0029328
c0018781:	e8 fa fb ff ff       	call   c0018380 <schedule()>
c0018786:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c001878b:	83 c4 10             	add    esp,0x10
c001878e:	48                   	dec    eax
c001878f:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c0018794:	85 c0                	test   eax,eax
c0018796:	75 d8                	jne    c0018770 <taskReturned+0x10>
c0018798:	fb                   	sti    
c0018799:	eb d5                	jmp    c0018770 <taskReturned+0x10>
c001879b:	90                   	nop

c001879c <Thr::processFromPID(int)>:
c001879c:	57                   	push   edi
c001879d:	56                   	push   esi
c001879e:	53                   	push   ebx
c001879f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00187a3:	fa                   	cli    
c00187a4:	ff 05 28 93 02 c0    	inc    DWORD PTR ds:0xc0029328
c00187aa:	83 ec 0c             	sub    esp,0xc
c00187ad:	68 44 93 02 c0       	push   0xc0029344
c00187b2:	e8 95 a4 00 00       	call   c0022c4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00187b7:	83 c4 10             	add    esp,0x10
c00187ba:	89 c7                	mov    edi,eax
c00187bc:	eb 16                	jmp    c00187d4 <Thr::processFromPID(int)+0x38>
c00187be:	66 90                	xchg   ax,ax
c00187c0:	83 ec 0c             	sub    esp,0xc
c00187c3:	68 44 93 02 c0       	push   0xc0029344
c00187c8:	e8 7f a4 00 00       	call   c0022c4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00187cd:	83 c4 10             	add    esp,0x10
c00187d0:	39 f8                	cmp    eax,edi
c00187d2:	74 4c                	je     c0018820 <Thr::processFromPID(int)+0x84>
c00187d4:	83 ec 0c             	sub    esp,0xc
c00187d7:	68 44 93 02 c0       	push   0xc0029344
c00187dc:	e8 6b a4 00 00       	call   c0022c4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00187e1:	c7 04 24 44 93 02 c0 	mov    DWORD PTR [esp],0xc0029344
c00187e8:	89 c3                	mov    ebx,eax
c00187ea:	e8 65 a4 00 00       	call   c0022c54 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00187ef:	58                   	pop    eax
c00187f0:	5a                   	pop    edx
c00187f1:	53                   	push   ebx
c00187f2:	68 44 93 02 c0       	push   0xc0029344
c00187f7:	e8 10 a5 00 00       	call   c0022d0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00187fc:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00187ff:	83 c4 10             	add    esp,0x10
c0018802:	39 30                	cmp    DWORD PTR [eax],esi
c0018804:	75 ba                	jne    c00187c0 <Thr::processFromPID(int)+0x24>
c0018806:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c001880b:	48                   	dec    eax
c001880c:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c0018811:	74 09                	je     c001881c <Thr::processFromPID(int)+0x80>
c0018813:	90                   	nop
c0018814:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018817:	5b                   	pop    ebx
c0018818:	5e                   	pop    esi
c0018819:	5f                   	pop    edi
c001881a:	c3                   	ret    
c001881b:	90                   	nop
c001881c:	fb                   	sti    
c001881d:	eb f5                	jmp    c0018814 <Thr::processFromPID(int)+0x78>
c001881f:	90                   	nop
c0018820:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c0018825:	48                   	dec    eax
c0018826:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c001882b:	75 07                	jne    c0018834 <Thr::processFromPID(int)+0x98>
c001882d:	fb                   	sti    
c001882e:	5b                   	pop    ebx
c001882f:	5e                   	pop    esi
c0018830:	5f                   	pop    edi
c0018831:	c3                   	ret    
c0018832:	66 90                	xchg   ax,ax
c0018834:	5b                   	pop    ebx
c0018835:	31 c0                	xor    eax,eax
c0018837:	5e                   	pop    esi
c0018838:	5f                   	pop    edi
c0018839:	c3                   	ret    
c001883a:	66 90                	xchg   ax,ax

c001883c <unblockTask(ThreadControlBlock*)>:
c001883c:	53                   	push   ebx
c001883d:	83 ec 08             	sub    esp,0x8
c0018840:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018844:	fa                   	cli    
c0018845:	ff 05 28 93 02 c0    	inc    DWORD PTR ds:0xc0029328
c001884b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001884e:	85 c0                	test   eax,eax
c0018850:	74 66                	je     c00188b8 <unblockTask(ThreadControlBlock*)+0x7c>
c0018852:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0018855:	48                   	dec    eax
c0018856:	74 38                	je     c0018890 <unblockTask(ThreadControlBlock*)+0x54>
c0018858:	83 ec 0c             	sub    esp,0xc
c001885b:	68 44 93 02 c0       	push   0xc0029344
c0018860:	e8 e7 a3 00 00       	call   c0022c4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018865:	83 c4 10             	add    esp,0x10
c0018868:	85 c0                	test   eax,eax
c001886a:	75 1c                	jne    c0018888 <unblockTask(ThreadControlBlock*)+0x4c>
c001886c:	eb 5e                	jmp    c00188cc <unblockTask(ThreadControlBlock*)+0x90>
c001886e:	66 90                	xchg   ax,ax
c0018870:	83 ec 08             	sub    esp,0x8
c0018873:	50                   	push   eax
c0018874:	68 44 93 02 c0       	push   0xc0029344
c0018879:	e8 7e a7 00 00       	call   c0022ffc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001887e:	83 c4 10             	add    esp,0x10
c0018881:	85 c0                	test   eax,eax
c0018883:	74 47                	je     c00188cc <unblockTask(ThreadControlBlock*)+0x90>
c0018885:	8d 76 00             	lea    esi,[esi+0x0]
c0018888:	39 c3                	cmp    ebx,eax
c001888a:	75 e4                	jne    c0018870 <unblockTask(ThreadControlBlock*)+0x34>
c001888c:	eb 12                	jmp    c00188a0 <unblockTask(ThreadControlBlock*)+0x64>
c001888e:	66 90                	xchg   ax,ax
c0018890:	83 ec 0c             	sub    esp,0xc
c0018893:	68 d7 5f 02 c0       	push   0xc0025fd7
c0018898:	e8 28 47 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001889d:	83 c4 10             	add    esp,0x10
c00188a0:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c00188a5:	48                   	dec    eax
c00188a6:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c00188ab:	75 03                	jne    c00188b0 <unblockTask(ThreadControlBlock*)+0x74>
c00188ad:	fb                   	sti    
c00188ae:	66 90                	xchg   ax,ax
c00188b0:	83 c4 08             	add    esp,0x8
c00188b3:	5b                   	pop    ebx
c00188b4:	c3                   	ret    
c00188b5:	8d 76 00             	lea    esi,[esi+0x0]
c00188b8:	83 ec 0c             	sub    esp,0xc
c00188bb:	68 c0 5f 02 c0       	push   0xc0025fc0
c00188c0:	e8 00 47 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00188c5:	83 c4 10             	add    esp,0x10
c00188c8:	eb d6                	jmp    c00188a0 <unblockTask(ThreadControlBlock*)+0x64>
c00188ca:	66 90                	xchg   ax,ax
c00188cc:	83 ec 08             	sub    esp,0x8
c00188cf:	53                   	push   ebx
c00188d0:	68 44 93 02 c0       	push   0xc0029344
c00188d5:	e8 32 a4 00 00       	call   c0022d0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00188da:	83 c4 10             	add    esp,0x10
c00188dd:	eb c1                	jmp    c00188a0 <unblockTask(ThreadControlBlock*)+0x64>
c00188df:	90                   	nop

c00188e0 <cleanupTerminatedTask(ThreadControlBlock*)>:
c00188e0:	55                   	push   ebp
c00188e1:	57                   	push   edi
c00188e2:	56                   	push   esi
c00188e3:	53                   	push   ebx
c00188e4:	83 ec 1c             	sub    esp,0x1c
c00188e7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00188eb:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00188ee:	8b b8 16 05 00 00    	mov    edi,DWORD PTR [eax+0x516]
c00188f4:	85 ff                	test   edi,edi
c00188f6:	7e 24                	jle    c001891c <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c00188f8:	31 f6                	xor    esi,esi
c00188fa:	66 90                	xchg   ax,ax
c00188fc:	83 ec 0c             	sub    esp,0xc
c00188ff:	ff b4 b0 1a 05 00 00 	push   DWORD PTR [eax+esi*4+0x51a]
c0018906:	46                   	inc    esi
c0018907:	e8 bb 13 ff ff       	call   c0009cc7 <free>
c001890c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001890f:	83 c4 10             	add    esp,0x10
c0018912:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0018918:	7f e2                	jg     c00188fc <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c001891a:	66 90                	xchg   ax,ax
c001891c:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0018926:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001892b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c001892e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0018931:	d3 c0                	rol    eax,cl
c0018933:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c001893a:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001893d:	89 f7                	mov    edi,esi
c001893f:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0018947:	0f 85 73 01 00 00    	jne    c0018ac0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c001894d:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0018953:	85 ed                	test   ebp,ebp
c0018955:	74 1d                	je     c0018974 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0018957:	83 ec 0c             	sub    esp,0xc
c001895a:	55                   	push   ebp
c001895b:	e8 62 c1 ff ff       	call   c0014ac2 <EnvVarContainer::~EnvVarContainer()>
c0018960:	59                   	pop    ecx
c0018961:	5e                   	pop    esi
c0018962:	6a 0c                	push   0xc
c0018964:	55                   	push   ebp
c0018965:	e8 7a 45 ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c001896a:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001896d:	83 c4 10             	add    esp,0x10
c0018970:	89 f7                	mov    edi,esi
c0018972:	66 90                	xchg   ax,ax
c0018974:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001897a:	85 c0                	test   eax,eax
c001897c:	0f 84 b2 00 00 00    	je     c0018a34 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c0018982:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0018985:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0018989:	31 c9                	xor    ecx,ecx
c001898b:	eb 17                	jmp    c00189a4 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c001898d:	8d 76 00             	lea    esi,[esi+0x0]
c0018990:	41                   	inc    ecx
c0018991:	83 f9 10             	cmp    ecx,0x10
c0018994:	0f 84 9a 00 00 00    	je     c0018a34 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c001899a:	66 90                	xchg   ax,ax
c001899c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00189a2:	66 90                	xchg   ax,ax
c00189a4:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c00189ab:	d3 fa                	sar    edx,cl
c00189ad:	83 e2 01             	and    edx,0x1
c00189b0:	74 de                	je     c0018990 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00189b2:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c00189b5:	01 d2                	add    edx,edx
c00189b7:	01 ca                	add    edx,ecx
c00189b9:	8d 14 92             	lea    edx,[edx+edx*4]
c00189bc:	01 d0                	add    eax,edx
c00189be:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00189c4:	83 fd 07             	cmp    ebp,0x7
c00189c7:	75 c7                	jne    c0018990 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00189c9:	05 40 02 00 00       	add    eax,0x240
c00189ce:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c00189d1:	83 fd ff             	cmp    ebp,0xffffffff
c00189d4:	0f 8c ee 00 00 00    	jl     c0018ac8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c00189da:	0f 84 ac 01 00 00    	je     c0018b8c <cleanupTerminatedTask(ThreadControlBlock*)+0x2ac>
c00189e0:	85 ed                	test   ebp,ebp
c00189e2:	0f 84 90 01 00 00    	je     c0018b78 <cleanupTerminatedTask(ThreadControlBlock*)+0x298>
c00189e8:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00189ea:	75 a4                	jne    c0018990 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00189ec:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00189f2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00189f6:	01 d0                	add    eax,edx
c00189f8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00189fc:	83 ec 0c             	sub    esp,0xc
c00189ff:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0018a05:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018a08:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018a0e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0018a15:	50                   	push   eax
c0018a16:	e8 21 fe ff ff       	call   c001883c <unblockTask(ThreadControlBlock*)>
c0018a1b:	83 c4 10             	add    esp,0x10
c0018a1e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0018a21:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018a25:	89 f7                	mov    edi,esi
c0018a27:	41                   	inc    ecx
c0018a28:	83 f9 10             	cmp    ecx,0x10
c0018a2b:	0f 85 6b ff ff ff    	jne    c001899c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0018a31:	8d 76 00             	lea    esi,[esi+0x0]
c0018a34:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0018a3a:	85 c0                	test   eax,eax
c0018a3c:	74 62                	je     c0018aa0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c0018a3e:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0018a44:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0018a4a:	74 54                	je     c0018aa0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c0018a4c:	83 ec 0c             	sub    esp,0xc
c0018a4f:	68 44 93 02 c0       	push   0xc0029344
c0018a54:	e8 f3 a1 00 00       	call   c0022c4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018a59:	c7 04 24 44 93 02 c0 	mov    DWORD PTR [esp],0xc0029344
c0018a60:	89 c7                	mov    edi,eax
c0018a62:	e8 c9 a1 00 00       	call   c0022c30 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018a67:	83 c4 10             	add    esp,0x10
c0018a6a:	84 c0                	test   al,al
c0018a6c:	0f 84 ce 00 00 00    	je     c0018b40 <cleanupTerminatedTask(ThreadControlBlock*)+0x260>
c0018a72:	66 90                	xchg   ax,ax
c0018a74:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018a77:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0018a7d:	85 d2                	test   edx,edx
c0018a7f:	74 0f                	je     c0018a90 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b0>
c0018a81:	83 ec 0c             	sub    esp,0xc
c0018a84:	8b 02                	mov    eax,DWORD PTR [edx]
c0018a86:	52                   	push   edx
c0018a87:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018a8a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018a8d:	83 c4 10             	add    esp,0x10
c0018a90:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0018a9a:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0018a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0018aa0:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0018aa6:	85 db                	test   ebx,ebx
c0018aa8:	74 16                	je     c0018ac0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c0018aaa:	83 ec 0c             	sub    esp,0xc
c0018aad:	53                   	push   ebx
c0018aae:	e8 a5 36 ff ff       	call   c000c158 <VAS::~VAS()>
c0018ab3:	58                   	pop    eax
c0018ab4:	5a                   	pop    edx
c0018ab5:	6a 14                	push   0x14
c0018ab7:	53                   	push   ebx
c0018ab8:	e8 27 44 ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c0018abd:	83 c4 10             	add    esp,0x10
c0018ac0:	83 c4 1c             	add    esp,0x1c
c0018ac3:	5b                   	pop    ebx
c0018ac4:	5e                   	pop    esi
c0018ac5:	5f                   	pop    edi
c0018ac6:	5d                   	pop    ebp
c0018ac7:	c3                   	ret    
c0018ac8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018acc:	83 ec 0c             	sub    esp,0xc
c0018acf:	68 88 60 02 c0       	push   0xc0026088
c0018ad4:	e8 44 c2 ff ff       	call   c0014d1d <Krnl::panic(char const*)>
c0018ad9:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0018adc:	83 c4 10             	add    esp,0x10
c0018adf:	89 f7                	mov    edi,esi
c0018ae1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018ae5:	e9 a6 fe ff ff       	jmp    c0018990 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018aea:	66 90                	xchg   ax,ax
c0018aec:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018af2:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0018af8:	75 1e                	jne    c0018b18 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0018afa:	83 ec 0c             	sub    esp,0xc
c0018afd:	68 f0 60 02 c0       	push   0xc00260f0
c0018b02:	e8 be 44 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0018b07:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018b0e:	e8 65 fa ff ff       	call   c0018578 <blockTask(TaskState)>
c0018b13:	83 c4 10             	add    esp,0x10
c0018b16:	66 90                	xchg   ax,ax
c0018b18:	83 ec 08             	sub    esp,0x8
c0018b1b:	56                   	push   esi
c0018b1c:	68 44 93 02 c0       	push   0xc0029344
c0018b21:	e8 e6 a1 00 00       	call   c0022d0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018b26:	c7 04 24 44 93 02 c0 	mov    DWORD PTR [esp],0xc0029344
c0018b2d:	e8 1a a1 00 00       	call   c0022c4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018b32:	83 c4 10             	add    esp,0x10
c0018b35:	39 f8                	cmp    eax,edi
c0018b37:	0f 84 37 ff ff ff    	je     c0018a74 <cleanupTerminatedTask(ThreadControlBlock*)+0x194>
c0018b3d:	8d 76 00             	lea    esi,[esi+0x0]
c0018b40:	83 ec 0c             	sub    esp,0xc
c0018b43:	68 44 93 02 c0       	push   0xc0029344
c0018b48:	e8 ff a0 00 00       	call   c0022c4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018b4d:	c7 04 24 44 93 02 c0 	mov    DWORD PTR [esp],0xc0029344
c0018b54:	89 c6                	mov    esi,eax
c0018b56:	e8 f9 a0 00 00       	call   c0022c54 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018b5b:	83 c4 10             	add    esp,0x10
c0018b5e:	39 f3                	cmp    ebx,esi
c0018b60:	74 b6                	je     c0018b18 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0018b62:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0018b65:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018b68:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0018b6e:	75 a8                	jne    c0018b18 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0018b70:	e9 77 ff ff ff       	jmp    c0018aec <cleanupTerminatedTask(ThreadControlBlock*)+0x20c>
c0018b75:	8d 76 00             	lea    esi,[esi+0x0]
c0018b78:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018b7c:	83 ec 0c             	sub    esp,0xc
c0018b7f:	68 bc 60 02 c0       	push   0xc00260bc
c0018b84:	e9 4b ff ff ff       	jmp    c0018ad4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0018b89:	8d 76 00             	lea    esi,[esi+0x0]
c0018b8c:	8b 36                	mov    esi,DWORD PTR [esi]
c0018b8e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018b92:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0018b95:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018b98:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0018b9e:	01 d7                	add    edi,edx
c0018ba0:	89 f8                	mov    eax,edi
c0018ba2:	e9 51 fe ff ff       	jmp    c00189f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x118>
c0018ba7:	90                   	nop

c0018ba8 <cleanerTaskFunction(void*)>:
c0018ba8:	53                   	push   ebx
c0018ba9:	83 ec 08             	sub    esp,0x8
c0018bac:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c0018bb1:	48                   	dec    eax
c0018bb2:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c0018bb7:	75 03                	jne    c0018bbc <cleanerTaskFunction(void*)+0x14>
c0018bb9:	fb                   	sti    
c0018bba:	66 90                	xchg   ax,ax
c0018bbc:	fa                   	cli    
c0018bbd:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c0018bc2:	80 3d 0c 93 02 c0 00 	cmp    BYTE PTR ds:0xc002930c,0x0
c0018bc9:	8d 50 01             	lea    edx,[eax+0x1]
c0018bcc:	89 15 28 93 02 c0    	mov    DWORD PTR ds:0xc0029328,edx
c0018bd2:	0f 84 ac 00 00 00    	je     c0018c84 <cleanerTaskFunction(void*)+0xdc>
c0018bd8:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c0018bdd:	85 c0                	test   eax,eax
c0018bdf:	75 03                	jne    c0018be4 <cleanerTaskFunction(void*)+0x3c>
c0018be1:	fb                   	sti    
c0018be2:	66 90                	xchg   ax,ax
c0018be4:	c6 05 0c 93 02 c0 00 	mov    BYTE PTR ds:0xc002930c,0x0
c0018beb:	fa                   	cli    
c0018bec:	ff 05 28 93 02 c0    	inc    DWORD PTR ds:0xc0029328
c0018bf2:	ff 05 24 93 02 c0    	inc    DWORD PTR ds:0xc0029324
c0018bf8:	fa                   	cli    
c0018bf9:	ff 05 28 93 02 c0    	inc    DWORD PTR ds:0xc0029328
c0018bff:	eb 2b                	jmp    c0018c2c <cleanerTaskFunction(void*)+0x84>
c0018c01:	8d 76 00             	lea    esi,[esi+0x0]
c0018c04:	83 ec 0c             	sub    esp,0xc
c0018c07:	68 2c 93 02 c0       	push   0xc002932c
c0018c0c:	e8 3b a0 00 00       	call   c0022c4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018c11:	c7 04 24 2c 93 02 c0 	mov    DWORD PTR [esp],0xc002932c
c0018c18:	89 c3                	mov    ebx,eax
c0018c1a:	e8 35 a0 00 00       	call   c0022c54 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018c1f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018c22:	e8 b9 fc ff ff       	call   c00188e0 <cleanupTerminatedTask(ThreadControlBlock*)>
c0018c27:	83 c4 10             	add    esp,0x10
c0018c2a:	66 90                	xchg   ax,ax
c0018c2c:	83 ec 0c             	sub    esp,0xc
c0018c2f:	68 2c 93 02 c0       	push   0xc002932c
c0018c34:	e8 f7 9f 00 00       	call   c0022c30 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018c39:	83 c4 10             	add    esp,0x10
c0018c3c:	84 c0                	test   al,al
c0018c3e:	74 c4                	je     c0018c04 <cleanerTaskFunction(void*)+0x5c>
c0018c40:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c0018c45:	48                   	dec    eax
c0018c46:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c0018c4b:	75 03                	jne    c0018c50 <cleanerTaskFunction(void*)+0xa8>
c0018c4d:	fb                   	sti    
c0018c4e:	66 90                	xchg   ax,ax
c0018c50:	a1 24 93 02 c0       	mov    eax,ds:0xc0029324
c0018c55:	48                   	dec    eax
c0018c56:	a3 24 93 02 c0       	mov    ds:0xc0029324,eax
c0018c5b:	0f 85 4b ff ff ff    	jne    c0018bac <cleanerTaskFunction(void*)+0x4>
c0018c61:	a1 20 93 02 c0       	mov    eax,ds:0xc0029320
c0018c66:	85 c0                	test   eax,eax
c0018c68:	0f 84 3e ff ff ff    	je     c0018bac <cleanerTaskFunction(void*)+0x4>
c0018c6e:	c7 05 20 93 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029320,0x0
c0018c78:	e8 03 f7 ff ff       	call   c0018380 <schedule()>
c0018c7d:	e9 2a ff ff ff       	jmp    c0018bac <cleanerTaskFunction(void*)+0x4>
c0018c82:	66 90                	xchg   ax,ax
c0018c84:	83 ec 0c             	sub    esp,0xc
c0018c87:	6a 02                	push   0x2
c0018c89:	e8 c2 f8 ff ff       	call   c0018550 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0018c8e:	83 c4 10             	add    esp,0x10
c0018c91:	e9 4e ff ff ff       	jmp    c0018be4 <cleanerTaskFunction(void*)+0x3c>
c0018c96:	66 90                	xchg   ax,ax

c0018c98 <terminateTask(int)>:
c0018c98:	83 ec 14             	sub    esp,0x14
c0018c9b:	fa                   	cli    
c0018c9c:	ff 05 28 93 02 c0    	inc    DWORD PTR ds:0xc0029328
c0018ca2:	ff 05 24 93 02 c0    	inc    DWORD PTR ds:0xc0029324
c0018ca8:	fa                   	cli    
c0018ca9:	ff 05 28 93 02 c0    	inc    DWORD PTR ds:0xc0029328
c0018caf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018cb3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018cb8:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0018cbb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018cc0:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0018cc3:	50                   	push   eax
c0018cc4:	68 2c 93 02 c0       	push   0xc002932c
c0018cc9:	e8 3e a0 00 00       	call   c0022d0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018cce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018cd3:	83 c4 10             	add    esp,0x10
c0018cd6:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0018cdd:	a1 08 93 02 c0       	mov    eax,ds:0xc0029308
c0018ce2:	85 c0                	test   eax,eax
c0018ce4:	74 5e                	je     c0018d44 <terminateTask(int)+0xac>
c0018ce6:	83 ec 0c             	sub    esp,0xc
c0018ce9:	c6 05 0c 93 02 c0 01 	mov    BYTE PTR ds:0xc002930c,0x1
c0018cf0:	50                   	push   eax
c0018cf1:	e8 46 fb ff ff       	call   c001883c <unblockTask(ThreadControlBlock*)>
c0018cf6:	83 c4 10             	add    esp,0x10
c0018cf9:	8d 76 00             	lea    esi,[esi+0x0]
c0018cfc:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c0018d01:	48                   	dec    eax
c0018d02:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c0018d07:	75 03                	jne    c0018d0c <terminateTask(int)+0x74>
c0018d09:	fb                   	sti    
c0018d0a:	66 90                	xchg   ax,ax
c0018d0c:	a1 24 93 02 c0       	mov    eax,ds:0xc0029324
c0018d11:	48                   	dec    eax
c0018d12:	a3 24 93 02 c0       	mov    ds:0xc0029324,eax
c0018d17:	75 0b                	jne    c0018d24 <terminateTask(int)+0x8c>
c0018d19:	83 3d 20 93 02 c0 00 	cmp    DWORD PTR ds:0xc0029320,0x0
c0018d20:	75 36                	jne    c0018d58 <terminateTask(int)+0xc0>
c0018d22:	66 90                	xchg   ax,ax
c0018d24:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c0018d29:	48                   	dec    eax
c0018d2a:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c0018d2f:	75 03                	jne    c0018d34 <terminateTask(int)+0x9c>
c0018d31:	fb                   	sti    
c0018d32:	66 90                	xchg   ax,ax
c0018d34:	fa                   	cli    
c0018d35:	ff 05 28 93 02 c0    	inc    DWORD PTR ds:0xc0029328
c0018d3b:	90                   	nop
c0018d3c:	e8 3f f6 ff ff       	call   c0018380 <schedule()>
c0018d41:	eb e1                	jmp    c0018d24 <terminateTask(int)+0x8c>
c0018d43:	90                   	nop
c0018d44:	83 ec 0c             	sub    esp,0xc
c0018d47:	68 ee 5f 02 c0       	push   0xc0025fee
c0018d4c:	e8 74 42 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0018d51:	83 c4 10             	add    esp,0x10
c0018d54:	eb a6                	jmp    c0018cfc <terminateTask(int)+0x64>
c0018d56:	66 90                	xchg   ax,ax
c0018d58:	c7 05 20 93 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029320,0x0
c0018d62:	eb d8                	jmp    c0018d3c <terminateTask(int)+0xa4>

c0018d64 <Thr::terminateFromIRQ(int)>:
c0018d64:	83 ec 18             	sub    esp,0x18
c0018d67:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018d6b:	e8 28 ff ff ff       	call   c0018c98 <terminateTask(int)>

c0018d70 <Semaphore::release()>:
c0018d70:	83 ec 0c             	sub    esp,0xc
c0018d73:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018d77:	fa                   	cli    
c0018d78:	a1 24 93 02 c0       	mov    eax,ds:0xc0029324
c0018d7d:	ff 05 28 93 02 c0    	inc    DWORD PTR ds:0xc0029328
c0018d83:	8d 48 01             	lea    ecx,[eax+0x1]
c0018d86:	89 0d 24 93 02 c0    	mov    DWORD PTR ds:0xc0029324,ecx
c0018d8c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0018d8f:	85 c9                	test   ecx,ecx
c0018d91:	74 41                	je     c0018dd4 <Semaphore::release()+0x64>
c0018d93:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0018d96:	83 ec 0c             	sub    esp,0xc
c0018d99:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0018d9c:	51                   	push   ecx
c0018d9d:	e8 9a fa ff ff       	call   c001883c <unblockTask(ThreadControlBlock*)>
c0018da2:	a1 24 93 02 c0       	mov    eax,ds:0xc0029324
c0018da7:	83 c4 10             	add    esp,0x10
c0018daa:	48                   	dec    eax
c0018dab:	90                   	nop
c0018dac:	a3 24 93 02 c0       	mov    ds:0xc0029324,eax
c0018db1:	85 c0                	test   eax,eax
c0018db3:	75 0b                	jne    c0018dc0 <Semaphore::release()+0x50>
c0018db5:	a1 20 93 02 c0       	mov    eax,ds:0xc0029320
c0018dba:	85 c0                	test   eax,eax
c0018dbc:	75 1e                	jne    c0018ddc <Semaphore::release()+0x6c>
c0018dbe:	66 90                	xchg   ax,ax
c0018dc0:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c0018dc5:	48                   	dec    eax
c0018dc6:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c0018dcb:	75 03                	jne    c0018dd0 <Semaphore::release()+0x60>
c0018dcd:	fb                   	sti    
c0018dce:	66 90                	xchg   ax,ax
c0018dd0:	83 c4 0c             	add    esp,0xc
c0018dd3:	c3                   	ret    
c0018dd4:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c0018dd7:	eb d3                	jmp    c0018dac <Semaphore::release()+0x3c>
c0018dd9:	8d 76 00             	lea    esi,[esi+0x0]
c0018ddc:	c7 05 20 93 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029320,0x0
c0018de6:	e8 95 f5 ff ff       	call   c0018380 <schedule()>
c0018deb:	eb d3                	jmp    c0018dc0 <Semaphore::release()+0x50>
c0018ded:	8d 76 00             	lea    esi,[esi+0x0]

c0018df0 <__static_initialization_and_destruction_0(int, int)>:
c0018df0:	83 ec 0c             	sub    esp,0xc
c0018df3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0018df8:	0f 85 8e 00 00 00    	jne    c0018e8c <__static_initialization_and_destruction_0(int, int)+0x9c>
c0018dfe:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0018e06:	0f 85 80 00 00 00    	jne    c0018e8c <__static_initialization_and_destruction_0(int, int)+0x9c>
c0018e0c:	83 ec 0c             	sub    esp,0xc
c0018e0f:	68 44 93 02 c0       	push   0xc0029344
c0018e14:	e8 9f a1 00 00       	call   c0022fb8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018e19:	83 c4 10             	add    esp,0x10
c0018e1c:	83 ec 04             	sub    esp,0x4
c0018e1f:	68 78 70 02 c0       	push   0xc0027078
c0018e24:	68 44 93 02 c0       	push   0xc0029344
c0018e29:	68 68 2f 02 c0       	push   0xc0022f68
c0018e2e:	e8 2b 40 ff ff       	call   c000ce5e <__cxa_atexit>
c0018e33:	83 c4 10             	add    esp,0x10
c0018e36:	83 ec 0c             	sub    esp,0xc
c0018e39:	68 38 93 02 c0       	push   0xc0029338
c0018e3e:	e8 75 a1 00 00       	call   c0022fb8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018e43:	83 c4 10             	add    esp,0x10
c0018e46:	83 ec 04             	sub    esp,0x4
c0018e49:	68 78 70 02 c0       	push   0xc0027078
c0018e4e:	68 38 93 02 c0       	push   0xc0029338
c0018e53:	68 68 2f 02 c0       	push   0xc0022f68
c0018e58:	e8 01 40 ff ff       	call   c000ce5e <__cxa_atexit>
c0018e5d:	83 c4 10             	add    esp,0x10
c0018e60:	83 ec 0c             	sub    esp,0xc
c0018e63:	68 2c 93 02 c0       	push   0xc002932c
c0018e68:	e8 4b a1 00 00       	call   c0022fb8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018e6d:	83 c4 10             	add    esp,0x10
c0018e70:	83 ec 04             	sub    esp,0x4
c0018e73:	68 78 70 02 c0       	push   0xc0027078
c0018e78:	68 2c 93 02 c0       	push   0xc002932c
c0018e7d:	68 68 2f 02 c0       	push   0xc0022f68
c0018e82:	e8 d7 3f ff ff       	call   c000ce5e <__cxa_atexit>
c0018e87:	83 c4 10             	add    esp,0x10
c0018e8a:	66 90                	xchg   ax,ax
c0018e8c:	90                   	nop
c0018e8d:	83 c4 0c             	add    esp,0xc
c0018e90:	c3                   	ret    
c0018e91:	8d 76 00             	lea    esi,[esi+0x0]

c0018e94 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0018e94:	83 ec 0c             	sub    esp,0xc
c0018e97:	83 ec 08             	sub    esp,0x8
c0018e9a:	68 ff ff 00 00       	push   0xffff
c0018e9f:	6a 01                	push   0x1
c0018ea1:	e8 4a ff ff ff       	call   c0018df0 <__static_initialization_and_destruction_0(int, int)>
c0018ea6:	83 c4 10             	add    esp,0x10
c0018ea9:	83 c4 0c             	add    esp,0xc
c0018eac:	c3                   	ret    

c0018ead <Vm::inbv(unsigned short)>:
c0018ead:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018eb1:	66 81 fa fe fe       	cmp    dx,0xfefe
c0018eb6:	75 06                	jne    c0018ebe <Vm::inbv(unsigned short)+0x11>
c0018eb8:	a0 8c 93 02 c0       	mov    al,ds:0xc002938c
c0018ebd:	c3                   	ret    
c0018ebe:	ec                   	in     al,dx
c0018ebf:	c3                   	ret    

c0018ec0 <Vm::outbv(unsigned short, unsigned char)>:
c0018ec0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018ec4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018ec8:	66 81 fa fe fe       	cmp    dx,0xfefe
c0018ecd:	75 25                	jne    c0018ef4 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0018ecf:	8b 0d 8c 93 02 c0    	mov    ecx,DWORD PTR ds:0xc002938c
c0018ed5:	8d 51 01             	lea    edx,[ecx+0x1]
c0018ed8:	88 81 a0 93 02 c0    	mov    BYTE PTR [ecx-0x3ffd6c60],al
c0018ede:	89 15 8c 93 02 c0    	mov    DWORD PTR ds:0xc002938c,edx
c0018ee4:	83 fa 20             	cmp    edx,0x20
c0018ee7:	75 0c                	jne    c0018ef5 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0018ee9:	c7 05 8c 93 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002938c,0x1f
c0018ef3:	c3                   	ret    
c0018ef4:	ee                   	out    dx,al
c0018ef5:	c3                   	ret    

c0018ef6 <Vm::realToLinear(unsigned short, unsigned short)>:
c0018ef6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018efb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018f00:	c1 e0 04             	shl    eax,0x4
c0018f03:	01 d0                	add    eax,edx
c0018f05:	c3                   	ret    

c0018f06 <Vm::getSegment(unsigned int)>:
c0018f06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018f0a:	c1 e8 10             	shr    eax,0x10
c0018f0d:	c3                   	ret    

c0018f0e <Vm::getOffset(unsigned int)>:
c0018f0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018f12:	c3                   	ret    

c0018f13 <Vm::mainloop2()>:
c0018f13:	83 ec 18             	sub    esp,0x18
c0018f16:	fa                   	cli    
c0018f17:	ff 05 28 93 02 c0    	inc    DWORD PTR ds:0xc0029328
c0018f1d:	6a 02                	push   0x2
c0018f1f:	c6 05 85 93 02 c0 01 	mov    BYTE PTR ds:0xc0029385,0x1
c0018f26:	e8 25 f6 ff ff       	call   c0018550 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0018f2b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f30:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0018f34:	52                   	push   edx
c0018f35:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0018f39:	52                   	push   edx
c0018f3a:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0018f3e:	52                   	push   edx
c0018f3f:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0018f43:	50                   	push   eax
c0018f44:	e8 e6 72 fe ff       	call   c000022f <goToVM86>
c0018f49:	83 c4 2c             	add    esp,0x2c
c0018f4c:	c3                   	ret    

c0018f4d <Vm::mainVm8086Loop(void*)>:
c0018f4d:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c0018f52:	48                   	dec    eax
c0018f53:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c0018f58:	75 01                	jne    c0018f5b <Vm::mainVm8086Loop(void*)+0xe>
c0018f5a:	fb                   	sti    
c0018f5b:	eb b6                	jmp    c0018f13 <Vm::mainloop2()>

c0018f5d <Vm::mainloop3(unsigned long)>:
c0018f5d:	83 ec 18             	sub    esp,0x18
c0018f60:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018f64:	fa                   	cli    
c0018f65:	ff 05 28 93 02 c0    	inc    DWORD PTR ds:0xc0029328
c0018f6b:	6a 02                	push   0x2
c0018f6d:	c6 05 84 93 02 c0 01 	mov    BYTE PTR ds:0xc0029384,0x1
c0018f74:	a3 80 93 02 c0       	mov    ds:0xc0029380,eax
c0018f79:	e8 d2 f5 ff ff       	call   c0018550 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0018f7e:	83 c4 1c             	add    esp,0x1c
c0018f81:	eb 90                	jmp    c0018f13 <Vm::mainloop2()>

c0018f83 <Vm::initialise8086()>:
c0018f83:	83 ec 0c             	sub    esp,0xc
c0018f86:	68 80 00 00 00       	push   0x80
c0018f8b:	6a 00                	push   0x0
c0018f8d:	68 4d 8f 01 c0       	push   0xc0018f4d
c0018f92:	ff 35 50 93 02 c0    	push   DWORD PTR ds:0xc0029350
c0018f98:	e8 c7 f1 ff ff       	call   c0018164 <Process::createThread(void (*)(void*), void*, int)>
c0018f9d:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0018fa4:	a3 88 93 02 c0       	mov    ds:0xc0029388,eax
c0018fa9:	68 00 01 00 00       	push   0x100
c0018fae:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c0018fb3:	6a 00                	push   0x0
c0018fb5:	6a 00                	push   0x0
c0018fb7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0018fbd:	e8 0a 36 ff ff       	call   c000c5cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018fc2:	83 c4 2c             	add    esp,0x2c
c0018fc5:	c3                   	ret    

c0018fc6 <Vm::finish8086()>:
c0018fc6:	53                   	push   ebx
c0018fc7:	83 ec 08             	sub    esp,0x8
c0018fca:	fa                   	cli    
c0018fcb:	ff 05 28 93 02 c0    	inc    DWORD PTR ds:0xc0029328
c0018fd1:	80 3d 84 93 02 c0 00 	cmp    BYTE PTR ds:0xc0029384,0x0
c0018fd8:	75 15                	jne    c0018fef <Vm::finish8086()+0x29>
c0018fda:	e8 a1 f3 ff ff       	call   c0018380 <schedule()>
c0018fdf:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c0018fe4:	48                   	dec    eax
c0018fe5:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c0018fea:	75 de                	jne    c0018fca <Vm::finish8086()+0x4>
c0018fec:	fb                   	sti    
c0018fed:	eb db                	jmp    c0018fca <Vm::finish8086()+0x4>
c0018fef:	83 ec 0c             	sub    esp,0xc
c0018ff2:	8b 1d 80 93 02 c0    	mov    ebx,DWORD PTR ds:0xc0029380
c0018ff8:	ff 35 88 93 02 c0    	push   DWORD PTR ds:0xc0029388
c0018ffe:	c6 05 84 93 02 c0 00 	mov    BYTE PTR ds:0xc0029384,0x0
c0019005:	e8 32 f8 ff ff       	call   c001883c <unblockTask(ThreadControlBlock*)>
c001900a:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c001900f:	83 c4 10             	add    esp,0x10
c0019012:	8d 50 ff             	lea    edx,[eax-0x1]
c0019015:	89 15 28 93 02 c0    	mov    DWORD PTR ds:0xc0029328,edx
c001901b:	85 d2                	test   edx,edx
c001901d:	75 01                	jne    c0019020 <Vm::finish8086()+0x5a>
c001901f:	fb                   	sti    
c0019020:	89 d8                	mov    eax,ebx
c0019022:	83 c4 08             	add    esp,0x8
c0019025:	5b                   	pop    ebx
c0019026:	c3                   	ret    

c0019027 <Vm::getOutput8086(unsigned char*)>:
c0019027:	57                   	push   edi
c0019028:	8b 0d 8c 93 02 c0    	mov    ecx,DWORD PTR ds:0xc002938c
c001902e:	56                   	push   esi
c001902f:	be a0 93 02 c0       	mov    esi,0xc00293a0
c0019034:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0019038:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001903a:	a1 8c 93 02 c0       	mov    eax,ds:0xc002938c
c001903f:	5e                   	pop    esi
c0019040:	c7 05 8c 93 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002938c,0x0
c001904a:	5f                   	pop    edi
c001904b:	c3                   	ret    

c001904c <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001904c:	55                   	push   ebp
c001904d:	57                   	push   edi
c001904e:	56                   	push   esi
c001904f:	53                   	push   ebx
c0019050:	83 ec 0c             	sub    esp,0xc
c0019053:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0019057:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001905b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001905f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019063:	fa                   	cli    
c0019064:	ff 05 28 93 02 c0    	inc    DWORD PTR ds:0xc0029328
c001906a:	80 3d 85 93 02 c0 00 	cmp    BYTE PTR ds:0xc0029385,0x0
c0019071:	75 15                	jne    c0019088 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0019073:	e8 08 f3 ff ff       	call   c0018380 <schedule()>
c0019078:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c001907d:	48                   	dec    eax
c001907e:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c0019083:	75 de                	jne    c0019063 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0019085:	fb                   	sti    
c0019086:	eb db                	jmp    c0019063 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0019088:	a1 88 93 02 c0       	mov    eax,ds:0xc0029388
c001908d:	c7 05 8c 93 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002938c,0x0
c0019097:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c001909b:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c001909f:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00190a3:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00190a7:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00190ab:	0f b7 ff             	movzx  edi,di
c00190ae:	0f b7 f6             	movzx  esi,si
c00190b1:	50                   	push   eax
c00190b2:	6a 20                	push   0x20
c00190b4:	6a 00                	push   0x0
c00190b6:	68 a0 93 02 c0       	push   0xc00293a0
c00190bb:	e8 bc 75 fe ff       	call   c000067c <memset>
c00190c0:	5a                   	pop    edx
c00190c1:	59                   	pop    ecx
c00190c2:	57                   	push   edi
c00190c3:	56                   	push   esi
c00190c4:	e8 2d fe ff ff       	call   c0018ef6 <Vm::realToLinear(unsigned short, unsigned short)>
c00190c9:	83 c4 10             	add    esp,0x10
c00190cc:	89 c7                	mov    edi,eax
c00190ce:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00190d2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00190d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00190d8:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c00190dd:	c6 05 85 93 02 c0 00 	mov    BYTE PTR ds:0xc0029385,0x0
c00190e4:	48                   	dec    eax
c00190e5:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c00190ea:	75 01                	jne    c00190ed <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c00190ec:	fb                   	sti    
c00190ed:	83 ec 0c             	sub    esp,0xc
c00190f0:	ff 35 88 93 02 c0    	push   DWORD PTR ds:0xc0029388
c00190f6:	e8 41 f7 ff ff       	call   c001883c <unblockTask(ThreadControlBlock*)>
c00190fb:	83 c4 1c             	add    esp,0x1c
c00190fe:	b0 01                	mov    al,0x1
c0019100:	5b                   	pop    ebx
c0019101:	5e                   	pop    esi
c0019102:	5f                   	pop    edi
c0019103:	5d                   	pop    ebp
c0019104:	c3                   	ret    

c0019105 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0019105:	55                   	push   ebp
c0019106:	57                   	push   edi
c0019107:	56                   	push   esi
c0019108:	53                   	push   ebx
c0019109:	83 ec 2c             	sub    esp,0x2c
c001910c:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0019110:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019114:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0019118:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001911c:	fa                   	cli    
c001911d:	ff 05 28 93 02 c0    	inc    DWORD PTR ds:0xc0029328
c0019123:	0f b6 35 85 93 02 c0 	movzx  esi,BYTE PTR ds:0xc0029385
c001912a:	89 f0                	mov    eax,esi
c001912c:	84 c0                	test   al,al
c001912e:	75 1d                	jne    c001914d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0019130:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019134:	e8 47 f2 ff ff       	call   c0018380 <schedule()>
c0019139:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c001913e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019142:	48                   	dec    eax
c0019143:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c0019148:	75 d2                	jne    c001911c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001914a:	fb                   	sti    
c001914b:	eb cf                	jmp    c001911c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001914d:	a1 88 93 02 c0       	mov    eax,ds:0xc0029388
c0019152:	c7 05 8c 93 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002938c,0x0
c001915c:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0019160:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0019164:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0019168:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c001916c:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0019170:	50                   	push   eax
c0019171:	6a 20                	push   0x20
c0019173:	6a 00                	push   0x0
c0019175:	68 a0 93 02 c0       	push   0xc00293a0
c001917a:	e8 fd 74 fe ff       	call   c000067c <memset>
c001917f:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0019186:	e8 2c 0b ff ff       	call   c0009cb7 <malloc>
c001918b:	83 c4 0c             	add    esp,0xc
c001918e:	89 c3                	mov    ebx,eax
c0019190:	ff 35 50 93 02 c0    	push   DWORD PTR ds:0xc0029350
c0019196:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001919a:	50                   	push   eax
c001919b:	e8 90 43 ff ff       	call   c000d530 <File::File(char const*, Process*)>
c00191a0:	83 c4 10             	add    esp,0x10
c00191a3:	85 db                	test   ebx,ebx
c00191a5:	75 0a                	jne    c00191b1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c00191a7:	83 ec 0c             	sub    esp,0xc
c00191aa:	68 18 61 02 c0       	push   0xc0026118
c00191af:	eb 3e                	jmp    c00191ef <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00191b1:	50                   	push   eax
c00191b2:	8d 44 24 17          	lea    eax,[esp+0x17]
c00191b6:	50                   	push   eax
c00191b7:	8d 44 24 20          	lea    eax,[esp+0x20]
c00191bb:	50                   	push   eax
c00191bc:	53                   	push   ebx
c00191bd:	e8 f4 46 ff ff       	call   c000d8b6 <File::stat(unsigned long long*, bool*)>
c00191c2:	83 c4 10             	add    esp,0x10
c00191c5:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c00191ca:	74 0a                	je     c00191d6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c00191cc:	83 ec 0c             	sub    esp,0xc
c00191cf:	68 2c 61 02 c0       	push   0xc002612c
c00191d4:	eb 19                	jmp    c00191ef <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00191d6:	51                   	push   ecx
c00191d7:	51                   	push   ecx
c00191d8:	6a 01                	push   0x1
c00191da:	53                   	push   ebx
c00191db:	e8 2a 44 ff ff       	call   c000d60a <File::open(FileOpenMode)>
c00191e0:	83 c4 10             	add    esp,0x10
c00191e3:	85 c0                	test   eax,eax
c00191e5:	74 24                	je     c001920b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c00191e7:	83 ec 0c             	sub    esp,0xc
c00191ea:	68 45 61 02 c0       	push   0xc0026145
c00191ef:	e8 29 bb ff ff       	call   c0014d1d <Krnl::panic(char const*)>
c00191f4:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c00191f9:	83 c4 10             	add    esp,0x10
c00191fc:	48                   	dec    eax
c00191fd:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c0019202:	85 c0                	test   eax,eax
c0019204:	75 01                	jne    c0019207 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c0019206:	fb                   	sti    
c0019207:	31 f6                	xor    esi,esi
c0019209:	eb 58                	jmp    c0019263 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001920b:	0f b7 ed             	movzx  ebp,bp
c001920e:	50                   	push   eax
c001920f:	0f b7 ff             	movzx  edi,di
c0019212:	50                   	push   eax
c0019213:	55                   	push   ebp
c0019214:	57                   	push   edi
c0019215:	e8 dc fc ff ff       	call   c0018ef6 <Vm::realToLinear(unsigned short, unsigned short)>
c001921a:	5a                   	pop    edx
c001921b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001921d:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019221:	51                   	push   ecx
c0019222:	50                   	push   eax
c0019223:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019227:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001922b:	53                   	push   ebx
c001922c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001922f:	83 c4 14             	add    esp,0x14
c0019232:	53                   	push   ebx
c0019233:	e8 30 44 ff ff       	call   c000d668 <File::close()>
c0019238:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c001923d:	83 c4 10             	add    esp,0x10
c0019240:	48                   	dec    eax
c0019241:	c6 05 85 93 02 c0 00 	mov    BYTE PTR ds:0xc0029385,0x0
c0019248:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c001924d:	85 c0                	test   eax,eax
c001924f:	75 01                	jne    c0019252 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0019251:	fb                   	sti    
c0019252:	83 ec 0c             	sub    esp,0xc
c0019255:	ff 35 88 93 02 c0    	push   DWORD PTR ds:0xc0029388
c001925b:	e8 dc f5 ff ff       	call   c001883c <unblockTask(ThreadControlBlock*)>
c0019260:	83 c4 10             	add    esp,0x10
c0019263:	83 c4 2c             	add    esp,0x2c
c0019266:	89 f0                	mov    eax,esi
c0019268:	5b                   	pop    ebx
c0019269:	5e                   	pop    esi
c001926a:	5f                   	pop    edi
c001926b:	5d                   	pop    ebp
c001926c:	c3                   	ret    

c001926d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001926d:	57                   	push   edi
c001926e:	56                   	push   esi
c001926f:	53                   	push   ebx
c0019270:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019274:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019278:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001927c:	83 e8 06             	sub    eax,0x6
c001927f:	0f b7 c0             	movzx  eax,ax
c0019282:	50                   	push   eax
c0019283:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0019288:	50                   	push   eax
c0019289:	e8 68 fc ff ff       	call   c0018ef6 <Vm::realToLinear(unsigned short, unsigned short)>
c001928e:	5a                   	pop    edx
c001928f:	5e                   	pop    esi
c0019290:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0019293:	8d 56 fa             	lea    edx,[esi-0x6]
c0019296:	81 e2 ff ff 00 00    	and    edx,0xffff
c001929c:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001929f:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c00192a2:	83 c2 02             	add    edx,0x2
c00192a5:	66 89 10             	mov    WORD PTR [eax],dx
c00192a8:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c00192ab:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00192af:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c00192b2:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00192b6:	89 d6                	mov    esi,edx
c00192b8:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00192be:	66 81 e6 ff fd       	and    si,0xfdff
c00192c3:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c00192c7:	74 07                	je     c00192d0 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c00192c9:	89 d6                	mov    esi,edx
c00192cb:	66 81 ce 00 02       	or     si,0x200
c00192d0:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c00192d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00192d9:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00192dd:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c00192e5:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c00192e8:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c00192f0:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c00192f3:	5b                   	pop    ebx
c00192f4:	5e                   	pop    esi
c00192f5:	5f                   	pop    edi
c00192f6:	c3                   	ret    

c00192f7 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00192f7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00192fc:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019301:	c1 e0 04             	shl    eax,0x4
c0019304:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0019307:	c3                   	ret    

c0019308 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0019308:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001930d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019312:	c1 e0 04             	shl    eax,0x4
c0019315:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0019319:	c3                   	ret    

c001931a <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001931a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001931f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019324:	c1 e0 04             	shl    eax,0x4
c0019327:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001932a:	c3                   	ret    

c001932b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001932b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019330:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019335:	c1 e0 04             	shl    eax,0x4
c0019338:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001933c:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001933f:	c3                   	ret    

c0019340 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0019340:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019345:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001934a:	c1 e0 04             	shl    eax,0x4
c001934d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019351:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0019355:	c3                   	ret    

c0019356 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0019356:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001935b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019360:	c1 e0 04             	shl    eax,0x4
c0019363:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019367:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001936a:	c3                   	ret    

c001936b <Vm::faultHandler(regs*)>:
c001936b:	55                   	push   ebp
c001936c:	57                   	push   edi
c001936d:	56                   	push   esi
c001936e:	53                   	push   ebx
c001936f:	83 ec 1c             	sub    esp,0x1c
c0019372:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019376:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0019379:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001937d:	0f b7 f8             	movzx  edi,ax
c0019380:	52                   	push   edx
c0019381:	0f b7 c0             	movzx  eax,ax
c0019384:	50                   	push   eax
c0019385:	e8 6c fb ff ff       	call   c0018ef6 <Vm::realToLinear(unsigned short, unsigned short)>
c001938a:	5a                   	pop    edx
c001938b:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001938e:	59                   	pop    ecx
c001938f:	89 c1                	mov    ecx,eax
c0019391:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019394:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019398:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001939d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00193a1:	0f b7 c5             	movzx  eax,bp
c00193a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00193a8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00193ac:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00193b0:	e8 41 fb ff ff       	call   c0018ef6 <Vm::realToLinear(unsigned short, unsigned short)>
c00193b5:	5e                   	pop    esi
c00193b6:	be 06 00 00 00       	mov    esi,0x6
c00193bb:	5a                   	pop    edx
c00193bc:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c00193c1:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c00193c6:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00193c9:	80 fa 9d             	cmp    dl,0x9d
c00193cc:	0f 84 2c 02 00 00    	je     c00195fe <Vm::faultHandler(regs*)+0x293>
c00193d2:	0f 87 91 00 00 00    	ja     c0019469 <Vm::faultHandler(regs*)+0xfe>
c00193d8:	80 fa 66             	cmp    dl,0x66
c00193db:	0f 84 98 01 00 00    	je     c0019579 <Vm::faultHandler(regs*)+0x20e>
c00193e1:	77 47                	ja     c001942a <Vm::faultHandler(regs*)+0xbf>
c00193e3:	80 fa 36             	cmp    dl,0x36
c00193e6:	0f 84 80 01 00 00    	je     c001956c <Vm::faultHandler(regs*)+0x201>
c00193ec:	77 1a                	ja     c0019408 <Vm::faultHandler(regs*)+0x9d>
c00193ee:	80 fa 26             	cmp    dl,0x26
c00193f1:	0f 84 4e 01 00 00    	je     c0019545 <Vm::faultHandler(regs*)+0x1da>
c00193f7:	80 fa 2e             	cmp    dl,0x2e
c00193fa:	0f 85 e2 05 00 00    	jne    c00199e2 <Vm::faultHandler(regs*)+0x677>
c0019400:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019403:	31 f6                	xor    esi,esi
c0019405:	41                   	inc    ecx
c0019406:	eb be                	jmp    c00193c6 <Vm::faultHandler(regs*)+0x5b>
c0019408:	80 fa 64             	cmp    dl,0x64
c001940b:	0f 84 41 01 00 00    	je     c0019552 <Vm::faultHandler(regs*)+0x1e7>
c0019411:	0f 87 48 01 00 00    	ja     c001955f <Vm::faultHandler(regs*)+0x1f4>
c0019417:	80 fa 3e             	cmp    dl,0x3e
c001941a:	0f 85 c2 05 00 00    	jne    c00199e2 <Vm::faultHandler(regs*)+0x677>
c0019420:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019423:	be 01 00 00 00       	mov    esi,0x1
c0019428:	eb db                	jmp    c0019405 <Vm::faultHandler(regs*)+0x9a>
c001942a:	80 fa 6d             	cmp    dl,0x6d
c001942d:	0f 84 ec 02 00 00    	je     c001971f <Vm::faultHandler(regs*)+0x3b4>
c0019433:	77 17                	ja     c001944c <Vm::faultHandler(regs*)+0xe1>
c0019435:	80 fa 67             	cmp    dl,0x67
c0019438:	0f 84 48 01 00 00    	je     c0019586 <Vm::faultHandler(regs*)+0x21b>
c001943e:	80 fa 6c             	cmp    dl,0x6c
c0019441:	0f 84 69 02 00 00    	je     c00196b0 <Vm::faultHandler(regs*)+0x345>
c0019447:	e9 96 05 00 00       	jmp    c00199e2 <Vm::faultHandler(regs*)+0x677>
c001944c:	80 fa 6f             	cmp    dl,0x6f
c001944f:	0f 84 f4 03 00 00    	je     c0019849 <Vm::faultHandler(regs*)+0x4de>
c0019455:	0f 82 59 03 00 00    	jb     c00197b4 <Vm::faultHandler(regs*)+0x449>
c001945b:	80 fa 9c             	cmp    dl,0x9c
c001945e:	0f 84 2f 01 00 00    	je     c0019593 <Vm::faultHandler(regs*)+0x228>
c0019464:	e9 79 05 00 00       	jmp    c00199e2 <Vm::faultHandler(regs*)+0x677>
c0019469:	80 fa ec             	cmp    dl,0xec
c001946c:	0f 84 14 05 00 00    	je     c0019986 <Vm::faultHandler(regs*)+0x61b>
c0019472:	77 7b                	ja     c00194ef <Vm::faultHandler(regs*)+0x184>
c0019474:	80 fa e4             	cmp    dl,0xe4
c0019477:	0f 84 93 04 00 00    	je     c0019910 <Vm::faultHandler(regs*)+0x5a5>
c001947d:	77 53                	ja     c00194d2 <Vm::faultHandler(regs*)+0x167>
c001947f:	80 fa cd             	cmp    dl,0xcd
c0019482:	0f 84 d9 01 00 00    	je     c0019661 <Vm::faultHandler(regs*)+0x2f6>
c0019488:	80 fa cf             	cmp    dl,0xcf
c001948b:	0f 85 51 05 00 00    	jne    c00199e2 <Vm::faultHandler(regs*)+0x677>
c0019491:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0019494:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0019497:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001949b:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001949e:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c00194a2:	81 ca 00 02 02 00    	or     edx,0x20200
c00194a8:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00194ab:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00194af:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00194b5:	66 c1 e8 09          	shr    ax,0x9
c00194b9:	83 e0 01             	and    eax,0x1
c00194bc:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00194bf:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00194c2:	83 c0 06             	add    eax,0x6
c00194c5:	25 ff ff 00 00       	and    eax,0xffff
c00194ca:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00194cd:	e9 0c 05 00 00       	jmp    c00199de <Vm::faultHandler(regs*)+0x673>
c00194d2:	80 fa e6             	cmp    dl,0xe6
c00194d5:	0f 84 7f 04 00 00    	je     c001995a <Vm::faultHandler(regs*)+0x5ef>
c00194db:	0f 82 4b 04 00 00    	jb     c001992c <Vm::faultHandler(regs*)+0x5c1>
c00194e1:	80 fa e7             	cmp    dl,0xe7
c00194e4:	0f 84 87 04 00 00    	je     c0019971 <Vm::faultHandler(regs*)+0x606>
c00194ea:	e9 f3 04 00 00       	jmp    c00199e2 <Vm::faultHandler(regs*)+0x677>
c00194ef:	80 fa ef             	cmp    dl,0xef
c00194f2:	0f 84 d1 04 00 00    	je     c00199c9 <Vm::faultHandler(regs*)+0x65e>
c00194f8:	77 28                	ja     c0019522 <Vm::faultHandler(regs*)+0x1b7>
c00194fa:	80 fa ed             	cmp    dl,0xed
c00194fd:	0f 84 9f 04 00 00    	je     c00199a2 <Vm::faultHandler(regs*)+0x637>
c0019503:	80 fa ee             	cmp    dl,0xee
c0019506:	0f 85 d6 04 00 00    	jne    c00199e2 <Vm::faultHandler(regs*)+0x677>
c001950c:	50                   	push   eax
c001950d:	50                   	push   eax
c001950e:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0019512:	50                   	push   eax
c0019513:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019517:	50                   	push   eax
c0019518:	e8 a3 f9 ff ff       	call   c0018ec0 <Vm::outbv(unsigned short, unsigned char)>
c001951d:	e9 9f 04 00 00       	jmp    c00199c1 <Vm::faultHandler(regs*)+0x656>
c0019522:	80 fa fa             	cmp    dl,0xfa
c0019525:	0f 84 69 01 00 00    	je     c0019694 <Vm::faultHandler(regs*)+0x329>
c001952b:	80 fa fb             	cmp    dl,0xfb
c001952e:	0f 84 6e 01 00 00    	je     c00196a2 <Vm::faultHandler(regs*)+0x337>
c0019534:	80 fa f3             	cmp    dl,0xf3
c0019537:	0f 85 a5 04 00 00    	jne    c00199e2 <Vm::faultHandler(regs*)+0x677>
c001953d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019540:	e9 c0 fe ff ff       	jmp    c0019405 <Vm::faultHandler(regs*)+0x9a>
c0019545:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019548:	be 02 00 00 00       	mov    esi,0x2
c001954d:	e9 b3 fe ff ff       	jmp    c0019405 <Vm::faultHandler(regs*)+0x9a>
c0019552:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019555:	be 03 00 00 00       	mov    esi,0x3
c001955a:	e9 a6 fe ff ff       	jmp    c0019405 <Vm::faultHandler(regs*)+0x9a>
c001955f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019562:	be 04 00 00 00       	mov    esi,0x4
c0019567:	e9 99 fe ff ff       	jmp    c0019405 <Vm::faultHandler(regs*)+0x9a>
c001956c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001956f:	be 05 00 00 00       	mov    esi,0x5
c0019574:	e9 8c fe ff ff       	jmp    c0019405 <Vm::faultHandler(regs*)+0x9a>
c0019579:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001957c:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0019581:	e9 7f fe ff ff       	jmp    c0019405 <Vm::faultHandler(regs*)+0x9a>
c0019586:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019589:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001958e:	e9 72 fe ff ff       	jmp    c0019405 <Vm::faultHandler(regs*)+0x9a>
c0019593:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0019596:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001959a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001959f:	74 30                	je     c00195d1 <Vm::faultHandler(regs*)+0x266>
c00195a1:	83 e9 04             	sub    ecx,0x4
c00195a4:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00195aa:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00195b0:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00195b3:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00195b6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00195bc:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00195c0:	0f 84 15 04 00 00    	je     c00199db <Vm::faultHandler(regs*)+0x670>
c00195c6:	80 ce 02             	or     dh,0x2
c00195c9:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00195cc:	e9 0a 04 00 00       	jmp    c00199db <Vm::faultHandler(regs*)+0x670>
c00195d1:	83 e9 02             	sub    ecx,0x2
c00195d4:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00195da:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00195dd:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00195e1:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00195e7:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00195eb:	74 05                	je     c00195f2 <Vm::faultHandler(regs*)+0x287>
c00195ed:	80 ce 02             	or     dh,0x2
c00195f0:	eb 03                	jmp    c00195f5 <Vm::faultHandler(regs*)+0x28a>
c00195f2:	80 e6 fd             	and    dh,0xfd
c00195f5:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00195f9:	e9 dd 03 00 00       	jmp    c00199db <Vm::faultHandler(regs*)+0x670>
c00195fe:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019603:	74 2a                	je     c001962f <Vm::faultHandler(regs*)+0x2c4>
c0019605:	8b 10                	mov    edx,DWORD PTR [eax]
c0019607:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001960d:	81 ca 00 02 02 00    	or     edx,0x20200
c0019613:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019616:	8b 00                	mov    eax,DWORD PTR [eax]
c0019618:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001961e:	c1 e8 09             	shr    eax,0x9
c0019621:	83 e0 01             	and    eax,0x1
c0019624:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0019627:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001962a:	83 c0 04             	add    eax,0x4
c001962d:	eb 25                	jmp    c0019654 <Vm::faultHandler(regs*)+0x2e9>
c001962f:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0019632:	81 ca 00 02 02 00    	or     edx,0x20200
c0019638:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001963b:	66 8b 00             	mov    ax,WORD PTR [eax]
c001963e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019644:	66 c1 e8 09          	shr    ax,0x9
c0019648:	83 e0 01             	and    eax,0x1
c001964b:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001964e:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019651:	83 c0 02             	add    eax,0x2
c0019654:	25 ff ff 00 00       	and    eax,0xffff
c0019659:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001965c:	e9 7a 03 00 00       	jmp    c00199db <Vm::faultHandler(regs*)+0x670>
c0019661:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019665:	3c ee                	cmp    al,0xee
c0019667:	75 10                	jne    c0019679 <Vm::faultHandler(regs*)+0x30e>
c0019669:	83 ec 0c             	sub    esp,0xc
c001966c:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001966f:	e8 e9 f8 ff ff       	call   c0018f5d <Vm::mainloop3(unsigned long)>
c0019674:	e9 4b 03 00 00       	jmp    c00199c4 <Vm::faultHandler(regs*)+0x659>
c0019679:	83 ec 0c             	sub    esp,0xc
c001967c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019680:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019684:	51                   	push   ecx
c0019685:	50                   	push   eax
c0019686:	53                   	push   ebx
c0019687:	e8 e1 fb ff ff       	call   c001926d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001968c:	83 c4 20             	add    esp,0x20
c001968f:	e9 4a 03 00 00       	jmp    c00199de <Vm::faultHandler(regs*)+0x673>
c0019694:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019699:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001969d:	e9 39 03 00 00       	jmp    c00199db <Vm::faultHandler(regs*)+0x670>
c00196a2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00196a7:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c00196ab:	e9 2b 03 00 00       	jmp    c00199db <Vm::faultHandler(regs*)+0x670>
c00196b0:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00196b3:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00196b8:	74 2b                	je     c00196e5 <Vm::faultHandler(regs*)+0x37a>
c00196ba:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c00196c1:	76 22                	jbe    c00196e5 <Vm::faultHandler(regs*)+0x37a>
c00196c3:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00196c7:	50                   	push   eax
c00196c8:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00196cc:	50                   	push   eax
c00196cd:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00196d1:	50                   	push   eax
c00196d2:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00196d6:	50                   	push   eax
c00196d7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00196db:	50                   	push   eax
c00196dc:	6a 6c                	push   0x6c
c00196de:	6a 6c                	push   0x6c
c00196e0:	e9 b9 01 00 00       	jmp    c001989e <Vm::faultHandler(regs*)+0x533>
c00196e5:	83 ec 0c             	sub    esp,0xc
c00196e8:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00196ec:	0f b7 f6             	movzx  esi,si
c00196ef:	50                   	push   eax
c00196f0:	e8 b8 f7 ff ff       	call   c0018ead <Vm::inbv(unsigned short)>
c00196f5:	83 c4 0c             	add    esp,0xc
c00196f8:	0f b6 c0             	movzx  eax,al
c00196fb:	50                   	push   eax
c00196fc:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0019700:	50                   	push   eax
c0019701:	56                   	push   esi
c0019702:	e8 24 fc ff ff       	call   c001932b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0019707:	83 c4 10             	add    esp,0x10
c001970a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001970d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019711:	74 03                	je     c0019716 <Vm::faultHandler(regs*)+0x3ab>
c0019713:	48                   	dec    eax
c0019714:	eb 01                	jmp    c0019717 <Vm::faultHandler(regs*)+0x3ac>
c0019716:	40                   	inc    eax
c0019717:	0f b7 c0             	movzx  eax,ax
c001971a:	e9 8d 00 00 00       	jmp    c00197ac <Vm::faultHandler(regs*)+0x441>
c001971f:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0019722:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019725:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001972a:	74 29                	je     c0019755 <Vm::faultHandler(regs*)+0x3ea>
c001972c:	3d ff ff 00 00       	cmp    eax,0xffff
c0019731:	76 22                	jbe    c0019755 <Vm::faultHandler(regs*)+0x3ea>
c0019733:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019737:	50                   	push   eax
c0019738:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001973c:	50                   	push   eax
c001973d:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019741:	50                   	push   eax
c0019742:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019746:	50                   	push   eax
c0019747:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001974b:	50                   	push   eax
c001974c:	6a 6d                	push   0x6d
c001974e:	6a 6d                	push   0x6d
c0019750:	e9 49 01 00 00       	jmp    c001989e <Vm::faultHandler(regs*)+0x533>
c0019755:	0f b7 c8             	movzx  ecx,ax
c0019758:	0f b7 f6             	movzx  esi,si
c001975b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001975e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019763:	74 20                	je     c0019785 <Vm::faultHandler(regs*)+0x41a>
c0019765:	ed                   	in     eax,dx
c0019766:	55                   	push   ebp
c0019767:	50                   	push   eax
c0019768:	51                   	push   ecx
c0019769:	56                   	push   esi
c001976a:	e8 e7 fb ff ff       	call   c0019356 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001976f:	83 c4 10             	add    esp,0x10
c0019772:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019775:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019779:	74 05                	je     c0019780 <Vm::faultHandler(regs*)+0x415>
c001977b:	83 e8 04             	sub    eax,0x4
c001977e:	eb 27                	jmp    c00197a7 <Vm::faultHandler(regs*)+0x43c>
c0019780:	83 c0 04             	add    eax,0x4
c0019783:	eb 22                	jmp    c00197a7 <Vm::faultHandler(regs*)+0x43c>
c0019785:	66 ed                	in     ax,dx
c0019787:	0f b7 c0             	movzx  eax,ax
c001978a:	57                   	push   edi
c001978b:	50                   	push   eax
c001978c:	51                   	push   ecx
c001978d:	56                   	push   esi
c001978e:	e8 ad fb ff ff       	call   c0019340 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0019793:	83 c4 10             	add    esp,0x10
c0019796:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019799:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001979d:	74 05                	je     c00197a4 <Vm::faultHandler(regs*)+0x439>
c001979f:	83 e8 02             	sub    eax,0x2
c00197a2:	eb 03                	jmp    c00197a7 <Vm::faultHandler(regs*)+0x43c>
c00197a4:	83 c0 02             	add    eax,0x2
c00197a7:	25 ff ff 00 00       	and    eax,0xffff
c00197ac:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00197af:	e9 27 02 00 00       	jmp    c00199db <Vm::faultHandler(regs*)+0x670>
c00197b4:	8d 46 ff             	lea    eax,[esi-0x1]
c00197b7:	3c 05                	cmp    al,0x5
c00197b9:	77 24                	ja     c00197df <Vm::faultHandler(regs*)+0x474>
c00197bb:	0f b6 c0             	movzx  eax,al
c00197be:	ff 24 85 b8 61 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd9e48]
c00197c5:	0f b7 fd             	movzx  edi,bp
c00197c8:	eb 15                	jmp    c00197df <Vm::faultHandler(regs*)+0x474>
c00197ca:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c00197ce:	eb 0f                	jmp    c00197df <Vm::faultHandler(regs*)+0x474>
c00197d0:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c00197d4:	eb 09                	jmp    c00197df <Vm::faultHandler(regs*)+0x474>
c00197d6:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c00197da:	eb 03                	jmp    c00197df <Vm::faultHandler(regs*)+0x474>
c00197dc:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c00197df:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00197e2:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00197e7:	74 29                	je     c0019812 <Vm::faultHandler(regs*)+0x4a7>
c00197e9:	3d ff ff 00 00       	cmp    eax,0xffff
c00197ee:	76 22                	jbe    c0019812 <Vm::faultHandler(regs*)+0x4a7>
c00197f0:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00197f4:	50                   	push   eax
c00197f5:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00197f9:	50                   	push   eax
c00197fa:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00197fe:	50                   	push   eax
c00197ff:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019803:	50                   	push   eax
c0019804:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019808:	50                   	push   eax
c0019809:	6a 6e                	push   0x6e
c001980b:	6a 6e                	push   0x6e
c001980d:	e9 8c 00 00 00       	jmp    c001989e <Vm::faultHandler(regs*)+0x533>
c0019812:	0f b7 c0             	movzx  eax,ax
c0019815:	52                   	push   edx
c0019816:	52                   	push   edx
c0019817:	50                   	push   eax
c0019818:	57                   	push   edi
c0019819:	e8 d9 fa ff ff       	call   c00192f7 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001981e:	59                   	pop    ecx
c001981f:	0f b6 c0             	movzx  eax,al
c0019822:	5e                   	pop    esi
c0019823:	50                   	push   eax
c0019824:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019828:	50                   	push   eax
c0019829:	e8 92 f6 ff ff       	call   c0018ec0 <Vm::outbv(unsigned short, unsigned char)>
c001982e:	83 c4 10             	add    esp,0x10
c0019831:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019834:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019838:	74 03                	je     c001983d <Vm::faultHandler(regs*)+0x4d2>
c001983a:	48                   	dec    eax
c001983b:	eb 01                	jmp    c001983e <Vm::faultHandler(regs*)+0x4d3>
c001983d:	40                   	inc    eax
c001983e:	0f b7 c0             	movzx  eax,ax
c0019841:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0019844:	e9 92 01 00 00       	jmp    c00199db <Vm::faultHandler(regs*)+0x670>
c0019849:	8d 46 ff             	lea    eax,[esi-0x1]
c001984c:	3c 05                	cmp    al,0x5
c001984e:	77 1f                	ja     c001986f <Vm::faultHandler(regs*)+0x504>
c0019850:	0f b6 c0             	movzx  eax,al
c0019853:	ff 24 85 d0 61 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd9e30]
c001985a:	89 ef                	mov    edi,ebp
c001985c:	eb 11                	jmp    c001986f <Vm::faultHandler(regs*)+0x504>
c001985e:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0019861:	eb 0c                	jmp    c001986f <Vm::faultHandler(regs*)+0x504>
c0019863:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0019866:	eb 07                	jmp    c001986f <Vm::faultHandler(regs*)+0x504>
c0019868:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001986b:	eb 02                	jmp    c001986f <Vm::faultHandler(regs*)+0x504>
c001986d:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001986f:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0019872:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019877:	74 37                	je     c00198b0 <Vm::faultHandler(regs*)+0x545>
c0019879:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001987f:	76 2f                	jbe    c00198b0 <Vm::faultHandler(regs*)+0x545>
c0019881:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019885:	50                   	push   eax
c0019886:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001988a:	50                   	push   eax
c001988b:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001988f:	50                   	push   eax
c0019890:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019894:	50                   	push   eax
c0019895:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019899:	50                   	push   eax
c001989a:	6a 6f                	push   0x6f
c001989c:	6a 6f                	push   0x6f
c001989e:	68 5e 61 02 c0       	push   0xc002615e
c00198a3:	e8 1d 37 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00198a8:	83 c4 20             	add    esp,0x20
c00198ab:	e9 86 01 00 00       	jmp    c0019a36 <Vm::faultHandler(regs*)+0x6cb>
c00198b0:	0f b7 d7             	movzx  edx,di
c00198b3:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00198b6:	0f b7 c6             	movzx  eax,si
c00198b9:	81 e1 00 04 00 00    	and    ecx,0x400
c00198bf:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c00198c2:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00198c7:	74 1d                	je     c00198e6 <Vm::faultHandler(regs*)+0x57b>
c00198c9:	55                   	push   ebp
c00198ca:	55                   	push   ebp
c00198cb:	50                   	push   eax
c00198cc:	52                   	push   edx
c00198cd:	e8 48 fa ff ff       	call   c001931a <Vm::readDwordFromReal(unsigned short, unsigned short)>
c00198d2:	83 c4 10             	add    esp,0x10
c00198d5:	89 fa                	mov    edx,edi
c00198d7:	ef                   	out    dx,eax
c00198d8:	85 c9                	test   ecx,ecx
c00198da:	74 05                	je     c00198e1 <Vm::faultHandler(regs*)+0x576>
c00198dc:	83 ee 04             	sub    esi,0x4
c00198df:	eb 21                	jmp    c0019902 <Vm::faultHandler(regs*)+0x597>
c00198e1:	83 c6 04             	add    esi,0x4
c00198e4:	eb 1c                	jmp    c0019902 <Vm::faultHandler(regs*)+0x597>
c00198e6:	55                   	push   ebp
c00198e7:	55                   	push   ebp
c00198e8:	50                   	push   eax
c00198e9:	52                   	push   edx
c00198ea:	e8 19 fa ff ff       	call   c0019308 <Vm::readWordFromReal(unsigned short, unsigned short)>
c00198ef:	83 c4 10             	add    esp,0x10
c00198f2:	89 fa                	mov    edx,edi
c00198f4:	66 ef                	out    dx,ax
c00198f6:	85 c9                	test   ecx,ecx
c00198f8:	74 05                	je     c00198ff <Vm::faultHandler(regs*)+0x594>
c00198fa:	83 ee 02             	sub    esi,0x2
c00198fd:	eb 03                	jmp    c0019902 <Vm::faultHandler(regs*)+0x597>
c00198ff:	83 c6 02             	add    esi,0x2
c0019902:	81 e6 ff ff 00 00    	and    esi,0xffff
c0019908:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001990b:	e9 cb 00 00 00       	jmp    c00199db <Vm::faultHandler(regs*)+0x670>
c0019910:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019917:	83 ec 0c             	sub    esp,0xc
c001991a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001991e:	50                   	push   eax
c001991f:	e8 89 f5 ff ff       	call   c0018ead <Vm::inbv(unsigned short)>
c0019924:	0f b6 c0             	movzx  eax,al
c0019927:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001992a:	eb 3f                	jmp    c001996b <Vm::faultHandler(regs*)+0x600>
c001992c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019931:	74 07                	je     c001993a <Vm::faultHandler(regs*)+0x5cf>
c0019933:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0019937:	ed                   	in     eax,dx
c0019938:	eb 14                	jmp    c001994e <Vm::faultHandler(regs*)+0x5e3>
c001993a:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001993d:	66 31 f6             	xor    si,si
c0019940:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0019943:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0019947:	66 ed                	in     ax,dx
c0019949:	0f b7 c0             	movzx  eax,ax
c001994c:	09 f0                	or     eax,esi
c001994e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019951:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019955:	e9 84 00 00 00       	jmp    c00199de <Vm::faultHandler(regs*)+0x673>
c001995a:	52                   	push   edx
c001995b:	52                   	push   edx
c001995c:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0019960:	50                   	push   eax
c0019961:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019965:	50                   	push   eax
c0019966:	e8 55 f5 ff ff       	call   c0018ec0 <Vm::outbv(unsigned short, unsigned char)>
c001996b:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001996f:	eb 53                	jmp    c00199c4 <Vm::faultHandler(regs*)+0x659>
c0019971:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019974:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0019978:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001997d:	74 03                	je     c0019982 <Vm::faultHandler(regs*)+0x617>
c001997f:	ef                   	out    dx,eax
c0019980:	eb cf                	jmp    c0019951 <Vm::faultHandler(regs*)+0x5e6>
c0019982:	66 ef                	out    dx,ax
c0019984:	eb cb                	jmp    c0019951 <Vm::faultHandler(regs*)+0x5e6>
c0019986:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001998d:	83 ec 0c             	sub    esp,0xc
c0019990:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019994:	50                   	push   eax
c0019995:	e8 13 f5 ff ff       	call   c0018ead <Vm::inbv(unsigned short)>
c001999a:	0f b6 c0             	movzx  eax,al
c001999d:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00199a0:	eb 1f                	jmp    c00199c1 <Vm::faultHandler(regs*)+0x656>
c00199a2:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00199a5:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00199aa:	74 03                	je     c00199af <Vm::faultHandler(regs*)+0x644>
c00199ac:	ed                   	in     eax,dx
c00199ad:	eb 0d                	jmp    c00199bc <Vm::faultHandler(regs*)+0x651>
c00199af:	66 ed                	in     ax,dx
c00199b1:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00199b4:	0f b7 c0             	movzx  eax,ax
c00199b7:	66 31 d2             	xor    dx,dx
c00199ba:	09 d0                	or     eax,edx
c00199bc:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00199bf:	eb 1a                	jmp    c00199db <Vm::faultHandler(regs*)+0x670>
c00199c1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00199c4:	83 c4 10             	add    esp,0x10
c00199c7:	eb 15                	jmp    c00199de <Vm::faultHandler(regs*)+0x673>
c00199c9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00199cc:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00199cf:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00199d4:	74 03                	je     c00199d9 <Vm::faultHandler(regs*)+0x66e>
c00199d6:	ef                   	out    dx,eax
c00199d7:	eb 02                	jmp    c00199db <Vm::faultHandler(regs*)+0x670>
c00199d9:	66 ef                	out    dx,ax
c00199db:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00199de:	b0 01                	mov    al,0x1
c00199e0:	eb 56                	jmp    c0019a38 <Vm::faultHandler(regs*)+0x6cd>
c00199e2:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00199e6:	50                   	push   eax
c00199e7:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00199eb:	50                   	push   eax
c00199ec:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00199f0:	50                   	push   eax
c00199f1:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00199f5:	50                   	push   eax
c00199f6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00199fa:	50                   	push   eax
c00199fb:	52                   	push   edx
c00199fc:	52                   	push   edx
c00199fd:	68 8b 61 02 c0       	push   0xc002618b
c0019a02:	e8 be 35 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0019a07:	83 c4 20             	add    esp,0x20
c0019a0a:	83 ec 0c             	sub    esp,0xc
c0019a0d:	6a 60                	push   0x60
c0019a0f:	e8 99 f4 ff ff       	call   c0018ead <Vm::inbv(unsigned short)>
c0019a14:	83 c4 10             	add    esp,0x10
c0019a17:	3c 1c                	cmp    al,0x1c
c0019a19:	74 04                	je     c0019a1f <Vm::faultHandler(regs*)+0x6b4>
c0019a1b:	3c 5a                	cmp    al,0x5a
c0019a1d:	75 eb                	jne    c0019a0a <Vm::faultHandler(regs*)+0x69f>
c0019a1f:	3c 5a                	cmp    al,0x5a
c0019a21:	74 04                	je     c0019a27 <Vm::faultHandler(regs*)+0x6bc>
c0019a23:	3c 1c                	cmp    al,0x1c
c0019a25:	75 0f                	jne    c0019a36 <Vm::faultHandler(regs*)+0x6cb>
c0019a27:	83 ec 0c             	sub    esp,0xc
c0019a2a:	6a 60                	push   0x60
c0019a2c:	e8 7c f4 ff ff       	call   c0018ead <Vm::inbv(unsigned short)>
c0019a31:	83 c4 10             	add    esp,0x10
c0019a34:	eb e9                	jmp    c0019a1f <Vm::faultHandler(regs*)+0x6b4>
c0019a36:	31 c0                	xor    eax,eax
c0019a38:	83 c4 1c             	add    esp,0x1c
c0019a3b:	5b                   	pop    ebx
c0019a3c:	5e                   	pop    esi
c0019a3d:	5f                   	pop    edi
c0019a3e:	5d                   	pop    ebp
c0019a3f:	c3                   	ret    

c0019a40 <Vm::fpuInternalTo32(unsigned long long)>:
c0019a40:	57                   	push   edi
c0019a41:	56                   	push   esi
c0019a42:	53                   	push   ebx
c0019a43:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019a47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a4b:	89 d6                	mov    esi,edx
c0019a4d:	89 d7                	mov    edi,edx
c0019a4f:	89 c1                	mov    ecx,eax
c0019a51:	c1 ef 14             	shr    edi,0x14
c0019a54:	89 d3                	mov    ebx,edx
c0019a56:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0019a5c:	31 d2                	xor    edx,edx
c0019a5e:	89 f8                	mov    eax,edi
c0019a60:	81 e6 00 00 00 80    	and    esi,0x80000000
c0019a66:	bf ff 00 00 00       	mov    edi,0xff
c0019a6b:	05 80 fc ff ff       	add    eax,0xfffffc80
c0019a70:	83 d2 ff             	adc    edx,0xffffffff
c0019a73:	39 c7                	cmp    edi,eax
c0019a75:	bf 00 00 00 00       	mov    edi,0x0
c0019a7a:	19 d7                	sbb    edi,edx
c0019a7c:	72 16                	jb     c0019a94 <Vm::fpuInternalTo32(unsigned long long)+0x54>
c0019a7e:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c0019a82:	c1 e0 17             	shl    eax,0x17
c0019a85:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c0019a8b:	09 f1                	or     ecx,esi
c0019a8d:	09 c1                	or     ecx,eax
c0019a8f:	89 cf                	mov    edi,ecx
c0019a91:	eb 05                	jmp    c0019a98 <Vm::fpuInternalTo32(unsigned long long)+0x58>
c0019a93:	90                   	nop
c0019a94:	31 ff                	xor    edi,edi
c0019a96:	66 90                	xchg   ax,ax
c0019a98:	89 f8                	mov    eax,edi
c0019a9a:	5b                   	pop    ebx
c0019a9b:	5e                   	pop    esi
c0019a9c:	5f                   	pop    edi
c0019a9d:	c3                   	ret    

c0019a9e <Vm::fpuInternalTo64(unsigned long long)>:
c0019a9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019aa2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019aa6:	c3                   	ret    

c0019aa7 <Vm::fpu32ToInternal(unsigned int)>:
c0019aa7:	57                   	push   edi
c0019aa8:	31 ff                	xor    edi,edi
c0019aaa:	56                   	push   esi
c0019aab:	53                   	push   ebx
c0019aac:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019ab0:	89 cb                	mov    ebx,ecx
c0019ab2:	89 ce                	mov    esi,ecx
c0019ab4:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0019aba:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c0019ac0:	c1 e9 17             	shr    ecx,0x17
c0019ac3:	89 f0                	mov    eax,esi
c0019ac5:	0f b6 d1             	movzx  edx,cl
c0019ac8:	81 c2 80 03 00 00    	add    edx,0x380
c0019ace:	89 d1                	mov    ecx,edx
c0019ad0:	89 fa                	mov    edx,edi
c0019ad2:	c1 e1 14             	shl    ecx,0x14
c0019ad5:	0f a4 c2 1d          	shld   edx,eax,0x1d
c0019ad9:	c1 e0 1d             	shl    eax,0x1d
c0019adc:	89 d7                	mov    edi,edx
c0019ade:	89 c6                	mov    esi,eax
c0019ae0:	89 ca                	mov    edx,ecx
c0019ae2:	89 f0                	mov    eax,esi
c0019ae4:	09 fa                	or     edx,edi
c0019ae6:	09 da                	or     edx,ebx
c0019ae8:	5b                   	pop    ebx
c0019ae9:	5e                   	pop    esi
c0019aea:	5f                   	pop    edi
c0019aeb:	c3                   	ret    

c0019aec <Vm::fpu64ToInternal(unsigned long long)>:
c0019aec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019af0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019af4:	c3                   	ret    

c0019af5 <Vm::fpuFloatToLong(unsigned long long)>:
c0019af5:	57                   	push   edi
c0019af6:	31 c0                	xor    eax,eax
c0019af8:	56                   	push   esi
c0019af9:	31 d2                	xor    edx,edx
c0019afb:	53                   	push   ebx
c0019afc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019b00:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019b04:	89 d9                	mov    ecx,ebx
c0019b06:	c1 e9 14             	shr    ecx,0x14
c0019b09:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0019b0f:	89 cf                	mov    edi,ecx
c0019b11:	81 ef ff 03 00 00    	sub    edi,0x3ff
c0019b17:	78 37                	js     c0019b50 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c0019b19:	89 d9                	mov    ecx,ebx
c0019b1b:	89 f0                	mov    eax,esi
c0019b1d:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c0019b23:	81 c9 00 00 10 00    	or     ecx,0x100000
c0019b29:	89 ca                	mov    edx,ecx
c0019b2b:	b9 34 00 00 00       	mov    ecx,0x34
c0019b30:	29 f9                	sub    ecx,edi
c0019b32:	0f ad d0             	shrd   eax,edx,cl
c0019b35:	d3 fa                	sar    edx,cl
c0019b37:	f6 c1 20             	test   cl,0x20
c0019b3a:	74 08                	je     c0019b44 <Vm::fpuFloatToLong(unsigned long long)+0x4f>
c0019b3c:	89 d0                	mov    eax,edx
c0019b3e:	c1 fa 1f             	sar    edx,0x1f
c0019b41:	8d 76 00             	lea    esi,[esi+0x0]
c0019b44:	85 db                	test   ebx,ebx
c0019b46:	79 08                	jns    c0019b50 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c0019b48:	f7 d8                	neg    eax
c0019b4a:	83 d2 00             	adc    edx,0x0
c0019b4d:	f7 da                	neg    edx
c0019b4f:	90                   	nop
c0019b50:	5b                   	pop    ebx
c0019b51:	5e                   	pop    esi
c0019b52:	5f                   	pop    edi
c0019b53:	c3                   	ret    

c0019b54 <Vm::fpuULongToFloat(unsigned long long)>:
c0019b54:	57                   	push   edi
c0019b55:	31 c9                	xor    ecx,ecx
c0019b57:	56                   	push   esi
c0019b58:	53                   	push   ebx
c0019b59:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019b5d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019b61:	8d 76 00             	lea    esi,[esi+0x0]
c0019b64:	0f ba e7 14          	bt     edi,0x14
c0019b68:	72 0a                	jb     c0019b74 <Vm::fpuULongToFloat(unsigned long long)+0x20>
c0019b6a:	01 f6                	add    esi,esi
c0019b6c:	11 ff                	adc    edi,edi
c0019b6e:	41                   	inc    ecx
c0019b6f:	eb f3                	jmp    c0019b64 <Vm::fpuULongToFloat(unsigned long long)+0x10>
c0019b71:	8d 76 00             	lea    esi,[esi+0x0]
c0019b74:	89 fa                	mov    edx,edi
c0019b76:	89 f0                	mov    eax,esi
c0019b78:	bb 33 04 00 00       	mov    ebx,0x433
c0019b7d:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c0019b83:	29 cb                	sub    ebx,ecx
c0019b85:	89 d9                	mov    ecx,ebx
c0019b87:	5b                   	pop    ebx
c0019b88:	c1 e1 14             	shl    ecx,0x14
c0019b8b:	5e                   	pop    esi
c0019b8c:	09 ca                	or     edx,ecx
c0019b8e:	5f                   	pop    edi
c0019b8f:	c3                   	ret    

c0019b90 <Vm::fpuLongToFloat(long long)>:
c0019b90:	56                   	push   esi
c0019b91:	31 c0                	xor    eax,eax
c0019b93:	53                   	push   ebx
c0019b94:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019b98:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019b9c:	39 c8                	cmp    eax,ecx
c0019b9e:	19 d8                	sbb    eax,ebx
c0019ba0:	7d 06                	jge    c0019ba8 <Vm::fpuLongToFloat(long long)+0x18>
c0019ba2:	31 f6                	xor    esi,esi
c0019ba4:	eb 0e                	jmp    c0019bb4 <Vm::fpuLongToFloat(long long)+0x24>
c0019ba6:	66 90                	xchg   ax,ax
c0019ba8:	f7 d9                	neg    ecx
c0019baa:	be 01 00 00 00       	mov    esi,0x1
c0019baf:	83 d3 00             	adc    ebx,0x0
c0019bb2:	f7 db                	neg    ebx
c0019bb4:	31 c0                	xor    eax,eax
c0019bb6:	66 90                	xchg   ax,ax
c0019bb8:	0f ba e3 14          	bt     ebx,0x14
c0019bbc:	72 0a                	jb     c0019bc8 <Vm::fpuLongToFloat(long long)+0x38>
c0019bbe:	01 c9                	add    ecx,ecx
c0019bc0:	11 db                	adc    ebx,ebx
c0019bc2:	40                   	inc    eax
c0019bc3:	eb f3                	jmp    c0019bb8 <Vm::fpuLongToFloat(long long)+0x28>
c0019bc5:	8d 76 00             	lea    esi,[esi+0x0]
c0019bc8:	ba 33 04 00 00       	mov    edx,0x433
c0019bcd:	29 c2                	sub    edx,eax
c0019bcf:	89 c8                	mov    eax,ecx
c0019bd1:	c1 e2 14             	shl    edx,0x14
c0019bd4:	89 d9                	mov    ecx,ebx
c0019bd6:	89 f3                	mov    ebx,esi
c0019bd8:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c0019bde:	09 ca                	or     edx,ecx
c0019be0:	84 db                	test   bl,bl
c0019be2:	74 08                	je     c0019bec <Vm::fpuLongToFloat(long long)+0x5c>
c0019be4:	81 ca 00 00 00 80    	or     edx,0x80000000
c0019bea:	66 90                	xchg   ax,ax
c0019bec:	5b                   	pop    ebx
c0019bed:	5e                   	pop    esi
c0019bee:	c3                   	ret    

c0019bef <Vm::fpuGet0()>:
c0019bef:	31 c0                	xor    eax,eax
c0019bf1:	31 d2                	xor    edx,edx
c0019bf3:	c3                   	ret    

c0019bf4 <Vm::fpuGet1()>:
c0019bf4:	b8 01 00 00 00       	mov    eax,0x1
c0019bf9:	31 d2                	xor    edx,edx
c0019bfb:	c3                   	ret    

c0019bfc <Vm::fpuGetPi()>:
c0019bfc:	b8 03 00 00 00       	mov    eax,0x3
c0019c01:	31 d2                	xor    edx,edx
c0019c03:	c3                   	ret    

c0019c04 <Vm::fpuGetLog2E()>:
c0019c04:	83 ec 18             	sub    esp,0x18
c0019c07:	68 e8 61 02 c0       	push   0xc00261e8
c0019c0c:	e8 0c b1 ff ff       	call   c0014d1d <Krnl::panic(char const*)>
c0019c11:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019c16:	31 d2                	xor    edx,edx
c0019c18:	83 c4 1c             	add    esp,0x1c
c0019c1b:	c3                   	ret    

c0019c1c <Vm::fpuGetLogE2()>:
c0019c1c:	83 ec 18             	sub    esp,0x18
c0019c1f:	68 f4 61 02 c0       	push   0xc00261f4
c0019c24:	e8 f4 b0 ff ff       	call   c0014d1d <Krnl::panic(char const*)>
c0019c29:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019c2e:	31 d2                	xor    edx,edx
c0019c30:	83 c4 1c             	add    esp,0x1c
c0019c33:	c3                   	ret    

c0019c34 <Vm::fpuGetLog210()>:
c0019c34:	83 ec 18             	sub    esp,0x18
c0019c37:	68 00 62 02 c0       	push   0xc0026200
c0019c3c:	e8 dc b0 ff ff       	call   c0014d1d <Krnl::panic(char const*)>
c0019c41:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019c46:	31 d2                	xor    edx,edx
c0019c48:	83 c4 1c             	add    esp,0x1c
c0019c4b:	c3                   	ret    

c0019c4c <Vm::fpuGetLog102()>:
c0019c4c:	83 ec 18             	sub    esp,0x18
c0019c4f:	68 0d 62 02 c0       	push   0xc002620d
c0019c54:	e8 c4 b0 ff ff       	call   c0014d1d <Krnl::panic(char const*)>
c0019c59:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019c5e:	31 d2                	xor    edx,edx
c0019c60:	83 c4 1c             	add    esp,0x1c
c0019c63:	c3                   	ret    

c0019c64 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c0019c64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019c68:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0019c6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c70:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c0019c74:	0f 92 c0             	setb   al
c0019c77:	c3                   	ret    

c0019c78 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c0019c78:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019c7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c80:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c0019c84:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c0019c88:	09 c2                	or     edx,eax
c0019c8a:	0f 94 c0             	sete   al
c0019c8d:	c3                   	ret    

c0019c8e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c0019c8e:	57                   	push   edi
c0019c8f:	56                   	push   esi
c0019c90:	53                   	push   ebx
c0019c91:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019c95:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019c99:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019c9d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019ca1:	57                   	push   edi
c0019ca2:	56                   	push   esi
c0019ca3:	53                   	push   ebx
c0019ca4:	51                   	push   ecx
c0019ca5:	e8 ce ff ff ff       	call   c0019c78 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c0019caa:	83 c4 10             	add    esp,0x10
c0019cad:	88 c2                	mov    dl,al
c0019caf:	31 c0                	xor    eax,eax
c0019cb1:	84 d2                	test   dl,dl
c0019cb3:	75 0f                	jne    c0019cc4 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x36>
c0019cb5:	57                   	push   edi
c0019cb6:	56                   	push   esi
c0019cb7:	53                   	push   ebx
c0019cb8:	51                   	push   ecx
c0019cb9:	e8 a6 ff ff ff       	call   c0019c64 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c0019cbe:	83 c4 10             	add    esp,0x10
c0019cc1:	8d 76 00             	lea    esi,[esi+0x0]
c0019cc4:	83 e0 01             	and    eax,0x1
c0019cc7:	5b                   	pop    ebx
c0019cc8:	88 c1                	mov    cl,al
c0019cca:	83 e2 01             	and    edx,0x1
c0019ccd:	a0 c1 93 02 c0       	mov    al,ds:0xc00293c1
c0019cd2:	c1 e2 06             	shl    edx,0x6
c0019cd5:	83 e0 ba             	and    eax,0xffffffba
c0019cd8:	5e                   	pop    esi
c0019cd9:	09 c8                	or     eax,ecx
c0019cdb:	5f                   	pop    edi
c0019cdc:	09 d0                	or     eax,edx
c0019cde:	a2 c1 93 02 c0       	mov    ds:0xc00293c1,al
c0019ce3:	c3                   	ret    

c0019ce4 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c0019ce4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019ce8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019cec:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0019cf0:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c0019cf4:	c3                   	ret    

c0019cf5 <Vm::fpuAbs(unsigned long long)>:
c0019cf5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019cf9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019cfd:	c3                   	ret    

c0019cfe <Vm::fpuChs(unsigned long long)>:
c0019cfe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d02:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019d06:	f7 d8                	neg    eax
c0019d08:	83 d2 00             	adc    edx,0x0
c0019d0b:	f7 da                	neg    edx
c0019d0d:	c3                   	ret    

c0019d0e <Vm::fpuSub(unsigned long long, unsigned long long)>:
c0019d0e:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c0019d12:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c0019d17:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c0019d1b:	eb c7                	jmp    c0019ce4 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c0019d1d <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c0019d1d:	53                   	push   ebx
c0019d1e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019d26:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019d2a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019d2e:	0f af ca             	imul   ecx,edx
c0019d31:	0f af d8             	imul   ebx,eax
c0019d34:	f7 e2                	mul    edx
c0019d36:	01 d9                	add    ecx,ebx
c0019d38:	5b                   	pop    ebx
c0019d39:	01 ca                	add    edx,ecx
c0019d3b:	c3                   	ret    

c0019d3c <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c0019d3c:	83 ec 0c             	sub    esp,0xc
c0019d3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019d43:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019d47:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019d4b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019d4f:	e8 0c 89 00 00       	call   c0022660 <__udivdi3>
c0019d54:	83 c4 1c             	add    esp,0x1c
c0019d57:	c3                   	ret    

c0019d58 <Vm::fpuSquare(unsigned long long)>:
c0019d58:	50                   	push   eax
c0019d59:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d5d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019d61:	52                   	push   edx
c0019d62:	50                   	push   eax
c0019d63:	52                   	push   edx
c0019d64:	50                   	push   eax
c0019d65:	e8 b3 ff ff ff       	call   c0019d1d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0019d6a:	83 c4 14             	add    esp,0x14
c0019d6d:	c3                   	ret    

c0019d6e <Vm::fpuGetReg(int)>:
c0019d6e:	83 ec 0c             	sub    esp,0xc
c0019d71:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c0019d76:	76 10                	jbe    c0019d88 <Vm::fpuGetReg(int)+0x1a>
c0019d78:	83 ec 0c             	sub    esp,0xc
c0019d7b:	68 1a 62 02 c0       	push   0xc002621a
c0019d80:	e8 98 af ff ff       	call   c0014d1d <Krnl::panic(char const*)>
c0019d85:	83 c4 10             	add    esp,0x10
c0019d88:	a0 c1 93 02 c0       	mov    al,ds:0xc00293c1
c0019d8d:	b9 08 00 00 00       	mov    ecx,0x8
c0019d92:	c0 e8 03             	shr    al,0x3
c0019d95:	83 e0 07             	and    eax,0x7
c0019d98:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0019d9c:	99                   	cdq    
c0019d9d:	f7 f9                	idiv   ecx
c0019d9f:	8b 04 d5 c4 93 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd6c3c]
c0019da6:	8b 14 d5 c8 93 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd6c38]
c0019dad:	83 c4 0c             	add    esp,0xc
c0019db0:	c3                   	ret    

c0019db1 <Vm::fpuSetReg(int, unsigned long long)>:
c0019db1:	57                   	push   edi
c0019db2:	56                   	push   esi
c0019db3:	52                   	push   edx
c0019db4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019db8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0019dbc:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c0019dc1:	76 11                	jbe    c0019dd4 <Vm::fpuSetReg(int, unsigned long long)+0x23>
c0019dc3:	83 ec 0c             	sub    esp,0xc
c0019dc6:	68 2d 62 02 c0       	push   0xc002622d
c0019dcb:	e8 4d af ff ff       	call   c0014d1d <Krnl::panic(char const*)>
c0019dd0:	83 c4 10             	add    esp,0x10
c0019dd3:	90                   	nop
c0019dd4:	a0 c1 93 02 c0       	mov    al,ds:0xc00293c1
c0019dd9:	b9 08 00 00 00       	mov    ecx,0x8
c0019dde:	c0 e8 03             	shr    al,0x3
c0019de1:	83 e0 07             	and    eax,0x7
c0019de4:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0019de8:	99                   	cdq    
c0019de9:	f7 f9                	idiv   ecx
c0019deb:	89 34 d5 c4 93 02 c0 	mov    DWORD PTR [edx*8-0x3ffd6c3c],esi
c0019df2:	89 3c d5 c8 93 02 c0 	mov    DWORD PTR [edx*8-0x3ffd6c38],edi
c0019df9:	58                   	pop    eax
c0019dfa:	5e                   	pop    esi
c0019dfb:	5f                   	pop    edi
c0019dfc:	c3                   	ret    

c0019dfd <Vm::fpuPush(unsigned long long)>:
c0019dfd:	a0 c1 93 02 c0       	mov    al,ds:0xc00293c1
c0019e02:	c0 e8 03             	shr    al,0x3
c0019e05:	83 e0 07             	and    eax,0x7
c0019e08:	83 c0 07             	add    eax,0x7
c0019e0b:	88 c2                	mov    dl,al
c0019e0d:	83 e0 07             	and    eax,0x7
c0019e10:	83 e2 07             	and    edx,0x7
c0019e13:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c0019e1a:	8a 15 c1 93 02 c0    	mov    dl,BYTE PTR ds:0xc00293c1
c0019e20:	83 e2 c7             	and    edx,0xffffffc7
c0019e23:	09 ca                	or     edx,ecx
c0019e25:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019e29:	88 15 c1 93 02 c0    	mov    BYTE PTR ds:0xc00293c1,dl
c0019e2f:	89 0c c5 c8 93 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6c38],ecx
c0019e36:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019e3a:	89 14 c5 c4 93 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6c3c],edx
c0019e41:	a1 04 94 02 c0       	mov    eax,ds:0xc0029404
c0019e46:	83 f8 08             	cmp    eax,0x8
c0019e49:	75 09                	jne    c0019e54 <Vm::fpuPush(unsigned long long)+0x57>
c0019e4b:	80 0d c0 93 02 c0 40 	or     BYTE PTR ds:0xc00293c0,0x40
c0019e52:	c3                   	ret    
c0019e53:	90                   	nop
c0019e54:	40                   	inc    eax
c0019e55:	a3 04 94 02 c0       	mov    ds:0xc0029404,eax
c0019e5a:	c3                   	ret    

c0019e5b <Vm::fpuPop()>:
c0019e5b:	8a 0d c1 93 02 c0    	mov    cl,BYTE PTR ds:0xc00293c1
c0019e61:	53                   	push   ebx
c0019e62:	c0 e9 03             	shr    cl,0x3
c0019e65:	8a 1d c1 93 02 c0    	mov    bl,BYTE PTR ds:0xc00293c1
c0019e6b:	83 e1 07             	and    ecx,0x7
c0019e6e:	83 e3 c7             	and    ebx,0xffffffc7
c0019e71:	8b 04 cd c4 93 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd6c3c]
c0019e78:	8b 14 cd c8 93 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd6c38]
c0019e7f:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c0019e86:	83 e1 38             	and    ecx,0x38
c0019e89:	09 d9                	or     ecx,ebx
c0019e8b:	88 0d c1 93 02 c0    	mov    BYTE PTR ds:0xc00293c1,cl
c0019e91:	8b 0d 04 94 02 c0    	mov    ecx,DWORD PTR ds:0xc0029404
c0019e97:	85 c9                	test   ecx,ecx
c0019e99:	74 09                	je     c0019ea4 <Vm::fpuPop()+0x49>
c0019e9b:	49                   	dec    ecx
c0019e9c:	89 0d 04 94 02 c0    	mov    DWORD PTR ds:0xc0029404,ecx
c0019ea2:	eb 08                	jmp    c0019eac <Vm::fpuPop()+0x51>
c0019ea4:	80 0d c0 93 02 c0 40 	or     BYTE PTR ds:0xc00293c0,0x40
c0019eab:	90                   	nop
c0019eac:	5b                   	pop    ebx
c0019ead:	c3                   	ret    

c0019eae <Vm::x87Handler(regs*)>:
c0019eae:	55                   	push   ebp
c0019eaf:	57                   	push   edi
c0019eb0:	56                   	push   esi
c0019eb1:	53                   	push   ebx
c0019eb2:	83 ec 1c             	sub    esp,0x1c
c0019eb5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019eb9:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c0019ebe:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0019ec1:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0019ec9:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0019ecd:	50                   	push   eax
c0019ece:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0019ed2:	50                   	push   eax
c0019ed3:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019ed7:	50                   	push   eax
c0019ed8:	53                   	push   ebx
c0019ed9:	e8 58 a5 ff ff       	call   c0014436 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0019ede:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0019ee1:	83 c4 10             	add    esp,0x10
c0019ee4:	89 c6                	mov    esi,eax
c0019ee6:	80 fa d9             	cmp    dl,0xd9
c0019ee9:	0f 85 79 01 00 00    	jne    c001a068 <Vm::x87Handler(regs*)+0x1ba>
c0019eef:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019ef3:	8d 50 20             	lea    edx,[eax+0x20]
c0019ef6:	80 fa 0e             	cmp    dl,0xe
c0019ef9:	0f 87 a5 00 00 00    	ja     c0019fa4 <Vm::x87Handler(regs*)+0xf6>
c0019eff:	0f b6 d2             	movzx  edx,dl
c0019f02:	ff 24 95 40 62 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd9dc0]
c0019f09:	8d 76 00             	lea    esi,[esi+0x0]
c0019f0c:	e8 de fc ff ff       	call   c0019bef <Vm::fpuGet0()>
c0019f11:	eb 09                	jmp    c0019f1c <Vm::x87Handler(regs*)+0x6e>
c0019f13:	90                   	nop
c0019f14:	e8 db fc ff ff       	call   c0019bf4 <Vm::fpuGet1()>
c0019f19:	8d 76 00             	lea    esi,[esi+0x0]
c0019f1c:	57                   	push   edi
c0019f1d:	57                   	push   edi
c0019f1e:	66 90                	xchg   ax,ax
c0019f20:	52                   	push   edx
c0019f21:	50                   	push   eax
c0019f22:	e8 d6 fe ff ff       	call   c0019dfd <Vm::fpuPush(unsigned long long)>
c0019f27:	90                   	nop
c0019f28:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019f2c:	83 c4 10             	add    esp,0x10
c0019f2f:	90                   	nop
c0019f30:	b0 01                	mov    al,0x1
c0019f32:	e9 89 0a 00 00       	jmp    c001a9c0 <Vm::x87Handler(regs*)+0xb12>
c0019f37:	90                   	nop
c0019f38:	83 ec 0c             	sub    esp,0xc
c0019f3b:	6a 00                	push   0x0
c0019f3d:	e8 2c fe ff ff       	call   c0019d6e <Vm::fpuGetReg(int)>
c0019f42:	59                   	pop    ecx
c0019f43:	5e                   	pop    esi
c0019f44:	52                   	push   edx
c0019f45:	50                   	push   eax
c0019f46:	e8 b3 fd ff ff       	call   c0019cfe <Vm::fpuChs(unsigned long long)>
c0019f4b:	eb 17                	jmp    c0019f64 <Vm::x87Handler(regs*)+0xb6>
c0019f4d:	8d 76 00             	lea    esi,[esi+0x0]
c0019f50:	83 ec 0c             	sub    esp,0xc
c0019f53:	6a 00                	push   0x0
c0019f55:	e8 14 fe ff ff       	call   c0019d6e <Vm::fpuGetReg(int)>
c0019f5a:	5f                   	pop    edi
c0019f5b:	5d                   	pop    ebp
c0019f5c:	52                   	push   edx
c0019f5d:	50                   	push   eax
c0019f5e:	e8 92 fd ff ff       	call   c0019cf5 <Vm::fpuAbs(unsigned long long)>
c0019f63:	90                   	nop
c0019f64:	83 c4 0c             	add    esp,0xc
c0019f67:	90                   	nop
c0019f68:	52                   	push   edx
c0019f69:	50                   	push   eax
c0019f6a:	66 90                	xchg   ax,ax
c0019f6c:	6a 00                	push   0x0
c0019f6e:	66 90                	xchg   ax,ax
c0019f70:	e8 3c fe ff ff       	call   c0019db1 <Vm::fpuSetReg(int, unsigned long long)>
c0019f75:	eb b1                	jmp    c0019f28 <Vm::x87Handler(regs*)+0x7a>
c0019f77:	90                   	nop
c0019f78:	e8 b7 fc ff ff       	call   c0019c34 <Vm::fpuGetLog210()>
c0019f7d:	eb 9d                	jmp    c0019f1c <Vm::x87Handler(regs*)+0x6e>
c0019f7f:	90                   	nop
c0019f80:	e8 7f fc ff ff       	call   c0019c04 <Vm::fpuGetLog2E()>
c0019f85:	eb 95                	jmp    c0019f1c <Vm::x87Handler(regs*)+0x6e>
c0019f87:	90                   	nop
c0019f88:	e8 6f fc ff ff       	call   c0019bfc <Vm::fpuGetPi()>
c0019f8d:	eb 8d                	jmp    c0019f1c <Vm::x87Handler(regs*)+0x6e>
c0019f8f:	90                   	nop
c0019f90:	e8 b7 fc ff ff       	call   c0019c4c <Vm::fpuGetLog102()>
c0019f95:	eb 85                	jmp    c0019f1c <Vm::x87Handler(regs*)+0x6e>
c0019f97:	90                   	nop
c0019f98:	e8 7f fc ff ff       	call   c0019c1c <Vm::fpuGetLogE2()>
c0019f9d:	e9 7a ff ff ff       	jmp    c0019f1c <Vm::x87Handler(regs*)+0x6e>
c0019fa2:	66 90                	xchg   ax,ax
c0019fa4:	8d 50 40             	lea    edx,[eax+0x40]
c0019fa7:	80 fa 07             	cmp    dl,0x7
c0019faa:	77 18                	ja     c0019fc4 <Vm::x87Handler(regs*)+0x116>
c0019fac:	83 ec 0c             	sub    esp,0xc
c0019faf:	2d c0 00 00 00       	sub    eax,0xc0
c0019fb4:	50                   	push   eax
c0019fb5:	e8 b4 fd ff ff       	call   c0019d6e <Vm::fpuGetReg(int)>
c0019fba:	59                   	pop    ecx
c0019fbb:	5e                   	pop    esi
c0019fbc:	e9 5f ff ff ff       	jmp    c0019f20 <Vm::x87Handler(regs*)+0x72>
c0019fc1:	8d 76 00             	lea    esi,[esi+0x0]
c0019fc4:	8d 50 38             	lea    edx,[eax+0x38]
c0019fc7:	80 fa 07             	cmp    dl,0x7
c0019fca:	77 3c                	ja     c001a008 <Vm::x87Handler(regs*)+0x15a>
c0019fcc:	83 ec 0c             	sub    esp,0xc
c0019fcf:	2d c8 00 00 00       	sub    eax,0xc8
c0019fd4:	50                   	push   eax
c0019fd5:	e8 94 fd ff ff       	call   c0019d6e <Vm::fpuGetReg(int)>
c0019fda:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019fe1:	89 c6                	mov    esi,eax
c0019fe3:	89 d7                	mov    edi,edx
c0019fe5:	e8 84 fd ff ff       	call   c0019d6e <Vm::fpuGetReg(int)>
c0019fea:	83 c4 0c             	add    esp,0xc
c0019fed:	52                   	push   edx
c0019fee:	50                   	push   eax
c0019fef:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019ff3:	2d c8 00 00 00       	sub    eax,0xc8
c0019ff8:	50                   	push   eax
c0019ff9:	e8 b3 fd ff ff       	call   c0019db1 <Vm::fpuSetReg(int, unsigned long long)>
c0019ffe:	83 c4 0c             	add    esp,0xc
c001a001:	57                   	push   edi
c001a002:	56                   	push   esi
c001a003:	e9 64 ff ff ff       	jmp    c0019f6c <Vm::x87Handler(regs*)+0xbe>
c001a008:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a00c:	84 d2                	test   dl,dl
c001a00e:	75 10                	jne    c001a020 <Vm::x87Handler(regs*)+0x172>
c001a010:	83 ec 0c             	sub    esp,0xc
c001a013:	ff 36                	push   DWORD PTR [esi]
c001a015:	e8 8d fa ff ff       	call   c0019aa7 <Vm::fpu32ToInternal(unsigned int)>
c001a01a:	e9 c9 00 00 00       	jmp    c001a0e8 <Vm::x87Handler(regs*)+0x23a>
c001a01f:	90                   	nop
c001a020:	80 fa 03             	cmp    dl,0x3
c001a023:	75 13                	jne    c001a038 <Vm::x87Handler(regs*)+0x18a>
c001a025:	e8 31 fe ff ff       	call   c0019e5b <Vm::fpuPop()>
c001a02a:	55                   	push   ebp
c001a02b:	55                   	push   ebp
c001a02c:	52                   	push   edx
c001a02d:	50                   	push   eax
c001a02e:	e8 0d fa ff ff       	call   c0019a40 <Vm::fpuInternalTo32(unsigned long long)>
c001a033:	e9 90 00 00 00       	jmp    c001a0c8 <Vm::x87Handler(regs*)+0x21a>
c001a038:	80 fa 05             	cmp    dl,0x5
c001a03b:	75 0f                	jne    c001a04c <Vm::x87Handler(regs*)+0x19e>
c001a03d:	66 8b 06             	mov    ax,WORD PTR [esi]
c001a040:	66 a3 c2 93 02 c0    	mov    ds:0xc00293c2,ax
c001a046:	e9 ed 00 00 00       	jmp    c001a138 <Vm::x87Handler(regs*)+0x28a>
c001a04b:	90                   	nop
c001a04c:	31 c0                	xor    eax,eax
c001a04e:	80 fa 07             	cmp    dl,0x7
c001a051:	0f 85 69 09 00 00    	jne    c001a9c0 <Vm::x87Handler(regs*)+0xb12>
c001a057:	66 a1 c2 93 02 c0    	mov    ax,ds:0xc00293c2
c001a05d:	66 89 06             	mov    WORD PTR [esi],ax
c001a060:	e9 d3 00 00 00       	jmp    c001a138 <Vm::x87Handler(regs*)+0x28a>
c001a065:	8d 76 00             	lea    esi,[esi+0x0]
c001a068:	80 fa d8             	cmp    dl,0xd8
c001a06b:	0f 84 d3 00 00 00    	je     c001a144 <Vm::x87Handler(regs*)+0x296>
c001a071:	80 fa dc             	cmp    dl,0xdc
c001a074:	0f 84 2a 02 00 00    	je     c001a2a4 <Vm::x87Handler(regs*)+0x3f6>
c001a07a:	80 fa de             	cmp    dl,0xde
c001a07d:	0f 84 f1 02 00 00    	je     c001a374 <Vm::x87Handler(regs*)+0x4c6>
c001a083:	80 fa dd             	cmp    dl,0xdd
c001a086:	0f 84 94 04 00 00    	je     c001a520 <Vm::x87Handler(regs*)+0x672>
c001a08c:	80 fa da             	cmp    dl,0xda
c001a08f:	0f 84 5f 05 00 00    	je     c001a5f4 <Vm::x87Handler(regs*)+0x746>
c001a095:	80 fa df             	cmp    dl,0xdf
c001a098:	0f 84 aa 05 00 00    	je     c001a648 <Vm::x87Handler(regs*)+0x79a>
c001a09e:	31 c0                	xor    eax,eax
c001a0a0:	80 fa db             	cmp    dl,0xdb
c001a0a3:	0f 85 17 09 00 00    	jne    c001a9c0 <Vm::x87Handler(regs*)+0xb12>
c001a0a9:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a0ad:	80 fa 03             	cmp    dl,0x3
c001a0b0:	0f 85 c2 06 00 00    	jne    c001a778 <Vm::x87Handler(regs*)+0x8ca>
c001a0b6:	e8 a0 fd ff ff       	call   c0019e5b <Vm::fpuPop()>
c001a0bb:	55                   	push   ebp
c001a0bc:	55                   	push   ebp
c001a0bd:	8d 76 00             	lea    esi,[esi+0x0]
c001a0c0:	52                   	push   edx
c001a0c1:	50                   	push   eax
c001a0c2:	e8 2e fa ff ff       	call   c0019af5 <Vm::fpuFloatToLong(unsigned long long)>
c001a0c7:	90                   	nop
c001a0c8:	83 c4 10             	add    esp,0x10
c001a0cb:	89 06                	mov    DWORD PTR [esi],eax
c001a0cd:	eb 69                	jmp    c001a138 <Vm::x87Handler(regs*)+0x28a>
c001a0cf:	90                   	nop
c001a0d0:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a0d4:	84 d2                	test   dl,dl
c001a0d6:	0f 85 2c 06 00 00    	jne    c001a708 <Vm::x87Handler(regs*)+0x85a>
c001a0dc:	57                   	push   edi
c001a0dd:	57                   	push   edi
c001a0de:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a0e1:	ff 36                	push   DWORD PTR [esi]
c001a0e3:	e8 04 fa ff ff       	call   c0019aec <Vm::fpu64ToInternal(unsigned long long)>
c001a0e8:	5e                   	pop    esi
c001a0e9:	5f                   	pop    edi
c001a0ea:	52                   	push   edx
c001a0eb:	50                   	push   eax
c001a0ec:	e8 0c fd ff ff       	call   c0019dfd <Vm::fpuPush(unsigned long long)>
c001a0f1:	8d 76 00             	lea    esi,[esi+0x0]
c001a0f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a0f8:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001a0fb:	e9 2c fe ff ff       	jmp    c0019f2c <Vm::x87Handler(regs*)+0x7e>
c001a100:	80 fa 03             	cmp    dl,0x3
c001a103:	0f 85 2b 07 00 00    	jne    c001a834 <Vm::x87Handler(regs*)+0x986>
c001a109:	57                   	push   edi
c001a10a:	57                   	push   edi
c001a10b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a10e:	ff 36                	push   DWORD PTR [esi]
c001a110:	e8 d7 f9 ff ff       	call   c0019aec <Vm::fpu64ToInternal(unsigned long long)>
c001a115:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a11c:	89 c6                	mov    esi,eax
c001a11e:	89 d7                	mov    edi,edx
c001a120:	e8 49 fc ff ff       	call   c0019d6e <Vm::fpuGetReg(int)>
c001a125:	57                   	push   edi
c001a126:	56                   	push   esi
c001a127:	52                   	push   edx
c001a128:	50                   	push   eax
c001a129:	e8 60 fb ff ff       	call   c0019c8e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a12e:	83 c4 20             	add    esp,0x20
c001a131:	e8 25 fd ff ff       	call   c0019e5b <Vm::fpuPop()>
c001a136:	66 90                	xchg   ax,ax
c001a138:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a13c:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001a13f:	e9 ec fd ff ff       	jmp    c0019f30 <Vm::x87Handler(regs*)+0x82>
c001a144:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a148:	8d 50 40             	lea    edx,[eax+0x40]
c001a14b:	80 fa 07             	cmp    dl,0x7
c001a14e:	77 2c                	ja     c001a17c <Vm::x87Handler(regs*)+0x2ce>
c001a150:	83 ec 0c             	sub    esp,0xc
c001a153:	2d c0 00 00 00       	sub    eax,0xc0
c001a158:	50                   	push   eax
c001a159:	e8 10 fc ff ff       	call   c0019d6e <Vm::fpuGetReg(int)>
c001a15e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a165:	89 c6                	mov    esi,eax
c001a167:	89 d7                	mov    edi,edx
c001a169:	e8 00 fc ff ff       	call   c0019d6e <Vm::fpuGetReg(int)>
c001a16e:	57                   	push   edi
c001a16f:	56                   	push   esi
c001a170:	52                   	push   edx
c001a171:	50                   	push   eax
c001a172:	e8 6d fb ff ff       	call   c0019ce4 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001a177:	eb 33                	jmp    c001a1ac <Vm::x87Handler(regs*)+0x2fe>
c001a179:	8d 76 00             	lea    esi,[esi+0x0]
c001a17c:	8d 50 38             	lea    edx,[eax+0x38]
c001a17f:	80 fa 07             	cmp    dl,0x7
c001a182:	77 30                	ja     c001a1b4 <Vm::x87Handler(regs*)+0x306>
c001a184:	83 ec 0c             	sub    esp,0xc
c001a187:	2d c8 00 00 00       	sub    eax,0xc8
c001a18c:	50                   	push   eax
c001a18d:	e8 dc fb ff ff       	call   c0019d6e <Vm::fpuGetReg(int)>
c001a192:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a199:	89 c6                	mov    esi,eax
c001a19b:	89 d7                	mov    edi,edx
c001a19d:	e8 cc fb ff ff       	call   c0019d6e <Vm::fpuGetReg(int)>
c001a1a2:	57                   	push   edi
c001a1a3:	56                   	push   esi
c001a1a4:	52                   	push   edx
c001a1a5:	50                   	push   eax
c001a1a6:	e8 72 fb ff ff       	call   c0019d1d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a1ab:	90                   	nop
c001a1ac:	83 c4 1c             	add    esp,0x1c
c001a1af:	e9 b4 fd ff ff       	jmp    c0019f68 <Vm::x87Handler(regs*)+0xba>
c001a1b4:	8d 50 30             	lea    edx,[eax+0x30]
c001a1b7:	80 fa 07             	cmp    dl,0x7
c001a1ba:	77 10                	ja     c001a1cc <Vm::x87Handler(regs*)+0x31e>
c001a1bc:	83 ec 0c             	sub    esp,0xc
c001a1bf:	2d d0 00 00 00       	sub    eax,0xd0
c001a1c4:	e9 c3 03 00 00       	jmp    c001a58c <Vm::x87Handler(regs*)+0x6de>
c001a1c9:	8d 76 00             	lea    esi,[esi+0x0]
c001a1cc:	8d 50 28             	lea    edx,[eax+0x28]
c001a1cf:	80 fa 07             	cmp    dl,0x7
c001a1d2:	77 10                	ja     c001a1e4 <Vm::x87Handler(regs*)+0x336>
c001a1d4:	83 ec 0c             	sub    esp,0xc
c001a1d7:	2d d8 00 00 00       	sub    eax,0xd8
c001a1dc:	e9 e7 03 00 00       	jmp    c001a5c8 <Vm::x87Handler(regs*)+0x71a>
c001a1e1:	8d 76 00             	lea    esi,[esi+0x0]
c001a1e4:	8d 50 20             	lea    edx,[eax+0x20]
c001a1e7:	80 fa 07             	cmp    dl,0x7
c001a1ea:	77 1c                	ja     c001a208 <Vm::x87Handler(regs*)+0x35a>
c001a1ec:	83 ec 0c             	sub    esp,0xc
c001a1ef:	2d e0 00 00 00       	sub    eax,0xe0
c001a1f4:	50                   	push   eax
c001a1f5:	e8 74 fb ff ff       	call   c0019d6e <Vm::fpuGetReg(int)>
c001a1fa:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a201:	89 c6                	mov    esi,eax
c001a203:	89 d7                	mov    edi,edx
c001a205:	eb 25                	jmp    c001a22c <Vm::x87Handler(regs*)+0x37e>
c001a207:	90                   	nop
c001a208:	8d 50 18             	lea    edx,[eax+0x18]
c001a20b:	80 fa 07             	cmp    dl,0x7
c001a20e:	77 30                	ja     c001a240 <Vm::x87Handler(regs*)+0x392>
c001a210:	83 ec 0c             	sub    esp,0xc
c001a213:	6a 00                	push   0x0
c001a215:	e8 54 fb ff ff       	call   c0019d6e <Vm::fpuGetReg(int)>
c001a21a:	89 c6                	mov    esi,eax
c001a21c:	89 d7                	mov    edi,edx
c001a21e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a222:	2d e8 00 00 00       	sub    eax,0xe8
c001a227:	89 04 24             	mov    DWORD PTR [esp],eax
c001a22a:	66 90                	xchg   ax,ax
c001a22c:	e8 3d fb ff ff       	call   c0019d6e <Vm::fpuGetReg(int)>
c001a231:	57                   	push   edi
c001a232:	56                   	push   esi
c001a233:	52                   	push   edx
c001a234:	50                   	push   eax
c001a235:	e8 d4 fa ff ff       	call   c0019d0e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a23a:	e9 6d ff ff ff       	jmp    c001a1ac <Vm::x87Handler(regs*)+0x2fe>
c001a23f:	90                   	nop
c001a240:	8d 50 10             	lea    edx,[eax+0x10]
c001a243:	80 fa 07             	cmp    dl,0x7
c001a246:	77 1c                	ja     c001a264 <Vm::x87Handler(regs*)+0x3b6>
c001a248:	83 ec 0c             	sub    esp,0xc
c001a24b:	2d f0 00 00 00       	sub    eax,0xf0
c001a250:	50                   	push   eax
c001a251:	e8 18 fb ff ff       	call   c0019d6e <Vm::fpuGetReg(int)>
c001a256:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a25d:	89 c6                	mov    esi,eax
c001a25f:	89 d7                	mov    edi,edx
c001a261:	eb 25                	jmp    c001a288 <Vm::x87Handler(regs*)+0x3da>
c001a263:	90                   	nop
c001a264:	3c f7                	cmp    al,0xf7
c001a266:	0f 86 00 04 00 00    	jbe    c001a66c <Vm::x87Handler(regs*)+0x7be>
c001a26c:	83 ec 0c             	sub    esp,0xc
c001a26f:	6a 00                	push   0x0
c001a271:	e8 f8 fa ff ff       	call   c0019d6e <Vm::fpuGetReg(int)>
c001a276:	89 c6                	mov    esi,eax
c001a278:	89 d7                	mov    edi,edx
c001a27a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a27e:	2d f8 00 00 00       	sub    eax,0xf8
c001a283:	89 04 24             	mov    DWORD PTR [esp],eax
c001a286:	66 90                	xchg   ax,ax
c001a288:	e8 e1 fa ff ff       	call   c0019d6e <Vm::fpuGetReg(int)>
c001a28d:	57                   	push   edi
c001a28e:	56                   	push   esi
c001a28f:	52                   	push   edx
c001a290:	50                   	push   eax
c001a291:	e8 a6 fa ff ff       	call   c0019d3c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a296:	83 c4 1c             	add    esp,0x1c
c001a299:	52                   	push   edx
c001a29a:	50                   	push   eax
c001a29b:	6a 00                	push   0x0
c001a29d:	e9 6a 02 00 00       	jmp    c001a50c <Vm::x87Handler(regs*)+0x65e>
c001a2a2:	66 90                	xchg   ax,ax
c001a2a4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a2a8:	8d 50 40             	lea    edx,[eax+0x40]
c001a2ab:	80 fa 07             	cmp    dl,0x7
c001a2ae:	77 38                	ja     c001a2e8 <Vm::x87Handler(regs*)+0x43a>
c001a2b0:	83 ec 0c             	sub    esp,0xc
c001a2b3:	2d c0 00 00 00       	sub    eax,0xc0
c001a2b8:	50                   	push   eax
c001a2b9:	e8 b0 fa ff ff       	call   c0019d6e <Vm::fpuGetReg(int)>
c001a2be:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a2c5:	89 c6                	mov    esi,eax
c001a2c7:	89 d7                	mov    edi,edx
c001a2c9:	e8 a0 fa ff ff       	call   c0019d6e <Vm::fpuGetReg(int)>
c001a2ce:	57                   	push   edi
c001a2cf:	56                   	push   esi
c001a2d0:	52                   	push   edx
c001a2d1:	50                   	push   eax
c001a2d2:	e8 0d fa ff ff       	call   c0019ce4 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001a2d7:	83 c4 1c             	add    esp,0x1c
c001a2da:	52                   	push   edx
c001a2db:	50                   	push   eax
c001a2dc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a2e0:	2d c0 00 00 00       	sub    eax,0xc0
c001a2e5:	eb 41                	jmp    c001a328 <Vm::x87Handler(regs*)+0x47a>
c001a2e7:	90                   	nop
c001a2e8:	8d 50 38             	lea    edx,[eax+0x38]
c001a2eb:	80 fa 07             	cmp    dl,0x7
c001a2ee:	77 40                	ja     c001a330 <Vm::x87Handler(regs*)+0x482>
c001a2f0:	83 ec 0c             	sub    esp,0xc
c001a2f3:	2d c8 00 00 00       	sub    eax,0xc8
c001a2f8:	50                   	push   eax
c001a2f9:	e8 70 fa ff ff       	call   c0019d6e <Vm::fpuGetReg(int)>
c001a2fe:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a305:	89 c6                	mov    esi,eax
c001a307:	89 d7                	mov    edi,edx
c001a309:	e8 60 fa ff ff       	call   c0019d6e <Vm::fpuGetReg(int)>
c001a30e:	57                   	push   edi
c001a30f:	56                   	push   esi
c001a310:	52                   	push   edx
c001a311:	50                   	push   eax
c001a312:	e8 06 fa ff ff       	call   c0019d1d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a317:	83 c4 1c             	add    esp,0x1c
c001a31a:	52                   	push   edx
c001a31b:	50                   	push   eax
c001a31c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a320:	2d c8 00 00 00       	sub    eax,0xc8
c001a325:	8d 76 00             	lea    esi,[esi+0x0]
c001a328:	50                   	push   eax
c001a329:	e9 42 fc ff ff       	jmp    c0019f70 <Vm::x87Handler(regs*)+0xc2>
c001a32e:	66 90                	xchg   ax,ax
c001a330:	83 c0 18             	add    eax,0x18
c001a333:	3c 07                	cmp    al,0x7
c001a335:	0f 87 6d 04 00 00    	ja     c001a7a8 <Vm::x87Handler(regs*)+0x8fa>
c001a33b:	83 ec 0c             	sub    esp,0xc
c001a33e:	6a 00                	push   0x0
c001a340:	e8 29 fa ff ff       	call   c0019d6e <Vm::fpuGetReg(int)>
c001a345:	89 c6                	mov    esi,eax
c001a347:	89 d7                	mov    edi,edx
c001a349:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a34d:	2d e8 00 00 00       	sub    eax,0xe8
c001a352:	89 04 24             	mov    DWORD PTR [esp],eax
c001a355:	e8 14 fa ff ff       	call   c0019d6e <Vm::fpuGetReg(int)>
c001a35a:	57                   	push   edi
c001a35b:	56                   	push   esi
c001a35c:	52                   	push   edx
c001a35d:	50                   	push   eax
c001a35e:	e8 ab f9 ff ff       	call   c0019d0e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a363:	83 c4 1c             	add    esp,0x1c
c001a366:	52                   	push   edx
c001a367:	50                   	push   eax
c001a368:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a36c:	2d e8 00 00 00       	sub    eax,0xe8
c001a371:	eb b5                	jmp    c001a328 <Vm::x87Handler(regs*)+0x47a>
c001a373:	90                   	nop
c001a374:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a378:	8d 50 40             	lea    edx,[eax+0x40]
c001a37b:	80 fa 07             	cmp    dl,0x7
c001a37e:	77 3c                	ja     c001a3bc <Vm::x87Handler(regs*)+0x50e>
c001a380:	83 ec 0c             	sub    esp,0xc
c001a383:	2d c0 00 00 00       	sub    eax,0xc0
c001a388:	50                   	push   eax
c001a389:	e8 e0 f9 ff ff       	call   c0019d6e <Vm::fpuGetReg(int)>
c001a38e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a395:	89 c6                	mov    esi,eax
c001a397:	89 d7                	mov    edi,edx
c001a399:	e8 d0 f9 ff ff       	call   c0019d6e <Vm::fpuGetReg(int)>
c001a39e:	57                   	push   edi
c001a39f:	56                   	push   esi
c001a3a0:	52                   	push   edx
c001a3a1:	50                   	push   eax
c001a3a2:	e8 3d f9 ff ff       	call   c0019ce4 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001a3a7:	83 c4 1c             	add    esp,0x1c
c001a3aa:	52                   	push   edx
c001a3ab:	50                   	push   eax
c001a3ac:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a3b0:	2d c0 00 00 00       	sub    eax,0xc0
c001a3b5:	e9 b2 01 00 00       	jmp    c001a56c <Vm::x87Handler(regs*)+0x6be>
c001a3ba:	66 90                	xchg   ax,ax
c001a3bc:	8d 50 20             	lea    edx,[eax+0x20]
c001a3bf:	80 fa 07             	cmp    dl,0x7
c001a3c2:	77 3c                	ja     c001a400 <Vm::x87Handler(regs*)+0x552>
c001a3c4:	83 ec 0c             	sub    esp,0xc
c001a3c7:	2d e0 00 00 00       	sub    eax,0xe0
c001a3cc:	50                   	push   eax
c001a3cd:	e8 9c f9 ff ff       	call   c0019d6e <Vm::fpuGetReg(int)>
c001a3d2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a3d9:	89 c6                	mov    esi,eax
c001a3db:	89 d7                	mov    edi,edx
c001a3dd:	e8 8c f9 ff ff       	call   c0019d6e <Vm::fpuGetReg(int)>
c001a3e2:	57                   	push   edi
c001a3e3:	56                   	push   esi
c001a3e4:	52                   	push   edx
c001a3e5:	50                   	push   eax
c001a3e6:	e8 23 f9 ff ff       	call   c0019d0e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a3eb:	83 c4 1c             	add    esp,0x1c
c001a3ee:	52                   	push   edx
c001a3ef:	50                   	push   eax
c001a3f0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a3f4:	2d e0 00 00 00       	sub    eax,0xe0
c001a3f9:	e9 6e 01 00 00       	jmp    c001a56c <Vm::x87Handler(regs*)+0x6be>
c001a3fe:	66 90                	xchg   ax,ax
c001a400:	8d 50 18             	lea    edx,[eax+0x18]
c001a403:	80 fa 07             	cmp    dl,0x7
c001a406:	77 3c                	ja     c001a444 <Vm::x87Handler(regs*)+0x596>
c001a408:	83 ec 0c             	sub    esp,0xc
c001a40b:	6a 00                	push   0x0
c001a40d:	e8 5c f9 ff ff       	call   c0019d6e <Vm::fpuGetReg(int)>
c001a412:	89 c6                	mov    esi,eax
c001a414:	89 d7                	mov    edi,edx
c001a416:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a41a:	2d e8 00 00 00       	sub    eax,0xe8
c001a41f:	89 04 24             	mov    DWORD PTR [esp],eax
c001a422:	e8 47 f9 ff ff       	call   c0019d6e <Vm::fpuGetReg(int)>
c001a427:	57                   	push   edi
c001a428:	56                   	push   esi
c001a429:	52                   	push   edx
c001a42a:	50                   	push   eax
c001a42b:	e8 de f8 ff ff       	call   c0019d0e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a430:	83 c4 1c             	add    esp,0x1c
c001a433:	52                   	push   edx
c001a434:	50                   	push   eax
c001a435:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a439:	2d e8 00 00 00       	sub    eax,0xe8
c001a43e:	e9 29 01 00 00       	jmp    c001a56c <Vm::x87Handler(regs*)+0x6be>
c001a443:	90                   	nop
c001a444:	8d 50 38             	lea    edx,[eax+0x38]
c001a447:	80 fa 07             	cmp    dl,0x7
c001a44a:	77 3c                	ja     c001a488 <Vm::x87Handler(regs*)+0x5da>
c001a44c:	83 ec 0c             	sub    esp,0xc
c001a44f:	2d c8 00 00 00       	sub    eax,0xc8
c001a454:	50                   	push   eax
c001a455:	e8 14 f9 ff ff       	call   c0019d6e <Vm::fpuGetReg(int)>
c001a45a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a461:	89 c6                	mov    esi,eax
c001a463:	89 d7                	mov    edi,edx
c001a465:	e8 04 f9 ff ff       	call   c0019d6e <Vm::fpuGetReg(int)>
c001a46a:	57                   	push   edi
c001a46b:	56                   	push   esi
c001a46c:	52                   	push   edx
c001a46d:	50                   	push   eax
c001a46e:	e8 aa f8 ff ff       	call   c0019d1d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a473:	83 c4 1c             	add    esp,0x1c
c001a476:	52                   	push   edx
c001a477:	50                   	push   eax
c001a478:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a47c:	2d c8 00 00 00       	sub    eax,0xc8
c001a481:	e9 82 00 00 00       	jmp    c001a508 <Vm::x87Handler(regs*)+0x65a>
c001a486:	66 90                	xchg   ax,ax
c001a488:	3c f7                	cmp    al,0xf7
c001a48a:	76 38                	jbe    c001a4c4 <Vm::x87Handler(regs*)+0x616>
c001a48c:	83 ec 0c             	sub    esp,0xc
c001a48f:	6a 00                	push   0x0
c001a491:	e8 d8 f8 ff ff       	call   c0019d6e <Vm::fpuGetReg(int)>
c001a496:	89 c6                	mov    esi,eax
c001a498:	89 d7                	mov    edi,edx
c001a49a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a49e:	2d f8 00 00 00       	sub    eax,0xf8
c001a4a3:	89 04 24             	mov    DWORD PTR [esp],eax
c001a4a6:	e8 c3 f8 ff ff       	call   c0019d6e <Vm::fpuGetReg(int)>
c001a4ab:	57                   	push   edi
c001a4ac:	56                   	push   esi
c001a4ad:	52                   	push   edx
c001a4ae:	50                   	push   eax
c001a4af:	e8 88 f8 ff ff       	call   c0019d3c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a4b4:	83 c4 1c             	add    esp,0x1c
c001a4b7:	52                   	push   edx
c001a4b8:	50                   	push   eax
c001a4b9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a4bd:	2d f8 00 00 00       	sub    eax,0xf8
c001a4c2:	eb 44                	jmp    c001a508 <Vm::x87Handler(regs*)+0x65a>
c001a4c4:	8d 50 10             	lea    edx,[eax+0x10]
c001a4c7:	80 fa 07             	cmp    dl,0x7
c001a4ca:	0f 87 6c 01 00 00    	ja     c001a63c <Vm::x87Handler(regs*)+0x78e>
c001a4d0:	83 ec 0c             	sub    esp,0xc
c001a4d3:	2d f0 00 00 00       	sub    eax,0xf0
c001a4d8:	50                   	push   eax
c001a4d9:	e8 90 f8 ff ff       	call   c0019d6e <Vm::fpuGetReg(int)>
c001a4de:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a4e5:	89 c6                	mov    esi,eax
c001a4e7:	89 d7                	mov    edi,edx
c001a4e9:	e8 80 f8 ff ff       	call   c0019d6e <Vm::fpuGetReg(int)>
c001a4ee:	57                   	push   edi
c001a4ef:	56                   	push   esi
c001a4f0:	52                   	push   edx
c001a4f1:	50                   	push   eax
c001a4f2:	e8 45 f8 ff ff       	call   c0019d3c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a4f7:	83 c4 1c             	add    esp,0x1c
c001a4fa:	52                   	push   edx
c001a4fb:	50                   	push   eax
c001a4fc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a500:	2d f0 00 00 00       	sub    eax,0xf0
c001a505:	8d 76 00             	lea    esi,[esi+0x0]
c001a508:	50                   	push   eax
c001a509:	8d 76 00             	lea    esi,[esi+0x0]
c001a50c:	e8 a0 f8 ff ff       	call   c0019db1 <Vm::fpuSetReg(int, unsigned long long)>
c001a511:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a515:	e8 41 f9 ff ff       	call   c0019e5b <Vm::fpuPop()>
c001a51a:	e9 0d fa ff ff       	jmp    c0019f2c <Vm::x87Handler(regs*)+0x7e>
c001a51f:	90                   	nop
c001a520:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a524:	8d 50 30             	lea    edx,[eax+0x30]
c001a527:	80 fa 07             	cmp    dl,0x7
c001a52a:	77 20                	ja     c001a54c <Vm::x87Handler(regs*)+0x69e>
c001a52c:	83 ec 0c             	sub    esp,0xc
c001a52f:	6a 00                	push   0x0
c001a531:	e8 38 f8 ff ff       	call   c0019d6e <Vm::fpuGetReg(int)>
c001a536:	83 c4 0c             	add    esp,0xc
c001a539:	52                   	push   edx
c001a53a:	50                   	push   eax
c001a53b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a53f:	2d d0 00 00 00       	sub    eax,0xd0
c001a544:	e9 df fd ff ff       	jmp    c001a328 <Vm::x87Handler(regs*)+0x47a>
c001a549:	8d 76 00             	lea    esi,[esi+0x0]
c001a54c:	8d 50 28             	lea    edx,[eax+0x28]
c001a54f:	80 fa 07             	cmp    dl,0x7
c001a552:	77 28                	ja     c001a57c <Vm::x87Handler(regs*)+0x6ce>
c001a554:	83 ec 0c             	sub    esp,0xc
c001a557:	6a 00                	push   0x0
c001a559:	e8 10 f8 ff ff       	call   c0019d6e <Vm::fpuGetReg(int)>
c001a55e:	83 c4 0c             	add    esp,0xc
c001a561:	52                   	push   edx
c001a562:	50                   	push   eax
c001a563:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a567:	2d d8 00 00 00       	sub    eax,0xd8
c001a56c:	50                   	push   eax
c001a56d:	e8 3f f8 ff ff       	call   c0019db1 <Vm::fpuSetReg(int, unsigned long long)>
c001a572:	e8 e4 f8 ff ff       	call   c0019e5b <Vm::fpuPop()>
c001a577:	e9 ac f9 ff ff       	jmp    c0019f28 <Vm::x87Handler(regs*)+0x7a>
c001a57c:	8d 50 20             	lea    edx,[eax+0x20]
c001a57f:	80 fa 07             	cmp    dl,0x7
c001a582:	77 30                	ja     c001a5b4 <Vm::x87Handler(regs*)+0x706>
c001a584:	83 ec 0c             	sub    esp,0xc
c001a587:	2d e0 00 00 00       	sub    eax,0xe0
c001a58c:	50                   	push   eax
c001a58d:	e8 dc f7 ff ff       	call   c0019d6e <Vm::fpuGetReg(int)>
c001a592:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a599:	89 c6                	mov    esi,eax
c001a59b:	89 d7                	mov    edi,edx
c001a59d:	e8 cc f7 ff ff       	call   c0019d6e <Vm::fpuGetReg(int)>
c001a5a2:	57                   	push   edi
c001a5a3:	56                   	push   esi
c001a5a4:	52                   	push   edx
c001a5a5:	50                   	push   eax
c001a5a6:	e8 e3 f6 ff ff       	call   c0019c8e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a5ab:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a5af:	e9 78 02 00 00       	jmp    c001a82c <Vm::x87Handler(regs*)+0x97e>
c001a5b4:	8d 50 18             	lea    edx,[eax+0x18]
c001a5b7:	80 fa 07             	cmp    dl,0x7
c001a5ba:	0f 87 10 fb ff ff    	ja     c001a0d0 <Vm::x87Handler(regs*)+0x222>
c001a5c0:	83 ec 0c             	sub    esp,0xc
c001a5c3:	2d e8 00 00 00       	sub    eax,0xe8
c001a5c8:	50                   	push   eax
c001a5c9:	e8 a0 f7 ff ff       	call   c0019d6e <Vm::fpuGetReg(int)>
c001a5ce:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a5d5:	89 c6                	mov    esi,eax
c001a5d7:	89 d7                	mov    edi,edx
c001a5d9:	e8 90 f7 ff ff       	call   c0019d6e <Vm::fpuGetReg(int)>
c001a5de:	57                   	push   edi
c001a5df:	56                   	push   esi
c001a5e0:	52                   	push   edx
c001a5e1:	50                   	push   eax
c001a5e2:	e8 a7 f6 ff ff       	call   c0019c8e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a5e7:	83 c4 20             	add    esp,0x20
c001a5ea:	e8 6c f8 ff ff       	call   c0019e5b <Vm::fpuPop()>
c001a5ef:	eb 6f                	jmp    c001a660 <Vm::x87Handler(regs*)+0x7b2>
c001a5f1:	8d 76 00             	lea    esi,[esi+0x0]
c001a5f4:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001a5f8:	0f 85 22 01 00 00    	jne    c001a720 <Vm::x87Handler(regs*)+0x872>
c001a5fe:	66 90                	xchg   ax,ax
c001a600:	83 ec 0c             	sub    esp,0xc
c001a603:	6a 01                	push   0x1
c001a605:	e8 64 f7 ff ff       	call   c0019d6e <Vm::fpuGetReg(int)>
c001a60a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a611:	89 c6                	mov    esi,eax
c001a613:	89 d7                	mov    edi,edx
c001a615:	e8 54 f7 ff ff       	call   c0019d6e <Vm::fpuGetReg(int)>
c001a61a:	57                   	push   edi
c001a61b:	56                   	push   esi
c001a61c:	52                   	push   edx
c001a61d:	50                   	push   eax
c001a61e:	e8 6b f6 ff ff       	call   c0019c8e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a623:	83 c4 20             	add    esp,0x20
c001a626:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a62a:	e8 2c f8 ff ff       	call   c0019e5b <Vm::fpuPop()>
c001a62f:	e8 27 f8 ff ff       	call   c0019e5b <Vm::fpuPop()>
c001a634:	e9 f7 f8 ff ff       	jmp    c0019f30 <Vm::x87Handler(regs*)+0x82>
c001a639:	8d 76 00             	lea    esi,[esi+0x0]
c001a63c:	3c d9                	cmp    al,0xd9
c001a63e:	0f 85 e8 02 00 00    	jne    c001a92c <Vm::x87Handler(regs*)+0xa7e>
c001a644:	eb ba                	jmp    c001a600 <Vm::x87Handler(regs*)+0x752>
c001a646:	66 90                	xchg   ax,ax
c001a648:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001a64c:	0f 85 2a 03 00 00    	jne    c001a97c <Vm::x87Handler(regs*)+0xace>
c001a652:	0f b7 05 c0 93 02 c0 	movzx  eax,WORD PTR ds:0xc00293c0
c001a659:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001a65d:	8d 76 00             	lea    esi,[esi+0x0]
c001a660:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a664:	e9 c7 f8 ff ff       	jmp    c0019f30 <Vm::x87Handler(regs*)+0x82>
c001a669:	8d 76 00             	lea    esi,[esi+0x0]
c001a66c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a670:	84 d2                	test   dl,dl
c001a672:	75 10                	jne    c001a684 <Vm::x87Handler(regs*)+0x7d6>
c001a674:	83 ec 0c             	sub    esp,0xc
c001a677:	ff 36                	push   DWORD PTR [esi]
c001a679:	e8 29 f4 ff ff       	call   c0019aa7 <Vm::fpu32ToInternal(unsigned int)>
c001a67e:	e9 39 01 00 00       	jmp    c001a7bc <Vm::x87Handler(regs*)+0x90e>
c001a683:	90                   	nop
c001a684:	80 fa 01             	cmp    dl,0x1
c001a687:	75 0f                	jne    c001a698 <Vm::x87Handler(regs*)+0x7ea>
c001a689:	83 ec 0c             	sub    esp,0xc
c001a68c:	ff 36                	push   DWORD PTR [esi]
c001a68e:	e8 14 f4 ff ff       	call   c0019aa7 <Vm::fpu32ToInternal(unsigned int)>
c001a693:	e9 b4 02 00 00       	jmp    c001a94c <Vm::x87Handler(regs*)+0xa9e>
c001a698:	80 fa 04             	cmp    dl,0x4
c001a69b:	75 0f                	jne    c001a6ac <Vm::x87Handler(regs*)+0x7fe>
c001a69d:	83 ec 0c             	sub    esp,0xc
c001a6a0:	ff 36                	push   DWORD PTR [esi]
c001a6a2:	e8 00 f4 ff ff       	call   c0019aa7 <Vm::fpu32ToInternal(unsigned int)>
c001a6a7:	e9 9c 01 00 00       	jmp    c001a848 <Vm::x87Handler(regs*)+0x99a>
c001a6ac:	80 fa 05             	cmp    dl,0x5
c001a6af:	75 1b                	jne    c001a6cc <Vm::x87Handler(regs*)+0x81e>
c001a6b1:	83 ec 0c             	sub    esp,0xc
c001a6b4:	6a 00                	push   0x0
c001a6b6:	e8 b3 f6 ff ff       	call   c0019d6e <Vm::fpuGetReg(int)>
c001a6bb:	89 c7                	mov    edi,eax
c001a6bd:	89 d5                	mov    ebp,edx
c001a6bf:	58                   	pop    eax
c001a6c0:	ff 36                	push   DWORD PTR [esi]
c001a6c2:	e8 e0 f3 ff ff       	call   c0019aa7 <Vm::fpu32ToInternal(unsigned int)>
c001a6c7:	e9 bc 01 00 00       	jmp    c001a888 <Vm::x87Handler(regs*)+0x9da>
c001a6cc:	80 fa 06             	cmp    dl,0x6
c001a6cf:	75 0f                	jne    c001a6e0 <Vm::x87Handler(regs*)+0x832>
c001a6d1:	83 ec 0c             	sub    esp,0xc
c001a6d4:	ff 36                	push   DWORD PTR [esi]
c001a6d6:	e8 cc f3 ff ff       	call   c0019aa7 <Vm::fpu32ToInternal(unsigned int)>
c001a6db:	e9 cc 01 00 00       	jmp    c001a8ac <Vm::x87Handler(regs*)+0x9fe>
c001a6e0:	31 c0                	xor    eax,eax
c001a6e2:	80 fa 07             	cmp    dl,0x7
c001a6e5:	0f 85 d5 02 00 00    	jne    c001a9c0 <Vm::x87Handler(regs*)+0xb12>
c001a6eb:	83 ec 0c             	sub    esp,0xc
c001a6ee:	6a 00                	push   0x0
c001a6f0:	e8 79 f6 ff ff       	call   c0019d6e <Vm::fpuGetReg(int)>
c001a6f5:	89 c7                	mov    edi,eax
c001a6f7:	89 d5                	mov    ebp,edx
c001a6f9:	58                   	pop    eax
c001a6fa:	ff 36                	push   DWORD PTR [esi]
c001a6fc:	e8 a6 f3 ff ff       	call   c0019aa7 <Vm::fpu32ToInternal(unsigned int)>
c001a701:	e9 ee 01 00 00       	jmp    c001a8f4 <Vm::x87Handler(regs*)+0xa46>
c001a706:	66 90                	xchg   ax,ax
c001a708:	80 fa 03             	cmp    dl,0x3
c001a70b:	0f 85 f7 01 00 00    	jne    c001a908 <Vm::x87Handler(regs*)+0xa5a>
c001a711:	e8 45 f7 ff ff       	call   c0019e5b <Vm::fpuPop()>
c001a716:	51                   	push   ecx
c001a717:	51                   	push   ecx
c001a718:	e9 03 02 00 00       	jmp    c001a920 <Vm::x87Handler(regs*)+0xa72>
c001a71d:	8d 76 00             	lea    esi,[esi+0x0]
c001a720:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a724:	80 fa 01             	cmp    dl,0x1
c001a727:	75 0b                	jne    c001a734 <Vm::x87Handler(regs*)+0x886>
c001a729:	57                   	push   edi
c001a72a:	57                   	push   edi
c001a72b:	8b 06                	mov    eax,DWORD PTR [esi]
c001a72d:	e9 0e 02 00 00       	jmp    c001a940 <Vm::x87Handler(regs*)+0xa92>
c001a732:	66 90                	xchg   ax,ax
c001a734:	80 fa 04             	cmp    dl,0x4
c001a737:	75 13                	jne    c001a74c <Vm::x87Handler(regs*)+0x89e>
c001a739:	31 d2                	xor    edx,edx
c001a73b:	51                   	push   ecx
c001a73c:	51                   	push   ecx
c001a73d:	8b 06                	mov    eax,DWORD PTR [esi]
c001a73f:	52                   	push   edx
c001a740:	50                   	push   eax
c001a741:	e8 4a f4 ff ff       	call   c0019b90 <Vm::fpuLongToFloat(long long)>
c001a746:	e9 fd 00 00 00       	jmp    c001a848 <Vm::x87Handler(regs*)+0x99a>
c001a74b:	90                   	nop
c001a74c:	31 c0                	xor    eax,eax
c001a74e:	80 fa 07             	cmp    dl,0x7
c001a751:	0f 85 69 02 00 00    	jne    c001a9c0 <Vm::x87Handler(regs*)+0xb12>
c001a757:	83 ec 0c             	sub    esp,0xc
c001a75a:	6a 00                	push   0x0
c001a75c:	e8 0d f6 ff ff       	call   c0019d6e <Vm::fpuGetReg(int)>
c001a761:	89 c7                	mov    edi,eax
c001a763:	89 d5                	mov    ebp,edx
c001a765:	58                   	pop    eax
c001a766:	8b 06                	mov    eax,DWORD PTR [esi]
c001a768:	5a                   	pop    edx
c001a769:	31 d2                	xor    edx,edx
c001a76b:	52                   	push   edx
c001a76c:	50                   	push   eax
c001a76d:	e8 1e f4 ff ff       	call   c0019b90 <Vm::fpuLongToFloat(long long)>
c001a772:	e9 7d 01 00 00       	jmp    c001a8f4 <Vm::x87Handler(regs*)+0xa46>
c001a777:	90                   	nop
c001a778:	84 d2                	test   dl,dl
c001a77a:	75 10                	jne    c001a78c <Vm::x87Handler(regs*)+0x8de>
c001a77c:	31 d2                	xor    edx,edx
c001a77e:	55                   	push   ebp
c001a77f:	55                   	push   ebp
c001a780:	8b 06                	mov    eax,DWORD PTR [esi]
c001a782:	52                   	push   edx
c001a783:	50                   	push   eax
c001a784:	e9 03 02 00 00       	jmp    c001a98c <Vm::x87Handler(regs*)+0xade>
c001a789:	8d 76 00             	lea    esi,[esi+0x0]
c001a78c:	31 c0                	xor    eax,eax
c001a78e:	80 fa 02             	cmp    dl,0x2
c001a791:	0f 85 29 02 00 00    	jne    c001a9c0 <Vm::x87Handler(regs*)+0xb12>
c001a797:	83 ec 0c             	sub    esp,0xc
c001a79a:	6a 00                	push   0x0
c001a79c:	e8 cd f5 ff ff       	call   c0019d6e <Vm::fpuGetReg(int)>
c001a7a1:	59                   	pop    ecx
c001a7a2:	5f                   	pop    edi
c001a7a3:	e9 18 f9 ff ff       	jmp    c001a0c0 <Vm::x87Handler(regs*)+0x212>
c001a7a8:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a7ac:	84 d2                	test   dl,dl
c001a7ae:	75 2c                	jne    c001a7dc <Vm::x87Handler(regs*)+0x92e>
c001a7b0:	50                   	push   eax
c001a7b1:	50                   	push   eax
c001a7b2:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a7b5:	ff 36                	push   DWORD PTR [esi]
c001a7b7:	e8 30 f3 ff ff       	call   c0019aec <Vm::fpu64ToInternal(unsigned long long)>
c001a7bc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a7c3:	89 c6                	mov    esi,eax
c001a7c5:	89 d7                	mov    edi,edx
c001a7c7:	e8 a2 f5 ff ff       	call   c0019d6e <Vm::fpuGetReg(int)>
c001a7cc:	57                   	push   edi
c001a7cd:	56                   	push   esi
c001a7ce:	52                   	push   edx
c001a7cf:	50                   	push   eax
c001a7d0:	e8 0f f5 ff ff       	call   c0019ce4 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001a7d5:	e9 8e 01 00 00       	jmp    c001a968 <Vm::x87Handler(regs*)+0xaba>
c001a7da:	66 90                	xchg   ax,ax
c001a7dc:	80 fa 01             	cmp    dl,0x1
c001a7df:	75 13                	jne    c001a7f4 <Vm::x87Handler(regs*)+0x946>
c001a7e1:	50                   	push   eax
c001a7e2:	50                   	push   eax
c001a7e3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a7e6:	ff 36                	push   DWORD PTR [esi]
c001a7e8:	e8 ff f2 ff ff       	call   c0019aec <Vm::fpu64ToInternal(unsigned long long)>
c001a7ed:	e9 5a 01 00 00       	jmp    c001a94c <Vm::x87Handler(regs*)+0xa9e>
c001a7f2:	66 90                	xchg   ax,ax
c001a7f4:	80 fa 02             	cmp    dl,0x2
c001a7f7:	0f 85 03 f9 ff ff    	jne    c001a100 <Vm::x87Handler(regs*)+0x252>
c001a7fd:	55                   	push   ebp
c001a7fe:	55                   	push   ebp
c001a7ff:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a802:	ff 36                	push   DWORD PTR [esi]
c001a804:	e8 e3 f2 ff ff       	call   c0019aec <Vm::fpu64ToInternal(unsigned long long)>
c001a809:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a810:	89 c6                	mov    esi,eax
c001a812:	89 d7                	mov    edi,edx
c001a814:	e8 55 f5 ff ff       	call   c0019d6e <Vm::fpuGetReg(int)>
c001a819:	57                   	push   edi
c001a81a:	56                   	push   esi
c001a81b:	52                   	push   edx
c001a81c:	50                   	push   eax
c001a81d:	e8 6c f4 ff ff       	call   c0019c8e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a822:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a826:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001a829:	8d 76 00             	lea    esi,[esi+0x0]
c001a82c:	83 c4 20             	add    esp,0x20
c001a82f:	e9 fc f6 ff ff       	jmp    c0019f30 <Vm::x87Handler(regs*)+0x82>
c001a834:	80 fa 04             	cmp    dl,0x4
c001a837:	75 2f                	jne    c001a868 <Vm::x87Handler(regs*)+0x9ba>
c001a839:	51                   	push   ecx
c001a83a:	51                   	push   ecx
c001a83b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a83e:	ff 36                	push   DWORD PTR [esi]
c001a840:	e8 a7 f2 ff ff       	call   c0019aec <Vm::fpu64ToInternal(unsigned long long)>
c001a845:	8d 76 00             	lea    esi,[esi+0x0]
c001a848:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a84f:	89 c6                	mov    esi,eax
c001a851:	89 d7                	mov    edi,edx
c001a853:	e8 16 f5 ff ff       	call   c0019d6e <Vm::fpuGetReg(int)>
c001a858:	57                   	push   edi
c001a859:	56                   	push   esi
c001a85a:	52                   	push   edx
c001a85b:	50                   	push   eax
c001a85c:	e8 ad f4 ff ff       	call   c0019d0e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a861:	e9 02 01 00 00       	jmp    c001a968 <Vm::x87Handler(regs*)+0xaba>
c001a866:	66 90                	xchg   ax,ax
c001a868:	80 fa 05             	cmp    dl,0x5
c001a86b:	75 2b                	jne    c001a898 <Vm::x87Handler(regs*)+0x9ea>
c001a86d:	83 ec 0c             	sub    esp,0xc
c001a870:	6a 00                	push   0x0
c001a872:	e8 f7 f4 ff ff       	call   c0019d6e <Vm::fpuGetReg(int)>
c001a877:	89 c7                	mov    edi,eax
c001a879:	89 d5                	mov    ebp,edx
c001a87b:	58                   	pop    eax
c001a87c:	5a                   	pop    edx
c001a87d:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a880:	ff 36                	push   DWORD PTR [esi]
c001a882:	e8 65 f2 ff ff       	call   c0019aec <Vm::fpu64ToInternal(unsigned long long)>
c001a887:	90                   	nop
c001a888:	83 c4 10             	add    esp,0x10
c001a88b:	55                   	push   ebp
c001a88c:	57                   	push   edi
c001a88d:	52                   	push   edx
c001a88e:	50                   	push   eax
c001a88f:	e8 7a f4 ff ff       	call   c0019d0e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a894:	eb 6a                	jmp    c001a900 <Vm::x87Handler(regs*)+0xa52>
c001a896:	66 90                	xchg   ax,ax
c001a898:	80 fa 06             	cmp    dl,0x6
c001a89b:	75 2f                	jne    c001a8cc <Vm::x87Handler(regs*)+0xa1e>
c001a89d:	51                   	push   ecx
c001a89e:	51                   	push   ecx
c001a89f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a8a2:	ff 36                	push   DWORD PTR [esi]
c001a8a4:	e8 43 f2 ff ff       	call   c0019aec <Vm::fpu64ToInternal(unsigned long long)>
c001a8a9:	8d 76 00             	lea    esi,[esi+0x0]
c001a8ac:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a8b3:	89 c6                	mov    esi,eax
c001a8b5:	89 d7                	mov    edi,edx
c001a8b7:	e8 b2 f4 ff ff       	call   c0019d6e <Vm::fpuGetReg(int)>
c001a8bc:	57                   	push   edi
c001a8bd:	56                   	push   esi
c001a8be:	52                   	push   edx
c001a8bf:	50                   	push   eax
c001a8c0:	e8 77 f4 ff ff       	call   c0019d3c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a8c5:	e9 9e 00 00 00       	jmp    c001a968 <Vm::x87Handler(regs*)+0xaba>
c001a8ca:	66 90                	xchg   ax,ax
c001a8cc:	31 c0                	xor    eax,eax
c001a8ce:	80 fa 07             	cmp    dl,0x7
c001a8d1:	0f 85 e9 00 00 00    	jne    c001a9c0 <Vm::x87Handler(regs*)+0xb12>
c001a8d7:	83 ec 0c             	sub    esp,0xc
c001a8da:	6a 00                	push   0x0
c001a8dc:	e8 8d f4 ff ff       	call   c0019d6e <Vm::fpuGetReg(int)>
c001a8e1:	89 c7                	mov    edi,eax
c001a8e3:	89 d5                	mov    ebp,edx
c001a8e5:	58                   	pop    eax
c001a8e6:	5a                   	pop    edx
c001a8e7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a8ea:	ff 36                	push   DWORD PTR [esi]
c001a8ec:	e8 fb f1 ff ff       	call   c0019aec <Vm::fpu64ToInternal(unsigned long long)>
c001a8f1:	8d 76 00             	lea    esi,[esi+0x0]
c001a8f4:	83 c4 10             	add    esp,0x10
c001a8f7:	55                   	push   ebp
c001a8f8:	57                   	push   edi
c001a8f9:	52                   	push   edx
c001a8fa:	50                   	push   eax
c001a8fb:	e8 3c f4 ff ff       	call   c0019d3c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a900:	83 c4 0c             	add    esp,0xc
c001a903:	eb 67                	jmp    c001a96c <Vm::x87Handler(regs*)+0xabe>
c001a905:	8d 76 00             	lea    esi,[esi+0x0]
c001a908:	31 c0                	xor    eax,eax
c001a90a:	80 fa 02             	cmp    dl,0x2
c001a90d:	0f 85 ad 00 00 00    	jne    c001a9c0 <Vm::x87Handler(regs*)+0xb12>
c001a913:	83 ec 0c             	sub    esp,0xc
c001a916:	6a 00                	push   0x0
c001a918:	e8 51 f4 ff ff       	call   c0019d6e <Vm::fpuGetReg(int)>
c001a91d:	59                   	pop    ecx
c001a91e:	5f                   	pop    edi
c001a91f:	90                   	nop
c001a920:	52                   	push   edx
c001a921:	50                   	push   eax
c001a922:	e8 77 f1 ff ff       	call   c0019a9e <Vm::fpuInternalTo64(unsigned long long)>
c001a927:	e9 84 00 00 00       	jmp    c001a9b0 <Vm::x87Handler(regs*)+0xb02>
c001a92c:	31 c0                	xor    eax,eax
c001a92e:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001a933:	0f 85 87 00 00 00    	jne    c001a9c0 <Vm::x87Handler(regs*)+0xb12>
c001a939:	50                   	push   eax
c001a93a:	50                   	push   eax
c001a93b:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001a93e:	66 90                	xchg   ax,ax
c001a940:	31 d2                	xor    edx,edx
c001a942:	52                   	push   edx
c001a943:	50                   	push   eax
c001a944:	e8 47 f2 ff ff       	call   c0019b90 <Vm::fpuLongToFloat(long long)>
c001a949:	8d 76 00             	lea    esi,[esi+0x0]
c001a94c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a953:	89 c6                	mov    esi,eax
c001a955:	89 d7                	mov    edi,edx
c001a957:	e8 12 f4 ff ff       	call   c0019d6e <Vm::fpuGetReg(int)>
c001a95c:	57                   	push   edi
c001a95d:	56                   	push   esi
c001a95e:	52                   	push   edx
c001a95f:	50                   	push   eax
c001a960:	e8 b8 f3 ff ff       	call   c0019d1d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a965:	8d 76 00             	lea    esi,[esi+0x0]
c001a968:	83 c4 1c             	add    esp,0x1c
c001a96b:	90                   	nop
c001a96c:	52                   	push   edx
c001a96d:	50                   	push   eax
c001a96e:	6a 00                	push   0x0
c001a970:	e8 3c f4 ff ff       	call   c0019db1 <Vm::fpuSetReg(int, unsigned long long)>
c001a975:	e9 7a f7 ff ff       	jmp    c001a0f4 <Vm::x87Handler(regs*)+0x246>
c001a97a:	66 90                	xchg   ax,ax
c001a97c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a980:	80 fa 05             	cmp    dl,0x5
c001a983:	75 13                	jne    c001a998 <Vm::x87Handler(regs*)+0xaea>
c001a985:	55                   	push   ebp
c001a986:	55                   	push   ebp
c001a987:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a98a:	ff 36                	push   DWORD PTR [esi]
c001a98c:	e8 c3 f1 ff ff       	call   c0019b54 <Vm::fpuULongToFloat(unsigned long long)>
c001a991:	e9 52 f7 ff ff       	jmp    c001a0e8 <Vm::x87Handler(regs*)+0x23a>
c001a996:	66 90                	xchg   ax,ax
c001a998:	31 c0                	xor    eax,eax
c001a99a:	80 fa 07             	cmp    dl,0x7
c001a99d:	75 21                	jne    c001a9c0 <Vm::x87Handler(regs*)+0xb12>
c001a99f:	e8 b7 f4 ff ff       	call   c0019e5b <Vm::fpuPop()>
c001a9a4:	51                   	push   ecx
c001a9a5:	51                   	push   ecx
c001a9a6:	52                   	push   edx
c001a9a7:	50                   	push   eax
c001a9a8:	e8 48 f1 ff ff       	call   c0019af5 <Vm::fpuFloatToLong(unsigned long long)>
c001a9ad:	8d 76 00             	lea    esi,[esi+0x0]
c001a9b0:	83 c4 10             	add    esp,0x10
c001a9b3:	89 06                	mov    DWORD PTR [esi],eax
c001a9b5:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a9b8:	e9 7b f7 ff ff       	jmp    c001a138 <Vm::x87Handler(regs*)+0x28a>
c001a9bd:	8d 76 00             	lea    esi,[esi+0x0]
c001a9c0:	83 c4 1c             	add    esp,0x1c
c001a9c3:	5b                   	pop    ebx
c001a9c4:	5e                   	pop    esi
c001a9c5:	5f                   	pop    edi
c001a9c6:	5d                   	pop    ebp
c001a9c7:	c3                   	ret    

c001a9c8 <__static_initialization_and_destruction_0(int, int)>:
c001a9c8:	83 ec 0c             	sub    esp,0xc
c001a9cb:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001a9d0:	75 1a                	jne    c001a9ec <__static_initialization_and_destruction_0(int, int)+0x24>
c001a9d2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001a9da:	75 10                	jne    c001a9ec <__static_initialization_and_destruction_0(int, int)+0x24>
c001a9dc:	83 ec 0c             	sub    esp,0xc
c001a9df:	68 c0 93 02 c0       	push   0xc00293c0
c001a9e4:	e8 1b 86 00 00       	call   c0023004 <Vm::_FPUState::_FPUState()>
c001a9e9:	83 c4 10             	add    esp,0x10
c001a9ec:	90                   	nop
c001a9ed:	83 c4 0c             	add    esp,0xc
c001a9f0:	c3                   	ret    
c001a9f1:	8d 76 00             	lea    esi,[esi+0x0]

c001a9f4 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001a9f4:	83 ec 0c             	sub    esp,0xc
c001a9f7:	83 ec 08             	sub    esp,0x8
c001a9fa:	68 ff ff 00 00       	push   0xffff
c001a9ff:	6a 01                	push   0x1
c001aa01:	e8 c2 ff ff ff       	call   c001a9c8 <__static_initialization_and_destruction_0(int, int)>
c001aa06:	83 c4 10             	add    esp,0x10
c001aa09:	83 c4 0c             	add    esp,0xc
c001aa0c:	c3                   	ret    

c001aa0d <Hal::noCopro(unsigned long)>:
c001aa0d:	c3                   	ret    

c001aa0e <Hal::noTSC()>:
c001aa0e:	31 c0                	xor    eax,eax
c001aa10:	31 d2                	xor    edx,edx
c001aa12:	c3                   	ret    

c001aa13 <Hal::readTSC()>:
c001aa13:	0f 31                	rdtsc  
c001aa15:	c3                   	ret    

c001aa16 <i386SaveCoprocessor(void*)>:
c001aa16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa1a:	83 c0 3f             	add    eax,0x3f
c001aa1d:	83 e0 c0             	and    eax,0xffffffc0
c001aa20:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aa24:	ff 25 14 94 02 c0    	jmp    DWORD PTR ds:0xc0029414

c001aa2a <i386LoadCoprocessor(void*)>:
c001aa2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa2e:	83 c0 3f             	add    eax,0x3f
c001aa31:	83 e0 c0             	and    eax,0xffffffc0
c001aa34:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aa38:	ff 25 10 94 02 c0    	jmp    DWORD PTR ds:0xc0029410

c001aa3e <x87EmulHandler(regs*, void*)>:
c001aa3e:	53                   	push   ebx
c001aa3f:	83 ec 14             	sub    esp,0x14
c001aa42:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001aa46:	68 7c 62 02 c0       	push   0xc002627c
c001aa4b:	e8 75 25 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001aa50:	83 c4 10             	add    esp,0x10
c001aa53:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aa58:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c001aa5c:	74 10                	je     c001aa6e <x87EmulHandler(regs*, void*)+0x30>
c001aa5e:	83 ec 0c             	sub    esp,0xc
c001aa61:	68 8c 62 02 c0       	push   0xc002628c
c001aa66:	e8 b2 a2 ff ff       	call   c0014d1d <Krnl::panic(char const*)>
c001aa6b:	83 c4 10             	add    esp,0x10
c001aa6e:	0f 20 c0             	mov    eax,cr0
c001aa71:	a8 08                	test   al,0x8
c001aa73:	74 56                	je     c001aacb <x87EmulHandler(regs*, void*)+0x8d>
c001aa75:	0f 06                	clts   
c001aa77:	a1 0c 94 02 c0       	mov    eax,ds:0xc002940c
c001aa7c:	85 c0                	test   eax,eax
c001aa7e:	74 0e                	je     c001aa8e <x87EmulHandler(regs*, void*)+0x50>
c001aa80:	83 ec 0c             	sub    esp,0xc
c001aa83:	ff 70 55             	push   DWORD PTR [eax+0x55]
c001aa86:	e8 8b ff ff ff       	call   c001aa16 <i386SaveCoprocessor(void*)>
c001aa8b:	83 c4 10             	add    esp,0x10
c001aa8e:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001aa94:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c001aa98:	75 12                	jne    c001aaac <x87EmulHandler(regs*, void*)+0x6e>
c001aa9a:	83 ec 0c             	sub    esp,0xc
c001aa9d:	68 40 02 00 00       	push   0x240
c001aaa2:	e8 10 f2 fe ff       	call   c0009cb7 <malloc>
c001aaa7:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c001aaaa:	eb 10                	jmp    c001aabc <x87EmulHandler(regs*, void*)+0x7e>
c001aaac:	83 ec 0c             	sub    esp,0xc
c001aaaf:	a1 0c 94 02 c0       	mov    eax,ds:0xc002940c
c001aab4:	ff 70 55             	push   DWORD PTR [eax+0x55]
c001aab7:	e8 6e ff ff ff       	call   c001aa2a <i386LoadCoprocessor(void*)>
c001aabc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aac1:	83 c4 10             	add    esp,0x10
c001aac4:	a3 0c 94 02 c0       	mov    ds:0xc002940c,eax
c001aac9:	eb 2e                	jmp    c001aaf9 <x87EmulHandler(regs*, void*)+0xbb>
c001aacb:	83 ec 0c             	sub    esp,0xc
c001aace:	53                   	push   ebx
c001aacf:	e8 da f3 ff ff       	call   c0019eae <Vm::x87Handler(regs*)>
c001aad4:	83 c4 10             	add    esp,0x10
c001aad7:	84 c0                	test   al,al
c001aad9:	75 1e                	jne    c001aaf9 <x87EmulHandler(regs*, void*)+0xbb>
c001aadb:	83 ec 0c             	sub    esp,0xc
c001aade:	68 a0 62 02 c0       	push   0xc00262a0
c001aae3:	e8 dd 24 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001aae8:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001aaf0:	83 c4 18             	add    esp,0x18
c001aaf3:	5b                   	pop    ebx
c001aaf4:	e9 6b e2 ff ff       	jmp    c0018d64 <Thr::terminateFromIRQ(int)>
c001aaf9:	83 c4 08             	add    esp,0x8
c001aafc:	5b                   	pop    ebx
c001aafd:	c3                   	ret    

c001aafe <Hal::initialiseCoprocessor()>:
c001aafe:	83 ec 0c             	sub    esp,0xc
c001ab01:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c001ab06:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ab0c:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001ab12:	8b 10                	mov    edx,DWORD PTR [eax]
c001ab14:	6a 00                	push   0x0
c001ab16:	68 3e aa 01 c0       	push   0xc001aa3e
c001ab1b:	6a 07                	push   0x7
c001ab1d:	50                   	push   eax
c001ab1e:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001ab21:	e8 1a 77 00 00       	call   c0022240 <avxDetect>
c001ab26:	83 c4 10             	add    esp,0x10
c001ab29:	85 c0                	test   eax,eax
c001ab2b:	74 29                	je     c001ab56 <Hal::initialiseCoprocessor()+0x58>
c001ab2d:	83 ec 0c             	sub    esp,0xc
c001ab30:	68 b6 62 02 c0       	push   0xc00262b6
c001ab35:	e8 8b 24 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001ab3a:	c7 05 14 94 02 c0 6a 22 02 c0 	mov    DWORD PTR ds:0xc0029414,0xc002226a
c001ab44:	c7 05 10 94 02 c0 7b 22 02 c0 	mov    DWORD PTR ds:0xc0029410,0xc002227b
c001ab4e:	83 c4 1c             	add    esp,0x1c
c001ab51:	e9 36 77 00 00       	jmp    c002228c <avxInit>
c001ab56:	e8 85 77 00 00       	call   c00222e0 <absolutelyNoChanceInHell>
c001ab5b:	85 c0                	test   eax,eax
c001ab5d:	74 29                	je     c001ab88 <Hal::initialiseCoprocessor()+0x8a>
c001ab5f:	83 ec 0c             	sub    esp,0xc
c001ab62:	68 bc 62 02 c0       	push   0xc00262bc
c001ab67:	e8 59 24 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001ab6c:	c7 05 14 94 02 c0 f8 22 02 c0 	mov    DWORD PTR ds:0xc0029414,0xc00222f8
c001ab76:	c7 05 10 94 02 c0 00 23 02 c0 	mov    DWORD PTR ds:0xc0029410,0xc0022300
c001ab80:	83 c4 1c             	add    esp,0x1c
c001ab83:	e9 80 77 00 00       	jmp    c0022308 <sseInit>
c001ab88:	e8 99 77 00 00       	call   c0022326 <x87Detect>
c001ab8d:	85 c0                	test   eax,eax
c001ab8f:	74 29                	je     c001abba <Hal::initialiseCoprocessor()+0xbc>
c001ab91:	83 ec 0c             	sub    esp,0xc
c001ab94:	68 c2 62 02 c0       	push   0xc00262c2
c001ab99:	e8 27 24 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001ab9e:	c7 05 14 94 02 c0 41 23 02 c0 	mov    DWORD PTR ds:0xc0029414,0xc0022341
c001aba8:	c7 05 10 94 02 c0 48 23 02 c0 	mov    DWORD PTR ds:0xc0029410,0xc0022348
c001abb2:	83 c4 1c             	add    esp,0x1c
c001abb5:	e9 95 77 00 00       	jmp    c002234f <x87Init>
c001abba:	83 ec 0c             	sub    esp,0xc
c001abbd:	68 c8 62 02 c0       	push   0xc00262c8
c001abc2:	e8 fe 23 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001abc7:	c7 05 14 94 02 c0 0d aa 01 c0 	mov    DWORD PTR ds:0xc0029414,0xc001aa0d
c001abd1:	c7 05 10 94 02 c0 0d aa 01 c0 	mov    DWORD PTR ds:0xc0029410,0xc001aa0d
c001abdb:	0f 20 c0             	mov    eax,cr0
c001abde:	83 c8 04             	or     eax,0x4
c001abe1:	0f 22 c0             	mov    cr0,eax
c001abe4:	83 c4 1c             	add    esp,0x1c
c001abe7:	c3                   	ret    

c001abe8 <Hal::panic(char const*)>:
c001abe8:	e9 30 a1 ff ff       	jmp    c0014d1d <Krnl::panic(char const*)>

c001abed <Hal::initialise()>:
c001abed:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c001abf2:	ba 13 aa 01 c0       	mov    edx,0xc001aa13
c001abf7:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001abfd:	f6 81 90 11 00 00 02 	test   BYTE PTR [ecx+0x1190],0x2
c001ac04:	75 05                	jne    c001ac0b <Hal::initialise()+0x1e>
c001ac06:	ba 0e aa 01 c0       	mov    edx,0xc001aa0e
c001ac0b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001ac11:	89 15 18 94 02 c0    	mov    DWORD PTR ds:0xc0029418,edx
c001ac17:	83 e0 01             	and    eax,0x1
c001ac1a:	a2 08 94 02 c0       	mov    ds:0xc0029408,al
c001ac1f:	c3                   	ret    

c001ac20 <Hal::makeBeep(int)>:
c001ac20:	53                   	push   ebx
c001ac21:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001ac25:	85 db                	test   ebx,ebx
c001ac27:	75 07                	jne    c001ac30 <Hal::makeBeep(int)+0x10>
c001ac29:	e4 61                	in     al,0x61
c001ac2b:	83 e0 fc             	and    eax,0xfffffffc
c001ac2e:	eb 26                	jmp    c001ac56 <Hal::makeBeep(int)+0x36>
c001ac30:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001ac35:	99                   	cdq    
c001ac36:	f7 fb                	idiv   ebx
c001ac38:	89 c1                	mov    ecx,eax
c001ac3a:	b0 b6                	mov    al,0xb6
c001ac3c:	e6 43                	out    0x43,al
c001ac3e:	88 c8                	mov    al,cl
c001ac40:	e6 42                	out    0x42,al
c001ac42:	89 c8                	mov    eax,ecx
c001ac44:	c1 e8 08             	shr    eax,0x8
c001ac47:	e6 42                	out    0x42,al
c001ac49:	e4 61                	in     al,0x61
c001ac4b:	88 c2                	mov    dl,al
c001ac4d:	83 ca 03             	or     edx,0x3
c001ac50:	38 c2                	cmp    dl,al
c001ac52:	74 04                	je     c001ac58 <Hal::makeBeep(int)+0x38>
c001ac54:	88 d0                	mov    al,dl
c001ac56:	e6 61                	out    0x61,al
c001ac58:	5b                   	pop    ebx
c001ac59:	c3                   	ret    

c001ac5a <Hal::getRand()>:
c001ac5a:	31 c0                	xor    eax,eax
c001ac5c:	c3                   	ret    

c001ac5d <Hal::endOfInterrupt(int)>:
c001ac5d:	80 3d 08 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029408,0x0
c001ac64:	74 23                	je     c001ac89 <Hal::endOfInterrupt(int)+0x2c>
c001ac66:	83 ec 14             	sub    esp,0x14
c001ac69:	6a 1b                	push   0x1b
c001ac6b:	ff 35 08 7e 02 c0    	push   DWORD PTR ds:0xc0027e08
c001ac71:	e8 f0 e5 fe ff       	call   c0009266 <Computer::rdmsr(unsigned int)>
c001ac76:	25 00 f0 ff ff       	and    eax,0xfffff000
c001ac7b:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c001ac85:	83 c4 1c             	add    esp,0x1c
c001ac88:	c3                   	ret    
c001ac89:	e9 16 02 00 00       	jmp    c001aea4 <picEOI(int)>
c001ac8e:	66 90                	xchg   ax,ax

c001ac90 <picIoWait()>:
c001ac90:	eb 00                	jmp    c001ac92 <picIoWait()+0x2>
c001ac92:	eb 00                	jmp    c001ac94 <picIoWait()+0x4>
c001ac94:	90                   	nop
c001ac95:	c3                   	ret    
c001ac96:	66 90                	xchg   ax,ax

c001ac98 <picDisable()>:
c001ac98:	83 ec 10             	sub    esp,0x10
c001ac9b:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001aca2:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001aca7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001acab:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001acb0:	ee                   	out    dx,al
c001acb1:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c001acb8:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c001acbd:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001acc1:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001acc6:	ee                   	out    dx,al
c001acc7:	90                   	nop
c001acc8:	83 c4 10             	add    esp,0x10
c001accb:	c3                   	ret    

c001accc <picGetIRQReg(int)>:
c001accc:	83 ec 10             	sub    esp,0x10
c001accf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001acd3:	0f b6 c0             	movzx  eax,al
c001acd6:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001acdd:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001ace1:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001ace5:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001acea:	ee                   	out    dx,al
c001aceb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001acef:	0f b6 c0             	movzx  eax,al
c001acf2:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001acf9:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001acfd:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001ad01:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001ad06:	ee                   	out    dx,al
c001ad07:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001ad0e:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001ad13:	89 c2                	mov    edx,eax
c001ad15:	ec                   	in     al,dx
c001ad16:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ad1a:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ad1e:	0f b6 c0             	movzx  eax,al
c001ad21:	c1 e0 08             	shl    eax,0x8
c001ad24:	89 c1                	mov    ecx,eax
c001ad26:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c001ad2d:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001ad32:	89 c2                	mov    edx,eax
c001ad34:	ec                   	in     al,dx
c001ad35:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001ad39:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001ad3d:	0f b6 c0             	movzx  eax,al
c001ad40:	09 c8                	or     eax,ecx
c001ad42:	83 c4 10             	add    esp,0x10
c001ad45:	c3                   	ret    
c001ad46:	66 90                	xchg   ax,ax

c001ad48 <picRemap()>:
c001ad48:	83 ec 40             	sub    esp,0x40
c001ad4b:	c7 44 24 3c 20 00 00 00 	mov    DWORD PTR [esp+0x3c],0x20
c001ad53:	c7 44 24 38 28 00 00 00 	mov    DWORD PTR [esp+0x38],0x28
c001ad5b:	66 c7 44 24 08 21 00 	mov    WORD PTR [esp+0x8],0x21
c001ad62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ad66:	89 c2                	mov    edx,eax
c001ad68:	ec                   	in     al,dx
c001ad69:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001ad6d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001ad71:	88 44 24 37          	mov    BYTE PTR [esp+0x37],al
c001ad75:	66 c7 44 24 0c a1 00 	mov    WORD PTR [esp+0xc],0xa1
c001ad7c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad80:	89 c2                	mov    edx,eax
c001ad82:	ec                   	in     al,dx
c001ad83:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001ad87:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001ad8b:	88 44 24 36          	mov    BYTE PTR [esp+0x36],al
c001ad8f:	66 c7 44 24 10 20 00 	mov    WORD PTR [esp+0x10],0x20
c001ad96:	c6 44 24 0f 11       	mov    BYTE PTR [esp+0xf],0x11
c001ad9b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001ad9f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ada3:	ee                   	out    dx,al
c001ada4:	e8 e7 fe ff ff       	call   c001ac90 <picIoWait()>
c001ada9:	66 c7 44 24 14 a0 00 	mov    WORD PTR [esp+0x14],0xa0
c001adb0:	c6 44 24 13 11       	mov    BYTE PTR [esp+0x13],0x11
c001adb5:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001adb9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001adbd:	ee                   	out    dx,al
c001adbe:	e8 cd fe ff ff       	call   c001ac90 <picIoWait()>
c001adc3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001adc7:	0f b6 c0             	movzx  eax,al
c001adca:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c001add1:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001add5:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001add9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001addd:	ee                   	out    dx,al
c001adde:	e8 ad fe ff ff       	call   c001ac90 <picIoWait()>
c001ade3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ade7:	0f b6 c0             	movzx  eax,al
c001adea:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001adf1:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001adf5:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001adf9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001adfd:	ee                   	out    dx,al
c001adfe:	e8 8d fe ff ff       	call   c001ac90 <picIoWait()>
c001ae03:	66 c7 44 24 20 21 00 	mov    WORD PTR [esp+0x20],0x21
c001ae0a:	c6 44 24 1f 04       	mov    BYTE PTR [esp+0x1f],0x4
c001ae0f:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001ae13:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ae17:	ee                   	out    dx,al
c001ae18:	e8 73 fe ff ff       	call   c001ac90 <picIoWait()>
c001ae1d:	66 c7 44 24 24 a1 00 	mov    WORD PTR [esp+0x24],0xa1
c001ae24:	c6 44 24 23 02       	mov    BYTE PTR [esp+0x23],0x2
c001ae29:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001ae2d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ae31:	ee                   	out    dx,al
c001ae32:	e8 59 fe ff ff       	call   c001ac90 <picIoWait()>
c001ae37:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c001ae3e:	c6 44 24 27 01       	mov    BYTE PTR [esp+0x27],0x1
c001ae43:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c001ae47:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ae4b:	ee                   	out    dx,al
c001ae4c:	e8 3f fe ff ff       	call   c001ac90 <picIoWait()>
c001ae51:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c001ae58:	c6 44 24 2b 01       	mov    BYTE PTR [esp+0x2b],0x1
c001ae5d:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001ae61:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ae65:	ee                   	out    dx,al
c001ae66:	e8 25 fe ff ff       	call   c001ac90 <picIoWait()>
c001ae6b:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c001ae70:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c001ae77:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c001ae7b:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c001ae7f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ae83:	ee                   	out    dx,al
c001ae84:	0f b6 44 24 36       	movzx  eax,BYTE PTR [esp+0x36]
c001ae89:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c001ae90:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001ae94:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001ae98:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ae9c:	ee                   	out    dx,al
c001ae9d:	90                   	nop
c001ae9e:	83 c4 40             	add    esp,0x40
c001aea1:	c3                   	ret    
c001aea2:	66 90                	xchg   ax,ax

c001aea4 <picEOI(int)>:
c001aea4:	83 ec 10             	sub    esp,0x10
c001aea7:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001aeac:	75 1e                	jne    c001aecc <picEOI(int)+0x28>
c001aeae:	6a 0b                	push   0xb
c001aeb0:	e8 17 fe ff ff       	call   c001accc <picGetIRQReg(int)>
c001aeb5:	83 c4 04             	add    esp,0x4
c001aeb8:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001aebd:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c001aec2:	25 80 00 00 00       	and    eax,0x80
c001aec7:	74 73                	je     c001af3c <picEOI(int)+0x98>
c001aec9:	8d 76 00             	lea    esi,[esi+0x0]
c001aecc:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c001aed1:	75 31                	jne    c001af04 <picEOI(int)+0x60>
c001aed3:	6a 0b                	push   0xb
c001aed5:	e8 f2 fd ff ff       	call   c001accc <picGetIRQReg(int)>
c001aeda:	83 c4 04             	add    esp,0x4
c001aedd:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001aee2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aee6:	66 85 c0             	test   ax,ax
c001aee9:	78 19                	js     c001af04 <picEOI(int)+0x60>
c001aeeb:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c001aef2:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c001aef7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001aefb:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001af00:	ee                   	out    dx,al
c001af01:	eb 3d                	jmp    c001af40 <picEOI(int)+0x9c>
c001af03:	90                   	nop
c001af04:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001af09:	7e 19                	jle    c001af24 <picEOI(int)+0x80>
c001af0b:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001af12:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c001af17:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001af1b:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001af20:	ee                   	out    dx,al
c001af21:	8d 76 00             	lea    esi,[esi+0x0]
c001af24:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001af2b:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c001af30:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001af34:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001af39:	ee                   	out    dx,al
c001af3a:	eb 04                	jmp    c001af40 <picEOI(int)+0x9c>
c001af3c:	90                   	nop
c001af3d:	8d 76 00             	lea    esi,[esi+0x0]
c001af40:	83 c4 10             	add    esp,0x10
c001af43:	c3                   	ret    

c001af44 <FAT::getName()>:
c001af44:	b8 d1 62 02 c0       	mov    eax,0xc00262d1
c001af49:	c3                   	ret    
c001af4a:	66 90                	xchg   ax,ax

c001af4c <FAT::tell(void*, unsigned long long*)>:
c001af4c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001af51:	75 09                	jne    c001af5c <FAT::tell(void*, unsigned long long*)+0x10>
c001af53:	b8 04 00 00 00       	mov    eax,0x4
c001af58:	c3                   	ret    
c001af59:	8d 76 00             	lea    esi,[esi+0x0]
c001af5c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001af61:	75 09                	jne    c001af6c <FAT::tell(void*, unsigned long long*)+0x20>
c001af63:	b8 04 00 00 00       	mov    eax,0x4
c001af68:	c3                   	ret    
c001af69:	8d 76 00             	lea    esi,[esi+0x0]
c001af6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001af70:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001af73:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001af76:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001af7a:	89 01                	mov    DWORD PTR [ecx],eax
c001af7c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001af7f:	b8 00 00 00 00       	mov    eax,0x0
c001af84:	c3                   	ret    
c001af85:	90                   	nop
c001af86:	66 90                	xchg   ax,ax

c001af88 <FAT::stat(void*, unsigned long long*)>:
c001af88:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001af8d:	75 09                	jne    c001af98 <FAT::stat(void*, unsigned long long*)+0x10>
c001af8f:	b8 04 00 00 00       	mov    eax,0x4
c001af94:	c3                   	ret    
c001af95:	8d 76 00             	lea    esi,[esi+0x0]
c001af98:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001af9d:	75 09                	jne    c001afa8 <FAT::stat(void*, unsigned long long*)+0x20>
c001af9f:	b8 04 00 00 00       	mov    eax,0x4
c001afa4:	c3                   	ret    
c001afa5:	8d 76 00             	lea    esi,[esi+0x0]
c001afa8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001afac:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001afaf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001afb2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001afb6:	89 01                	mov    DWORD PTR [ecx],eax
c001afb8:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001afbb:	b8 00 00 00 00       	mov    eax,0x0
c001afc0:	c3                   	ret    
c001afc1:	90                   	nop
c001afc2:	66 90                	xchg   ax,ax

c001afc4 <FAT::~FAT()>:
c001afc4:	83 ec 0c             	sub    esp,0xc
c001afc7:	ba 1c 63 02 c0       	mov    edx,0xc002631c
c001afcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afd0:	89 10                	mov    DWORD PTR [eax],edx
c001afd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afd6:	83 ec 0c             	sub    esp,0xc
c001afd9:	50                   	push   eax
c001afda:	e8 21 23 ff ff       	call   c000d300 <Filesystem::~Filesystem()>
c001afdf:	83 c4 10             	add    esp,0x10
c001afe2:	90                   	nop
c001afe3:	83 c4 0c             	add    esp,0xc
c001afe6:	c3                   	ret    
c001afe7:	90                   	nop

c001afe8 <FAT::~FAT()>:
c001afe8:	83 ec 0c             	sub    esp,0xc
c001afeb:	83 ec 0c             	sub    esp,0xc
c001afee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aff2:	e8 cd ff ff ff       	call   c001afc4 <FAT::~FAT()>
c001aff7:	83 c4 10             	add    esp,0x10
c001affa:	83 ec 08             	sub    esp,0x8
c001affd:	6a 08                	push   0x8
c001afff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b003:	e8 dc 1e ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c001b008:	83 c4 10             	add    esp,0x10
c001b00b:	83 c4 0c             	add    esp,0xc
c001b00e:	c3                   	ret    
c001b00f:	90                   	nop

c001b010 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001b010:	83 ec 1c             	sub    esp,0x1c
c001b013:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001b01a:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001b01f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b023:	8b 04 85 40 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6bc0]
c001b02a:	83 f8 ff             	cmp    eax,0xffffffff
c001b02d:	75 35                	jne    c001b064 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001b02f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b033:	88 c2                	mov    dl,al
c001b035:	a1 20 94 02 c0       	mov    eax,ds:0xc0029420
c001b03a:	01 d0                	add    eax,edx
c001b03c:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b040:	8b 15 20 94 02 c0    	mov    edx,DWORD PTR ds:0xc0029420
c001b046:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b04a:	89 14 85 40 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6bc0],edx
c001b051:	a1 20 94 02 c0       	mov    eax,ds:0xc0029420
c001b056:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b05a:	89 14 85 c0 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6b40],edx
c001b061:	eb 19                	jmp    c001b07c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001b063:	90                   	nop
c001b064:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b068:	88 c2                	mov    dl,al
c001b06a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b06e:	8b 04 85 40 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6bc0]
c001b075:	01 d0                	add    eax,edx
c001b077:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b07b:	90                   	nop
c001b07c:	83 ec 04             	sub    esp,0x4
c001b07f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b083:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b087:	8d 44 24 15          	lea    eax,[esp+0x15]
c001b08b:	50                   	push   eax
c001b08c:	e8 99 bb fe ff       	call   c0006c2a <f_getlabel>
c001b091:	83 c4 10             	add    esp,0x10
c001b094:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b098:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b09d:	75 09                	jne    c001b0a8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001b09f:	b8 00 00 00 00       	mov    eax,0x0
c001b0a4:	eb 0a                	jmp    c001b0b0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001b0a6:	66 90                	xchg   ax,ax
c001b0a8:	b8 01 00 00 00       	mov    eax,0x1
c001b0ad:	8d 76 00             	lea    esi,[esi+0x0]
c001b0b0:	83 c4 1c             	add    esp,0x1c
c001b0b3:	c3                   	ret    

c001b0b4 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001b0b4:	57                   	push   edi
c001b0b5:	83 ec 58             	sub    esp,0x58
c001b0b8:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001b0c0:	8d 54 24 10          	lea    edx,[esp+0x10]
c001b0c4:	b9 0f 00 00 00       	mov    ecx,0xf
c001b0c9:	b8 00 00 00 00       	mov    eax,0x0
c001b0ce:	fc                   	cld    
c001b0cf:	89 d7                	mov    edi,edx
c001b0d1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b0d3:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b0d7:	8b 04 85 40 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6bc0]
c001b0de:	83 f8 ff             	cmp    eax,0xffffffff
c001b0e1:	75 35                	jne    c001b118 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001b0e3:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b0e7:	88 c2                	mov    dl,al
c001b0e9:	a1 20 94 02 c0       	mov    eax,ds:0xc0029420
c001b0ee:	01 d0                	add    eax,edx
c001b0f0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b0f4:	8b 15 20 94 02 c0    	mov    edx,DWORD PTR ds:0xc0029420
c001b0fa:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b0fe:	89 14 85 40 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6bc0],edx
c001b105:	a1 20 94 02 c0       	mov    eax,ds:0xc0029420
c001b10a:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001b10e:	89 14 85 c0 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6b40],edx
c001b115:	eb 19                	jmp    c001b130 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001b117:	90                   	nop
c001b118:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b11c:	88 c2                	mov    dl,al
c001b11e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b122:	8b 04 85 40 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6bc0]
c001b129:	01 d0                	add    eax,edx
c001b12b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b12f:	90                   	nop
c001b130:	83 ec 08             	sub    esp,0x8
c001b133:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001b137:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b13b:	50                   	push   eax
c001b13c:	e8 37 57 fe ff       	call   c0000878 <strcat>
c001b141:	83 c4 10             	add    esp,0x10
c001b144:	83 ec 0c             	sub    esp,0xc
c001b147:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b14b:	50                   	push   eax
c001b14c:	e8 c7 bc fe ff       	call   c0006e18 <f_setlabel>
c001b151:	83 c4 10             	add    esp,0x10
c001b154:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b158:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001b15d:	75 09                	jne    c001b168 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001b15f:	b8 00 00 00 00       	mov    eax,0x0
c001b164:	eb 0a                	jmp    c001b170 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001b166:	66 90                	xchg   ax,ax
c001b168:	b8 01 00 00 00       	mov    eax,0x1
c001b16d:	8d 76 00             	lea    esi,[esi+0x0]
c001b170:	83 c4 58             	add    esp,0x58
c001b173:	5f                   	pop    edi
c001b174:	c3                   	ret    
c001b175:	90                   	nop
c001b176:	66 90                	xchg   ax,ax

c001b178 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001b178:	83 ec 2c             	sub    esp,0x2c
c001b17b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001b183:	83 ec 08             	sub    esp,0x8
c001b186:	68 f5 62 02 c0       	push   0xc00262f5
c001b18b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b18f:	e8 30 56 fe ff       	call   c00007c4 <strcmp>
c001b194:	83 c4 10             	add    esp,0x10
c001b197:	85 c0                	test   eax,eax
c001b199:	0f 94 c0             	sete   al
c001b19c:	84 c0                	test   al,al
c001b19e:	74 10                	je     c001b1b0 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001b1a0:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b1a8:	e9 b3 00 00 00       	jmp    c001b260 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b1ad:	8d 76 00             	lea    esi,[esi+0x0]
c001b1b0:	83 ec 08             	sub    esp,0x8
c001b1b3:	68 e7 62 02 c0       	push   0xc00262e7
c001b1b8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b1bc:	e8 03 56 fe ff       	call   c00007c4 <strcmp>
c001b1c1:	83 c4 10             	add    esp,0x10
c001b1c4:	85 c0                	test   eax,eax
c001b1c6:	0f 94 c0             	sete   al
c001b1c9:	84 c0                	test   al,al
c001b1cb:	74 0f                	je     c001b1dc <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c001b1cd:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b1d5:	e9 86 00 00 00       	jmp    c001b260 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b1da:	66 90                	xchg   ax,ax
c001b1dc:	83 ec 08             	sub    esp,0x8
c001b1df:	68 ed 62 02 c0       	push   0xc00262ed
c001b1e4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b1e8:	e8 d7 55 fe ff       	call   c00007c4 <strcmp>
c001b1ed:	83 c4 10             	add    esp,0x10
c001b1f0:	85 c0                	test   eax,eax
c001b1f2:	0f 94 c0             	sete   al
c001b1f5:	84 c0                	test   al,al
c001b1f7:	74 0b                	je     c001b204 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c001b1f9:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b201:	eb 5d                	jmp    c001b260 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b203:	90                   	nop
c001b204:	83 ec 08             	sub    esp,0x8
c001b207:	68 2c 36 02 c0       	push   0xc002362c
c001b20c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b210:	e8 af 55 fe ff       	call   c00007c4 <strcmp>
c001b215:	83 c4 10             	add    esp,0x10
c001b218:	85 c0                	test   eax,eax
c001b21a:	0f 94 c0             	sete   al
c001b21d:	84 c0                	test   al,al
c001b21f:	74 0b                	je     c001b22c <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c001b221:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001b229:	eb 35                	jmp    c001b260 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b22b:	90                   	nop
c001b22c:	83 ec 08             	sub    esp,0x8
c001b22f:	68 f3 62 02 c0       	push   0xc00262f3
c001b234:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b238:	e8 87 55 fe ff       	call   c00007c4 <strcmp>
c001b23d:	83 c4 10             	add    esp,0x10
c001b240:	85 c0                	test   eax,eax
c001b242:	0f 94 c0             	sete   al
c001b245:	84 c0                	test   al,al
c001b247:	74 0b                	je     c001b254 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c001b249:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001b251:	eb 0d                	jmp    c001b260 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b253:	90                   	nop
c001b254:	b8 08 00 00 00       	mov    eax,0x8
c001b259:	e9 ea 00 00 00       	jmp    c001b348 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001b25e:	66 90                	xchg   ax,ax
c001b260:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001b267:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001b26c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b270:	8b 04 85 40 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6bc0]
c001b277:	83 f8 ff             	cmp    eax,0xffffffff
c001b27a:	75 34                	jne    c001b2b0 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c001b27c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001b280:	88 c2                	mov    dl,al
c001b282:	a1 20 94 02 c0       	mov    eax,ds:0xc0029420
c001b287:	01 d0                	add    eax,edx
c001b289:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001b28d:	8b 15 20 94 02 c0    	mov    edx,DWORD PTR ds:0xc0029420
c001b293:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b297:	89 14 85 40 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6bc0],edx
c001b29e:	a1 20 94 02 c0       	mov    eax,ds:0xc0029420
c001b2a3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b2a7:	89 14 85 c0 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6b40],edx
c001b2ae:	eb 18                	jmp    c001b2c8 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c001b2b0:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001b2b4:	88 c2                	mov    dl,al
c001b2b6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b2ba:	8b 04 85 40 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6bc0]
c001b2c1:	01 d0                	add    eax,edx
c001b2c3:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001b2c7:	90                   	nop
c001b2c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b2cc:	88 04 24             	mov    BYTE PTR [esp],al
c001b2cf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b2d3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b2d7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001b2df:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001b2e4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001b2ec:	83 ec 0c             	sub    esp,0xc
c001b2ef:	68 00 20 00 00       	push   0x2000
c001b2f4:	e8 be e9 fe ff       	call   c0009cb7 <malloc>
c001b2f9:	83 c4 10             	add    esp,0x10
c001b2fc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b300:	68 00 20 00 00       	push   0x2000
c001b305:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b309:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b30d:	50                   	push   eax
c001b30e:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001b312:	50                   	push   eax
c001b313:	e8 81 c1 fe ff       	call   c0007499 <f_mkfs>
c001b318:	83 c4 10             	add    esp,0x10
c001b31b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b31f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001b324:	75 0a                	jne    c001b330 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c001b326:	b8 00 00 00 00       	mov    eax,0x0
c001b32b:	eb 1b                	jmp    c001b348 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001b32d:	8d 76 00             	lea    esi,[esi+0x0]
c001b330:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001b335:	75 09                	jne    c001b340 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001b337:	b8 09 00 00 00       	mov    eax,0x9
c001b33c:	eb 0a                	jmp    c001b348 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001b33e:	66 90                	xchg   ax,ax
c001b340:	b8 01 00 00 00       	mov    eax,0x1
c001b345:	8d 76 00             	lea    esi,[esi+0x0]
c001b348:	83 c4 2c             	add    esp,0x2c
c001b34b:	c3                   	ret    

c001b34c <FAT::tryMount(LogicalDisk*, int)>:
c001b34c:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001b352:	a1 20 94 02 c0       	mov    eax,ds:0xc0029420
c001b357:	83 f8 14             	cmp    eax,0x14
c001b35a:	75 18                	jne    c001b374 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001b35c:	83 ec 0c             	sub    esp,0xc
c001b35f:	68 f9 62 02 c0       	push   0xc00262f9
c001b364:	e8 b4 99 ff ff       	call   c0014d1d <Krnl::panic(char const*)>
c001b369:	83 c4 10             	add    esp,0x10
c001b36c:	b0 00                	mov    al,0x0
c001b36e:	e9 e9 01 00 00       	jmp    c001b55c <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b373:	90                   	nop
c001b374:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001b37b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b381:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b387:	3d 00 02 00 00       	cmp    eax,0x200
c001b38c:	74 0a                	je     c001b398 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001b38e:	b0 00                	mov    al,0x0
c001b390:	e9 c7 01 00 00       	jmp    c001b55c <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b395:	8d 76 00             	lea    esi,[esi+0x0]
c001b398:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001b3a0:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001b3a7:	8b 04 85 40 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6bc0]
c001b3ae:	83 f8 ff             	cmp    eax,0xffffffff
c001b3b1:	74 09                	je     c001b3bc <FAT::tryMount(LogicalDisk*, int)+0x70>
c001b3b3:	b0 01                	mov    al,0x1
c001b3b5:	e9 a2 01 00 00       	jmp    c001b55c <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b3ba:	66 90                	xchg   ax,ax
c001b3bc:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001b3c6:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001b3ce:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001b3d5:	88 c2                	mov    dl,al
c001b3d7:	a1 20 94 02 c0       	mov    eax,ds:0xc0029420
c001b3dc:	01 d0                	add    eax,edx
c001b3de:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001b3e5:	8b 15 20 94 02 c0    	mov    edx,DWORD PTR ds:0xc0029420
c001b3eb:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001b3f2:	89 14 85 40 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6bc0],edx
c001b3f9:	a1 20 94 02 c0       	mov    eax,ds:0xc0029420
c001b3fe:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001b405:	89 14 85 c0 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6b40],edx
c001b40c:	83 ec 0c             	sub    esp,0xc
c001b40f:	68 54 02 00 00       	push   0x254
c001b414:	e8 9e e8 fe ff       	call   c0009cb7 <malloc>
c001b419:	83 c4 10             	add    esp,0x10
c001b41c:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001b423:	83 ec 04             	sub    esp,0x4
c001b426:	6a 00                	push   0x0
c001b428:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001b42f:	50                   	push   eax
c001b430:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001b437:	e8 e5 99 fe ff       	call   c0004e21 <f_mount>
c001b43c:	83 c4 10             	add    esp,0x10
c001b43f:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001b446:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001b44e:	74 1c                	je     c001b46c <FAT::tryMount(LogicalDisk*, int)+0x120>
c001b450:	83 ec 0c             	sub    esp,0xc
c001b453:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001b45a:	e8 78 e8 fe ff       	call   c0009cd7 <rfree>
c001b45f:	83 c4 10             	add    esp,0x10
c001b462:	b0 00                	mov    al,0x0
c001b464:	e9 f3 00 00 00       	jmp    c001b55c <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b469:	8d 76 00             	lea    esi,[esi+0x0]
c001b46c:	83 ec 04             	sub    esp,0x4
c001b46f:	68 00 01 00 00       	push   0x100
c001b474:	6a 00                	push   0x0
c001b476:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001b47d:	50                   	push   eax
c001b47e:	e8 f9 51 fe ff       	call   c000067c <memset>
c001b483:	83 c4 10             	add    esp,0x10
c001b486:	83 ec 08             	sub    esp,0x8
c001b489:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001b490:	50                   	push   eax
c001b491:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001b498:	50                   	push   eax
c001b499:	e8 da 53 fe ff       	call   c0000878 <strcat>
c001b49e:	83 c4 10             	add    esp,0x10
c001b4a1:	83 ec 08             	sub    esp,0x8
c001b4a4:	68 07 63 02 c0       	push   0xc0026307
c001b4a9:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001b4b0:	50                   	push   eax
c001b4b1:	e8 c2 53 fe ff       	call   c0000878 <strcat>
c001b4b6:	83 c4 10             	add    esp,0x10
c001b4b9:	83 ec 04             	sub    esp,0x4
c001b4bc:	6a 01                	push   0x1
c001b4be:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001b4c5:	50                   	push   eax
c001b4c6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b4ca:	50                   	push   eax
c001b4cb:	e8 b3 99 fe ff       	call   c0004e83 <f_open>
c001b4d0:	83 c4 10             	add    esp,0x10
c001b4d3:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001b4da:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001b4e1:	85 c0                	test   eax,eax
c001b4e3:	74 0b                	je     c001b4f0 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001b4e5:	78 31                	js     c001b518 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001b4e7:	83 e8 04             	sub    eax,0x4
c001b4ea:	83 f8 01             	cmp    eax,0x1
c001b4ed:	77 29                	ja     c001b518 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001b4ef:	90                   	nop
c001b4f0:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001b4f8:	83 ec 0c             	sub    esp,0xc
c001b4fb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b4ff:	50                   	push   eax
c001b500:	e8 d0 a4 fe ff       	call   c00059d5 <f_close>
c001b505:	83 c4 10             	add    esp,0x10
c001b508:	90                   	nop
c001b509:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001b511:	74 41                	je     c001b554 <FAT::tryMount(LogicalDisk*, int)+0x208>
c001b513:	eb 33                	jmp    c001b548 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001b515:	8d 76 00             	lea    esi,[esi+0x0]
c001b518:	83 ec 0c             	sub    esp,0xc
c001b51b:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001b522:	e8 b0 e7 fe ff       	call   c0009cd7 <rfree>
c001b527:	83 c4 10             	add    esp,0x10
c001b52a:	83 ec 04             	sub    esp,0x4
c001b52d:	6a 00                	push   0x0
c001b52f:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001b536:	50                   	push   eax
c001b537:	6a 00                	push   0x0
c001b539:	e8 e3 98 fe ff       	call   c0004e21 <f_mount>
c001b53e:	83 c4 10             	add    esp,0x10
c001b541:	b0 00                	mov    al,0x0
c001b543:	eb 17                	jmp    c001b55c <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b545:	8d 76 00             	lea    esi,[esi+0x0]
c001b548:	a1 20 94 02 c0       	mov    eax,ds:0xc0029420
c001b54d:	40                   	inc    eax
c001b54e:	a3 20 94 02 c0       	mov    ds:0xc0029420,eax
c001b553:	90                   	nop
c001b554:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001b55b:	90                   	nop
c001b55c:	81 c4 6c 03 00 00    	add    esp,0x36c
c001b562:	c3                   	ret    
c001b563:	90                   	nop

c001b564 <FAT::allocateSwapfile(char const*, int)>:
c001b564:	55                   	push   ebp
c001b565:	57                   	push   edi
c001b566:	56                   	push   esi
c001b567:	53                   	push   ebx
c001b568:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001b56e:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001b579:	83 ec 0c             	sub    esp,0xc
c001b57c:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001b583:	e8 2f e7 fe ff       	call   c0009cb7 <malloc>
c001b588:	83 c4 10             	add    esp,0x10
c001b58b:	89 c7                	mov    edi,eax
c001b58d:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c001b592:	83 ec 04             	sub    esp,0x4
c001b595:	50                   	push   eax
c001b596:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001b59d:	57                   	push   edi
c001b59e:	e8 8d 1f ff ff       	call   c000d530 <File::File(char const*, Process*)>
c001b5a3:	83 c4 10             	add    esp,0x10
c001b5a6:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001b5ad:	83 ec 04             	sub    esp,0x4
c001b5b0:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b5b4:	50                   	push   eax
c001b5b5:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b5b9:	50                   	push   eax
c001b5ba:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b5c1:	e8 f0 22 ff ff       	call   c000d8b6 <File::stat(unsigned long long*, bool*)>
c001b5c6:	83 c4 10             	add    esp,0x10
c001b5c9:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001b5d0:	c1 e0 14             	shl    eax,0x14
c001b5d3:	89 c7                	mov    edi,eax
c001b5d5:	89 c5                	mov    ebp,eax
c001b5d7:	c1 fd 1f             	sar    ebp,0x1f
c001b5da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5de:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b5e2:	89 f9                	mov    ecx,edi
c001b5e4:	31 c1                	xor    ecx,eax
c001b5e6:	89 cb                	mov    ebx,ecx
c001b5e8:	89 e9                	mov    ecx,ebp
c001b5ea:	31 d1                	xor    ecx,edx
c001b5ec:	89 ce                	mov    esi,ecx
c001b5ee:	89 f0                	mov    eax,esi
c001b5f0:	09 d8                	or     eax,ebx
c001b5f2:	0f 84 98 00 00 00    	je     c001b690 <FAT::allocateSwapfile(char const*, int)+0x12c>
c001b5f8:	83 ec 0c             	sub    esp,0xc
c001b5fb:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b602:	e8 7b 21 ff ff       	call   c000d782 <File::unlink()>
c001b607:	83 c4 10             	add    esp,0x10
c001b60a:	83 ec 08             	sub    esp,0x8
c001b60d:	6a 12                	push   0x12
c001b60f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b616:	e8 ef 1f ff ff       	call   c000d60a <File::open(FileOpenMode)>
c001b61b:	83 c4 10             	add    esp,0x10
c001b61e:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b625:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001b62b:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001b632:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001b639:	c1 e0 14             	shl    eax,0x14
c001b63c:	99                   	cdq    
c001b63d:	6a 01                	push   0x1
c001b63f:	52                   	push   edx
c001b640:	50                   	push   eax
c001b641:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001b648:	e8 38 ba fe ff       	call   c0007085 <f_expand>
c001b64d:	83 c4 10             	add    esp,0x10
c001b650:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b657:	8b 00                	mov    eax,DWORD PTR [eax]
c001b659:	83 c0 10             	add    eax,0x10
c001b65c:	8b 00                	mov    eax,DWORD PTR [eax]
c001b65e:	83 ec 0c             	sub    esp,0xc
c001b661:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b665:	52                   	push   edx
c001b666:	8d 54 24 30          	lea    edx,[esp+0x30]
c001b66a:	52                   	push   edx
c001b66b:	6a 00                	push   0x0
c001b66d:	68 00 04 00 00       	push   0x400
c001b672:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001b679:	ff d0                	call   eax
c001b67b:	83 c4 20             	add    esp,0x20
c001b67e:	83 ec 0c             	sub    esp,0xc
c001b681:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b688:	e8 db 1f ff ff       	call   c000d668 <File::close()>
c001b68d:	83 c4 10             	add    esp,0x10
c001b690:	83 ec 08             	sub    esp,0x8
c001b693:	6a 01                	push   0x1
c001b695:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b69c:	e8 69 1f ff ff       	call   c000d60a <File::open(FileOpenMode)>
c001b6a1:	83 c4 10             	add    esp,0x10
c001b6a4:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b6ab:	8b 00                	mov    eax,DWORD PTR [eax]
c001b6ad:	83 c0 0c             	add    eax,0xc
c001b6b0:	8b 00                	mov    eax,DWORD PTR [eax]
c001b6b2:	83 ec 0c             	sub    esp,0xc
c001b6b5:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b6b9:	52                   	push   edx
c001b6ba:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001b6be:	52                   	push   edx
c001b6bf:	6a 00                	push   0x0
c001b6c1:	6a 04                	push   0x4
c001b6c3:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001b6ca:	ff d0                	call   eax
c001b6cc:	83 c4 20             	add    esp,0x20
c001b6cf:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b6d6:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001b6dc:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001b6e3:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001b6ea:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001b6ed:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001b6f0:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001b6f7:	83 ec 0c             	sub    esp,0xc
c001b6fa:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b701:	e8 62 1f ff ff       	call   c000d668 <File::close()>
c001b706:	83 c4 10             	add    esp,0x10
c001b709:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001b710:	ba 00 00 00 00       	mov    edx,0x0
c001b715:	81 c4 3c 04 00 00    	add    esp,0x43c
c001b71b:	5b                   	pop    ebx
c001b71c:	5e                   	pop    esi
c001b71d:	5f                   	pop    edi
c001b71e:	5d                   	pop    ebp
c001b71f:	c3                   	ret    

c001b720 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001b720:	57                   	push   edi
c001b721:	56                   	push   esi
c001b722:	53                   	push   ebx
c001b723:	81 ec 50 02 00 00    	sub    esp,0x250
c001b729:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001b731:	74 0d                	je     c001b740 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001b733:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001b73b:	75 0f                	jne    c001b74c <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001b73d:	8d 76 00             	lea    esi,[esi+0x0]
c001b740:	b8 04 00 00 00       	mov    eax,0x4
c001b745:	e9 36 01 00 00       	jmp    c001b880 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001b74a:	66 90                	xchg   ax,ax
c001b74c:	83 ec 08             	sub    esp,0x8
c001b74f:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001b756:	50                   	push   eax
c001b757:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001b75e:	e8 7c a8 fe ff       	call   c0005fdf <f_readdir>
c001b763:	83 c4 10             	add    esp,0x10
c001b766:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001b76d:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c001b774:	83 ec 0c             	sub    esp,0xc
c001b777:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001b77e:	83 c0 1a             	add    eax,0x1a
c001b781:	50                   	push   eax
c001b782:	e8 11 4f fe ff       	call   c0000698 <strlen>
c001b787:	83 c4 10             	add    esp,0x10
c001b78a:	ba 00 00 00 00       	mov    edx,0x0
c001b78f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b793:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b797:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001b79e:	0f b6 c0             	movzx  eax,al
c001b7a1:	83 e0 10             	and    eax,0x10
c001b7a4:	74 0a                	je     c001b7b0 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001b7a6:	b8 02 00 00 00       	mov    eax,0x2
c001b7ab:	eb 0b                	jmp    c001b7b8 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001b7ad:	8d 76 00             	lea    esi,[esi+0x0]
c001b7b0:	b8 01 00 00 00       	mov    eax,0x1
c001b7b5:	8d 76 00             	lea    esi,[esi+0x0]
c001b7b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b7bc:	83 ec 08             	sub    esp,0x8
c001b7bf:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001b7c6:	83 c0 1a             	add    eax,0x1a
c001b7c9:	50                   	push   eax
c001b7ca:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b7ce:	83 c0 10             	add    eax,0x10
c001b7d1:	50                   	push   eax
c001b7d2:	e8 61 4f fe ff       	call   c0000738 <strcpy>
c001b7d7:	83 c4 10             	add    esp,0x10
c001b7da:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001b7e1:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001b7e8:	8d 44 24 04          	lea    eax,[esp+0x4]
c001b7ec:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001b7f3:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001b7fa:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001b801:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001b808:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001b80f:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001b816:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001b81d:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001b824:	89 c6                	mov    esi,eax
c001b826:	89 d7                	mov    edi,edx
c001b828:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b82a:	89 c8                	mov    eax,ecx
c001b82c:	89 fa                	mov    edx,edi
c001b82e:	89 f3                	mov    ebx,esi
c001b830:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001b837:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001b83e:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001b845:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001b84c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001b852:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001b859:	84 c0                	test   al,al
c001b85b:	75 07                	jne    c001b864 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c001b85d:	b8 07 00 00 00       	mov    eax,0x7
c001b862:	eb 1c                	jmp    c001b880 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001b864:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001b86b:	85 c0                	test   eax,eax
c001b86d:	75 09                	jne    c001b878 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c001b86f:	b8 00 00 00 00       	mov    eax,0x0
c001b874:	eb 0a                	jmp    c001b880 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001b876:	66 90                	xchg   ax,ax
c001b878:	b8 01 00 00 00       	mov    eax,0x1
c001b87d:	8d 76 00             	lea    esi,[esi+0x0]
c001b880:	81 c4 50 02 00 00    	add    esp,0x250
c001b886:	5b                   	pop    ebx
c001b887:	5e                   	pop    esi
c001b888:	5f                   	pop    edi
c001b889:	c3                   	ret    
c001b88a:	66 90                	xchg   ax,ax

c001b88c <FAT::read(void*, unsigned long, void*, int*)>:
c001b88c:	83 ec 1c             	sub    esp,0x1c
c001b88f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b894:	74 0a                	je     c001b8a0 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001b896:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001b89b:	75 0b                	jne    c001b8a8 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001b89d:	8d 76 00             	lea    esi,[esi+0x0]
c001b8a0:	b8 04 00 00 00       	mov    eax,0x4
c001b8a5:	eb 41                	jmp    c001b8e8 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001b8a7:	90                   	nop
c001b8a8:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b8ac:	50                   	push   eax
c001b8ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b8b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b8b5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b8b9:	e8 01 9a fe ff       	call   c00052bf <f_read>
c001b8be:	83 c4 10             	add    esp,0x10
c001b8c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b8c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b8c9:	89 c2                	mov    edx,eax
c001b8cb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b8cf:	89 10                	mov    DWORD PTR [eax],edx
c001b8d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b8d5:	85 c0                	test   eax,eax
c001b8d7:	75 07                	jne    c001b8e0 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001b8d9:	b8 00 00 00 00       	mov    eax,0x0
c001b8de:	eb 08                	jmp    c001b8e8 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001b8e0:	b8 01 00 00 00       	mov    eax,0x1
c001b8e5:	8d 76 00             	lea    esi,[esi+0x0]
c001b8e8:	83 c4 1c             	add    esp,0x1c
c001b8eb:	c3                   	ret    

c001b8ec <FAT::write(void*, unsigned long, void*, int*)>:
c001b8ec:	83 ec 1c             	sub    esp,0x1c
c001b8ef:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b8f4:	74 0a                	je     c001b900 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001b8f6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001b8fb:	75 0b                	jne    c001b908 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001b8fd:	8d 76 00             	lea    esi,[esi+0x0]
c001b900:	b8 04 00 00 00       	mov    eax,0x4
c001b905:	eb 41                	jmp    c001b948 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001b907:	90                   	nop
c001b908:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b90c:	50                   	push   eax
c001b90d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b911:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b915:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b919:	e8 21 9c fe ff       	call   c000553f <f_write>
c001b91e:	83 c4 10             	add    esp,0x10
c001b921:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b925:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b929:	89 c2                	mov    edx,eax
c001b92b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b92f:	89 10                	mov    DWORD PTR [eax],edx
c001b931:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b935:	85 c0                	test   eax,eax
c001b937:	75 07                	jne    c001b940 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001b939:	b8 00 00 00 00       	mov    eax,0x0
c001b93e:	eb 08                	jmp    c001b948 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001b940:	b8 01 00 00 00       	mov    eax,0x1
c001b945:	8d 76 00             	lea    esi,[esi+0x0]
c001b948:	83 c4 1c             	add    esp,0x1c
c001b94b:	c3                   	ret    

c001b94c <FAT::close(void*)>:
c001b94c:	83 ec 1c             	sub    esp,0x1c
c001b94f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b954:	75 0a                	jne    c001b960 <FAT::close(void*)+0x14>
c001b956:	b8 04 00 00 00       	mov    eax,0x4
c001b95b:	eb 3f                	jmp    c001b99c <FAT::close(void*)+0x50>
c001b95d:	8d 76 00             	lea    esi,[esi+0x0]
c001b960:	83 ec 0c             	sub    esp,0xc
c001b963:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b967:	e8 69 a0 fe ff       	call   c00059d5 <f_close>
c001b96c:	83 c4 10             	add    esp,0x10
c001b96f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b973:	83 ec 0c             	sub    esp,0xc
c001b976:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b97a:	e8 48 e3 fe ff       	call   c0009cc7 <free>
c001b97f:	83 c4 10             	add    esp,0x10
c001b982:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b986:	85 c0                	test   eax,eax
c001b988:	75 0a                	jne    c001b994 <FAT::close(void*)+0x48>
c001b98a:	b8 00 00 00 00       	mov    eax,0x0
c001b98f:	eb 0b                	jmp    c001b99c <FAT::close(void*)+0x50>
c001b991:	8d 76 00             	lea    esi,[esi+0x0]
c001b994:	b8 01 00 00 00       	mov    eax,0x1
c001b999:	8d 76 00             	lea    esi,[esi+0x0]
c001b99c:	83 c4 1c             	add    esp,0x1c
c001b99f:	c3                   	ret    

c001b9a0 <FAT::closeDir(void*)>:
c001b9a0:	83 ec 1c             	sub    esp,0x1c
c001b9a3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b9a8:	75 0a                	jne    c001b9b4 <FAT::closeDir(void*)+0x14>
c001b9aa:	b8 04 00 00 00       	mov    eax,0x4
c001b9af:	eb 3f                	jmp    c001b9f0 <FAT::closeDir(void*)+0x50>
c001b9b1:	8d 76 00             	lea    esi,[esi+0x0]
c001b9b4:	83 ec 0c             	sub    esp,0xc
c001b9b7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b9bb:	e8 fd a5 fe ff       	call   c0005fbd <f_closedir>
c001b9c0:	83 c4 10             	add    esp,0x10
c001b9c3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b9c7:	83 ec 0c             	sub    esp,0xc
c001b9ca:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b9ce:	e8 f4 e2 fe ff       	call   c0009cc7 <free>
c001b9d3:	83 c4 10             	add    esp,0x10
c001b9d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b9da:	85 c0                	test   eax,eax
c001b9dc:	75 0a                	jne    c001b9e8 <FAT::closeDir(void*)+0x48>
c001b9de:	b8 00 00 00 00       	mov    eax,0x0
c001b9e3:	eb 0b                	jmp    c001b9f0 <FAT::closeDir(void*)+0x50>
c001b9e5:	8d 76 00             	lea    esi,[esi+0x0]
c001b9e8:	b8 01 00 00 00       	mov    eax,0x1
c001b9ed:	8d 76 00             	lea    esi,[esi+0x0]
c001b9f0:	83 c4 1c             	add    esp,0x1c
c001b9f3:	c3                   	ret    

c001b9f4 <FAT::seek(void*, unsigned long long)>:
c001b9f4:	83 ec 2c             	sub    esp,0x2c
c001b9f7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b9fb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b9ff:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ba03:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ba07:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001ba0c:	75 0a                	jne    c001ba18 <FAT::seek(void*, unsigned long long)+0x24>
c001ba0e:	b8 04 00 00 00       	mov    eax,0x4
c001ba13:	eb 37                	jmp    c001ba4c <FAT::seek(void*, unsigned long long)+0x58>
c001ba15:	8d 76 00             	lea    esi,[esi+0x0]
c001ba18:	83 ec 04             	sub    esp,0x4
c001ba1b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ba1f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ba23:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001ba27:	e8 d8 9f fe ff       	call   c0005a04 <f_lseek>
c001ba2c:	83 c4 10             	add    esp,0x10
c001ba2f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ba33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ba37:	85 c0                	test   eax,eax
c001ba39:	75 09                	jne    c001ba44 <FAT::seek(void*, unsigned long long)+0x50>
c001ba3b:	b8 00 00 00 00       	mov    eax,0x0
c001ba40:	eb 0a                	jmp    c001ba4c <FAT::seek(void*, unsigned long long)+0x58>
c001ba42:	66 90                	xchg   ax,ax
c001ba44:	b8 01 00 00 00       	mov    eax,0x1
c001ba49:	8d 76 00             	lea    esi,[esi+0x0]
c001ba4c:	83 c4 2c             	add    esp,0x2c
c001ba4f:	c3                   	ret    

c001ba50 <fatWrapperReadDisk>:
c001ba50:	83 ec 1c             	sub    esp,0x1c
c001ba53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ba57:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ba5b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ba5f:	89 04 24             	mov    DWORD PTR [esp],eax
c001ba62:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ba66:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ba6a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ba6f:	8b 04 85 c0 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7c40]
c001ba76:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ba7a:	83 ec 0c             	sub    esp,0xc
c001ba7d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ba81:	52                   	push   edx
c001ba82:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ba86:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ba8a:	50                   	push   eax
c001ba8b:	e8 2c 4b ff ff       	call   c00105bc <LogicalDisk::read(unsigned long long, int, void*)>
c001ba90:	83 c4 20             	add    esp,0x20
c001ba93:	83 c4 1c             	add    esp,0x1c
c001ba96:	c3                   	ret    
c001ba97:	90                   	nop

c001ba98 <fatWrapperWriteDisk>:
c001ba98:	83 ec 1c             	sub    esp,0x1c
c001ba9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ba9f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001baa3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001baa7:	89 04 24             	mov    DWORD PTR [esp],eax
c001baaa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001baae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bab2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bab7:	8b 04 85 c0 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7c40]
c001babe:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001bac2:	83 ec 0c             	sub    esp,0xc
c001bac5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bac9:	52                   	push   edx
c001baca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bace:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bad2:	50                   	push   eax
c001bad3:	e8 50 4b ff ff       	call   c0010628 <LogicalDisk::write(unsigned long long, int, void*)>
c001bad8:	83 c4 20             	add    esp,0x20
c001badb:	83 c4 1c             	add    esp,0x1c
c001bade:	c3                   	ret    
c001badf:	90                   	nop

c001bae0 <fatWrapperIoctl>:
c001bae0:	53                   	push   ebx
c001bae1:	83 ec 28             	sub    esp,0x28
c001bae4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001bae8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001baec:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001baf0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001baf4:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001baf9:	75 31                	jne    c001bb2c <fatWrapperIoctl+0x4c>
c001bafb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001baff:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bb03:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bb08:	8b 04 85 c0 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7c40]
c001bb0f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001bb15:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001bb1b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bb1f:	66 89 02             	mov    WORD PTR [edx],ax
c001bb22:	b8 00 00 00 00       	mov    eax,0x0
c001bb27:	e9 bc 00 00 00       	jmp    c001bbe8 <fatWrapperIoctl+0x108>
c001bb2c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001bb31:	75 6d                	jne    c001bba0 <fatWrapperIoctl+0xc0>
c001bb33:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bb37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bb3b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bb40:	8b 04 85 c0 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7c40]
c001bb47:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001bb4d:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001bb53:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001bb59:	89 c8                	mov    eax,ecx
c001bb5b:	89 da                	mov    edx,ebx
c001bb5d:	0f a4 c2 0a          	shld   edx,eax,0xa
c001bb61:	c1 e0 0a             	shl    eax,0xa
c001bb64:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001bb69:	8b 0c 8d c0 83 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7c40]
c001bb70:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001bb76:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001bb7c:	89 cb                	mov    ebx,ecx
c001bb7e:	c1 fb 1f             	sar    ebx,0x1f
c001bb81:	53                   	push   ebx
c001bb82:	51                   	push   ecx
c001bb83:	52                   	push   edx
c001bb84:	50                   	push   eax
c001bb85:	e8 d6 6a 00 00       	call   c0022660 <__udivdi3>
c001bb8a:	83 c4 10             	add    esp,0x10
c001bb8d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001bb91:	89 01                	mov    DWORD PTR [ecx],eax
c001bb93:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001bb96:	b8 00 00 00 00       	mov    eax,0x0
c001bb9b:	eb 4b                	jmp    c001bbe8 <fatWrapperIoctl+0x108>
c001bb9d:	8d 76 00             	lea    esi,[esi+0x0]
c001bba0:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001bba5:	75 09                	jne    c001bbb0 <fatWrapperIoctl+0xd0>
c001bba7:	b8 00 00 00 00       	mov    eax,0x0
c001bbac:	eb 3a                	jmp    c001bbe8 <fatWrapperIoctl+0x108>
c001bbae:	66 90                	xchg   ax,ax
c001bbb0:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001bbb5:	75 19                	jne    c001bbd0 <fatWrapperIoctl+0xf0>
c001bbb7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bbbb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bbbf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bbc3:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001bbc9:	b8 00 00 00 00       	mov    eax,0x0
c001bbce:	eb 18                	jmp    c001bbe8 <fatWrapperIoctl+0x108>
c001bbd0:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001bbd5:	75 09                	jne    c001bbe0 <fatWrapperIoctl+0x100>
c001bbd7:	b8 00 00 00 00       	mov    eax,0x0
c001bbdc:	eb 0a                	jmp    c001bbe8 <fatWrapperIoctl+0x108>
c001bbde:	66 90                	xchg   ax,ax
c001bbe0:	b8 04 00 00 00       	mov    eax,0x4
c001bbe5:	8d 76 00             	lea    esi,[esi+0x0]
c001bbe8:	83 c4 28             	add    esp,0x28
c001bbeb:	5b                   	pop    ebx
c001bbec:	c3                   	ret    
c001bbed:	90                   	nop
c001bbee:	66 90                	xchg   ax,ax

c001bbf0 <FAT::FAT()>:
c001bbf0:	83 ec 1c             	sub    esp,0x1c
c001bbf3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bbf7:	83 ec 0c             	sub    esp,0xc
c001bbfa:	50                   	push   eax
c001bbfb:	e8 dc 16 ff ff       	call   c000d2dc <Filesystem::Filesystem()>
c001bc00:	83 c4 10             	add    esp,0x10
c001bc03:	ba 1c 63 02 c0       	mov    edx,0xc002631c
c001bc08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bc0c:	89 10                	mov    DWORD PTR [eax],edx
c001bc0e:	c7 05 20 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029420,0x0
c001bc18:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bc20:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001bc25:	7f 15                	jg     c001bc3c <FAT::FAT()+0x4c>
c001bc27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bc2b:	c7 04 85 40 94 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd6bc0],0xffffffff
c001bc36:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001bc3a:	eb e4                	jmp    c001bc20 <FAT::FAT()+0x30>
c001bc3c:	90                   	nop
c001bc3d:	83 c4 1c             	add    esp,0x1c
c001bc40:	c3                   	ret    
c001bc41:	90                   	nop
c001bc42:	66 90                	xchg   ax,ax

c001bc44 <FAT::fixFilepath(char*)>:
c001bc44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bc48:	8a 00                	mov    al,BYTE PTR [eax]
c001bc4a:	3c 40                	cmp    al,0x40
c001bc4c:	7e 2e                	jle    c001bc7c <FAT::fixFilepath(char*)+0x38>
c001bc4e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bc52:	8a 00                	mov    al,BYTE PTR [eax]
c001bc54:	83 e8 41             	sub    eax,0x41
c001bc57:	88 c2                	mov    dl,al
c001bc59:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bc5d:	88 10                	mov    BYTE PTR [eax],dl
c001bc5f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bc63:	8a 00                	mov    al,BYTE PTR [eax]
c001bc65:	0f be c0             	movsx  eax,al
c001bc68:	8b 04 85 40 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6bc0]
c001bc6f:	83 c0 30             	add    eax,0x30
c001bc72:	88 c2                	mov    dl,al
c001bc74:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bc78:	88 10                	mov    BYTE PTR [eax],dl
c001bc7a:	66 90                	xchg   ax,ax
c001bc7c:	90                   	nop
c001bc7d:	c3                   	ret    
c001bc7e:	66 90                	xchg   ax,ax

c001bc80 <FAT::open(char const*, void**, FileOpenMode)>:
c001bc80:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001bc86:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001bc8e:	74 0c                	je     c001bc9c <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001bc90:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001bc98:	75 0e                	jne    c001bca8 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001bc9a:	66 90                	xchg   ax,ax
c001bc9c:	b8 04 00 00 00       	mov    eax,0x4
c001bca1:	e9 06 01 00 00       	jmp    c001bdac <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001bca6:	66 90                	xchg   ax,ax
c001bca8:	83 ec 08             	sub    esp,0x8
c001bcab:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bcb2:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bcb6:	50                   	push   eax
c001bcb7:	e8 7c 4a fe ff       	call   c0000738 <strcpy>
c001bcbc:	83 c4 10             	add    esp,0x10
c001bcbf:	83 ec 08             	sub    esp,0x8
c001bcc2:	8d 44 24 10          	lea    eax,[esp+0x10]
c001bcc6:	50                   	push   eax
c001bcc7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bcce:	e8 71 ff ff ff       	call   c001bc44 <FAT::fixFilepath(char*)>
c001bcd3:	83 c4 10             	add    esp,0x10
c001bcd6:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001bcde:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001bce5:	83 e0 01             	and    eax,0x1
c001bce8:	74 0a                	je     c001bcf4 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c001bcea:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001bcf2:	66 90                	xchg   ax,ax
c001bcf4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001bcfb:	83 e0 04             	and    eax,0x4
c001bcfe:	74 10                	je     c001bd10 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c001bd00:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001bd08:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001bd10:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001bd17:	83 e0 02             	and    eax,0x2
c001bd1a:	74 08                	je     c001bd24 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c001bd1c:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001bd24:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001bd2b:	83 e0 08             	and    eax,0x8
c001bd2e:	74 08                	je     c001bd38 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c001bd30:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001bd38:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001bd3f:	83 e0 10             	and    eax,0x10
c001bd42:	74 08                	je     c001bd4c <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001bd44:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001bd4c:	83 ec 0c             	sub    esp,0xc
c001bd4f:	68 50 02 00 00       	push   0x250
c001bd54:	e8 5e df fe ff       	call   c0009cb7 <malloc>
c001bd59:	83 c4 10             	add    esp,0x10
c001bd5c:	89 c2                	mov    edx,eax
c001bd5e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001bd65:	89 10                	mov    DWORD PTR [eax],edx
c001bd67:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001bd6f:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001bd76:	8b 00                	mov    eax,DWORD PTR [eax]
c001bd78:	83 ec 04             	sub    esp,0x4
c001bd7b:	52                   	push   edx
c001bd7c:	8d 54 24 10          	lea    edx,[esp+0x10]
c001bd80:	52                   	push   edx
c001bd81:	50                   	push   eax
c001bd82:	e8 fc 90 fe ff       	call   c0004e83 <f_open>
c001bd87:	83 c4 10             	add    esp,0x10
c001bd8a:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001bd91:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001bd99:	74 09                	je     c001bda4 <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001bd9b:	b8 01 00 00 00       	mov    eax,0x1
c001bda0:	eb 0a                	jmp    c001bdac <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001bda2:	66 90                	xchg   ax,ax
c001bda4:	b8 00 00 00 00       	mov    eax,0x0
c001bda9:	8d 76 00             	lea    esi,[esi+0x0]
c001bdac:	81 c4 1c 01 00 00    	add    esp,0x11c
c001bdb2:	c3                   	ret    
c001bdb3:	90                   	nop

c001bdb4 <FAT::openDir(char const*, void**)>:
c001bdb4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001bdba:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001bdc2:	74 0c                	je     c001bdd0 <FAT::openDir(char const*, void**)+0x1c>
c001bdc4:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001bdcc:	75 0e                	jne    c001bddc <FAT::openDir(char const*, void**)+0x28>
c001bdce:	66 90                	xchg   ax,ax
c001bdd0:	b8 04 00 00 00       	mov    eax,0x4
c001bdd5:	e9 82 00 00 00       	jmp    c001be5c <FAT::openDir(char const*, void**)+0xa8>
c001bdda:	66 90                	xchg   ax,ax
c001bddc:	83 ec 08             	sub    esp,0x8
c001bddf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bde6:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bdea:	50                   	push   eax
c001bdeb:	e8 48 49 fe ff       	call   c0000738 <strcpy>
c001bdf0:	83 c4 10             	add    esp,0x10
c001bdf3:	83 ec 08             	sub    esp,0x8
c001bdf6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bdfa:	50                   	push   eax
c001bdfb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001be02:	e8 3d fe ff ff       	call   c001bc44 <FAT::fixFilepath(char*)>
c001be07:	83 c4 10             	add    esp,0x10
c001be0a:	83 ec 0c             	sub    esp,0xc
c001be0d:	6a 4c                	push   0x4c
c001be0f:	e8 a3 de fe ff       	call   c0009cb7 <malloc>
c001be14:	83 c4 10             	add    esp,0x10
c001be17:	89 c2                	mov    edx,eax
c001be19:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001be20:	89 10                	mov    DWORD PTR [eax],edx
c001be22:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001be29:	8b 00                	mov    eax,DWORD PTR [eax]
c001be2b:	83 ec 08             	sub    esp,0x8
c001be2e:	8d 54 24 14          	lea    edx,[esp+0x14]
c001be32:	52                   	push   edx
c001be33:	50                   	push   eax
c001be34:	e8 82 a0 fe ff       	call   c0005ebb <f_opendir>
c001be39:	83 c4 10             	add    esp,0x10
c001be3c:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001be43:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001be4b:	74 07                	je     c001be54 <FAT::openDir(char const*, void**)+0xa0>
c001be4d:	b8 01 00 00 00       	mov    eax,0x1
c001be52:	eb 08                	jmp    c001be5c <FAT::openDir(char const*, void**)+0xa8>
c001be54:	b8 00 00 00 00       	mov    eax,0x0
c001be59:	8d 76 00             	lea    esi,[esi+0x0]
c001be5c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001be62:	c3                   	ret    
c001be63:	90                   	nop

c001be64 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001be64:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001be6a:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001be72:	75 0c                	jne    c001be80 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001be74:	b8 04 00 00 00       	mov    eax,0x4
c001be79:	e9 d2 00 00 00       	jmp    c001bf50 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001be7e:	66 90                	xchg   ax,ax
c001be80:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001be88:	75 0a                	jne    c001be94 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001be8a:	b8 04 00 00 00       	mov    eax,0x4
c001be8f:	e9 bc 00 00 00       	jmp    c001bf50 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001be94:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001be9c:	75 0a                	jne    c001bea8 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001be9e:	b8 04 00 00 00       	mov    eax,0x4
c001bea3:	e9 a8 00 00 00       	jmp    c001bf50 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001bea8:	83 ec 08             	sub    esp,0x8
c001beab:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001beb2:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001beb9:	50                   	push   eax
c001beba:	e8 79 48 fe ff       	call   c0000738 <strcpy>
c001bebf:	83 c4 10             	add    esp,0x10
c001bec2:	83 ec 08             	sub    esp,0x8
c001bec5:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001becc:	50                   	push   eax
c001becd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001bed4:	e8 6b fd ff ff       	call   c001bc44 <FAT::fixFilepath(char*)>
c001bed9:	83 c4 10             	add    esp,0x10
c001bedc:	83 ec 08             	sub    esp,0x8
c001bedf:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bee3:	50                   	push   eax
c001bee4:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001beeb:	50                   	push   eax
c001beec:	e8 89 a1 fe ff       	call   c000607a <f_stat>
c001bef1:	83 c4 10             	add    esp,0x10
c001bef4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001befb:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001bf02:	85 c0                	test   eax,eax
c001bf04:	74 0a                	je     c001bf10 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001bf06:	83 f8 04             	cmp    eax,0x4
c001bf09:	74 35                	je     c001bf40 <FAT::stat(char const*, unsigned long long*, bool*)+0xdc>
c001bf0b:	eb 3b                	jmp    c001bf48 <FAT::stat(char const*, unsigned long long*, bool*)+0xe4>
c001bf0d:	8d 76 00             	lea    esi,[esi+0x0]
c001bf10:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001bf14:	0f b6 c0             	movzx  eax,al
c001bf17:	83 e0 10             	and    eax,0x10
c001bf1a:	0f 95 c2             	setne  dl
c001bf1d:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001bf24:	88 10                	mov    BYTE PTR [eax],dl
c001bf26:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bf29:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bf2d:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001bf34:	89 01                	mov    DWORD PTR [ecx],eax
c001bf36:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001bf39:	b8 00 00 00 00       	mov    eax,0x0
c001bf3e:	eb 10                	jmp    c001bf50 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001bf40:	b8 02 00 00 00       	mov    eax,0x2
c001bf45:	eb 09                	jmp    c001bf50 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001bf47:	90                   	nop
c001bf48:	b8 01 00 00 00       	mov    eax,0x1
c001bf4d:	8d 76 00             	lea    esi,[esi+0x0]
c001bf50:	81 c4 2c 02 00 00    	add    esp,0x22c
c001bf56:	c3                   	ret    
c001bf57:	90                   	nop

c001bf58 <FAT::unlink(char const*)>:
c001bf58:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001bf5e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001bf66:	75 08                	jne    c001bf70 <FAT::unlink(char const*)+0x18>
c001bf68:	b8 04 00 00 00       	mov    eax,0x4
c001bf6d:	eb 61                	jmp    c001bfd0 <FAT::unlink(char const*)+0x78>
c001bf6f:	90                   	nop
c001bf70:	83 ec 08             	sub    esp,0x8
c001bf73:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bf7a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bf7e:	50                   	push   eax
c001bf7f:	e8 b4 47 fe ff       	call   c0000738 <strcpy>
c001bf84:	83 c4 10             	add    esp,0x10
c001bf87:	83 ec 08             	sub    esp,0x8
c001bf8a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bf8e:	50                   	push   eax
c001bf8f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bf96:	e8 a9 fc ff ff       	call   c001bc44 <FAT::fixFilepath(char*)>
c001bf9b:	83 c4 10             	add    esp,0x10
c001bf9e:	83 ec 0c             	sub    esp,0xc
c001bfa1:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bfa5:	50                   	push   eax
c001bfa6:	e8 21 a4 fe ff       	call   c00063cc <f_unlink>
c001bfab:	83 c4 10             	add    esp,0x10
c001bfae:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001bfb5:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001bfbc:	85 c0                	test   eax,eax
c001bfbe:	75 08                	jne    c001bfc8 <FAT::unlink(char const*)+0x70>
c001bfc0:	b8 00 00 00 00       	mov    eax,0x0
c001bfc5:	eb 09                	jmp    c001bfd0 <FAT::unlink(char const*)+0x78>
c001bfc7:	90                   	nop
c001bfc8:	b8 01 00 00 00       	mov    eax,0x1
c001bfcd:	8d 76 00             	lea    esi,[esi+0x0]
c001bfd0:	81 c4 1c 01 00 00    	add    esp,0x11c
c001bfd6:	c3                   	ret    
c001bfd7:	90                   	nop

c001bfd8 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001bfd8:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001bfde:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001bfe5:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001bfec:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001bff0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001bff4:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001bffc:	75 0a                	jne    c001c008 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001bffe:	b8 04 00 00 00       	mov    eax,0x4
c001c003:	e9 30 01 00 00       	jmp    c001c138 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001c008:	83 ec 08             	sub    esp,0x8
c001c00b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c012:	8d 44 24 24          	lea    eax,[esp+0x24]
c001c016:	50                   	push   eax
c001c017:	e8 1c 47 fe ff       	call   c0000738 <strcpy>
c001c01c:	83 c4 10             	add    esp,0x10
c001c01f:	83 ec 08             	sub    esp,0x8
c001c022:	8d 44 24 20          	lea    eax,[esp+0x20]
c001c026:	50                   	push   eax
c001c027:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c02e:	e8 11 fc ff ff       	call   c001bc44 <FAT::fixFilepath(char*)>
c001c033:	83 c4 10             	add    esp,0x10
c001c036:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001c03e:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001c046:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c04b:	83 e0 01             	and    eax,0x1
c001c04e:	74 08                	je     c001c058 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001c050:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001c058:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c05d:	83 e0 02             	and    eax,0x2
c001c060:	74 0a                	je     c001c06c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x94>
c001c062:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001c06a:	66 90                	xchg   ax,ax
c001c06c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c071:	83 e0 04             	and    eax,0x4
c001c074:	74 0a                	je     c001c080 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001c076:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001c07e:	66 90                	xchg   ax,ax
c001c080:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c085:	83 e0 08             	and    eax,0x8
c001c088:	74 0a                	je     c001c094 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xbc>
c001c08a:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001c092:	66 90                	xchg   ax,ax
c001c094:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c099:	83 e0 01             	and    eax,0x1
c001c09c:	74 0a                	je     c001c0a8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xd0>
c001c09e:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001c0a6:	66 90                	xchg   ax,ax
c001c0a8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c0ad:	83 e0 02             	and    eax,0x2
c001c0b0:	74 0a                	je     c001c0bc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001c0b2:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001c0ba:	66 90                	xchg   ax,ax
c001c0bc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c0c1:	83 e0 04             	and    eax,0x4
c001c0c4:	74 0a                	je     c001c0d0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xf8>
c001c0c6:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001c0ce:	66 90                	xchg   ax,ax
c001c0d0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c0d5:	83 e0 08             	and    eax,0x8
c001c0d8:	74 0a                	je     c001c0e4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x10c>
c001c0da:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001c0e2:	66 90                	xchg   ax,ax
c001c0e4:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001c0eb:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001c0f2:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001c0fa:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001c102:	83 ec 04             	sub    esp,0x4
c001c105:	52                   	push   edx
c001c106:	50                   	push   eax
c001c107:	8d 44 24 24          	lea    eax,[esp+0x24]
c001c10b:	50                   	push   eax
c001c10c:	e8 5d a9 fe ff       	call   c0006a6e <f_chmod>
c001c111:	83 c4 10             	add    esp,0x10
c001c114:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001c11b:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001c122:	85 c0                	test   eax,eax
c001c124:	75 0a                	jne    c001c130 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x158>
c001c126:	b8 00 00 00 00       	mov    eax,0x0
c001c12b:	eb 0b                	jmp    c001c138 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001c12d:	8d 76 00             	lea    esi,[esi+0x0]
c001c130:	b8 01 00 00 00       	mov    eax,0x1
c001c135:	8d 76 00             	lea    esi,[esi+0x0]
c001c138:	81 c4 2c 01 00 00    	add    esp,0x12c
c001c13e:	c3                   	ret    
c001c13f:	90                   	nop

c001c140 <FAT::rename(char const*, char const*)>:
c001c140:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c146:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001c14e:	74 0c                	je     c001c15c <FAT::rename(char const*, char const*)+0x1c>
c001c150:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001c158:	75 0e                	jne    c001c168 <FAT::rename(char const*, char const*)+0x28>
c001c15a:	66 90                	xchg   ax,ax
c001c15c:	b8 04 00 00 00       	mov    eax,0x4
c001c161:	e9 9e 00 00 00       	jmp    c001c204 <FAT::rename(char const*, char const*)+0xc4>
c001c166:	66 90                	xchg   ax,ax
c001c168:	83 ec 08             	sub    esp,0x8
c001c16b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c172:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001c179:	50                   	push   eax
c001c17a:	e8 b9 45 fe ff       	call   c0000738 <strcpy>
c001c17f:	83 c4 10             	add    esp,0x10
c001c182:	83 ec 08             	sub    esp,0x8
c001c185:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001c18c:	50                   	push   eax
c001c18d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c194:	e8 ab fa ff ff       	call   c001bc44 <FAT::fixFilepath(char*)>
c001c199:	83 c4 10             	add    esp,0x10
c001c19c:	83 ec 08             	sub    esp,0x8
c001c19f:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001c1a6:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c1aa:	50                   	push   eax
c001c1ab:	e8 88 45 fe ff       	call   c0000738 <strcpy>
c001c1b0:	83 c4 10             	add    esp,0x10
c001c1b3:	83 ec 08             	sub    esp,0x8
c001c1b6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c1ba:	50                   	push   eax
c001c1bb:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c1c2:	e8 7d fa ff ff       	call   c001bc44 <FAT::fixFilepath(char*)>
c001c1c7:	83 c4 10             	add    esp,0x10
c001c1ca:	83 ec 08             	sub    esp,0x8
c001c1cd:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c1d1:	50                   	push   eax
c001c1d2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001c1d9:	50                   	push   eax
c001c1da:	e8 9c a5 fe ff       	call   c000677b <f_rename>
c001c1df:	83 c4 10             	add    esp,0x10
c001c1e2:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001c1e9:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001c1f0:	85 c0                	test   eax,eax
c001c1f2:	75 08                	jne    c001c1fc <FAT::rename(char const*, char const*)+0xbc>
c001c1f4:	b8 00 00 00 00       	mov    eax,0x0
c001c1f9:	eb 09                	jmp    c001c204 <FAT::rename(char const*, char const*)+0xc4>
c001c1fb:	90                   	nop
c001c1fc:	b8 01 00 00 00       	mov    eax,0x1
c001c201:	8d 76 00             	lea    esi,[esi+0x0]
c001c204:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c20a:	c3                   	ret    
c001c20b:	90                   	nop

c001c20c <FAT::mkdir(char const*)>:
c001c20c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c212:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c21a:	75 08                	jne    c001c224 <FAT::mkdir(char const*)+0x18>
c001c21c:	b8 04 00 00 00       	mov    eax,0x4
c001c221:	eb 61                	jmp    c001c284 <FAT::mkdir(char const*)+0x78>
c001c223:	90                   	nop
c001c224:	83 ec 08             	sub    esp,0x8
c001c227:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c22e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c232:	50                   	push   eax
c001c233:	e8 00 45 fe ff       	call   c0000738 <strcpy>
c001c238:	83 c4 10             	add    esp,0x10
c001c23b:	83 ec 08             	sub    esp,0x8
c001c23e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c242:	50                   	push   eax
c001c243:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c24a:	e8 f5 f9 ff ff       	call   c001bc44 <FAT::fixFilepath(char*)>
c001c24f:	83 c4 10             	add    esp,0x10
c001c252:	83 ec 0c             	sub    esp,0xc
c001c255:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c259:	50                   	push   eax
c001c25a:	e8 f0 a2 fe ff       	call   c000654f <f_mkdir>
c001c25f:	83 c4 10             	add    esp,0x10
c001c262:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c269:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001c270:	85 c0                	test   eax,eax
c001c272:	75 08                	jne    c001c27c <FAT::mkdir(char const*)+0x70>
c001c274:	b8 00 00 00 00       	mov    eax,0x0
c001c279:	eb 09                	jmp    c001c284 <FAT::mkdir(char const*)+0x78>
c001c27b:	90                   	nop
c001c27c:	b8 01 00 00 00       	mov    eax,0x1
c001c281:	8d 76 00             	lea    esi,[esi+0x0]
c001c284:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c28a:	c3                   	ret    
c001c28b:	90                   	nop

c001c28c <FAT::exists(char const*)>:
c001c28c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001c292:	83 ec 08             	sub    esp,0x8
c001c295:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c29c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001c2a0:	50                   	push   eax
c001c2a1:	e8 92 44 fe ff       	call   c0000738 <strcpy>
c001c2a6:	83 c4 10             	add    esp,0x10
c001c2a9:	83 ec 08             	sub    esp,0x8
c001c2ac:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c2b0:	50                   	push   eax
c001c2b1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c2b8:	e8 87 f9 ff ff       	call   c001bc44 <FAT::fixFilepath(char*)>
c001c2bd:	83 c4 10             	add    esp,0x10
c001c2c0:	83 ec 08             	sub    esp,0x8
c001c2c3:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001c2ca:	50                   	push   eax
c001c2cb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001c2cf:	50                   	push   eax
c001c2d0:	e8 a5 9d fe ff       	call   c000607a <f_stat>
c001c2d5:	83 c4 10             	add    esp,0x10
c001c2d8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001c2df:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001c2e6:	85 c0                	test   eax,eax
c001c2e8:	75 06                	jne    c001c2f0 <FAT::exists(char const*)+0x64>
c001c2ea:	b0 01                	mov    al,0x1
c001c2ec:	eb 06                	jmp    c001c2f4 <FAT::exists(char const*)+0x68>
c001c2ee:	66 90                	xchg   ax,ax
c001c2f0:	b0 00                	mov    al,0x0
c001c2f2:	66 90                	xchg   ax,ax
c001c2f4:	81 c4 2c 02 00 00    	add    esp,0x22c
c001c2fa:	c3                   	ret    
c001c2fb:	90                   	nop

c001c2fc <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001c2fc:	b8 08 00 00 00       	mov    eax,0x8
c001c301:	c3                   	ret    

c001c302 <ISO9660::seek(void*, unsigned long long)>:
c001c302:	53                   	push   ebx
c001c303:	b8 04 00 00 00       	mov    eax,0x4
c001c308:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c30c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c310:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c314:	85 d2                	test   edx,edx
c001c316:	74 17                	je     c001c32f <ISO9660::seek(void*, unsigned long long)+0x2d>
c001c318:	89 c8                	mov    eax,ecx
c001c31a:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001c31d:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001c320:	b8 01 00 00 00       	mov    eax,0x1
c001c325:	73 08                	jae    c001c32f <ISO9660::seek(void*, unsigned long long)+0x2d>
c001c327:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001c32a:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001c32d:	31 c0                	xor    eax,eax
c001c32f:	5b                   	pop    ebx
c001c330:	c3                   	ret    
c001c331:	90                   	nop

c001c332 <ISO9660::tell(void*, unsigned long long*)>:
c001c332:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c336:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c33a:	85 d2                	test   edx,edx
c001c33c:	74 12                	je     c001c350 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001c33e:	85 c0                	test   eax,eax
c001c340:	74 0e                	je     c001c350 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001c342:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c345:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001c348:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001c34b:	89 10                	mov    DWORD PTR [eax],edx
c001c34d:	31 c0                	xor    eax,eax
c001c34f:	c3                   	ret    
c001c350:	b8 04 00 00 00       	mov    eax,0x4
c001c355:	c3                   	ret    

c001c356 <ISO9660::getName()>:
c001c356:	b8 7c 63 02 c0       	mov    eax,0xc002637c
c001c35b:	c3                   	ret    

c001c35c <ISO9660::stat(void*, unsigned long long*)>:
c001c35c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c360:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c364:	85 d2                	test   edx,edx
c001c366:	74 12                	je     c001c37a <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001c368:	85 c0                	test   eax,eax
c001c36a:	74 0e                	je     c001c37a <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001c36c:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001c36f:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001c372:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001c375:	89 10                	mov    DWORD PTR [eax],edx
c001c377:	31 c0                	xor    eax,eax
c001c379:	c3                   	ret    
c001c37a:	b8 04 00 00 00       	mov    eax,0x4
c001c37f:	c3                   	ret    

c001c380 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001c380:	b8 01 00 00 00       	mov    eax,0x1
c001c385:	c3                   	ret    

c001c386 <ISO9660::unlink(char const*)>:
c001c386:	b8 01 00 00 00       	mov    eax,0x1
c001c38b:	c3                   	ret    

c001c38c <ISO9660::write(void*, unsigned long, void*, int*)>:
c001c38c:	b8 01 00 00 00       	mov    eax,0x1
c001c391:	c3                   	ret    

c001c392 <ISO9660::rename(char const*, char const*)>:
c001c392:	b8 01 00 00 00       	mov    eax,0x1
c001c397:	c3                   	ret    

c001c398 <ISO9660::mkdir(char const*)>:
c001c398:	b8 01 00 00 00       	mov    eax,0x1
c001c39d:	c3                   	ret    

c001c39e <ISO9660::close(void*)>:
c001c39e:	83 ec 0c             	sub    esp,0xc
c001c3a1:	b8 04 00 00 00       	mov    eax,0x4
c001c3a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c3aa:	85 d2                	test   edx,edx
c001c3ac:	74 0e                	je     c001c3bc <ISO9660::close(void*)+0x1e>
c001c3ae:	83 ec 0c             	sub    esp,0xc
c001c3b1:	52                   	push   edx
c001c3b2:	e8 10 d9 fe ff       	call   c0009cc7 <free>
c001c3b7:	83 c4 10             	add    esp,0x10
c001c3ba:	31 c0                	xor    eax,eax
c001c3bc:	83 c4 0c             	add    esp,0xc
c001c3bf:	c3                   	ret    

c001c3c0 <ISO9660::closeDir(void*)>:
c001c3c0:	83 ec 0c             	sub    esp,0xc
c001c3c3:	b8 04 00 00 00       	mov    eax,0x4
c001c3c8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c3cc:	85 d2                	test   edx,edx
c001c3ce:	74 0e                	je     c001c3de <ISO9660::closeDir(void*)+0x1e>
c001c3d0:	83 ec 0c             	sub    esp,0xc
c001c3d3:	52                   	push   edx
c001c3d4:	e8 ee d8 fe ff       	call   c0009cc7 <free>
c001c3d9:	83 c4 10             	add    esp,0x10
c001c3dc:	31 c0                	xor    eax,eax
c001c3de:	83 c4 0c             	add    esp,0xc
c001c3e1:	c3                   	ret    

c001c3e2 <ISO9660::~ISO9660()>:
c001c3e2:	83 ec 0c             	sub    esp,0xc
c001c3e5:	ba a0 63 02 c0       	mov    edx,0xc00263a0
c001c3ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3ee:	89 10                	mov    DWORD PTR [eax],edx
c001c3f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3f4:	83 ec 0c             	sub    esp,0xc
c001c3f7:	50                   	push   eax
c001c3f8:	e8 03 0f ff ff       	call   c000d300 <Filesystem::~Filesystem()>
c001c3fd:	83 c4 10             	add    esp,0x10
c001c400:	90                   	nop
c001c401:	83 c4 0c             	add    esp,0xc
c001c404:	c3                   	ret    
c001c405:	90                   	nop

c001c406 <ISO9660::~ISO9660()>:
c001c406:	83 ec 0c             	sub    esp,0xc
c001c409:	83 ec 0c             	sub    esp,0xc
c001c40c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c410:	e8 cd ff ff ff       	call   c001c3e2 <ISO9660::~ISO9660()>
c001c415:	83 c4 10             	add    esp,0x10
c001c418:	83 ec 08             	sub    esp,0x8
c001c41b:	6a 08                	push   0x8
c001c41d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c421:	e8 be 0a ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c001c426:	83 c4 10             	add    esp,0x10
c001c429:	83 c4 0c             	add    esp,0xc
c001c42c:	c3                   	ret    

c001c42d <__memmem(unsigned char*, int, unsigned char*, int)>:
c001c42d:	55                   	push   ebp
c001c42e:	31 c9                	xor    ecx,ecx
c001c430:	57                   	push   edi
c001c431:	56                   	push   esi
c001c432:	53                   	push   ebx
c001c433:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c437:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c43b:	89 eb                	mov    ebx,ebp
c001c43d:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001c441:	39 ce                	cmp    esi,ecx
c001c443:	7e 17                	jle    c001c45c <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001c445:	31 d2                	xor    edx,edx
c001c447:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001c44b:	7d 13                	jge    c001c460 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001c44d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001c451:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001c454:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001c457:	75 0d                	jne    c001c466 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001c459:	42                   	inc    edx
c001c45a:	eb eb                	jmp    c001c447 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001c45c:	31 c0                	xor    eax,eax
c001c45e:	eb 0a                	jmp    c001c46a <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001c460:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001c464:	eb 04                	jmp    c001c46a <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001c466:	41                   	inc    ecx
c001c467:	43                   	inc    ebx
c001c468:	eb d7                	jmp    c001c441 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001c46a:	5b                   	pop    ebx
c001c46b:	5e                   	pop    esi
c001c46c:	5f                   	pop    edi
c001c46d:	5d                   	pop    ebp
c001c46e:	c3                   	ret    

c001c46f <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001c46f:	57                   	push   edi
c001c470:	56                   	push   esi
c001c471:	53                   	push   ebx
c001c472:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c476:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c47a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c47e:	39 35 20 95 02 c0    	cmp    DWORD PTR ds:0xc0029520,esi
c001c484:	75 08                	jne    c001c48e <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001c486:	38 1d 34 78 02 c0    	cmp    BYTE PTR ds:0xc0027834,bl
c001c48c:	74 4a                	je     c001c4d8 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c001c48e:	83 ec 0c             	sub    esp,0xc
c001c491:	31 d2                	xor    edx,edx
c001c493:	68 40 95 02 c0       	push   0xc0029540
c001c498:	0f be c3             	movsx  eax,bl
c001c49b:	6a 01                	push   0x1
c001c49d:	52                   	push   edx
c001c49e:	56                   	push   esi
c001c49f:	ff 34 85 bc 82 02 c0 	push   DWORD PTR [eax*4-0x3ffd7d44]
c001c4a6:	e8 11 41 ff ff       	call   c00105bc <LogicalDisk::read(unsigned long long, int, void*)>
c001c4ab:	83 c4 20             	add    esp,0x20
c001c4ae:	85 c0                	test   eax,eax
c001c4b0:	75 0e                	jne    c001c4c0 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c001c4b2:	89 35 20 95 02 c0    	mov    DWORD PTR ds:0xc0029520,esi
c001c4b8:	88 1d 34 78 02 c0    	mov    BYTE PTR ds:0xc0027834,bl
c001c4be:	eb 18                	jmp    c001c4d8 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c001c4c0:	50                   	push   eax
c001c4c1:	68 00 08 00 00       	push   0x800
c001c4c6:	6a 00                	push   0x0
c001c4c8:	57                   	push   edi
c001c4c9:	e8 ae 41 fe ff       	call   c000067c <memset>
c001c4ce:	83 c4 10             	add    esp,0x10
c001c4d1:	b8 01 00 00 00       	mov    eax,0x1
c001c4d6:	eb 0e                	jmp    c001c4e6 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c001c4d8:	be 40 95 02 c0       	mov    esi,0xc0029540
c001c4dd:	b9 00 08 00 00       	mov    ecx,0x800
c001c4e2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c4e4:	31 c0                	xor    eax,eax
c001c4e6:	5b                   	pop    ebx
c001c4e7:	5e                   	pop    esi
c001c4e8:	5f                   	pop    edi
c001c4e9:	c3                   	ret    

c001c4ea <ISO9660::tryMount(LogicalDisk*, int)>:
c001c4ea:	81 ec 10 08 00 00    	sub    esp,0x810
c001c4f0:	c7 05 20 95 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0029520,0xdeadbeef
c001c4fa:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001c501:	83 c0 41             	add    eax,0x41
c001c504:	0f be c0             	movsx  eax,al
c001c507:	50                   	push   eax
c001c508:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c50c:	50                   	push   eax
c001c50d:	6a 10                	push   0x10
c001c50f:	e8 5b ff ff ff       	call   c001c46f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c514:	83 c4 10             	add    esp,0x10
c001c517:	31 d2                	xor    edx,edx
c001c519:	85 c0                	test   eax,eax
c001c51b:	75 24                	jne    c001c541 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001c51d:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001c522:	75 1d                	jne    c001c541 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001c524:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001c529:	75 16                	jne    c001c541 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001c52b:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001c530:	75 0f                	jne    c001c541 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001c532:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001c537:	75 08                	jne    c001c541 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001c539:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001c53e:	0f 94 c2             	sete   dl
c001c541:	88 d0                	mov    al,dl
c001c543:	81 c4 0c 08 00 00    	add    esp,0x80c
c001c549:	c3                   	ret    

c001c54a <ISO9660::read(void*, unsigned long, void*, int*)>:
c001c54a:	55                   	push   ebp
c001c54b:	57                   	push   edi
c001c54c:	56                   	push   esi
c001c54d:	53                   	push   ebx
c001c54e:	81 ec 2c 08 00 00    	sub    esp,0x82c
c001c554:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c001c55b:	85 ed                	test   ebp,ebp
c001c55d:	0f 84 da 01 00 00    	je     c001c73d <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001c563:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001c56b:	0f 84 cc 01 00 00    	je     c001c73d <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001c571:	b8 01 00 00 00       	mov    eax,0x1
c001c576:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c001c57a:	0f 85 c2 01 00 00    	jne    c001c742 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001c580:	31 d2                	xor    edx,edx
c001c582:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001c589:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001c58c:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001c58f:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001c592:	89 04 24             	mov    DWORD PTR [esp],eax
c001c595:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c599:	01 c8                	add    eax,ecx
c001c59b:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001c59e:	11 da                	adc    edx,ebx
c001c5a0:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001c5a4:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c5a8:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001c5ac:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c5b0:	19 d7                	sbb    edi,edx
c001c5b2:	72 11                	jb     c001c5c5 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c001c5b4:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001c5b7:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001c5bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c5bf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c5c3:	eb 0c                	jmp    c001c5d1 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c001c5c5:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001c5c9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c5cd:	29 ce                	sub    esi,ecx
c001c5cf:	19 df                	sbb    edi,ebx
c001c5d1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c5d4:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001c5d7:	0f a4 c2 0b          	shld   edx,eax,0xb
c001c5db:	c1 e0 0b             	shl    eax,0xb
c001c5de:	01 c8                	add    eax,ecx
c001c5e0:	11 da                	adc    edx,ebx
c001c5e2:	89 04 24             	mov    DWORD PTR [esp],eax
c001c5e5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c5e9:	51                   	push   ecx
c001c5ea:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c5ee:	50                   	push   eax
c001c5ef:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c001c5f3:	53                   	push   ebx
c001c5f4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c5f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c5fc:	0f ac d0 0b          	shrd   eax,edx,0xb
c001c600:	50                   	push   eax
c001c601:	e8 69 fe ff ff       	call   c001c46f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c606:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001c609:	b8 00 08 00 00       	mov    eax,0x800
c001c60e:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001c614:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c001c618:	29 d0                	sub    eax,edx
c001c61a:	83 c4 10             	add    esp,0x10
c001c61d:	89 f9                	mov    ecx,edi
c001c61f:	39 c6                	cmp    esi,eax
c001c621:	83 d9 00             	sbb    ecx,0x0
c001c624:	7d 1b                	jge    c001c641 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c001c626:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001c62b:	75 12                	jne    c001c63f <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c001c62d:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001c634:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c63a:	e9 fa 00 00 00       	jmp    c001c739 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c001c63f:	89 f0                	mov    eax,esi
c001c641:	01 d3                	add    ebx,edx
c001c643:	31 d2                	xor    edx,edx
c001c645:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001c649:	39 c2                	cmp    edx,eax
c001c64b:	7d 14                	jge    c001c661 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c001c64d:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c001c654:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001c658:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c001c65b:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c001c65e:	42                   	inc    edx
c001c65f:	eb e8                	jmp    c001c649 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c001c661:	89 c2                	mov    edx,eax
c001c663:	85 c0                	test   eax,eax
c001c665:	79 02                	jns    c001c669 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c001c667:	31 d2                	xor    edx,edx
c001c669:	01 c2                	add    edx,eax
c001c66b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001c66e:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c001c675:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001c679:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001c67d:	99                   	cdq    
c001c67e:	01 c1                	add    ecx,eax
c001c680:	11 d3                	adc    ebx,edx
c001c682:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001c686:	29 c6                	sub    esi,eax
c001c688:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001c68c:	19 d7                	sbb    edi,edx
c001c68e:	89 34 24             	mov    DWORD PTR [esp],esi
c001c691:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001c695:	b8 ff 07 00 00       	mov    eax,0x7ff
c001c69a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001c69d:	b8 00 00 00 00       	mov    eax,0x0
c001c6a2:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001c6a6:	7d 43                	jge    c001c6eb <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c001c6a8:	52                   	push   edx
c001c6a9:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c6ad:	50                   	push   eax
c001c6ae:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c6b2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c6b6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c6ba:	0f ac d0 0b          	shrd   eax,edx,0xb
c001c6be:	50                   	push   eax
c001c6bf:	e8 ab fd ff ff       	call   c001c46f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c6c4:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001c6cc:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c001c6d1:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c001c6d9:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001c6e1:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001c6e6:	83 c4 10             	add    esp,0x10
c001c6e9:	eb aa                	jmp    c001c695 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c001c6eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6ef:	0b 04 24             	or     eax,DWORD PTR [esp]
c001c6f2:	74 2a                	je     c001c71e <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c001c6f4:	50                   	push   eax
c001c6f5:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c6f9:	50                   	push   eax
c001c6fa:	8d 74 24 28          	lea    esi,[esp+0x28]
c001c6fe:	56                   	push   esi
c001c6ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c703:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c707:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c001c70b:	51                   	push   ecx
c001c70c:	e8 5e fd ff ff       	call   c001c46f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c711:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c715:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c719:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c71b:	83 c4 10             	add    esp,0x10
c001c71e:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001c725:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001c729:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c72d:	89 18                	mov    DWORD PTR [eax],ebx
c001c72f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c733:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001c736:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001c739:	31 c0                	xor    eax,eax
c001c73b:	eb 05                	jmp    c001c742 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001c73d:	b8 04 00 00 00       	mov    eax,0x4
c001c742:	81 c4 2c 08 00 00    	add    esp,0x82c
c001c748:	5b                   	pop    ebx
c001c749:	5e                   	pop    esi
c001c74a:	5f                   	pop    edi
c001c74b:	5d                   	pop    ebp
c001c74c:	c3                   	ret    
c001c74d:	90                   	nop

c001c74e <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001c74e:	55                   	push   ebp
c001c74f:	57                   	push   edi
c001c750:	56                   	push   esi
c001c751:	53                   	push   ebx
c001c752:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001c758:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c001c75f:	85 ed                	test   ebp,ebp
c001c761:	0f 84 51 02 00 00    	je     c001c9b8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001c767:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001c76f:	0f 84 43 02 00 00    	je     c001c9b8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001c775:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001c778:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c001c77b:	75 0a                	jne    c001c787 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001c77d:	b8 07 00 00 00       	mov    eax,0x7
c001c782:	e9 36 02 00 00       	jmp    c001c9bd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001c787:	50                   	push   eax
c001c788:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c78c:	50                   	push   eax
c001c78d:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001c794:	53                   	push   ebx
c001c795:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c798:	c1 e0 0b             	shl    eax,0xb
c001c79b:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c001c79e:	c1 e8 0b             	shr    eax,0xb
c001c7a1:	50                   	push   eax
c001c7a2:	e8 c8 fc ff ff       	call   c001c46f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c7a7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c7aa:	83 c4 10             	add    esp,0x10
c001c7ad:	89 c1                	mov    ecx,eax
c001c7af:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001c7b2:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001c7b8:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001c7bb:	84 db                	test   bl,bl
c001c7bd:	0f 85 8b 00 00 00    	jne    c001c84e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c001c7c3:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c001c7c9:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001c7cc:	81 e6 ff 07 00 00    	and    esi,0x7ff
c001c7d2:	29 c6                	sub    esi,eax
c001c7d4:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001c7d8:	89 f3                	mov    ebx,esi
c001c7da:	89 f1                	mov    ecx,esi
c001c7dc:	c1 fb 1f             	sar    ebx,0x1f
c001c7df:	01 f0                	add    eax,esi
c001c7e1:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001c7e4:	11 da                	adc    edx,ebx
c001c7e6:	89 04 24             	mov    DWORD PTR [esp],eax
c001c7e9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c7ed:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001c7f0:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001c7f3:	89 d8                	mov    eax,ebx
c001c7f5:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c001c7f9:	ba 00 00 00 00       	mov    edx,0x0
c001c7fe:	19 f8                	sbb    eax,edi
c001c800:	b8 00 00 00 00       	mov    eax,0x0
c001c805:	73 08                	jae    c001c80f <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c001c807:	89 f0                	mov    eax,esi
c001c809:	89 fa                	mov    edx,edi
c001c80b:	29 c8                	sub    eax,ecx
c001c80d:	19 da                	sbb    edx,ebx
c001c80f:	89 d7                	mov    edi,edx
c001c811:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001c814:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001c817:	09 c7                	or     edi,eax
c001c819:	0f 84 5e ff ff ff    	je     c001c77d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001c81f:	57                   	push   edi
c001c820:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c824:	50                   	push   eax
c001c825:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001c82c:	53                   	push   ebx
c001c82d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c830:	c1 e0 0b             	shl    eax,0xb
c001c833:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001c837:	c1 e8 0b             	shr    eax,0xb
c001c83a:	50                   	push   eax
c001c83b:	e8 2f fc ff ff       	call   c001c46f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c840:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c843:	83 c4 10             	add    esp,0x10
c001c846:	25 ff 07 00 00       	and    eax,0x7ff
c001c84b:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001c84e:	31 ff                	xor    edi,edi
c001c850:	56                   	push   esi
c001c851:	6a 28                	push   0x28
c001c853:	6a 00                	push   0x0
c001c855:	8d 44 24 24          	lea    eax,[esp+0x24]
c001c859:	50                   	push   eax
c001c85a:	e8 1d 3e fe ff       	call   c000067c <memset>
c001c85f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c862:	25 ff 07 00 00       	and    eax,0x7ff
c001c867:	89 c6                	mov    esi,eax
c001c869:	83 c6 21             	add    esi,0x21
c001c86c:	83 d7 00             	adc    edi,0x0
c001c86f:	83 c4 10             	add    esp,0x10
c001c872:	31 c9                	xor    ecx,ecx
c001c874:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c001c87b:	83 f9 28             	cmp    ecx,0x28
c001c87e:	88 04 24             	mov    BYTE PTR [esp],al
c001c881:	0f 94 c2             	sete   dl
c001c884:	88 d0                	mov    al,dl
c001c886:	ba ff 07 00 00       	mov    edx,0x7ff
c001c88b:	39 f2                	cmp    edx,esi
c001c88d:	ba 00 00 00 00       	mov    edx,0x0
c001c892:	19 fa                	sbb    edx,edi
c001c894:	0f 92 c2             	setb   dl
c001c897:	09 c2                	or     edx,eax
c001c899:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001c89d:	0f 94 c0             	sete   al
c001c8a0:	08 d0                	or     al,dl
c001c8a2:	75 16                	jne    c001c8ba <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001c8a4:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001c8a8:	74 10                	je     c001c8ba <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001c8aa:	8a 04 24             	mov    al,BYTE PTR [esp]
c001c8ad:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001c8b1:	41                   	inc    ecx
c001c8b2:	83 c6 01             	add    esi,0x1
c001c8b5:	83 d7 00             	adc    edi,0x0
c001c8b8:	eb ba                	jmp    c001c874 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c001c8ba:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001c8c1:	83 ec 0c             	sub    esp,0xc
c001c8c4:	8d 74 24 24          	lea    esi,[esp+0x24]
c001c8c8:	56                   	push   esi
c001c8c9:	e8 ca 3d fe ff       	call   c0000698 <strlen>
c001c8ce:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c001c8d5:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001c8d9:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001c8e1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c8e4:	5a                   	pop    edx
c001c8e5:	25 ff 07 00 00       	and    eax,0x7ff
c001c8ea:	59                   	pop    ecx
c001c8eb:	01 f8                	add    eax,edi
c001c8ed:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001c8f3:	83 e0 02             	and    eax,0x2
c001c8f6:	3c 01                	cmp    al,0x1
c001c8f8:	19 c0                	sbb    eax,eax
c001c8fa:	83 c0 02             	add    eax,0x2
c001c8fd:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001c901:	56                   	push   esi
c001c902:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001c906:	50                   	push   eax
c001c907:	e8 2c 3e fe ff       	call   c0000738 <strcpy>
c001c90c:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001c910:	83 c4 10             	add    esp,0x10
c001c913:	84 c0                	test   al,al
c001c915:	75 21                	jne    c001c938 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c001c917:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001c91f:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c927:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001c92f:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001c936:	eb 28                	jmp    c001c960 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001c938:	fe c8                	dec    al
c001c93a:	75 24                	jne    c001c960 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001c93c:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001c944:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c94c:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001c954:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001c95b:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001c960:	8d 74 24 40          	lea    esi,[esp+0x40]
c001c964:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c001c96b:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c001c972:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c974:	0f b6 f3             	movzx  esi,bl
c001c977:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c001c97e:	31 db                	xor    ebx,ebx
c001c980:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001c986:	89 df                	mov    edi,ebx
c001c988:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c001c98b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c98e:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c001c991:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001c994:	39 c6                	cmp    esi,eax
c001c996:	19 d7                	sbb    edi,edx
c001c998:	72 10                	jb     c001c9aa <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c001c99a:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c001c9a1:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c001c9a8:	eb 0a                	jmp    c001c9b4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c001c9aa:	29 f0                	sub    eax,esi
c001c9ac:	19 da                	sbb    edx,ebx
c001c9ae:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001c9b1:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001c9b4:	31 c0                	xor    eax,eax
c001c9b6:	eb 05                	jmp    c001c9bd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001c9b8:	b8 04 00 00 00       	mov    eax,0x4
c001c9bd:	81 c4 5c 09 00 00    	add    esp,0x95c
c001c9c3:	5b                   	pop    ebx
c001c9c4:	5e                   	pop    esi
c001c9c5:	5f                   	pop    edi
c001c9c6:	5d                   	pop    ebp
c001c9c7:	c3                   	ret    

c001c9c8 <readRoot(unsigned int*, unsigned int*, char)>:
c001c9c8:	57                   	push   edi
c001c9c9:	56                   	push   esi
c001c9ca:	81 ec 38 08 00 00    	sub    esp,0x838
c001c9d0:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001c9d8:	50                   	push   eax
c001c9d9:	8d 44 24 38          	lea    eax,[esp+0x38]
c001c9dd:	50                   	push   eax
c001c9de:	6a 10                	push   0x10
c001c9e0:	e8 8a fa ff ff       	call   c001c46f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c9e5:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c001c9ec:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c001c9f0:	b9 22 00 00 00       	mov    ecx,0x22
c001c9f5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c9f7:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001c9fe:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ca02:	89 10                	mov    DWORD PTR [eax],edx
c001ca04:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001ca0b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ca0f:	89 10                	mov    DWORD PTR [eax],edx
c001ca11:	81 c4 44 08 00 00    	add    esp,0x844
c001ca17:	b0 01                	mov    al,0x1
c001ca19:	5e                   	pop    esi
c001ca1a:	5f                   	pop    edi
c001ca1b:	c3                   	ret    

c001ca1c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001ca1c:	55                   	push   ebp
c001ca1d:	57                   	push   edi
c001ca1e:	56                   	push   esi
c001ca1f:	53                   	push   ebx
c001ca20:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ca26:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001ca2d:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001ca34:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ca38:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001ca3c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001ca40:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ca44:	75 03                	jne    c001ca49 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001ca46:	83 c3 02             	add    ebx,0x2
c001ca49:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001ca4c:	75 03                	jne    c001ca51 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001ca4e:	43                   	inc    ebx
c001ca4f:	eb f8                	jmp    c001ca49 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001ca51:	52                   	push   edx
c001ca52:	68 00 01 00 00       	push   0x100
c001ca57:	6a 00                	push   0x0
c001ca59:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ca5d:	50                   	push   eax
c001ca5e:	e8 19 3c fe ff       	call   c000067c <memset>
c001ca63:	83 c4 10             	add    esp,0x10
c001ca66:	31 d2                	xor    edx,edx
c001ca68:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001ca6b:	84 c0                	test   al,al
c001ca6d:	74 21                	je     c001ca90 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001ca6f:	3c 2f                	cmp    al,0x2f
c001ca71:	75 0b                	jne    c001ca7e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001ca73:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001ca77:	bd 01 00 00 00       	mov    ebp,0x1
c001ca7c:	eb 14                	jmp    c001ca92 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001ca7e:	8d 48 9f             	lea    ecx,[eax-0x61]
c001ca81:	80 f9 19             	cmp    cl,0x19
c001ca84:	77 03                	ja     c001ca89 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001ca86:	83 e8 20             	sub    eax,0x20
c001ca89:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001ca8d:	42                   	inc    edx
c001ca8e:	eb d8                	jmp    c001ca68 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001ca90:	31 ed                	xor    ebp,ebp
c001ca92:	83 ec 0c             	sub    esp,0xc
c001ca95:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001ca9c:	e8 16 d2 fe ff       	call   c0009cb7 <malloc>
c001caa1:	89 c6                	mov    esi,eax
c001caa3:	89 c2                	mov    edx,eax
c001caa5:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c001caac:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001cab2:	c1 ef 0b             	shr    edi,0xb
c001cab5:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001cabc:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001cac0:	83 c4 10             	add    esp,0x10
c001cac3:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001cac8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cacc:	3b 84 24 34 01 00 00 	cmp    eax,DWORD PTR [esp+0x134]
c001cad3:	74 29                	je     c001cafe <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xe2>
c001cad5:	50                   	push   eax
c001cad6:	57                   	push   edi
c001cad7:	52                   	push   edx
c001cad8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001cadc:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001cae3:	e8 87 f9 ff ff       	call   c001c46f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001cae8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001caec:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001caf3:	81 c2 00 08 00 00    	add    edx,0x800
c001caf9:	83 c4 10             	add    esp,0x10
c001cafc:	eb ca                	jmp    c001cac8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xac>
c001cafe:	83 ec 0c             	sub    esp,0xc
c001cb01:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001cb05:	57                   	push   edi
c001cb06:	e8 8d 3b fe ff       	call   c0000698 <strlen>
c001cb0b:	50                   	push   eax
c001cb0c:	57                   	push   edi
c001cb0d:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001cb14:	56                   	push   esi
c001cb15:	e8 13 f9 ff ff       	call   c001c42d <__memmem(unsigned char*, int, unsigned char*, int)>
c001cb1a:	83 c4 20             	add    esp,0x20
c001cb1d:	85 c0                	test   eax,eax
c001cb1f:	75 13                	jne    c001cb34 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x118>
c001cb21:	83 ec 0c             	sub    esp,0xc
c001cb24:	56                   	push   esi
c001cb25:	e8 9d d1 fe ff       	call   c0009cc7 <free>
c001cb2a:	83 c4 10             	add    esp,0x10
c001cb2d:	31 c0                	xor    eax,eax
c001cb2f:	e9 b3 00 00 00       	jmp    c001cbe7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1cb>
c001cb34:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001cb38:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001cb3c:	c1 e7 08             	shl    edi,0x8
c001cb3f:	c1 e2 10             	shl    edx,0x10
c001cb42:	09 d7                	or     edi,edx
c001cb44:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001cb48:	09 d7                	or     edi,edx
c001cb4a:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001cb4e:	c1 e2 18             	shl    edx,0x18
c001cb51:	09 d7                	or     edi,edx
c001cb53:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001cb57:	89 d1                	mov    ecx,edx
c001cb59:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001cb5d:	c1 e1 08             	shl    ecx,0x8
c001cb60:	c1 e2 10             	shl    edx,0x10
c001cb63:	09 ca                	or     edx,ecx
c001cb65:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001cb69:	09 ca                	or     edx,ecx
c001cb6b:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001cb6f:	c1 e1 18             	shl    ecx,0x18
c001cb72:	09 ca                	or     edx,ecx
c001cb74:	89 e9                	mov    ecx,ebp
c001cb76:	84 c9                	test   cl,cl
c001cb78:	74 3c                	je     c001cbb6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x19a>
c001cb7a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001cb7e:	83 ec 0c             	sub    esp,0xc
c001cb81:	56                   	push   esi
c001cb82:	e8 40 d1 fe ff       	call   c0009cc7 <free>
c001cb87:	83 c4 0c             	add    esp,0xc
c001cb8a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001cb91:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001cb96:	50                   	push   eax
c001cb97:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001cb9e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001cba5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cba9:	52                   	push   edx
c001cbaa:	57                   	push   edi
c001cbab:	53                   	push   ebx
c001cbac:	e8 6b fe ff ff       	call   c001ca1c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001cbb1:	83 c4 20             	add    esp,0x20
c001cbb4:	eb 31                	jmp    c001cbe7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1cb>
c001cbb6:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001cbb9:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001cbc0:	d0 e8                	shr    al,1
c001cbc2:	89 3b                	mov    DWORD PTR [ebx],edi
c001cbc4:	83 e0 01             	and    eax,0x1
c001cbc7:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001cbce:	83 ec 0c             	sub    esp,0xc
c001cbd1:	89 13                	mov    DWORD PTR [ebx],edx
c001cbd3:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001cbda:	89 03                	mov    DWORD PTR [ebx],eax
c001cbdc:	56                   	push   esi
c001cbdd:	e8 e5 d0 fe ff       	call   c0009cc7 <free>
c001cbe2:	83 c4 10             	add    esp,0x10
c001cbe5:	b0 01                	mov    al,0x1
c001cbe7:	81 c4 1c 01 00 00    	add    esp,0x11c
c001cbed:	5b                   	pop    ebx
c001cbee:	5e                   	pop    esi
c001cbef:	5f                   	pop    edi
c001cbf0:	5d                   	pop    ebp
c001cbf1:	c3                   	ret    

c001cbf2 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001cbf2:	55                   	push   ebp
c001cbf3:	57                   	push   edi
c001cbf4:	56                   	push   esi
c001cbf5:	53                   	push   ebx
c001cbf6:	83 ec 20             	sub    esp,0x20
c001cbf9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001cbfd:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001cc01:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001cc05:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001cc0d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001cc15:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001cc1a:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001cc20:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001cc26:	57                   	push   edi
c001cc27:	8d 44 24 14          	lea    eax,[esp+0x14]
c001cc2b:	50                   	push   eax
c001cc2c:	8d 44 24 14          	lea    eax,[esp+0x14]
c001cc30:	50                   	push   eax
c001cc31:	e8 92 fd ff ff       	call   c001c9c8 <readRoot(unsigned int*, unsigned int*, char)>
c001cc36:	5a                   	pop    edx
c001cc37:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cc3b:	e8 58 3a fe ff       	call   c0000698 <strlen>
c001cc40:	83 c4 10             	add    esp,0x10
c001cc43:	83 f8 03             	cmp    eax,0x3
c001cc46:	77 17                	ja     c001cc5f <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001cc48:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cc4c:	89 03                	mov    DWORD PTR [ebx],eax
c001cc4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc52:	89 06                	mov    DWORD PTR [esi],eax
c001cc54:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001cc5b:	b0 01                	mov    al,0x1
c001cc5d:	eb 19                	jmp    c001cc78 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001cc5f:	50                   	push   eax
c001cc60:	55                   	push   ebp
c001cc61:	57                   	push   edi
c001cc62:	56                   	push   esi
c001cc63:	53                   	push   ebx
c001cc64:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cc68:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cc6c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001cc70:	e8 a7 fd ff ff       	call   c001ca1c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001cc75:	83 c4 20             	add    esp,0x20
c001cc78:	83 c4 1c             	add    esp,0x1c
c001cc7b:	5b                   	pop    ebx
c001cc7c:	5e                   	pop    esi
c001cc7d:	5f                   	pop    edi
c001cc7e:	5d                   	pop    ebp
c001cc7f:	c3                   	ret    

c001cc80 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001cc80:	57                   	push   edi
c001cc81:	56                   	push   esi
c001cc82:	53                   	push   ebx
c001cc83:	83 ec 10             	sub    esp,0x10
c001cc86:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001cc8a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001cc8e:	85 ff                	test   edi,edi
c001cc90:	0f 84 8b 00 00 00    	je     c001cd21 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001cc96:	85 f6                	test   esi,esi
c001cc98:	0f 84 83 00 00 00    	je     c001cd21 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001cc9e:	b8 03 00 00 00       	mov    eax,0x3
c001cca3:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c001cca8:	75 7c                	jne    c001cd26 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001ccaa:	83 ec 0c             	sub    esp,0xc
c001ccad:	6a 1c                	push   0x1c
c001ccaf:	e8 03 d0 fe ff       	call   c0009cb7 <malloc>
c001ccb4:	89 07                	mov    DWORD PTR [edi],eax
c001ccb6:	89 c3                	mov    ebx,eax
c001ccb8:	58                   	pop    eax
c001ccb9:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ccbd:	50                   	push   eax
c001ccbe:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001ccc1:	50                   	push   eax
c001ccc2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ccc6:	50                   	push   eax
c001ccc7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cccb:	50                   	push   eax
c001cccc:	56                   	push   esi
c001cccd:	e8 20 ff ff ff       	call   c001cbf2 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001ccd2:	83 c4 20             	add    esp,0x20
c001ccd5:	84 c0                	test   al,al
c001ccd7:	74 07                	je     c001cce0 <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c001ccd9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ccde:	74 0b                	je     c001cceb <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c001cce0:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001cce4:	b8 01 00 00 00       	mov    eax,0x1
c001cce9:	eb 3b                	jmp    c001cd26 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001cceb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ccef:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001ccf3:	89 03                	mov    DWORD PTR [ebx],eax
c001ccf5:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001ccfc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cd00:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001cd07:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001cd0e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001cd11:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001cd18:	8a 06                	mov    al,BYTE PTR [esi]
c001cd1a:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001cd1d:	31 c0                	xor    eax,eax
c001cd1f:	eb 05                	jmp    c001cd26 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001cd21:	b8 04 00 00 00       	mov    eax,0x4
c001cd26:	83 c4 10             	add    esp,0x10
c001cd29:	5b                   	pop    ebx
c001cd2a:	5e                   	pop    esi
c001cd2b:	5f                   	pop    edi
c001cd2c:	c3                   	ret    
c001cd2d:	90                   	nop

c001cd2e <ISO9660::exists(char const*)>:
c001cd2e:	83 ec 28             	sub    esp,0x28
c001cd31:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cd35:	8d 54 24 18          	lea    edx,[esp+0x18]
c001cd39:	52                   	push   edx
c001cd3a:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001cd3d:	52                   	push   edx
c001cd3e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001cd42:	52                   	push   edx
c001cd43:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001cd47:	52                   	push   edx
c001cd48:	50                   	push   eax
c001cd49:	e8 a4 fe ff ff       	call   c001cbf2 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001cd4e:	83 c4 3c             	add    esp,0x3c
c001cd51:	c3                   	ret    

c001cd52 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001cd52:	56                   	push   esi
c001cd53:	53                   	push   ebx
c001cd54:	83 ec 14             	sub    esp,0x14
c001cd57:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001cd5b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001cd5f:	85 db                	test   ebx,ebx
c001cd61:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001cd65:	0f 94 c2             	sete   dl
c001cd68:	85 f6                	test   esi,esi
c001cd6a:	0f 94 c0             	sete   al
c001cd6d:	08 c2                	or     dl,al
c001cd6f:	75 68                	jne    c001cdd9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001cd71:	85 c9                	test   ecx,ecx
c001cd73:	74 64                	je     c001cdd9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001cd75:	83 ec 0c             	sub    esp,0xc
c001cd78:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001cd7b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001cd7f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001cd85:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001cd8c:	50                   	push   eax
c001cd8d:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001cd90:	50                   	push   eax
c001cd91:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cd95:	50                   	push   eax
c001cd96:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cd9a:	50                   	push   eax
c001cd9b:	51                   	push   ecx
c001cd9c:	e8 51 fe ff ff       	call   c001cbf2 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001cda1:	83 c4 20             	add    esp,0x20
c001cda4:	ba 01 00 00 00       	mov    edx,0x1
c001cda9:	84 c0                	test   al,al
c001cdab:	74 31                	je     c001cdde <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001cdad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cdb1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001cdb8:	89 03                	mov    DWORD PTR [ebx],eax
c001cdba:	ba 00 00 00 00       	mov    edx,0x0
c001cdbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cdc3:	85 c0                	test   eax,eax
c001cdc5:	0f 95 06             	setne  BYTE PTR [esi]
c001cdc8:	74 14                	je     c001cdde <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001cdca:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001cdd0:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001cdd7:	eb 05                	jmp    c001cdde <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001cdd9:	ba 04 00 00 00       	mov    edx,0x4
c001cdde:	83 c4 14             	add    esp,0x14
c001cde1:	89 d0                	mov    eax,edx
c001cde3:	5b                   	pop    ebx
c001cde4:	5e                   	pop    esi
c001cde5:	c3                   	ret    

c001cde6 <ISO9660::openDir(char const*, void**)>:
c001cde6:	57                   	push   edi
c001cde7:	56                   	push   esi
c001cde8:	53                   	push   ebx
c001cde9:	83 ec 10             	sub    esp,0x10
c001cdec:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001cdf0:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001cdf4:	85 ff                	test   edi,edi
c001cdf6:	74 7b                	je     c001ce73 <ISO9660::openDir(char const*, void**)+0x8d>
c001cdf8:	85 f6                	test   esi,esi
c001cdfa:	74 77                	je     c001ce73 <ISO9660::openDir(char const*, void**)+0x8d>
c001cdfc:	83 ec 0c             	sub    esp,0xc
c001cdff:	6a 1c                	push   0x1c
c001ce01:	e8 b1 ce fe ff       	call   c0009cb7 <malloc>
c001ce06:	89 07                	mov    DWORD PTR [edi],eax
c001ce08:	89 c3                	mov    ebx,eax
c001ce0a:	58                   	pop    eax
c001ce0b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ce0f:	50                   	push   eax
c001ce10:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001ce13:	50                   	push   eax
c001ce14:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ce18:	50                   	push   eax
c001ce19:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ce1d:	50                   	push   eax
c001ce1e:	56                   	push   esi
c001ce1f:	e8 ce fd ff ff       	call   c001cbf2 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001ce24:	83 c4 20             	add    esp,0x20
c001ce27:	84 c0                	test   al,al
c001ce29:	74 07                	je     c001ce32 <ISO9660::openDir(char const*, void**)+0x4c>
c001ce2b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ce30:	75 0b                	jne    c001ce3d <ISO9660::openDir(char const*, void**)+0x57>
c001ce32:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001ce36:	b8 01 00 00 00       	mov    eax,0x1
c001ce3b:	eb 3b                	jmp    c001ce78 <ISO9660::openDir(char const*, void**)+0x92>
c001ce3d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce41:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001ce45:	89 03                	mov    DWORD PTR [ebx],eax
c001ce47:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001ce4e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ce52:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001ce59:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ce60:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001ce63:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001ce6a:	8a 06                	mov    al,BYTE PTR [esi]
c001ce6c:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001ce6f:	31 c0                	xor    eax,eax
c001ce71:	eb 05                	jmp    c001ce78 <ISO9660::openDir(char const*, void**)+0x92>
c001ce73:	b8 04 00 00 00       	mov    eax,0x4
c001ce78:	83 c4 10             	add    esp,0x10
c001ce7b:	5b                   	pop    ebx
c001ce7c:	5e                   	pop    esi
c001ce7d:	5f                   	pop    edi
c001ce7e:	c3                   	ret    
c001ce7f:	90                   	nop

c001ce80 <ISO9660::ISO9660()>:
c001ce80:	83 ec 0c             	sub    esp,0xc
c001ce83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce87:	83 ec 0c             	sub    esp,0xc
c001ce8a:	50                   	push   eax
c001ce8b:	e8 4c 04 ff ff       	call   c000d2dc <Filesystem::Filesystem()>
c001ce90:	83 c4 10             	add    esp,0x10
c001ce93:	ba a0 63 02 c0       	mov    edx,0xc00263a0
c001ce98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce9c:	89 10                	mov    DWORD PTR [eax],edx
c001ce9e:	90                   	nop
c001ce9f:	83 c4 0c             	add    esp,0xc
c001cea2:	c3                   	ret    
c001cea3:	90                   	nop

c001cea4 <SoundCard::beginPlayback()>:
c001cea4:	c7 44 24 04 00 64 02 c0 	mov    DWORD PTR [esp+0x4],0xc0026400
c001ceac:	e9 6c 7e ff ff       	jmp    c0014d1d <Krnl::panic(char const*)>
c001ceb1:	90                   	nop

c001ceb2 <SoundCard::stopPlayback()>:
c001ceb2:	c7 44 24 04 34 64 02 c0 	mov    DWORD PTR [esp+0x4],0xc0026434
c001ceba:	e9 5e 7e ff ff       	jmp    c0014d1d <Krnl::panic(char const*)>
c001cebf:	90                   	nop

c001cec0 <SoundCard::SoundCard(char const*)>:
c001cec0:	83 ec 1c             	sub    esp,0x1c
c001cec3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cec7:	83 ec 08             	sub    esp,0x8
c001ceca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cece:	50                   	push   eax
c001cecf:	e8 a6 17 ff ff       	call   c000e67a <Device::Device(char const*)>
c001ced4:	83 c4 10             	add    esp,0x10
c001ced7:	ba cc 64 02 c0       	mov    edx,0xc00264cc
c001cedc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cee0:	89 10                	mov    DWORD PTR [eax],edx
c001cee2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cee6:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001ceed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cef1:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001cefb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ceff:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001cf09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf0d:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001cf17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf1b:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001cf25:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001cf2d:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001cf32:	7f 19                	jg     c001cf4d <SoundCard::SoundCard(char const*)+0x8d>
c001cf34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf38:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cf3c:	83 c2 54             	add    edx,0x54
c001cf3f:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001cf47:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001cf4b:	eb e0                	jmp    c001cf2d <SoundCard::SoundCard(char const*)+0x6d>
c001cf4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf51:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001cf58:	90                   	nop
c001cf59:	83 c4 1c             	add    esp,0x1c
c001cf5c:	c3                   	ret    
c001cf5d:	90                   	nop

c001cf5e <SoundCard::~SoundCard()>:
c001cf5e:	83 ec 0c             	sub    esp,0xc
c001cf61:	ba cc 64 02 c0       	mov    edx,0xc00264cc
c001cf66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf6a:	89 10                	mov    DWORD PTR [eax],edx
c001cf6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf70:	83 ec 0c             	sub    esp,0xc
c001cf73:	50                   	push   eax
c001cf74:	e8 cb 13 ff ff       	call   c000e344 <Device::~Device()>
c001cf79:	83 c4 10             	add    esp,0x10
c001cf7c:	90                   	nop
c001cf7d:	83 c4 0c             	add    esp,0xc
c001cf80:	c3                   	ret    
c001cf81:	90                   	nop

c001cf82 <SoundCard::~SoundCard()>:
c001cf82:	83 ec 0c             	sub    esp,0xc
c001cf85:	83 ec 0c             	sub    esp,0xc
c001cf88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf8c:	e8 cd ff ff ff       	call   c001cf5e <SoundCard::~SoundCard()>
c001cf91:	83 c4 10             	add    esp,0x10
c001cf94:	83 ec 08             	sub    esp,0x8
c001cf97:	68 e8 01 00 00       	push   0x1e8
c001cf9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cfa0:	e8 3f ff fe ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c001cfa5:	83 c4 10             	add    esp,0x10
c001cfa8:	83 c4 0c             	add    esp,0xc
c001cfab:	c3                   	ret    

c001cfac <SoundCard::configureRates(int, int, int)>:
c001cfac:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cfb0:	31 c0                	xor    eax,eax
c001cfb2:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001cfb9:	75 20                	jne    c001cfdb <SoundCard::configureRates(int, int, int)+0x2f>
c001cfbb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cfbf:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001cfc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cfc9:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001cfcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfd3:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001cfd9:	b0 01                	mov    al,0x1
c001cfdb:	c3                   	ret    

c001cfdc <SoundCard::getSamples16(int, short*)>:
c001cfdc:	55                   	push   ebp
c001cfdd:	57                   	push   edi
c001cfde:	31 ff                	xor    edi,edi
c001cfe0:	56                   	push   esi
c001cfe1:	53                   	push   ebx
c001cfe2:	31 db                	xor    ebx,ebx
c001cfe4:	83 ec 18             	sub    esp,0x18
c001cfe7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001cfeb:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001cfef:	68 67 64 02 c0       	push   0xc0026467
c001cff4:	e8 cc ff fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001cff9:	83 c4 0c             	add    esp,0xc
c001cffc:	8d 04 36             	lea    eax,[esi+esi*1]
c001cfff:	50                   	push   eax
c001d000:	6a 00                	push   0x0
c001d002:	55                   	push   ebp
c001d003:	e8 74 36 fe ff       	call   c000067c <memset>
c001d008:	83 c4 10             	add    esp,0x10
c001d00b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d00f:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001d016:	85 c0                	test   eax,eax
c001d018:	74 1b                	je     c001d035 <SoundCard::getSamples16(int, short*)+0x59>
c001d01a:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001d01e:	75 15                	jne    c001d035 <SoundCard::getSamples16(int, short*)+0x59>
c001d020:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d024:	55                   	push   ebp
c001d025:	56                   	push   esi
c001d026:	50                   	push   eax
c001d027:	e8 58 03 00 00       	call   c001d384 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001d02c:	83 c4 10             	add    esp,0x10
c001d02f:	39 c7                	cmp    edi,eax
c001d031:	7d 02                	jge    c001d035 <SoundCard::getSamples16(int, short*)+0x59>
c001d033:	89 c7                	mov    edi,eax
c001d035:	43                   	inc    ebx
c001d036:	83 fb 20             	cmp    ebx,0x20
c001d039:	75 d0                	jne    c001d00b <SoundCard::getSamples16(int, short*)+0x2f>
c001d03b:	83 c4 0c             	add    esp,0xc
c001d03e:	89 f8                	mov    eax,edi
c001d040:	5b                   	pop    ebx
c001d041:	5e                   	pop    esi
c001d042:	5f                   	pop    edi
c001d043:	5d                   	pop    ebp
c001d044:	c3                   	ret    
c001d045:	90                   	nop

c001d046 <SoundCard::getSamples32(int, int*)>:
c001d046:	55                   	push   ebp
c001d047:	57                   	push   edi
c001d048:	31 ff                	xor    edi,edi
c001d04a:	56                   	push   esi
c001d04b:	31 f6                	xor    esi,esi
c001d04d:	53                   	push   ebx
c001d04e:	83 ec 10             	sub    esp,0x10
c001d051:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d055:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d059:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001d05d:	c1 e0 02             	shl    eax,0x2
c001d060:	50                   	push   eax
c001d061:	6a 00                	push   0x0
c001d063:	55                   	push   ebp
c001d064:	e8 13 36 fe ff       	call   c000067c <memset>
c001d069:	83 c4 10             	add    esp,0x10
c001d06c:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001d073:	85 c0                	test   eax,eax
c001d075:	74 1b                	je     c001d092 <SoundCard::getSamples32(int, int*)+0x4c>
c001d077:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001d07b:	75 15                	jne    c001d092 <SoundCard::getSamples32(int, int*)+0x4c>
c001d07d:	53                   	push   ebx
c001d07e:	55                   	push   ebp
c001d07f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d083:	50                   	push   eax
c001d084:	e8 f7 03 00 00       	call   c001d480 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001d089:	83 c4 10             	add    esp,0x10
c001d08c:	39 c6                	cmp    esi,eax
c001d08e:	7d 02                	jge    c001d092 <SoundCard::getSamples32(int, int*)+0x4c>
c001d090:	89 c6                	mov    esi,eax
c001d092:	47                   	inc    edi
c001d093:	83 ff 20             	cmp    edi,0x20
c001d096:	75 d4                	jne    c001d06c <SoundCard::getSamples32(int, int*)+0x26>
c001d098:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c001d09e:	85 f6                	test   esi,esi
c001d0a0:	75 0f                	jne    c001d0b1 <SoundCard::getSamples32(int, int*)+0x6b>
c001d0a2:	84 c0                	test   al,al
c001d0a4:	74 1b                	je     c001d0c1 <SoundCard::getSamples32(int, int*)+0x7b>
c001d0a6:	83 ec 0c             	sub    esp,0xc
c001d0a9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d0ab:	53                   	push   ebx
c001d0ac:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001d0af:	eb 0d                	jmp    c001d0be <SoundCard::getSamples32(int, int*)+0x78>
c001d0b1:	84 c0                	test   al,al
c001d0b3:	75 0c                	jne    c001d0c1 <SoundCard::getSamples32(int, int*)+0x7b>
c001d0b5:	83 ec 0c             	sub    esp,0xc
c001d0b8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d0ba:	53                   	push   ebx
c001d0bb:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d0be:	83 c4 10             	add    esp,0x10
c001d0c1:	83 c4 0c             	add    esp,0xc
c001d0c4:	89 f0                	mov    eax,esi
c001d0c6:	5b                   	pop    ebx
c001d0c7:	5e                   	pop    esi
c001d0c8:	5f                   	pop    edi
c001d0c9:	5d                   	pop    ebp
c001d0ca:	c3                   	ret    
c001d0cb:	90                   	nop

c001d0cc <SoundCard::addChannel(SoundPort*)>:
c001d0cc:	56                   	push   esi
c001d0cd:	53                   	push   ebx
c001d0ce:	53                   	push   ebx
c001d0cf:	31 db                	xor    ebx,ebx
c001d0d1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d0d5:	83 bc 9e 58 01 00 00 00 	cmp    DWORD PTR [esi+ebx*4+0x158],0x0
c001d0dd:	74 27                	je     c001d106 <SoundCard::addChannel(SoundPort*)+0x3a>
c001d0df:	43                   	inc    ebx
c001d0e0:	83 fb 20             	cmp    ebx,0x20
c001d0e3:	75 f0                	jne    c001d0d5 <SoundCard::addChannel(SoundPort*)+0x9>
c001d0e5:	83 ec 0c             	sub    esp,0xc
c001d0e8:	83 cb ff             	or     ebx,0xffffffff
c001d0eb:	68 8d 64 02 c0       	push   0xc002648d
c001d0f0:	e8 d0 fe fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001d0f5:	c7 04 24 86 64 02 c0 	mov    DWORD PTR [esp],0xc0026486
c001d0fc:	e8 1c 7c ff ff       	call   c0014d1d <Krnl::panic(char const*)>
c001d101:	83 c4 10             	add    esp,0x10
c001d104:	eb 1b                	jmp    c001d121 <SoundCard::addChannel(SoundPort*)+0x55>
c001d106:	51                   	push   ecx
c001d107:	51                   	push   ecx
c001d108:	53                   	push   ebx
c001d109:	68 a5 64 02 c0       	push   0xc00264a5
c001d10e:	e8 b2 fe fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001d113:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d117:	83 c4 10             	add    esp,0x10
c001d11a:	89 84 9e 58 01 00 00 	mov    DWORD PTR [esi+ebx*4+0x158],eax
c001d121:	89 d8                	mov    eax,ebx
c001d123:	5a                   	pop    edx
c001d124:	5b                   	pop    ebx
c001d125:	5e                   	pop    esi
c001d126:	c3                   	ret    
c001d127:	90                   	nop

c001d128 <SoundCard::removeChannel(int)>:
c001d128:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d12c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d130:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001d13b:	c3                   	ret    

c001d13c <SoundPort::SoundPort(int, int, int, int)>:
c001d13c:	83 ec 0c             	sub    esp,0xc
c001d13f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d143:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d14a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d14e:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001d152:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d156:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d15a:	89 10                	mov    DWORD PTR [eax],edx
c001d15c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d160:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d164:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001d167:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d16b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d16f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d172:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001d177:	75 13                	jne    c001d18c <SoundPort::SoundPort(int, int, int, int)+0x50>
c001d179:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d17d:	8b 00                	mov    eax,DWORD PTR [eax]
c001d17f:	05 a0 0f 00 00       	add    eax,0xfa0
c001d184:	01 c0                	add    eax,eax
c001d186:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d18a:	66 90                	xchg   ax,ax
c001d18c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d190:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d194:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001d197:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d19b:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001d1a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1a6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d1a9:	c1 e0 02             	shl    eax,0x2
c001d1ac:	83 ec 0c             	sub    esp,0xc
c001d1af:	50                   	push   eax
c001d1b0:	e8 02 cb fe ff       	call   c0009cb7 <malloc>
c001d1b5:	83 c4 10             	add    esp,0x10
c001d1b8:	89 c2                	mov    edx,eax
c001d1ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1be:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d1c1:	90                   	nop
c001d1c2:	83 c4 0c             	add    esp,0xc
c001d1c5:	c3                   	ret    
c001d1c6:	66 90                	xchg   ax,ax

c001d1c8 <SoundPort::~SoundPort()>:
c001d1c8:	83 ec 0c             	sub    esp,0xc
c001d1cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1cf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d1d2:	85 c0                	test   eax,eax
c001d1d4:	74 1e                	je     c001d1f4 <SoundPort::~SoundPort()+0x2c>
c001d1d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1da:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d1dd:	83 ec 0c             	sub    esp,0xc
c001d1e0:	50                   	push   eax
c001d1e1:	e8 e1 ca fe ff       	call   c0009cc7 <free>
c001d1e6:	83 c4 10             	add    esp,0x10
c001d1e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1ed:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d1f4:	90                   	nop
c001d1f5:	83 c4 0c             	add    esp,0xc
c001d1f8:	c3                   	ret    
c001d1f9:	90                   	nop
c001d1fa:	66 90                	xchg   ax,ax

c001d1fc <SoundPort::unpause()>:
c001d1fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d200:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001d204:	c3                   	ret    
c001d205:	90                   	nop
c001d206:	66 90                	xchg   ax,ax

c001d208 <SoundPort::pause()>:
c001d208:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d20c:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001d210:	c3                   	ret    
c001d211:	90                   	nop
c001d212:	66 90                	xchg   ax,ax

c001d214 <SoundPort::getBufferUsed()>:
c001d214:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d218:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001d21b:	c3                   	ret    

c001d21c <SoundPort::getBufferSize()>:
c001d21c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d220:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d223:	c3                   	ret    

c001d224 <SoundPort::buffer16(short*, int)>:
c001d224:	55                   	push   ebp
c001d225:	57                   	push   edi
c001d226:	56                   	push   esi
c001d227:	53                   	push   ebx
c001d228:	83 ec 1c             	sub    esp,0x1c
c001d22b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d22f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d233:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001d236:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001d239:	0f 84 85 00 00 00    	je     c001d2c4 <SoundPort::buffer16(short*, int)+0xa0>
c001d23f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001d243:	85 c9                	test   ecx,ecx
c001d245:	7e 7d                	jle    c001d2c4 <SoundPort::buffer16(short*, int)+0xa0>
c001d247:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001d24b:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d24e:	c1 e1 0f             	shl    ecx,0xf
c001d251:	8d 70 01             	lea    esi,[eax+0x1]
c001d254:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001d257:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001d25a:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d25d:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d260:	74 6e                	je     c001d2d0 <SoundPort::buffer16(short*, int)+0xac>
c001d262:	31 f6                	xor    esi,esi
c001d264:	eb 22                	jmp    c001d288 <SoundPort::buffer16(short*, int)+0x64>
c001d266:	66 90                	xchg   ax,ax
c001d268:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001d26d:	8d 79 01             	lea    edi,[ecx+0x1]
c001d270:	c1 e3 0f             	shl    ebx,0xf
c001d273:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001d276:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001d279:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001d27c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d27f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d282:	74 1c                	je     c001d2a0 <SoundPort::buffer16(short*, int)+0x7c>
c001d284:	89 c6                	mov    esi,eax
c001d286:	66 90                	xchg   ax,ax
c001d288:	8d 46 01             	lea    eax,[esi+0x1]
c001d28b:	39 44 24 38          	cmp    DWORD PTR [esp+0x38],eax
c001d28f:	75 d7                	jne    c001d268 <SoundPort::buffer16(short*, int)+0x44>
c001d291:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d295:	83 c4 1c             	add    esp,0x1c
c001d298:	5b                   	pop    ebx
c001d299:	5e                   	pop    esi
c001d29a:	5f                   	pop    edi
c001d29b:	5d                   	pop    ebp
c001d29c:	c3                   	ret    
c001d29d:	8d 76 00             	lea    esi,[esi+0x0]
c001d2a0:	8d 46 02             	lea    eax,[esi+0x2]
c001d2a3:	90                   	nop
c001d2a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d2a8:	83 ec 0c             	sub    esp,0xc
c001d2ab:	68 f8 64 02 c0       	push   0xc00264f8
c001d2b0:	e8 10 fd fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001d2b5:	83 c4 10             	add    esp,0x10
c001d2b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d2bc:	83 c4 1c             	add    esp,0x1c
c001d2bf:	5b                   	pop    ebx
c001d2c0:	5e                   	pop    esi
c001d2c1:	5f                   	pop    edi
c001d2c2:	5d                   	pop    ebp
c001d2c3:	c3                   	ret    
c001d2c4:	83 c4 1c             	add    esp,0x1c
c001d2c7:	31 c0                	xor    eax,eax
c001d2c9:	5b                   	pop    ebx
c001d2ca:	5e                   	pop    esi
c001d2cb:	5f                   	pop    edi
c001d2cc:	5d                   	pop    ebp
c001d2cd:	c3                   	ret    
c001d2ce:	66 90                	xchg   ax,ax
c001d2d0:	b8 01 00 00 00       	mov    eax,0x1
c001d2d5:	eb cd                	jmp    c001d2a4 <SoundPort::buffer16(short*, int)+0x80>
c001d2d7:	90                   	nop

c001d2d8 <SoundPort::buffer32(int*, int)>:
c001d2d8:	55                   	push   ebp
c001d2d9:	57                   	push   edi
c001d2da:	56                   	push   esi
c001d2db:	53                   	push   ebx
c001d2dc:	83 ec 1c             	sub    esp,0x1c
c001d2df:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d2e3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d2e7:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d2ea:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d2ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d2f2:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d2f5:	74 79                	je     c001d370 <SoundPort::buffer32(int*, int)+0x98>
c001d2f7:	85 c0                	test   eax,eax
c001d2f9:	7e 75                	jle    c001d370 <SoundPort::buffer32(int*, int)+0x98>
c001d2fb:	8d 71 01             	lea    esi,[ecx+0x1]
c001d2fe:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d301:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001d304:	8b 37                	mov    esi,DWORD PTR [edi]
c001d306:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001d309:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d30c:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d30f:	74 6b                	je     c001d37c <SoundPort::buffer32(int*, int)+0xa4>
c001d311:	31 f6                	xor    esi,esi
c001d313:	eb 1f                	jmp    c001d334 <SoundPort::buffer32(int*, int)+0x5c>
c001d315:	8d 76 00             	lea    esi,[esi+0x0]
c001d318:	8d 69 01             	lea    ebp,[ecx+0x1]
c001d31b:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001d31e:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001d321:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d324:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001d328:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d32b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d32e:	74 1c                	je     c001d34c <SoundPort::buffer32(int*, int)+0x74>
c001d330:	89 de                	mov    esi,ebx
c001d332:	66 90                	xchg   ax,ax
c001d334:	8d 5e 01             	lea    ebx,[esi+0x1]
c001d337:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001d33b:	75 db                	jne    c001d318 <SoundPort::buffer32(int*, int)+0x40>
c001d33d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d341:	83 c4 1c             	add    esp,0x1c
c001d344:	5b                   	pop    ebx
c001d345:	5e                   	pop    esi
c001d346:	5f                   	pop    edi
c001d347:	5d                   	pop    ebp
c001d348:	c3                   	ret    
c001d349:	8d 76 00             	lea    esi,[esi+0x0]
c001d34c:	8d 46 02             	lea    eax,[esi+0x2]
c001d34f:	90                   	nop
c001d350:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d354:	83 ec 0c             	sub    esp,0xc
c001d357:	68 13 65 02 c0       	push   0xc0026513
c001d35c:	e8 64 fc fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001d361:	83 c4 10             	add    esp,0x10
c001d364:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d368:	83 c4 1c             	add    esp,0x1c
c001d36b:	5b                   	pop    ebx
c001d36c:	5e                   	pop    esi
c001d36d:	5f                   	pop    edi
c001d36e:	5d                   	pop    ebp
c001d36f:	c3                   	ret    
c001d370:	83 c4 1c             	add    esp,0x1c
c001d373:	31 c0                	xor    eax,eax
c001d375:	5b                   	pop    ebx
c001d376:	5e                   	pop    esi
c001d377:	5f                   	pop    edi
c001d378:	5d                   	pop    ebp
c001d379:	c3                   	ret    
c001d37a:	66 90                	xchg   ax,ax
c001d37c:	b8 01 00 00 00       	mov    eax,0x1
c001d381:	eb cd                	jmp    c001d350 <SoundPort::buffer32(int*, int)+0x78>
c001d383:	90                   	nop

c001d384 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001d384:	57                   	push   edi
c001d385:	56                   	push   esi
c001d386:	53                   	push   ebx
c001d387:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d38b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001d38f:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001d395:	39 03                	cmp    DWORD PTR [ebx],eax
c001d397:	74 13                	je     c001d3ac <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001d399:	83 ec 0c             	sub    esp,0xc
c001d39c:	68 68 65 02 c0       	push   0xc0026568
c001d3a1:	e8 77 79 ff ff       	call   c0014d1d <Krnl::panic(char const*)>
c001d3a6:	83 c4 10             	add    esp,0x10
c001d3a9:	8d 76 00             	lea    esi,[esi+0x0]
c001d3ac:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001d3b2:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001d3b5:	74 11                	je     c001d3c8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001d3b7:	83 ec 0c             	sub    esp,0xc
c001d3ba:	68 2e 65 02 c0       	push   0xc002652e
c001d3bf:	e8 59 79 ff ff       	call   c0014d1d <Krnl::panic(char const*)>
c001d3c4:	83 c4 10             	add    esp,0x10
c001d3c7:	90                   	nop
c001d3c8:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001d3ce:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001d3d1:	74 11                	je     c001d3e4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001d3d3:	83 ec 0c             	sub    esp,0xc
c001d3d6:	68 2e 65 02 c0       	push   0xc002652e
c001d3db:	e8 3d 79 ff ff       	call   c0014d1d <Krnl::panic(char const*)>
c001d3e0:	83 c4 10             	add    esp,0x10
c001d3e3:	90                   	nop
c001d3e4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d3e7:	89 c6                	mov    esi,eax
c001d3e9:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c001d3ed:	7e 05                	jle    c001d3f4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001d3ef:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d3f3:	90                   	nop
c001d3f4:	85 f6                	test   esi,esi
c001d3f6:	7e 30                	jle    c001d428 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001d3f8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d3fc:	8d 3c 36             	lea    edi,[esi+esi*1]
c001d3ff:	31 c9                	xor    ecx,ecx
c001d401:	01 d7                	add    edi,edx
c001d403:	90                   	nop
c001d404:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001d407:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001d40a:	85 c0                	test   eax,eax
c001d40c:	79 06                	jns    c001d414 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001d40e:	05 ff 7f 00 00       	add    eax,0x7fff
c001d413:	90                   	nop
c001d414:	c1 f8 0f             	sar    eax,0xf
c001d417:	83 c1 04             	add    ecx,0x4
c001d41a:	66 01 02             	add    WORD PTR [edx],ax
c001d41d:	83 c2 02             	add    edx,0x2
c001d420:	39 d7                	cmp    edi,edx
c001d422:	75 e0                	jne    c001d404 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001d424:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d427:	90                   	nop
c001d428:	56                   	push   esi
c001d429:	89 c2                	mov    edx,eax
c001d42b:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
c001d432:	29 f2                	sub    edx,esi
c001d434:	52                   	push   edx
c001d435:	50                   	push   eax
c001d436:	68 88 65 02 c0       	push   0xc0026588
c001d43b:	e8 85 fb fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001d440:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001d443:	50                   	push   eax
c001d444:	01 f8                	add    eax,edi
c001d446:	50                   	push   eax
c001d447:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d44a:	29 f0                	sub    eax,esi
c001d44c:	c1 e0 02             	shl    eax,0x2
c001d44f:	50                   	push   eax
c001d450:	68 b8 65 02 c0       	push   0xc00265b8
c001d455:	e8 6b fb fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001d45a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001d45d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d460:	83 c4 1c             	add    esp,0x1c
c001d463:	01 d7                	add    edi,edx
c001d465:	29 f0                	sub    eax,esi
c001d467:	c1 e0 02             	shl    eax,0x2
c001d46a:	50                   	push   eax
c001d46b:	57                   	push   edi
c001d46c:	52                   	push   edx
c001d46d:	e8 42 31 fe ff       	call   c00005b4 <memmove>
c001d472:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c001d475:	83 c4 10             	add    esp,0x10
c001d478:	89 f0                	mov    eax,esi
c001d47a:	5b                   	pop    ebx
c001d47b:	5e                   	pop    esi
c001d47c:	5f                   	pop    edi
c001d47d:	c3                   	ret    
c001d47e:	66 90                	xchg   ax,ax

c001d480 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001d480:	57                   	push   edi
c001d481:	56                   	push   esi
c001d482:	53                   	push   ebx
c001d483:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d487:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001d48b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001d48f:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001d495:	39 06                	cmp    DWORD PTR [esi],eax
c001d497:	74 13                	je     c001d4ac <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001d499:	83 ec 0c             	sub    esp,0xc
c001d49c:	68 dc 65 02 c0       	push   0xc00265dc
c001d4a1:	e8 77 78 ff ff       	call   c0014d1d <Krnl::panic(char const*)>
c001d4a6:	83 c4 10             	add    esp,0x10
c001d4a9:	8d 76 00             	lea    esi,[esi+0x0]
c001d4ac:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001d4b2:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001d4b5:	74 11                	je     c001d4c8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001d4b7:	83 ec 0c             	sub    esp,0xc
c001d4ba:	68 4a 65 02 c0       	push   0xc002654a
c001d4bf:	e8 59 78 ff ff       	call   c0014d1d <Krnl::panic(char const*)>
c001d4c4:	83 c4 10             	add    esp,0x10
c001d4c7:	90                   	nop
c001d4c8:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001d4ce:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001d4d1:	74 11                	je     c001d4e4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001d4d3:	83 ec 0c             	sub    esp,0xc
c001d4d6:	68 4a 65 02 c0       	push   0xc002654a
c001d4db:	e8 3d 78 ff ff       	call   c0014d1d <Krnl::panic(char const*)>
c001d4e0:	83 c4 10             	add    esp,0x10
c001d4e3:	90                   	nop
c001d4e4:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001d4e7:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001d4eb:	7e 07                	jle    c001d4f4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001d4ed:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d4f1:	8d 76 00             	lea    esi,[esi+0x0]
c001d4f4:	85 ff                	test   edi,edi
c001d4f6:	7e 1c                	jle    c001d514 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001d4f8:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001d4ff:	31 c0                	xor    eax,eax
c001d501:	8d 76 00             	lea    esi,[esi+0x0]
c001d504:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001d507:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001d50a:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001d50d:	83 c0 04             	add    eax,0x4
c001d510:	39 c1                	cmp    ecx,eax
c001d512:	75 f0                	jne    c001d504 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001d514:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001d517:	50                   	push   eax
c001d518:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d51b:	29 f8                	sub    eax,edi
c001d51d:	c1 e0 02             	shl    eax,0x2
c001d520:	50                   	push   eax
c001d521:	8d 04 ba             	lea    eax,[edx+edi*4]
c001d524:	50                   	push   eax
c001d525:	52                   	push   edx
c001d526:	e8 89 30 fe ff       	call   c00005b4 <memmove>
c001d52b:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c001d52e:	83 c4 10             	add    esp,0x10
c001d531:	89 f8                	mov    eax,edi
c001d533:	5b                   	pop    ebx
c001d534:	5e                   	pop    esi
c001d535:	5f                   	pop    edi
c001d536:	c3                   	ret    
c001d537:	90                   	nop

c001d538 <PCI::open(int, int, void*)>:
c001d538:	83 ec 18             	sub    esp,0x18
c001d53b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d53f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d543:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d549:	8b 10                	mov    edx,DWORD PTR [eax]
c001d54b:	50                   	push   eax
c001d54c:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001d54f:	31 c0                	xor    eax,eax
c001d551:	83 c4 1c             	add    esp,0x1c
c001d554:	c3                   	ret    
c001d555:	90                   	nop

c001d556 <PCI::close(int, int, void*)>:
c001d556:	31 c0                	xor    eax,eax
c001d558:	c3                   	ret    
c001d559:	90                   	nop

c001d55a <PCI::PCI()>:
c001d55a:	83 ec 0c             	sub    esp,0xc
c001d55d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d561:	83 ec 08             	sub    esp,0x8
c001d564:	68 fb 65 02 c0       	push   0xc00265fb
c001d569:	50                   	push   eax
c001d56a:	e8 2d 08 ff ff       	call   c000dd9c <Bus::Bus(char const*)>
c001d56f:	83 c4 10             	add    esp,0x10
c001d572:	ba d0 67 02 c0       	mov    edx,0xc00267d0
c001d577:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d57b:	89 10                	mov    DWORD PTR [eax],edx
c001d57d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d581:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001d58b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d58f:	a3 40 9d 02 c0       	mov    ds:0xc0029d40,eax
c001d594:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d598:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d59e:	0f b6 d0             	movzx  edx,al
c001d5a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5a5:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001d5ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5b0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d5b6:	0f b6 d0             	movzx  edx,al
c001d5b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5bd:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001d5c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5c6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d5cc:	8d 50 01             	lea    edx,[eax+0x1]
c001d5cf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d5d3:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001d5d9:	0f b6 d0             	movzx  edx,al
c001d5dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5e0:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001d5e4:	83 c9 c0             	or     ecx,0xffffffc0
c001d5e7:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001d5eb:	90                   	nop
c001d5ec:	83 c4 0c             	add    esp,0xc
c001d5ef:	c3                   	ret    

c001d5f0 <PCI::readBAR8(unsigned int, int)>:
c001d5f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d5f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d5f8:	f6 c2 01             	test   dl,0x1
c001d5fb:	74 07                	je     c001d604 <PCI::readBAR8(unsigned int, int)+0x14>
c001d5fd:	83 e2 fc             	and    edx,0xfffffffc
c001d600:	01 c2                	add    edx,eax
c001d602:	ec                   	in     al,dx
c001d603:	c3                   	ret    
c001d604:	83 e2 f0             	and    edx,0xfffffff0
c001d607:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001d60a:	c3                   	ret    
c001d60b:	90                   	nop

c001d60c <PCI::readBAR16(unsigned int, int)>:
c001d60c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d610:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d614:	f6 c2 01             	test   dl,0x1
c001d617:	74 08                	je     c001d621 <PCI::readBAR16(unsigned int, int)+0x15>
c001d619:	83 e2 fc             	and    edx,0xfffffffc
c001d61c:	01 c2                	add    edx,eax
c001d61e:	66 ed                	in     ax,dx
c001d620:	c3                   	ret    
c001d621:	83 e2 f0             	and    edx,0xfffffff0
c001d624:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001d628:	c3                   	ret    
c001d629:	90                   	nop

c001d62a <PCI::readBAR32(unsigned int, int)>:
c001d62a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d62e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d632:	f6 c2 01             	test   dl,0x1
c001d635:	74 07                	je     c001d63e <PCI::readBAR32(unsigned int, int)+0x14>
c001d637:	83 e2 fc             	and    edx,0xfffffffc
c001d63a:	01 c2                	add    edx,eax
c001d63c:	ed                   	in     eax,dx
c001d63d:	c3                   	ret    
c001d63e:	83 e2 f0             	and    edx,0xfffffff0
c001d641:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001d644:	c3                   	ret    
c001d645:	90                   	nop

c001d646 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001d646:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d64a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d64e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d652:	f6 c2 01             	test   dl,0x1
c001d655:	74 07                	je     c001d65e <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001d657:	83 e2 fc             	and    edx,0xfffffffc
c001d65a:	01 ca                	add    edx,ecx
c001d65c:	ee                   	out    dx,al
c001d65d:	c3                   	ret    
c001d65e:	83 e2 f0             	and    edx,0xfffffff0
c001d661:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001d664:	c3                   	ret    
c001d665:	90                   	nop

c001d666 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001d666:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d66a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d66e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d672:	f6 c2 01             	test   dl,0x1
c001d675:	74 08                	je     c001d67f <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001d677:	83 e2 fc             	and    edx,0xfffffffc
c001d67a:	01 ca                	add    edx,ecx
c001d67c:	66 ef                	out    dx,ax
c001d67e:	c3                   	ret    
c001d67f:	83 e2 f0             	and    edx,0xfffffff0
c001d682:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001d686:	c3                   	ret    
c001d687:	90                   	nop

c001d688 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001d688:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d68c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d690:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d694:	f6 c2 01             	test   dl,0x1
c001d697:	74 07                	je     c001d6a0 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001d699:	83 e2 fc             	and    edx,0xfffffffc
c001d69c:	01 ca                	add    edx,ecx
c001d69e:	ef                   	out    dx,eax
c001d69f:	c3                   	ret    
c001d6a0:	83 e2 f0             	and    edx,0xfffffff0
c001d6a3:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001d6a6:	c3                   	ret    
c001d6a7:	90                   	nop

c001d6a8 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d6a8:	55                   	push   ebp
c001d6a9:	57                   	push   edi
c001d6aa:	56                   	push   esi
c001d6ab:	53                   	push   ebx
c001d6ac:	83 ec 0c             	sub    esp,0xc
c001d6af:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d6b3:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001d6b7:	89 f0                	mov    eax,esi
c001d6b9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001d6bd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d6c1:	3c 07                	cmp    al,0x7
c001d6c3:	76 10                	jbe    c001d6d5 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001d6c5:	83 ec 0c             	sub    esp,0xc
c001d6c8:	68 03 66 02 c0       	push   0xc0026603
c001d6cd:	e8 4b 76 ff ff       	call   c0014d1d <Krnl::panic(char const*)>
c001d6d2:	83 c4 10             	add    esp,0x10
c001d6d5:	80 fb 0f             	cmp    bl,0xf
c001d6d8:	76 10                	jbe    c001d6ea <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c001d6da:	83 ec 0c             	sub    esp,0xc
c001d6dd:	68 33 66 02 c0       	push   0xc0026633
c001d6e2:	e8 36 76 ff ff       	call   c0014d1d <Krnl::panic(char const*)>
c001d6e7:	83 c4 10             	add    esp,0x10
c001d6ea:	8d 04 36             	lea    eax,[esi+esi*1]
c001d6ed:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d6f2:	83 c8 f0             	or     eax,0xfffffff0
c001d6f5:	ee                   	out    dx,al
c001d6f6:	ba fa 0c 00 00       	mov    edx,0xcfa
c001d6fb:	89 e8                	mov    eax,ebp
c001d6fd:	ee                   	out    dx,al
c001d6fe:	83 c4 0c             	add    esp,0xc
c001d701:	89 d8                	mov    eax,ebx
c001d703:	66 81 e7 fc 00       	and    di,0xfc
c001d708:	5b                   	pop    ebx
c001d709:	c1 e0 08             	shl    eax,0x8
c001d70c:	5e                   	pop    esi
c001d70d:	09 f8                	or     eax,edi
c001d70f:	5f                   	pop    edi
c001d710:	66 0d 00 c0          	or     ax,0xc000
c001d714:	5d                   	pop    ebp
c001d715:	c3                   	ret    

c001d716 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d716:	57                   	push   edi
c001d717:	56                   	push   esi
c001d718:	53                   	push   ebx
c001d719:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d71d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d721:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001d727:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d72b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d72f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d733:	83 ff 01             	cmp    edi,0x1
c001d736:	75 3e                	jne    c001d776 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c001d738:	89 de                	mov    esi,ebx
c001d73a:	0f b6 c0             	movzx  eax,al
c001d73d:	81 e6 fc 00 00 00    	and    esi,0xfc
c001d743:	c1 e0 10             	shl    eax,0x10
c001d746:	0f b6 c9             	movzx  ecx,cl
c001d749:	09 f0                	or     eax,esi
c001d74b:	c1 e1 08             	shl    ecx,0x8
c001d74e:	0f b6 d2             	movzx  edx,dl
c001d751:	09 c8                	or     eax,ecx
c001d753:	c1 e2 0b             	shl    edx,0xb
c001d756:	09 d0                	or     eax,edx
c001d758:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d75d:	0d 00 00 00 80       	or     eax,0x80000000
c001d762:	ef                   	out    dx,eax
c001d763:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d768:	ed                   	in     eax,dx
c001d769:	83 e3 02             	and    ebx,0x2
c001d76c:	0f b6 cb             	movzx  ecx,bl
c001d76f:	c1 e1 03             	shl    ecx,0x3
c001d772:	d3 e8                	shr    eax,cl
c001d774:	eb 43                	jmp    c001d7b9 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001d776:	83 ff 02             	cmp    edi,0x2
c001d779:	75 2c                	jne    c001d7a7 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c001d77b:	83 ec 0c             	sub    esp,0xc
c001d77e:	0f b6 c9             	movzx  ecx,cl
c001d781:	0f b6 d2             	movzx  edx,dl
c001d784:	0f b6 fb             	movzx  edi,bl
c001d787:	0f b6 c0             	movzx  eax,al
c001d78a:	57                   	push   edi
c001d78b:	51                   	push   ecx
c001d78c:	52                   	push   edx
c001d78d:	50                   	push   eax
c001d78e:	56                   	push   esi
c001d78f:	e8 14 ff ff ff       	call   c001d6a8 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d794:	89 c2                	mov    edx,eax
c001d796:	ed                   	in     eax,dx
c001d797:	83 e3 02             	and    ebx,0x2
c001d79a:	83 c4 20             	add    esp,0x20
c001d79d:	0f b6 cb             	movzx  ecx,bl
c001d7a0:	c1 e1 03             	shl    ecx,0x3
c001d7a3:	d3 e8                	shr    eax,cl
c001d7a5:	eb 12                	jmp    c001d7b9 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001d7a7:	83 ec 0c             	sub    esp,0xc
c001d7aa:	68 63 66 02 c0       	push   0xc0026663
c001d7af:	e8 69 75 ff ff       	call   c0014d1d <Krnl::panic(char const*)>
c001d7b4:	83 c4 10             	add    esp,0x10
c001d7b7:	31 c0                	xor    eax,eax
c001d7b9:	5b                   	pop    ebx
c001d7ba:	5e                   	pop    esi
c001d7bb:	5f                   	pop    edi
c001d7bc:	c3                   	ret    
c001d7bd:	90                   	nop

c001d7be <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001d7be:	83 ec 18             	sub    esp,0x18
c001d7c1:	6a 00                	push   0x0
c001d7c3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d7c8:	50                   	push   eax
c001d7c9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d7ce:	50                   	push   eax
c001d7cf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d7d4:	50                   	push   eax
c001d7d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d7d9:	e8 38 ff ff ff       	call   c001d716 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d7de:	83 c4 2c             	add    esp,0x2c
c001d7e1:	c3                   	ret    

c001d7e2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001d7e2:	83 ec 18             	sub    esp,0x18
c001d7e5:	6a 0e                	push   0xe
c001d7e7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d7ec:	50                   	push   eax
c001d7ed:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d7f2:	50                   	push   eax
c001d7f3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d7f8:	50                   	push   eax
c001d7f9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d7fd:	e8 14 ff ff ff       	call   c001d716 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d802:	83 c4 2c             	add    esp,0x2c
c001d805:	0f b6 c0             	movzx  eax,al
c001d808:	c3                   	ret    
c001d809:	90                   	nop

c001d80a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001d80a:	55                   	push   ebp
c001d80b:	57                   	push   edi
c001d80c:	56                   	push   esi
c001d80d:	53                   	push   ebx
c001d80e:	83 ec 18             	sub    esp,0x18
c001d811:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001d816:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001d81b:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001d820:	6a 0a                	push   0xa
c001d822:	56                   	push   esi
c001d823:	55                   	push   ebp
c001d824:	57                   	push   edi
c001d825:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d829:	e8 e8 fe ff ff       	call   c001d716 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d82e:	83 c4 14             	add    esp,0x14
c001d831:	89 c3                	mov    ebx,eax
c001d833:	6a 0a                	push   0xa
c001d835:	0f b6 db             	movzx  ebx,bl
c001d838:	56                   	push   esi
c001d839:	55                   	push   ebp
c001d83a:	57                   	push   edi
c001d83b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d83f:	e8 d2 fe ff ff       	call   c001d716 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d844:	83 c4 2c             	add    esp,0x2c
c001d847:	25 00 ff 00 00       	and    eax,0xff00
c001d84c:	09 d8                	or     eax,ebx
c001d84e:	5b                   	pop    ebx
c001d84f:	5e                   	pop    esi
c001d850:	5f                   	pop    edi
c001d851:	5d                   	pop    ebp
c001d852:	c3                   	ret    
c001d853:	90                   	nop

c001d854 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001d854:	83 ec 18             	sub    esp,0x18
c001d857:	6a 08                	push   0x8
c001d859:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d85e:	50                   	push   eax
c001d85f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d864:	50                   	push   eax
c001d865:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d86a:	50                   	push   eax
c001d86b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d86f:	e8 a2 fe ff ff       	call   c001d716 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d874:	83 c4 2c             	add    esp,0x2c
c001d877:	0f b6 c4             	movzx  eax,ah
c001d87a:	c3                   	ret    
c001d87b:	90                   	nop

c001d87c <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001d87c:	83 ec 18             	sub    esp,0x18
c001d87f:	6a 08                	push   0x8
c001d881:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d886:	50                   	push   eax
c001d887:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d88c:	50                   	push   eax
c001d88d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d892:	50                   	push   eax
c001d893:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d897:	e8 7a fe ff ff       	call   c001d716 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d89c:	83 c4 2c             	add    esp,0x2c
c001d89f:	c3                   	ret    

c001d8a0 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001d8a0:	83 ec 18             	sub    esp,0x18
c001d8a3:	6a 3c                	push   0x3c
c001d8a5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d8aa:	50                   	push   eax
c001d8ab:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d8b0:	50                   	push   eax
c001d8b1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d8b6:	50                   	push   eax
c001d8b7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d8bb:	e8 56 fe ff ff       	call   c001d716 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d8c0:	83 c4 2c             	add    esp,0x2c
c001d8c3:	c3                   	ret    

c001d8c4 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001d8c4:	83 ec 18             	sub    esp,0x18
c001d8c7:	6a 18                	push   0x18
c001d8c9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d8ce:	50                   	push   eax
c001d8cf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d8d4:	50                   	push   eax
c001d8d5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d8da:	50                   	push   eax
c001d8db:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d8df:	e8 32 fe ff ff       	call   c001d716 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d8e4:	83 c4 2c             	add    esp,0x2c
c001d8e7:	0f b6 c4             	movzx  eax,ah
c001d8ea:	c3                   	ret    
c001d8eb:	90                   	nop

c001d8ec <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d8ec:	55                   	push   ebp
c001d8ed:	57                   	push   edi
c001d8ee:	56                   	push   esi
c001d8ef:	53                   	push   ebx
c001d8f0:	83 ec 28             	sub    esp,0x28
c001d8f3:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001d8f7:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001d8fc:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001d901:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001d906:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001d90d:	8d 43 12             	lea    eax,[ebx+0x12]
c001d910:	83 c3 10             	add    ebx,0x10
c001d913:	0f b6 c0             	movzx  eax,al
c001d916:	0f b6 db             	movzx  ebx,bl
c001d919:	50                   	push   eax
c001d91a:	51                   	push   ecx
c001d91b:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001d91f:	57                   	push   edi
c001d920:	55                   	push   ebp
c001d921:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d925:	e8 ec fd ff ff       	call   c001d716 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d92a:	83 c4 14             	add    esp,0x14
c001d92d:	89 c6                	mov    esi,eax
c001d92f:	53                   	push   ebx
c001d930:	c1 e6 10             	shl    esi,0x10
c001d933:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d937:	51                   	push   ecx
c001d938:	57                   	push   edi
c001d939:	55                   	push   ebp
c001d93a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d93e:	e8 d3 fd ff ff       	call   c001d716 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d943:	83 c4 3c             	add    esp,0x3c
c001d946:	0f b7 c0             	movzx  eax,ax
c001d949:	5b                   	pop    ebx
c001d94a:	09 f0                	or     eax,esi
c001d94c:	5e                   	pop    esi
c001d94d:	5f                   	pop    edi
c001d94e:	5d                   	pop    ebp
c001d94f:	c3                   	ret    

c001d950 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001d950:	55                   	push   ebp
c001d951:	57                   	push   edi
c001d952:	56                   	push   esi
c001d953:	53                   	push   ebx
c001d954:	83 ec 0c             	sub    esp,0xc
c001d957:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d95b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001d95f:	89 f5                	mov    ebp,esi
c001d961:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001d967:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d96b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d96f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d973:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d977:	83 f9 01             	cmp    ecx,0x1
c001d97a:	75 5d                	jne    c001d9d9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001d97c:	0f b6 c8             	movzx  ecx,al
c001d97f:	0f b6 d2             	movzx  edx,dl
c001d982:	c1 e1 10             	shl    ecx,0x10
c001d985:	c1 e2 0b             	shl    edx,0xb
c001d988:	89 f0                	mov    eax,esi
c001d98a:	25 fc 00 00 00       	and    eax,0xfc
c001d98f:	09 c1                	or     ecx,eax
c001d991:	89 e8                	mov    eax,ebp
c001d993:	0f b6 c0             	movzx  eax,al
c001d996:	c1 e0 08             	shl    eax,0x8
c001d999:	09 c1                	or     ecx,eax
c001d99b:	09 d1                	or     ecx,edx
c001d99d:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d9a2:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001d9a8:	89 c8                	mov    eax,ecx
c001d9aa:	ef                   	out    dx,eax
c001d9ab:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d9b0:	ed                   	in     eax,dx
c001d9b1:	0f b7 db             	movzx  ebx,bx
c001d9b4:	83 e6 02             	and    esi,0x2
c001d9b7:	74 0a                	je     c001d9c3 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001d9b9:	0f b7 d0             	movzx  edx,ax
c001d9bc:	c1 e3 10             	shl    ebx,0x10
c001d9bf:	09 d3                	or     ebx,edx
c001d9c1:	eb 05                	jmp    c001d9c8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001d9c3:	66 31 c0             	xor    ax,ax
c001d9c6:	09 c3                	or     ebx,eax
c001d9c8:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d9cd:	89 c8                	mov    eax,ecx
c001d9cf:	ef                   	out    dx,eax
c001d9d0:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d9d5:	89 d8                	mov    eax,ebx
c001d9d7:	eb 41                	jmp    c001da1a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001d9d9:	83 f9 02             	cmp    ecx,0x2
c001d9dc:	75 45                	jne    c001da23 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001d9de:	83 ec 0c             	sub    esp,0xc
c001d9e1:	0f b6 d2             	movzx  edx,dl
c001d9e4:	89 f1                	mov    ecx,esi
c001d9e6:	0f b6 c0             	movzx  eax,al
c001d9e9:	0f b6 f1             	movzx  esi,cl
c001d9ec:	89 e9                	mov    ecx,ebp
c001d9ee:	56                   	push   esi
c001d9ef:	0f b6 c9             	movzx  ecx,cl
c001d9f2:	51                   	push   ecx
c001d9f3:	52                   	push   edx
c001d9f4:	50                   	push   eax
c001d9f5:	57                   	push   edi
c001d9f6:	e8 ad fc ff ff       	call   c001d6a8 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d9fb:	89 c2                	mov    edx,eax
c001d9fd:	ed                   	in     eax,dx
c001d9fe:	83 c4 20             	add    esp,0x20
c001da01:	0f b7 db             	movzx  ebx,bx
c001da04:	f6 c2 02             	test   dl,0x2
c001da07:	74 0c                	je     c001da15 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001da09:	0f b7 c8             	movzx  ecx,ax
c001da0c:	89 d8                	mov    eax,ebx
c001da0e:	c1 e0 10             	shl    eax,0x10
c001da11:	09 c8                	or     eax,ecx
c001da13:	eb 05                	jmp    c001da1a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001da15:	66 31 c0             	xor    ax,ax
c001da18:	09 d8                	or     eax,ebx
c001da1a:	ef                   	out    dx,eax
c001da1b:	83 c4 0c             	add    esp,0xc
c001da1e:	5b                   	pop    ebx
c001da1f:	5e                   	pop    esi
c001da20:	5f                   	pop    edi
c001da21:	5d                   	pop    ebp
c001da22:	c3                   	ret    
c001da23:	c7 44 24 20 63 66 02 c0 	mov    DWORD PTR [esp+0x20],0xc0026663
c001da2b:	83 c4 0c             	add    esp,0xc
c001da2e:	5b                   	pop    ebx
c001da2f:	5e                   	pop    esi
c001da30:	5f                   	pop    edi
c001da31:	5d                   	pop    ebp
c001da32:	e9 e6 72 ff ff       	jmp    c0014d1d <Krnl::panic(char const*)>
c001da37:	90                   	nop

c001da38 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001da38:	55                   	push   ebp
c001da39:	57                   	push   edi
c001da3a:	56                   	push   esi
c001da3b:	53                   	push   ebx
c001da3c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001da42:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c001da49:	75 0f                	jne    c001da5a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x22>
c001da4b:	80 3d 4c 9d 02 c0 00 	cmp    BYTE PTR ds:0xc0029d4c,0x0
c001da52:	0f 85 fa 00 00 00    	jne    c001db52 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x11a>
c001da58:	eb 2f                	jmp    c001da89 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x51>
c001da5a:	83 ec 0c             	sub    esp,0xc
c001da5d:	68 69 66 02 c0       	push   0xc0026669
c001da62:	e8 aa c2 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001da67:	83 c4 10             	add    esp,0x10
c001da6a:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c001da71:	75 d8                	jne    c001da4b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x13>
c001da73:	e4 60                	in     al,0x60
c001da75:	3c 1c                	cmp    al,0x1c
c001da77:	74 04                	je     c001da7d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001da79:	3c 5a                	cmp    al,0x5a
c001da7b:	75 f6                	jne    c001da73 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3b>
c001da7d:	e4 60                	in     al,0x60
c001da7f:	3c 5a                	cmp    al,0x5a
c001da81:	74 fa                	je     c001da7d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001da83:	3c 1c                	cmp    al,0x1c
c001da85:	74 f6                	je     c001da7d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001da87:	eb c2                	jmp    c001da4b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x13>
c001da89:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c001da90:	0f 85 86 00 00 00    	jne    c001db1c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xe4>
c001da96:	83 ec 0c             	sub    esp,0xc
c001da99:	68 14 01 00 00       	push   0x114
c001da9e:	e8 14 c2 fe ff       	call   c0009cb7 <malloc>
c001daa3:	83 c4 0c             	add    esp,0xc
c001daa6:	89 c3                	mov    ebx,eax
c001daa8:	ff 35 50 93 02 c0    	push   DWORD PTR ds:0xc0029350
c001daae:	68 83 66 02 c0       	push   0xc0026683
c001dab3:	50                   	push   eax
c001dab4:	e8 77 fa fe ff       	call   c000d530 <File::File(char const*, Process*)>
c001dab9:	5a                   	pop    edx
c001daba:	59                   	pop    ecx
c001dabb:	6a 01                	push   0x1
c001dabd:	53                   	push   ebx
c001dabe:	e8 47 fb fe ff       	call   c000d60a <File::open(FileOpenMode)>
c001dac3:	83 c4 0c             	add    esp,0xc
c001dac6:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c001daca:	50                   	push   eax
c001dacb:	8d 44 24 28          	lea    eax,[esp+0x28]
c001dacf:	50                   	push   eax
c001dad0:	53                   	push   ebx
c001dad1:	e8 e0 fd fe ff       	call   c000d8b6 <File::stat(unsigned long long*, bool*)>
c001dad6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dada:	40                   	inc    eax
c001dadb:	89 04 24             	mov    DWORD PTR [esp],eax
c001dade:	e8 d4 c1 fe ff       	call   c0009cb7 <malloc>
c001dae3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dae7:	a3 48 9d 02 c0       	mov    ds:0xc0029d48,eax
c001daec:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001daf0:	5e                   	pop    esi
c001daf1:	8b 13                	mov    edx,DWORD PTR [ebx]
c001daf3:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c001daf7:	51                   	push   ecx
c001daf8:	50                   	push   eax
c001daf9:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001dafd:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001db01:	53                   	push   ebx
c001db02:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001db05:	83 c4 14             	add    esp,0x14
c001db08:	53                   	push   ebx
c001db09:	e8 5a fb fe ff       	call   c000d668 <File::close()>
c001db0e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db12:	83 c4 10             	add    esp,0x10
c001db15:	a3 44 9d 02 c0       	mov    ds:0xc0029d44,eax
c001db1a:	eb 36                	jmp    c001db52 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x11a>
c001db1c:	83 ec 0c             	sub    esp,0xc
c001db1f:	68 9c 66 02 c0       	push   0xc002669c
c001db24:	e8 e8 c1 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001db29:	83 c4 10             	add    esp,0x10
c001db2c:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c001db33:	0f 85 5d ff ff ff    	jne    c001da96 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x5e>
c001db39:	e4 60                	in     al,0x60
c001db3b:	3c 1c                	cmp    al,0x1c
c001db3d:	74 04                	je     c001db43 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001db3f:	3c 5a                	cmp    al,0x5a
c001db41:	75 f6                	jne    c001db39 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x101>
c001db43:	e4 60                	in     al,0x60
c001db45:	3c 5a                	cmp    al,0x5a
c001db47:	74 fa                	je     c001db43 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001db49:	3c 1c                	cmp    al,0x1c
c001db4b:	74 f6                	je     c001db43 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001db4d:	e9 44 ff ff ff       	jmp    c001da96 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x5e>
c001db52:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c001db59:	75 0b                	jne    c001db66 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x12e>
c001db5b:	31 f6                	xor    esi,esi
c001db5d:	31 db                	xor    ebx,ebx
c001db5f:	31 ed                	xor    ebp,ebp
c001db61:	e9 a3 01 00 00       	jmp    c001dd09 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001db66:	83 ec 0c             	sub    esp,0xc
c001db69:	68 ae 66 02 c0       	push   0xc00266ae
c001db6e:	e8 9e c1 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001db73:	8b 15 20 7e 02 c0    	mov    edx,DWORD PTR ds:0xc0027e20
c001db79:	83 c4 10             	add    esp,0x10
c001db7c:	f6 c2 80             	test   dl,0x80
c001db7f:	74 0c                	je     c001db8d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x155>
c001db81:	0f ba e2 0b          	bt     edx,0xb
c001db85:	72 1a                	jb     c001dba1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x169>
c001db87:	eb d2                	jmp    c001db5b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001db89:	3c 5a                	cmp    al,0x5a
c001db8b:	74 0c                	je     c001db99 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001db8d:	e4 60                	in     al,0x60
c001db8f:	3c 1c                	cmp    al,0x1c
c001db91:	75 f6                	jne    c001db89 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x151>
c001db93:	eb 04                	jmp    c001db99 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001db95:	3c 1c                	cmp    al,0x1c
c001db97:	75 e8                	jne    c001db81 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x149>
c001db99:	e4 60                	in     al,0x60
c001db9b:	3c 5a                	cmp    al,0x5a
c001db9d:	74 fa                	je     c001db99 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001db9f:	eb f4                	jmp    c001db95 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x15d>
c001dba1:	83 ec 0c             	sub    esp,0xc
c001dba4:	68 b3 66 02 c0       	push   0xc00266b3
c001dba9:	e8 63 c1 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001dbae:	83 c4 10             	add    esp,0x10
c001dbb1:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c001dbb8:	75 a1                	jne    c001db5b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001dbba:	e4 60                	in     al,0x60
c001dbbc:	3c 5a                	cmp    al,0x5a
c001dbbe:	74 04                	je     c001dbc4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001dbc0:	3c 1c                	cmp    al,0x1c
c001dbc2:	75 f6                	jne    c001dbba <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x182>
c001dbc4:	e4 60                	in     al,0x60
c001dbc6:	3c 5a                	cmp    al,0x5a
c001dbc8:	74 fa                	je     c001dbc4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001dbca:	3c 1c                	cmp    al,0x1c
c001dbcc:	74 f6                	je     c001dbc4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001dbce:	eb 8b                	jmp    c001db5b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001dbd0:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c001dbd7:	0f 85 3d 01 00 00    	jne    c001dd1a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2e2>
c001dbdd:	a1 48 9d 02 c0       	mov    eax,ds:0xc0029d48
c001dbe2:	8d 7e 01             	lea    edi,[esi+0x1]
c001dbe5:	8a 04 30             	mov    al,BYTE PTR [eax+esi*1]
c001dbe8:	d4 40                	aam    0x40
c001dbea:	d5 39                	aad    0x39
c001dbec:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c001dbf3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001dbf7:	0f 85 53 01 00 00    	jne    c001dd50 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x318>
c001dbfd:	8b 15 48 9d 02 c0    	mov    edx,DWORD PTR ds:0xc0029d48
c001dc03:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001dc06:	d4 40                	aam    0x40
c001dc08:	d5 39                	aad    0x39
c001dc0a:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001dc0e:	8a 44 32 03          	mov    al,BYTE PTR [edx+esi*1+0x3]
c001dc12:	d4 40                	aam    0x40
c001dc14:	d5 39                	aad    0x39
c001dc16:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001dc1a:	8a 44 32 04          	mov    al,BYTE PTR [edx+esi*1+0x4]
c001dc1e:	d4 40                	aam    0x40
c001dc20:	d5 39                	aad    0x39
c001dc22:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dc26:	8a 44 32 06          	mov    al,BYTE PTR [edx+esi*1+0x6]
c001dc2a:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001dc2e:	3c 56                	cmp    al,0x56
c001dc30:	74 49                	je     c001dc7b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x243>
c001dc32:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001dc36:	d4 40                	aam    0x40
c001dc38:	d5 39                	aad    0x39
c001dc3a:	8d 48 d0             	lea    ecx,[eax-0x30]
c001dc3d:	8a 44 32 07          	mov    al,BYTE PTR [edx+esi*1+0x7]
c001dc41:	0f b6 c9             	movzx  ecx,cl
c001dc44:	c1 e1 04             	shl    ecx,0x4
c001dc47:	d4 40                	aam    0x40
c001dc49:	d5 39                	aad    0x39
c001dc4b:	83 e8 30             	sub    eax,0x30
c001dc4e:	0f b6 c0             	movzx  eax,al
c001dc51:	09 c1                	or     ecx,eax
c001dc53:	8a 44 32 08          	mov    al,BYTE PTR [edx+esi*1+0x8]
c001dc57:	c1 e1 04             	shl    ecx,0x4
c001dc5a:	d4 40                	aam    0x40
c001dc5c:	d5 39                	aad    0x39
c001dc5e:	83 e8 30             	sub    eax,0x30
c001dc61:	0f b6 c0             	movzx  eax,al
c001dc64:	09 c1                	or     ecx,eax
c001dc66:	8a 44 32 09          	mov    al,BYTE PTR [edx+esi*1+0x9]
c001dc6a:	c1 e1 04             	shl    ecx,0x4
c001dc6d:	d4 40                	aam    0x40
c001dc6f:	d5 39                	aad    0x39
c001dc71:	83 e8 30             	sub    eax,0x30
c001dc74:	0f b6 c0             	movzx  eax,al
c001dc77:	09 c8                	or     eax,ecx
c001dc79:	89 c5                	mov    ebp,eax
c001dc7b:	8a 4c 32 0b          	mov    cl,BYTE PTR [edx+esi*1+0xb]
c001dc7f:	80 f9 44             	cmp    cl,0x44
c001dc82:	74 47                	je     c001dccb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x293>
c001dc84:	88 c8                	mov    al,cl
c001dc86:	d4 40                	aam    0x40
c001dc88:	d5 39                	aad    0x39
c001dc8a:	83 e8 30             	sub    eax,0x30
c001dc8d:	0f b6 f8             	movzx  edi,al
c001dc90:	8a 44 32 0c          	mov    al,BYTE PTR [edx+esi*1+0xc]
c001dc94:	c1 e7 04             	shl    edi,0x4
c001dc97:	d4 40                	aam    0x40
c001dc99:	d5 39                	aad    0x39
c001dc9b:	8d 58 d0             	lea    ebx,[eax-0x30]
c001dc9e:	8a 44 32 0d          	mov    al,BYTE PTR [edx+esi*1+0xd]
c001dca2:	0f b6 db             	movzx  ebx,bl
c001dca5:	09 fb                	or     ebx,edi
c001dca7:	c1 e3 04             	shl    ebx,0x4
c001dcaa:	d4 40                	aam    0x40
c001dcac:	d5 39                	aad    0x39
c001dcae:	83 e8 30             	sub    eax,0x30
c001dcb1:	0f b6 f8             	movzx  edi,al
c001dcb4:	8a 44 32 0e          	mov    al,BYTE PTR [edx+esi*1+0xe]
c001dcb8:	09 fb                	or     ebx,edi
c001dcba:	89 df                	mov    edi,ebx
c001dcbc:	c1 e7 04             	shl    edi,0x4
c001dcbf:	d4 40                	aam    0x40
c001dcc1:	d5 39                	aad    0x39
c001dcc3:	8d 58 d0             	lea    ebx,[eax-0x30]
c001dcc6:	0f b6 db             	movzx  ebx,bl
c001dcc9:	09 fb                	or     ebx,edi
c001dccb:	a1 44 9d 02 c0       	mov    eax,ds:0xc0029d44
c001dcd0:	83 c6 10             	add    esi,0x10
c001dcd3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001dcd7:	8d 7c 24 20          	lea    edi,[esp+0x20]
c001dcdb:	8a 04 32             	mov    al,BYTE PTR [edx+esi*1]
c001dcde:	3c 0a                	cmp    al,0xa
c001dce0:	0f 85 a0 00 00 00    	jne    c001dd86 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x34e>
c001dce6:	3c 0a                	cmp    al,0xa
c001dce8:	0f 94 c0             	sete   al
c001dceb:	0f b6 c0             	movzx  eax,al
c001dcee:	01 c6                	add    esi,eax
c001dcf0:	80 7c 24 07 56       	cmp    BYTE PTR [esp+0x7],0x56
c001dcf5:	0f 84 a2 00 00 00    	je     c001dd9d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x365>
c001dcfb:	66 39 ac 24 42 01 00 00 	cmp    WORD PTR [esp+0x142],bp
c001dd03:	0f 84 94 00 00 00    	je     c001dd9d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x365>
c001dd09:	39 35 44 9d 02 c0    	cmp    DWORD PTR ds:0xc0029d44,esi
c001dd0f:	0f 8f bb fe ff ff    	jg     c001dbd0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x198>
c001dd15:	e9 e8 00 00 00       	jmp    c001de02 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3ca>
c001dd1a:	83 ec 0c             	sub    esp,0xc
c001dd1d:	68 ba 66 02 c0       	push   0xc00266ba
c001dd22:	e8 ea bf fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001dd27:	83 c4 10             	add    esp,0x10
c001dd2a:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c001dd31:	0f 85 a6 fe ff ff    	jne    c001dbdd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a5>
c001dd37:	e4 60                	in     al,0x60
c001dd39:	3c 5a                	cmp    al,0x5a
c001dd3b:	74 04                	je     c001dd41 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001dd3d:	3c 1c                	cmp    al,0x1c
c001dd3f:	75 f6                	jne    c001dd37 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2ff>
c001dd41:	e4 60                	in     al,0x60
c001dd43:	3c 5a                	cmp    al,0x5a
c001dd45:	74 fa                	je     c001dd41 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001dd47:	3c 1c                	cmp    al,0x1c
c001dd49:	74 f6                	je     c001dd41 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001dd4b:	e9 8d fe ff ff       	jmp    c001dbdd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a5>
c001dd50:	83 ec 0c             	sub    esp,0xc
c001dd53:	68 c2 66 02 c0       	push   0xc00266c2
c001dd58:	e8 b4 bf fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001dd5d:	83 c4 10             	add    esp,0x10
c001dd60:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c001dd67:	0f 85 90 fe ff ff    	jne    c001dbfd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1c5>
c001dd6d:	e4 60                	in     al,0x60
c001dd6f:	3c 5a                	cmp    al,0x5a
c001dd71:	74 04                	je     c001dd77 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001dd73:	3c 1c                	cmp    al,0x1c
c001dd75:	75 f6                	jne    c001dd6d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x335>
c001dd77:	e4 60                	in     al,0x60
c001dd79:	3c 5a                	cmp    al,0x5a
c001dd7b:	74 fa                	je     c001dd77 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001dd7d:	3c 1c                	cmp    al,0x1c
c001dd7f:	74 f6                	je     c001dd77 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001dd81:	e9 77 fe ff ff       	jmp    c001dbfd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1c5>
c001dd86:	47                   	inc    edi
c001dd87:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c001dd8b:	0f 84 55 ff ff ff    	je     c001dce6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2ae>
c001dd91:	46                   	inc    esi
c001dd92:	88 47 ff             	mov    BYTE PTR [edi-0x1],al
c001dd95:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001dd98:	e9 3e ff ff ff       	jmp    c001dcdb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2a3>
c001dd9d:	80 f9 44             	cmp    cl,0x44
c001dda0:	74 0e                	je     c001ddb0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x378>
c001dda2:	66 39 9c 24 62 01 00 00 	cmp    WORD PTR [esp+0x162],bx
c001ddaa:	0f 85 59 ff ff ff    	jne    c001dd09 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001ddb0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ddb4:	8a 54 24 0d          	mov    dl,BYTE PTR [esp+0xd]
c001ddb8:	c1 e0 04             	shl    eax,0x4
c001ddbb:	83 ea 30             	sub    edx,0x30
c001ddbe:	09 d0                	or     eax,edx
c001ddc0:	38 84 24 40 01 00 00 	cmp    BYTE PTR [esp+0x140],al
c001ddc7:	0f 85 3c ff ff ff    	jne    c001dd09 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001ddcd:	8a 54 24 0e          	mov    dl,BYTE PTR [esp+0xe]
c001ddd1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001ddd5:	c1 e2 04             	shl    edx,0x4
c001ddd8:	83 e8 30             	sub    eax,0x30
c001dddb:	09 d0                	or     eax,edx
c001dddd:	38 84 24 41 01 00 00 	cmp    BYTE PTR [esp+0x141],al
c001dde4:	0f 85 1f ff ff ff    	jne    c001dd09 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001ddea:	50                   	push   eax
c001ddeb:	50                   	push   eax
c001ddec:	8d 44 24 28          	lea    eax,[esp+0x28]
c001ddf0:	50                   	push   eax
c001ddf1:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c001ddf8:	e8 3b 29 fe ff       	call   c0000738 <strcpy>
c001ddfd:	83 c4 10             	add    esp,0x10
c001de00:	eb 15                	jmp    c001de17 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3df>
c001de02:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001de09:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c001de14:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001de17:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001de1e:	81 c4 2c 01 00 00    	add    esp,0x12c
c001de24:	5b                   	pop    ebx
c001de25:	5e                   	pop    esi
c001de26:	5f                   	pop    edi
c001de27:	5d                   	pop    ebp
c001de28:	c3                   	ret    
c001de29:	90                   	nop

c001de2a <PCI::checkBus(unsigned char)>:
c001de2a:	56                   	push   esi
c001de2b:	53                   	push   ebx
c001de2c:	31 db                	xor    ebx,ebx
c001de2e:	51                   	push   ecx
c001de2f:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001de34:	52                   	push   edx
c001de35:	53                   	push   ebx
c001de36:	43                   	inc    ebx
c001de37:	56                   	push   esi
c001de38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001de3c:	e8 bf 07 00 00       	call   c001e600 <PCI::checkDevice(unsigned char, unsigned char)>
c001de41:	83 c4 10             	add    esp,0x10
c001de44:	83 fb 20             	cmp    ebx,0x20
c001de47:	75 eb                	jne    c001de34 <PCI::checkBus(unsigned char)+0xa>
c001de49:	58                   	pop    eax
c001de4a:	5b                   	pop    ebx
c001de4b:	5e                   	pop    esi
c001de4c:	c3                   	ret    
c001de4d:	90                   	nop

c001de4e <PCI::foundDevice(PCIDeviceInfo)>:
c001de4e:	55                   	push   ebp
c001de4f:	57                   	push   edi
c001de50:	56                   	push   esi
c001de51:	53                   	push   ebx
c001de52:	83 ec 1c             	sub    esp,0x1c
c001de55:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001de59:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001de5f:	0f 84 20 04 00 00    	je     c001e285 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001de65:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c001de6c:	75 37                	jne    c001dea5 <PCI::foundDevice(PCIDeviceInfo)+0x57>
c001de6e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001de72:	66 81 f9 06 04       	cmp    cx,0x406
c001de77:	75 5b                	jne    c001ded4 <PCI::foundDevice(PCIDeviceInfo)+0x86>
c001de79:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001de7e:	50                   	push   eax
c001de7f:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001de84:	50                   	push   eax
c001de85:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001de8a:	50                   	push   eax
c001de8b:	53                   	push   ebx
c001de8c:	e8 33 fa ff ff       	call   c001d8c4 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001de91:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001de95:	0f b6 c0             	movzx  eax,al
c001de98:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001de9c:	83 c4 2c             	add    esp,0x2c
c001de9f:	5b                   	pop    ebx
c001dea0:	5e                   	pop    esi
c001dea1:	5f                   	pop    edi
c001dea2:	5d                   	pop    ebp
c001dea3:	eb 85                	jmp    c001de2a <PCI::checkBus(unsigned char)>
c001dea5:	83 ec 0c             	sub    esp,0xc
c001dea8:	68 cb 66 02 c0       	push   0xc00266cb
c001dead:	e8 5f be fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001deb2:	83 c4 10             	add    esp,0x10
c001deb5:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c001debc:	75 b0                	jne    c001de6e <PCI::foundDevice(PCIDeviceInfo)+0x20>
c001debe:	e4 60                	in     al,0x60
c001dec0:	3c 5a                	cmp    al,0x5a
c001dec2:	74 04                	je     c001dec8 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001dec4:	3c 1c                	cmp    al,0x1c
c001dec6:	75 f6                	jne    c001debe <PCI::foundDevice(PCIDeviceInfo)+0x70>
c001dec8:	e4 60                	in     al,0x60
c001deca:	3c 5a                	cmp    al,0x5a
c001decc:	74 fa                	je     c001dec8 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001dece:	3c 1c                	cmp    al,0x1c
c001ded0:	74 f6                	je     c001dec8 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001ded2:	eb 9a                	jmp    c001de6e <PCI::foundDevice(PCIDeviceInfo)+0x20>
c001ded4:	8b 83 cc 00 00 00    	mov    eax,DWORD PTR [ebx+0xcc]
c001deda:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001dede:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dee2:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001dee6:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001deea:	88 d0                	mov    al,dl
c001deec:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001def1:	74 3b                	je     c001df2e <PCI::foundDevice(PCIDeviceInfo)+0xe0>
c001def3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001def7:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001defa:	85 d2                	test   edx,edx
c001defc:	74 24                	je     c001df22 <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001defe:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001df04:	31 ef                	xor    edi,ebp
c001df06:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001df0c:	75 14                	jne    c001df22 <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001df0e:	39 b2 20 01 00 00    	cmp    DWORD PTR [edx+0x120],esi
c001df14:	75 0c                	jne    c001df22 <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001df16:	38 82 38 01 00 00    	cmp    BYTE PTR [edx+0x138],al
c001df1c:	0f 84 63 03 00 00    	je     c001e285 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001df22:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001df26:	8b 12                	mov    edx,DWORD PTR [edx]
c001df28:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001df2c:	eb be                	jmp    c001deec <PCI::foundDevice(PCIDeviceInfo)+0x9e>
c001df2e:	66 81 f9 01 06       	cmp    cx,0x601
c001df33:	0f 85 81 01 00 00    	jne    c001e0ba <PCI::foundDevice(PCIDeviceInfo)+0x26c>
c001df39:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c001df40:	75 25                	jne    c001df67 <PCI::foundDevice(PCIDeviceInfo)+0x119>
c001df42:	83 ec 0c             	sub    esp,0xc
c001df45:	68 64 01 00 00       	push   0x164
c001df4a:	e8 68 bd fe ff       	call   c0009cb7 <malloc>
c001df4f:	89 04 24             	mov    DWORD PTR [esp],eax
c001df52:	89 c5                	mov    ebp,eax
c001df54:	e8 d3 12 00 00       	call   c001f22c <SATABus::SATABus()>
c001df59:	83 c4 10             	add    esp,0x10
c001df5c:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c001df63:	74 4a                	je     c001dfaf <PCI::foundDevice(PCIDeviceInfo)+0x161>
c001df65:	eb 2f                	jmp    c001df96 <PCI::foundDevice(PCIDeviceInfo)+0x148>
c001df67:	83 ec 0c             	sub    esp,0xc
c001df6a:	68 db 66 02 c0       	push   0xc00266db
c001df6f:	e8 9d bd fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001df74:	83 c4 10             	add    esp,0x10
c001df77:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c001df7e:	75 c2                	jne    c001df42 <PCI::foundDevice(PCIDeviceInfo)+0xf4>
c001df80:	e4 60                	in     al,0x60
c001df82:	3c 1c                	cmp    al,0x1c
c001df84:	74 04                	je     c001df8a <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001df86:	3c 5a                	cmp    al,0x5a
c001df88:	75 f6                	jne    c001df80 <PCI::foundDevice(PCIDeviceInfo)+0x132>
c001df8a:	e4 60                	in     al,0x60
c001df8c:	3c 5a                	cmp    al,0x5a
c001df8e:	74 fa                	je     c001df8a <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001df90:	3c 1c                	cmp    al,0x1c
c001df92:	74 f6                	je     c001df8a <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001df94:	eb ac                	jmp    c001df42 <PCI::foundDevice(PCIDeviceInfo)+0xf4>
c001df96:	83 ec 0c             	sub    esp,0xc
c001df99:	68 e1 66 02 c0       	push   0xc00266e1
c001df9e:	e8 6e bd fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001dfa3:	83 c4 10             	add    esp,0x10
c001dfa6:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c001dfad:	74 1b                	je     c001dfca <PCI::foundDevice(PCIDeviceInfo)+0x17c>
c001dfaf:	50                   	push   eax
c001dfb0:	50                   	push   eax
c001dfb1:	55                   	push   ebp
c001dfb2:	53                   	push   ebx
c001dfb3:	e8 be 04 ff ff       	call   c000e476 <Device::addChild(Device*)>
c001dfb8:	83 c4 10             	add    esp,0x10
c001dfbb:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c001dfc2:	74 33                	je     c001dff7 <PCI::foundDevice(PCIDeviceInfo)+0x1a9>
c001dfc4:	eb 18                	jmp    c001dfde <PCI::foundDevice(PCIDeviceInfo)+0x190>
c001dfc6:	3c 1c                	cmp    al,0x1c
c001dfc8:	74 0c                	je     c001dfd6 <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001dfca:	e4 60                	in     al,0x60
c001dfcc:	3c 5a                	cmp    al,0x5a
c001dfce:	75 f6                	jne    c001dfc6 <PCI::foundDevice(PCIDeviceInfo)+0x178>
c001dfd0:	eb 04                	jmp    c001dfd6 <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001dfd2:	3c 1c                	cmp    al,0x1c
c001dfd4:	75 d9                	jne    c001dfaf <PCI::foundDevice(PCIDeviceInfo)+0x161>
c001dfd6:	e4 60                	in     al,0x60
c001dfd8:	3c 5a                	cmp    al,0x5a
c001dfda:	74 fa                	je     c001dfd6 <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001dfdc:	eb f4                	jmp    c001dfd2 <PCI::foundDevice(PCIDeviceInfo)+0x184>
c001dfde:	83 ec 0c             	sub    esp,0xc
c001dfe1:	68 e9 66 02 c0       	push   0xc00266e9
c001dfe6:	e8 26 bd fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001dfeb:	83 c4 10             	add    esp,0x10
c001dfee:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c001dff5:	74 29                	je     c001e020 <PCI::foundDevice(PCIDeviceInfo)+0x1d2>
c001dff7:	83 ec 2c             	sub    esp,0x2c
c001dffa:	b9 09 00 00 00       	mov    ecx,0x9
c001dfff:	8d 74 24 60          	lea    esi,[esp+0x60]
c001e003:	fc                   	cld    
c001e004:	89 e7                	mov    edi,esp
c001e006:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e008:	55                   	push   ebp
c001e009:	e8 7a 03 ff ff       	call   c000e388 <Device::preOpenPCI(PCIDeviceInfo)>
c001e00e:	83 c4 30             	add    esp,0x30
c001e011:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c001e018:	74 33                	je     c001e04d <PCI::foundDevice(PCIDeviceInfo)+0x1ff>
c001e01a:	eb 18                	jmp    c001e034 <PCI::foundDevice(PCIDeviceInfo)+0x1e6>
c001e01c:	3c 1c                	cmp    al,0x1c
c001e01e:	74 0c                	je     c001e02c <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001e020:	e4 60                	in     al,0x60
c001e022:	3c 5a                	cmp    al,0x5a
c001e024:	75 f6                	jne    c001e01c <PCI::foundDevice(PCIDeviceInfo)+0x1ce>
c001e026:	eb 04                	jmp    c001e02c <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001e028:	3c 1c                	cmp    al,0x1c
c001e02a:	75 cb                	jne    c001dff7 <PCI::foundDevice(PCIDeviceInfo)+0x1a9>
c001e02c:	e4 60                	in     al,0x60
c001e02e:	3c 5a                	cmp    al,0x5a
c001e030:	74 fa                	je     c001e02c <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001e032:	eb f4                	jmp    c001e028 <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001e034:	83 ec 0c             	sub    esp,0xc
c001e037:	68 f1 66 02 c0       	push   0xc00266f1
c001e03c:	e8 d0 bc fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001e041:	83 c4 10             	add    esp,0x10
c001e044:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c001e04b:	74 23                	je     c001e070 <PCI::foundDevice(PCIDeviceInfo)+0x222>
c001e04d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001e050:	6a 00                	push   0x0
c001e052:	6a 00                	push   0x0
c001e054:	6a 00                	push   0x0
c001e056:	55                   	push   ebp
c001e057:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e05a:	83 c4 10             	add    esp,0x10
c001e05d:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c001e064:	0f 84 1b 02 00 00    	je     c001e285 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e06a:	eb 18                	jmp    c001e084 <PCI::foundDevice(PCIDeviceInfo)+0x236>
c001e06c:	3c 1c                	cmp    al,0x1c
c001e06e:	74 0c                	je     c001e07c <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001e070:	e4 60                	in     al,0x60
c001e072:	3c 5a                	cmp    al,0x5a
c001e074:	75 f6                	jne    c001e06c <PCI::foundDevice(PCIDeviceInfo)+0x21e>
c001e076:	eb 04                	jmp    c001e07c <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001e078:	3c 1c                	cmp    al,0x1c
c001e07a:	75 d1                	jne    c001e04d <PCI::foundDevice(PCIDeviceInfo)+0x1ff>
c001e07c:	e4 60                	in     al,0x60
c001e07e:	3c 5a                	cmp    al,0x5a
c001e080:	74 fa                	je     c001e07c <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001e082:	eb f4                	jmp    c001e078 <PCI::foundDevice(PCIDeviceInfo)+0x22a>
c001e084:	83 ec 0c             	sub    esp,0xc
c001e087:	68 f9 66 02 c0       	push   0xc00266f9
c001e08c:	e8 80 bc fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001e091:	83 c4 10             	add    esp,0x10
c001e094:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c001e09b:	0f 85 e4 01 00 00    	jne    c001e285 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e0a1:	e4 60                	in     al,0x60
c001e0a3:	3c 5a                	cmp    al,0x5a
c001e0a5:	74 04                	je     c001e0ab <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001e0a7:	3c 1c                	cmp    al,0x1c
c001e0a9:	75 f6                	jne    c001e0a1 <PCI::foundDevice(PCIDeviceInfo)+0x253>
c001e0ab:	e4 60                	in     al,0x60
c001e0ad:	3c 5a                	cmp    al,0x5a
c001e0af:	74 fa                	je     c001e0ab <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001e0b1:	3c 1c                	cmp    al,0x1c
c001e0b3:	74 f6                	je     c001e0ab <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001e0b5:	e9 cb 01 00 00       	jmp    c001e285 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e0ba:	66 81 f9 01 01       	cmp    cx,0x101
c001e0bf:	0f 85 7a 01 00 00    	jne    c001e23f <PCI::foundDevice(PCIDeviceInfo)+0x3f1>
c001e0c5:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c001e0cc:	75 25                	jne    c001e0f3 <PCI::foundDevice(PCIDeviceInfo)+0x2a5>
c001e0ce:	83 ec 0c             	sub    esp,0xc
c001e0d1:	68 70 02 00 00       	push   0x270
c001e0d6:	e8 dc bb fe ff       	call   c0009cb7 <malloc>
c001e0db:	89 04 24             	mov    DWORD PTR [esp],eax
c001e0de:	89 c5                	mov    ebp,eax
c001e0e0:	e8 df 05 00 00       	call   c001e6c4 <IDE::IDE()>
c001e0e5:	83 c4 10             	add    esp,0x10
c001e0e8:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c001e0ef:	74 4a                	je     c001e13b <PCI::foundDevice(PCIDeviceInfo)+0x2ed>
c001e0f1:	eb 2f                	jmp    c001e122 <PCI::foundDevice(PCIDeviceInfo)+0x2d4>
c001e0f3:	83 ec 0c             	sub    esp,0xc
c001e0f6:	68 01 67 02 c0       	push   0xc0026701
c001e0fb:	e8 11 bc fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001e100:	83 c4 10             	add    esp,0x10
c001e103:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c001e10a:	75 c2                	jne    c001e0ce <PCI::foundDevice(PCIDeviceInfo)+0x280>
c001e10c:	e4 60                	in     al,0x60
c001e10e:	3c 5a                	cmp    al,0x5a
c001e110:	74 04                	je     c001e116 <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001e112:	3c 1c                	cmp    al,0x1c
c001e114:	75 f6                	jne    c001e10c <PCI::foundDevice(PCIDeviceInfo)+0x2be>
c001e116:	e4 60                	in     al,0x60
c001e118:	3c 5a                	cmp    al,0x5a
c001e11a:	74 fa                	je     c001e116 <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001e11c:	3c 1c                	cmp    al,0x1c
c001e11e:	74 f6                	je     c001e116 <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001e120:	eb ac                	jmp    c001e0ce <PCI::foundDevice(PCIDeviceInfo)+0x280>
c001e122:	83 ec 0c             	sub    esp,0xc
c001e125:	68 08 67 02 c0       	push   0xc0026708
c001e12a:	e8 e2 bb fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001e12f:	83 c4 10             	add    esp,0x10
c001e132:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c001e139:	74 1b                	je     c001e156 <PCI::foundDevice(PCIDeviceInfo)+0x308>
c001e13b:	57                   	push   edi
c001e13c:	57                   	push   edi
c001e13d:	55                   	push   ebp
c001e13e:	53                   	push   ebx
c001e13f:	e8 32 03 ff ff       	call   c000e476 <Device::addChild(Device*)>
c001e144:	83 c4 10             	add    esp,0x10
c001e147:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c001e14e:	74 33                	je     c001e183 <PCI::foundDevice(PCIDeviceInfo)+0x335>
c001e150:	eb 18                	jmp    c001e16a <PCI::foundDevice(PCIDeviceInfo)+0x31c>
c001e152:	3c 1c                	cmp    al,0x1c
c001e154:	74 0c                	je     c001e162 <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001e156:	e4 60                	in     al,0x60
c001e158:	3c 5a                	cmp    al,0x5a
c001e15a:	75 f6                	jne    c001e152 <PCI::foundDevice(PCIDeviceInfo)+0x304>
c001e15c:	eb 04                	jmp    c001e162 <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001e15e:	3c 1c                	cmp    al,0x1c
c001e160:	75 d9                	jne    c001e13b <PCI::foundDevice(PCIDeviceInfo)+0x2ed>
c001e162:	e4 60                	in     al,0x60
c001e164:	3c 5a                	cmp    al,0x5a
c001e166:	74 fa                	je     c001e162 <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001e168:	eb f4                	jmp    c001e15e <PCI::foundDevice(PCIDeviceInfo)+0x310>
c001e16a:	83 ec 0c             	sub    esp,0xc
c001e16d:	68 0f 67 02 c0       	push   0xc002670f
c001e172:	e8 9a bb fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001e177:	83 c4 10             	add    esp,0x10
c001e17a:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c001e181:	74 29                	je     c001e1ac <PCI::foundDevice(PCIDeviceInfo)+0x35e>
c001e183:	83 ec 2c             	sub    esp,0x2c
c001e186:	b9 09 00 00 00       	mov    ecx,0x9
c001e18b:	8d 74 24 60          	lea    esi,[esp+0x60]
c001e18f:	fc                   	cld    
c001e190:	89 e7                	mov    edi,esp
c001e192:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e194:	55                   	push   ebp
c001e195:	e8 ee 01 ff ff       	call   c000e388 <Device::preOpenPCI(PCIDeviceInfo)>
c001e19a:	83 c4 30             	add    esp,0x30
c001e19d:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c001e1a4:	74 33                	je     c001e1d9 <PCI::foundDevice(PCIDeviceInfo)+0x38b>
c001e1a6:	eb 18                	jmp    c001e1c0 <PCI::foundDevice(PCIDeviceInfo)+0x372>
c001e1a8:	3c 1c                	cmp    al,0x1c
c001e1aa:	74 0c                	je     c001e1b8 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001e1ac:	e4 60                	in     al,0x60
c001e1ae:	3c 5a                	cmp    al,0x5a
c001e1b0:	75 f6                	jne    c001e1a8 <PCI::foundDevice(PCIDeviceInfo)+0x35a>
c001e1b2:	eb 04                	jmp    c001e1b8 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001e1b4:	3c 1c                	cmp    al,0x1c
c001e1b6:	75 cb                	jne    c001e183 <PCI::foundDevice(PCIDeviceInfo)+0x335>
c001e1b8:	e4 60                	in     al,0x60
c001e1ba:	3c 5a                	cmp    al,0x5a
c001e1bc:	74 fa                	je     c001e1b8 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001e1be:	eb f4                	jmp    c001e1b4 <PCI::foundDevice(PCIDeviceInfo)+0x366>
c001e1c0:	83 ec 0c             	sub    esp,0xc
c001e1c3:	68 16 67 02 c0       	push   0xc0026716
c001e1c8:	e8 44 bb fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001e1cd:	83 c4 10             	add    esp,0x10
c001e1d0:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c001e1d7:	74 23                	je     c001e1fc <PCI::foundDevice(PCIDeviceInfo)+0x3ae>
c001e1d9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001e1dc:	6a 00                	push   0x0
c001e1de:	6a 00                	push   0x0
c001e1e0:	6a 00                	push   0x0
c001e1e2:	55                   	push   ebp
c001e1e3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e1e6:	83 c4 10             	add    esp,0x10
c001e1e9:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c001e1f0:	0f 84 8f 00 00 00    	je     c001e285 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e1f6:	eb 18                	jmp    c001e210 <PCI::foundDevice(PCIDeviceInfo)+0x3c2>
c001e1f8:	3c 1c                	cmp    al,0x1c
c001e1fa:	74 0c                	je     c001e208 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001e1fc:	e4 60                	in     al,0x60
c001e1fe:	3c 5a                	cmp    al,0x5a
c001e200:	75 f6                	jne    c001e1f8 <PCI::foundDevice(PCIDeviceInfo)+0x3aa>
c001e202:	eb 04                	jmp    c001e208 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001e204:	3c 1c                	cmp    al,0x1c
c001e206:	75 d1                	jne    c001e1d9 <PCI::foundDevice(PCIDeviceInfo)+0x38b>
c001e208:	e4 60                	in     al,0x60
c001e20a:	3c 5a                	cmp    al,0x5a
c001e20c:	74 fa                	je     c001e208 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001e20e:	eb f4                	jmp    c001e204 <PCI::foundDevice(PCIDeviceInfo)+0x3b6>
c001e210:	83 ec 0c             	sub    esp,0xc
c001e213:	68 1d 67 02 c0       	push   0xc002671d
c001e218:	e8 f4 ba fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001e21d:	83 c4 10             	add    esp,0x10
c001e220:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c001e227:	75 5c                	jne    c001e285 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e229:	e4 60                	in     al,0x60
c001e22b:	3c 5a                	cmp    al,0x5a
c001e22d:	74 04                	je     c001e233 <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001e22f:	3c 1c                	cmp    al,0x1c
c001e231:	75 f6                	jne    c001e229 <PCI::foundDevice(PCIDeviceInfo)+0x3db>
c001e233:	e4 60                	in     al,0x60
c001e235:	3c 5a                	cmp    al,0x5a
c001e237:	74 fa                	je     c001e233 <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001e239:	3c 1c                	cmp    al,0x1c
c001e23b:	74 f6                	je     c001e233 <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001e23d:	eb 46                	jmp    c001e285 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e23f:	83 ec 0c             	sub    esp,0xc
c001e242:	68 58 01 00 00       	push   0x158
c001e247:	e8 6b ba fe ff       	call   c0009cb7 <malloc>
c001e24c:	89 c5                	mov    ebp,eax
c001e24e:	58                   	pop    eax
c001e24f:	5a                   	pop    edx
c001e250:	68 24 67 02 c0       	push   0xc0026724
c001e255:	55                   	push   ebp
c001e256:	e8 25 05 ff ff       	call   c000e780 <DriverlessDevice::DriverlessDevice(char const*)>
c001e25b:	59                   	pop    ecx
c001e25c:	5e                   	pop    esi
c001e25d:	55                   	push   ebp
c001e25e:	53                   	push   ebx
c001e25f:	e8 12 02 ff ff       	call   c000e476 <Device::addChild(Device*)>
c001e264:	83 c4 10             	add    esp,0x10
c001e267:	b9 09 00 00 00       	mov    ecx,0x9
c001e26c:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001e270:	fc                   	cld    
c001e271:	89 fe                	mov    esi,edi
c001e273:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e275:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001e279:	83 c4 1c             	add    esp,0x1c
c001e27c:	5b                   	pop    ebx
c001e27d:	5e                   	pop    esi
c001e27e:	5f                   	pop    edi
c001e27f:	5d                   	pop    ebp
c001e280:	e9 03 01 ff ff       	jmp    c000e388 <Device::preOpenPCI(PCIDeviceInfo)>
c001e285:	83 c4 1c             	add    esp,0x1c
c001e288:	5b                   	pop    ebx
c001e289:	5e                   	pop    esi
c001e28a:	5f                   	pop    edi
c001e28b:	5d                   	pop    ebp
c001e28c:	c3                   	ret    
c001e28d:	90                   	nop

c001e28e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001e28e:	55                   	push   ebp
c001e28f:	57                   	push   edi
c001e290:	56                   	push   esi
c001e291:	53                   	push   ebx
c001e292:	81 ec b4 00 00 00    	sub    esp,0xb4
c001e298:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
c001e29f:	8b ac 24 c8 00 00 00 	mov    ebp,DWORD PTR [esp+0xc8]
c001e2a6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e2aa:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c001e2b1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e2b5:	8b 84 24 d4 00 00 00 	mov    eax,DWORD PTR [esp+0xd4]
c001e2bc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e2c0:	68 3e 67 02 c0       	push   0xc002673e
c001e2c5:	8d 5c 24 48          	lea    ebx,[esp+0x48]
c001e2c9:	53                   	push   ebx
c001e2ca:	e8 69 24 fe ff       	call   c0000738 <strcpy>
c001e2cf:	0f b6 4c 24 24       	movzx  ecx,BYTE PTR [esp+0x24]
c001e2d4:	b2 64                	mov    dl,0x64
c001e2d6:	89 c8                	mov    eax,ecx
c001e2d8:	f6 f2                	div    dl
c001e2da:	b2 0a                	mov    dl,0xa
c001e2dc:	83 c0 30             	add    eax,0x30
c001e2df:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001e2e3:	88 44 24 4c          	mov    BYTE PTR [esp+0x4c],al
c001e2e7:	83 c4 10             	add    esp,0x10
c001e2ea:	89 c8                	mov    eax,ecx
c001e2ec:	f6 f2                	div    dl
c001e2ee:	89 c1                	mov    ecx,eax
c001e2f0:	0f b6 c0             	movzx  eax,al
c001e2f3:	88 e9                	mov    cl,ch
c001e2f5:	f6 f2                	div    dl
c001e2f7:	88 e0                	mov    al,ah
c001e2f9:	83 c0 30             	add    eax,0x30
c001e2fc:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001e300:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001e304:	8d 41 30             	lea    eax,[ecx+0x30]
c001e307:	88 44 24 25          	mov    BYTE PTR [esp+0x25],al
c001e30b:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c001e30f:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c001e314:	f6 f2                	div    dl
c001e316:	89 c1                	mov    ecx,eax
c001e318:	0f b6 c0             	movzx  eax,al
c001e31b:	88 e9                	mov    cl,ch
c001e31d:	f6 f2                	div    dl
c001e31f:	88 e0                	mov    al,ah
c001e321:	83 c0 30             	add    eax,0x30
c001e324:	88 44 24 26          	mov    BYTE PTR [esp+0x26],al
c001e328:	88 44 24 40          	mov    BYTE PTR [esp+0x40],al
c001e32c:	8d 41 30             	lea    eax,[ecx+0x30]
c001e32f:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001e333:	88 44 24 41          	mov    BYTE PTR [esp+0x41],al
c001e337:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001e33c:	f6 f2                	div    dl
c001e33e:	89 c1                	mov    ecx,eax
c001e340:	0f b6 c0             	movzx  eax,al
c001e343:	88 e9                	mov    cl,ch
c001e345:	f6 f2                	div    dl
c001e347:	88 e0                	mov    al,ah
c001e349:	83 c0 30             	add    eax,0x30
c001e34c:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c001e353:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001e357:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001e35b:	8d 41 30             	lea    eax,[ecx+0x30]
c001e35e:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c001e362:	88 44 24 44          	mov    BYTE PTR [esp+0x44],al
c001e366:	74 29                	je     c001e391 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x103>
c001e368:	83 ec 0c             	sub    esp,0xc
c001e36b:	53                   	push   ebx
c001e36c:	e8 a0 b9 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001e371:	83 c4 10             	add    esp,0x10
c001e374:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c001e37b:	75 14                	jne    c001e391 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x103>
c001e37d:	e4 60                	in     al,0x60
c001e37f:	3c 1c                	cmp    al,0x1c
c001e381:	74 04                	je     c001e387 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001e383:	3c 5a                	cmp    al,0x5a
c001e385:	75 f6                	jne    c001e37d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xef>
c001e387:	e4 60                	in     al,0x60
c001e389:	3c 5a                	cmp    al,0x5a
c001e38b:	74 fa                	je     c001e387 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001e38d:	3c 1c                	cmp    al,0x1c
c001e38f:	74 f6                	je     c001e387 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001e391:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c001e396:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c001e39b:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001e3a0:	83 ec 0c             	sub    esp,0xc
c001e3a3:	6a 0c                	push   0xc
c001e3a5:	56                   	push   esi
c001e3a6:	53                   	push   ebx
c001e3a7:	57                   	push   edi
c001e3a8:	55                   	push   ebp
c001e3a9:	e8 68 f3 ff ff       	call   c001d716 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e3ae:	83 c4 20             	add    esp,0x20
c001e3b1:	56                   	push   esi
c001e3b2:	53                   	push   ebx
c001e3b3:	57                   	push   edi
c001e3b4:	55                   	push   ebp
c001e3b5:	e8 50 f4 ff ff       	call   c001d80a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001e3ba:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c001e3bf:	56                   	push   esi
c001e3c0:	53                   	push   ebx
c001e3c1:	57                   	push   edi
c001e3c2:	55                   	push   ebp
c001e3c3:	e8 d8 f4 ff ff       	call   c001d8a0 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001e3c8:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c001e3cc:	83 c4 14             	add    esp,0x14
c001e3cf:	6a 3c                	push   0x3c
c001e3d1:	56                   	push   esi
c001e3d2:	53                   	push   ebx
c001e3d3:	57                   	push   edi
c001e3d4:	55                   	push   ebp
c001e3d5:	e8 3c f3 ff ff       	call   c001d716 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e3da:	0f b6 c4             	movzx  eax,ah
c001e3dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001e3e1:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001e3e5:	88 84 24 bd 00 00 00 	mov    BYTE PTR [esp+0xbd],al
c001e3ec:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c001e3f1:	83 c4 20             	add    esp,0x20
c001e3f4:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e3fa:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c001e401:	0f 84 38 01 00 00    	je     c001e53f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b1>
c001e407:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001e40f:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c001e414:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e418:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e41e:	39 88 5c 11 00 00    	cmp    DWORD PTR [eax+0x115c],ecx
c001e424:	0f 8e 15 01 00 00    	jle    c001e53f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b1>
c001e42a:	50                   	push   eax
c001e42b:	50                   	push   eax
c001e42c:	68 59 67 02 c0       	push   0xc0026759
c001e431:	8d 44 24 68          	lea    eax,[esp+0x68]
c001e435:	50                   	push   eax
c001e436:	e8 fd 22 fe ff       	call   c0000738 <strcpy>
c001e43b:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001e43f:	b9 0a 00 00 00       	mov    ecx,0xa
c001e444:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001e448:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001e44c:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001e450:	8a 44 24 35          	mov    al,BYTE PTR [esp+0x35]
c001e454:	88 44 24 6e          	mov    BYTE PTR [esp+0x6e],al
c001e458:	8a 44 24 36          	mov    al,BYTE PTR [esp+0x36]
c001e45c:	88 44 24 70          	mov    BYTE PTR [esp+0x70],al
c001e460:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001e464:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c001e468:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001e46c:	88 44 24 73          	mov    BYTE PTR [esp+0x73],al
c001e470:	8a 44 24 39          	mov    al,BYTE PTR [esp+0x39]
c001e474:	88 44 24 74          	mov    BYTE PTR [esp+0x74],al
c001e478:	83 c4 10             	add    esp,0x10
c001e47b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e47f:	99                   	cdq    
c001e480:	f7 f9                	idiv   ecx
c001e482:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e486:	99                   	cdq    
c001e487:	f7 f9                	idiv   ecx
c001e489:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c001e48d:	83 c2 30             	add    edx,0x30
c001e490:	83 c0 30             	add    eax,0x30
c001e493:	88 54 24 66          	mov    BYTE PTR [esp+0x66],dl
c001e497:	88 44 24 67          	mov    BYTE PTR [esp+0x67],al
c001e49b:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c001e4a2:	74 2d                	je     c001e4d1 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x243>
c001e4a4:	83 ec 0c             	sub    esp,0xc
c001e4a7:	8d 44 24 68          	lea    eax,[esp+0x68]
c001e4ab:	50                   	push   eax
c001e4ac:	e8 60 b8 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001e4b1:	83 c4 10             	add    esp,0x10
c001e4b4:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c001e4bb:	75 14                	jne    c001e4d1 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x243>
c001e4bd:	e4 60                	in     al,0x60
c001e4bf:	3c 5a                	cmp    al,0x5a
c001e4c1:	74 04                	je     c001e4c7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001e4c3:	3c 1c                	cmp    al,0x1c
c001e4c5:	75 f6                	jne    c001e4bd <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x22f>
c001e4c7:	e4 60                	in     al,0x60
c001e4c9:	3c 5a                	cmp    al,0x5a
c001e4cb:	74 fa                	je     c001e4c7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001e4cd:	3c 1c                	cmp    al,0x1c
c001e4cf:	74 f6                	je     c001e4c7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001e4d1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e4d5:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c001e4da:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e4e0:	8d 04 d0             	lea    eax,[eax+edx*8]
c001e4e3:	0f b7 90 5c 01 00 00 	movzx  edx,WORD PTR [eax+0x15c]
c001e4ea:	39 d3                	cmp    ebx,edx
c001e4ec:	75 48                	jne    c001e536 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2a8>
c001e4ee:	0f b6 80 5e 01 00 00 	movzx  eax,BYTE PTR [eax+0x15e]
c001e4f5:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c001e4f9:	75 3b                	jne    c001e536 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2a8>
c001e4fb:	83 ec 0c             	sub    esp,0xc
c001e4fe:	68 88 67 02 c0       	push   0xc0026788
c001e503:	e8 bd ea fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001e508:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e50c:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c001e511:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e517:	0f b6 84 d0 5f 01 00 00 	movzx  eax,BYTE PTR [eax+edx*8+0x15f]
c001e51f:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001e523:	50                   	push   eax
c001e524:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001e528:	53                   	push   ebx
c001e529:	68 ad 67 02 c0       	push   0xc00267ad
c001e52e:	e8 92 ea fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001e533:	83 c4 20             	add    esp,0x20
c001e536:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001e53a:	e9 d0 fe ff ff       	jmp    c001e40f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x181>
c001e53f:	31 d2                	xor    edx,edx
c001e541:	83 ec 0c             	sub    esp,0xc
c001e544:	56                   	push   esi
c001e545:	53                   	push   ebx
c001e546:	57                   	push   edi
c001e547:	52                   	push   edx
c001e548:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001e54c:	55                   	push   ebp
c001e54d:	e8 9a f3 ff ff       	call   c001d8ec <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e552:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e556:	89 84 94 a4 00 00 00 	mov    DWORD PTR [esp+edx*4+0xa4],eax
c001e55d:	42                   	inc    edx
c001e55e:	83 c4 20             	add    esp,0x20
c001e561:	83 fa 06             	cmp    edx,0x6
c001e564:	75 db                	jne    c001e541 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b3>
c001e566:	66 8b 44 24 2a       	mov    ax,WORD PTR [esp+0x2a]
c001e56b:	83 ec 0c             	sub    esp,0xc
c001e56e:	86 e0                	xchg   al,ah
c001e570:	66 89 84 24 88 00 00 00 	mov    WORD PTR [esp+0x88],ax
c001e578:	6a 02                	push   0x2
c001e57a:	56                   	push   esi
c001e57b:	53                   	push   ebx
c001e57c:	57                   	push   edi
c001e57d:	55                   	push   ebp
c001e57e:	e8 93 f1 ff ff       	call   c001d716 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e583:	66 89 84 24 be 00 00 00 	mov    WORD PTR [esp+0xbe],ax
c001e58b:	83 c4 20             	add    esp,0x20
c001e58e:	56                   	push   esi
c001e58f:	53                   	push   ebx
c001e590:	57                   	push   edi
c001e591:	55                   	push   ebp
c001e592:	e8 bd f2 ff ff       	call   c001d854 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001e597:	88 84 24 93 00 00 00 	mov    BYTE PTR [esp+0x93],al
c001e59e:	56                   	push   esi
c001e59f:	53                   	push   ebx
c001e5a0:	57                   	push   edi
c001e5a1:	55                   	push   ebp
c001e5a2:	e8 17 f2 ff ff       	call   c001d7be <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e5a7:	b9 09 00 00 00       	mov    ecx,0x9
c001e5ac:	66 89 84 24 9e 00 00 00 	mov    WORD PTR [esp+0x9e],ax
c001e5b4:	8a 44 24 42          	mov    al,BYTE PTR [esp+0x42]
c001e5b8:	88 84 24 bc 00 00 00 	mov    BYTE PTR [esp+0xbc],al
c001e5bf:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001e5c3:	88 84 24 a0 00 00 00 	mov    BYTE PTR [esp+0xa0],al
c001e5ca:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001e5ce:	88 84 24 a1 00 00 00 	mov    BYTE PTR [esp+0xa1],al
c001e5d5:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001e5d9:	88 84 24 a2 00 00 00 	mov    BYTE PTR [esp+0xa2],al
c001e5e0:	83 ec 0c             	sub    esp,0xc
c001e5e3:	fc                   	cld    
c001e5e4:	89 e7                	mov    edi,esp
c001e5e6:	8d b4 24 a8 00 00 00 	lea    esi,[esp+0xa8]
c001e5ed:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e5ef:	55                   	push   ebp
c001e5f0:	e8 59 f8 ff ff       	call   c001de4e <PCI::foundDevice(PCIDeviceInfo)>
c001e5f5:	81 c4 dc 00 00 00    	add    esp,0xdc
c001e5fb:	5b                   	pop    ebx
c001e5fc:	5e                   	pop    esi
c001e5fd:	5f                   	pop    edi
c001e5fe:	5d                   	pop    ebp
c001e5ff:	c3                   	ret    

c001e600 <PCI::checkDevice(unsigned char, unsigned char)>:
c001e600:	55                   	push   ebp
c001e601:	57                   	push   edi
c001e602:	56                   	push   esi
c001e603:	53                   	push   ebx
c001e604:	83 ec 0c             	sub    esp,0xc
c001e607:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001e60b:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001e610:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001e615:	6a 00                	push   0x0
c001e617:	56                   	push   esi
c001e618:	57                   	push   edi
c001e619:	55                   	push   ebp
c001e61a:	e8 9f f1 ff ff       	call   c001d7be <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e61f:	6a 00                	push   0x0
c001e621:	56                   	push   esi
c001e622:	57                   	push   edi
c001e623:	55                   	push   ebp
c001e624:	e8 65 fc ff ff       	call   c001e28e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001e629:	83 c4 20             	add    esp,0x20
c001e62c:	6a 00                	push   0x0
c001e62e:	56                   	push   esi
c001e62f:	57                   	push   edi
c001e630:	55                   	push   ebp
c001e631:	e8 ac f1 ff ff       	call   c001d7e2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001e636:	83 c4 10             	add    esp,0x10
c001e639:	84 c0                	test   al,al
c001e63b:	79 27                	jns    c001e664 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001e63d:	bb 01 00 00 00       	mov    ebx,0x1
c001e642:	53                   	push   ebx
c001e643:	56                   	push   esi
c001e644:	57                   	push   edi
c001e645:	55                   	push   ebp
c001e646:	e8 73 f1 ff ff       	call   c001d7be <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e64b:	83 c4 10             	add    esp,0x10
c001e64e:	66 40                	inc    ax
c001e650:	74 0c                	je     c001e65e <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001e652:	53                   	push   ebx
c001e653:	56                   	push   esi
c001e654:	57                   	push   edi
c001e655:	55                   	push   ebp
c001e656:	e8 33 fc ff ff       	call   c001e28e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001e65b:	83 c4 10             	add    esp,0x10
c001e65e:	43                   	inc    ebx
c001e65f:	83 fb 08             	cmp    ebx,0x8
c001e662:	75 de                	jne    c001e642 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001e664:	83 c4 0c             	add    esp,0xc
c001e667:	5b                   	pop    ebx
c001e668:	5e                   	pop    esi
c001e669:	5f                   	pop    edi
c001e66a:	5d                   	pop    ebp
c001e66b:	c3                   	ret    

c001e66c <PCI::detect()>:
c001e66c:	56                   	push   esi
c001e66d:	53                   	push   ebx
c001e66e:	53                   	push   ebx
c001e66f:	31 db                	xor    ebx,ebx
c001e671:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e675:	6a 00                	push   0x0
c001e677:	6a 00                	push   0x0
c001e679:	6a 00                	push   0x0
c001e67b:	56                   	push   esi
c001e67c:	e8 61 f1 ff ff       	call   c001d7e2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001e681:	83 c4 10             	add    esp,0x10
c001e684:	a8 80                	test   al,0x80
c001e686:	75 21                	jne    c001e6a9 <PCI::detect()+0x3d>
c001e688:	51                   	push   ecx
c001e689:	51                   	push   ecx
c001e68a:	6a 00                	push   0x0
c001e68c:	56                   	push   esi
c001e68d:	e8 98 f7 ff ff       	call   c001de2a <PCI::checkBus(unsigned char)>
c001e692:	83 c4 10             	add    esp,0x10
c001e695:	eb 24                	jmp    c001e6bb <PCI::detect()+0x4f>
c001e697:	52                   	push   edx
c001e698:	52                   	push   edx
c001e699:	53                   	push   ebx
c001e69a:	43                   	inc    ebx
c001e69b:	56                   	push   esi
c001e69c:	e8 89 f7 ff ff       	call   c001de2a <PCI::checkBus(unsigned char)>
c001e6a1:	83 c4 10             	add    esp,0x10
c001e6a4:	83 fb 08             	cmp    ebx,0x8
c001e6a7:	74 12                	je     c001e6bb <PCI::detect()+0x4f>
c001e6a9:	53                   	push   ebx
c001e6aa:	6a 00                	push   0x0
c001e6ac:	6a 00                	push   0x0
c001e6ae:	56                   	push   esi
c001e6af:	e8 0a f1 ff ff       	call   c001d7be <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e6b4:	83 c4 10             	add    esp,0x10
c001e6b7:	66 40                	inc    ax
c001e6b9:	74 dc                	je     c001e697 <PCI::detect()+0x2b>
c001e6bb:	58                   	pop    eax
c001e6bc:	5b                   	pop    ebx
c001e6bd:	5e                   	pop    esi
c001e6be:	c3                   	ret    
c001e6bf:	90                   	nop

c001e6c0 <IDE::close(int, int, void*)>:
c001e6c0:	83 c8 ff             	or     eax,0xffffffff
c001e6c3:	c3                   	ret    

c001e6c4 <IDE::IDE()>:
c001e6c4:	83 ec 0c             	sub    esp,0xc
c001e6c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6cb:	83 ec 08             	sub    esp,0x8
c001e6ce:	68 f4 67 02 c0       	push   0xc00267f4
c001e6d3:	50                   	push   eax
c001e6d4:	e8 4b 01 ff ff       	call   c000e824 <HardDiskController::HardDiskController(char const*)>
c001e6d9:	83 c4 10             	add    esp,0x10
c001e6dc:	ba a0 68 02 c0       	mov    edx,0xc00268a0
c001e6e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6e5:	89 10                	mov    DWORD PTR [eax],edx
c001e6e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6eb:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001e6f2:	90                   	nop
c001e6f3:	83 c4 0c             	add    esp,0xc
c001e6f6:	c3                   	ret    
c001e6f7:	90                   	nop

c001e6f8 <IDE::prepareInterrupt(unsigned char)>:
c001e6f8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001e6fd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e701:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001e709:	c3                   	ret    

c001e70a <selectDrive(unsigned char, unsigned char)>:
c001e70a:	c3                   	ret    
c001e70b:	90                   	nop

c001e70c <IDE::getBase(unsigned char)>:
c001e70c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001e711:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e715:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001e71d:	c3                   	ret    

c001e71e <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001e71e:	55                   	push   ebp
c001e71f:	57                   	push   edi
c001e720:	56                   	push   esi
c001e721:	53                   	push   ebx
c001e722:	83 ec 1c             	sub    esp,0x1c
c001e725:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e729:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e72d:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001e730:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001e734:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e738:	80 f9 03             	cmp    cl,0x3
c001e73b:	77 51                	ja     c001e78e <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001e73d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e741:	0f b6 f2             	movzx  esi,dl
c001e744:	0f b6 db             	movzx  ebx,bl
c001e747:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001e74a:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001e74e:	83 ca 80             	or     edx,0xffffff80
c001e751:	0f b6 d2             	movzx  edx,dl
c001e754:	52                   	push   edx
c001e755:	6a 0c                	push   0xc
c001e757:	56                   	push   esi
c001e758:	57                   	push   edi
c001e759:	e8 c0 ff ff ff       	call   c001e71e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e75e:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001e763:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e767:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001e76b:	ee                   	out    dx,al
c001e76c:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001e771:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001e775:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001e779:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e77d:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001e785:	83 c4 2c             	add    esp,0x2c
c001e788:	5b                   	pop    ebx
c001e789:	5e                   	pop    esi
c001e78a:	5f                   	pop    edi
c001e78b:	5d                   	pop    ebp
c001e78c:	eb 90                	jmp    c001e71e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e78e:	80 fb 07             	cmp    bl,0x7
c001e791:	77 12                	ja     c001e7a5 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001e793:	0f b6 d2             	movzx  edx,dl
c001e796:	0f b6 db             	movzx  ebx,bl
c001e799:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001e7a1:	89 da                	mov    edx,ebx
c001e7a3:	eb 2f                	jmp    c001e7d4 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001e7a5:	80 fb 0d             	cmp    bl,0xd
c001e7a8:	77 13                	ja     c001e7bd <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001e7aa:	0f b6 d2             	movzx  edx,dl
c001e7ad:	0f b6 db             	movzx  ebx,bl
c001e7b0:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001e7b7:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001e7bb:	eb 17                	jmp    c001e7d4 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001e7bd:	80 fb 15             	cmp    bl,0x15
c001e7c0:	77 13                	ja     c001e7d5 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001e7c2:	0f b6 d2             	movzx  edx,dl
c001e7c5:	0f b6 db             	movzx  ebx,bl
c001e7c8:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001e7d0:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001e7d4:	ee                   	out    dx,al
c001e7d5:	83 c4 1c             	add    esp,0x1c
c001e7d8:	5b                   	pop    ebx
c001e7d9:	5e                   	pop    esi
c001e7da:	5f                   	pop    edi
c001e7db:	5d                   	pop    ebp
c001e7dc:	c3                   	ret    
c001e7dd:	90                   	nop

c001e7de <IDE::read(unsigned char, unsigned char)>:
c001e7de:	55                   	push   ebp
c001e7df:	57                   	push   edi
c001e7e0:	56                   	push   esi
c001e7e1:	53                   	push   ebx
c001e7e2:	83 ec 1c             	sub    esp,0x1c
c001e7e5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e7e9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e7ed:	8d 43 f8             	lea    eax,[ebx-0x8]
c001e7f0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001e7f4:	3c 03                	cmp    al,0x3
c001e7f6:	77 43                	ja     c001e83b <IDE::read(unsigned char, unsigned char)+0x5d>
c001e7f8:	0f b6 f2             	movzx  esi,dl
c001e7fb:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001e7fe:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001e802:	83 c8 80             	or     eax,0xffffff80
c001e805:	0f b6 c0             	movzx  eax,al
c001e808:	50                   	push   eax
c001e809:	6a 0c                	push   0xc
c001e80b:	56                   	push   esi
c001e80c:	57                   	push   edi
c001e80d:	e8 0c ff ff ff       	call   c001e71e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e812:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001e817:	0f b6 c3             	movzx  eax,bl
c001e81a:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001e81e:	ec                   	in     al,dx
c001e81f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001e823:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001e828:	52                   	push   edx
c001e829:	6a 0c                	push   0xc
c001e82b:	56                   	push   esi
c001e82c:	57                   	push   edi
c001e82d:	e8 ec fe ff ff       	call   c001e71e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e832:	83 c4 20             	add    esp,0x20
c001e835:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e839:	eb 49                	jmp    c001e884 <IDE::read(unsigned char, unsigned char)+0xa6>
c001e83b:	80 fb 07             	cmp    bl,0x7
c001e83e:	77 12                	ja     c001e852 <IDE::read(unsigned char, unsigned char)+0x74>
c001e840:	0f b6 d2             	movzx  edx,dl
c001e843:	0f b6 c3             	movzx  eax,bl
c001e846:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001e84e:	89 c2                	mov    edx,eax
c001e850:	eb 31                	jmp    c001e883 <IDE::read(unsigned char, unsigned char)+0xa5>
c001e852:	80 fb 0d             	cmp    bl,0xd
c001e855:	77 13                	ja     c001e86a <IDE::read(unsigned char, unsigned char)+0x8c>
c001e857:	0f b6 d2             	movzx  edx,dl
c001e85a:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001e861:	0f b6 d3             	movzx  edx,bl
c001e864:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001e868:	eb 19                	jmp    c001e883 <IDE::read(unsigned char, unsigned char)+0xa5>
c001e86a:	31 c0                	xor    eax,eax
c001e86c:	80 fb 15             	cmp    bl,0x15
c001e86f:	77 13                	ja     c001e884 <IDE::read(unsigned char, unsigned char)+0xa6>
c001e871:	0f b6 d2             	movzx  edx,dl
c001e874:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001e87c:	0f b6 d3             	movzx  edx,bl
c001e87f:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001e883:	ec                   	in     al,dx
c001e884:	83 c4 1c             	add    esp,0x1c
c001e887:	5b                   	pop    ebx
c001e888:	5e                   	pop    esi
c001e889:	5f                   	pop    edi
c001e88a:	5d                   	pop    ebp
c001e88b:	c3                   	ret    

c001e88c <IDE::waitInterrupt(unsigned char)>:
c001e88c:	55                   	push   ebp
c001e88d:	57                   	push   edi
c001e88e:	56                   	push   esi
c001e88f:	53                   	push   ebx
c001e890:	31 db                	xor    ebx,ebx
c001e892:	83 ec 0c             	sub    esp,0xc
c001e895:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001e899:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001e89e:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001e8a6:	89 e8                	mov    eax,ebp
c001e8a8:	84 c0                	test   al,al
c001e8aa:	75 30                	jne    c001e8dc <IDE::waitInterrupt(unsigned char)+0x50>
c001e8ac:	50                   	push   eax
c001e8ad:	6a 0c                	push   0xc
c001e8af:	56                   	push   esi
c001e8b0:	57                   	push   edi
c001e8b1:	e8 28 ff ff ff       	call   c001e7de <IDE::read(unsigned char, unsigned char)>
c001e8b6:	83 c4 10             	add    esp,0x10
c001e8b9:	a8 01                	test   al,0x1
c001e8bb:	75 27                	jne    c001e8e4 <IDE::waitInterrupt(unsigned char)+0x58>
c001e8bd:	f6 c3 04             	test   bl,0x4
c001e8c0:	75 12                	jne    c001e8d4 <IDE::waitInterrupt(unsigned char)+0x48>
c001e8c2:	83 fb 32             	cmp    ebx,0x32
c001e8c5:	7e 0d                	jle    c001e8d4 <IDE::waitInterrupt(unsigned char)+0x48>
c001e8c7:	83 ec 0c             	sub    esp,0xc
c001e8ca:	6a 64                	push   0x64
c001e8cc:	e8 a7 9d ff ff       	call   c0018678 <milliTenthSleep(unsigned int)>
c001e8d1:	83 c4 10             	add    esp,0x10
c001e8d4:	83 fb 3c             	cmp    ebx,0x3c
c001e8d7:	74 0b                	je     c001e8e4 <IDE::waitInterrupt(unsigned char)+0x58>
c001e8d9:	43                   	inc    ebx
c001e8da:	eb c2                	jmp    c001e89e <IDE::waitInterrupt(unsigned char)+0x12>
c001e8dc:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001e8e4:	83 c4 0c             	add    esp,0xc
c001e8e7:	89 e8                	mov    eax,ebp
c001e8e9:	5b                   	pop    ebx
c001e8ea:	5e                   	pop    esi
c001e8eb:	5f                   	pop    edi
c001e8ec:	5d                   	pop    ebp
c001e8ed:	c3                   	ret    

c001e8ee <ideChannel0IRQHandler(regs*, void*)>:
c001e8ee:	83 ec 10             	sub    esp,0x10
c001e8f1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e8f5:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001e8fc:	6a 07                	push   0x7
c001e8fe:	6a 00                	push   0x0
c001e900:	50                   	push   eax
c001e901:	e8 d8 fe ff ff       	call   c001e7de <IDE::read(unsigned char, unsigned char)>
c001e906:	83 c4 1c             	add    esp,0x1c
c001e909:	c3                   	ret    

c001e90a <ideChannel1IRQHandler(regs*, void*)>:
c001e90a:	83 ec 10             	sub    esp,0x10
c001e90d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e911:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001e918:	6a 07                	push   0x7
c001e91a:	6a 01                	push   0x1
c001e91c:	50                   	push   eax
c001e91d:	e8 bc fe ff ff       	call   c001e7de <IDE::read(unsigned char, unsigned char)>
c001e922:	83 c4 1c             	add    esp,0x1c
c001e925:	c3                   	ret    

c001e926 <IDE::enableIRQs(unsigned char, bool)>:
c001e926:	57                   	push   edi
c001e927:	56                   	push   esi
c001e928:	be 04 00 00 00       	mov    esi,0x4
c001e92d:	53                   	push   ebx
c001e92e:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001e933:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e937:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001e93c:	0f 94 c0             	sete   al
c001e93f:	d1 e0                	shl    eax,1
c001e941:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001e948:	0f b6 c0             	movzx  eax,al
c001e94b:	50                   	push   eax
c001e94c:	6a 0c                	push   0xc
c001e94e:	57                   	push   edi
c001e94f:	53                   	push   ebx
c001e950:	e8 c9 fd ff ff       	call   c001e71e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e955:	83 c4 10             	add    esp,0x10
c001e958:	50                   	push   eax
c001e959:	6a 0c                	push   0xc
c001e95b:	57                   	push   edi
c001e95c:	53                   	push   ebx
c001e95d:	e8 7c fe ff ff       	call   c001e7de <IDE::read(unsigned char, unsigned char)>
c001e962:	83 c4 10             	add    esp,0x10
c001e965:	4e                   	dec    esi
c001e966:	75 f0                	jne    c001e958 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001e968:	5b                   	pop    ebx
c001e969:	5e                   	pop    esi
c001e96a:	5f                   	pop    edi
c001e96b:	c3                   	ret    

c001e96c <IDE::open(int, int, void*)>:
c001e96c:	55                   	push   ebp
c001e96d:	57                   	push   edi
c001e96e:	56                   	push   esi
c001e96f:	53                   	push   ebx
c001e970:	83 ec 1c             	sub    esp,0x1c
c001e973:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e977:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001e980:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001e989:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001e990:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001e997:	0f 85 cb 02 00 00    	jne    c001ec68 <IDE::open(int, int, void*)+0x2fc>
c001e99d:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001e9a3:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001e9a7:	83 e0 7f             	and    eax,0x7f
c001e9aa:	3c 05                	cmp    al,0x5
c001e9ac:	74 04                	je     c001e9b2 <IDE::open(int, int, void*)+0x46>
c001e9ae:	3c 0f                	cmp    al,0xf
c001e9b0:	75 32                	jne    c001e9e4 <IDE::open(int, int, void*)+0x78>
c001e9b2:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001e9b8:	83 e0 fc             	and    eax,0xfffffffc
c001e9bb:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001e9c2:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001e9c8:	83 e0 fc             	and    eax,0xfffffffc
c001e9cb:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001e9d2:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001e9d8:	83 e0 fc             	and    eax,0xfffffffc
c001e9db:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001e9e2:	eb 14                	jmp    c001e9f8 <IDE::open(int, int, void*)+0x8c>
c001e9e4:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001e9ee:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001e9f8:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001e9ff:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001ea06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ea0a:	89 c6                	mov    esi,eax
c001ea0c:	bf f8 0c 00 00       	mov    edi,0xcf8
c001ea11:	c1 e6 10             	shl    esi,0x10
c001ea14:	89 e8                	mov    eax,ebp
c001ea16:	89 fa                	mov    edx,edi
c001ea18:	c1 e0 0b             	shl    eax,0xb
c001ea1b:	09 f0                	or     eax,esi
c001ea1d:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001ea24:	c1 e6 08             	shl    esi,0x8
c001ea27:	09 c6                	or     esi,eax
c001ea29:	89 f0                	mov    eax,esi
c001ea2b:	0d 08 00 00 80       	or     eax,0x80000008
c001ea30:	ef                   	out    dx,eax
c001ea31:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001ea36:	89 ca                	mov    edx,ecx
c001ea38:	ed                   	in     eax,dx
c001ea39:	c1 e8 10             	shr    eax,0x10
c001ea3c:	3d ff ff 00 00       	cmp    eax,0xffff
c001ea41:	0f 84 f5 00 00 00    	je     c001eb3c <IDE::open(int, int, void*)+0x1d0>
c001ea47:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001ea4d:	89 fa                	mov    edx,edi
c001ea4f:	89 f0                	mov    eax,esi
c001ea51:	ef                   	out    dx,eax
c001ea52:	b0 fe                	mov    al,0xfe
c001ea54:	89 ca                	mov    edx,ecx
c001ea56:	ee                   	out    dx,al
c001ea57:	89 f0                	mov    eax,esi
c001ea59:	89 fa                	mov    edx,edi
c001ea5b:	ef                   	out    dx,eax
c001ea5c:	89 ca                	mov    edx,ecx
c001ea5e:	ed                   	in     eax,dx
c001ea5f:	3c fe                	cmp    al,0xfe
c001ea61:	0f 85 a9 00 00 00    	jne    c001eb10 <IDE::open(int, int, void*)+0x1a4>
c001ea67:	8b 15 08 7e 02 c0    	mov    edx,DWORD PTR ds:0xc0027e08
c001ea6d:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001ea74:	74 33                	je     c001eaa9 <IDE::open(int, int, void*)+0x13d>
c001ea76:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001ea7c:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001ea80:	40                   	inc    eax
c001ea81:	83 ec 0c             	sub    esp,0xc
c001ea84:	0f b6 c0             	movzx  eax,al
c001ea87:	50                   	push   eax
c001ea88:	55                   	push   ebp
c001ea89:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ea8d:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001ea93:	51                   	push   ecx
c001ea94:	e8 8f 37 ff ff       	call   c0012228 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001ea99:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001ea9e:	83 c4 1c             	add    esp,0x1c
c001eaa1:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001eaa7:	eb 0a                	jmp    c001eab3 <IDE::open(int, int, void*)+0x147>
c001eaa9:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001eab3:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001eaba:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001eac1:	c1 e1 10             	shl    ecx,0x10
c001eac4:	c1 e0 08             	shl    eax,0x8
c001eac7:	bf f8 0c 00 00       	mov    edi,0xcf8
c001eacc:	09 c1                	or     ecx,eax
c001eace:	89 fa                	mov    edx,edi
c001ead0:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001ead7:	c1 e0 0b             	shl    eax,0xb
c001eada:	09 c1                	or     ecx,eax
c001eadc:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001eae2:	89 c8                	mov    eax,ecx
c001eae4:	ef                   	out    dx,eax
c001eae5:	be fc 0c 00 00       	mov    esi,0xcfc
c001eaea:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001eaf0:	89 f2                	mov    edx,esi
c001eaf2:	ee                   	out    dx,al
c001eaf3:	89 c8                	mov    eax,ecx
c001eaf5:	89 fa                	mov    edx,edi
c001eaf7:	ef                   	out    dx,eax
c001eaf8:	89 f2                	mov    edx,esi
c001eafa:	ed                   	in     eax,dx
c001eafb:	0f b6 c0             	movzx  eax,al
c001eafe:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001eb04:	74 46                	je     c001eb4c <IDE::open(int, int, void*)+0x1e0>
c001eb06:	83 ec 0c             	sub    esp,0xc
c001eb09:	68 0c 68 02 c0       	push   0xc002680c
c001eb0e:	eb 34                	jmp    c001eb44 <IDE::open(int, int, void*)+0x1d8>
c001eb10:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001eb19:	75 17                	jne    c001eb32 <IDE::open(int, int, void*)+0x1c6>
c001eb1b:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001eb20:	74 07                	je     c001eb29 <IDE::open(int, int, void*)+0x1bd>
c001eb22:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001eb27:	75 09                	jne    c001eb32 <IDE::open(int, int, void*)+0x1c6>
c001eb29:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001eb30:	eb 1a                	jmp    c001eb4c <IDE::open(int, int, void*)+0x1e0>
c001eb32:	83 ec 0c             	sub    esp,0xc
c001eb35:	68 14 68 02 c0       	push   0xc0026814
c001eb3a:	eb 08                	jmp    c001eb44 <IDE::open(int, int, void*)+0x1d8>
c001eb3c:	83 ec 0c             	sub    esp,0xc
c001eb3f:	68 45 68 02 c0       	push   0xc0026845
c001eb44:	e8 d4 61 ff ff       	call   c0014d1d <Krnl::panic(char const*)>
c001eb49:	83 c4 10             	add    esp,0x10
c001eb4c:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001eb53:	79 1a                	jns    c001eb6f <IDE::open(int, int, void*)+0x203>
c001eb55:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001eb5b:	83 e0 fc             	and    eax,0xfffffffc
c001eb5e:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001eb65:	83 c0 08             	add    eax,0x8
c001eb68:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001eb6f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001eb75:	89 c2                	mov    edx,eax
c001eb77:	83 e2 0f             	and    edx,0xf
c001eb7a:	66 83 fa 08          	cmp    dx,0x8
c001eb7e:	75 0a                	jne    c001eb8a <IDE::open(int, int, void*)+0x21e>
c001eb80:	83 e8 02             	sub    eax,0x2
c001eb83:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001eb8a:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001eb90:	89 c2                	mov    edx,eax
c001eb92:	83 e2 0f             	and    edx,0xf
c001eb95:	66 83 fa 08          	cmp    dx,0x8
c001eb99:	75 0a                	jne    c001eba5 <IDE::open(int, int, void*)+0x239>
c001eb9b:	83 e8 02             	sub    eax,0x2
c001eb9e:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001eba5:	0f b6 8b c4 00 00 00 	movzx  ecx,BYTE PTR [ebx+0xc4]
c001ebac:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001ebb3:	89 c8                	mov    eax,ecx
c001ebb5:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001ebb8:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001ebbc:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001ebc0:	8d 51 01             	lea    edx,[ecx+0x1]
c001ebc3:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001ebc8:	0f b6 d2             	movzx  edx,dl
c001ebcb:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001ebd2:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001ebd5:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001ebd9:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001ebdd:	8d 48 02             	lea    ecx,[eax+0x2]
c001ebe0:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001ebe5:	0f b6 c9             	movzx  ecx,cl
c001ebe8:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001ebee:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001ebf1:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001ebf5:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001ebf9:	8d 50 03             	lea    edx,[eax+0x3]
c001ebfc:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001ec01:	0f b6 d2             	movzx  edx,dl
c001ec04:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001ec0a:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001ec0d:	83 c0 04             	add    eax,0x4
c001ec10:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001ec14:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001ec18:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001ec1e:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001ec23:	56                   	push   esi
c001ec24:	56                   	push   esi
c001ec25:	0f b7 83 5e 01 00 00 	movzx  eax,WORD PTR [ebx+0x15e]
c001ec2c:	50                   	push   eax
c001ec2d:	68 6f 68 02 c0       	push   0xc002686f
c001ec32:	e8 8e e3 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001ec37:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001ec3e:	83 c4 10             	add    esp,0x10
c001ec41:	66 85 f6             	test   si,si
c001ec44:	74 5f                	je     c001eca5 <IDE::open(int, int, void*)+0x339>
c001ec46:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001ec4d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001ec50:	89 d0                	mov    eax,edx
c001ec52:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001ec56:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001ec5a:	40                   	inc    eax
c001ec5b:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001ec61:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001ec66:	eb 3d                	jmp    c001eca5 <IDE::open(int, int, void*)+0x339>
c001ec68:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001ec6e:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001ec75:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001ec7c:	66 05 06 02          	add    ax,0x206
c001ec80:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ec87:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001ec8e:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001ec95:	66 05 06 02          	add    ax,0x206
c001ec99:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001eca0:	e9 ca fe ff ff       	jmp    c001eb6f <IDE::open(int, int, void*)+0x203>
c001eca5:	50                   	push   eax
c001eca6:	50                   	push   eax
c001eca7:	6a 00                	push   0x0
c001eca9:	53                   	push   ebx
c001ecaa:	e8 49 fa ff ff       	call   c001e6f8 <IDE::prepareInterrupt(unsigned char)>
c001ecaf:	5a                   	pop    edx
c001ecb0:	59                   	pop    ecx
c001ecb1:	6a 01                	push   0x1
c001ecb3:	53                   	push   ebx
c001ecb4:	e8 3f fa ff ff       	call   c001e6f8 <IDE::prepareInterrupt(unsigned char)>
c001ecb9:	83 c4 0c             	add    esp,0xc
c001ecbc:	6a 00                	push   0x0
c001ecbe:	6a 00                	push   0x0
c001ecc0:	53                   	push   ebx
c001ecc1:	e8 60 fc ff ff       	call   c001e926 <IDE::enableIRQs(unsigned char, bool)>
c001ecc6:	83 c4 0c             	add    esp,0xc
c001ecc9:	6a 00                	push   0x0
c001eccb:	6a 01                	push   0x1
c001eccd:	53                   	push   ebx
c001ecce:	e8 53 fc ff ff       	call   c001e926 <IDE::enableIRQs(unsigned char, bool)>
c001ecd3:	83 c4 10             	add    esp,0x10
c001ecd6:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001ecdd:	74 34                	je     c001ed13 <IDE::open(int, int, void*)+0x3a7>
c001ecdf:	83 ec 0c             	sub    esp,0xc
c001ece2:	53                   	push   ebx
c001ece3:	6a 01                	push   0x1
c001ece5:	68 ee e8 01 c0       	push   0xc001e8ee
c001ecea:	6a 0e                	push   0xe
c001ecec:	53                   	push   ebx
c001eced:	e8 fc f6 fe ff       	call   c000e3ee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ecf2:	83 c4 14             	add    esp,0x14
c001ecf5:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001ecfb:	53                   	push   ebx
c001ecfc:	6a 01                	push   0x1
c001ecfe:	68 0a e9 01 c0       	push   0xc001e90a
c001ed03:	6a 0f                	push   0xf
c001ed05:	53                   	push   ebx
c001ed06:	e8 e3 f6 fe ff       	call   c000e3ee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ed0b:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001ed11:	eb 38                	jmp    c001ed4b <IDE::open(int, int, void*)+0x3df>
c001ed13:	83 ec 0c             	sub    esp,0xc
c001ed16:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001ed20:	53                   	push   ebx
c001ed21:	6a 00                	push   0x0
c001ed23:	68 ee e8 01 c0       	push   0xc001e8ee
c001ed28:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001ed2e:	53                   	push   ebx
c001ed2f:	e8 ba f6 fe ff       	call   c000e3ee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ed34:	83 c4 14             	add    esp,0x14
c001ed37:	53                   	push   ebx
c001ed38:	6a 00                	push   0x0
c001ed3a:	68 0a e9 01 c0       	push   0xc001e90a
c001ed3f:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001ed45:	53                   	push   ebx
c001ed46:	e8 a3 f6 fe ff       	call   c000e3ee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ed4b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ed4d:	83 c4 20             	add    esp,0x20
c001ed50:	83 ec 0c             	sub    esp,0xc
c001ed53:	53                   	push   ebx
c001ed54:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001ed57:	83 c4 0c             	add    esp,0xc
c001ed5a:	6a 07                	push   0x7
c001ed5c:	6a 00                	push   0x0
c001ed5e:	53                   	push   ebx
c001ed5f:	e8 7a fa ff ff       	call   c001e7de <IDE::read(unsigned char, unsigned char)>
c001ed64:	83 c4 0c             	add    esp,0xc
c001ed67:	6a 07                	push   0x7
c001ed69:	6a 01                	push   0x1
c001ed6b:	53                   	push   ebx
c001ed6c:	e8 6d fa ff ff       	call   c001e7de <IDE::read(unsigned char, unsigned char)>
c001ed71:	83 c4 0c             	add    esp,0xc
c001ed74:	6a 01                	push   0x1
c001ed76:	6a 00                	push   0x0
c001ed78:	53                   	push   ebx
c001ed79:	e8 a8 fb ff ff       	call   c001e926 <IDE::enableIRQs(unsigned char, bool)>
c001ed7e:	83 c4 0c             	add    esp,0xc
c001ed81:	6a 01                	push   0x1
c001ed83:	6a 01                	push   0x1
c001ed85:	53                   	push   ebx
c001ed86:	e8 9b fb ff ff       	call   c001e926 <IDE::enableIRQs(unsigned char, bool)>
c001ed8b:	83 c4 2c             	add    esp,0x2c
c001ed8e:	31 c0                	xor    eax,eax
c001ed90:	5b                   	pop    ebx
c001ed91:	5e                   	pop    esi
c001ed92:	5f                   	pop    edi
c001ed93:	5d                   	pop    ebp
c001ed94:	c3                   	ret    
c001ed95:	90                   	nop

c001ed96 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001ed96:	55                   	push   ebp
c001ed97:	57                   	push   edi
c001ed98:	56                   	push   esi
c001ed99:	53                   	push   ebx
c001ed9a:	83 ec 1c             	sub    esp,0x1c
c001ed9d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001eda1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001eda5:	8d 50 f8             	lea    edx,[eax-0x8]
c001eda8:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001edac:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001edb0:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001edb4:	80 fa 03             	cmp    dl,0x3
c001edb7:	77 5d                	ja     c001ee16 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001edb9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001edbd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001edc1:	0f b6 db             	movzx  ebx,bl
c001edc4:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001edc7:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001edcb:	83 ca 80             	or     edx,0xffffff80
c001edce:	0f b6 d2             	movzx  edx,dl
c001edd1:	52                   	push   edx
c001edd2:	6a 0c                	push   0xc
c001edd4:	53                   	push   ebx
c001edd5:	56                   	push   esi
c001edd6:	e8 43 f9 ff ff       	call   c001e71e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eddb:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001ede0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ede4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ede8:	0f b6 c0             	movzx  eax,al
c001edeb:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001edef:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001edf1:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001edf6:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001edfa:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001edfe:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ee02:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001ee0a:	83 c4 2c             	add    esp,0x2c
c001ee0d:	5b                   	pop    ebx
c001ee0e:	5e                   	pop    esi
c001ee0f:	5f                   	pop    edi
c001ee10:	5d                   	pop    ebp
c001ee11:	e9 08 f9 ff ff       	jmp    c001e71e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ee16:	3c 07                	cmp    al,0x7
c001ee18:	77 10                	ja     c001ee2a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001ee1a:	0f b6 db             	movzx  ebx,bl
c001ee1d:	0f b6 d0             	movzx  edx,al
c001ee20:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001ee28:	eb 2d                	jmp    c001ee57 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001ee2a:	3c 0d                	cmp    al,0xd
c001ee2c:	77 13                	ja     c001ee41 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001ee2e:	0f b6 db             	movzx  ebx,bl
c001ee31:	0f b6 c0             	movzx  eax,al
c001ee34:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001ee3b:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001ee3f:	eb 16                	jmp    c001ee57 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001ee41:	3c 15                	cmp    al,0x15
c001ee43:	77 14                	ja     c001ee59 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001ee45:	0f b6 db             	movzx  ebx,bl
c001ee48:	0f b6 c0             	movzx  eax,al
c001ee4b:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001ee53:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001ee57:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001ee59:	83 c4 1c             	add    esp,0x1c
c001ee5c:	5b                   	pop    ebx
c001ee5d:	5e                   	pop    esi
c001ee5e:	5f                   	pop    edi
c001ee5f:	5d                   	pop    ebp
c001ee60:	c3                   	ret    
c001ee61:	90                   	nop

c001ee62 <IDE::detect()>:
c001ee62:	55                   	push   ebp
c001ee63:	57                   	push   edi
c001ee64:	56                   	push   esi
c001ee65:	53                   	push   ebx
c001ee66:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001ee6c:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001ee73:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001ee7a:	0f 85 97 02 00 00    	jne    c001f117 <IDE::detect()+0x2b5>
c001ee80:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001ee87:	31 f6                	xor    esi,esi
c001ee89:	31 ed                	xor    ebp,ebp
c001ee8b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ee93:	89 e8                	mov    eax,ebp
c001ee95:	c1 e0 06             	shl    eax,0x6
c001ee98:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001eea0:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001eea4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001eea8:	c1 e0 04             	shl    eax,0x4
c001eeab:	83 c8 a0             	or     eax,0xffffffa0
c001eeae:	0f b6 c0             	movzx  eax,al
c001eeb1:	50                   	push   eax
c001eeb2:	6a 06                	push   0x6
c001eeb4:	56                   	push   esi
c001eeb5:	53                   	push   ebx
c001eeb6:	e8 63 f8 ff ff       	call   c001e71e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eebb:	83 c4 0c             	add    esp,0xc
c001eebe:	6a 0c                	push   0xc
c001eec0:	56                   	push   esi
c001eec1:	53                   	push   ebx
c001eec2:	e8 17 f9 ff ff       	call   c001e7de <IDE::read(unsigned char, unsigned char)>
c001eec7:	83 c4 0c             	add    esp,0xc
c001eeca:	6a 0c                	push   0xc
c001eecc:	56                   	push   esi
c001eecd:	53                   	push   ebx
c001eece:	e8 0b f9 ff ff       	call   c001e7de <IDE::read(unsigned char, unsigned char)>
c001eed3:	83 c4 0c             	add    esp,0xc
c001eed6:	6a 0c                	push   0xc
c001eed8:	56                   	push   esi
c001eed9:	53                   	push   ebx
c001eeda:	e8 ff f8 ff ff       	call   c001e7de <IDE::read(unsigned char, unsigned char)>
c001eedf:	83 c4 0c             	add    esp,0xc
c001eee2:	6a 0c                	push   0xc
c001eee4:	56                   	push   esi
c001eee5:	53                   	push   ebx
c001eee6:	e8 f3 f8 ff ff       	call   c001e7de <IDE::read(unsigned char, unsigned char)>
c001eeeb:	68 ec 00 00 00       	push   0xec
c001eef0:	6a 07                	push   0x7
c001eef2:	56                   	push   esi
c001eef3:	53                   	push   ebx
c001eef4:	e8 25 f8 ff ff       	call   c001e71e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eef9:	83 c4 1c             	add    esp,0x1c
c001eefc:	6a 0c                	push   0xc
c001eefe:	56                   	push   esi
c001eeff:	53                   	push   ebx
c001ef00:	e8 d9 f8 ff ff       	call   c001e7de <IDE::read(unsigned char, unsigned char)>
c001ef05:	83 c4 0c             	add    esp,0xc
c001ef08:	6a 0c                	push   0xc
c001ef0a:	56                   	push   esi
c001ef0b:	53                   	push   ebx
c001ef0c:	e8 cd f8 ff ff       	call   c001e7de <IDE::read(unsigned char, unsigned char)>
c001ef11:	83 c4 0c             	add    esp,0xc
c001ef14:	6a 0c                	push   0xc
c001ef16:	56                   	push   esi
c001ef17:	53                   	push   ebx
c001ef18:	e8 c1 f8 ff ff       	call   c001e7de <IDE::read(unsigned char, unsigned char)>
c001ef1d:	83 c4 0c             	add    esp,0xc
c001ef20:	6a 0c                	push   0xc
c001ef22:	56                   	push   esi
c001ef23:	53                   	push   ebx
c001ef24:	e8 b5 f8 ff ff       	call   c001e7de <IDE::read(unsigned char, unsigned char)>
c001ef29:	83 c4 0c             	add    esp,0xc
c001ef2c:	6a 0c                	push   0xc
c001ef2e:	56                   	push   esi
c001ef2f:	53                   	push   ebx
c001ef30:	e8 a9 f8 ff ff       	call   c001e7de <IDE::read(unsigned char, unsigned char)>
c001ef35:	83 c4 10             	add    esp,0x10
c001ef38:	84 c0                	test   al,al
c001ef3a:	0f 84 5f 01 00 00    	je     c001f09f <IDE::detect()+0x23d>
c001ef40:	31 ff                	xor    edi,edi
c001ef42:	50                   	push   eax
c001ef43:	6a 0c                	push   0xc
c001ef45:	56                   	push   esi
c001ef46:	53                   	push   ebx
c001ef47:	e8 92 f8 ff ff       	call   c001e7de <IDE::read(unsigned char, unsigned char)>
c001ef4c:	83 c4 10             	add    esp,0x10
c001ef4f:	a8 01                	test   al,0x1
c001ef51:	0f 85 69 01 00 00    	jne    c001f0c0 <IDE::detect()+0x25e>
c001ef57:	84 c0                	test   al,al
c001ef59:	78 04                	js     c001ef5f <IDE::detect()+0xfd>
c001ef5b:	a8 08                	test   al,0x8
c001ef5d:	75 23                	jne    c001ef82 <IDE::detect()+0x120>
c001ef5f:	47                   	inc    edi
c001ef60:	81 ff 17 01 00 00    	cmp    edi,0x117
c001ef66:	7e da                	jle    c001ef42 <IDE::detect()+0xe0>
c001ef68:	83 ec 0c             	sub    esp,0xc
c001ef6b:	6a 32                	push   0x32
c001ef6d:	e8 06 97 ff ff       	call   c0018678 <milliTenthSleep(unsigned int)>
c001ef72:	83 c4 10             	add    esp,0x10
c001ef75:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001ef7b:	75 c5                	jne    c001ef42 <IDE::detect()+0xe0>
c001ef7d:	e9 3e 01 00 00       	jmp    c001f0c0 <IDE::detect()+0x25e>
c001ef82:	31 c9                	xor    ecx,ecx
c001ef84:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001ef88:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001ef8c:	83 ec 0c             	sub    esp,0xc
c001ef8f:	68 80 00 00 00       	push   0x80
c001ef94:	57                   	push   edi
c001ef95:	6a 00                	push   0x0
c001ef97:	56                   	push   esi
c001ef98:	53                   	push   ebx
c001ef99:	e8 f8 fd ff ff       	call   c001ed96 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001ef9e:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001efa3:	89 e8                	mov    eax,ebp
c001efa5:	89 d1                	mov    ecx,edx
c001efa7:	c1 e0 06             	shl    eax,0x6
c001efaa:	01 d8                	add    eax,ebx
c001efac:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001efb3:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001efba:	89 f2                	mov    edx,esi
c001efbc:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001efc2:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001efc6:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001efcc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001efd0:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001efd7:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001efdf:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001efe6:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001efee:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001eff4:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001effb:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001f001:	8d 54 24 58          	lea    edx,[esp+0x58]
c001f005:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001f009:	83 c4 20             	add    esp,0x20
c001f00c:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001f00f:	83 c0 02             	add    eax,0x2
c001f012:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001f018:	83 c7 02             	add    edi,0x2
c001f01b:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001f01e:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001f024:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001f028:	75 e2                	jne    c001f00c <IDE::detect()+0x1aa>
c001f02a:	89 e8                	mov    eax,ebp
c001f02c:	c1 e0 06             	shl    eax,0x6
c001f02f:	01 d8                	add    eax,ebx
c001f031:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001f037:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001f03e:	66 c1 ea 09          	shr    dx,0x9
c001f042:	83 e2 01             	and    edx,0x1
c001f045:	84 c9                	test   cl,cl
c001f047:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001f04d:	75 22                	jne    c001f071 <IDE::detect()+0x20f>
c001f04f:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001f056:	74 46                	je     c001f09e <IDE::detect()+0x23c>
c001f058:	83 ec 0c             	sub    esp,0xc
c001f05b:	68 7c 01 00 00       	push   0x17c
c001f060:	e8 52 ac fe ff       	call   c0009cb7 <malloc>
c001f065:	89 c7                	mov    edi,eax
c001f067:	89 04 24             	mov    DWORD PTR [esp],eax
c001f06a:	e8 49 06 00 00       	call   c001f6b8 <ATA::ATA()>
c001f06f:	eb 17                	jmp    c001f088 <IDE::detect()+0x226>
c001f071:	83 ec 0c             	sub    esp,0xc
c001f074:	68 84 01 00 00       	push   0x184
c001f079:	e8 39 ac fe ff       	call   c0009cb7 <malloc>
c001f07e:	89 c7                	mov    edi,eax
c001f080:	89 04 24             	mov    DWORD PTR [esp],eax
c001f083:	e8 b8 0c 00 00       	call   c001fd40 <ATAPI::ATAPI()>
c001f088:	5a                   	pop    edx
c001f089:	59                   	pop    ecx
c001f08a:	57                   	push   edi
c001f08b:	53                   	push   ebx
c001f08c:	e8 e5 f3 fe ff       	call   c000e476 <Device::addChild(Device*)>
c001f091:	8b 07                	mov    eax,DWORD PTR [edi]
c001f093:	53                   	push   ebx
c001f094:	55                   	push   ebp
c001f095:	6a 00                	push   0x0
c001f097:	57                   	push   edi
c001f098:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f09b:	83 c4 20             	add    esp,0x20
c001f09e:	45                   	inc    ebp
c001f09f:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001f0a4:	74 0d                	je     c001f0b3 <IDE::detect()+0x251>
c001f0a6:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001f0ae:	e9 e0 fd ff ff       	jmp    c001ee93 <IDE::detect()+0x31>
c001f0b3:	4e                   	dec    esi
c001f0b4:	74 61                	je     c001f117 <IDE::detect()+0x2b5>
c001f0b6:	be 01 00 00 00       	mov    esi,0x1
c001f0bb:	e9 cb fd ff ff       	jmp    c001ee8b <IDE::detect()+0x29>
c001f0c0:	50                   	push   eax
c001f0c1:	6a 04                	push   0x4
c001f0c3:	56                   	push   esi
c001f0c4:	53                   	push   ebx
c001f0c5:	e8 14 f7 ff ff       	call   c001e7de <IDE::read(unsigned char, unsigned char)>
c001f0ca:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001f0ce:	83 c4 0c             	add    esp,0xc
c001f0d1:	6a 05                	push   0x5
c001f0d3:	56                   	push   esi
c001f0d4:	53                   	push   ebx
c001f0d5:	e8 04 f7 ff ff       	call   c001e7de <IDE::read(unsigned char, unsigned char)>
c001f0da:	83 c4 10             	add    esp,0x10
c001f0dd:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001f0e1:	80 fa 14             	cmp    dl,0x14
c001f0e4:	75 04                	jne    c001f0ea <IDE::detect()+0x288>
c001f0e6:	3c eb                	cmp    al,0xeb
c001f0e8:	eb 07                	jmp    c001f0f1 <IDE::detect()+0x28f>
c001f0ea:	3c 96                	cmp    al,0x96
c001f0ec:	75 b1                	jne    c001f09f <IDE::detect()+0x23d>
c001f0ee:	80 fa 69             	cmp    dl,0x69
c001f0f1:	75 ac                	jne    c001f09f <IDE::detect()+0x23d>
c001f0f3:	68 a1 00 00 00       	push   0xa1
c001f0f8:	6a 07                	push   0x7
c001f0fa:	56                   	push   esi
c001f0fb:	53                   	push   ebx
c001f0fc:	e8 1d f6 ff ff       	call   c001e71e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f101:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001f108:	e8 6b 95 ff ff       	call   c0018678 <milliTenthSleep(unsigned int)>
c001f10d:	83 c4 10             	add    esp,0x10
c001f110:	b1 01                	mov    cl,0x1
c001f112:	e9 6d fe ff ff       	jmp    c001ef84 <IDE::detect()+0x122>
c001f117:	81 c4 1c 02 00 00    	add    esp,0x21c
c001f11d:	5b                   	pop    ebx
c001f11e:	5e                   	pop    esi
c001f11f:	5f                   	pop    edi
c001f120:	5d                   	pop    ebp
c001f121:	c3                   	ret    

c001f122 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001f122:	55                   	push   ebp
c001f123:	57                   	push   edi
c001f124:	56                   	push   esi
c001f125:	53                   	push   ebx
c001f126:	83 ec 1c             	sub    esp,0x1c
c001f129:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f12d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001f131:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f135:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001f139:	88 c3                	mov    bl,al
c001f13b:	84 c0                	test   al,al
c001f13d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f141:	0f 84 81 00 00 00    	je     c001f1c8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f147:	83 ec 0c             	sub    esp,0xc
c001f14a:	68 8b 68 02 c0       	push   0xc002688b
c001f14f:	e8 71 de fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001f154:	83 c4 10             	add    esp,0x10
c001f157:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f15b:	3c 01                	cmp    al,0x1
c001f15d:	74 63                	je     c001f1c2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c001f15f:	3c 02                	cmp    al,0x2
c001f161:	75 53                	jne    c001f1b6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001f163:	d1 e6                	shl    esi,1
c001f165:	09 ee                	or     esi,ebp
c001f167:	50                   	push   eax
c001f168:	89 f0                	mov    eax,esi
c001f16a:	6a 01                	push   0x1
c001f16c:	0f b6 f0             	movzx  esi,al
c001f16f:	c1 e6 06             	shl    esi,0x6
c001f172:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001f17a:	50                   	push   eax
c001f17b:	57                   	push   edi
c001f17c:	e8 5d f6 ff ff       	call   c001e7de <IDE::read(unsigned char, unsigned char)>
c001f181:	83 c4 10             	add    esp,0x10
c001f184:	a8 01                	test   al,0x1
c001f186:	74 02                	je     c001f18a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c001f188:	b3 07                	mov    bl,0x7
c001f18a:	a8 02                	test   al,0x2
c001f18c:	74 02                	je     c001f190 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c001f18e:	b3 03                	mov    bl,0x3
c001f190:	a8 04                	test   al,0x4
c001f192:	74 02                	je     c001f196 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c001f194:	b3 14                	mov    bl,0x14
c001f196:	a8 08                	test   al,0x8
c001f198:	74 02                	je     c001f19c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c001f19a:	b3 03                	mov    bl,0x3
c001f19c:	a8 10                	test   al,0x10
c001f19e:	74 02                	je     c001f1a2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c001f1a0:	b3 15                	mov    bl,0x15
c001f1a2:	a8 20                	test   al,0x20
c001f1a4:	74 02                	je     c001f1a8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c001f1a6:	b3 03                	mov    bl,0x3
c001f1a8:	a8 40                	test   al,0x40
c001f1aa:	74 02                	je     c001f1ae <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c001f1ac:	b3 16                	mov    bl,0x16
c001f1ae:	84 c0                	test   al,al
c001f1b0:	79 16                	jns    c001f1c8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f1b2:	b3 0d                	mov    bl,0xd
c001f1b4:	eb 12                	jmp    c001f1c8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f1b6:	3c 03                	cmp    al,0x3
c001f1b8:	74 0c                	je     c001f1c6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001f1ba:	3c 04                	cmp    al,0x4
c001f1bc:	75 0a                	jne    c001f1c8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f1be:	b3 08                	mov    bl,0x8
c001f1c0:	eb 06                	jmp    c001f1c8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f1c2:	b3 13                	mov    bl,0x13
c001f1c4:	eb 02                	jmp    c001f1c8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f1c6:	b3 17                	mov    bl,0x17
c001f1c8:	83 c4 1c             	add    esp,0x1c
c001f1cb:	88 d8                	mov    al,bl
c001f1cd:	5b                   	pop    ebx
c001f1ce:	5e                   	pop    esi
c001f1cf:	5f                   	pop    edi
c001f1d0:	5d                   	pop    ebp
c001f1d1:	c3                   	ret    

c001f1d2 <IDE::polling(unsigned char, unsigned int)>:
c001f1d2:	57                   	push   edi
c001f1d3:	56                   	push   esi
c001f1d4:	53                   	push   ebx
c001f1d5:	bb 04 00 00 00       	mov    ebx,0x4
c001f1da:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001f1de:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001f1e3:	52                   	push   edx
c001f1e4:	6a 0c                	push   0xc
c001f1e6:	56                   	push   esi
c001f1e7:	57                   	push   edi
c001f1e8:	e8 f1 f5 ff ff       	call   c001e7de <IDE::read(unsigned char, unsigned char)>
c001f1ed:	83 c4 10             	add    esp,0x10
c001f1f0:	4b                   	dec    ebx
c001f1f1:	75 f0                	jne    c001f1e3 <IDE::polling(unsigned char, unsigned int)+0x11>
c001f1f3:	bb a0 86 01 00       	mov    ebx,0x186a0
c001f1f8:	50                   	push   eax
c001f1f9:	6a 0c                	push   0xc
c001f1fb:	56                   	push   esi
c001f1fc:	57                   	push   edi
c001f1fd:	e8 dc f5 ff ff       	call   c001e7de <IDE::read(unsigned char, unsigned char)>
c001f202:	83 c4 10             	add    esp,0x10
c001f205:	a8 01                	test   al,0x1
c001f207:	75 17                	jne    c001f220 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001f209:	a8 20                	test   al,0x20
c001f20b:	75 0f                	jne    c001f21c <IDE::polling(unsigned char, unsigned int)+0x4a>
c001f20d:	4b                   	dec    ebx
c001f20e:	74 10                	je     c001f220 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001f210:	84 c0                	test   al,al
c001f212:	78 e4                	js     c001f1f8 <IDE::polling(unsigned char, unsigned int)+0x26>
c001f214:	a8 08                	test   al,0x8
c001f216:	74 e0                	je     c001f1f8 <IDE::polling(unsigned char, unsigned int)+0x26>
c001f218:	31 c0                	xor    eax,eax
c001f21a:	eb 06                	jmp    c001f222 <IDE::polling(unsigned char, unsigned int)+0x50>
c001f21c:	b0 01                	mov    al,0x1
c001f21e:	eb 02                	jmp    c001f222 <IDE::polling(unsigned char, unsigned int)+0x50>
c001f220:	b0 02                	mov    al,0x2
c001f222:	5b                   	pop    ebx
c001f223:	5e                   	pop    esi
c001f224:	5f                   	pop    edi
c001f225:	c3                   	ret    

c001f226 <SATABus::close(int, int, void*)>:
c001f226:	31 c0                	xor    eax,eax
c001f228:	c3                   	ret    
c001f229:	90                   	nop

c001f22a <SATABus::detect()>:
c001f22a:	c3                   	ret    
c001f22b:	90                   	nop

c001f22c <SATABus::SATABus()>:
c001f22c:	83 ec 0c             	sub    esp,0xc
c001f22f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f233:	83 ec 08             	sub    esp,0x8
c001f236:	68 c4 68 02 c0       	push   0xc00268c4
c001f23b:	50                   	push   eax
c001f23c:	e8 e3 f5 fe ff       	call   c000e824 <HardDiskController::HardDiskController(char const*)>
c001f241:	83 c4 10             	add    esp,0x10
c001f244:	ba 6c 69 02 c0       	mov    edx,0xc002696c
c001f249:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f24d:	89 10                	mov    DWORD PTR [eax],edx
c001f24f:	83 ec 0c             	sub    esp,0xc
c001f252:	6a 50                	push   0x50
c001f254:	e8 00 b2 fe ff       	call   c000a459 <Phys::allocateContiguousPages(int)>
c001f259:	83 c4 10             	add    esp,0x10
c001f25c:	89 c2                	mov    edx,eax
c001f25e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f262:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001f268:	83 ec 0c             	sub    esp,0xc
c001f26b:	6a 50                	push   0x50
c001f26d:	e8 f7 c9 fe ff       	call   c000bc69 <Virt::allocateKernelVirtualPages(int)>
c001f272:	83 c4 10             	add    esp,0x10
c001f275:	89 c2                	mov    edx,eax
c001f277:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f27b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f281:	a1 34 7f 02 c0       	mov    eax,ds:0xc0027f34
c001f286:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f28a:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001f290:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f294:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001f29a:	83 ec 0c             	sub    esp,0xc
c001f29d:	6a 03                	push   0x3
c001f29f:	6a 50                	push   0x50
c001f2a1:	51                   	push   ecx
c001f2a2:	52                   	push   edx
c001f2a3:	50                   	push   eax
c001f2a4:	e8 23 d3 fe ff       	call   c000c5cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001f2a9:	83 c4 20             	add    esp,0x20
c001f2ac:	90                   	nop
c001f2ad:	83 c4 0c             	add    esp,0xc
c001f2b0:	c3                   	ret    
c001f2b1:	90                   	nop

c001f2b2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001f2b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f2b6:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001f2b9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001f2bc:	09 c2                	or     edx,eax
c001f2be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f2c2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f2c8:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f2ca:	31 c0                	xor    eax,eax
c001f2cc:	c1 e9 08             	shr    ecx,0x8
c001f2cf:	83 e1 0f             	and    ecx,0xf
c001f2d2:	39 c8                	cmp    eax,ecx
c001f2d4:	74 0a                	je     c001f2e0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001f2d6:	f6 c2 01             	test   dl,0x1
c001f2d9:	74 08                	je     c001f2e3 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001f2db:	d1 ea                	shr    edx,1
c001f2dd:	40                   	inc    eax
c001f2de:	eb f2                	jmp    c001f2d2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001f2e0:	83 c8 ff             	or     eax,0xffffffff
c001f2e3:	c3                   	ret    

c001f2e4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001f2e4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f2e8:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001f2eb:	89 c2                	mov    edx,eax
c001f2ed:	c1 ea 08             	shr    edx,0x8
c001f2f0:	83 e2 0f             	and    edx,0xf
c001f2f3:	fe ca                	dec    dl
c001f2f5:	75 31                	jne    c001f328 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f2f7:	83 e0 0f             	and    eax,0xf
c001f2fa:	3c 03                	cmp    al,0x3
c001f2fc:	75 2a                	jne    c001f328 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f2fe:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001f301:	b8 02 00 00 00       	mov    eax,0x2
c001f306:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001f30c:	74 1c                	je     c001f32a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f30e:	b8 04 00 00 00       	mov    eax,0x4
c001f313:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001f319:	74 0f                	je     c001f32a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f31b:	31 c0                	xor    eax,eax
c001f31d:	83 fa 03             	cmp    edx,0x3
c001f320:	0f 94 c0             	sete   al
c001f323:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001f327:	c3                   	ret    
c001f328:	31 c0                	xor    eax,eax
c001f32a:	c3                   	ret    
c001f32b:	90                   	nop

c001f32c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001f32c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f330:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f333:	0f ba e2 0f          	bt     edx,0xf
c001f337:	72 f7                	jb     c001f330 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001f339:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f33c:	83 ca 10             	or     edx,0x10
c001f33f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f342:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f345:	83 ca 01             	or     edx,0x1
c001f348:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f34b:	c3                   	ret    

c001f34c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001f34c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f350:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f353:	83 e2 fe             	and    edx,0xfffffffe
c001f356:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f359:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f35c:	83 e2 ef             	and    edx,0xffffffef
c001f35f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f362:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f365:	0f ba e2 0e          	bt     edx,0xe
c001f369:	72 f7                	jb     c001f362 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f36b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f36e:	0f ba e2 0f          	bt     edx,0xf
c001f372:	72 ee                	jb     c001f362 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f374:	c3                   	ret    
c001f375:	90                   	nop

c001f376 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001f376:	55                   	push   ebp
c001f377:	57                   	push   edi
c001f378:	56                   	push   esi
c001f379:	53                   	push   ebx
c001f37a:	83 ec 1c             	sub    esp,0x1c
c001f37d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f381:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f385:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f389:	53                   	push   ebx
c001f38a:	89 fd                	mov    ebp,edi
c001f38c:	56                   	push   esi
c001f38d:	c1 e5 0a             	shl    ebp,0xa
c001f390:	e8 b7 ff ff ff       	call   c001f34c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001f395:	83 ec 0c             	sub    esp,0xc
c001f398:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001f39e:	01 e8                	add    eax,ebp
c001f3a0:	89 03                	mov    DWORD PTR [ebx],eax
c001f3a2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f3a4:	68 00 04 00 00       	push   0x400
c001f3a9:	6a 00                	push   0x0
c001f3ab:	50                   	push   eax
c001f3ac:	e8 cb 12 fe ff       	call   c000067c <memset>
c001f3b1:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001f3b7:	89 fa                	mov    edx,edi
c001f3b9:	01 e8                	add    eax,ebp
c001f3bb:	c1 e7 0d             	shl    edi,0xd
c001f3be:	89 03                	mov    DWORD PTR [ebx],eax
c001f3c0:	c1 e2 08             	shl    edx,0x8
c001f3c3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f3ca:	81 c2 00 80 00 00    	add    edx,0x8000
c001f3d0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001f3d4:	89 d0                	mov    eax,edx
c001f3d6:	83 c4 1c             	add    esp,0x1c
c001f3d9:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001f3df:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001f3e2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001f3e5:	68 00 01 00 00       	push   0x100
c001f3ea:	6a 00                	push   0x0
c001f3ec:	50                   	push   eax
c001f3ed:	e8 8a 12 fe ff       	call   c000067c <memset>
c001f3f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f3f6:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001f3fc:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c001f402:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001f406:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001f409:	83 c4 10             	add    esp,0x10
c001f40c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001f413:	31 ff                	xor    edi,edi
c001f415:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001f41b:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001f421:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f425:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001f42b:	83 c5 20             	add    ebp,0x20
c001f42e:	01 f8                	add    eax,edi
c001f430:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f433:	52                   	push   edx
c001f434:	68 00 01 00 00       	push   0x100
c001f439:	6a 00                	push   0x0
c001f43b:	50                   	push   eax
c001f43c:	e8 3b 12 fe ff       	call   c000067c <memset>
c001f441:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f445:	83 c4 10             	add    esp,0x10
c001f448:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001f44e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001f455:	01 f8                	add    eax,edi
c001f457:	81 c7 00 01 00 00    	add    edi,0x100
c001f45d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f460:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001f466:	75 b3                	jne    c001f41b <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c001f468:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c001f46c:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001f470:	83 c4 1c             	add    esp,0x1c
c001f473:	5b                   	pop    ebx
c001f474:	5e                   	pop    esi
c001f475:	5f                   	pop    edi
c001f476:	5d                   	pop    ebp
c001f477:	e9 b0 fe ff ff       	jmp    c001f32c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c001f47c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001f47c:	55                   	push   ebp
c001f47d:	57                   	push   edi
c001f47e:	56                   	push   esi
c001f47f:	53                   	push   ebx
c001f480:	83 ec 0c             	sub    esp,0xc
c001f483:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f487:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c001f48e:	74 2d                	je     c001f4bd <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x41>
c001f490:	83 ec 0c             	sub    esp,0xc
c001f493:	68 e8 68 02 c0       	push   0xc00268e8
c001f498:	e8 74 a8 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001f49d:	83 c4 10             	add    esp,0x10
c001f4a0:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c001f4a7:	75 14                	jne    c001f4bd <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x41>
c001f4a9:	e4 60                	in     al,0x60
c001f4ab:	3c 1c                	cmp    al,0x1c
c001f4ad:	74 04                	je     c001f4b3 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001f4af:	3c 5a                	cmp    al,0x5a
c001f4b1:	75 f6                	jne    c001f4a9 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x2d>
c001f4b3:	e4 60                	in     al,0x60
c001f4b5:	3c 5a                	cmp    al,0x5a
c001f4b7:	74 fa                	je     c001f4b3 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001f4b9:	3c 1c                	cmp    al,0x1c
c001f4bb:	74 f6                	je     c001f4b3 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001f4bd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f4c1:	31 db                	xor    ebx,ebx
c001f4c3:	8b 68 0c             	mov    ebp,DWORD PTR [eax+0xc]
c001f4c6:	f7 c5 01 00 00 00    	test   ebp,0x1
c001f4cc:	0f 84 78 01 00 00    	je     c001f64a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f4d2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001f4d6:	89 d8                	mov    eax,ebx
c001f4d8:	c1 e0 07             	shl    eax,0x7
c001f4db:	8d bc 02 00 01 00 00 	lea    edi,[edx+eax*1+0x100]
c001f4e2:	50                   	push   eax
c001f4e3:	50                   	push   eax
c001f4e4:	57                   	push   edi
c001f4e5:	56                   	push   esi
c001f4e6:	e8 f9 fd ff ff       	call   c001f2e4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001f4eb:	83 c4 10             	add    esp,0x10
c001f4ee:	83 f8 01             	cmp    eax,0x1
c001f4f1:	0f 85 19 01 00 00    	jne    c001f610 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x194>
c001f4f7:	50                   	push   eax
c001f4f8:	53                   	push   ebx
c001f4f9:	57                   	push   edi
c001f4fa:	56                   	push   esi
c001f4fb:	e8 76 fe ff ff       	call   c001f376 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f500:	83 c4 10             	add    esp,0x10
c001f503:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c001f50a:	74 2d                	je     c001f539 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xbd>
c001f50c:	83 ec 0c             	sub    esp,0xc
c001f50f:	68 fd 68 02 c0       	push   0xc00268fd
c001f514:	e8 f8 a7 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001f519:	83 c4 10             	add    esp,0x10
c001f51c:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c001f523:	75 14                	jne    c001f539 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xbd>
c001f525:	e4 60                	in     al,0x60
c001f527:	3c 1c                	cmp    al,0x1c
c001f529:	74 04                	je     c001f52f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001f52b:	3c 5a                	cmp    al,0x5a
c001f52d:	75 f6                	jne    c001f525 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa9>
c001f52f:	e4 60                	in     al,0x60
c001f531:	3c 5a                	cmp    al,0x5a
c001f533:	74 fa                	je     c001f52f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001f535:	3c 1c                	cmp    al,0x1c
c001f537:	74 f6                	je     c001f52f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001f539:	83 ec 0c             	sub    esp,0xc
c001f53c:	68 7c 01 00 00       	push   0x17c
c001f541:	e8 71 a7 fe ff       	call   c0009cb7 <malloc>
c001f546:	89 04 24             	mov    DWORD PTR [esp],eax
c001f549:	89 c7                	mov    edi,eax
c001f54b:	e8 28 10 00 00       	call   c0020578 <SATA::SATA()>
c001f550:	83 c4 10             	add    esp,0x10
c001f553:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c001f55a:	74 2d                	je     c001f589 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x10d>
c001f55c:	83 ec 0c             	sub    esp,0xc
c001f55f:	68 12 69 02 c0       	push   0xc0026912
c001f564:	e8 a8 a7 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001f569:	83 c4 10             	add    esp,0x10
c001f56c:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c001f573:	75 14                	jne    c001f589 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x10d>
c001f575:	e4 60                	in     al,0x60
c001f577:	3c 5a                	cmp    al,0x5a
c001f579:	74 04                	je     c001f57f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001f57b:	3c 1c                	cmp    al,0x1c
c001f57d:	75 f6                	jne    c001f575 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xf9>
c001f57f:	e4 60                	in     al,0x60
c001f581:	3c 5a                	cmp    al,0x5a
c001f583:	74 fa                	je     c001f57f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001f585:	3c 1c                	cmp    al,0x1c
c001f587:	74 f6                	je     c001f57f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001f589:	50                   	push   eax
c001f58a:	50                   	push   eax
c001f58b:	57                   	push   edi
c001f58c:	56                   	push   esi
c001f58d:	e8 e4 ee fe ff       	call   c000e476 <Device::addChild(Device*)>
c001f592:	83 c4 10             	add    esp,0x10
c001f595:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c001f59c:	74 2d                	je     c001f5cb <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14f>
c001f59e:	83 ec 0c             	sub    esp,0xc
c001f5a1:	68 27 69 02 c0       	push   0xc0026927
c001f5a6:	e8 66 a7 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001f5ab:	83 c4 10             	add    esp,0x10
c001f5ae:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c001f5b5:	75 14                	jne    c001f5cb <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14f>
c001f5b7:	e4 60                	in     al,0x60
c001f5b9:	3c 1c                	cmp    al,0x1c
c001f5bb:	74 04                	je     c001f5c1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001f5bd:	3c 5a                	cmp    al,0x5a
c001f5bf:	75 f6                	jne    c001f5b7 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x13b>
c001f5c1:	e4 60                	in     al,0x60
c001f5c3:	3c 5a                	cmp    al,0x5a
c001f5c5:	74 fa                	je     c001f5c1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001f5c7:	3c 1c                	cmp    al,0x1c
c001f5c9:	74 f6                	je     c001f5c1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001f5cb:	8b 07                	mov    eax,DWORD PTR [edi]
c001f5cd:	56                   	push   esi
c001f5ce:	6a 00                	push   0x0
c001f5d0:	53                   	push   ebx
c001f5d1:	57                   	push   edi
c001f5d2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f5d5:	83 c4 10             	add    esp,0x10
c001f5d8:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c001f5df:	74 69                	je     c001f64a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f5e1:	83 ec 0c             	sub    esp,0xc
c001f5e4:	68 3c 69 02 c0       	push   0xc002693c
c001f5e9:	e8 23 a7 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001f5ee:	83 c4 10             	add    esp,0x10
c001f5f1:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c001f5f8:	75 50                	jne    c001f64a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f5fa:	e4 60                	in     al,0x60
c001f5fc:	3c 1c                	cmp    al,0x1c
c001f5fe:	74 04                	je     c001f604 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001f600:	3c 5a                	cmp    al,0x5a
c001f602:	75 f6                	jne    c001f5fa <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x17e>
c001f604:	e4 60                	in     al,0x60
c001f606:	3c 5a                	cmp    al,0x5a
c001f608:	74 fa                	je     c001f604 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001f60a:	3c 1c                	cmp    al,0x1c
c001f60c:	74 f6                	je     c001f604 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001f60e:	eb 3a                	jmp    c001f64a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f610:	83 f8 04             	cmp    eax,0x4
c001f613:	75 35                	jne    c001f64a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f615:	50                   	push   eax
c001f616:	53                   	push   ebx
c001f617:	57                   	push   edi
c001f618:	56                   	push   esi
c001f619:	e8 58 fd ff ff       	call   c001f376 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f61e:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001f625:	e8 8d a6 fe ff       	call   c0009cb7 <malloc>
c001f62a:	89 04 24             	mov    DWORD PTR [esp],eax
c001f62d:	89 c7                	mov    edi,eax
c001f62f:	e8 ba 17 00 00       	call   c0020dee <SATAPI::SATAPI()>
c001f634:	5a                   	pop    edx
c001f635:	59                   	pop    ecx
c001f636:	57                   	push   edi
c001f637:	56                   	push   esi
c001f638:	e8 39 ee fe ff       	call   c000e476 <Device::addChild(Device*)>
c001f63d:	8b 07                	mov    eax,DWORD PTR [edi]
c001f63f:	56                   	push   esi
c001f640:	6a 00                	push   0x0
c001f642:	53                   	push   ebx
c001f643:	57                   	push   edi
c001f644:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f647:	83 c4 20             	add    esp,0x20
c001f64a:	d1 ed                	shr    ebp,1
c001f64c:	43                   	inc    ebx
c001f64d:	83 fb 20             	cmp    ebx,0x20
c001f650:	0f 85 70 fe ff ff    	jne    c001f4c6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x4a>
c001f656:	83 c4 0c             	add    esp,0xc
c001f659:	5b                   	pop    ebx
c001f65a:	5e                   	pop    esi
c001f65b:	5f                   	pop    edi
c001f65c:	5d                   	pop    ebp
c001f65d:	c3                   	ret    

c001f65e <SATABus::open(int, int, void*)>:
c001f65e:	53                   	push   ebx
c001f65f:	83 ec 10             	sub    esp,0x10
c001f662:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f666:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c001f66c:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001f672:	50                   	push   eax
c001f673:	68 51 69 02 c0       	push   0xc0026951
c001f678:	e8 48 d9 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001f67d:	58                   	pop    eax
c001f67e:	5a                   	pop    edx
c001f67f:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c001f685:	53                   	push   ebx
c001f686:	e8 f1 fd ff ff       	call   c001f47c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001f68b:	31 c0                	xor    eax,eax
c001f68d:	83 c4 18             	add    esp,0x18
c001f690:	5b                   	pop    ebx
c001f691:	c3                   	ret    

c001f692 <ATA::close(int, int, void*)>:
c001f692:	83 ec 0c             	sub    esp,0xc
c001f695:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f699:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f69f:	85 c0                	test   eax,eax
c001f6a1:	74 0c                	je     c001f6af <ATA::close(int, int, void*)+0x1d>
c001f6a3:	83 ec 0c             	sub    esp,0xc
c001f6a6:	8b 10                	mov    edx,DWORD PTR [eax]
c001f6a8:	50                   	push   eax
c001f6a9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f6ac:	83 c4 10             	add    esp,0x10
c001f6af:	31 c0                	xor    eax,eax
c001f6b1:	83 c4 0c             	add    esp,0xc
c001f6b4:	c3                   	ret    
c001f6b5:	90                   	nop

c001f6b6 <ATA::powerSaving(PowerSavingLevel)>:
c001f6b6:	c3                   	ret    
c001f6b7:	90                   	nop

c001f6b8 <ATA::ATA()>:
c001f6b8:	83 ec 0c             	sub    esp,0xc
c001f6bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6bf:	83 ec 04             	sub    esp,0x4
c001f6c2:	68 00 02 00 00       	push   0x200
c001f6c7:	68 ef 6a 02 c0       	push   0xc0026aef
c001f6cc:	50                   	push   eax
c001f6cd:	e8 dc f1 fe ff       	call   c000e8ae <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f6d2:	83 c4 10             	add    esp,0x10
c001f6d5:	ba e4 69 02 c0       	mov    edx,0xc00269e4
c001f6da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6de:	89 10                	mov    DWORD PTR [eax],edx
c001f6e0:	90                   	nop
c001f6e1:	83 c4 0c             	add    esp,0xc
c001f6e4:	c3                   	ret    
c001f6e5:	90                   	nop

c001f6e6 <ATA::flush(bool)>:
c001f6e6:	53                   	push   ebx
c001f6e7:	83 ec 08             	sub    esp,0x8
c001f6ea:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001f6ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f6f3:	19 c0                	sbb    eax,eax
c001f6f5:	83 e0 fd             	and    eax,0xfffffffd
c001f6f8:	05 ea 00 00 00       	add    eax,0xea
c001f6fd:	50                   	push   eax
c001f6fe:	6a 07                	push   0x7
c001f700:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f707:	50                   	push   eax
c001f708:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f70e:	e8 0b f0 ff ff       	call   c001e71e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f713:	83 c4 0c             	add    esp,0xc
c001f716:	6a 00                	push   0x0
c001f718:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f71f:	50                   	push   eax
c001f720:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f726:	e8 a7 fa ff ff       	call   c001f1d2 <IDE::polling(unsigned char, unsigned int)>
c001f72b:	83 c4 18             	add    esp,0x18
c001f72e:	5b                   	pop    ebx
c001f72f:	c3                   	ret    

c001f730 <ATA::readyForCommand()>:
c001f730:	56                   	push   esi
c001f731:	53                   	push   ebx
c001f732:	53                   	push   ebx
c001f733:	31 db                	xor    ebx,ebx
c001f735:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f739:	51                   	push   ecx
c001f73a:	6a 0c                	push   0xc
c001f73c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001f743:	50                   	push   eax
c001f744:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001f74a:	e8 8f f0 ff ff       	call   c001e7de <IDE::read(unsigned char, unsigned char)>
c001f74f:	83 c4 10             	add    esp,0x10
c001f752:	a8 88                	test   al,0x88
c001f754:	74 1f                	je     c001f775 <ATA::readyForCommand()+0x45>
c001f756:	43                   	inc    ebx
c001f757:	83 fb 63             	cmp    ebx,0x63
c001f75a:	7e dd                	jle    c001f739 <ATA::readyForCommand()+0x9>
c001f75c:	83 ec 0c             	sub    esp,0xc
c001f75f:	6a 0a                	push   0xa
c001f761:	e8 12 8f ff ff       	call   c0018678 <milliTenthSleep(unsigned int)>
c001f766:	83 c4 10             	add    esp,0x10
c001f769:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001f76f:	75 c8                	jne    c001f739 <ATA::readyForCommand()+0x9>
c001f771:	31 c0                	xor    eax,eax
c001f773:	eb 02                	jmp    c001f777 <ATA::readyForCommand()+0x47>
c001f775:	b0 01                	mov    al,0x1
c001f777:	5a                   	pop    edx
c001f778:	5b                   	pop    ebx
c001f779:	5e                   	pop    esi
c001f77a:	c3                   	ret    
c001f77b:	90                   	nop

c001f77c <ATA::access(unsigned long long, int, void*, bool)>:
c001f77c:	55                   	push   ebp
c001f77d:	57                   	push   edi
c001f77e:	56                   	push   esi
c001f77f:	53                   	push   ebx
c001f780:	83 ec 38             	sub    esp,0x38
c001f783:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001f787:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001f78b:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001f78f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001f793:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001f797:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001f79b:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001f79f:	68 90 69 02 c0       	push   0xc0026990
c001f7a4:	e8 1c d8 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001f7a9:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001f7af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f7b3:	83 c4 10             	add    esp,0x10
c001f7b6:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001f7bc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f7c0:	c1 e0 06             	shl    eax,0x6
c001f7c3:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001f7cb:	74 5d                	je     c001f82a <ATA::access(unsigned long long, int, void*, bool)+0xae>
c001f7cd:	89 fa                	mov    edx,edi
c001f7cf:	89 f0                	mov    eax,esi
c001f7d1:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001f7d5:	c1 ea 1c             	shr    edx,0x1c
c001f7d8:	89 d1                	mov    ecx,edx
c001f7da:	09 c1                	or     ecx,eax
c001f7dc:	74 25                	je     c001f803 <ATA::access(unsigned long long, int, void*, bool)+0x87>
c001f7de:	31 ed                	xor    ebp,ebp
c001f7e0:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001f7e7:	89 fa                	mov    edx,edi
c001f7e9:	89 f0                	mov    eax,esi
c001f7eb:	0f ad d0             	shrd   eax,edx,cl
c001f7ee:	d3 ea                	shr    edx,cl
c001f7f0:	f6 c1 20             	test   cl,0x20
c001f7f3:	74 02                	je     c001f7f7 <ATA::access(unsigned long long, int, void*, bool)+0x7b>
c001f7f5:	89 d0                	mov    eax,edx
c001f7f7:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001f7fb:	45                   	inc    ebp
c001f7fc:	83 fd 06             	cmp    ebp,0x6
c001f7ff:	75 df                	jne    c001f7e0 <ATA::access(unsigned long long, int, void*, bool)+0x64>
c001f801:	eb 76                	jmp    c001f879 <ATA::access(unsigned long long, int, void*, bool)+0xfd>
c001f803:	89 f0                	mov    eax,esi
c001f805:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001f80a:	89 fa                	mov    edx,edi
c001f80c:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001f813:	0f ac d0 10          	shrd   eax,edx,0x10
c001f817:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001f81c:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001f820:	c1 ee 18             	shr    esi,0x18
c001f823:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f828:	eb 56                	jmp    c001f880 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001f82a:	6a 00                	push   0x0
c001f82c:	6a 3f                	push   0x3f
c001f82e:	57                   	push   edi
c001f82f:	56                   	push   esi
c001f830:	e8 2b 2f 00 00       	call   c0022760 <__umoddi3>
c001f835:	83 c4 10             	add    esp,0x10
c001f838:	40                   	inc    eax
c001f839:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001f83d:	6a 00                	push   0x0
c001f83f:	68 f0 03 00 00       	push   0x3f0
c001f844:	57                   	push   edi
c001f845:	56                   	push   esi
c001f846:	e8 15 2e 00 00       	call   c0022660 <__udivdi3>
c001f84b:	83 c4 10             	add    esp,0x10
c001f84e:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001f853:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001f85a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001f85f:	6a 00                	push   0x0
c001f861:	6a 3f                	push   0x3f
c001f863:	57                   	push   edi
c001f864:	56                   	push   esi
c001f865:	e8 f6 2d 00 00       	call   c0022660 <__udivdi3>
c001f86a:	83 c4 10             	add    esp,0x10
c001f86d:	89 c6                	mov    esi,eax
c001f86f:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001f874:	83 e6 0f             	and    esi,0xf
c001f877:	eb 07                	jmp    c001f880 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001f879:	31 f6                	xor    esi,esi
c001f87b:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001f880:	bf 01 00 00 00       	mov    edi,0x1
c001f885:	50                   	push   eax
c001f886:	6a 00                	push   0x0
c001f888:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f88f:	50                   	push   eax
c001f890:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001f894:	e8 8d f0 ff ff       	call   c001e926 <IDE::enableIRQs(unsigned char, bool)>
c001f899:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f89c:	e8 8f fe ff ff       	call   c001f730 <ATA::readyForCommand()>
c001f8a1:	83 c4 10             	add    esp,0x10
c001f8a4:	84 c0                	test   al,al
c001f8a6:	0f 84 bc 02 00 00    	je     c001fb68 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001f8ac:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001f8b2:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001f8b8:	c1 e0 04             	shl    eax,0x4
c001f8bb:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001f8c2:	09 c6                	or     esi,eax
c001f8c4:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f8c9:	75 05                	jne    c001f8d0 <ATA::access(unsigned long long, int, void*, bool)+0x154>
c001f8cb:	83 ce a0             	or     esi,0xffffffa0
c001f8ce:	eb 03                	jmp    c001f8d3 <ATA::access(unsigned long long, int, void*, bool)+0x157>
c001f8d0:	83 ce e0             	or     esi,0xffffffe0
c001f8d3:	89 f0                	mov    eax,esi
c001f8d5:	0f b6 f0             	movzx  esi,al
c001f8d8:	56                   	push   esi
c001f8d9:	6a 06                	push   0x6
c001f8db:	51                   	push   ecx
c001f8dc:	52                   	push   edx
c001f8dd:	e8 3c ee ff ff       	call   c001e71e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f8e2:	83 c4 10             	add    esp,0x10
c001f8e5:	6a 00                	push   0x0
c001f8e7:	6a 01                	push   0x1
c001f8e9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f8f0:	50                   	push   eax
c001f8f1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f8f7:	e8 22 ee ff ff       	call   c001e71e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f8fc:	83 c4 10             	add    esp,0x10
c001f8ff:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001f904:	75 6e                	jne    c001f974 <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001f906:	6a 00                	push   0x0
c001f908:	6a 08                	push   0x8
c001f90a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f911:	50                   	push   eax
c001f912:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f918:	e8 01 ee ff ff       	call   c001e71e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f91d:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001f922:	50                   	push   eax
c001f923:	6a 09                	push   0x9
c001f925:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f92c:	50                   	push   eax
c001f92d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f933:	e8 e6 ed ff ff       	call   c001e71e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f938:	83 c4 20             	add    esp,0x20
c001f93b:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001f940:	50                   	push   eax
c001f941:	6a 0a                	push   0xa
c001f943:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f94a:	50                   	push   eax
c001f94b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f951:	e8 c8 ed ff ff       	call   c001e71e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f956:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001f95b:	50                   	push   eax
c001f95c:	6a 0b                	push   0xb
c001f95e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f965:	50                   	push   eax
c001f966:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f96c:	e8 ad ed ff ff       	call   c001e71e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f971:	83 c4 20             	add    esp,0x20
c001f974:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001f979:	50                   	push   eax
c001f97a:	6a 02                	push   0x2
c001f97c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f983:	50                   	push   eax
c001f984:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f98a:	e8 8f ed ff ff       	call   c001e71e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f98f:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001f994:	50                   	push   eax
c001f995:	6a 03                	push   0x3
c001f997:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f99e:	50                   	push   eax
c001f99f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f9a5:	e8 74 ed ff ff       	call   c001e71e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f9aa:	83 c4 20             	add    esp,0x20
c001f9ad:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001f9b2:	50                   	push   eax
c001f9b3:	6a 04                	push   0x4
c001f9b5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f9bc:	50                   	push   eax
c001f9bd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f9c3:	e8 56 ed ff ff       	call   c001e71e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f9c8:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001f9cd:	50                   	push   eax
c001f9ce:	6a 05                	push   0x5
c001f9d0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f9d7:	50                   	push   eax
c001f9d8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f9de:	e8 3b ed ff ff       	call   c001e71e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f9e3:	83 c4 20             	add    esp,0x20
c001f9e6:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001f9eb:	0f 94 c0             	sete   al
c001f9ee:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001f9f3:	74 09                	je     c001f9fe <ATA::access(unsigned long long, int, void*, bool)+0x282>
c001f9f5:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001f9fc:	eb 07                	jmp    c001fa05 <ATA::access(unsigned long long, int, void*, bool)+0x289>
c001f9fe:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001fa05:	0f b6 c0             	movzx  eax,al
c001fa08:	50                   	push   eax
c001fa09:	6a 07                	push   0x7
c001fa0b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fa12:	50                   	push   eax
c001fa13:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fa19:	e8 00 ed ff ff       	call   c001e71e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fa1e:	c7 04 24 9d 69 02 c0 	mov    DWORD PTR [esp],0xc002699d
c001fa25:	e8 9b d5 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001fa2a:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001fa2e:	83 c4 10             	add    esp,0x10
c001fa31:	85 f6                	test   esi,esi
c001fa33:	0f 84 f7 00 00 00    	je     c001fb30 <ATA::access(unsigned long long, int, void*, bool)+0x3b4>
c001fa39:	83 ec 0c             	sub    esp,0xc
c001fa3c:	68 a0 69 02 c0       	push   0xc00269a0
c001fa41:	e8 7f d5 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001fa46:	83 c4 0c             	add    esp,0xc
c001fa49:	6a 01                	push   0x1
c001fa4b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fa52:	50                   	push   eax
c001fa53:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fa59:	e8 74 f7 ff ff       	call   c001f1d2 <IDE::polling(unsigned char, unsigned int)>
c001fa5e:	c7 04 24 a3 69 02 c0 	mov    DWORD PTR [esp],0xc00269a3
c001fa65:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001fa69:	e8 57 d5 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001fa6e:	83 c4 10             	add    esp,0x10
c001fa71:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001fa75:	84 c0                	test   al,al
c001fa77:	74 2b                	je     c001faa4 <ATA::access(unsigned long long, int, void*, bool)+0x328>
c001fa79:	0f b6 f8             	movzx  edi,al
c001fa7c:	57                   	push   edi
c001fa7d:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001fa84:	50                   	push   eax
c001fa85:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fa8c:	50                   	push   eax
c001fa8d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fa93:	e8 8a f6 ff ff       	call   c001f122 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001fa98:	c7 04 24 a6 69 02 c0 	mov    DWORD PTR [esp],0xc00269a6
c001fa9f:	e9 bc 00 00 00       	jmp    c001fb60 <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c001faa4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001faa9:	74 50                	je     c001fafb <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c001faab:	83 ec 0c             	sub    esp,0xc
c001faae:	31 ed                	xor    ebp,ebp
c001fab0:	68 b1 69 02 c0       	push   0xc00269b1
c001fab5:	e8 0b d5 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001faba:	83 c4 10             	add    esp,0x10
c001fabd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001fac1:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001fac5:	50                   	push   eax
c001fac6:	50                   	push   eax
c001fac7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001face:	50                   	push   eax
c001facf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fad5:	e8 32 ec ff ff       	call   c001e70c <IDE::getBase(unsigned char)>
c001fada:	89 c2                	mov    edx,eax
c001fadc:	89 f8                	mov    eax,edi
c001fade:	66 ef                	out    dx,ax
c001fae0:	45                   	inc    ebp
c001fae1:	83 c4 10             	add    esp,0x10
c001fae4:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001faea:	75 d1                	jne    c001fabd <ATA::access(unsigned long long, int, void*, bool)+0x341>
c001faec:	83 ec 0c             	sub    esp,0xc
c001faef:	68 b4 69 02 c0       	push   0xc00269b4
c001faf4:	e8 cc d4 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001faf9:	eb 24                	jmp    c001fb1f <ATA::access(unsigned long long, int, void*, bool)+0x3a3>
c001fafb:	51                   	push   ecx
c001fafc:	51                   	push   ecx
c001fafd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fb04:	50                   	push   eax
c001fb05:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fb0b:	e8 fc eb ff ff       	call   c001e70c <IDE::getBase(unsigned char)>
c001fb10:	b9 00 01 00 00       	mov    ecx,0x100
c001fb15:	89 c2                	mov    edx,eax
c001fb17:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001fb1b:	fc                   	cld    
c001fb1c:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001fb1f:	83 c4 10             	add    esp,0x10
c001fb22:	4e                   	dec    esi
c001fb23:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001fb2b:	e9 01 ff ff ff       	jmp    c001fa31 <ATA::access(unsigned long long, int, void*, bool)+0x2b5>
c001fb30:	31 ff                	xor    edi,edi
c001fb32:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001fb37:	74 2f                	je     c001fb68 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001fb39:	83 ec 0c             	sub    esp,0xc
c001fb3c:	68 b7 69 02 c0       	push   0xc00269b7
c001fb41:	e8 7f d4 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001fb46:	58                   	pop    eax
c001fb47:	31 c0                	xor    eax,eax
c001fb49:	5a                   	pop    edx
c001fb4a:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001fb4f:	0f 94 c0             	sete   al
c001fb52:	50                   	push   eax
c001fb53:	53                   	push   ebx
c001fb54:	e8 8d fb ff ff       	call   c001f6e6 <ATA::flush(bool)>
c001fb59:	c7 04 24 ba 69 02 c0 	mov    DWORD PTR [esp],0xc00269ba
c001fb60:	e8 60 d4 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001fb65:	83 c4 10             	add    esp,0x10
c001fb68:	83 c4 2c             	add    esp,0x2c
c001fb6b:	89 f8                	mov    eax,edi
c001fb6d:	5b                   	pop    ebx
c001fb6e:	5e                   	pop    esi
c001fb6f:	5f                   	pop    edi
c001fb70:	5d                   	pop    ebp
c001fb71:	c3                   	ret    

c001fb72 <ATA::read(unsigned long long, int, void*)>:
c001fb72:	57                   	push   edi
c001fb73:	b8 04 00 00 00       	mov    eax,0x4
c001fb78:	56                   	push   esi
c001fb79:	53                   	push   ebx
c001fb7a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fb7e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001fb82:	8d 7a ff             	lea    edi,[edx-0x1]
c001fb85:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001fb89:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001fb8d:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001fb93:	77 25                	ja     c001fbba <ATA::read(unsigned long long, int, void*)+0x48>
c001fb95:	b8 06 00 00 00       	mov    eax,0x6
c001fb9a:	85 f6                	test   esi,esi
c001fb9c:	74 1c                	je     c001fbba <ATA::read(unsigned long long, int, void*)+0x48>
c001fb9e:	50                   	push   eax
c001fb9f:	50                   	push   eax
c001fba0:	6a 00                	push   0x0
c001fba2:	56                   	push   esi
c001fba3:	52                   	push   edx
c001fba4:	53                   	push   ebx
c001fba5:	51                   	push   ecx
c001fba6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001fbaa:	e8 cd fb ff ff       	call   c001f77c <ATA::access(unsigned long long, int, void*, bool)>
c001fbaf:	83 c4 20             	add    esp,0x20
c001fbb2:	85 c0                	test   eax,eax
c001fbb4:	0f 95 c0             	setne  al
c001fbb7:	0f b6 c0             	movzx  eax,al
c001fbba:	5b                   	pop    ebx
c001fbbb:	5e                   	pop    esi
c001fbbc:	5f                   	pop    edi
c001fbbd:	c3                   	ret    

c001fbbe <ATA::write(unsigned long long, int, void*)>:
c001fbbe:	55                   	push   ebp
c001fbbf:	57                   	push   edi
c001fbc0:	56                   	push   esi
c001fbc1:	53                   	push   ebx
c001fbc2:	83 ec 18             	sub    esp,0x18
c001fbc5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001fbc9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001fbcd:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001fbd1:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001fbd5:	68 bd 69 02 c0       	push   0xc00269bd
c001fbda:	e8 e6 d3 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001fbdf:	8d 53 ff             	lea    edx,[ebx-0x1]
c001fbe2:	83 c4 10             	add    esp,0x10
c001fbe5:	b8 04 00 00 00       	mov    eax,0x4
c001fbea:	81 fa fe 00 00 00    	cmp    edx,0xfe
c001fbf0:	77 25                	ja     c001fc17 <ATA::write(unsigned long long, int, void*)+0x59>
c001fbf2:	b8 06 00 00 00       	mov    eax,0x6
c001fbf7:	85 f6                	test   esi,esi
c001fbf9:	74 1c                	je     c001fc17 <ATA::write(unsigned long long, int, void*)+0x59>
c001fbfb:	50                   	push   eax
c001fbfc:	50                   	push   eax
c001fbfd:	6a 01                	push   0x1
c001fbff:	56                   	push   esi
c001fc00:	53                   	push   ebx
c001fc01:	55                   	push   ebp
c001fc02:	57                   	push   edi
c001fc03:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001fc07:	e8 70 fb ff ff       	call   c001f77c <ATA::access(unsigned long long, int, void*, bool)>
c001fc0c:	83 c4 20             	add    esp,0x20
c001fc0f:	85 c0                	test   eax,eax
c001fc11:	0f 95 c0             	setne  al
c001fc14:	0f b6 c0             	movzx  eax,al
c001fc17:	83 c4 0c             	add    esp,0xc
c001fc1a:	5b                   	pop    ebx
c001fc1b:	5e                   	pop    esi
c001fc1c:	5f                   	pop    edi
c001fc1d:	5d                   	pop    ebp
c001fc1e:	c3                   	ret    
c001fc1f:	90                   	nop

c001fc20 <ATA::detectCHS()>:
c001fc20:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fc24:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001fc2a:	c1 e0 06             	shl    eax,0x6
c001fc2d:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001fc33:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001fc3d:	c7 44 24 04 c9 69 02 c0 	mov    DWORD PTR [esp+0x4],0xc00269c9
c001fc45:	e9 d3 50 ff ff       	jmp    c0014d1d <Krnl::panic(char const*)>

c001fc4a <ATA::open(int, int, void*)>:
c001fc4a:	53                   	push   ebx
c001fc4b:	83 ec 08             	sub    esp,0x8
c001fc4e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fc52:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fc56:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001fc5a:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001fc60:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001fc66:	c1 e0 06             	shl    eax,0x6
c001fc69:	01 d0                	add    eax,edx
c001fc6b:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001fc72:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001fc78:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001fc7f:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001fc89:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001fc8f:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001fc96:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001fc9d:	75 0c                	jne    c001fcab <ATA::open(int, int, void*)+0x61>
c001fc9f:	83 ec 0c             	sub    esp,0xc
c001fca2:	53                   	push   ebx
c001fca3:	e8 78 ff ff ff       	call   c001fc20 <ATA::detectCHS()>
c001fca8:	83 c4 10             	add    esp,0x10
c001fcab:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001fcb1:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001fcb7:	c1 e0 06             	shl    eax,0x6
c001fcba:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001fcc1:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001fccb:	d1 e8                	shr    eax,1
c001fccd:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001fcd3:	6a 04                	push   0x4
c001fcd5:	6a 0c                	push   0xc
c001fcd7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fcde:	50                   	push   eax
c001fcdf:	52                   	push   edx
c001fce0:	e8 39 ea ff ff       	call   c001e71e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fce5:	90                   	nop
c001fce6:	90                   	nop
c001fce7:	6a 00                	push   0x0
c001fce9:	6a 0c                	push   0xc
c001fceb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fcf2:	50                   	push   eax
c001fcf3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fcf9:	e8 20 ea ff ff       	call   c001e71e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fcfe:	83 c4 14             	add    esp,0x14
c001fd01:	53                   	push   ebx
c001fd02:	e8 0f ec fe ff       	call   c000e916 <PhysicalDisk::startCache()>
c001fd07:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fd0a:	e8 b3 0a ff ff       	call   c00107c2 <createPartitionsForDisk(PhysicalDisk*)>
c001fd0f:	31 c0                	xor    eax,eax
c001fd11:	83 c4 18             	add    esp,0x18
c001fd14:	5b                   	pop    ebx
c001fd15:	c3                   	ret    

c001fd16 <ATAPI::write(unsigned long long, int, void*)>:
c001fd16:	b8 03 00 00 00       	mov    eax,0x3
c001fd1b:	c3                   	ret    

c001fd1c <ATAPI::close(int, int, void*)>:
c001fd1c:	83 ec 0c             	sub    esp,0xc
c001fd1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd23:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001fd29:	85 c0                	test   eax,eax
c001fd2b:	74 0c                	je     c001fd39 <ATAPI::close(int, int, void*)+0x1d>
c001fd2d:	83 ec 0c             	sub    esp,0xc
c001fd30:	8b 10                	mov    edx,DWORD PTR [eax]
c001fd32:	50                   	push   eax
c001fd33:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001fd36:	83 c4 10             	add    esp,0x10
c001fd39:	31 c0                	xor    eax,eax
c001fd3b:	83 c4 0c             	add    esp,0xc
c001fd3e:	c3                   	ret    
c001fd3f:	90                   	nop

c001fd40 <ATAPI::ATAPI()>:
c001fd40:	83 ec 0c             	sub    esp,0xc
c001fd43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd47:	83 ec 04             	sub    esp,0x4
c001fd4a:	68 00 08 00 00       	push   0x800
c001fd4f:	68 c9 6c 02 c0       	push   0xc0026cc9
c001fd54:	50                   	push   eax
c001fd55:	e8 54 eb fe ff       	call   c000e8ae <PhysicalDisk::PhysicalDisk(char const*, int)>
c001fd5a:	83 c4 10             	add    esp,0x10
c001fd5d:	ba 5c 6a 02 c0       	mov    edx,0xc0026a5c
c001fd62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd66:	89 10                	mov    DWORD PTR [eax],edx
c001fd68:	90                   	nop
c001fd69:	83 c4 0c             	add    esp,0xc
c001fd6c:	c3                   	ret    
c001fd6d:	90                   	nop

c001fd6e <ATAPI::readyForCommand()>:
c001fd6e:	56                   	push   esi
c001fd6f:	53                   	push   ebx
c001fd70:	53                   	push   ebx
c001fd71:	31 db                	xor    ebx,ebx
c001fd73:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fd77:	51                   	push   ecx
c001fd78:	6a 0c                	push   0xc
c001fd7a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001fd81:	50                   	push   eax
c001fd82:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001fd88:	e8 51 ea ff ff       	call   c001e7de <IDE::read(unsigned char, unsigned char)>
c001fd8d:	83 c4 10             	add    esp,0x10
c001fd90:	a8 88                	test   al,0x88
c001fd92:	74 25                	je     c001fdb9 <ATAPI::readyForCommand()+0x4b>
c001fd94:	43                   	inc    ebx
c001fd95:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001fd9b:	7e da                	jle    c001fd77 <ATAPI::readyForCommand()+0x9>
c001fd9d:	83 ec 0c             	sub    esp,0xc
c001fda0:	68 5e 01 00 00       	push   0x15e
c001fda5:	e8 ce 88 ff ff       	call   c0018678 <milliTenthSleep(unsigned int)>
c001fdaa:	83 c4 10             	add    esp,0x10
c001fdad:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001fdb3:	75 c2                	jne    c001fd77 <ATAPI::readyForCommand()+0x9>
c001fdb5:	31 c0                	xor    eax,eax
c001fdb7:	eb 02                	jmp    c001fdbb <ATAPI::readyForCommand()+0x4d>
c001fdb9:	b0 01                	mov    al,0x1
c001fdbb:	5a                   	pop    edx
c001fdbc:	5b                   	pop    ebx
c001fdbd:	5e                   	pop    esi
c001fdbe:	c3                   	ret    
c001fdbf:	90                   	nop

c001fdc0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001fdc0:	55                   	push   ebp
c001fdc1:	57                   	push   edi
c001fdc2:	56                   	push   esi
c001fdc3:	53                   	push   ebx
c001fdc4:	83 ec 20             	sub    esp,0x20
c001fdc7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001fdcb:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001fdcf:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001fdd3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001fdd7:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001fddb:	6a 01                	push   0x1
c001fddd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fde4:	50                   	push   eax
c001fde5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fdeb:	e8 36 eb ff ff       	call   c001e926 <IDE::enableIRQs(unsigned char, bool)>
c001fdf0:	5e                   	pop    esi
c001fdf1:	58                   	pop    eax
c001fdf2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fdf9:	50                   	push   eax
c001fdfa:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fe00:	e8 f3 e8 ff ff       	call   c001e6f8 <IDE::prepareInterrupt(unsigned char)>
c001fe05:	89 3c 24             	mov    DWORD PTR [esp],edi
c001fe08:	e8 61 ff ff ff       	call   c001fd6e <ATAPI::readyForCommand()>
c001fe0d:	83 c4 10             	add    esp,0x10
c001fe10:	84 c0                	test   al,al
c001fe12:	75 0a                	jne    c001fe1e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001fe14:	bb 01 00 00 00       	mov    ebx,0x1
c001fe19:	e9 57 02 00 00       	jmp    c0020075 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001fe1e:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001fe24:	c1 e0 04             	shl    eax,0x4
c001fe27:	0f b6 c0             	movzx  eax,al
c001fe2a:	50                   	push   eax
c001fe2b:	6a 06                	push   0x6
c001fe2d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fe34:	50                   	push   eax
c001fe35:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fe3b:	e8 de e8 ff ff       	call   c001e71e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fe40:	6a 00                	push   0x0
c001fe42:	6a 01                	push   0x1
c001fe44:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fe4b:	50                   	push   eax
c001fe4c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fe52:	e8 c7 e8 ff ff       	call   c001e71e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fe57:	83 c4 20             	add    esp,0x20
c001fe5a:	0f b6 c3             	movzx  eax,bl
c001fe5d:	0f b6 df             	movzx  ebx,bh
c001fe60:	50                   	push   eax
c001fe61:	6a 04                	push   0x4
c001fe63:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fe6a:	50                   	push   eax
c001fe6b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fe71:	e8 a8 e8 ff ff       	call   c001e71e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fe76:	53                   	push   ebx
c001fe77:	6a 05                	push   0x5
c001fe79:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fe80:	50                   	push   eax
c001fe81:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fe87:	e8 92 e8 ff ff       	call   c001e71e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fe8c:	83 c4 20             	add    esp,0x20
c001fe8f:	68 a0 00 00 00       	push   0xa0
c001fe94:	6a 07                	push   0x7
c001fe96:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fe9d:	50                   	push   eax
c001fe9e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fea4:	e8 75 e8 ff ff       	call   c001e71e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fea9:	83 c4 0c             	add    esp,0xc
c001feac:	6a 01                	push   0x1
c001feae:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001feb5:	50                   	push   eax
c001feb6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001febc:	e8 11 f3 ff ff       	call   c001f1d2 <IDE::polling(unsigned char, unsigned int)>
c001fec1:	83 c4 10             	add    esp,0x10
c001fec4:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001feca:	84 c0                	test   al,al
c001fecc:	74 23                	je     c001fef1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001fece:	0f b6 d8             	movzx  ebx,al
c001fed1:	0f b6 d2             	movzx  edx,dl
c001fed4:	53                   	push   ebx
c001fed5:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001fedc:	50                   	push   eax
c001fedd:	52                   	push   edx
c001fede:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fee4:	e8 39 f2 ff ff       	call   c001f122 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001fee9:	83 c4 10             	add    esp,0x10
c001feec:	e9 84 01 00 00       	jmp    c0020075 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001fef1:	0f b6 d2             	movzx  edx,dl
c001fef4:	53                   	push   ebx
c001fef5:	53                   	push   ebx
c001fef6:	52                   	push   edx
c001fef7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fefd:	e8 0a e8 ff ff       	call   c001e70c <IDE::getBase(unsigned char)>
c001ff02:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001ff06:	b9 06 00 00 00       	mov    ecx,0x6
c001ff0b:	89 c2                	mov    edx,eax
c001ff0d:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001ff10:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001ff14:	83 c4 10             	add    esp,0x10
c001ff17:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001ff1d:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001ff24:	85 db                	test   ebx,ebx
c001ff26:	0f 84 ec 00 00 00    	je     c0020018 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001ff2c:	51                   	push   ecx
c001ff2d:	51                   	push   ecx
c001ff2e:	52                   	push   edx
c001ff2f:	50                   	push   eax
c001ff30:	e8 57 e9 ff ff       	call   c001e88c <IDE::waitInterrupt(unsigned char)>
c001ff35:	83 c4 10             	add    esp,0x10
c001ff38:	84 c0                	test   al,al
c001ff3a:	0f 84 d4 fe ff ff    	je     c001fe14 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001ff40:	56                   	push   esi
c001ff41:	56                   	push   esi
c001ff42:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ff49:	50                   	push   eax
c001ff4a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ff50:	e8 a3 e7 ff ff       	call   c001e6f8 <IDE::prepareInterrupt(unsigned char)>
c001ff55:	83 c4 0c             	add    esp,0xc
c001ff58:	6a 04                	push   0x4
c001ff5a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ff61:	50                   	push   eax
c001ff62:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ff68:	e8 71 e8 ff ff       	call   c001e7de <IDE::read(unsigned char, unsigned char)>
c001ff6d:	83 c4 0c             	add    esp,0xc
c001ff70:	89 c6                	mov    esi,eax
c001ff72:	6a 05                	push   0x5
c001ff74:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ff7b:	50                   	push   eax
c001ff7c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ff82:	e8 57 e8 ff ff       	call   c001e7de <IDE::read(unsigned char, unsigned char)>
c001ff87:	89 f1                	mov    ecx,esi
c001ff89:	0f b6 c0             	movzx  eax,al
c001ff8c:	0f b6 f1             	movzx  esi,cl
c001ff8f:	c1 e0 08             	shl    eax,0x8
c001ff92:	09 c6                	or     esi,eax
c001ff94:	d1 fe                	sar    esi,1
c001ff96:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001ff9a:	83 c4 10             	add    esp,0x10
c001ff9d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001ffa2:	74 41                	je     c001ffe5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001ffa4:	31 c9                	xor    ecx,ecx
c001ffa6:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001ffac:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001ffb3:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001ffb7:	75 0a                	jne    c001ffc3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001ffb9:	01 c9                	add    ecx,ecx
c001ffbb:	01 cd                	add    ebp,ecx
c001ffbd:	4b                   	dec    ebx
c001ffbe:	e9 54 ff ff ff       	jmp    c001ff17 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001ffc3:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001ffc8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ffcc:	51                   	push   ecx
c001ffcd:	51                   	push   ecx
c001ffce:	52                   	push   edx
c001ffcf:	50                   	push   eax
c001ffd0:	e8 37 e7 ff ff       	call   c001e70c <IDE::getBase(unsigned char)>
c001ffd5:	89 c2                	mov    edx,eax
c001ffd7:	89 f0                	mov    eax,esi
c001ffd9:	66 ef                	out    dx,ax
c001ffdb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ffdf:	83 c4 10             	add    esp,0x10
c001ffe2:	41                   	inc    ecx
c001ffe3:	eb c1                	jmp    c001ffa6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001ffe5:	31 f6                	xor    esi,esi
c001ffe7:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001ffed:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001fff4:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001fff8:	75 06                	jne    c0020000 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001fffa:	01 f6                	add    esi,esi
c001fffc:	01 f5                	add    ebp,esi
c001fffe:	eb bd                	jmp    c001ffbd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0020000:	51                   	push   ecx
c0020001:	51                   	push   ecx
c0020002:	52                   	push   edx
c0020003:	50                   	push   eax
c0020004:	e8 03 e7 ff ff       	call   c001e70c <IDE::getBase(unsigned char)>
c0020009:	89 c2                	mov    edx,eax
c002000b:	66 ed                	in     ax,dx
c002000d:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0020012:	83 c4 10             	add    esp,0x10
c0020015:	46                   	inc    esi
c0020016:	eb cf                	jmp    c001ffe7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0020018:	51                   	push   ecx
c0020019:	51                   	push   ecx
c002001a:	52                   	push   edx
c002001b:	50                   	push   eax
c002001c:	e8 6b e8 ff ff       	call   c001e88c <IDE::waitInterrupt(unsigned char)>
c0020021:	83 c4 10             	add    esp,0x10
c0020024:	84 c0                	test   al,al
c0020026:	0f 84 e8 fd ff ff    	je     c001fe14 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002002c:	bb a0 86 01 00       	mov    ebx,0x186a0
c0020031:	52                   	push   edx
c0020032:	52                   	push   edx
c0020033:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002003a:	50                   	push   eax
c002003b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020041:	e8 b2 e6 ff ff       	call   c001e6f8 <IDE::prepareInterrupt(unsigned char)>
c0020046:	83 c4 10             	add    esp,0x10
c0020049:	50                   	push   eax
c002004a:	50                   	push   eax
c002004b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020052:	50                   	push   eax
c0020053:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020059:	e8 ae e6 ff ff       	call   c001e70c <IDE::getBase(unsigned char)>
c002005e:	8d 50 07             	lea    edx,[eax+0x7]
c0020061:	ec                   	in     al,dx
c0020062:	83 c4 10             	add    esp,0x10
c0020065:	a8 88                	test   al,0x88
c0020067:	74 0a                	je     c0020073 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0020069:	4b                   	dec    ebx
c002006a:	75 dd                	jne    c0020049 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c002006c:	bb 02 00 00 00       	mov    ebx,0x2
c0020071:	eb 02                	jmp    c0020075 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0020073:	31 db                	xor    ebx,ebx
c0020075:	83 c4 1c             	add    esp,0x1c
c0020078:	89 d8                	mov    eax,ebx
c002007a:	5b                   	pop    ebx
c002007b:	5e                   	pop    esi
c002007c:	5f                   	pop    edi
c002007d:	5d                   	pop    ebp
c002007e:	c3                   	ret    
c002007f:	90                   	nop

c0020080 <ATAPI::diskRemoved()>:
c0020080:	53                   	push   ebx
c0020081:	83 ec 14             	sub    esp,0x14
c0020084:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0020088:	68 14 6a 02 c0       	push   0xc0026a14
c002008d:	e8 33 cf fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0020092:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0020099:	c7 04 24 2a 6a 02 c0 	mov    DWORD PTR [esp],0xc0026a2a
c00200a0:	e8 20 cf fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00200a5:	58                   	pop    eax
c00200a6:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c00200ac:	e8 91 04 ff ff       	call   c0010542 <LogicalDisk::unmount()>
c00200b1:	c7 04 24 39 6a 02 c0 	mov    DWORD PTR [esp],0xc0026a39
c00200b8:	e8 08 cf fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00200bd:	5a                   	pop    edx
c00200be:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c00200c4:	e8 7f 0e ff ff       	call   c0010f48 <VCache::writeWriteBuffer()>
c00200c9:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00200cf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00200d3:	83 c4 18             	add    esp,0x18
c00200d6:	5b                   	pop    ebx
c00200d7:	e9 5c 0e ff ff       	jmp    c0010f38 <VCache::invalidateReadBuffer()>

c00200dc <ATAPI::eject()>:
c00200dc:	57                   	push   edi
c00200dd:	b9 03 00 00 00       	mov    ecx,0x3
c00200e2:	53                   	push   ebx
c00200e3:	83 ec 14             	sub    esp,0x14
c00200e6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00200ea:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00200ee:	fc                   	cld    
c00200ef:	31 c0                	xor    eax,eax
c00200f1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00200f3:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00200f8:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00200fd:	50                   	push   eax
c00200fe:	50                   	push   eax
c00200ff:	6a 00                	push   0x0
c0020101:	6a 00                	push   0x0
c0020103:	6a 00                	push   0x0
c0020105:	6a 02                	push   0x2
c0020107:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002010b:	50                   	push   eax
c002010c:	53                   	push   ebx
c002010d:	e8 ae fc ff ff       	call   c001fdc0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020112:	83 c4 14             	add    esp,0x14
c0020115:	53                   	push   ebx
c0020116:	e8 65 ff ff ff       	call   c0020080 <ATAPI::diskRemoved()>
c002011b:	83 c4 24             	add    esp,0x24
c002011e:	31 c0                	xor    eax,eax
c0020120:	5b                   	pop    ebx
c0020121:	5f                   	pop    edi
c0020122:	c3                   	ret    
c0020123:	90                   	nop

c0020124 <ATAPI::diskInserted()>:
c0020124:	83 ec 18             	sub    esp,0x18
c0020127:	68 d5 6c 02 c0       	push   0xc0026cd5
c002012c:	e8 94 ce fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0020131:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020135:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c002013c:	83 c4 1c             	add    esp,0x1c
c002013f:	c3                   	ret    

c0020140 <ATAPI::detectMedia()>:
c0020140:	56                   	push   esi
c0020141:	53                   	push   ebx
c0020142:	83 ec 28             	sub    esp,0x28
c0020145:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020149:	6a 0c                	push   0xc
c002014b:	6a 00                	push   0x0
c002014d:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0020151:	56                   	push   esi
c0020152:	e8 25 05 fe ff       	call   c000067c <memset>
c0020157:	58                   	pop    eax
c0020158:	5a                   	pop    edx
c0020159:	6a 00                	push   0x0
c002015b:	6a 00                	push   0x0
c002015d:	6a 00                	push   0x0
c002015f:	6a 00                	push   0x0
c0020161:	56                   	push   esi
c0020162:	53                   	push   ebx
c0020163:	e8 58 fc ff ff       	call   c001fdc0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020168:	83 c4 1c             	add    esp,0x1c
c002016b:	6a 0c                	push   0xc
c002016d:	6a 00                	push   0x0
c002016f:	56                   	push   esi
c0020170:	e8 07 05 fe ff       	call   c000067c <memset>
c0020175:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002017a:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002017f:	59                   	pop    ecx
c0020180:	58                   	pop    eax
c0020181:	6a 01                	push   0x1
c0020183:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0020187:	50                   	push   eax
c0020188:	6a 00                	push   0x0
c002018a:	6a 12                	push   0x12
c002018c:	56                   	push   esi
c002018d:	53                   	push   ebx
c002018e:	e8 2d fc ff ff       	call   c001fdc0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020193:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0020197:	83 c4 20             	add    esp,0x20
c002019a:	83 e0 7f             	and    eax,0x7f
c002019d:	3c 70                	cmp    al,0x70
c002019f:	74 15                	je     c00201b6 <ATAPI::detectMedia()+0x76>
c00201a1:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00201a8:	75 0c                	jne    c00201b6 <ATAPI::detectMedia()+0x76>
c00201aa:	83 ec 0c             	sub    esp,0xc
c00201ad:	53                   	push   ebx
c00201ae:	e8 71 ff ff ff       	call   c0020124 <ATAPI::diskInserted()>
c00201b3:	83 c4 10             	add    esp,0x10
c00201b6:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00201ba:	83 e0 0f             	and    eax,0xf
c00201bd:	3c 02                	cmp    al,0x2
c00201bf:	75 1b                	jne    c00201dc <ATAPI::detectMedia()+0x9c>
c00201c1:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00201c6:	75 2d                	jne    c00201f5 <ATAPI::detectMedia()+0xb5>
c00201c8:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00201cf:	74 24                	je     c00201f5 <ATAPI::detectMedia()+0xb5>
c00201d1:	83 ec 0c             	sub    esp,0xc
c00201d4:	53                   	push   ebx
c00201d5:	e8 a6 fe ff ff       	call   c0020080 <ATAPI::diskRemoved()>
c00201da:	eb 16                	jmp    c00201f2 <ATAPI::detectMedia()+0xb2>
c00201dc:	84 c0                	test   al,al
c00201de:	75 15                	jne    c00201f5 <ATAPI::detectMedia()+0xb5>
c00201e0:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00201e7:	75 0c                	jne    c00201f5 <ATAPI::detectMedia()+0xb5>
c00201e9:	83 ec 0c             	sub    esp,0xc
c00201ec:	53                   	push   ebx
c00201ed:	e8 32 ff ff ff       	call   c0020124 <ATAPI::diskInserted()>
c00201f2:	83 c4 10             	add    esp,0x10
c00201f5:	83 c4 24             	add    esp,0x24
c00201f8:	5b                   	pop    ebx
c00201f9:	5e                   	pop    esi
c00201fa:	c3                   	ret    
c00201fb:	90                   	nop

c00201fc <ATAPI::open(int, int, void*)>:
c00201fc:	56                   	push   esi
c00201fd:	53                   	push   ebx
c00201fe:	50                   	push   eax
c00201ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020203:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020207:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002020b:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0020211:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0020217:	c1 e0 06             	shl    eax,0x6
c002021a:	01 d0                	add    eax,edx
c002021c:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0020223:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0020229:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0020230:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002023a:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0020240:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0020247:	6a 04                	push   0x4
c0020249:	6a 0c                	push   0xc
c002024b:	51                   	push   ecx
c002024c:	52                   	push   edx
c002024d:	e8 cc e4 ff ff       	call   c001e71e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020252:	90                   	nop
c0020253:	90                   	nop
c0020254:	6a 00                	push   0x0
c0020256:	6a 0c                	push   0xc
c0020258:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002025f:	50                   	push   eax
c0020260:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020266:	e8 b3 e4 ff ff       	call   c001e71e <IDE::write(unsigned char, unsigned char, unsigned char)>
c002026b:	83 c4 14             	add    esp,0x14
c002026e:	68 74 01 00 00       	push   0x174
c0020273:	e8 3f 9a fe ff       	call   c0009cb7 <malloc>
c0020278:	83 c4 0c             	add    esp,0xc
c002027b:	89 c6                	mov    esi,eax
c002027d:	6a 00                	push   0x0
c002027f:	68 ff ff ff 7f       	push   0x7fffffff
c0020284:	6a 00                	push   0x0
c0020286:	6a 00                	push   0x0
c0020288:	53                   	push   ebx
c0020289:	68 b2 6d 02 c0       	push   0xc0026db2
c002028e:	50                   	push   eax
c002028f:	e8 ba 00 ff ff       	call   c001034e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0020294:	83 c4 14             	add    esp,0x14
c0020297:	56                   	push   esi
c0020298:	e8 67 01 ff ff       	call   c0010404 <LogicalDisk::assignDriveLetter()>
c002029d:	5a                   	pop    edx
c002029e:	0f be c0             	movsx  eax,al
c00202a1:	59                   	pop    ecx
c00202a2:	50                   	push   eax
c00202a3:	68 47 6a 02 c0       	push   0xc0026a47
c00202a8:	e8 18 cd fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00202ad:	58                   	pop    eax
c00202ae:	5a                   	pop    edx
c00202af:	56                   	push   esi
c00202b0:	53                   	push   ebx
c00202b1:	e8 c0 e1 fe ff       	call   c000e476 <Device::addChild(Device*)>
c00202b6:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c00202bc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00202bf:	e8 52 e6 fe ff       	call   c000e916 <PhysicalDisk::startCache()>
c00202c4:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c00202cb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00202ce:	e8 6d fe ff ff       	call   c0020140 <ATAPI::detectMedia()>
c00202d3:	83 c4 14             	add    esp,0x14
c00202d6:	31 c0                	xor    eax,eax
c00202d8:	5b                   	pop    ebx
c00202d9:	5e                   	pop    esi
c00202da:	c3                   	ret    
c00202db:	90                   	nop

c00202dc <ATAPI::read(unsigned long long, int, void*)>:
c00202dc:	55                   	push   ebp
c00202dd:	57                   	push   edi
c00202de:	56                   	push   esi
c00202df:	53                   	push   ebx
c00202e0:	83 ec 1c             	sub    esp,0x1c
c00202e3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00202e7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00202eb:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00202ef:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00202f6:	74 41                	je     c0020339 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c00202f8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00202fc:	b9 03 00 00 00       	mov    ecx,0x3
c0020301:	fc                   	cld    
c0020302:	31 c0                	xor    eax,eax
c0020304:	86 fb                	xchg   bl,bh
c0020306:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020308:	c1 c3 10             	rol    ebx,0x10
c002030b:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0020310:	89 e8                	mov    eax,ebp
c0020312:	86 fb                	xchg   bl,bh
c0020314:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0020318:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c002031c:	50                   	push   eax
c002031d:	50                   	push   eax
c002031e:	55                   	push   ebp
c002031f:	c1 e5 0b             	shl    ebp,0xb
c0020322:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0020326:	6a 00                	push   0x0
c0020328:	55                   	push   ebp
c0020329:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002032d:	50                   	push   eax
c002032e:	56                   	push   esi
c002032f:	e8 8c fa ff ff       	call   c001fdc0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020334:	83 c4 20             	add    esp,0x20
c0020337:	eb 1a                	jmp    c0020353 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0020339:	83 ec 0c             	sub    esp,0xc
c002033c:	56                   	push   esi
c002033d:	e8 fe fd ff ff       	call   c0020140 <ATAPI::detectMedia()>
c0020342:	83 c4 10             	add    esp,0x10
c0020345:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c002034c:	75 aa                	jne    c00202f8 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c002034e:	b8 02 00 00 00       	mov    eax,0x2
c0020353:	83 c4 1c             	add    esp,0x1c
c0020356:	5b                   	pop    ebx
c0020357:	5e                   	pop    esi
c0020358:	5f                   	pop    edi
c0020359:	5d                   	pop    ebp
c002035a:	c3                   	ret    
c002035b:	90                   	nop

c002035c <SATA::close(int, int, void*)>:
c002035c:	83 ec 0c             	sub    esp,0xc
c002035f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020363:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020369:	85 c0                	test   eax,eax
c002036b:	74 0c                	je     c0020379 <SATA::close(int, int, void*)+0x1d>
c002036d:	83 ec 0c             	sub    esp,0xc
c0020370:	8b 10                	mov    edx,DWORD PTR [eax]
c0020372:	50                   	push   eax
c0020373:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020376:	83 c4 10             	add    esp,0x10
c0020379:	31 c0                	xor    eax,eax
c002037b:	83 c4 0c             	add    esp,0xc
c002037e:	c3                   	ret    
c002037f:	90                   	nop

c0020380 <SATA::powerSaving(PowerSavingLevel)>:
c0020380:	c3                   	ret    
c0020381:	90                   	nop

c0020382 <SATA::open(int, int, void*)>:
c0020382:	56                   	push   esi
c0020383:	53                   	push   ebx
c0020384:	51                   	push   ecx
c0020385:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020389:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c0020390:	74 2d                	je     c00203bf <SATA::open(int, int, void*)+0x3d>
c0020392:	83 ec 0c             	sub    esp,0xc
c0020395:	68 8c 6a 02 c0       	push   0xc0026a8c
c002039a:	e8 72 99 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c002039f:	83 c4 10             	add    esp,0x10
c00203a2:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c00203a9:	75 14                	jne    c00203bf <SATA::open(int, int, void*)+0x3d>
c00203ab:	e4 60                	in     al,0x60
c00203ad:	3c 5a                	cmp    al,0x5a
c00203af:	74 04                	je     c00203b5 <SATA::open(int, int, void*)+0x33>
c00203b1:	3c 1c                	cmp    al,0x1c
c00203b3:	75 f6                	jne    c00203ab <SATA::open(int, int, void*)+0x29>
c00203b5:	e4 60                	in     al,0x60
c00203b7:	3c 5a                	cmp    al,0x5a
c00203b9:	74 fa                	je     c00203b5 <SATA::open(int, int, void*)+0x33>
c00203bb:	3c 1c                	cmp    al,0x1c
c00203bd:	74 f6                	je     c00203b5 <SATA::open(int, int, void*)+0x33>
c00203bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00203c3:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00203cd:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00203d3:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00203dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00203e1:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00203eb:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00203f1:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00203f8:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c00203ff:	74 2d                	je     c002042e <SATA::open(int, int, void*)+0xac>
c0020401:	83 ec 0c             	sub    esp,0xc
c0020404:	68 99 6a 02 c0       	push   0xc0026a99
c0020409:	e8 03 99 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c002040e:	83 c4 10             	add    esp,0x10
c0020411:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c0020418:	75 14                	jne    c002042e <SATA::open(int, int, void*)+0xac>
c002041a:	e4 60                	in     al,0x60
c002041c:	3c 1c                	cmp    al,0x1c
c002041e:	74 04                	je     c0020424 <SATA::open(int, int, void*)+0xa2>
c0020420:	3c 5a                	cmp    al,0x5a
c0020422:	75 f6                	jne    c002041a <SATA::open(int, int, void*)+0x98>
c0020424:	e4 60                	in     al,0x60
c0020426:	3c 5a                	cmp    al,0x5a
c0020428:	74 fa                	je     c0020424 <SATA::open(int, int, void*)+0xa2>
c002042a:	3c 1c                	cmp    al,0x1c
c002042c:	74 f6                	je     c0020424 <SATA::open(int, int, void*)+0xa2>
c002042e:	e8 3b 9f fe ff       	call   c000a36e <Phys::allocatePage()>
c0020433:	89 c6                	mov    esi,eax
c0020435:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002043b:	81 c6 00 10 00 00    	add    esi,0x1000
c0020441:	e8 28 9f fe ff       	call   c000a36e <Phys::allocatePage()>
c0020446:	39 c6                	cmp    esi,eax
c0020448:	74 10                	je     c002045a <SATA::open(int, int, void*)+0xd8>
c002044a:	83 ec 0c             	sub    esp,0xc
c002044d:	68 a6 6a 02 c0       	push   0xc0026aa6
c0020452:	e8 c6 48 ff ff       	call   c0014d1d <Krnl::panic(char const*)>
c0020457:	83 c4 10             	add    esp,0x10
c002045a:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c0020461:	74 2d                	je     c0020490 <SATA::open(int, int, void*)+0x10e>
c0020463:	83 ec 0c             	sub    esp,0xc
c0020466:	68 ba 6a 02 c0       	push   0xc0026aba
c002046b:	e8 a1 98 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0020470:	83 c4 10             	add    esp,0x10
c0020473:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c002047a:	75 14                	jne    c0020490 <SATA::open(int, int, void*)+0x10e>
c002047c:	e4 60                	in     al,0x60
c002047e:	3c 1c                	cmp    al,0x1c
c0020480:	74 04                	je     c0020486 <SATA::open(int, int, void*)+0x104>
c0020482:	3c 5a                	cmp    al,0x5a
c0020484:	75 f6                	jne    c002047c <SATA::open(int, int, void*)+0xfa>
c0020486:	e4 60                	in     al,0x60
c0020488:	3c 5a                	cmp    al,0x5a
c002048a:	74 fa                	je     c0020486 <SATA::open(int, int, void*)+0x104>
c002048c:	3c 1c                	cmp    al,0x1c
c002048e:	74 f6                	je     c0020486 <SATA::open(int, int, void*)+0x104>
c0020490:	83 ec 0c             	sub    esp,0xc
c0020493:	6a 02                	push   0x2
c0020495:	e8 cf b7 fe ff       	call   c000bc69 <Virt::allocateKernelVirtualPages(int)>
c002049a:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00204a0:	6a 03                	push   0x3
c00204a2:	50                   	push   eax
c00204a3:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00204a9:	ff 35 34 7f 02 c0    	push   DWORD PTR ds:0xc0027f34
c00204af:	e8 20 be fe ff       	call   c000c2d4 <VAS::mapPage(unsigned long, unsigned long, int)>
c00204b4:	83 c4 20             	add    esp,0x20
c00204b7:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c00204be:	74 2d                	je     c00204ed <SATA::open(int, int, void*)+0x16b>
c00204c0:	83 ec 0c             	sub    esp,0xc
c00204c3:	68 c7 6a 02 c0       	push   0xc0026ac7
c00204c8:	e8 44 98 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c00204cd:	83 c4 10             	add    esp,0x10
c00204d0:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c00204d7:	75 14                	jne    c00204ed <SATA::open(int, int, void*)+0x16b>
c00204d9:	e4 60                	in     al,0x60
c00204db:	3c 1c                	cmp    al,0x1c
c00204dd:	74 04                	je     c00204e3 <SATA::open(int, int, void*)+0x161>
c00204df:	3c 5a                	cmp    al,0x5a
c00204e1:	75 f6                	jne    c00204d9 <SATA::open(int, int, void*)+0x157>
c00204e3:	e4 60                	in     al,0x60
c00204e5:	3c 5a                	cmp    al,0x5a
c00204e7:	74 fa                	je     c00204e3 <SATA::open(int, int, void*)+0x161>
c00204e9:	3c 1c                	cmp    al,0x1c
c00204eb:	74 f6                	je     c00204e3 <SATA::open(int, int, void*)+0x161>
c00204ed:	83 ec 0c             	sub    esp,0xc
c00204f0:	53                   	push   ebx
c00204f1:	e8 20 e4 fe ff       	call   c000e916 <PhysicalDisk::startCache()>
c00204f6:	83 c4 10             	add    esp,0x10
c00204f9:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c0020500:	74 2d                	je     c002052f <SATA::open(int, int, void*)+0x1ad>
c0020502:	83 ec 0c             	sub    esp,0xc
c0020505:	68 d4 6a 02 c0       	push   0xc0026ad4
c002050a:	e8 02 98 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c002050f:	83 c4 10             	add    esp,0x10
c0020512:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c0020519:	75 14                	jne    c002052f <SATA::open(int, int, void*)+0x1ad>
c002051b:	e4 60                	in     al,0x60
c002051d:	3c 1c                	cmp    al,0x1c
c002051f:	74 04                	je     c0020525 <SATA::open(int, int, void*)+0x1a3>
c0020521:	3c 5a                	cmp    al,0x5a
c0020523:	75 f6                	jne    c002051b <SATA::open(int, int, void*)+0x199>
c0020525:	e4 60                	in     al,0x60
c0020527:	3c 5a                	cmp    al,0x5a
c0020529:	74 fa                	je     c0020525 <SATA::open(int, int, void*)+0x1a3>
c002052b:	3c 1c                	cmp    al,0x1c
c002052d:	74 f6                	je     c0020525 <SATA::open(int, int, void*)+0x1a3>
c002052f:	83 ec 0c             	sub    esp,0xc
c0020532:	53                   	push   ebx
c0020533:	e8 8a 02 ff ff       	call   c00107c2 <createPartitionsForDisk(PhysicalDisk*)>
c0020538:	83 c4 10             	add    esp,0x10
c002053b:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c0020542:	74 2d                	je     c0020571 <SATA::open(int, int, void*)+0x1ef>
c0020544:	83 ec 0c             	sub    esp,0xc
c0020547:	68 e1 6a 02 c0       	push   0xc0026ae1
c002054c:	e8 c0 97 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0020551:	83 c4 10             	add    esp,0x10
c0020554:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c002055b:	75 14                	jne    c0020571 <SATA::open(int, int, void*)+0x1ef>
c002055d:	e4 60                	in     al,0x60
c002055f:	3c 1c                	cmp    al,0x1c
c0020561:	74 04                	je     c0020567 <SATA::open(int, int, void*)+0x1e5>
c0020563:	3c 5a                	cmp    al,0x5a
c0020565:	75 f6                	jne    c002055d <SATA::open(int, int, void*)+0x1db>
c0020567:	e4 60                	in     al,0x60
c0020569:	3c 5a                	cmp    al,0x5a
c002056b:	74 fa                	je     c0020567 <SATA::open(int, int, void*)+0x1e5>
c002056d:	3c 1c                	cmp    al,0x1c
c002056f:	74 f6                	je     c0020567 <SATA::open(int, int, void*)+0x1e5>
c0020571:	5a                   	pop    edx
c0020572:	31 c0                	xor    eax,eax
c0020574:	5b                   	pop    ebx
c0020575:	5e                   	pop    esi
c0020576:	c3                   	ret    
c0020577:	90                   	nop

c0020578 <SATA::SATA()>:
c0020578:	83 ec 0c             	sub    esp,0xc
c002057b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002057f:	83 ec 04             	sub    esp,0x4
c0020582:	68 00 02 00 00       	push   0x200
c0020587:	68 ee 6a 02 c0       	push   0xc0026aee
c002058c:	50                   	push   eax
c002058d:	e8 1c e3 fe ff       	call   c000e8ae <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020592:	83 c4 10             	add    esp,0x10
c0020595:	ba 98 6c 02 c0       	mov    edx,0xc0026c98
c002059a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002059e:	89 10                	mov    DWORD PTR [eax],edx
c00205a0:	90                   	nop
c00205a1:	83 c4 0c             	add    esp,0xc
c00205a4:	c3                   	ret    
c00205a5:	90                   	nop

c00205a6 <SATA::access(unsigned long long, int, void*, bool)>:
c00205a6:	55                   	push   ebp
c00205a7:	57                   	push   edi
c00205a8:	56                   	push   esi
c00205a9:	53                   	push   ebx
c00205aa:	83 ec 2c             	sub    esp,0x2c
c00205ad:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00205b1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00205b5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00205b9:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c00205c0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00205c4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00205c8:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00205cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00205d0:	75 19                	jne    c00205eb <SATA::access(unsigned long long, int, void*, bool)+0x45>
c00205d2:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c00205d7:	7e 41                	jle    c002061a <SATA::access(unsigned long long, int, void*, bool)+0x74>
c00205d9:	83 ec 0c             	sub    esp,0xc
c00205dc:	68 0d 6b 02 c0       	push   0xc0026b0d
c00205e1:	e8 37 47 ff ff       	call   c0014d1d <Krnl::panic(char const*)>
c00205e6:	83 c4 10             	add    esp,0x10
c00205e9:	eb 2f                	jmp    c002061a <SATA::access(unsigned long long, int, void*, bool)+0x74>
c00205eb:	83 ec 0c             	sub    esp,0xc
c00205ee:	68 fe 6a 02 c0       	push   0xc0026afe
c00205f3:	e8 19 97 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c00205f8:	83 c4 10             	add    esp,0x10
c00205fb:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c0020602:	75 ce                	jne    c00205d2 <SATA::access(unsigned long long, int, void*, bool)+0x2c>
c0020604:	e4 60                	in     al,0x60
c0020606:	3c 1c                	cmp    al,0x1c
c0020608:	74 04                	je     c002060e <SATA::access(unsigned long long, int, void*, bool)+0x68>
c002060a:	3c 5a                	cmp    al,0x5a
c002060c:	75 f6                	jne    c0020604 <SATA::access(unsigned long long, int, void*, bool)+0x5e>
c002060e:	e4 60                	in     al,0x60
c0020610:	3c 5a                	cmp    al,0x5a
c0020612:	74 fa                	je     c002060e <SATA::access(unsigned long long, int, void*, bool)+0x68>
c0020614:	3c 1c                	cmp    al,0x1c
c0020616:	74 f6                	je     c002060e <SATA::access(unsigned long long, int, void*, bool)+0x68>
c0020618:	eb b8                	jmp    c00205d2 <SATA::access(unsigned long long, int, void*, bool)+0x2c>
c002061a:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c0020621:	75 29                	jne    c002064c <SATA::access(unsigned long long, int, void*, bool)+0xa6>
c0020623:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0020629:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c002062f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020635:	8d 75 02             	lea    esi,[ebp+0x2]
c0020638:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002063c:	c1 e6 07             	shl    esi,0x7
c002063f:	01 c6                	add    esi,eax
c0020641:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c0020648:	74 4a                	je     c0020694 <SATA::access(unsigned long long, int, void*, bool)+0xee>
c002064a:	eb 2f                	jmp    c002067b <SATA::access(unsigned long long, int, void*, bool)+0xd5>
c002064c:	83 ec 0c             	sub    esp,0xc
c002064f:	68 46 6b 02 c0       	push   0xc0026b46
c0020654:	e8 b8 96 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0020659:	83 c4 10             	add    esp,0x10
c002065c:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c0020663:	75 be                	jne    c0020623 <SATA::access(unsigned long long, int, void*, bool)+0x7d>
c0020665:	e4 60                	in     al,0x60
c0020667:	3c 1c                	cmp    al,0x1c
c0020669:	74 04                	je     c002066f <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c002066b:	3c 5a                	cmp    al,0x5a
c002066d:	75 f6                	jne    c0020665 <SATA::access(unsigned long long, int, void*, bool)+0xbf>
c002066f:	e4 60                	in     al,0x60
c0020671:	3c 5a                	cmp    al,0x5a
c0020673:	74 fa                	je     c002066f <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c0020675:	3c 1c                	cmp    al,0x1c
c0020677:	74 f6                	je     c002066f <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c0020679:	eb a8                	jmp    c0020623 <SATA::access(unsigned long long, int, void*, bool)+0x7d>
c002067b:	83 ec 0c             	sub    esp,0xc
c002067e:	68 55 6b 02 c0       	push   0xc0026b55
c0020683:	e8 89 96 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0020688:	83 c4 10             	add    esp,0x10
c002068b:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c0020692:	74 3d                	je     c00206d1 <SATA::access(unsigned long long, int, void*, bool)+0x12b>
c0020694:	89 e8                	mov    eax,ebp
c0020696:	c1 e0 07             	shl    eax,0x7
c0020699:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002069d:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00206a7:	52                   	push   edx
c00206a8:	52                   	push   edx
c00206a9:	56                   	push   esi
c00206aa:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c00206b0:	e8 fd eb ff ff       	call   c001f2b2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00206b5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00206b9:	83 c4 10             	add    esp,0x10
c00206bc:	b8 01 00 00 00       	mov    eax,0x1
c00206c1:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c00206c6:	75 1d                	jne    c00206e5 <SATA::access(unsigned long long, int, void*, bool)+0x13f>
c00206c8:	e9 c8 04 00 00       	jmp    c0020b95 <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c00206cd:	3c 5a                	cmp    al,0x5a
c00206cf:	74 0c                	je     c00206dd <SATA::access(unsigned long long, int, void*, bool)+0x137>
c00206d1:	e4 60                	in     al,0x60
c00206d3:	3c 1c                	cmp    al,0x1c
c00206d5:	75 f6                	jne    c00206cd <SATA::access(unsigned long long, int, void*, bool)+0x127>
c00206d7:	eb 04                	jmp    c00206dd <SATA::access(unsigned long long, int, void*, bool)+0x137>
c00206d9:	3c 1c                	cmp    al,0x1c
c00206db:	75 b7                	jne    c0020694 <SATA::access(unsigned long long, int, void*, bool)+0xee>
c00206dd:	e4 60                	in     al,0x60
c00206df:	3c 5a                	cmp    al,0x5a
c00206e1:	74 fa                	je     c00206dd <SATA::access(unsigned long long, int, void*, bool)+0x137>
c00206e3:	eb f4                	jmp    c00206d9 <SATA::access(unsigned long long, int, void*, bool)+0x133>
c00206e5:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c00206ec:	74 3a                	je     c0020728 <SATA::access(unsigned long long, int, void*, bool)+0x182>
c00206ee:	83 ec 0c             	sub    esp,0xc
c00206f1:	68 64 6b 02 c0       	push   0xc0026b64
c00206f6:	e8 16 96 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c00206fb:	83 c4 10             	add    esp,0x10
c00206fe:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c0020705:	74 0d                	je     c0020714 <SATA::access(unsigned long long, int, void*, bool)+0x16e>
c0020707:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002070c:	74 34                	je     c0020742 <SATA::access(unsigned long long, int, void*, bool)+0x19c>
c002070e:	eb 1f                	jmp    c002072f <SATA::access(unsigned long long, int, void*, bool)+0x189>
c0020710:	3c 1c                	cmp    al,0x1c
c0020712:	74 0c                	je     c0020720 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c0020714:	e4 60                	in     al,0x60
c0020716:	3c 5a                	cmp    al,0x5a
c0020718:	75 f6                	jne    c0020710 <SATA::access(unsigned long long, int, void*, bool)+0x16a>
c002071a:	eb 04                	jmp    c0020720 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c002071c:	3c 1c                	cmp    al,0x1c
c002071e:	75 e7                	jne    c0020707 <SATA::access(unsigned long long, int, void*, bool)+0x161>
c0020720:	e4 60                	in     al,0x60
c0020722:	3c 5a                	cmp    al,0x5a
c0020724:	74 fa                	je     c0020720 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c0020726:	eb f4                	jmp    c002071c <SATA::access(unsigned long long, int, void*, bool)+0x176>
c0020728:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002072d:	74 1c                	je     c002074b <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c002072f:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0020733:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0020739:	c1 e1 09             	shl    ecx,0x9
c002073c:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0020740:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020742:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c0020749:	75 55                	jne    c00207a0 <SATA::access(unsigned long long, int, void*, bool)+0x1fa>
c002074b:	8d 45 02             	lea    eax,[ebp+0x2]
c002074e:	c1 e0 07             	shl    eax,0x7
c0020751:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020755:	8b 38                	mov    edi,DWORD PTR [eax]
c0020757:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c002075d:	2b b8 5c 01 00 00    	sub    edi,DWORD PTR [eax+0x15c]
c0020763:	03 b8 58 01 00 00    	add    edi,DWORD PTR [eax+0x158]
c0020769:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002076d:	c1 e0 05             	shl    eax,0x5
c0020770:	01 c7                	add    edi,eax
c0020772:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020776:	83 e0 01             	and    eax,0x1
c0020779:	c1 e0 06             	shl    eax,0x6
c002077c:	88 c2                	mov    dl,al
c002077e:	8a 07                	mov    al,BYTE PTR [edi]
c0020780:	83 e0 bf             	and    eax,0xffffffbf
c0020783:	09 d0                	or     eax,edx
c0020785:	88 07                	mov    BYTE PTR [edi],al
c0020787:	8b 07                	mov    eax,DWORD PTR [edi]
c0020789:	25 e0 ff 00 00       	and    eax,0xffe0
c002078e:	0d 05 00 01 00       	or     eax,0x10005
c0020793:	89 07                	mov    DWORD PTR [edi],eax
c0020795:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c002079c:	74 4d                	je     c00207eb <SATA::access(unsigned long long, int, void*, bool)+0x245>
c002079e:	eb 32                	jmp    c00207d2 <SATA::access(unsigned long long, int, void*, bool)+0x22c>
c00207a0:	83 ec 0c             	sub    esp,0xc
c00207a3:	68 73 6b 02 c0       	push   0xc0026b73
c00207a8:	e8 64 95 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c00207ad:	83 c4 10             	add    esp,0x10
c00207b0:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c00207b7:	75 92                	jne    c002074b <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c00207b9:	e4 60                	in     al,0x60
c00207bb:	3c 1c                	cmp    al,0x1c
c00207bd:	74 04                	je     c00207c3 <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c00207bf:	3c 5a                	cmp    al,0x5a
c00207c1:	75 f6                	jne    c00207b9 <SATA::access(unsigned long long, int, void*, bool)+0x213>
c00207c3:	e4 60                	in     al,0x60
c00207c5:	3c 5a                	cmp    al,0x5a
c00207c7:	74 fa                	je     c00207c3 <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c00207c9:	3c 1c                	cmp    al,0x1c
c00207cb:	74 f6                	je     c00207c3 <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c00207cd:	e9 79 ff ff ff       	jmp    c002074b <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c00207d2:	83 ec 0c             	sub    esp,0xc
c00207d5:	68 82 6b 02 c0       	push   0xc0026b82
c00207da:	e8 32 95 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c00207df:	83 c4 10             	add    esp,0x10
c00207e2:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c00207e9:	74 3b                	je     c0020826 <SATA::access(unsigned long long, int, void*, bool)+0x280>
c00207eb:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c00207f1:	8b b0 58 01 00 00    	mov    esi,DWORD PTR [eax+0x158]
c00207f7:	2b b0 5c 01 00 00    	sub    esi,DWORD PTR [eax+0x15c]
c00207fd:	03 77 08             	add    esi,DWORD PTR [edi+0x8]
c0020800:	50                   	push   eax
c0020801:	0f b7 47 02          	movzx  eax,WORD PTR [edi+0x2]
c0020805:	83 c0 08             	add    eax,0x8
c0020808:	c1 e0 04             	shl    eax,0x4
c002080b:	50                   	push   eax
c002080c:	6a 00                	push   0x0
c002080e:	56                   	push   esi
c002080f:	e8 68 fe fd ff       	call   c000067c <memset>
c0020814:	83 c4 10             	add    esp,0x10
c0020817:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c002081e:	74 33                	je     c0020853 <SATA::access(unsigned long long, int, void*, bool)+0x2ad>
c0020820:	eb 18                	jmp    c002083a <SATA::access(unsigned long long, int, void*, bool)+0x294>
c0020822:	3c 1c                	cmp    al,0x1c
c0020824:	74 0c                	je     c0020832 <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c0020826:	e4 60                	in     al,0x60
c0020828:	3c 5a                	cmp    al,0x5a
c002082a:	75 f6                	jne    c0020822 <SATA::access(unsigned long long, int, void*, bool)+0x27c>
c002082c:	eb 04                	jmp    c0020832 <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c002082e:	3c 1c                	cmp    al,0x1c
c0020830:	75 b9                	jne    c00207eb <SATA::access(unsigned long long, int, void*, bool)+0x245>
c0020832:	e4 60                	in     al,0x60
c0020834:	3c 5a                	cmp    al,0x5a
c0020836:	74 fa                	je     c0020832 <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c0020838:	eb f4                	jmp    c002082e <SATA::access(unsigned long long, int, void*, bool)+0x288>
c002083a:	83 ec 0c             	sub    esp,0xc
c002083d:	68 91 6b 02 c0       	push   0xc0026b91
c0020842:	e8 ca 94 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0020847:	83 c4 10             	add    esp,0x10
c002084a:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c0020851:	74 48                	je     c002089b <SATA::access(unsigned long long, int, void*, bool)+0x2f5>
c0020853:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0020859:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c002085f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0020863:	c1 e0 09             	shl    eax,0x9
c0020866:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002086a:	48                   	dec    eax
c002086b:	25 ff ff 3f 00       	and    eax,0x3fffff
c0020870:	89 c2                	mov    edx,eax
c0020872:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0020878:	25 00 00 c0 ff       	and    eax,0xffc00000
c002087d:	09 d0                	or     eax,edx
c002087f:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0020885:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c002088c:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c0020893:	74 33                	je     c00208c8 <SATA::access(unsigned long long, int, void*, bool)+0x322>
c0020895:	eb 18                	jmp    c00208af <SATA::access(unsigned long long, int, void*, bool)+0x309>
c0020897:	3c 1c                	cmp    al,0x1c
c0020899:	74 0c                	je     c00208a7 <SATA::access(unsigned long long, int, void*, bool)+0x301>
c002089b:	e4 60                	in     al,0x60
c002089d:	3c 5a                	cmp    al,0x5a
c002089f:	75 f6                	jne    c0020897 <SATA::access(unsigned long long, int, void*, bool)+0x2f1>
c00208a1:	eb 04                	jmp    c00208a7 <SATA::access(unsigned long long, int, void*, bool)+0x301>
c00208a3:	3c 1c                	cmp    al,0x1c
c00208a5:	75 ac                	jne    c0020853 <SATA::access(unsigned long long, int, void*, bool)+0x2ad>
c00208a7:	e4 60                	in     al,0x60
c00208a9:	3c 5a                	cmp    al,0x5a
c00208ab:	74 fa                	je     c00208a7 <SATA::access(unsigned long long, int, void*, bool)+0x301>
c00208ad:	eb f4                	jmp    c00208a3 <SATA::access(unsigned long long, int, void*, bool)+0x2fd>
c00208af:	83 ec 0c             	sub    esp,0xc
c00208b2:	68 a0 6b 02 c0       	push   0xc0026ba0
c00208b7:	e8 55 94 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c00208bc:	83 c4 10             	add    esp,0x10
c00208bf:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c00208c6:	74 63                	je     c002092b <SATA::access(unsigned long long, int, void*, bool)+0x385>
c00208c8:	66 8b 06             	mov    ax,WORD PTR [esi]
c00208cb:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c00208cf:	66 25 00 7f          	and    ax,0x7f00
c00208d3:	66 0d 27 80          	or     ax,0x8027
c00208d7:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c00208dc:	66 89 06             	mov    WORD PTR [esi],ax
c00208df:	19 c0                	sbb    eax,eax
c00208e1:	83 e0 f0             	and    eax,0xfffffff0
c00208e4:	83 c0 35             	add    eax,0x35
c00208e7:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00208ea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00208ee:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c00208f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00208f6:	c1 e8 10             	shr    eax,0x10
c00208f9:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c00208fc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020900:	c1 e8 18             	shr    eax,0x18
c0020903:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c002090a:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c002090d:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0020911:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0020914:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020918:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c002091b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002091f:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0020923:	74 33                	je     c0020958 <SATA::access(unsigned long long, int, void*, bool)+0x3b2>
c0020925:	eb 18                	jmp    c002093f <SATA::access(unsigned long long, int, void*, bool)+0x399>
c0020927:	3c 1c                	cmp    al,0x1c
c0020929:	74 0c                	je     c0020937 <SATA::access(unsigned long long, int, void*, bool)+0x391>
c002092b:	e4 60                	in     al,0x60
c002092d:	3c 5a                	cmp    al,0x5a
c002092f:	75 f6                	jne    c0020927 <SATA::access(unsigned long long, int, void*, bool)+0x381>
c0020931:	eb 04                	jmp    c0020937 <SATA::access(unsigned long long, int, void*, bool)+0x391>
c0020933:	3c 1c                	cmp    al,0x1c
c0020935:	75 91                	jne    c00208c8 <SATA::access(unsigned long long, int, void*, bool)+0x322>
c0020937:	e4 60                	in     al,0x60
c0020939:	3c 5a                	cmp    al,0x5a
c002093b:	74 fa                	je     c0020937 <SATA::access(unsigned long long, int, void*, bool)+0x391>
c002093d:	eb f4                	jmp    c0020933 <SATA::access(unsigned long long, int, void*, bool)+0x38d>
c002093f:	83 ec 0c             	sub    esp,0xc
c0020942:	68 af 6b 02 c0       	push   0xc0026baf
c0020947:	e8 c5 93 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c002094c:	83 c4 10             	add    esp,0x10
c002094f:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c0020956:	74 11                	je     c0020969 <SATA::access(unsigned long long, int, void*, bool)+0x3c3>
c0020958:	89 e8                	mov    eax,ebp
c002095a:	31 f6                	xor    esi,esi
c002095c:	c1 e0 07             	shl    eax,0x7
c002095f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020963:	eb 21                	jmp    c0020986 <SATA::access(unsigned long long, int, void*, bool)+0x3e0>
c0020965:	3c 1c                	cmp    al,0x1c
c0020967:	74 0c                	je     c0020975 <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c0020969:	e4 60                	in     al,0x60
c002096b:	3c 5a                	cmp    al,0x5a
c002096d:	75 f6                	jne    c0020965 <SATA::access(unsigned long long, int, void*, bool)+0x3bf>
c002096f:	eb 04                	jmp    c0020975 <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c0020971:	3c 1c                	cmp    al,0x1c
c0020973:	75 e3                	jne    c0020958 <SATA::access(unsigned long long, int, void*, bool)+0x3b2>
c0020975:	e4 60                	in     al,0x60
c0020977:	3c 5a                	cmp    al,0x5a
c0020979:	74 fa                	je     c0020975 <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c002097b:	eb f4                	jmp    c0020971 <SATA::access(unsigned long long, int, void*, bool)+0x3cb>
c002097d:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c0020983:	74 0c                	je     c0020991 <SATA::access(unsigned long long, int, void*, bool)+0x3eb>
c0020985:	46                   	inc    esi
c0020986:	8b 90 20 01 00 00    	mov    edx,DWORD PTR [eax+0x120]
c002098c:	80 e2 88             	and    dl,0x88
c002098f:	75 ec                	jne    c002097d <SATA::access(unsigned long long, int, void*, bool)+0x3d7>
c0020991:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c0020998:	74 3d                	je     c00209d7 <SATA::access(unsigned long long, int, void*, bool)+0x431>
c002099a:	83 ec 0c             	sub    esp,0xc
c002099d:	68 be 6b 02 c0       	push   0xc0026bbe
c00209a2:	e8 6a 93 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c00209a7:	8b 15 20 7e 02 c0    	mov    edx,DWORD PTR ds:0xc0027e20
c00209ad:	83 c4 10             	add    esp,0x10
c00209b0:	f6 c2 80             	test   dl,0x80
c00209b3:	74 0e                	je     c00209c3 <SATA::access(unsigned long long, int, void*, bool)+0x41d>
c00209b5:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c00209bb:	75 2f                	jne    c00209ec <SATA::access(unsigned long long, int, void*, bool)+0x446>
c00209bd:	eb 20                	jmp    c00209df <SATA::access(unsigned long long, int, void*, bool)+0x439>
c00209bf:	3c 1c                	cmp    al,0x1c
c00209c1:	74 0c                	je     c00209cf <SATA::access(unsigned long long, int, void*, bool)+0x429>
c00209c3:	e4 60                	in     al,0x60
c00209c5:	3c 5a                	cmp    al,0x5a
c00209c7:	75 f6                	jne    c00209bf <SATA::access(unsigned long long, int, void*, bool)+0x419>
c00209c9:	eb 04                	jmp    c00209cf <SATA::access(unsigned long long, int, void*, bool)+0x429>
c00209cb:	3c 1c                	cmp    al,0x1c
c00209cd:	75 e6                	jne    c00209b5 <SATA::access(unsigned long long, int, void*, bool)+0x40f>
c00209cf:	e4 60                	in     al,0x60
c00209d1:	3c 5a                	cmp    al,0x5a
c00209d3:	74 fa                	je     c00209cf <SATA::access(unsigned long long, int, void*, bool)+0x429>
c00209d5:	eb f4                	jmp    c00209cb <SATA::access(unsigned long long, int, void*, bool)+0x425>
c00209d7:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c00209dd:	75 13                	jne    c00209f2 <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c00209df:	83 ec 0c             	sub    esp,0xc
c00209e2:	68 ce 6b 02 c0       	push   0xc0026bce
c00209e7:	e9 d2 00 00 00       	jmp    c0020abe <SATA::access(unsigned long long, int, void*, bool)+0x518>
c00209ec:	0f ba e2 0b          	bt     edx,0xb
c00209f0:	72 25                	jb     c0020a17 <SATA::access(unsigned long long, int, void*, bool)+0x471>
c00209f2:	be 01 00 00 00       	mov    esi,0x1
c00209f7:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00209fb:	89 e8                	mov    eax,ebp
c00209fd:	d3 e6                	shl    esi,cl
c00209ff:	c1 e0 07             	shl    eax,0x7
c0020a02:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020a06:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c0020a0d:	89 b0 38 01 00 00    	mov    DWORD PTR [eax+0x138],esi
c0020a13:	74 4a                	je     c0020a5f <SATA::access(unsigned long long, int, void*, bool)+0x4b9>
c0020a15:	eb 2f                	jmp    c0020a46 <SATA::access(unsigned long long, int, void*, bool)+0x4a0>
c0020a17:	83 ec 0c             	sub    esp,0xc
c0020a1a:	68 dc 6b 02 c0       	push   0xc0026bdc
c0020a1f:	e8 ed 92 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0020a24:	83 c4 10             	add    esp,0x10
c0020a27:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c0020a2e:	75 c2                	jne    c00209f2 <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c0020a30:	e4 60                	in     al,0x60
c0020a32:	3c 5a                	cmp    al,0x5a
c0020a34:	74 04                	je     c0020a3a <SATA::access(unsigned long long, int, void*, bool)+0x494>
c0020a36:	3c 1c                	cmp    al,0x1c
c0020a38:	75 f6                	jne    c0020a30 <SATA::access(unsigned long long, int, void*, bool)+0x48a>
c0020a3a:	e4 60                	in     al,0x60
c0020a3c:	3c 5a                	cmp    al,0x5a
c0020a3e:	74 fa                	je     c0020a3a <SATA::access(unsigned long long, int, void*, bool)+0x494>
c0020a40:	3c 1c                	cmp    al,0x1c
c0020a42:	74 f6                	je     c0020a3a <SATA::access(unsigned long long, int, void*, bool)+0x494>
c0020a44:	eb ac                	jmp    c00209f2 <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c0020a46:	83 ec 0c             	sub    esp,0xc
c0020a49:	68 ec 6b 02 c0       	push   0xc0026bec
c0020a4e:	e8 be 92 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0020a53:	83 c4 10             	add    esp,0x10
c0020a56:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c0020a5d:	74 0f                	je     c0020a6e <SATA::access(unsigned long long, int, void*, bool)+0x4c8>
c0020a5f:	89 e8                	mov    eax,ebp
c0020a61:	c1 e0 07             	shl    eax,0x7
c0020a64:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020a68:	eb 24                	jmp    c0020a8e <SATA::access(unsigned long long, int, void*, bool)+0x4e8>
c0020a6a:	3c 1c                	cmp    al,0x1c
c0020a6c:	74 0c                	je     c0020a7a <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c0020a6e:	e4 60                	in     al,0x60
c0020a70:	3c 5a                	cmp    al,0x5a
c0020a72:	75 f6                	jne    c0020a6a <SATA::access(unsigned long long, int, void*, bool)+0x4c4>
c0020a74:	eb 04                	jmp    c0020a7a <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c0020a76:	3c 1c                	cmp    al,0x1c
c0020a78:	75 e5                	jne    c0020a5f <SATA::access(unsigned long long, int, void*, bool)+0x4b9>
c0020a7a:	e4 60                	in     al,0x60
c0020a7c:	3c 5a                	cmp    al,0x5a
c0020a7e:	74 fa                	je     c0020a7a <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c0020a80:	eb f4                	jmp    c0020a76 <SATA::access(unsigned long long, int, void*, bool)+0x4d0>
c0020a82:	8b 90 10 01 00 00    	mov    edx,DWORD PTR [eax+0x110]
c0020a88:	0f ba e2 1e          	bt     edx,0x1e
c0020a8c:	72 28                	jb     c0020ab6 <SATA::access(unsigned long long, int, void*, bool)+0x510>
c0020a8e:	8b 90 38 01 00 00    	mov    edx,DWORD PTR [eax+0x138]
c0020a94:	85 d6                	test   esi,edx
c0020a96:	75 ea                	jne    c0020a82 <SATA::access(unsigned long long, int, void*, bool)+0x4dc>
c0020a98:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c0020a9f:	75 2f                	jne    c0020ad0 <SATA::access(unsigned long long, int, void*, bool)+0x52a>
c0020aa1:	89 e8                	mov    eax,ebp
c0020aa3:	c1 e0 07             	shl    eax,0x7
c0020aa6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020aaa:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0020ab0:	0f ba e0 1e          	bt     eax,0x1e
c0020ab4:	73 49                	jae    c0020aff <SATA::access(unsigned long long, int, void*, bool)+0x559>
c0020ab6:	83 ec 0c             	sub    esp,0xc
c0020ab9:	68 fc 6b 02 c0       	push   0xc0026bfc
c0020abe:	e8 02 c5 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0020ac3:	83 c4 10             	add    esp,0x10
c0020ac6:	b8 01 00 00 00       	mov    eax,0x1
c0020acb:	e9 c5 00 00 00       	jmp    c0020b95 <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c0020ad0:	83 ec 0c             	sub    esp,0xc
c0020ad3:	68 0d 6c 02 c0       	push   0xc0026c0d
c0020ad8:	e8 34 92 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0020add:	83 c4 10             	add    esp,0x10
c0020ae0:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c0020ae7:	75 b8                	jne    c0020aa1 <SATA::access(unsigned long long, int, void*, bool)+0x4fb>
c0020ae9:	e4 60                	in     al,0x60
c0020aeb:	3c 5a                	cmp    al,0x5a
c0020aed:	74 04                	je     c0020af3 <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c0020aef:	3c 1c                	cmp    al,0x1c
c0020af1:	75 f6                	jne    c0020ae9 <SATA::access(unsigned long long, int, void*, bool)+0x543>
c0020af3:	e4 60                	in     al,0x60
c0020af5:	3c 5a                	cmp    al,0x5a
c0020af7:	74 fa                	je     c0020af3 <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c0020af9:	3c 1c                	cmp    al,0x1c
c0020afb:	74 f6                	je     c0020af3 <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c0020afd:	eb a2                	jmp    c0020aa1 <SATA::access(unsigned long long, int, void*, bool)+0x4fb>
c0020aff:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c0020b06:	74 3a                	je     c0020b42 <SATA::access(unsigned long long, int, void*, bool)+0x59c>
c0020b08:	83 ec 0c             	sub    esp,0xc
c0020b0b:	68 1d 6c 02 c0       	push   0xc0026c1d
c0020b10:	e8 fc 91 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0020b15:	83 c4 10             	add    esp,0x10
c0020b18:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c0020b1f:	74 0d                	je     c0020b2e <SATA::access(unsigned long long, int, void*, bool)+0x588>
c0020b21:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020b26:	75 31                	jne    c0020b59 <SATA::access(unsigned long long, int, void*, bool)+0x5b3>
c0020b28:	eb 1f                	jmp    c0020b49 <SATA::access(unsigned long long, int, void*, bool)+0x5a3>
c0020b2a:	3c 1c                	cmp    al,0x1c
c0020b2c:	74 0c                	je     c0020b3a <SATA::access(unsigned long long, int, void*, bool)+0x594>
c0020b2e:	e4 60                	in     al,0x60
c0020b30:	3c 5a                	cmp    al,0x5a
c0020b32:	75 f6                	jne    c0020b2a <SATA::access(unsigned long long, int, void*, bool)+0x584>
c0020b34:	eb 04                	jmp    c0020b3a <SATA::access(unsigned long long, int, void*, bool)+0x594>
c0020b36:	3c 1c                	cmp    al,0x1c
c0020b38:	75 e7                	jne    c0020b21 <SATA::access(unsigned long long, int, void*, bool)+0x57b>
c0020b3a:	e4 60                	in     al,0x60
c0020b3c:	3c 5a                	cmp    al,0x5a
c0020b3e:	74 fa                	je     c0020b3a <SATA::access(unsigned long long, int, void*, bool)+0x594>
c0020b40:	eb f4                	jmp    c0020b36 <SATA::access(unsigned long long, int, void*, bool)+0x590>
c0020b42:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020b47:	75 19                	jne    c0020b62 <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c0020b49:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0020b4f:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0020b53:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020b57:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020b59:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c0020b60:	75 04                	jne    c0020b66 <SATA::access(unsigned long long, int, void*, bool)+0x5c0>
c0020b62:	31 c0                	xor    eax,eax
c0020b64:	eb 2f                	jmp    c0020b95 <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c0020b66:	83 ec 0c             	sub    esp,0xc
c0020b69:	68 2d 6c 02 c0       	push   0xc0026c2d
c0020b6e:	e8 9e 91 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0020b73:	83 c4 10             	add    esp,0x10
c0020b76:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c0020b7d:	75 e3                	jne    c0020b62 <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c0020b7f:	e4 60                	in     al,0x60
c0020b81:	3c 1c                	cmp    al,0x1c
c0020b83:	74 04                	je     c0020b89 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c0020b85:	3c 5a                	cmp    al,0x5a
c0020b87:	75 f6                	jne    c0020b7f <SATA::access(unsigned long long, int, void*, bool)+0x5d9>
c0020b89:	e4 60                	in     al,0x60
c0020b8b:	3c 5a                	cmp    al,0x5a
c0020b8d:	74 fa                	je     c0020b89 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c0020b8f:	3c 1c                	cmp    al,0x1c
c0020b91:	74 f6                	je     c0020b89 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c0020b93:	eb cd                	jmp    c0020b62 <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c0020b95:	83 c4 2c             	add    esp,0x2c
c0020b98:	5b                   	pop    ebx
c0020b99:	5e                   	pop    esi
c0020b9a:	5f                   	pop    edi
c0020b9b:	5d                   	pop    ebp
c0020b9c:	c3                   	ret    
c0020b9d:	90                   	nop

c0020b9e <SATA::read(unsigned long long, int, void*)>:
c0020b9e:	55                   	push   ebp
c0020b9f:	57                   	push   edi
c0020ba0:	56                   	push   esi
c0020ba1:	53                   	push   ebx
c0020ba2:	83 ec 0c             	sub    esp,0xc
c0020ba5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0020ba9:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0020bad:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0020bb1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0020bb5:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c0020bbc:	74 2d                	je     c0020beb <SATA::read(unsigned long long, int, void*)+0x4d>
c0020bbe:	83 ec 0c             	sub    esp,0xc
c0020bc1:	68 3d 6c 02 c0       	push   0xc0026c3d
c0020bc6:	e8 46 91 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0020bcb:	83 c4 10             	add    esp,0x10
c0020bce:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c0020bd5:	75 14                	jne    c0020beb <SATA::read(unsigned long long, int, void*)+0x4d>
c0020bd7:	e4 60                	in     al,0x60
c0020bd9:	3c 1c                	cmp    al,0x1c
c0020bdb:	74 04                	je     c0020be1 <SATA::read(unsigned long long, int, void*)+0x43>
c0020bdd:	3c 5a                	cmp    al,0x5a
c0020bdf:	75 f6                	jne    c0020bd7 <SATA::read(unsigned long long, int, void*)+0x39>
c0020be1:	e4 60                	in     al,0x60
c0020be3:	3c 5a                	cmp    al,0x5a
c0020be5:	74 fa                	je     c0020be1 <SATA::read(unsigned long long, int, void*)+0x43>
c0020be7:	3c 1c                	cmp    al,0x1c
c0020be9:	74 f6                	je     c0020be1 <SATA::read(unsigned long long, int, void*)+0x43>
c0020beb:	8d 53 ff             	lea    edx,[ebx-0x1]
c0020bee:	b8 04 00 00 00       	mov    eax,0x4
c0020bf3:	81 fa fe 00 00 00    	cmp    edx,0xfe
c0020bf9:	0f 87 96 00 00 00    	ja     c0020c95 <SATA::read(unsigned long long, int, void*)+0xf7>
c0020bff:	b8 06 00 00 00       	mov    eax,0x6
c0020c04:	85 ed                	test   ebp,ebp
c0020c06:	0f 84 89 00 00 00    	je     c0020c95 <SATA::read(unsigned long long, int, void*)+0xf7>
c0020c0c:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c0020c13:	74 2d                	je     c0020c42 <SATA::read(unsigned long long, int, void*)+0xa4>
c0020c15:	83 ec 0c             	sub    esp,0xc
c0020c18:	68 4a 6c 02 c0       	push   0xc0026c4a
c0020c1d:	e8 ef 90 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0020c22:	83 c4 10             	add    esp,0x10
c0020c25:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c0020c2c:	75 14                	jne    c0020c42 <SATA::read(unsigned long long, int, void*)+0xa4>
c0020c2e:	e4 60                	in     al,0x60
c0020c30:	3c 5a                	cmp    al,0x5a
c0020c32:	74 04                	je     c0020c38 <SATA::read(unsigned long long, int, void*)+0x9a>
c0020c34:	3c 1c                	cmp    al,0x1c
c0020c36:	75 f6                	jne    c0020c2e <SATA::read(unsigned long long, int, void*)+0x90>
c0020c38:	e4 60                	in     al,0x60
c0020c3a:	3c 5a                	cmp    al,0x5a
c0020c3c:	74 fa                	je     c0020c38 <SATA::read(unsigned long long, int, void*)+0x9a>
c0020c3e:	3c 1c                	cmp    al,0x1c
c0020c40:	74 f6                	je     c0020c38 <SATA::read(unsigned long long, int, void*)+0x9a>
c0020c42:	50                   	push   eax
c0020c43:	50                   	push   eax
c0020c44:	6a 00                	push   0x0
c0020c46:	55                   	push   ebp
c0020c47:	53                   	push   ebx
c0020c48:	57                   	push   edi
c0020c49:	56                   	push   esi
c0020c4a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020c4e:	e8 53 f9 ff ff       	call   c00205a6 <SATA::access(unsigned long long, int, void*, bool)>
c0020c53:	83 c4 20             	add    esp,0x20
c0020c56:	89 c3                	mov    ebx,eax
c0020c58:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c0020c5f:	74 2d                	je     c0020c8e <SATA::read(unsigned long long, int, void*)+0xf0>
c0020c61:	83 ec 0c             	sub    esp,0xc
c0020c64:	68 57 6c 02 c0       	push   0xc0026c57
c0020c69:	e8 a3 90 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0020c6e:	83 c4 10             	add    esp,0x10
c0020c71:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c0020c78:	75 14                	jne    c0020c8e <SATA::read(unsigned long long, int, void*)+0xf0>
c0020c7a:	e4 60                	in     al,0x60
c0020c7c:	3c 5a                	cmp    al,0x5a
c0020c7e:	74 04                	je     c0020c84 <SATA::read(unsigned long long, int, void*)+0xe6>
c0020c80:	3c 1c                	cmp    al,0x1c
c0020c82:	75 f6                	jne    c0020c7a <SATA::read(unsigned long long, int, void*)+0xdc>
c0020c84:	e4 60                	in     al,0x60
c0020c86:	3c 5a                	cmp    al,0x5a
c0020c88:	74 fa                	je     c0020c84 <SATA::read(unsigned long long, int, void*)+0xe6>
c0020c8a:	3c 1c                	cmp    al,0x1c
c0020c8c:	74 f6                	je     c0020c84 <SATA::read(unsigned long long, int, void*)+0xe6>
c0020c8e:	31 c0                	xor    eax,eax
c0020c90:	85 db                	test   ebx,ebx
c0020c92:	0f 95 c0             	setne  al
c0020c95:	83 c4 0c             	add    esp,0xc
c0020c98:	5b                   	pop    ebx
c0020c99:	5e                   	pop    esi
c0020c9a:	5f                   	pop    edi
c0020c9b:	5d                   	pop    ebp
c0020c9c:	c3                   	ret    
c0020c9d:	90                   	nop

c0020c9e <SATA::write(unsigned long long, int, void*)>:
c0020c9e:	55                   	push   ebp
c0020c9f:	57                   	push   edi
c0020ca0:	56                   	push   esi
c0020ca1:	53                   	push   ebx
c0020ca2:	83 ec 1c             	sub    esp,0x1c
c0020ca5:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0020ca9:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0020cad:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0020cb1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0020cb5:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c0020cbc:	74 2d                	je     c0020ceb <SATA::write(unsigned long long, int, void*)+0x4d>
c0020cbe:	83 ec 0c             	sub    esp,0xc
c0020cc1:	68 64 6c 02 c0       	push   0xc0026c64
c0020cc6:	e8 46 90 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0020ccb:	83 c4 10             	add    esp,0x10
c0020cce:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c0020cd5:	75 14                	jne    c0020ceb <SATA::write(unsigned long long, int, void*)+0x4d>
c0020cd7:	e4 60                	in     al,0x60
c0020cd9:	3c 1c                	cmp    al,0x1c
c0020cdb:	74 04                	je     c0020ce1 <SATA::write(unsigned long long, int, void*)+0x43>
c0020cdd:	3c 5a                	cmp    al,0x5a
c0020cdf:	75 f6                	jne    c0020cd7 <SATA::write(unsigned long long, int, void*)+0x39>
c0020ce1:	e4 60                	in     al,0x60
c0020ce3:	3c 5a                	cmp    al,0x5a
c0020ce5:	74 fa                	je     c0020ce1 <SATA::write(unsigned long long, int, void*)+0x43>
c0020ce7:	3c 1c                	cmp    al,0x1c
c0020ce9:	74 f6                	je     c0020ce1 <SATA::write(unsigned long long, int, void*)+0x43>
c0020ceb:	8d 55 ff             	lea    edx,[ebp-0x1]
c0020cee:	b8 04 00 00 00       	mov    eax,0x4
c0020cf3:	81 fa fe 00 00 00    	cmp    edx,0xfe
c0020cf9:	0f 87 bd 00 00 00    	ja     c0020dbc <SATA::write(unsigned long long, int, void*)+0x11e>
c0020cff:	b8 06 00 00 00       	mov    eax,0x6
c0020d04:	85 db                	test   ebx,ebx
c0020d06:	0f 84 b0 00 00 00    	je     c0020dbc <SATA::write(unsigned long long, int, void*)+0x11e>
c0020d0c:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c0020d13:	74 2d                	je     c0020d42 <SATA::write(unsigned long long, int, void*)+0xa4>
c0020d15:	83 ec 0c             	sub    esp,0xc
c0020d18:	68 72 6c 02 c0       	push   0xc0026c72
c0020d1d:	e8 ef 8f fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0020d22:	83 c4 10             	add    esp,0x10
c0020d25:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c0020d2c:	75 14                	jne    c0020d42 <SATA::write(unsigned long long, int, void*)+0xa4>
c0020d2e:	e4 60                	in     al,0x60
c0020d30:	3c 1c                	cmp    al,0x1c
c0020d32:	74 04                	je     c0020d38 <SATA::write(unsigned long long, int, void*)+0x9a>
c0020d34:	3c 5a                	cmp    al,0x5a
c0020d36:	75 f6                	jne    c0020d2e <SATA::write(unsigned long long, int, void*)+0x90>
c0020d38:	e4 60                	in     al,0x60
c0020d3a:	3c 5a                	cmp    al,0x5a
c0020d3c:	74 fa                	je     c0020d38 <SATA::write(unsigned long long, int, void*)+0x9a>
c0020d3e:	3c 1c                	cmp    al,0x1c
c0020d40:	74 f6                	je     c0020d38 <SATA::write(unsigned long long, int, void*)+0x9a>
c0020d42:	c1 e5 09             	shl    ebp,0x9
c0020d45:	01 dd                	add    ebp,ebx
c0020d47:	89 f0                	mov    eax,esi
c0020d49:	89 fa                	mov    edx,edi
c0020d4b:	83 c0 01             	add    eax,0x1
c0020d4e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020d52:	83 d2 00             	adc    edx,0x0
c0020d55:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020d59:	50                   	push   eax
c0020d5a:	50                   	push   eax
c0020d5b:	6a 01                	push   0x1
c0020d5d:	53                   	push   ebx
c0020d5e:	81 c3 00 02 00 00    	add    ebx,0x200
c0020d64:	6a 01                	push   0x1
c0020d66:	57                   	push   edi
c0020d67:	56                   	push   esi
c0020d68:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0020d6c:	e8 35 f8 ff ff       	call   c00205a6 <SATA::access(unsigned long long, int, void*, bool)>
c0020d71:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0020d75:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0020d79:	83 c4 20             	add    esp,0x20
c0020d7c:	39 dd                	cmp    ebp,ebx
c0020d7e:	75 c7                	jne    c0020d47 <SATA::write(unsigned long long, int, void*)+0xa9>
c0020d80:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c0020d87:	75 04                	jne    c0020d8d <SATA::write(unsigned long long, int, void*)+0xef>
c0020d89:	31 c0                	xor    eax,eax
c0020d8b:	eb 2f                	jmp    c0020dbc <SATA::write(unsigned long long, int, void*)+0x11e>
c0020d8d:	83 ec 0c             	sub    esp,0xc
c0020d90:	68 80 6c 02 c0       	push   0xc0026c80
c0020d95:	e8 77 8f fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0020d9a:	83 c4 10             	add    esp,0x10
c0020d9d:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c0020da4:	75 e3                	jne    c0020d89 <SATA::write(unsigned long long, int, void*)+0xeb>
c0020da6:	e4 60                	in     al,0x60
c0020da8:	3c 5a                	cmp    al,0x5a
c0020daa:	74 04                	je     c0020db0 <SATA::write(unsigned long long, int, void*)+0x112>
c0020dac:	3c 1c                	cmp    al,0x1c
c0020dae:	75 f6                	jne    c0020da6 <SATA::write(unsigned long long, int, void*)+0x108>
c0020db0:	e4 60                	in     al,0x60
c0020db2:	3c 5a                	cmp    al,0x5a
c0020db4:	74 fa                	je     c0020db0 <SATA::write(unsigned long long, int, void*)+0x112>
c0020db6:	3c 1c                	cmp    al,0x1c
c0020db8:	74 f6                	je     c0020db0 <SATA::write(unsigned long long, int, void*)+0x112>
c0020dba:	eb cd                	jmp    c0020d89 <SATA::write(unsigned long long, int, void*)+0xeb>
c0020dbc:	83 c4 1c             	add    esp,0x1c
c0020dbf:	5b                   	pop    ebx
c0020dc0:	5e                   	pop    esi
c0020dc1:	5f                   	pop    edi
c0020dc2:	5d                   	pop    ebp
c0020dc3:	c3                   	ret    

c0020dc4 <SATAPI::write(unsigned long long, int, void*)>:
c0020dc4:	b8 03 00 00 00       	mov    eax,0x3
c0020dc9:	c3                   	ret    

c0020dca <SATAPI::close(int, int, void*)>:
c0020dca:	83 ec 0c             	sub    esp,0xc
c0020dcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020dd1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020dd7:	85 c0                	test   eax,eax
c0020dd9:	74 0c                	je     c0020de7 <SATAPI::close(int, int, void*)+0x1d>
c0020ddb:	83 ec 0c             	sub    esp,0xc
c0020dde:	8b 10                	mov    edx,DWORD PTR [eax]
c0020de0:	50                   	push   eax
c0020de1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020de4:	83 c4 10             	add    esp,0x10
c0020de7:	31 c0                	xor    eax,eax
c0020de9:	83 c4 0c             	add    esp,0xc
c0020dec:	c3                   	ret    
c0020ded:	90                   	nop

c0020dee <SATAPI::SATAPI()>:
c0020dee:	83 ec 0c             	sub    esp,0xc
c0020df1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020df5:	83 ec 04             	sub    esp,0x4
c0020df8:	68 00 08 00 00       	push   0x800
c0020dfd:	68 c8 6c 02 c0       	push   0xc0026cc8
c0020e02:	50                   	push   eax
c0020e03:	e8 a6 da fe ff       	call   c000e8ae <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020e08:	83 c4 10             	add    esp,0x10
c0020e0b:	ba 04 6e 02 c0       	mov    edx,0xc0026e04
c0020e10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e14:	89 10                	mov    DWORD PTR [eax],edx
c0020e16:	90                   	nop
c0020e17:	83 c4 0c             	add    esp,0xc
c0020e1a:	c3                   	ret    
c0020e1b:	90                   	nop

c0020e1c <SATAPI::diskRemoved()>:
c0020e1c:	c3                   	ret    
c0020e1d:	90                   	nop

c0020e1e <SATAPI::diskInserted()>:
c0020e1e:	83 ec 18             	sub    esp,0x18
c0020e21:	68 d4 6c 02 c0       	push   0xc0026cd4
c0020e26:	e8 9a c1 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0020e2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020e2f:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c0020e36:	83 c4 1c             	add    esp,0x1c
c0020e39:	c3                   	ret    

c0020e3a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0020e3a:	55                   	push   ebp
c0020e3b:	57                   	push   edi
c0020e3c:	56                   	push   esi
c0020e3d:	53                   	push   ebx
c0020e3e:	83 ec 38             	sub    esp,0x38
c0020e41:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0020e45:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0020e49:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0020e4d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0020e51:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0020e55:	68 ec 6c 02 c0       	push   0xc0026cec
c0020e5a:	e8 66 c1 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0020e5f:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0020e65:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020e6b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020e6f:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0020e75:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020e79:	c1 e0 07             	shl    eax,0x7
c0020e7c:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0020e80:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0020e84:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0020e8e:	5a                   	pop    edx
c0020e8f:	59                   	pop    ecx
c0020e90:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020e94:	8d 58 02             	lea    ebx,[eax+0x2]
c0020e97:	c1 e3 07             	shl    ebx,0x7
c0020e9a:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0020e9e:	53                   	push   ebx
c0020e9f:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0020ea5:	e8 08 e4 ff ff       	call   c001f2b2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0020eaa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020eae:	83 c4 10             	add    esp,0x10
c0020eb1:	b8 01 00 00 00       	mov    eax,0x1
c0020eb6:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0020ebb:	0f 84 ff 01 00 00    	je     c00210c0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x286>
c0020ec1:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0020ec7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0020ec9:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0020ecf:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0020ed5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020ed9:	c1 e1 05             	shl    ecx,0x5
c0020edc:	01 c8                	add    eax,ecx
c0020ede:	8b 08                	mov    ecx,DWORD PTR [eax]
c0020ee0:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0020ee6:	81 c9 25 00 01 00    	or     ecx,0x10025
c0020eec:	89 08                	mov    DWORD PTR [eax],ecx
c0020eee:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0020ef4:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0020efa:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0020f00:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0020f03:	8d 7b 40             	lea    edi,[ebx+0x40]
c0020f06:	50                   	push   eax
c0020f07:	68 90 00 00 00       	push   0x90
c0020f0c:	6a 00                	push   0x0
c0020f0e:	53                   	push   ebx
c0020f0f:	e8 68 f7 fd ff       	call   c000067c <memset>
c0020f14:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0020f18:	b9 0c 00 00 00       	mov    ecx,0xc
c0020f1d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020f1f:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c0020f25:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0020f29:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0020f2f:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0020f33:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0020f37:	48                   	dec    eax
c0020f38:	25 ff ff 3f 00       	and    eax,0x3fffff
c0020f3d:	89 c1                	mov    ecx,eax
c0020f3f:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0020f45:	25 00 00 c0 ff       	and    eax,0xffc00000
c0020f4a:	09 c8                	or     eax,ecx
c0020f4c:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0020f52:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0020f55:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0020f5c:	66 25 00 7f          	and    ax,0x7f00
c0020f60:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0020f64:	66 0d 27 80          	or     ax,0x8027
c0020f68:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0020f6c:	66 89 03             	mov    WORD PTR [ebx],ax
c0020f6f:	89 d0                	mov    eax,edx
c0020f71:	c1 ea 18             	shr    edx,0x18
c0020f74:	c1 e8 10             	shr    eax,0x10
c0020f77:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0020f7a:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0020f7d:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0020f81:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0020f84:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020f88:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0020f8b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020f8f:	83 c4 10             	add    esp,0x10
c0020f92:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0020f96:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020f9a:	31 c0                	xor    eax,eax
c0020f9c:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c0020fa2:	80 e1 88             	and    cl,0x88
c0020fa5:	74 0a                	je     c0020fb1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x177>
c0020fa7:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020fac:	74 0a                	je     c0020fb8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17e>
c0020fae:	40                   	inc    eax
c0020faf:	eb eb                	jmp    c0020f9c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x162>
c0020fb1:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020fb6:	75 0a                	jne    c0020fc2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c0020fb8:	83 ec 0c             	sub    esp,0xc
c0020fbb:	68 06 6d 02 c0       	push   0xc0026d06
c0020fc0:	eb 43                	jmp    c0021005 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c0020fc2:	be 01 00 00 00       	mov    esi,0x1
c0020fc7:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0020fcb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020fcf:	d3 e6                	shl    esi,cl
c0020fd1:	c1 e7 07             	shl    edi,0x7
c0020fd4:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c0020fda:	bb 18 fc ff ff       	mov    ebx,0xfffffc18
c0020fdf:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0020fe3:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c0020fe9:	85 c6                	test   esi,eax
c0020feb:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c0020ff1:	0f 84 96 00 00 00    	je     c002108d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x253>
c0020ff7:	0f ba e0 1e          	bt     eax,0x1e
c0020ffb:	73 1a                	jae    c0021017 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1dd>
c0020ffd:	83 ec 0c             	sub    esp,0xc
c0021000:	68 1b 6d 02 c0       	push   0xc0026d1b
c0021005:	e8 bb bf fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c002100a:	83 c4 10             	add    esp,0x10
c002100d:	b8 01 00 00 00       	mov    eax,0x1
c0021012:	e9 a9 00 00 00       	jmp    c00210c0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x286>
c0021017:	83 fb 0d             	cmp    ebx,0xd
c002101a:	77 12                	ja     c002102e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f4>
c002101c:	83 ec 0c             	sub    esp,0xc
c002101f:	68 c8 00 00 00       	push   0xc8
c0021024:	e8 4f 76 ff ff       	call   c0018678 <milliTenthSleep(unsigned int)>
c0021029:	83 c4 10             	add    esp,0x10
c002102c:	eb 2a                	jmp    c0021058 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21e>
c002102e:	8d 83 18 fc ff ff    	lea    eax,[ebx-0x3e8]
c0021034:	83 f8 0d             	cmp    eax,0xd
c0021037:	77 0a                	ja     c0021043 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x209>
c0021039:	83 ec 0c             	sub    esp,0xc
c002103c:	68 58 02 00 00       	push   0x258
c0021041:	eb 28                	jmp    c002106b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x231>
c0021043:	8d 83 30 f8 ff ff    	lea    eax,[ebx-0x7d0]
c0021049:	83 f8 0d             	cmp    eax,0xd
c002104c:	77 0a                	ja     c0021058 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21e>
c002104e:	83 ec 0c             	sub    esp,0xc
c0021051:	68 dc 05 00 00       	push   0x5dc
c0021056:	eb 13                	jmp    c002106b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x231>
c0021058:	8d 83 90 e8 ff ff    	lea    eax,[ebx-0x1770]
c002105e:	83 f8 0d             	cmp    eax,0xd
c0021061:	77 10                	ja     c0021073 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x239>
c0021063:	83 ec 0c             	sub    esp,0xc
c0021066:	68 c4 09 00 00       	push   0x9c4
c002106b:	e8 08 76 ff ff       	call   c0018678 <milliTenthSleep(unsigned int)>
c0021070:	83 c4 10             	add    esp,0x10
c0021073:	43                   	inc    ebx
c0021074:	81 fb 29 23 00 00    	cmp    ebx,0x2329
c002107a:	0f 85 63 ff ff ff    	jne    c0020fe3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1a9>
c0021080:	83 ec 0c             	sub    esp,0xc
c0021083:	68 2e 6d 02 c0       	push   0xc0026d2e
c0021088:	e9 78 ff ff ff       	jmp    c0021005 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c002108d:	0f ba e0 1e          	bt     eax,0x1e
c0021091:	73 0d                	jae    c00210a0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x266>
c0021093:	83 ec 0c             	sub    esp,0xc
c0021096:	68 42 6d 02 c0       	push   0xc0026d42
c002109b:	e9 65 ff ff ff       	jmp    c0021005 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c00210a0:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c00210a5:	74 17                	je     c00210be <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x284>
c00210a7:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00210ac:	74 10                	je     c00210be <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x284>
c00210ae:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c00210b4:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c00210b8:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00210bc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00210be:	31 c0                	xor    eax,eax
c00210c0:	83 c4 2c             	add    esp,0x2c
c00210c3:	5b                   	pop    ebx
c00210c4:	5e                   	pop    esi
c00210c5:	5f                   	pop    edi
c00210c6:	5d                   	pop    ebp
c00210c7:	c3                   	ret    

c00210c8 <SATAPI::eject()>:
c00210c8:	57                   	push   edi
c00210c9:	b9 03 00 00 00       	mov    ecx,0x3
c00210ce:	83 ec 18             	sub    esp,0x18
c00210d1:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00210d5:	fc                   	cld    
c00210d6:	31 c0                	xor    eax,eax
c00210d8:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00210da:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00210df:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00210e4:	50                   	push   eax
c00210e5:	6a 00                	push   0x0
c00210e7:	6a 00                	push   0x0
c00210e9:	6a 00                	push   0x0
c00210eb:	6a 00                	push   0x0
c00210ed:	6a 02                	push   0x2
c00210ef:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00210f3:	50                   	push   eax
c00210f4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00210f8:	e8 3d fd ff ff       	call   c0020e3a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00210fd:	31 c0                	xor    eax,eax
c00210ff:	83 c4 38             	add    esp,0x38
c0021102:	5f                   	pop    edi
c0021103:	c3                   	ret    

c0021104 <SATAPI::detectMedia()>:
c0021104:	56                   	push   esi
c0021105:	53                   	push   ebx
c0021106:	83 ec 30             	sub    esp,0x30
c0021109:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c002110d:	68 57 6d 02 c0       	push   0xc0026d57
c0021112:	e8 ae be fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0021117:	83 c4 0c             	add    esp,0xc
c002111a:	6a 0c                	push   0xc
c002111c:	6a 00                	push   0x0
c002111e:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0021122:	56                   	push   esi
c0021123:	e8 54 f5 fd ff       	call   c000067c <memset>
c0021128:	83 c4 0c             	add    esp,0xc
c002112b:	6a 00                	push   0x0
c002112d:	6a 00                	push   0x0
c002112f:	6a 00                	push   0x0
c0021131:	6a 00                	push   0x0
c0021133:	6a 00                	push   0x0
c0021135:	56                   	push   esi
c0021136:	53                   	push   ebx
c0021137:	e8 fe fc ff ff       	call   c0020e3a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002113c:	83 c4 20             	add    esp,0x20
c002113f:	48                   	dec    eax
c0021140:	74 34                	je     c0021176 <SATAPI::detectMedia()+0x72>
c0021142:	50                   	push   eax
c0021143:	6a 0c                	push   0xc
c0021145:	6a 00                	push   0x0
c0021147:	56                   	push   esi
c0021148:	e8 2f f5 fd ff       	call   c000067c <memset>
c002114d:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0021152:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0021157:	83 c4 0c             	add    esp,0xc
c002115a:	6a 01                	push   0x1
c002115c:	8d 44 24 16          	lea    eax,[esp+0x16]
c0021160:	50                   	push   eax
c0021161:	6a 00                	push   0x0
c0021163:	6a 00                	push   0x0
c0021165:	6a 12                	push   0x12
c0021167:	56                   	push   esi
c0021168:	53                   	push   ebx
c0021169:	e8 cc fc ff ff       	call   c0020e3a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002116e:	83 c4 20             	add    esp,0x20
c0021171:	48                   	dec    eax
c0021172:	75 39                	jne    c00211ad <SATAPI::detectMedia()+0xa9>
c0021174:	eb 1e                	jmp    c0021194 <SATAPI::detectMedia()+0x90>
c0021176:	83 ec 0c             	sub    esp,0xc
c0021179:	68 6b 6d 02 c0       	push   0xc0026d6b
c002117e:	e8 42 be fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0021183:	83 c4 10             	add    esp,0x10
c0021186:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002118d:	74 b3                	je     c0021142 <SATAPI::detectMedia()+0x3e>
c002118f:	e9 93 00 00 00       	jmp    c0021227 <SATAPI::detectMedia()+0x123>
c0021194:	83 ec 0c             	sub    esp,0xc
c0021197:	68 75 6d 02 c0       	push   0xc0026d75
c002119c:	e8 24 be fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00211a1:	83 c4 10             	add    esp,0x10
c00211a4:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00211ab:	75 7a                	jne    c0021227 <SATAPI::detectMedia()+0x123>
c00211ad:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c00211b1:	83 e0 7f             	and    eax,0x7f
c00211b4:	3c 70                	cmp    al,0x70
c00211b6:	74 25                	je     c00211dd <SATAPI::detectMedia()+0xd9>
c00211b8:	83 ec 0c             	sub    esp,0xc
c00211bb:	68 7f 6d 02 c0       	push   0xc0026d7f
c00211c0:	e8 00 be fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00211c5:	83 c4 10             	add    esp,0x10
c00211c8:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00211cf:	75 0c                	jne    c00211dd <SATAPI::detectMedia()+0xd9>
c00211d1:	83 ec 0c             	sub    esp,0xc
c00211d4:	53                   	push   ebx
c00211d5:	e8 44 fc ff ff       	call   c0020e1e <SATAPI::diskInserted()>
c00211da:	83 c4 10             	add    esp,0x10
c00211dd:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00211e1:	83 e0 0f             	and    eax,0xf
c00211e4:	3c 02                	cmp    al,0x2
c00211e6:	75 16                	jne    c00211fe <SATAPI::detectMedia()+0xfa>
c00211e8:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00211ed:	75 38                	jne    c0021227 <SATAPI::detectMedia()+0x123>
c00211ef:	83 ec 0c             	sub    esp,0xc
c00211f2:	68 88 6d 02 c0       	push   0xc0026d88
c00211f7:	e8 c9 bd fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00211fc:	eb 26                	jmp    c0021224 <SATAPI::detectMedia()+0x120>
c00211fe:	84 c0                	test   al,al
c0021200:	75 25                	jne    c0021227 <SATAPI::detectMedia()+0x123>
c0021202:	83 ec 0c             	sub    esp,0xc
c0021205:	68 91 6d 02 c0       	push   0xc0026d91
c002120a:	e8 b6 bd fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c002120f:	83 c4 10             	add    esp,0x10
c0021212:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0021219:	75 0c                	jne    c0021227 <SATAPI::detectMedia()+0x123>
c002121b:	83 ec 0c             	sub    esp,0xc
c002121e:	53                   	push   ebx
c002121f:	e8 fa fb ff ff       	call   c0020e1e <SATAPI::diskInserted()>
c0021224:	83 c4 10             	add    esp,0x10
c0021227:	83 c4 24             	add    esp,0x24
c002122a:	5b                   	pop    ebx
c002122b:	5e                   	pop    esi
c002122c:	c3                   	ret    
c002122d:	90                   	nop

c002122e <SATAPI::open(int, int, void*)>:
c002122e:	56                   	push   esi
c002122f:	53                   	push   ebx
c0021230:	51                   	push   ecx
c0021231:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021235:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021239:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0021243:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0021249:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0021253:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021257:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0021261:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0021267:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002126e:	e8 fb 90 fe ff       	call   c000a36e <Phys::allocatePage()>
c0021273:	89 c6                	mov    esi,eax
c0021275:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c002127b:	81 c6 00 10 00 00    	add    esi,0x1000
c0021281:	e8 e8 90 fe ff       	call   c000a36e <Phys::allocatePage()>
c0021286:	39 c6                	cmp    esi,eax
c0021288:	74 10                	je     c002129a <SATAPI::open(int, int, void*)+0x6c>
c002128a:	83 ec 0c             	sub    esp,0xc
c002128d:	68 9b 6d 02 c0       	push   0xc0026d9b
c0021292:	e8 86 3a ff ff       	call   c0014d1d <Krnl::panic(char const*)>
c0021297:	83 c4 10             	add    esp,0x10
c002129a:	83 ec 0c             	sub    esp,0xc
c002129d:	6a 02                	push   0x2
c002129f:	e8 c5 a9 fe ff       	call   c000bc69 <Virt::allocateKernelVirtualPages(int)>
c00212a4:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c00212aa:	6a 03                	push   0x3
c00212ac:	50                   	push   eax
c00212ad:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c00212b3:	ff 35 34 7f 02 c0    	push   DWORD PTR ds:0xc0027f34
c00212b9:	e8 16 b0 fe ff       	call   c000c2d4 <VAS::mapPage(unsigned long, unsigned long, int)>
c00212be:	83 c4 14             	add    esp,0x14
c00212c1:	68 74 01 00 00       	push   0x174
c00212c6:	e8 ec 89 fe ff       	call   c0009cb7 <malloc>
c00212cb:	83 c4 0c             	add    esp,0xc
c00212ce:	89 c6                	mov    esi,eax
c00212d0:	6a 00                	push   0x0
c00212d2:	68 ff ff ff 7f       	push   0x7fffffff
c00212d7:	6a 00                	push   0x0
c00212d9:	6a 00                	push   0x0
c00212db:	53                   	push   ebx
c00212dc:	68 b1 6d 02 c0       	push   0xc0026db1
c00212e1:	50                   	push   eax
c00212e2:	e8 67 f0 fe ff       	call   c001034e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00212e7:	83 c4 14             	add    esp,0x14
c00212ea:	56                   	push   esi
c00212eb:	e8 14 f1 fe ff       	call   c0010404 <LogicalDisk::assignDriveLetter()>
c00212f0:	5a                   	pop    edx
c00212f1:	0f be c0             	movsx  eax,al
c00212f4:	59                   	pop    ecx
c00212f5:	50                   	push   eax
c00212f6:	68 47 6a 02 c0       	push   0xc0026a47
c00212fb:	e8 c5 bc fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0021300:	58                   	pop    eax
c0021301:	5a                   	pop    edx
c0021302:	56                   	push   esi
c0021303:	53                   	push   ebx
c0021304:	e8 6d d1 fe ff       	call   c000e476 <Device::addChild(Device*)>
c0021309:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c002130f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021312:	e8 ff d5 fe ff       	call   c000e916 <PhysicalDisk::startCache()>
c0021317:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c002131e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021321:	e8 de fd ff ff       	call   c0021104 <SATAPI::detectMedia()>
c0021326:	83 c4 14             	add    esp,0x14
c0021329:	31 c0                	xor    eax,eax
c002132b:	5b                   	pop    ebx
c002132c:	5e                   	pop    esi
c002132d:	c3                   	ret    

c002132e <SATAPI::read(unsigned long long, int, void*)>:
c002132e:	55                   	push   ebp
c002132f:	57                   	push   edi
c0021330:	56                   	push   esi
c0021331:	53                   	push   ebx
c0021332:	83 ec 48             	sub    esp,0x48
c0021335:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0021339:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c002133d:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0021341:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0021345:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021349:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c002134d:	68 bf 6d 02 c0       	push   0xc0026dbf
c0021352:	e8 6e bc fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0021357:	83 c4 10             	add    esp,0x10
c002135a:	83 fb 04             	cmp    ebx,0x4
c002135d:	7e 10                	jle    c002136f <SATAPI::read(unsigned long long, int, void*)+0x41>
c002135f:	83 ec 0c             	sub    esp,0xc
c0021362:	68 d0 6d 02 c0       	push   0xc0026dd0
c0021367:	e8 b1 39 ff ff       	call   c0014d1d <Krnl::panic(char const*)>
c002136c:	83 c4 10             	add    esp,0x10
c002136f:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0021373:	31 ed                	xor    ebp,ebp
c0021375:	b9 03 00 00 00       	mov    ecx,0x3
c002137a:	fc                   	cld    
c002137b:	89 e8                	mov    eax,ebp
c002137d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002137f:	c6 44 24 18 1b       	mov    BYTE PTR [esp+0x18],0x1b
c0021384:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c0021389:	50                   	push   eax
c002138a:	6a 00                	push   0x0
c002138c:	6a 00                	push   0x0
c002138e:	6a 00                	push   0x0
c0021390:	6a 00                	push   0x0
c0021392:	6a 02                	push   0x2
c0021394:	8d 44 24 30          	lea    eax,[esp+0x30]
c0021398:	50                   	push   eax
c0021399:	56                   	push   esi
c002139a:	e8 9b fa ff ff       	call   c0020e3a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002139f:	8d 7c 24 44          	lea    edi,[esp+0x44]
c00213a3:	89 e8                	mov    eax,ebp
c00213a5:	b9 03 00 00 00       	mov    ecx,0x3
c00213aa:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00213ac:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00213b0:	88 5c 24 4d          	mov    BYTE PTR [esp+0x4d],bl
c00213b4:	c6 44 24 44 a8       	mov    BYTE PTR [esp+0x44],0xa8
c00213b9:	86 e0                	xchg   al,ah
c00213bb:	c1 c0 10             	rol    eax,0x10
c00213be:	86 e0                	xchg   al,ah
c00213c0:	89 44 24 46          	mov    DWORD PTR [esp+0x46],eax
c00213c4:	83 c4 1c             	add    esp,0x1c
c00213c7:	53                   	push   ebx
c00213c8:	c1 e3 0b             	shl    ebx,0xb
c00213cb:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c00213cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00213d3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00213d7:	53                   	push   ebx
c00213d8:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00213dc:	50                   	push   eax
c00213dd:	56                   	push   esi
c00213de:	e8 57 fa ff ff       	call   c0020e3a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00213e3:	83 c4 20             	add    esp,0x20
c00213e6:	85 c0                	test   eax,eax
c00213e8:	74 14                	je     c00213fe <SATAPI::read(unsigned long long, int, void*)+0xd0>
c00213ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00213ee:	83 ec 0c             	sub    esp,0xc
c00213f1:	56                   	push   esi
c00213f2:	e8 0d fd ff ff       	call   c0021104 <SATAPI::detectMedia()>
c00213f7:	83 c4 10             	add    esp,0x10
c00213fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00213fe:	83 c4 3c             	add    esp,0x3c
c0021401:	5b                   	pop    ebx
c0021402:	5e                   	pop    esi
c0021403:	5f                   	pop    edi
c0021404:	5d                   	pop    ebp
c0021405:	c3                   	ret    

c0021406 <APIC::disable()>:
c0021406:	90                   	nop
c0021407:	c3                   	ret    

c0021408 <APIC::eoi(unsigned char)>:
c0021408:	55                   	push   ebp
c0021409:	89 e5                	mov    ebp,esp
c002140b:	83 ec 04             	sub    esp,0x4
c002140e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021411:	88 45 fc             	mov    BYTE PTR [ebp-0x4],al
c0021414:	90                   	nop
c0021415:	c9                   	leave  
c0021416:	c3                   	ret    
c0021417:	90                   	nop

c0021418 <APIC::close(int, int, void*)>:
c0021418:	55                   	push   ebp
c0021419:	89 e5                	mov    ebp,esp
c002141b:	83 ec 08             	sub    esp,0x8
c002141e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021421:	8b 00                	mov    eax,DWORD PTR [eax]
c0021423:	83 c0 3c             	add    eax,0x3c
c0021426:	8b 00                	mov    eax,DWORD PTR [eax]
c0021428:	83 ec 0c             	sub    esp,0xc
c002142b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002142e:	ff d0                	call   eax
c0021430:	83 c4 10             	add    esp,0x10
c0021433:	b8 00 00 00 00       	mov    eax,0x0
c0021438:	c9                   	leave  
c0021439:	c3                   	ret    

c002143a <IOAPIC::close(int, int, void*)>:
c002143a:	b8 00 00 00 00       	mov    eax,0x0
c002143f:	c3                   	ret    

c0021440 <APIC::io_wait()>:
c0021440:	eb 00                	jmp    c0021442 <APIC::io_wait()+0x2>
c0021442:	eb 00                	jmp    c0021444 <APIC::io_wait()+0x4>
c0021444:	90                   	nop
c0021445:	c3                   	ret    

c0021446 <APIC::getBase()>:
c0021446:	55                   	push   ebp
c0021447:	89 e5                	mov    ebp,esp
c0021449:	83 ec 18             	sub    esp,0x18
c002144c:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c0021451:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0021457:	83 e0 08             	and    eax,0x8
c002145a:	84 c0                	test   al,al
c002145c:	75 07                	jne    c0021465 <APIC::getBase()+0x1f>
c002145e:	b8 00 00 00 00       	mov    eax,0x0
c0021463:	eb 21                	jmp    c0021486 <APIC::getBase()+0x40>
c0021465:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c002146a:	83 ec 08             	sub    esp,0x8
c002146d:	6a 1b                	push   0x1b
c002146f:	50                   	push   eax
c0021470:	e8 f1 7d fe ff       	call   c0009266 <Computer::rdmsr(unsigned int)>
c0021475:	83 c4 10             	add    esp,0x10
c0021478:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002147b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002147e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0021481:	25 00 f0 ff ff       	and    eax,0xfffff000
c0021486:	c9                   	leave  
c0021487:	c3                   	ret    

c0021488 <APIC::open(int, int, void*)>:
c0021488:	55                   	push   ebp
c0021489:	89 e5                	mov    ebp,esp
c002148b:	57                   	push   edi
c002148c:	56                   	push   esi
c002148d:	53                   	push   ebx
c002148e:	83 ec 2c             	sub    esp,0x2c
c0021491:	83 ec 0c             	sub    esp,0xc
c0021494:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021497:	e8 aa ff ff ff       	call   c0021446 <APIC::getBase()>
c002149c:	83 c4 10             	add    esp,0x10
c002149f:	89 c2                	mov    edx,eax
c00214a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00214a4:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00214aa:	0f b6 f8             	movzx  edi,al
c00214ad:	89 d0                	mov    eax,edx
c00214af:	ba 00 00 00 00       	mov    edx,0x0
c00214b4:	89 c1                	mov    ecx,eax
c00214b6:	80 e5 ff             	and    ch,0xff
c00214b9:	89 cb                	mov    ebx,ecx
c00214bb:	0f b6 f2             	movzx  esi,dl
c00214be:	89 d8                	mov    eax,ebx
c00214c0:	89 f2                	mov    edx,esi
c00214c2:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00214c5:	8d 5f 08             	lea    ebx,[edi+0x8]
c00214c8:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00214cc:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00214d0:	83 e0 00             	and    eax,0x0
c00214d3:	09 d0                	or     eax,edx
c00214d5:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00214d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00214dc:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00214e2:	8d 50 01             	lea    edx,[eax+0x1]
c00214e5:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00214e8:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00214ee:	0f b6 d0             	movzx  edx,al
c00214f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00214f4:	83 c2 08             	add    edx,0x8
c00214f7:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00214fb:	0f b6 c9             	movzx  ecx,cl
c00214fe:	81 c9 00 00 01 00    	or     ecx,0x10000
c0021504:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0021508:	83 ec 0c             	sub    esp,0xc
c002150b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002150e:	e8 33 ff ff ff       	call   c0021446 <APIC::getBase()>
c0021513:	83 c4 10             	add    esp,0x10
c0021516:	05 f0 00 00 00       	add    eax,0xf0
c002151b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002151e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0021521:	8b 00                	mov    eax,DWORD PTR [eax]
c0021523:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0021526:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c002152d:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0021534:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0021537:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002153a:	89 10                	mov    DWORD PTR [eax],edx
c002153c:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0021543:	a1 70 86 02 c0       	mov    eax,ds:0xc0028670
c0021548:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c002154b:	7d 7c                	jge    c00215c9 <APIC::open(int, int, void*)+0x141>
c002154d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0021550:	8b 04 85 80 86 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7980]
c0021557:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c002155a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002155d:	8b 04 85 80 86 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7980]
c0021564:	c1 e8 08             	shr    eax,0x8
c0021567:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c002156b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002156e:	8b 04 85 80 86 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7980]
c0021575:	c1 e8 18             	shr    eax,0x18
c0021578:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c002157b:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c002157f:	75 40                	jne    c00215c1 <APIC::open(int, int, void*)+0x139>
c0021581:	83 ec 0c             	sub    esp,0xc
c0021584:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021587:	e8 ba fe ff ff       	call   c0021446 <APIC::getBase()>
c002158c:	83 c4 10             	add    esp,0x10
c002158f:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0021593:	75 07                	jne    c002159c <APIC::open(int, int, void*)+0x114>
c0021595:	ba 60 03 00 00       	mov    edx,0x360
c002159a:	eb 05                	jmp    c00215a1 <APIC::open(int, int, void*)+0x119>
c002159c:	ba 50 03 00 00       	mov    edx,0x350
c00215a1:	01 d0                	add    eax,edx
c00215a3:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00215a6:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00215a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00215ab:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00215ae:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c00215b5:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c00215b9:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00215bc:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00215bf:	89 10                	mov    DWORD PTR [eax],edx
c00215c1:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c00215c4:	e9 7a ff ff ff       	jmp    c0021543 <APIC::open(int, int, void*)+0xbb>
c00215c9:	b8 00 00 00 00       	mov    eax,0x0
c00215ce:	8d 65 f4             	lea    esp,[ebp-0xc]
c00215d1:	5b                   	pop    ebx
c00215d2:	5e                   	pop    esi
c00215d3:	5f                   	pop    edi
c00215d4:	5d                   	pop    ebp
c00215d5:	c3                   	ret    

c00215d6 <IOAPIC::IOAPIC()>:
c00215d6:	83 ec 0c             	sub    esp,0xc
c00215d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215dd:	83 ec 08             	sub    esp,0x8
c00215e0:	68 34 6e 02 c0       	push   0xc0026e34
c00215e5:	50                   	push   eax
c00215e6:	e8 8f d0 fe ff       	call   c000e67a <Device::Device(char const*)>
c00215eb:	83 c4 10             	add    esp,0x10
c00215ee:	ba 5c 6f 02 c0       	mov    edx,0xc0026f5c
c00215f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215f7:	89 10                	mov    DWORD PTR [eax],edx
c00215f9:	90                   	nop
c00215fa:	83 c4 0c             	add    esp,0xc
c00215fd:	c3                   	ret    

c00215fe <APIC::APIC()>:
c00215fe:	53                   	push   ebx
c00215ff:	83 ec 18             	sub    esp,0x18
c0021602:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021606:	83 ec 08             	sub    esp,0x8
c0021609:	68 3c 6e 02 c0       	push   0xc0026e3c
c002160e:	50                   	push   eax
c002160f:	e8 90 d6 fe ff       	call   c000eca4 <InterruptController::InterruptController(char const*)>
c0021614:	83 c4 10             	add    esp,0x10
c0021617:	ba 14 6f 02 c0       	mov    edx,0xc0026f14
c002161c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021620:	89 10                	mov    DWORD PTR [eax],edx
c0021622:	a0 a0 9d 02 c0       	mov    al,ds:0xc0029da0
c0021627:	83 f0 01             	xor    eax,0x1
c002162a:	84 c0                	test   al,al
c002162c:	0f 84 a1 00 00 00    	je     c00216d3 <APIC::APIC()+0xd5>
c0021632:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0021637:	a0 20 87 02 c0       	mov    al,ds:0xc0028720
c002163c:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0021640:	0f 83 86 00 00 00    	jae    c00216cc <APIC::APIC()+0xce>
c0021646:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c002164e:	83 ec 0c             	sub    esp,0xc
c0021651:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021655:	e8 5d 86 fe ff       	call   c0009cb7 <malloc>
c002165a:	83 c4 10             	add    esp,0x10
c002165d:	89 c3                	mov    ebx,eax
c002165f:	83 ec 0c             	sub    esp,0xc
c0021662:	53                   	push   ebx
c0021663:	e8 6e ff ff ff       	call   c00215d6 <IOAPIC::IOAPIC()>
c0021668:	83 c4 10             	add    esp,0x10
c002166b:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c002166f:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0021674:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021678:	89 14 85 80 9d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6280],edx
c002167f:	a1 60 9d 02 c0       	mov    eax,ds:0xc0029d60
c0021684:	40                   	inc    eax
c0021685:	a3 60 9d 02 c0       	mov    ds:0xc0029d60,eax
c002168a:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c002168f:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0021695:	83 ec 08             	sub    esp,0x8
c0021698:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002169c:	50                   	push   eax
c002169d:	e8 d4 cd fe ff       	call   c000e476 <Device::addChild(Device*)>
c00216a2:	83 c4 10             	add    esp,0x10
c00216a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00216a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00216ab:	83 c0 08             	add    eax,0x8
c00216ae:	8b 00                	mov    eax,DWORD PTR [eax]
c00216b0:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00216b5:	6a 00                	push   0x0
c00216b7:	6a 00                	push   0x0
c00216b9:	52                   	push   edx
c00216ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00216be:	ff d0                	call   eax
c00216c0:	83 c4 10             	add    esp,0x10
c00216c3:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c00216c7:	e9 6b ff ff ff       	jmp    c0021637 <APIC::APIC()+0x39>
c00216cc:	c6 05 a0 9d 02 c0 01 	mov    BYTE PTR ds:0xc0029da0,0x1
c00216d3:	90                   	nop
c00216d4:	83 c4 18             	add    esp,0x18
c00216d7:	5b                   	pop    ebx
c00216d8:	c3                   	ret    
c00216d9:	90                   	nop

c00216da <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c00216da:	55                   	push   ebp
c00216db:	89 e5                	mov    ebp,esp
c00216dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00216e0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00216e6:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00216e9:	72 1d                	jb     c0021708 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00216eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00216ee:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00216f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00216f7:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c00216fd:	01 d0                	add    eax,edx
c00216ff:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0021702:	73 04                	jae    c0021708 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0021704:	b0 01                	mov    al,0x1
c0021706:	eb 02                	jmp    c002170a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0021708:	b0 00                	mov    al,0x0
c002170a:	5d                   	pop    ebp
c002170b:	c3                   	ret    

c002170c <IOAPIC::read(int)>:
c002170c:	55                   	push   ebp
c002170d:	89 e5                	mov    ebp,esp
c002170f:	83 ec 10             	sub    esp,0x10
c0021712:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021715:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002171b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002171e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021721:	0f b6 d0             	movzx  edx,al
c0021724:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0021727:	89 10                	mov    DWORD PTR [eax],edx
c0021729:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002172c:	83 c0 10             	add    eax,0x10
c002172f:	8b 00                	mov    eax,DWORD PTR [eax]
c0021731:	c9                   	leave  
c0021732:	c3                   	ret    
c0021733:	90                   	nop

c0021734 <IOAPIC::open(int, int, void*)>:
c0021734:	55                   	push   ebp
c0021735:	89 e5                	mov    ebp,esp
c0021737:	57                   	push   edi
c0021738:	56                   	push   esi
c0021739:	53                   	push   ebx
c002173a:	83 ec 0c             	sub    esp,0xc
c002173d:	83 ec 0c             	sub    esp,0xc
c0021740:	68 67 6e 02 c0       	push   0xc0026e67
c0021745:	e8 7b b8 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c002174a:	83 c4 10             	add    esp,0x10
c002174d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021750:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021753:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0021759:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002175c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0021762:	8b 14 85 60 87 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd78a0]
c0021769:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002176c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0021772:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021775:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002177b:	8b 14 85 e0 87 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7820]
c0021782:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021785:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c002178b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002178e:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0021794:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021797:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002179d:	0f b6 f8             	movzx  edi,al
c00217a0:	89 d0                	mov    eax,edx
c00217a2:	ba 00 00 00 00       	mov    edx,0x0
c00217a7:	89 c1                	mov    ecx,eax
c00217a9:	80 e5 ff             	and    ch,0xff
c00217ac:	89 cb                	mov    ebx,ecx
c00217ae:	0f b6 f2             	movzx  esi,dl
c00217b1:	89 d8                	mov    eax,ebx
c00217b3:	89 f2                	mov    edx,esi
c00217b5:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00217b8:	8d 5f 08             	lea    ebx,[edi+0x8]
c00217bb:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00217bf:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00217c3:	83 e0 00             	and    eax,0x0
c00217c6:	09 d0                	or     eax,edx
c00217c8:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00217cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00217cf:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00217d5:	8d 50 01             	lea    edx,[eax+0x1]
c00217d8:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00217db:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00217e1:	0f b6 d0             	movzx  edx,al
c00217e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00217e7:	83 c2 08             	add    edx,0x8
c00217ea:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00217ee:	0f b6 c9             	movzx  ecx,cl
c00217f1:	81 c9 00 ad de 00    	or     ecx,0xdead00
c00217f7:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00217fb:	83 ec 08             	sub    esp,0x8
c00217fe:	6a 01                	push   0x1
c0021800:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021803:	e8 04 ff ff ff       	call   c002170c <IOAPIC::read(int)>
c0021808:	83 c4 10             	add    esp,0x10
c002180b:	c1 f8 10             	sar    eax,0x10
c002180e:	0f b6 c0             	movzx  eax,al
c0021811:	8d 50 01             	lea    edx,[eax+0x1]
c0021814:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021817:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c002181d:	b8 00 00 00 00       	mov    eax,0x0
c0021822:	8d 65 f4             	lea    esp,[ebp-0xc]
c0021825:	5b                   	pop    ebx
c0021826:	5e                   	pop    esi
c0021827:	5f                   	pop    edi
c0021828:	5d                   	pop    ebp
c0021829:	c3                   	ret    

c002182a <IOAPIC::write(int, int)>:
c002182a:	55                   	push   ebp
c002182b:	89 e5                	mov    ebp,esp
c002182d:	83 ec 10             	sub    esp,0x10
c0021830:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021833:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0021839:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002183c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002183f:	0f b6 d0             	movzx  edx,al
c0021842:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0021845:	89 10                	mov    DWORD PTR [eax],edx
c0021847:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002184a:	8d 50 10             	lea    edx,[eax+0x10]
c002184d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021850:	89 02                	mov    DWORD PTR [edx],eax
c0021852:	90                   	nop
c0021853:	c9                   	leave  
c0021854:	c3                   	ret    
c0021855:	90                   	nop

c0021856 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0021856:	55                   	push   ebp
c0021857:	89 e5                	mov    ebp,esp
c0021859:	53                   	push   ebx
c002185a:	83 ec 2c             	sub    esp,0x2c
c002185d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021860:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0021863:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0021866:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0021869:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002186c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002186f:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0021872:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0021875:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0021878:	88 d8                	mov    al,bl
c002187a:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c002187d:	88 c8                	mov    al,cl
c002187f:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0021882:	88 d0                	mov    al,dl
c0021884:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0021887:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002188b:	83 c0 08             	add    eax,0x8
c002188e:	01 c0                	add    eax,eax
c0021890:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0021893:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0021897:	83 c0 08             	add    eax,0x8
c002189a:	01 c0                	add    eax,eax
c002189c:	40                   	inc    eax
c002189d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00218a0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00218a3:	50                   	push   eax
c00218a4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00218a7:	e8 60 fe ff ff       	call   c002170c <IOAPIC::read(int)>
c00218ac:	83 c4 08             	add    esp,0x8
c00218af:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00218b2:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c00218b9:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00218bc:	c1 e0 18             	shl    eax,0x18
c00218bf:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c00218c2:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00218c5:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00218c8:	52                   	push   edx
c00218c9:	50                   	push   eax
c00218ca:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00218cd:	e8 58 ff ff ff       	call   c002182a <IOAPIC::write(int, int)>
c00218d2:	83 c4 0c             	add    esp,0xc
c00218d5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00218d8:	50                   	push   eax
c00218d9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00218dc:	e8 2b fe ff ff       	call   c002170c <IOAPIC::read(int)>
c00218e1:	83 c4 08             	add    esp,0x8
c00218e4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00218e7:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c00218ee:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c00218f5:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c00218fc:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0021900:	74 09                	je     c002190b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0021902:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0021909:	eb 07                	jmp    c0021912 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c002190b:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0021912:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0021916:	74 09                	je     c0021921 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0021918:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c002191f:	eb 07                	jmp    c0021928 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0021921:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0021928:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c002192f:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0021933:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0021936:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0021939:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002193c:	52                   	push   edx
c002193d:	50                   	push   eax
c002193e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021941:	e8 e4 fe ff ff       	call   c002182a <IOAPIC::write(int, int)>
c0021946:	83 c4 0c             	add    esp,0xc
c0021949:	90                   	nop
c002194a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c002194d:	c9                   	leave  
c002194e:	c3                   	ret    
c002194f:	90                   	nop

c0021950 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0021950:	55                   	push   ebp
c0021951:	89 e5                	mov    ebp,esp
c0021953:	57                   	push   edi
c0021954:	56                   	push   esi
c0021955:	53                   	push   ebx
c0021956:	83 ec 2c             	sub    esp,0x2c
c0021959:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002195c:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002195f:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0021963:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0021967:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c002196b:	74 5a                	je     c00219c7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002196d:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0021971:	7f 44                	jg     c00219b7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0021973:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021976:	05 00 75 02 c0       	add    eax,0xc0027500
c002197b:	8a 00                	mov    al,BYTE PTR [eax]
c002197d:	0f b6 c0             	movzx  eax,al
c0021980:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0021983:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021986:	66 8b 84 00 00 87 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd7900]
c002198e:	0f b7 c0             	movzx  eax,ax
c0021991:	83 e0 02             	and    eax,0x2
c0021994:	85 c0                	test   eax,eax
c0021996:	74 04                	je     c002199c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0021998:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c002199c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002199f:	66 8b 84 00 00 87 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd7900]
c00219a7:	0f b7 c0             	movzx  eax,ax
c00219aa:	83 e0 08             	and    eax,0x8
c00219ad:	85 c0                	test   eax,eax
c00219af:	74 16                	je     c00219c7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00219b1:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00219b5:	eb 10                	jmp    c00219c7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00219b7:	83 ec 0c             	sub    esp,0xc
c00219ba:	68 78 6e 02 c0       	push   0xc0026e78
c00219bf:	e8 59 33 ff ff       	call   c0014d1d <Krnl::panic(char const*)>
c00219c4:	83 c4 10             	add    esp,0x10
c00219c7:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c00219cb:	a1 60 9d 02 c0       	mov    eax,ds:0xc0029d60
c00219d0:	83 ec 08             	sub    esp,0x8
c00219d3:	50                   	push   eax
c00219d4:	68 b0 6e 02 c0       	push   0xc0026eb0
c00219d9:	e8 e7 b5 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00219de:	83 c4 10             	add    esp,0x10
c00219e1:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c00219e8:	a1 60 9d 02 c0       	mov    eax,ds:0xc0029d60
c00219ed:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c00219f0:	7d 67                	jge    c0021a59 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00219f2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00219f5:	8b 04 85 80 9d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6280]
c00219fc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00219ff:	83 ec 08             	sub    esp,0x8
c0021a02:	52                   	push   edx
c0021a03:	50                   	push   eax
c0021a04:	e8 d1 fc ff ff       	call   c00216da <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0021a09:	83 c4 10             	add    esp,0x10
c0021a0c:	84 c0                	test   al,al
c0021a0e:	74 44                	je     c0021a54 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0021a10:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0021a13:	8b 1c 85 80 9d 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd6280]
c0021a1a:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0021a1e:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0021a21:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0021a25:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021a28:	83 c0 20             	add    eax,0x20
c0021a2b:	0f b6 f0             	movzx  esi,al
c0021a2e:	b8 00 00 00 00       	mov    eax,0x0
c0021a33:	99                   	cdq    
c0021a34:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0021a37:	0f b6 c9             	movzx  ecx,cl
c0021a3a:	83 ec 04             	sub    esp,0x4
c0021a3d:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0021a40:	57                   	push   edi
c0021a41:	56                   	push   esi
c0021a42:	52                   	push   edx
c0021a43:	50                   	push   eax
c0021a44:	51                   	push   ecx
c0021a45:	53                   	push   ebx
c0021a46:	e8 0b fe ff ff       	call   c0021856 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0021a4b:	83 c4 20             	add    esp,0x20
c0021a4e:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0021a52:	eb 05                	jmp    c0021a59 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0021a54:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0021a57:	eb 8f                	jmp    c00219e8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0021a59:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0021a5c:	83 f0 01             	xor    eax,0x1
c0021a5f:	84 c0                	test   al,al
c0021a61:	74 10                	je     c0021a73 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0021a63:	83 ec 0c             	sub    esp,0xc
c0021a66:	68 c7 6e 02 c0       	push   0xc0026ec7
c0021a6b:	e8 ad 32 ff ff       	call   c0014d1d <Krnl::panic(char const*)>
c0021a70:	83 c4 10             	add    esp,0x10
c0021a73:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0021a77:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0021a7e:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0021a82:	7f 65                	jg     c0021ae9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0021a84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021a87:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021a8a:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0021a91:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0021a94:	01 ca                	add    edx,ecx
c0021a96:	83 c2 54             	add    edx,0x54
c0021a99:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0021a9d:	85 c0                	test   eax,eax
c0021a9f:	75 43                	jne    c0021ae4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0021aa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021aa4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021aa7:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0021aae:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0021ab1:	01 ca                	add    edx,ecx
c0021ab3:	8d 4a 54             	lea    ecx,[edx+0x54]
c0021ab6:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0021ab9:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0021abd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021ac0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021ac3:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0021aca:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0021acd:	01 ca                	add    edx,ecx
c0021acf:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0021ad5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0021ad8:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0021adc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021adf:	83 e8 20             	sub    eax,0x20
c0021ae2:	eb 1a                	jmp    c0021afe <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0021ae4:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0021ae7:	eb 95                	jmp    c0021a7e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0021ae9:	83 ec 0c             	sub    esp,0xc
c0021aec:	68 d4 6e 02 c0       	push   0xc0026ed4
c0021af1:	e8 27 32 ff ff       	call   c0014d1d <Krnl::panic(char const*)>
c0021af6:	83 c4 10             	add    esp,0x10
c0021af9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021afe:	8d 65 f4             	lea    esp,[ebp-0xc]
c0021b01:	5b                   	pop    ebx
c0021b02:	5e                   	pop    esi
c0021b03:	5f                   	pop    edi
c0021b04:	5d                   	pop    ebp
c0021b05:	c3                   	ret    

c0021b06 <PIC::disable()>:
c0021b06:	55                   	push   ebp
c0021b07:	89 e5                	mov    ebp,esp
c0021b09:	83 ec 10             	sub    esp,0x10
c0021b0c:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0021b12:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0021b16:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0021b19:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0021b1d:	ee                   	out    dx,al
c0021b1e:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0021b24:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0021b28:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0021b2b:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0021b2f:	ee                   	out    dx,al
c0021b30:	90                   	nop
c0021b31:	c9                   	leave  
c0021b32:	c3                   	ret    
c0021b33:	90                   	nop

c0021b34 <PIC::eoi(unsigned char)>:
c0021b34:	55                   	push   ebp
c0021b35:	89 e5                	mov    ebp,esp
c0021b37:	83 ec 04             	sub    esp,0x4
c0021b3a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021b3d:	88 45 fc             	mov    BYTE PTR [ebp-0x4],al
c0021b40:	90                   	nop
c0021b41:	c9                   	leave  
c0021b42:	c3                   	ret    
c0021b43:	90                   	nop

c0021b44 <PIC::close(int, int, void*)>:
c0021b44:	55                   	push   ebp
c0021b45:	89 e5                	mov    ebp,esp
c0021b47:	83 ec 08             	sub    esp,0x8
c0021b4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021b4d:	8b 00                	mov    eax,DWORD PTR [eax]
c0021b4f:	83 c0 3c             	add    eax,0x3c
c0021b52:	8b 00                	mov    eax,DWORD PTR [eax]
c0021b54:	83 ec 0c             	sub    esp,0xc
c0021b57:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021b5a:	ff d0                	call   eax
c0021b5c:	83 c4 10             	add    esp,0x10
c0021b5f:	b8 00 00 00 00       	mov    eax,0x0
c0021b64:	c9                   	leave  
c0021b65:	c3                   	ret    

c0021b66 <PIC::PIC()>:
c0021b66:	83 ec 0c             	sub    esp,0xc
c0021b69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b6d:	83 ec 08             	sub    esp,0x8
c0021b70:	68 80 6f 02 c0       	push   0xc0026f80
c0021b75:	50                   	push   eax
c0021b76:	e8 29 d1 fe ff       	call   c000eca4 <InterruptController::InterruptController(char const*)>
c0021b7b:	83 c4 10             	add    esp,0x10
c0021b7e:	ba ac 6f 02 c0       	mov    edx,0xc0026fac
c0021b83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b87:	89 10                	mov    DWORD PTR [eax],edx
c0021b89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b8d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021b93:	0f b6 d0             	movzx  edx,al
c0021b96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b9a:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0021ba1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ba5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021bab:	0f b6 d0             	movzx  edx,al
c0021bae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bb2:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0021bb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bbb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021bc1:	8d 50 01             	lea    edx,[eax+0x1]
c0021bc4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021bc8:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0021bce:	0f b6 d0             	movzx  edx,al
c0021bd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bd5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0021bd9:	83 e1 3f             	and    ecx,0x3f
c0021bdc:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0021be0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021be4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021bea:	0f b6 d0             	movzx  edx,al
c0021bed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bf1:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0021bf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bfc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021c02:	0f b6 d0             	movzx  edx,al
c0021c05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c09:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0021c0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c12:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021c18:	8d 50 01             	lea    edx,[eax+0x1]
c0021c1b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021c1f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0021c25:	0f b6 d0             	movzx  edx,al
c0021c28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c2c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0021c30:	83 e1 3f             	and    ecx,0x3f
c0021c33:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0021c37:	90                   	nop
c0021c38:	83 c4 0c             	add    esp,0xc
c0021c3b:	c3                   	ret    

c0021c3c <PIC::ioWait()>:
c0021c3c:	eb 00                	jmp    c0021c3e <PIC::ioWait()+0x2>
c0021c3e:	eb 00                	jmp    c0021c40 <PIC::ioWait()+0x4>
c0021c40:	90                   	nop
c0021c41:	c3                   	ret    

c0021c42 <PIC::getIRQReg(int)>:
c0021c42:	55                   	push   ebp
c0021c43:	89 e5                	mov    ebp,esp
c0021c45:	83 ec 10             	sub    esp,0x10
c0021c48:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021c4b:	0f b6 c0             	movzx  eax,al
c0021c4e:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0021c54:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0021c57:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0021c5a:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0021c5e:	ee                   	out    dx,al
c0021c5f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021c62:	0f b6 c0             	movzx  eax,al
c0021c65:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0021c6b:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0021c6e:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0021c71:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0021c75:	ee                   	out    dx,al
c0021c76:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0021c7c:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0021c80:	89 c2                	mov    edx,eax
c0021c82:	ec                   	in     al,dx
c0021c83:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0021c86:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0021c89:	0f b6 c0             	movzx  eax,al
c0021c8c:	c1 e0 08             	shl    eax,0x8
c0021c8f:	89 c1                	mov    ecx,eax
c0021c91:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0021c97:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0021c9b:	89 c2                	mov    edx,eax
c0021c9d:	ec                   	in     al,dx
c0021c9e:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0021ca1:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0021ca4:	0f b6 c0             	movzx  eax,al
c0021ca7:	09 c8                	or     eax,ecx
c0021ca9:	c9                   	leave  
c0021caa:	c3                   	ret    
c0021cab:	90                   	nop

c0021cac <PIC::remap()>:
c0021cac:	55                   	push   ebp
c0021cad:	89 e5                	mov    ebp,esp
c0021caf:	83 ec 48             	sub    esp,0x48
c0021cb2:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0021cb9:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0021cc0:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0021cc6:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0021cc9:	89 c2                	mov    edx,eax
c0021ccb:	ec                   	in     al,dx
c0021ccc:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0021ccf:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0021cd2:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0021cd5:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0021cdb:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0021cde:	89 c2                	mov    edx,eax
c0021ce0:	ec                   	in     al,dx
c0021ce1:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0021ce4:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0021ce7:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0021cea:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0021cf0:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0021cf4:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0021cf7:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0021cfa:	ee                   	out    dx,al
c0021cfb:	83 ec 0c             	sub    esp,0xc
c0021cfe:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021d01:	e8 36 ff ff ff       	call   c0021c3c <PIC::ioWait()>
c0021d06:	83 c4 10             	add    esp,0x10
c0021d09:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0021d0f:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0021d13:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0021d16:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0021d19:	ee                   	out    dx,al
c0021d1a:	83 ec 0c             	sub    esp,0xc
c0021d1d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021d20:	e8 17 ff ff ff       	call   c0021c3c <PIC::ioWait()>
c0021d25:	83 c4 10             	add    esp,0x10
c0021d28:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0021d2b:	0f b6 c0             	movzx  eax,al
c0021d2e:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0021d34:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0021d37:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0021d3a:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0021d3d:	ee                   	out    dx,al
c0021d3e:	83 ec 0c             	sub    esp,0xc
c0021d41:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021d44:	e8 f3 fe ff ff       	call   c0021c3c <PIC::ioWait()>
c0021d49:	83 c4 10             	add    esp,0x10
c0021d4c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0021d4f:	0f b6 c0             	movzx  eax,al
c0021d52:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0021d58:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0021d5b:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0021d5e:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0021d61:	ee                   	out    dx,al
c0021d62:	83 ec 0c             	sub    esp,0xc
c0021d65:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021d68:	e8 cf fe ff ff       	call   c0021c3c <PIC::ioWait()>
c0021d6d:	83 c4 10             	add    esp,0x10
c0021d70:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0021d76:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0021d7a:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0021d7d:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0021d80:	ee                   	out    dx,al
c0021d81:	83 ec 0c             	sub    esp,0xc
c0021d84:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021d87:	e8 b0 fe ff ff       	call   c0021c3c <PIC::ioWait()>
c0021d8c:	83 c4 10             	add    esp,0x10
c0021d8f:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0021d95:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0021d99:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0021d9c:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0021d9f:	ee                   	out    dx,al
c0021da0:	83 ec 0c             	sub    esp,0xc
c0021da3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021da6:	e8 91 fe ff ff       	call   c0021c3c <PIC::ioWait()>
c0021dab:	83 c4 10             	add    esp,0x10
c0021dae:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0021db4:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0021db8:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0021dbb:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0021dbe:	ee                   	out    dx,al
c0021dbf:	83 ec 0c             	sub    esp,0xc
c0021dc2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021dc5:	e8 72 fe ff ff       	call   c0021c3c <PIC::ioWait()>
c0021dca:	83 c4 10             	add    esp,0x10
c0021dcd:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0021dd3:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0021dd7:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0021dda:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0021ddd:	ee                   	out    dx,al
c0021dde:	83 ec 0c             	sub    esp,0xc
c0021de1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021de4:	e8 53 fe ff ff       	call   c0021c3c <PIC::ioWait()>
c0021de9:	83 c4 10             	add    esp,0x10
c0021dec:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0021df0:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0021df6:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0021df9:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0021dfc:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0021dff:	ee                   	out    dx,al
c0021e00:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0021e04:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0021e0a:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0021e0d:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0021e10:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0021e13:	ee                   	out    dx,al
c0021e14:	90                   	nop
c0021e15:	c9                   	leave  
c0021e16:	c3                   	ret    
c0021e17:	90                   	nop

c0021e18 <PIC::open(int, int, void*)>:
c0021e18:	55                   	push   ebp
c0021e19:	89 e5                	mov    ebp,esp
c0021e1b:	83 ec 18             	sub    esp,0x18
c0021e1e:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0021e24:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0021e28:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0021e2b:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0021e2f:	ee                   	out    dx,al
c0021e30:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0021e36:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0021e3a:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0021e3d:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0021e41:	ee                   	out    dx,al
c0021e42:	83 ec 0c             	sub    esp,0xc
c0021e45:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021e48:	e8 5f fe ff ff       	call   c0021cac <PIC::remap()>
c0021e4d:	83 c4 10             	add    esp,0x10
c0021e50:	b8 00 00 00 00       	mov    eax,0x0
c0021e55:	c9                   	leave  
c0021e56:	c3                   	ret    
c0021e57:	90                   	nop

c0021e58 <APICTimer::close(int, int, void*)>:
c0021e58:	b8 00 00 00 00       	mov    eax,0x0
c0021e5d:	c3                   	ret    
c0021e5e:	66 90                	xchg   ax,ax

c0021e60 <apicTimerHandler(regs*, void*)>:
c0021e60:	83 ec 0c             	sub    esp,0xc
c0021e63:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021e67:	8b 08                	mov    ecx,DWORD PTR [eax]
c0021e69:	b8 10 27 00 00       	mov    eax,0x2710
c0021e6e:	ba 00 00 00 00       	mov    edx,0x0
c0021e73:	f7 f1                	div    ecx
c0021e75:	83 ec 0c             	sub    esp,0xc
c0021e78:	50                   	push   eax
c0021e79:	e8 ef ec fe ff       	call   c0010b6d <timerHandler(unsigned int)>
c0021e7e:	83 c4 10             	add    esp,0x10
c0021e81:	90                   	nop
c0021e82:	83 c4 0c             	add    esp,0xc
c0021e85:	c3                   	ret    
c0021e86:	66 90                	xchg   ax,ax

c0021e88 <APICTimer::write(int)>:
c0021e88:	83 ec 1c             	sub    esp,0x1c
c0021e8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021e8f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0021e93:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0021e99:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c0021e9e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0021ea4:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0021eaa:	83 ec 0c             	sub    esp,0xc
c0021ead:	50                   	push   eax
c0021eae:	e8 93 f5 ff ff       	call   c0021446 <APIC::getBase()>
c0021eb3:	83 c4 10             	add    esp,0x10
c0021eb6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021eba:	a1 2c 84 02 c0       	mov    eax,ds:0xc002842c
c0021ebf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021ec3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021ec7:	05 e0 03 00 00       	add    eax,0x3e0
c0021ecc:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0021ed2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021ed6:	05 80 03 00 00       	add    eax,0x380
c0021edb:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0021ee1:	fb                   	sti    
c0021ee2:	66 90                	xchg   ax,ax
c0021ee4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021ee8:	8d 90 10 27 00 00    	lea    edx,[eax+0x2710]
c0021eee:	a1 2c 84 02 c0       	mov    eax,ds:0xc002842c
c0021ef3:	39 c2                	cmp    edx,eax
c0021ef5:	76 05                	jbe    c0021efc <APICTimer::write(int)+0x74>
c0021ef7:	eb eb                	jmp    c0021ee4 <APICTimer::write(int)+0x5c>
c0021ef9:	8d 76 00             	lea    esi,[esi+0x0]
c0021efc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021f00:	05 20 03 00 00       	add    eax,0x320
c0021f05:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0021f0b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021f0f:	05 90 03 00 00       	add    eax,0x390
c0021f14:	8b 00                	mov    eax,DWORD PTR [eax]
c0021f16:	f7 d0                	not    eax
c0021f18:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021f1c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0021f20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f24:	ba 00 00 00 00       	mov    edx,0x0
c0021f29:	f7 f1                	div    ecx
c0021f2b:	89 04 24             	mov    DWORD PTR [esp],eax
c0021f2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f32:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0021f38:	0d 00 00 02 00       	or     eax,0x20000
c0021f3d:	89 c2                	mov    edx,eax
c0021f3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021f43:	05 20 03 00 00       	add    eax,0x320
c0021f48:	89 10                	mov    DWORD PTR [eax],edx
c0021f4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021f4e:	05 e0 03 00 00       	add    eax,0x3e0
c0021f53:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0021f59:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021f5d:	05 80 03 00 00       	add    eax,0x380
c0021f62:	89 c2                	mov    edx,eax
c0021f64:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021f67:	89 02                	mov    DWORD PTR [edx],eax
c0021f69:	90                   	nop
c0021f6a:	83 c4 1c             	add    esp,0x1c
c0021f6d:	c3                   	ret    
c0021f6e:	66 90                	xchg   ax,ax

c0021f70 <APICTimer::open(int, int, void*)>:
c0021f70:	57                   	push   edi
c0021f71:	56                   	push   esi
c0021f72:	53                   	push   ebx
c0021f73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f77:	8b 00                	mov    eax,DWORD PTR [eax]
c0021f79:	83 c0 24             	add    eax,0x24
c0021f7c:	8b 00                	mov    eax,DWORD PTR [eax]
c0021f7e:	83 ec 08             	sub    esp,0x8
c0021f81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021f85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021f89:	ff d0                	call   eax
c0021f8b:	83 c4 10             	add    esp,0x10
c0021f8e:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c0021f93:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0021f99:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0021f9f:	83 ec 0c             	sub    esp,0xc
c0021fa2:	50                   	push   eax
c0021fa3:	e8 9e f4 ff ff       	call   c0021446 <APIC::getBase()>
c0021fa8:	83 c4 10             	add    esp,0x10
c0021fab:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0021fb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fb5:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021fbb:	0f b6 f8             	movzx  edi,al
c0021fbe:	89 d0                	mov    eax,edx
c0021fc0:	ba 00 00 00 00       	mov    edx,0x0
c0021fc5:	89 c1                	mov    ecx,eax
c0021fc7:	80 e5 ff             	and    ch,0xff
c0021fca:	89 cb                	mov    ebx,ecx
c0021fcc:	0f b6 f2             	movzx  esi,dl
c0021fcf:	89 d8                	mov    eax,ebx
c0021fd1:	89 f2                	mov    edx,esi
c0021fd3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021fd7:	8d 5f 08             	lea    ebx,[edi+0x8]
c0021fda:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0021fde:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0021fe2:	83 e0 00             	and    eax,0x0
c0021fe5:	09 d0                	or     eax,edx
c0021fe7:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0021feb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fef:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021ff5:	8d 50 01             	lea    edx,[eax+0x1]
c0021ff8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021ffc:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0022002:	0f b6 d0             	movzx  edx,al
c0022005:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022009:	83 c2 08             	add    edx,0x8
c002200c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0022010:	0f b6 c9             	movzx  ecx,cl
c0022013:	81 c9 00 00 01 00    	or     ecx,0x10000
c0022019:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002201d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022021:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022025:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002202b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002202f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022033:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0022039:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002203d:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0022043:	83 ec 0c             	sub    esp,0xc
c0022046:	51                   	push   ecx
c0022047:	6a 01                	push   0x1
c0022049:	68 60 1e 02 c0       	push   0xc0021e60
c002204e:	52                   	push   edx
c002204f:	50                   	push   eax
c0022050:	e8 99 c3 fe ff       	call   c000e3ee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022055:	83 c4 20             	add    esp,0x20
c0022058:	89 c2                	mov    edx,eax
c002205a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002205e:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0022064:	b8 00 00 00 00       	mov    eax,0x0
c0022069:	5b                   	pop    ebx
c002206a:	5e                   	pop    esi
c002206b:	5f                   	pop    edi
c002206c:	c3                   	ret    
c002206d:	90                   	nop
c002206e:	66 90                	xchg   ax,ax

c0022070 <APICTimer::APICTimer()>:
c0022070:	83 ec 0c             	sub    esp,0xc
c0022073:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022077:	83 ec 08             	sub    esp,0x8
c002207a:	68 ec 6f 02 c0       	push   0xc0026fec
c002207f:	50                   	push   eax
c0022080:	e8 57 ea fe ff       	call   c0010adc <Timer::Timer(char const*)>
c0022085:	83 c4 10             	add    esp,0x10
c0022088:	ba 00 70 02 c0       	mov    edx,0xc0027000
c002208d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022091:	89 10                	mov    DWORD PTR [eax],edx
c0022093:	90                   	nop
c0022094:	83 c4 0c             	add    esp,0xc
c0022097:	c3                   	ret    

c0022098 <PIT::write(int)>:
c0022098:	83 ec 10             	sub    esp,0x10
c002209b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002209f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00220a3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00220a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00220ad:	a3 a4 9d 02 c0       	mov    ds:0xc0029da4,eax
c00220b2:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00220b7:	99                   	cdq    
c00220b8:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c00220bc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00220c0:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c00220c7:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c00220cc:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00220d0:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00220d5:	ee                   	out    dx,al
c00220d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00220da:	0f b6 c0             	movzx  eax,al
c00220dd:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c00220e4:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00220e8:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00220ec:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00220f1:	ee                   	out    dx,al
c00220f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00220f6:	c1 f8 08             	sar    eax,0x8
c00220f9:	0f b6 c0             	movzx  eax,al
c00220fc:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0022103:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0022107:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002210b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0022110:	ee                   	out    dx,al
c0022111:	90                   	nop
c0022112:	83 c4 10             	add    esp,0x10
c0022115:	c3                   	ret    
c0022116:	66 90                	xchg   ax,ax

c0022118 <pitHandler(regs*, void*)>:
c0022118:	83 ec 0c             	sub    esp,0xc
c002211b:	8b 0d a4 9d 02 c0    	mov    ecx,DWORD PTR ds:0xc0029da4
c0022121:	b8 10 27 00 00       	mov    eax,0x2710
c0022126:	99                   	cdq    
c0022127:	f7 f9                	idiv   ecx
c0022129:	83 ec 0c             	sub    esp,0xc
c002212c:	50                   	push   eax
c002212d:	e8 3b ea fe ff       	call   c0010b6d <timerHandler(unsigned int)>
c0022132:	83 c4 10             	add    esp,0x10
c0022135:	90                   	nop
c0022136:	83 c4 0c             	add    esp,0xc
c0022139:	c3                   	ret    
c002213a:	66 90                	xchg   ax,ax

c002213c <PIT::open(int, int, void*)>:
c002213c:	83 ec 0c             	sub    esp,0xc
c002213f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022143:	8b 00                	mov    eax,DWORD PTR [eax]
c0022145:	83 c0 24             	add    eax,0x24
c0022148:	8b 00                	mov    eax,DWORD PTR [eax]
c002214a:	83 ec 08             	sub    esp,0x8
c002214d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022151:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022155:	ff d0                	call   eax
c0022157:	83 c4 10             	add    esp,0x10
c002215a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002215e:	83 ec 0c             	sub    esp,0xc
c0022161:	6a 00                	push   0x0
c0022163:	6a 01                	push   0x1
c0022165:	68 18 21 02 c0       	push   0xc0022118
c002216a:	6a 00                	push   0x0
c002216c:	50                   	push   eax
c002216d:	e8 7c c2 fe ff       	call   c000e3ee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022172:	83 c4 20             	add    esp,0x20
c0022175:	89 c2                	mov    edx,eax
c0022177:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002217b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0022181:	b8 00 00 00 00       	mov    eax,0x0
c0022186:	83 c4 0c             	add    esp,0xc
c0022189:	c3                   	ret    
c002218a:	66 90                	xchg   ax,ax

c002218c <PIT::close(int, int, void*)>:
c002218c:	83 ec 0c             	sub    esp,0xc
c002218f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022193:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c002219d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221a1:	6a 01                	push   0x1
c00221a3:	68 18 21 02 c0       	push   0xc0022118
c00221a8:	6a 00                	push   0x0
c00221aa:	50                   	push   eax
c00221ab:	e8 88 c2 fe ff       	call   c000e438 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c00221b0:	83 c4 10             	add    esp,0x10
c00221b3:	b8 00 00 00 00       	mov    eax,0x0
c00221b8:	83 c4 0c             	add    esp,0xc
c00221bb:	c3                   	ret    

c00221bc <PIT::PIT()>:
c00221bc:	83 ec 0c             	sub    esp,0xc
c00221bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221c3:	83 ec 08             	sub    esp,0x8
c00221c6:	68 28 70 02 c0       	push   0xc0027028
c00221cb:	50                   	push   eax
c00221cc:	e8 0b e9 fe ff       	call   c0010adc <Timer::Timer(char const*)>
c00221d1:	83 c4 10             	add    esp,0x10
c00221d4:	ba 50 70 02 c0       	mov    edx,0xc0027050
c00221d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221dd:	89 10                	mov    DWORD PTR [eax],edx
c00221df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221e3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00221e9:	0f b6 d0             	movzx  edx,al
c00221ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221f0:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c00221f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221fb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022201:	0f b6 d0             	movzx  edx,al
c0022204:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022208:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c002220d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022211:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022217:	8d 50 01             	lea    edx,[eax+0x1]
c002221a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002221e:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022224:	0f b6 d0             	movzx  edx,al
c0022227:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002222b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002222f:	83 e1 3f             	and    ecx,0x3f
c0022232:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022236:	90                   	nop
c0022237:	83 c4 0c             	add    esp,0xc
c002223a:	c3                   	ret    
c002223b:	66 90                	xchg   ax,ax
c002223d:	66 90                	xchg   ax,ax
c002223f:	90                   	nop

c0022240 <avxDetect>:
c0022240:	b8 01 00 00 00       	mov    eax,0x1
c0022245:	0f a2                	cpuid  
c0022247:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c002224d:	74 15                	je     c0022264 <avxDetect.noAVX>
c002224f:	b8 01 00 00 00       	mov    eax,0x1
c0022254:	0f a2                	cpuid  
c0022256:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c002225c:	74 06                	je     c0022264 <avxDetect.noAVX>
c002225e:	b8 01 00 00 00       	mov    eax,0x1
c0022263:	c3                   	ret    

c0022264 <avxDetect.noAVX>:
c0022264:	b8 00 00 00 00       	mov    eax,0x0
c0022269:	c3                   	ret    

c002226a <avxSave>:
c002226a:	53                   	push   ebx
c002226b:	52                   	push   edx
c002226c:	31 c0                	xor    eax,eax
c002226e:	48                   	dec    eax
c002226f:	89 c2                	mov    edx,eax
c0022271:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0022275:	0f ae 23             	xsave  [ebx]
c0022278:	5a                   	pop    edx
c0022279:	5b                   	pop    ebx
c002227a:	c3                   	ret    

c002227b <avxLoad>:
c002227b:	53                   	push   ebx
c002227c:	52                   	push   edx
c002227d:	31 c0                	xor    eax,eax
c002227f:	48                   	dec    eax
c0022280:	89 c2                	mov    edx,eax
c0022282:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0022286:	0f ae 2b             	xrstor [ebx]
c0022289:	5a                   	pop    edx
c002228a:	5b                   	pop    ebx
c002228b:	c3                   	ret    

c002228c <avxInit>:
c002228c:	e8 77 00 00 00       	call   c0022308 <sseInit>
c0022291:	50                   	push   eax
c0022292:	51                   	push   ecx
c0022293:	0f 20 e0             	mov    eax,cr4
c0022296:	0d 00 00 04 00       	or     eax,0x40000
c002229b:	0f 22 e0             	mov    cr4,eax
c002229e:	31 c9                	xor    ecx,ecx
c00222a0:	0f 01 d0             	xgetbv 
c00222a3:	0d 07 00 00 00       	or     eax,0x7
c00222a8:	0f 01 d1             	xsetbv 
c00222ab:	59                   	pop    ecx
c00222ac:	58                   	pop    eax
c00222ad:	c3                   	ret    

c00222ae <avxClose>:
c00222ae:	c3                   	ret    

c00222af <wouldSheSayYes>:
c00222af:	c3                   	ret    
c00222b0:	49                   	dec    ecx
c00222b1:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c00222b5:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c00222b9:	75 20                	jne    c00222db <retry+0x6>
c00222bb:	4e                   	dec    esi
c00222bc:	79 61                	jns    c002231f <sseClose+0x7>
c00222be:	68 2e 2e 2e 00       	push   0x2e2e2e
c00222c3:	66 90                	xchg   ax,ax
c00222c5:	66 90                	xchg   ax,ax
c00222c7:	66 90                	xchg   ax,ax
c00222c9:	66 90                	xchg   ax,ax
c00222cb:	66 90                	xchg   ax,ax
c00222cd:	66 90                	xchg   ax,ax
c00222cf:	90                   	nop

c00222d0 <i386GetRDRAND>:
c00222d0:	b9 64 00 00 00       	mov    ecx,0x64

c00222d5 <retry>:
c00222d5:	0f c7 f0             	rdrand eax
c00222d8:	72 05                	jb     c00222df <retry.done>
c00222da:	e2 f9                	loop   c00222d5 <retry>

c00222dc <retry.fail>:
c00222dc:	31 c0                	xor    eax,eax
c00222de:	c3                   	ret    

c00222df <retry.done>:
c00222df:	c3                   	ret    

c00222e0 <absolutelyNoChanceInHell>:
c00222e0:	b8 01 00 00 00       	mov    eax,0x1
c00222e5:	0f a2                	cpuid  
c00222e7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c00222ed:	74 06                	je     c00222f5 <sseDetect.noSSE>
c00222ef:	b8 01 00 00 00       	mov    eax,0x1
c00222f4:	c3                   	ret    

c00222f5 <sseDetect.noSSE>:
c00222f5:	31 c0                	xor    eax,eax
c00222f7:	c3                   	ret    

c00222f8 <sseSave>:
c00222f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222fc:	0f ae 00             	fxsave [eax]
c00222ff:	c3                   	ret    

c0022300 <sseLoad>:
c0022300:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022304:	0f ae 08             	fxrstor [eax]
c0022307:	c3                   	ret    

c0022308 <sseInit>:
c0022308:	e8 42 00 00 00       	call   c002234f <x87Init>
c002230d:	0f 20 e0             	mov    eax,cr4
c0022310:	66 0d 00 06          	or     ax,0x600
c0022314:	0f 22 e0             	mov    cr4,eax
c0022317:	c3                   	ret    

c0022318 <sseClose>:
c0022318:	c3                   	ret    
c0022319:	66 90                	xchg   ax,ax
c002231b:	66 90                	xchg   ax,ax
c002231d:	66 90                	xchg   ax,ax
c002231f:	90                   	nop

c0022320 <value_37F>:
c0022320:	7f 03                	jg     c0022325 <value_37A+0x1>

c0022322 <value_37E>:
c0022322:	7e 03                	jle    c0022327 <x87Detect+0x1>

c0022324 <value_37A>:
c0022324:	7a 03                	jp     c0022329 <x87Detect+0x3>

c0022326 <x87Detect>:
c0022326:	b8 01 00 00 00       	mov    eax,0x1
c002232b:	0f a2                	cpuid  
c002232d:	f7 c2 01 00 00 00    	test   edx,0x1
c0022333:	74 06                	je     c002233b <x87Detect.nox87>
c0022335:	b8 01 00 00 00       	mov    eax,0x1
c002233a:	c3                   	ret    

c002233b <x87Detect.nox87>:
c002233b:	b8 00 00 00 00       	mov    eax,0x0
c0022340:	c3                   	ret    

c0022341 <x87Save>:
c0022341:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022345:	dd 30                	fnsave [eax]
c0022347:	c3                   	ret    

c0022348 <x87Load>:
c0022348:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002234c:	dd 20                	frstor [eax]
c002234e:	c3                   	ret    

c002234f <x87Init>:
c002234f:	0f 20 c0             	mov    eax,cr0
c0022352:	66 25 fb ff          	and    ax,0xfffb
c0022356:	66 0d 22 00          	or     ax,0x22
c002235a:	0f 22 c0             	mov    cr0,eax
c002235d:	db e3                	fninit 
c002235f:	0f 06                	clts   
c0022361:	d9 2d 24 23 02 c0    	fldcw  WORD PTR ds:0xc0022324
c0022367:	c3                   	ret    

c0022368 <x87Close>:
c0022368:	c3                   	ret    
c0022369:	66 90                	xchg   ax,ax
c002236b:	90                   	nop

c002236c <__do_global_ctors_aux>:
c002236c:	a1 cc 33 02 c0       	mov    eax,ds:0xc00233cc
c0022371:	83 f8 ff             	cmp    eax,0xffffffff
c0022374:	74 1a                	je     c0022390 <__do_global_ctors_aux+0x24>
c0022376:	55                   	push   ebp
c0022377:	89 e5                	mov    ebp,esp
c0022379:	53                   	push   ebx
c002237a:	52                   	push   edx
c002237b:	bb cc 33 02 c0       	mov    ebx,0xc00233cc
c0022380:	ff d0                	call   eax
c0022382:	83 eb 04             	sub    ebx,0x4
c0022385:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022387:	83 f8 ff             	cmp    eax,0xffffffff
c002238a:	75 f4                	jne    c0022380 <__do_global_ctors_aux+0x14>
c002238c:	58                   	pop    eax
c002238d:	5b                   	pop    ebx
c002238e:	5d                   	pop    ebp
c002238f:	c3                   	ret    
c0022390:	c3                   	ret    
c0022391:	66 90                	xchg   ax,ax
c0022393:	90                   	nop

c0022394 <__divdi3>:
c0022394:	55                   	push   ebp
c0022395:	57                   	push   edi
c0022396:	56                   	push   esi
c0022397:	53                   	push   ebx
c0022398:	83 ec 1c             	sub    esp,0x1c
c002239b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002239f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00223a3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00223a6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00223aa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00223ae:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00223b2:	85 db                	test   ebx,ebx
c00223b4:	0f 88 8e 00 00 00    	js     c0022448 <__divdi3+0xb4>
c00223ba:	89 dd                	mov    ebp,ebx
c00223bc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00223c4:	89 d3                	mov    ebx,edx
c00223c6:	85 d2                	test   edx,edx
c00223c8:	79 0d                	jns    c00223d7 <__divdi3+0x43>
c00223ca:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c00223ce:	f7 d8                	neg    eax
c00223d0:	83 d2 00             	adc    edx,0x0
c00223d3:	f7 da                	neg    edx
c00223d5:	89 d3                	mov    ebx,edx
c00223d7:	89 c7                	mov    edi,eax
c00223d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00223dc:	85 db                	test   ebx,ebx
c00223de:	75 48                	jne    c0022428 <__divdi3+0x94>
c00223e0:	39 ef                	cmp    edi,ebp
c00223e2:	76 24                	jbe    c0022408 <__divdi3+0x74>
c00223e4:	89 ea                	mov    edx,ebp
c00223e6:	f7 f7                	div    edi
c00223e8:	89 c1                	mov    ecx,eax
c00223ea:	31 f6                	xor    esi,esi
c00223ec:	89 c8                	mov    eax,ecx
c00223ee:	89 f2                	mov    edx,esi
c00223f0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00223f4:	85 c9                	test   ecx,ecx
c00223f6:	74 07                	je     c00223ff <__divdi3+0x6b>
c00223f8:	f7 d8                	neg    eax
c00223fa:	83 d2 00             	adc    edx,0x0
c00223fd:	f7 da                	neg    edx
c00223ff:	83 c4 1c             	add    esp,0x1c
c0022402:	5b                   	pop    ebx
c0022403:	5e                   	pop    esi
c0022404:	5f                   	pop    edi
c0022405:	5d                   	pop    ebp
c0022406:	c3                   	ret    
c0022407:	90                   	nop
c0022408:	85 ff                	test   edi,edi
c002240a:	75 0b                	jne    c0022417 <__divdi3+0x83>
c002240c:	b8 01 00 00 00       	mov    eax,0x1
c0022411:	31 d2                	xor    edx,edx
c0022413:	f7 f3                	div    ebx
c0022415:	89 c7                	mov    edi,eax
c0022417:	31 d2                	xor    edx,edx
c0022419:	89 e8                	mov    eax,ebp
c002241b:	f7 f7                	div    edi
c002241d:	89 c6                	mov    esi,eax
c002241f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0022422:	f7 f7                	div    edi
c0022424:	89 c1                	mov    ecx,eax
c0022426:	eb c4                	jmp    c00223ec <__divdi3+0x58>
c0022428:	39 eb                	cmp    ebx,ebp
c002242a:	77 3c                	ja     c0022468 <__divdi3+0xd4>
c002242c:	0f bd f3             	bsr    esi,ebx
c002242f:	83 f6 1f             	xor    esi,0x1f
c0022432:	75 40                	jne    c0022474 <__divdi3+0xe0>
c0022434:	39 eb                	cmp    ebx,ebp
c0022436:	72 09                	jb     c0022441 <__divdi3+0xad>
c0022438:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002243b:	0f 87 97 00 00 00    	ja     c00224d8 <__divdi3+0x144>
c0022441:	b9 01 00 00 00       	mov    ecx,0x1
c0022446:	eb a4                	jmp    c00223ec <__divdi3+0x58>
c0022448:	f7 d9                	neg    ecx
c002244a:	83 d3 00             	adc    ebx,0x0
c002244d:	f7 db                	neg    ebx
c002244f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0022452:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0022456:	89 dd                	mov    ebp,ebx
c0022458:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0022460:	e9 5f ff ff ff       	jmp    c00223c4 <__divdi3+0x30>
c0022465:	8d 76 00             	lea    esi,[esi+0x0]
c0022468:	31 f6                	xor    esi,esi
c002246a:	31 c9                	xor    ecx,ecx
c002246c:	e9 7b ff ff ff       	jmp    c00223ec <__divdi3+0x58>
c0022471:	8d 76 00             	lea    esi,[esi+0x0]
c0022474:	b8 20 00 00 00       	mov    eax,0x20
c0022479:	29 f0                	sub    eax,esi
c002247b:	89 f1                	mov    ecx,esi
c002247d:	d3 e3                	shl    ebx,cl
c002247f:	89 fa                	mov    edx,edi
c0022481:	88 c1                	mov    cl,al
c0022483:	d3 ea                	shr    edx,cl
c0022485:	09 da                	or     edx,ebx
c0022487:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002248b:	89 f1                	mov    ecx,esi
c002248d:	d3 e7                	shl    edi,cl
c002248f:	89 eb                	mov    ebx,ebp
c0022491:	88 c1                	mov    cl,al
c0022493:	d3 eb                	shr    ebx,cl
c0022495:	89 f1                	mov    ecx,esi
c0022497:	d3 e5                	shl    ebp,cl
c0022499:	8b 14 24             	mov    edx,DWORD PTR [esp]
c002249c:	88 c1                	mov    cl,al
c002249e:	d3 ea                	shr    edx,cl
c00224a0:	09 d5                	or     ebp,edx
c00224a2:	89 e8                	mov    eax,ebp
c00224a4:	89 da                	mov    edx,ebx
c00224a6:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00224aa:	89 d3                	mov    ebx,edx
c00224ac:	89 c5                	mov    ebp,eax
c00224ae:	f7 e7                	mul    edi
c00224b0:	39 d3                	cmp    ebx,edx
c00224b2:	72 18                	jb     c00224cc <__divdi3+0x138>
c00224b4:	74 0a                	je     c00224c0 <__divdi3+0x12c>
c00224b6:	89 e9                	mov    ecx,ebp
c00224b8:	31 f6                	xor    esi,esi
c00224ba:	e9 2d ff ff ff       	jmp    c00223ec <__divdi3+0x58>
c00224bf:	90                   	nop
c00224c0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00224c3:	89 f1                	mov    ecx,esi
c00224c5:	d3 e7                	shl    edi,cl
c00224c7:	39 c7                	cmp    edi,eax
c00224c9:	73 eb                	jae    c00224b6 <__divdi3+0x122>
c00224cb:	90                   	nop
c00224cc:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00224cf:	31 f6                	xor    esi,esi
c00224d1:	e9 16 ff ff ff       	jmp    c00223ec <__divdi3+0x58>
c00224d6:	66 90                	xchg   ax,ax
c00224d8:	31 c9                	xor    ecx,ecx
c00224da:	e9 0d ff ff ff       	jmp    c00223ec <__divdi3+0x58>
c00224df:	90                   	nop

c00224e0 <__moddi3>:
c00224e0:	55                   	push   ebp
c00224e1:	57                   	push   edi
c00224e2:	56                   	push   esi
c00224e3:	53                   	push   ebx
c00224e4:	83 ec 2c             	sub    esp,0x2c
c00224e7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00224eb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00224ef:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00224f3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00224f7:	85 db                	test   ebx,ebx
c00224f9:	0f 88 85 00 00 00    	js     c0022584 <__moddi3+0xa4>
c00224ff:	89 de                	mov    esi,ebx
c0022501:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0022509:	89 d7                	mov    edi,edx
c002250b:	85 d2                	test   edx,edx
c002250d:	79 09                	jns    c0022518 <__moddi3+0x38>
c002250f:	f7 d8                	neg    eax
c0022511:	83 d2 00             	adc    edx,0x0
c0022514:	f7 da                	neg    edx
c0022516:	89 d7                	mov    edi,edx
c0022518:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002251c:	89 cd                	mov    ebp,ecx
c002251e:	85 ff                	test   edi,edi
c0022520:	75 52                	jne    c0022574 <__moddi3+0x94>
c0022522:	89 c3                	mov    ebx,eax
c0022524:	39 f0                	cmp    eax,esi
c0022526:	76 24                	jbe    c002254c <__moddi3+0x6c>
c0022528:	89 c8                	mov    eax,ecx
c002252a:	89 f2                	mov    edx,esi
c002252c:	f7 f3                	div    ebx
c002252e:	89 d6                	mov    esi,edx
c0022530:	89 f0                	mov    eax,esi
c0022532:	31 d2                	xor    edx,edx
c0022534:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022538:	85 c9                	test   ecx,ecx
c002253a:	74 07                	je     c0022543 <__moddi3+0x63>
c002253c:	f7 d8                	neg    eax
c002253e:	83 d2 00             	adc    edx,0x0
c0022541:	f7 da                	neg    edx
c0022543:	83 c4 2c             	add    esp,0x2c
c0022546:	5b                   	pop    ebx
c0022547:	5e                   	pop    esi
c0022548:	5f                   	pop    edi
c0022549:	5d                   	pop    ebp
c002254a:	c3                   	ret    
c002254b:	90                   	nop
c002254c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0022550:	85 db                	test   ebx,ebx
c0022552:	75 0d                	jne    c0022561 <__moddi3+0x81>
c0022554:	b8 01 00 00 00       	mov    eax,0x1
c0022559:	31 d2                	xor    edx,edx
c002255b:	f7 f7                	div    edi
c002255d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022561:	89 f0                	mov    eax,esi
c0022563:	31 d2                	xor    edx,edx
c0022565:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022569:	f7 f7                	div    edi
c002256b:	89 e8                	mov    eax,ebp
c002256d:	f7 f7                	div    edi
c002256f:	89 d6                	mov    esi,edx
c0022571:	eb bd                	jmp    c0022530 <__moddi3+0x50>
c0022573:	90                   	nop
c0022574:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0022578:	39 f7                	cmp    edi,esi
c002257a:	76 20                	jbe    c002259c <__moddi3+0xbc>
c002257c:	89 c8                	mov    eax,ecx
c002257e:	89 f2                	mov    edx,esi
c0022580:	eb b2                	jmp    c0022534 <__moddi3+0x54>
c0022582:	66 90                	xchg   ax,ax
c0022584:	f7 d9                	neg    ecx
c0022586:	83 d3 00             	adc    ebx,0x0
c0022589:	f7 db                	neg    ebx
c002258b:	89 de                	mov    esi,ebx
c002258d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0022595:	e9 6f ff ff ff       	jmp    c0022509 <__moddi3+0x29>
c002259a:	66 90                	xchg   ax,ax
c002259c:	0f bd c7             	bsr    eax,edi
c002259f:	83 f0 1f             	xor    eax,0x1f
c00225a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00225a6:	75 24                	jne    c00225cc <__moddi3+0xec>
c00225a8:	39 f7                	cmp    edi,esi
c00225aa:	72 06                	jb     c00225b2 <__moddi3+0xd2>
c00225ac:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00225b0:	77 0c                	ja     c00225be <__moddi3+0xde>
c00225b2:	89 e9                	mov    ecx,ebp
c00225b4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00225b8:	19 fe                	sbb    esi,edi
c00225ba:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00225be:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00225c2:	89 f2                	mov    edx,esi
c00225c4:	e9 6b ff ff ff       	jmp    c0022534 <__moddi3+0x54>
c00225c9:	8d 76 00             	lea    esi,[esi+0x0]
c00225cc:	b8 20 00 00 00       	mov    eax,0x20
c00225d1:	89 c2                	mov    edx,eax
c00225d3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00225d7:	29 da                	sub    edx,ebx
c00225d9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00225dd:	88 d9                	mov    cl,bl
c00225df:	d3 e7                	shl    edi,cl
c00225e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00225e5:	88 d1                	mov    cl,dl
c00225e7:	d3 e8                	shr    eax,cl
c00225e9:	09 c7                	or     edi,eax
c00225eb:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00225ef:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00225f3:	89 d8                	mov    eax,ebx
c00225f5:	88 d9                	mov    cl,bl
c00225f7:	d3 e7                	shl    edi,cl
c00225f9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00225fd:	89 f3                	mov    ebx,esi
c00225ff:	88 d1                	mov    cl,dl
c0022601:	d3 eb                	shr    ebx,cl
c0022603:	89 c7                	mov    edi,eax
c0022605:	88 c1                	mov    cl,al
c0022607:	d3 e6                	shl    esi,cl
c0022609:	89 e8                	mov    eax,ebp
c002260b:	88 d1                	mov    cl,dl
c002260d:	d3 e8                	shr    eax,cl
c002260f:	09 f0                	or     eax,esi
c0022611:	89 f9                	mov    ecx,edi
c0022613:	d3 e5                	shl    ebp,cl
c0022615:	89 da                	mov    edx,ebx
c0022617:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002261b:	89 d3                	mov    ebx,edx
c002261d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0022621:	89 c6                	mov    esi,eax
c0022623:	89 d1                	mov    ecx,edx
c0022625:	39 d3                	cmp    ebx,edx
c0022627:	72 27                	jb     c0022650 <__moddi3+0x170>
c0022629:	74 21                	je     c002264c <__moddi3+0x16c>
c002262b:	29 f5                	sub    ebp,esi
c002262d:	19 cb                	sbb    ebx,ecx
c002262f:	89 de                	mov    esi,ebx
c0022631:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0022635:	d3 e6                	shl    esi,cl
c0022637:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002263b:	89 f9                	mov    ecx,edi
c002263d:	d3 ed                	shr    ebp,cl
c002263f:	09 ee                	or     esi,ebp
c0022641:	89 f0                	mov    eax,esi
c0022643:	d3 eb                	shr    ebx,cl
c0022645:	89 da                	mov    edx,ebx
c0022647:	e9 e8 fe ff ff       	jmp    c0022534 <__moddi3+0x54>
c002264c:	39 c5                	cmp    ebp,eax
c002264e:	73 db                	jae    c002262b <__moddi3+0x14b>
c0022650:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0022654:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0022658:	89 d1                	mov    ecx,edx
c002265a:	89 c6                	mov    esi,eax
c002265c:	eb cd                	jmp    c002262b <__moddi3+0x14b>
c002265e:	66 90                	xchg   ax,ax

c0022660 <__udivdi3>:
c0022660:	55                   	push   ebp
c0022661:	57                   	push   edi
c0022662:	56                   	push   esi
c0022663:	53                   	push   ebx
c0022664:	83 ec 1c             	sub    esp,0x1c
c0022667:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002266b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002266f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0022673:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022677:	85 d2                	test   edx,edx
c0022679:	75 41                	jne    c00226bc <__udivdi3+0x5c>
c002267b:	39 f7                	cmp    edi,esi
c002267d:	76 15                	jbe    c0022694 <__udivdi3+0x34>
c002267f:	89 e8                	mov    eax,ebp
c0022681:	89 f2                	mov    edx,esi
c0022683:	f7 f7                	div    edi
c0022685:	31 db                	xor    ebx,ebx
c0022687:	89 da                	mov    edx,ebx
c0022689:	83 c4 1c             	add    esp,0x1c
c002268c:	5b                   	pop    ebx
c002268d:	5e                   	pop    esi
c002268e:	5f                   	pop    edi
c002268f:	5d                   	pop    ebp
c0022690:	c3                   	ret    
c0022691:	8d 76 00             	lea    esi,[esi+0x0]
c0022694:	89 f9                	mov    ecx,edi
c0022696:	85 ff                	test   edi,edi
c0022698:	75 0b                	jne    c00226a5 <__udivdi3+0x45>
c002269a:	b8 01 00 00 00       	mov    eax,0x1
c002269f:	31 d2                	xor    edx,edx
c00226a1:	f7 f7                	div    edi
c00226a3:	89 c1                	mov    ecx,eax
c00226a5:	31 d2                	xor    edx,edx
c00226a7:	89 f0                	mov    eax,esi
c00226a9:	f7 f1                	div    ecx
c00226ab:	89 c3                	mov    ebx,eax
c00226ad:	89 e8                	mov    eax,ebp
c00226af:	f7 f1                	div    ecx
c00226b1:	89 da                	mov    edx,ebx
c00226b3:	83 c4 1c             	add    esp,0x1c
c00226b6:	5b                   	pop    ebx
c00226b7:	5e                   	pop    esi
c00226b8:	5f                   	pop    edi
c00226b9:	5d                   	pop    ebp
c00226ba:	c3                   	ret    
c00226bb:	90                   	nop
c00226bc:	39 f2                	cmp    edx,esi
c00226be:	77 1c                	ja     c00226dc <__udivdi3+0x7c>
c00226c0:	0f bd da             	bsr    ebx,edx
c00226c3:	83 f3 1f             	xor    ebx,0x1f
c00226c6:	75 24                	jne    c00226ec <__udivdi3+0x8c>
c00226c8:	39 f2                	cmp    edx,esi
c00226ca:	72 08                	jb     c00226d4 <__udivdi3+0x74>
c00226cc:	39 ef                	cmp    edi,ebp
c00226ce:	0f 87 84 00 00 00    	ja     c0022758 <__udivdi3+0xf8>
c00226d4:	b8 01 00 00 00       	mov    eax,0x1
c00226d9:	eb ac                	jmp    c0022687 <__udivdi3+0x27>
c00226db:	90                   	nop
c00226dc:	31 db                	xor    ebx,ebx
c00226de:	31 c0                	xor    eax,eax
c00226e0:	89 da                	mov    edx,ebx
c00226e2:	83 c4 1c             	add    esp,0x1c
c00226e5:	5b                   	pop    ebx
c00226e6:	5e                   	pop    esi
c00226e7:	5f                   	pop    edi
c00226e8:	5d                   	pop    ebp
c00226e9:	c3                   	ret    
c00226ea:	66 90                	xchg   ax,ax
c00226ec:	b8 20 00 00 00       	mov    eax,0x20
c00226f1:	29 d8                	sub    eax,ebx
c00226f3:	88 d9                	mov    cl,bl
c00226f5:	d3 e2                	shl    edx,cl
c00226f7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00226fb:	89 fa                	mov    edx,edi
c00226fd:	88 c1                	mov    cl,al
c00226ff:	d3 ea                	shr    edx,cl
c0022701:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022705:	09 d1                	or     ecx,edx
c0022707:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002270b:	88 d9                	mov    cl,bl
c002270d:	d3 e7                	shl    edi,cl
c002270f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0022713:	89 f7                	mov    edi,esi
c0022715:	88 c1                	mov    cl,al
c0022717:	d3 ef                	shr    edi,cl
c0022719:	88 d9                	mov    cl,bl
c002271b:	d3 e6                	shl    esi,cl
c002271d:	89 ea                	mov    edx,ebp
c002271f:	88 c1                	mov    cl,al
c0022721:	d3 ea                	shr    edx,cl
c0022723:	09 d6                	or     esi,edx
c0022725:	89 f0                	mov    eax,esi
c0022727:	89 fa                	mov    edx,edi
c0022729:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002272d:	89 d7                	mov    edi,edx
c002272f:	89 c6                	mov    esi,eax
c0022731:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0022735:	39 d7                	cmp    edi,edx
c0022737:	72 13                	jb     c002274c <__udivdi3+0xec>
c0022739:	74 09                	je     c0022744 <__udivdi3+0xe4>
c002273b:	89 f0                	mov    eax,esi
c002273d:	31 db                	xor    ebx,ebx
c002273f:	e9 43 ff ff ff       	jmp    c0022687 <__udivdi3+0x27>
c0022744:	88 d9                	mov    cl,bl
c0022746:	d3 e5                	shl    ebp,cl
c0022748:	39 c5                	cmp    ebp,eax
c002274a:	73 ef                	jae    c002273b <__udivdi3+0xdb>
c002274c:	8d 46 ff             	lea    eax,[esi-0x1]
c002274f:	31 db                	xor    ebx,ebx
c0022751:	e9 31 ff ff ff       	jmp    c0022687 <__udivdi3+0x27>
c0022756:	66 90                	xchg   ax,ax
c0022758:	31 c0                	xor    eax,eax
c002275a:	e9 28 ff ff ff       	jmp    c0022687 <__udivdi3+0x27>
c002275f:	90                   	nop

c0022760 <__umoddi3>:
c0022760:	55                   	push   ebp
c0022761:	57                   	push   edi
c0022762:	56                   	push   esi
c0022763:	53                   	push   ebx
c0022764:	83 ec 1c             	sub    esp,0x1c
c0022767:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002276b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002276f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0022773:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022777:	89 da                	mov    edx,ebx
c0022779:	85 c0                	test   eax,eax
c002277b:	75 37                	jne    c00227b4 <__umoddi3+0x54>
c002277d:	39 df                	cmp    edi,ebx
c002277f:	76 13                	jbe    c0022794 <__umoddi3+0x34>
c0022781:	89 f0                	mov    eax,esi
c0022783:	f7 f7                	div    edi
c0022785:	89 d0                	mov    eax,edx
c0022787:	31 d2                	xor    edx,edx
c0022789:	83 c4 1c             	add    esp,0x1c
c002278c:	5b                   	pop    ebx
c002278d:	5e                   	pop    esi
c002278e:	5f                   	pop    edi
c002278f:	5d                   	pop    ebp
c0022790:	c3                   	ret    
c0022791:	8d 76 00             	lea    esi,[esi+0x0]
c0022794:	89 fd                	mov    ebp,edi
c0022796:	85 ff                	test   edi,edi
c0022798:	75 0b                	jne    c00227a5 <__umoddi3+0x45>
c002279a:	b8 01 00 00 00       	mov    eax,0x1
c002279f:	31 d2                	xor    edx,edx
c00227a1:	f7 f7                	div    edi
c00227a3:	89 c5                	mov    ebp,eax
c00227a5:	89 d8                	mov    eax,ebx
c00227a7:	31 d2                	xor    edx,edx
c00227a9:	f7 f5                	div    ebp
c00227ab:	89 f0                	mov    eax,esi
c00227ad:	f7 f5                	div    ebp
c00227af:	89 d0                	mov    eax,edx
c00227b1:	eb d4                	jmp    c0022787 <__umoddi3+0x27>
c00227b3:	90                   	nop
c00227b4:	89 f1                	mov    ecx,esi
c00227b6:	39 d8                	cmp    eax,ebx
c00227b8:	76 0a                	jbe    c00227c4 <__umoddi3+0x64>
c00227ba:	89 f0                	mov    eax,esi
c00227bc:	83 c4 1c             	add    esp,0x1c
c00227bf:	5b                   	pop    ebx
c00227c0:	5e                   	pop    esi
c00227c1:	5f                   	pop    edi
c00227c2:	5d                   	pop    ebp
c00227c3:	c3                   	ret    
c00227c4:	0f bd e8             	bsr    ebp,eax
c00227c7:	83 f5 1f             	xor    ebp,0x1f
c00227ca:	75 1c                	jne    c00227e8 <__umoddi3+0x88>
c00227cc:	39 d8                	cmp    eax,ebx
c00227ce:	72 04                	jb     c00227d4 <__umoddi3+0x74>
c00227d0:	39 f7                	cmp    edi,esi
c00227d2:	77 08                	ja     c00227dc <__umoddi3+0x7c>
c00227d4:	89 da                	mov    edx,ebx
c00227d6:	29 fe                	sub    esi,edi
c00227d8:	19 c2                	sbb    edx,eax
c00227da:	89 f1                	mov    ecx,esi
c00227dc:	89 c8                	mov    eax,ecx
c00227de:	83 c4 1c             	add    esp,0x1c
c00227e1:	5b                   	pop    ebx
c00227e2:	5e                   	pop    esi
c00227e3:	5f                   	pop    edi
c00227e4:	5d                   	pop    ebp
c00227e5:	c3                   	ret    
c00227e6:	66 90                	xchg   ax,ax
c00227e8:	ba 20 00 00 00       	mov    edx,0x20
c00227ed:	29 ea                	sub    edx,ebp
c00227ef:	89 e9                	mov    ecx,ebp
c00227f1:	d3 e0                	shl    eax,cl
c00227f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00227f7:	89 f8                	mov    eax,edi
c00227f9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00227fd:	88 d1                	mov    cl,dl
c00227ff:	d3 e8                	shr    eax,cl
c0022801:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022805:	09 c1                	or     ecx,eax
c0022807:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002280b:	89 e9                	mov    ecx,ebp
c002280d:	d3 e7                	shl    edi,cl
c002280f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0022813:	89 d8                	mov    eax,ebx
c0022815:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022819:	88 d1                	mov    cl,dl
c002281b:	d3 e8                	shr    eax,cl
c002281d:	89 c7                	mov    edi,eax
c002281f:	89 e9                	mov    ecx,ebp
c0022821:	d3 e3                	shl    ebx,cl
c0022823:	89 f0                	mov    eax,esi
c0022825:	88 d1                	mov    cl,dl
c0022827:	d3 e8                	shr    eax,cl
c0022829:	09 d8                	or     eax,ebx
c002282b:	89 e9                	mov    ecx,ebp
c002282d:	d3 e6                	shl    esi,cl
c002282f:	89 f3                	mov    ebx,esi
c0022831:	89 fa                	mov    edx,edi
c0022833:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0022837:	89 d1                	mov    ecx,edx
c0022839:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002283d:	89 c6                	mov    esi,eax
c002283f:	89 d7                	mov    edi,edx
c0022841:	39 d1                	cmp    ecx,edx
c0022843:	72 27                	jb     c002286c <__umoddi3+0x10c>
c0022845:	74 21                	je     c0022868 <__umoddi3+0x108>
c0022847:	89 ca                	mov    edx,ecx
c0022849:	29 f3                	sub    ebx,esi
c002284b:	19 fa                	sbb    edx,edi
c002284d:	89 d0                	mov    eax,edx
c002284f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0022853:	d3 e0                	shl    eax,cl
c0022855:	89 e9                	mov    ecx,ebp
c0022857:	d3 eb                	shr    ebx,cl
c0022859:	09 d8                	or     eax,ebx
c002285b:	d3 ea                	shr    edx,cl
c002285d:	83 c4 1c             	add    esp,0x1c
c0022860:	5b                   	pop    ebx
c0022861:	5e                   	pop    esi
c0022862:	5f                   	pop    edi
c0022863:	5d                   	pop    ebp
c0022864:	c3                   	ret    
c0022865:	8d 76 00             	lea    esi,[esi+0x0]
c0022868:	39 c3                	cmp    ebx,eax
c002286a:	73 db                	jae    c0022847 <__umoddi3+0xe7>
c002286c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0022870:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0022874:	89 d7                	mov    edi,edx
c0022876:	89 c6                	mov    esi,eax
c0022878:	eb cd                	jmp    c0022847 <__umoddi3+0xe7>

Disassembly of section .init:

c002287a <_init>:
c002287a:	55                   	push   ebp
c002287b:	89 e5                	mov    ebp,esp
c002287d:	e8 96 d8 fd ff       	call   c0000118 <frame_dummy>
c0022882:	e8 e5 fa ff ff       	call   c002236c <__do_global_ctors_aux>
c0022887:	5d                   	pop    ebp
c0022888:	c3                   	ret    

Disassembly of section .fini:

c0022889 <_fini>:
c0022889:	55                   	push   ebp
c002288a:	89 e5                	mov    ebp,esp
c002288c:	e8 17 d8 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c0022891:	5d                   	pop    ebp
c0022892:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0022894 <Computer::~Computer()>:
c0022894:	83 ec 0c             	sub    esp,0xc
c0022897:	ba d8 3d 02 c0       	mov    edx,0xc0023dd8
c002289c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228a0:	89 10                	mov    DWORD PTR [eax],edx
c00228a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228a6:	83 ec 0c             	sub    esp,0xc
c00228a9:	50                   	push   eax
c00228aa:	e8 95 ba fe ff       	call   c000e344 <Device::~Device()>
c00228af:	83 c4 10             	add    esp,0x10
c00228b2:	90                   	nop
c00228b3:	83 c4 0c             	add    esp,0xc
c00228b6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00228b8 <Computer::~Computer()>:
c00228b8:	83 ec 0c             	sub    esp,0xc
c00228bb:	83 ec 0c             	sub    esp,0xc
c00228be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00228c2:	e8 cd ff ff ff       	call   c0022894 <Computer::~Computer()>
c00228c7:	83 c4 10             	add    esp,0x10
c00228ca:	83 ec 08             	sub    esp,0x8
c00228cd:	68 ec 01 00 00       	push   0x1ec
c00228d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00228d6:	e8 09 a6 fe ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c00228db:	83 c4 10             	add    esp,0x10
c00228de:	83 c4 0c             	add    esp,0xc
c00228e1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00228e2 <idleCommon()>:
c00228e2:	83 ec 0c             	sub    esp,0xc
c00228e5:	fa                   	cli    
c00228e6:	ff 05 28 93 02 c0    	inc    DWORD PTR ds:0xc0029328
c00228ec:	e8 8f 5a ff ff       	call   c0018380 <schedule()>
c00228f1:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c00228f6:	48                   	dec    eax
c00228f7:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c00228fc:	75 01                	jne    c00228ff <idleCommon()+0x1d>
c00228fe:	fb                   	sti    
c00228ff:	83 c4 0c             	add    esp,0xc
c0022902:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0022904 <LinkedList<UnixFile>::~LinkedList()>:
c0022904:	90                   	nop
c0022905:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0022906 <LinkedList<UnixFile>::LinkedList()>:
c0022906:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002290a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022910:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022914:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002291b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002291f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022926:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002292a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022934:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002293b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002293f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022946:	90                   	nop
c0022947:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0022948 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0022948:	83 ec 0c             	sub    esp,0xc
c002294b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0022950:	75 10                	jne    c0022962 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0022952:	83 ec 0c             	sub    esp,0xc
c0022955:	68 a8 41 02 c0       	push   0xc00241a8
c002295a:	e8 be 23 ff ff       	call   c0014d1d <Krnl::panic(char const*)>
c002295f:	83 c4 10             	add    esp,0x10
c0022962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022966:	8b 00                	mov    eax,DWORD PTR [eax]
c0022968:	85 c0                	test   eax,eax
c002296a:	74 34                	je     c00229a0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002296c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022970:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022973:	85 c0                	test   eax,eax
c0022975:	74 29                	je     c00229a0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0022977:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002297b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002297e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022982:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022985:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022989:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002298d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022990:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022994:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022997:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002299e:	eb 65                	jmp    c0022a05 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00229a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00229a6:	85 c0                	test   eax,eax
c00229a8:	75 4b                	jne    c00229f5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00229aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00229b1:	85 c0                	test   eax,eax
c00229b3:	75 40                	jne    c00229f5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00229b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229b9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00229bd:	89 10                	mov    DWORD PTR [eax],edx
c00229bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00229c7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00229ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00229d1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00229d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229dc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00229df:	85 c0                	test   eax,eax
c00229e1:	74 22                	je     c0022a05 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00229e3:	83 ec 0c             	sub    esp,0xc
c00229e6:	68 ca 41 02 c0       	push   0xc00241ca
c00229eb:	e8 2d 23 ff ff       	call   c0014d1d <Krnl::panic(char const*)>
c00229f0:	83 c4 10             	add    esp,0x10
c00229f3:	eb 10                	jmp    c0022a05 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00229f5:	83 ec 0c             	sub    esp,0xc
c00229f8:	68 d4 41 02 c0       	push   0xc00241d4
c00229fd:	e8 1b 23 ff ff       	call   c0014d1d <Krnl::panic(char const*)>
c0022a02:	83 c4 10             	add    esp,0x10
c0022a05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a09:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022a0c:	8d 50 01             	lea    edx,[eax+0x1]
c0022a0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a13:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022a16:	90                   	nop
c0022a17:	83 c4 0c             	add    esp,0xc
c0022a1a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0022a1c <LinkedList<UnixFile>::getFirstElement()>:
c0022a1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022a20:	8b 00                	mov    eax,DWORD PTR [eax]
c0022a22:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0022a24 <LinkedList<UnixFile>::removeFirst()>:
c0022a24:	83 ec 0c             	sub    esp,0xc
c0022a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0022a2d:	85 c0                	test   eax,eax
c0022a2f:	75 12                	jne    c0022a43 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0022a31:	83 ec 0c             	sub    esp,0xc
c0022a34:	68 e0 41 02 c0       	push   0xc00241e0
c0022a39:	e8 df 22 ff ff       	call   c0014d1d <Krnl::panic(char const*)>
c0022a3e:	83 c4 10             	add    esp,0x10
c0022a41:	eb 7e                	jmp    c0022ac1 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0022a43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a47:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022a4a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022a4d:	85 c0                	test   eax,eax
c0022a4f:	74 10                	je     c0022a61 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0022a51:	83 ec 0c             	sub    esp,0xc
c0022a54:	68 2b 42 02 c0       	push   0xc002422b
c0022a59:	e8 bf 22 ff ff       	call   c0014d1d <Krnl::panic(char const*)>
c0022a5e:	83 c4 10             	add    esp,0x10
c0022a61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a65:	8b 00                	mov    eax,DWORD PTR [eax]
c0022a67:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022a6a:	85 c0                	test   eax,eax
c0022a6c:	75 33                	jne    c0022aa1 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0022a6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a72:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022a78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a7c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022a83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a87:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022a8a:	83 f8 01             	cmp    eax,0x1
c0022a8d:	74 21                	je     c0022ab0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0022a8f:	83 ec 0c             	sub    esp,0xc
c0022a92:	68 04 42 02 c0       	push   0xc0024204
c0022a97:	e8 81 22 ff ff       	call   c0014d1d <Krnl::panic(char const*)>
c0022a9c:	83 c4 10             	add    esp,0x10
c0022a9f:	eb 0f                	jmp    c0022ab0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0022aa1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022aa5:	8b 00                	mov    eax,DWORD PTR [eax]
c0022aa7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0022aaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022aae:	89 10                	mov    DWORD PTR [eax],edx
c0022ab0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ab4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022ab7:	8d 50 ff             	lea    edx,[eax-0x1]
c0022aba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022abe:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022ac1:	83 c4 0c             	add    esp,0xc
c0022ac4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0022ac6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0022ac6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022aca:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022acd:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0022ace <DriverlessDevice::~DriverlessDevice()>:
c0022ace:	ba 1c 4a 02 c0       	mov    edx,0xc0024a1c
c0022ad3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ad7:	89 10                	mov    DWORD PTR [eax],edx
c0022ad9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022add:	50                   	push   eax
c0022ade:	e8 61 b8 fe ff       	call   c000e344 <Device::~Device()>
c0022ae3:	83 c4 04             	add    esp,0x4
c0022ae6:	90                   	nop
c0022ae7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0022ae8 <DriverlessDevice::~DriverlessDevice()>:
c0022ae8:	83 ec 0c             	sub    esp,0xc
c0022aeb:	83 ec 0c             	sub    esp,0xc
c0022aee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022af2:	e8 d7 ff ff ff       	call   c0022ace <DriverlessDevice::~DriverlessDevice()>
c0022af7:	83 c4 10             	add    esp,0x10
c0022afa:	83 ec 08             	sub    esp,0x8
c0022afd:	68 58 01 00 00       	push   0x158
c0022b02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022b06:	e8 d9 a3 fe ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c0022b0b:	83 c4 10             	add    esp,0x10
c0022b0e:	83 c4 0c             	add    esp,0xc
c0022b11:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0022b12 <LinkedList<Device>::addElement(Device*)>:
c0022b12:	83 ec 0c             	sub    esp,0xc
c0022b15:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0022b1a:	75 10                	jne    c0022b2c <LinkedList<Device>::addElement(Device*)+0x1a>
c0022b1c:	83 ec 0c             	sub    esp,0xc
c0022b1f:	68 a8 41 02 c0       	push   0xc00241a8
c0022b24:	e8 f4 21 ff ff       	call   c0014d1d <Krnl::panic(char const*)>
c0022b29:	83 c4 10             	add    esp,0x10
c0022b2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b30:	8b 00                	mov    eax,DWORD PTR [eax]
c0022b32:	85 c0                	test   eax,eax
c0022b34:	74 3a                	je     c0022b70 <LinkedList<Device>::addElement(Device*)+0x5e>
c0022b36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b3a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022b3d:	85 c0                	test   eax,eax
c0022b3f:	74 2f                	je     c0022b70 <LinkedList<Device>::addElement(Device*)+0x5e>
c0022b41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b45:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022b48:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022b4c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0022b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b56:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022b5a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022b5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b61:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022b64:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0022b6e:	eb 68                	jmp    c0022bd8 <LinkedList<Device>::addElement(Device*)+0xc6>
c0022b70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b74:	8b 00                	mov    eax,DWORD PTR [eax]
c0022b76:	85 c0                	test   eax,eax
c0022b78:	75 4e                	jne    c0022bc8 <LinkedList<Device>::addElement(Device*)+0xb6>
c0022b7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022b81:	85 c0                	test   eax,eax
c0022b83:	75 43                	jne    c0022bc8 <LinkedList<Device>::addElement(Device*)+0xb6>
c0022b85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b89:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022b8d:	89 10                	mov    DWORD PTR [eax],edx
c0022b8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b93:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022b97:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022b9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022ba1:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0022bab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022baf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022bb2:	85 c0                	test   eax,eax
c0022bb4:	74 22                	je     c0022bd8 <LinkedList<Device>::addElement(Device*)+0xc6>
c0022bb6:	83 ec 0c             	sub    esp,0xc
c0022bb9:	68 ca 41 02 c0       	push   0xc00241ca
c0022bbe:	e8 5a 21 ff ff       	call   c0014d1d <Krnl::panic(char const*)>
c0022bc3:	83 c4 10             	add    esp,0x10
c0022bc6:	eb 10                	jmp    c0022bd8 <LinkedList<Device>::addElement(Device*)+0xc6>
c0022bc8:	83 ec 0c             	sub    esp,0xc
c0022bcb:	68 d4 41 02 c0       	push   0xc00241d4
c0022bd0:	e8 48 21 ff ff       	call   c0014d1d <Krnl::panic(char const*)>
c0022bd5:	83 c4 10             	add    esp,0x10
c0022bd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bdc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022bdf:	8d 50 01             	lea    edx,[eax+0x1]
c0022be2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022be6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022be9:	90                   	nop
c0022bea:	83 c4 0c             	add    esp,0xc
c0022bed:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0022bee <LinkedList<Device>::LinkedList()>:
c0022bee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022bf2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022bf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022bfc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022c03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c07:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022c0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c12:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022c18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c1c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022c23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c27:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022c2e:	90                   	nop
c0022c2f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0022c30 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0022c30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c34:	8b 00                	mov    eax,DWORD PTR [eax]
c0022c36:	85 c0                	test   eax,eax
c0022c38:	75 0e                	jne    c0022c48 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0022c3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022c41:	85 c0                	test   eax,eax
c0022c43:	75 03                	jne    c0022c48 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0022c45:	b0 01                	mov    al,0x1
c0022c47:	c3                   	ret    
c0022c48:	b0 00                	mov    al,0x0
c0022c4a:	90                   	nop
c0022c4b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0022c4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0022c4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c50:	8b 00                	mov    eax,DWORD PTR [eax]
c0022c52:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0022c54 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0022c54:	83 ec 0c             	sub    esp,0xc
c0022c57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c5b:	8b 00                	mov    eax,DWORD PTR [eax]
c0022c5d:	85 c0                	test   eax,eax
c0022c5f:	75 17                	jne    c0022c78 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c0022c61:	83 ec 0c             	sub    esp,0xc
c0022c64:	68 e0 41 02 c0       	push   0xc00241e0
c0022c69:	e8 af 20 ff ff       	call   c0014d1d <Krnl::panic(char const*)>
c0022c6e:	83 c4 10             	add    esp,0x10
c0022c71:	e9 92 00 00 00       	jmp    c0022d08 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c0022c76:	66 90                	xchg   ax,ax
c0022c78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022c7f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0022c82:	85 c0                	test   eax,eax
c0022c84:	0f 95 c0             	setne  al
c0022c87:	84 c0                	test   al,al
c0022c89:	74 11                	je     c0022c9c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c0022c8b:	83 ec 0c             	sub    esp,0xc
c0022c8e:	68 2b 42 02 c0       	push   0xc002422b
c0022c93:	e8 85 20 ff ff       	call   c0014d1d <Krnl::panic(char const*)>
c0022c98:	83 c4 10             	add    esp,0x10
c0022c9b:	90                   	nop
c0022c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ca0:	8b 00                	mov    eax,DWORD PTR [eax]
c0022ca2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0022ca5:	85 c0                	test   eax,eax
c0022ca7:	0f 94 c0             	sete   al
c0022caa:	84 c0                	test   al,al
c0022cac:	74 36                	je     c0022ce4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c0022cae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cb2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022cb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cbc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022cc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cc7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022cca:	83 f8 01             	cmp    eax,0x1
c0022ccd:	74 25                	je     c0022cf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c0022ccf:	83 ec 0c             	sub    esp,0xc
c0022cd2:	68 04 42 02 c0       	push   0xc0024204
c0022cd7:	e8 41 20 ff ff       	call   c0014d1d <Krnl::panic(char const*)>
c0022cdc:	83 c4 10             	add    esp,0x10
c0022cdf:	eb 13                	jmp    c0022cf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c0022ce1:	8d 76 00             	lea    esi,[esi+0x0]
c0022ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ce8:	8b 00                	mov    eax,DWORD PTR [eax]
c0022cea:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0022ced:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cf1:	89 10                	mov    DWORD PTR [eax],edx
c0022cf3:	90                   	nop
c0022cf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cf8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022cfb:	8d 50 ff             	lea    edx,[eax-0x1]
c0022cfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d02:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022d05:	8d 76 00             	lea    esi,[esi+0x0]
c0022d08:	83 c4 0c             	add    esp,0xc
c0022d0b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0022d0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0022d0c:	83 ec 0c             	sub    esp,0xc
c0022d0f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0022d14:	75 12                	jne    c0022d28 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c0022d16:	83 ec 0c             	sub    esp,0xc
c0022d19:	68 a8 41 02 c0       	push   0xc00241a8
c0022d1e:	e8 fa 1f ff ff       	call   c0014d1d <Krnl::panic(char const*)>
c0022d23:	83 c4 10             	add    esp,0x10
c0022d26:	66 90                	xchg   ax,ax
c0022d28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d2c:	8b 00                	mov    eax,DWORD PTR [eax]
c0022d2e:	85 c0                	test   eax,eax
c0022d30:	74 36                	je     c0022d68 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0022d32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d36:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022d39:	85 c0                	test   eax,eax
c0022d3b:	74 2b                	je     c0022d68 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0022d3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d41:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022d44:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022d48:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0022d4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d4f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022d53:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022d56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022d5d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0022d64:	eb 6a                	jmp    c0022dd0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0022d66:	66 90                	xchg   ax,ax
c0022d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0022d6e:	85 c0                	test   eax,eax
c0022d70:	75 4e                	jne    c0022dc0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0022d72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d76:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022d79:	85 c0                	test   eax,eax
c0022d7b:	75 43                	jne    c0022dc0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0022d7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d81:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022d85:	89 10                	mov    DWORD PTR [eax],edx
c0022d87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d8b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022d8f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022d92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d96:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022d99:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0022da0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022da4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022da7:	85 c0                	test   eax,eax
c0022da9:	74 25                	je     c0022dd0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0022dab:	83 ec 0c             	sub    esp,0xc
c0022dae:	68 ca 41 02 c0       	push   0xc00241ca
c0022db3:	e8 65 1f ff ff       	call   c0014d1d <Krnl::panic(char const*)>
c0022db8:	83 c4 10             	add    esp,0x10
c0022dbb:	eb 13                	jmp    c0022dd0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0022dbd:	8d 76 00             	lea    esi,[esi+0x0]
c0022dc0:	83 ec 0c             	sub    esp,0xc
c0022dc3:	68 d4 41 02 c0       	push   0xc00241d4
c0022dc8:	e8 50 1f ff ff       	call   c0014d1d <Krnl::panic(char const*)>
c0022dcd:	83 c4 10             	add    esp,0x10
c0022dd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022dd4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022dd7:	8d 50 01             	lea    edx,[eax+0x1]
c0022dda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022dde:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022de1:	90                   	nop
c0022de2:	83 c4 0c             	add    esp,0xc
c0022de5:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0022de8 <ACPI::~ACPI()>:
c0022de8:	83 ec 0c             	sub    esp,0xc
c0022deb:	ba 50 54 02 c0       	mov    edx,0xc0025450
c0022df0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022df4:	89 10                	mov    DWORD PTR [eax],edx
c0022df6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022dfa:	83 ec 0c             	sub    esp,0xc
c0022dfd:	50                   	push   eax
c0022dfe:	e8 41 b5 fe ff       	call   c000e344 <Device::~Device()>
c0022e03:	83 c4 10             	add    esp,0x10
c0022e06:	90                   	nop
c0022e07:	83 c4 0c             	add    esp,0xc
c0022e0a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0022e0c <ACPI::~ACPI()>:
c0022e0c:	83 ec 0c             	sub    esp,0xc
c0022e0f:	83 ec 0c             	sub    esp,0xc
c0022e12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022e16:	e8 cd ff ff ff       	call   c0022de8 <ACPI::~ACPI()>
c0022e1b:	83 c4 10             	add    esp,0x10
c0022e1e:	83 ec 08             	sub    esp,0x8
c0022e21:	68 64 12 00 00       	push   0x1264
c0022e26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022e2a:	e8 b5 a0 fe ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c0022e2f:	83 c4 10             	add    esp,0x10
c0022e32:	83 c4 0c             	add    esp,0xc
c0022e35:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0022e38 <LinkedList<Device>::~LinkedList()>:
c0022e38:	90                   	nop
c0022e39:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0022e3c <LinkedList<Device>::isEmpty()>:
c0022e3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022e40:	8b 00                	mov    eax,DWORD PTR [eax]
c0022e42:	85 c0                	test   eax,eax
c0022e44:	75 0e                	jne    c0022e54 <LinkedList<Device>::isEmpty()+0x18>
c0022e46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022e4a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022e4d:	85 c0                	test   eax,eax
c0022e4f:	75 03                	jne    c0022e54 <LinkedList<Device>::isEmpty()+0x18>
c0022e51:	b0 01                	mov    al,0x1
c0022e53:	c3                   	ret    
c0022e54:	b0 00                	mov    al,0x0
c0022e56:	90                   	nop
c0022e57:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0022e58 <LinkedList<Device>::getFirstElement()>:
c0022e58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022e5c:	8b 00                	mov    eax,DWORD PTR [eax]
c0022e5e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0022e60 <LinkedList<Device>::removeFirst()>:
c0022e60:	83 ec 0c             	sub    esp,0xc
c0022e63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e67:	8b 00                	mov    eax,DWORD PTR [eax]
c0022e69:	85 c0                	test   eax,eax
c0022e6b:	75 17                	jne    c0022e84 <LinkedList<Device>::removeFirst()+0x24>
c0022e6d:	83 ec 0c             	sub    esp,0xc
c0022e70:	68 e0 41 02 c0       	push   0xc00241e0
c0022e75:	e8 a3 1e ff ff       	call   c0014d1d <Krnl::panic(char const*)>
c0022e7a:	83 c4 10             	add    esp,0x10
c0022e7d:	e9 92 00 00 00       	jmp    c0022f14 <LinkedList<Device>::removeFirst()+0xb4>
c0022e82:	66 90                	xchg   ax,ax
c0022e84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e88:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022e8b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0022e91:	85 c0                	test   eax,eax
c0022e93:	74 13                	je     c0022ea8 <LinkedList<Device>::removeFirst()+0x48>
c0022e95:	83 ec 0c             	sub    esp,0xc
c0022e98:	68 2b 42 02 c0       	push   0xc002422b
c0022e9d:	e8 7b 1e ff ff       	call   c0014d1d <Krnl::panic(char const*)>
c0022ea2:	83 c4 10             	add    esp,0x10
c0022ea5:	8d 76 00             	lea    esi,[esi+0x0]
c0022ea8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022eac:	8b 00                	mov    eax,DWORD PTR [eax]
c0022eae:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0022eb4:	85 c0                	test   eax,eax
c0022eb6:	75 34                	jne    c0022eec <LinkedList<Device>::removeFirst()+0x8c>
c0022eb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ebc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022ec2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ec6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022ecd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ed1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022ed4:	83 f8 01             	cmp    eax,0x1
c0022ed7:	74 27                	je     c0022f00 <LinkedList<Device>::removeFirst()+0xa0>
c0022ed9:	83 ec 0c             	sub    esp,0xc
c0022edc:	68 04 42 02 c0       	push   0xc0024204
c0022ee1:	e8 37 1e ff ff       	call   c0014d1d <Krnl::panic(char const*)>
c0022ee6:	83 c4 10             	add    esp,0x10
c0022ee9:	eb 15                	jmp    c0022f00 <LinkedList<Device>::removeFirst()+0xa0>
c0022eeb:	90                   	nop
c0022eec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ef0:	8b 00                	mov    eax,DWORD PTR [eax]
c0022ef2:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0022ef8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022efc:	89 10                	mov    DWORD PTR [eax],edx
c0022efe:	66 90                	xchg   ax,ax
c0022f00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f04:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022f07:	8d 50 ff             	lea    edx,[eax-0x1]
c0022f0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f0e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022f11:	8d 76 00             	lea    esi,[esi+0x0]
c0022f14:	83 c4 0c             	add    esp,0xc
c0022f17:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0022f18 <CPU::~CPU()>:
c0022f18:	83 ec 0c             	sub    esp,0xc
c0022f1b:	ba e0 59 02 c0       	mov    edx,0xc00259e0
c0022f20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f24:	89 10                	mov    DWORD PTR [eax],edx
c0022f26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f2a:	83 ec 0c             	sub    esp,0xc
c0022f2d:	50                   	push   eax
c0022f2e:	e8 11 b4 fe ff       	call   c000e344 <Device::~Device()>
c0022f33:	83 c4 10             	add    esp,0x10
c0022f36:	90                   	nop
c0022f37:	83 c4 0c             	add    esp,0xc
c0022f3a:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0022f3c <CPU::~CPU()>:
c0022f3c:	83 ec 0c             	sub    esp,0xc
c0022f3f:	83 ec 0c             	sub    esp,0xc
c0022f42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022f46:	e8 cd ff ff ff       	call   c0022f18 <CPU::~CPU()>
c0022f4b:	83 c4 10             	add    esp,0x10
c0022f4e:	83 ec 08             	sub    esp,0x8
c0022f51:	68 98 11 00 00       	push   0x1198
c0022f56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022f5a:	e8 85 9f fe ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c0022f5f:	83 c4 10             	add    esp,0x10
c0022f62:	83 c4 0c             	add    esp,0xc
c0022f65:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0022f68 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0022f68:	90                   	nop
c0022f69:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0022f6c <ThreadControlBlock::ThreadControlBlock()>:
c0022f6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022f70:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0022f77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022f7b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0022f82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022f86:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0022f8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022f91:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c0022f98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022f9c:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c0022fa3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022fa7:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0022fab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022faf:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c0022fb3:	90                   	nop
c0022fb4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0022fb8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0022fb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022fbc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022fc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022fc6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022fcd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022fd1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022fd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022fdc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022fe2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022fe6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022fed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ff1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022ff8:	90                   	nop
c0022ff9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0022ffc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0022ffc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023000:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0023003:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0023004 <Vm::_FPUState::_FPUState()>:
c0023004:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023008:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c002300f:	90                   	nop
c0023010:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0023012 <PCI::~PCI()>:
c0023012:	83 ec 0c             	sub    esp,0xc
c0023015:	ba d0 67 02 c0       	mov    edx,0xc00267d0
c002301a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002301e:	89 10                	mov    DWORD PTR [eax],edx
c0023020:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023024:	83 ec 0c             	sub    esp,0xc
c0023027:	50                   	push   eax
c0023028:	e8 a7 ad fe ff       	call   c000ddd4 <Bus::~Bus()>
c002302d:	83 c4 10             	add    esp,0x10
c0023030:	90                   	nop
c0023031:	83 c4 0c             	add    esp,0xc
c0023034:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0023036 <PCI::~PCI()>:
c0023036:	83 ec 0c             	sub    esp,0xc
c0023039:	83 ec 0c             	sub    esp,0xc
c002303c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023040:	e8 cd ff ff ff       	call   c0023012 <PCI::~PCI()>
c0023045:	83 c4 10             	add    esp,0x10
c0023048:	83 ec 08             	sub    esp,0x8
c002304b:	68 5c 01 00 00       	push   0x15c
c0023050:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023054:	e8 8b 9e fe ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c0023059:	83 c4 10             	add    esp,0x10
c002305c:	83 c4 0c             	add    esp,0xc
c002305f:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0023060 <IDE::~IDE()>:
c0023060:	83 ec 0c             	sub    esp,0xc
c0023063:	ba a0 68 02 c0       	mov    edx,0xc00268a0
c0023068:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002306c:	89 10                	mov    DWORD PTR [eax],edx
c002306e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023072:	83 ec 0c             	sub    esp,0xc
c0023075:	50                   	push   eax
c0023076:	e8 e1 b7 fe ff       	call   c000e85c <HardDiskController::~HardDiskController()>
c002307b:	83 c4 10             	add    esp,0x10
c002307e:	90                   	nop
c002307f:	83 c4 0c             	add    esp,0xc
c0023082:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0023084 <IDE::~IDE()>:
c0023084:	83 ec 0c             	sub    esp,0xc
c0023087:	83 ec 0c             	sub    esp,0xc
c002308a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002308e:	e8 cd ff ff ff       	call   c0023060 <IDE::~IDE()>
c0023093:	83 c4 10             	add    esp,0x10
c0023096:	83 ec 08             	sub    esp,0x8
c0023099:	68 70 02 00 00       	push   0x270
c002309e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00230a2:	e8 3d 9e fe ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c00230a7:	83 c4 10             	add    esp,0x10
c00230aa:	83 c4 0c             	add    esp,0xc
c00230ad:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c00230ae <SATABus::~SATABus()>:
c00230ae:	83 ec 0c             	sub    esp,0xc
c00230b1:	ba 6c 69 02 c0       	mov    edx,0xc002696c
c00230b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230ba:	89 10                	mov    DWORD PTR [eax],edx
c00230bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230c0:	83 ec 0c             	sub    esp,0xc
c00230c3:	50                   	push   eax
c00230c4:	e8 93 b7 fe ff       	call   c000e85c <HardDiskController::~HardDiskController()>
c00230c9:	83 c4 10             	add    esp,0x10
c00230cc:	90                   	nop
c00230cd:	83 c4 0c             	add    esp,0xc
c00230d0:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c00230d2 <SATABus::~SATABus()>:
c00230d2:	83 ec 0c             	sub    esp,0xc
c00230d5:	83 ec 0c             	sub    esp,0xc
c00230d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00230dc:	e8 cd ff ff ff       	call   c00230ae <SATABus::~SATABus()>
c00230e1:	83 c4 10             	add    esp,0x10
c00230e4:	83 ec 08             	sub    esp,0x8
c00230e7:	68 64 01 00 00       	push   0x164
c00230ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00230f0:	e8 ef 9d fe ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c00230f5:	83 c4 10             	add    esp,0x10
c00230f8:	83 c4 0c             	add    esp,0xc
c00230fb:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c00230fc <ATA::~ATA()>:
c00230fc:	83 ec 0c             	sub    esp,0xc
c00230ff:	ba e4 69 02 c0       	mov    edx,0xc00269e4
c0023104:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023108:	89 10                	mov    DWORD PTR [eax],edx
c002310a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002310e:	83 ec 0c             	sub    esp,0xc
c0023111:	50                   	push   eax
c0023112:	e8 27 b8 fe ff       	call   c000e93e <PhysicalDisk::~PhysicalDisk()>
c0023117:	83 c4 10             	add    esp,0x10
c002311a:	90                   	nop
c002311b:	83 c4 0c             	add    esp,0xc
c002311e:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0023120 <ATA::~ATA()>:
c0023120:	83 ec 0c             	sub    esp,0xc
c0023123:	83 ec 0c             	sub    esp,0xc
c0023126:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002312a:	e8 cd ff ff ff       	call   c00230fc <ATA::~ATA()>
c002312f:	83 c4 10             	add    esp,0x10
c0023132:	83 ec 08             	sub    esp,0x8
c0023135:	68 7c 01 00 00       	push   0x17c
c002313a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002313e:	e8 a1 9d fe ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c0023143:	83 c4 10             	add    esp,0x10
c0023146:	83 c4 0c             	add    esp,0xc
c0023149:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c002314a <ATAPI::~ATAPI()>:
c002314a:	83 ec 0c             	sub    esp,0xc
c002314d:	ba 5c 6a 02 c0       	mov    edx,0xc0026a5c
c0023152:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023156:	89 10                	mov    DWORD PTR [eax],edx
c0023158:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002315c:	83 ec 0c             	sub    esp,0xc
c002315f:	50                   	push   eax
c0023160:	e8 d9 b7 fe ff       	call   c000e93e <PhysicalDisk::~PhysicalDisk()>
c0023165:	83 c4 10             	add    esp,0x10
c0023168:	90                   	nop
c0023169:	83 c4 0c             	add    esp,0xc
c002316c:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c002316e <ATAPI::~ATAPI()>:
c002316e:	83 ec 0c             	sub    esp,0xc
c0023171:	83 ec 0c             	sub    esp,0xc
c0023174:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023178:	e8 cd ff ff ff       	call   c002314a <ATAPI::~ATAPI()>
c002317d:	83 c4 10             	add    esp,0x10
c0023180:	83 ec 08             	sub    esp,0x8
c0023183:	68 84 01 00 00       	push   0x184
c0023188:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002318c:	e8 53 9d fe ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c0023191:	83 c4 10             	add    esp,0x10
c0023194:	83 c4 0c             	add    esp,0xc
c0023197:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0023198 <SATA::~SATA()>:
c0023198:	83 ec 0c             	sub    esp,0xc
c002319b:	ba 98 6c 02 c0       	mov    edx,0xc0026c98
c00231a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231a4:	89 10                	mov    DWORD PTR [eax],edx
c00231a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231aa:	83 ec 0c             	sub    esp,0xc
c00231ad:	50                   	push   eax
c00231ae:	e8 8b b7 fe ff       	call   c000e93e <PhysicalDisk::~PhysicalDisk()>
c00231b3:	83 c4 10             	add    esp,0x10
c00231b6:	90                   	nop
c00231b7:	83 c4 0c             	add    esp,0xc
c00231ba:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c00231bc <SATA::~SATA()>:
c00231bc:	83 ec 0c             	sub    esp,0xc
c00231bf:	83 ec 0c             	sub    esp,0xc
c00231c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00231c6:	e8 cd ff ff ff       	call   c0023198 <SATA::~SATA()>
c00231cb:	83 c4 10             	add    esp,0x10
c00231ce:	83 ec 08             	sub    esp,0x8
c00231d1:	68 7c 01 00 00       	push   0x17c
c00231d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00231da:	e8 05 9d fe ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c00231df:	83 c4 10             	add    esp,0x10
c00231e2:	83 c4 0c             	add    esp,0xc
c00231e5:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c00231e6 <SATAPI::~SATAPI()>:
c00231e6:	83 ec 0c             	sub    esp,0xc
c00231e9:	ba 04 6e 02 c0       	mov    edx,0xc0026e04
c00231ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231f2:	89 10                	mov    DWORD PTR [eax],edx
c00231f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231f8:	83 ec 0c             	sub    esp,0xc
c00231fb:	50                   	push   eax
c00231fc:	e8 3d b7 fe ff       	call   c000e93e <PhysicalDisk::~PhysicalDisk()>
c0023201:	83 c4 10             	add    esp,0x10
c0023204:	90                   	nop
c0023205:	83 c4 0c             	add    esp,0xc
c0023208:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c002320a <SATAPI::~SATAPI()>:
c002320a:	83 ec 0c             	sub    esp,0xc
c002320d:	83 ec 0c             	sub    esp,0xc
c0023210:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023214:	e8 cd ff ff ff       	call   c00231e6 <SATAPI::~SATAPI()>
c0023219:	83 c4 10             	add    esp,0x10
c002321c:	83 ec 08             	sub    esp,0x8
c002321f:	68 84 01 00 00       	push   0x184
c0023224:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023228:	e8 b7 9c fe ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c002322d:	83 c4 10             	add    esp,0x10
c0023230:	83 c4 0c             	add    esp,0xc
c0023233:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0023234 <IOAPIC::~IOAPIC()>:
c0023234:	83 ec 0c             	sub    esp,0xc
c0023237:	ba 5c 6f 02 c0       	mov    edx,0xc0026f5c
c002323c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023240:	89 10                	mov    DWORD PTR [eax],edx
c0023242:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023246:	83 ec 0c             	sub    esp,0xc
c0023249:	50                   	push   eax
c002324a:	e8 f5 b0 fe ff       	call   c000e344 <Device::~Device()>
c002324f:	83 c4 10             	add    esp,0x10
c0023252:	90                   	nop
c0023253:	83 c4 0c             	add    esp,0xc
c0023256:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0023258 <IOAPIC::~IOAPIC()>:
c0023258:	83 ec 0c             	sub    esp,0xc
c002325b:	83 ec 0c             	sub    esp,0xc
c002325e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023262:	e8 cd ff ff ff       	call   c0023234 <IOAPIC::~IOAPIC()>
c0023267:	83 c4 10             	add    esp,0x10
c002326a:	83 ec 08             	sub    esp,0x8
c002326d:	68 68 01 00 00       	push   0x168
c0023272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023276:	e8 69 9c fe ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c002327b:	83 c4 10             	add    esp,0x10
c002327e:	83 c4 0c             	add    esp,0xc
c0023281:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0023282 <APIC::~APIC()>:
c0023282:	83 ec 0c             	sub    esp,0xc
c0023285:	ba 14 6f 02 c0       	mov    edx,0xc0026f14
c002328a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002328e:	89 10                	mov    DWORD PTR [eax],edx
c0023290:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023294:	83 ec 0c             	sub    esp,0xc
c0023297:	50                   	push   eax
c0023298:	e8 ad ba fe ff       	call   c000ed4a <InterruptController::~InterruptController()>
c002329d:	83 c4 10             	add    esp,0x10
c00232a0:	90                   	nop
c00232a1:	83 c4 0c             	add    esp,0xc
c00232a4:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c00232a6 <APIC::~APIC()>:
c00232a6:	83 ec 0c             	sub    esp,0xc
c00232a9:	83 ec 0c             	sub    esp,0xc
c00232ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00232b0:	e8 cd ff ff ff       	call   c0023282 <APIC::~APIC()>
c00232b5:	83 c4 10             	add    esp,0x10
c00232b8:	83 ec 08             	sub    esp,0x8
c00232bb:	68 58 21 00 00       	push   0x2158
c00232c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00232c4:	e8 1b 9c fe ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c00232c9:	83 c4 10             	add    esp,0x10
c00232cc:	83 c4 0c             	add    esp,0xc
c00232cf:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c00232d0 <PIC::~PIC()>:
c00232d0:	83 ec 0c             	sub    esp,0xc
c00232d3:	ba ac 6f 02 c0       	mov    edx,0xc0026fac
c00232d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232dc:	89 10                	mov    DWORD PTR [eax],edx
c00232de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232e2:	83 ec 0c             	sub    esp,0xc
c00232e5:	50                   	push   eax
c00232e6:	e8 5f ba fe ff       	call   c000ed4a <InterruptController::~InterruptController()>
c00232eb:	83 c4 10             	add    esp,0x10
c00232ee:	90                   	nop
c00232ef:	83 c4 0c             	add    esp,0xc
c00232f2:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c00232f4 <PIC::~PIC()>:
c00232f4:	83 ec 0c             	sub    esp,0xc
c00232f7:	83 ec 0c             	sub    esp,0xc
c00232fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00232fe:	e8 cd ff ff ff       	call   c00232d0 <PIC::~PIC()>
c0023303:	83 c4 10             	add    esp,0x10
c0023306:	83 ec 08             	sub    esp,0x8
c0023309:	68 58 21 00 00       	push   0x2158
c002330e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023312:	e8 cd 9b fe ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c0023317:	83 c4 10             	add    esp,0x10
c002331a:	83 c4 0c             	add    esp,0xc
c002331d:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0023320 <APICTimer::~APICTimer()>:
c0023320:	83 ec 0c             	sub    esp,0xc
c0023323:	ba 00 70 02 c0       	mov    edx,0xc0027000
c0023328:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002332c:	89 10                	mov    DWORD PTR [eax],edx
c002332e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023332:	83 ec 0c             	sub    esp,0xc
c0023335:	50                   	push   eax
c0023336:	e8 d9 d7 fe ff       	call   c0010b14 <Timer::~Timer()>
c002333b:	83 c4 10             	add    esp,0x10
c002333e:	90                   	nop
c002333f:	83 c4 0c             	add    esp,0xc
c0023342:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0023344 <APICTimer::~APICTimer()>:
c0023344:	83 ec 0c             	sub    esp,0xc
c0023347:	83 ec 0c             	sub    esp,0xc
c002334a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002334e:	e8 cd ff ff ff       	call   c0023320 <APICTimer::~APICTimer()>
c0023353:	83 c4 10             	add    esp,0x10
c0023356:	83 ec 08             	sub    esp,0x8
c0023359:	68 60 01 00 00       	push   0x160
c002335e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023362:	e8 7d 9b fe ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c0023367:	83 c4 10             	add    esp,0x10
c002336a:	83 c4 0c             	add    esp,0xc
c002336d:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0023370 <PIT::~PIT()>:
c0023370:	83 ec 0c             	sub    esp,0xc
c0023373:	ba 50 70 02 c0       	mov    edx,0xc0027050
c0023378:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002337c:	89 10                	mov    DWORD PTR [eax],edx
c002337e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023382:	83 ec 0c             	sub    esp,0xc
c0023385:	50                   	push   eax
c0023386:	e8 89 d7 fe ff       	call   c0010b14 <Timer::~Timer()>
c002338b:	83 c4 10             	add    esp,0x10
c002338e:	90                   	nop
c002338f:	83 c4 0c             	add    esp,0xc
c0023392:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0023394 <PIT::~PIT()>:
c0023394:	83 ec 0c             	sub    esp,0xc
c0023397:	83 ec 0c             	sub    esp,0xc
c002339a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002339e:	e8 cd ff ff ff       	call   c0023370 <PIT::~PIT()>
c00233a3:	83 c4 10             	add    esp,0x10
c00233a6:	83 ec 08             	sub    esp,0x8
c00233a9:	68 5c 01 00 00       	push   0x15c
c00233ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00233b2:	e8 2d 9b fe ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c00233b7:	83 c4 10             	add    esp,0x10
c00233ba:	83 c4 0c             	add    esp,0xc
c00233bd:	c3                   	ret    
